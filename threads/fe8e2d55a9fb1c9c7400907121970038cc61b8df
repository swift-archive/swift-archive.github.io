<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[META] Gmane and Swift Evolution</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>July 31, 2016 at 04:00:00pm</p></header><div class="content"><p>Gmane.org &lt;http://gmane.org/&gt; is shutting down. http://ostatic.com/blog/mint-18-xfce-imminent-gmane-org-shutting-down &lt;http://ostatic.com/blog/mint-18-xfce-imminent-gmane-org-shutting-down&gt; writes:<br></p><p>&gt; &quot;Long time mailing list archive site Gmane.org is shutting down. Gmane has been the home for technical mailing list references since 2002. But it&#39;s no longer fun for founder and only maintainer Lars Ingebrigtsen. He&#39;s been sued in India and threatened with legal action in at least France, among other annoyances. The straw that broke Ingebrigtsen&#39;s back was a sustained denial of service &lt;https://lars.ingebrigtsen.no/2016/07/28/the-end-of-gmane/&gt; attack throughout the month of July. He&#39;s been wondering a lot lately if it&#39;s all worth it. So, he&#39;s decided &lt;https://lars.ingebrigtsen.no/2016/07/28/the-end-of-gmane/comment-page-1/#comment-13502&gt; to move the mail and news servers to new hosting. However, Ingebrigtsen is indeed discontinuing the web-based archive. He said he&#39;s just &quot;fed up.&quot; He&#39;s willing to send a disk with the web server archives to anyone who wants to take it over. But with the Gmane.org web presence gone, it feels like the end of an era. There is much wailing and gnashing of teeth throughout the community with some even trying to get a petition started.&quot;<br></p><p>Because of this shutdown, numerous documents in the Swift Evolution github archive no longer point to valid web links. I have pasted a list of gmane links at the end of this message. As gmane&#39;s &quot;robots.txt&quot; disallowed crawling, Google has not preserved the titles or text of the links, which makes finding some of these a little tricky.<br></p><p>Here are the remaining links that are not yet converted. Please consider adopting a proposal, tracking down its links, and mailing this thread with the proposal number, gmane links and pipermail equivalents. Pipermail is located at https://lists.swift.org/pipermail/swift-evolution/ &lt;https://lists.swift.org/pipermail/swift-evolution/&gt;. Some of these may refer to  build dev discussions instead of evolution ones. If you can, please track down to the exact message for rationale, and the thread for discussion and review links.<br></p><p>-- E<br></p><p>proposals/0010-add-staticstring-unicodescalarview.md:* Status: **Rejected** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7697))<br>proposals/0010-add-staticstring-unicodescalarview.md:[Swift Evolution Discussion Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/9366), [Review](http://thread.gmane.org/gmane.comp.lang.swift.evolution/2434)<br>proposals/0011-replace-typealias-associated.md:* Status: **Accepted for Swift 2.2** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/2883), [Bug](https://bugs.swift.org/browse/SR-511))<br>proposals/0011-replace-typealias-associated.md:[Swift Evolution Discussion Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/9301)<br>proposals/0012-add-noescape-to-public-library-api.md:[Swift Evolution Discussion Thread](http://thread.gmane.org/gmane.comp.lang.swift.corelibs/53)<br>proposals/0013-remove-partial-application-super.md:[Swift Evolution Discussion Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/9778), [Review](http://thread.gmane.org/gmane.comp.lang.swift.evolution/2880)<br>proposals/0014-constrained-AnySequence.md:* Status: **Accepted for Swift 2.2** ([Rationale](http://article.gmane.org/gmane.comp.lang.swift.evolution/9746/match=constraining+anysequence), [Bug](https://bugs.swift.org/browse/SR-474))<br>proposals/0014-constrained-AnySequence.md:[Swift Evolution Discussion](http://thread.gmane.org/gmane.comp.lang.swift.evolution/1893)<br>proposals/0015-tuple-comparison-operators.md:* Status: **Implemented in Swift 2.2** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/11423/focus=1248), [Pull request](https://github.com/apple/swift/pull/408))<br>proposals/0015-tuple-comparison-operators.md:[Initial Discussion](http://article.gmane.org/gmane.comp.lang.swift.evolution/980/match=tuple+comparison), [General Discussion](http://thread.gmane.org/gmane.comp.lang.swift.evolution/9723), [Review](http://thread.gmane.org/gmane.comp.lang.swift.evolution/11423/focus=732)<br>proposals/0016-initializers-for-converting-unsafe-pointers-to-ints.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/13429), [Bug](https://bugs.swift.org/browse/SR-1115))<br>proposals/0016-initializers-for-converting-unsafe-pointers-to-ints.md:[Swift Evolution Discussion](http://thread.gmane.org/gmane.comp.lang.swift.evolution/10044), [Review](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12696)<br>proposals/0017-convert-unmanaged-to-use-unsafepointer.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16118))<br>proposals/0017-convert-unmanaged-to-use-unsafepointer.md:[Swift Evolution Discussion](http://thread.gmane.org/gmane.comp.lang.swift.evolution/9877), [Proposed Rewrite Discussion](http://thread.gmane.org/gmane.comp.lang.swift.evolution/68/)<br>proposals/0019-package-manager-testing.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/4103), [Bug](https://bugs.swift.org/browse/SR-592))<br>proposals/0019-package-manager-testing.md:[SE Review Link](http://thread.gmane.org/gmane.comp.lang.swift.evolution/3583)<br>proposals/0021-generalized-naming.md:* Status: **Implemented in Swift 2.2** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/3317/focus=3961))<br>proposals/0022-objc-selectors.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/4622))<br>proposals/0022-objc-selectors.md:Swift-evolution thread: [here](http://thread.gmane.org/gmane.comp.lang.swift.evolution/1384/focus=1403)<br>proposals/0023-api-guidelines.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/8585))<br>proposals/0024-optional-value-setter.md:* Status: **Rejected** ([Rationale](http://article.gmane.org/gmane.comp.lang.swift.evolution/7694))<br>proposals/0025-scoped-access-level.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12183/focus=13584), [Bug](https://bugs.swift.org/browse/SR-1275))<br>proposals/0025-scoped-access-level.md:[Swift Evolution Discussion](http://thread.gmane.org/gmane.comp.lang.swift.evolution/9334), [Next Steps Discussion](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12183)<br>proposals/0026-abstract-classes-and-methods.md:* Status: **Deferred** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/8809))<br>proposals/0027-string-from-code-units.md:* Status: **Rejected** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7695))<br>proposals/0028-modernizing-debug-identifiers.md:* Status: **Implemented in Swift 2.2** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/5805), Bug: [SR-669](https://bugs.swift.org/browse/SR-669))<br>proposals/0029-remove-implicit-tuple-splat.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/6405))<br>proposals/0030-property-behavior-decls.md:* Status: **Rejected** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7735))<br>proposals/0030-property-behavior-decls.md:[Swift Evolution Discussion](http://thread.gmane.org/gmane.comp.lang.swift.evolution/11976)&lt;br/&gt;<br>proposals/0030-property-behavior-decls.md:[Review](http://thread.gmane.org/gmane.comp.lang.swift.evolution/6426)<br>proposals/0031-adjusting-inout-declarations.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7394))<br>proposals/0031-adjusting-inout-declarations.md:*The initial Swift-Evolution discussion of this topic took place in the &quot;[Replace &#39;inout&#39; with &amp;](http://comments.gmane.org/gmane.comp.lang.swift.evolution/2751)&quot; thread.*<br>proposals/0032-sequencetype-find.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16116))<br>proposals/0033-import-objc-constants.md:* Status: **Implemented in Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/8817))<br>proposals/0034-disambiguating-line.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/8156), [Implementation Bug](https://bugs.swift.org/browse/SR-840))<br>proposals/0034-disambiguating-line.md:The discussion took place on-line in the [*\[Discussion\]: Renaming #line, the line control statement*](http://comments.gmane.org/gmane.comp.lang.swift.evolution/5815) thread.<br>proposals/0035-limit-inout-capture.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7732), [Bug](https://bugs.swift.org/browse/SR-807))<br>proposals/0036-enum-dot.md:*Discussion took place on the Swift Evolution mailing list in the [\[Discussion\] Enum Leading Dot Prefixes](http://article.gmane.org/gmane.comp.lang.swift.evolution/6684) thread. This proposal uses lowerCamelCase enumeration cases in compliance with<br>proposals/0036-enum-dot.md:current [API Guideline Working Group guidance](http://news.gmane.org/gmane.comp.lang.swift.evolution).*<br>proposals/0037-clarify-comments-and-operators.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12350), [Bug](https://bugs.swift.org/browse/SR-960))<br>proposals/0037-clarify-comments-and-operators.md:Swift-evolution thread: [started here](http://thread.gmane.org/gmane.comp.lang.swift.evolution/605)<br>proposals/0037-clarify-comments-and-operators.md:and [continued here](http://thread.gmane.org/gmane.comp.lang.swift.evolution/2855).<br>proposals/0038-swiftpm-c-language-targets.md:[Swift Evolution Review Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7293)<br>proposals/0039-playgroundliterals.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/9149/), [Bug](https://bugs.swift.org/browse/SR-917))<br>proposals/0039-playgroundliterals.md:*Discussion took place on the Swift Evolution mailing list in the [\[Discussion\] Modernizing Playground Literals](http://article.gmane.org/gmane.comp.lang.swift.evolution/7124) thread. Thanks to [Chris Lattner](https://github.com/lattner) for suggesting this enhancement.*<br>proposals/0040-attributecolons.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/8920))<br>proposals/0040-attributecolons.md:*Discussion took place on the Swift Evolution mailing list in the [\[Discussion\] Replacing Equal Signs with Colons For Attribute Arguments](http://article.gmane.org/gmane.comp.lang.swift.evolution/7271) thread. Thanks to [Doug Gregor](https://github.com/DougGregor) for suggesting this enhancement.*<br>proposals/0042-flatten-method-types.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12828), [Bug](https://bugs.swift.org/browse/SR-1051))<br>proposals/0043-declare-variables-in-case-labels-with-multiple-patterns.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12827))<br>proposals/0043-declare-variables-in-case-labels-with-multiple-patterns.md:Swift-evolution thread: [here](http://thread.gmane.org/gmane.comp.lang.swift.evolution/4256)<br>proposals/0044-import-as-member.md:* Status: **Implemented in Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12842), [Bug](https://bugs.swift.org/browse/SR-1053))<br>proposals/0044-import-as-member.md:[Swift-evolution thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/8437)&lt;br /&gt;<br>proposals/0044-import-as-member.md:[Review](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12274)<br>proposals/0045-scan-takewhile-dropwhile.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16119), [Bug](https://bugs.swift.org/browse/SR-1516))<br>proposals/0045-scan-takewhile-dropwhile.md:[Proposal: Add scan, takeWhile, dropWhile, and iterate to the stdlib](http://thread.gmane.org/gmane.comp.lang.swift.evolution/1515)<br>proposals/0045-scan-takewhile-dropwhile.md:[rationale]: http://article.gmane.org/gmane.comp.lang.swift.evolution/16119<br>proposals/0046-first-label.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12352), [Bug](https://bugs.swift.org/browse/SR-961))<br>proposals/0046-first-label.md:*Discussion took place on the Swift Evolution mailing list in the [Make the first parameter in a function declaration follow the same rules as the others](http://article.gmane.org/gmane.comp.lang.swift.evolution/9029) thread.*<br>proposals/0047-nonvoid-warn.md:* Status: **Accepted (with [revisions](http://article.gmane.org/gmane.comp.lang.swift.evolution/12833))**<br>proposals/0047-nonvoid-warn.md:This proposal was discussed on-list in a variety of threads, most recently [Make non-void functions &lt;at&gt; warn_unused_result	by default](http://article.gmane.org/gmane.comp.lang.swift.evolution/8417).<br>proposals/0048-generic-typealias.md:* Status: **Implemented in Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/14516/))<br>proposals/0050-floating-point-stride.md:* Status: **Withdrawn** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/19060))<br>proposals/0050-floating-point-stride.md:This proposal was discussed on-list in the [&quot;\[Discussion\] stride behavior and a little bit of a call-back to digital numbers&quot;](http://article.gmane.org/gmane.comp.lang.swift.evolution/8014) thread.<br>proposals/0051-stride-semantics.md:This proposal was discussed on-list in the [&quot;\[Discussion\] stride behavior and a little bit of a call-back to digital numbers&quot;](http://article.gmane.org/gmane.comp.lang.swift.evolution/8014) thread.<br>proposals/0052-iterator-post-nil-guarantee.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16115))<br>proposals/0052-iterator-post-nil-guarantee.md:Swift-evolution thread: [\[Proposal\] Change guarantee for GeneratorType.next() to always return nil past end](http://thread.gmane.org/gmane.comp.lang.swift.evolution/8519)<br>proposals/0052-iterator-post-nil-guarantee.md:In both cases, the extra state and branching that is sometimes needed has potential for performance implications. Though performance is not the *key* concern, iterators are often used in tight loops and can affect very commonly used algorithms. The original rationale for introducing the precondition was in fact because of concerns it might add storage and performance burden to some implementations of `IteratorType` (see [here](http://article.gmane.org/gmane.comp.lang.swift.evolution/8532)). However in light of implementation experience, it appears including the guarantee would likely be beneficial for performance:<br>proposals/0053-remove-let-from-function-parameters.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/13188))<br>proposals/0054-abolish-iuo.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/13490))<br>proposals/0055-optional-unsafe-pointers.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/13511))<br>proposals/0057-importing-objc-generics.md:Swift-evolution thread: [here](http://thread.gmane.org/gmane.comp.lang.swift.evolution/2886)<br>proposals/0058-objectivecbridgeable.md:Swift-evolution thread: [\[Idea\] ObjectiveCBridgeable](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7852/)<br>proposals/0058-objectivecbridgeable.md:Swift 3 ([thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/14419)). We agree that it would be valuable to give library authors the<br>proposals/0059-updated-set-apis.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/14785/))<br>proposals/0060-defaulted-parameter-order.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16894), [Bug](https://bugs.swift.org/browse/SR-1489))<br>proposals/0061-autoreleasepool-signature.md:* Status: **Accepted for Swift 3**  ~~([Bug](https://bugs.swift.org/browse/SR-1394))~~  ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15982), [Bug](https://bugs.swift.org/browse/SR-842))<br>proposals/0062-objc-keypaths.md:[SE Draft](http://thread.gmane.org/gmane.comp.lang.swift.evolution/8665), [Review thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/14011/), [Secondary review thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/14053)<br>proposals/0063-swiftpm-system-module-search-paths.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/14638))<br>proposals/0064-property-selectors.md:* Status: **Implemented in Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/14539/))<br>proposals/0064-property-selectors.md:[Original swift-evolution thread](http://article.gmane.org/gmane.comp.lang.swift.evolution/7614)<br>proposals/0064-property-selectors.md:[Follow-up swift-evolution thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7780)<br>proposals/0065-collections-move-indices.md:* [Swift-evolution thread](http://news.gmane.org/find-root.php?message_id=CA%2bY5xYfqKR6yC2Q%2dG7D9N7FeY%3dxs1x3frq%3d%3dsyGoqYpOcL9yrw%40mail.gmail.com)<br>proposals/0065-collections-move-indices.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15549))<br>proposals/0066-standardize-function-type-syntax.md:On May 5, 2016, the core team decided to **accept** this proposal ([thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16245)).<br>proposals/0067-floating-point-protocols.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15953))<br>proposals/0067-floating-point-protocols.md:[Proposal draft](http://thread.gmane.org/gmane.comp.lang.swift.evolution/14545), [Review](http://thread.gmane.org/gmane.comp.lang.swift.evolution/14876)<br>proposals/0068-universal-self.md:*This proposal was discussed on the Swift Evolution list in the [\[Pitch\] Adding a Self type name shortcut for static member access](http://thread.gmane.org/gmane.comp.lang.swift.evolution/13708/focus=13712) thread.*<br>proposals/0069-swift-mutability-for-foundation.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16114))<br>proposals/0069-swift-mutability-for-foundation.md:[Swift Evolution Discussion](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15080), [Swift Evolution Review](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15281)<br>proposals/0070-optional-requirements.md:* Status: **Accepted for Swift 3**  ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15983), [Bug](https://bugs.swift.org/browse/SR-1395))<br>proposals/0070-optional-requirements.md:[eliminate optional requirements](http://thread.gmane.org/gmane.comp.lang.swift.evolution/14046),<br>proposals/0070-optional-requirements.md:[make Swift protocols support optional requirements](http://thread.gmane.org/gmane.comp.lang.swift.devel/1316) and<br>proposals/0070-optional-requirements.md:[make optional protocol requirements first class citizens](http://thread.gmane.org/gmane.comp.lang.swift.evolution/13347).<br>proposals/0070-optional-requirements.md:[here](http://thread.gmane.org/gmane.comp.lang.swift.devel/1316) and<br>proposals/0070-optional-requirements.md:[here](http://thread.gmane.org/gmane.comp.lang.swift.evolution/13347)).<br>proposals/0070-optional-requirements.md:implementations](http://thread.gmane.org/gmane.comp.lang.swift.evolution/14046)<br>proposals/0071-member-keywords.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15954))<br>proposals/0071-member-keywords.md:This idea was initially discussed in [this swift-evolution thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7991).<br>proposals/0072-eliminate-implicit-bridging-conversions.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16240))<br>proposals/0073-noescape-once.md:On May 11, 2016, the core team decided to **Reject** this proposal for Swift 3 ([thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16896)).<br>proposals/0074-binary-search.md:On May 11, 2016, the core team decided to **Reject** this proposal ([thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16897)).  The<br>proposals/0075-import-test.md:modules was [first introduced](http://article.gmane.org/gmane.comp.lang.swift.evolution/7516/match=darwin)<br>proposals/0075-import-test.md:[Swift Evolution Review Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16620)<br>proposals/0076-copying-to-unsafe-mutable-pointer-with-unsafe-pointer-source.md:* Status: **Accepted with Revisions for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16898), [Bug](https://bugs.swift.org/browse/SR-1490))<br>proposals/0079-upgrade-self-from-weak-to-strong.md:[Swift Evolution Discussion Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7582), [Draft Proposal](http://thread.gmane.org/gmane.comp.lang.swift.evolution/6064)<br>proposals/0080-failable-numeric-initializers.md:* Status: **Accepted with Revisions for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16899), [Bug](https://bugs.swift.org/browse/SR-1491))<br>proposals/0081-move-where-expression.md:[\[Pitch\] Moving where Clauses Out Of Parameter Lists](http://thread.gmane.org/gmane.comp.lang.swift.evolution/13886/focus=13899)<br>proposals/0082-swiftpm-package-edit.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16614))<br>proposals/0082-swiftpm-package-edit.md:[Proposal Announcement](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15279)<br>proposals/0082-swiftpm-package-edit.md:[Review announcement](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16078)<br>proposals/0085-package-manager-command-name.md:* Status: **Implemented in Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.build/1/focus=26))<br>proposals/0085-package-manager-command-name.md:[Swift Build Review Thread](http://thread.gmane.org/gmane.comp.lang.swift.build/1/)<br>proposals/0085-package-manager-command-name.md:[Swift Evolution Review Thread](http://thread.gmane.org/gmane.comp.lang.swift.build/1/focus=16764)<br>proposals/0086-drop-foundation-ns.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/23869))<br>proposals/0086-drop-foundation-ns.md:[Swift Evolution Discussion Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16298)<br>proposals/0086-drop-foundation-ns.md:[Review Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16509)<br>proposals/0088-libdispatch-for-swift3.md:* Status: **Accepted with Revisions** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17819))<br>proposals/0088-libdispatch-for-swift3.md:[Review thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16745)<br>proposals/0092-typealiases-in-protocols.md:* Status: **Implemented in Swift 3.0** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17317))<br>proposals/0094-sequence-function.md:Swift-evolution thread: [Discussion thread topic for that proposal](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15743/focus=17108)<br>proposals/0094-sequence-function.md:[SE-0045a]: http://article.gmane.org/gmane.comp.lang.swift.evolution/16119<br>proposals/0095-any-as-existential.md:Discussion threads: [pre-proposal](https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160516/018109.html), [review thread 1](http://thread.gmane.org/gmane.comp.lang.swift.evolution/18349), [2](http://thread.gmane.org/gmane.comp.lang.swift.evolution/18350/focus=18447), [3](http://thread.gmane.org/gmane.comp.lang.swift.evolution/18351/focus=18440), [4](http://thread.gmane.org/gmane.comp.lang.swift.evolution/18518), [post-review thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/19463)<br>proposals/0096-dynamictype.md:[RFC: didset and willset](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17534)<br>proposals/0097-negative-attributes.md:[RFC: didset and willset](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17534)<br>proposals/0098-didset-capitalization.md:[RFC: didset and willset](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17534)<br>proposals/0099-conditionclauses.md:[\[Pitch\] making where and ,	interchangeable in guard conditions](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17926)<br>proposals/0101-standardizing-sizeof-naming.md:* Swift Evolution Pitch: [\[Pitch\] Renaming sizeof, sizeofValue, strideof,	strideofValue](http://thread.gmane.org/gmane.comp.lang.swift.evolution/19459)<br>proposals/0101-standardizing-sizeof-naming.md:* [Earlier Discussions](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15830)<br>proposals/0101-standardizing-sizeof-naming.md:* [SE-0101 Review](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21103)<br>proposals/0103-make-noescape-default.md:* [Make non-escaping closures the default](http://thread.gmane.org/gmane.comp.lang.swift.evolution/19756)<br>proposals/0105-remove-where-from-forin-loops.md:Swift Evolution Discussion: [\[Pitch\] Retiring `where` from for-in loops](http://thread.gmane.org/gmane.comp.lang.swift.evolution/20142)<br>proposals/0106-rename-osx-to-macos.md:Swift Evolution Discussion: [\[DRAFT\] Aliasing the OS X Platform Configuration	Test](http://thread.gmane.org/gmane.comp.lang.swift.evolution/20815)<br>proposals/0108-remove-assoctype-inference.md:swift-evolution thread: [pre-proposal](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21714)<br>proposals/0108-remove-assoctype-inference.md:As Douglas Gregor (original author of the relevant type inference code) [puts it](http://article.gmane.org/gmane.comp.lang.swift.evolution/22058):<br>proposals/0108-remove-assoctype-inference.md:To some extent, this is an issue inherent to any design which makes no distinctions at the site of implementation between members intended to satisfy protocol requirements and members that are explicitly not intended to satisfy protocol requirements. Rather than adding keywords to create this distinction, Douglas Gregor has [proposed and implemented type checker heuristics](http://article.gmane.org/gmane.comp.lang.swift.devel/1799) that will generate warnings when a programmer implements a member that &quot;looks like&quot; it should fulfill a protocol requirement but does not actually do so. This is one possible mitigation strategy that should be revisited as a way to decrease the possible impact of removing associated type witness inference from the compiler.<br>proposals/0108-remove-assoctype-inference.md:As well, Dave Abrahams expresses a [potential issue](http://article.gmane.org/gmane.comp.lang.swift.evolution/21892):<br>proposals/0109-remove-boolean.md:* Status: Accepted ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/23844))<br>proposals/0109-remove-boolean.md:[Discussion thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21559)<br>proposals/0110-distingish-single-tuple-arg.md:Discussion: [pre-proposal](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21732)<br>proposals/0111-remove-arg-label-type-significance.md:Discussion: [pre-proposal](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21369)<br>proposals/0114-buffer-naming.md:[Swift Evolution Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/22127)<br>proposals/0115-literal-syntax-protocols.md:Swift-evolution thread: [Literal Syntax Protocols](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21441)<br>proposals/0115-literal-syntax-protocols.md:An earlier thread that resulted in this proposal: [Revisiting SE-0041 Names](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21290)<br>proposals/0117-non-public-subclassable-by-default.md:Swift-evolution thread: http://thread.gmane.org/gmane.comp.lang.swift.evolution/21930/<br>proposals/0118-closure-parameter-names-and-labels.md:[Take 2: Stdlib closure argument labels and parameter names](http://thread.gmane.org/gmane.comp.lang.swift.evolution/22188)<br>proposals/0118-closure-parameter-names-and-labels.md:[Stdlib closure argument labels and parameter names ](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21046)<br>proposals/0121-remove-optional-comparison-operators.md:- [Optional comparison operators](http://thread.gmane.org/gmane.comp.lang.swift.evolution/23306) (most recent)<br>proposals/0121-remove-optional-comparison-operators.md:- [Possible bug with arithmetic optional comparison ?](http://thread.gmane.org/gmane.comp.lang.swift.devel/2089)<br>proposals/0121-remove-optional-comparison-operators.md:- [? suffix for &lt;, &gt;, &lt;=, &gt;= comparisons with optionals to prevent subtle bugs](http://thread.gmane.org/gmane.comp.lang.swift.evolution/10095)<br>proposals/0121-remove-optional-comparison-operators.md:If the coercion is not removed (if no change is made), the results of comparisons with Optional values are sometimes **surprising**, making it easy to write bugs. In a thread from December 2015, [Al Skipp offers](http://thread.gmane.org/gmane.comp.lang.swift.evolution/10095/focus=10098) the following example:<br>proposals/0122-use-colons-for-subscript-type-declarations.md:Swift-evolution thread: [Discussion thread topic for that proposal](http://article.gmane.org/gmane.comp.lang.swift.evolution/23457)<br>proposals/0127-cleaning-up-stdlib-ptr-buffer.md:Swift-evolution thread: [Cleaning up stdlib Pointer and Buffer Routines](http://thread.gmane.org/gmane.comp.lang.swift.evolution/23093)<br>proposals/0131-anyhashable.md:Swift-evolution thread: [Add AnyHashable to the standard library](http://thread.gmane.org/gmane.comp.lang.swift.evolution/24835).<br>proposals/0132-sequence-end-ops.md:Swift-evolution thread: [[Draft] Rationalizing Sequence end-operation names](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21449/focus=23013)<br>proposals/0133-rename-flatten-to-joined.md:- [[Pitch] Unify joined(separator:) and flatten()](http://thread.gmane.org/gmane.comp.lang.swift.evolution/24707)<br>proposals/0133-rename-flatten-to-joined.md:- [[Pitch] Rename flatten() to joined() and give joined() for string sequences the empty string as the default parameter](http://thread.gmane.org/gmane.comp.lang.swift.evolution/24805)<br>proposals/0134-rename-string-properties.md:Swift-evolution thread: [Discussion thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/24955)<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160731/fe8eb8df/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[META] Gmane and Swift Evolution</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July 31, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Jul 31, 2016, at 3:40 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Gmane.org &lt;http://gmane.org/&gt; is shutting down. http://ostatic.com/blog/mint-18-xfce-imminent-gmane-org-shutting-down &lt;http://ostatic.com/blog/mint-18-xfce-imminent-gmane-org-shutting-down&gt; writes:<br>&gt; <br>&gt;&gt; &quot;Long time mailing list archive site Gmane.org &lt;http://gmane.org/&gt; is shutting down. Gmane has been the home for technical mailing list references since 2002. But it&#39;s no longer fun for founder and only maintainer Lars Ingebrigtsen. He&#39;s been sued in India and threatened with legal action in at least France, among other annoyances. The straw that broke Ingebrigtsen&#39;s back was a sustained denial of service &lt;https://lars.ingebrigtsen.no/2016/07/28/the-end-of-gmane/&gt; attack throughout the month of July. He&#39;s been wondering a lot lately if it&#39;s all worth it. So, he&#39;s decided &lt;https://lars.ingebrigtsen.no/2016/07/28/the-end-of-gmane/comment-page-1/#comment-13502&gt; to move the mail and news servers to new hosting. However, Ingebrigtsen is indeed discontinuing the web-based archive. He said he&#39;s just &quot;fed up.&quot; He&#39;s willing to send a disk with the web server archives to anyone who wants to take it over. But with the Gmane.org &lt;http://gmane.org/&gt; web presence gone, it feels like the end of an era. There is much wailing and gnashing of teeth throughout the community with some even trying to get a petition started.&quot;<br>&gt; <br>&gt; Because of this shutdown, numerous documents in the Swift Evolution github archive no longer point to valid web links. I have pasted a list of gmane links at the end of this message. As gmane&#39;s &quot;robots.txt&quot; disallowed crawling, Google has not preserved the titles or text of the links, which makes finding some of these a little tricky.<br>&gt; <br>&gt; Here are the remaining links that are not yet converted. Please consider adopting a proposal, tracking down its links, and mailing this thread with the proposal number, gmane links and pipermail equivalents. Pipermail is located at https://lists.swift.org/pipermail/swift-evolution/ &lt;https://lists.swift.org/pipermail/swift-evolution/&gt;. Some of these may refer to  build dev discussions instead of evolution ones. If you can, please track down to the exact message for rationale, and the thread for discussion and review links.<br></p><p>Completely agreed.  All of these should point to https://lists.swift.org (and always should have, exactly for reasons like this).  I’d appreciate any PRs to help clean up the evolution repo to point to https://lists.swift.org instead.<br></p><p>Thanks!<br></p><p>-Chris<br></p><p><br>&gt; <br>&gt; -- E<br>&gt; <br>&gt; proposals/0010-add-staticstring-unicodescalarview.md:* Status: **Rejected** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7697 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/7697&gt;))<br>&gt; proposals/0010-add-staticstring-unicodescalarview.md:[Swift Evolution Discussion Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/9366 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/9366&gt;), [Review](http://thread.gmane.org/gmane.comp.lang.swift.evolution/2434 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/2434&gt;)<br>&gt; proposals/0011-replace-typealias-associated.md:* Status: **Accepted for Swift 2.2** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/2883 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/2883&gt;), [Bug](https://bugs.swift.org/browse/SR-511 &lt;https://bugs.swift.org/browse/SR-511&gt;))<br>&gt; proposals/0011-replace-typealias-associated.md:[Swift Evolution Discussion Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/9301 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/9301&gt;)<br>&gt; proposals/0012-add-noescape-to-public-library-api.md:[Swift Evolution Discussion Thread](http://thread.gmane.org/gmane.comp.lang.swift.corelibs/53 &lt;http://thread.gmane.org/gmane.comp.lang.swift.corelibs/53&gt;)<br>&gt; proposals/0013-remove-partial-application-super.md:[Swift Evolution Discussion Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/9778 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/9778&gt;), [Review](http://thread.gmane.org/gmane.comp.lang.swift.evolution/2880 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/2880&gt;)<br>&gt; proposals/0014-constrained-AnySequence.md:* Status: **Accepted for Swift 2.2** ([Rationale](http://article.gmane.org/gmane.comp.lang.swift.evolution/9746/match=constraining+anysequence &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/9746/match=constraining+anysequence&gt;), [Bug](https://bugs.swift.org/browse/SR-474 &lt;https://bugs.swift.org/browse/SR-474&gt;))<br>&gt; proposals/0014-constrained-AnySequence.md:[Swift Evolution Discussion](http://thread.gmane.org/gmane.comp.lang.swift.evolution/1893 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/1893&gt;)<br>&gt; proposals/0015-tuple-comparison-operators.md:* Status: **Implemented in Swift 2.2** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/11423/focus=1248 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/11423/focus=1248&gt;), [Pull request](https://github.com/apple/swift/pull/408 &lt;https://github.com/apple/swift/pull/408&gt;))<br>&gt; proposals/0015-tuple-comparison-operators.md:[Initial Discussion](http://article.gmane.org/gmane.comp.lang.swift.evolution/980/match=tuple+comparison &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/980/match=tuple+comparison&gt;), [General Discussion](http://thread.gmane.org/gmane.comp.lang.swift.evolution/9723 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/9723&gt;), [Review](http://thread.gmane.org/gmane.comp.lang.swift.evolution/11423/focus=732 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/11423/focus=732&gt;)<br>&gt; proposals/0016-initializers-for-converting-unsafe-pointers-to-ints.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/13429 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/13429&gt;), [Bug](https://bugs.swift.org/browse/SR-1115 &lt;https://bugs.swift.org/browse/SR-1115&gt;))<br>&gt; proposals/0016-initializers-for-converting-unsafe-pointers-to-ints.md:[Swift Evolution Discussion](http://thread.gmane.org/gmane.comp.lang.swift.evolution/10044 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/10044&gt;), [Review](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12696 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/12696&gt;)<br>&gt; proposals/0017-convert-unmanaged-to-use-unsafepointer.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16118 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16118&gt;))<br>&gt; proposals/0017-convert-unmanaged-to-use-unsafepointer.md:[Swift Evolution Discussion](http://thread.gmane.org/gmane.comp.lang.swift.evolution/9877 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/9877&gt;), [Proposed Rewrite Discussion](http://thread.gmane.org/gmane.comp.lang.swift.evolution/68/ &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/68/&gt;)<br>&gt; proposals/0019-package-manager-testing.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/4103 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/4103&gt;), [Bug](https://bugs.swift.org/browse/SR-592 &lt;https://bugs.swift.org/browse/SR-592&gt;))<br>&gt; proposals/0019-package-manager-testing.md:[SE Review Link](http://thread.gmane.org/gmane.comp.lang.swift.evolution/3583 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/3583&gt;)<br>&gt; proposals/0021-generalized-naming.md:* Status: **Implemented in Swift 2.2** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/3317/focus=3961 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/3317/focus=3961&gt;))<br>&gt; proposals/0022-objc-selectors.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/4622 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/4622&gt;))<br>&gt; proposals/0022-objc-selectors.md:Swift-evolution thread: [here](http://thread.gmane.org/gmane.comp.lang.swift.evolution/1384/focus=1403 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/1384/focus=1403&gt;)<br>&gt; proposals/0023-api-guidelines.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/8585 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/8585&gt;))<br>&gt; proposals/0024-optional-value-setter.md:* Status: **Rejected** ([Rationale](http://article.gmane.org/gmane.comp.lang.swift.evolution/7694 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/7694&gt;))<br>&gt; proposals/0025-scoped-access-level.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12183/focus=13584 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/12183/focus=13584&gt;), [Bug](https://bugs.swift.org/browse/SR-1275 &lt;https://bugs.swift.org/browse/SR-1275&gt;))<br>&gt; proposals/0025-scoped-access-level.md:[Swift Evolution Discussion](http://thread.gmane.org/gmane.comp.lang.swift.evolution/9334 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/9334&gt;), [Next Steps Discussion](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12183 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/12183&gt;)<br>&gt; proposals/0026-abstract-classes-and-methods.md:* Status: **Deferred** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/8809 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/8809&gt;))<br>&gt; proposals/0027-string-from-code-units.md:* Status: **Rejected** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7695 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/7695&gt;))<br>&gt; proposals/0028-modernizing-debug-identifiers.md:* Status: **Implemented in Swift 2.2** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/5805 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/5805&gt;), Bug: [SR-669](https://bugs.swift.org/browse/SR-669 &lt;https://bugs.swift.org/browse/SR-669&gt;))<br>&gt; proposals/0029-remove-implicit-tuple-splat.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/6405 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/6405&gt;))<br>&gt; proposals/0030-property-behavior-decls.md:* Status: **Rejected** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7735 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/7735&gt;))<br>&gt; proposals/0030-property-behavior-decls.md:[Swift Evolution Discussion](http://thread.gmane.org/gmane.comp.lang.swift.evolution/11976 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/11976&gt;)&lt;br/&gt;<br>&gt; proposals/0030-property-behavior-decls.md:[Review](http://thread.gmane.org/gmane.comp.lang.swift.evolution/6426 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/6426&gt;)<br>&gt; proposals/0031-adjusting-inout-declarations.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7394 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/7394&gt;))<br>&gt; proposals/0031-adjusting-inout-declarations.md:*The initial Swift-Evolution discussion of this topic took place in the &quot;[Replace &#39;inout&#39; with &amp;](http://comments.gmane.org/gmane.comp.lang.swift.evolution/2751 &lt;http://comments.gmane.org/gmane.comp.lang.swift.evolution/2751&gt;)&quot; thread.*<br>&gt; proposals/0032-sequencetype-find.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16116 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16116&gt;))<br>&gt; proposals/0033-import-objc-constants.md:* Status: **Implemented in Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/8817 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/8817&gt;))<br>&gt; proposals/0034-disambiguating-line.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/8156 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/8156&gt;), [Implementation Bug](https://bugs.swift.org/browse/SR-840 &lt;https://bugs.swift.org/browse/SR-840&gt;))<br>&gt; proposals/0034-disambiguating-line.md:The discussion took place on-line in the [*\[Discussion\]: Renaming #line, the line control statement*](http://comments.gmane.org/gmane.comp.lang.swift.evolution/5815 &lt;http://comments.gmane.org/gmane.comp.lang.swift.evolution/5815&gt;) thread.<br>&gt; proposals/0035-limit-inout-capture.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7732 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/7732&gt;), [Bug](https://bugs.swift.org/browse/SR-807 &lt;https://bugs.swift.org/browse/SR-807&gt;))<br>&gt; proposals/0036-enum-dot.md:*Discussion took place on the Swift Evolution mailing list in the [\[Discussion\] Enum Leading Dot Prefixes](http://article.gmane.org/gmane.comp.lang.swift.evolution/6684 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/6684&gt;) thread. This proposal uses lowerCamelCase enumeration cases in compliance with<br>&gt; proposals/0036-enum-dot.md:current [API Guideline Working Group guidance](http://news.gmane.org/gmane.comp.lang.swift.evolution &lt;http://news.gmane.org/gmane.comp.lang.swift.evolution&gt;).*<br>&gt; proposals/0037-clarify-comments-and-operators.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12350 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/12350&gt;), [Bug](https://bugs.swift.org/browse/SR-960 &lt;https://bugs.swift.org/browse/SR-960&gt;))<br>&gt; proposals/0037-clarify-comments-and-operators.md:Swift-evolution thread: [started here](http://thread.gmane.org/gmane.comp.lang.swift.evolution/605 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/605&gt;)<br>&gt; proposals/0037-clarify-comments-and-operators.md:and [continued here](http://thread.gmane.org/gmane.comp.lang.swift.evolution/2855 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/2855&gt;).<br>&gt; proposals/0038-swiftpm-c-language-targets.md:[Swift Evolution Review Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7293 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/7293&gt;)<br>&gt; proposals/0039-playgroundliterals.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/9149/ &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/9149/&gt;), [Bug](https://bugs.swift.org/browse/SR-917 &lt;https://bugs.swift.org/browse/SR-917&gt;))<br>&gt; proposals/0039-playgroundliterals.md:*Discussion took place on the Swift Evolution mailing list in the [\[Discussion\] Modernizing Playground Literals](http://article.gmane.org/gmane.comp.lang.swift.evolution/7124 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/7124&gt;) thread. Thanks to [Chris Lattner](https://github.com/lattner &lt;https://github.com/lattner&gt;) for suggesting this enhancement.*<br>&gt; proposals/0040-attributecolons.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/8920 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/8920&gt;))<br>&gt; proposals/0040-attributecolons.md:*Discussion took place on the Swift Evolution mailing list in the [\[Discussion\] Replacing Equal Signs with Colons For Attribute Arguments](http://article.gmane.org/gmane.comp.lang.swift.evolution/7271 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/7271&gt;) thread. Thanks to [Doug Gregor](https://github.com/DougGregor &lt;https://github.com/DougGregor&gt;) for suggesting this enhancement.*<br>&gt; proposals/0042-flatten-method-types.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12828 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/12828&gt;), [Bug](https://bugs.swift.org/browse/SR-1051 &lt;https://bugs.swift.org/browse/SR-1051&gt;))<br>&gt; proposals/0043-declare-variables-in-case-labels-with-multiple-patterns.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12827 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/12827&gt;))<br>&gt; proposals/0043-declare-variables-in-case-labels-with-multiple-patterns.md:Swift-evolution thread: [here](http://thread.gmane.org/gmane.comp.lang.swift.evolution/4256 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/4256&gt;)<br>&gt; proposals/0044-import-as-member.md:* Status: **Implemented in Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12842 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/12842&gt;), [Bug](https://bugs.swift.org/browse/SR-1053 &lt;https://bugs.swift.org/browse/SR-1053&gt;))<br>&gt; proposals/0044-import-as-member.md:[Swift-evolution thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/8437 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/8437&gt;)&lt;br /&gt;<br>&gt; proposals/0044-import-as-member.md:[Review](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12274 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/12274&gt;)<br>&gt; proposals/0045-scan-takewhile-dropwhile.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16119 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16119&gt;), [Bug](https://bugs.swift.org/browse/SR-1516 &lt;https://bugs.swift.org/browse/SR-1516&gt;))<br>&gt; proposals/0045-scan-takewhile-dropwhile.md:[Proposal: Add scan, takeWhile, dropWhile, and iterate to the stdlib](http://thread.gmane.org/gmane.comp.lang.swift.evolution/1515 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/1515&gt;)<br>&gt; proposals/0045-scan-takewhile-dropwhile.md:[rationale]: http://article.gmane.org/gmane.comp.lang.swift.evolution/16119 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/16119&gt;<br>&gt; proposals/0046-first-label.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12352 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/12352&gt;), [Bug](https://bugs.swift.org/browse/SR-961 &lt;https://bugs.swift.org/browse/SR-961&gt;))<br>&gt; proposals/0046-first-label.md:*Discussion took place on the Swift Evolution mailing list in the [Make the first parameter in a function declaration follow the same rules as the others](http://article.gmane.org/gmane.comp.lang.swift.evolution/9029 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/9029&gt;) thread.*<br>&gt; proposals/0047-nonvoid-warn.md:* Status: **Accepted (with [revisions](http://article.gmane.org/gmane.comp.lang.swift.evolution/12833 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/12833&gt;))**<br>&gt; proposals/0047-nonvoid-warn.md:This proposal was discussed on-list in a variety of threads, most recently [Make non-void functions &lt;at&gt; warn_unused_result	by default](http://article.gmane.org/gmane.comp.lang.swift.evolution/8417 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/8417&gt;).<br>&gt; proposals/0048-generic-typealias.md:* Status: **Implemented in Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/14516/ &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/14516/&gt;))<br>&gt; proposals/0050-floating-point-stride.md:* Status: **Withdrawn** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/19060 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/19060&gt;))<br>&gt; proposals/0050-floating-point-stride.md:This proposal was discussed on-list in the [&quot;\[Discussion\] stride behavior and a little bit of a call-back to digital numbers&quot;](http://article.gmane.org/gmane.comp.lang.swift.evolution/8014 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/8014&gt;) thread.<br>&gt; proposals/0051-stride-semantics.md:This proposal was discussed on-list in the [&quot;\[Discussion\] stride behavior and a little bit of a call-back to digital numbers&quot;](http://article.gmane.org/gmane.comp.lang.swift.evolution/8014 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/8014&gt;) thread.<br>&gt; proposals/0052-iterator-post-nil-guarantee.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16115 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16115&gt;))<br>&gt; proposals/0052-iterator-post-nil-guarantee.md:Swift-evolution thread: [\[Proposal\] Change guarantee for GeneratorType.next() to always return nil past end](http://thread.gmane.org/gmane.comp.lang.swift.evolution/8519 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/8519&gt;)<br>&gt; proposals/0052-iterator-post-nil-guarantee.md:In both cases, the extra state and branching that is sometimes needed has potential for performance implications. Though performance is not the *key* concern, iterators are often used in tight loops and can affect very commonly used algorithms. The original rationale for introducing the precondition was in fact because of concerns it might add storage and performance burden to some implementations of `IteratorType` (see [here](http://article.gmane.org/gmane.comp.lang.swift.evolution/8532 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/8532&gt;)). However in light of implementation experience, it appears including the guarantee would likely be beneficial for performance:<br>&gt; proposals/0053-remove-let-from-function-parameters.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/13188 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/13188&gt;))<br>&gt; proposals/0054-abolish-iuo.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/13490 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/13490&gt;))<br>&gt; proposals/0055-optional-unsafe-pointers.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/13511 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/13511&gt;))<br>&gt; proposals/0057-importing-objc-generics.md:Swift-evolution thread: [here](http://thread.gmane.org/gmane.comp.lang.swift.evolution/2886 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/2886&gt;)<br>&gt; proposals/0058-objectivecbridgeable.md:Swift-evolution thread: [\[Idea\] ObjectiveCBridgeable](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7852/ &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/7852/&gt;)<br>&gt; proposals/0058-objectivecbridgeable.md:Swift 3 ([thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/14419 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/14419&gt;)). We agree that it would be valuable to give library authors the<br>&gt; proposals/0059-updated-set-apis.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/14785/ &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/14785/&gt;))<br>&gt; proposals/0060-defaulted-parameter-order.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16894 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16894&gt;), [Bug](https://bugs.swift.org/browse/SR-1489 &lt;https://bugs.swift.org/browse/SR-1489&gt;))<br>&gt; proposals/0061-autoreleasepool-signature.md:* Status: **Accepted for Swift 3**  ~~([Bug](https://bugs.swift.org/browse/SR-1394 &lt;https://bugs.swift.org/browse/SR-1394&gt;))~~  ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15982 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/15982&gt;), [Bug](https://bugs.swift.org/browse/SR-842 &lt;https://bugs.swift.org/browse/SR-842&gt;))<br>&gt; proposals/0062-objc-keypaths.md:[SE Draft](http://thread.gmane.org/gmane.comp.lang.swift.evolution/8665 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/8665&gt;), [Review thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/14011/ &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/14011/&gt;), [Secondary review thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/14053 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/14053&gt;)<br>&gt; proposals/0063-swiftpm-system-module-search-paths.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/14638 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/14638&gt;))<br>&gt; proposals/0064-property-selectors.md:* Status: **Implemented in Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/14539/ &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/14539/&gt;))<br>&gt; proposals/0064-property-selectors.md:[Original swift-evolution thread](http://article.gmane.org/gmane.comp.lang.swift.evolution/7614 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/7614&gt;)<br>&gt; proposals/0064-property-selectors.md:[Follow-up swift-evolution thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7780 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/7780&gt;)<br>&gt; proposals/0065-collections-move-indices.md:* [Swift-evolution thread](http://news.gmane.org/find-root.php?message_id=CA%2bY5xYfqKR6yC2Q%2dG7D9N7FeY%3dxs1x3frq%3d%3dsyGoqYpOcL9yrw%40mail.gmail.com &lt;http://news.gmane.org/find-root.php?message_id=CA%2bY5xYfqKR6yC2Q%2dG7D9N7FeY%3dxs1x3frq%3d%3dsyGoqYpOcL9yrw%40mail.gmail.com&gt;)<br>&gt; proposals/0065-collections-move-indices.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15549 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/15549&gt;))<br>&gt; proposals/0066-standardize-function-type-syntax.md:On May 5, 2016, the core team decided to **accept** this proposal ([thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16245 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16245&gt;)).<br>&gt; proposals/0067-floating-point-protocols.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15953 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/15953&gt;))<br>&gt; proposals/0067-floating-point-protocols.md:[Proposal draft](http://thread.gmane.org/gmane.comp.lang.swift.evolution/14545 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/14545&gt;), [Review](http://thread.gmane.org/gmane.comp.lang.swift.evolution/14876 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/14876&gt;)<br>&gt; proposals/0068-universal-self.md:*This proposal was discussed on the Swift Evolution list in the [\[Pitch\] Adding a Self type name shortcut for static member access](http://thread.gmane.org/gmane.comp.lang.swift.evolution/13708/focus=13712 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/13708/focus=13712&gt;) thread.*<br>&gt; proposals/0069-swift-mutability-for-foundation.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16114 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16114&gt;))<br>&gt; proposals/0069-swift-mutability-for-foundation.md:[Swift Evolution Discussion](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15080 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/15080&gt;), [Swift Evolution Review](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15281 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/15281&gt;)<br>&gt; proposals/0070-optional-requirements.md:* Status: **Accepted for Swift 3**  ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15983 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/15983&gt;), [Bug](https://bugs.swift.org/browse/SR-1395 &lt;https://bugs.swift.org/browse/SR-1395&gt;))<br>&gt; proposals/0070-optional-requirements.md:[eliminate optional requirements](http://thread.gmane.org/gmane.comp.lang.swift.evolution/14046 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/14046&gt;),<br>&gt; proposals/0070-optional-requirements.md:[make Swift protocols support optional requirements](http://thread.gmane.org/gmane.comp.lang.swift.devel/1316 &lt;http://thread.gmane.org/gmane.comp.lang.swift.devel/1316&gt;) and<br>&gt; proposals/0070-optional-requirements.md:[make optional protocol requirements first class citizens](http://thread.gmane.org/gmane.comp.lang.swift.evolution/13347 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/13347&gt;).<br>&gt; proposals/0070-optional-requirements.md:[here](http://thread.gmane.org/gmane.comp.lang.swift.devel/1316 &lt;http://thread.gmane.org/gmane.comp.lang.swift.devel/1316&gt;) and<br>&gt; proposals/0070-optional-requirements.md:[here](http://thread.gmane.org/gmane.comp.lang.swift.evolution/13347 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/13347&gt;)).<br>&gt; proposals/0070-optional-requirements.md:implementations](http://thread.gmane.org/gmane.comp.lang.swift.evolution/14046 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/14046&gt;)<br>&gt; proposals/0071-member-keywords.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15954 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/15954&gt;))<br>&gt; proposals/0071-member-keywords.md:This idea was initially discussed in [this swift-evolution thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7991 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/7991&gt;).<br>&gt; proposals/0072-eliminate-implicit-bridging-conversions.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16240 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16240&gt;))<br>&gt; proposals/0073-noescape-once.md:On May 11, 2016, the core team decided to **Reject** this proposal for Swift 3 ([thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16896 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16896&gt;)).<br>&gt; proposals/0074-binary-search.md:On May 11, 2016, the core team decided to **Reject** this proposal ([thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16897 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16897&gt;)).  The<br>&gt; proposals/0075-import-test.md:modules was [first introduced](http://article.gmane.org/gmane.comp.lang.swift.evolution/7516/match=darwin &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/7516/match=darwin&gt;)<br>&gt; proposals/0075-import-test.md:[Swift Evolution Review Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16620 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16620&gt;)<br>&gt; proposals/0076-copying-to-unsafe-mutable-pointer-with-unsafe-pointer-source.md:* Status: **Accepted with Revisions for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16898 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16898&gt;), [Bug](https://bugs.swift.org/browse/SR-1490 &lt;https://bugs.swift.org/browse/SR-1490&gt;))<br>&gt; proposals/0079-upgrade-self-from-weak-to-strong.md:[Swift Evolution Discussion Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7582 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/7582&gt;), [Draft Proposal](http://thread.gmane.org/gmane.comp.lang.swift.evolution/6064 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/6064&gt;)<br>&gt; proposals/0080-failable-numeric-initializers.md:* Status: **Accepted with Revisions for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16899 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16899&gt;), [Bug](https://bugs.swift.org/browse/SR-1491 &lt;https://bugs.swift.org/browse/SR-1491&gt;))<br>&gt; proposals/0081-move-where-expression.md:[\[Pitch\] Moving where Clauses Out Of Parameter Lists](http://thread.gmane.org/gmane.comp.lang.swift.evolution/13886/focus=13899 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/13886/focus=13899&gt;)<br>&gt; proposals/0082-swiftpm-package-edit.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16614 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16614&gt;))<br>&gt; proposals/0082-swiftpm-package-edit.md:[Proposal Announcement](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15279 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/15279&gt;)<br>&gt; proposals/0082-swiftpm-package-edit.md:[Review announcement](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16078 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16078&gt;)<br>&gt; proposals/0085-package-manager-command-name.md:* Status: **Implemented in Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.build/1/focus=26 &lt;http://thread.gmane.org/gmane.comp.lang.swift.build/1/focus=26&gt;))<br>&gt; proposals/0085-package-manager-command-name.md:[Swift Build Review Thread](http://thread.gmane.org/gmane.comp.lang.swift.build/1/ &lt;http://thread.gmane.org/gmane.comp.lang.swift.build/1/&gt;)<br>&gt; proposals/0085-package-manager-command-name.md:[Swift Evolution Review Thread](http://thread.gmane.org/gmane.comp.lang.swift.build/1/focus=16764 &lt;http://thread.gmane.org/gmane.comp.lang.swift.build/1/focus=16764&gt;)<br>&gt; proposals/0086-drop-foundation-ns.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/23869 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/23869&gt;))<br>&gt; proposals/0086-drop-foundation-ns.md:[Swift Evolution Discussion Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16298 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16298&gt;)<br>&gt; proposals/0086-drop-foundation-ns.md:[Review Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16509 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16509&gt;)<br>&gt; proposals/0088-libdispatch-for-swift3.md:* Status: **Accepted with Revisions** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17819 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/17819&gt;))<br>&gt; proposals/0088-libdispatch-for-swift3.md:[Review thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16745 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16745&gt;)<br>&gt; proposals/0092-typealiases-in-protocols.md:* Status: **Implemented in Swift 3.0** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17317 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/17317&gt;))<br>&gt; proposals/0094-sequence-function.md:Swift-evolution thread: [Discussion thread topic for that proposal](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15743/focus=17108 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/15743/focus=17108&gt;)<br>&gt; proposals/0094-sequence-function.md:[SE-0045a]: http://article.gmane.org/gmane.comp.lang.swift.evolution/16119 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/16119&gt;<br>&gt; proposals/0095-any-as-existential.md:Discussion threads: [pre-proposal](https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160516/018109.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160516/018109.html&gt;), [review thread 1](http://thread.gmane.org/gmane.comp.lang.swift.evolution/18349 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/18349&gt;), [2](http://thread.gmane.org/gmane.comp.lang.swift.evolution/18350/focus=18447 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/18350/focus=18447&gt;), [3](http://thread.gmane.org/gmane.comp.lang.swift.evolution/18351/focus=18440 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/18351/focus=18440&gt;), [4](http://thread.gmane.org/gmane.comp.lang.swift.evolution/18518 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/18518&gt;), [post-review thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/19463 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/19463&gt;)<br>&gt; proposals/0096-dynamictype.md:[RFC: didset and willset](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17534 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/17534&gt;)<br>&gt; proposals/0097-negative-attributes.md:[RFC: didset and willset](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17534 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/17534&gt;)<br>&gt; proposals/0098-didset-capitalization.md:[RFC: didset and willset](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17534 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/17534&gt;)<br>&gt; proposals/0099-conditionclauses.md:[\[Pitch\] making where and ,	interchangeable in guard conditions](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17926 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/17926&gt;)<br>&gt; proposals/0101-standardizing-sizeof-naming.md:* Swift Evolution Pitch: [\[Pitch\] Renaming sizeof, sizeofValue, strideof,	strideofValue](http://thread.gmane.org/gmane.comp.lang.swift.evolution/19459 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/19459&gt;)<br>&gt; proposals/0101-standardizing-sizeof-naming.md:* [Earlier Discussions](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15830 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/15830&gt;)<br>&gt; proposals/0101-standardizing-sizeof-naming.md:* [SE-0101 Review](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21103 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/21103&gt;)<br>&gt; proposals/0103-make-noescape-default.md:* [Make non-escaping closures the default](http://thread.gmane.org/gmane.comp.lang.swift.evolution/19756 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/19756&gt;)<br>&gt; proposals/0105-remove-where-from-forin-loops.md:Swift Evolution Discussion: [\[Pitch\] Retiring `where` from for-in loops](http://thread.gmane.org/gmane.comp.lang.swift.evolution/20142 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/20142&gt;)<br>&gt; proposals/0106-rename-osx-to-macos.md:Swift Evolution Discussion: [\[DRAFT\] Aliasing the OS X Platform Configuration	Test](http://thread.gmane.org/gmane.comp.lang.swift.evolution/20815 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/20815&gt;)<br>&gt; proposals/0108-remove-assoctype-inference.md:swift-evolution thread: [pre-proposal](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21714 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/21714&gt;)<br>&gt; proposals/0108-remove-assoctype-inference.md:As Douglas Gregor (original author of the relevant type inference code) [puts it](http://article.gmane.org/gmane.comp.lang.swift.evolution/22058 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/22058&gt;):<br>&gt; proposals/0108-remove-assoctype-inference.md:To some extent, this is an issue inherent to any design which makes no distinctions at the site of implementation between members intended to satisfy protocol requirements and members that are explicitly not intended to satisfy protocol requirements. Rather than adding keywords to create this distinction, Douglas Gregor has [proposed and implemented type checker heuristics](http://article.gmane.org/gmane.comp.lang.swift.devel/1799 &lt;http://article.gmane.org/gmane.comp.lang.swift.devel/1799&gt;) that will generate warnings when a programmer implements a member that &quot;looks like&quot; it should fulfill a protocol requirement but does not actually do so. This is one possible mitigation strategy that should be revisited as a way to decrease the possible impact of removing associated type witness inference from the compiler.<br>&gt; proposals/0108-remove-assoctype-inference.md:As well, Dave Abrahams expresses a [potential issue](http://article.gmane.org/gmane.comp.lang.swift.evolution/21892 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/21892&gt;):<br>&gt; proposals/0109-remove-boolean.md:* Status: Accepted ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/23844 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/23844&gt;))<br>&gt; proposals/0109-remove-boolean.md:[Discussion thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21559 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/21559&gt;)<br>&gt; proposals/0110-distingish-single-tuple-arg.md:Discussion: [pre-proposal](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21732 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/21732&gt;)<br>&gt; proposals/0111-remove-arg-label-type-significance.md:Discussion: [pre-proposal](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21369 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/21369&gt;)<br>&gt; proposals/0114-buffer-naming.md:[Swift Evolution Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/22127 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/22127&gt;)<br>&gt; proposals/0115-literal-syntax-protocols.md:Swift-evolution thread: [Literal Syntax Protocols](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21441 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/21441&gt;)<br>&gt; proposals/0115-literal-syntax-protocols.md:An earlier thread that resulted in this proposal: [Revisiting SE-0041 Names](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21290 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/21290&gt;)<br>&gt; proposals/0117-non-public-subclassable-by-default.md:Swift-evolution thread: http://thread.gmane.org/gmane.comp.lang.swift.evolution/21930/ &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/21930/&gt;<br>&gt; proposals/0118-closure-parameter-names-and-labels.md:[Take 2: Stdlib closure argument labels and parameter names](http://thread.gmane.org/gmane.comp.lang.swift.evolution/22188 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/22188&gt;)<br>&gt; proposals/0118-closure-parameter-names-and-labels.md:[Stdlib closure argument labels and parameter names ](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21046 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/21046&gt;)<br>&gt; proposals/0121-remove-optional-comparison-operators.md:- [Optional comparison operators](http://thread.gmane.org/gmane.comp.lang.swift.evolution/23306 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/23306&gt;) (most recent)<br>&gt; proposals/0121-remove-optional-comparison-operators.md:- [Possible bug with arithmetic optional comparison ?](http://thread.gmane.org/gmane.comp.lang.swift.devel/2089 &lt;http://thread.gmane.org/gmane.comp.lang.swift.devel/2089&gt;)<br>&gt; proposals/0121-remove-optional-comparison-operators.md:- [? suffix for &lt;, &gt;, &lt;=, &gt;= comparisons with optionals to prevent subtle bugs](http://thread.gmane.org/gmane.comp.lang.swift.evolution/10095 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/10095&gt;)<br>&gt; proposals/0121-remove-optional-comparison-operators.md:If the coercion is not removed (if no change is made), the results of comparisons with Optional values are sometimes **surprising**, making it easy to write bugs. In a thread from December 2015, [Al Skipp offers](http://thread.gmane.org/gmane.comp.lang.swift.evolution/10095/focus=10098 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/10095/focus=10098&gt;) the following example:<br>&gt; proposals/0122-use-colons-for-subscript-type-declarations.md:Swift-evolution thread: [Discussion thread topic for that proposal](http://article.gmane.org/gmane.comp.lang.swift.evolution/23457 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/23457&gt;)<br>&gt; proposals/0127-cleaning-up-stdlib-ptr-buffer.md:Swift-evolution thread: [Cleaning up stdlib Pointer and Buffer Routines](http://thread.gmane.org/gmane.comp.lang.swift.evolution/23093 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/23093&gt;)<br>&gt; proposals/0131-anyhashable.md:Swift-evolution thread: [Add AnyHashable to the standard library](http://thread.gmane.org/gmane.comp.lang.swift.evolution/24835 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/24835&gt;).<br>&gt; proposals/0132-sequence-end-ops.md:Swift-evolution thread: [[Draft] Rationalizing Sequence end-operation names](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21449/focus=23013 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/21449/focus=23013&gt;)<br>&gt; proposals/0133-rename-flatten-to-joined.md:- [[Pitch] Unify joined(separator:) and flatten()](http://thread.gmane.org/gmane.comp.lang.swift.evolution/24707 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/24707&gt;)<br>&gt; proposals/0133-rename-flatten-to-joined.md:- [[Pitch] Rename flatten() to joined() and give joined() for string sequences the empty string as the default parameter](http://thread.gmane.org/gmane.comp.lang.swift.evolution/24805 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/24805&gt;)<br>&gt; proposals/0134-rename-string-properties.md:Swift-evolution thread: [Discussion thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/24955 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/24955&gt;)<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160731/6c2e1910/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2024f9524b1e51a54c4251abf0c34f50?s=50"></div><header><strong>[META] Gmane and Swift Evolution</strong> from <string>Saagar Jha</string> &lt;saagarjha28 at gmail.com&gt;<p>July 31, 2016 at 03:00:00pm</p></header><div class="content"><p>I’d be happy to help. I see 94 instances of “gmane&quot;, do we want to split it up (since I see Erica is on it already)?<br></p><p>Saagar Jha<br></p><p><br></p><p>&gt; On Jul 31, 2016, at 15:42, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Jul 31, 2016, at 3:40 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Gmane.org &lt;http://gmane.org/&gt; is shutting down. http://ostatic.com/blog/mint-18-xfce-imminent-gmane-org-shutting-down &lt;http://ostatic.com/blog/mint-18-xfce-imminent-gmane-org-shutting-down&gt; writes:<br>&gt;&gt; <br>&gt;&gt;&gt; &quot;Long time mailing list archive site Gmane.org &lt;http://gmane.org/&gt; is shutting down. Gmane has been the home for technical mailing list references since 2002. But it&#39;s no longer fun for founder and only maintainer Lars Ingebrigtsen. He&#39;s been sued in India and threatened with legal action in at least France, among other annoyances. The straw that broke Ingebrigtsen&#39;s back was a sustained denial of service &lt;https://lars.ingebrigtsen.no/2016/07/28/the-end-of-gmane/&gt; attack throughout the month of July. He&#39;s been wondering a lot lately if it&#39;s all worth it. So, he&#39;s decided &lt;https://lars.ingebrigtsen.no/2016/07/28/the-end-of-gmane/comment-page-1/#comment-13502&gt; to move the mail and news servers to new hosting. However, Ingebrigtsen is indeed discontinuing the web-based archive. He said he&#39;s just &quot;fed up.&quot; He&#39;s willing to send a disk with the web server archives to anyone who wants to take it over. But with the Gmane.org &lt;http://gmane.org/&gt; web presence gone, it feels like the end of an era. There is much wailing and gnashing of teeth throughout the community with some even trying to get a petition started.&quot;<br>&gt;&gt; <br>&gt;&gt; Because of this shutdown, numerous documents in the Swift Evolution github archive no longer point to valid web links. I have pasted a list of gmane links at the end of this message. As gmane&#39;s &quot;robots.txt&quot; disallowed crawling, Google has not preserved the titles or text of the links, which makes finding some of these a little tricky.<br>&gt;&gt; <br>&gt;&gt; Here are the remaining links that are not yet converted. Please consider adopting a proposal, tracking down its links, and mailing this thread with the proposal number, gmane links and pipermail equivalents. Pipermail is located at https://lists.swift.org/pipermail/swift-evolution/ &lt;https://lists.swift.org/pipermail/swift-evolution/&gt;. Some of these may refer to  build dev discussions instead of evolution ones. If you can, please track down to the exact message for rationale, and the thread for discussion and review links.<br>&gt; <br>&gt; Completely agreed.  All of these should point to https://lists.swift.org &lt;https://lists.swift.org/&gt; (and always should have, exactly for reasons like this).  I’d appreciate any PRs to help clean up the evolution repo to point to https://lists.swift.org &lt;https://lists.swift.org/&gt; instead.<br>&gt; <br>&gt; Thanks!<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; -- E<br>&gt;&gt; <br>&gt;&gt; proposals/0010-add-staticstring-unicodescalarview.md:* Status: **Rejected** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7697 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/7697&gt;))<br>&gt;&gt; proposals/0010-add-staticstring-unicodescalarview.md:[Swift Evolution Discussion Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/9366 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/9366&gt;), [Review](http://thread.gmane.org/gmane.comp.lang.swift.evolution/2434 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/2434&gt;)<br>&gt;&gt; proposals/0011-replace-typealias-associated.md:* Status: **Accepted for Swift 2.2** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/2883 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/2883&gt;), [Bug](https://bugs.swift.org/browse/SR-511 &lt;https://bugs.swift.org/browse/SR-511&gt;))<br>&gt;&gt; proposals/0011-replace-typealias-associated.md:[Swift Evolution Discussion Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/9301 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/9301&gt;)<br>&gt;&gt; proposals/0012-add-noescape-to-public-library-api.md:[Swift Evolution Discussion Thread](http://thread.gmane.org/gmane.comp.lang.swift.corelibs/53 &lt;http://thread.gmane.org/gmane.comp.lang.swift.corelibs/53&gt;)<br>&gt;&gt; proposals/0013-remove-partial-application-super.md:[Swift Evolution Discussion Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/9778 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/9778&gt;), [Review](http://thread.gmane.org/gmane.comp.lang.swift.evolution/2880 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/2880&gt;)<br>&gt;&gt; proposals/0014-constrained-AnySequence.md:* Status: **Accepted for Swift 2.2** ([Rationale](http://article.gmane.org/gmane.comp.lang.swift.evolution/9746/match=constraining+anysequence &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/9746/match=constraining+anysequence&gt;), [Bug](https://bugs.swift.org/browse/SR-474 &lt;https://bugs.swift.org/browse/SR-474&gt;))<br>&gt;&gt; proposals/0014-constrained-AnySequence.md:[Swift Evolution Discussion](http://thread.gmane.org/gmane.comp.lang.swift.evolution/1893 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/1893&gt;)<br>&gt;&gt; proposals/0015-tuple-comparison-operators.md:* Status: **Implemented in Swift 2.2** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/11423/focus=1248 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/11423/focus=1248&gt;), [Pull request](https://github.com/apple/swift/pull/408 &lt;https://github.com/apple/swift/pull/408&gt;))<br>&gt;&gt; proposals/0015-tuple-comparison-operators.md:[Initial Discussion](http://article.gmane.org/gmane.comp.lang.swift.evolution/980/match=tuple+comparison &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/980/match=tuple+comparison&gt;), [General Discussion](http://thread.gmane.org/gmane.comp.lang.swift.evolution/9723 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/9723&gt;), [Review](http://thread.gmane.org/gmane.comp.lang.swift.evolution/11423/focus=732 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/11423/focus=732&gt;)<br>&gt;&gt; proposals/0016-initializers-for-converting-unsafe-pointers-to-ints.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/13429 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/13429&gt;), [Bug](https://bugs.swift.org/browse/SR-1115 &lt;https://bugs.swift.org/browse/SR-1115&gt;))<br>&gt;&gt; proposals/0016-initializers-for-converting-unsafe-pointers-to-ints.md:[Swift Evolution Discussion](http://thread.gmane.org/gmane.comp.lang.swift.evolution/10044 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/10044&gt;), [Review](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12696 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/12696&gt;)<br>&gt;&gt; proposals/0017-convert-unmanaged-to-use-unsafepointer.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16118 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16118&gt;))<br>&gt;&gt; proposals/0017-convert-unmanaged-to-use-unsafepointer.md:[Swift Evolution Discussion](http://thread.gmane.org/gmane.comp.lang.swift.evolution/9877 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/9877&gt;), [Proposed Rewrite Discussion](http://thread.gmane.org/gmane.comp.lang.swift.evolution/68/ &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/68/&gt;)<br>&gt;&gt; proposals/0019-package-manager-testing.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/4103 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/4103&gt;), [Bug](https://bugs.swift.org/browse/SR-592 &lt;https://bugs.swift.org/browse/SR-592&gt;))<br>&gt;&gt; proposals/0019-package-manager-testing.md:[SE Review Link](http://thread.gmane.org/gmane.comp.lang.swift.evolution/3583 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/3583&gt;)<br>&gt;&gt; proposals/0021-generalized-naming.md:* Status: **Implemented in Swift 2.2** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/3317/focus=3961 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/3317/focus=3961&gt;))<br>&gt;&gt; proposals/0022-objc-selectors.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/4622 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/4622&gt;))<br>&gt;&gt; proposals/0022-objc-selectors.md:Swift-evolution thread: [here](http://thread.gmane.org/gmane.comp.lang.swift.evolution/1384/focus=1403 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/1384/focus=1403&gt;)<br>&gt;&gt; proposals/0023-api-guidelines.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/8585 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/8585&gt;))<br>&gt;&gt; proposals/0024-optional-value-setter.md:* Status: **Rejected** ([Rationale](http://article.gmane.org/gmane.comp.lang.swift.evolution/7694 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/7694&gt;))<br>&gt;&gt; proposals/0025-scoped-access-level.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12183/focus=13584 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/12183/focus=13584&gt;), [Bug](https://bugs.swift.org/browse/SR-1275 &lt;https://bugs.swift.org/browse/SR-1275&gt;))<br>&gt;&gt; proposals/0025-scoped-access-level.md:[Swift Evolution Discussion](http://thread.gmane.org/gmane.comp.lang.swift.evolution/9334 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/9334&gt;), [Next Steps Discussion](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12183 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/12183&gt;)<br>&gt;&gt; proposals/0026-abstract-classes-and-methods.md:* Status: **Deferred** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/8809 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/8809&gt;))<br>&gt;&gt; proposals/0027-string-from-code-units.md:* Status: **Rejected** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7695 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/7695&gt;))<br>&gt;&gt; proposals/0028-modernizing-debug-identifiers.md:* Status: **Implemented in Swift 2.2** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/5805 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/5805&gt;), Bug: [SR-669](https://bugs.swift.org/browse/SR-669 &lt;https://bugs.swift.org/browse/SR-669&gt;))<br>&gt;&gt; proposals/0029-remove-implicit-tuple-splat.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/6405 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/6405&gt;))<br>&gt;&gt; proposals/0030-property-behavior-decls.md:* Status: **Rejected** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7735 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/7735&gt;))<br>&gt;&gt; proposals/0030-property-behavior-decls.md:[Swift Evolution Discussion](http://thread.gmane.org/gmane.comp.lang.swift.evolution/11976 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/11976&gt;)&lt;br/&gt;<br>&gt;&gt; proposals/0030-property-behavior-decls.md:[Review](http://thread.gmane.org/gmane.comp.lang.swift.evolution/6426 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/6426&gt;)<br>&gt;&gt; proposals/0031-adjusting-inout-declarations.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7394 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/7394&gt;))<br>&gt;&gt; proposals/0031-adjusting-inout-declarations.md:*The initial Swift-Evolution discussion of this topic took place in the &quot;[Replace &#39;inout&#39; with &amp;](http://comments.gmane.org/gmane.comp.lang.swift.evolution/2751 &lt;http://comments.gmane.org/gmane.comp.lang.swift.evolution/2751&gt;)&quot; thread.*<br>&gt;&gt; proposals/0032-sequencetype-find.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16116 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16116&gt;))<br>&gt;&gt; proposals/0033-import-objc-constants.md:* Status: **Implemented in Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/8817 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/8817&gt;))<br>&gt;&gt; proposals/0034-disambiguating-line.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/8156 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/8156&gt;), [Implementation Bug](https://bugs.swift.org/browse/SR-840 &lt;https://bugs.swift.org/browse/SR-840&gt;))<br>&gt;&gt; proposals/0034-disambiguating-line.md:The discussion took place on-line in the [*\[Discussion\]: Renaming #line, the line control statement*](http://comments.gmane.org/gmane.comp.lang.swift.evolution/5815 &lt;http://comments.gmane.org/gmane.comp.lang.swift.evolution/5815&gt;) thread.<br>&gt;&gt; proposals/0035-limit-inout-capture.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7732 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/7732&gt;), [Bug](https://bugs.swift.org/browse/SR-807 &lt;https://bugs.swift.org/browse/SR-807&gt;))<br>&gt;&gt; proposals/0036-enum-dot.md:*Discussion took place on the Swift Evolution mailing list in the [\[Discussion\] Enum Leading Dot Prefixes](http://article.gmane.org/gmane.comp.lang.swift.evolution/6684 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/6684&gt;) thread. This proposal uses lowerCamelCase enumeration cases in compliance with<br>&gt;&gt; proposals/0036-enum-dot.md:current [API Guideline Working Group guidance](http://news.gmane.org/gmane.comp.lang.swift.evolution &lt;http://news.gmane.org/gmane.comp.lang.swift.evolution&gt;).*<br>&gt;&gt; proposals/0037-clarify-comments-and-operators.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12350 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/12350&gt;), [Bug](https://bugs.swift.org/browse/SR-960 &lt;https://bugs.swift.org/browse/SR-960&gt;))<br>&gt;&gt; proposals/0037-clarify-comments-and-operators.md:Swift-evolution thread: [started here](http://thread.gmane.org/gmane.comp.lang.swift.evolution/605 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/605&gt;)<br>&gt;&gt; proposals/0037-clarify-comments-and-operators.md:and [continued here](http://thread.gmane.org/gmane.comp.lang.swift.evolution/2855 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/2855&gt;).<br>&gt;&gt; proposals/0038-swiftpm-c-language-targets.md:[Swift Evolution Review Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7293 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/7293&gt;)<br>&gt;&gt; proposals/0039-playgroundliterals.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/9149/ &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/9149/&gt;), [Bug](https://bugs.swift.org/browse/SR-917 &lt;https://bugs.swift.org/browse/SR-917&gt;))<br>&gt;&gt; proposals/0039-playgroundliterals.md:*Discussion took place on the Swift Evolution mailing list in the [\[Discussion\] Modernizing Playground Literals](http://article.gmane.org/gmane.comp.lang.swift.evolution/7124 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/7124&gt;) thread. Thanks to [Chris Lattner](https://github.com/lattner &lt;https://github.com/lattner&gt;) for suggesting this enhancement.*<br>&gt;&gt; proposals/0040-attributecolons.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/8920 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/8920&gt;))<br>&gt;&gt; proposals/0040-attributecolons.md:*Discussion took place on the Swift Evolution mailing list in the [\[Discussion\] Replacing Equal Signs with Colons For Attribute Arguments](http://article.gmane.org/gmane.comp.lang.swift.evolution/7271 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/7271&gt;) thread. Thanks to [Doug Gregor](https://github.com/DougGregor &lt;https://github.com/DougGregor&gt;) for suggesting this enhancement.*<br>&gt;&gt; proposals/0042-flatten-method-types.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12828 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/12828&gt;), [Bug](https://bugs.swift.org/browse/SR-1051 &lt;https://bugs.swift.org/browse/SR-1051&gt;))<br>&gt;&gt; proposals/0043-declare-variables-in-case-labels-with-multiple-patterns.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12827 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/12827&gt;))<br>&gt;&gt; proposals/0043-declare-variables-in-case-labels-with-multiple-patterns.md:Swift-evolution thread: [here](http://thread.gmane.org/gmane.comp.lang.swift.evolution/4256 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/4256&gt;)<br>&gt;&gt; proposals/0044-import-as-member.md:* Status: **Implemented in Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12842 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/12842&gt;), [Bug](https://bugs.swift.org/browse/SR-1053 &lt;https://bugs.swift.org/browse/SR-1053&gt;))<br>&gt;&gt; proposals/0044-import-as-member.md:[Swift-evolution thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/8437 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/8437&gt;)&lt;br /&gt;<br>&gt;&gt; proposals/0044-import-as-member.md:[Review](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12274 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/12274&gt;)<br>&gt;&gt; proposals/0045-scan-takewhile-dropwhile.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16119 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16119&gt;), [Bug](https://bugs.swift.org/browse/SR-1516 &lt;https://bugs.swift.org/browse/SR-1516&gt;))<br>&gt;&gt; proposals/0045-scan-takewhile-dropwhile.md:[Proposal: Add scan, takeWhile, dropWhile, and iterate to the stdlib](http://thread.gmane.org/gmane.comp.lang.swift.evolution/1515 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/1515&gt;)<br>&gt;&gt; proposals/0045-scan-takewhile-dropwhile.md:[rationale]: http://article.gmane.org/gmane.comp.lang.swift.evolution/16119 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/16119&gt;<br>&gt;&gt; proposals/0046-first-label.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12352 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/12352&gt;), [Bug](https://bugs.swift.org/browse/SR-961 &lt;https://bugs.swift.org/browse/SR-961&gt;))<br>&gt;&gt; proposals/0046-first-label.md:*Discussion took place on the Swift Evolution mailing list in the [Make the first parameter in a function declaration follow the same rules as the others](http://article.gmane.org/gmane.comp.lang.swift.evolution/9029 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/9029&gt;) thread.*<br>&gt;&gt; proposals/0047-nonvoid-warn.md:* Status: **Accepted (with [revisions](http://article.gmane.org/gmane.comp.lang.swift.evolution/12833 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/12833&gt;))**<br>&gt;&gt; proposals/0047-nonvoid-warn.md:This proposal was discussed on-list in a variety of threads, most recently [Make non-void functions &lt;at&gt; warn_unused_result	by default](http://article.gmane.org/gmane.comp.lang.swift.evolution/8417 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/8417&gt;).<br>&gt;&gt; proposals/0048-generic-typealias.md:* Status: **Implemented in Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/14516/ &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/14516/&gt;))<br>&gt;&gt; proposals/0050-floating-point-stride.md:* Status: **Withdrawn** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/19060 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/19060&gt;))<br>&gt;&gt; proposals/0050-floating-point-stride.md:This proposal was discussed on-list in the [&quot;\[Discussion\] stride behavior and a little bit of a call-back to digital numbers&quot;](http://article.gmane.org/gmane.comp.lang.swift.evolution/8014 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/8014&gt;) thread.<br>&gt;&gt; proposals/0051-stride-semantics.md:This proposal was discussed on-list in the [&quot;\[Discussion\] stride behavior and a little bit of a call-back to digital numbers&quot;](http://article.gmane.org/gmane.comp.lang.swift.evolution/8014 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/8014&gt;) thread.<br>&gt;&gt; proposals/0052-iterator-post-nil-guarantee.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16115 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16115&gt;))<br>&gt;&gt; proposals/0052-iterator-post-nil-guarantee.md:Swift-evolution thread: [\[Proposal\] Change guarantee for GeneratorType.next() to always return nil past end](http://thread.gmane.org/gmane.comp.lang.swift.evolution/8519 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/8519&gt;)<br>&gt;&gt; proposals/0052-iterator-post-nil-guarantee.md:In both cases, the extra state and branching that is sometimes needed has potential for performance implications. Though performance is not the *key* concern, iterators are often used in tight loops and can affect very commonly used algorithms. The original rationale for introducing the precondition was in fact because of concerns it might add storage and performance burden to some implementations of `IteratorType` (see [here](http://article.gmane.org/gmane.comp.lang.swift.evolution/8532 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/8532&gt;)). However in light of implementation experience, it appears including the guarantee would likely be beneficial for performance:<br>&gt;&gt; proposals/0053-remove-let-from-function-parameters.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/13188 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/13188&gt;))<br>&gt;&gt; proposals/0054-abolish-iuo.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/13490 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/13490&gt;))<br>&gt;&gt; proposals/0055-optional-unsafe-pointers.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/13511 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/13511&gt;))<br>&gt;&gt; proposals/0057-importing-objc-generics.md:Swift-evolution thread: [here](http://thread.gmane.org/gmane.comp.lang.swift.evolution/2886 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/2886&gt;)<br>&gt;&gt; proposals/0058-objectivecbridgeable.md:Swift-evolution thread: [\[Idea\] ObjectiveCBridgeable](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7852/ &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/7852/&gt;)<br>&gt;&gt; proposals/0058-objectivecbridgeable.md:Swift 3 ([thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/14419 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/14419&gt;)). We agree that it would be valuable to give library authors the<br>&gt;&gt; proposals/0059-updated-set-apis.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/14785/ &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/14785/&gt;))<br>&gt;&gt; proposals/0060-defaulted-parameter-order.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16894 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16894&gt;), [Bug](https://bugs.swift.org/browse/SR-1489 &lt;https://bugs.swift.org/browse/SR-1489&gt;))<br>&gt;&gt; proposals/0061-autoreleasepool-signature.md:* Status: **Accepted for Swift 3**  ~~([Bug](https://bugs.swift.org/browse/SR-1394 &lt;https://bugs.swift.org/browse/SR-1394&gt;))~~  ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15982 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/15982&gt;), [Bug](https://bugs.swift.org/browse/SR-842 &lt;https://bugs.swift.org/browse/SR-842&gt;))<br>&gt;&gt; proposals/0062-objc-keypaths.md:[SE Draft](http://thread.gmane.org/gmane.comp.lang.swift.evolution/8665 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/8665&gt;), [Review thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/14011/ &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/14011/&gt;), [Secondary review thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/14053 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/14053&gt;)<br>&gt;&gt; proposals/0063-swiftpm-system-module-search-paths.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/14638 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/14638&gt;))<br>&gt;&gt; proposals/0064-property-selectors.md:* Status: **Implemented in Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/14539/ &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/14539/&gt;))<br>&gt;&gt; proposals/0064-property-selectors.md:[Original swift-evolution thread](http://article.gmane.org/gmane.comp.lang.swift.evolution/7614 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/7614&gt;)<br>&gt;&gt; proposals/0064-property-selectors.md:[Follow-up swift-evolution thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7780 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/7780&gt;)<br>&gt;&gt; proposals/0065-collections-move-indices.md:* [Swift-evolution thread](http://news.gmane.org/find-root.php?message_id=CA%2bY5xYfqKR6yC2Q%2dG7D9N7FeY%3dxs1x3frq%3d%3dsyGoqYpOcL9yrw%40mail.gmail.com &lt;http://news.gmane.org/find-root.php?message_id=CA%2bY5xYfqKR6yC2Q%2dG7D9N7FeY%3dxs1x3frq%3d%3dsyGoqYpOcL9yrw%40mail.gmail.com&gt;)<br>&gt;&gt; proposals/0065-collections-move-indices.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15549 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/15549&gt;))<br>&gt;&gt; proposals/0066-standardize-function-type-syntax.md:On May 5, 2016, the core team decided to **accept** this proposal ([thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16245 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16245&gt;)).<br>&gt;&gt; proposals/0067-floating-point-protocols.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15953 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/15953&gt;))<br>&gt;&gt; proposals/0067-floating-point-protocols.md:[Proposal draft](http://thread.gmane.org/gmane.comp.lang.swift.evolution/14545 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/14545&gt;), [Review](http://thread.gmane.org/gmane.comp.lang.swift.evolution/14876 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/14876&gt;)<br>&gt;&gt; proposals/0068-universal-self.md:*This proposal was discussed on the Swift Evolution list in the [\[Pitch\] Adding a Self type name shortcut for static member access](http://thread.gmane.org/gmane.comp.lang.swift.evolution/13708/focus=13712 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/13708/focus=13712&gt;) thread.*<br>&gt;&gt; proposals/0069-swift-mutability-for-foundation.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16114 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16114&gt;))<br>&gt;&gt; proposals/0069-swift-mutability-for-foundation.md:[Swift Evolution Discussion](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15080 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/15080&gt;), [Swift Evolution Review](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15281 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/15281&gt;)<br>&gt;&gt; proposals/0070-optional-requirements.md:* Status: **Accepted for Swift 3**  ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15983 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/15983&gt;), [Bug](https://bugs.swift.org/browse/SR-1395 &lt;https://bugs.swift.org/browse/SR-1395&gt;))<br>&gt;&gt; proposals/0070-optional-requirements.md:[eliminate optional requirements](http://thread.gmane.org/gmane.comp.lang.swift.evolution/14046 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/14046&gt;),<br>&gt;&gt; proposals/0070-optional-requirements.md:[make Swift protocols support optional requirements](http://thread.gmane.org/gmane.comp.lang.swift.devel/1316 &lt;http://thread.gmane.org/gmane.comp.lang.swift.devel/1316&gt;) and<br>&gt;&gt; proposals/0070-optional-requirements.md:[make optional protocol requirements first class citizens](http://thread.gmane.org/gmane.comp.lang.swift.evolution/13347 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/13347&gt;).<br>&gt;&gt; proposals/0070-optional-requirements.md:[here](http://thread.gmane.org/gmane.comp.lang.swift.devel/1316 &lt;http://thread.gmane.org/gmane.comp.lang.swift.devel/1316&gt;) and<br>&gt;&gt; proposals/0070-optional-requirements.md:[here](http://thread.gmane.org/gmane.comp.lang.swift.evolution/13347 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/13347&gt;)).<br>&gt;&gt; proposals/0070-optional-requirements.md:implementations](http://thread.gmane.org/gmane.comp.lang.swift.evolution/14046 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/14046&gt;)<br>&gt;&gt; proposals/0071-member-keywords.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15954 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/15954&gt;))<br>&gt;&gt; proposals/0071-member-keywords.md:This idea was initially discussed in [this swift-evolution thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7991 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/7991&gt;).<br>&gt;&gt; proposals/0072-eliminate-implicit-bridging-conversions.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16240 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16240&gt;))<br>&gt;&gt; proposals/0073-noescape-once.md:On May 11, 2016, the core team decided to **Reject** this proposal for Swift 3 ([thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16896 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16896&gt;)).<br>&gt;&gt; proposals/0074-binary-search.md:On May 11, 2016, the core team decided to **Reject** this proposal ([thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16897 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16897&gt;)).  The<br>&gt;&gt; proposals/0075-import-test.md:modules was [first introduced](http://article.gmane.org/gmane.comp.lang.swift.evolution/7516/match=darwin &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/7516/match=darwin&gt;)<br>&gt;&gt; proposals/0075-import-test.md:[Swift Evolution Review Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16620 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16620&gt;)<br>&gt;&gt; proposals/0076-copying-to-unsafe-mutable-pointer-with-unsafe-pointer-source.md:* Status: **Accepted with Revisions for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16898 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16898&gt;), [Bug](https://bugs.swift.org/browse/SR-1490 &lt;https://bugs.swift.org/browse/SR-1490&gt;))<br>&gt;&gt; proposals/0079-upgrade-self-from-weak-to-strong.md:[Swift Evolution Discussion Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7582 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/7582&gt;), [Draft Proposal](http://thread.gmane.org/gmane.comp.lang.swift.evolution/6064 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/6064&gt;)<br>&gt;&gt; proposals/0080-failable-numeric-initializers.md:* Status: **Accepted with Revisions for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16899 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16899&gt;), [Bug](https://bugs.swift.org/browse/SR-1491 &lt;https://bugs.swift.org/browse/SR-1491&gt;))<br>&gt;&gt; proposals/0081-move-where-expression.md:[\[Pitch\] Moving where Clauses Out Of Parameter Lists](http://thread.gmane.org/gmane.comp.lang.swift.evolution/13886/focus=13899 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/13886/focus=13899&gt;)<br>&gt;&gt; proposals/0082-swiftpm-package-edit.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16614 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16614&gt;))<br>&gt;&gt; proposals/0082-swiftpm-package-edit.md:[Proposal Announcement](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15279 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/15279&gt;)<br>&gt;&gt; proposals/0082-swiftpm-package-edit.md:[Review announcement](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16078 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16078&gt;)<br>&gt;&gt; proposals/0085-package-manager-command-name.md:* Status: **Implemented in Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.build/1/focus=26 &lt;http://thread.gmane.org/gmane.comp.lang.swift.build/1/focus=26&gt;))<br>&gt;&gt; proposals/0085-package-manager-command-name.md:[Swift Build Review Thread](http://thread.gmane.org/gmane.comp.lang.swift.build/1/ &lt;http://thread.gmane.org/gmane.comp.lang.swift.build/1/&gt;)<br>&gt;&gt; proposals/0085-package-manager-command-name.md:[Swift Evolution Review Thread](http://thread.gmane.org/gmane.comp.lang.swift.build/1/focus=16764 &lt;http://thread.gmane.org/gmane.comp.lang.swift.build/1/focus=16764&gt;)<br>&gt;&gt; proposals/0086-drop-foundation-ns.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/23869 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/23869&gt;))<br>&gt;&gt; proposals/0086-drop-foundation-ns.md:[Swift Evolution Discussion Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16298 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16298&gt;)<br>&gt;&gt; proposals/0086-drop-foundation-ns.md:[Review Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16509 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16509&gt;)<br>&gt;&gt; proposals/0088-libdispatch-for-swift3.md:* Status: **Accepted with Revisions** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17819 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/17819&gt;))<br>&gt;&gt; proposals/0088-libdispatch-for-swift3.md:[Review thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16745 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16745&gt;)<br>&gt;&gt; proposals/0092-typealiases-in-protocols.md:* Status: **Implemented in Swift 3.0** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17317 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/17317&gt;))<br>&gt;&gt; proposals/0094-sequence-function.md:Swift-evolution thread: [Discussion thread topic for that proposal](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15743/focus=17108 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/15743/focus=17108&gt;)<br>&gt;&gt; proposals/0094-sequence-function.md:[SE-0045a]: http://article.gmane.org/gmane.comp.lang.swift.evolution/16119 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/16119&gt;<br>&gt;&gt; proposals/0095-any-as-existential.md:Discussion threads: [pre-proposal](https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160516/018109.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160516/018109.html&gt;), [review thread 1](http://thread.gmane.org/gmane.comp.lang.swift.evolution/18349 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/18349&gt;), [2](http://thread.gmane.org/gmane.comp.lang.swift.evolution/18350/focus=18447 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/18350/focus=18447&gt;), [3](http://thread.gmane.org/gmane.comp.lang.swift.evolution/18351/focus=18440 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/18351/focus=18440&gt;), [4](http://thread.gmane.org/gmane.comp.lang.swift.evolution/18518 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/18518&gt;), [post-review thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/19463 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/19463&gt;)<br>&gt;&gt; proposals/0096-dynamictype.md:[RFC: didset and willset](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17534 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/17534&gt;)<br>&gt;&gt; proposals/0097-negative-attributes.md:[RFC: didset and willset](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17534 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/17534&gt;)<br>&gt;&gt; proposals/0098-didset-capitalization.md:[RFC: didset and willset](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17534 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/17534&gt;)<br>&gt;&gt; proposals/0099-conditionclauses.md:[\[Pitch\] making where and ,	interchangeable in guard conditions](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17926 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/17926&gt;)<br>&gt;&gt; proposals/0101-standardizing-sizeof-naming.md:* Swift Evolution Pitch: [\[Pitch\] Renaming sizeof, sizeofValue, strideof,	strideofValue](http://thread.gmane.org/gmane.comp.lang.swift.evolution/19459 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/19459&gt;)<br>&gt;&gt; proposals/0101-standardizing-sizeof-naming.md:* [Earlier Discussions](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15830 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/15830&gt;)<br>&gt;&gt; proposals/0101-standardizing-sizeof-naming.md:* [SE-0101 Review](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21103 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/21103&gt;)<br>&gt;&gt; proposals/0103-make-noescape-default.md:* [Make non-escaping closures the default](http://thread.gmane.org/gmane.comp.lang.swift.evolution/19756 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/19756&gt;)<br>&gt;&gt; proposals/0105-remove-where-from-forin-loops.md:Swift Evolution Discussion: [\[Pitch\] Retiring `where` from for-in loops](http://thread.gmane.org/gmane.comp.lang.swift.evolution/20142 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/20142&gt;)<br>&gt;&gt; proposals/0106-rename-osx-to-macos.md:Swift Evolution Discussion: [\[DRAFT\] Aliasing the OS X Platform Configuration	Test](http://thread.gmane.org/gmane.comp.lang.swift.evolution/20815 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/20815&gt;)<br>&gt;&gt; proposals/0108-remove-assoctype-inference.md:swift-evolution thread: [pre-proposal](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21714 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/21714&gt;)<br>&gt;&gt; proposals/0108-remove-assoctype-inference.md:As Douglas Gregor (original author of the relevant type inference code) [puts it](http://article.gmane.org/gmane.comp.lang.swift.evolution/22058 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/22058&gt;):<br>&gt;&gt; proposals/0108-remove-assoctype-inference.md:To some extent, this is an issue inherent to any design which makes no distinctions at the site of implementation between members intended to satisfy protocol requirements and members that are explicitly not intended to satisfy protocol requirements. Rather than adding keywords to create this distinction, Douglas Gregor has [proposed and implemented type checker heuristics](http://article.gmane.org/gmane.comp.lang.swift.devel/1799 &lt;http://article.gmane.org/gmane.comp.lang.swift.devel/1799&gt;) that will generate warnings when a programmer implements a member that &quot;looks like&quot; it should fulfill a protocol requirement but does not actually do so. This is one possible mitigation strategy that should be revisited as a way to decrease the possible impact of removing associated type witness inference from the compiler.<br>&gt;&gt; proposals/0108-remove-assoctype-inference.md:As well, Dave Abrahams expresses a [potential issue](http://article.gmane.org/gmane.comp.lang.swift.evolution/21892 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/21892&gt;):<br>&gt;&gt; proposals/0109-remove-boolean.md:* Status: Accepted ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/23844 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/23844&gt;))<br>&gt;&gt; proposals/0109-remove-boolean.md:[Discussion thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21559 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/21559&gt;)<br>&gt;&gt; proposals/0110-distingish-single-tuple-arg.md:Discussion: [pre-proposal](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21732 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/21732&gt;)<br>&gt;&gt; proposals/0111-remove-arg-label-type-significance.md:Discussion: [pre-proposal](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21369 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/21369&gt;)<br>&gt;&gt; proposals/0114-buffer-naming.md:[Swift Evolution Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/22127 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/22127&gt;)<br>&gt;&gt; proposals/0115-literal-syntax-protocols.md:Swift-evolution thread: [Literal Syntax Protocols](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21441 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/21441&gt;)<br>&gt;&gt; proposals/0115-literal-syntax-protocols.md:An earlier thread that resulted in this proposal: [Revisiting SE-0041 Names](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21290 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/21290&gt;)<br>&gt;&gt; proposals/0117-non-public-subclassable-by-default.md:Swift-evolution thread: http://thread.gmane.org/gmane.comp.lang.swift.evolution/21930/ &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/21930/&gt;<br>&gt;&gt; proposals/0118-closure-parameter-names-and-labels.md:[Take 2: Stdlib closure argument labels and parameter names](http://thread.gmane.org/gmane.comp.lang.swift.evolution/22188 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/22188&gt;)<br>&gt;&gt; proposals/0118-closure-parameter-names-and-labels.md:[Stdlib closure argument labels and parameter names ](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21046 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/21046&gt;)<br>&gt;&gt; proposals/0121-remove-optional-comparison-operators.md:- [Optional comparison operators](http://thread.gmane.org/gmane.comp.lang.swift.evolution/23306 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/23306&gt;) (most recent)<br>&gt;&gt; proposals/0121-remove-optional-comparison-operators.md:- [Possible bug with arithmetic optional comparison ?](http://thread.gmane.org/gmane.comp.lang.swift.devel/2089 &lt;http://thread.gmane.org/gmane.comp.lang.swift.devel/2089&gt;)<br>&gt;&gt; proposals/0121-remove-optional-comparison-operators.md:- [? suffix for &lt;, &gt;, &lt;=, &gt;= comparisons with optionals to prevent subtle bugs](http://thread.gmane.org/gmane.comp.lang.swift.evolution/10095 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/10095&gt;)<br>&gt;&gt; proposals/0121-remove-optional-comparison-operators.md:If the coercion is not removed (if no change is made), the results of comparisons with Optional values are sometimes **surprising**, making it easy to write bugs. In a thread from December 2015, [Al Skipp offers](http://thread.gmane.org/gmane.comp.lang.swift.evolution/10095/focus=10098 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/10095/focus=10098&gt;) the following example:<br>&gt;&gt; proposals/0122-use-colons-for-subscript-type-declarations.md:Swift-evolution thread: [Discussion thread topic for that proposal](http://article.gmane.org/gmane.comp.lang.swift.evolution/23457 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/23457&gt;)<br>&gt;&gt; proposals/0127-cleaning-up-stdlib-ptr-buffer.md:Swift-evolution thread: [Cleaning up stdlib Pointer and Buffer Routines](http://thread.gmane.org/gmane.comp.lang.swift.evolution/23093 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/23093&gt;)<br>&gt;&gt; proposals/0131-anyhashable.md:Swift-evolution thread: [Add AnyHashable to the standard library](http://thread.gmane.org/gmane.comp.lang.swift.evolution/24835 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/24835&gt;).<br>&gt;&gt; proposals/0132-sequence-end-ops.md:Swift-evolution thread: [[Draft] Rationalizing Sequence end-operation names](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21449/focus=23013 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/21449/focus=23013&gt;)<br>&gt;&gt; proposals/0133-rename-flatten-to-joined.md:- [[Pitch] Unify joined(separator:) and flatten()](http://thread.gmane.org/gmane.comp.lang.swift.evolution/24707 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/24707&gt;)<br>&gt;&gt; proposals/0133-rename-flatten-to-joined.md:- [[Pitch] Rename flatten() to joined() and give joined() for string sequences the empty string as the default parameter](http://thread.gmane.org/gmane.comp.lang.swift.evolution/24805 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/24805&gt;)<br>&gt;&gt; proposals/0134-rename-string-properties.md:Swift-evolution thread: [Discussion thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/24955 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/24955&gt;)<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160731/fd8179ed/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[META] Gmane and Swift Evolution</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>July 31, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt;&gt; On Jul 31, 2016, at 15:42, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Jul 31, 2016, at 3:40 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Gmane.org &lt;http://gmane.org/&gt; is shutting down. http://ostatic.com/blog/mint-18-xfce-imminent-gmane-org-shutting-down &lt;http://ostatic.com/blog/mint-18-xfce-imminent-gmane-org-shutting-down&gt; writes:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; &quot;Long time mailing list archive site Gmane.org &lt;http://gmane.org/&gt; is shutting down. Gmane has been the home for technical mailing list references since 2002. But it&#39;s no longer fun for founder and only maintainer Lars Ingebrigtsen. He&#39;s been sued in India and threatened with legal action in at least France, among other annoyances. The straw that broke Ingebrigtsen&#39;s back was a sustained denial of service &lt;https://lars.ingebrigtsen.no/2016/07/28/the-end-of-gmane/&gt; attack throughout the month of July. He&#39;s been wondering a lot lately if it&#39;s all worth it. So, he&#39;s decided &lt;https://lars.ingebrigtsen.no/2016/07/28/the-end-of-gmane/comment-page-1/#comment-13502&gt; to move the mail and news servers to new hosting. However, Ingebrigtsen is indeed discontinuing the web-based archive. He said he&#39;s just &quot;fed up.&quot; He&#39;s willing to send a disk with the web server archives to anyone who wants to take it over. But with the Gmane.org &lt;http://gmane.org/&gt; web presence gone, it feels like the end of an era. There is much wailing and gnashing of teeth throughout the community with some even trying to get a petition started.&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Because of this shutdown, numerous documents in the Swift Evolution github archive no longer point to valid web links. I have pasted a list of gmane links at the end of this message. As gmane&#39;s &quot;robots.txt&quot; disallowed crawling, Google has not preserved the titles or text of the links, which makes finding some of these a little tricky.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Here are the remaining links that are not yet converted. Please consider adopting a proposal, tracking down its links, and mailing this thread with the proposal number, gmane links and pipermail equivalents. Pipermail is located at https://lists.swift.org/pipermail/swift-evolution/ &lt;https://lists.swift.org/pipermail/swift-evolution/&gt;. Some of these may refer to  build dev discussions instead of evolution ones. If you can, please track down to the exact message for rationale, and the thread for discussion and review links.<br>&gt;&gt; <br>&gt;&gt; Completely agreed.  All of these should point to https://lists.swift.org &lt;https://lists.swift.org/&gt; (and always should have, exactly for reasons like this).  I’d appreciate any PRs to help clean up the evolution repo to point to https://lists.swift.org &lt;https://lists.swift.org/&gt; instead.<br>&gt;&gt; <br>&gt;&gt; Thanks!<br>&gt;&gt; <br>&gt;&gt; -Chris<br></p><p>&gt; On Jul 31, 2016, at 4:51 PM, Saagar Jha &lt;saagarjha28 at gmail.com&gt; wrote:<br>&gt; <br>&gt; I’d be happy to help. I see 94 instances of “gmane&quot;, do we want to split it up (since I see Erica is on it already)?<br>&gt; <br>&gt; Saagar Jha<br></p><p>If you start from the end (most recent proposals) and work backwards, it will be a lot easier for me. Thanks! -- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160731/92e88454/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdd257c9369fb68e1d06923d10ff789e?s=50"></div><header><strong>[META] Gmane and Swift Evolution</strong> from <string>Ben Rimmington</string> &lt;me at benrimmington.com&gt;<p>August  1, 2016 at 03:00:00am</p></header><div class="content"><p>&gt; On 1 Aug 2016, at 00:00, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On Jul 31, 2016, at 15:42, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 31, 2016, at 3:40 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Gmane.org &lt;http://gmane.org/&gt; is shutting down. http://ostatic.com/blog/mint-18-xfce-imminent-gmane-org-shutting-down &lt;http://ostatic.com/blog/mint-18-xfce-imminent-gmane-org-shutting-down&gt; writes:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; &quot;Long time mailing list archive site Gmane.org &lt;http://gmane.org/&gt; is shutting down. Gmane has been the home for technical mailing list references since 2002. But it&#39;s no longer fun for founder and only maintainer Lars Ingebrigtsen. He&#39;s been sued in India and threatened with legal action in at least France, among other annoyances. The straw that broke Ingebrigtsen&#39;s back was a sustained denial of service &lt;https://lars.ingebrigtsen.no/2016/07/28/the-end-of-gmane/&gt; attack throughout the month of July. He&#39;s been wondering a lot lately if it&#39;s all worth it. So, he&#39;s decided &lt;https://lars.ingebrigtsen.no/2016/07/28/the-end-of-gmane/comment-page-1/#comment-13502&gt; to move the mail and news servers to new hosting. However, Ingebrigtsen is indeed discontinuing the web-based archive. He said he&#39;s just &quot;fed up.&quot; He&#39;s willing to send a disk with the web server archives to anyone who wants to take it over. But with the Gmane.org &lt;http://gmane.org/&gt; web presence gone, it feels like the end of an era. There is much wailing and gnashing of teeth throughout the community with some even trying to get a petition started.&quot;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Because of this shutdown, numerous documents in the Swift Evolution github archive no longer point to valid web links. I have pasted a list of gmane links at the end of this message. As gmane&#39;s &quot;robots.txt&quot; disallowed crawling, Google has not preserved the titles or text of the links, which makes finding some of these a little tricky.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Here are the remaining links that are not yet converted. Please consider adopting a proposal, tracking down its links, and mailing this thread with the proposal number, gmane links and pipermail equivalents. Pipermail is located at https://lists.swift.org/pipermail/swift-evolution/ &lt;https://lists.swift.org/pipermail/swift-evolution/&gt;. Some of these may refer to  build dev discussions instead of evolution ones. If you can, please track down to the exact message for rationale, and the thread for discussion and review links.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Completely agreed.  All of these should point to https://lists.swift.org &lt;https://lists.swift.org/&gt; (and always should have, exactly for reasons like this).  I’d appreciate any PRs to help clean up the evolution repo to point to https://lists.swift.org &lt;https://lists.swift.org/&gt; instead.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Chris<br>&gt; <br>&gt;&gt; On Jul 31, 2016, at 4:51 PM, Saagar Jha &lt;saagarjha28 at gmail.com &lt;mailto:saagarjha28 at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I’d be happy to help. I see 94 instances of “gmane&quot;, do we want to split it up (since I see Erica is on it already)?<br>&gt;&gt; <br>&gt;&gt; Saagar Jha<br>&gt; <br>&gt; If you start from the end (most recent proposals) and work backwards, it will be a lot easier for me. Thanks! -- E<br></p><p>I&#39;ll update the middle third (SE-0046 ... SE-0090).<br></p><p>-- Ben<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160801/a4aaa145/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[META] Gmane and Swift Evolution</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>August  1, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jul 31, 2016, at 8:51 PM, Ben Rimmington &lt;me at benrimmington.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On 1 Aug 2016, at 00:00, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 31, 2016, at 15:42, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jul 31, 2016, at 3:40 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Gmane.org &lt;http://gmane.org/&gt; is shutting down. http://ostatic.com/blog/mint-18-xfce-imminent-gmane-org-shutting-down &lt;http://ostatic.com/blog/mint-18-xfce-imminent-gmane-org-shutting-down&gt; writes:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; &quot;Long time mailing list archive site Gmane.org &lt;http://gmane.org/&gt; is shutting down. Gmane has been the home for technical mailing list references since 2002. But it&#39;s no longer fun for founder and only maintainer Lars Ingebrigtsen. He&#39;s been sued in India and threatened with legal action in at least France, among other annoyances. The straw that broke Ingebrigtsen&#39;s back was a sustained denial of service &lt;https://lars.ingebrigtsen.no/2016/07/28/the-end-of-gmane/&gt; attack throughout the month of July. He&#39;s been wondering a lot lately if it&#39;s all worth it. So, he&#39;s decided &lt;https://lars.ingebrigtsen.no/2016/07/28/the-end-of-gmane/comment-page-1/#comment-13502&gt; to move the mail and news servers to new hosting. However, Ingebrigtsen is indeed discontinuing the web-based archive. He said he&#39;s just &quot;fed up.&quot; He&#39;s willing to send a disk with the web server archives to anyone who wants to take it over. But with the Gmane.org &lt;http://gmane.org/&gt; web presence gone, it feels like the end of an era. There is much wailing and gnashing of teeth throughout the community with some even trying to get a petition started.&quot;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Because of this shutdown, numerous documents in the Swift Evolution github archive no longer point to valid web links. I have pasted a list of gmane links at the end of this message. As gmane&#39;s &quot;robots.txt&quot; disallowed crawling, Google has not preserved the titles or text of the links, which makes finding some of these a little tricky.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Here are the remaining links that are not yet converted. Please consider adopting a proposal, tracking down its links, and mailing this thread with the proposal number, gmane links and pipermail equivalents. Pipermail is located at https://lists.swift.org/pipermail/swift-evolution/ &lt;https://lists.swift.org/pipermail/swift-evolution/&gt;. Some of these may refer to  build dev discussions instead of evolution ones. If you can, please track down to the exact message for rationale, and the thread for discussion and review links.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Completely agreed.  All of these should point to https://lists.swift.org &lt;https://lists.swift.org/&gt; (and always should have, exactly for reasons like this).  I’d appreciate any PRs to help clean up the evolution repo to point to https://lists.swift.org &lt;https://lists.swift.org/&gt; instead.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks!<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Chris<br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 31, 2016, at 4:51 PM, Saagar Jha &lt;saagarjha28 at gmail.com &lt;mailto:saagarjha28 at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’d be happy to help. I see 94 instances of “gmane&quot;, do we want to split it up (since I see Erica is on it already)?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Saagar Jha<br>&gt;&gt; <br>&gt;&gt; If you start from the end (most recent proposals) and work backwards, it will be a lot easier for me. Thanks! -- E<br>&gt; <br>&gt; I&#39;ll update the middle third (SE-0046 ... SE-0090).<br>&gt; <br>&gt; -- Ben<br></p><p>Thanks!<br></p><p>Here&#39;s what&#39;s left:<br></p><p>proposals/0017-convert-unmanaged-to-use-unsafepointer.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16118))<br>proposals/0017-convert-unmanaged-to-use-unsafepointer.md:[Swift Evolution Discussion](http://thread.gmane.org/gmane.comp.lang.swift.evolution/9877), [Proposed Rewrite Discussion](http://thread.gmane.org/gmane.comp.lang.swift.evolution/68/)<br>proposals/0019-package-manager-testing.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/4103), [Bug](https://bugs.swift.org/browse/SR-592))<br>proposals/0019-package-manager-testing.md:[SE Review Link](http://thread.gmane.org/gmane.comp.lang.swift.evolution/3583)<br>proposals/0021-generalized-naming.md:* Status: **Implemented in Swift 2.2** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/3317/focus=3961))<br>proposals/0022-objc-selectors.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/4622))<br>proposals/0022-objc-selectors.md:Swift-evolution thread: [here](http://thread.gmane.org/gmane.comp.lang.swift.evolution/1384/focus=1403)<br>proposals/0023-api-guidelines.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/8585))<br>proposals/0024-optional-value-setter.md:* Status: **Rejected** ([Rationale](http://article.gmane.org/gmane.comp.lang.swift.evolution/7694))<br>proposals/0025-scoped-access-level.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12183/focus=13584), [Bug](https://bugs.swift.org/browse/SR-1275))<br>proposals/0025-scoped-access-level.md:[Swift Evolution Discussion](http://thread.gmane.org/gmane.comp.lang.swift.evolution/9334), [Next Steps Discussion](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12183)<br>proposals/0026-abstract-classes-and-methods.md:* Status: **Deferred** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/8809))<br>proposals/0027-string-from-code-units.md:* Status: **Rejected** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7695))<br>proposals/0028-modernizing-debug-identifiers.md:* Status: **Implemented in Swift 2.2** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/5805), Bug: [SR-669](https://bugs.swift.org/browse/SR-669))<br>proposals/0029-remove-implicit-tuple-splat.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/6405))<br>proposals/0030-property-behavior-decls.md:* Status: **Rejected** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7735))<br>proposals/0030-property-behavior-decls.md:[Swift Evolution Discussion](http://thread.gmane.org/gmane.comp.lang.swift.evolution/11976)&lt;br/&gt;<br>proposals/0030-property-behavior-decls.md:[Review](http://thread.gmane.org/gmane.comp.lang.swift.evolution/6426)<br>proposals/0031-adjusting-inout-declarations.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7394))<br>proposals/0031-adjusting-inout-declarations.md:*The initial Swift-Evolution discussion of this topic took place in the &quot;[Replace &#39;inout&#39; with &amp;](http://comments.gmane.org/gmane.comp.lang.swift.evolution/2751)&quot; thread.*<br>proposals/0032-sequencetype-find.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16116))<br>proposals/0033-import-objc-constants.md:* Status: **Implemented in Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/8817))<br>proposals/0034-disambiguating-line.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/8156), [Implementation Bug](https://bugs.swift.org/browse/SR-840))<br>proposals/0034-disambiguating-line.md:The discussion took place on-line in the [*\[Discussion\]: Renaming #line, the line control statement*](http://comments.gmane.org/gmane.comp.lang.swift.evolution/5815) thread.<br>proposals/0035-limit-inout-capture.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7732), [Bug](https://bugs.swift.org/browse/SR-807))<br>proposals/0036-enum-dot.md:*Discussion took place on the Swift Evolution mailing list in the [\[Discussion\] Enum Leading Dot Prefixes](http://article.gmane.org/gmane.comp.lang.swift.evolution/6684) thread. This proposal uses lowerCamelCase enumeration cases in compliance with<br>proposals/0036-enum-dot.md:current [API Guideline Working Group guidance](http://news.gmane.org/gmane.comp.lang.swift.evolution).*<br>proposals/0037-clarify-comments-and-operators.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12350), [Bug](https://bugs.swift.org/browse/SR-960))<br>proposals/0037-clarify-comments-and-operators.md:Swift-evolution thread: [started here](http://thread.gmane.org/gmane.comp.lang.swift.evolution/605)<br>proposals/0037-clarify-comments-and-operators.md:and [continued here](http://thread.gmane.org/gmane.comp.lang.swift.evolution/2855).<br>proposals/0038-swiftpm-c-language-targets.md:[Swift Evolution Review Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7293)<br>proposals/0039-playgroundliterals.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/9149/), [Bug](https://bugs.swift.org/browse/SR-917))<br>proposals/0039-playgroundliterals.md:*Discussion took place on the Swift Evolution mailing list in the [\[Discussion\] Modernizing Playground Literals](http://article.gmane.org/gmane.comp.lang.swift.evolution/7124) thread. Thanks to [Chris Lattner](https://github.com/lattner) for suggesting this enhancement.*<br>proposals/0040-attributecolons.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/8920))<br>proposals/0040-attributecolons.md:*Discussion took place on the Swift Evolution mailing list in the [\[Discussion\] Replacing Equal Signs with Colons For Attribute Arguments](http://article.gmane.org/gmane.comp.lang.swift.evolution/7271) thread. Thanks to [Doug Gregor](https://github.com/DougGregor) for suggesting this enhancement.*<br>proposals/0042-flatten-method-types.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12828), [Bug](https://bugs.swift.org/browse/SR-1051))<br>proposals/0043-declare-variables-in-case-labels-with-multiple-patterns.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12827))<br>proposals/0043-declare-variables-in-case-labels-with-multiple-patterns.md:Swift-evolution thread: [here](http://thread.gmane.org/gmane.comp.lang.swift.evolution/4256)<br>proposals/0044-import-as-member.md:* Status: **Implemented in Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12842), [Bug](https://bugs.swift.org/browse/SR-1053))<br>proposals/0044-import-as-member.md:[Swift-evolution thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/8437)&lt;br /&gt;<br>proposals/0044-import-as-member.md:[Review](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12274)<br>proposals/0045-scan-takewhile-dropwhile.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16119), [Bug](https://bugs.swift.org/browse/SR-1516))<br>proposals/0045-scan-takewhile-dropwhile.md:[Proposal: Add scan, takeWhile, dropWhile, and iterate to the stdlib](http://thread.gmane.org/gmane.comp.lang.swift.evolution/1515)<br>proposals/0045-scan-takewhile-dropwhile.md:[rationale]: http://article.gmane.org/gmane.comp.lang.swift.evolution/16119<br>proposals/0076-copying-to-unsafe-mutable-pointer-with-unsafe-pointer-source.md:* Status: **Accepted with Revisions for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16898), [Bug](https://bugs.swift.org/browse/SR-1490))<br>proposals/0079-upgrade-self-from-weak-to-strong.md:[Swift Evolution Discussion Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7582), [Draft Proposal](http://thread.gmane.org/gmane.comp.lang.swift.evolution/6064)<br>proposals/0080-failable-numeric-initializers.md:* Status: **Accepted with Revisions for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16899), [Bug](https://bugs.swift.org/browse/SR-1491))<br>proposals/0081-move-where-expression.md:[\[Pitch\] Moving where Clauses Out Of Parameter Lists](http://thread.gmane.org/gmane.comp.lang.swift.evolution/13886/focus=13899)<br>proposals/0082-swiftpm-package-edit.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16614))<br>proposals/0082-swiftpm-package-edit.md:[Proposal Announcement](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15279)<br>proposals/0082-swiftpm-package-edit.md:[Review announcement](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16078)<br>proposals/0085-package-manager-command-name.md:* Status: **Implemented in Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.build/1/focus=26))<br>proposals/0085-package-manager-command-name.md:[Swift Build Review Thread](http://thread.gmane.org/gmane.comp.lang.swift.build/1/)<br>proposals/0085-package-manager-command-name.md:[Swift Evolution Review Thread](http://thread.gmane.org/gmane.comp.lang.swift.build/1/focus=16764)<br>proposals/0086-drop-foundation-ns.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/23869))<br>proposals/0086-drop-foundation-ns.md:[Swift Evolution Discussion Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16298)<br>proposals/0086-drop-foundation-ns.md:[Review Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16509)<br>proposals/0088-libdispatch-for-swift3.md:* Status: **Accepted with Revisions** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17819))<br>proposals/0088-libdispatch-for-swift3.md:[Review thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16745)<br>proposals/0092-typealiases-in-protocols.md:* Status: **Implemented in Swift 3.0** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17317))<br>proposals/0094-sequence-function.md:Swift-evolution thread: [Discussion thread topic for that proposal](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15743/focus=17108)<br>proposals/0094-sequence-function.md:[SE-0045a]: http://article.gmane.org/gmane.comp.lang.swift.evolution/16119<br>proposals/0095-any-as-existential.md:Discussion threads: [pre-proposal](https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160516/018109.html), [review thread 1](http://thread.gmane.org/gmane.comp.lang.swift.evolution/18349), [2](http://thread.gmane.org/gmane.comp.lang.swift.evolution/18350/focus=18447), [3](http://thread.gmane.org/gmane.comp.lang.swift.evolution/18351/focus=18440), [4](http://thread.gmane.org/gmane.comp.lang.swift.evolution/18518), [post-review thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/19463)<br>proposals/0096-dynamictype.md:[RFC: didset and willset](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17534)<br>proposals/0097-negative-attributes.md:[RFC: didset and willset](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17534)<br>proposals/0098-didset-capitalization.md:[RFC: didset and willset](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17534)<br>proposals/0099-conditionclauses.md:[\[Pitch\] making where and ,	interchangeable in guard conditions](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17926)<br>proposals/0101-standardizing-sizeof-naming.md:* Swift Evolution Pitch: [\[Pitch\] Renaming sizeof, sizeofValue, strideof,	strideofValue](http://thread.gmane.org/gmane.comp.lang.swift.evolution/19459)<br>proposals/0101-standardizing-sizeof-naming.md:* [Earlier Discussions](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15830)<br>proposals/0101-standardizing-sizeof-naming.md:* [SE-0101 Review](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21103)<br>proposals/0103-make-noescape-default.md:* [Make non-escaping closures the default](http://thread.gmane.org/gmane.comp.lang.swift.evolution/19756)<br>proposals/0105-remove-where-from-forin-loops.md:Swift Evolution Discussion: [\[Pitch\] Retiring `where` from for-in loops](http://thread.gmane.org/gmane.comp.lang.swift.evolution/20142)<br>proposals/0106-rename-osx-to-macos.md:Swift Evolution Discussion: [\[DRAFT\] Aliasing the OS X Platform Configuration	Test](http://thread.gmane.org/gmane.comp.lang.swift.evolution/20815)<br>proposals/0108-remove-assoctype-inference.md:swift-evolution thread: [pre-proposal](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21714)<br>proposals/0108-remove-assoctype-inference.md:As Douglas Gregor (original author of the relevant type inference code) [puts it](http://article.gmane.org/gmane.comp.lang.swift.evolution/22058):<br>proposals/0108-remove-assoctype-inference.md:To some extent, this is an issue inherent to any design which makes no distinctions at the site of implementation between members intended to satisfy protocol requirements and members that are explicitly not intended to satisfy protocol requirements. Rather than adding keywords to create this distinction, Douglas Gregor has [proposed and implemented type checker heuristics](http://article.gmane.org/gmane.comp.lang.swift.devel/1799) that will generate warnings when a programmer implements a member that &quot;looks like&quot; it should fulfill a protocol requirement but does not actually do so. This is one possible mitigation strategy that should be revisited as a way to decrease the possible impact of removing associated type witness inference from the compiler.<br>proposals/0108-remove-assoctype-inference.md:As well, Dave Abrahams expresses a [potential issue](http://article.gmane.org/gmane.comp.lang.swift.evolution/21892):<br>proposals/0109-remove-boolean.md:* Status: Accepted ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/23844))<br>proposals/0109-remove-boolean.md:[Discussion thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21559)<br>proposals/0110-distingish-single-tuple-arg.md:Discussion: [pre-proposal](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21732)<br>proposals/0111-remove-arg-label-type-significance.md:Discussion: [pre-proposal](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21369)<br>proposals/0114-buffer-naming.md:[Swift Evolution Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/22127)<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160801/88b39f20/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e2000c4913814c2ca9e16442ae908265?s=50"></div><header><strong>[META] Gmane and Swift Evolution</strong> from <string>Krishna Kumar</string> &lt;kkdevenda at gmail.com&gt;<p>August  2, 2016 at 12:00:00am</p></header><div class="content"><p>Hey<br></p><p>I’ll update (SE0017 - SE0045)<br></p><p>Thanks<br></p><p>-Krishna<br>&gt; On Aug 1, 2016, at 8:33 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Jul 31, 2016, at 8:51 PM, Ben Rimmington &lt;me at benrimmington.com &lt;mailto:me at benrimmington.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On 1 Aug 2016, at 00:00, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jul 31, 2016, at 15:42, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jul 31, 2016, at 3:40 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Gmane.org &lt;http://gmane.org/&gt; is shutting down. http://ostatic.com/blog/mint-18-xfce-imminent-gmane-org-shutting-down &lt;http://ostatic.com/blog/mint-18-xfce-imminent-gmane-org-shutting-down&gt; writes:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;Long time mailing list archive site Gmane.org &lt;http://gmane.org/&gt; is shutting down. Gmane has been the home for technical mailing list references since 2002. But it&#39;s no longer fun for founder and only maintainer Lars Ingebrigtsen. He&#39;s been sued in India and threatened with legal action in at least France, among other annoyances. The straw that broke Ingebrigtsen&#39;s back was a sustained denial of service &lt;https://lars.ingebrigtsen.no/2016/07/28/the-end-of-gmane/&gt; attack throughout the month of July. He&#39;s been wondering a lot lately if it&#39;s all worth it. So, he&#39;s decided &lt;https://lars.ingebrigtsen.no/2016/07/28/the-end-of-gmane/comment-page-1/#comment-13502&gt; to move the mail and news servers to new hosting. However, Ingebrigtsen is indeed discontinuing the web-based archive. He said he&#39;s just &quot;fed up.&quot; He&#39;s willing to send a disk with the web server archives to anyone who wants to take it over. But with the Gmane.org &lt;http://gmane.org/&gt; web presence gone, it feels like the end of an era. There is much wailing and gnashing of teeth throughout the community with some even trying to get a petition started.&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Because of this shutdown, numerous documents in the Swift Evolution github archive no longer point to valid web links. I have pasted a list of gmane links at the end of this message. As gmane&#39;s &quot;robots.txt&quot; disallowed crawling, Google has not preserved the titles or text of the links, which makes finding some of these a little tricky.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Here are the remaining links that are not yet converted. Please consider adopting a proposal, tracking down its links, and mailing this thread with the proposal number, gmane links and pipermail equivalents. Pipermail is located at https://lists.swift.org/pipermail/swift-evolution/ &lt;https://lists.swift.org/pipermail/swift-evolution/&gt;. Some of these may refer to  build dev discussions instead of evolution ones. If you can, please track down to the exact message for rationale, and the thread for discussion and review links.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Completely agreed.  All of these should point to https://lists.swift.org &lt;https://lists.swift.org/&gt; (and always should have, exactly for reasons like this).  I’d appreciate any PRs to help clean up the evolution repo to point to https://lists.swift.org &lt;https://lists.swift.org/&gt; instead.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Thanks!<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 31, 2016, at 4:51 PM, Saagar Jha &lt;saagarjha28 at gmail.com &lt;mailto:saagarjha28 at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’d be happy to help. I see 94 instances of “gmane&quot;, do we want to split it up (since I see Erica is on it already)?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Saagar Jha<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If you start from the end (most recent proposals) and work backwards, it will be a lot easier for me. Thanks! -- E<br>&gt;&gt; <br>&gt;&gt; I&#39;ll update the middle third (SE-0046 ... SE-0090).<br>&gt;&gt; <br>&gt;&gt; -- Ben<br>&gt; <br>&gt; Thanks!<br>&gt; <br>&gt; Here&#39;s what&#39;s left:<br>&gt; <br>&gt; proposals/0017-convert-unmanaged-to-use-unsafepointer.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16118 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16118&gt;))<br>&gt; proposals/0017-convert-unmanaged-to-use-unsafepointer.md:[Swift Evolution Discussion](http://thread.gmane.org/gmane.comp.lang.swift.evolution/9877 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/9877&gt;), [Proposed Rewrite Discussion](http://thread.gmane.org/gmane.comp.lang.swift.evolution/68/ &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/68/&gt;)<br>&gt; proposals/0019-package-manager-testing.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/4103 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/4103&gt;), [Bug](https://bugs.swift.org/browse/SR-592 &lt;https://bugs.swift.org/browse/SR-592&gt;))<br>&gt; proposals/0019-package-manager-testing.md:[SE Review Link](http://thread.gmane.org/gmane.comp.lang.swift.evolution/3583 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/3583&gt;)<br>&gt; proposals/0021-generalized-naming.md:* Status: **Implemented in Swift 2.2** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/3317/focus=3961 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/3317/focus=3961&gt;))<br>&gt; proposals/0022-objc-selectors.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/4622 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/4622&gt;))<br>&gt; proposals/0022-objc-selectors.md:Swift-evolution thread: [here](http://thread.gmane.org/gmane.comp.lang.swift.evolution/1384/focus=1403 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/1384/focus=1403&gt;)<br>&gt; proposals/0023-api-guidelines.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/8585 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/8585&gt;))<br>&gt; proposals/0024-optional-value-setter.md:* Status: **Rejected** ([Rationale](http://article.gmane.org/gmane.comp.lang.swift.evolution/7694 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/7694&gt;))<br>&gt; proposals/0025-scoped-access-level.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12183/focus=13584 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/12183/focus=13584&gt;), [Bug](https://bugs.swift.org/browse/SR-1275 &lt;https://bugs.swift.org/browse/SR-1275&gt;))<br>&gt; proposals/0025-scoped-access-level.md:[Swift Evolution Discussion](http://thread.gmane.org/gmane.comp.lang.swift.evolution/9334 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/9334&gt;), [Next Steps Discussion](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12183 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/12183&gt;)<br>&gt; proposals/0026-abstract-classes-and-methods.md:* Status: **Deferred** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/8809 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/8809&gt;))<br>&gt; proposals/0027-string-from-code-units.md:* Status: **Rejected** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7695 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/7695&gt;))<br>&gt; proposals/0028-modernizing-debug-identifiers.md:* Status: **Implemented in Swift 2.2** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/5805 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/5805&gt;), Bug: [SR-669](https://bugs.swift.org/browse/SR-669 &lt;https://bugs.swift.org/browse/SR-669&gt;))<br>&gt; proposals/0029-remove-implicit-tuple-splat.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/6405 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/6405&gt;))<br>&gt; proposals/0030-property-behavior-decls.md:* Status: **Rejected** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7735 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/7735&gt;))<br>&gt; proposals/0030-property-behavior-decls.md:[Swift Evolution Discussion](http://thread.gmane.org/gmane.comp.lang.swift.evolution/11976 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/11976&gt;)&lt;br/&gt;<br>&gt; proposals/0030-property-behavior-decls.md:[Review](http://thread.gmane.org/gmane.comp.lang.swift.evolution/6426 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/6426&gt;)<br>&gt; proposals/0031-adjusting-inout-declarations.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7394 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/7394&gt;))<br>&gt; proposals/0031-adjusting-inout-declarations.md:*The initial Swift-Evolution discussion of this topic took place in the &quot;[Replace &#39;inout&#39; with &amp;](http://comments.gmane.org/gmane.comp.lang.swift.evolution/2751 &lt;http://comments.gmane.org/gmane.comp.lang.swift.evolution/2751&gt;)&quot; thread.*<br>&gt; proposals/0032-sequencetype-find.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16116 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16116&gt;))<br>&gt; proposals/0033-import-objc-constants.md:* Status: **Implemented in Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/8817 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/8817&gt;))<br>&gt; proposals/0034-disambiguating-line.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/8156 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/8156&gt;), [Implementation Bug](https://bugs.swift.org/browse/SR-840 &lt;https://bugs.swift.org/browse/SR-840&gt;))<br>&gt; proposals/0034-disambiguating-line.md:The discussion took place on-line in the [*\[Discussion\]: Renaming #line, the line control statement*](http://comments.gmane.org/gmane.comp.lang.swift.evolution/5815 &lt;http://comments.gmane.org/gmane.comp.lang.swift.evolution/5815&gt;) thread.<br>&gt; proposals/0035-limit-inout-capture.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7732 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/7732&gt;), [Bug](https://bugs.swift.org/browse/SR-807 &lt;https://bugs.swift.org/browse/SR-807&gt;))<br>&gt; proposals/0036-enum-dot.md:*Discussion took place on the Swift Evolution mailing list in the [\[Discussion\] Enum Leading Dot Prefixes](http://article.gmane.org/gmane.comp.lang.swift.evolution/6684 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/6684&gt;) thread. This proposal uses lowerCamelCase enumeration cases in compliance with<br>&gt; proposals/0036-enum-dot.md:current [API Guideline Working Group guidance](http://news.gmane.org/gmane.comp.lang.swift.evolution &lt;http://news.gmane.org/gmane.comp.lang.swift.evolution&gt;).*<br>&gt; proposals/0037-clarify-comments-and-operators.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12350 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/12350&gt;), [Bug](https://bugs.swift.org/browse/SR-960 &lt;https://bugs.swift.org/browse/SR-960&gt;))<br>&gt; proposals/0037-clarify-comments-and-operators.md:Swift-evolution thread: [started here](http://thread.gmane.org/gmane.comp.lang.swift.evolution/605 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/605&gt;)<br>&gt; proposals/0037-clarify-comments-and-operators.md:and [continued here](http://thread.gmane.org/gmane.comp.lang.swift.evolution/2855 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/2855&gt;).<br>&gt; proposals/0038-swiftpm-c-language-targets.md:[Swift Evolution Review Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7293 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/7293&gt;)<br>&gt; proposals/0039-playgroundliterals.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/9149/ &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/9149/&gt;), [Bug](https://bugs.swift.org/browse/SR-917 &lt;https://bugs.swift.org/browse/SR-917&gt;))<br>&gt; proposals/0039-playgroundliterals.md:*Discussion took place on the Swift Evolution mailing list in the [\[Discussion\] Modernizing Playground Literals](http://article.gmane.org/gmane.comp.lang.swift.evolution/7124 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/7124&gt;) thread. Thanks to [Chris Lattner](https://github.com/lattner &lt;https://github.com/lattner&gt;) for suggesting this enhancement.*<br>&gt; proposals/0040-attributecolons.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/8920 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/8920&gt;))<br>&gt; proposals/0040-attributecolons.md:*Discussion took place on the Swift Evolution mailing list in the [\[Discussion\] Replacing Equal Signs with Colons For Attribute Arguments](http://article.gmane.org/gmane.comp.lang.swift.evolution/7271 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/7271&gt;) thread. Thanks to [Doug Gregor](https://github.com/DougGregor &lt;https://github.com/DougGregor&gt;) for suggesting this enhancement.*<br>&gt; proposals/0042-flatten-method-types.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12828 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/12828&gt;), [Bug](https://bugs.swift.org/browse/SR-1051 &lt;https://bugs.swift.org/browse/SR-1051&gt;))<br>&gt; proposals/0043-declare-variables-in-case-labels-with-multiple-patterns.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12827 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/12827&gt;))<br>&gt; proposals/0043-declare-variables-in-case-labels-with-multiple-patterns.md:Swift-evolution thread: [here](http://thread.gmane.org/gmane.comp.lang.swift.evolution/4256 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/4256&gt;)<br>&gt; proposals/0044-import-as-member.md:* Status: **Implemented in Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12842 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/12842&gt;), [Bug](https://bugs.swift.org/browse/SR-1053 &lt;https://bugs.swift.org/browse/SR-1053&gt;))<br>&gt; proposals/0044-import-as-member.md:[Swift-evolution thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/8437 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/8437&gt;)&lt;br /&gt;<br>&gt; proposals/0044-import-as-member.md:[Review](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12274 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/12274&gt;)<br>&gt; proposals/0045-scan-takewhile-dropwhile.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16119 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16119&gt;), [Bug](https://bugs.swift.org/browse/SR-1516 &lt;https://bugs.swift.org/browse/SR-1516&gt;))<br>&gt; proposals/0045-scan-takewhile-dropwhile.md:[Proposal: Add scan, takeWhile, dropWhile, and iterate to the stdlib](http://thread.gmane.org/gmane.comp.lang.swift.evolution/1515 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/1515&gt;)<br>&gt; proposals/0045-scan-takewhile-dropwhile.md:[rationale]: http://article.gmane.org/gmane.comp.lang.swift.evolution/16119 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/16119&gt;<br>&gt; proposals/0076-copying-to-unsafe-mutable-pointer-with-unsafe-pointer-source.md:* Status: **Accepted with Revisions for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16898 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16898&gt;), [Bug](https://bugs.swift.org/browse/SR-1490 &lt;https://bugs.swift.org/browse/SR-1490&gt;))<br>&gt; proposals/0079-upgrade-self-from-weak-to-strong.md:[Swift Evolution Discussion Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7582 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/7582&gt;), [Draft Proposal](http://thread.gmane.org/gmane.comp.lang.swift.evolution/6064 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/6064&gt;)<br>&gt; proposals/0080-failable-numeric-initializers.md:* Status: **Accepted with Revisions for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16899 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16899&gt;), [Bug](https://bugs.swift.org/browse/SR-1491 &lt;https://bugs.swift.org/browse/SR-1491&gt;))<br>&gt; proposals/0081-move-where-expression.md:[\[Pitch\] Moving where Clauses Out Of Parameter Lists](http://thread.gmane.org/gmane.comp.lang.swift.evolution/13886/focus=13899 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/13886/focus=13899&gt;)<br>&gt; proposals/0082-swiftpm-package-edit.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16614 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16614&gt;))<br>&gt; proposals/0082-swiftpm-package-edit.md:[Proposal Announcement](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15279 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/15279&gt;)<br>&gt; proposals/0082-swiftpm-package-edit.md:[Review announcement](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16078 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16078&gt;)<br>&gt; proposals/0085-package-manager-command-name.md:* Status: **Implemented in Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.build/1/focus=26 &lt;http://thread.gmane.org/gmane.comp.lang.swift.build/1/focus=26&gt;))<br>&gt; proposals/0085-package-manager-command-name.md:[Swift Build Review Thread](http://thread.gmane.org/gmane.comp.lang.swift.build/1/ &lt;http://thread.gmane.org/gmane.comp.lang.swift.build/1/&gt;)<br>&gt; proposals/0085-package-manager-command-name.md:[Swift Evolution Review Thread](http://thread.gmane.org/gmane.comp.lang.swift.build/1/focus=16764 &lt;http://thread.gmane.org/gmane.comp.lang.swift.build/1/focus=16764&gt;)<br>&gt; proposals/0086-drop-foundation-ns.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/23869 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/23869&gt;))<br>&gt; proposals/0086-drop-foundation-ns.md:[Swift Evolution Discussion Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16298 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16298&gt;)<br>&gt; proposals/0086-drop-foundation-ns.md:[Review Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16509 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16509&gt;)<br>&gt; proposals/0088-libdispatch-for-swift3.md:* Status: **Accepted with Revisions** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17819 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/17819&gt;))<br>&gt; proposals/0088-libdispatch-for-swift3.md:[Review thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16745 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16745&gt;)<br>&gt; proposals/0092-typealiases-in-protocols.md:* Status: **Implemented in Swift 3.0** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17317 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/17317&gt;))<br>&gt; proposals/0094-sequence-function.md:Swift-evolution thread: [Discussion thread topic for that proposal](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15743/focus=17108 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/15743/focus=17108&gt;)<br>&gt; proposals/0094-sequence-function.md:[SE-0045a]: http://article.gmane.org/gmane.comp.lang.swift.evolution/16119 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/16119&gt;<br>&gt; proposals/0095-any-as-existential.md:Discussion threads: [pre-proposal](https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160516/018109.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160516/018109.html&gt;), [review thread 1](http://thread.gmane.org/gmane.comp.lang.swift.evolution/18349 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/18349&gt;), [2](http://thread.gmane.org/gmane.comp.lang.swift.evolution/18350/focus=18447 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/18350/focus=18447&gt;), [3](http://thread.gmane.org/gmane.comp.lang.swift.evolution/18351/focus=18440 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/18351/focus=18440&gt;), [4](http://thread.gmane.org/gmane.comp.lang.swift.evolution/18518 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/18518&gt;), [post-review thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/19463 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/19463&gt;)<br>&gt; proposals/0096-dynamictype.md:[RFC: didset and willset](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17534 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/17534&gt;)<br>&gt; proposals/0097-negative-attributes.md:[RFC: didset and willset](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17534 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/17534&gt;)<br>&gt; proposals/0098-didset-capitalization.md:[RFC: didset and willset](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17534 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/17534&gt;)<br>&gt; proposals/0099-conditionclauses.md:[\[Pitch\] making where and ,	interchangeable in guard conditions](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17926 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/17926&gt;)<br>&gt; proposals/0101-standardizing-sizeof-naming.md:* Swift Evolution Pitch: [\[Pitch\] Renaming sizeof, sizeofValue, strideof,	strideofValue](http://thread.gmane.org/gmane.comp.lang.swift.evolution/19459 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/19459&gt;)<br>&gt; proposals/0101-standardizing-sizeof-naming.md:* [Earlier Discussions](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15830 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/15830&gt;)<br>&gt; proposals/0101-standardizing-sizeof-naming.md:* [SE-0101 Review](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21103 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/21103&gt;)<br>&gt; proposals/0103-make-noescape-default.md:* [Make non-escaping closures the default](http://thread.gmane.org/gmane.comp.lang.swift.evolution/19756 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/19756&gt;)<br>&gt; proposals/0105-remove-where-from-forin-loops.md:Swift Evolution Discussion: [\[Pitch\] Retiring `where` from for-in loops](http://thread.gmane.org/gmane.comp.lang.swift.evolution/20142 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/20142&gt;)<br>&gt; proposals/0106-rename-osx-to-macos.md:Swift Evolution Discussion: [\[DRAFT\] Aliasing the OS X Platform Configuration	Test](http://thread.gmane.org/gmane.comp.lang.swift.evolution/20815 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/20815&gt;)<br>&gt; proposals/0108-remove-assoctype-inference.md:swift-evolution thread: [pre-proposal](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21714 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/21714&gt;)<br>&gt; proposals/0108-remove-assoctype-inference.md:As Douglas Gregor (original author of the relevant type inference code) [puts it](http://article.gmane.org/gmane.comp.lang.swift.evolution/22058 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/22058&gt;):<br>&gt; proposals/0108-remove-assoctype-inference.md:To some extent, this is an issue inherent to any design which makes no distinctions at the site of implementation between members intended to satisfy protocol requirements and members that are explicitly not intended to satisfy protocol requirements. Rather than adding keywords to create this distinction, Douglas Gregor has [proposed and implemented type checker heuristics](http://article.gmane.org/gmane.comp.lang.swift.devel/1799 &lt;http://article.gmane.org/gmane.comp.lang.swift.devel/1799&gt;) that will generate warnings when a programmer implements a member that &quot;looks like&quot; it should fulfill a protocol requirement but does not actually do so. This is one possible mitigation strategy that should be revisited as a way to decrease the possible impact of removing associated type witness inference from the compiler.<br>&gt; proposals/0108-remove-assoctype-inference.md:As well, Dave Abrahams expresses a [potential issue](http://article.gmane.org/gmane.comp.lang.swift.evolution/21892 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/21892&gt;):<br>&gt; proposals/0109-remove-boolean.md:* Status: Accepted ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/23844 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/23844&gt;))<br>&gt; proposals/0109-remove-boolean.md:[Discussion thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21559 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/21559&gt;)<br>&gt; proposals/0110-distingish-single-tuple-arg.md:Discussion: [pre-proposal](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21732 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/21732&gt;)<br>&gt; proposals/0111-remove-arg-label-type-significance.md:Discussion: [pre-proposal](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21369 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/21369&gt;)<br>&gt; proposals/0114-buffer-naming.md:[Swift Evolution Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/22127 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/22127&gt;)<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160802/0a44efd1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[META] Gmane and Swift Evolution</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>August  2, 2016 at 09:00:00am</p></header><div class="content"><p>On Aug 1, 2016, at 12:46 PM, Krishna Kumar &lt;kkdevenda at gmail.com&gt; wrote:<br>&gt; <br>&gt; Hey<br>&gt; <br>&gt; I’ll update (SE0017 - SE0045)<br>&gt; <br>&gt; Thanks<br>&gt; <br>&gt; -Krishna<br></p><p>Thanks.<br></p><p>Remaining links as of this morning are listed below. Anyone willing to adopt a proposal or a group and get them updated, please reply in-thread and submit a PR with changes.<br></p><p>Tips: <br></p><p>* Ideally, each proposal should have a link to a rationale, to on-list discussion(s), and review discussion(s). If any of these are missing, please add.<br>* Rationales are easily found on the announcement list: https://lists.swift.org/pipermail/swift-evolution-announce/ &lt;https://lists.swift.org/pipermail/swift-evolution-announce/&gt;<br>* Discussion and review threads need to be from the non-announce list to allow readers to follow the conversation.<br>* A few proposals are sourced from build-dev and not Swift Evolution<br>* The toughest updates were from December, before the archiving, formatting, etc got underway. Later links are a lot easier to track down.<br>* You cannot use Google to search for gmane threads as the site was set for no robots and there is no Internet Archive Wayback fallback. <br></p><p>-- E<br></p><p><br>proposals/0030-property-behavior-decls.md:* Status: **Rejected** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7735))<br>proposals/0030-property-behavior-decls.md:[Swift Evolution Discussion](http://thread.gmane.org/gmane.comp.lang.swift.evolution/11976)&lt;br/&gt;<br>proposals/0030-property-behavior-decls.md:[Review](http://thread.gmane.org/gmane.comp.lang.swift.evolution/6426)<br>proposals/0031-adjusting-inout-declarations.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7394))<br>proposals/0031-adjusting-inout-declarations.md:*The initial Swift-Evolution discussion of this topic took place in the &quot;[Replace &#39;inout&#39; with &amp;](http://comments.gmane.org/gmane.comp.lang.swift.evolution/2751)&quot; thread.*<br>proposals/0032-sequencetype-find.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16116))<br>proposals/0033-import-objc-constants.md:* Status: **Implemented in Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/8817))<br>proposals/0034-disambiguating-line.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/8156), [Implementation Bug](https://bugs.swift.org/browse/SR-840))<br>proposals/0034-disambiguating-line.md:The discussion took place on-line in the [*\[Discussion\]: Renaming #line, the line control statement*](http://comments.gmane.org/gmane.comp.lang.swift.evolution/5815) thread.<br>proposals/0035-limit-inout-capture.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7732), [Bug](https://bugs.swift.org/browse/SR-807))<br>proposals/0036-enum-dot.md:*Discussion took place on the Swift Evolution mailing list in the [\[Discussion\] Enum Leading Dot Prefixes](http://article.gmane.org/gmane.comp.lang.swift.evolution/6684) thread. This proposal uses lowerCamelCase enumeration cases in compliance with<br>proposals/0036-enum-dot.md:current [API Guideline Working Group guidance](http://news.gmane.org/gmane.comp.lang.swift.evolution).*<br>proposals/0037-clarify-comments-and-operators.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/12350), [Bug](https://bugs.swift.org/browse/SR-960))<br>proposals/0037-clarify-comments-and-operators.md:Swift-evolution thread: [started here](http://thread.gmane.org/gmane.comp.lang.swift.evolution/605)<br>proposals/0037-clarify-comments-and-operators.md:and [continued here](http://thread.gmane.org/gmane.comp.lang.swift.evolution/2855).<br>proposals/0038-swiftpm-c-language-targets.md:[Swift Evolution Review Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7293)<br>proposals/0039-playgroundliterals.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/9149/), [Bug](https://bugs.swift.org/browse/SR-917))<br>proposals/0039-playgroundliterals.md:*Discussion took place on the Swift Evolution mailing list in the [\[Discussion\] Modernizing Playground Literals](http://article.gmane.org/gmane.comp.lang.swift.evolution/7124) thread. Thanks to [Chris Lattner](https://github.com/lattner) for suggesting this enhancement.*<br>proposals/0045-scan-takewhile-dropwhile.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16119), [Bug](https://bugs.swift.org/browse/SR-1516))<br>proposals/0045-scan-takewhile-dropwhile.md:[Proposal: Add scan, takeWhile, dropWhile, and iterate to the stdlib](http://thread.gmane.org/gmane.comp.lang.swift.evolution/1515)<br>proposals/0045-scan-takewhile-dropwhile.md:[rationale]: http://article.gmane.org/gmane.comp.lang.swift.evolution/16119<br>proposals/0076-copying-to-unsafe-mutable-pointer-with-unsafe-pointer-source.md:* Status: **Accepted with Revisions for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16898), [Bug](https://bugs.swift.org/browse/SR-1490))<br>proposals/0079-upgrade-self-from-weak-to-strong.md:[Swift Evolution Discussion Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/7582), [Draft Proposal](http://thread.gmane.org/gmane.comp.lang.swift.evolution/6064)<br>proposals/0080-failable-numeric-initializers.md:* Status: **Accepted with Revisions for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16899), [Bug](https://bugs.swift.org/browse/SR-1491))<br>proposals/0081-move-where-expression.md:[\[Pitch\] Moving where Clauses Out Of Parameter Lists](http://thread.gmane.org/gmane.comp.lang.swift.evolution/13886/focus=13899)<br>proposals/0082-swiftpm-package-edit.md:* Status: **Accepted for Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16614))<br>proposals/0082-swiftpm-package-edit.md:[Proposal Announcement](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15279)<br>proposals/0082-swiftpm-package-edit.md:[Review announcement](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16078)<br>proposals/0085-package-manager-command-name.md:* Status: **Implemented in Swift 3** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.build/1/focus=26))<br>proposals/0085-package-manager-command-name.md:[Swift Build Review Thread](http://thread.gmane.org/gmane.comp.lang.swift.build/1/)<br>proposals/0085-package-manager-command-name.md:[Swift Evolution Review Thread](http://thread.gmane.org/gmane.comp.lang.swift.build/1/focus=16764)<br>proposals/0086-drop-foundation-ns.md:* Status: **Accepted** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/23869))<br>proposals/0086-drop-foundation-ns.md:[Swift Evolution Discussion Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16298)<br>proposals/0086-drop-foundation-ns.md:[Review Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16509)<br>proposals/0088-libdispatch-for-swift3.md:* Status: **Accepted with Revisions** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17819))<br>proposals/0088-libdispatch-for-swift3.md:[Review thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/16745)<br>proposals/0092-typealiases-in-protocols.md:* Status: **Implemented in Swift 3.0** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17317))<br>proposals/0094-sequence-function.md:Swift-evolution thread: [Discussion thread topic for that proposal](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15743/focus=17108)<br>proposals/0094-sequence-function.md:[SE-0045a]: http://article.gmane.org/gmane.comp.lang.swift.evolution/16119<br>proposals/0095-any-as-existential.md:Discussion threads: [pre-proposal](https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160516/018109.html), [review thread 1](http://thread.gmane.org/gmane.comp.lang.swift.evolution/18349), [2](http://thread.gmane.org/gmane.comp.lang.swift.evolution/18350/focus=18447), [3](http://thread.gmane.org/gmane.comp.lang.swift.evolution/18351/focus=18440), [4](http://thread.gmane.org/gmane.comp.lang.swift.evolution/18518), [post-review thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/19463)<br>proposals/0096-dynamictype.md:[RFC: didset and willset](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17534)<br>proposals/0097-negative-attributes.md:[RFC: didset and willset](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17534)<br>proposals/0098-didset-capitalization.md:[RFC: didset and willset](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17534)<br>proposals/0099-conditionclauses.md:[\[Pitch\] making where and ,	interchangeable in guard conditions](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17926)<br>proposals/0101-standardizing-sizeof-naming.md:* Swift Evolution Pitch: [\[Pitch\] Renaming sizeof, sizeofValue, strideof,	strideofValue](http://thread.gmane.org/gmane.comp.lang.swift.evolution/19459)<br>proposals/0101-standardizing-sizeof-naming.md:* [Earlier Discussions](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15830)<br>proposals/0101-standardizing-sizeof-naming.md:* [SE-0101 Review](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21103)<br>proposals/0103-make-noescape-default.md:* [Make non-escaping closures the default](http://thread.gmane.org/gmane.comp.lang.swift.evolution/19756)<br>proposals/0105-remove-where-from-forin-loops.md:Swift Evolution Discussion: [\[Pitch\] Retiring `where` from for-in loops](http://thread.gmane.org/gmane.comp.lang.swift.evolution/20142)<br>proposals/0106-rename-osx-to-macos.md:Swift Evolution Discussion: [\[DRAFT\] Aliasing the OS X Platform Configuration	Test](http://thread.gmane.org/gmane.comp.lang.swift.evolution/20815)<br>proposals/0108-remove-assoctype-inference.md:swift-evolution thread: [pre-proposal](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21714)<br>proposals/0108-remove-assoctype-inference.md:As Douglas Gregor (original author of the relevant type inference code) [puts it](http://article.gmane.org/gmane.comp.lang.swift.evolution/22058):<br>proposals/0108-remove-assoctype-inference.md:To some extent, this is an issue inherent to any design which makes no distinctions at the site of implementation between members intended to satisfy protocol requirements and members that are explicitly not intended to satisfy protocol requirements. Rather than adding keywords to create this distinction, Douglas Gregor has [proposed and implemented type checker heuristics](http://article.gmane.org/gmane.comp.lang.swift.devel/1799) that will generate warnings when a programmer implements a member that &quot;looks like&quot; it should fulfill a protocol requirement but does not actually do so. This is one possible mitigation strategy that should be revisited as a way to decrease the possible impact of removing associated type witness inference from the compiler.<br>proposals/0108-remove-assoctype-inference.md:As well, Dave Abrahams expresses a [potential issue](http://article.gmane.org/gmane.comp.lang.swift.evolution/21892):<br>proposals/0109-remove-boolean.md:* Status: Accepted ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/23844))<br>proposals/0109-remove-boolean.md:[Discussion thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21559)<br>proposals/0110-distingish-single-tuple-arg.md:Discussion: [pre-proposal](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21732)<br>proposals/0111-remove-arg-label-type-significance.md:Discussion: [pre-proposal](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21369)<br>proposals/0114-buffer-naming.md:[Swift Evolution Thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/22127)<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160802/a7029a19/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdd257c9369fb68e1d06923d10ff789e?s=50"></div><header><strong>[META] Gmane and Swift Evolution</strong> from <string>Ben Rimmington</string> &lt;me at benrimmington.com&gt;<p>August  2, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On 2 Aug 2016, at 16:16, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Anyone willing to adopt a proposal or a group and get them updated, please reply in-thread and submit a PR with changes.<br></p><p>[SE-0076 ... SE-0090] &lt;https://github.com/apple/swift-evolution/pull/484&gt;<br></p><p>-- Ben<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[META] Gmane and Swift Evolution</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>August  3, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Aug 2, 2016, at 9:22 AM, Ben Rimmington &lt;me at benrimmington.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 2 Aug 2016, at 16:16, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Anyone willing to adopt a proposal or a group and get them updated, please reply in-thread and submit a PR with changes.<br>&gt; <br>&gt; [SE-0076 ... SE-0090] &lt;https://github.com/apple/swift-evolution/pull/484&gt;<br>&gt; <br>&gt; -- Ben<br>&gt; <br></p><p>Here&#39;s what&#39;s left<br></p><p>proposals/0092-typealiases-in-protocols.md:* Status: **Implemented in Swift 3.0** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17317))<br>proposals/0094-sequence-function.md:Swift-evolution thread: [Discussion thread topic for that proposal](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15743/focus=17108)<br>proposals/0094-sequence-function.md:[SE-0045a]: http://article.gmane.org/gmane.comp.lang.swift.evolution/16119<br>proposals/0095-any-as-existential.md:Discussion threads: [pre-proposal](https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160516/018109.html), [review thread 1](http://thread.gmane.org/gmane.comp.lang.swift.evolution/18349), [2](http://thread.gmane.org/gmane.comp.lang.swift.evolution/18350/focus=18447), [3](http://thread.gmane.org/gmane.comp.lang.swift.evolution/18351/focus=18440), [4](http://thread.gmane.org/gmane.comp.lang.swift.evolution/18518), [post-review thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/19463)<br>proposals/0096-dynamictype.md:[RFC: didset and willset](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17534)<br>proposals/0097-negative-attributes.md:[RFC: didset and willset](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17534)<br>proposals/0098-didset-capitalization.md:[RFC: didset and willset](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17534)<br>proposals/0099-conditionclauses.md:[\[Pitch\] making where and ,	interchangeable in guard conditions](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17926)<br>proposals/0101-standardizing-sizeof-naming.md:* Swift Evolution Pitch: [\[Pitch\] Renaming sizeof, sizeofValue, strideof,	strideofValue](http://thread.gmane.org/gmane.comp.lang.swift.evolution/19459)<br>proposals/0101-standardizing-sizeof-naming.md:* [Earlier Discussions](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15830)<br>proposals/0101-standardizing-sizeof-naming.md:* [SE-0101 Review](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21103)<br>proposals/0103-make-noescape-default.md:* [Make non-escaping closures the default](http://thread.gmane.org/gmane.comp.lang.swift.evolution/19756)<br>proposals/0105-remove-where-from-forin-loops.md:Swift Evolution Discussion: [\[Pitch\] Retiring `where` from for-in loops](http://thread.gmane.org/gmane.comp.lang.swift.evolution/20142)<br>proposals/0106-rename-osx-to-macos.md:Swift Evolution Discussion: [\[DRAFT\] Aliasing the OS X Platform Configuration	Test](http://thread.gmane.org/gmane.comp.lang.swift.evolution/20815)<br>proposals/0108-remove-assoctype-inference.md:swift-evolution thread: [pre-proposal](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21714)<br>proposals/0108-remove-assoctype-inference.md:As Douglas Gregor (original author of the relevant type inference code) [puts it](http://article.gmane.org/gmane.comp.lang.swift.evolution/22058):<br>proposals/0108-remove-assoctype-inference.md:To some extent, this is an issue inherent to any design which makes no distinctions at the site of implementation between members intended to satisfy protocol requirements and members that are explicitly not intended to satisfy protocol requirements. Rather than adding keywords to create this distinction, Douglas Gregor has [proposed and implemented type checker heuristics](http://article.gmane.org/gmane.comp.lang.swift.devel/1799) that will generate warnings when a programmer implements a member that &quot;looks like&quot; it should fulfill a protocol requirement but does not actually do so. This is one possible mitigation strategy that should be revisited as a way to decrease the possible impact of removing associated type witness inference from the compiler.<br>proposals/0108-remove-assoctype-inference.md:As well, Dave Abrahams expresses a [potential issue](http://article.gmane.org/gmane.comp.lang.swift.evolution/21892):<br>proposals/0109-remove-boolean.md:* Status: Accepted ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/23844))<br>proposals/0109-remove-boolean.md:[Discussion thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21559)<br>proposals/0110-distingish-single-tuple-arg.md:Discussion: [pre-proposal](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21732)<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/02645fccf0e885c607f3d07a4abf4f95?s=50"></div><header><strong>[META] Gmane and Swift Evolution</strong> from <string>Saagar Jha</string> &lt;saagar at saagarjha.com&gt;<p>August  3, 2016 at 08:00:00pm</p></header><div class="content"><p>I’ve submitted a pull that includes everything except for SE-0094, 0095, and 0110, which I wasn’t able to find.<br></p><p>Saagar Jha<br></p><p><br></p><p>&gt; On Aug 3, 2016, at 11:31, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Aug 2, 2016, at 9:22 AM, Ben Rimmington &lt;me at benrimmington.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 2 Aug 2016, at 16:16, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Anyone willing to adopt a proposal or a group and get them updated, please reply in-thread and submit a PR with changes.<br>&gt;&gt; <br>&gt;&gt; [SE-0076 ... SE-0090] &lt;https://github.com/apple/swift-evolution/pull/484&gt;<br>&gt;&gt; <br>&gt;&gt; -- Ben<br>&gt;&gt; <br>&gt; <br>&gt; Here&#39;s what&#39;s left<br>&gt; <br>&gt; proposals/0092-typealiases-in-protocols.md:* Status: **Implemented in Swift 3.0** ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17317))<br>&gt; proposals/0094-sequence-function.md:Swift-evolution thread: [Discussion thread topic for that proposal](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15743/focus=17108)<br>&gt; proposals/0094-sequence-function.md:[SE-0045a]: http://article.gmane.org/gmane.comp.lang.swift.evolution/16119<br>&gt; proposals/0095-any-as-existential.md:Discussion threads: [pre-proposal](https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160516/018109.html), [review thread 1](http://thread.gmane.org/gmane.comp.lang.swift.evolution/18349), [2](http://thread.gmane.org/gmane.comp.lang.swift.evolution/18350/focus=18447), [3](http://thread.gmane.org/gmane.comp.lang.swift.evolution/18351/focus=18440), [4](http://thread.gmane.org/gmane.comp.lang.swift.evolution/18518), [post-review thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/19463)<br>&gt; proposals/0096-dynamictype.md:[RFC: didset and willset](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17534)<br>&gt; proposals/0097-negative-attributes.md:[RFC: didset and willset](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17534)<br>&gt; proposals/0098-didset-capitalization.md:[RFC: didset and willset](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17534)<br>&gt; proposals/0099-conditionclauses.md:[\[Pitch\] making where and ,	interchangeable in guard conditions](http://thread.gmane.org/gmane.comp.lang.swift.evolution/17926)<br>&gt; proposals/0101-standardizing-sizeof-naming.md:* Swift Evolution Pitch: [\[Pitch\] Renaming sizeof, sizeofValue, strideof,	strideofValue](http://thread.gmane.org/gmane.comp.lang.swift.evolution/19459)<br>&gt; proposals/0101-standardizing-sizeof-naming.md:* [Earlier Discussions](http://thread.gmane.org/gmane.comp.lang.swift.evolution/15830)<br>&gt; proposals/0101-standardizing-sizeof-naming.md:* [SE-0101 Review](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21103)<br>&gt; proposals/0103-make-noescape-default.md:* [Make non-escaping closures the default](http://thread.gmane.org/gmane.comp.lang.swift.evolution/19756)<br>&gt; proposals/0105-remove-where-from-forin-loops.md:Swift Evolution Discussion: [\[Pitch\] Retiring `where` from for-in loops](http://thread.gmane.org/gmane.comp.lang.swift.evolution/20142)<br>&gt; proposals/0106-rename-osx-to-macos.md:Swift Evolution Discussion: [\[DRAFT\] Aliasing the OS X Platform Configuration	Test](http://thread.gmane.org/gmane.comp.lang.swift.evolution/20815)<br>&gt; proposals/0108-remove-assoctype-inference.md:swift-evolution thread: [pre-proposal](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21714)<br>&gt; proposals/0108-remove-assoctype-inference.md:As Douglas Gregor (original author of the relevant type inference code) [puts it](http://article.gmane.org/gmane.comp.lang.swift.evolution/22058):<br>&gt; proposals/0108-remove-assoctype-inference.md:To some extent, this is an issue inherent to any design which makes no distinctions at the site of implementation between members intended to satisfy protocol requirements and members that are explicitly not intended to satisfy protocol requirements. Rather than adding keywords to create this distinction, Douglas Gregor has [proposed and implemented type checker heuristics](http://article.gmane.org/gmane.comp.lang.swift.devel/1799) that will generate warnings when a programmer implements a member that &quot;looks like&quot; it should fulfill a protocol requirement but does not actually do so. This is one possible mitigation strategy that should be revisited as a way to decrease the possible impact of removing associated type witness inference from the compiler.<br>&gt; proposals/0108-remove-assoctype-inference.md:As well, Dave Abrahams expresses a [potential issue](http://article.gmane.org/gmane.comp.lang.swift.evolution/21892):<br>&gt; proposals/0109-remove-boolean.md:* Status: Accepted ([Rationale](http://thread.gmane.org/gmane.comp.lang.swift.evolution/23844))<br>&gt; proposals/0109-remove-boolean.md:[Discussion thread](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21559)<br>&gt; proposals/0110-distingish-single-tuple-arg.md:Discussion: [pre-proposal](http://thread.gmane.org/gmane.comp.lang.swift.evolution/21732)<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160803/99774c48/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[META] Gmane and Swift Evolution</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>August  5, 2016 at 02:00:00pm</p></header><div class="content"><p>And we&#39;re done for now! Thanks all. <br></p><p>-- E<br></p><p>&gt; On Aug 3, 2016, at 9:18 PM, Saagar Jha &lt;saagar at saagarjha.com&gt; wrote:<br>&gt; <br>&gt; I’ve submitted a pull that includes everything except for SE-0094, 0095, and 0110, which I wasn’t able to find.<br>&gt; <br>&gt; Saagar Jha<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Aug 3, 2016, at 11:31, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Aug 2, 2016, at 9:22 AM, Ben Rimmington &lt;me at benrimmington.com &lt;mailto:me at benrimmington.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 2 Aug 2016, at 16:16, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Anyone willing to adopt a proposal or a group and get them updated, please reply in-thread and submit a PR with changes.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; [SE-0076 ... SE-0090] &lt;https://github.com/apple/swift-evolution/pull/484 &lt;https://github.com/apple/swift-evolution/pull/484&gt;&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- Ben<br>&gt;&gt;&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160805/efc0d324/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[META] Gmane and Swift Evolution</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>July 31, 2016 at 09:00:00pm</p></header><div class="content"><p>On Sun, Jul 31, 2016, at 03:42 PM, Chris Lattner via swift-evolution wrote:<br>&gt;<br>&gt;&gt; On Jul 31, 2016, at 3:40 PM, Erica Sadun via swift-evolution &lt;swift-<br>&gt;&gt; evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Gmane.org[1] is shutting down.<br>&gt;&gt; http://ostatic.com/blog/mint-18-xfce-imminent-gmane-org-shutting-down<br>&gt;&gt; writes:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; &quot;*Long time mailing* list archive site Gmane.org[2] is shutting<br>&gt;&gt;&gt; down. Gmane has been the home for technical mailing list references<br>&gt;&gt;&gt; since 2002. But it&#39;s no longer fun for founder and only maintainer<br>&gt;&gt;&gt; Lars Ingebrigtsen. He&#39;s been sued in India and threatened with legal<br>&gt;&gt;&gt; action in at least France, among other annoyances. The straw that<br>&gt;&gt;&gt; broke Ingebrigtsen&#39;s back was a sustained denial of service[3]<br>&gt;&gt;&gt; attack throughout the month of July. He&#39;s been wondering a lot<br>&gt;&gt;&gt; lately if it&#39;s all worth it. So, he&#39;s decided[4] to move the mail<br>&gt;&gt;&gt; and news servers to new hosting. However, Ingebrigtsen is indeed<br>&gt;&gt;&gt; discontinuing the web-based archive. He said he&#39;s just &quot;fed up.&quot;<br>&gt;&gt;&gt; He&#39;s willing to send a disk with the web server archives to anyone<br>&gt;&gt;&gt; who wants to take it over. But with the Gmane.org[5] web presence<br>&gt;&gt;&gt; gone, it feels like the end of an era. There is much wailing and<br>&gt;&gt;&gt; gnashing of teeth throughout the community with some even trying to<br>&gt;&gt;&gt; get a petition started.&quot;<br>&gt;&gt;<br>&gt;&gt; Because of this shutdown, numerous documents in the Swift Evolution<br>&gt;&gt; github archive no longer point to valid web links. I have pasted a<br>&gt;&gt; list of gmane links at the end of this message. As gmane&#39;s<br>&gt;&gt; &quot;robots.txt&quot; disallowed crawling, Google has not preserved the titles<br>&gt;&gt; or text of the links, which makes finding some of these a little<br>&gt;&gt; tricky.<br>&gt;&gt;<br>&gt;&gt; Here are the remaining links that are not yet converted. Please<br>&gt;&gt; consider adopting a proposal, tracking down its links, and mailing<br>&gt;&gt; this thread with the proposal number, gmane links and pipermail<br>&gt;&gt; equivalents. Pipermail is located at<br>&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/. Some of these may<br>&gt;&gt; refer to  build dev discussions instead of evolution ones. If you<br>&gt;&gt; can, please track down to the exact message for rationale, and the<br>&gt;&gt; thread for discussion and review links.<br>&gt;<br>&gt; Completely agreed.  All of these should point to<br>&gt; https://lists.swift.org (and always should have, exactly for reasons<br>&gt; like this).  I’d appreciate any PRs to help clean up the evolution<br>&gt; repo to point to https://lists.swift.org instead.<br></p><p>FWIW, Gmane.org has been around for something like 14 years, and it<br>provided a vastly better experience for actually reading the thread<br>than pipermail, so I don&#39;t think using Gmane links was a bad decision<br>at the time.<br></p><p>Also, if it helps, the guy who runs Gmane offered to send a thumbdrive<br>with all the archives to anyone who wants to take over in providing a<br>web interface, and there were a few people expressing interest in that,<br>so with luck the website will come back in some form at some point.<br></p><p>-Kevin<br></p><p>Links:<br></p><p>  1. http://gmane.org/<br>  2. http://gmane.org/<br>  3. https://lars.ingebrigtsen.no/2016/07/28/the-end-of-gmane/<br>  4. https://lars.ingebrigtsen.no/2016/07/28/the-end-of-gmane/comment-page-1/#comment-13502<br>  5. http://gmane.org/<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160731/bc7ecbbd/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>[META] Gmane and Swift Evolution</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>August  1, 2016 at 12:00:00pm</p></header><div class="content"><p>I think this news is worth to be linked to the thread &quot;[swift-evolution] [Swift4] Mailing list vs. Forum&quot; — but there&#39;s just no good way to do so ;-)<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160801/ca8142c3/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
