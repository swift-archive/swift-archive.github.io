<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Pitch] Adding a Self type name shortcut for	static member access</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>April  7, 2016 at 12:00:00pm</p></header><div class="content"><p>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160407/616deffa/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Pitch] Adding a Self type name shortcut for static member access</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>April 22, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt;&gt; Having said all this, now that we have `#Self`, I&#39;m wondering if we still want `Self` in value types. The two are *exactly* equivalent in value types as far as I can tell, and `Self` in classes implies dynamic behavior which is not supported by value types. The use of `Self` in class member bodies is a clean win, the existence of `#Self` is a clean win, but I&#39;m not sure we need the value type thing too.<br>&gt; <br>&gt; If subtyping for value types will be introduced someday (there has been considerable interest for that already) `Self` would make sense for value types, too, wouldn&#39;t it?<br></p><p>Sorry for the delay answering this; I have been (and will continue to be) rather busy.<br></p><p>It depends on the form of the subtyping support. If &quot;subtype&quot; just means &quot;implicit conversion without sharing compatible representations&quot;, as having Float be a subtype of Double would be, that wouldn&#39;t necessarily make much sense. But if it&#39;s some kind of pseudo-subtyping system (though how would that work with the non-reference-based representation of structs, I don&#39;t know), then that would perhaps make more sense.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Pitch] Adding a Self type name shortcut for static member access</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>April 27, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; Am 23.04.2016 um 06:56 schrieb Brent Royal-Gordon &lt;brent at architechies.com&gt;:<br>&gt; <br>&gt;&gt;&gt; Having said all this, now that we have `#Self`, I&#39;m wondering if we still want `Self` in value types. The two are *exactly* equivalent in value types as far as I can tell, and `Self` in classes implies dynamic behavior which is not supported by value types. The use of `Self` in class member bodies is a clean win, the existence of `#Self` is a clean win, but I&#39;m not sure we need the value type thing too.<br>&gt;&gt; <br>&gt;&gt; If subtyping for value types will be introduced someday (there has been considerable interest for that already) `Self` would make sense for value types, too, wouldn&#39;t it?<br>&gt; <br>&gt; Sorry for the delay answering this; I have been (and will continue to be) rather busy.<br></p><p>No problem, don’t worry! As you see I’m having similar problems :-)<br></p><p><br>&gt; It depends on the form of the subtyping support. If &quot;subtype&quot; just means &quot;implicit conversion without sharing compatible representations&quot;, as having Float be a subtype of Double would be, that wouldn&#39;t necessarily make much sense. But if it&#39;s some kind of pseudo-subtyping system (though how would that work with the non-reference-based representation of structs, I don&#39;t know), then that would perhaps make more sense.<br></p><p>Thinking more about it I realize that it is probably only possible to have implementation inheritance without having real subtyping because a sub-struct would require more space in memory and therefore cannot be used in places of its super-struct. Is that what you mean by pseudo-subtyping?<br></p><p>So, you are probably right that Self does not make sense in value types.<br></p><p>An alternative might be introducing references for value types but this might complicate the language more than we would like. In that case Self would apply to the dynamic type of a reference (like for classes).<br></p><p>-Thorsten<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Pitch] Adding a Self type name shortcut for static member access</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>April 27, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Apr 27, 2016, at 1:51 PM, Thorsten Seitz via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; So, you are probably right that Self does not make sense in value types.<br></p><p>I courteously disagree for the reasons stated in the proposal:<br></p><p>* Self introduces consistency across types<br>* It’s succinct and clear, enhancing readability<br></p><p>It may not be especially expressive in value types but I believe it remains valuable, which is a different question.<br></p><p>Regardless, I believe this proposal will be delayed until the question of `Type.self` vs `Type` is first ironed out as some of the design details are predicated on how that is treated.<br></p><p>best regards,<br></p><p>— E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160427/dfd43e93/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Pitch] Adding a Self type name shortcut for static member access</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>April 27, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; Am 27.04.2016 um 22:00 schrieb Erica Sadun &lt;erica at ericasadun.com&gt;:<br>&gt; <br>&gt; <br>&gt;&gt; On Apr 27, 2016, at 1:51 PM, Thorsten Seitz via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; So, you are probably right that Self does not make sense in value types.<br>&gt; <br>&gt; I courteously disagree for the reasons stated in the proposal:<br>&gt; <br>&gt; * Self introduces consistency across types<br>&gt; * It’s succinct and clear, enhancing readability<br>&gt; <br>&gt; It may not be especially expressive in value types but I believe it remains valuable, which is a different question.<br></p><p>Oops, you are right, of course. Too tired, should catch some sleep now...<br></p><p>-Thorsten<br></p><p><br>&gt; <br>&gt; Regardless, I believe this proposal will be delayed until the question of `Type.self` vs `Type` is first ironed out as some of the design details are predicated on how that is treated.<br>&gt; <br>&gt; best regards,<br>&gt; <br>&gt; — E<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160427/244377bc/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
