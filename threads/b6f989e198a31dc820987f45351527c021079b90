<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fd5bd4566ee1f286333b7dbf2df6fadb?s=50"></div><header><strong>Package Manager command line option clean-up</strong> from <string>Anders Bertelrud</string> &lt;anders at apple.com&gt;<p>May 25, 2016 at 04:00:00pm</p></header><div class="content"><p>Hello all,<br></p><p>Now that the `package` subcommand has been implemented (see https://github.com/apple/swift-evolution/blob/master/proposals/0085-package-manager-command-name.md), some of the options have ended up with awkward syntax.  For example, the old `--init` option took an optional package type parameter, and after the command renaming, the syntax has become somewhat awkward:  `package init=library`.<br></p><p>In order to clean this up, we have added some flags for the newly introduced subcommands, and I wanted to run them by the list to get any feedback before making the change.<br></p><p>The command line interface vended by the new `package` subcommand introduced by SE-0085 is shown in its help text:<br></p><p>OVERVIEW: Perform operations on Swift packages<br></p><p>USAGE: swift package [command] [options]<br></p><p>COMMANDS:<br>  init [--type &lt;type&gt;]                   Initialize a new package (executable|library)<br>  fetch                                  Fetch package dependencies<br>  update                                 Update package dependencies<br>  generate-xcodeproj [--output &lt;path&gt;]   Generates an Xcode project<br>  show-dependencies [--format &lt;format&gt;]  Print dependency graph (text|dot|json)<br>  dump-package [--output &lt;path&gt;]         Print Package.swift as JSON<br></p><p>OPTIONS:<br>  --chdir &lt;path&gt;       Change working directory before any command [-C]<br>  --color &lt;mode&gt;       Specify color mode (auto|always|never)<br>  --verbose            Increase verbosity of informational output [-v]<br>  -Xcc &lt;flag&gt;          Pass flag through to all C compiler instantiations<br>  -Xlinker &lt;flag&gt;      Pass flag through to all linker instantiations<br>  -Xswiftc &lt;flag&gt;      Pass flag through to all Swift compiler instantiations<br></p><p>NOTE: Use `swift build` to build packages, and `swift test` to test packages<br></p><p>The changes are to introduce new flags for the parameters that were previously passed to the subcommand names themselves.  The last three flags listed (-Xcc, -Xlinker, and -Xswiftc) are unchanged to maintain compatibility with the swift compiler — this will likely be revisited at a later time.<br></p><p>As described in SE-0085, the `build` subcommand stays.  It how has this interface:<br></p><p>OVERVIEW: Build sources into binary products<br></p><p>USAGE: swift build [mode] [options]<br></p><p>MODES:<br>  --configuration &lt;value&gt;   Build with configuration (debug|release)<br>  --clean [&lt;mode&gt;]          Delete artifacts (build|dist)<br></p><p>OPTIONS:<br>  --chdir &lt;path&gt;       Change working directory before any other operation [-C]<br>  --build-path &lt;path&gt;  Specify build directory<br>  --color &lt;mode&gt;       Specify color mode (auto|always|never)<br>  --verbose            Increase verbosity of informational output [-v]<br>  -Xcc &lt;flag&gt;          Pass flag through to all C compiler instantiations<br>  -Xlinker &lt;flag&gt;      Pass flag through to all linker instantiations<br>  -Xswiftc &lt;flag&gt;      Pass flag through to all Swift compiler instantiations<br></p><p>NOTE: Use `swift package` to perform other functions on packages<br></p><p>Finally, the `test` subcommand remains largely unmodified, with this interface:<br></p><p>OVERVIEW: Build and run tests<br></p><p>USAGE: swift test [specifier] [options]<br></p><p>SPECIFIER:<br>  -s TestModule.TestCase         Run a test case subclass<br>  -s TestModule.TestCase/test1   Run a specific test method<br></p><p>OPTIONS:<br>  --chdir              Change working directory before any other operation [-C]<br>  --build-path &lt;path&gt;  Specify build directory<br></p><p>NOTE: Use `swift package` to perform other functions on packages<br></p><p>Questions / comments / concerns?<br></p><p>Anders<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160525/b6f99b90/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Package Manager command line option clean-up</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>May 25, 2016 at 04:00:00pm</p></header><div class="content"><p>SGTM, I definitely prefer using the more modern (?) style &quot;--foo &lt;bar&gt;&quot; arguments and agree about the other cleanups.<br></p><p> - Daniel<br></p><p>&gt; On May 25, 2016, at 4:13 PM, Anders Bertelrud via swift-build-dev &lt;swift-build-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello all,<br>&gt; <br>&gt; Now that the `package` subcommand has been implemented (see https://github.com/apple/swift-evolution/blob/master/proposals/0085-package-manager-command-name.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0085-package-manager-command-name.md&gt;), some of the options have ended up with awkward syntax.  For example, the old `--init` option took an optional package type parameter, and after the command renaming, the syntax has become somewhat awkward:  `package init=library`.<br>&gt; <br>&gt; In order to clean this up, we have added some flags for the newly introduced subcommands, and I wanted to run them by the list to get any feedback before making the change.<br>&gt; <br>&gt; The command line interface vended by the new `package` subcommand introduced by SE-0085 is shown in its help text:<br>&gt; <br>&gt; OVERVIEW: Perform operations on Swift packages<br>&gt; <br>&gt; USAGE: swift package [command] [options]<br>&gt; <br>&gt; COMMANDS:<br>&gt;   init [--type &lt;type&gt;]                   Initialize a new package (executable|library)<br>&gt;   fetch                                  Fetch package dependencies<br>&gt;   update                                 Update package dependencies<br>&gt;   generate-xcodeproj [--output &lt;path&gt;]   Generates an Xcode project<br>&gt;   show-dependencies [--format &lt;format&gt;]  Print dependency graph (text|dot|json)<br>&gt;   dump-package [--output &lt;path&gt;]         Print Package.swift as JSON<br>&gt; <br>&gt; OPTIONS:<br>&gt;   --chdir &lt;path&gt;       Change working directory before any command [-C]<br>&gt;   --color &lt;mode&gt;       Specify color mode (auto|always|never)<br>&gt;   --verbose            Increase verbosity of informational output [-v]<br>&gt;   -Xcc &lt;flag&gt;          Pass flag through to all C compiler instantiations<br>&gt;   -Xlinker &lt;flag&gt;      Pass flag through to all linker instantiations<br>&gt;   -Xswiftc &lt;flag&gt;      Pass flag through to all Swift compiler instantiations<br>&gt; <br>&gt; NOTE: Use `swift build` to build packages, and `swift test` to test packages<br>&gt; <br>&gt; The changes are to introduce new flags for the parameters that were previously passed to the subcommand names themselves.  The last three flags listed (-Xcc, -Xlinker, and -Xswiftc) are unchanged to maintain compatibility with the swift compiler — this will likely be revisited at a later time.<br>&gt; <br>&gt; As described in SE-0085, the `build` subcommand stays.  It how has this interface:<br>&gt; <br>&gt; OVERVIEW: Build sources into binary products<br>&gt; <br>&gt; USAGE: swift build [mode] [options]<br>&gt; <br>&gt; MODES:<br>&gt;   --configuration &lt;value&gt;   Build with configuration (debug|release)<br>&gt;   --clean [&lt;mode&gt;]          Delete artifacts (build|dist)<br>&gt; <br>&gt; OPTIONS:<br>&gt;   --chdir &lt;path&gt;       Change working directory before any other operation [-C]<br>&gt;   --build-path &lt;path&gt;  Specify build directory<br>&gt;   --color &lt;mode&gt;       Specify color mode (auto|always|never)<br>&gt;   --verbose            Increase verbosity of informational output [-v]<br>&gt;   -Xcc &lt;flag&gt;          Pass flag through to all C compiler instantiations<br>&gt;   -Xlinker &lt;flag&gt;      Pass flag through to all linker instantiations<br>&gt;   -Xswiftc &lt;flag&gt;      Pass flag through to all Swift compiler instantiations<br>&gt; <br>&gt; NOTE: Use `swift package` to perform other functions on packages<br>&gt; <br>&gt; Finally, the `test` subcommand remains largely unmodified, with this interface:<br>&gt; <br>&gt; OVERVIEW: Build and run tests<br>&gt; <br>&gt; USAGE: swift test [specifier] [options]<br>&gt; <br>&gt; SPECIFIER:<br>&gt;   -s TestModule.TestCase         Run a test case subclass<br>&gt;   -s TestModule.TestCase/test1   Run a specific test method<br>&gt; <br>&gt; OPTIONS:<br>&gt;   --chdir              Change working directory before any other operation [-C]<br>&gt;   --build-path &lt;path&gt;  Specify build directory<br>&gt; <br>&gt; NOTE: Use `swift package` to perform other functions on packages<br>&gt; <br>&gt; Questions / comments / concerns?<br>&gt; <br>&gt; Anders<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160525/4d531681/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/79d9ba388d6b6cf4ec7310cad9fa8c8a?s=50"></div><header><strong>Package Manager command line option clean-up</strong> from <string>Rob Allen</string> &lt;rob at akrabat.com&gt;<p>May 26, 2016 at 08:00:00am</p></header><div class="content"><p>Looks nice and consistent to me. I like it.<br></p><p>It seems like `-vv` is not documented though or has it been removed?<br></p><p>Also, it seems slightly strange that there&#39;s not a long-form name for test&#39;s `-s` option.<br></p><p>Regards,<br></p><p>Rob...<br></p><p><br>&gt; On 26 May 2016, at 00:13, Anders Bertelrud via swift-build-dev &lt;swift-build-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello all,<br>&gt; <br>&gt; Now that the `package` subcommand has been implemented (see https://github.com/apple/swift-evolution/blob/master/proposals/0085-package-manager-command-name.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0085-package-manager-command-name.md&gt;), some of the options have ended up with awkward syntax.  For example, the old `--init` option took an optional package type parameter, and after the command renaming, the syntax has become somewhat awkward:  `package init=library`.<br>&gt; <br>&gt; In order to clean this up, we have added some flags for the newly introduced subcommands, and I wanted to run them by the list to get any feedback before making the change.<br>&gt; <br>&gt; The command line interface vended by the new `package` subcommand introduced by SE-0085 is shown in its help text:<br>&gt; <br>&gt; OVERVIEW: Perform operations on Swift packages<br>&gt; <br>&gt; USAGE: swift package [command] [options]<br>&gt; <br>&gt; COMMANDS:<br>&gt;   init [--type &lt;type&gt;]                   Initialize a new package (executable|library)<br>&gt;   fetch                                  Fetch package dependencies<br>&gt;   update                                 Update package dependencies<br>&gt;   generate-xcodeproj [--output &lt;path&gt;]   Generates an Xcode project<br>&gt;   show-dependencies [--format &lt;format&gt;]  Print dependency graph (text|dot|json)<br>&gt;   dump-package [--output &lt;path&gt;]         Print Package.swift as JSON<br>&gt; <br>&gt; OPTIONS:<br>&gt;   --chdir &lt;path&gt;       Change working directory before any command [-C]<br>&gt;   --color &lt;mode&gt;       Specify color mode (auto|always|never)<br>&gt;   --verbose            Increase verbosity of informational output [-v]<br>&gt;   -Xcc &lt;flag&gt;          Pass flag through to all C compiler instantiations<br>&gt;   -Xlinker &lt;flag&gt;      Pass flag through to all linker instantiations<br>&gt;   -Xswiftc &lt;flag&gt;      Pass flag through to all Swift compiler instantiations<br>&gt; <br>&gt; NOTE: Use `swift build` to build packages, and `swift test` to test packages<br>&gt; <br>&gt; The changes are to introduce new flags for the parameters that were previously passed to the subcommand names themselves.  The last three flags listed (-Xcc, -Xlinker, and -Xswiftc) are unchanged to maintain compatibility with the swift compiler — this will likely be revisited at a later time.<br>&gt; <br>&gt; As described in SE-0085, the `build` subcommand stays.  It how has this interface:<br>&gt; <br>&gt; OVERVIEW: Build sources into binary products<br>&gt; <br>&gt; USAGE: swift build [mode] [options]<br>&gt; <br>&gt; MODES:<br>&gt;   --configuration &lt;value&gt;   Build with configuration (debug|release)<br>&gt;   --clean [&lt;mode&gt;]          Delete artifacts (build|dist)<br>&gt; <br>&gt; OPTIONS:<br>&gt;   --chdir &lt;path&gt;       Change working directory before any other operation [-C]<br>&gt;   --build-path &lt;path&gt;  Specify build directory<br>&gt;   --color &lt;mode&gt;       Specify color mode (auto|always|never)<br>&gt;   --verbose            Increase verbosity of informational output [-v]<br>&gt;   -Xcc &lt;flag&gt;          Pass flag through to all C compiler instantiations<br>&gt;   -Xlinker &lt;flag&gt;      Pass flag through to all linker instantiations<br>&gt;   -Xswiftc &lt;flag&gt;      Pass flag through to all Swift compiler instantiations<br>&gt; <br>&gt; NOTE: Use `swift package` to perform other functions on packages<br>&gt; <br>&gt; Finally, the `test` subcommand remains largely unmodified, with this interface:<br>&gt; <br>&gt; OVERVIEW: Build and run tests<br>&gt; <br>&gt; USAGE: swift test [specifier] [options]<br>&gt; <br>&gt; SPECIFIER:<br>&gt;   -s TestModule.TestCase         Run a test case subclass<br>&gt;   -s TestModule.TestCase/test1   Run a specific test method<br>&gt; <br>&gt; OPTIONS:<br>&gt;   --chdir              Change working directory before any other operation [-C]<br>&gt;   --build-path &lt;path&gt;  Specify build directory<br>&gt; <br>&gt; NOTE: Use `swift package` to perform other functions on packages<br>&gt; <br>&gt; Questions / comments / concerns?<br>&gt; <br>&gt; Anders<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br></p><p>-- <br>Development thoughts at http://akrabat.com<br>Daily Jotter for Mac OS X at http://dailyjotter.com<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160526/6376b679/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fd5bd4566ee1f286333b7dbf2df6fadb?s=50"></div><header><strong>Package Manager command line option clean-up</strong> from <string>Anders Bertelrud</string> &lt;anders at apple.com&gt;<p>May 26, 2016 at 10:00:00am</p></header><div class="content"><p>On 2016-05-26, at 00.43, Rob Allen &lt;rob at akrabat.com&gt; wrote:<br></p><p>&gt; Looks nice and consistent to me. I like it.<br></p><p>Great!<br></p><p>&gt; It seems like `-vv` is not documented though or has it been removed?<br></p><p>It’s been removed, since:<br></p><p>a) it is non-standard, and<br>b) it can be easily achieved using -v -v<br></p><p>I didn’t change the behavior that each occurrence of -v increments the verbosity level.<br></p><p>&gt; Also, it seems slightly strange that there&#39;s not a long-form name for test&#39;s `-s` option.<br></p><p>That’s a good point.  “specifier” would be the obvious suggestion for a long-form name.  Does that sound good to you?<br></p><p>Thanks!<br></p><p>Anders<br></p><p>&gt; Regards,<br>&gt; <br>&gt; Rob...<br>&gt; <br>&gt; <br>&gt;&gt; On 26 May 2016, at 00:13, Anders Bertelrud via swift-build-dev &lt;swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello all,<br>&gt;&gt; <br>&gt;&gt; Now that the `package` subcommand has been implemented (see https://github.com/apple/swift-evolution/blob/master/proposals/0085-package-manager-command-name.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0085-package-manager-command-name.md&gt;), some of the options have ended up with awkward syntax.  For example, the old `--init` option took an optional package type parameter, and after the command renaming, the syntax has become somewhat awkward:  `package init=library`.<br>&gt;&gt; <br>&gt;&gt; In order to clean this up, we have added some flags for the newly introduced subcommands, and I wanted to run them by the list to get any feedback before making the change.<br>&gt;&gt; <br>&gt;&gt; The command line interface vended by the new `package` subcommand introduced by SE-0085 is shown in its help text:<br>&gt;&gt; <br>&gt;&gt; OVERVIEW: Perform operations on Swift packages<br>&gt;&gt; <br>&gt;&gt; USAGE: swift package [command] [options]<br>&gt;&gt; <br>&gt;&gt; COMMANDS:<br>&gt;&gt;   init [--type &lt;type&gt;]                   Initialize a new package (executable|library)<br>&gt;&gt;   fetch                                  Fetch package dependencies<br>&gt;&gt;   update                                 Update package dependencies<br>&gt;&gt;   generate-xcodeproj [--output &lt;path&gt;]   Generates an Xcode project<br>  show-dependencies [--format &lt;format&gt;]  Print dependency graph (text|dot|json)<br>&gt;&gt;   dump-package [--output &lt;path&gt;]         Print Package.swift as JSON<br>&gt;&gt; <br>&gt;&gt; OPTIONS:<br>&gt;&gt;   --chdir &lt;path&gt;       Change working directory before any command [-C]<br>&gt;&gt;   --color &lt;mode&gt;       Specify color mode (auto|always|never)<br>&gt;&gt;   --verbose            Increase verbosity of informational output [-v]<br>&gt;&gt;   -Xcc &lt;flag&gt;          Pass flag through to all C compiler instantiations<br>&gt;&gt;   -Xlinker &lt;flag&gt;      Pass flag through to all linker instantiations<br>&gt;&gt;   -Xswiftc &lt;flag&gt;      Pass flag through to all Swift compiler instantiations<br>&gt;&gt; <br>&gt;&gt; NOTE: Use `swift build` to build packages, and `swift test` to test packages<br>&gt;&gt; <br>&gt;&gt; The changes are to introduce new flags for the parameters that were previously passed to the subcommand names themselves.  The last three flags listed (-Xcc, -Xlinker, and -Xswiftc) are unchanged to maintain compatibility with the swift compiler — this will likely be revisited at a later time.<br>&gt;&gt; <br>&gt;&gt; As described in SE-0085, the `build` subcommand stays.  It how has this interface:<br>&gt;&gt; <br>&gt;&gt; OVERVIEW: Build sources into binary products<br>&gt;&gt; <br>&gt;&gt; USAGE: swift build [mode] [options]<br>&gt;&gt; <br>&gt;&gt; MODES:<br>&gt;&gt;   --configuration &lt;value&gt;   Build with configuration (debug|release)<br>&gt;&gt;   --clean [&lt;mode&gt;]          Delete artifacts (build|dist)<br>&gt;&gt; <br>&gt;&gt; OPTIONS:<br>&gt;&gt;   --chdir &lt;path&gt;       Change working directory before any other operation [-C]<br>&gt;&gt;   --build-path &lt;path&gt;  Specify build directory<br>&gt;&gt;   --color &lt;mode&gt;       Specify color mode (auto|always|never)<br>&gt;&gt;   --verbose            Increase verbosity of informational output [-v]<br>&gt;&gt;   -Xcc &lt;flag&gt;          Pass flag through to all C compiler instantiations<br>&gt;&gt;   -Xlinker &lt;flag&gt;      Pass flag through to all linker instantiations<br>&gt;&gt;   -Xswiftc &lt;flag&gt;      Pass flag through to all Swift compiler instantiations<br>&gt;&gt; <br>&gt;&gt; NOTE: Use `swift package` to perform other functions on packages<br>&gt;&gt; <br>&gt;&gt; Finally, the `test` subcommand remains largely unmodified, with this interface:<br>&gt;&gt; <br>&gt;&gt; OVERVIEW: Build and run tests<br>&gt;&gt; <br>&gt;&gt; USAGE: swift test [specifier] [options]<br>&gt;&gt; <br>&gt;&gt; SPECIFIER:<br>&gt;&gt;   -s TestModule.TestCase         Run a test case subclass<br>&gt;&gt;   -s TestModule.TestCase/test1   Run a specific test method<br>&gt;&gt; <br>&gt;&gt; OPTIONS:<br>&gt;&gt;   --chdir              Change working directory before any other operation [-C]<br>&gt;&gt;   --build-path &lt;path&gt;  Specify build directory<br>&gt;&gt; <br>&gt;&gt; NOTE: Use `swift package` to perform other functions on packages<br>&gt;&gt; <br>&gt;&gt; Questions / comments / concerns?<br>&gt;&gt; <br>&gt;&gt; Anders<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-build-dev mailing list<br>&gt;&gt; swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt; <br>&gt; -- <br>&gt; Development thoughts at http://akrabat.com &lt;http://akrabat.com/&gt;<br>&gt; Daily Jotter for Mac OS X at http://dailyjotter.com &lt;http://dailyjotter.com/&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160526/41e2b249/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/79d9ba388d6b6cf4ec7310cad9fa8c8a?s=50"></div><header><strong>Package Manager command line option clean-up</strong> from <string>Rob Allen</string> &lt;rob at akrabat.com&gt;<p>May 26, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On 26 May 2016, at 18:44, Anders Bertelrud &lt;anders at apple.com&gt; wrote:<br>&gt; <br>&gt; On 2016-05-26, at 00.43, Rob Allen &lt;rob at akrabat.com &lt;mailto:rob at akrabat.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Looks nice and consistent to me. I like it.<br>&gt; <br>&gt; Great!<br>&gt; <br>&gt;&gt; It seems like `-vv` is not documented though or has it been removed?<br>&gt; <br>&gt; It’s been removed, since:<br>&gt; <br>&gt; a) it is non-standard, and<br>&gt; b) it can be easily achieved using -v -v<br>&gt; <br>&gt; I didn’t change the behavior that each occurrence of -v increments the verbosity level.<br></p><p>Works for me.<br></p><p>&gt;&gt; Also, it seems slightly strange that there&#39;s not a long-form name for test&#39;s `-s` option.<br>&gt; <br>&gt; That’s a good point.  “specifier” would be the obvious suggestion for a long-form name.  Does that sound good to you?<br></p><p>Personally, I&#39;m not a fan of the word &quot;specifier to mean a single test class/method, and would have picked --case/-c or --test/-t given the choice. <br></p><p>However, given that the recently chosen short form is -s and the title of that section is &quot;SPECIFIER&quot;, then --specifier is nicely consistent.<br></p><p>Regards,<br></p><p>Rob...<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160526/4ac7c975/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Package Manager command line option clean-up</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>May 26, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On May 26, 2016, at 11:04 AM, Rob Allen via swift-build-dev &lt;swift-build-dev at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On 26 May 2016, at 18:44, Anders Bertelrud &lt;anders at apple.com &lt;mailto:anders at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On 2016-05-26, at 00.43, Rob Allen &lt;rob at akrabat.com &lt;mailto:rob at akrabat.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Looks nice and consistent to me. I like it.<br>&gt;&gt; <br>&gt;&gt; Great!<br>&gt;&gt; <br>&gt;&gt;&gt; It seems like `-vv` is not documented though or has it been removed?<br>&gt;&gt; <br>&gt;&gt; It’s been removed, since:<br>&gt;&gt; <br>&gt;&gt; a) it is non-standard, and<br>&gt;&gt; b) it can be easily achieved using -v -v<br>&gt;&gt; <br>&gt;&gt; I didn’t change the behavior that each occurrence of -v increments the verbosity level.<br>&gt; <br>&gt; Works for me.<br>&gt; <br>&gt;&gt;&gt; Also, it seems slightly strange that there&#39;s not a long-form name for test&#39;s `-s` option.<br>&gt;&gt; <br>&gt;&gt; That’s a good point.  “specifier” would be the obvious suggestion for a long-form name.  Does that sound good to you?<br>&gt; <br>&gt; Personally, I&#39;m not a fan of the word &quot;specifier to mean a single test class/method, and would have picked --case/-c or --test/-t given the choice. <br>&gt; <br>&gt; However, given that the recently chosen short form is -s and the title of that section is &quot;SPECIFIER&quot;, then --specifier is nicely consistent.<br></p><p>+1 for specifier, for now.<br></p><p>We have some work in flight to allow moving to a more flexible syntax for this, eventually (but we need XCTest discovery to land first).<br></p><p> - Daniel<br></p><p>&gt; <br>&gt; Regards,<br>&gt; <br>&gt; Rob...<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev &lt;https://lists.swift.org/mailman/listinfo/swift-build-dev&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160526/ce6307db/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
