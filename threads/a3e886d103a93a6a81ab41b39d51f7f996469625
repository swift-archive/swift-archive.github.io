<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>Build and install custom toolchain?</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>December  9, 2015 at 02:00:00pm</p></header><div class="content"><p>Is there an easy way to build and install my own toolchain into /Library/Developer/Toolchains? I assume there must be some automated way to construct the package installer, but nothing immediately leaps out at me. It looks like build-script can create a root, but that seems to be for BNI, which isn&#39;t helpful.<br></p><p>The reason for doing this here is I have a Vim plugin that lets me execute Swift scripts from vim buffers, and it supports using the swift from any given Xcode. I want to teach it how to find swift in /Library/Developer/Toolchains instead, which requires that I actually install a toolchain there (teaching it how to use the build folder from my swift checkout is doable, but that&#39;s not very portable).<br></p><p>-Kevin Ballard<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dbc48a135881e122fea26cf27760d11a?s=50"></div><header><strong>Build and install custom toolchain?</strong> from <string>Mish Awadah</string> &lt;mawadah at apple.com&gt;<p>December  9, 2015 at 04:00:00pm</p></header><div class="content"><p>Hi Kevin,<br></p><p>Here’s what I’ve done in the past to build a toolchain using the build script. <br></p><p>function build_osx_package() {<br></p><p>    YEAR=$(date +&quot;%Y&quot;)<br>    MONTH=$(date +&quot;%m&quot;)<br>    DAY=$(date +&quot;%d&quot;)<br>    TOOLCHAIN_VERSION=&quot;swift-SNAPSHOT-${YEAR}-${MONTH}-${DAY}-a&quot;<br>    ARCHIVE_DIR=&quot;${TOOLCHAIN_VERSION}-${BUILD_NUMBER}&quot;<br>    ARCHIVE=&quot;${TOOLCHAIN_VERSION}-osx.tar.gz&quot;<br>    SYM_ARCHIVE=&quot;${TOOLCHAIN_VERSION}-osx-symbols.tar.gz&quot;<br>    BUNDLE_IDENTIFIER=&quot;org.swift.${YEAR}${MONTH}${DAY}&quot;<br>    DISPLAY_NAME=&quot;Swift Development Snapshot&quot;<br>    TOOLCHAIN_NAME=&quot;${TOOLCHAIN_VERSION}&quot;<br></p><p>    SWIFT_SOURCE_ROOT=&quot;${SRC_DIR}&quot;<br>    SWIFT_BUILD_ROOT=&quot;${SRC_DIR}/build&quot;<br>    SWIFT_INSTALLABLE_PACKAGE=&quot;${SRC_DIR}/${ARCHIVE}&quot;<br>    SWIFT_INSTALL_DIR=&quot;${SRC_DIR}/swift-nightly-install&quot;<br>    SWIFT_INSTALL_SYMROOT=&quot;${SRC_DIR}/swift-nightly-symroot&quot;<br>    SWIFT_TOOLCHAIN_DIR=&quot;/Applications/Xcode.app/Contents/Developer/Toolchains/${TOOLCHAIN_NAME}.xctoolchain&quot;<br>    SYMBOLS_PACKAGE=&quot;${SRC_DIR}/${SYM_ARCHIVE}&quot;<br></p><p>    ./swift/utils/build-script --preset=&quot;buildbot_osx_package&quot; install_destdir=&quot;${SWIFT_INSTALL_DIR}&quot; installable_package=&quot;${SWIFT_INSTALLABLE_PACKAGE}&quot; install_toolchain_dir=&quot;${SWIFT_TOOLCHAIN_DIR}&quot; install_symroot=&quot;${SWIFT_INSTALL_SYMROOT}&quot; symbols_package=&quot;${SYMBOLS_PACKAGE}&quot; darwin_toolchain_bundle_identifier=&quot;${BUNDLE_IDENTIFIER}&quot; darwin_toolchain_display_name=&quot;${DISPLAY_NAME}&quot; darwin_toolchain_xctoolchain_name=&quot;${TOOLCHAIN_NAME}&quot; darwin_toolchain_version=&quot;${TOOLCHAIN_VERSION}&quot;<br>}<br></p><p>HTH,<br>- mish<br></p><p>&gt; On Dec 9, 2015, at 2:32 PM, Kevin Ballard via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Is there an easy way to build and install my own toolchain into /Library/Developer/Toolchains? I assume there must be some automated way to construct the package installer, but nothing immediately leaps out at me. It looks like build-script can create a root, but that seems to be for BNI, which isn&#39;t helpful.<br>&gt; <br>&gt; The reason for doing this here is I have a Vim plugin that lets me execute Swift scripts from vim buffers, and it supports using the swift from any given Xcode. I want to teach it how to find swift in /Library/Developer/Toolchains instead, which requires that I actually install a toolchain there (teaching it how to use the build folder from my swift checkout is doable, but that&#39;s not very portable).<br>&gt; <br>&gt; -Kevin Ballard<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>Build and install custom toolchain?</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>December  9, 2015 at 09:00:00pm</p></header><div class="content"><p>It does help, thanks. I&#39;m surprised there&#39;s no script (or option to build-script) to do this automatically. Seems like a reasonable thing to want to do upon occasion.<br></p><p>Also, I assume that those of us who aren&#39;t at Apple probably don&#39;t want to be using /Applications/Xcode.app/Contents/Developer/Toolchains/ as our install dir, but instead /Library/Developer/Toolchains/ like where the snapshot installs.<br></p><p>-Kevin Ballard<br></p><p>On Wed, Dec 9, 2015, at 04:18 PM, Mish Awadah wrote:<br>&gt; Hi Kevin,<br>&gt; <br>&gt; Here’s what I’ve done in the past to build a toolchain using the build script. <br>&gt; <br>&gt; function build_osx_package() {<br>&gt; <br>&gt;     YEAR=$(date +&quot;%Y&quot;)<br>&gt;     MONTH=$(date +&quot;%m&quot;)<br>&gt;     DAY=$(date +&quot;%d&quot;)<br>&gt;     TOOLCHAIN_VERSION=&quot;swift-SNAPSHOT-${YEAR}-${MONTH}-${DAY}-a&quot;<br>&gt;     ARCHIVE_DIR=&quot;${TOOLCHAIN_VERSION}-${BUILD_NUMBER}&quot;<br>&gt;     ARCHIVE=&quot;${TOOLCHAIN_VERSION}-osx.tar.gz&quot;<br>&gt;     SYM_ARCHIVE=&quot;${TOOLCHAIN_VERSION}-osx-symbols.tar.gz&quot;<br>&gt;     BUNDLE_IDENTIFIER=&quot;org.swift.${YEAR}${MONTH}${DAY}&quot;<br>&gt;     DISPLAY_NAME=&quot;Swift Development Snapshot&quot;<br>&gt;     TOOLCHAIN_NAME=&quot;${TOOLCHAIN_VERSION}&quot;<br>&gt; <br>&gt;     SWIFT_SOURCE_ROOT=&quot;${SRC_DIR}&quot;<br>&gt;     SWIFT_BUILD_ROOT=&quot;${SRC_DIR}/build&quot;<br>&gt;     SWIFT_INSTALLABLE_PACKAGE=&quot;${SRC_DIR}/${ARCHIVE}&quot;<br>&gt;     SWIFT_INSTALL_DIR=&quot;${SRC_DIR}/swift-nightly-install&quot;<br>&gt;     SWIFT_INSTALL_SYMROOT=&quot;${SRC_DIR}/swift-nightly-symroot&quot;<br>&gt;     SWIFT_TOOLCHAIN_DIR=&quot;/Applications/Xcode.app/Contents/Developer/Toolchains/${TOOLCHAIN_NAME}.xctoolchain&quot;<br>&gt;     SYMBOLS_PACKAGE=&quot;${SRC_DIR}/${SYM_ARCHIVE}&quot;<br>&gt; <br>&gt;     ./swift/utils/build-script --preset=&quot;buildbot_osx_package&quot; install_destdir=&quot;${SWIFT_INSTALL_DIR}&quot; installable_package=&quot;${SWIFT_INSTALLABLE_PACKAGE}&quot; install_toolchain_dir=&quot;${SWIFT_TOOLCHAIN_DIR}&quot; install_symroot=&quot;${SWIFT_INSTALL_SYMROOT}&quot; symbols_package=&quot;${SYMBOLS_PACKAGE}&quot; darwin_toolchain_bundle_identifier=&quot;${BUNDLE_IDENTIFIER}&quot; darwin_toolchain_display_name=&quot;${DISPLAY_NAME}&quot; darwin_toolchain_xctoolchain_name=&quot;${TOOLCHAIN_NAME}&quot; darwin_toolchain_version=&quot;${TOOLCHAIN_VERSION}&quot;<br>&gt; }<br>&gt; <br>&gt; HTH,<br>&gt; - mish<br>&gt; <br>&gt; &gt; On Dec 9, 2015, at 2:32 PM, Kevin Ballard via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; &gt; <br>&gt; &gt; Is there an easy way to build and install my own toolchain into /Library/Developer/Toolchains? I assume there must be some automated way to construct the package installer, but nothing immediately leaps out at me. It looks like build-script can create a root, but that seems to be for BNI, which isn&#39;t helpful.<br>&gt; &gt; <br>&gt; &gt; The reason for doing this here is I have a Vim plugin that lets me execute Swift scripts from vim buffers, and it supports using the swift from any given Xcode. I want to teach it how to find swift in /Library/Developer/Toolchains instead, which requires that I actually install a toolchain there (teaching it how to use the build folder from my swift checkout is doable, but that&#39;s not very portable).<br>&gt; &gt; <br>&gt; &gt; -Kevin Ballard<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-dev mailing list<br>&gt; &gt; swift-dev at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Build and install custom toolchain?</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>December  9, 2015 at 09:00:00pm</p></header><div class="content"><p>Agreed, we should probably try and clean up the command line syntax (and --help) to direct people towards the options that make the most sense. Having just an &quot;--install&quot; option that did something sensible for your current platform + other options would make a lot of sense to me.<br></p><p>I&#39;d recommend filing specific enhancement requests as bugs, since these should be easy things for people to cherry pick off. Ditto for the bug about the install path.<br></p><p> - Daniel<br></p><p>&gt; On Dec 9, 2015, at 9:34 PM, Kevin Ballard via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; It does help, thanks. I&#39;m surprised there&#39;s no script (or option to build-script) to do this automatically. Seems like a reasonable thing to want to do upon occasion.<br>&gt; <br>&gt; Also, I assume that those of us who aren&#39;t at Apple probably don&#39;t want to be using /Applications/Xcode.app/Contents/Developer/Toolchains/ as our install dir, but instead /Library/Developer/Toolchains/ like where the snapshot installs.<br>&gt; <br>&gt; -Kevin Ballard<br>&gt; <br>&gt; On Wed, Dec 9, 2015, at 04:18 PM, Mish Awadah wrote:<br>&gt;&gt; Hi Kevin,<br>&gt;&gt; <br>&gt;&gt; Here’s what I’ve done in the past to build a toolchain using the build script. <br>&gt;&gt; <br>&gt;&gt; function build_osx_package() {<br>&gt;&gt; <br>&gt;&gt;    YEAR=$(date +&quot;%Y&quot;)<br>&gt;&gt;    MONTH=$(date +&quot;%m&quot;)<br>&gt;&gt;    DAY=$(date +&quot;%d&quot;)<br>&gt;&gt;    TOOLCHAIN_VERSION=&quot;swift-SNAPSHOT-${YEAR}-${MONTH}-${DAY}-a&quot;<br>&gt;&gt;    ARCHIVE_DIR=&quot;${TOOLCHAIN_VERSION}-${BUILD_NUMBER}&quot;<br>&gt;&gt;    ARCHIVE=&quot;${TOOLCHAIN_VERSION}-osx.tar.gz&quot;<br>&gt;&gt;    SYM_ARCHIVE=&quot;${TOOLCHAIN_VERSION}-osx-symbols.tar.gz&quot;<br>&gt;&gt;    BUNDLE_IDENTIFIER=&quot;org.swift.${YEAR}${MONTH}${DAY}&quot;<br>&gt;&gt;    DISPLAY_NAME=&quot;Swift Development Snapshot&quot;<br>&gt;&gt;    TOOLCHAIN_NAME=&quot;${TOOLCHAIN_VERSION}&quot;<br>&gt;&gt; <br>&gt;&gt;    SWIFT_SOURCE_ROOT=&quot;${SRC_DIR}&quot;<br>&gt;&gt;    SWIFT_BUILD_ROOT=&quot;${SRC_DIR}/build&quot;<br>&gt;&gt;    SWIFT_INSTALLABLE_PACKAGE=&quot;${SRC_DIR}/${ARCHIVE}&quot;<br>&gt;&gt;    SWIFT_INSTALL_DIR=&quot;${SRC_DIR}/swift-nightly-install&quot;<br>&gt;&gt;    SWIFT_INSTALL_SYMROOT=&quot;${SRC_DIR}/swift-nightly-symroot&quot;<br>&gt;&gt;    SWIFT_TOOLCHAIN_DIR=&quot;/Applications/Xcode.app/Contents/Developer/Toolchains/${TOOLCHAIN_NAME}.xctoolchain&quot;<br>&gt;&gt;    SYMBOLS_PACKAGE=&quot;${SRC_DIR}/${SYM_ARCHIVE}&quot;<br>&gt;&gt; <br>&gt;&gt;    ./swift/utils/build-script --preset=&quot;buildbot_osx_package&quot; install_destdir=&quot;${SWIFT_INSTALL_DIR}&quot; installable_package=&quot;${SWIFT_INSTALLABLE_PACKAGE}&quot; install_toolchain_dir=&quot;${SWIFT_TOOLCHAIN_DIR}&quot; install_symroot=&quot;${SWIFT_INSTALL_SYMROOT}&quot; symbols_package=&quot;${SYMBOLS_PACKAGE}&quot; darwin_toolchain_bundle_identifier=&quot;${BUNDLE_IDENTIFIER}&quot; darwin_toolchain_display_name=&quot;${DISPLAY_NAME}&quot; darwin_toolchain_xctoolchain_name=&quot;${TOOLCHAIN_NAME}&quot; darwin_toolchain_version=&quot;${TOOLCHAIN_VERSION}&quot;<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; HTH,<br>&gt;&gt; - mish<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 9, 2015, at 2:32 PM, Kevin Ballard via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is there an easy way to build and install my own toolchain into /Library/Developer/Toolchains? I assume there must be some automated way to construct the package installer, but nothing immediately leaps out at me. It looks like build-script can create a root, but that seems to be for BNI, which isn&#39;t helpful.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The reason for doing this here is I have a Vim plugin that lets me execute Swift scripts from vim buffers, and it supports using the swift from any given Xcode. I want to teach it how to find swift in /Library/Developer/Toolchains instead, which requires that I actually install a toolchain there (teaching it how to use the build folder from my swift checkout is doable, but that&#39;s not very portable).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Kevin Ballard<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt; swift-dev at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>Build and install custom toolchain?</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>December  9, 2015 at 09:00:00pm</p></header><div class="content"><p>I filed a ticket for making such a script as https://bugs.swift.org/browse/SR-174.<br></p><p>I&#39;m not filing one for the install path at the moment, since that appears to be configurable in the code you provided (your code is just hardcoding the install dir as inside of Xcode).<br></p><p>-Kevin<br></p><p>On Wed, Dec 9, 2015, at 09:37 PM, Daniel Dunbar wrote:<br>&gt; Agreed, we should probably try and clean up the command line syntax (and --help) to direct people towards the options that make the most sense. Having just an &quot;--install&quot; option that did something sensible for your current platform + other options would make a lot of sense to me.<br>&gt; <br>&gt; I&#39;d recommend filing specific enhancement requests as bugs, since these should be easy things for people to cherry pick off. Ditto for the bug about the install path.<br>&gt; <br>&gt;  - Daniel<br>&gt; <br>&gt; &gt; On Dec 9, 2015, at 9:34 PM, Kevin Ballard via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; &gt; <br>&gt; &gt; It does help, thanks. I&#39;m surprised there&#39;s no script (or option to build-script) to do this automatically. Seems like a reasonable thing to want to do upon occasion.<br>&gt; &gt; <br>&gt; &gt; Also, I assume that those of us who aren&#39;t at Apple probably don&#39;t want to be using /Applications/Xcode.app/Contents/Developer/Toolchains/ as our install dir, but instead /Library/Developer/Toolchains/ like where the snapshot installs.<br>&gt; &gt; <br>&gt; &gt; -Kevin Ballard<br>&gt; &gt; <br>&gt; &gt; On Wed, Dec 9, 2015, at 04:18 PM, Mish Awadah wrote:<br>&gt; &gt;&gt; Hi Kevin,<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; Here’s what I’ve done in the past to build a toolchain using the build script. <br>&gt; &gt;&gt; <br>&gt; &gt;&gt; function build_osx_package() {<br>&gt; &gt;&gt; <br>&gt; &gt;&gt;    YEAR=$(date +&quot;%Y&quot;)<br>&gt; &gt;&gt;    MONTH=$(date +&quot;%m&quot;)<br>&gt; &gt;&gt;    DAY=$(date +&quot;%d&quot;)<br>&gt; &gt;&gt;    TOOLCHAIN_VERSION=&quot;swift-SNAPSHOT-${YEAR}-${MONTH}-${DAY}-a&quot;<br>&gt; &gt;&gt;    ARCHIVE_DIR=&quot;${TOOLCHAIN_VERSION}-${BUILD_NUMBER}&quot;<br>&gt; &gt;&gt;    ARCHIVE=&quot;${TOOLCHAIN_VERSION}-osx.tar.gz&quot;<br>&gt; &gt;&gt;    SYM_ARCHIVE=&quot;${TOOLCHAIN_VERSION}-osx-symbols.tar.gz&quot;<br>&gt; &gt;&gt;    BUNDLE_IDENTIFIER=&quot;org.swift.${YEAR}${MONTH}${DAY}&quot;<br>&gt; &gt;&gt;    DISPLAY_NAME=&quot;Swift Development Snapshot&quot;<br>&gt; &gt;&gt;    TOOLCHAIN_NAME=&quot;${TOOLCHAIN_VERSION}&quot;<br>&gt; &gt;&gt; <br>&gt; &gt;&gt;    SWIFT_SOURCE_ROOT=&quot;${SRC_DIR}&quot;<br>&gt; &gt;&gt;    SWIFT_BUILD_ROOT=&quot;${SRC_DIR}/build&quot;<br>&gt; &gt;&gt;    SWIFT_INSTALLABLE_PACKAGE=&quot;${SRC_DIR}/${ARCHIVE}&quot;<br>&gt; &gt;&gt;    SWIFT_INSTALL_DIR=&quot;${SRC_DIR}/swift-nightly-install&quot;<br>&gt; &gt;&gt;    SWIFT_INSTALL_SYMROOT=&quot;${SRC_DIR}/swift-nightly-symroot&quot;<br>&gt; &gt;&gt;    SWIFT_TOOLCHAIN_DIR=&quot;/Applications/Xcode.app/Contents/Developer/Toolchains/${TOOLCHAIN_NAME}.xctoolchain&quot;<br>&gt; &gt;&gt;    SYMBOLS_PACKAGE=&quot;${SRC_DIR}/${SYM_ARCHIVE}&quot;<br>&gt; &gt;&gt; <br>&gt; &gt;&gt;    ./swift/utils/build-script --preset=&quot;buildbot_osx_package&quot; install_destdir=&quot;${SWIFT_INSTALL_DIR}&quot; installable_package=&quot;${SWIFT_INSTALLABLE_PACKAGE}&quot; install_toolchain_dir=&quot;${SWIFT_TOOLCHAIN_DIR}&quot; install_symroot=&quot;${SWIFT_INSTALL_SYMROOT}&quot; symbols_package=&quot;${SYMBOLS_PACKAGE}&quot; darwin_toolchain_bundle_identifier=&quot;${BUNDLE_IDENTIFIER}&quot; darwin_toolchain_display_name=&quot;${DISPLAY_NAME}&quot; darwin_toolchain_xctoolchain_name=&quot;${TOOLCHAIN_NAME}&quot; darwin_toolchain_version=&quot;${TOOLCHAIN_VERSION}&quot;<br>&gt; &gt;&gt; }<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; HTH,<br>&gt; &gt;&gt; - mish<br>&gt; &gt;&gt; <br>&gt; &gt;&gt;&gt; On Dec 9, 2015, at 2:32 PM, Kevin Ballard via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; Is there an easy way to build and install my own toolchain into /Library/Developer/Toolchains? I assume there must be some automated way to construct the package installer, but nothing immediately leaps out at me. It looks like build-script can create a root, but that seems to be for BNI, which isn&#39;t helpful.<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; The reason for doing this here is I have a Vim plugin that lets me execute Swift scripts from vim buffers, and it supports using the swift from any given Xcode. I want to teach it how to find swift in /Library/Developer/Toolchains instead, which requires that I actually install a toolchain there (teaching it how to use the build folder from my swift checkout is doable, but that&#39;s not very portable).<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; -Kevin Ballard<br>&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; swift-dev mailing list<br>&gt; &gt;&gt;&gt; swift-dev at swift.org<br>&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; &gt;&gt; <br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-dev mailing list<br>&gt; &gt; swift-dev at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>Build and install custom toolchain?</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>December  9, 2015 at 09:00:00pm</p></header><div class="content"><p>Oh I&#39;m sorry, I meant in the code Mish provided.<br></p><p>-Kevin Ballard<br></p><p>On Wed, Dec 9, 2015, at 09:55 PM, Kevin Ballard wrote:<br>&gt; I filed a ticket for making such a script as https://bugs.swift.org/browse/SR-174.<br>&gt; <br>&gt; I&#39;m not filing one for the install path at the moment, since that appears to be configurable in the code you provided (your code is just hardcoding the install dir as inside of Xcode).<br>&gt; <br>&gt; -Kevin<br>&gt; <br>&gt; On Wed, Dec 9, 2015, at 09:37 PM, Daniel Dunbar wrote:<br>&gt; &gt; Agreed, we should probably try and clean up the command line syntax (and --help) to direct people towards the options that make the most sense. Having just an &quot;--install&quot; option that did something sensible for your current platform + other options would make a lot of sense to me.<br>&gt; &gt; <br>&gt; &gt; I&#39;d recommend filing specific enhancement requests as bugs, since these should be easy things for people to cherry pick off. Ditto for the bug about the install path.<br>&gt; &gt; <br>&gt; &gt;  - Daniel<br>&gt; &gt; <br>&gt; &gt; &gt; On Dec 9, 2015, at 9:34 PM, Kevin Ballard via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; It does help, thanks. I&#39;m surprised there&#39;s no script (or option to build-script) to do this automatically. Seems like a reasonable thing to want to do upon occasion.<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; Also, I assume that those of us who aren&#39;t at Apple probably don&#39;t want to be using /Applications/Xcode.app/Contents/Developer/Toolchains/ as our install dir, but instead /Library/Developer/Toolchains/ like where the snapshot installs.<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; -Kevin Ballard<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; On Wed, Dec 9, 2015, at 04:18 PM, Mish Awadah wrote:<br>&gt; &gt; &gt;&gt; Hi Kevin,<br>&gt; &gt; &gt;&gt; <br>&gt; &gt; &gt;&gt; Here’s what I’ve done in the past to build a toolchain using the build script. <br>&gt; &gt; &gt;&gt; <br>&gt; &gt; &gt;&gt; function build_osx_package() {<br>&gt; &gt; &gt;&gt; <br>&gt; &gt; &gt;&gt;    YEAR=$(date +&quot;%Y&quot;)<br>&gt; &gt; &gt;&gt;    MONTH=$(date +&quot;%m&quot;)<br>&gt; &gt; &gt;&gt;    DAY=$(date +&quot;%d&quot;)<br>&gt; &gt; &gt;&gt;    TOOLCHAIN_VERSION=&quot;swift-SNAPSHOT-${YEAR}-${MONTH}-${DAY}-a&quot;<br>&gt; &gt; &gt;&gt;    ARCHIVE_DIR=&quot;${TOOLCHAIN_VERSION}-${BUILD_NUMBER}&quot;<br>&gt; &gt; &gt;&gt;    ARCHIVE=&quot;${TOOLCHAIN_VERSION}-osx.tar.gz&quot;<br>&gt; &gt; &gt;&gt;    SYM_ARCHIVE=&quot;${TOOLCHAIN_VERSION}-osx-symbols.tar.gz&quot;<br>&gt; &gt; &gt;&gt;    BUNDLE_IDENTIFIER=&quot;org.swift.${YEAR}${MONTH}${DAY}&quot;<br>&gt; &gt; &gt;&gt;    DISPLAY_NAME=&quot;Swift Development Snapshot&quot;<br>&gt; &gt; &gt;&gt;    TOOLCHAIN_NAME=&quot;${TOOLCHAIN_VERSION}&quot;<br>&gt; &gt; &gt;&gt; <br>&gt; &gt; &gt;&gt;    SWIFT_SOURCE_ROOT=&quot;${SRC_DIR}&quot;<br>&gt; &gt; &gt;&gt;    SWIFT_BUILD_ROOT=&quot;${SRC_DIR}/build&quot;<br>&gt; &gt; &gt;&gt;    SWIFT_INSTALLABLE_PACKAGE=&quot;${SRC_DIR}/${ARCHIVE}&quot;<br>&gt; &gt; &gt;&gt;    SWIFT_INSTALL_DIR=&quot;${SRC_DIR}/swift-nightly-install&quot;<br>&gt; &gt; &gt;&gt;    SWIFT_INSTALL_SYMROOT=&quot;${SRC_DIR}/swift-nightly-symroot&quot;<br>&gt; &gt; &gt;&gt;    SWIFT_TOOLCHAIN_DIR=&quot;/Applications/Xcode.app/Contents/Developer/Toolchains/${TOOLCHAIN_NAME}.xctoolchain&quot;<br>&gt; &gt; &gt;&gt;    SYMBOLS_PACKAGE=&quot;${SRC_DIR}/${SYM_ARCHIVE}&quot;<br>&gt; &gt; &gt;&gt; <br>&gt; &gt; &gt;&gt;    ./swift/utils/build-script --preset=&quot;buildbot_osx_package&quot; install_destdir=&quot;${SWIFT_INSTALL_DIR}&quot; installable_package=&quot;${SWIFT_INSTALLABLE_PACKAGE}&quot; install_toolchain_dir=&quot;${SWIFT_TOOLCHAIN_DIR}&quot; install_symroot=&quot;${SWIFT_INSTALL_SYMROOT}&quot; symbols_package=&quot;${SYMBOLS_PACKAGE}&quot; darwin_toolchain_bundle_identifier=&quot;${BUNDLE_IDENTIFIER}&quot; darwin_toolchain_display_name=&quot;${DISPLAY_NAME}&quot; darwin_toolchain_xctoolchain_name=&quot;${TOOLCHAIN_NAME}&quot; darwin_toolchain_version=&quot;${TOOLCHAIN_VERSION}&quot;<br>&gt; &gt; &gt;&gt; }<br>&gt; &gt; &gt;&gt; <br>&gt; &gt; &gt;&gt; HTH,<br>&gt; &gt; &gt;&gt; - mish<br>&gt; &gt; &gt;&gt; <br>&gt; &gt; &gt;&gt;&gt; On Dec 9, 2015, at 2:32 PM, Kevin Ballard via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; &gt; &gt;&gt;&gt; <br>&gt; &gt; &gt;&gt;&gt; Is there an easy way to build and install my own toolchain into /Library/Developer/Toolchains? I assume there must be some automated way to construct the package installer, but nothing immediately leaps out at me. It looks like build-script can create a root, but that seems to be for BNI, which isn&#39;t helpful.<br>&gt; &gt; &gt;&gt;&gt; <br>&gt; &gt; &gt;&gt;&gt; The reason for doing this here is I have a Vim plugin that lets me execute Swift scripts from vim buffers, and it supports using the swift from any given Xcode. I want to teach it how to find swift in /Library/Developer/Toolchains instead, which requires that I actually install a toolchain there (teaching it how to use the build folder from my swift checkout is doable, but that&#39;s not very portable).<br>&gt; &gt; &gt;&gt;&gt; <br>&gt; &gt; &gt;&gt;&gt; -Kevin Ballard<br>&gt; &gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt; &gt;&gt;&gt; swift-dev mailing list<br>&gt; &gt; &gt;&gt;&gt; swift-dev at swift.org<br>&gt; &gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; &gt; &gt;&gt; <br>&gt; &gt; &gt; _______________________________________________<br>&gt; &gt; &gt; swift-dev mailing list<br>&gt; &gt; &gt; swift-dev at swift.org<br>&gt; &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; &gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
