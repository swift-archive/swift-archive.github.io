<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Pitch] Adding a Self type name shortcut for static member access</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April  6, 2016 at 09:00:00am</p></header><div class="content"><p>on Wed Apr 06 2016, Jeremy Pereira &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I think I would be -1 on this.<br>&gt;<br>&gt; The proposal is that there be two names, Self and self that refer to<br>&gt; different objects but are differentiated only by the capitalisation of<br>&gt; the first letter and these could be mixed in the same context.<br></p><p>No, Self would not refer to an object; Self is a type alias.  Self.self<br>is the metatype object that you might be thinking of.<br></p><p>&gt; I think this would make code that uses both harder to read. If typing<br>&gt; ‘self.dynamicType’ is too onerous, how about shortening it in a<br>&gt; different way? Why, for instance is ‘self.&#39; mandatory? Alternatively,<br>&gt; why is it ‘dynamicType’ and not just ‘type’?<br></p><p>That&#39;s a completely different beast; not useful in the same contexts.<br>For example, you can&#39;t write<br></p><p>       var x: self.dynamicType<br></p><p>but you could write<br></p><p>       var x: Self<br></p><p>&gt;<br>&gt;&gt; On 6 Apr 2016, at 10:51, Adrian Kashivskyy via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; +1 for Self and the proposal.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Pozdrawiam – Regards,<br>&gt;&gt; Adrian Kashivskyy<br>&gt;&gt; <br>&gt;&gt;&gt; Wiadomość napisana przez Bernd Ohr (jazzbox) via swift-evolution &lt;swift-evolution at swift.org&gt; w dniu 06.04.2016, o godz. 09:11:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I am using a typealias for this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; struct MyStruct {<br>&gt;&gt;&gt;    private typealias _Self = MyStruct<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    static func staticMethod() { print(&quot;staticMethod&quot;) }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    func instanceMethod() {<br>&gt;&gt;&gt;        _Self.staticMethod()<br>&gt;&gt;&gt;    }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Apr 5, 2016, at 4:17 PM, Timothy Wood&lt;tjw at me.com(mailto:tjw at me.com)&gt;wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Apr 5, 2016, at 3:04 PM, Joe Groff via swift-evolution&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)&gt;wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; What you&#39;re describing should be spelled `Self`, IMO. I think<br>&gt;&gt;&gt;&gt;&gt;&gt; Tim intended `#Self` to mean the *static* type the code is<br>&gt;&gt;&gt;&gt;&gt;&gt; declared inside (which is the same as Self unless you&#39;re in a<br>&gt;&gt;&gt;&gt;&gt;&gt; class).<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Yes, that is what I was aiming for. `#Self` would be a pretty<br>&gt;&gt;&gt;&gt;&gt; much textual replacement just like #file, etc. That is, I could<br>&gt;&gt;&gt;&gt;&gt; imaging it being used in a bunch of cases (not useful here, but<br>&gt;&gt;&gt;&gt;&gt; just intending to enumerate the possible uses I see):<br>&gt;&gt;&gt;&gt; Please check to ensure that the changes I just made match your expectations:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; https://gist.github.com/erica/c60c7d51809889f3dfd47cdb482d6227<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- E<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>[Pitch] Adding a Self type name shortcut for static member access</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>April  7, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On 6 Apr 2016, at 18:16, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Wed Apr 06 2016, Jeremy Pereira &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; I think I would be -1 on this.<br>&gt;&gt; <br>&gt;&gt; The proposal is that there be two names, Self and self that refer to<br>&gt;&gt; different objects but are differentiated only by the capitalisation of<br>&gt;&gt; the first letter and these could be mixed in the same context.<br>&gt; <br>&gt; No, Self would not refer to an object; Self is a type alias.  Self.self<br>&gt; is the metatype object that you might be thinking of.<br></p><p>As I understand it, the proposal is that `Self` can be used as an alias to `self.dynamicType`, which is an object in the sense of entity in Swift but not an instance of a class or struct. <br></p><p>My point, though is not the exact semantics of what you call the thing that `Self` is but that having it and `self` in the same code will lead to readability issues because you can have `self` and `Self` in the same code referring to completely different things and they only differ in the case of the first letter.<br></p><p>&gt; <br>&gt;&gt; I think this would make code that uses both harder to read. If typing<br>&gt;&gt; ‘self.dynamicType’ is too onerous, how about shortening it in a<br>&gt;&gt; different way? Why, for instance is ‘self.&#39; mandatory? Alternatively,<br>&gt;&gt; why is it ‘dynamicType’ and not just ‘type’?<br>&gt; <br>&gt; That&#39;s a completely different beast; not useful in the same contexts.<br>&gt; For example, you can&#39;t write<br>&gt; <br>&gt;       var x: self.dynamicType<br></p><p>But the _proposal_ is that `Self` can be used as an alias for `self.dynamicType`. I have no problem with using `Self` in places where a type is expected (well, no serious problem given it is already a done deal), but the proposal says “This proposal introduces Self, an equivalent to self.dynamicType.”<br></p><p>So you could have (in function bodies) <br></p><p>    self.foo()	// invoke an instance method<br>    Self.bar()  // invoke a class method, same as self.dynamicType.bar()<br>    Self.foo()  // invokes a class method with the same name as the foo instance method<br></p><p>They mean different things and yet are distinguished only by the capitalisation of the letter S. I’m not objecting to a shorthand for self.dynamicType although I don’t agree with the proposal that self.dynamicType “fights against Swift’s goals of concision and clarity”, I only object to one that looks very similar to `self`. <br></p><p><br>&gt; <br>&gt; -- <br>&gt; Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Pitch] Adding a Self type name shortcut for static member access</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>April  7, 2016 at 05:00:00am</p></header><div class="content"><p>&gt; As I understand it, the proposal is that `Self` can be used as an alias to `self.dynamicType`, which is an object in the sense of entity in Swift but not an instance of a class or struct. <br></p><p>You don&#39;t understand it correctly.<br></p><p>Currently, `Self` in a class definition means &quot;whatever subclass this object happens to be&quot;. So if you say this:<br></p><p>	class Parent {<br>		func foo() -&gt; Self<br>	}<br>	class Child: Parent {}<br></p><p>Then on `Child`, the `foo()` function returns `Self`.<br></p><p>`Self` isn&#39;t supported in value types because, since you can&#39;t subclass value types, it always means exactly the same thing as writing the type&#39;s name. `Self` also isn&#39;t supported in the bodies of class members because, when you call members on it, it&#39;s equivalent to `self.dynamicType`. This is actually really strange, though, because it means that you can&#39;t actually write certain types explicitly. For instance:<br></p><p>	class Foo { <br>	    func foo() -&gt; Self { <br>	        let new = self.dynamicType.init()<br>	        // `new` is of type Self, but you can&#39;t actually write `let new: Self`<br>	        return new <br>	    } <br>	    required init() {} <br>	} <br></p><p>What this proposal is saying is:<br></p><p>* `Self` will be allowed in value types. It will always mean the same thing as writing the type&#39;s name explicitly, but that&#39;s okay; it&#39;s more readable.<br>* `Self` will be allowed in member bodies. This will allow you to write that `new` line as:<br></p><p>		let new: Self = Self()<br></p><p>Oh, and `#Self` will also be permitted, which is always literally just a shorthand for whatever type you happen to be in right now.<br></p><p>&gt; My point, though is not the exact semantics of what you call the thing that `Self` is but that having it and `self` in the same code will lead to readability issues because you can have `self` and `Self` in the same code referring to completely different things and they only differ in the case of the first letter.<br></p><p>People seem to be okay with things like `var string: String`; having `self` be of type `Self` is no different.<br></p><p>* * *<br></p><p>Having said all this, now that we have `#Self`, I&#39;m wondering if we still want `Self` in value types. The two are *exactly* equivalent in value types as far as I can tell, and `Self` in classes implies dynamic behavior which is not supported by value types. The use of `Self` in class member bodies is a clean win, the existence of `#Self` is a clean win, but I&#39;m not sure we need the value type thing too.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Pitch] Adding a Self type name shortcut for static member access</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>April  7, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Apr 7, 2016, at 6:17 AM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; Having said all this, now that we have `#Self`, I&#39;m wondering if we still want `Self` in value types. The two are *exactly* equivalent in value types as far as I can tell, and `Self` in classes implies dynamic behavior which is not supported by value types. The use of `Self` in class member bodies is a clean win, the existence of `#Self` is a clean win, but I&#39;m not sure we need the value type thing too.<br></p><p>I prefer the consistency that it be available across types without exception more than I care that the functionality is duplicated. Plus if Swift eventually introduces derived value types, it may play a bigger role.<br></p><p>http://thread.gmane.org/gmane.comp.lang.swift.evolution/12644/ &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/12644/&gt;<br>http://thread.gmane.org/gmane.comp.lang.swift.evolution/10652 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/10652&gt;<br>http://thread.gmane.org/gmane.comp.lang.swift.evolution/153 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/153&gt;<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160407/0776cb0b/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>[Pitch] Adding a Self type name shortcut for static member access</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>April  7, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On 7 Apr 2016, at 14:17, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt; As I understand it, the proposal is that `Self` can be used as an alias to `self.dynamicType`, which is an object in the sense of entity in Swift but not an instance of a class or struct. <br>&gt; <br>&gt; You don&#39;t understand it correctly.<br></p><p>Having read your email, I’m pretty sure I do, and my problem with it remains.<br></p><p>&gt; <br>&gt; <br>&gt; `Self` isn&#39;t supported in value types because, since you can&#39;t subclass value types, it always means exactly the same thing as writing the type&#39;s name. `Self` also isn&#39;t supported in the bodies of class members because, when you call members on it, it&#39;s equivalent to `self.dynamicType`. This is actually really strange, though, because it means that you can&#39;t actually write certain types explicitly. For instance:<br>&gt; <br>&gt; 	class Foo { <br>&gt; 	    func foo() -&gt; Self { <br>&gt; 	        let new = self.dynamicType.init()<br>&gt; 	        // `new` is of type Self, but you can&#39;t actually write `let new: Self`<br>&gt; 	        return new <br>&gt; 	    } <br>&gt; 	    required init() {} <br>&gt; 	} <br></p><p><br>It’s not _really_ strange. The type of new cannot be known at compile time, only that it is some subclass of Foo (or Foo itself of course).<br></p><p>&gt; <br>&gt; What this proposal is saying is:<br>&gt; <br>&gt; * `Self` will be allowed in value types. It will always mean the same thing as writing the type&#39;s name explicitly, but that&#39;s okay; it&#39;s more readable.<br></p><p>Is it more readable? Has anybody done any objective testing?<br></p><p>&gt; * `Self` will be allowed in member bodies. This will allow you to write that `new` line as:<br>&gt; <br>&gt; 		let new: Self = Self()<br></p><p>And that is certainly not more readable than the line it replaces. The line it replaces tells me explicitly that I am creating a new object of the same type as self. This does not. The casual reader might easily assume that you will get an object of type Foo. <br></p><p><br>&gt; <br>&gt; People seem to be okay with things like `var string: String`; having `self` be of type `Self` is no different.<br></p><p>I’m not wild about that either (especially as my autocomplete seems to go for the type before the variable every time) and if you used a variable called `string` in the same context as a lot of static methods on `String` it would suffer from the same problem that I am concerned about wrt readability.<br></p><p><br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
