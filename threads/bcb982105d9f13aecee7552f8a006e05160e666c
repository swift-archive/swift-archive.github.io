<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>[Proposal] Add keyword &quot;by&quot; as syntactic sugar to streamline For-In-loop</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>April 14, 2016 at 01:00:00am</p></header><div class="content"><p>Hi Vladimir,<br></p><p>In the past weeks, I wrote extensively on swift-evolution <br>about an alternative for the classical for-loop. <br>So extensively that it irritated the ”Collectians” <br>who (indirectly) classified me and some similar others<br>as “Forloopians” and also “Traditionalists”… <br>I consider this as a great honor. :o)<br></p><p>Anyway, among other alternatives, I wrote this on April 5th.2016:<br></p><p>&gt; So, to me the best option is still to bring the for ;; back<br>&gt; or to make a new Swift equivalent for it as described here again.<br>&gt; <br>&gt; for d from 10.0 to 5.0 by -0.1 tolerance 0.01  //tolerance is optional<br>&gt; {<br>&gt;     print(d)<br>&gt; }<br></p><p><br>     for v from v1 to v2 by vstep       // it can’t be any simpler than this. <br></p><p>Of course, working with ALL existing numerical types, Int, Float, Double.. <br>( Btw. me wishing: consolidate all floating point types into just one type, preferably Double!)<br></p><p>Apart from the “tolerance”  option, which I intended for float boundaries in for-loops, <br>this is not my really original idea, because the traditional for-loop exist<br>more or less like this in most program languages for decades. <br></p><p>What do you think about my suggested for-loop?<br></p><p><br>I don’t like this variant at all:<br></p><p>&gt; for i in (1...10).striding(by: 3) {..}<br>&gt; for i in (1...10).striding(by: -3) {..}<br></p><p>It is downright ugly, cumbersome to write, <br>hard to read and also functionally very limited:     ** <br>- ranges like (10…-5)  are not allowed<br>- ranges / for..in..  with other numerical types like Float and Double are not possible!<br>- I am still doubtful about optimization: <br>         the compiler always has to look what is behind the “in”<br></p><p>Ergo: There is still no good alternative for the classical for ;;  that was in Swift.<br></p><p>One has to use “while {...}” loops. <br>which means specifying an iteration in 3 lines more and a bigger change<br>for errors. <br></p><p> <br>&gt; But.. compare how the next is more clear and nice looking, has less noise, <br>&gt; how faster this will be typed.. :<br>&gt; <br>&gt; for i in 1...10 by 3 {...}<br>&gt; for i in 1...10 by -3 {…}<br></p><p>This looks better, indeed,<br>but still has the same severe limitations **<br></p><p><br>&gt; My opinion: this .striding is about Range type. Range type is used in many <br>&gt; places, not just in for-in loop. It is important to have handy and clear <br>&gt; methods for Range. But. If we are talking about loop - why(why?) can&#39;t we <br>&gt; have such a great syntax for such a common loop task? <br>That is my honest opinion too.<br></p><p> The only ambition of the for-loop I presented is for it <br> to be a convenience construct for the “while” loop  <br>which it has always been. it is actually the sole<br>reason why it was invented in the first place.<br></p><p>There is nothing to be ashamed of to bring back <br>the for ;; . I am very serious here.<br></p><p>It is (was) one of the most powerful control statements in Swift!<br></p><p>IMHO it amazes me that people go through so much <br>unnecessary effort in an attempt to replace / circumvent<br>a nearly perfect iteration statement. <br></p><p>But I wrote about all this already too many times.<br></p><p>Please note that I do also see many good things and developments in Swift!<br></p><p>met vriendelijke groeten<br></p><p>TedvG <br></p><p><br></p><p><br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160414/bcb9666c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Proposal] Add keyword &quot;by&quot; as syntactic sugar to streamline For-In-loop</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 18, 2016 at 06:00:00pm</p></header><div class="content"><p>Right now it seems for me that for-in + &quot;step&quot; is the best solution that <br>provides what we need with minimal changes :<br></p><p>for i in 0..&lt;10 step 2 {<br>}<br></p><p>for i in 0..&lt;10 step -2 {<br>}<br></p><p>for i in 0.1..&lt;10.5 step 0.5 {<br>}<br></p><p>(&quot;step&quot; is optional)<br></p><p>i.e. like current for-in loop, but with additional features.<br></p><p><br>On 14.04.2016 2:46, Ted F.A. van Gaalen wrote:<br>&gt; Hi Vladimir,<br>&gt;<br>&gt; In the past weeks, I wrote extensively on swift-evolution<br>&gt; about an alternative for the classical for-loop.<br>&gt; So extensively that it irritated the ”Collectians”<br>&gt; who (indirectly) classified me and some similar others<br>&gt; as “Forloopians” and also “Traditionalists”…<br>&gt; I consider this as a great honor. :o)<br>&gt;<br>&gt; Anyway, among other alternatives, I wrote this on April 5th.2016:<br>&gt;<br>&gt;&gt; So, to me the best option is still to bring the for ;; back<br>&gt;&gt; or to make a new Swift equivalent for it as described here again.<br>&gt;&gt;<br>&gt;&gt; for d from 10.0 to 5.0 by -0.1 tolerance 0.01  //tolerance is optional<br>&gt;&gt; {<br>&gt;&gt;     print(d)<br>&gt;&gt; }<br>&gt;<br>&gt;<br>&gt;      for v from v1 to v2 by vstep       // it can’t be any simpler than this.<br>&gt;<br>&gt; Of course, working with ALL existing numerical types, Int, Float, Double..<br>&gt; ( Btw. me wishing: consolidate all floating point types into just one type,<br>&gt; preferably Double!)<br>&gt;<br>&gt; Apart from the “tolerance”  option, which I intended for float boundaries<br>&gt; in for-loops,<br>&gt; this is not my really original idea, because the traditional for-loop exist<br>&gt; more or less like this in most program languages for decades.<br>&gt;<br>&gt; What do you think about my suggested for-loop?<br>&gt;<br>&gt;<br>&gt; I don’t like this variant at all:<br>&gt;<br>&gt;&gt; for i in (1...10).striding(by: 3) {..}<br>&gt;&gt; for i in (1...10).striding(by: -3) {..}<br>&gt;<br>&gt; It is downright ugly, cumbersome to write,<br>&gt; hard to read and also functionally very limited:     **<br>&gt; - ranges like (10…-5)  are not allowed<br>&gt; - ranges / for..in..  with other numerical types like Float and Double are<br>&gt; not possible!<br>&gt; - I am still doubtful about optimization:<br>&gt;          the compiler always has to look what is behind the “in”<br>&gt;<br>&gt; Ergo: There is still no good alternative for the classical for ;;  that was<br>&gt; in Swift.<br>&gt;<br>&gt; One has to use “while {...}” loops.<br>&gt; which means specifying an iteration in 3 lines more and a bigger change<br>&gt; for errors.<br>&gt;<br>&gt;<br>&gt;&gt; But.. compare how the next is more clear and nice looking, has less noise,<br>&gt;&gt; how faster this will be typed.. :<br>&gt;&gt;<br>&gt;&gt; for i in 1...10 by 3 {...}<br>&gt;&gt; for i in 1...10 by -3 {…}<br>&gt;<br>&gt; This looks better, indeed,<br>&gt; but still has the same severe limitations **<br>&gt;<br>&gt;<br>&gt;&gt; My opinion: this .striding is about Range type. Range type is used in many<br>&gt;&gt; places, not just in for-in loop. It is important to have handy and clear<br>&gt;&gt; methods for Range. But. If we are talking about loop - why(why?) can&#39;t we<br>&gt;&gt; have such a great syntax for such a common loop task?<br>&gt; That is my honest opinion too.<br>&gt;<br>&gt;  The only ambition of the for-loop I presented is for it<br>&gt;  to be a convenience construct for the “while” loop<br>&gt; which it has always been. it is actually the sole<br>&gt; reason why it was invented in the first place.<br>&gt;<br>&gt; There is nothing to be ashamed of to bring back<br>&gt; the for ;; . I am very serious here.<br>&gt;<br>&gt; It is (was) one of the most powerful control statements in Swift!<br>&gt;<br>&gt; IMHO it amazes me that people go through so much<br>&gt; unnecessary effort in an attempt to replace / circumvent<br>&gt; a nearly perfect iteration statement.<br>&gt;<br>&gt; But I wrote about all this already too many times.<br>&gt;<br>&gt; Please note that I do also see many good things and developments in Swift!<br>&gt;<br>&gt; met vriendelijke groeten<br>&gt;<br>&gt; TedvG<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
