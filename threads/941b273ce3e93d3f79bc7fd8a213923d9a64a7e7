<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/598291df85040af12230b35f82a2632d?s=50"></div><header><strong>Catching NSException</strong> from <string>Jon Brooks</string> &lt;jbrooks512 at gmail.com&gt;<p>March 24, 2016 at 11:00:00am</p></header><div class="content"><p>Apologies if this has come up before - I&#39;ve fallen behind in following this<br>list.<br></p><p>I recently ran into an issue where I needed to be able to catch<br>NSExceptions raised by Objective C API in Swift, and found no good way to<br>do that.  Currently the only possible way is to via Objective C code that<br>wraps the call in an Objective C style @try/@catch block.  If building a<br>swift framework, this means a separate module, since we can&#39;t use bridging<br>headers.<br></p><p>My quick attempt at a workaround can be seen here:<br>https://github.com/jonbrooks/ObjCTryCatch and there are other workarounds<br>out there too.  I wondered if there has been any discussion to building<br>something like this into swift directly.  I don&#39;t really have any good<br>ideas, but maybe something like<br></p><p>    do {<br>        objc_try someObjectiveCInstance.methodThatMightRaiseException()<br>    } catch {<br>        //error would be an ErrorType that contains info about the<br>exception raised, or the exception itself?<br>    }<br></p><p>Any thoughts?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160324/941ba7e7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Catching NSException</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>March 24, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Mar 24, 2016, at 11:06 AM, Jon Brooks via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Apologies if this has come up before - I&#39;ve fallen behind in following this list.<br>&gt; <br>&gt; I recently ran into an issue where I needed to be able to catch NSExceptions raised by Objective C API in Swift, and found no good way to do that.  Currently the only possible way is to via Objective C code that wraps the call in an Objective C style @try/@catch block.  If building a swift framework, this means a separate module, since we can&#39;t use bridging headers.<br>&gt; <br>&gt; My quick attempt at a workaround can be seen here: https://github.com/jonbrooks/ObjCTryCatch &lt;https://github.com/jonbrooks/ObjCTryCatch&gt; and there are other workarounds out there too.  I wondered if there has been any discussion to building something like this into swift directly.  I don&#39;t really have any good ideas, but maybe something like<br>&gt;     <br>&gt;     do {<br>&gt;         objc_try someObjectiveCInstance.methodThatMightRaiseException()<br>&gt;     } catch {<br>&gt;         //error would be an ErrorType that contains info about the exception raised, or the exception itself?<br>&gt;     }<br>&gt; <br>&gt; Any thoughts?<br></p><p>Catching ObjC exceptions is problematic, since Cocoa generally only uses exceptions for unrecoverable programmer error situations, and most ObjC code does not attempt to clean up resources or maintain invariants in response to exceptions unwinding through it. Generally the best answer is restructure your code not to cause the exception to be thrown in the first place. There are unfortunately some APIs for which that&#39;s not possible, but if you must handle ObjC exceptions, I&#39;d recommend doing so from ObjC code rather than from Swift.<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160324/332bc223/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dd033b3ed46d65c7d7394eab52d53e6b?s=50"></div><header><strong>Catching NSException</strong> from <string>Evan Maloney</string> &lt;emaloney at gilt.com&gt;<p>April  1, 2016 at 03:00:00pm</p></header><div class="content"><p>Hi Jon,<br></p><p>I ran into a similar situation and needed a way to not only catch NSExceptions from Swift, but throw them as well. If it would he useful to you, it&#39;s part of the open-source CleanroomBridging module, which is intended to ease a few Swift/ObjC interoperability issues. The header file for the exception-related code is here:<br></p><p>https://github.com/emaloney/CleanroomBridging/blob/master/Sources/Exception.h &lt;https://github.com/emaloney/CleanroomBridging/blob/master/Sources/Exception.h&gt;<br></p><p>It is included in the module&#39;s bridging header, so you can use it from Swift.<br></p><p>Evan<br></p><p><br></p><p><br>&gt; On Mar 24, 2016, at 2:06 PM, Jon Brooks via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Apologies if this has come up before - I&#39;ve fallen behind in following this list.<br>&gt; <br>&gt; I recently ran into an issue where I needed to be able to catch NSExceptions raised by Objective C API in Swift, and found no good way to do that.  Currently the only possible way is to via Objective C code that wraps the call in an Objective C style @try/@catch block.  If building a swift framework, this means a separate module, since we can&#39;t use bridging headers.<br>&gt; <br>&gt; My quick attempt at a workaround can be seen here: https://github.com/jonbrooks/ObjCTryCatch &lt;https://github.com/jonbrooks/ObjCTryCatch&gt; and there are other workarounds out there too.  I wondered if there has been any discussion to building something like this into swift directly.  I don&#39;t really have any good ideas, but maybe something like<br>&gt;     <br>&gt;     do {<br>&gt;         objc_try someObjectiveCInstance.methodThatMightRaiseException()<br>&gt;     } catch {<br>&gt;         //error would be an ErrorType that contains info about the exception raised, or the exception itself?<br>&gt;     }<br>&gt; <br>&gt; Any thoughts?<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160401/a0b109c3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>Catching NSException</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>April  1, 2016 at 09:00:00pm</p></header><div class="content"><p>Thank you!!!<br></p><p>[[iOS messageWithData:ideas] broadcast]<br></p><p>&gt; On 1 Apr 2016, at 20:04, Evan Maloney via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Jon,<br>&gt; <br>&gt; I ran into a similar situation and needed a way to not only catch NSExceptions from Swift, but throw them as well. If it would he useful to you, it&#39;s part of the open-source CleanroomBridging module, which is intended to ease a few Swift/ObjC interoperability issues. The header file for the exception-related code is here:<br>&gt; <br>&gt; https://github.com/emaloney/CleanroomBridging/blob/master/Sources/Exception.h<br>&gt; <br>&gt; It is included in the module&#39;s bridging header, so you can use it from Swift.<br>&gt; <br>&gt; Evan<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Mar 24, 2016, at 2:06 PM, Jon Brooks via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Apologies if this has come up before - I&#39;ve fallen behind in following this list.<br>&gt;&gt; <br>&gt;&gt; I recently ran into an issue where I needed to be able to catch NSExceptions raised by Objective C API in Swift, and found no good way to do that.  Currently the only possible way is to via Objective C code that wraps the call in an Objective C style @try/@catch block.  If building a swift framework, this means a separate module, since we can&#39;t use bridging headers.<br>&gt;&gt; <br>&gt;&gt; My quick attempt at a workaround can be seen here: https://github.com/jonbrooks/ObjCTryCatch and there are other workarounds out there too.  I wondered if there has been any discussion to building something like this into swift directly.  I don&#39;t really have any good ideas, but maybe something like<br>&gt;&gt;     <br>&gt;&gt;     do {<br>&gt;&gt;         objc_try someObjectiveCInstance.methodThatMightRaiseException()<br>&gt;&gt;     } catch {<br>&gt;&gt;         //error would be an ErrorType that contains info about the exception raised, or the exception itself?<br>&gt;&gt;     }<br>&gt;&gt; <br>&gt;&gt; Any thoughts?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160401/945a55df/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
