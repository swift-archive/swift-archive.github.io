<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>June  9, 2016 at 02:00:00am</p></header><div class="content"><p>It’s funny that you use this example as an argument against this proposal, because what led me to propose the `while` clause in the first place was a very similar incident (but instead of using `where` expecting it to terminate early, I tried to use a `while` clause, not immediately realising this can’t currently be done).<br></p><p>&gt; I support your position on the use of where and while/when being confusing in the loop statement. I (and I know others) have for example used where in a loop statement mistakenly thinking it would terminate the loop early but of course learned that it basically filters what causes the loop body to be executed. After the fact that made sense to me but it didn&#39;t click at first.<br>&gt; <br>&gt; If you separate the loop statement (what you are looping over) from the filter (continue) conditions and/or termination conditions (break, guard) I also feel it can be clearer to eyeball quickly. Additionally it lends itself to being debugged in a line based debugger.<br>&gt; <br>&gt; -Shawn<br>&gt; On Wed, Jun 8, 2016 at 9:11 AM Xiaodi Wu via swift-evolution&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)&gt;wrote:<br>&gt; &gt; On Wed, Jun 8, 2016 at 3:38 AM, Haravikk&lt;swift-evolution at haravikk.me(mailto:swift-evolution at haravikk.me)&gt;wrote:<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; On 8 Jun 2016, at 01:54, Xiaodi Wu via swift-evolution&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)&gt;wrote:<br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; 1) It is spelled out exactly what happens when a condition is met. I no longer have to remember whether the word that describes breaking from a loop uses a place analogy (&quot;where&quot;) or a time analogy (&quot;while&quot; or &quot;when”).<br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; (You cannot convince me that these words are intuitive when the meaning of &quot;where&quot; changes by context in today&#39;s Swift. Now, if you want to propose that these be named &quot;breakif&quot; and &quot;continueif&quot; instead, then I&#39;d agree with you that they&#39;re intuitive names, but then they&#39;d also be really ugly.)<br>&gt; &gt; &gt; I’m not sure I agree that this is confusing,<br>&gt; &gt; <br>&gt; &gt; Why would breaking from a loop intuitively use a place analogy and continuing to the next iteration use a time analogy? This is totally made up; hence, it is not intuitive. I make no argument about whether or not it would be conceptually confusing. If you renamed &#39;break&#39; to &#39;foo&#39; and &#39;continue&#39; to &#39;bar&#39;, it would not be intuitive, but you could likewise argue that it&#39;s not confusing, in that &#39;foo&#39; is clearly not &#39;bar&#39;.<br>&gt; &gt; <br>&gt; &gt; &gt; a little extra to learn for new programmers perhaps but I think it’s fairly intuitive:<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; while let value = foo.next() where someCondition(value) { … }<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; This reads to me as “repeat the following block until this fails to be true”, the conditional binding in this case fails to be true if someCondition(value) isn’t true, so the loop ends. I think the key thing here is that the where clause is for the conditional binding and not the loop itself, so in this respect it behaves exactly like an if or guard statement. Meanwhile:<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; for eachValue in theValues where someCondition(eachValue) { … }<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; Reads as “for everything in theValues do the following if someCondition(eachValue) is also true”, in other words this loop always tries to visit every element of the sequence (a while loop has no implicit awareness of the sequence, it’s really just an if statement that runs over and over). In this case the where clause is part of the loop itself. There may be an argument that where should be renamed on for loops to better distinguish this, but once you consider that there’s no pattern or conditional binding here I think it makes a reasonable amount of sense.<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; Yes this could be handled by an if/guard statement with continue, and while as proposed here could be done with the same plus a break, but these things come up so often that it just makes a lot of sense to get it all neatly onto one line.<br>&gt; &gt; <br>&gt; &gt; As I pointed out above with Tim&#39;s example, putting it all on one line is absolutely not &#39;neat&#39;--it reads like spaghetti. That is one major beef I have with this proposal: that it *encourages* writing on one line too many things that, whether you use `where` or not, are much more clearly written on multiple lines. If writing everything on one line is for you the major advantage of this proposal, we could agree on everything else and I would be very much opposed to this proposal on that basis alone.<br>&gt; &gt; <br>&gt; &gt; &gt; Chaining methods can do this, but it’s actually less readable IMO, or requires multiple lines to keep it clear which defeats the point.<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; <br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; For me, encouraging the use of multiple lines is the point. Tim&#39;s example demonstrated to me very clearly that clarity is not served by additional sugar to reduce the amount of punctuation on one line; it is served only by putting things on multiple lines. As I said above, I would cringe to read a loop that begins `for foo in bar where something while somethingElse where yetAnotherSomething while againAnotherSomething { ... }`.<br>&gt; &gt; <br>&gt; &gt; &gt; As with where on if/guard statements it’s about keeping the simpler, more common cases as clean and readable as possible. If the re-use of the keyword where on the for loop is confusing then that’s an argument for renaming that, rather than rejecting while or ditching the whole thing IMO. Personally I think it’s okay, you just have to think what the where clause is actually acting upon.<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; 3) I have the flexibility to do something between the first if statement and the second if statement, if I want. By placing the break statement at the end of my loop, I could effectively choose to have one more iteration than if I placed it at the beginning of my loop. There is nothing you can do to mimic that choice with your proposed while clause, unless you want to also propose a `for...in...repeat { } while` syntax.<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; So? Like where clauses this is for the simpler cases, if you want to do something more complex you remain free to use more complex conditionals.<br>&gt; &gt; <br>&gt; &gt; And I was/am a proponent of SE-0099 to remove `where` from if and while loops; and if that succeeds I will definitely solicit comments to remove it from for loops!<br>&gt; &gt; <br>&gt; &gt; &gt; A lot of the time you don’t need this however, so it makes sense to simplify the common case while leaving the complex one just as useful as it is today. Nothing about this proposal would stop you from using if/guard conditions inside the loop.<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; 4) This is the perhaps the important point. A beginning programmer--not any of us, presumably, but we were all beginners once--can accomplish everything that he or she desires without learning this new proposed syntax. Almost all texts, I believe, teach if statements before loops, and teach break and continue in the same breath as the loops themselves.<br>&gt; &gt; &gt; In terms of teaching there shouldn’t be a problem with just teaching the basic building blocks first, then showing off simplifications later. As with any coding the most important thing is to get the intended behaviour correct, simplifying or optimising the code can always come later.<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; You could argue the same thing about the shorthands around closures; I’m not sure why but I had trouble with those initially until after I’d worked with them in the more verbose form (with fully named parameters and a return statement) till I started to get the logic behind it, now I can just right a quick closure with the dollar sign shorthand.<br>&gt; &gt; <br>&gt; &gt; Closures are--I&#39;m sure you&#39;d agree--a far more advanced concept than loops. Concepts like closing over a variable are very, very hard. Many useful things can be written without using closures. Not so many things could do without loops. It very much matters that a learner might feel that he or she cannot understand everything about a loop with the handwavy explanation that it&#39;ll &quot;come later&quot;. One critique of using Java as a starting language is that you are forced to teach your students on day one that the real meaning of the words &quot;public static void main(String[] args)&quot; will &quot;come later&quot;.<br>&gt; &gt; <br>&gt; &gt; &gt; <br>&gt; &gt; &gt; A good linter could be written to detect the presence of a simple if/guard right inside the loop and could then suggest the use of where/while as appropriate._______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org(mailto:swift-evolution at swift.org)<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
