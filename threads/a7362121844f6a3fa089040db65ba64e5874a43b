<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/72853d2b57e37aab89afe61af4f74c62?s=50"></div><header><strong>Replacement for NSNumber?</strong> from <string>Maury Markowitz</string> &lt;maury.markowitz at gmail.com&gt;<p>April 11, 2016 at 11:00:00am</p></header><div class="content"><p>I have a primary data structure that is currently defined such:<br></p><p>var data: [String: NSNumber]<br></p><p>This is the only place in my app where I use a Foundation type *as* a Foundation type (as opposed to a bridge), and I would strongly prefer this to be purely Swift types.<br></p><p>I used NSNumber because the original data is variant, a mix of Int and Double - in some instances the first two entries in the dict are Ints, while in others it&#39;s the first four, and others are a mix based on other data points (it&#39;s very annoying). I could use two dictionaries, but this would *greatly* confuse code further into the program.<br></p><p>I know I could use Double and then floor the ints. But I&#39;m wondering if I&#39;m missing some more natural solution? I don&#39;t believe there is a common base type for Int and Double, but perhaps there is another way to solve this?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d92e9730c561c120200f34e7e50ed46?s=50"></div><header><strong>Replacement for NSNumber?</strong> from <string>Jeff Kelley</string> &lt;slaunchaman at gmail.com&gt;<p>April 11, 2016 at 11:00:00am</p></header><div class="content"><p>One possible solution is to create an empty Protocol that both Int and Double conform to, perhaps DataValue, and then create your data structure like this:<br></p><p>var data: [String: DataValue]<br></p><p><br>Jeff Kelley<br></p><p>SlaunchaMan at gmail.com | @SlaunchaMan &lt;https://twitter.com/SlaunchaMan&gt; | jeffkelley.org &lt;http://jeffkelley.org/&gt;<br>&gt; On Apr 11, 2016, at 11:04 AM, Maury Markowitz via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; I have a primary data structure that is currently defined such:<br>&gt; <br>&gt; var data: [String: NSNumber]<br>&gt; <br>&gt; This is the only place in my app where I use a Foundation type *as* a Foundation type (as opposed to a bridge), and I would strongly prefer this to be purely Swift types.<br>&gt; <br>&gt; I used NSNumber because the original data is variant, a mix of Int and Double - in some instances the first two entries in the dict are Ints, while in others it&#39;s the first four, and others are a mix based on other data points (it&#39;s very annoying). I could use two dictionaries, but this would *greatly* confuse code further into the program.<br>&gt; <br>&gt; I know I could use Double and then floor the ints. But I&#39;m wondering if I&#39;m missing some more natural solution? I don&#39;t believe there is a common base type for Int and Double, but perhaps there is another way to solve this?<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160411/cc4971e8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Replacement for NSNumber?</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>April 11, 2016 at 08:00:00am</p></header><div class="content"><p>Or just create an enum with an Int and a Double field. I believe this will be more efficient since the values can be stored inline, whereas indirecting through a protocol will force it to be boxed into a heap object (right?)<br></p><p>—Jens<br></p><p>&gt; On Apr 11, 2016, at 8:06 AM, Jeff Kelley via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; One possible solution is to create an empty Protocol that both Int and Double conform to, perhaps DataValue, and then create your data structure like this:<br>&gt; <br>&gt; var data: [String: DataValue]<br>&gt; <br>&gt; <br>&gt; Jeff Kelley<br>&gt; <br>&gt; SlaunchaMan at gmail.com &lt;mailto:SlaunchaMan at gmail.com&gt; | @SlaunchaMan &lt;https://twitter.com/SlaunchaMan&gt; | jeffkelley.org &lt;http://jeffkelley.org/&gt;<br>&gt;&gt; On Apr 11, 2016, at 11:04 AM, Maury Markowitz via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I have a primary data structure that is currently defined such:<br>&gt;&gt; <br>&gt;&gt; var data: [String: NSNumber]<br>&gt;&gt; <br>&gt;&gt; This is the only place in my app where I use a Foundation type *as* a Foundation type (as opposed to a bridge), and I would strongly prefer this to be purely Swift types.<br>&gt;&gt; <br>&gt;&gt; I used NSNumber because the original data is variant, a mix of Int and Double - in some instances the first two entries in the dict are Ints, while in others it&#39;s the first four, and others are a mix based on other data points (it&#39;s very annoying). I could use two dictionaries, but this would *greatly* confuse code further into the program.<br>&gt;&gt; <br>&gt;&gt; I know I could use Double and then floor the ints. But I&#39;m wondering if I&#39;m missing some more natural solution? I don&#39;t believe there is a common base type for Int and Double, but perhaps there is another way to solve this?<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160411/3beb3f41/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Replacement for NSNumber?</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>April 11, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Apr 11, 2016, at 8:58 AM, Jens Alfke via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Or just create an enum with an Int and a Double field. I believe this will be more efficient since the values can be stored inline, whereas indirecting through a protocol will force it to be boxed into a heap object (right?)<br></p><p>I would recommend an enum as well if Int and Double are literally the only two types you need to care about; it&#39;ll definitely be more efficient. However, a protocol type does have enough inline space to fit both Int and Double without spilling into a heap allocation.<br></p><p>-Joe<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e01e37acbfad671da1b94a61cf819d82?s=50"></div><header><strong>[swift-users] Replacement for NSNumber?</strong> from <string>Kenny Leung</string> &lt;kenny_leung at pobox.com&gt;<p>April 11, 2016 at 08:00:00am</p></header><div class="content"><p>Moving this to swift-evolution.<br></p><p>It’s inconvenient that structs can’t inherit, and so things like Int and Double aren’t known as numbers. Should there be a Number protocol that encompasses all things number-like?<br></p><p>-Kenny<br></p><p><br>&gt; On Apr 11, 2016, at 8:06 AM, Jeff Kelley via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; One possible solution is to create an empty Protocol that both Int and Double conform to, perhaps DataValue, and then create your data structure like this:<br>&gt; <br>&gt; var data: [String: DataValue]<br>&gt; <br>&gt; <br>&gt; Jeff Kelley<br>&gt; <br>&gt; SlaunchaMan at gmail.com | @SlaunchaMan | jeffkelley.org<br>&gt; <br>&gt;&gt; On Apr 11, 2016, at 11:04 AM, Maury Markowitz via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I have a primary data structure that is currently defined such:<br>&gt;&gt; <br>&gt;&gt; var data: [String: NSNumber]<br>&gt;&gt; <br>&gt;&gt; This is the only place in my app where I use a Foundation type *as* a Foundation type (as opposed to a bridge), and I would strongly prefer this to be purely Swift types.<br>&gt;&gt; <br>&gt;&gt; I used NSNumber because the original data is variant, a mix of Int and Double - in some instances the first two entries in the dict are Ints, while in others it&#39;s the first four, and others are a mix based on other data points (it&#39;s very annoying). I could use two dictionaries, but this would *greatly* confuse code further into the program.<br>&gt;&gt; <br>&gt;&gt; I know I could use Double and then floor the ints. But I&#39;m wondering if I&#39;m missing some more natural solution? I don&#39;t believe there is a common base type for Int and Double, but perhaps there is another way to solve this?<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4bb2d8cd29d26d7067e8b62a5e1cbf95?s=50"></div><header><strong>[swift-users] Replacement for NSNumber?</strong> from <string>Joanna Carter</string> &lt;joanna at carterconsulting.org.uk&gt;<p>April 11, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; It’s inconvenient that structs can’t inherit, and so things like Int and Double aren’t known as numbers. Should there be a Number protocol that encompasses all things number-like?<br></p><p>Taje a look at the IntegerType and FloatingPointType<br></p><p>--<br>Joanna Carter<br>Carter Consulting<br></p><p>(de mon iPhone)<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d172fa3c47108d84ee35a68e8d675c1?s=50"></div><header><strong>[swift-users] Replacement for NSNumber?</strong> from <string>Ross O&#39;Brien</string> &lt;narrativium+swift at gmail.com&gt;<p>April 11, 2016 at 05:00:00pm</p></header><div class="content"><p>Your pointing to two mutually exclusive protocols proves the point. If I<br>want to write a generic function for a numerical type which can be added, I<br>can&#39;t just require that the type conforms to IntegerArithmeticType because<br>that excludes all the floating point types. Protocols for various numerical<br>functions, e.g. NumericalArithmeticType, would be handy,<br></p><p>On Mon, Apr 11, 2016 at 4:55 PM, Joanna Carter via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; It’s inconvenient that structs can’t inherit, and so things like Int and<br>&gt; Double aren’t known as numbers. Should there be a Number protocol that<br>&gt; encompasses all things number-like?<br>&gt;<br>&gt; Taje a look at the IntegerType and FloatingPointType<br>&gt;<br>&gt; --<br>&gt; Joanna Carter<br>&gt; Carter Consulting<br>&gt;<br>&gt; (de mon iPhone)<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160411/64812537/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[swift-users] Replacement for NSNumber?</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>April 11, 2016 at 09:00:00am</p></header><div class="content"><p>This comes up often enough that we should probably write it somewhere, but we don&#39;t have this protocol for the simple reason that there are very few algorithms that are correct for both integers and floating-point numbers. Even something as simple as &quot;average&quot; needs to be handled differently.<br></p><p>Jordan<br></p><p><br>&gt; On Apr 11, 2016, at 9:04 , Ross O&#39;Brien via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Your pointing to two mutually exclusive protocols proves the point. If I want to write a generic function for a numerical type which can be added, I can&#39;t just require that the type conforms to IntegerArithmeticType because that excludes all the floating point types. Protocols for various numerical functions, e.g. NumericalArithmeticType, would be handy,<br>&gt; <br>&gt; On Mon, Apr 11, 2016 at 4:55 PM, Joanna Carter via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; &gt; It’s inconvenient that structs can’t inherit, and so things like Int and Double aren’t known as numbers. Should there be a Number protocol that encompasses all things number-like?<br>&gt; <br>&gt; Taje a look at the IntegerType and FloatingPointType<br>&gt; <br>&gt; --<br>&gt; Joanna Carter<br>&gt; Carter Consulting<br>&gt; <br>&gt; (de mon iPhone)<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160411/f809c39e/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
