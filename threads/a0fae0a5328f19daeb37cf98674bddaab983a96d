<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7321934b88ca8da079d7b89926501a9c?s=50"></div><header><strong>Need help with compile times (type inference?)</strong> from <string>David Turnbull</string> &lt;dturnbull at gmail.com&gt;<p>January 22, 2016 at 12:00:00pm</p></header><div class="content"><p>I&#39;m trying to improve compile times in my project. I&#39;ve been using<br>&quot;-Xfrontend -debug-time-function-bodies&quot; to find to sore spots. Here&#39;s<br>something that takes 1300ms to compile:<br></p><p>public func ortho&lt;T:FloatingPointScalarType&gt;<br></p><p>    (left:T, _ right:T, _ bottom:T, _ top:T) -&gt; Matrix4x4&lt;T&gt;<br></p><p>{<br></p><p>    let t0:T = T(0)<br></p><p>    let t1:T = T(1)<br></p><p>    let t2:T = T(2)<br></p><p><br>    let r00:T = t2 / (right - left)<br></p><p>    let r11:T = t2 / (top - bottom)<br></p><p><br>    let r30:T = -(right + left) / (right - left)<br></p><p>    let r31:T = -(top + bottom) / (top - bottom)<br></p><p><br>    return Matrix4x4&lt;T&gt;(<br></p><p>        r00, t0,  t0,  t0,<br></p><p>        t0,  r11, t0,  t0,<br></p><p>        t0,  t0,  -t1, t0,<br></p><p>        r30, r31, t0,  t1<br></p><p>    )<br></p><p>}<br></p><p>I&#39;m not sure what to do from here. My program is unavoidably math heavy.<br>Every new line of code adds about 60ms of compile time. And that&#39;s after I<br>spend time typing in hints and splitting up the arithmetic.<br></p><p>-david  https://github.com/AE9RB/SwiftGL<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160122/a0faa96d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Need help with compile times (type inference?)</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>January 22, 2016 at 02:00:00pm</p></header><div class="content"><p>It doesn&#39;t help with this problem, but I use:<br>  -Xfrontend -solver-memory-threshold -Xfronted &lt;SOME-BIG-NUMBER-BUT-LESS-THAN-THE-DEFAULT&gt;<br>as a way to cause the compiler to give up sooner.<br></p><p>This helps some to identify new troublesome code as it is written, but unfortunately doesn&#39;t really help with speeding up code like you posted.<br></p><p> - Daniel<br></p><p>&gt; On Jan 22, 2016, at 12:25 PM, David Turnbull via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;m trying to improve compile times in my project. I&#39;ve been using &quot;-Xfrontend -debug-time-function-bodies&quot; to find to sore spots. Here&#39;s something that takes 1300ms to compile:<br>&gt; <br>&gt; public func ortho&lt;T:FloatingPointScalarType&gt;<br>&gt;     (left:T, _ right:T, _ bottom:T, _ top:T) -&gt; Matrix4x4&lt;T&gt;<br>&gt; {<br>&gt;     let t0:T = T(0)<br>&gt;     let t1:T = T(1)<br>&gt;     let t2:T = T(2)<br>&gt; <br>&gt;     let r00:T = t2 / (right - left)<br>&gt;     let r11:T = t2 / (top - bottom)<br>&gt; <br>&gt;     let r30:T = -(right + left) / (right - left)<br>&gt;     let r31:T = -(top + bottom) / (top - bottom)<br>&gt; <br>&gt;     return Matrix4x4&lt;T&gt;(<br>&gt;         r00, t0,  t0,  t0,<br>&gt;         t0,  r11, t0,  t0,<br>&gt;         t0,  t0,  -t1, t0,<br>&gt;         r30, r31, t0,  t1<br>&gt;     )<br>&gt; }<br>&gt; <br>&gt; I&#39;m not sure what to do from here. My program is unavoidably math heavy. Every new line of code adds about 60ms of compile time. And that&#39;s after I spend time typing in hints and splitting up the arithmetic.<br>&gt; <br>&gt; -david  https://github.com/AE9RB/SwiftGL &lt;https://github.com/AE9RB/SwiftGL&gt;_______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160122/3a67762b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7321934b88ca8da079d7b89926501a9c?s=50"></div><header><strong>Need help with compile times (type inference?)</strong> from <string>David Turnbull</string> &lt;dturnbull at gmail.com&gt;<p>January 23, 2016 at 03:00:00pm</p></header><div class="content"><p>I get the impression that there&#39;s no immediate solution. Will Swift 3.0<br>improve build times?<br></p><p>-david<br></p><p>On Fri, Jan 22, 2016 at 2:23 PM, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt;<br>wrote:<br></p><p>&gt; It doesn&#39;t help with this problem, but I use:<br>&gt;   -Xfrontend -solver-memory-threshold -Xfronted<br>&gt; &lt;SOME-BIG-NUMBER-BUT-LESS-THAN-THE-DEFAULT&gt;<br>&gt; as a way to cause the compiler to give up sooner.<br>&gt;<br>&gt; This helps some to identify new troublesome code as it is written, but<br>&gt; unfortunately doesn&#39;t really help with speeding up code like you posted.<br>&gt;<br>&gt;  - Daniel<br>&gt;<br>&gt; On Jan 22, 2016, at 12:25 PM, David Turnbull via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; I&#39;m trying to improve compile times in my project. I&#39;ve been using<br>&gt; &quot;-Xfrontend -debug-time-function-bodies&quot; to find to sore spots. Here&#39;s<br>&gt; something that takes 1300ms to compile:<br>&gt;<br>&gt; public func ortho&lt;T:FloatingPointScalarType&gt;<br>&gt;     (left:T, _ right:T, _ bottom:T, _ top:T) -&gt; Matrix4x4&lt;T&gt;<br>&gt; {<br>&gt;     let t0:T = T(0)<br>&gt;     let t1:T = T(1)<br>&gt;     let t2:T = T(2)<br>&gt;<br>&gt;     let r00:T = t2 / (right - left)<br>&gt;     let r11:T = t2 / (top - bottom)<br>&gt;<br>&gt;     let r30:T = -(right + left) / (right - left)<br>&gt;     let r31:T = -(top + bottom) / (top - bottom)<br>&gt;<br>&gt;     return Matrix4x4&lt;T&gt;(<br>&gt;         r00, t0,  t0,  t0,<br>&gt;         t0,  r11, t0,  t0,<br>&gt;         t0,  t0,  -t1, t0,<br>&gt;         r30, r31, t0,  t1<br>&gt;     )<br>&gt; }<br>&gt;<br>&gt; I&#39;m not sure what to do from here. My program is unavoidably math heavy.<br>&gt; Every new line of code adds about 60ms of compile time. And that&#39;s after I<br>&gt; spend time typing in hints and splitting up the arithmetic.<br>&gt;<br>&gt; -david  https://github.com/AE9RB/SwiftGL<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160123/5455792f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Need help with compile times (type inference?)</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>January 23, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Jan 23, 2016, at 3:56 PM, David Turnbull via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; I get the impression that there&#39;s no immediate solution. Will Swift 3.0 improve build times?<br></p><p>We hope so. Joe Pamer just landed some improvements into the master branch that should improve a lot of common cases, and I believe more improvements are on the way. In the meantime, Bryan Irace recently wrote an article that might help, about using some of the compiler&#39;s internal debugging flags to find and improve problem points: http://irace.me/swift-profiling/<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Need help with compile times (type inference?)</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>January 23, 2016 at 08:00:00pm</p></header><div class="content"><p>It occurs to me that we should just get SwiftPM to have a feature to aggregate and report that data automatically:<br>  https://bugs.swift.org/browse/SR-608<br></p><p>This would be a decent package manager starter bug, I&#39;m guessing it isn&#39;t all that much work.<br></p><p> - Daniel<br></p><p>&gt; On Jan 23, 2016, at 4:03 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 23, 2016, at 3:56 PM, David Turnbull via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I get the impression that there&#39;s no immediate solution. Will Swift 3.0 improve build times?<br>&gt; <br>&gt; We hope so. Joe Pamer just landed some improvements into the master branch that should improve a lot of common cases, and I believe more improvements are on the way. In the meantime, Bryan Irace recently wrote an article that might help, about using some of the compiler&#39;s internal debugging flags to find and improve problem points: http://irace.me/swift-profiling/<br>&gt; <br>&gt; -Joe<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Need help with compile times (type inference?)</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>January 25, 2016 at 11:00:00am</p></header><div class="content"><p>I commented in the bug, but I&#39;ll reply here too: this was a debugging tool added for us, and isn&#39;t really ready for the average Swift user. In particular:<br></p><p>- It does a pretty lousy job of identifying functions without names<br>- It doesn&#39;t include type-checking of expressions not in function bodies, like initial values for properties<br>- It only has a (very basic, unsorted) human-readable output form, instead of something properly tabular<br>- It can only dump to stderr<br>- It&#39;s only function-granular, not statement-granular<br>- It only includes statement/expression type-checking (though admittedly that&#39;s the part of the compiler most likely to have runaway growth)<br>- It doesn&#39;t provide any guidance on how to make things better<br></p><p>I&#39;d rather not commit to providing this feature &quot;publicly&quot; until these problems are at least addressed, if not fixed.<br></p><p>(I&#39;m fine with letting people know about the debug option. I just don&#39;t want to consider it an official, supported feature of Swift.)<br></p><p>Jordan<br></p><p><br>&gt; On Jan 23, 2016, at 20:21, Daniel Dunbar via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; It occurs to me that we should just get SwiftPM to have a feature to aggregate and report that data automatically:<br>&gt;  https://bugs.swift.org/browse/SR-608<br>&gt; <br>&gt; This would be a decent package manager starter bug, I&#39;m guessing it isn&#39;t all that much work.<br>&gt; <br>&gt; - Daniel<br>&gt; <br>&gt;&gt; On Jan 23, 2016, at 4:03 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 23, 2016, at 3:56 PM, David Turnbull via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I get the impression that there&#39;s no immediate solution. Will Swift 3.0 improve build times?<br>&gt;&gt; <br>&gt;&gt; We hope so. Joe Pamer just landed some improvements into the master branch that should improve a lot of common cases, and I believe more improvements are on the way. In the meantime, Bryan Irace recently wrote an article that might help, about using some of the compiler&#39;s internal debugging flags to find and improve problem points: http://irace.me/swift-profiling/<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160125/210ded5a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Need help with compile times (type inference?)</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>January 25, 2016 at 02:00:00pm</p></header><div class="content"><p>Understood. I had presumed designing a proper interface for Swift to provide that information out as a part of the higher level feature (although I guess I didn&#39;t make that clear in the bug).<br></p><p> - Daniel<br></p><p>&gt; On Jan 25, 2016, at 11:41 AM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; I commented in the bug, but I&#39;ll reply here too: this was a debugging tool added for us, and isn&#39;t really ready for the average Swift user. In particular:<br>&gt; <br>&gt; - It does a pretty lousy job of identifying functions without names<br>&gt; - It doesn&#39;t include type-checking of expressions not in function bodies, like initial values for properties<br>&gt; - It only has a (very basic, unsorted) human-readable output form, instead of something properly tabular<br>&gt; - It can only dump to stderr<br>&gt; - It&#39;s only function-granular, not statement-granular<br>&gt; - It only includes statement/expression type-checking (though admittedly that&#39;s the part of the compiler most likely to have runaway growth)<br>&gt; - It doesn&#39;t provide any guidance on how to make things better<br>&gt; <br>&gt; I&#39;d rather not commit to providing this feature &quot;publicly&quot; until these problems are at least addressed, if not fixed.<br>&gt; <br>&gt; (I&#39;m fine with letting people know about the debug option. I just don&#39;t want to consider it an official, supported feature of Swift.)<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 23, 2016, at 20:21, Daniel Dunbar via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; It occurs to me that we should just get SwiftPM to have a feature to aggregate and report that data automatically:<br>&gt;&gt;  https://bugs.swift.org/browse/SR-608 &lt;https://bugs.swift.org/browse/SR-608&gt;<br>&gt;&gt; <br>&gt;&gt; This would be a decent package manager starter bug, I&#39;m guessing it isn&#39;t all that much work.<br>&gt;&gt; <br>&gt;&gt; - Daniel<br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 23, 2016, at 4:03 PM, Joe Groff &lt;jgroff at apple.com &lt;mailto:jgroff at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 23, 2016, at 3:56 PM, David Turnbull via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I get the impression that there&#39;s no immediate solution. Will Swift 3.0 improve build times?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We hope so. Joe Pamer just landed some improvements into the master branch that should improve a lot of common cases, and I believe more improvements are on the way. In the meantime, Bryan Irace recently wrote an article that might help, about using some of the compiler&#39;s internal debugging flags to find and improve problem points: http://irace.me/swift-profiling/ &lt;http://irace.me/swift-profiling/&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160125/1b16d0ca/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7321934b88ca8da079d7b89926501a9c?s=50"></div><header><strong>Need help with compile times (type inference?)</strong> from <string>David Turnbull</string> &lt;dturnbull at gmail.com&gt;<p>January 23, 2016 at 09:00:00pm</p></header><div class="content"><p>I&#39;ve exhausted the method described in that Irace post. He seemed happy<br>with a 60% improvement. I&#39;m seeing build times 10000% slower than C++. Like<br>5 minutes vs 3 seconds.<br></p><p>-david<br></p><p>On Sat, Jan 23, 2016 at 4:03 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Jan 23, 2016, at 3:56 PM, David Turnbull via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; I get the impression that there&#39;s no immediate solution. Will Swift 3.0<br>&gt; improve build times?<br>&gt;<br>&gt; We hope so. Joe Pamer just landed some improvements into the master branch<br>&gt; that should improve a lot of common cases, and I believe more improvements<br>&gt; are on the way. In the meantime, Bryan Irace recently wrote an article that<br>&gt; might help, about using some of the compiler&#39;s internal debugging flags to<br>&gt; find and improve problem points: http://irace.me/swift-profiling/<br>&gt;<br>&gt; -Joe<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160123/ab9e7266/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Need help with compile times (type inference?)</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>January 24, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Jan 23, 2016, at 9:34 PM, David Turnbull via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;ve exhausted the method described in that Irace post. He seemed happy with a 60% improvement. I&#39;m seeing build times 10000% slower than C++. Like 5 minutes vs 3 seconds.<br></p><p>Are you willing/able to share the code for your project?  That definitely sounds strange,<br></p><p>-Chris<br></p><p>&gt; <br>&gt; -david<br>&gt; <br>&gt; On Sat, Jan 23, 2016 at 4:03 PM, Joe Groff &lt;jgroff at apple.com &lt;mailto:jgroff at apple.com&gt;&gt; wrote:<br>&gt; <br>&gt; &gt; On Jan 23, 2016, at 3:56 PM, David Turnbull via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; I get the impression that there&#39;s no immediate solution. Will Swift 3.0 improve build times?<br>&gt; <br>&gt; We hope so. Joe Pamer just landed some improvements into the master branch that should improve a lot of common cases, and I believe more improvements are on the way. In the meantime, Bryan Irace recently wrote an article that might help, about using some of the compiler&#39;s internal debugging flags to find and improve problem points: http://irace.me/swift-profiling/ &lt;http://irace.me/swift-profiling/&gt;<br>&gt; <br>&gt; -Joe<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160124/bdde57fc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7321934b88ca8da079d7b89926501a9c?s=50"></div><header><strong>Need help with compile times (type inference?)</strong> from <string>David Turnbull</string> &lt;dturnbull at gmail.com&gt;<p>January 25, 2016 at 12:00:00am</p></header><div class="content"><p>On Sun, Jan 24, 2016 at 9:55 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br></p><p>&gt; Are you willing/able to share the code for your project?  That definitely<br>&gt; sounds strange,<br>&gt;<br></p><p>Soitenly: https://github.com/AE9RB/SwiftGL<br></p><p>The 28,000 lines of loader code are fine. The 6,000 lines of math libraries<br>are the problem.<br></p><p>I&#39;m sure it&#39;s something to do with prototypes and generics. You can change<br>in Types.swift:<br>public protocol FloatingPointScalarType : ScalarType<br>to:<br>public protocol FloatingPointScalarType : ScalarType, FloatingPointType<br>and make the problem a bit worse. This is something I&#39;d actually like to<br>use, except I don&#39;t because a few &quot;where constraints&quot; do what I need<br>without the build slowdown.<br></p><p>Swift 2.1 or 2.2-dev doesn&#39;t make a difference. The C++ compiler I bench<br>against is also llvm. The compiled binaries are truly fast (with WMO). It&#39;s<br>only the development process that&#39;s too slow because of build times.<br></p><p>-David &quot;nyuk nyuk nyuk&quot; Turnbull<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160125/aee0803b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/64e7c3f106cb83b50891f5dcccde198b?s=50"></div><header><strong>Need help with compile times (type inference?)</strong> from <string>Joe Pamer</string> &lt;jpamer at apple.com&gt;<p>January 25, 2016 at 10:00:00am</p></header><div class="content"><p>Thanks for sharing, David!<br></p><p>As JoeG mentions below, I’ve been rolling out a series of major improvements in this area. I’ll take a look at SwiftGL to see what else can be done.<br></p><p>- Joe<br></p><p>&gt; On Jan 25, 2016, at 12:59 AM, David Turnbull via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; On Sun, Jan 24, 2016 at 9:55 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt; Are you willing/able to share the code for your project?  That definitely sounds strange,<br>&gt; <br>&gt; Soitenly: https://github.com/AE9RB/SwiftGL &lt;https://github.com/AE9RB/SwiftGL&gt;<br>&gt; <br>&gt; The 28,000 lines of loader code are fine. The 6,000 lines of math libraries are the problem.<br>&gt; <br>&gt; I&#39;m sure it&#39;s something to do with prototypes and generics. You can change in Types.swift:<br>&gt; public protocol FloatingPointScalarType : ScalarType<br>&gt; to:<br>&gt; public protocol FloatingPointScalarType : ScalarType, FloatingPointType<br>&gt; and make the problem a bit worse. This is something I&#39;d actually like to use, except I don&#39;t because a few &quot;where constraints&quot; do what I need without the build slowdown.<br>&gt; <br>&gt; Swift 2.1 or 2.2-dev doesn&#39;t make a difference. The C++ compiler I bench against is also llvm. The compiled binaries are truly fast (with WMO). It&#39;s only the development process that&#39;s too slow because of build times.<br>&gt; <br>&gt; -David &quot;nyuk nyuk nyuk&quot; Turnbull<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160125/95855d11/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7321934b88ca8da079d7b89926501a9c?s=50"></div><header><strong>Need help with compile times (type inference?)</strong> from <string>David Turnbull</string> &lt;dturnbull at gmail.com&gt;<p>January 26, 2016 at 09:00:00am</p></header><div class="content"><p>Awesome! Any attention is appreciated.<br></p><p>I tried the 3.0-dev snapshot from yesterday. The ortho example is slower<br>than 2.2-dev which is slower than 2.1.<br></p><p>If you get compiler crashes, comment out the any() and all() functions. I<br>opened a bug on this.<br>https://bugs.swift.org/browse/SR-622<br></p><p>If I can help, please let me know.<br></p><p>-david<br></p><p>On Mon, Jan 25, 2016 at 10:49 AM, Joe Pamer &lt;jpamer at apple.com&gt; wrote:<br></p><p>&gt; Thanks for sharing, David!<br>&gt;<br>&gt; As JoeG mentions below, I’ve been rolling out a series of major<br>&gt; improvements in this area. I’ll take a look at SwiftGL to see what else can<br>&gt; be done.<br>&gt;<br>&gt; - Joe<br>&gt;<br>&gt; On Jan 25, 2016, at 12:59 AM, David Turnbull via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; On Sun, Jan 24, 2016 at 9:55 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;<br>&gt;&gt; Are you willing/able to share the code for your project?  That definitely<br>&gt;&gt; sounds strange,<br>&gt;&gt;<br>&gt;<br>&gt; Soitenly: https://github.com/AE9RB/SwiftGL<br>&gt;<br>&gt; The 28,000 lines of loader code are fine. The 6,000 lines of math<br>&gt; libraries are the problem.<br>&gt;<br>&gt; I&#39;m sure it&#39;s something to do with prototypes and generics. You can change<br>&gt; in Types.swift:<br>&gt; public protocol FloatingPointScalarType : ScalarType<br>&gt; to:<br>&gt; public protocol FloatingPointScalarType : ScalarType, FloatingPointType<br>&gt; and make the problem a bit worse. This is something I&#39;d actually like to<br>&gt; use, except I don&#39;t because a few &quot;where constraints&quot; do what I need<br>&gt; without the build slowdown.<br>&gt;<br>&gt; Swift 2.1 or 2.2-dev doesn&#39;t make a difference. The C++ compiler I bench<br>&gt; against is also llvm. The compiled binaries are truly fast (with WMO). It&#39;s<br>&gt; only the development process that&#39;s too slow because of build times.<br>&gt;<br>&gt; -David &quot;nyuk nyuk nyuk&quot; Turnbull<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160126/b00f2823/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/64e7c3f106cb83b50891f5dcccde198b?s=50"></div><header><strong>Need help with compile times (type inference?)</strong> from <string>Joe Pamer</string> &lt;jpamer at apple.com&gt;<p>January 26, 2016 at 01:00:00pm</p></header><div class="content"><p>Ok, thanks, David - I’ll take a look and see what’s going on here.<br></p><p>- Joe<br></p><p>&gt; On Jan 26, 2016, at 9:57 AM, David Turnbull &lt;dturnbull at gmail.com&gt; wrote:<br>&gt; <br>&gt; Awesome! Any attention is appreciated. <br>&gt; <br>&gt; I tried the 3.0-dev snapshot from yesterday. The ortho example is slower than 2.2-dev which is slower than 2.1.<br>&gt; <br>&gt; If you get compiler crashes, comment out the any() and all() functions. I opened a bug on this.<br>&gt; https://bugs.swift.org/browse/SR-622 &lt;https://bugs.swift.org/browse/SR-622&gt;<br>&gt; <br>&gt; If I can help, please let me know.<br>&gt; <br>&gt; -david<br>&gt; <br>&gt; On Mon, Jan 25, 2016 at 10:49 AM, Joe Pamer &lt;jpamer at apple.com &lt;mailto:jpamer at apple.com&gt;&gt; wrote:<br>&gt; Thanks for sharing, David!<br>&gt; <br>&gt; As JoeG mentions below, I’ve been rolling out a series of major improvements in this area. I’ll take a look at SwiftGL to see what else can be done.<br>&gt; <br>&gt; - Joe<br>&gt; <br>&gt;&gt; On Jan 25, 2016, at 12:59 AM, David Turnbull via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Sun, Jan 24, 2016 at 9:55 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt; Are you willing/able to share the code for your project?  That definitely sounds strange,<br>&gt;&gt; <br>&gt;&gt; Soitenly: https://github.com/AE9RB/SwiftGL &lt;https://github.com/AE9RB/SwiftGL&gt;<br>&gt;&gt; <br>&gt;&gt; The 28,000 lines of loader code are fine. The 6,000 lines of math libraries are the problem.<br>&gt;&gt; <br>&gt;&gt; I&#39;m sure it&#39;s something to do with prototypes and generics. You can change in Types.swift:<br>&gt;&gt; public protocol FloatingPointScalarType : ScalarType<br>&gt;&gt; to:<br>&gt;&gt; public protocol FloatingPointScalarType : ScalarType, FloatingPointType<br>&gt;&gt; and make the problem a bit worse. This is something I&#39;d actually like to use, except I don&#39;t because a few &quot;where constraints&quot; do what I need without the build slowdown.<br>&gt;&gt; <br>&gt;&gt; Swift 2.1 or 2.2-dev doesn&#39;t make a difference. The C++ compiler I bench against is also llvm. The compiled binaries are truly fast (with WMO). It&#39;s only the development process that&#39;s too slow because of build times.<br>&gt;&gt; <br>&gt;&gt; -David &quot;nyuk nyuk nyuk&quot; Turnbull<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160126/7f8a140a/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
