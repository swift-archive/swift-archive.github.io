<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Why aren&#39;t source to source transformations part of the Swift language standard?</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>December 29, 2015 at 01:00:00pm</p></header><div class="content"><p>Source to source transformations are part of a developer’s job, don’t need a GUI, and can be done more easily and accurately by the Swift compiler. Moreover, the compiler could be made interactive taking in extra information from the developer as required during the &quot;compile&quot; (again without requiring a GUI).<br></p><p>You could have special directives for source to source transformations such as:<br></p><p>@extractMethodBegin<br>… swift code ...<br>@extractMethodEnd<br></p><p>@indentBegin<br>… swift code ...<br>@indentEnd<br></p><p>@commitCommentFragmentBegin<br>… swift code ...<br>@commitCommentFragmentEnd<br></p><p>etc…<br></p><p>Why encourage reinventing the wheel by pushing source to source transformations to tools of varying quality and completeness?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Why aren&#39;t source to source transformations part of the Swift language standard?</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>December 29, 2015 at 11:00:00am</p></header><div class="content"><p>I would not recommend phrasing these proposals as &quot;Why doesn&#39;t Swift<br>already support X?&quot; when you are proposing a new feature.<br></p><p>Instead, I&#39;d like to see much more fleshed out examples of what you&#39;d<br>propose to change, and how it would help Swift developers. From the small<br>amount of information you&#39;ve given here, I can&#39;t understand what you&#39;re<br>trying to do.<br></p><p>Jacob<br></p><p>On Tue, Dec 29, 2015 at 10:07 AM, Amir Michail via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Source to source transformations are part of a developer’s job, don’t need<br>&gt; a GUI, and can be done more easily and accurately by the Swift compiler.<br>&gt; Moreover, the compiler could be made interactive taking in extra<br>&gt; information from the developer as required during the &quot;compile&quot; (again<br>&gt; without requiring a GUI).<br>&gt;<br>&gt; You could have special directives for source to source transformations<br>&gt; such as:<br>&gt;<br>&gt; @extractMethodBegin<br>&gt; … swift code ...<br>&gt; @extractMethodEnd<br>&gt;<br>&gt; @indentBegin<br>&gt; … swift code ...<br>&gt; @indentEnd<br>&gt;<br>&gt; @commitCommentFragmentBegin<br>&gt; … swift code ...<br>&gt; @commitCommentFragmentEnd<br>&gt;<br>&gt; etc…<br>&gt;<br>&gt; Why encourage reinventing the wheel by pushing source to source<br>&gt; transformations to tools of varying quality and completeness?<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151229/7847d651/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Why aren&#39;t source to source transformations part of the Swift language standard?</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>December 29, 2015 at 02:00:00pm</p></header><div class="content"><p>&gt; On Dec 29, 2015, at 2:34 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt; I would not recommend phrasing these proposals as &quot;Why doesn&#39;t Swift already support X?&quot; when you are proposing a new feature.<br>&gt; <br>&gt; Instead, I&#39;d like to see much more fleshed out examples of what you&#39;d propose to change, and how it would help Swift developers. From the small amount of information you&#39;ve given here, I can&#39;t understand what you&#39;re trying to do.<br></p><p>Xcode is not open source and it is unlikely that Swift source to source transformations that will be part of Xcode in the future  (e.g., extract method) will be open source.<br></p><p>What I propose would be a way to embed source to source transformations into Swift using directives in the language. As the language is open source, so will be the transformations.<br></p><p>Note also that the compiler already has the information required for source to source transformations and so it makes sense to embed these transformations in the compiler itself.<br></p><p>&gt; <br>&gt; Jacob<br>&gt; <br>&gt; On Tue, Dec 29, 2015 at 10:07 AM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Source to source transformations are part of a developer’s job, don’t need a GUI, and can be done more easily and accurately by the Swift compiler. Moreover, the compiler could be made interactive taking in extra information from the developer as required during the &quot;compile&quot; (again without requiring a GUI).<br>&gt; <br>&gt; You could have special directives for source to source transformations such as:<br>&gt; <br>&gt; @extractMethodBegin<br>&gt; … swift code ...<br>&gt; @extractMethodEnd<br>&gt; <br>&gt; @indentBegin<br>&gt; … swift code ...<br>&gt; @indentEnd<br>&gt; <br>&gt; @commitCommentFragmentBegin<br>&gt; … swift code ...<br>&gt; @commitCommentFragmentEnd<br>&gt; <br>&gt; etc…<br>&gt; <br>&gt; Why encourage reinventing the wheel by pushing source to source transformations to tools of varying quality and completeness?<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151229/21a3a272/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>Why aren&#39;t source to source transformations part of the Swift language standard?</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>December 29, 2015 at 12:00:00pm</p></header><div class="content"><p>&gt; On Dec 29, 2015, at 11:40 AM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; On Dec 29, 2015, at 2:34 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I would not recommend phrasing these proposals as &quot;Why doesn&#39;t Swift already support X?&quot; when you are proposing a new feature.<br>&gt;&gt; <br>&gt;&gt; Instead, I&#39;d like to see much more fleshed out examples of what you&#39;d propose to change, and how it would help Swift developers. From the small amount of information you&#39;ve given here, I can&#39;t understand what you&#39;re trying to do.<br>&gt; <br>&gt; Xcode is not open source and it is unlikely that Swift source to source transformations that will be part of Xcode in the future  (e.g., extract method) will be open source.<br>&gt; <br>&gt; What I propose would be a way to embed source to source transformations into Swift using directives in the language. As the language is open source, so will be the transformations.<br>&gt; <br>&gt; Note also that the compiler already has the information required for source to source transformations and so it makes sense to embed these transformations in the compiler itself.<br></p><p>“Source to source transformation” is a really broad term and could mean anything from a macro system to defining an entirely new language that compiles down to Swift source.  In this case, you seem to be asking for a refactoring engine that would be driven by source annotations, which sounds basically pointless except perhaps as a vehicle for extremely lazy research papers.<br></p><p>I think a refactoring engine would be very welcome in the Swift repository.  However, the technical design of its interface is a detail that should be decided according to the needs of its implementers and users rather than by random people making comments on mailing lists.  If you are interested in contributing to that effort, that’s great, but you will need to write some code.  Also, that discussion should occur on the development lists rather than the evolution list, since it’s fundamentally a question of tools implementation rather than language design.<br></p><p>John.<br></p><p>&gt; <br>&gt;&gt; <br>&gt;&gt; Jacob<br>&gt;&gt; <br>&gt;&gt; On Tue, Dec 29, 2015 at 10:07 AM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; Source to source transformations are part of a developer’s job, don’t need a GUI, and can be done more easily and accurately by the Swift compiler. Moreover, the compiler could be made interactive taking in extra information from the developer as required during the &quot;compile&quot; (again without requiring a GUI).<br>&gt;&gt; <br>&gt;&gt; You could have special directives for source to source transformations such as:<br>&gt;&gt; <br>&gt;&gt; @extractMethodBegin<br>&gt;&gt; … swift code ...<br>&gt;&gt; @extractMethodEnd<br>&gt;&gt; <br>&gt;&gt; @indentBegin<br>&gt;&gt; … swift code ...<br>&gt;&gt; @indentEnd<br>&gt;&gt; <br>&gt;&gt; @commitCommentFragmentBegin<br>&gt;&gt; … swift code ...<br>&gt;&gt; @commitCommentFragmentEnd<br>&gt;&gt; <br>&gt;&gt; etc…<br>&gt;&gt; <br>&gt;&gt; Why encourage reinventing the wheel by pushing source to source transformations to tools of varying quality and completeness?<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151229/5118bcf8/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
