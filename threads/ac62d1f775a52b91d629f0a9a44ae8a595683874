<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/34b9659227ea084bb09a8ba4a450a162?s=50"></div><header><strong>Support for pure setters</strong> from <string>Jessy Catterwaul</string> &lt;mr.jessy at gmail.com&gt;<p>February  3, 2016 at 03:00:00pm</p></header><div class="content"><p>Joe, to attempt to set foo.x doesn’t make sense. If foo cannot be gotten, a property of it will be inaccessible for getting or setting.<br></p><p>Set-only properties are always computed, and only used via assignment.<br></p><p>e.g. foo = value<br></p><p><br>&gt; Set-only properties are problematic for Swift, because it relies on being able to do writeback in many more cases than Objective-C. A set-only property will be constrained in several surprising ways. For instance, it would be impossible to drill down to a component of a set-only value type property, because this:<br>&gt; <br>&gt; var foo: Struct { get { ... } set { ... } }<br>&gt; foo.x = value<br>&gt; <br>&gt; is really performing this behind the scenes:<br>&gt; <br>&gt; var tmp = foo // invoke getter<br>&gt; tmp.x = value<br>&gt; foo = tmp // invoke setter<br>&gt; <br>&gt; but we would have no getter in this case to initialize the temporary with. You also wouldn&#39;t be able to use the property as an &#39;inout&#39; parameter or do many of the other things you expect to be able to do with a mutable property. A set-only property is so limited I don&#39;t think it really feels like a property at all anymore. These restrictions are far more obvious if you express the interface as a function rather than a property.<br>&gt; <br>&gt; -Joe<br>&gt; <br>&gt; &gt; On Jan 7, 2016, at 7:47 AM, David James via swift-evolution&lt;swift-evolution at swift.org&gt;wrote:<br>&gt; &gt; <br>&gt; &gt; Currently Swift has computed properties that support get or get and set, but not set only. There are use cases where we would want set only.<br>&gt; &gt; <br>&gt; &gt; For example, toggling a boolean which changes another stored property where it would be overkill to make a method for that. It&#39;s more intuitive to just assign a boolean. e.g. myObject.myBoolean = true<br>&gt; &gt; <br>&gt; &gt; Another example, setting an object that is introspected in order to create a new object which is then stored on a different property. The property that is stored could be readonly/get, for example. A method for the setter (e.g. setSomething) would not be as intuitive as just a plain assignment (e.g. myObject.something = ..).<br>&gt; &gt; <br>&gt; &gt; Another consideration is that a pure setter would support better information hiding. You may not want the parent object to expose the property. Example scenario: set a property on an object (via assignment), which creates/modifies a stored property based on the passed (set) value, and then pass the parent object to another part of the system which can than read the stored property but not the original set property — i.e. you may not want to expose the original set property to another part of the system.<br>&gt; &gt; <br>&gt; &gt; Example:<br>&gt; &gt; <br>&gt; &gt; var myProperty:MyClass {<br>&gt; &gt; set {<br>&gt; &gt; …<br>&gt; &gt; }<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; One concern is that without ‘get’ there really is no property at all, and perhaps this is the reason that pure setter was never included. However, this does not invalidate the above.<br>&gt; &gt; <br>&gt; &gt; As an alternative (to make it more semantically sensible) we could introduce a new keyword ‘set’, so:<br>&gt; &gt; <br>&gt; &gt; set myProperty:MyClass {<br>&gt; &gt; ...<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; Which would support simple assignment:<br>&gt; &gt; <br>&gt; &gt; myObject.myProperty = myOtherObject<br>&gt; &gt; <br>&gt; &gt; Finally, it’s important to know that this is still “computed&quot;, but only computed on the input, not on the output side.<br>&gt; &gt; <br>&gt; &gt; David James<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Support for pure setters</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>February  3, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Feb 3, 2016, at 12:21 PM, Jessy Catterwaul &lt;mr.jessy at gmail.com&gt; wrote:<br>&gt; <br>&gt; Joe, to attempt to set foo.x doesn’t make sense. If foo cannot be gotten, a property of it will be inaccessible for getting or setting.<br>&gt; <br>&gt; Set-only properties are always computed, and only used via assignment.<br>&gt; <br>&gt; e.g. foo = value<br></p><p>I understand that. If that&#39;s all you&#39;re allowed to do with a set-only property, then this is just sugar over &#39;setFoo(value)&#39;, and I think the sugar implies you could do more with &#39;foo&#39; than you really can. I don&#39;t think it&#39;s worth the complexity.<br></p><p>-Joe<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
