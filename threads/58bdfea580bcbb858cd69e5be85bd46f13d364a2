<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>Cross-compiling (nearly) everything for RPi from OSX</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>May 10, 2016 at 04:00:00am</p></header><div class="content"><p>I’ve managed to cross-compile the swift tools for the Raspberry Pi from OSX.<br></p><p>I thought I’d share my changes. Branch is here: https://github.com/karwa/swift &lt;https://github.com/karwa/swift&gt;. I’ll work on merging it soon.<br></p><p>The only real change we need is a bit more structure to the install locations. I want to install to a deployment-target specific subdirectory within INSTALL_DESTDIR. We need that if we have multiple sets of tools to install and packages to build. Installable-package also gets appended with the deployment target and “.tar”.<br></p><p>Does anybody (or any bots) install directly from the build script? Would it be a lot of trouble to give install-destdir and install-symroot a bit of structure?<br></p><p>clang, swift, stdlib, the GlibC overlay all work (although I still need to add a step which regenerates glibc.modulemap - right now you’ll have to find/replace to take your sysroot out of it). LLBuild works. Foundation doesn’t cross-compile just yet, but I built it natively with the resulting swift compiler and clang. The problem seems to be fixable by tweaking the clang headers inside of lib/swift, so I’m not sure if maybe my system headers are a bit wonky. Swiftpm depends on Foundation, and LLDB was having some trouble finding libraries for python.<br></p><p>Invoke with:<br></p><p>../swift/utils/build-script -R \<br>	--llbuild \<br>	--ios \<br>	--installable-package=“${out_files}/swift-3.0&quot; \<br>	--install-destdir=“${out_files}/output&quot; \<br>	--install-symroot=“${out_files}/debug-output&quot; \<br>	-- \<br>	--llvm-install-components=&quot;clang;clang-headers;libclang;libclang-headers&quot; \<br>	--swift-install-components=&quot;compiler;stdlib;sdk-overlay;clang-builtin-headers;editor-integration;sourcekit-xpc-service&quot; \<br>	--darwin-toolchain-name=&quot;swift-3.0&quot; \<br>	--darwin_toolchain_display_name=&quot;local.swift.3&quot; \<br>	--darwin_toolchain_bundle_identifier=&quot;local.swift.3&quot; \<br>	--toolchain_prefix=&quot;swift3.xctoolchain&quot; \<br>	--darwin_toolchain_alias=&quot;local&quot; \<br>	--install-swift=&quot;1&quot; \<br>	--install-llbuild=&quot;1&quot; \<br>	--install-prefix=&quot;/usr&quot; \<br>	--cross-compile-tools-deployment-targets=linux-armv7 \<br>	--cross-compile-sysroot=&quot;${sysroot}&quot; \<br>	--cross-compile-toolchain-bin=&quot;${toolchain}” \<br></p><p>where ${out_files} is going to end up like this:<br></p><p>— swift-3.0-macosx-x86_64.tar<br>— swift-3.0-linux-armv7.tar<br>— output/<br>   | — macosx-x86_64/<br>      | — swift3.xctoolchain/<br>         | — Info.plist<br>         | — usr/ (etc)<br>   | — linux-armv7/<br>      | — usr/ (etc)<br></p><p>${toolchain}:<br></p><p>Built from: https://launchpad.net/gcc-arm-embedded/5.0/5-2015-q4-major &lt;https://launchpad.net/gcc-arm-embedded/5.0/5-2015-q4-major&gt;<br>Edit install_toolchain.sh and add “--enable-gold” to the binutils flags<br>Also in install_common.sh, charged TARGET to &quot;arm-linux-eabi”, but not sure that’s necessary.<br>Give the path to the unprefixed versions of the tools, e.g: “/cc-toolchain/gcc-arm-none-eabi-5_2-2015q4/install-native/arm-linux-eabi/bin&quot;<br></p><p>${sysroot}:<br></p><p>Created using this script. Requires dpkg-deb (can be installed with brew): https://gist.github.com/karwa/c73f9fd2768c96f6871be4aae152b264 &lt;https://gist.github.com/karwa/c73f9fd2768c96f6871be4aae152b264&gt;<br></p><p>./make_sysroot.py --distro debian --version jessie --arch armhf --install sysroot.armhf.debian.jessie<br></p><p>Let me know how it goes.<br></p><p>Karl<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160510/58bd64a2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Cross-compiling (nearly) everything for RPi from OSX</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>May  9, 2016 at 10:00:00pm</p></header><div class="content"><p>On Mon, May 9, 2016 at 7:11 PM, Karl Wagner via swift-dev<br>&lt;swift-dev at swift.org&gt; wrote:<br>&gt; Does anybody (or any bots) install directly from the build script?<br></p><p>Yes, that&#39;s how all Swift builds are done.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>Cross-compiling (nearly) everything for RPi from OSX</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>May 10, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On 10 May 2016, at 04:11, Karl Wagner &lt;razielim at gmail.com&gt; wrote:<br>&gt; <br>&gt; I’ve managed to cross-compile the swift tools for the Raspberry Pi from OSX.<br>&gt; <br>&gt; I thought I’d share my changes. Branch is here: https://github.com/karwa/swift &lt;https://github.com/karwa/swift&gt;. I’ll work on merging it soon.<br>&gt; <br>&gt; The only real change we need is a bit more structure to the install locations. I want to install to a deployment-target specific subdirectory within INSTALL_DESTDIR. We need that if we have multiple sets of tools to install and packages to build. Installable-package also gets appended with the deployment target and “.tar”.<br>&gt; <br>&gt; Does anybody (or any bots) install directly from the build script? Would it be a lot of trouble to give install-destdir and install-symroot a bit of structure?<br>&gt; <br>&gt; clang, swift, stdlib, the GlibC overlay all work (although I still need to add a step which regenerates glibc.modulemap - right now you’ll have to find/replace to take your sysroot out of it). LLBuild works. Foundation doesn’t cross-compile just yet, but I built it natively with the resulting swift compiler and clang. The problem seems to be fixable by tweaking the clang headers inside of lib/swift, so I’m not sure if maybe my system headers are a bit wonky. Swiftpm depends on Foundation, and LLDB was having some trouble finding libraries for python.<br>&gt; <br>&gt; Invoke with:<br>&gt; <br>&gt; ../swift/utils/build-script -R \<br>&gt; 	--llbuild \<br>&gt; 	--ios \<br>&gt; 	--installable-package=“${out_files}/swift-3.0&quot; \<br>&gt; 	--install-destdir=“${out_files}/output&quot; \<br>&gt; 	--install-symroot=“${out_files}/debug-output&quot; \<br>&gt; 	-- \<br>&gt; 	--llvm-install-components=&quot;clang;clang-headers;libclang;libclang-headers&quot; \<br>&gt; 	--swift-install-components=&quot;compiler;stdlib;sdk-overlay;clang-builtin-headers;editor-integration;sourcekit-xpc-service&quot; \<br>&gt; 	--darwin-toolchain-name=&quot;swift-3.0&quot; \<br>&gt; 	--darwin_toolchain_display_name=&quot;local.swift.3&quot; \<br>&gt; 	--darwin_toolchain_bundle_identifier=&quot;local.swift.3&quot; \<br>&gt; 	--toolchain_prefix=&quot;swift3.xctoolchain&quot; \<br>&gt; 	--darwin_toolchain_alias=&quot;local&quot; \<br>&gt; 	--install-swift=&quot;1&quot; \<br>&gt; 	--install-llbuild=&quot;1&quot; \<br>&gt; 	--install-prefix=&quot;/usr&quot; \<br>&gt; 	--cross-compile-tools-deployment-targets=linux-armv7 \<br>&gt; 	--cross-compile-sysroot=&quot;${sysroot}&quot; \<br>&gt; 	--cross-compile-toolchain-bin=&quot;${toolchain}” \<br>&gt; <br>&gt; where ${out_files} is going to end up like this:<br>&gt; <br>&gt; — swift-3.0-macosx-x86_64.tar<br>&gt; — swift-3.0-linux-armv7.tar<br>&gt; — output/<br>&gt;    | — macosx-x86_64/<br>&gt;       | — swift3.xctoolchain/<br>&gt;          | — Info.plist<br>&gt;          | — usr/ (etc)<br>&gt;    | — linux-armv7/<br>&gt;       | — usr/ (etc)<br>&gt; <br>&gt; ${toolchain}:<br>&gt; <br>&gt; Built from: https://launchpad.net/gcc-arm-embedded/5.0/5-2015-q4-major &lt;https://launchpad.net/gcc-arm-embedded/5.0/5-2015-q4-major&gt;<br>&gt; Edit install_toolchain.sh and add “--enable-gold” to the binutils flags<br>&gt; Also in install_common.sh, charged TARGET to &quot;arm-linux-eabi”, but not sure that’s necessary.<br>&gt; Give the path to the unprefixed versions of the tools, e.g: “/cc-toolchain/gcc-arm-none-eabi-5_2-2015q4/install-native/arm-linux-eabi/bin&quot;<br>&gt; <br>&gt; ${sysroot}:<br>&gt; <br>&gt; Created using this script. Requires dpkg-deb (can be installed with brew): https://gist.github.com/karwa/c73f9fd2768c96f6871be4aae152b264 &lt;https://gist.github.com/karwa/c73f9fd2768c96f6871be4aae152b264&gt;<br>&gt; <br>&gt; ./make_sysroot.py --distro debian --version jessie --arch armhf --install sysroot.armhf.debian.jessie<br>&gt; <br>&gt; Let me know how it goes.<br>&gt; <br>&gt; Karl<br>&gt; <br></p><p><br>In order for CoreFoundation to build on my Debian machine, I had to edit the Clang headers inside lib/swift/clang - specifically stdarg.h, and add the following line in order for Clang to follow the typedefs and figure that all va_list candidates were the same type:<br></p><p>#ifndef _VA_LIST<br>#include &lt;_G_config.h&gt;          &lt;——— must precede the typedef<br>typedef __builtin_va_list va_list;<br>#define _VA_LIST<br>#endif<br></p><p>Should the clang headers incorporate this, or does anybody know if my system headers are supposed to be including it themselves somewhere?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160510/79bb2e87/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>Cross-compiling (nearly) everything for RPi from OSX</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>May 11, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On 10 May 2016, at 04:11, Karl Wagner &lt;razielim at gmail.com&gt; wrote:<br>&gt; <br>&gt; I’ve managed to cross-compile the swift tools for the Raspberry Pi from OSX.<br>&gt; <br>&gt; I thought I’d share my changes. Branch is here: https://github.com/karwa/swift &lt;https://github.com/karwa/swift&gt;. I’ll work on merging it soon.<br>&gt; <br>&gt; The only real change we need is a bit more structure to the install locations. I want to install to a deployment-target specific subdirectory within INSTALL_DESTDIR. We need that if we have multiple sets of tools to install and packages to build. Installable-package also gets appended with the deployment target and “.tar”.<br>&gt; <br>&gt; Does anybody (or any bots) install directly from the build script? Would it be a lot of trouble to give install-destdir and install-symroot a bit of structure?<br>&gt; <br>&gt; clang, swift, stdlib, the GlibC overlay all work (although I still need to add a step which regenerates glibc.modulemap - right now you’ll have to find/replace to take your sysroot out of it). LLBuild works. Foundation doesn’t cross-compile just yet, but I built it natively with the resulting swift compiler and clang. The problem seems to be fixable by tweaking the clang headers inside of lib/swift, so I’m not sure if maybe my system headers are a bit wonky. Swiftpm depends on Foundation, and LLDB was having some trouble finding libraries for python.<br>&gt; <br>&gt; Invoke with:<br>&gt; <br>&gt; ../swift/utils/build-script -R \<br>&gt; 	--llbuild \<br>&gt; 	--ios \<br>&gt; 	--installable-package=“${out_files}/swift-3.0&quot; \<br>&gt; 	--install-destdir=“${out_files}/output&quot; \<br>&gt; 	--install-symroot=“${out_files}/debug-output&quot; \<br>&gt; 	-- \<br>&gt; 	--llvm-install-components=&quot;clang;clang-headers;libclang;libclang-headers&quot; \<br>&gt; 	--swift-install-components=&quot;compiler;stdlib;sdk-overlay;clang-builtin-headers;editor-integration;sourcekit-xpc-service&quot; \<br>&gt; 	--darwin-toolchain-name=&quot;swift-3.0&quot; \<br>&gt; 	--darwin_toolchain_display_name=&quot;local.swift.3&quot; \<br>&gt; 	--darwin_toolchain_bundle_identifier=&quot;local.swift.3&quot; \<br>&gt; 	--toolchain_prefix=&quot;swift3.xctoolchain&quot; \<br>&gt; 	--darwin_toolchain_alias=&quot;local&quot; \<br>&gt; 	--install-swift=&quot;1&quot; \<br>&gt; 	--install-llbuild=&quot;1&quot; \<br>&gt; 	--install-prefix=&quot;/usr&quot; \<br>&gt; 	--cross-compile-tools-deployment-targets=linux-armv7 \<br>&gt; 	--cross-compile-sysroot=&quot;${sysroot}&quot; \<br>&gt; 	--cross-compile-toolchain-bin=&quot;${toolchain}” \<br>&gt; <br>&gt; where ${out_files} is going to end up like this:<br>&gt; <br>&gt; — swift-3.0-macosx-x86_64.tar<br>&gt; — swift-3.0-linux-armv7.tar<br>&gt; — output/<br>&gt;    | — macosx-x86_64/<br>&gt;       | — swift3.xctoolchain/<br>&gt;          | — Info.plist<br>&gt;          | — usr/ (etc)<br>&gt;    | — linux-armv7/<br>&gt;       | — usr/ (etc)<br>&gt; <br>&gt; ${toolchain}:<br>&gt; <br>&gt; Built from: https://launchpad.net/gcc-arm-embedded/5.0/5-2015-q4-major &lt;https://launchpad.net/gcc-arm-embedded/5.0/5-2015-q4-major&gt;<br>&gt; Edit install_toolchain.sh and add “--enable-gold” to the binutils flags<br>&gt; Also in install_common.sh, charged TARGET to &quot;arm-linux-eabi”, but not sure that’s necessary.<br>&gt; Give the path to the unprefixed versions of the tools, e.g: “/cc-toolchain/gcc-arm-none-eabi-5_2-2015q4/install-native/arm-linux-eabi/bin&quot;<br>&gt; <br>&gt; ${sysroot}:<br>&gt; <br>&gt; Created using this script. Requires dpkg-deb (can be installed with brew): https://gist.github.com/karwa/c73f9fd2768c96f6871be4aae152b264 &lt;https://gist.github.com/karwa/c73f9fd2768c96f6871be4aae152b264&gt;<br>&gt; <br>&gt; ./make_sysroot.py --distro debian --version jessie --arch armhf --install sysroot.armhf.debian.jessie<br>&gt; <br>&gt; Let me know how it goes.<br>&gt; <br>&gt; Karl<br>&gt; <br></p><p>My apologies, the correct binutils target for the RPi is “arm-linux-gnueabihf”, not “arm-linux-eabi”, and you do have to change it before building the toolchain.<br></p><p>Karl<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160511/e5e43072/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>Cross-compiling (nearly) everything for RPi from OSX</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>May 13, 2016 at 06:00:00pm</p></header><div class="content"><p>So, while working on this I’ve found some cases where build-script-impl is a bit sloppy about naming: we use the term “deployment target” quite a lot, both when talking about hosts for the swift compiler and standard library targets.<br></p><p>This leads to weird parts of the script - like in testing, where we iterate STDLIB_DEPLOYMENT_TARGETS but skip everything which isn’t also a host. Somebody got confused between deployment targets. Or in the lipo step, where we attempt to merge libraries across different hosts for some reason.<br></p><p>There are other general logic holes - such as the swift build targets getting calculated once in some free-standing code, when really they should be calculated per-host, or executables being looked for in the current host build output (rather than the local host build output).<br></p><p>So I’ve cut away my specific cross-compiling edits from these more general fixes and created a PR for those changes: https://github.com/apple/swift/pull/2497 &lt;https://github.com/apple/swift/pull/2497&gt;<br></p><p>I know it’s quite a big diff, and that cross-compilation isn’t a massive priority, but I’d really like to incorporate feedback and, if possible, get it merged as soon as possible. No parameters or output has been changed (e.g. the host-specific install locations aren’t in there), so for the case today where you don’t cross-compile the tools, everything should resolve as it does today.<br></p><p>Thanks<br></p><p>Karl<br></p><p><br>&gt; On 11 May 2016, at 09:17, Karl &lt;raziel.im+swift-users at gmail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 10 May 2016, at 04:11, Karl Wagner &lt;razielim at gmail.com &lt;mailto:razielim at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I’ve managed to cross-compile the swift tools for the Raspberry Pi from OSX.<br>&gt;&gt; <br>&gt;&gt; I thought I’d share my changes. Branch is here: https://github.com/karwa/swift &lt;https://github.com/karwa/swift&gt;. I’ll work on merging it soon.<br>&gt;&gt; <br>&gt;&gt; The only real change we need is a bit more structure to the install locations. I want to install to a deployment-target specific subdirectory within INSTALL_DESTDIR. We need that if we have multiple sets of tools to install and packages to build. Installable-package also gets appended with the deployment target and “.tar”.<br>&gt;&gt; <br>&gt;&gt; Does anybody (or any bots) install directly from the build script? Would it be a lot of trouble to give install-destdir and install-symroot a bit of structure?<br>&gt;&gt; <br>&gt;&gt; clang, swift, stdlib, the GlibC overlay all work (although I still need to add a step which regenerates glibc.modulemap - right now you’ll have to find/replace to take your sysroot out of it). LLBuild works. Foundation doesn’t cross-compile just yet, but I built it natively with the resulting swift compiler and clang. The problem seems to be fixable by tweaking the clang headers inside of lib/swift, so I’m not sure if maybe my system headers are a bit wonky. Swiftpm depends on Foundation, and LLDB was having some trouble finding libraries for python.<br>&gt;&gt; <br>&gt;&gt; Invoke with:<br>&gt;&gt; <br>&gt;&gt; ../swift/utils/build-script -R \<br>&gt;&gt; 	--llbuild \<br>&gt;&gt; 	--ios \<br>&gt;&gt; 	--installable-package=“${out_files}/swift-3.0&quot; \<br>&gt;&gt; 	--install-destdir=“${out_files}/output&quot; \<br>&gt;&gt; 	--install-symroot=“${out_files}/debug-output&quot; \<br>&gt;&gt; 	-- \<br>&gt;&gt; 	--llvm-install-components=&quot;clang;clang-headers;libclang;libclang-headers&quot; \<br>&gt;&gt; 	--swift-install-components=&quot;compiler;stdlib;sdk-overlay;clang-builtin-headers;editor-integration;sourcekit-xpc-service&quot; \<br>&gt;&gt; 	--darwin-toolchain-name=&quot;swift-3.0&quot; \<br>&gt;&gt; 	--darwin_toolchain_display_name=&quot;local.swift.3&quot; \<br>&gt;&gt; 	--darwin_toolchain_bundle_identifier=&quot;local.swift.3&quot; \<br>&gt;&gt; 	--toolchain_prefix=&quot;swift3.xctoolchain&quot; \<br>&gt;&gt; 	--darwin_toolchain_alias=&quot;local&quot; \<br>&gt;&gt; 	--install-swift=&quot;1&quot; \<br>&gt;&gt; 	--install-llbuild=&quot;1&quot; \<br>&gt;&gt; 	--install-prefix=&quot;/usr&quot; \<br>&gt;&gt; 	--cross-compile-tools-deployment-targets=linux-armv7 \<br>&gt;&gt; 	--cross-compile-sysroot=&quot;${sysroot}&quot; \<br>&gt;&gt; 	--cross-compile-toolchain-bin=&quot;${toolchain}” \<br>&gt;&gt; <br>&gt;&gt; where ${out_files} is going to end up like this:<br>&gt;&gt; <br>&gt;&gt; — swift-3.0-macosx-x86_64.tar<br>&gt;&gt; — swift-3.0-linux-armv7.tar<br>&gt;&gt; — output/<br>&gt;&gt;    | — macosx-x86_64/<br>&gt;&gt;       | — swift3.xctoolchain/<br>&gt;&gt;          | — Info.plist<br>&gt;&gt;          | — usr/ (etc)<br>&gt;&gt;    | — linux-armv7/<br>&gt;&gt;       | — usr/ (etc)<br>&gt;&gt; <br>&gt;&gt; ${toolchain}:<br>&gt;&gt; <br>&gt;&gt; Built from: https://launchpad.net/gcc-arm-embedded/5.0/5-2015-q4-major &lt;https://launchpad.net/gcc-arm-embedded/5.0/5-2015-q4-major&gt;<br>&gt;&gt; Edit install_toolchain.sh and add “--enable-gold” to the binutils flags<br>&gt;&gt; Also in install_common.sh, charged TARGET to &quot;arm-linux-eabi”, but not sure that’s necessary.<br>&gt;&gt; Give the path to the unprefixed versions of the tools, e.g: “/cc-toolchain/gcc-arm-none-eabi-5_2-2015q4/install-native/arm-linux-eabi/bin&quot;<br>&gt;&gt; <br>&gt;&gt; ${sysroot}:<br>&gt;&gt; <br>&gt;&gt; Created using this script. Requires dpkg-deb (can be installed with brew): https://gist.github.com/karwa/c73f9fd2768c96f6871be4aae152b264 &lt;https://gist.github.com/karwa/c73f9fd2768c96f6871be4aae152b264&gt;<br>&gt;&gt; <br>&gt;&gt; ./make_sysroot.py --distro debian --version jessie --arch armhf --install sysroot.armhf.debian.jessie<br>&gt;&gt; <br>&gt;&gt; Let me know how it goes.<br>&gt;&gt; <br>&gt;&gt; Karl<br>&gt;&gt; <br>&gt; <br>&gt; My apologies, the correct binutils target for the RPi is “arm-linux-gnueabihf”, not “arm-linux-eabi”, and you do have to change it before building the toolchain.<br>&gt; <br>&gt; Karl<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160513/9a2dc2f0/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
