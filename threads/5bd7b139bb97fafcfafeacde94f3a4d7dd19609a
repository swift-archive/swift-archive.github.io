<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>The value of enums</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>November  6, 2016 at 12:00:00pm</p></header><div class="content"><p>Enums are a fundamental part of Swift, so I guess they won&#39;t change much — but I wonder if anyone shares my observations in real-life use…<br></p><p>Afair, there are three different types of enums:<br>- Enums with raw values<br>- enums with associated objects<br>- Plain enums (no underlying value)<br></p><p>I use the first type quite often (as a convenient way to create string constants, or for serialization), but see no real value in plain enums (they offer nothing over enums backed with a raw value).<br></p><p>The second type is special:<br>It looks like a really cool concept, and and I started several designs based on them — just to realize later that structs and classes are a better fit.<br>My conclusion so far is that enums perform bad as soon as you want to attach additional data or behavior; one or two computed properties are ok, but those switch-statements quickly become a burden.<br>There are some options to work around this problem, but I guess I&#39;ll just stay away from enums with associated objects by default (with the exception of error-types — imho those can be modeled quite nicely).<br></p><p>So, that&#39;s my current perception, and I&#39;m curious if others had similar experiences — or, even more interesting, completely different observations and elegant solutions based on enums.<br></p><p>- Tino<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/eddffe5cd2c817d61892d77edf66b6b2?s=50"></div><header><strong>The value of enums</strong> from <string>Rien</string> &lt;Rien at Balancingrock.nl&gt;<p>November  6, 2016 at 01:00:00pm</p></header><div class="content"><p>As usual: it depends.<br></p><p>I use enums with associated values quite a lot.<br>In my experience there is quite a thin line between very convenient and too much.<br>I have several cases where I started off with enums with associated values, only to later convert them to classes.<br>As long as the enums only have an associated value, things tend to work just fine. But as soon as more properties become associated with the enum, things get out of hand.<br>Once I tried to fix a complete inter process protocol in enum’s. And it did work, but maintenance became a nightmare after the protocol implemented more than 10 commands or so.<br>To me the key is: keep them small.<br></p><p>Regards,<br>Rien<br></p><p>Site: http://balancingrock.nl<br>Blog: http://swiftrien.blogspot.com<br>Github: http://github.com/Swiftrien<br>Project: http://swiftfire.nl<br></p><p><br></p><p><br>&gt; On 06 Nov 2016, at 12:07, Tino Heth via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Enums are a fundamental part of Swift, so I guess they won&#39;t change much — but I wonder if anyone shares my observations in real-life use…<br>&gt; <br>&gt; Afair, there are three different types of enums:<br>&gt; - Enums with raw values<br>&gt; - enums with associated objects<br>&gt; - Plain enums (no underlying value)<br>&gt; <br>&gt; I use the first type quite often (as a convenient way to create string constants, or for serialization), but see no real value in plain enums (they offer nothing over enums backed with a raw value).<br>&gt; <br>&gt; The second type is special:<br>&gt; It looks like a really cool concept, and and I started several designs based on them — just to realize later that structs and classes are a better fit.<br>&gt; My conclusion so far is that enums perform bad as soon as you want to attach additional data or behavior; one or two computed properties are ok, but those switch-statements quickly become a burden.<br>&gt; There are some options to work around this problem, but I guess I&#39;ll just stay away from enums with associated objects by default (with the exception of error-types — imho those can be modeled quite nicely).<br>&gt; <br>&gt; So, that&#39;s my current perception, and I&#39;m curious if others had similar experiences — or, even more interesting, completely different observations and elegant solutions based on enums.<br>&gt; <br>&gt; - Tino<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>The value of enums</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>November  6, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Nov 6, 2016, at 4:07 AM, Tino Heth via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Enums are a fundamental part of Swift, so I guess they won&#39;t change much — but I wonder if anyone shares my observations in real-life use…<br>&gt; <br>&gt; Afair, there are three different types of enums:<br>&gt; - Enums with raw values<br>&gt; - enums with associated objects<br>&gt; - Plain enums (no underlying value)<br>&gt; <br>&gt; I use the first type quite often (as a convenient way to create string constants, or for serialization), but see no real value in plain enums (they offer nothing over enums backed with a raw value).<br>&gt; <br>&gt; The second type is special:<br>&gt; It looks like a really cool concept, and and I started several designs based on them — just to realize later that structs and classes are a better fit.<br>&gt; My conclusion so far is that enums perform bad as soon as you want to attach additional data or behavior; one or two computed properties are ok, but those switch-statements quickly become a burden.<br>&gt; There are some options to work around this problem, but I guess I&#39;ll just stay away from enums with associated objects by default (with the exception of error-types — imho those can be modeled quite nicely).<br>&gt; <br>&gt; So, that&#39;s my current perception, and I&#39;m curious if others had similar experiences — or, even more interesting, completely different observations and elegant solutions based on enums.<br></p><p><br>Enums:<br></p><p>* Great for umbrella type implementation<br>* Plain enums: perfect for enumeratable states and defining roles.<br>* Associated types: I use them mostly for Result type, but also handy for things like <br>  JSON parsers,  which are Swift&#39;s mandated follow-on to &quot;Hello World&quot;<br>* Enums with raw values: I mostly stick to stringity ones, where there&#39;s a state or role but<br>  I want to have easy access to the name as well as the role, and integer ones, where I can<br>  repurpose the number elsewhere<br>* I really love using enums with switch statements, and compiler guarantees of case <br>   completeness.<br></p><p>I&#39;d put forth that enum cases should be few, simple, and focused. They should not be <br>used as flags.  When used well, they should feel obvious and integrate well into <br>switch statements. <br></p><p>-- E<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
