<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c6c3c6af3a3702ecbe5bfa02e3d89aca?s=50"></div><header><strong>Swift 3 Android hangs &amp; crashes</strong> from <string>Eric Wing</string> &lt;ewmailing at gmail.com&gt;<p>October 31, 2016 at 01:00:00pm</p></header><div class="content"><p>Hello, I&#39;ve been trying to get Swift 3 working on Android. (I<br>previously had Swift 2.x working.)<br></p><p>I have the baseline components built following the standard<br>Android/Swift instructions.<br></p><p>But when I go to make a trivial, but real Android<br>app (i.e. start in Java Activity and use JNI/LoadLibrary to get to<br>Swift), the Swift code seems to hang (freeze?) whenever my Swift code<br>calls print(&quot;foo&quot;).<br></p><p>Removing all print calls, allows my trivial code to run correctly. But in<br>slightly more complicated test programs (which call into other C<br>libraries), I&#39;m getting program crashes. It looks like libc triggers<br>some kind of abort call in these cases. I know these C libraries work<br>in non-Swift cases.<br></p><p>My best guess right now is since Swift print() is also broken, I think<br>there might be some problem related to libc++ (and maybe its<br>interaction with libc) which is used in the build process. (The<br>Android NDK docs warn about std::cout buffering breaking if you have<br>multiple static linked libc++, but I&#39;m not statically linking it.)<br></p><p>I&#39;m currently using libc++_shared.<br>I updated my repo a few days ago which includes a fix for NDK r13<br>which I am using.<br></p><p><br>Does this problem ring a bell for anybody?<br>Or can somebody help me figure out how to start debugging this? I&#39;ve<br>been trying a lot of different things behind the scenes, but I&#39;m<br>starting to run out of ideas.<br></p><p>Thanks,<br>Eric<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c6c3c6af3a3702ecbe5bfa02e3d89aca?s=50"></div><header><strong>Swift 3 Android hangs &amp; crashes</strong> from <string>Eric Wing</string> &lt;ewmailing at gmail.com&gt;<p>November  6, 2016 at 03:00:00pm</p></header><div class="content"><p>On 10/31/16, Eric Wing &lt;ewmailing at gmail.com&gt; wrote:<br>&gt; Hello, I&#39;ve been trying to get Swift 3 working on Android. (I<br>&gt; previously had Swift 2.x working.)<br>&gt;<br>&gt; I have the baseline components built following the standard<br>&gt; Android/Swift instructions.<br>&gt;<br>&gt; But when I go to make a trivial, but real Android<br>&gt; app (i.e. start in Java Activity and use JNI/LoadLibrary to get to<br>&gt; Swift), the Swift code seems to hang (freeze?) whenever my Swift code<br>&gt; calls print(&quot;foo&quot;).<br>&gt;<br>&gt; Removing all print calls, allows my trivial code to run correctly. But in<br>&gt; slightly more complicated test programs (which call into other C<br>&gt; libraries), I&#39;m getting program crashes. It looks like libc triggers<br>&gt; some kind of abort call in these cases. I know these C libraries work<br>&gt; in non-Swift cases.<br>&gt;<br>&gt; My best guess right now is since Swift print() is also broken, I think<br>&gt; there might be some problem related to libc++ (and maybe its<br>&gt; interaction with libc) which is used in the build process. (The<br>&gt; Android NDK docs warn about std::cout buffering breaking if you have<br>&gt; multiple static linked libc++, but I&#39;m not statically linking it.)<br>&gt;<br>&gt; I&#39;m currently using libc++_shared.<br>&gt; I updated my repo a few days ago which includes a fix for NDK r13<br>&gt; which I am using.<br>&gt;<br>&gt;<br>&gt; Does this problem ring a bell for anybody?<br>&gt; Or can somebody help me figure out how to start debugging this? I&#39;ve<br>&gt; been trying a lot of different things behind the scenes, but I&#39;m<br>&gt; starting to run out of ideas.<br>&gt;<br>&gt; Thanks,<br>&gt; Eric<br>&gt;<br></p><p>I discovered there is a serious deadlock bug in Android 5.0. flockfile<br>on stdout/stderr causes a deadlock. Swift print() ultimately calls<br>flockfile, which in turn causes a deadlock. I verified this by first<br>commenting out the lock functions in the print function, and then<br>later by commenting out the flockfile/funlockfile implementations in<br>the Stubs.cpp.<br></p><p><br>One of the comments here mentions this bug:<br>https://chengyihe.wordpress.com/2015/10/31/android-child-process-hits-mutex-deadlock-in-printf-after-fork/<br></p><p>The workaround seems to be either to remove the call to flockfile() or<br>update to Android 5.1. I upgraded my device to 5.1 and the problem<br>disappeared.<br></p><p>But thanks to Android fragmentation, going to 5.1 this means we lose<br>another 13.1% of devices, leaving us only 40.6% of devices.<br></p><p><br>This does bring up another issue though, at least for print() and<br>anything stdout/stderr related on Android. On Android, sending<br>anything to stdout/stderr via the NDK is effectively useless because<br>they are effectively sent to /dev/null. (The ‘adb shell setprop<br>log.redirect-stdio true’ trick doesn’t work for the NDK. There is one<br>convoluted trick to redirect using pipes in your codebase, but that is<br>a different can of worms.)<br></p><p>In general, print() statements need to go through<br>__android_log_write() and __android_log_print() on Android for anybody<br>to see anything. Is this something we should implement in Swift?<br></p><p>Thanks,<br>Eric<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f921fa5d507b31ef6984fd3d77ae710c?s=50"></div><header><strong>Swift 3 Android hangs &amp; crashes</strong> from <string>Brian Gesiak</string> &lt;modocache at gmail.com&gt;<p>November  7, 2016 at 05:00:00pm</p></header><div class="content"><p>Yikes, sounds like a nasty bug. Thanks for investigating, Eric!<br></p><p>I&#39;m all for a fix. You may have already considered this, but perhaps the<br>Android-specific workaround could be put into swift-corelibs-foundation? I<br>wonder which the core team would prefer?<br></p><p>- Brian Gesiak<br></p><p><br></p><p>On Sun, Nov 6, 2016 at 6:58 PM, Eric Wing via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; On 10/31/16, Eric Wing &lt;ewmailing at gmail.com&gt; wrote:<br>&gt; &gt; Hello, I&#39;ve been trying to get Swift 3 working on Android. (I<br>&gt; &gt; previously had Swift 2.x working.)<br>&gt; &gt;<br>&gt; &gt; I have the baseline components built following the standard<br>&gt; &gt; Android/Swift instructions.<br>&gt; &gt;<br>&gt; &gt; But when I go to make a trivial, but real Android<br>&gt; &gt; app (i.e. start in Java Activity and use JNI/LoadLibrary to get to<br>&gt; &gt; Swift), the Swift code seems to hang (freeze?) whenever my Swift code<br>&gt; &gt; calls print(&quot;foo&quot;).<br>&gt; &gt;<br>&gt; &gt; Removing all print calls, allows my trivial code to run correctly. But in<br>&gt; &gt; slightly more complicated test programs (which call into other C<br>&gt; &gt; libraries), I&#39;m getting program crashes. It looks like libc triggers<br>&gt; &gt; some kind of abort call in these cases. I know these C libraries work<br>&gt; &gt; in non-Swift cases.<br>&gt; &gt;<br>&gt; &gt; My best guess right now is since Swift print() is also broken, I think<br>&gt; &gt; there might be some problem related to libc++ (and maybe its<br>&gt; &gt; interaction with libc) which is used in the build process. (The<br>&gt; &gt; Android NDK docs warn about std::cout buffering breaking if you have<br>&gt; &gt; multiple static linked libc++, but I&#39;m not statically linking it.)<br>&gt; &gt;<br>&gt; &gt; I&#39;m currently using libc++_shared.<br>&gt; &gt; I updated my repo a few days ago which includes a fix for NDK r13<br>&gt; &gt; which I am using.<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; Does this problem ring a bell for anybody?<br>&gt; &gt; Or can somebody help me figure out how to start debugging this? I&#39;ve<br>&gt; &gt; been trying a lot of different things behind the scenes, but I&#39;m<br>&gt; &gt; starting to run out of ideas.<br>&gt; &gt;<br>&gt; &gt; Thanks,<br>&gt; &gt; Eric<br>&gt; &gt;<br>&gt;<br>&gt; I discovered there is a serious deadlock bug in Android 5.0. flockfile<br>&gt; on stdout/stderr causes a deadlock. Swift print() ultimately calls<br>&gt; flockfile, which in turn causes a deadlock. I verified this by first<br>&gt; commenting out the lock functions in the print function, and then<br>&gt; later by commenting out the flockfile/funlockfile implementations in<br>&gt; the Stubs.cpp.<br>&gt;<br>&gt;<br>&gt; One of the comments here mentions this bug:<br>&gt; https://chengyihe.wordpress.com/2015/10/31/android-child-<br>&gt; process-hits-mutex-deadlock-in-printf-after-fork/<br>&gt;<br>&gt; The workaround seems to be either to remove the call to flockfile() or<br>&gt; update to Android 5.1. I upgraded my device to 5.1 and the problem<br>&gt; disappeared.<br>&gt;<br>&gt; But thanks to Android fragmentation, going to 5.1 this means we lose<br>&gt; another 13.1% of devices, leaving us only 40.6% of devices.<br>&gt;<br>&gt;<br>&gt; This does bring up another issue though, at least for print() and<br>&gt; anything stdout/stderr related on Android. On Android, sending<br>&gt; anything to stdout/stderr via the NDK is effectively useless because<br>&gt; they are effectively sent to /dev/null. (The ‘adb shell setprop<br>&gt; log.redirect-stdio true’ trick doesn’t work for the NDK. There is one<br>&gt; convoluted trick to redirect using pipes in your codebase, but that is<br>&gt; a different can of worms.)<br>&gt;<br>&gt; In general, print() statements need to go through<br>&gt; __android_log_write() and __android_log_print() on Android for anybody<br>&gt; to see anything. Is this something we should implement in Swift?<br>&gt;<br>&gt; Thanks,<br>&gt; Eric<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161107/21b71eca/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
