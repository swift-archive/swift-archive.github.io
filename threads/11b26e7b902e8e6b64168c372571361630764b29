<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>June  7, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; `while let element = sequence.next() where condition {…}`<br></p><p>This is not a good alternative. First of all, it uses `while let` and `next()` instead of `for … in` which is way more complex than necessary. Also, if we want to skip over some elements, we either have to use<br></p><p>`sequence.lazy.filter({ someCondition($0) }).next()`<br></p><p>which is very hard to read compared to the proposal, or<br></p><p>`guard someCondition(element) else { continue }`<br></p><p>which is certainly better, but the added noise is still not very elegant. It’s also slightly confusing because we’d be both evaluating a condition outside of the loop body and inside the body.<br></p><p>&gt; `for element in sequence.lazy.filter({ condition }) {…}`<br></p><p>Not something I would go for either, again, because of the boilerplate code. You end up with an anonymous closure parameter despite already having named the element “element”, unless you name the parameter, but then you’d have to name it twice. Also, `.lazy.filter({ condition })` is a lot harder for beginners to grasp than a `where` or `while` keyword.<br></p><p>&gt; And it can be explicitly spelled out inside the loop<br></p><p>Probably the best option for now. In my opinion it’s still a bit confusing to enter the loop body but then decide to leave anyways, but it’s not too bad.<br></p><p>&gt; You&#39;re describing a while loop:<br>&gt; `while let element = sequence.next() where condition {...}`<br>&gt; <br>&gt; Which as we&#39;ve discussed can already be re-written with a for loop (which, yes, can be lazy):<br>&gt; `for element in sequence.lazy.filter({ condition }) {...}`<br>&gt; <br>&gt; And it can be explicitly spelled out inside the loop, a definite readability gain for the same reason guard always requires an explicit else block.<br>&gt; <br>&gt; What do you gain with a new keyword?<br>&gt; <br>&gt; On Tue, Jun 7, 2016 at 05:02 Haravikk via swift-evolution&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)&gt;wrote:<br>&gt; &gt; I’m a +1 for this idea. Like Thorsten I was initially a little concerned that while and where may look too similar, but actually I find them visually distinct enough, and actually in my code I’m probably more likely to use while than where on for loops, although both are useful.<br>&gt; &gt; <br>&gt; &gt; &gt;On 6 Jun 2016, at 11:15, Tim Vermeulen via swift-evolution&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)&gt;wrote:<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;We can already use a where clause in a for loop like this:<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;for element in array where someCondition(element) {<br>&gt; &gt; &gt;// …<br>&gt; &gt; &gt;}<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;which basically acts like<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;for element in array {<br>&gt; &gt; &gt;guard someCondition(element) else { continue }<br>&gt; &gt; &gt;// …<br>&gt; &gt; &gt;}<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;Sometimes you want to break out of the loop when the condition isn’t met instead. I propose a while clause:<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;for element in array while someCondition(element) {<br>&gt; &gt; &gt;// …<br>&gt; &gt; &gt;}<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;which would be syntactic sugar for<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;for element in array {<br>&gt; &gt; &gt;guard someCondition(element) else { break }<br>&gt; &gt; &gt;…<br>&gt; &gt; &gt;}<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;I can see this particularly being useful if we have a sorted array and we already know that once the condition isn’t met, it won’t be met either for subsequent elements. Another use case could be an infinite sequence that we want to cut off somewhere (which is simply not possible using a where clause).<br>&gt; &gt; &gt;_______________________________________________<br>&gt; &gt; &gt;swift-evolution mailing list<br>&gt; &gt; &gt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)<br>&gt; &gt; &gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; <br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org(mailto:swift-evolution at swift.org)<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June  7, 2016 at 03:00:00pm</p></header><div class="content"><p>On Tue, Jun 7, 2016 at 2:39 PM, Tim Vermeulen &lt;tvermeulen at me.com&gt; wrote:<br></p><p>&gt; &gt; `while let element = sequence.next() where condition {…}`<br>&gt;<br>&gt; This is not a good alternative. First of all, it uses `while let` and<br>&gt; `next()` instead of `for … in` which is way more complex than necessary.<br>&gt; Also, if we want to skip over some elements, we either have to use<br>&gt;<br>&gt; `sequence.lazy.filter({ someCondition($0) }).next()`<br>&gt;<br>&gt; which is very hard to read compared to the proposal, or<br>&gt;<br>&gt; `guard someCondition(element) else { continue }`<br>&gt;<br>&gt; which is certainly better, but the added noise is still not very elegant.<br>&gt; It’s also slightly confusing because we’d be both evaluating a condition<br>&gt; outside of the loop body and inside the body.<br>&gt;<br>&gt; &gt; `for element in sequence.lazy.filter({ condition }) {…}`<br>&gt;<br>&gt; Not something I would go for either, again, because of the boilerplate<br>&gt; code. You end up with an anonymous closure parameter despite already having<br>&gt; named the element “element”, unless you name the parameter, but then you’d<br>&gt; have to name it twice. Also, `.lazy.filter({ condition })` is a lot harder<br>&gt; for beginners to grasp than a `where` or `while` keyword.<br>&gt;<br>&gt; &gt; And it can be explicitly spelled out inside the loop<br>&gt;<br>&gt; Probably the best option for now. In my opinion it’s still a bit confusing<br>&gt; to enter the loop body but then decide to leave anyways, but it’s not too<br>&gt; bad.<br>&gt;<br></p><p>I think it&#39;s a very good option, so we don&#39;t really disagree here :)<br></p><p>The bottom line is this: we have powerful methods on Sequence and<br>Collection that allow you to iterate over conforming types without ever<br>writing a loop. You&#39;re right that it becomes harder to read when you put<br>them in a condition statement. But it&#39;s not just because there are dots and<br>braces and dollar signs. Taken to the extreme, you could probably figure<br>out a way to rewrite the whole body of a loop into the condition statement<br>itself, leaving only empty braces. But that would be very silly and very<br>unreadable even if we didn&#39;t use dots and braces and dollar signs.<br></p><p>Clearly, we both agree that a good way is to stick with how things were<br>done in the old days, where things that are evaluated every iteration<br>strictly inside the loop. Features like `where` clauses and `while` clauses<br>provide new sugar that removes the punctuation (you call it &quot;noise&quot;) when<br>using the same powerful methods on Sequence and Collection that we already<br>have, thus *encouraging* more things to be put into the condition<br>statement. Here, I disagree with you this would make for more readable<br>code. As you and I agree, if the alternative to `sequence.lazy.filter<br>{...}` is to put things inside the loop, we&#39;ll think twice about it and put<br>things inside the loop. That, IMO, is where they best belong.<br></p><p><br>&gt; &gt; You&#39;re describing a while loop:<br>&gt; &gt; `while let element = sequence.next() where condition {...}`<br>&gt; &gt;<br>&gt; &gt; Which as we&#39;ve discussed can already be re-written with a for loop<br>&gt; (which, yes, can be lazy):<br>&gt; &gt; `for element in sequence.lazy.filter({ condition }) {...}`<br>&gt; &gt;<br>&gt; &gt; And it can be explicitly spelled out inside the loop, a definite<br>&gt; readability gain for the same reason guard always requires an explicit else<br>&gt; block.<br>&gt; &gt;<br>&gt; &gt; What do you gain with a new keyword?<br>&gt; &gt;<br>&gt; &gt; On Tue, Jun 7, 2016 at 05:02 Haravikk via swift-evolution&lt;<br>&gt; swift-evolution at swift.org(mailto:swift-evolution at swift.org)&gt;wrote:<br>&gt; &gt; &gt; I’m a +1 for this idea. Like Thorsten I was initially a little<br>&gt; concerned that while and where may look too similar, but actually I find<br>&gt; them visually distinct enough, and actually in my code I’m probably more<br>&gt; likely to use while than where on for loops, although both are useful.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;On 6 Jun 2016, at 11:15, Tim Vermeulen via swift-evolution&lt;<br>&gt; swift-evolution at swift.org(mailto:swift-evolution at swift.org)&gt;wrote:<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;We can already use a where clause in a for loop like this:<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;for element in array where someCondition(element) {<br>&gt; &gt; &gt; &gt;// …<br>&gt; &gt; &gt; &gt;}<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;which basically acts like<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;for element in array {<br>&gt; &gt; &gt; &gt;guard someCondition(element) else { continue }<br>&gt; &gt; &gt; &gt;// …<br>&gt; &gt; &gt; &gt;}<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;Sometimes you want to break out of the loop when the condition isn’t<br>&gt; met instead. I propose a while clause:<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;for element in array while someCondition(element) {<br>&gt; &gt; &gt; &gt;// …<br>&gt; &gt; &gt; &gt;}<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;which would be syntactic sugar for<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;for element in array {<br>&gt; &gt; &gt; &gt;guard someCondition(element) else { break }<br>&gt; &gt; &gt; &gt;…<br>&gt; &gt; &gt; &gt;}<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;I can see this particularly being useful if we have a sorted array<br>&gt; and we already know that once the condition isn’t met, it won’t be met<br>&gt; either for subsequent elements. Another use case could be an infinite<br>&gt; sequence that we want to cut off somewhere (which is simply not possible<br>&gt; using a where clause).<br>&gt; &gt; &gt; &gt;_______________________________________________<br>&gt; &gt; &gt; &gt;swift-evolution mailing list<br>&gt; &gt; &gt; &gt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)<br>&gt; &gt; &gt; &gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; _______________________________________________<br>&gt; &gt; &gt; swift-evolution mailing list<br>&gt; &gt; &gt; swift-evolution at swift.org(mailto:swift-evolution at swift.org)<br>&gt; &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160607/020a6ed3/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
