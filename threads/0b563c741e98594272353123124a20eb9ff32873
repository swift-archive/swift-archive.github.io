<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Reconsidering SE-0003 Removing var from Function Parameters and Pattern Matching</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 29, 2016 at 08:00:00am</p></header><div class="content"><p>on Thu Jan 28 2016, Thorsten Seitz &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; This is called flow typing in Ceylon and they are using &quot;exists&quot; for<br>&gt; that case but testing for conformance with &quot;is&quot; works just the same<br>&gt; way there. The latter is of importance because the common use of union<br>&gt; types in Ceylon.<br>&gt;<br>&gt; if exists foo {<br>&gt;         // foo is non-optional here<br>&gt; }<br>&gt;<br>&gt; if foo is String {<br>&gt;         // foo is of type String here<br>&gt; }<br></p><p>FWIW, some of us are concerned that if the types of names change<br>without being announced by a let or var binding, it will be confusing.<br>That&#39;s one reason we haven&#39;t gone this way in the past.<br></p><p>&gt; -Thorsten<br>&gt;<br>&gt;&gt; Am 28.01.2016 um 19:08 schrieb Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt; <br>&gt;&gt;    if bind foo {<br>&gt;&gt;        // foo is non-optional in here<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt;    somethingAsync { [weak self] in<br>&gt;&gt;        guard bind self else { return }<br>&gt;&gt;        // ...<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt; Elegant when you want to rebind the same name!<br>&gt;&gt; <br>&gt;&gt; Jacob<br>&gt;&gt; <br>&gt;&gt;&gt; On Thu, Jan 28, 2016 at 10:05 AM, Erica Sadun via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; Do you realize how much confusion it would save if Swift just went with<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if bind foo = bar {...}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; with let semantics?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- Erica<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt; On Jan 28, 2016, at 11:03 AM, Joe Groff via swift-evolution<br>&gt;&gt;&gt; &gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;&gt; On Jan 28, 2016, at 12:43 AM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; We have a lot of evidence that &#39;if var&#39; confuses people—a lot<br>&gt;&gt;&gt; &gt;&gt;&gt; of users think that &#39;if var&#39; and &#39;var&#39; bindings in case<br>&gt;&gt;&gt; &gt;&gt;&gt; patterns will write back to the original value when this isn&#39;t<br>&gt;&gt;&gt; &gt;&gt;&gt; the case.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; Can we address this with a diagnostic?<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;      var bar: Int? = 1<br>&gt;&gt;&gt; &gt;&gt;      if var foo = bar {<br>&gt;&gt;&gt; &gt;&gt;              foo += 1        // Warning: Value is never used after modification (foo is a copy, not an alias)<br>&gt;&gt;&gt; &gt;&gt;      }<br>&gt;&gt;&gt; &gt;&gt;      print(bar)<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; Good idea.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; -Joe<br>&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Reconsidering SE-0003 Removing var from Function Parameters and Pattern Matching</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>January 29, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Jan 29, 2016, at 8:54, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Thu Jan 28 2016, Thorsten Seitz &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; This is called flow typing in Ceylon and they are using &quot;exists&quot; for<br>&gt;&gt; that case but testing for conformance with &quot;is&quot; works just the same<br>&gt;&gt; way there. The latter is of importance because the common use of union<br>&gt;&gt; types in Ceylon.<br>&gt;&gt; <br>&gt;&gt; if exists foo {<br>&gt;&gt;        // foo is non-optional here<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; if foo is String {<br>&gt;&gt;        // foo is of type String here<br>&gt;&gt; }<br>&gt; <br>&gt; FWIW, some of us are concerned that if the types of names change<br>&gt; without being announced by a let or var binding, it will be confusing.<br>&gt; That&#39;s one reason we haven&#39;t gone this way in the past.<br></p><p>It&#39;s also problematic if &#39;foo&#39; is mutable, because then it could go from being non-nil to being nil. You could restrict it to constants, but then it doesn&#39;t work on instance properties.<br></p><p>Jordan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/eb7d512a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>Reconsidering SE-0003 Removing var from Function Parameters and Pattern Matching</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>January 30, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; Am 29.01.2016 um 20:11 schrieb Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Jan 29, 2016, at 8:54, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Thu Jan 28 2016, Thorsten Seitz &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; This is called flow typing in Ceylon and they are using &quot;exists&quot; for<br>&gt;&gt;&gt; that case but testing for conformance with &quot;is&quot; works just the same<br>&gt;&gt;&gt; way there. The latter is of importance because the common use of union<br>&gt;&gt;&gt; types in Ceylon.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if exists foo {<br>&gt;&gt;&gt;        // foo is non-optional here<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if foo is String {<br>&gt;&gt;&gt;        // foo is of type String here<br>&gt;&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; FWIW, some of us are concerned that if the types of names change<br>&gt;&gt; without being announced by a let or var binding, it will be confusing.<br>&gt;&gt; That&#39;s one reason we haven&#39;t gone this way in the past.<br></p><p>Actually I find the common pattern `if let x = x { … }` which uses shadowing to be more confusing as it looks like a no-op.<br>And of course this can be circumvented in many cases by using a different name but in my experience there often is no other good name.<br></p><p><br>&gt; It&#39;s also problematic if &#39;foo&#39; is mutable, because then it could go from being non-nil to being nil. You could restrict it to constants, but then it doesn&#39;t work on instance properties.<br></p><p><br>Ceylon requires the value to be checked to be non-mutable, but it allows initializing a value within the exists expression (quite similar to `if let`):<br></p><p>So this would not be allowed (all code Swiftified):<br></p><p>var foo: Int? = …<br>if exists foo { // type error: foo must be a constant<br>	…<br>}<br></p><p><br>But this would:<br></p><p>var foo: Int? = …<br>if exists bar = foo {<br>    // bar has type Int<br>    foo = nil<br>}<br></p><p><br>So with `exists` we could do the same as with if-let but the common case would be simpler and more elegant.<br></p><p><br>I’m only afraid that `if var` could not be replaced sensibly by flow typing and would have to be replaced by the following (like the original SE-0003 would have required), which might not be too bad because of less shadowing happening:<br></p><p>var foo: Int? = …<br>if exists foo {<br>    var copy = foo<br>    // mutate and use copy<br>}<br></p><p><br>Ceylon even makes use of `assert` in flow typing which I think is a great feature:<br></p><p>let foo: Int? = ...<br>assert(exists foo) // because I know for some reason that the compiler cannot derive that foo will be not nil<br>// here foo has type Int<br></p><p><br>-Thorsten<br></p><p><br>&gt; <br>&gt; Jordan<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160130/480d7f71/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>Reconsidering SE-0003 Removing var from Function Parameters and Pattern Matching</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>January 29, 2016 at 11:00:00am</p></header><div class="content"><p>On Jan 29, 2016, at 8:54 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Thu Jan 28 2016, Thorsten Seitz &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; This is called flow typing in Ceylon and they are using &quot;exists&quot; for<br>&gt;&gt; that case but testing for conformance with &quot;is&quot; works just the same<br>&gt;&gt; way there. The latter is of importance because the common use of union<br>&gt;&gt; types in Ceylon.<br>&gt;&gt; <br>&gt;&gt; if exists foo {<br>&gt;&gt;        // foo is non-optional here<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; if foo is String {<br>&gt;&gt;        // foo is of type String here<br>&gt;&gt; }<br>&gt; <br>&gt; FWIW, some of us are concerned that if the types of names change<br>&gt; without being announced by a let or var binding, it will be confusing.<br>&gt; That&#39;s one reason we haven&#39;t gone this way in the past.<br>&gt; <br></p><p><br>True enough, but is type narrowing (as in the above) really more confusing than<br></p><p>if let x = x {<br></p><p>}<br></p><p>Nothing there suggests that the type of x should change, yet it does. If eliminating confusion was the goal wouldn&#39;t<br></p><p>if let x = x? {<br></p><p>}<br></p><p>be more explicit?<br></p><p>Tyler <br></p><p><br>&gt;&gt; -Thorsten<br>&gt;&gt; <br>&gt;&gt;&gt; Am 28.01.2016 um 19:08 schrieb Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   if bind foo {<br>&gt;&gt;&gt;       // foo is non-optional in here<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   somethingAsync { [weak self] in<br>&gt;&gt;&gt;       guard bind self else { return }<br>&gt;&gt;&gt;       // ...<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Elegant when you want to rebind the same name!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jacob<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Thu, Jan 28, 2016 at 10:05 AM, Erica Sadun via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; Do you realize how much confusion it would save if Swift just went with<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; if bind foo = bar {...}<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; with let semantics?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- Erica<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jan 28, 2016, at 11:03 AM, Joe Groff via swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jan 28, 2016, at 12:43 AM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; We have a lot of evidence that &#39;if var&#39; confuses people—a lot<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; of users think that &#39;if var&#39; and &#39;var&#39; bindings in case<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; patterns will write back to the original value when this isn&#39;t<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; the case.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Can we address this with a diagnostic?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;     var bar: Int? = 1<br>&gt;&gt;&gt;&gt;&gt;&gt;     if var foo = bar {<br>&gt;&gt;&gt;&gt;&gt;&gt;             foo += 1        // Warning: Value is never used after modification (foo is a copy, not an alias)<br>&gt;&gt;&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;&gt;&gt;     print(bar)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Good idea.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/7604907e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Reconsidering SE-0003 Removing var from Function Parameters and Pattern Matching</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 29, 2016 at 12:00:00pm</p></header><div class="content"><p>on Fri Jan 29 2016, Tyler Cloutier &lt;cloutiertyler-AT-aol.com&gt; wrote:<br></p><p>&gt; On Jan 29, 2016, at 8:54 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Thu Jan 28 2016, Thorsten Seitz &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; This is called flow typing in Ceylon and they are using &quot;exists&quot; for<br>&gt;<br>&gt;&gt;&gt; that case but testing for conformance with &quot;is&quot; works just the same<br>&gt;&gt;&gt; way there. The latter is of importance because the common use of union<br>&gt;&gt;&gt; types in Ceylon.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if exists foo {<br>&gt;&gt;&gt;        // foo is non-optional here<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if foo is String {<br>&gt;&gt;&gt;        // foo is of type String here<br>&gt;&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; FWIW, some of us are concerned that if the types of names change<br>&gt;&gt; without being announced by a let or var binding, it will be confusing.<br>&gt;&gt; That&#39;s one reason we haven&#39;t gone this way in the past.<br>&gt;&gt; <br>&gt;<br>&gt; True enough, but is type narrowing (as in the above) really more confusing than<br>&gt;<br>&gt; if let x = x {<br>&gt;<br>&gt; }<br></p><p>The difference is that in the latter, you don&#39;t *have* to shadow.  I&#39;ve<br>mostly avoided it, and found the results to be quite good.  There&#39;s<br>usually a more appropriate name for the unwrapped thing.<br></p><p>&gt; Nothing there suggests that the type of x should change, yet it<br>&gt; does. If eliminating confusion was the goal wouldn&#39;t<br>&gt;<br>&gt; if let x = x? {<br>&gt;<br>&gt; }<br>&gt;<br>&gt; be more explicit?<br></p><p>I don&#39;t think that addresses the particular confusion we&#39;re discussing,<br>personally.  At least, it wouldn&#39;t for me.<br></p><p>&gt; Tyler <br>&gt;<br>&gt;&gt;&gt; -Thorsten<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Am 28.01.2016 um 19:08 schrieb Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   if bind foo {<br>&gt;&gt;&gt;&gt;       // foo is non-optional in here<br>&gt;&gt;&gt;&gt;   }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   somethingAsync { [weak self] in<br>&gt;&gt;&gt;&gt;       guard bind self else { return }<br>&gt;&gt;&gt;&gt;       // ...<br>&gt;&gt;&gt;&gt;   }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Elegant when you want to rebind the same name!<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Jacob<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Thu, Jan 28, 2016 at 10:05 AM, Erica Sadun via swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; Do you realize how much confusion it would save if Swift just went with<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; if bind foo = bar {...}<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; with let semantics?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -- Erica<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jan 28, 2016, at 11:03 AM, Joe Groff via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jan 28, 2016, at 12:43 AM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; We have a lot of evidence that &#39;if var&#39; confuses people—a lot<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; of users think that &#39;if var&#39; and &#39;var&#39; bindings in case<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; patterns will write back to the original value when this isn&#39;t<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; the case.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Can we address this with a diagnostic?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     var bar: Int? = 1<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     if var foo = bar {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;             foo += 1        // Warning: Value is never used after modification (foo is a copy, not an alias)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     print(bar)<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Good idea.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; -Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-- <br>-Dave<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
