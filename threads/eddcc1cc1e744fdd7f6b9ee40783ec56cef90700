<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[swift-evolution-announce] [Returned for revision] SE-0089: Renaming String.init&lt;T&gt;(_: T)</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>May 27, 2016 at 02:00:00pm</p></header><div class="content"><p>on Thu May 26 2016, Austin Zheng &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I think this is an incredible idea.<br>&gt;<br>&gt; Should we eventually prepare an updated proposal? <br></p><p>I think that&#39;s what “returned for revision” implies ;-)<br></p><p>&gt; Given the need for further discussion I&#39;d be happy to drive it<br>&gt; forward, or if someone else wants they can take over too.<br>&gt;<br>&gt; (inline)<br>&gt;<br>&gt;&gt; On May 25, 2016, at 10:08 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Proposal Link: https://github.com/apple/swift-evolution/blob/master/proposals/0089-rename-string-reflection-init.md<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0089: Renaming String.init&lt;T&gt;(_: T)&quot; ran from May<br>&gt;&gt; 17…23, 2016. The proposal has been *returned for revision* and<br>&gt;&gt; another round of discussion - the core team would love to see the<br>&gt;&gt; revised proposal make it into Swift 3.<br>&gt;&gt; <br>&gt;&gt; The community and core team both want to remove this “footgun” from<br>&gt;&gt; the standard library, where someone could write &quot;String(x)” with the<br>&gt;&gt; intention of getting a value-preserving conversion to String, but<br>&gt;&gt; may instead get a potentially lossy and potentially expensive<br>&gt;&gt; reflection-based conversion to a String.  After extensive<br>&gt;&gt; discussion, the core team recommends that the community consider a<br>&gt;&gt; somewhat more elaborate design:<br>&gt;&gt; <br>&gt;&gt; - Rename the existing reflection-based &quot;String.init&lt;T&gt;(_: T)”<br>&gt;&gt; initializer to &quot;String.init&lt;T&gt;(describing: T)” as recommend by the<br>&gt;&gt; community.  This initializer would rarely be invoked in user code<br>&gt;&gt; directly.<br>&gt;&gt; <br>&gt;&gt; - Introduce a new protocol (for sake of discussion, call it<br>&gt;&gt; “ValuePreservingStringConvertible&quot;) that refines<br>&gt;&gt; CustomStringConvertible but that adds no new requirements.<br>&gt;&gt; Conformance to this protocol indicates that the “description”<br>&gt;&gt; requirement produces a value-preserving representation in String<br>&gt;&gt; form.<br>&gt;&gt; <br>&gt;&gt; - Introduce a new unlabeled initializer on String: &quot;init&lt;T:<br>&gt;&gt; ValuePreservingStringConvertible&gt;(_ v: T) { return v.description }&quot;.<br>&gt;&gt; This permits the “String(x)” syntax to be used on all values of<br>&gt;&gt; types that can be converted to string in a value-preserving way.<br>&gt;&gt; <br>&gt;&gt; - Audit important standard library types (e.g. the integer and<br>&gt;&gt; floating point types), and make them explicitly conform to<br>&gt;&gt; ValuePreservingStringConvertible with an explicitly implemented<br>&gt;&gt; “description” property.<br>&gt;<br>&gt; Yes to all of this, as others have already said.<br>&gt;<br>&gt;&gt; <br>&gt;&gt; - As a performance optimization, change the implementation of the<br>&gt;&gt; string literal interpolation syntax to prefer the unlabeled<br>&gt;&gt; initializer when interpolating a type that is<br>&gt;&gt; ValuePreservingStringConvertible or that has otherwise has an<br>&gt;&gt; unlabeled String initializer, but use the<br>&gt;&gt; &quot;String.init&lt;T&gt;(describing: T)” initializer if not.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; The expected advantages of this design are:<br>&gt;&gt; <br>&gt;&gt; - Swift encourages the T(x) syntax for value preserving conversions, and this design ensures that String(x) continues to work for the value preserving cases.<br>&gt;<br>&gt; Yes. I think doing a little more work to keep this convention is worthwhile.<br>&gt;<br>&gt;&gt; <br>&gt;&gt; - This ensures that the String(x) syntax does not accidentally fall<br>&gt;&gt; off a performance cliff by using the extremely-dynamic reflection<br>&gt;&gt; mechanism unintentionally.<br>&gt;&gt; <br>&gt;&gt; - The preferred “I don’t care how you do it, just convert this value<br>&gt;&gt; to a string somehow” syntax remains string interpolation syntax.<br>&gt;&gt; This syntax is efficient in the cases where the String(x) syntax is<br>&gt;&gt; allowed, but fully general to the other cases where custom<br>&gt;&gt; convert-to-string code has not been provided.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Some remaining open questions:<br>&gt;&gt; <br>&gt;&gt; - Exactly what types should conform to<br>&gt;&gt; ValuePreservingStringConvertible.  It seems clear that integer,<br>&gt;&gt; floating point types, and Character can and should conform.  What<br>&gt;&gt; other types should?<br>&gt;<br>&gt; Like Brent mentioned, there are some types that are natural<br>&gt; candidates, including Foundation types whose conformance could go into<br>&gt; the overlays. NSURL, NSUUID, NSIndexPath. NSData is a borderline<br>&gt; candidate, and probably not a good fit in the end (what encoding to<br>&gt; use? what happens if you get the .description of a 100 MB NSData?<br>&gt; etc). Same with NSDate. Maybe some of the CGStructs, although maybe<br>&gt; the fact that CGFloat differs between platforms will sink that idea.<br>&gt;<br>&gt; Any of the NSObject subclass candidates may require their<br>&gt; `description`s to be altered to meet the semantics, which may or may<br>&gt; not be an acceptable breaking change.<br>&gt;<br>&gt;&gt; <br>&gt;&gt; - Do we need the ValuePreservingStringConvertible at all, or is the<br>&gt;&gt; existing CustomStringConvertible enough?  We already have a few<br>&gt;&gt; protocols for handling string convertibility, it would be great to<br>&gt;&gt; avoid adding another one.<br>&gt;<br>&gt; This is a good question.<br>&gt;<br>&gt; Since a ValuePreservingStringConvertible is, by definition, a type<br>&gt; that can be represented as a string in a lossless and unambiguous<br>&gt; manner, would it be worth requiring a reverse conversion in the form<br>&gt; of a failable initializer taking a string? <br></p><p>Yes.  It would also be worth requiring that round-trip conversion works<br>and produces an equivalent value.<br></p><p>&gt; Some of the proposed ValuePreservingStringConvertible types already<br>&gt; have such functionality today. It would give the protocol a little<br>&gt; more of a reason to exist, as well as encouraging proper conformance.<br>&gt;<br>&gt; Today, `description` is definitely used for both lossless and lossy<br>&gt; string representations, and that&#39;s probably not going to change in the<br>&gt; future.<br></p><p>&gt;<br>&gt;&gt; <br>&gt;&gt; Thank you to Austin Zheng for driving this proposal forward!<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution-announce mailing list<br>&gt;&gt; swift-evolution-announce at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
