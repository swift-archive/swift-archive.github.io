<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/389ea0cf26e2a2d4646bf580da2fb6b5?s=50"></div><header><strong>Redeclaration of guard variable is ignored at top-level</strong> from <string>Martin R</string> &lt;martinr448 at gmail.com&gt;<p>June 16, 2016 at 10:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>I wonder why the Swift compiler does not complain about the<br>redeclaration of `number` after the guard-statement in top-level code:<br></p><p>    // main.swift<br>    import Swift<br></p><p>    guard let number = Int(&quot;1234&quot;) else { fatalError() }<br>    print(number) // Output: 1234<br>    let number = 5678<br>    print(number) // Output: 1234<br></p><p>It looks as if the statement `let number = 5678` is completely ignored.<br></p><p>However, doing the same inside a function causes a compiler error:<br></p><p>    func foo() {<br>        guard let number = Int(&quot;1234&quot;) else { fatalError() }<br>        print(number)<br>        let number = 5678 //  error: definition conflicts with previous value<br>    }<br></p><p>Tested with<br>- Xcode 7.3.1, &quot;Default&quot; and &quot;Snapshot 2016-06-06 (a)&quot; toolchain<br>- Xcode 8 beta.<br></p><p>Am I overlooking something or is that a bug?<br></p><p>Martin<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2024f9524b1e51a54c4251abf0c34f50?s=50"></div><header><strong>Redeclaration of guard variable is ignored at top-level</strong> from <string>Saagar Jha</string> &lt;saagarjha28 at gmail.com&gt;<p>June 17, 2016 at 05:00:00am</p></header><div class="content"><p>Looks like a bug…strangely, lldb’s giving number: Int = 5678.<br></p><p><br>On Thu, Jun 16, 2016 at 10:18 PM Martin R via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Hi,<br>&gt;<br>&gt; I wonder why the Swift compiler does not complain about the<br>&gt; redeclaration of `number` after the guard-statement in top-level code:<br>&gt;<br>&gt;     // main.swift<br>&gt;     import Swift<br>&gt;<br>&gt;     guard let number = Int(&quot;1234&quot;) else { fatalError() }<br>&gt;     print(number) // Output: 1234<br>&gt;     let number = 5678<br>&gt;     print(number) // Output: 1234<br>&gt;<br>&gt; It looks as if the statement `let number = 5678` is completely ignored.<br>&gt;<br>&gt; However, doing the same inside a function causes a compiler error:<br>&gt;<br>&gt;     func foo() {<br>&gt;         guard let number = Int(&quot;1234&quot;) else { fatalError() }<br>&gt;         print(number)<br>&gt;         let number = 5678 //  error: definition conflicts with previous<br>&gt; value<br>&gt;     }<br>&gt;<br>&gt; Tested with<br>&gt; - Xcode 7.3.1, &quot;Default&quot; and &quot;Snapshot 2016-06-06 (a)&quot; toolchain<br>&gt; - Xcode 8 beta.<br>&gt;<br>&gt; Am I overlooking something or is that a bug?<br>&gt;<br>&gt; Martin<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-- <br>-Saagar Jha<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160617/a21a9eee/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>Redeclaration of guard variable is ignored at top-level</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>June 17, 2016 at 04:00:00pm</p></header><div class="content"><p>You should file a bug on the first sample.<br></p><p>Zhaoxin<br></p><p>On Fri, Jun 17, 2016 at 1:43 PM, Saagar Jha via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Looks like a bug…strangely, lldb’s giving number: Int = 5678.<br>&gt;<br>&gt;<br>&gt; On Thu, Jun 16, 2016 at 10:18 PM Martin R via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Hi,<br>&gt;&gt;<br>&gt;&gt; I wonder why the Swift compiler does not complain about the<br>&gt;&gt; redeclaration of `number` after the guard-statement in top-level code:<br>&gt;&gt;<br>&gt;&gt;     // main.swift<br>&gt;&gt;     import Swift<br>&gt;&gt;<br>&gt;&gt;     guard let number = Int(&quot;1234&quot;) else { fatalError() }<br>&gt;&gt;     print(number) // Output: 1234<br>&gt;&gt;     let number = 5678<br>&gt;&gt;     print(number) // Output: 1234<br>&gt;&gt;<br>&gt;&gt; It looks as if the statement `let number = 5678` is completely ignored.<br>&gt;&gt;<br>&gt;&gt; However, doing the same inside a function causes a compiler error:<br>&gt;&gt;<br>&gt;&gt;     func foo() {<br>&gt;&gt;         guard let number = Int(&quot;1234&quot;) else { fatalError() }<br>&gt;&gt;         print(number)<br>&gt;&gt;         let number = 5678 //  error: definition conflicts with previous<br>&gt;&gt; value<br>&gt;&gt;     }<br>&gt;&gt;<br>&gt;&gt; Tested with<br>&gt;&gt; - Xcode 7.3.1, &quot;Default&quot; and &quot;Snapshot 2016-06-06 (a)&quot; toolchain<br>&gt;&gt; - Xcode 8 beta.<br>&gt;&gt;<br>&gt;&gt; Am I overlooking something or is that a bug?<br>&gt;&gt;<br>&gt;&gt; Martin<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt; --<br>&gt; -Saagar Jha<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160617/acdaa464/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8e77369a540cf4d35924683e176c7a9c?s=50"></div><header><strong>Redeclaration of guard variable is ignored at top-level</strong> from <string>Mark Lacey</string> &lt;mark.lacey at apple.com&gt;<p>June 17, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; On Jun 16, 2016, at 10:18 PM, Martin R via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; I wonder why the Swift compiler does not complain about the<br>&gt; redeclaration of `number` after the guard-statement in top-level code:<br>&gt; <br>&gt;    // main.swift<br>&gt;    import Swift<br>&gt; <br>&gt;    guard let number = Int(&quot;1234&quot;) else { fatalError() }<br>&gt;    print(number) // Output: 1234<br>&gt;    let number = 5678<br>&gt;    print(number) // Output: 1234<br>&gt; <br>&gt; It looks as if the statement `let number = 5678` is completely ignored.<br>&gt; <br>&gt; However, doing the same inside a function causes a compiler error:<br>&gt; <br>&gt;    func foo() {<br>&gt;        guard let number = Int(&quot;1234&quot;) else { fatalError() }<br>&gt;        print(number)<br>&gt;        let number = 5678 //  error: definition conflicts with previous value<br>&gt;    }<br>&gt; <br>&gt; Tested with<br>&gt; - Xcode 7.3.1, &quot;Default&quot; and &quot;Snapshot 2016-06-06 (a)&quot; toolchain<br>&gt; - Xcode 8 beta.<br>&gt; <br>&gt; Am I overlooking something or is that a bug?<br></p><p>Hi Martin,<br></p><p>Yes, this looks like a bug. Can you open a report at bugs.swift.org &lt;http://bugs.swift.org/&gt;?<br></p><p>Mark<br></p><p>&gt; <br>&gt; Martin<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160617/8c03ba97/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/389ea0cf26e2a2d4646bf580da2fb6b5?s=50"></div><header><strong>Redeclaration of guard variable is ignored at top-level</strong> from <string>Martin R</string> &lt;martinr448 at gmail.com&gt;<p>June 17, 2016 at 10:00:00am</p></header><div class="content"><p>Filed as https://bugs.swift.org/browse/SR-1804.<br></p><p>2016-06-17 7:17 GMT-07:00 Mark Lacey &lt;mark.lacey at apple.com&gt;:<br>&gt;<br>&gt; On Jun 16, 2016, at 10:18 PM, Martin R via swift-users<br>&gt; &lt;swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; Hi,<br>&gt;<br>&gt; I wonder why the Swift compiler does not complain about the<br>&gt; redeclaration of `number` after the guard-statement in top-level code:<br>&gt;<br>&gt;    // main.swift<br>&gt;    import Swift<br>&gt;<br>&gt;    guard let number = Int(&quot;1234&quot;) else { fatalError() }<br>&gt;    print(number) // Output: 1234<br>&gt;    let number = 5678<br>&gt;    print(number) // Output: 1234<br>&gt;<br>&gt; It looks as if the statement `let number = 5678` is completely ignored.<br>&gt;<br>&gt; However, doing the same inside a function causes a compiler error:<br>&gt;<br>&gt;    func foo() {<br>&gt;        guard let number = Int(&quot;1234&quot;) else { fatalError() }<br>&gt;        print(number)<br>&gt;        let number = 5678 //  error: definition conflicts with previous value<br>&gt;    }<br>&gt;<br>&gt; Tested with<br>&gt; - Xcode 7.3.1, &quot;Default&quot; and &quot;Snapshot 2016-06-06 (a)&quot; toolchain<br>&gt; - Xcode 8 beta.<br>&gt;<br>&gt; Am I overlooking something or is that a bug?<br>&gt;<br>&gt;<br>&gt; Hi Martin,<br>&gt;<br>&gt; Yes, this looks like a bug. Can you open a report at bugs.swift.org?<br>&gt;<br>&gt; Mark<br>&gt;<br>&gt;<br>&gt; Martin<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
