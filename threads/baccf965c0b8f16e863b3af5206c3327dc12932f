<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0006 Apply API Guidelines to the Standard Library</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 29, 2016 at 08:00:00am</p></header><div class="content"><p>on Thu Jan 28 2016, Alex Migicovsky &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Jan 27, 2016, at 3:33 PM, Jordan Rose via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Jan 26, 2016, at 18:06, Dany St-Amant via swift-evolution<br>&gt;<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Le 26 janv. 2016 à 19:39, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; a écrit<br>&gt;&gt;&gt;&gt; :<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; on Tue Jan 26 2016, Charles Kissinger &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I agree with all of the small criticisms mentioned below by Radoslaw<br>&gt;&gt;&gt;&gt;&gt; except for the renaming of precondition() to require(). I think it is<br>&gt;&gt;&gt;&gt;&gt; an improvement that it describes an action now, just like assert().<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Interestingly, I was the one that insisted on that change, as I felt<br>&gt;&gt;&gt;&gt; “precondition” was too much of a term-of-art and “require” would be more<br>&gt;&gt;&gt;&gt; accessible, but I am now regretting that decision.  This function is not<br>&gt;&gt;&gt;&gt; conceptually an action; like “assert,” it&#39;s a declarative statement, and<br>&gt;&gt;&gt;&gt; “precondition” conveyed that aspect much better, IMO.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; How about expect()? Should not have much string attached to it. Only thing coming to mind is the <br>&gt;&gt;&gt; TCL extension used for automation.<br>&gt;&gt; <br>&gt;&gt; That&#39;s not bad, but to me &quot;expect&quot; seems more open-ended than<br>&gt;&gt; &quot;require&quot; or &quot;precondition&quot;, i.e. &quot;if it isn&#39;t true, then what?&quot;. I<br>&gt;&gt; don&#39;t assume that it&#39;s going to be fatal.<br>&gt;&gt; <br>&gt;&gt; (It even feels a little like an optimization hint to me, like<br>&gt;&gt; &quot;expect(self.dynamicType === BaseClass.self)&quot;. It could still be a<br>&gt;&gt; subclass, but the compiler would know what the common case is.)<br>&gt;<br>&gt; Someone I spoke with had a good idea about this IMO. They recommended<br>&gt; we have debugAssert and releaseAssert (or debugRequire and<br>&gt; releaseRequire). I think this makes the semantics obvious and has<br>&gt; consistent terminology between the functions. There’s no question at<br>&gt; the call site what was intended.<br></p><p>Here&#39;s the problem with that suggestion: these things really have<br>completely different purposes; we don&#39;t want them to lose the semantic<br>distinction that &quot;this is a sanity check (assert)&quot; and &quot;this is checking<br>whether my client is breaking his contract (precondition).&quot;  <br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/78dda0d326b6c8eff7c2679f55346a7f?s=50"></div><header><strong>[Review] SE-0006 Apply API Guidelines to the Standard Library</strong> from <string>Alex Migicovsky</string> &lt;migi at apple.com&gt;<p>January 29, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jan 29, 2016, at 8:33 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Thu Jan 28 2016, Alex Migicovsky &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On Jan 27, 2016, at 3:33 PM, Jordan Rose via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 26, 2016, at 18:06, Dany St-Amant via swift-evolution<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Le 26 janv. 2016 à 19:39, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; a écrit<br>&gt;&gt;&gt;&gt;&gt; :<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; on Tue Jan 26 2016, Charles Kissinger &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I agree with all of the small criticisms mentioned below by Radoslaw<br>&gt;&gt;&gt;&gt;&gt;&gt; except for the renaming of precondition() to require(). I think it is<br>&gt;&gt;&gt;&gt;&gt;&gt; an improvement that it describes an action now, just like assert().<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Interestingly, I was the one that insisted on that change, as I felt<br>&gt;&gt;&gt;&gt;&gt; “precondition” was too much of a term-of-art and “require” would be more<br>&gt;&gt;&gt;&gt;&gt; accessible, but I am now regretting that decision.  This function is not<br>&gt;&gt;&gt;&gt;&gt; conceptually an action; like “assert,” it&#39;s a declarative statement, and<br>&gt;&gt;&gt;&gt;&gt; “precondition” conveyed that aspect much better, IMO.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; How about expect()? Should not have much string attached to it. Only thing coming to mind is the <br>&gt;&gt;&gt;&gt; TCL extension used for automation.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That&#39;s not bad, but to me &quot;expect&quot; seems more open-ended than<br>&gt;&gt;&gt; &quot;require&quot; or &quot;precondition&quot;, i.e. &quot;if it isn&#39;t true, then what?&quot;. I<br>&gt;&gt;&gt; don&#39;t assume that it&#39;s going to be fatal.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; (It even feels a little like an optimization hint to me, like<br>&gt;&gt;&gt; &quot;expect(self.dynamicType === BaseClass.self)&quot;. It could still be a<br>&gt;&gt;&gt; subclass, but the compiler would know what the common case is.)<br>&gt;&gt; <br>&gt;&gt; Someone I spoke with had a good idea about this IMO. They recommended<br>&gt;&gt; we have debugAssert and releaseAssert (or debugRequire and<br>&gt;&gt; releaseRequire). I think this makes the semantics obvious and has<br>&gt;&gt; consistent terminology between the functions. There’s no question at<br>&gt;&gt; the call site what was intended.<br>&gt; <br>&gt; Here&#39;s the problem with that suggestion: these things really have<br>&gt; completely different purposes; we don&#39;t want them to lose the semantic<br>&gt; distinction that &quot;this is a sanity check (assert)&quot; and &quot;this is checking<br>&gt; whether my client is breaking his contract (precondition).”  <br></p><p>I think that naming convention works fine as long as you think about the behavior as tied to how the module that contains that code is compiled, right? If you use debugAssert in a module that compiles as debug, then that assert will be checked. If you use releaseAssert, it will be checked in both release and debug. Maybe I’m missing something here though...<br></p><p>One thing I’d really like to improve about the current naming is making it obvious at the call site what the behavior of the function is. I find that with the current names it’s just a memorization game—and I’m not good at memorization :-)<br></p><p>- Alex<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/6663df39/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d30e546d655d1c7ece0464791a9a90d5?s=50"></div><header><strong>[Review] SE-0006 Apply API Guidelines to the Standard Library</strong> from <string>Adrian Kashivskyy</string> &lt;adrian.kashivskyy at me.com&gt;<p>January 29, 2016 at 08:00:00pm</p></header><div class="content"><p>I agree with Radek that renaming `precondition` to `require` and removing `Type` suffixes from protocols will introduce lots of confusion.<br></p><p>Pozdrawiam – Regards,<br>Adrian Kashivskyy<br></p><p>&gt; Wiadomość napisana przez Alex Migicovsky via swift-evolution &lt;swift-evolution at swift.org&gt; w dniu 29.01.2016, o godz. 19:36:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Jan 29, 2016, at 8:33 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Thu Jan 28 2016, Alex Migicovsky &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 27, 2016, at 3:33 PM, Jordan Rose via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jan 26, 2016, at 18:06, Dany St-Amant via swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Le 26 janv. 2016 à 19:39, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit<br>&gt;&gt;&gt;&gt;&gt;&gt; :<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; on Tue Jan 26 2016, Charles Kissinger &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I agree with all of the small criticisms mentioned below by Radoslaw<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; except for the renaming of precondition() to require(). I think it is<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; an improvement that it describes an action now, just like assert().<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Interestingly, I was the one that insisted on that change, as I felt<br>&gt;&gt;&gt;&gt;&gt;&gt; “precondition” was too much of a term-of-art and “require” would be more<br>&gt;&gt;&gt;&gt;&gt;&gt; accessible, but I am now regretting that decision.  This function is not<br>&gt;&gt;&gt;&gt;&gt;&gt; conceptually an action; like “assert,” it&#39;s a declarative statement, and<br>&gt;&gt;&gt;&gt;&gt;&gt; “precondition” conveyed that aspect much better, IMO.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; How about expect()? Should not have much string attached to it. Only thing coming to mind is the <br>&gt;&gt;&gt;&gt;&gt; TCL extension used for automation.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; That&#39;s not bad, but to me &quot;expect&quot; seems more open-ended than<br>&gt;&gt;&gt;&gt; &quot;require&quot; or &quot;precondition&quot;, i.e. &quot;if it isn&#39;t true, then what?&quot;. I<br>&gt;&gt;&gt;&gt; don&#39;t assume that it&#39;s going to be fatal.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; (It even feels a little like an optimization hint to me, like<br>&gt;&gt;&gt;&gt; &quot;expect(self.dynamicType === BaseClass.self)&quot;. It could still be a<br>&gt;&gt;&gt;&gt; subclass, but the compiler would know what the common case is.)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Someone I spoke with had a good idea about this IMO. They recommended<br>&gt;&gt;&gt; we have debugAssert and releaseAssert (or debugRequire and<br>&gt;&gt;&gt; releaseRequire). I think this makes the semantics obvious and has<br>&gt;&gt;&gt; consistent terminology between the functions. There’s no question at<br>&gt;&gt;&gt; the call site what was intended.<br>&gt;&gt; <br>&gt;&gt; Here&#39;s the problem with that suggestion: these things really have<br>&gt;&gt; completely different purposes; we don&#39;t want them to lose the semantic<br>&gt;&gt; distinction that &quot;this is a sanity check (assert)&quot; and &quot;this is checking<br>&gt;&gt; whether my client is breaking his contract (precondition).”  <br>&gt; <br>&gt; I think that naming convention works fine as long as you think about the behavior as tied to how the module that contains that code is compiled, right? If you use debugAssert in a module that compiles as debug, then that assert will be checked. If you use releaseAssert, it will be checked in both release and debug. Maybe I’m missing something here though...<br>&gt; <br>&gt; One thing I’d really like to improve about the current naming is making it obvious at the call site what the behavior of the function is. I find that with the current names it’s just a memorization game—and I’m not good at memorization :-)<br>&gt; <br>&gt; - Alex<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/0f3d23d7/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
