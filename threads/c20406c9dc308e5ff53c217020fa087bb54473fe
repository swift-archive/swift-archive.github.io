<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>Implementing SE-0111: Remove type system significance of function argument labels</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>July 27, 2016 at 09:00:00pm</p></header><div class="content"><p>Hi all,<br></p><p>I’ve been working on implementing SE-0111: Remove type system significance of function argument labels &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0111-remove-arg-label-type-significance.md&gt;. Actually implementing this feature completely requires major surgery to the type system, ASTs, and so on. While &lt;https://github.com/apple/swift/commit/847b78245a473cc7160e45289311c85b6d6365b5&gt; I &lt;https://github.com/apple/swift/commit/604adff1bdb9c6f515accd284156af4fe8153cde&gt; am &lt;https://github.com/apple/swift/commit/5cce5c4d1d6121cc812d63f74441a612c33f5226&gt; making &lt;https://github.com/apple/swift/commit/b40c89d4c6777bb69c3f7efe0e8ab8748c476994&gt; progress &lt;https://github.com/apple/swift/commit/e4d8f486a81021a2f66d8796dd3acaff3e02e4db&gt; on this feature, it’s become clear that I cannot finish this in the Swift 3 time frame.<br></p><p>On the other hand, this is a source-breaking change that we’ve accepted for Swift 3, and it’s one that is hard to implement for Swift 4 in a way that also allows us to implement the Swift 3 model in the same compiler. Rock, meet hard place.<br></p><p>So, I’m going to try a new implementation strategy, which (I think) will allow us to get the behavior of SE-0111 but without refactoring the whole world. Essentially, we need the argument labels to persist in the type system when we’re performing a call to a function. In all other cases, the argument labels should be stripped from the type. Note that we can determine *syntactically* whether a particular declaration reference is a direct callee, which means we can indicate when a particular reference should have argument labels (for call matching) or nor (for unapplied references to a function). For example, given:<br></p><p>	func f(a: Int, b: Int) -&gt; Int { … }<br></p><p>	let f1 = f(a: 1, b: 1)    // treat ‘f’ as having type (a: Int, b: Int) -&gt; Int, because we need argument labels for type checking<br>	let f2 = f                    // treat “f’ as having type (Int, Int) -&gt; Int, because argument labels aren’t part of the type of ‘f’ (conceptually)<br>	let f3 = f(a:b:)(1, 2)   // treat ‘f’ as having type (Int, Int) -&gt; Int, because references that include the argument labels don’t need further matching of the argument labels<br></p><p>References to instances methods on a metatype are a bit more interesting, because of the curried ’Self’, but can still be handled syntactically:<br></p><p>	struct X {<br>	  func g(a: Int, b: Int) -&gt; Int { … }<br>	}<br></p><p>	let x = X()<br>	let g1 = X.g                      // treat “X.g” as having type (X) -&gt; (Int, Int) -&gt; Int, because argument labels aren’t part of the type of ‘g’ (conceptually)<br>	let g2 = X.g(x)                  // treat “X.g” as having type (X) -&gt; (Int, Int) -&gt; Int, because argument labels aren’t part of the type of ‘g’ (conceptually)<br>	let g3 = X.g(x)(a: 1, b: 2)  // treat  “X.g” has having type (X) -&gt; (a: Int, b: Int) -&gt; Int, because the argument labels are needed to match up the arguments at the call site<br>	let g3 = X.g(a:b:)(x)(1, 2)  // treat  “X.g” has having type (X) -&gt; (Int, Int) -&gt; Int, because references that include the argument labels don’t need further matching of those argument labels<br></p><p>We can deal with this by, basically, computing the number of direct applications to a given declaration and recording that in the AST. Then we use that information when forming a reference to the given function declaration.<br></p><p>Along with this, we eliminate the ability to write a function type with argument labels in the type system, so we get the “var f: (_ a: Int, _ b: Int) -&gt; Int” syntactic change as well.<br></p><p>	- Doug<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160727/c20473fe/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>Implementing SE-0111: Remove type system significance of function argument labels</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>July 29, 2016 at 01:00:00am</p></header><div class="content"><p>Just an update on this for anyone watching at home… this approach has worked out quite well. With some changes I merged earlier today, along with<br></p><p>	https://github.com/apple/swift/pull/3857 &lt;https://github.com/apple/swift/pull/3857&gt;<br></p><p>this feature is nearly complete, albeit behind a frontend flag (-suppress-argument-labels-in-types). I have local diffs that enable this feature by default. There are still 8 failures to work through (all IDE- and SourceKit-related), and of course I’ll need to roll the feature throughout swiftpm/corelibs/etc.<br></p><p>	- Doug<br></p><p>&gt; On Jul 27, 2016, at 9:58 PM, Douglas Gregor via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; I’ve been working on implementing SE-0111: Remove type system significance of function argument labels &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0111-remove-arg-label-type-significance.md&gt;. Actually implementing this feature completely requires major surgery to the type system, ASTs, and so on. While &lt;https://github.com/apple/swift/commit/847b78245a473cc7160e45289311c85b6d6365b5&gt; I &lt;https://github.com/apple/swift/commit/604adff1bdb9c6f515accd284156af4fe8153cde&gt; am &lt;https://github.com/apple/swift/commit/5cce5c4d1d6121cc812d63f74441a612c33f5226&gt; making &lt;https://github.com/apple/swift/commit/b40c89d4c6777bb69c3f7efe0e8ab8748c476994&gt; progress &lt;https://github.com/apple/swift/commit/e4d8f486a81021a2f66d8796dd3acaff3e02e4db&gt; on this feature, it’s become clear that I cannot finish this in the Swift 3 time frame.<br>&gt; <br>&gt; On the other hand, this is a source-breaking change that we’ve accepted for Swift 3, and it’s one that is hard to implement for Swift 4 in a way that also allows us to implement the Swift 3 model in the same compiler. Rock, meet hard place.<br>&gt; <br>&gt; So, I’m going to try a new implementation strategy, which (I think) will allow us to get the behavior of SE-0111 but without refactoring the whole world. Essentially, we need the argument labels to persist in the type system when we’re performing a call to a function. In all other cases, the argument labels should be stripped from the type. Note that we can determine *syntactically* whether a particular declaration reference is a direct callee, which means we can indicate when a particular reference should have argument labels (for call matching) or nor (for unapplied references to a function). For example, given:<br>&gt; <br>&gt; 	func f(a: Int, b: Int) -&gt; Int { … }<br>&gt; <br>&gt; 	let f1 = f(a: 1, b: 1)    // treat ‘f’ as having type (a: Int, b: Int) -&gt; Int, because we need argument labels for type checking<br>&gt; 	let f2 = f                    // treat “f’ as having type (Int, Int) -&gt; Int, because argument labels aren’t part of the type of ‘f’ (conceptually)<br>&gt; 	let f3 = f(a:b:)(1, 2)   // treat ‘f’ as having type (Int, Int) -&gt; Int, because references that include the argument labels don’t need further matching of the argument labels<br>&gt; <br>&gt; References to instances methods on a metatype are a bit more interesting, because of the curried ’Self’, but can still be handled syntactically:<br>&gt; <br>&gt; 	struct X {<br>&gt; 	  func g(a: Int, b: Int) -&gt; Int { … }<br>&gt; 	}<br>&gt; <br>&gt; 	let x = X()<br>&gt; 	let g1 = X.g                      // treat “X.g” as having type (X) -&gt; (Int, Int) -&gt; Int, because argument labels aren’t part of the type of ‘g’ (conceptually)<br>&gt; 	let g2 = X.g(x)                  // treat “X.g” as having type (X) -&gt; (Int, Int) -&gt; Int, because argument labels aren’t part of the type of ‘g’ (conceptually)<br>&gt; 	let g3 = X.g(x)(a: 1, b: 2)  // treat  “X.g” has having type (X) -&gt; (a: Int, b: Int) -&gt; Int, because the argument labels are needed to match up the arguments at the call site<br>&gt; 	let g3 = X.g(a:b:)(x)(1, 2)  // treat  “X.g” has having type (X) -&gt; (Int, Int) -&gt; Int, because references that include the argument labels don’t need further matching of those argument labels<br>&gt; <br>&gt; We can deal with this by, basically, computing the number of direct applications to a given declaration and recording that in the AST. Then we use that information when forming a reference to the given function declaration.<br>&gt; <br>&gt; Along with this, we eliminate the ability to write a function type with argument labels in the type system, so we get the “var f: (_ a: Int, _ b: Int) -&gt; Int” syntactic change as well.<br>&gt; <br>&gt; 	- Doug<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160729/2d909568/attachment-0001.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
