<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c0196d32c5877957590e3b9f6e74df09?s=50"></div><header><strong>Database API/Framework</strong> from <string>Ron Olson</string> &lt;tachoknight at gmail.com&gt;<p>October 25, 2016 at 12:00:00pm</p></header><div class="content"><p>Hi all-<br></p><p>I&#39;ve been working with Swift more on Linux than macOS and am very <br>excited to see the formation of this group. Looking at the server api <br>workgroup&#39;s focus, I notice it&#39;s primarily low-level interaction with <br>the operating system. When might it be a good time to bring up the <br>possibility of creating a database-specific framework for those folks <br>who want to work directly with Postgres, MySQL, even DB2 and Oracle; I&#39;m <br>thinking a JDBC-inspired framework that drivers could be written <br>against.<br></p><p>Thanks,<br></p><p>Ron<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d00f5acbaa7d24e0900e5045462e008?s=50"></div><header><strong>Database API/Framework</strong> from <string>Chris Bailey</string> &lt;BAILEYC at uk.ibm.com&gt;<p>October 25, 2016 at 07:00:00pm</p></header><div class="content"><p>Hi Ron:<br></p><p>As you say, that&#39;s outside of the scope of the work group, however I do <br>think its a valuable area that the various existing web framework groups <br>might be interested in collaborating on. Having a common, recognized <br>framework that the database providers or third parties would be interested <br>in writing database drivers for would be a huge step forward.<br></p><p>I know that Vapor has its Fluent ORM framework, and that its an area that <br>the Kitura team are looking at as well, so your post might kick-start some <br>wider discussion.<br></p><p>Chris<br></p><p><br></p><p><br>From:   Ron Olson via swift-server-dev &lt;swift-server-dev at swift.org&gt;<br>To:     swift-server-dev at swift.org<br>Date:   25/10/2016 18:54<br>Subject:        [swift-server-dev] Database API/Framework<br>Sent by:        swift-server-dev-bounces at swift.org<br></p><p><br></p><p>Hi all-<br></p><p>I&#39;ve been working with Swift more on Linux than macOS and am very <br>excited to see the formation of this group. Looking at the server api <br>workgroup&#39;s focus, I notice it&#39;s primarily low-level interaction with <br>the operating system. When might it be a good time to bring up the <br>possibility of creating a database-specific framework for those folks <br>who want to work directly with Postgres, MySQL, even DB2 and Oracle; I&#39;m <br>thinking a JDBC-inspired framework that drivers could be written <br>against.<br></p><p>Thanks,<br></p><p>Ron<br>_______________________________________________<br>swift-server-dev mailing list<br>swift-server-dev at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-server-dev<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-server-dev/attachments/20161025/59d5ff21/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d23c2d6c1ccb724044f09d449772ff2?s=50"></div><header><strong>Database API/Framework</strong> from <string>Helge Heß</string> &lt;me at helgehess.eu&gt;<p>October 25, 2016 at 08:00:00pm</p></header><div class="content"><p>Hi Chris,<br></p><p>it is a little unclear what the scope of the group is. Presumably you have some very specific things in mind?<br></p><p>Of course we’ve seen https://swift.org/server-apis/#focus-areas. But what does it actually mean? :-) Looking at it:<br>- base networking: TCP/UDP, DNS. Covered already by libdispatch and the OS’ses?<br>- security: OpenSSL? or some wrapper around both, CC and OpenSSL?<br>- provide low level HTTP parsing: http_parser? Is anyone using something<br>  else?<br>All that seems kinda covered/standard already? Unless maybe you include non-Unix stuff like Windows.<br></p><p>Is this primarily for things like providing a standardised ’swiftier&#39; OpenSSL wrapper (similar to how Objective-GCD wraps libdispatch)?<br>Or would that just be module maps which are shipped by default with Swift and hence can be relied on by all frameworks?<br></p><p>But maybe I’m just a little too impatient :-&gt;<br></p><p>hh<br></p><p>&gt; On 25 Oct 2016, at 20:41, Chris Bailey via swift-server-dev &lt;swift-server-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Ron: <br>&gt; <br>&gt; As you say, that&#39;s outside of the scope of the work group, however I do think its a valuable area that the various existing web framework groups might be interested in collaborating on. Having a common, recognized framework that the database providers or third parties would be interested in writing database drivers for would be a huge step forward. <br>&gt; <br>&gt; I know that Vapor has its Fluent ORM framework, and that its an area that the Kitura team are looking at as well, so your post might kick-start some wider discussion. <br>&gt; <br>&gt; Chris<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; From:        Ron Olson via swift-server-dev &lt;swift-server-dev at swift.org&gt; <br>&gt; To:        swift-server-dev at swift.org <br>&gt; Date:        25/10/2016 18:54 <br>&gt; Subject:        [swift-server-dev] Database API/Framework <br>&gt; Sent by:        swift-server-dev-bounces at swift.org <br>&gt; <br>&gt; <br>&gt; <br>&gt; Hi all-<br>&gt; <br>&gt; I&#39;ve been working with Swift more on Linux than macOS and am very <br>&gt; excited to see the formation of this group. Looking at the server api <br>&gt; workgroup&#39;s focus, I notice it&#39;s primarily low-level interaction with <br>&gt; the operating system. When might it be a good time to bring up the <br>&gt; possibility of creating a database-specific framework for those folks <br>&gt; who want to work directly with Postgres, MySQL, even DB2 and Oracle; I&#39;m <br>&gt; thinking a JDBC-inspired framework that drivers could be written <br>&gt; against.<br>&gt; <br>&gt; Thanks,<br>&gt; <br>&gt; Ron<br>&gt; _______________________________________________<br>&gt; swift-server-dev mailing list<br>&gt; swift-server-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-server-dev<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-server-dev mailing list<br>&gt; swift-server-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-server-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/19ca8ea29768acdbb87dc016d7d9a8e4?s=50"></div><header><strong>Database API/Framework</strong> from <string>Paulo Faria</string> &lt;paulo at zewo.io&gt;<p>October 25, 2016 at 05:00:00pm</p></header><div class="content"><p>Hello, Helge.<br></p><p>Yes, most of the things we’ll cover are already provided by some frameworks, but having an official library joining efforts will be great for the community. We’ll provide full-fledged Swift libraries for the topics mentioned. How they’re going to be developed it’s still to be decided.<br></p><p>Cheers,<br>Paulo<br></p><p>&gt; On Oct 25, 2016, at 4:56 PM, Helge Heß via swift-server-dev &lt;swift-server-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Chris,<br>&gt; <br>&gt; it is a little unclear what the scope of the group is. Presumably you have some very specific things in mind?<br>&gt; <br>&gt; Of course we’ve seen https://swift.org/server-apis/#focus-areas. But what does it actually mean? :-) Looking at it:<br>&gt; - base networking: TCP/UDP, DNS. Covered already by libdispatch and the OS’ses?<br>&gt; - security: OpenSSL? or some wrapper around both, CC and OpenSSL?<br>&gt; - provide low level HTTP parsing: http_parser? Is anyone using something<br>&gt;  else?<br>&gt; All that seems kinda covered/standard already? Unless maybe you include non-Unix stuff like Windows.<br>&gt; <br>&gt; Is this primarily for things like providing a standardised ’swiftier&#39; OpenSSL wrapper (similar to how Objective-GCD wraps libdispatch)?<br>&gt; Or would that just be module maps which are shipped by default with Swift and hence can be relied on by all frameworks?<br>&gt; <br>&gt; But maybe I’m just a little too impatient :-&gt;<br>&gt; <br>&gt; hh<br>&gt; <br>&gt;&gt; On 25 Oct 2016, at 20:41, Chris Bailey via swift-server-dev &lt;swift-server-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi Ron: <br>&gt;&gt; <br>&gt;&gt; As you say, that&#39;s outside of the scope of the work group, however I do think its a valuable area that the various existing web framework groups might be interested in collaborating on. Having a common, recognized framework that the database providers or third parties would be interested in writing database drivers for would be a huge step forward. <br>&gt;&gt; <br>&gt;&gt; I know that Vapor has its Fluent ORM framework, and that its an area that the Kitura team are looking at as well, so your post might kick-start some wider discussion. <br>&gt;&gt; <br>&gt;&gt; Chris<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; From:        Ron Olson via swift-server-dev &lt;swift-server-dev at swift.org&gt; <br>&gt;&gt; To:        swift-server-dev at swift.org <br>&gt;&gt; Date:        25/10/2016 18:54 <br>&gt;&gt; Subject:        [swift-server-dev] Database API/Framework <br>&gt;&gt; Sent by:        swift-server-dev-bounces at swift.org <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Hi all-<br>&gt;&gt; <br>&gt;&gt; I&#39;ve been working with Swift more on Linux than macOS and am very <br>&gt;&gt; excited to see the formation of this group. Looking at the server api <br>&gt;&gt; workgroup&#39;s focus, I notice it&#39;s primarily low-level interaction with <br>&gt;&gt; the operating system. When might it be a good time to bring up the <br>&gt;&gt; possibility of creating a database-specific framework for those folks <br>&gt;&gt; who want to work directly with Postgres, MySQL, even DB2 and Oracle; I&#39;m <br>&gt;&gt; thinking a JDBC-inspired framework that drivers could be written <br>&gt;&gt; against.<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; <br>&gt;&gt; Ron<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-server-dev mailing list<br>&gt;&gt; swift-server-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-server-dev<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-server-dev mailing list<br>&gt;&gt; swift-server-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-server-dev<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-server-dev mailing list<br>&gt; swift-server-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-server-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/684e59a0e53725d2a8291318a42e7ee4?s=50"></div><header><strong>Database API/Framework</strong> from <string>Haris Amin</string> &lt;aminharis7 at gmail.com&gt;<p>October 25, 2016 at 03:00:00pm</p></header><div class="content"><p>Hey everyone,<br></p><p>So I’m currently working on a pure Swift Postgres driver. It has no<br>dependency on libpq at all. I’m parsing the Postgres Wire Protocol (V3)<br>myself and everything seems great. Here are some problems/issues I’m facing<br>that db driver implementers like myself (don’t shoot me this is my first<br>shot at a db driver ;) )  would like to see resolved by this swift server<br>group or we could use some guidance on:<br></p><p>1. A standard socket api, there are a few right now. Currently I’m using<br>IBM’s BlueSocket but really we just need one socket api that works cross<br>platform. From the blog post it seems like that falls under this groups<br>umbrella/objectives<br></p><p>2. A lil more guidance around timestamps + time zones. These are super<br>important for decent compliant swift db drivers. Can we rely on Foundation<br>NSDate and timezones to work well cross platform without issues here?<br></p><p>3. A standard lightweight crypto library to handle authentication. This is<br>something all database driver authors will have to deal with (MD5 hashing<br>etc). During the summer I had been switching between a few libraries but<br>would be great to have this unified, cross platform support for this. Again<br>I think this falls under the umbrella of this organization.<br></p><p>4. Coming from a diverse backend/server background, I’ve seen different<br>lang+environments handle sql interfaces differently. Most have left it up<br>to third party frameworks/ecosystems (ruby/node/python) but some like<br>Golang provide at least a default SQL interface that driver authors can<br>adapt to. I’m starting to lean towards the latter of the two but I’m by no<br>means and expert on anything :). This probably needs more community<br>engagement/proposal.<br></p><p>In short, for me at least, these 4 points would be great to be addressed<br>(the 4th one perhaps is debatable and not as urgent), for database driver<br>authors would greatly help a lot. Pretty much every server side swift<br>framework right now has their own ORM-ish libs/frameworks. That’s awesome!<br>My hope is we can start writing some of the drivers in pure Swift and help<br>all those frameworks/libs get better too.<br></p><p>Just my 2 cents. Perhaps this deserves a thread of its own. Perhaps it<br>doesn’t. I apologize in advance if this is distracting from the current<br>thread :)<br></p><p>-- <br>Haris Amin<br>Sent with Airmail<br></p><p>On October 25, 2016 at 3:21:07 PM, Paulo Faria via swift-server-dev (<br>swift-server-dev at swift.org) wrote:<br></p><p>Hello, Helge.<br></p><p>Yes, most of the things we’ll cover are already provided by some<br>frameworks, but having an official library joining efforts will be great<br>for the community. We’ll provide full-fledged Swift libraries for the<br>topics mentioned. How they’re going to be developed it’s still to be<br>decided.<br></p><p>Cheers,<br>Paulo<br></p><p>&gt; On Oct 25, 2016, at 4:56 PM, Helge Heß via swift-server-dev &lt;<br>swift-server-dev at swift.org&gt; wrote:<br>&gt;<br>&gt; Hi Chris,<br>&gt;<br>&gt; it is a little unclear what the scope of the group is. Presumably you<br>have some very specific things in mind?<br>&gt;<br>&gt; Of course we’ve seen https://swift.org/server-apis/#focus-areas. But what<br>does it actually mean? :-) Looking at it:<br>&gt; - base networking: TCP/UDP, DNS. Covered already by libdispatch and the<br>OS’ses?<br>&gt; - security: OpenSSL? or some wrapper around both, CC and OpenSSL?<br>&gt; - provide low level HTTP parsing: http_parser? Is anyone using something<br>&gt; else?<br>&gt; All that seems kinda covered/standard already? Unless maybe you include<br>non-Unix stuff like Windows.<br>&gt;<br>&gt; Is this primarily for things like providing a standardised ’swiftier&#39;<br>OpenSSL wrapper (similar to how Objective-GCD wraps libdispatch)?<br>&gt; Or would that just be module maps which are shipped by default with Swift<br>and hence can be relied on by all frameworks?<br>&gt;<br>&gt; But maybe I’m just a little too impatient :-&gt;<br>&gt;<br>&gt; hh<br>&gt;<br>&gt;&gt; On 25 Oct 2016, at 20:41, Chris Bailey via swift-server-dev &lt;<br>swift-server-dev at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hi Ron:<br>&gt;&gt;<br>&gt;&gt; As you say, that&#39;s outside of the scope of the work group, however I do<br>think its a valuable area that the various existing web framework groups<br>might be interested in collaborating on. Having a common, recognized<br>framework that the database providers or third parties would be interested<br>in writing database drivers for would be a huge step forward.<br>&gt;&gt;<br>&gt;&gt; I know that Vapor has its Fluent ORM framework, and that its an area<br>that the Kitura team are looking at as well, so your post might kick-start<br>some wider discussion.<br>&gt;&gt;<br>&gt;&gt; Chris<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; From: Ron Olson via swift-server-dev &lt;swift-server-dev at swift.org&gt;<br>&gt;&gt; To: swift-server-dev at swift.org<br>&gt;&gt; Date: 25/10/2016 18:54<br>&gt;&gt; Subject: [swift-server-dev] Database API/Framework<br>&gt;&gt; Sent by: swift-server-dev-bounces at swift.org<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Hi all-<br>&gt;&gt;<br>&gt;&gt; I&#39;ve been working with Swift more on Linux than macOS and am very<br>&gt;&gt; excited to see the formation of this group. Looking at the server api<br>&gt;&gt; workgroup&#39;s focus, I notice it&#39;s primarily low-level interaction with<br>&gt;&gt; the operating system. When might it be a good time to bring up the<br>&gt;&gt; possibility of creating a database-specific framework for those folks<br>&gt;&gt; who want to work directly with Postgres, MySQL, even DB2 and Oracle; I&#39;m<br>&gt;&gt; thinking a JDBC-inspired framework that drivers could be written<br>&gt;&gt; against.<br>&gt;&gt;<br>&gt;&gt; Thanks,<br>&gt;&gt;<br>&gt;&gt; Ron<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-server-dev mailing list<br>&gt;&gt; swift-server-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-server-dev<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-server-dev mailing list<br>&gt;&gt; swift-server-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-server-dev<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-server-dev mailing list<br>&gt; swift-server-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-server-dev<br></p><p><br>_______________________________________________<br>swift-server-dev mailing list<br>swift-server-dev at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-server-dev<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-server-dev/attachments/20161025/12d9cfc6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d23c2d6c1ccb724044f09d449772ff2?s=50"></div><header><strong>Database API/Framework</strong> from <string>Helge Heß</string> &lt;me at helgehess.eu&gt;<p>October 25, 2016 at 10:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>On 25 Oct 2016, at 21:34, Haris Amin &lt;aminharis7 at gmail.com&gt; wrote:<br>&gt; So I’m currently working on a pure Swift Postgres driver.<br></p><p>nice, I’m working on one as well (currently can run only basic queries, nothing fancy).<br></p><p>&gt; 1. A standard socket api, there are a few right now. Currently I’m using IBM’s BlueSocket but really we just need one socket api that works cross platform.<br></p><p>I would be interested what people are really missing here (at that basic level). GCD channels are really quite nice for that kind of stuff (scheduling IO) and are already part of Swift 3. (I personally wonder how they scale compared to something like libuv, but for now I assume they do ;-)<br></p><p>For making the Unix calls a little nicer Swift extensions on the Unix types are IMO pretty awesome, something along those lines:<br></p><p>  https://github.com/NozeIO/Noze.io/blob/master/Sources/net/SocketAddress.swift<br></p><p>I would avoid creating wrappers which are then just wrapped again by the higher level frameworks …<br></p><p>The only real thing I’m missing is SSL support. But that already depends quite a lot on how the higher level frameworks deal with streams in general.<br></p><p><br>&gt; 2. A lil more guidance around timestamps + time zones. These are super important for decent compliant swift db drivers. Can we rely on Foundation NSDate and timezones to work well cross platform without issues here?<br></p><p>If it is part of Foundation you can assume it is supposed to work, right? :-)<br></p><p><br>&gt; 3. A standard lightweight crypto library to handle authentication. This is something all database driver authors will have to deal with (MD5 hashing etc). During the summer I had been switching between a few libraries but would be great to have this unified, cross platform support for this. Again I think this falls under the umbrella of this organization.<br></p><p>+1 (And that should probably be part of Foundation as it is required just the same on the client side).<br></p><p><br>&gt; 4. Coming from a diverse backend/server background, I’ve seen different lang+environments handle sql interfaces differently. Most have left it up to third party frameworks/ecosystems (ruby/node/python) but some like Golang provide at least a default SQL interface that driver authors can adapt to. I’m starting to lean towards the latter of the two but I’m by no means and expert on anything :). This probably needs more community engagement/proposal.<br></p><p>IMHO that sounds more like something the higher level frameworks (ORMs) should be concerned about (as they will define what they want to map from and how, and probably in pretty different ways). But maybe not. Personally I’d like to avoid something like JDBC as it provides little value at extra overhead.<br></p><p>As an example: if I have received a DispatchData from the socket containing a PG row values, I don’t want to first convert that to a JDBC or EOAdaptor record-Dictionary&lt;Key,Any&gt;&gt; which is then mapped to a Customer.purchaseStatus enum. I would rather like to pass up that DispatchData to the highest level and only have it converted at the very last point and only if necessary - sometimes an ORM, but other times it may be just directly streamed into a different format, say JSON (in such cases you can often accomplish zero-copy).<br></p><p>&gt; My hope is we can start writing some of the drivers in pure Swift and help all those frameworks/libs get better too.<br></p><p>Not sure a generic ‘driver&#39; interface will help a lot here. I think you help most by providing a SwiftPQ library which can then be integrated by the ORMs/frameworks in a way which fits best.<br></p><p><br>Anywayz, interesting to see what people come up with :-)<br></p><p>hh<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c0196d32c5877957590e3b9f6e74df09?s=50"></div><header><strong>Database API/Framework</strong> from <string>Ron Olson</string> &lt;tachoknight at gmail.com&gt;<p>October 25, 2016 at 03:00:00pm</p></header><div class="content"><p>I mentioned JDBC because I happened to be looking at some Java code at <br>the time, but I really meant &#39;generic-interface&#39; to provide the <br>lowest-level-but-no-lower-than-necessary access to the database, <br>regardless of whether it was sqlite or postgres. I think Go does a <br>pretty good job of providing that thin layer of abstraction and it&#39;s up <br>the driver writer to implement. After that what somebody wants to do <br>with the results is their business.<br></p><p>Personally I don&#39;t like ORM layers; most of the time I&#39;m writing complex <br>queries that don&#39;t fit neatly into an ORM paradigm and I end up fighting <br>with the framework.<br></p><p>Ron<br></p><p>On 25 Oct 2016, at 15:44, Helge Heß via swift-server-dev wrote:<br></p><p>&gt; Hi,<br>&gt;<br>&gt; On 25 Oct 2016, at 21:34, Haris Amin &lt;aminharis7 at gmail.com&gt; wrote:<br>&gt;&gt; So I’m currently working on a pure Swift Postgres driver.<br>&gt;<br>&gt; nice, I’m working on one as well (currently can run only basic <br>&gt; queries, nothing fancy).<br>&gt;<br>&gt;&gt; 1. A standard socket api, there are a few right now. Currently I’m <br>&gt;&gt; using IBM’s BlueSocket but really we just need one socket api that <br>&gt;&gt; works cross platform.<br>&gt;<br>&gt; I would be interested what people are really missing here (at that <br>&gt; basic level). GCD channels are really quite nice for that kind of <br>&gt; stuff (scheduling IO) and are already part of Swift 3. (I personally <br>&gt; wonder how they scale compared to something like libuv, but for now I <br>&gt; assume they do ;-)<br>&gt;<br>&gt; For making the Unix calls a little nicer Swift extensions on the Unix <br>&gt; types are IMO pretty awesome, something along those lines:<br>&gt;<br>&gt;   https://github.com/NozeIO/Noze.io/blob/master/Sources/net/SocketAddress.swift<br>&gt;<br>&gt; I would avoid creating wrappers which are then just wrapped again by <br>&gt; the higher level frameworks …<br>&gt;<br>&gt; The only real thing I’m missing is SSL support. But that already <br>&gt; depends quite a lot on how the higher level frameworks deal with <br>&gt; streams in general.<br>&gt;<br>&gt;&gt; 2. A lil more guidance around timestamps + time zones. These are <br>&gt;&gt; super important for decent compliant swift db drivers. Can we rely on <br>&gt;&gt; Foundation NSDate and timezones to work well cross platform without <br>&gt;&gt; issues here?<br>&gt;<br>&gt; If it is part of Foundation you can assume it is supposed to work, <br>&gt; right? :-)<br>&gt;<br>&gt;&gt; 3. A standard lightweight crypto library to handle authentication. <br>&gt;&gt; This is something all database driver authors will have to deal with <br>&gt;&gt; (MD5 hashing etc). During the summer I had been switching between a <br>&gt;&gt; few libraries but would be great to have this unified, cross platform <br>&gt;&gt; support for this. Again I think this falls under the umbrella of this <br>&gt;&gt; organization.<br>&gt;<br>&gt; +1 (And that should probably be part of Foundation as it is required <br>&gt; just the same on the client side).<br>&gt;<br>&gt;&gt; 4. Coming from a diverse backend/server background, I’ve seen <br>&gt;&gt; different lang+environments handle sql interfaces differently. Most <br>&gt;&gt; have left it up to third party frameworks/ecosystems <br>&gt;&gt; (ruby/node/python) but some like Golang provide at least a default <br>&gt;&gt; SQL interface that driver authors can adapt to. I’m starting to <br>&gt;&gt; lean towards the latter of the two but I’m by no means and expert <br>&gt;&gt; on anything :). This probably needs more community <br>&gt;&gt; engagement/proposal.<br>&gt;<br>&gt; IMHO that sounds more like something the higher level frameworks <br>&gt; (ORMs) should be concerned about (as they will define what they want <br>&gt; to map from and how, and probably in pretty different ways). But maybe <br>&gt; not. Personally I’d like to avoid something like JDBC as it provides <br>&gt; little value at extra overhead.<br>&gt;<br>&gt; As an example: if I have received a DispatchData from the socket <br>&gt; containing a PG row values, I don’t want to first convert that to a <br>&gt; JDBC or EOAdaptor record-Dictionary&lt;Key,Any&gt;&gt; which is then mapped to <br>&gt; a Customer.purchaseStatus enum. I would rather like to pass up that <br>&gt; DispatchData to the highest level and only have it converted at the <br>&gt; very last point and only if necessary - sometimes an ORM, but other <br>&gt; times it may be just directly streamed into a different format, say <br>&gt; JSON (in such cases you can often accomplish zero-copy).<br>&gt;<br>&gt;&gt; My hope is we can start writing some of the drivers in pure Swift and <br>&gt;&gt; help all those frameworks/libs get better too.<br>&gt;<br>&gt; Not sure a generic ‘driver&#39; interface will help a lot here. I think <br>&gt; you help most by providing a SwiftPQ library which can then be <br>&gt; integrated by the ORMs/frameworks in a way which fits best.<br>&gt;<br>&gt; Anywayz, interesting to see what people come up with :-)<br>&gt;<br>&gt; hh<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-server-dev mailing list<br>&gt; swift-server-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-server-dev<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d00f5acbaa7d24e0900e5045462e008?s=50"></div><header><strong>Database API/Framework</strong> from <string>Chris Bailey</string> &lt;BAILEYC at uk.ibm.com&gt;<p>October 26, 2016 at 12:00:00pm</p></header><div class="content"><p>Hi Helge:<br></p><p>As the initial target areas are low-level function, yes, each of the <br>frameworks has an implementation of most of them today. Those <br>implementations tend to be limited in a number of ways:<br>C libraries are often used directly (via a modulemap)<br>This means that there&#39;s no general &quot;Swift API&quot; that developers can use - <br>you have to interface with the C APIs directly and deal with <br>Unsafe/OpaquePointers etc. Ideally we want Swift developers to only have <br>to write Swift code<br>Where a Swift API wraps a C library its generally for a specific use case<br>As the framework teams have a very specific use case - using it in their <br>framework - the APIs are very directed to what they need to do, rather <br>than being general purpose for a wider set of use cases<br>There&#39;s multiple, similar, packages<br>Most frameworks have their own server socket implementation (mostly by <br>calling Glibc and Darwin), HTTP parser implementation, etc. Not only does <br>this mean we can consolidate the efforts on a single implementation, but <br>it means that anyone wanting to add additional platform support (like <br>Windows) only has to do so once. <br></p><p>Chris<br></p><p><br></p><p><br>From:   Helge Heß via swift-server-dev &lt;swift-server-dev at swift.org&gt;<br>To:     swift-server-dev at swift.org<br>Date:   25/10/2016 19:57<br>Subject:        Re: [swift-server-dev] Database API/Framework<br>Sent by:        swift-server-dev-bounces at swift.org<br></p><p><br></p><p>Hi Chris,<br></p><p>it is a little unclear what the scope of the group is. Presumably you have <br>some very specific things in mind?<br></p><p>Of course we’ve seen https://swift.org/server-apis/#focus-areas. But what <br>does it actually mean? :-) Looking at it:<br>- base networking: TCP/UDP, DNS. Covered already by libdispatch and the <br>OS’ses?<br>- security: OpenSSL? or some wrapper around both, CC and OpenSSL?<br>- provide low level HTTP parsing: http_parser? Is anyone using something<br>  else?<br>All that seems kinda covered/standard already? Unless maybe you include <br>non-Unix stuff like Windows.<br></p><p>Is this primarily for things like providing a standardised ’swiftier&#39; <br>OpenSSL wrapper (similar to how Objective-GCD wraps libdispatch)?<br>Or would that just be module maps which are shipped by default with Swift <br>and hence can be relied on by all frameworks?<br></p><p>But maybe I’m just a little too impatient :-&gt;<br></p><p>hh<br></p><p>&gt; On 25 Oct 2016, at 20:41, Chris Bailey via swift-server-dev <br>&lt;swift-server-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Ron: <br>&gt; <br>&gt; As you say, that&#39;s outside of the scope of the work group, however I do <br>think its a valuable area that the various existing web framework groups <br>might be interested in collaborating on. Having a common, recognized <br>framework that the database providers or third parties would be interested <br>in writing database drivers for would be a huge step forward. <br>&gt; <br>&gt; I know that Vapor has its Fluent ORM framework, and that its an area <br>that the Kitura team are looking at as well, so your post might kick-start <br>some wider discussion. <br>&gt; <br>&gt; Chris<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; From:        Ron Olson via swift-server-dev &lt;swift-server-dev at swift.org&gt; <br></p><p>&gt; To:        swift-server-dev at swift.org <br>&gt; Date:        25/10/2016 18:54 <br>&gt; Subject:        [swift-server-dev] Database API/Framework <br>&gt; Sent by:        swift-server-dev-bounces at swift.org <br>&gt; <br>&gt; <br>&gt; <br>&gt; Hi all-<br>&gt; <br>&gt; I&#39;ve been working with Swift more on Linux than macOS and am very <br>&gt; excited to see the formation of this group. Looking at the server api <br>&gt; workgroup&#39;s focus, I notice it&#39;s primarily low-level interaction with <br>&gt; the operating system. When might it be a good time to bring up the <br>&gt; possibility of creating a database-specific framework for those folks <br>&gt; who want to work directly with Postgres, MySQL, even DB2 and Oracle; I&#39;m <br></p><p>&gt; thinking a JDBC-inspired framework that drivers could be written <br>&gt; against.<br>&gt; <br>&gt; Thanks,<br>&gt; <br>&gt; Ron<br>&gt; _______________________________________________<br>&gt; swift-server-dev mailing list<br>&gt; swift-server-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-server-dev<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-server-dev mailing list<br>&gt; swift-server-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-server-dev<br></p><p>_______________________________________________<br>swift-server-dev mailing list<br>swift-server-dev at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-server-dev<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-server-dev/attachments/20161026/f87a0fbc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aee649b5cf72c73eacd21d6b9e0fc89a?s=50"></div><header><strong>Database API/Framework</strong> from <string>Gregor Milos</string> &lt;gmilos at apple.com&gt;<p>October 26, 2016 at 02:00:00pm</p></header><div class="content"><p>Helge,<br></p><p>Expand on Chris&#39;s answer, modern languages used on server side come with abstractions native to their language. Taking the example of of HTTP protocol:<br>* Go comes with https://golang.org/pkg/net/http/<br>* Netty (defacto standard Java net lib) comes with: http://netty.io/4.1/api/io/netty/handler/codec/http/package-frame.html<br>* etc ...<br>Our task should be to design an API that works well in Swift. Node&#39;s http_parser is &quot;just&quot; an example of an API and a possible way of accelerating the implementation of Swift&#39;s HTTP parser.<br></p><p>Thanks<br>Gregor<br></p><p><br>&gt; On 26 Oct 2016, at 12:39, Chris Bailey via swift-server-dev &lt;swift-server-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Helge: <br>&gt; <br>&gt; As the initial target areas are low-level function, yes, each of the frameworks has an implementation of most of them today. Those implementations tend to be limited in a number of ways:<br>&gt; 	• C libraries are often used directly (via a modulemap)<br>&gt; This means that there&#39;s no general &quot;Swift API&quot; that developers can use - you have to interface with the C APIs directly and deal with Unsafe/OpaquePointers etc. Ideally we want Swift developers to only have to write Swift code<br>&gt; 	• Where a Swift API wraps a C library its generally for a specific use case<br>&gt; As the framework teams have a very specific use case - using it in their framework - the APIs are very directed to what they need to do, rather than being general purpose for a wider set of use cases<br>&gt; 	• There&#39;s multiple, similar, packages<br>&gt; Most frameworks have their own server socket implementation (mostly by calling Glibc and Darwin), HTTP parser implementation, etc. Not only does this mean we can consolidate the efforts on a single implementation, but it means that anyone wanting to add additional platform support (like Windows) only has to do so once.<br>&gt; <br>&gt; Chris<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; From:        Helge Heß via swift-server-dev &lt;swift-server-dev at swift.org&gt; <br>&gt; To:        swift-server-dev at swift.org <br>&gt; Date:        25/10/2016 19:57 <br>&gt; Subject:        Re: [swift-server-dev] Database API/Framework <br>&gt; Sent by:        swift-server-dev-bounces at swift.org <br>&gt; <br>&gt; <br>&gt; <br>&gt; Hi Chris,<br>&gt; <br>&gt; it is a little unclear what the scope of the group is. Presumably you have some very specific things in mind?<br>&gt; <br>&gt; Of course we’ve seen https://swift.org/server-apis/#focus-areas. But what does it actually mean? :-) Looking at it:<br>&gt; - base networking: TCP/UDP, DNS. Covered already by libdispatch and the OS’ses?<br>&gt; - security: OpenSSL? or some wrapper around both, CC and OpenSSL?<br>&gt; - provide low level HTTP parsing: http_parser? Is anyone using something<br>&gt;  else?<br>&gt; All that seems kinda covered/standard already? Unless maybe you include non-Unix stuff like Windows.<br>&gt; <br>&gt; Is this primarily for things like providing a standardised ’swiftier&#39; OpenSSL wrapper (similar to how Objective-GCD wraps libdispatch)?<br>&gt; Or would that just be module maps which are shipped by default with Swift and hence can be relied on by all frameworks?<br>&gt; <br>&gt; But maybe I’m just a little too impatient :-&gt;<br>&gt; <br>&gt; hh<br>&gt; <br>&gt; &gt; On 25 Oct 2016, at 20:41, Chris Bailey via swift-server-dev &lt;swift-server-dev at swift.org&gt; wrote:<br>&gt; &gt; <br>&gt; &gt; Hi Ron: <br>&gt; &gt; <br>&gt; &gt; As you say, that&#39;s outside of the scope of the work group, however I do think its a valuable area that the various existing web framework groups might be interested in collaborating on. Having a common, recognized framework that the database providers or third parties would be interested in writing database drivers for would be a huge step forward. <br>&gt; &gt; <br>&gt; &gt; I know that Vapor has its Fluent ORM framework, and that its an area that the Kitura team are looking at as well, so your post might kick-start some wider discussion. <br>&gt; &gt; <br>&gt; &gt; Chris<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; From:        Ron Olson via swift-server-dev &lt;swift-server-dev at swift.org&gt; <br>&gt; &gt; To:        swift-server-dev at swift.org <br>&gt; &gt; Date:        25/10/2016 18:54 <br>&gt; &gt; Subject:        [swift-server-dev] Database API/Framework <br>&gt; &gt; Sent by:        swift-server-dev-bounces at swift.org <br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; Hi all-<br>&gt; &gt; <br>&gt; &gt; I&#39;ve been working with Swift more on Linux than macOS and am very <br>&gt; &gt; excited to see the formation of this group. Looking at the server api <br>&gt; &gt; workgroup&#39;s focus, I notice it&#39;s primarily low-level interaction with <br>&gt; &gt; the operating system. When might it be a good time to bring up the <br>&gt; &gt; possibility of creating a database-specific framework for those folks <br>&gt; &gt; who want to work directly with Postgres, MySQL, even DB2 and Oracle; I&#39;m <br>&gt; &gt; thinking a JDBC-inspired framework that drivers could be written <br>&gt; &gt; against.<br>&gt; &gt; <br>&gt; &gt; Thanks,<br>&gt; &gt; <br>&gt; &gt; Ron<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-server-dev mailing list<br>&gt; &gt; swift-server-dev at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-server-dev<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-server-dev mailing list<br>&gt; &gt; swift-server-dev at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-server-dev<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-server-dev mailing list<br>&gt; swift-server-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-server-dev<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-server-dev mailing list<br>&gt; swift-server-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-server-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aee649b5cf72c73eacd21d6b9e0fc89a?s=50"></div><header><strong>Database API/Framework</strong> from <string>Gregor Milos</string> &lt;gmilos at apple.com&gt;<p>October 26, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On 26 Oct 2016, at 14:35, Gregor Milos via swift-server-dev &lt;swift-server-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Expand<br>s/Expand/Expanding/<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d23c2d6c1ccb724044f09d449772ff2?s=50"></div><header><strong>Database API/Framework</strong> from <string>Helge Heß</string> &lt;me at helgehess.eu&gt;<p>October 26, 2016 at 04:00:00pm</p></header><div class="content"><p>Hi Gregor,<br></p><p>On 26 Oct 2016, at 15:35, Gregor Milos &lt;gmilos at apple.com&gt; wrote:<br>&gt; Expand on Chris&#39;s answer, modern languages used on server side come with abstractions native to their language.<br></p><p>now that is a pretty bold claim. C, C++, Java, JavaScript, Ruby and Objective-C, don’t. Python does, but few use that. But yes, Go seems to come with one … :-)<br></p><p>&gt; * Netty (defacto standard Java net lib)<br></p><p>Hu?! Since when is Netty the `defacto standard Java net lib`? Netty is a prime example of just being one of many options coming as a 3rd party package (being a good one for sure).<br></p><p><br>OK OK, nitpicking aside, so the goal this:<br></p><p>&gt; Our task should be to design an API that works well in Swift.<br></p><p>Understood. So the plan is indeed to replace the kernel of the HL frameworks with a common Swift `http` server module. A peer to https://golang.org/pkg/net/http/. Fair enough.<br></p><p><br>&gt; Node&#39;s http_parser is &quot;just&quot; an example of an API and a possible way of accelerating the implementation of Swift&#39;s HTTP parser.<br></p><p>The http_parser is not just &#39;an example of an API&#39;, it is an actual implementation of a HTTP parser which can be used from Swift right away. And not a bad one :-) I guess my original question was why people invent their own instead of just using the implementations directly accessible already. Same for OpenSSL, Expat, etc. I really like the Swift-C mapping and how convenient it is to use.<br></p><p>Unless of course we are not talking about providing core support for HL frameworks (which provide the nice API of their choice to backend developers), but for directly providing nice APIs to backend developers as part of the Swift project. (so that they don’t have to grab say Kitura just to build a small micro service).<br></p><p><br>But I think I got you, you want to wrap that kind of thing (or rewrite in pure Swift) in a nicer, Swiftier API. Thanks for clarifying that.<br></p><p>hh<br></p><p><br>&gt;&gt; On 26 Oct 2016, at 12:39, Chris Bailey via swift-server-dev &lt;swift-server-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi Helge:<br>&gt;&gt; <br>&gt;&gt; As the initial target areas are low-level function, yes, each of the frameworks has an implementation of most of them today. Those implementations tend to be limited in a number of ways:<br>&gt;&gt; 	• C libraries are often used directly (via a modulemap)<br>&gt;&gt; This means that there&#39;s no general &quot;Swift API&quot; that developers can use - you have to interface with the C APIs directly and deal with Unsafe/OpaquePointers etc. Ideally we want Swift developers to only have to write Swift code<br>&gt;&gt; 	• Where a Swift API wraps a C library its generally for a specific use case<br>&gt;&gt; As the framework teams have a very specific use case - using it in their framework - the APIs are very directed to what they need to do, rather than being general purpose for a wider set of use cases<br>&gt;&gt; 	• There&#39;s multiple, similar, packages<br>&gt;&gt; Most frameworks have their own server socket implementation (mostly by calling Glibc and Darwin), HTTP parser implementation, etc. Not only does this mean we can consolidate the efforts on a single implementation, but it means that anyone wanting to add additional platform support (like Windows) only has to do so once.<br>&gt;&gt; <br>&gt;&gt; Chris<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; From:        Helge Heß via swift-server-dev &lt;swift-server-dev at swift.org&gt;<br>&gt;&gt; To:        swift-server-dev at swift.org<br>&gt;&gt; Date:        25/10/2016 19:57<br>&gt;&gt; Subject:        Re: [swift-server-dev] Database API/Framework<br>&gt;&gt; Sent by:        swift-server-dev-bounces at swift.org<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Hi Chris,<br>&gt;&gt; <br>&gt;&gt; it is a little unclear what the scope of the group is. Presumably you have some very specific things in mind?<br>&gt;&gt; <br>&gt;&gt; Of course we’ve seen https://swift.org/server-apis/#focus-areas. But what does it actually mean? :-) Looking at it:<br>&gt;&gt; - base networking: TCP/UDP, DNS. Covered already by libdispatch and the OS’ses?<br>&gt;&gt; - security: OpenSSL? or some wrapper around both, CC and OpenSSL?<br>&gt;&gt; - provide low level HTTP parsing: http_parser? Is anyone using something<br>&gt;&gt; else?<br>&gt;&gt; All that seems kinda covered/standard already? Unless maybe you include non-Unix stuff like Windows.<br>&gt;&gt; <br>&gt;&gt; Is this primarily for things like providing a standardised ’swiftier&#39; OpenSSL wrapper (similar to how Objective-GCD wraps libdispatch)?<br>&gt;&gt; Or would that just be module maps which are shipped by default with Swift and hence can be relied on by all frameworks?<br>&gt;&gt; <br>&gt;&gt; But maybe I’m just a little too impatient :-&gt;<br>&gt;&gt; <br>&gt;&gt; hh<br>&gt;&gt; <br>&gt;&gt;&gt; On 25 Oct 2016, at 20:41, Chris Bailey via swift-server-dev &lt;swift-server-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi Ron:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As you say, that&#39;s outside of the scope of the work group, however I do think its a valuable area that the various existing web framework groups might be interested in collaborating on. Having a common, recognized framework that the database providers or third parties would be interested in writing database drivers for would be a huge step forward.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I know that Vapor has its Fluent ORM framework, and that its an area that the Kitura team are looking at as well, so your post might kick-start some wider discussion.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Chris<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; From:        Ron Olson via swift-server-dev &lt;swift-server-dev at swift.org&gt;<br>&gt;&gt;&gt; To:        swift-server-dev at swift.org<br>&gt;&gt;&gt; Date:        25/10/2016 18:54<br>&gt;&gt;&gt; Subject:        [swift-server-dev] Database API/Framework<br>&gt;&gt;&gt; Sent by:        swift-server-dev-bounces at swift.org<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi all-<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;ve been working with Swift more on Linux than macOS and am very<br>&gt;&gt;&gt; excited to see the formation of this group. Looking at the server api<br>&gt;&gt;&gt; workgroup&#39;s focus, I notice it&#39;s primarily low-level interaction with<br>&gt;&gt;&gt; the operating system. When might it be a good time to bring up the<br>&gt;&gt;&gt; possibility of creating a database-specific framework for those folks<br>&gt;&gt;&gt; who want to work directly with Postgres, MySQL, even DB2 and Oracle; I&#39;m<br>&gt;&gt;&gt; thinking a JDBC-inspired framework that drivers could be written<br>&gt;&gt;&gt; against.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Ron<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-server-dev mailing list<br>&gt;&gt;&gt; swift-server-dev at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-server-dev<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-server-dev mailing list<br>&gt;&gt;&gt; swift-server-dev at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-server-dev<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-server-dev mailing list<br>&gt;&gt; swift-server-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-server-dev<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-server-dev mailing list<br>&gt;&gt; swift-server-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-server-dev<br>&gt; <br></p><p>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: signature.asc<br>Type: application/pgp-signature<br>Size: 842 bytes<br>Desc: Message signed with OpenPGP using GPGMail<br>URL: &lt;https://lists.swift.org/pipermail/swift-server-dev/attachments/20161026/edc8b416/attachment.sig&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aee649b5cf72c73eacd21d6b9e0fc89a?s=50"></div><header><strong>Database API/Framework</strong> from <string>Gregor Milos</string> &lt;gmilos at apple.com&gt;<p>October 26, 2016 at 04:00:00pm</p></header><div class="content"><p>Additional advantage of a standardised APIs+implementation is standardised license. MIT (for NGINX http_parser) is not a big deal, but the more dependencies you&#39;re pulling into your app, the harder it&#39;s to track it all.<br></p><p><br>Some more comments inline:<br></p><p>&gt; On 26 Oct 2016, at 15:39, Helge Heß via swift-server-dev &lt;swift-server-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Gregor,<br>&gt; <br>&gt; On 26 Oct 2016, at 15:35, Gregor Milos &lt;gmilos at apple.com&gt; wrote:<br>&gt;&gt; Expand on Chris&#39;s answer, modern languages used on server side come with abstractions native to their language.<br>&gt; <br>&gt; now that is a pretty bold claim. C, C++, Java, JavaScript, Ruby and Objective-C, don’t. Python does, but few use that. But yes, Go seems to come with one … :-)<br>&gt; <br>&gt;&gt; * Netty (defacto standard Java net lib)<br>&gt; <br>&gt; Hu?! Since when is Netty the `defacto standard Java net lib`? Netty is a prime example of just being one of many options coming as a 3rd party package (being a good one for sure).<br></p><p>It&#39;s all about the definition of &quot;modern&quot; ;). More seriously though, the core of my point is that good APIs are invariably designed for the language in question, rather than foreign imports. The distribution model (compiler/stdlib/common libraries/package manager) is orthogonal. At this point I don&#39;t think it&#39;s clear how we are going to deliver the implementation of APIs designed by this work-group either. https://swift.org/server-apis/ talks about the process somewhat, but where the code belongs will largely depend on what it evolves to look like.<br></p><p>&gt; <br>&gt; <br>&gt; OK OK, nitpicking aside, so the goal this:<br>&gt; <br>&gt;&gt; Our task should be to design an API that works well in Swift.<br>&gt; <br>&gt; Understood. So the plan is indeed to replace the kernel of the HL frameworks with a common Swift `http` server module. A peer to https://golang.org/pkg/net/http/. Fair enough.<br>&gt; <br>&gt; <br>&gt;&gt; Node&#39;s http_parser is &quot;just&quot; an example of an API and a possible way of accelerating the implementation of Swift&#39;s HTTP parser.<br>&gt; <br>&gt; The http_parser is not just &#39;an example of an API&#39;, it is an actual implementation of a HTTP parser which can be used from Swift right away. And not a bad one :-) I guess my original question was why people invent their own instead of just using the implementations directly accessible already. Same for OpenSSL, Expat, etc. I really like the Swift-C mapping and how convenient it is to use.<br></p><p>Yes, it can be used from Swift and yes, it&#39;s a good parser. But the fact it&#39;s not a Swift HTTP parser is immediately obvious. We always wrap it in layer of Swift that deals with all the UnsafeMutablePointers, state management and something that exposes API conforming to https://swift.org/documentation/api-design-guidelines/.<br></p><p>Hope this all makes sense.<br>Gregor<br></p><p>&gt; <br>&gt; Unless of course we are not talking about providing core support for HL frameworks (which provide the nice API of their choice to backend developers), but for directly providing nice APIs to backend developers as part of the Swift project. (so that they don’t have to grab say Kitura just to build a small micro service).<br>&gt; <br>&gt; <br>&gt; But I think I got you, you want to wrap that kind of thing (or rewrite in pure Swift) in a nicer, Swiftier API. Thanks for clarifying that.<br>&gt; <br>&gt; hh<br>&gt; <br>&gt; <br>&gt;&gt;&gt; On 26 Oct 2016, at 12:39, Chris Bailey via swift-server-dev &lt;swift-server-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi Helge:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As the initial target areas are low-level function, yes, each of the frameworks has an implementation of most of them today. Those implementations tend to be limited in a number of ways:<br>&gt;&gt;&gt; 	• C libraries are often used directly (via a modulemap)<br>&gt;&gt;&gt; This means that there&#39;s no general &quot;Swift API&quot; that developers can use - you have to interface with the C APIs directly and deal with Unsafe/OpaquePointers etc. Ideally we want Swift developers to only have to write Swift code<br>&gt;&gt;&gt; 	• Where a Swift API wraps a C library its generally for a specific use case<br>&gt;&gt;&gt; As the framework teams have a very specific use case - using it in their framework - the APIs are very directed to what they need to do, rather than being general purpose for a wider set of use cases<br>&gt;&gt;&gt; 	• There&#39;s multiple, similar, packages<br>&gt;&gt;&gt; Most frameworks have their own server socket implementation (mostly by calling Glibc and Darwin), HTTP parser implementation, etc. Not only does this mean we can consolidate the efforts on a single implementation, but it means that anyone wanting to add additional platform support (like Windows) only has to do so once.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Chris<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; From:        Helge Heß via swift-server-dev &lt;swift-server-dev at swift.org&gt;<br>&gt;&gt;&gt; To:        swift-server-dev at swift.org<br>&gt;&gt;&gt; Date:        25/10/2016 19:57<br>&gt;&gt;&gt; Subject:        Re: [swift-server-dev] Database API/Framework<br>&gt;&gt;&gt; Sent by:        swift-server-dev-bounces at swift.org<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi Chris,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; it is a little unclear what the scope of the group is. Presumably you have some very specific things in mind?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Of course we’ve seen https://swift.org/server-apis/#focus-areas. But what does it actually mean? :-) Looking at it:<br>&gt;&gt;&gt; - base networking: TCP/UDP, DNS. Covered already by libdispatch and the OS’ses?<br>&gt;&gt;&gt; - security: OpenSSL? or some wrapper around both, CC and OpenSSL?<br>&gt;&gt;&gt; - provide low level HTTP parsing: http_parser? Is anyone using something<br>&gt;&gt;&gt; else?<br>&gt;&gt;&gt; All that seems kinda covered/standard already? Unless maybe you include non-Unix stuff like Windows.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is this primarily for things like providing a standardised ’swiftier&#39; OpenSSL wrapper (similar to how Objective-GCD wraps libdispatch)?<br>&gt;&gt;&gt; Or would that just be module maps which are shipped by default with Swift and hence can be relied on by all frameworks?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But maybe I’m just a little too impatient :-&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; hh<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 25 Oct 2016, at 20:41, Chris Bailey via swift-server-dev &lt;swift-server-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hi Ron:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; As you say, that&#39;s outside of the scope of the work group, however I do think its a valuable area that the various existing web framework groups might be interested in collaborating on. Having a common, recognized framework that the database providers or third parties would be interested in writing database drivers for would be a huge step forward.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I know that Vapor has its Fluent ORM framework, and that its an area that the Kitura team are looking at as well, so your post might kick-start some wider discussion.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Chris<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; From:        Ron Olson via swift-server-dev &lt;swift-server-dev at swift.org&gt;<br>&gt;&gt;&gt;&gt; To:        swift-server-dev at swift.org<br>&gt;&gt;&gt;&gt; Date:        25/10/2016 18:54<br>&gt;&gt;&gt;&gt; Subject:        [swift-server-dev] Database API/Framework<br>&gt;&gt;&gt;&gt; Sent by:        swift-server-dev-bounces at swift.org<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hi all-<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;ve been working with Swift more on Linux than macOS and am very<br>&gt;&gt;&gt;&gt; excited to see the formation of this group. Looking at the server api<br>&gt;&gt;&gt;&gt; workgroup&#39;s focus, I notice it&#39;s primarily low-level interaction with<br>&gt;&gt;&gt;&gt; the operating system. When might it be a good time to bring up the<br>&gt;&gt;&gt;&gt; possibility of creating a database-specific framework for those folks<br>&gt;&gt;&gt;&gt; who want to work directly with Postgres, MySQL, even DB2 and Oracle; I&#39;m<br>&gt;&gt;&gt;&gt; thinking a JDBC-inspired framework that drivers could be written<br>&gt;&gt;&gt;&gt; against.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Ron<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-server-dev mailing list<br>&gt;&gt;&gt;&gt; swift-server-dev at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-server-dev<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-server-dev mailing list<br>&gt;&gt;&gt;&gt; swift-server-dev at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-server-dev<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-server-dev mailing list<br>&gt;&gt;&gt; swift-server-dev at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-server-dev<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-server-dev mailing list<br>&gt;&gt;&gt; swift-server-dev at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-server-dev<br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-server-dev mailing list<br>&gt; swift-server-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-server-dev<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
