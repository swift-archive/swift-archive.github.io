<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d0efc09d023fa0569a2479c9dcfd4620?s=50"></div><header><strong>Xcode 8 GM: Compiler segfaults on ExpressibleByArrayLiteral</strong> from <string>Ole Begemann</string> &lt;ole at oleb.net&gt;<p>September  8, 2016 at 03:00:00pm</p></header><div class="content"><p>I&#39;m seeing a segmentation fault when compiling this code with Xcode 8 GM:<br></p><p>```<br>// stack.swift<br>struct Stack&lt;Element&gt; {<br>     var elements: [Element] = []<br>}<br></p><p>extension Stack: ExpressibleByArrayLiteral {<br>     init(arrayLiteral elements: Element...) {<br>         self.elements = elements<br>     }<br>}<br>```<br></p><p>---<br></p><p>This is my Swift version (Xcode 8 GM):<br></p><p>```<br>$ xcrun swift --version<br>Apple Swift version 3.0 (swiftlang-800.0.46.2 clang-800.0.38)<br>Target: x86_64-apple-macosx10.9<br>```<br></p><p>I&#39;m on OS X 10.11.6.<br></p><p>---<br></p><p>Compiling with `xcrun swift stack.swift`, I see this:<br></p><p>```<br>$ xcrun swift stack.swift<br>0  swift                    0x000000010558fb6d <br>PrintStackTraceSignalHandler(void*) + 45<br>1  swift                    0x000000010558f5b6 SignalHandler(int) + 470<br>2  libsystem_platform.dylib 0x00007fff8e5a952a _sigtramp + 26<br>3  libsystem_platform.dylib 0x00007fff5d2ca6d0 _sigtramp + 3469873600<br>4  swift                    0x0000000102a6d8b9 <br>swift::irgen::IRGenFunction::emitTypeMetadataRef(swift::CanType) + 73<br>5  swift                    0x0000000102aab07d void <br>llvm::function_ref&lt;void <br>(swift::irgen::GenericRequirement)&gt;::callback_fn&lt;(anonymous <br>namespace)::EmitPolymorphicArguments::emit(swift::CanTypeWrapper&lt;swift::SILFunctionType&gt;, <br>llvm::ArrayRef&lt;swift::Substitution&gt;, swift::irgen::WitnessMetadata*, <br>swift::irgen::Explosion&amp;)::$_14&gt;(long, swift::irgen::GenericRequirement) <br>+ 861<br>6  swift                    0x0000000102aa09e1 (anonymous <br>namespace)::PolymorphicConvention::enumerateRequirements(llvm::function_ref&lt;void <br>(swift::irgen::GenericRequirement)&gt; const&amp;) + 129<br>7  swift                    0x0000000102aaabdb <br>swift::irgen::emitPolymorphicArguments(swift::irgen::IRGenFunction&amp;, <br>swift::CanTypeWrapper&lt;swift::SILFunctionType&gt;, <br>swift::CanTypeWrapper&lt;swift::SILFunctionType&gt;, <br>llvm::ArrayRef&lt;swift::Substitution&gt;, swift::irgen::WitnessMetadata*, <br>swift::irgen::Explosion&amp;) + 459<br>8  swift                    0x0000000102b074f5 (anonymous <br>namespace)::IRGenSILFunction::visitFullApplySite(swift::FullApplySite) + <br>2997<br>9  swift                    0x0000000102af2268 <br>swift::irgen::IRGenModule::emitSILFunction(swift::SILFunction*) + 9080<br>10 swift                    0x0000000102a184d0 <br>swift::irgen::IRGenerator::emitLazyDefinitions() + 5216<br>11 swift                    0x0000000102ad819b <br>performIRGeneration(swift::IRGenOptions&amp;, swift::ModuleDecl*, <br>swift::SILModule*, llvm::StringRef, llvm::LLVMContext&amp;, <br>swift::SourceFile*, unsigned int) + 1723<br>12 swift                    0x0000000102ad6507 <br>swift::performIRGeneration(swift::IRGenOptions&amp;, swift::ModuleDecl*, <br>swift::SILModule*, llvm::StringRef, llvm::LLVMContext&amp;) + 1527<br>13 swift                    0x00000001029baa7b <br>swift::RunImmediately(swift::CompilerInstance&amp;, <br>std::__1::vector&lt;std::__1::basic_string&lt;char, <br>std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, <br>std::__1::allocator&lt;std::__1::basic_string&lt;char, <br>std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;, <br>swift::IRGenOptions&amp;, swift::SILOptions const&amp;) + 187<br>14 swift                    0x00000001029a607e <br>performCompile(swift::CompilerInstance&amp;, swift::CompilerInvocation&amp;, <br>llvm::ArrayRef&lt;char const*&gt;, int&amp;, swift::FrontendObserver*) + 23358<br>15 swift                    0x000000010299e265 <br>swift::performFrontend(llvm::ArrayRef&lt;char const*&gt;, char const*, void*, <br>swift::FrontendObserver*) + 17029<br>16 swift                    0x000000010295b82d main + 8685<br>17 libdyld.dylib            0x00007fff91eef5ad start + 1<br>18 libdyld.dylib            0x000000000000000c start + 1846610528<br>Stack dump:<br>0.      Program arguments: <br>/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift <br>-frontend -interpret stack.swift -target x86_64-apple-macosx10.9 <br>-enable-objc-interop -sdk <br>/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk <br>-color-diagnostics -module-name stack<br>1.      While emitting IR SIL function <br>@_TFV5stack5StackCft12arrayLiteralGSax__GS0_x_ for &#39;init&#39; at stack.swift:6:5<br>[1]    38858 segmentation fault  xcrun swift stack.swift<br>$<br>```<br></p><p>---<br></p><p>Regression:<br>I observed the same behavior at least in Xcode 8b6 and b5. I did not <br>report this earlier because the problem did not occur in recent Swift <br>snapshots. The oldest one I still have installed is <br>`DEVELOPMENT-SNAPSHOT-2016-08-07-a`, and with that one it already <br>compiles fine:<br></p><p>```<br># DEVELOPMENT-SNAPSHOT-2016-08-07-a<br>$ swift --version<br>Apple Swift version 3.0-dev (LLVM 17c4c6cf7a, Clang 4ca9e01a7c, Swift <br>13a9908f8d)<br>Target: x86_64-apple-macosx10.9<br></p><p>$ swift ~/code/stack.swift<br>$<br>```<br></p><p>---<br></p><p>Workaround:<br>It compiles fine if I rewrite the `ExpressibleByArrayLiteral` <br>initializer like this:<br></p><p>```<br>struct Stack&lt;Element&gt; {<br>     var elements: [Element] = []<br>}<br></p><p>extension Stack: ExpressibleByArrayLiteral {<br>     init(arrayLiteral elements: Element...) {<br>         self.init(elements: elements)<br>     }<br>}<br>```<br></p><p>Or alternatively, provide an explicit initializer for the struct:<br></p><p>```<br>struct Stack&lt;Element&gt; {<br>     var elements: [Element]<br>     init(elements: [Element]) {<br>         self.elements = elements<br>     }<br>}<br></p><p>extension Stack: ExpressibleByArrayLiteral {<br>     init(arrayLiteral elements: Element...) {<br>         self.elements = elements<br>     }<br>}<br>```<br></p><p>---<br></p><p>Is this something for Radar or bugs.swift.org?<br></p><p>Ole<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Xcode 8 GM: Compiler segfaults on ExpressibleByArrayLiteral</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>September  8, 2016 at 09:00:00am</p></header><div class="content"><p>Since it&#39;s just about the Swift compiler and types found entirely in the standard library, you can be confident about bugs.swift.org. (It&#39;s a bit more of a mix when there&#39;s system APIs involved: sometimes that&#39;s the compiler and sometimes it&#39;s the SDK. But this one doesn&#39;t go there.)<br></p><p>Thanks, Ole!<br>Jordan<br></p><p>&gt; On Sep 8, 2016, at 6:50, Ole Begemann via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;m seeing a segmentation fault when compiling this code with Xcode 8 GM:<br>&gt; <br>&gt; ```<br>&gt; // stack.swift<br>&gt; struct Stack&lt;Element&gt; {<br>&gt;    var elements: [Element] = []<br>&gt; }<br>&gt; <br>&gt; extension Stack: ExpressibleByArrayLiteral {<br>&gt;    init(arrayLiteral elements: Element...) {<br>&gt;        self.elements = elements<br>&gt;    }<br>&gt; }<br>&gt; ```<br>&gt; <br>&gt; ---<br>&gt; <br>&gt; This is my Swift version (Xcode 8 GM):<br>&gt; <br>&gt; ```<br>&gt; $ xcrun swift --version<br>&gt; Apple Swift version 3.0 (swiftlang-800.0.46.2 clang-800.0.38)<br>&gt; Target: x86_64-apple-macosx10.9<br>&gt; ```<br>&gt; <br>&gt; I&#39;m on OS X 10.11.6.<br>&gt; <br>&gt; ---<br>&gt; <br>&gt; Compiling with `xcrun swift stack.swift`, I see this:<br>&gt; <br>&gt; ```<br>&gt; $ xcrun swift stack.swift<br>&gt; 0  swift                    0x000000010558fb6d PrintStackTraceSignalHandler(void*) + 45<br>&gt; 1  swift                    0x000000010558f5b6 SignalHandler(int) + 470<br>&gt; 2  libsystem_platform.dylib 0x00007fff8e5a952a _sigtramp + 26<br>&gt; 3  libsystem_platform.dylib 0x00007fff5d2ca6d0 _sigtramp + 3469873600<br>&gt; 4  swift                    0x0000000102a6d8b9 swift::irgen::IRGenFunction::emitTypeMetadataRef(swift::CanType) + 73<br>&gt; 5  swift                    0x0000000102aab07d void llvm::function_ref&lt;void (swift::irgen::GenericRequirement)&gt;::callback_fn&lt;(anonymous namespace)::EmitPolymorphicArguments::emit(swift::CanTypeWrapper&lt;swift::SILFunctionType&gt;, llvm::ArrayRef&lt;swift::Substitution&gt;, swift::irgen::WitnessMetadata*, swift::irgen::Explosion&amp;)::$_14&gt;(long, swift::irgen::GenericRequirement) + 861<br>&gt; 6  swift                    0x0000000102aa09e1 (anonymous namespace)::PolymorphicConvention::enumerateRequirements(llvm::function_ref&lt;void (swift::irgen::GenericRequirement)&gt; const&amp;) + 129<br>&gt; 7  swift                    0x0000000102aaabdb swift::irgen::emitPolymorphicArguments(swift::irgen::IRGenFunction&amp;, swift::CanTypeWrapper&lt;swift::SILFunctionType&gt;, swift::CanTypeWrapper&lt;swift::SILFunctionType&gt;, llvm::ArrayRef&lt;swift::Substitution&gt;, swift::irgen::WitnessMetadata*, swift::irgen::Explosion&amp;) + 459<br>&gt; 8  swift                    0x0000000102b074f5 (anonymous namespace)::IRGenSILFunction::visitFullApplySite(swift::FullApplySite) + 2997<br>&gt; 9  swift                    0x0000000102af2268 swift::irgen::IRGenModule::emitSILFunction(swift::SILFunction*) + 9080<br>&gt; 10 swift                    0x0000000102a184d0 swift::irgen::IRGenerator::emitLazyDefinitions() + 5216<br>&gt; 11 swift                    0x0000000102ad819b performIRGeneration(swift::IRGenOptions&amp;, swift::ModuleDecl*, swift::SILModule*, llvm::StringRef, llvm::LLVMContext&amp;, swift::SourceFile*, unsigned int) + 1723<br>&gt; 12 swift                    0x0000000102ad6507 swift::performIRGeneration(swift::IRGenOptions&amp;, swift::ModuleDecl*, swift::SILModule*, llvm::StringRef, llvm::LLVMContext&amp;) + 1527<br>&gt; 13 swift                    0x00000001029baa7b swift::RunImmediately(swift::CompilerInstance&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;, swift::IRGenOptions&amp;, swift::SILOptions const&amp;) + 187<br>&gt; 14 swift                    0x00000001029a607e performCompile(swift::CompilerInstance&amp;, swift::CompilerInvocation&amp;, llvm::ArrayRef&lt;char const*&gt;, int&amp;, swift::FrontendObserver*) + 23358<br>&gt; 15 swift                    0x000000010299e265 swift::performFrontend(llvm::ArrayRef&lt;char const*&gt;, char const*, void*, swift::FrontendObserver*) + 17029<br>&gt; 16 swift                    0x000000010295b82d main + 8685<br>&gt; 17 libdyld.dylib            0x00007fff91eef5ad start + 1<br>&gt; 18 libdyld.dylib            0x000000000000000c start + 1846610528<br>&gt; Stack dump:<br>&gt; 0.      Program arguments: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift -frontend -interpret stack.swift -target x86_64-apple-macosx10.9 -enable-objc-interop -sdk /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -color-diagnostics -module-name stack<br>&gt; 1.      While emitting IR SIL function @_TFV5stack5StackCft12arrayLiteralGSax__GS0_x_ for &#39;init&#39; at stack.swift:6:5<br>&gt; [1]    38858 segmentation fault  xcrun swift stack.swift<br>&gt; $<br>&gt; ```<br>&gt; <br>&gt; ---<br>&gt; <br>&gt; Regression:<br>&gt; I observed the same behavior at least in Xcode 8b6 and b5. I did not report this earlier because the problem did not occur in recent Swift snapshots. The oldest one I still have installed is `DEVELOPMENT-SNAPSHOT-2016-08-07-a`, and with that one it already compiles fine:<br>&gt; <br>&gt; ```<br>&gt; # DEVELOPMENT-SNAPSHOT-2016-08-07-a<br>&gt; $ swift --version<br>&gt; Apple Swift version 3.0-dev (LLVM 17c4c6cf7a, Clang 4ca9e01a7c, Swift 13a9908f8d)<br>&gt; Target: x86_64-apple-macosx10.9<br>&gt; <br>&gt; $ swift ~/code/stack.swift<br>&gt; $<br>&gt; ```<br>&gt; <br>&gt; ---<br>&gt; <br>&gt; Workaround:<br>&gt; It compiles fine if I rewrite the `ExpressibleByArrayLiteral` initializer like this:<br>&gt; <br>&gt; ```<br>&gt; struct Stack&lt;Element&gt; {<br>&gt;    var elements: [Element] = []<br>&gt; }<br>&gt; <br>&gt; extension Stack: ExpressibleByArrayLiteral {<br>&gt;    init(arrayLiteral elements: Element...) {<br>&gt;        self.init(elements: elements)<br>&gt;    }<br>&gt; }<br>&gt; ```<br>&gt; <br>&gt; Or alternatively, provide an explicit initializer for the struct:<br>&gt; <br>&gt; ```<br>&gt; struct Stack&lt;Element&gt; {<br>&gt;    var elements: [Element]<br>&gt;    init(elements: [Element]) {<br>&gt;        self.elements = elements<br>&gt;    }<br>&gt; }<br>&gt; <br>&gt; extension Stack: ExpressibleByArrayLiteral {<br>&gt;    init(arrayLiteral elements: Element...) {<br>&gt;        self.elements = elements<br>&gt;    }<br>&gt; }<br>&gt; ```<br>&gt; <br>&gt; ---<br>&gt; <br>&gt; Is this something for Radar or bugs.swift.org?<br>&gt; <br>&gt; Ole<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>Xcode 8 GM: Compiler segfaults on ExpressibleByArrayLiteral</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>September  8, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Sep 8, 2016, at 6:50 AM, Ole Begemann via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;m seeing a segmentation fault when compiling this code with Xcode 8 GM:<br>&gt; <br>&gt; ```<br>&gt; // stack.swift<br>&gt; struct Stack&lt;Element&gt; {<br>&gt;    var elements: [Element] = []<br>&gt; }<br>&gt; <br>&gt; extension Stack: ExpressibleByArrayLiteral {<br>&gt;    init(arrayLiteral elements: Element...) {<br>&gt;        self.elements = elements<br>&gt;    }<br>&gt; }<br>&gt; ```<br>&gt; <br>&gt; ---<br>&gt; <br>&gt; This is my Swift version (Xcode 8 GM):<br>&gt; <br>&gt; ```<br>&gt; $ xcrun swift --version<br>&gt; Apple Swift version 3.0 (swiftlang-800.0.46.2 clang-800.0.38)<br>&gt; Target: x86_64-apple-macosx10.9<br>&gt; ```<br>&gt; <br>&gt; I&#39;m on OS X 10.11.6.<br>&gt; <br>&gt; ---<br>&gt; <br>&gt; Compiling with `xcrun swift stack.swift`, I see this:<br>&gt; <br>&gt; ```<br>&gt; $ xcrun swift stack.swift<br>&gt; 0  swift                    0x000000010558fb6d PrintStackTraceSignalHandler(void*) + 45<br>&gt; 1  swift                    0x000000010558f5b6 SignalHandler(int) + 470<br>&gt; 2  libsystem_platform.dylib 0x00007fff8e5a952a _sigtramp + 26<br>&gt; 3  libsystem_platform.dylib 0x00007fff5d2ca6d0 _sigtramp + 3469873600<br>&gt; 4  swift                    0x0000000102a6d8b9 swift::irgen::IRGenFunction::emitTypeMetadataRef(swift::CanType) + 73<br>&gt; 5  swift                    0x0000000102aab07d void llvm::function_ref&lt;void (swift::irgen::GenericRequirement)&gt;::callback_fn&lt;(anonymous namespace)::EmitPolymorphicArguments::emit(swift::CanTypeWrapper&lt;swift::SILFunctionType&gt;, llvm::ArrayRef&lt;swift::Substitution&gt;, swift::irgen::WitnessMetadata*, swift::irgen::Explosion&amp;)::$_14&gt;(long, swift::irgen::GenericRequirement) + 861<br>&gt; 6  swift                    0x0000000102aa09e1 (anonymous namespace)::PolymorphicConvention::enumerateRequirements(llvm::function_ref&lt;void (swift::irgen::GenericRequirement)&gt; const&amp;) + 129<br>&gt; 7  swift                    0x0000000102aaabdb swift::irgen::emitPolymorphicArguments(swift::irgen::IRGenFunction&amp;, swift::CanTypeWrapper&lt;swift::SILFunctionType&gt;, swift::CanTypeWrapper&lt;swift::SILFunctionType&gt;, llvm::ArrayRef&lt;swift::Substitution&gt;, swift::irgen::WitnessMetadata*, swift::irgen::Explosion&amp;) + 459<br>&gt; 8  swift                    0x0000000102b074f5 (anonymous namespace)::IRGenSILFunction::visitFullApplySite(swift::FullApplySite) + 2997<br>&gt; 9  swift                    0x0000000102af2268 swift::irgen::IRGenModule::emitSILFunction(swift::SILFunction*) + 9080<br>&gt; 10 swift                    0x0000000102a184d0 swift::irgen::IRGenerator::emitLazyDefinitions() + 5216<br>&gt; 11 swift                    0x0000000102ad819b performIRGeneration(swift::IRGenOptions&amp;, swift::ModuleDecl*, swift::SILModule*, llvm::StringRef, llvm::LLVMContext&amp;, swift::SourceFile*, unsigned int) + 1723<br>&gt; 12 swift                    0x0000000102ad6507 swift::performIRGeneration(swift::IRGenOptions&amp;, swift::ModuleDecl*, swift::SILModule*, llvm::StringRef, llvm::LLVMContext&amp;) + 1527<br>&gt; 13 swift                    0x00000001029baa7b swift::RunImmediately(swift::CompilerInstance&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;, swift::IRGenOptions&amp;, swift::SILOptions const&amp;) + 187<br>&gt; 14 swift                    0x00000001029a607e performCompile(swift::CompilerInstance&amp;, swift::CompilerInvocation&amp;, llvm::ArrayRef&lt;char const*&gt;, int&amp;, swift::FrontendObserver*) + 23358<br>&gt; 15 swift                    0x000000010299e265 swift::performFrontend(llvm::ArrayRef&lt;char const*&gt;, char const*, void*, swift::FrontendObserver*) + 17029<br>&gt; 16 swift                    0x000000010295b82d main + 8685<br>&gt; 17 libdyld.dylib            0x00007fff91eef5ad start + 1<br>&gt; 18 libdyld.dylib            0x000000000000000c start + 1846610528<br>&gt; Stack dump:<br>&gt; 0.      Program arguments: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift -frontend -interpret stack.swift -target x86_64-apple-macosx10.9 -enable-objc-interop -sdk /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -color-diagnostics -module-name stack<br>&gt; 1.      While emitting IR SIL function @_TFV5stack5StackCft12arrayLiteralGSax__GS0_x_ for &#39;init&#39; at stack.swift:6:5<br>&gt; [1]    38858 segmentation fault  xcrun swift stack.swift<br>&gt; $<br>&gt; ```<br>&gt; <br>&gt; ---<br>&gt; <br>&gt; Regression:<br>&gt; I observed the same behavior at least in Xcode 8b6 and b5. I did not report this earlier because the problem did not occur in recent Swift snapshots. The oldest one I still have installed is `DEVELOPMENT-SNAPSHOT-2016-08-07-a`, and with that one it already compiles fine:<br>&gt; <br>&gt; ```<br>&gt; # DEVELOPMENT-SNAPSHOT-2016-08-07-a<br>&gt; $ swift --version<br>&gt; Apple Swift version 3.0-dev (LLVM 17c4c6cf7a, Clang 4ca9e01a7c, Swift 13a9908f8d)<br>&gt; Target: x86_64-apple-macosx10.9<br>&gt; <br>&gt; $ swift ~/code/stack.swift<br>&gt; $<br>&gt; ```<br>&gt; <br>&gt; ---<br>&gt; <br>&gt; Workaround:<br>&gt; It compiles fine if I rewrite the `ExpressibleByArrayLiteral` initializer like this:<br>&gt; <br>&gt; ```<br>&gt; struct Stack&lt;Element&gt; {<br>&gt;    var elements: [Element] = []<br>&gt; }<br>&gt; <br>&gt; extension Stack: ExpressibleByArrayLiteral {<br>&gt;    init(arrayLiteral elements: Element...) {<br>&gt;        self.init(elements: elements)<br>&gt;    }<br>&gt; }<br>&gt; ```<br>&gt; <br>&gt; Or alternatively, provide an explicit initializer for the struct:<br>&gt; <br>&gt; ```<br>&gt; struct Stack&lt;Element&gt; {<br>&gt;    var elements: [Element]<br>&gt;    init(elements: [Element]) {<br>&gt;        self.elements = elements<br>&gt;    }<br>&gt; }<br>&gt; <br>&gt; extension Stack: ExpressibleByArrayLiteral {<br>&gt;    init(arrayLiteral elements: Element...) {<br>&gt;        self.elements = elements<br>&gt;    }<br>&gt; }<br>&gt; ```<br>&gt; <br>&gt; ---<br>&gt; <br>&gt; Is this something for Radar or bugs.swift.org?<br></p><p>FWIW, it’s actually fixed in master (probably due to Slava’s recent work on the generics system). The primary benefit to filing a radar at this point is that you’ll get notified when the fix makes it into an Xcode release.<br></p><p>	- Doug<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d0efc09d023fa0569a2479c9dcfd4620?s=50"></div><header><strong>Xcode 8 GM: Compiler segfaults on ExpressibleByArrayLiteral</strong> from <string>Ole Begemann</string> &lt;ole at oleb.net&gt;<p>September  8, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; FWIW, it’s actually fixed in master (probably due to Slava’s recent work on the generics system). The primary benefit to filing a radar at this point is that you’ll get notified when the fix makes it into an Xcode release.<br></p><p>Thanks. I&#39;ll just wait then. :-)<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/569ed436467cf145f3bbdd0d53fbe115?s=50"></div><header><strong>Xcode 8 GM: Compiler segfaults on ExpressibleByArrayLiteral</strong> from <string>Slava Pestov</string> &lt;spestov at apple.com&gt;<p>September 13, 2016 at 01:00:00am</p></header><div class="content"><p>This bug was fixed in the following commit: https://github.com/apple/swift/commit/75bd88968bcb0e77bc0a9d6d6191c5ab362d2736<br></p><p>The JIRA bug is https://bugs.swift.org/browse/SR-488&gt;.<br></p><p>Slava<br></p><p>&gt; On Sep 8, 2016, at 11:42 AM, Ole Begemann via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; FWIW, it’s actually fixed in master (probably due to Slava’s recent work on the generics system). The primary benefit to filing a radar at this point is that you’ll get notified when the fix makes it into an Xcode release.<br>&gt; <br>&gt; Thanks. I&#39;ll just wait then. :-)<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160913/ed5a6fd6/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
