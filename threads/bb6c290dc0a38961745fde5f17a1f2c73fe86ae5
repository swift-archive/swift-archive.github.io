<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6ff404e5928c7aeb05ee97fd4109bf38?s=50"></div><header><strong>?? operator question</strong> from <string>tuuranton at tutanota.de</string> &lt;tuuranton at tutanota.de&gt;<p>April 18, 2016 at 10:00:00am</p></header><div class="content"><p>Why does this compile?<br>let t1: Int? = 2print(t1 ?? &quot;asdf&quot;)<br>The type of ?? is this:<br>@warn_unused_resultpublic func ??&lt;T&gt;(optional: T?, @autoclosure defaultValue: <br>() throws -&gt; T) rethrows -&gt; T<br>The type syas that T must be the same type throughout. But above I could <br>successfully use Int? and then String. Why?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160418/bb6c6ae5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e7e7ac19238e444f9cdf66c49a53a0d?s=50"></div><header><strong>?? operator question</strong> from <string>Marius-Ioan Serban</string> &lt;marius.ioan.serban at gmail.com&gt;<p>April 18, 2016 at 11:00:00am</p></header><div class="content"><p>Because in your example T = CustomStringConvertible<br></p><p>On Mon, Apr 18, 2016 at 10:51 AM, tuuranton--- via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Why does this compile?<br>&gt;<br>&gt; let t1: Int? = 2<br>&gt; print(t1 ?? &quot;asdf&quot;)<br>&gt;<br>&gt; The type of ?? is this:<br>&gt;<br>&gt; @warn_unused_result<br>&gt; public func ??&lt;T&gt;(optional: T?, @autoclosure defaultValue: () throws -&gt; T)<br>&gt; rethrows -&gt; T<br>&gt;<br>&gt; The type syas that T must be the same type throughout. But above I could<br>&gt; successfully use Int? and then String. Why?<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br></p><p><br>-- <br>Marius Serban<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160418/daef22da/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/11df0828473d6c162b9c8572c37f9146?s=50"></div><header><strong>?? operator question</strong> from <string>Marco Feltmann</string> &lt;coding at marcofeltmann.de&gt;<p>April 18, 2016 at 12:00:00pm</p></header><div class="content"><p>Am 18.04.2016 um 11:51 schrieb tuuranton--- via swift-users:<br>&gt; Why does this compile?<br>&gt; let t1: Int? = 2print(t1 ?? &quot;asdf&quot;)<br>Well, I guess you try to re-typedef (??) a language construct.<br>According to NSHipster ?? is the languages |nil| coalescing operator.<br></p><p>So it simply compiles because t1 isn&#39;t nil.<br></p><p>Further reference:<br>https://en.wikipedia.org/wiki/Null_coalescing_operator#Swift<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160418/b1459872/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>?? operator question</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>April 18, 2016 at 09:00:00pm</p></header><div class="content"><p>I do think there is something wrong here.<br></p><p>// Xcode 7.3.1, Swift 2.2<br></p><p>let t1: Int? = 2 // struct Int?<br>let y = t1 ?? &quot;abcdf&quot; // error<br>let x = t1 ?? NSFont(name: &quot;&quot;, size: 0) // x: NSObject?<br></p><p>for x, how could it be NSObject?, as t1 is a struct?<br></p><p>zhaoxin<br></p><p>On Mon, Apr 18, 2016 at 6:59 PM, Marco Feltmann via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Am 18.04.2016 um 11:51 schrieb tuuranton--- via swift-users:<br>&gt;<br>&gt; Why does this compile?<br>&gt; let t1: Int? = 2print(t1 ?? &quot;asdf&quot;)<br>&gt;<br>&gt; Well, I guess you try to re-typedef (??) a language construct.<br>&gt; According to NSHipster ?? is the languages nil coalescing operator.<br>&gt;<br>&gt; So it simply compiles because t1 isn&#39;t nil.<br>&gt;<br>&gt; Further reference:<br>&gt; https://en.wikipedia.org/wiki/Null_coalescing_operator#Swift<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160418/840f10e1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>?? operator question</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>April 18, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; On Apr 18, 2016, at 7:23 AM, zh ao via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; I do think there is something wrong here.<br>&gt; <br>&gt; // Xcode 7.3.1, Swift 2.2<br>&gt; <br>&gt; let t1: Int? = 2 // struct Int?<br>&gt; let y = t1 ?? &quot;abcdf&quot; // error<br>&gt; let x = t1 ?? NSFont(name: &quot;&quot;, size: 0) // x: NSObject?<br>&gt; <br>&gt; for x, how could it be NSObject?, as t1 is a struct?<br>&gt; <br>&gt; zhaoxin<br></p><p>My guess would be NSNumber.<br></p><p>Strings can bridge to NSString (struct to class), enums of ErrorType to NSError (enum to class), etc.<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160418/767b525e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>?? operator question</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>April 19, 2016 at 09:00:00am</p></header><div class="content"><p>I don&#39;t think NSNumber is OK here. As t1 is a struct not a literal value.<br>If NSNumber is OK. I think the compiler is too smart than it should be.<br></p><p>Also, you should aware that right side of let y works in print(), but does<br>not work in let, which is not consistent somehow.<br></p><p>Owen<br></p><p>On Mon, Apr 18, 2016 at 9:49 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Apr 18, 2016, at 7:23 AM, zh ao via swift-users &lt;swift-users at swift.org&gt;<br>&gt; wrote:<br>&gt;<br>&gt; I do think there is something wrong here.<br>&gt;<br>&gt; // Xcode 7.3.1, Swift 2.2<br>&gt;<br>&gt; let t1: Int? = 2 // struct Int?<br>&gt; let y = t1 ?? &quot;abcdf&quot; // error<br>&gt; let x = t1 ?? NSFont(name: &quot;&quot;, size: 0) // x: NSObject?<br>&gt;<br>&gt; for x, how could it be NSObject?, as t1 is a struct?<br>&gt;<br>&gt; zhaoxin<br>&gt;<br>&gt;<br>&gt; My guess would be NSNumber.<br>&gt;<br>&gt; Strings can bridge to NSString (struct to class), enums of ErrorType to<br>&gt; NSError (enum to class), etc.<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160419/67ee6fcf/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/11df0828473d6c162b9c8572c37f9146?s=50"></div><header><strong>?? operator question</strong> from <string>Marco Feltmann</string> &lt;coding at marcofeltmann.de&gt;<p>April 19, 2016 at 01:00:00pm</p></header><div class="content"><p>Just guessed since I try to separate Swift from Objective-C frameworks.<br></p><p>Am 19.04.2016 um 03:15 schrieb zh ao:<br>&gt; I don&#39;t think NSNumber is OK here. As t1 is a struct not a literal value.<br>In fact t1 in an OPTIONAL struct.<br>That means it can point to anything from `nil` to Int Struct, NSInteger <br>and NSNumber.<br>AFAIR it automatically bridges to NSNumber as soon as you import <br>Foundation or a similiar framework. Same works with String. String is a <br>struct used in plain Swift and NSString used with Foundation.<br>&gt; If NSNumber is OK. I think the compiler is too smart than it should be.<br>Indeed it is. Way to smart.<br>It is that smart that it sometimes stands in its own way.<br>At least when used with Objective-C. Your question outlines one of those <br>strange side effects.<br>&gt; Also, you should aware that right side of let y works in print(), but does<br>&gt; not work in let, which is not consistent somehow.<br>It is consistent.<br>You can map an OPTIONAL integer to NSNumber (using Foundation framework) <br>but you cannot map an OPTIONAL integer to NSString.<br></p><p>&quot;But wait a sec, how can NSFount(name: &quot;&quot;, size: 0) result in an <br>NSNumber?&quot; you may ask.<br>I don&#39;t now.<br>The behaviour of NSFonts +fonttWithName:size: for empty/not found font <br>name is not defined in the documentation, so ANY result is correct.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>?? operator question</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>April 19, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Apr 19, 2016, at 4:09 AM, Marco Feltmann via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; &quot;But wait a sec, how can NSFount(name: &quot;&quot;, size: 0) result in an NSNumber?&quot; you may ask.<br>&gt; I don&#39;t now.<br>&gt; The behaviour of NSFonts +fonttWithName:size: for empty/not found font name is not defined in the documentation, so ANY result is correct.<br></p><p>That’s not true. The result has to be an NSFont? as declared in the class interface — it can’t be an NSNumber. This has nothing to do with whether the font is not found at runtime; we’re talking about compile-time type inference.<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160419/c68c304d/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>?? operator question</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>April 20, 2016 at 06:00:00am</p></header><div class="content"><p>Thanks for your explanation.<br></p><p>I still think the compiler should not be that smart, causing only itself<br>could understanding what is going on. It will be a nightmare.<br></p><p>Owen<br></p><p>On Tue, Apr 19, 2016 at 7:09 PM, Marco Feltmann via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Just guessed since I try to separate Swift from Objective-C frameworks.<br>&gt;<br>&gt; Am 19.04.2016 um 03:15 schrieb zh ao:<br>&gt;<br>&gt;&gt; I don&#39;t think NSNumber is OK here. As t1 is a struct not a literal value.<br>&gt;&gt;<br>&gt; In fact t1 in an OPTIONAL struct.<br>&gt; That means it can point to anything from `nil` to Int Struct, NSInteger<br>&gt; and NSNumber.<br>&gt; AFAIR it automatically bridges to NSNumber as soon as you import<br>&gt; Foundation or a similiar framework. Same works with String. String is a<br>&gt; struct used in plain Swift and NSString used with Foundation.<br>&gt;<br>&gt;&gt; If NSNumber is OK. I think the compiler is too smart than it should be.<br>&gt;&gt;<br>&gt; Indeed it is. Way to smart.<br>&gt; It is that smart that it sometimes stands in its own way.<br>&gt; At least when used with Objective-C. Your question outlines one of those<br>&gt; strange side effects.<br>&gt;<br>&gt;&gt; Also, you should aware that right side of let y works in print(), but does<br>&gt;&gt; not work in let, which is not consistent somehow.<br>&gt;&gt;<br>&gt; It is consistent.<br>&gt; You can map an OPTIONAL integer to NSNumber (using Foundation framework)<br>&gt; but you cannot map an OPTIONAL integer to NSString.<br>&gt;<br>&gt; &quot;But wait a sec, how can NSFount(name: &quot;&quot;, size: 0) result in an<br>&gt; NSNumber?&quot; you may ask.<br>&gt; I don&#39;t now.<br>&gt; The behaviour of NSFonts +fonttWithName:size: for empty/not found font<br>&gt; name is not defined in the documentation, so ANY result is correct.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160420/bfac9ac0/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>?? operator question</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>April 18, 2016 at 10:00:00am</p></header><div class="content"><p>Swift will infer types from the context of an expression as well as the inputs. In this case, although &#39;Int&#39; and &#39;String&#39; do not share a type, they are both convertible to &#39;Any&#39;, the argument to &#39;print&#39;. So because of the call to &#39;print&#39;, &#39;T&#39; becomes &#39;Any&#39;, and the expression becomes, essentially<br></p><p>print((t1 as Any?) ?? (&quot;asdf&quot; as Any))<br></p><p>(Actually, the signature of &#39;print&#39; is a little more complicated than that, but that&#39;s the gist of what&#39;s going on.)<br></p><p>Jordan<br></p><p>&gt; On Apr 18, 2016, at 2:51, tuuranton--- via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Why does this compile?<br>&gt; <br>&gt; let t1: Int? = 2<br>&gt; print(t1 ?? &quot;asdf&quot;)<br>&gt; <br>&gt; The type of ?? is this:<br>&gt; <br>&gt; @warn_unused_result<br>&gt; public func ??&lt;T&gt;(optional: T?, @autoclosure defaultValue: () throws -&gt; T) rethrows -&gt; T<br>&gt; <br>&gt; The type syas that T must be the same type throughout. But above I could successfully use Int? and then String. Why?<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160418/3901cc62/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
