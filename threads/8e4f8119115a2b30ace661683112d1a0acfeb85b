<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b660eecceda60138f137d353b8289925?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Janosch Hildebrand</string> &lt;jnosh at jnosh.com&gt;<p>February 24, 2016 at 04:00:00pm</p></header><div class="content"><p>Erica&#39;s proposal about &quot;Modernizing Attribute Case and Attribute Argument Naming&quot; made me remember this discussion.<br></p><p>I don&#39;t think a proposal was ever submitted? If no one else is working on a proposal already I would offer myself up for writing this up.<br></p><p>- Janosch<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>February 24, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Feb 24, 2016, at 7:13 AM, Janosch Hildebrand via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Erica&#39;s proposal about &quot;Modernizing Attribute Case and Attribute Argument Naming&quot; made me remember this discussion.<br>&gt; <br>&gt; I don&#39;t think a proposal was ever submitted? If no one else is working on a proposal already I would offer myself up for writing this up.<br></p><p>I don’t recall a real proposal, it would be great for you to drive this.<br></p><p>-Chris<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/73a38bb7bc9528e31098defe30e68ea4?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Jean-Daniel Dupas</string> &lt;mailing at xenonium.com&gt;<p>February 24, 2016 at 10:00:00pm</p></header><div class="content"><p>IMHO, before any decision, it may be interesting to write a quick patch and run the modified compiler on real code to see how much false positive it would generate.<br></p><p>&gt; Le 24 févr. 2016 à 16:13, Janosch Hildebrand via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Erica&#39;s proposal about &quot;Modernizing Attribute Case and Attribute Argument Naming&quot; made me remember this discussion.<br>&gt; <br>&gt; I don&#39;t think a proposal was ever submitted? If no one else is working on a proposal already I would offer myself up for writing this up.<br>&gt; <br>&gt; - Janosch<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a06dd7924588141b9c907543798c2524?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Gwendal Roué</string> &lt;gwendal.roue at gmail.com&gt;<p>February 24, 2016 at 05:00:00pm</p></header><div class="content"><p>Oh yes please, don&#39;t rush on this...<br></p><p>Who do we want to help here? API users, or API developers?<br></p><p>Considering that Swift may be on the verge of a great breakthrough, plenty of immature yet popular libraries will ship. Plenty have already shipped. This is a great sign of vitality. Should @warn_unused_result become the default, the quality of the code of the users of those libraries risks a brutal degradation, full of poor `let _ = ...`.<br></p><p>Gwendal<br></p><p>&gt; Le 24 févr. 2016 à 16:01, Jean-Daniel Dupas via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; IMHO, before any decision, it may be interesting to write a quick patch and run the modified compiler on real code to see how much false positive it would generate.<br>&gt; <br>&gt;&gt; Le 24 févr. 2016 à 16:13, Janosch Hildebrand via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; Erica&#39;s proposal about &quot;Modernizing Attribute Case and Attribute Argument Naming&quot; made me remember this discussion.<br>&gt;&gt; <br>&gt;&gt; I don&#39;t think a proposal was ever submitted? If no one else is working on a proposal already I would offer myself up for writing this up.<br>&gt;&gt; <br>&gt;&gt; - Janosch<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b660eecceda60138f137d353b8289925?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Janosch Hildebrand</string> &lt;jnosh at jnosh.com&gt;<p>February 25, 2016 at 12:00:00am</p></header><div class="content"><p>No worries, there should be plenty of time for discussion.<br></p><p>Swift 3 contains many changes that will require libraries to be updated anyway, so I don’t think this would prove to be an undue burden.<br>But yes, weighing cost vs. benefit will certainly be part of the proposal evaluation.<br></p><p>As for whom we want to help, it’s predominantly API users.<br>Ideally every function would be perfectly annotated but ultimately not every API developer will know about, remember or put in the effort to annotate with @warn_unused_result. Making the inverse the default should hopefully be “safer” by warning by default.<br></p><p>Extraneous warnings are also much more obvious than missing warnings, encouraging potential annotation.<br></p><p>The expectation that many if not most functions (with return values) should warn is, I believe, mostly motivating in the sense of hopefully making this change (more) palatable.<br></p><p>- Janosch<br></p><p>&gt; On 24 Feb 2016, at 23:47, Gwendal Roué &lt;gwendal.roue at gmail.com&gt; wrote:<br>&gt; <br>&gt; Oh yes please, don&#39;t rush on this...<br>&gt; <br>&gt; Who do we want to help here? API users, or API developers?<br>&gt; <br>&gt; Considering that Swift may be on the verge of a great breakthrough, plenty of immature yet popular libraries will ship. Plenty have already shipped. This is a great sign of vitality. Should @warn_unused_result become the default, the quality of the code of the users of those libraries risks a brutal degradation, full of poor `let _ = ...`.<br>&gt; <br>&gt; Gwendal<br>&gt; <br>&gt;&gt; Le 24 févr. 2016 à 16:01, Jean-Daniel Dupas via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; IMHO, before any decision, it may be interesting to write a quick patch and run the modified compiler on real code to see how much false positive it would generate.<br>&gt;&gt; <br>&gt;&gt;&gt; Le 24 févr. 2016 à 16:13, Janosch Hildebrand via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Erica&#39;s proposal about &quot;Modernizing Attribute Case and Attribute Argument Naming&quot; made me remember this discussion.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t think a proposal was ever submitted? If no one else is working on a proposal already I would offer myself up for writing this up.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Janosch<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>February 25, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; On 24 Feb 2016, at 23:45, Janosch Hildebrand via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Ideally every function would be perfectly annotated but ultimately not every API developer will know about, remember or put in the effort to annotate with @warn_unused_result. Making the inverse the default should hopefully be “safer” by warning by default.<br></p><p>I stumbled across @warn_unused_result pretty early on when learning Swift, but I still miss it on around 90% of my method declarations that should have it, particularly if I’m filling something out quickly to flesh it out later. I think in part of the problem is simply that it’s extra detail to add, which is kind of strange in Swift when we have all our time savers like type inference and the simplified forms of closures; it makes more sense to add an attribute in the less common case, which in my experience is having a method result that may not be needed.<br></p><p>I’d liken it to mutable variables that you don’t actually mutate; it’s an error I run into all the time, but I’d rather have false positives then miss cases. It’s also important on structs with both mutating and non-mutating options; while the choice of let or var should keep you right much of the time, sometimes you do want a copy from a mutable value, so a mistakenly typing .reverse() instead of .reversed() for example is a mistake that result usage warnings can help prevent, but as long as developers keep forgetting to add @warn_unused_result it’s a warning that may not come up when it’s really needed =)<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>February 24, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On Feb 24, 2016, at 3:45 PM, Janosch Hildebrand via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; No worries, there should be plenty of time for discussion.<br>&gt; <br>&gt; Swift 3 contains many changes that will require libraries to be updated anyway, so I don’t think this would prove to be an undue burden.<br></p><p>Agreed - source breaking changes in Swift 3 are already a given, so we’re going to provide a really great migrator to help move people forward.  Beyond Swift 3, the Swift community will be a much more diverse place with multiple platforms supported and more diverse tools/ide’s used.<br></p><p>As such, source breaking changes will be much more difficult to justify after Swift 3 is out the door, we’re prefer to roll them into Swift 3 where ever possible.<br></p><p>-Chris<br></p><p><br>&gt; But yes, weighing cost vs. benefit will certainly be part of the proposal evaluation.<br>&gt; <br>&gt; As for whom we want to help, it’s predominantly API users.<br>&gt; Ideally every function would be perfectly annotated but ultimately not every API developer will know about, remember or put in the effort to annotate with @warn_unused_result. Making the inverse the default should hopefully be “safer” by warning by default.<br>&gt; <br>&gt; Extraneous warnings are also much more obvious than missing warnings, encouraging potential annotation.<br>&gt; <br>&gt; The expectation that many if not most functions (with return values) should warn is, I believe, mostly motivating in the sense of hopefully making this change (more) palatable.<br>&gt; <br>&gt; - Janosch<br>&gt; <br>&gt;&gt; On 24 Feb 2016, at 23:47, Gwendal Roué &lt;gwendal.roue at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Oh yes please, don&#39;t rush on this...<br>&gt;&gt; <br>&gt;&gt; Who do we want to help here? API users, or API developers?<br>&gt;&gt; <br>&gt;&gt; Considering that Swift may be on the verge of a great breakthrough, plenty of immature yet popular libraries will ship. Plenty have already shipped. This is a great sign of vitality. Should @warn_unused_result become the default, the quality of the code of the users of those libraries risks a brutal degradation, full of poor `let _ = ...`.<br>&gt;&gt; <br>&gt;&gt; Gwendal<br>&gt;&gt; <br>&gt;&gt;&gt; Le 24 févr. 2016 à 16:01, Jean-Daniel Dupas via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; IMHO, before any decision, it may be interesting to write a quick patch and run the modified compiler on real code to see how much false positive it would generate.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Le 24 févr. 2016 à 16:13, Janosch Hildebrand via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Erica&#39;s proposal about &quot;Modernizing Attribute Case and Attribute Argument Naming&quot; made me remember this discussion.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I don&#39;t think a proposal was ever submitted? If no one else is working on a proposal already I would offer myself up for writing this up.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - Janosch<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>February 24, 2016 at 06:00:00pm</p></header><div class="content"><p>What about @warnUnusedResult being implied for @pure functions, and leaving it off by default for everything else? <br></p><p>- Dave Sweeris<br></p><p>&gt; On Feb 24, 2016, at 16:47, Gwendal Roué via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Should @warn_unused_result become the default, the quality of the code of the users of those libraries risks a brutal degradation, full of poor `let _ = ...`.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>February 25, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; What about @warnUnusedResult being implied for @pure functions, and leaving it off by default for everything else? <br>I think this is the right way.<br>Ignoring the result of a call to a pure function is suspicious and most likely an error — but anything else is imho just dry-nursing developers:<br>As library author, I have to assume that clients have an idea of what they are doing; when someone uses my methods without knowing basic stuff like relevance of the return value, I can&#39;t enlighten him with with a warning that is nothing but annoyance for those who know what they are doing.<br></p><p>A monstrosity like &quot;dont_warn_unused_result&quot; would more or less discourage things like chaining, and the language imho shouldn&#39;t push you into that direction.<br>Of course, the status quo isn&#39;t good either, as @warn_unused_result is a ugly burden for those who want to give hints in their libraries…<br></p><p>I like Brents idea of putting the annotation next to the return type to indicate its effect, but prefer a variant:<br>mutating func nearlyPureMethod() @vital -&gt; Type<br>(although I see dangers with this approach: &quot;const&quot; in C++ for example is imho quite confusing because its meaning depends on its position)<br></p><p>Something like<br>@void func canIgnoreResult(input: String) -&gt; String<br>would be concise, but just because it looks familiar to many developes, it could be confusing as well.<br></p><p>A first thought was<br>func canIgnoreResult(input: String) -&gt; Void|String<br>but on a second glance, I would rather expect such a return type to behave like String?<br></p><p>Tino<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: smime.p7s<br>Type: application/pkcs7-signature<br>Size: 2448 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160225/06be5b28/attachment.p7s&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
