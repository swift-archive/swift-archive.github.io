<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>The great renaming and the state of new Unified Logging in Swift</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>September  2, 2016 at 11:00:00pm</p></header><div class="content"><p>I am unsure where to post this…but iOS 10 is introducing a new API for activity tracing and logging.<br></p><p>The API has been “Swift-ified” a little, but it still is a little awkward to use:<br></p><p>os_log(&quot;Sender: %{public}@&quot;, log: ViewController.ui_log, type: .debug, sender)<br></p><p>(This is taken from: https://developer.apple.com/library/prerelease/content/samplecode/Logging/Introduction/Intro.html#//apple_ref/doc/uid/TP40017510 &lt;https://developer.apple.com/library/prerelease/content/samplecode/Logging/Introduction/Intro.html#//apple_ref/doc/uid/TP40017510&gt;)<br></p><p>Note: the {public} modifier above does not work in swift but does in Objective-C. I have filed a radar for this.<br></p><p>A few things:<br>• This looks like how the Dispatch APIs use to look: very C-like which was made to be much better in The Great Renaming<br>• Cannot use Swift’s string interpolation, resulting in the arguments being passed in at the end<br></p><p>For reference, this is what it looks like in Objective-C, showing that SOME renaming has occurred: <br>os_log_debug(ui_log, &quot;Sender: %{public}@&quot;, sender);<br></p><p>This might look more Swift-like:<br>uiLog.log(&quot;Sender: %{public}\(sender)”, type: .debug)<br>* Makes “log” a method on an OSLog object <br>• Uses string interpolation<br></p><p><br>I hope this isn’t too late AND maybe we will see something more complete when the GM is released, but this seems important to correct and get right BEFORE it is released.<br></p><p>The OS framework is also suppose to have new activity tracing API but it is not yet exposed in Swift. This is worrisome as the GM is allegedly dropping next week.<br></p><p>If this is pushed aside: what happens when it is released as it is? Are we stuck with this API? Can it be corrected in Swift 4 (breaking changes etc…)?<br></p><p>Brandon<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160902/791cb506/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdd257c9369fb68e1d06923d10ff789e?s=50"></div><header><strong>The great renaming and the state of new Unified Logging in Swift</strong> from <string>Ben Rimmington</string> &lt;me at benrimmington.com&gt;<p>September  3, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On 3 Sep 2016, at 04:24, Brandon Knope wrote:<br>&gt; <br>&gt; I am unsure where to post this…but iOS 10 is introducing a new API for activity tracing and logging.<br>&gt; <br>&gt; The API has been “Swift-ified” a little, but it still is a little awkward to use:<br>&gt; <br>&gt; os_log(&quot;Sender: %{public}@&quot;, log: ViewController.ui_log, type: .debug, sender)<br>&gt; <br>&gt; (This is taken from: https://developer.apple.com/library/prerelease/content/samplecode/Logging/Introduction/Intro.html#//apple_ref/doc/uid/TP40017510 &lt;https://developer.apple.com/library/prerelease/content/samplecode/Logging/Introduction/Intro.html#//apple_ref/doc/uid/TP40017510&gt;)<br>&gt; <br>&gt; Note: the {public} modifier above does not work in swift but does in Objective-C. I have filed a radar for this.<br></p><p>Activity Tracing (2014) and Unified Logging (2016) APIs are complex preprocessor macros, which are not imported into Swift.<br></p><p>	&lt;https://developer.apple.com/videos/play/wwdc2014/714/&gt;<br></p><p>	&lt;https://developer.apple.com/videos/play/wwdc2016/721/&gt;<br></p><p>The os_log_with_type macro in &lt;os/log.h&gt; uses __builtin_os_log_format to encode its arguments into a byte array. The overlay for Swift instead uses its _os_log_encode C++ function, which only recognizes the {private} modifier.<br></p><p>	&lt;https://github.com/apple/swift/blob/e06d676d756ce95bd7c32a3029d165c7be5fd4b4/stdlib/public/SDK/os/os.mm#L245-L255&gt;<br></p><p>	&lt;https://github.com/apple/swift/tree/master/stdlib/public/SDK/os&gt;<br></p><p>&gt; A few things:<br>&gt; • This looks like how the Dispatch APIs use to look: very C-like which was made to be much better in The Great Renaming<br>&gt; • Cannot use Swift’s string interpolation, resulting in the arguments being passed in at the end<br>&gt; <br>&gt; For reference, this is what it looks like in Objective-C, showing that SOME renaming has occurred: <br>&gt; os_log_debug(ui_log, &quot;Sender: %{public}@&quot;, sender);<br>&gt; <br>&gt; This might look more Swift-like:<br>&gt; uiLog.log(&quot;Sender: %{public}\(sender)”, type: .debug)<br>&gt; * Makes “log” a method on an OSLog object <br>&gt; • Uses string interpolation<br></p><p>The format string of os_log APIs is required to be constant. The overlay uses a StaticString, which isn&#39;t ExpressibleByStringInterpolation. SE-0137 also deprecated the protocol, so that it can be redesigned.<br></p><p>	&lt;https://github.com/apple/swift-evolution/blob/master/proposals/0137-avoiding-lock-in.md&gt;<br></p><p>An instance method of OSLog might be better, except when using the `default` object.<br></p><p>	OSLog.default.log(&quot;message&quot;)<br></p><p>Similarly, the Swift.print(_:separator:terminator:to:) function might be better as a TextOutputStream method.<br></p><p>-- Ben<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160903/c57b93ce/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>The great renaming and the state of new Unified Logging in Swift</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>September  3, 2016 at 02:00:00pm</p></header><div class="content"><p>Thank you! I was looking for this last night and failed. <br></p><p>Why do you think {public} isn&#39;t included?<br></p><p>Sent from my iPad<br></p><p>&gt; On Sep 3, 2016, at 2:06 PM, Ben Rimmington &lt;me at benrimmington.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 3 Sep 2016, at 04:24, Brandon Knope wrote:<br>&gt;&gt; <br>&gt;&gt; I am unsure where to post this…but iOS 10 is introducing a new API for activity tracing and logging.<br>&gt;&gt; <br>&gt;&gt; The API has been “Swift-ified” a little, but it still is a little awkward to use:<br>&gt;&gt; <br>&gt;&gt; os_log(&quot;Sender: %{public}@&quot;, log: ViewController.ui_log, type: .debug, sender)<br>&gt;&gt; <br>&gt;&gt; (This is taken from: https://developer.apple.com/library/prerelease/content/samplecode/Logging/Introduction/Intro.html#//apple_ref/doc/uid/TP40017510)<br>&gt;&gt; <br>&gt;&gt; Note: the {public} modifier above does not work in swift but does in Objective-C. I have filed a radar for this.<br>&gt; <br>&gt; Activity Tracing (2014) and Unified Logging (2016) APIs are complex preprocessor macros, which are not imported into Swift.<br>&gt; <br>&gt; 	&lt;https://developer.apple.com/videos/play/wwdc2014/714/&gt;<br>&gt; <br>&gt; 	&lt;https://developer.apple.com/videos/play/wwdc2016/721/&gt;<br>&gt; <br>&gt; The os_log_with_type macro in &lt;os/log.h&gt; uses __builtin_os_log_format to encode its arguments into a byte array. The overlay for Swift instead uses its _os_log_encode C++ function, which only recognizes the {private} modifier.<br>&gt; <br>&gt; 	&lt;https://github.com/apple/swift/blob/e06d676d756ce95bd7c32a3029d165c7be5fd4b4/stdlib/public/SDK/os/os.mm#L245-L255&gt;<br>&gt; <br>&gt; 	&lt;https://github.com/apple/swift/tree/master/stdlib/public/SDK/os&gt;<br>&gt; <br>&gt;&gt; A few things:<br>&gt;&gt; • This looks like how the Dispatch APIs use to look: very C-like which was made to be much better in The Great Renaming<br>&gt;&gt; • Cannot use Swift’s string interpolation, resulting in the arguments being passed in at the end<br>&gt;&gt; <br>&gt;&gt; For reference, this is what it looks like in Objective-C, showing that SOME renaming has occurred: <br>&gt;&gt; os_log_debug(ui_log, &quot;Sender: %{public}@&quot;, sender);<br>&gt;&gt; <br>&gt;&gt; This might look more Swift-like:<br>&gt;&gt; uiLog.log(&quot;Sender: %{public}\(sender)”, type: .debug)<br>&gt;&gt; * Makes “log” a method on an OSLog object <br>&gt;&gt; • Uses string interpolation<br>&gt; <br>&gt; The format string of os_log APIs is required to be constant. The overlay uses a StaticString, which isn&#39;t ExpressibleByStringInterpolation. SE-0137 also deprecated the protocol, so that it can be redesigned.<br>&gt; <br>&gt; 	&lt;https://github.com/apple/swift-evolution/blob/master/proposals/0137-avoiding-lock-in.md&gt;<br>&gt; <br>&gt; An instance method of OSLog might be better, except when using the `default` object.<br>&gt; <br>&gt; 	OSLog.default.log(&quot;message&quot;)<br>&gt; <br>&gt; Similarly, the Swift.print(_:separator:terminator:to:) function might be better as a TextOutputStream method.<br>&gt; <br>&gt; -- Ben<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160903/a1fc8208/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdd257c9369fb68e1d06923d10ff789e?s=50"></div><header><strong>The great renaming and the state of new Unified Logging in Swift</strong> from <string>Ben Rimmington</string> &lt;me at benrimmington.com&gt;<p>September  3, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On 3 Sep 2016, at 19:13, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt; <br>&gt; Thank you! I was looking for this last night and failed. <br>&gt; <br>&gt; Why do you think {public} isn&#39;t included?<br></p><p>I don&#39;t know, but trying to reimplement __builtin_os_log_format in the overlay seems wrong. It would be better to have a variant of __builtin_os_log_format which takes a va_list.<br></p><p>-- Ben<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160903/65ab5c33/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>The great renaming and the state of new Unified Logging in Swift</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>September  4, 2016 at 08:00:00pm</p></header><div class="content"><p>Sent from my iPhone<br></p><p>&gt; On Sep 3, 2016, at 11:32 AM, Ben Rimmington via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 3 Sep 2016, at 19:13, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Thank you! I was looking for this last night and failed. <br>&gt;&gt; <br>&gt;&gt; Why do you think {public} isn&#39;t included?<br>&gt; <br>&gt; I don&#39;t know, but trying to reimplement __builtin_os_log_format in the overlay seems wrong. It would be better to have a variant of __builtin_os_log_format which takes a va_list.<br></p><p><br>__builtin_os_log_format is implemented by Clang, not a library, and is quite involved. Implementing os_log in an overlay to provide near feature-compatibility with the C API is the right approach for Swift 3, where a more comprehensive solution (say, a general logging API based on string interpolation or similar) is way out of scope. <br></p><p>  - Doug<br></p><p><br>&gt; <br>&gt; -- Ben<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160904/790678f5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>The great renaming and the state of new Unified Logging in Swift</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>September  5, 2016 at 12:00:00am</p></header><div class="content"><p>Where should the lack of {public} be reported then?<br></p><p>This seems like it falls under jira and not radar because it&#39;s in swift open source but I&#39;m not 100 percent <br></p><p>Brandon <br></p><p>Sent from my iPad<br></p><p>&gt; On Sep 4, 2016, at 11:48 PM, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt;&gt; On Sep 3, 2016, at 11:32 AM, Ben Rimmington via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 3 Sep 2016, at 19:13, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thank you! I was looking for this last night and failed. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Why do you think {public} isn&#39;t included?<br>&gt;&gt; <br>&gt;&gt; I don&#39;t know, but trying to reimplement __builtin_os_log_format in the overlay seems wrong. It would be better to have a variant of __builtin_os_log_format which takes a va_list.<br>&gt; <br>&gt; <br>&gt; __builtin_os_log_format is implemented by Clang, not a library, and is quite involved. Implementing os_log in an overlay to provide near feature-compatibility with the C API is the right approach for Swift 3, where a more comprehensive solution (say, a general logging API based on string interpolation or similar) is way out of scope. <br>&gt; <br>&gt;   - Doug<br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; -- Ben<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160905/3c0d1830/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>The great renaming and the state of new Unified Logging in Swift</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>September  5, 2016 at 07:00:00am</p></header><div class="content"><p>Hey Doug,<br></p><p>How do I use it in Swift code without a wrapper, which is understandably a bit pointless, if I still support iOS 9?<br></p><p>Sent from my iPhone<br></p><p>&gt; On 5 Sep 2016, at 05:05, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Where should the lack of {public} be reported then?<br>&gt; <br>&gt; This seems like it falls under jira and not radar because it&#39;s in swift open source but I&#39;m not 100 percent <br>&gt; <br>&gt; Brandon <br>&gt; <br>&gt; Sent from my iPad<br>&gt; <br>&gt;&gt; On Sep 4, 2016, at 11:48 PM, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt;&gt; On Sep 3, 2016, at 11:32 AM, Ben Rimmington via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 3 Sep 2016, at 19:13, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thank you! I was looking for this last night and failed. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Why do you think {public} isn&#39;t included?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t know, but trying to reimplement __builtin_os_log_format in the overlay seems wrong. It would be better to have a variant of __builtin_os_log_format which takes a va_list.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; __builtin_os_log_format is implemented by Clang, not a library, and is quite involved. Implementing os_log in an overlay to provide near feature-compatibility with the C API is the right approach for Swift 3, where a more comprehensive solution (say, a general logging API based on string interpolation or similar) is way out of scope. <br>&gt;&gt; <br>&gt;&gt;   - Doug<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- Ben<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160905/7bdd0983/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>The great renaming and the state of new Unified Logging in Swift</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>September  5, 2016 at 10:00:00am</p></header><div class="content"><p>Sent from my iPhone<br></p><p>&gt; On Sep 4, 2016, at 11:48 PM, Goffredo Marocchi &lt;panajev at gmail.com&gt; wrote:<br>&gt; <br>&gt; Hey Doug,<br>&gt; <br>&gt; How do I use it in Swift code without a wrapper, which is understandably a bit pointless, if I still support iOS 9?<br></p><p>#if or a wrapper are your best options. <br></p><p>  - Doug<br></p><p>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt;&gt; On 5 Sep 2016, at 05:05, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Where should the lack of {public} be reported then?<br>&gt;&gt; <br>&gt;&gt; This seems like it falls under jira and not radar because it&#39;s in swift open source but I&#39;m not 100 percent <br>&gt;&gt; <br>&gt;&gt; Brandon <br>&gt;&gt; <br>&gt;&gt; Sent from my iPad<br>&gt;&gt; <br>&gt;&gt;&gt; On Sep 4, 2016, at 11:48 PM, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Sep 3, 2016, at 11:32 AM, Ben Rimmington via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 3 Sep 2016, at 19:13, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Thank you! I was looking for this last night and failed. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Why do you think {public} isn&#39;t included?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I don&#39;t know, but trying to reimplement __builtin_os_log_format in the overlay seems wrong. It would be better to have a variant of __builtin_os_log_format which takes a va_list.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; __builtin_os_log_format is implemented by Clang, not a library, and is quite involved. Implementing os_log in an overlay to provide near feature-compatibility with the C API is the right approach for Swift 3, where a more comprehensive solution (say, a general logging API based on string interpolation or similar) is way out of scope. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   - Doug<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- Ben<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160905/02771f5b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>The great renaming and the state of new Unified Logging in Swift</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>September  5, 2016 at 07:00:00pm</p></header><div class="content"><p>Sent from my iPhone<br></p><p>&gt; On 5 Sep 2016, at 18:59, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt;&gt; On Sep 4, 2016, at 11:48 PM, Goffredo Marocchi &lt;panajev at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hey Doug,<br>&gt;&gt; <br>&gt;&gt; How do I use it in Swift code without a wrapper, which is understandably a bit pointless, if I still support iOS 9?<br>&gt; <br>&gt; #if or a wrapper are your best options. <br>&gt; <br></p><p>This is confusing to me as the WWDC talk they specifically said not to use wrappers as it would pick up the wrong context and using the #if directive at every call site would make for a lot of repeated code... hard to use.<br></p><p>It would be good if macro support for Swift landed in the not too distant future as cases like this make its lack of sorely missed.<br></p><p>&gt;   - Doug<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt;&gt; On 5 Sep 2016, at 05:05, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Where should the lack of {public} be reported then?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This seems like it falls under jira and not radar because it&#39;s in swift open source but I&#39;m not 100 percent <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Brandon <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Sep 4, 2016, at 11:48 PM, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Sep 3, 2016, at 11:32 AM, Ben Rimmington via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On 3 Sep 2016, at 19:13, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Thank you! I was looking for this last night and failed. <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Why do you think {public} isn&#39;t included?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I don&#39;t know, but trying to reimplement __builtin_os_log_format in the overlay seems wrong. It would be better to have a variant of __builtin_os_log_format which takes a va_list.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; __builtin_os_log_format is implemented by Clang, not a library, and is quite involved. Implementing os_log in an overlay to provide near feature-compatibility with the C API is the right approach for Swift 3, where a more comprehensive solution (say, a general logging API based on string interpolation or similar) is way out of scope. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   - Doug<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -- Ben<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160905/f3555c3c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>The great renaming and the state of new Unified Logging in Swift</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>September  5, 2016 at 12:00:00pm</p></header><div class="content"><p>Sent from my iPhone<br></p><p>&gt; On Sep 5, 2016, at 11:20 AM, Goffredo Marocchi &lt;panajev at gmail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt;&gt; On 5 Sep 2016, at 18:59, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt;&gt; On Sep 4, 2016, at 11:48 PM, Goffredo Marocchi &lt;panajev at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hey Doug,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; How do I use it in Swift code without a wrapper, which is understandably a bit pointless, if I still support iOS 9?<br>&gt;&gt; <br>&gt;&gt; #if or a wrapper are your best options. <br>&gt;&gt; <br>&gt; <br>&gt; This is confusing to me as the WWDC talk they specifically said not to use wrappers as it would pick up the wrong context<br></p><p>Ah, right. I forgot about that. <br></p><p>&gt; and using the #if directive at every call site would make for a lot of repeated code... hard to use.<br></p><p>Yes, using #if can be boilerplate-y here. <br></p><p>&gt; It would be good if macro support for Swift landed in the not too distant future as cases like this make its lack of sorely missed.<br></p><p>Macro support is not likely to be a priority for  quite a while. <br></p><p>  - Doug<br></p><p>&gt; <br>&gt;&gt;   - Doug<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 5 Sep 2016, at 05:05, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Where should the lack of {public} be reported then?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This seems like it falls under jira and not radar because it&#39;s in swift open source but I&#39;m not 100 percent <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Brandon <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Sep 4, 2016, at 11:48 PM, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Sep 3, 2016, at 11:32 AM, Ben Rimmington via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On 3 Sep 2016, at 19:13, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Thank you! I was looking for this last night and failed. <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Why do you think {public} isn&#39;t included?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t know, but trying to reimplement __builtin_os_log_format in the overlay seems wrong. It would be better to have a variant of __builtin_os_log_format which takes a va_list.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; __builtin_os_log_format is implemented by Clang, not a library, and is quite involved. Implementing os_log in an overlay to provide near feature-compatibility with the C API is the right approach for Swift 3, where a more comprehensive solution (say, a general logging API based on string interpolation or similar) is way out of scope. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;   - Doug<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; -- Ben<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160905/2365f61b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>The great renaming and the state of new Unified Logging in Swift</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>September  5, 2016 at 10:00:00pm</p></header><div class="content"><p>Sent from my iPhone<br></p><p>&gt; On 5 Sep 2016, at 20:01, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt;&gt; On Sep 5, 2016, at 11:20 AM, Goffredo Marocchi &lt;panajev at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt;&gt; On 5 Sep 2016, at 18:59, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Sep 4, 2016, at 11:48 PM, Goffredo Marocchi &lt;panajev at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hey Doug,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; How do I use it in Swift code without a wrapper, which is understandably a bit pointless, if I still support iOS 9?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; #if or a wrapper are your best options. <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; This is confusing to me as the WWDC talk they specifically said not to use wrappers as it would pick up the wrong context<br>&gt; <br>&gt; Ah, right. I forgot about that. <br>&gt; <br>&gt;&gt; and using the #if directive at every call site would make for a lot of repeated code... hard to use.<br>&gt; <br>&gt; Yes, using #if can be boilerplate-y here. <br>&gt; <br></p><p>Oh well, if it cannot be helped there is an area I will have to butt heads in code reviews...<br></p><p>&gt;&gt; It would be good if macro support for Swift landed in the not too distant future as cases like this make its lack of sorely missed.<br>&gt; <br>&gt; Macro support is not likely to be a priority for  quite a while. <br></p><p>I hope you will not find it too impolite, but this feels like a more dogmatic decision than I would like. I agree that macro&#39;s do not feel pure, but they allow you to adapt to some of the ugliness of real world use cases (the fact that Swift forces people to write a lot of boilerplate or to give up on this pushes people that support iOS9 and want to go full Swift to drop the idea of using os_log... do we rather have that than compromise slightly on purity perhaps?). Sorry for the long aside, but maybe shedding all the C part of Objective-C did hurt a bit the ease of adaptation. <br></p><p>Very few people can go iOS 10+ only and I do find a lot of great value in the new logging system and Objective-C allows me to use it a lot sooner thanks to macro support.<br></p><p>&gt; <br>&gt;   - Doug<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt;   - Doug<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 5 Sep 2016, at 05:05, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Where should the lack of {public} be reported then?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; This seems like it falls under jira and not radar because it&#39;s in swift open source but I&#39;m not 100 percent <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Brandon <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Sep 4, 2016, at 11:48 PM, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Sep 3, 2016, at 11:32 AM, Ben Rimmington via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On 3 Sep 2016, at 19:13, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Thank you! I was looking for this last night and failed. <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Why do you think {public} isn&#39;t included?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t know, but trying to reimplement __builtin_os_log_format in the overlay seems wrong. It would be better to have a variant of __builtin_os_log_format which takes a va_list.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; __builtin_os_log_format is implemented by Clang, not a library, and is quite involved. Implementing os_log in an overlay to provide near feature-compatibility with the C API is the right approach for Swift 3, where a more comprehensive solution (say, a general logging API based on string interpolation or similar) is way out of scope. <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;   - Doug<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; -- Ben<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160905/c7344765/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>The great renaming and the state of new Unified Logging in Swift</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>September  5, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Sep 5, 2016, at 2:46 PM, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I hope you will not find it too impolite, but this feels like a more dogmatic decision than I would like. I agree that macro&#39;s do not feel pure, but they allow you to adapt to some of the ugliness of real world use cases (the fact that Swift forces people to write a lot of boilerplate or to give up on this pushes people that support iOS9 and want to go full Swift to drop the idea of using os_log... do we rather have that than compromise slightly on purity perhaps?). Sorry for the long aside, but maybe shedding all the C part of Objective-C did hurt a bit the ease of adaptation. <br></p><p>I think you may be misinterpreting the reason macros are being deferred. As I understand it, it&#39;s not because of dislike for macros, but because of a desire to do them deeply and comprehensively—something more like Lisp&#39;s treatment of macros than C&#39;s. It&#39;s the same reason we haven&#39;t yet done regular expressions, or concurrency, or any of a hundred other features that are easy to do poorly and difficult to do well.<br></p><p>A secondary reason is that we want time to develop easier-to-use features for common boilerplate cases before we design a boilerplate feature that can do anything, but is difficult to use. For instance, the use cases for the proposed property behavior feature could probably be handled with macros, but it would be much more difficult to define a macro than it would be to define a property behavior.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>The great renaming and the state of new Unified Logging in Swift</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>September  6, 2016 at 07:00:00am</p></header><div class="content"><p>Sent from my iPhone<br></p><p>On 6 Sep 2016, at 02:44, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br></p><p>&gt;&gt; On Sep 5, 2016, at 2:46 PM, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I hope you will not find it too impolite, but this feels like a more dogmatic decision than I would like. I agree that macro&#39;s do not feel pure, but they allow you to adapt to some of the ugliness of real world use cases (the fact that Swift forces people to write a lot of boilerplate or to give up on this pushes people that support iOS9 and want to go full Swift to drop the idea of using os_log... do we rather have that than compromise slightly on purity perhaps?). Sorry for the long aside, but maybe shedding all the C part of Objective-C did hurt a bit the ease of adaptation. <br>&gt; <br>&gt; I think you may be misinterpreting the reason macros are being deferred. As I understand it, it&#39;s not because of dislike for macros, but because of a desire to do them deeply and comprehensively—something more like Lisp&#39;s treatment of macros than C&#39;s. It&#39;s the same reason we haven&#39;t yet done regular expressions, or concurrency, or any of a hundred other features that are easy to do poorly and difficult to do well.<br>&gt; <br>&gt; A secondary reason is that we want time to develop easier-to-use features for common boilerplate cases before we design a boilerplate feature that can do anything, but is difficult to use. For instance, the use cases for the proposed property behavior feature could probably be handled with macros, but it would be much more difficult to define a macro than it would be to define a property behavior.<br>&gt; <br></p><p>Fair enough, I can understand and appreciate the desire to do those features well, but there is also the desire to use such features now that keeps me still writing more and more Objective-C at work. iOS 6 and iOS 7 still matter too much to where I work for iOS 6 to be dropped and without Objective-C&#39;s ability to swizzle methods we would have been in trouble with several vendors pushing of libraries which would crash if their code ran on an iOS 6 device, but that is an aside.<br></p><p>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160906/eb41ffc2/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>The great renaming and the state of new Unified Logging in Swift</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>September  6, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Sep 5, 2016, at 6:44 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Sep 5, 2016, at 2:46 PM, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I hope you will not find it too impolite, but this feels like a more dogmatic decision than I would like. I agree that macro&#39;s do not feel pure, but they allow you to adapt to some of the ugliness of real world use cases (the fact that Swift forces people to write a lot of boilerplate or to give up on this pushes people that support iOS9 and want to go full Swift to drop the idea of using os_log... do we rather have that than compromise slightly on purity perhaps?). Sorry for the long aside, but maybe shedding all the C part of Objective-C did hurt a bit the ease of adaptation. <br>&gt; <br>&gt; I think you may be misinterpreting the reason macros are being deferred. As I understand it, it&#39;s not because of dislike for macros, but because of a desire to do them deeply and comprehensively—something more like Lisp&#39;s treatment of macros than C&#39;s. It&#39;s the same reason we haven&#39;t yet done regular expressions, or concurrency, or any of a hundred other features that are easy to do poorly and difficult to do well.<br>&gt; <br>&gt; A secondary reason is that we want time to develop easier-to-use features for common boilerplate cases before we design a boilerplate feature that can do anything, but is difficult to use. For instance, the use cases for the proposed property behavior feature could probably be handled with macros, but it would be much more difficult to define a macro than it would be to define a property behavior.<br></p><p>Right on both points!<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>The great renaming and the state of new Unified Logging in Swift</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>September  6, 2016 at 11:00:00pm</p></header><div class="content"><p>Hello Chris,<br></p><p>What would you suggest for people that want to use Swift, but cannot set a<br>target of iOS 10+? Could the compiler/backward compatibility library<br>intercept those calls in older OS&#39;s and replace them with simple NSLog&#39;s<br>with some data added to the logged string?<br></p><p>On Tue, Sep 6, 2016 at 10:56 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Sep 5, 2016, at 6:44 PM, Brent Royal-Gordon via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt; On Sep 5, 2016, at 2:46 PM, Goffredo Marocchi via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I hope you will not find it too impolite, but this feels like a more<br>&gt; dogmatic decision than I would like. I agree that macro&#39;s do not feel pure,<br>&gt; but they allow you to adapt to some of the ugliness of real world use cases<br>&gt; (the fact that Swift forces people to write a lot of boilerplate or to give<br>&gt; up on this pushes people that support iOS9 and want to go full Swift to<br>&gt; drop the idea of using os_log... do we rather have that than compromise<br>&gt; slightly on purity perhaps?). Sorry for the long aside, but maybe shedding<br>&gt; all the C part of Objective-C did hurt a bit the ease of adaptation.<br>&gt; &gt;<br>&gt; &gt; I think you may be misinterpreting the reason macros are being deferred.<br>&gt; As I understand it, it&#39;s not because of dislike for macros, but because of<br>&gt; a desire to do them deeply and comprehensively—something more like Lisp&#39;s<br>&gt; treatment of macros than C&#39;s. It&#39;s the same reason we haven&#39;t yet done<br>&gt; regular expressions, or concurrency, or any of a hundred other features<br>&gt; that are easy to do poorly and difficult to do well.<br>&gt; &gt;<br>&gt; &gt; A secondary reason is that we want time to develop easier-to-use<br>&gt; features for common boilerplate cases before we design a boilerplate<br>&gt; feature that can do anything, but is difficult to use. For instance, the<br>&gt; use cases for the proposed property behavior feature could probably be<br>&gt; handled with macros, but it would be much more difficult to define a macro<br>&gt; than it would be to define a property behavior.<br>&gt;<br>&gt; Right on both points!<br>&gt;<br>&gt; -Chris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160906/60be08de/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>The great renaming and the state of new Unified Logging in Swift</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>September  6, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Sep 6, 2016, at 3:16 PM, Goffredo Marocchi &lt;panajev at gmail.com&gt; wrote:<br>&gt; <br>&gt; Hello Chris,<br>&gt; <br>&gt; What would you suggest for people that want to use Swift, but cannot set a target of iOS 10+? Could the compiler/backward compatibility library intercept those calls in older OS&#39;s and replace them with simple NSLog&#39;s with some data added to the logged string?<br></p><p>I’m not an expert on the os logging features, and haven’t followed the issues involved, sorry.<br></p><p>-Chris<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>The great renaming and the state of new Unified Logging in Swift</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>September  5, 2016 at 06:00:00pm</p></header><div class="content"><p>Sent from my iPhone<br></p><p>&gt; On Sep 5, 2016, at 2:46 PM, Goffredo Marocchi &lt;panajev at gmail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt;&gt; On 5 Sep 2016, at 20:01, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt;&gt; On Sep 5, 2016, at 11:20 AM, Goffredo Marocchi &lt;panajev at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 5 Sep 2016, at 18:59, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Sep 4, 2016, at 11:48 PM, Goffredo Marocchi &lt;panajev at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Hey Doug,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; How do I use it in Swift code without a wrapper, which is understandably a bit pointless, if I still support iOS 9?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; #if or a wrapper are your best options. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is confusing to me as the WWDC talk they specifically said not to use wrappers as it would pick up the wrong context<br>&gt;&gt; <br>&gt;&gt; Ah, right. I forgot about that. <br>&gt;&gt; <br>&gt;&gt;&gt; and using the #if directive at every call site would make for a lot of repeated code... hard to use.<br>&gt;&gt; <br>&gt;&gt; Yes, using #if can be boilerplate-y here. <br>&gt;&gt; <br>&gt; <br>&gt; Oh well, if it cannot be helped there is an area I will have to butt heads in code reviews...<br>&gt; <br>&gt;&gt;&gt; It would be good if macro support for Swift landed in the not too distant future as cases like this make its lack of sorely missed.<br>&gt;&gt; <br>&gt;&gt; Macro support is not likely to be a priority for  quite a while. <br>&gt; <br>&gt; I hope you will not find it too impolite, but this feels like a more dogmatic decision than I would like. I agree that macro&#39;s do not feel pure, but they allow you to adapt to some of the ugliness of real world use cases (the fact that Swift forces people to write a lot of boilerplate or to give up on this pushes people that support iOS9 and want to go full Swift to drop the idea of using os_log... do we rather have that than compromise slightly on purity perhaps?). Sorry for the long aside, but maybe shedding all the C part of Objective-C did hurt a bit the ease of adaptation. <br></p><p>A macro system isn&#39;t a &quot;slight&quot; compromise. It&#39;s a major feature whose existence would forever change the way libraries are written in Swift. It&#39;s not a feature to be taken lightly. The C preprocessor is the single worst part of the C language from a tooling perspective, and even very well-designed macro systems (e.g., Scala&#39;s macro system is fairly interesting) have taken numerous iterations. <br></p><p>&gt; Very few people can go iOS 10+ only and I do find a lot of great value in the new logging system and Objective-C allows me to use it a lot sooner thanks to macro support.<br></p><p>Objective-C &quot;sorta&quot; lets you use the feature sooner; you can log differently on iOS 9 with your own implementation of os_los, but the OS provides far better logging support with a real os_log implementation. That&#39;s the real point here, though: os_log is not a Swift feature. It&#39;s an OS feature available in Swift, and it is very very rare to have an OS-level feature that works on previous OS&#39;s. <br></p><p>  - Doug<br></p><p>&gt;&gt; <br>&gt;&gt;   - Doug<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   - Doug<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On 5 Sep 2016, at 05:05, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Where should the lack of {public} be reported then?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; This seems like it falls under jira and not radar because it&#39;s in swift open source but I&#39;m not 100 percent <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Brandon <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Sep 4, 2016, at 11:48 PM, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Sep 3, 2016, at 11:32 AM, Ben Rimmington via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On 3 Sep 2016, at 19:13, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Thank you! I was looking for this last night and failed. <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Why do you think {public} isn&#39;t included?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t know, but trying to reimplement __builtin_os_log_format in the overlay seems wrong. It would be better to have a variant of __builtin_os_log_format which takes a va_list.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; __builtin_os_log_format is implemented by Clang, not a library, and is quite involved. Implementing os_log in an overlay to provide near feature-compatibility with the C API is the right approach for Swift 3, where a more comprehensive solution (say, a general logging API based on string interpolation or similar) is way out of scope. <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;   - Doug<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -- Ben<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160905/d19ba4cb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>The great renaming and the state of new Unified Logging in Swift</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>September  6, 2016 at 07:00:00am</p></header><div class="content"><p>Sent from my iPhone<br></p><p>&gt; On 6 Sep 2016, at 02:50, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt;&gt; On Sep 5, 2016, at 2:46 PM, Goffredo Marocchi &lt;panajev at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt;&gt; On 5 Sep 2016, at 20:01, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Sep 5, 2016, at 11:20 AM, Goffredo Marocchi &lt;panajev at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 5 Sep 2016, at 18:59, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Sep 4, 2016, at 11:48 PM, Goffredo Marocchi &lt;panajev at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Hey Doug,<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; How do I use it in Swift code without a wrapper, which is understandably a bit pointless, if I still support iOS 9?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; #if or a wrapper are your best options. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This is confusing to me as the WWDC talk they specifically said not to use wrappers as it would pick up the wrong context<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Ah, right. I forgot about that. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; and using the #if directive at every call site would make for a lot of repeated code... hard to use.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yes, using #if can be boilerplate-y here. <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Oh well, if it cannot be helped there is an area I will have to butt heads in code reviews...<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; It would be good if macro support for Swift landed in the not too distant future as cases like this make its lack of sorely missed.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Macro support is not likely to be a priority for  quite a while. <br>&gt;&gt; <br>&gt;&gt; I hope you will not find it too impolite, but this feels like a more dogmatic decision than I would like. I agree that macro&#39;s do not feel pure, but they allow you to adapt to some of the ugliness of real world use cases (the fact that Swift forces people to write a lot of boilerplate or to give up on this pushes people that support iOS9 and want to go full Swift to drop the idea of using os_log... do we rather have that than compromise slightly on purity perhaps?). Sorry for the long aside, but maybe shedding all the C part of Objective-C did hurt a bit the ease of adaptation. <br>&gt; <br>&gt; A macro system isn&#39;t a &quot;slight&quot; compromise. It&#39;s a major feature whose existence would forever change the way libraries are written in Swift. It&#39;s not a feature to be taken lightly. The C preprocessor is the single worst part of the C language from a tooling perspective, and even very well-designed macro systems (e.g., Scala&#39;s macro system is fairly interesting) have taken numerous iterations. <br>&gt; <br></p><p>Fair enough, I was speaking by someone lucky enough to see mostly good effects on the user side and not the tool implementation side. Sorry if it felt a bit ignorantly irritating as a statement.<br></p><p>If the effects of a macro system are seen as so far reaching the concern of getting it even in the medium term is not a completely incorrect one to have though, right?<br></p><p>&gt;&gt; Very few people can go iOS 10+ only and I do find a lot of great value in the new logging system and Objective-C allows me to use it a lot sooner thanks to macro support.<br>&gt; <br>&gt; Objective-C &quot;sorta&quot; lets you use the feature sooner; you can log differently on iOS 9 with your own implementation of os_los, but the OS provides far better logging support with a real os_log implementation.<br></p><p>The point is that Objective-C kind of allows me to have my cake and eat it too because it makes it a lot easier to have something that still allows me to work on iOS 6-9 and then for iOS 10+ (which means I can use it plenty and get useful development and debugging information internally) I can use the real os_log.<br></p><p>&gt; That&#39;s the real point here, though: os_log is not a Swift feature. It&#39;s an OS feature available in Swift, and it is very very rare to have an OS-level feature that works on previous OS&#39;s. <br></p><p>Compatibility libraries to transform the calls into fancily formatted NSLog statements? Would that be an option?<br></p><p>&gt;   - Doug<br>&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   - Doug<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;   - Doug<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On 5 Sep 2016, at 05:05, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Where should the lack of {public} be reported then?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; This seems like it falls under jira and not radar because it&#39;s in swift open source but I&#39;m not 100 percent <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Brandon <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Sep 4, 2016, at 11:48 PM, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Sep 3, 2016, at 11:32 AM, Ben Rimmington via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On 3 Sep 2016, at 19:13, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Thank you! I was looking for this last night and failed. <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Why do you think {public} isn&#39;t included?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t know, but trying to reimplement __builtin_os_log_format in the overlay seems wrong. It would be better to have a variant of __builtin_os_log_format which takes a va_list.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; __builtin_os_log_format is implemented by Clang, not a library, and is quite involved. Implementing os_log in an overlay to provide near feature-compatibility with the C API is the right approach for Swift 3, where a more comprehensive solution (say, a general logging API based on string interpolation or similar) is way out of scope. <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   - Doug<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -- Ben<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160906/4c761daa/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76eb9711d45c1c9a71c0f24004072a22?s=50"></div><header><strong>The great renaming and the state of new Unified Logging in Swift</strong> from <string>Zach Waldowski</string> &lt;zach at waldowski.me&gt;<p>September  6, 2016 at 08:00:00am</p></header><div class="content"><p>For a wrapper, are there any public hooks into dyld that allow us to do<br>anything meaningful with #dsoHandle on prior OS? Without that, and<br>without using #dsoHandle, wrapping os_log is essentially useless.<br></p><p>Cheers!<br>  Zachary Waldowski<br>  zach at waldowski.me<br></p><p><br>On Mon, Sep 5, 2016, at 10:59 AM, Douglas Gregor via swift-evolution wrote:<br>&gt;<br>&gt;<br>&gt; Sent from my iPhone<br>&gt;<br>&gt; On Sep 4, 2016, at 11:48 PM, Goffredo Marocchi<br>&gt; &lt;panajev at gmail.com&gt; wrote:<br>&gt;&gt; Hey Doug,<br>&gt;&gt;<br>&gt;&gt; How do I use it in Swift code without a wrapper, which is<br>&gt;&gt; understandably a bit pointless, if I still support iOS 9?<br>&gt;<br>&gt; #if or a wrapper are your best options.<br>&gt;<br>&gt;   - Doug<br>&gt;<br>&gt;&gt;<br>&gt;&gt; Sent from my iPhone<br>&gt;&gt;<br>&gt;&gt; On 5 Sep 2016, at 05:05, Brandon Knope via swift-evolution &lt;swift-<br>&gt;&gt; evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; Where should the lack of {public} be reported then?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; This seems like it falls under jira and not radar because it&#39;s in<br>&gt;&gt;&gt; swift open source but I&#39;m not 100 percent<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Sep 4, 2016, at 11:48 PM, Douglas Gregor &lt;dgregor at apple.com&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Sep 3, 2016, at 11:32 AM, Ben Rimmington via swift-evolution &lt;swift-<br>&gt;&gt;&gt;&gt; evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; On 3 Sep 2016, at 19:13, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Thank you! I was looking for this last night and failed.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Why do you think {public} isn&#39;t included?<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I don&#39;t know, but trying to reimplement __builtin_os_log_format in<br>&gt;&gt;&gt;&gt;&gt; the overlay seems wrong. It would be better to have a variant of<br>&gt;&gt;&gt;&gt;&gt; __builtin_os_log_format which takes a va_list.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; __builtin_os_log_format is implemented by Clang, not a library, and<br>&gt;&gt;&gt;&gt; is quite involved. Implementing os_log in an overlay to provide<br>&gt;&gt;&gt;&gt; near feature-compatibility with the C API is the right approach for<br>&gt;&gt;&gt;&gt; Swift 3, where a more comprehensive solution (say, a general<br>&gt;&gt;&gt;&gt; logging API based on string interpolation or similar) is way out of<br>&gt;&gt;&gt;&gt; scope.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;   - Doug<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; -- Ben<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _________________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160906/9f20de27/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>The great renaming and the state of new Unified Logging in Swift</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>September  5, 2016 at 10:00:00am</p></header><div class="content"><p>Sent from my iPhone<br></p><p>&gt; On Sep 4, 2016, at 9:05 PM, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt; <br>&gt; Where should the lack of {public} be reported then?<br>&gt; <br>&gt; This seems like it falls under jira and not radar because it&#39;s in swift open source but I&#39;m not 100 percent <br></p><p>Overlays are a grey area. Please file a radar and send me the radar number offline. <br></p><p>  - Doug<br></p><p><br>&gt; <br>&gt; Brandon <br>&gt; <br>&gt; Sent from my iPad<br>&gt; <br>&gt;&gt; On Sep 4, 2016, at 11:48 PM, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt;&gt; On Sep 3, 2016, at 11:32 AM, Ben Rimmington via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 3 Sep 2016, at 19:13, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thank you! I was looking for this last night and failed. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Why do you think {public} isn&#39;t included?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t know, but trying to reimplement __builtin_os_log_format in the overlay seems wrong. It would be better to have a variant of __builtin_os_log_format which takes a va_list.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; __builtin_os_log_format is implemented by Clang, not a library, and is quite involved. Implementing os_log in an overlay to provide near feature-compatibility with the C API is the right approach for Swift 3, where a more comprehensive solution (say, a general logging API based on string interpolation or similar) is way out of scope. <br>&gt;&gt; <br>&gt;&gt;   - Doug<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- Ben<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160905/9a436d40/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
