<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d569462ac92d4619342b1c5ff305043?s=50"></div><header><strong>[Pich] allow embed type declaration in protocol &amp; allow throw in property getter/setter</strong> from <string>frogcjn at 163.com</string> &lt;frogcjn at 163.com&gt;<p>October  7, 2016 at 11:00:00pm</p></header><div class="content"><p>1. allow embed type declaration in protocol<br>e.g.:<br></p><p>protocol URLProvider {<br>    fun url() throws -&gt; URL<br>}<br></p><p>extension URLProvider {<br>    enum Error: Swift.Error {<br>         invalidBaseURL<br>         invalidPath<br>         invalidQuery<br>         invalidFragment<br>    }<br>}<br></p><p><br>     func parseURL() throws -&gt; URL {<br>        throw URLProvider.Error.invalidBaseURL<br>    }<br></p><p>2. allow throw in property getter/setter<br></p><p>e.g.:<br></p><p>struct myURLProvider: URLProvider {<br>    var url: throws -&gt; URL {<br>	try URL(baseURL: baseURL, path: path, query: query, fragment: fragment)<br>    }<br>}<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4c198ffcf0853e6011f58fdcdd32a111?s=50"></div><header><strong>[Pich] allow embed type declaration in protocol &amp; allow throw in property getter/setter</strong> from <string>Benjamin Spratling</string> &lt;bspratling at mac.com&gt;<p>October  7, 2016 at 12:00:00pm</p></header><div class="content"><p>+1 nested types in protocols<br>And nested protocols in types.<br></p><p>-1 on throwing properties.<br></p><p><br>&gt; On Oct 7, 2016, at 10:30 AM, Cao Jiannan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; 1. allow embed type declaration in protocol<br>&gt; e.g.:<br>&gt; <br>&gt; protocol URLProvider {<br>&gt;    fun url() throws -&gt; URL<br>&gt; }<br>&gt; <br>&gt; extension URLProvider {<br>&gt;    enum Error: Swift.Error {<br>&gt;         invalidBaseURL<br>&gt;         invalidPath<br>&gt;         invalidQuery<br>&gt;         invalidFragment<br>&gt;    }<br>&gt; }<br>&gt; <br>&gt; <br>&gt;     func parseURL() throws -&gt; URL {<br>&gt;        throw URLProvider.Error.invalidBaseURL<br>&gt;    }<br>&gt; <br>&gt; 2. allow throw in property getter/setter<br>&gt; <br>&gt; e.g.:<br>&gt; <br>&gt; struct myURLProvider: URLProvider {<br>&gt;    var url: throws -&gt; URL {<br>&gt; 	try URL(baseURL: baseURL, path: path, query: query, fragment: fragment)<br>&gt;    }<br>&gt; }<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Pich] allow embed type declaration in protocol &amp; allow throw in property getter/setter</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>October  7, 2016 at 08:00:00pm</p></header><div class="content"><p>+1 for nested everything (yes even extensions for local reasons where sometime you don’t want to write extension Outer.Middle.Inner) and maybe another shorthand form for nesting types.<br></p><p>We already have this extension Outer.Inner { … }. So why not allow struct/enum/class/protocol Outer.NewName { … } to reduce some clustering in some places.<br></p><p>Last one is additive + not everything I mentioned is trivial to implement (I’d guess).<br></p><p><br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 7. Oktober 2016 um 20:00:20, Benjamin Spratling via swift-evolution (swift-evolution at swift.org) schrieb:<br></p><p>+1 nested types in protocols<br>And nested protocols in types.<br></p><p>-1 on throwing properties.<br></p><p><br>&gt; On Oct 7, 2016, at 10:30 AM, Cao Jiannan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;  <br>&gt; 1. allow embed type declaration in protocol<br>&gt; e.g.:<br>&gt;  <br>&gt; protocol URLProvider {<br>&gt; fun url() throws -&gt; URL<br>&gt; }<br>&gt;  <br>&gt; extension URLProvider {<br>&gt; enum Error: Swift.Error {<br>&gt; invalidBaseURL<br>&gt; invalidPath<br>&gt; invalidQuery<br>&gt; invalidFragment<br>&gt; }<br>&gt; }<br>&gt;  <br>&gt;  <br>&gt; func parseURL() throws -&gt; URL {<br>&gt; throw URLProvider.Error.invalidBaseURL<br>&gt; }<br>&gt;  <br>&gt; 2. allow throw in property getter/setter<br>&gt;  <br>&gt; e.g.:<br>&gt;  <br>&gt; struct myURLProvider: URLProvider {<br>&gt; var url: throws -&gt; URL {<br>&gt; try URL(baseURL: baseURL, path: path, query: query, fragment: fragment)<br>&gt; }<br>&gt; }<br>&gt;  <br>&gt;  <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161007/f9809b4a/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
