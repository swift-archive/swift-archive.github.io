<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Pitch]Building a limited framework to develop Android Apps in Swift 3.0</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>October 10, 2016 at 01:00:00pm</p></header><div class="content"><p>on Mon Oct 10 2016, Tony Constantinides &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Its a nice cop-out, but this framework is an extension of the standard<br>&gt; library of Swift as it will allow Swift developers to target new mobile<br>&gt; platforms. <br></p><p>It&#39;s not a cop-out.  We would never include UIKit in Swift&#39;s standard<br>library, which is the set of definitions you get without so much as an<br>“import”.  UI functionality simply belongs elsewhere.<br></p><p>&gt; This is the mailing lists for the evolution of Swift which is what<br>&gt; this is. I not sure any of the other Swift mailing lists suits this<br>&gt; goal. I not making Swift language changes(maybe) but adding an<br>&gt; additional library that developers can build against if they are<br>&gt; interested in having their Swift code running on Android.<br>&gt;<br>&gt; Note that the Swift project itself has provided documentation and hooks to<br>&gt; provide this capabailit seen here<br>&gt; https://github.com/apple/swift/blob/master/docs/Android.md<br>&gt; The main issue is that swiftcore is missing on Swift for Linux.<br>&gt;<br>&gt;   Its only important to understand I going to build this framework with or<br>&gt; without support from Swift.org. However I want other developers to benefit<br>&gt; from my work and I want to give back to the community. I find it extremely<br>&gt; disappointing if Swift core members reject enhancing Swift to target<br>&gt; additional mobile platforms as making Swift cross-platform is a stated goal.<br>&gt;<br>&gt; On Mon, Oct 10, 2016 at 9:41 AM, Douglas Gregor &lt;dgregor at apple.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; &gt; On Oct 9, 2016, at 9:45 PM, Tony Constantinides via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; In Swift 3.0 you can build Android apps in Linux but only console apps<br>&gt;&gt; as there is no framework to build GUI apps using JNI.<br>&gt;&gt; &gt; What I propose is to build an initial limited framework coded in C that<br>&gt;&gt; calls enough of the Java Android API via JNI to bootstrap the android app<br>&gt;&gt; and to create widgets and layouts.A default Androidmanifest.xml file and<br>&gt;&gt; some files needed to be generated to make a valid android app.<br>&gt;&gt; &gt;   The Android API java surface is vast, so this framework needs to be<br>&gt;&gt; build over many releases to be useful. Developing a graphical Android app<br>&gt;&gt; requires interaction with &quot;Activities&quot; and the package manager and some<br>&gt;&gt; widgets like Button and some layouts like &quot;RelativeLayout&quot; and<br>&gt;&gt; &quot;LinearLayout&quot;.<br>&gt;&gt; &gt;  The result will be the ability to develop GUI Android apps on Linux<br>&gt;&gt; using Swift 3.0<br>&gt;&gt; &gt; Further support for additional APIs will be provided once the basics are<br>&gt;&gt; solid..<br>&gt;&gt; &gt; Who am I: Senior Android mobile developer with more than six years<br>&gt;&gt; experience on Android.<br>&gt;&gt; &gt; Am I able to build Swift 3.0 on Linux: Yes<br>&gt;&gt;<br>&gt;&gt; The swift-evolution process is primarily focused on the Swift language and<br>&gt;&gt; standard library. Large-scale API development, which binding to/creating a<br>&gt;&gt; GUI library entails, is out-of-scope for this process and should occur in a<br>&gt;&gt; different forum.<br>&gt;&gt;<br>&gt;&gt;         Cheers,<br>&gt;&gt;         Doug<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
