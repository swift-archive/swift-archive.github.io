<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>Parsing binary data</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>July  8, 2016 at 09:00:00am</p></header><div class="content"><p>Hi there!<br></p><p>Some weeks ago I wrote a parser for a binary format, but it&#39;s performance was disastrous, and I knew how to easily outperform this first approach with Objective-C by large.<br>Now, I&#39;m about to write a different parser, which of course ;-), I&#39;d prefer to code in Swift.<br>Working with raw bytes most likely won&#39;t ever be a thing where Swift shines, but I guess there are ways to do so without compromising speed… so, are there any established best-practices and things to avoid? Or is it less hassle to go back to C for low-level stuff?<br></p><p>Tino<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Parsing binary data</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>July  8, 2016 at 12:00:00am</p></header><div class="content"><p>On Fri, Jul 8, 2016 at 12:15 AM, Tino Heth via swift-users<br>&lt;swift-users at swift.org&gt; wrote:<br>&gt; Hi there!<br>&gt;<br>&gt; Some weeks ago I wrote a parser for a binary format, but it&#39;s performance was disastrous, and I knew how to easily outperform this first approach with Objective-C by large.<br>&gt; Now, I&#39;m about to write a different parser, which of course ;-), I&#39;d prefer to code in Swift.<br>&gt; Working with raw bytes most likely won&#39;t ever be a thing where Swift shines, but I guess there are ways to do so without compromising speed… so, are there any established best-practices and things to avoid? Or is it less hassle to go back to C for low-level stuff?<br></p><p>It should be simple: use Array for your data.  Avoid creating<br>intermediate arrays that hold copies of parts of your data when<br>possible.  It is OK to slice the array and create ArraySlices.  This<br>should give you speed close to C.<br></p><p>If you are not satisfied with performance, feel free to post your code<br>here with some commentary, and someone might look at it and see if<br>there is any performance advice we could give you.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>Parsing binary data</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>July  8, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; It should be simple: use Array for your data.<br>Doing data-processing in big blocks often improves performance, and when I checked the effect of a very small buffer, it was quite significant.<br>But arrays are no option for me, because my data isn&#39;t structured that way:<br>It&#39;s a stream of different elements (timestamp, type, and a payload that depends on the type), so I have evaluate byte-by-byte…<br></p><p>But it seems I&#39;m lucky, because the next format fits well into arrays :-).<br>I guess I&#39;ll give it a try, and I&#39;ll share my insights here if they are worth it (most likely, I won&#39;t write a comparison implementation in C if Swift is fast enough…)<br></p><p>Thanks,<br>Tino<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Parsing binary data</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>July  8, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jul 8, 2016, at 2:12 AM, Tino Heth via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; But arrays are no option for me, because my data isn&#39;t structured that way:<br>&gt; It&#39;s a stream of different elements (timestamp, type, and a payload that depends on the type), so I have evaluate byte-by-byte…<br></p><p>This is the sort of thing a good stream API should be able to handle efficiently, i.e. methods to read/write various binary data types like integers. Or alternatively, an API to encode/decode those types into an ArraySlice (like Go’s encoding/binary package.) <br></p><p>Hopefully these can be added to the Swift standard library. In the interim, something like that Go package could be implemented with some small C functions callable from Swift.<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160708/4973c65e/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
