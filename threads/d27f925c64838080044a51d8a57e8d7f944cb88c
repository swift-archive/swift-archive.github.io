<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>Proposal Draft: Optional Upgrading Assignment.</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>February  4, 2016 at 12:00:00am</p></header><div class="content"><p>Draft Proposal feedback welcome.<br></p><p>## Introduction<br></p><p>Currently to make a optional from a value the type name must be repeated:<br></p><p>	let x = “Some Value”<br>	let y : String? = x<br></p><p>This takes away some of the advantage of type inference because the very next line I must specify the type.<br></p><p>## Proposal<br></p><p>I propose the following syntax:<br></p><p>	let y? = x<br></p><p>This binds a new optional y which wraps the same value of x. It follows the same conventions as var and let that currently exist in the language. <br></p><p>The advantages: this is easier to read, more compact, and lets type inference determine the type. <br></p><p>If let and other conditionals would not support this syntax and optionals of optionals is not supported. So let x?? = y would not result in an optional optional. Also if y was an optional it would not let you upgrade that.<br></p><p>## Detailed Design<br></p><p>The grammar: <br></p><p>	let optionalValue? = value<br></p><p>This would not make sense in the if let, (guard let) context because if let unwraps the value, so this would be an error. <br></p><p>This should not conflict with pattern matching as that requires the case keyword. <br></p><p>Wrapping optional in an optional is an error. <br></p><p>## Impact on existing code<br></p><p>The current syntax will continue to exist so it will have no impact on existing code. <br></p><p>## Alternatives Considered<br></p><p>None. <br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160204/d27fb88c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>Proposal Draft: Optional Upgrading Assignment.</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>February  4, 2016 at 03:00:00am</p></header><div class="content"><p>Second option: use `let y = Optional(x)`.<br></p><p>Félix<br></p><p>&gt; Le 4 févr. 2016 à 03:28:09, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Draft Proposal feedback welcome.<br>&gt; <br>&gt; ## Introduction<br>&gt; <br>&gt; Currently to make a optional from a value the type name must be repeated:<br>&gt; <br>&gt; 	let x = “Some Value”<br>&gt; 	let y : String? = x<br>&gt; <br>&gt; This takes away some of the advantage of type inference because the very next line I must specify the type.<br>&gt; <br>&gt; ## Proposal<br>&gt; <br>&gt; I propose the following syntax:<br>&gt; <br>&gt; 	let y? = x<br>&gt; <br>&gt; This binds a new optional y which wraps the same value of x. It follows the same conventions as var and let that currently exist in the language. <br>&gt; <br>&gt; The advantages: this is easier to read, more compact, and lets type inference determine the type. <br>&gt; <br>&gt; If let and other conditionals would not support this syntax and optionals of optionals is not supported. So let x?? = y would not result in an optional optional. Also if y was an optional it would not let you upgrade that.<br>&gt; <br>&gt; ## Detailed Design<br>&gt; <br>&gt; The grammar: <br>&gt; <br>&gt; 	let optionalValue? = value<br>&gt; <br>&gt; This would not make sense in the if let, (guard let) context because if let unwraps the value, so this would be an error. <br>&gt; <br>&gt; This should not conflict with pattern matching as that requires the case keyword. <br>&gt; <br>&gt; Wrapping optional in an optional is an error. <br>&gt; <br>&gt; ## Impact on existing code<br>&gt; <br>&gt; The current syntax will continue to exist so it will have no impact on existing code. <br>&gt; <br>&gt; ## Alternatives Considered<br>&gt; <br>&gt; None. <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160204/ed348331/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5059668772aad67a346ad23a786be31b?s=50"></div><header><strong>Proposal Draft: Optional Upgrading Assignment.</strong> from <string>Allen Ding</string> &lt;allen at snappymob.com&gt;<p>February  4, 2016 at 05:00:00pm</p></header><div class="content"><p>On Thu, Feb 4, 2016 at 4:28 PM, Paul Ossenbruggen via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; *Draft Proposal feedback welcome.*<br>&gt;<br>&gt; *## Introduction*<br>&gt;<br>&gt; Currently to make a optional from a value the type name must be repeated:<br>&gt;<br>&gt; let x = “Some Value”<br>&gt; let y : String? = x<br>&gt;<br>&gt; This takes away some of the advantage of type inference because the very<br>&gt; next line I must specify the type.<br>&gt;<br></p><p>Any use case examples? I&#39;ve been trying to figure out why is this needs<br>fixing (I don&#39;t even see it as a problem).<br></p><p><br>&gt; *## Proposal*<br>&gt;<br>&gt; I propose the following syntax:<br>&gt;<br>&gt; let y? = x<br>&gt;<br>&gt; This binds a new optional y which wraps the same value of x. It follows<br>&gt; the same conventions as *var* and *let* that currently exist in the<br>&gt; language.<br>&gt;<br>&gt; The advantages: this is easier to read, more compact, and lets type<br>&gt; inference determine the type.<br>&gt;<br>&gt; *If let* and other conditionals would not support this syntax and<br>&gt; optionals of optionals is not supported. So let x?? = y would not result in<br>&gt; an optional optional. Also if y was an optional it would not let you<br>&gt; upgrade that.<br>&gt;<br>&gt; *## Detailed Design*<br>&gt;<br>&gt; The grammar:<br>&gt;<br>&gt; let optionalValue? = value<br>&gt;<br>&gt; This would not make sense in the *if let, (guard** let)* context because *if<br>&gt; let* unwraps the value, so this would be an error.<br>&gt;<br>&gt; This should not conflict with pattern matching as that requires the *case*<br>&gt;  keyword.<br>&gt;<br>&gt; Wrapping optional in an optional is an error.<br>&gt;<br>&gt; *## Impact on existing code*<br>&gt;<br>&gt; The current syntax will continue to exist so it will have no impact on<br>&gt; existing code.<br>&gt;<br>&gt; *## Alternatives Considered*<br>&gt;<br>&gt; None.<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160204/3f6a1fe0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/566528c7f7c28c35c0c646d415943612?s=50"></div><header><strong>Proposal Draft: Optional Upgrading Assignment.</strong> from <string>Taras Zakharko</string> &lt;taras.zakharko at uzh.ch&gt;<p>February  4, 2016 at 10:00:00am</p></header><div class="content"><p>-1 from me<br></p><p>  let x = Optional(“Some Value”) <br></p><p>does the job just fine, is very clean,  and I don’t see any reason to shorten it. <br></p><p>— Taras<br></p><p><br>&gt; On 04 Feb 2016, at 10:33, Allen Ding via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Thu, Feb 4, 2016 at 4:28 PM, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Draft Proposal feedback welcome.<br>&gt; <br>&gt; ## Introduction<br>&gt; <br>&gt; Currently to make a optional from a value the type name must be repeated:<br>&gt; <br>&gt; 	let x = “Some Value”<br>&gt; 	let y : String? = x<br>&gt; <br>&gt; This takes away some of the advantage of type inference because the very next line I must specify the type.<br>&gt; <br>&gt; Any use case examples? I&#39;ve been trying to figure out why is this needs fixing (I don&#39;t even see it as a problem).<br>&gt; <br>&gt; <br>&gt; ## Proposal<br>&gt; <br>&gt; I propose the following syntax:<br>&gt; <br>&gt; 	let y? = x<br>&gt; <br>&gt; This binds a new optional y which wraps the same value of x. It follows the same conventions as var and let that currently exist in the language. <br>&gt; <br>&gt; The advantages: this is easier to read, more compact, and lets type inference determine the type. <br>&gt; <br>&gt; If let and other conditionals would not support this syntax and optionals of optionals is not supported. So let x?? = y would not result in an optional optional. Also if y was an optional it would not let you upgrade that.<br>&gt; <br>&gt; ## Detailed Design<br>&gt; <br>&gt; The grammar: <br>&gt; <br>&gt; 	let optionalValue? = value<br>&gt; <br>&gt; This would not make sense in the if let, (guard let) context because if let unwraps the value, so this would be an error. <br>&gt; <br>&gt; This should not conflict with pattern matching as that requires the case keyword. <br>&gt; <br>&gt; Wrapping optional in an optional is an error. <br>&gt; <br>&gt; ## Impact on existing code<br>&gt; <br>&gt; The current syntax will continue to exist so it will have no impact on existing code. <br>&gt; <br>&gt; ## Alternatives Considered<br>&gt; <br>&gt; None. <br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160204/0cce9335/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>Proposal Draft: Optional Upgrading Assignment.</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>February  4, 2016 at 07:00:00am</p></header><div class="content"><p>Just sugar for that, plus there is symmetry to this proposal, it is more discoverable, and it is more concise.<br></p><p><br>&gt; On Feb 4, 2016, at 1:57 AM, Taras Zakharko &lt;taras.zakharko at uzh.ch&gt; wrote:<br>&gt; <br>&gt; -1 from me<br>&gt; <br>&gt;   let x = Optional(“Some Value”) <br>&gt; <br>&gt; does the job just fine, is very clean,  and I don’t see any reason to shorten it. <br>&gt; <br>&gt; — Taras<br>&gt; <br>&gt; <br>&gt;&gt; On 04 Feb 2016, at 10:33, Allen Ding via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Thu, Feb 4, 2016 at 4:28 PM, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; Draft Proposal feedback welcome.<br>&gt;&gt; <br>&gt;&gt; ## Introduction<br>&gt;&gt; <br>&gt;&gt; Currently to make a optional from a value the type name must be repeated:<br>&gt;&gt; <br>&gt;&gt; 	let x = “Some Value”<br>&gt;&gt; 	let y : String? = x<br>&gt;&gt; <br>&gt;&gt; This takes away some of the advantage of type inference because the very next line I must specify the type.<br>&gt;&gt; <br>&gt;&gt; Any use case examples? I&#39;ve been trying to figure out why is this needs fixing (I don&#39;t even see it as a problem).<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; ## Proposal<br>&gt;&gt; <br>&gt;&gt; I propose the following syntax:<br>&gt;&gt; <br>&gt;&gt; 	let y? = x<br>&gt;&gt; <br>&gt;&gt; This binds a new optional y which wraps the same value of x. It follows the same conventions as var and let that currently exist in the language. <br>&gt;&gt; <br>&gt;&gt; The advantages: this is easier to read, more compact, and lets type inference determine the type. <br>&gt;&gt; <br>&gt;&gt; If let and other conditionals would not support this syntax and optionals of optionals is not supported. So let x?? = y would not result in an optional optional. Also if y was an optional it would not let you upgrade that.<br>&gt;&gt; <br>&gt;&gt; ## Detailed Design<br>&gt;&gt; <br>&gt;&gt; The grammar: <br>&gt;&gt; <br>&gt;&gt; 	let optionalValue? = value<br>&gt;&gt; <br>&gt;&gt; This would not make sense in the if let, (guard let) context because if let unwraps the value, so this would be an error. <br>&gt;&gt; <br>&gt;&gt; This should not conflict with pattern matching as that requires the case keyword. <br>&gt;&gt; <br>&gt;&gt; Wrapping optional in an optional is an error. <br>&gt;&gt; <br>&gt;&gt; ## Impact on existing code<br>&gt;&gt; <br>&gt;&gt; The current syntax will continue to exist so it will have no impact on existing code. <br>&gt;&gt; <br>&gt;&gt; ## Alternatives Considered<br>&gt;&gt; <br>&gt;&gt; None. <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160204/31634b0e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/743ea9b8e49fa6a8390b2f4b3e1a588f?s=50"></div><header><strong>Proposal Draft: Optional Upgrading Assignment.</strong> from <string>Jerome ALVES</string> &lt;j.alves at me.com&gt;<p>February  4, 2016 at 04:00:00pm</p></header><div class="content"><p>Maybe allowing optional chaining here is the best option ?<br></p><p>let test = &quot;Test&quot; // String<br>let testOrNil = test? // String?<br></p><p>- Jérôme<br></p><p><br>&gt; Le 4 févr. 2016 à 16:32, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Just sugar for that, plus there is symmetry to this proposal, it is more discoverable, and it is more concise.<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 4, 2016, at 1:57 AM, Taras Zakharko &lt;taras.zakharko at uzh.ch &lt;mailto:taras.zakharko at uzh.ch&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; -1 from me<br>&gt;&gt; <br>&gt;&gt;   let x = Optional(“Some Value”) <br>&gt;&gt; <br>&gt;&gt; does the job just fine, is very clean,  and I don’t see any reason to shorten it. <br>&gt;&gt; <br>&gt;&gt; — Taras<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 04 Feb 2016, at 10:33, Allen Ding via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Thu, Feb 4, 2016 at 4:28 PM, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; Draft Proposal feedback welcome.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ## Introduction<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Currently to make a optional from a value the type name must be repeated:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	let x = “Some Value”<br>&gt;&gt;&gt; 	let y : String? = x<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This takes away some of the advantage of type inference because the very next line I must specify the type.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Any use case examples? I&#39;ve been trying to figure out why is this needs fixing (I don&#39;t even see it as a problem).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ## Proposal<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I propose the following syntax:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	let y? = x<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This binds a new optional y which wraps the same value of x. It follows the same conventions as var and let that currently exist in the language. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The advantages: this is easier to read, more compact, and lets type inference determine the type. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If let and other conditionals would not support this syntax and optionals of optionals is not supported. So let x?? = y would not result in an optional optional. Also if y was an optional it would not let you upgrade that.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ## Detailed Design<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The grammar: <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	let optionalValue? = value<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This would not make sense in the if let, (guard let) context because if let unwraps the value, so this would be an error. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This should not conflict with pattern matching as that requires the case keyword. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Wrapping optional in an optional is an error. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ## Impact on existing code<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The current syntax will continue to exist so it will have no impact on existing code. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ## Alternatives Considered<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; None. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160204/9eec5138/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>Proposal Draft: Optional Upgrading Assignment.</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>February  4, 2016 at 08:00:00am</p></header><div class="content"><p>I did consider this but I think it would be too easy to accidentally upgrade an optional. When you may have been thinking you were dealing with an optional and you needed to chain them. <br></p><p><br>&gt; On Feb 4, 2016, at 7:45 AM, Jerome ALVES &lt;j.alves at me.com&gt; wrote:<br>&gt; <br>&gt; Maybe allowing optional chaining here is the best option ?<br>&gt; <br>&gt; let test = &quot;Test&quot; // String<br>&gt; let testOrNil = test? // String?<br>&gt; <br>&gt; - Jérôme<br>&gt; <br>&gt; <br>&gt;&gt; Le 4 févr. 2016 à 16:32, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; Just sugar for that, plus there is symmetry to this proposal, it is more discoverable, and it is more concise.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 4, 2016, at 1:57 AM, Taras Zakharko &lt;taras.zakharko at uzh.ch &lt;mailto:taras.zakharko at uzh.ch&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -1 from me<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   let x = Optional(“Some Value”) <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; does the job just fine, is very clean,  and I don’t see any reason to shorten it. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; — Taras<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 04 Feb 2016, at 10:33, Allen Ding via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Thu, Feb 4, 2016 at 4:28 PM, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; Draft Proposal feedback welcome.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ## Introduction<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Currently to make a optional from a value the type name must be repeated:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	let x = “Some Value”<br>&gt;&gt;&gt;&gt; 	let y : String? = x<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This takes away some of the advantage of type inference because the very next line I must specify the type.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Any use case examples? I&#39;ve been trying to figure out why is this needs fixing (I don&#39;t even see it as a problem).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ## Proposal<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I propose the following syntax:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	let y? = x<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This binds a new optional y which wraps the same value of x. It follows the same conventions as var and let that currently exist in the language. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The advantages: this is easier to read, more compact, and lets type inference determine the type. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If let and other conditionals would not support this syntax and optionals of optionals is not supported. So let x?? = y would not result in an optional optional. Also if y was an optional it would not let you upgrade that.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ## Detailed Design<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The grammar: <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	let optionalValue? = value<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This would not make sense in the if let, (guard let) context because if let unwraps the value, so this would be an error. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This should not conflict with pattern matching as that requires the case keyword. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Wrapping optional in an optional is an error. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ## Impact on existing code<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The current syntax will continue to exist so it will have no impact on existing code. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ## Alternatives Considered<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; None. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160204/cbd3db2c/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Proposal Draft: Optional Upgrading Assignment.</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>February  4, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Feb 4, 2016, at 12:28 AM, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Draft Proposal feedback welcome.<br>&gt; <br>&gt; ## Introduction<br>&gt; <br>&gt; Currently to make a optional from a value the type name must be repeated:<br>&gt; <br>&gt; 	let x = “Some Value”<br>&gt; 	let y : String? = x<br>&gt; <br>&gt; This takes away some of the advantage of type inference because the very next line I must specify the type.<br>&gt; <br>&gt; ## Proposal<br>&gt; <br>&gt; I propose the following syntax:<br>&gt; <br>&gt; 	let y? = x<br></p><p>This syntax already means something in Swift (though in this context it is illegal): &quot;a?” is a pattern that binds to the inside of an optional.  It actually does the opposite of what you propose: it binds “a” to the thing inside an optional, which is the opposite of what you want.<br></p><p>As others have pointed out, using &quot;Optional(x)” works today in an arbitrary expression position.<br></p><p>-Chris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160204/2442d67d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>Proposal Draft: Optional Upgrading Assignment.</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>February  4, 2016 at 09:00:00am</p></header><div class="content"><p>Ok if it conflicts then that is a good reason to not do this. <br></p><p>Sent from my iPhone<br></p><p>&gt; On Feb 4, 2016, at 9:35 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; ## Proposal<br>&gt; <br>&gt; I<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160204/b0955864/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4d13105de53a43ce1df97869ca6c140e?s=50"></div><header><strong>Proposal Draft: Optional Upgrading Assignment.</strong> from <string>Maximilian Hünenberger</string> &lt;m.huenenberger at me.com&gt;<p>February  4, 2016 at 08:00:00pm</p></header><div class="content"><p>Although the &quot;reverse&quot; syntax others pointed out fits better. Especially as symmetry to optional pattern matching:<br></p><p>let num = 1? // Int?<br></p><p>if case let n? = num {<br>    n // Int<br>    n? // Int?  since it is equal to &quot;num&quot; (why would someone use it here?)<br>}<br></p><p><br>But I doubt it is worth implementing only due to symmetry reasons.<br></p><p>The only real use I can imagine would be in conjunction with xxxLiterals.<br></p><p>Therefore -0.5 for this proposal.<br></p><p>- Maximilian<br></p><p>&gt; Am 04.02.2016 um 18:42 schrieb Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; Ok if it conflicts then that is a good reason to not do this. <br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt; On Feb 4, 2016, at 9:35 AM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; ## Proposal<br>&gt;&gt; <br>&gt;&gt; I<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160204/4d3ac93c/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
