<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9b5e7f229ebf32c8eca02e7cee0f379f?s=50"></div><header><strong>[Proposal draft] Enhanced floating-point protocols</strong> from <string>Nicola Salmoria</string> &lt;nicola.salmoria at gmail.com&gt;<p>April 15, 2016 at 08:00:00am</p></header><div class="content"><p>&gt;   /// The quotient of `self` dividing by `rhs`.<br>&gt;   //  Arithmetic provides a default implementation of this method in terms<br>&gt;   //  of the mutating `divide` operation.<br>&gt;   @warn_unused_result<br>&gt;   func divided(by rhs: Self) -&gt; Self<br>&gt; <br>&gt;   /// Divides `self` by `rhs`.<br>&gt;   mutating func divide(by rhs: Self)<br></p><p><br>When dealing with integer arithmetic, I often find useful a `divmod` function which produces a (quotient, remainder) pair.<br>It could be argued that such a pair is the primary result of division on integers. It would be great to have such a function included in the design.<br></p><p>&gt; /// SignedArithmetic protocol will only be conformed to by signed numbers,<br>&gt; /// otherwise it would be possible to negate an unsigned value.<br>&gt; ///<br>&gt; /// The only method of this protocol has the default implementation in an<br>&gt; /// extension, that uses a parameterless initializer and subtraction.<br>&gt; public protocol SignedArithmetic : Arithmetic {<br>&gt;   func negate() -&gt; Self<br>&gt; }<br></p><p>It might make sense to also have a<br></p><p>public protocol InvertibleArithmetic : Arithmetic {<br>  func inverted() -&gt; Self<br>}<br></p><p>FloatingPoint would conform to this protocol, returning 1/x, while integer types would not.<br></p><p>--<br>Nicola<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9b7c9b023237138ccb67df539f11b50?s=50"></div><header><strong>[Proposal draft] Enhanced floating-point protocols</strong> from <string>Stephen Canon</string> &lt;scanon at apple.com&gt;<p>April 15, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Apr 14, 2016, at 11:48 PM, Nicola Salmoria &lt;nicola.salmoria at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt;  /// The quotient of `self` dividing by `rhs`.<br>&gt;&gt;  //  Arithmetic provides a default implementation of this method in terms<br>&gt;&gt;  //  of the mutating `divide` operation.<br>&gt;&gt;  @warn_unused_result<br>&gt;&gt;  func divided(by rhs: Self) -&gt; Self<br>&gt;&gt; <br>&gt;&gt;  /// Divides `self` by `rhs`.<br>&gt;&gt;  mutating func divide(by rhs: Self)<br>&gt; <br>&gt; When dealing with integer arithmetic, I often find useful a `divmod` function which produces a (quotient, remainder) pair.<br>&gt; It could be argued that such a pair is the primary result of division on integers. It would be great to have such a function included in the design.<br></p><p>I believe that it’s present in the latest draft of the Integer protocols.<br></p><p>&gt;&gt; /// SignedArithmetic protocol will only be conformed to by signed numbers,<br>&gt;&gt; /// otherwise it would be possible to negate an unsigned value.<br>&gt;&gt; ///<br>&gt;&gt; /// The only method of this protocol has the default implementation in an<br>&gt;&gt; /// extension, that uses a parameterless initializer and subtraction.<br>&gt;&gt; public protocol SignedArithmetic : Arithmetic {<br>&gt;&gt;  func negate() -&gt; Self<br>&gt;&gt; }<br>&gt; <br>&gt; It might make sense to also have a<br>&gt; <br>&gt; public protocol InvertibleArithmetic : Arithmetic {<br>&gt;  func inverted() -&gt; Self<br>&gt; }<br>&gt; <br>&gt; FloatingPoint would conform to this protocol, returning 1/x, while integer types would not.<br></p><p>That’s a very reasonable suggestion (and one that can easily be added separately if it doesn’t make it into this batch of changes).<br></p><p>– Steve<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160415/cbc5d905/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7abf2ce34651dd5e97cd97b16ce21bae?s=50"></div><header><strong>[Proposal draft] Enhanced floating-point protocols</strong> from <string>Guillaume Lessard</string> &lt;glessard at tffenterprises.com&gt;<p>April 15, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On 15 avr. 2016, at 00:48, Nicola Salmoria via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; It might make sense to also have a<br>&gt; <br>&gt; public protocol InvertibleArithmetic : Arithmetic {<br>&gt;  func inverted() -&gt; Self<br>&gt; }<br>&gt; <br>&gt; FloatingPoint would conform to this protocol, returning 1/x, while integer types would not.<br></p><p>I don’t see why this is needed; there isn&#39;t an AdditivelyInvertible protocol, why have MultiplicativelyInvertible? Are there (schoolbook arithmetic) types for which a terse inversion operation (i.e. `-num` or `1/num`) is not defined? For what it’s worth, “inverse” has so many definitions that “reciprocal” might be better if this must be defined; it has many fewer definitions.<br></p><p>Cheers,<br>Guillaume Lessard<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9b7c9b023237138ccb67df539f11b50?s=50"></div><header><strong>[Proposal draft] Enhanced floating-point protocols</strong> from <string>Stephen Canon</string> &lt;scanon at apple.com&gt;<p>April 15, 2016 at 11:00:00am</p></header><div class="content"><p>On Apr 15, 2016, at 11:05 AM, Guillaume Lessard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I don’t see why this is needed; there isn&#39;t an AdditivelyInvertible protocol<br></p><p>That’s precisely SignedArithmetic, just under a different name.<br></p><p>– Steve<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160415/1e01c757/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
