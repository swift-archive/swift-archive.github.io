<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/96fe3e1b2a4c52d0954f2d6fb7d91216?s=50"></div><header><strong>[Proposal] Scoped import (of weirdly overladed logical operators)</strong> from <string>Marcel Jackwerth</string> &lt;marceljackwerth at gmail.com&gt;<p>January  8, 2016 at 11:00:00am</p></header><div class="content"><p>Sorry in advance for that slightly esoteric case.<br></p><p>&gt;From a quick survey of peers an overloaded == which returns some other<br>type than Bool isn&#39;t desirable (same goes for &gt;=, &lt;=, !=, &amp;&amp;, ||) and<br>should be forbidden (this would be the counter-proposal to this).<br></p><p>However it allows interesting DSLs like creating layout constraints<br>with https://github.com/indragiek/SwiftAutoLayout<br></p><p>let layoutConstraint = view1.al_width == view2.al_width * 0.5 + 10.0<br></p><p>Allowing to import these &#39;conflicting&#39; operators closely to where the<br>DSL is actually used could hint other developers to that DSL and<br>wouldn&#39;t pollute the global scope of the ViewController for example.<br></p><p><br></p><p>I thought about a syntactical solution quite a bit but I failed to<br>find something that looked right. So here&#39;s a syntax draft which is<br>exceptionally wrong:<br></p><p>import SwiftAutoLayout without fancy operators<br></p><p>func compareSomething() -&gt; Bool {<br>  return view1.al_width == view2.al_width // will fail since not<br>Equatable, but al_width is known<br>}<br></p><p>func createConstraints() -&gt; [NSLayoutConstraints] {<br>  import fancy operators from SwiftAutoLayout<br>  return [view1.al_width == view2.al_width] // succeeds<br>}<br></p><p>OR (probably an implementation nightmare)<br></p><p>func createConstraints() -&gt; [NSLayoutConstraints] {<br>  import SwiftAutoLayout<br>  return [view1.al_width == view2.al_width]<br>}<br></p><p><br>Opinions against the proposal:<br>- Module devs shouldn&#39;t overload those operators and modify the return<br>type but use ====, !===, &lt;==, ==&gt;, &amp;&amp;&amp;, ||| instead - Swift should<br>prevent that devs from doing this then.<br>- Devs will learn over time that (==, &lt;=, &gt;=, !=) are just the same as<br>+ and - and will have a return type depending on the arguments.<br>- Module devs should keep operators in submodules. (But then get<br>cyclic dependencies if they want to use these operators in the core<br>themselves.)<br>- Users of DSL modules should move the DSL dependent code into a<br>different file where it isn&#39;t mixed with code that doesn&#39;t need the<br>DSL.<br></p><p><br>Releated are the explicit includes and excludes when importing Modules<br>in the &quot;Beef Up Import&quot; thread<br>https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151221/004553.html<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>[Proposal] Scoped import (of weirdly overladed logical operators)</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>January  8, 2016 at 11:00:00am</p></header><div class="content"><p>C# lambda expressions can be used to initialize an expression tree. This is how C# avoids using strings to interface with &quot;embedded languages&quot; (most notably and very usefully SQL, but as I&#39;m about to show it could help deal with layout constraints in Swift as well if we had them).<br></p><p>If we could use an @autoclosure in Swift to initialize an expression tree, we could do something like:<br></p><p>&gt; protocol ExpressionTreeConvertible {<br>&gt; 	init(expression: ExpressionTree)<br>&gt; }<br>&gt; <br>&gt; class NSLayoutConstraint: ExpressionTreeConvertible {<br>&gt; 	init(expression: ExpressionTree) { /* magic */ }<br>&gt; }<br>&gt; <br>&gt; let constraint: NSLayoutConstraint = view1.frame.width == view2.frame.width * 0.5 + 10.0<br></p><p>and not require an == overload that doesn&#39;t return a Boolean.<br></p><p>That&#39;s not necessarily in support of limiting operator overloading, though.<br></p><p>Félix<br></p><p>&gt; Le 8 janv. 2016 à 05:41:53, Marcel Jackwerth via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Sorry in advance for that slightly esoteric case.<br>&gt; <br>&gt; From a quick survey of peers an overloaded == which returns some other<br>&gt; type than Bool isn&#39;t desirable (same goes for &gt;=, &lt;=, !=, &amp;&amp;, ||) and<br>&gt; should be forbidden (this would be the counter-proposal to this).<br>&gt; <br>&gt; However it allows interesting DSLs like creating layout constraints<br>&gt; with https://github.com/indragiek/SwiftAutoLayout<br>&gt; <br>&gt; let layoutConstraint = view1.al_width == view2.al_width * 0.5 + 10.0<br>&gt; <br>&gt; Allowing to import these &#39;conflicting&#39; operators closely to where the<br>&gt; DSL is actually used could hint other developers to that DSL and<br>&gt; wouldn&#39;t pollute the global scope of the ViewController for example.<br>&gt; <br>&gt; <br>&gt; <br>&gt; I thought about a syntactical solution quite a bit but I failed to<br>&gt; find something that looked right. So here&#39;s a syntax draft which is<br>&gt; exceptionally wrong:<br>&gt; <br>&gt; import SwiftAutoLayout without fancy operators<br>&gt; <br>&gt; func compareSomething() -&gt; Bool {<br>&gt;  return view1.al_width == view2.al_width // will fail since not<br>&gt; Equatable, but al_width is known<br>&gt; }<br>&gt; <br>&gt; func createConstraints() -&gt; [NSLayoutConstraints] {<br>&gt;  import fancy operators from SwiftAutoLayout<br>&gt;  return [view1.al_width == view2.al_width] // succeeds<br>&gt; }<br>&gt; <br>&gt; OR (probably an implementation nightmare)<br>&gt; <br>&gt; func createConstraints() -&gt; [NSLayoutConstraints] {<br>&gt;  import SwiftAutoLayout<br>&gt;  return [view1.al_width == view2.al_width]<br>&gt; }<br>&gt; <br>&gt; <br>&gt; Opinions against the proposal:<br>&gt; - Module devs shouldn&#39;t overload those operators and modify the return<br>&gt; type but use ====, !===, &lt;==, ==&gt;, &amp;&amp;&amp;, ||| instead - Swift should<br>&gt; prevent that devs from doing this then.<br>&gt; - Devs will learn over time that (==, &lt;=, &gt;=, !=) are just the same as<br>&gt; + and - and will have a return type depending on the arguments.<br>&gt; - Module devs should keep operators in submodules. (But then get<br>&gt; cyclic dependencies if they want to use these operators in the core<br>&gt; themselves.)<br>&gt; - Users of DSL modules should move the DSL dependent code into a<br>&gt; different file where it isn&#39;t mixed with code that doesn&#39;t need the<br>&gt; DSL.<br>&gt; <br>&gt; <br>&gt; Releated are the explicit includes and excludes when importing Modules<br>&gt; in the &quot;Beef Up Import&quot; thread<br>&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151221/004553.html<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160108/5d52b07f/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
