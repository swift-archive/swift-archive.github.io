<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/708abe8093c1b67c209e6713070d0fd0?s=50"></div><header><strong>Problem calling a C function passing a void** from Swift 3</strong> from <string>Lane Schwartz</string> &lt;dowobeha at gmail.com&gt;<p>September 15, 2016 at 11:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>I just moved to Xcode 8 (actually, it upgraded itself without me realizing<br>it, but anyway), and some previously working Swift 2.2 code now doesn&#39;t<br>work. I&#39;m having trouble migrating.<br></p><p>The code in question is supposed to declare, but not allocate, a block of<br>memory. A void** to that block of memory was then passed to a C function<br>(cudaMalloc to be specific) which then allocated memory on the GPU. The<br>swift 2.2 code that worked was like this:<br></p><p>var data_on_device : UnsafeMutablePointer&lt;Void&gt;<br></p><p>...<br></p><p>self.byteCount = count * sizeof(CFloat)<br></p><p>self.data_on_device = nil<br></p><p>let status = cudaMalloc(&amp;data_on_device, self.byteCount)<br></p><p><br>Then elsewhere in the code I would convert this pointer to its appropriate<br>typed version:<br></p><p>UnsafeMutablePointer&lt;Float&gt;(foo.data_on_device)<br></p><p><br>Can anyone help me get the equivalent functionality in Swift 3?<br></p><p>The closest I&#39;ve been able to come is the following, which (a) was very<br>non-obvious and took a lot of trial and error to find, and (b) is ugly.<br></p><p>var data_on_device : UnsafeMutablePointer&lt;Float&gt;<br>&gt; let data_on_device_void_pointer : UnsafeMutableRawPointer<br>&gt; ...<br>&gt; self.byteCount = count * MemoryLayout&lt;Float&gt;.size<br>&gt; self.data_on_device = UnsafeMutablePointer&lt;Float&gt;.allocate(capacity:0)<br>&gt; self.data_on_device_void_pointer = UnsafeMutableRawPointer(data_on_device)<br>&gt; var pointer_as_optional : UnsafeMutableRawPointer? =<br>&gt; data_on_device_void_pointer<br>&gt; let pointer : UnsafeMutablePointer&lt;UnsafeMutableRawPointer?&gt; =<br>&gt; UnsafeMutablePointer&lt;UnsafeMutableRawPointer?&gt;(&amp;pointer_as_optional)<br>&gt; let status = cudaMalloc(pointer, self.byteCount)<br></p><p><br> For reference, the code and git history is here:<br>https://github.com/dowobeha/mt-marathon-swift-c/blob/master/main.swift<br></p><p>Thanks,<br>Lane<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160915/dfe89153/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2bc666e29724cd3bdf46b6cbbe4a07bb?s=50"></div><header><strong>Problem calling a C function passing a void** from Swift 3</strong> from <string>Quinn &quot;The Eskimo!&quot;</string> &lt;eskimo1 at apple.com&gt;<p>September 16, 2016 at 08:00:00am</p></header><div class="content"><p>On 15 Sep 2016, at 22:11, Lane Schwartz via swift-users &lt;swift-users at swift.org&gt; wrote:<br></p><p>&gt; Can anyone help me get the equivalent functionality in Swift 3?<br></p><p>I think the main issue here is that, in Swift 3, unsafe pointers, in their various flavours, don’t explicitly support nil.  Rather, nil is modelled like it is for any other type, via `Optional`.  You can read all about this change in SE-0055 [1]<br></p><p>So, if you have an C API like this:<br></p><p>extern int HackAlloc(void ** bufPtrPtr, size_t bufSize);<br>extern void HackFree(void * bufPtr);<br></p><p>you can call it like this:<br></p><p>var buf: UnsafeMutableRawPointer? = nil<br>let result = HackAlloc(&amp;buf, 1024)<br>if result == 0 {<br>    HackFree(buf)<br>}<br></p><p>This is very similar to what you currently have except that `buf` is explicitly made optional.<br></p><p>The other difference is that `buf` is a ‘raw’ pointer, which means you have to understand Swift 3’s type aliasing rules.  You can read about the details in SE-0107 [2] bug a good place to start is the “UnsafeRawPointer Migration” section of the Swift 3 migration guide.<br></p><p>&lt;https://swift.org/migration-guide/se-0107-migrate.html&gt;<br></p><p>Share and Enjoy<br>--<br>Quinn &quot;The Eskimo!&quot;                    &lt;http://www.apple.com/developer/&gt;<br>Apple Developer Relations, Developer Technical Support, Core OS/Hardware<br></p><p>[1]: &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0055-optional-unsafe-pointers.md&gt;<br></p><p>[2]: &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/708abe8093c1b67c209e6713070d0fd0?s=50"></div><header><strong>Problem calling a C function passing a void** from Swift 3</strong> from <string>Lane Schwartz</string> &lt;dowobeha at gmail.com&gt;<p>September 16, 2016 at 07:00:00pm</p></header><div class="content"><p>Thank you! This, in conjunction with a later call to bindMemory(to:<br>capacity:), was exactly what I needed.<br></p><p>On Fri, Sep 16, 2016 at 9:47 AM, Quinn &quot;The Eskimo!&quot; via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On 15 Sep 2016, at 22:11, Lane Schwartz via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt; Can anyone help me get the equivalent functionality in Swift 3?<br>&gt;<br>&gt; I think the main issue here is that, in Swift 3, unsafe pointers, in their<br>&gt; various flavours, don’t explicitly support nil.  Rather, nil is modelled<br>&gt; like it is for any other type, via `Optional`.  You can read all about this<br>&gt; change in SE-0055 [1]<br>&gt;<br>&gt; So, if you have an C API like this:<br>&gt;<br>&gt; extern int HackAlloc(void ** bufPtrPtr, size_t bufSize);<br>&gt; extern void HackFree(void * bufPtr);<br>&gt;<br>&gt; you can call it like this:<br>&gt;<br>&gt; var buf: UnsafeMutableRawPointer? = nil<br>&gt; let result = HackAlloc(&amp;buf, 1024)<br>&gt; if result == 0 {<br>&gt;     HackFree(buf)<br>&gt; }<br>&gt;<br>&gt; This is very similar to what you currently have except that `buf` is<br>&gt; explicitly made optional.<br>&gt;<br>&gt; The other difference is that `buf` is a ‘raw’ pointer, which means you<br>&gt; have to understand Swift 3’s type aliasing rules.  You can read about the<br>&gt; details in SE-0107 [2] bug a good place to start is the “UnsafeRawPointer<br>&gt; Migration” section of the Swift 3 migration guide.<br>&gt;<br>&gt; &lt;https://swift.org/migration-guide/se-0107-migrate.html&gt;<br>&gt;<br>&gt; Share and Enjoy<br>&gt; --<br>&gt; Quinn &quot;The Eskimo!&quot;                    &lt;http://www.apple.com/developer/&gt;<br>&gt; Apple Developer Relations, Developer Technical Support, Core OS/Hardware<br>&gt;<br>&gt; [1]: &lt;https://github.com/apple/swift-evolution/blob/master/<br>&gt; proposals/0055-optional-unsafe-pointers.md&gt;<br>&gt;<br>&gt; [2]: &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0107-<br>&gt; unsaferawpointer.md&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br></p><p><br></p><p>-- <br>When a place gets crowded enough to require ID&#39;s, social collapse is not<br>far away.  It is time to go elsewhere.  The best thing about space travel<br>is that it made it possible to go elsewhere.<br>                -- R.A. Heinlein, &quot;Time Enough For Love&quot;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160916/e788fa6c/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
