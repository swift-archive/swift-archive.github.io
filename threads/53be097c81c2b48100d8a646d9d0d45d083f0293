<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Proposal] Add Binary Search functions to SequenceType</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April 29, 2016 at 02:00:00pm</p></header><div class="content"><p>on Thu Apr 28 2016, Jeff Hajewski &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Dave - I think it boils down to a gap in communication. We were under the<br>&gt; impression that the goal was a pure extension of CollectionType, without making<br>&gt; any requirements on Generator.Element (i.e., your requiring it to be<br>&gt; comparable), where binary search, lower bound, and upper bound all work with the<br>&gt; same unary predicate. <br>&gt; Of course, as you demonstrated, it is trivial to implement when<br>&gt; Generator.Element is Comparable, but if you relax that requirement it<br>&gt; is not possible to create a set of functions (binary search, lower<br>&gt; bound, upper bound) that all take the same unary predicate. <br></p><p>I&#39;m sorry if I gave you the wrong impression.  What I posted was exactly<br>what I had in mind.<br></p><p>&gt; We ultimately came up with a slightly different approach, implementing<br>&gt; binary search similar to your example, but a different take on lower<br>&gt; bound, upper bound, and range. I suppose we should just send out our<br>&gt; proposal and get everyone&#39;s take on it.<br>&gt;<br>&gt; Jeff<br>&gt;<br>&gt; On Thu, Apr 28, 2016 at 5:06 PM, Dave Abrahams via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;     on Thu Apr 28 2016, Jeff Hajewski<br>&gt;     &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;     &gt; Thanks for bringing this back into the spotlight Pyry. A few of us have<br>&gt;     been<br>&gt;     &gt; working on this issue here:<br>&gt;     &gt;<br>&gt;     &gt; https://github.com/lorenzoracca/Swift-binary-search<br>&gt;     &gt;<br>&gt;     &gt; However we have sort of stalled as we have been unable to come up with a<br>&gt;     unary<br>&gt;     &gt; approach that Dave suggested using just Bool return values. And of course,<br>&gt;     as<br>&gt;     &gt; you say, the three case order enum would make this a trivial problem.<br>&gt;     &gt;<br>&gt;     &gt; I guess the question is, do we move forward without a unary implementation<br>&gt;     and<br>&gt;     &gt; update if/when we get a three case Order enum or do we wait on a three<br>&gt;     case<br>&gt;     &gt; Order enum and implement a fully generic version once?<br>&gt;<br>&gt;     Or you could just do it like this (Swift 2.2-compatible). Am I missing<br>&gt;     something?<br>&gt;<br>&gt;     extension CollectionType {<br>&gt;     /// Returns the index of the first element satisfying `predicate`,<br>&gt;     /// or `endIndex` if no such element exists.<br>&gt;     ///<br>&gt;     /// - Requires: `self` is partitioned with respect to `predicate`;<br>&gt;     /// that is, there exists an index `i` in `startIndex...endIndex`<br>&gt;     /// such that `predicate` returns `false` for every element of<br>&gt;     /// `self[startIndex..&lt;i]` and returns `true` for every element<br>&gt;     /// of `self[i..&lt;endIndex]`.<br>&gt;     @warn_unused_result<br>&gt;     public func binarySearch(<br>&gt;     predicate: (Self.Generator.Element)-&gt;Bool<br>&gt;     ) -&gt; Index {<br>&gt;     var len = count<br>&gt;     var min = startIndex<br>&gt;     while len &gt; 0 {<br>&gt;     let half = len/2<br>&gt;     let middle = min.advancedBy(half)<br>&gt;<br>&gt;     if !predicate(self[middle]) {<br>&gt;     min = middle.successor()<br>&gt;     len -= half.successor()<br>&gt;     } else {<br>&gt;     len = half<br>&gt;     }<br>&gt;     }<br>&gt;     return min<br>&gt;     }<br>&gt;     }<br>&gt;<br>&gt;     extension CollectionType where Generator.Element : Comparable {<br>&gt;     /// Returns the index of the first element greater than or equal to<br>&gt;     /// `target`, or `endIndex` if no such element exists.<br>&gt;     ///<br>&gt;     /// - Requires: `self` is sorted.<br>&gt;     @warn_unused_result<br>&gt;     public func lowerBound(target: Self.Generator.Element) -&gt; Index {<br>&gt;     return binarySearch { $0 &gt;= target }<br>&gt;     }<br>&gt;<br>&gt;     /// Returns the index of the first element greater than<br>&gt;     /// `target`, or `endIndex` if no such element exists.<br>&gt;     ///<br>&gt;     /// - Requires: `self` is sorted.<br>&gt;     @warn_unused_result<br>&gt;     public func upperBound(target: Self.Generator.Element) -&gt; Index {<br>&gt;     return binarySearch { $0 &gt; target }<br>&gt;     }<br>&gt;     }<br>&gt;<br>&gt;     //===--- TEST IT -<br>&gt;     ---------------------------------------------------------===//<br>&gt;     import Darwin<br>&gt;     for _ in 0..&lt;1000 {<br>&gt;     // build a sorted array of up to 30 values in the range 0..&lt;10<br>&gt;     var a : Array&lt;Int&gt; = []<br>&gt;     for _ in 0..&lt;arc4random_uniform(30) {<br>&gt;     a.append(Int(arc4random_uniform(10)))<br>&gt;     }<br>&gt;     a.sortInPlace()<br>&gt;<br>&gt;     print(a)<br>&gt;<br>&gt;     for i in -3...14 {<br>&gt;     let l = a.lowerBound(i)<br>&gt;     let u = a.upperBound(i)<br>&gt;     assert(l &gt;= 0)<br>&gt;     assert(u &lt;= a.count)<br>&gt;     assert(l &lt;= u)<br>&gt;     if l &gt; 0 {<br>&gt;     assert(a[l - 1] &lt; i)<br>&gt;     }<br>&gt;     if l &lt; a.count {<br>&gt;     assert(a[l] &gt;= i)<br>&gt;     }<br>&gt;     if u &gt; 0 {<br>&gt;     assert(a[u - 1] &lt;= i)<br>&gt;     }<br>&gt;     if u &lt; a.count {<br>&gt;     assert(a[u] &gt; i)<br>&gt;     }<br>&gt;     }<br>&gt;     }<br>&gt;<br>&gt;     --<br>&gt;     Dave<br>&gt;<br>&gt;     _______________________________________________<br>&gt;     swift-evolution mailing list<br>&gt;     swift-evolution at swift.org<br>&gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
