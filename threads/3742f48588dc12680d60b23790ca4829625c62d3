<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cf40be92f231a15e81512b93a3cd0136?s=50"></div><header><strong>Swift 3 Questions</strong> from <string>simon gladman</string> &lt;sgladman at gmail.com&gt;<p>May 23, 2016 at 08:00:00am</p></header><div class="content"><p>Hi All,<br></p><p>I thought I&#39;d attempt updating the code of my Filterpedia<br>&lt;https://github.com/FlexMonkey/Filterpedia&gt; app to Swift 3. The transition<br>has been pretty smooth so far, but I have a few issues. I guess my question<br>over these issues is, are they features or bugs in an early Swift 3 release?<br></p><p>First off, overriding CIFilter requires overriding the *attributes* var<br>which is of type *[String: AnyObject*]. In Swift 2, the following works<br>perfectly:<br></p><p>    override var attributes: [String : AnyObject] {<br></p><p>        return [<br></p><p>                   kCIAttributeFilterDisplayName: &quot;CMYK Levels&quot;,<br></p><p>                   &quot;inputImage&quot;: [kCIAttributeIdentity: 0,<br></p><p>                                  kCIAttributeClass: &quot;CIImage&quot;,<br></p><p>                                  kCIAttributeDisplayName: &quot;Image&quot;,<br></p><p>                                  kCIAttributeType: kCIAttributeTypeImage]<br></p><p>        ]<br></p><p>    }<br></p><p>However, because the inputImage dictionary entry is a dictionary itself and<br>kCIAttributeTypeImage is a string, in Swift 3, it appears I have to<br>explicitly case them to compile:<br></p><p>    override var attributes: [String : AnyObject] {<br></p><p>        return [<br></p><p>                   kCIAttributeFilterDisplayName: &quot;CMYK Levels&quot;,<br></p><p>                   &quot;inputImage&quot;: [kCIAttributeIdentity: 0,<br></p><p>                                  kCIAttributeClass: &quot;CIImage&quot;,<br></p><p>                                  kCIAttributeDisplayName: &quot;Image&quot;,<br></p><p>                                  kCIAttributeType: kCIAttributeTypeImage as<br>AnyObject] as AnyObject<br></p><p>        ]<br></p><p>    }<br></p><p>There&#39;s a similar casting issue with the *arguments* parameter of a<br>kernel&#39;s *apply* method. In Swift 2, the following compiles without issue:<br></p><p>        let kernel = CIColorKernel()<br></p><p><br></p><p>        let rect = CGRect(<br></p><p>            x: 0, y: 0,<br></p><p>            width: 100, height: 100)<br></p><p><br></p><p>        let inputRadius: CGFloat = 5.678<br></p><p>        let inputCenter = CIVector(x: 12.3, y: 45.6)<br></p><p>        let inputRect = CIVector(cgRect: rect)<br></p><p>        let inputString = &quot;Xyzzy&quot;<br></p><p><br></p><p>        let arguments = [inputRect,<br></p><p>                         inputRadius,<br></p><p>                         inputCenter,<br></p><p>                         inputString]<br></p><p><br></p><p>        kernel.apply(<br></p><p>            withExtent: rect,<br></p><p>            arguments: arguments)<br></p><p>While in 3, I need to do the following:<br></p><p>        let arguments = [inputRect,<br></p><p>                         inputRadius as AnyObject,<br></p><p>                         inputCenter,<br></p><p>                         inputString as AnyObject] as [AnyObject]<br></p><p>Any thoughts anybody?<br></p><p>Cheers!<br></p><p>Simon<br></p><p>Simon Gladman     +44 7973 669691<br></p><p>Blog: http://flexmonkey.blogspot.co.uk<br>GitHub: https://github.com/FlexMonkey<br>Twitter: @FlexMonkey &lt;https://twitter.com/FlexMonkey&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160523/374262d3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>Swift 3 Questions</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>May 23, 2016 at 12:00:00am</p></header><div class="content"><p>Hi Simon,<br></p><p>This behavior is intentional; implicit bridging conversions are slated for removal in Swift 3.<br></p><p>More information: https://github.com/apple/swift-evolution/blob/master/proposals/0072-eliminate-implicit-bridging-conversions.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0072-eliminate-implicit-bridging-conversions.md&gt;<br></p><p>Best,<br>Austin<br></p><p>&gt; On May 23, 2016, at 12:44 AM, simon gladman via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi All,<br>&gt; <br>&gt; I thought I&#39;d attempt updating the code of my Filterpedia &lt;https://github.com/FlexMonkey/Filterpedia&gt; app to Swift 3. The transition has been pretty smooth so far, but I have a few issues. I guess my question over these issues is, are they features or bugs in an early Swift 3 release?<br>&gt; <br>&gt; First off, overriding CIFilter requires overriding the attributes var which is of type [String: AnyObject]. In Swift 2, the following works perfectly:<br>&gt; <br>&gt;     override var attributes: [String : AnyObject] {<br>&gt;         return [<br>&gt;                    kCIAttributeFilterDisplayName: &quot;CMYK Levels&quot;,<br>&gt;                    &quot;inputImage&quot;: [kCIAttributeIdentity: 0,<br>&gt;                                   kCIAttributeClass: &quot;CIImage&quot;,<br>&gt;                                   kCIAttributeDisplayName: &quot;Image&quot;,<br>&gt;                                   kCIAttributeType: kCIAttributeTypeImage]<br>&gt;         ]<br>&gt;     }<br>&gt; <br>&gt; However, because the inputImage dictionary entry is a dictionary itself and kCIAttributeTypeImage is a string, in Swift 3, it appears I have to explicitly case them to compile:<br>&gt; <br>&gt;     override var attributes: [String : AnyObject] {<br>&gt;         return [<br>&gt;                    kCIAttributeFilterDisplayName: &quot;CMYK Levels&quot;,<br>&gt;                    &quot;inputImage&quot;: [kCIAttributeIdentity: 0,<br>&gt;                                   kCIAttributeClass: &quot;CIImage&quot;,<br>&gt;                                   kCIAttributeDisplayName: &quot;Image&quot;,<br>&gt;                                   kCIAttributeType: kCIAttributeTypeImage as AnyObject] as AnyObject<br>&gt;         ]<br>&gt;     }<br>&gt; <br>&gt; There&#39;s a similar casting issue with the arguments parameter of a kernel&#39;s apply method. In Swift 2, the following compiles without issue:<br>&gt; <br>&gt;         let kernel = CIColorKernel()<br>&gt;         <br>&gt;         let rect = CGRect(<br>&gt;             x: 0, y: 0,<br>&gt;             width: 100, height: 100)<br>&gt;         <br>&gt;         let inputRadius: CGFloat = 5.678<br>&gt;         let inputCenter = CIVector(x: 12.3, y: 45.6)<br>&gt;         let inputRect = CIVector(cgRect: rect)<br>&gt;         let inputString = &quot;Xyzzy&quot;<br>&gt;         <br>&gt;         let arguments = [inputRect,<br>&gt;                          inputRadius,<br>&gt;                          inputCenter,<br>&gt;                          inputString]<br>&gt;         <br>&gt;         kernel.apply(<br>&gt;             withExtent: rect,<br>&gt;             arguments: arguments)<br>&gt; <br>&gt; While in 3, I need to do the following:<br>&gt; <br>&gt;         let arguments = [inputRect,<br>&gt;                          inputRadius as AnyObject,<br>&gt;                          inputCenter,<br>&gt;                          inputString as AnyObject] as [AnyObject]<br>&gt; <br>&gt; Any thoughts anybody?<br>&gt; <br>&gt; Cheers!<br>&gt; <br>&gt; Simon<br>&gt; <br>&gt; Simon Gladman     +44 7973 669691 &lt;tel:%2B44%207973%20669691&gt;<br>&gt; <br>&gt; Blog: http://flexmonkey.blogspot.co.uk &lt;http://flexmonkey.blogspot.co.uk/&gt;<br>&gt; GitHub: https://github.com/FlexMonkey &lt;https://github.com/FlexMonkey&gt;<br>&gt; Twitter: @FlexMonkey &lt;https://twitter.com/FlexMonkey&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160523/69414e0b/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
