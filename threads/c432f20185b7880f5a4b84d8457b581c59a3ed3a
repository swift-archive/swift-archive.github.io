<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>SE-0025: Scoped Access Level, next steps</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>March 15, 2016 at 10:00:00am</p></header><div class="content"><p>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160315/c432ed3a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d172fa3c47108d84ee35a68e8d675c1?s=50"></div><header><strong>SE-0025: Scoped Access Level, next steps</strong> from <string>Ross O&#39;Brien</string> &lt;narrativium+swift at gmail.com&gt;<p>March 15, 2016 at 11:00:00am</p></header><div class="content"><p>Thoughts:<br>Here are the first two ideas I had regarding generic &#39;access&#39; symbols.<br></p><p>&quot;public&quot; -&gt; symbol visible outside the current module<br>&quot;internal&quot; -&gt; symbol visible within the current module<br>&quot;restricted&quot; -&gt; symbol visible within the current file<br>&quot;private&quot; -&gt; symbol visible within the current declaration<br></p><p>&quot;public&quot; -&gt; symbol visible outside the current module<br>&quot;internal&quot; -&gt; symbol visible within the current module<br>&quot;private&quot; -&gt; symbol visible within the current file<br>&quot;intimate&quot; -&gt; symbol visible within the current declaration<br></p><p>However, I think if we&#39;re going to be &#39;Swift&#39; about this, the terminology<br>should be more explicit about what the access level refers to, rather than<br>where it ranks on the accessibility scale. So, I&#39;d prefer to see something<br>like:<br>&quot;publicaccess&quot; -&gt; symbol visible outside the current module<br>&quot;moduleaccess&quot; -&gt; symbol visible within the current module<br>&quot;fileaccess&quot; -&gt; symbol visible within the current file<br>&quot;declarationaccess&quot; -&gt; symbol visible within the current declaration<br></p><p>(&quot;private(module)&quot;, &quot;private(file)&quot;, &quot;private(declaration)&quot; etc. works for<br>me too.)<br></p><p>This is clear. A &quot;fileaccess&quot; property can&#39;t be accessed outside its file,<br>there&#39;s on wondering about whether one term is subjectively more or less<br>restrictive than another term on the scale, and there&#39;s still room to<br>expand this to include &quot;submodule&quot; or C#-like &quot;region&quot; scopes if those are<br>desired future directions.<br></p><p><br>On Tue, Mar 15, 2016 at 10:43 AM, Thorsten Seitz via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; +1 for your proposed changes to private(set) etc.<br>&gt;<br>&gt; -Thorsten<br>&gt;<br>&gt;<br>&gt; Am 15. März 2016 um 05:38 schrieb Shawn Erickson via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt;:<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Mon, Mar 14, 2016 at 5:18 PM Chris Lattner via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Per Doug’s email, the core team agrees we should make a change here, but<br>&gt;&gt; would like some bikeshedding to happen on the replacement name for private.<br>&gt;&gt;<br>&gt;&gt; To summarize the place we’d like to end up:<br>&gt;&gt;<br>&gt;&gt; - “public” -&gt; symbol visible outside the current module.<br>&gt;&gt; - “internal” -&gt; symbol visible within the current module.<br>&gt;&gt; - unknown -&gt; symbol visible within the current file.<br>&gt;&gt; - “private” -&gt; symbol visible within the current declaration (class,<br>&gt;&gt; extension, etc).<br>&gt;&gt;<br>&gt;<br>&gt; More thinking out loud...<br>&gt;<br>&gt; `public` -&gt; exported from module<br>&gt; &lt;omitted&gt; -&gt; module scoped (e.g. current internal)<br>&gt; `private` -&gt; class, struct, etc. scoped (e.g. new private)<br>&gt; `private(file)` or `file` -&gt; file scoped (e.g existing private)<br>&gt; `private(module)` or `module` or `internal` -&gt; module scoped (e.g. current<br>&gt; internal)<br>&gt;<br>&gt; public var foo = 0 // marks default getter and setter public<br>&gt;<br>&gt; public var foo = 0 {  // marks default getter and setter public however...<br>&gt;   private set         // marks default setter private<br>&gt; }<br>&gt;<br>&gt; var foo = 0 { // marks default getter and setter module scoped however...<br>&gt;   public get  // marks default getter public<br>&gt;   private set // marks default setter private<br>&gt; }<br>&gt;<br>&gt; public var foo: Int { ... } // marks provided getter public, read-only<br>&gt;<br>&gt; var foo: Int {        // marks provided getter and setter module scoped<br>&gt; however...<br>&gt;   public get { ... }  // marks provided getter public<br>&gt;   private set { ... } // marks provided setter private<br>&gt; }<br>&gt;<br>&gt; public var foo: Int { // marks provided getter and setter public however...<br>&gt;   get { ... }         // not specified, inherit access level public<br>&gt;   private set { ... } // marks provided setter private<br>&gt; }<br>&gt;<br>&gt; var foo: Int {        // marks provided getter and setter module scoped<br>&gt; however...<br>&gt;   get { ... }         // not specified, inherit access level module scoped<br>&gt;   private set { ... } // marks provided setter private<br>&gt; }<br>&gt;<br>&gt; private(module) var foo: Int { // marks provided getter and setter module<br>&gt; scoped however...<br>&gt;   get { ... }                 // not specified, inherit access level<br>&gt; module scoped<br>&gt;   private(file) set { ... }   // marks provided setter file scoped<br>&gt; }<br>&gt;<br>&gt; var foo: Int {                // marks provided getter and setter module<br>&gt; scoped however...<br>&gt;   private(file) get { ... }   // not specified, inherit access level<br>&gt; module scoped<br>&gt;   private set { ... }         // marks provided setter file scoped<br>&gt; }<br>&gt;<br>&gt; ...etc...<br>&gt;<br>&gt; public subscript(index: Int) -&gt; Int { ... } // marks provided getter<br>&gt; public, read-only<br>&gt;<br>&gt; public subscript(index: Int) -&gt; Int { // marks provided getter and setter<br>&gt; public<br>&gt;   get { ... }                         // not specified, inherit access<br>&gt; level public<br>&gt;   set { ... }                         // not specified, inherit access<br>&gt; level public<br>&gt; }<br>&gt;<br>&gt; public subscript(index: Int) -&gt; Int { // marks provided getter and setter<br>&gt; public however...<br>&gt;   get { ... }                         // not specified, inherit access<br>&gt; level public<br>&gt;   private set { ... }                 // marks provided setter private<br>&gt; }<br>&gt;<br>&gt; subscript(index: Int) -&gt; Int {  // marks provided getter and setter module<br>&gt; scoped however...<br>&gt;   get { ... }                   // not specified, inherit access level<br>&gt; module scoped<br>&gt;   private set { ... }           // marks provided setter private<br>&gt; }<br>&gt;<br>&gt; subscript(index: Int) -&gt; Int {  // marks provided getter and setter module<br>&gt; scoped however...<br>&gt;   public get { ... }            // marks provided getter public<br>&gt;   private set { ... }           // marks provided setter private<br>&gt; }<br>&gt;<br>&gt; subscript(index: Int) -&gt; Int {  // marks provided getter and setter module<br>&gt; scoped however...<br>&gt;   public get { ... }            // marks provided getter public<br>&gt;   private(file) set { ... }     // marks provided setter file scoped<br>&gt; }<br>&gt; ...etc...<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160315/34770183/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
