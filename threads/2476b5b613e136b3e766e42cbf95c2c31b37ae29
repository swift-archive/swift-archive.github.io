<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0023 API Design Guidelines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February  1, 2016 at 03:00:00pm</p></header><div class="content"><p>on Sun Jan 31 2016, Colin Cornaby &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I’m still processing all my thoughts on this and might have a thought<br>&gt; or two on the Obj-C bridging thread as well, but I had a question<br>&gt; about one specific style guideline:<br>&gt;<br>&gt;&gt; Uses &lt;&gt; of nonmutating Boolean methods and properties should read as<br>&gt;&gt; assertions about the receiver, e.g. x.isEmpty,<br>&gt;&gt; line1.intersects(line2)<br>&gt;<br>&gt; I have really mixed feelings on this, and was wondering what the<br>&gt; rationale was (maybe to convince me it’s a good idea.) To me, this<br>&gt; seems like adding extra language to a proposal that is pretty good at<br>&gt; removing now unnecessary language. It also seems unhelpful to me as an<br>&gt; API user and writer because in an alphabetical list, related<br>&gt; functionality (like a “playing” nonmutating property and a “play”<br>&gt; function, or a “playRate” mutable property) are all going to be moved<br>&gt; away from each other in a list. <br></p><p>http://oldtownscrabble.com/10/08/verb-and-adjective/<br></p><p>The classic example is:<br></p><p>    x.empty()<br></p><p>does this clear the elements of x, or just tell you whether it has any?<br></p><p>Lisp users have a &quot;-p&quot; (for &quot;predicate&quot;) suffix they append to things to<br>solve this kind of problem.<br></p><p>&gt; I acknowledge that Xcode’s autocomplete is getting better though in<br>&gt; that regard, and that most documentation is grouped. But I’m not a fan<br>&gt; of the crowding of “is” functions that is going to happen.<br></p><p>If that&#39;s going to be an issue, we should fix the tools.<br></p><p>&gt; In reviewing AVFoundation specifically (but I’m going through the<br>&gt; others as well), I’m not sure this is an improvement either.<br>&gt;<br>&gt; Mildly worse, makes it sound like a function instead of a property:<br>&gt; exposurePointOfInterestSupported -&gt; isExposurePointOfInterestSupported<br></p><p>Heh, I&#39;d go with <br></p><p>    supportsExposurePointOfInterest<br></p><p>myself.<br></p><p>&gt; Same sort of thing, I’m not sure this is cleaner:<br>&gt; supportsVideoMirroring -&gt; isVideoMirroringSupported<br></p><p>x.supportsVideoMirroring is how it should read.  Did we make that change<br>automatically?  Oh, I see, this came from<br>https://github.com/apple/swift-3-api-guidelines-review/commit/a6ce38eec58e8c2da901d0049a04e4b875c403b2.<br></p><p>This is one of the rare cases where the original property name works<br>better than the getter.  Looking at the rest of this change, it&#39;s IMO so<br>overwhelmingly positive that we&#39;d want to just let the framework author<br>tweak this one explicitly with an NS_SWIFT_NAME annotation.<br></p><p>&gt; This one almost sounds to me like the function meaning is being tweaked:<br>&gt; videoMirrored -&gt; isVideoMirrored<br></p><p>Well, I&#39;d agree that videoIsMirrored or mirroring would be better names<br>in this case, but I don&#39;t think the transformation does any damage.<br></p><p>&gt; The name of this one now sounds like it is supposed to have an<br>&gt; argument to check to see if a specific video orientation is supported<br>&gt; (although it is true that the original property wasn’t named great<br>&gt; either):<br>&gt; supportsVideoOrientation -&gt; isVideoOrientationSupported<br></p><p>Another case of<br>https://github.com/apple/swift-3-api-guidelines-review/commit/a6ce38eec58e8c2da901d0049a04e4b875c403b2<br></p><p>&gt; Like I said, I’d be willing to be talked into this, but at this point<br>&gt; I’m just really curious what the justification is. For simple cases<br>&gt; this seems to work well, but I’m really not enthused for what this<br>&gt; does to more complex or domain specific property names. I’m willing to<br>&gt; call this “unease after doing Obj-C too long”, but I’d like to<br>&gt; understand why the Swift team feels this is better.<br></p><p>The rationale is that it clarifies things that would otherwise be unclear.<br></p><p>HTH,<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
