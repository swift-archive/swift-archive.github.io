<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dc0180c1b9aff52f5d42a1ca6bd1f184?s=50"></div><header><strong>Official Docker Image &amp; &quot;Blessing&quot;s of Community Platforms</strong> from <string>Thomas Catterall</string> &lt;me at swizzlr.co&gt;<p>December 29, 2015 at 01:00:00pm</p></header><div class="content"><p>Hi all,<br></p><p>You might want to settle down with a glass of eggnog to read this, it&#39;s a long one.<br></p><p>Myself and Haris Amin (CC&#39;d), as you may know, have been building a community of users who want to use Swift inside Docker containers (https://github.com/swiftdocker/docker-swift) and maintain an image, swiftdocker/swift, that provides a complete Swift installation that is usable for all kinds of applications, from trying a Linux REPL to running a webserver (I&#39;ve already deployed one).<br></p><p>We&#39;ve been contacted by a content evangelist at Docker who would like to offer an &quot;official&quot; Docker image that contains Swift. You can read more about official Docker images here: https://docs.docker.com/docker-hub/official_repos/. Note that these are official in Docker Inc.&#39;s view: they don&#39;t necessarily exist as officially supported by, for instance, PyPy developers, but they are a great starting point and exhibit best practices. Docker is interested in having Haris and I maintain the image we have been building as the official repository. There&#39;s a lot of benefits to having an official Docker image, namely enhanced security, scrutiny, support, and a spotlight on a great new language that can drive adoption.<br></p><p>Haris and I are incredibly thankful for the hard work Swift&#39;s core team have put into the open sourcing of the language and in that spirit we are very reluctant to proceed without the core team&#39;s blessing. The important thing to note is that this endeavour would involve little to no work on the core team&#39;s side, except perhaps a note on the Downloads page saying that this is a community supported project and not one officially supported by the core team.<br></p><p>This brings to a head something that&#39;s been rumbling for a while: how exactly does the Swift Project &quot;bless&quot; alternative distributions or platforms? For instance, the recent work on compiling to ARM for the Raspberry Pi is a worthy project, notably for the Pi&#39;s adoption in educational environments. BSD systems are another area of great interest. Furthermore, I doubt it will be long before someone wants to provide a Swift package through apt-get, homebrew etc. While those contributors may have less qualms about wanting the Swift team&#39;s blessing, it makes sense that there is some degree of centrality to ensure people do not work independently towards the same goal for a particular platform.<br></p><p>For the matter at hand, Haris and I would like to at the least hear &quot;go for it&quot; from the core team; better yet, we&#39;d love to have anyone from the core team/Apple who is interested in Docker/the build infrastructure to join Haris, Docker and I in creating this official repo, and serving as a representative of Apple&#39;s interests in this area.<br></p><p>For the larger matter, it seems to me that the Swift Project can take a few directions:<br>1. &quot;Knock yourselves out, but we&#39;re just making the language.&quot; In this direction, the Swift Project would disclaim official support or blessing of anything that doesn&#39;t come out of it. Occupation of a top level namespace or being the &quot;official&quot; Swift for a platform would be something for the community to sort out independently with the platform vendor.<br>2. &quot;Knock yourselves out, here&#39;s a list of all the current efforts that we think you might be interested in&quot;<br>Not so much as blessing, still disclaiming support, but at the least acknowledging the ecosystem around Swift for other platforms besides OS X and the two Ubuntus.<br>3. Blessing: in this direction, which I think a lot of people would like and I would prefer, the Swift project gives its blessing to projects, and links to them on its website. This has the benefit of centralising development efforts and providing an easy springboard for those who are interested in Swift and are checking the website.<br>4. Official support: in this direction, when a project meets a certain criteria, it is folded into the main Swift project, given a repo on GitHub etc. This would probably not occur for quite a while yet, but as continuous integration improves for Swift it could make sense that the docker image might be something that is actively supported in the development of Swift if it is sufficiently popular.<br></p><p>I&#39;d like to hear back from the core team about this instance of the Docker issue, but I&#39;d also like to start a conversation about community platform support and how centralising issues like this one can be handled in future.<br></p><p>Best wishes for the new year,<br></p><p>Thomas Catterall<br></p><p><br>Sent from my iPhone<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151229/81383b08/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fae07cfa9d826a57406ffa89fa22fbd2?s=50"></div><header><strong>Official Docker Image &amp; &quot;Blessing&quot;s of Community Platforms</strong> from <string>Jeremy Fergason</string> &lt;jeremy.fergason at gmail.com&gt;<p>December 29, 2015 at 02:00:00pm</p></header><div class="content"><p>I think this is a timely discussion.  I’ve been working on putting together packages for Fedora and RHEL/CentOS 6/7.  The RHEL series tends to be quite slow on updating packages so building is a bit tricky.  It would be nice if users at swift.org had just a quick reference to where the packages could be pulled from if desired.<br></p><p><br>I’ll post to this list when the rpm’s are available for general use.<br></p><p><br>Happy New Year!<br></p><p><br>Jeremy Fergason<br></p><p><br></p><p>&gt; On Dec 29, 2016, at 11:07 AM, Thomas Catterall via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; <br>&gt; You might want to settle down with a glass of eggnog to read this, it&#39;s a long one.<br>&gt; <br>&gt; <br>&gt; Myself and Haris Amin (CC&#39;d), as you may know, have been building a community of users who want to use Swift inside Docker containers (https://github.com/swiftdocker/docker-swift<br>&gt; ) and maintain an image, swiftdocker/swift, that provides a complete Swift installation that is usable for all kinds of applications, from trying a Linux REPL to running a webserver (I&#39;ve already deployed one).<br>&gt; <br>&gt; <br>&gt; We&#39;ve been contacted by a content evangelist at Docker who would like to offer an &quot;official&quot; Docker image that contains Swift. You can read more about official Docker images here: https://docs.docker.com/docker-hub/official_repos/<br>&gt; . Note that these are official in Docker Inc.&#39;s view: they don&#39;t necessarily exist as officially supported by, for instance, PyPy developers, but they are a great starting point and exhibit best practices. Docker is interested in having Haris and I maintain the image we have been building as the official repository. There&#39;s a lot of benefits to having an official Docker image, namely enhanced security, scrutiny, support, and a spotlight on a great new language that can drive adoption.<br>&gt; <br>&gt; <br>&gt; Haris and I are incredibly thankful for the hard work Swift&#39;s core team have put into the open sourcing of the language and in that spirit we are very reluctant to proceed without the core team&#39;s blessing. The important thing to note is that this endeavour would involve little to no work on the core team&#39;s side, except perhaps a note on the Downloads page saying that this is a community supported project and not one officially supported by the core team.<br>&gt; <br>&gt; <br>&gt; This brings to a head something that&#39;s been rumbling for a while: how exactly does the Swift Project &quot;bless&quot; alternative distributions or platforms? For instance, the recent work on compiling to ARM for the Raspberry Pi is a worthy project, notably for the Pi&#39;s adoption in educational environments. BSD systems are another area of great interest. Furthermore, I doubt it will be long before someone wants to provide a Swift package through apt-get, homebrew etc. While those contributors may have less qualms about wanting the Swift team&#39;s blessing, it makes sense that there is some degree of centrality to ensure people do not work independently towards the same goal for a particular platform.<br>&gt; <br>&gt; <br>&gt; For the matter at hand, Haris and I would like to at the least hear &quot;go for it&quot; from the core team; better yet, we&#39;d love to have anyone from the core team/Apple who is interested in Docker/the build infrastructure to join Haris, Docker and I in creating this official repo, and serving as a representative of Apple&#39;s interests in this area.<br>&gt; <br>&gt; <br>&gt; For the larger matter, it seems to me that the Swift Project can take a few directions:<br>&gt; 1. &quot;Knock yourselves out, but we&#39;re just making the language.&quot; In this direction, the Swift Project would disclaim official support or blessing of anything that doesn&#39;t come out of it. Occupation of a top level namespace or being the &quot;official&quot; Swift for a platform would be something for the community to sort out independently with the platform vendor.<br>&gt; 2. &quot;Knock yourselves out, here&#39;s a list of all the current efforts that we think you might be interested in&quot;<br>&gt; Not so much as blessing, still disclaiming support, but at the least acknowledging the ecosystem around Swift for other platforms besides OS X and the two Ubuntus.<br>&gt; 3. Blessing: in this direction, which I think a lot of people would like and I would prefer, the Swift project gives its blessing to projects, and links to them on its website. This has the benefit of centralising development efforts and providing an easy springboard for those who are interested in Swift and are checking the website.<br>&gt; 4. Official support: in this direction, when a project meets a certain criteria, it is folded into the main Swift project, given a repo on GitHub etc. This would probably not occur for quite a while yet, but as continuous integration improves for Swift it could make sense that the docker image might be something that is actively supported in the development of Swift if it is sufficiently popular.<br>&gt; <br>&gt; <br>&gt; I&#39;d like to hear back from the core team about this instance of the Docker issue, but I&#39;d also like to start a conversation about community platform support and how centralising issues like this one can be handled in future.<br>&gt; <br>&gt; <br>&gt; Best wishes for the new year,<br>&gt; <br>&gt; <br>&gt; Thomas Catterall<br>&gt; <br>&gt; <br>&gt; Sent from my iPhone<br>&gt; &lt;embedded image&gt;_______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151229/35047287/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Official Docker Image &amp; &quot;Blessing&quot;s of Community Platforms</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>January  4, 2016 at 09:00:00am</p></header><div class="content"><p>Hi Thomas,<br></p><p>Just a question: how would the constant changing of the Swift compiler version and language interact with this? It seems odd to have an &quot;official&quot; version of what is an otherwise unreleased language version/compiler.<br></p><p> - Daniel<br></p><p>&gt; On Dec 29, 2015, at 10:07 AM, Thomas Catterall via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; You might want to settle down with a glass of eggnog to read this, it&#39;s a long one.<br>&gt; <br>&gt; Myself and Haris Amin (CC&#39;d), as you may know, have been building a community of users who want to use Swift inside Docker containers (https://github.com/swiftdocker/docker-swift &lt;https://github.com/swiftdocker/docker-swift&gt;) and maintain an image, swiftdocker/swift, that provides a complete Swift installation that is usable for all kinds of applications, from trying a Linux REPL to running a webserver (I&#39;ve already deployed one).<br>&gt; <br>&gt; We&#39;ve been contacted by a content evangelist at Docker who would like to offer an &quot;official&quot; Docker image that contains Swift. You can read more about official Docker images here: https://docs.docker.com/docker-hub/official_repos/ &lt;https://docs.docker.com/docker-hub/official_repos/&gt;. Note that these are official in Docker Inc.&#39;s view: they don&#39;t necessarily exist as officially supported by, for instance, PyPy developers, but they are a great starting point and exhibit best practices. Docker is interested in having Haris and I maintain the image we have been building as the official repository. There&#39;s a lot of benefits to having an official Docker image, namely enhanced security, scrutiny, support, and a spotlight on a great new language that can drive adoption.<br>&gt; <br>&gt; Haris and I are incredibly thankful for the hard work Swift&#39;s core team have put into the open sourcing of the language and in that spirit we are very reluctant to proceed without the core team&#39;s blessing. The important thing to note is that this endeavour would involve little to no work on the core team&#39;s side, except perhaps a note on the Downloads page saying that this is a community supported project and not one officially supported by the core team.<br>&gt; <br>&gt; This brings to a head something that&#39;s been rumbling for a while: how exactly does the Swift Project &quot;bless&quot; alternative distributions or platforms? For instance, the recent work on compiling to ARM for the Raspberry Pi is a worthy project, notably for the Pi&#39;s adoption in educational environments. BSD systems are another area of great interest. Furthermore, I doubt it will be long before someone wants to provide a Swift package through apt-get, homebrew etc. While those contributors may have less qualms about wanting the Swift team&#39;s blessing, it makes sense that there is some degree of centrality to ensure people do not work independently towards the same goal for a particular platform.<br>&gt; <br>&gt; For the matter at hand, Haris and I would like to at the least hear &quot;go for it&quot; from the core team; better yet, we&#39;d love to have anyone from the core team/Apple who is interested in Docker/the build infrastructure to join Haris, Docker and I in creating this official repo, and serving as a representative of Apple&#39;s interests in this area.<br>&gt; <br>&gt; For the larger matter, it seems to me that the Swift Project can take a few directions:<br>&gt; 1. &quot;Knock yourselves out, but we&#39;re just making the language.&quot; In this direction, the Swift Project would disclaim official support or blessing of anything that doesn&#39;t come out of it. Occupation of a top level namespace or being the &quot;official&quot; Swift for a platform would be something for the community to sort out independently with the platform vendor.<br>&gt; 2. &quot;Knock yourselves out, here&#39;s a list of all the current efforts that we think you might be interested in&quot;<br>&gt; Not so much as blessing, still disclaiming support, but at the least acknowledging the ecosystem around Swift for other platforms besides OS X and the two Ubuntus.<br>&gt; 3. Blessing: in this direction, which I think a lot of people would like and I would prefer, the Swift project gives its blessing to projects, and links to them on its website. This has the benefit of centralising development efforts and providing an easy springboard for those who are interested in Swift and are checking the website.<br>&gt; 4. Official support: in this direction, when a project meets a certain criteria, it is folded into the main Swift project, given a repo on GitHub etc. This would probably not occur for quite a while yet, but as continuous integration improves for Swift it could make sense that the docker image might be something that is actively supported in the development of Swift if it is sufficiently popular.<br>&gt; <br>&gt; I&#39;d like to hear back from the core team about this instance of the Docker issue, but I&#39;d also like to start a conversation about community platform support and how centralising issues like this one can be handled in future.<br>&gt; <br>&gt; Best wishes for the new year,<br>&gt; <br>&gt; Thomas Catterall<br>&gt; <br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160104/1dbc26bc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dc0180c1b9aff52f5d42a1ca6bd1f184?s=50"></div><header><strong>Official Docker Image &amp; &quot;Blessing&quot;s of Community Platforms</strong> from <string>Thomas Catterall</string> &lt;me at swizzlr.co&gt;<p>January  4, 2016 at 01:00:00pm</p></header><div class="content"><p>Hi Daniel,<br></p><p>We&#39;d release new images as new snapshots are released; we don&#39;t do it yet but we can &quot;tag&quot; images so that you could pin your image to a particular snapshot.<br></p><p>Tom<br></p><p>Sent from my iPhone<br></p><p>&gt; On 4 Jan 2016, at 12:24, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt; wrote:<br>&gt; <br>&gt; Hi Thomas,<br>&gt; <br>&gt; Just a question: how would the constant changing of the Swift compiler version and language interact with this? It seems odd to have an &quot;official&quot; version of what is an otherwise unreleased language version/compiler.<br>&gt; <br>&gt;  - Daniel<br>&gt; <br>&gt;&gt; On Dec 29, 2015, at 10:07 AM, Thomas Catterall via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi all,<br>&gt;&gt; <br>&gt;&gt; You might want to settle down with a glass of eggnog to read this, it&#39;s a long one.<br>&gt;&gt; <br>&gt;&gt; Myself and Haris Amin (CC&#39;d), as you may know, have been building a community of users who want to use Swift inside Docker containers (https://github.com/swiftdocker/docker-swift) and maintain an image, swiftdocker/swift, that provides a complete Swift installation that is usable for all kinds of applications, from trying a Linux REPL to running a webserver (I&#39;ve already deployed one).<br>&gt;&gt; <br>&gt;&gt; We&#39;ve been contacted by a content evangelist at Docker who would like to offer an &quot;official&quot; Docker image that contains Swift. You can read more about official Docker images here: https://docs.docker.com/docker-hub/official_repos/. Note that these are official in Docker Inc.&#39;s view: they don&#39;t necessarily exist as officially supported by, for instance, PyPy developers, but they are a great starting point and exhibit best practices. Docker is interested in having Haris and I maintain the image we have been building as the official repository. There&#39;s a lot of benefits to having an official Docker image, namely enhanced security, scrutiny, support, and a spotlight on a great new language that can drive adoption.<br>&gt;&gt; <br>&gt;&gt; Haris and I are incredibly thankful for the hard work Swift&#39;s core team have put into the open sourcing of the language and in that spirit we are very reluctant to proceed without the core team&#39;s blessing. The important thing to note is that this endeavour would involve little to no work on the core team&#39;s side, except perhaps a note on the Downloads page saying that this is a community supported project and not one officially supported by the core team.<br>&gt;&gt; <br>&gt;&gt; This brings to a head something that&#39;s been rumbling for a while: how exactly does the Swift Project &quot;bless&quot; alternative distributions or platforms? For instance, the recent work on compiling to ARM for the Raspberry Pi is a worthy project, notably for the Pi&#39;s adoption in educational environments. BSD systems are another area of great interest. Furthermore, I doubt it will be long before someone wants to provide a Swift package through apt-get, homebrew etc. While those contributors may have less qualms about wanting the Swift team&#39;s blessing, it makes sense that there is some degree of centrality to ensure people do not work independently towards the same goal for a particular platform.<br>&gt;&gt; <br>&gt;&gt; For the matter at hand, Haris and I would like to at the least hear &quot;go for it&quot; from the core team; better yet, we&#39;d love to have anyone from the core team/Apple who is interested in Docker/the build infrastructure to join Haris, Docker and I in creating this official repo, and serving as a representative of Apple&#39;s interests in this area.<br>&gt;&gt; <br>&gt;&gt; For the larger matter, it seems to me that the Swift Project can take a few directions:<br>&gt;&gt; 1. &quot;Knock yourselves out, but we&#39;re just making the language.&quot; In this direction, the Swift Project would disclaim official support or blessing of anything that doesn&#39;t come out of it. Occupation of a top level namespace or being the &quot;official&quot; Swift for a platform would be something for the community to sort out independently with the platform vendor.<br>&gt;&gt; 2. &quot;Knock yourselves out, here&#39;s a list of all the current efforts that we think you might be interested in&quot;<br>&gt;&gt; Not so much as blessing, still disclaiming support, but at the least acknowledging the ecosystem around Swift for other platforms besides OS X and the two Ubuntus.<br>&gt;&gt; 3. Blessing: in this direction, which I think a lot of people would like and I would prefer, the Swift project gives its blessing to projects, and links to them on its website. This has the benefit of centralising development efforts and providing an easy springboard for those who are interested in Swift and are checking the website.<br>&gt;&gt; 4. Official support: in this direction, when a project meets a certain criteria, it is folded into the main Swift project, given a repo on GitHub etc. This would probably not occur for quite a while yet, but as continuous integration improves for Swift it could make sense that the docker image might be something that is actively supported in the development of Swift if it is sufficiently popular.<br>&gt;&gt; <br>&gt;&gt; I&#39;d like to hear back from the core team about this instance of the Docker issue, but I&#39;d also like to start a conversation about community platform support and how centralising issues like this one can be handled in future.<br>&gt;&gt; <br>&gt;&gt; Best wishes for the new year,<br>&gt;&gt; <br>&gt;&gt; Thomas Catterall<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-dev mailing list<br>&gt;&gt; swift-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160104/1399c2da/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/684e59a0e53725d2a8291318a42e7ee4?s=50"></div><header><strong>Official Docker Image &amp; &quot;Blessing&quot;s of Community Platforms</strong> from <string>Haris Amin</string> &lt;aminharis7 at gmail.com&gt;<p>January  4, 2016 at 01:00:00pm</p></header><div class="content"><p>Yes we can most definitely tag images for snapshots. Maybe our versioning could reflect that too.<br></p><p>Haris<br></p><p>On January 4, 2016 at 1:17:56 PM, Thomas Catterall (me at swizzlr.co) wrote:<br></p><p>Hi Daniel,<br></p><p>We&#39;d release new images as new snapshots are released; we don&#39;t do it yet but we can &quot;tag&quot; images so that you could pin your image to a particular snapshot.<br></p><p>Tom<br></p><p>Sent from my iPhone<br></p><p>On 4 Jan 2016, at 12:24, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt; wrote:<br></p><p>Hi Thomas,<br></p><p>Just a question: how would the constant changing of the Swift compiler version and language interact with this? It seems odd to have an &quot;official&quot; version of what is an otherwise unreleased language version/compiler.<br></p><p> - Daniel<br></p><p>On Dec 29, 2015, at 10:07 AM, Thomas Catterall via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br></p><p>Hi all,<br></p><p>You might want to settle down with a glass of eggnog to read this, it&#39;s a long one.<br></p><p>Myself and Haris Amin (CC&#39;d), as you may know, have been building a community of users who want to use Swift inside Docker containers (https://github.com/swiftdocker/docker-swift) and maintain an image, swiftdocker/swift, that provides a complete Swift installation that is usable for all kinds of applications, from trying a Linux REPL to running a webserver (I&#39;ve already deployed one).<br></p><p>We&#39;ve been contacted by a content evangelist at Docker who would like to offer an &quot;official&quot; Docker image that contains Swift. You can read more about official Docker images here: https://docs.docker.com/docker-hub/official_repos/. Note that these are official in Docker Inc.&#39;s view: they don&#39;t necessarily exist as officially supported by, for instance, PyPy developers, but they are a great starting point and exhibit best practices. Docker is interested in having Haris and I maintain the image we have been building as the official repository. There&#39;s a lot of benefits to having an official Docker image, namely enhanced security, scrutiny, support, and a spotlight on a great new language that can drive adoption.<br></p><p>Haris and I are incredibly thankful for the hard work Swift&#39;s core team have put into the open sourcing of the language and in that spirit we are very reluctant to proceed without the core team&#39;s blessing. The important thing to note is that this endeavour would involve little to no work on the core team&#39;s side, except perhaps a note on the Downloads page saying that this is a community supported project and not one officially supported by the core team.<br></p><p>This brings to a head something that&#39;s been rumbling for a while: how exactly does the Swift Project &quot;bless&quot; alternative distributions or platforms? For instance, the recent work on compiling to ARM for the Raspberry Pi is a worthy project, notably for the Pi&#39;s adoption in educational environments. BSD systems are another area of great interest. Furthermore, I doubt it will be long before someone wants to provide a Swift package through apt-get, homebrew etc. While those contributors may have less qualms about wanting the Swift team&#39;s blessing, it makes sense that there is some degree of centrality to ensure people do not work independently towards the same goal for a particular platform.<br></p><p>For the matter at hand, Haris and I would like to at the least hear &quot;go for it&quot; from the core team; better yet, we&#39;d love to have anyone from the core team/Apple who is interested in Docker/the build infrastructure to join Haris, Docker and I in creating this official repo, and serving as a representative of Apple&#39;s interests in this area.<br></p><p>For the larger matter, it seems to me that the Swift Project can take a few directions:<br>1. &quot;Knock yourselves out, but we&#39;re just making the language.&quot; In this direction, the Swift Project would disclaim official support or blessing of anything that doesn&#39;t come out of it. Occupation of a top level namespace or being the &quot;official&quot; Swift for a platform would be something for the community to sort out independently with the platform vendor.<br>2. &quot;Knock yourselves out, here&#39;s a list of all the current efforts that we think you might be interested in&quot;<br>Not so much as blessing, still disclaiming support, but at the least acknowledging the ecosystem around Swift for other platforms besides OS X and the two Ubuntus.<br>3. Blessing: in this direction, which I think a lot of people would like and I would prefer, the Swift project gives its blessing to projects, and links to them on its website. This has the benefit of centralising development efforts and providing an easy springboard for those who are interested in Swift and are checking the website.<br>4. Official support: in this direction, when a project meets a certain criteria, it is folded into the main Swift project, given a repo on GitHub etc. This would probably not occur for quite a while yet, but as continuous integration improves for Swift it could make sense that the docker image might be something that is actively supported in the development of Swift if it is sufficiently popular.<br></p><p>I&#39;d like to hear back from the core team about this instance of the Docker issue, but I&#39;d also like to start a conversation about community platform support and how centralising issues like this one can be handled in future.<br></p><p>Best wishes for the new year,<br></p><p>Thomas Catterall<br></p><p><br>Sent from my iPhone<br></p><p>_______________________________________________<br>swift-dev mailing list<br>swift-dev at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160104/89199d77/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b6520643611a05fd040d0abcee3c883c?s=50"></div><header><strong>Official Docker Image &amp; &quot;Blessing&quot;s of Community Platforms</strong> from <string>Ted Kremenek</string> &lt;kremenek at apple.com&gt;<p>January 11, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Dec 29, 2015, at 10:07 AM, Thomas Catterall via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; For the matter at hand, Haris and I would like to at the least hear &quot;go for it&quot; from the core team; better yet, we&#39;d love to have anyone from the core team/Apple who is interested in Docker/the build infrastructure to join Haris, Docker and I in creating this official repo, and serving as a representative of Apple&#39;s interests in this area.<br>&gt; <br>&gt; For the larger matter, it seems to me that the Swift Project can take a few directions:<br>&gt; 1. &quot;Knock yourselves out, but we&#39;re just making the language.&quot; In this direction, the Swift Project would disclaim official support or blessing of anything that doesn&#39;t come out of it. Occupation of a top level namespace or being the &quot;official&quot; Swift for a platform would be something for the community to sort out independently with the platform vendor.<br>&gt; 2. &quot;Knock yourselves out, here&#39;s a list of all the current efforts that we think you might be interested in&quot;<br>&gt; Not so much as blessing, still disclaiming support, but at the least acknowledging the ecosystem around Swift for other platforms besides OS X and the two Ubuntus.<br>&gt; 3. Blessing: in this direction, which I think a lot of people would like and I would prefer, the Swift project gives its blessing to projects, and links to them on its website. This has the benefit of centralising development efforts and providing an easy springboard for those who are interested in Swift and are checking the website.<br>&gt; 4. Official support: in this direction, when a project meets a certain criteria, it is folded into the main Swift project, given a repo on GitHub etc. This would probably not occur for quite a while yet, but as continuous integration improves for Swift it could make sense that the docker image might be something that is actively supported in the development of Swift if it is sufficiently popular.<br>&gt; <br>&gt; I&#39;d like to hear back from the core team about this instance of the Docker issue, but I&#39;d also like to start a conversation about community platform support and how centralising issues like this one can be handled in future.<br></p><p>Hi Thomas and Harris,<br></p><p>First, my apologies for the slow response.  Docker + Swift is a great combination that I&#39;d be very interested in exploring as having a more official support from the Swift.org project.<br></p><p>This is something I need to discuss more with the rest of Swift Core, but what I&#39;m looking for is #3 or #4.  From my perspective, having official support for Docker would be about adding a new sibling download next to the Swift binary downloads for Xcode and Linux (Ubuntu).  It&#39;s something I think we&#39;d be open for exploring as long as their were active maintainers of the Docker image and a clear way for the Docker images to be built in an automated way.<br></p><p>For reference, right now the snapshots we provide for downloads (both Xcode and Linux) are produced by a continuous integration system we have at Apple.  For context, that continuous integration system should soon be available out in the open.  Ideally, Docker images would also be produced by the same continuous integration system as well, and aligns with what you said for #4.  It would also be important to have a way to make sure the produced Docker packages were functional.<br></p><p>If we took #4, I would imagine there are a couple of code owners for maintaining the Docker image.  They would be responsibility for curating content going into the image itself.  I would also expect them to help define the functionality of that image, and help crafting a story so that it can be maintained in an automated way.<br></p><p>More generally, there&#39;s an interesting discussion about increasing the variants of binary packages on Swift.org.  For example, before the open source launch we discussed whether or not to publish rpms, debs, etc. for Linux and settled on tar files because of their simplicity and that we hoped that, if the community interest was there, others besides the Swift team at Apple could play a role in helping provide curated packages for specific distributions.  How exactly this would work logistically will likely have different answers for different platforms.  For some it may make sense to distribute those on Swift.org, and for others to distribute them independently, possibly with a nod from the Swift.org website (option #2 and #3).<br></p><p>Ted<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dc0180c1b9aff52f5d42a1ca6bd1f184?s=50"></div><header><strong>Official Docker Image &amp; &quot;Blessing&quot;s of Community Platforms</strong> from <string>Thomas Catterall</string> &lt;me at swizzlr.co&gt;<p>January 18, 2016 at 08:00:00am</p></header><div class="content"><p>Hi Ted, all,<br></p><p>Picking this up after a few days, Haris and I have both had unusually busy weeks (job interviews on my part).<br></p><p>What I can conclude from this is that there&#39;s no active &quot;no&quot; here, and given that an official docker image is better than none, Haris and I will go ahead and work with Docker to start maintaining an official image. You know where to find us!<br></p><p>When Apple open up their CI to the world, I would love to be involved in helping set up docker infrastructure for that, and distributing snapshots as part of it.<br></p><p>Onwards to a containerised future!<br></p><p>As for the more general issue about blessing distributions, I&#39;m glad we&#39;ve had some discussion about this - I&#39;m sure it&#39;s generated some internally as well, and for now that&#39;s all I need to know. The ad hoc basis upon which other distributions are proceeding is quite suited to the low volume for now, and no formal process is necessary. I&#39;m very glad Ted approves of more involvement between the Swift project and third party maintainers, and I hope this view is shared by many more.<br></p><p>All the best, and I hope you&#39;re still having a great new year,<br></p><p>Tom<br></p><p>Sent from my iPhone<br></p><p>&gt; On 11 Jan 2016, at 22:53, Ted kremenek &lt;kremenek at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Dec 29, 2015, at 10:07 AM, Thomas Catterall via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; For the matter at hand, Haris and I would like to at the least hear &quot;go for it&quot; from the core team; better yet, we&#39;d love to have anyone from the core team/Apple who is interested in Docker/the build infrastructure to join Haris, Docker and I in creating this official repo, and serving as a representative of Apple&#39;s interests in this area.<br>&gt;&gt; <br>&gt;&gt; For the larger matter, it seems to me that the Swift Project can take a few directions:<br>&gt;&gt; 1. &quot;Knock yourselves out, but we&#39;re just making the language.&quot; In this direction, the Swift Project would disclaim official support or blessing of anything that doesn&#39;t come out of it. Occupation of a top level namespace or being the &quot;official&quot; Swift for a platform would be something for the community to sort out independently with the platform vendor.<br>&gt;&gt; 2. &quot;Knock yourselves out, here&#39;s a list of all the current efforts that we think you might be interested in&quot;<br>&gt;&gt; Not so much as blessing, still disclaiming support, but at the least acknowledging the ecosystem around Swift for other platforms besides OS X and the two Ubuntus.<br>&gt;&gt; 3. Blessing: in this direction, which I think a lot of people would like and I would prefer, the Swift project gives its blessing to projects, and links to them on its website. This has the benefit of centralising development efforts and providing an easy springboard for those who are interested in Swift and are checking the website.<br>&gt;&gt; 4. Official support: in this direction, when a project meets a certain criteria, it is folded into the main Swift project, given a repo on GitHub etc. This would probably not occur for quite a while yet, but as continuous integration improves for Swift it could make sense that the docker image might be something that is actively supported in the development of Swift if it is sufficiently popular.<br>&gt;&gt; <br>&gt;&gt; I&#39;d like to hear back from the core team about this instance of the Docker issue, but I&#39;d also like to start a conversation about community platform support and how centralising issues like this one can be handled in future.<br>&gt; <br>&gt; Hi Thomas and Harris,<br>&gt; <br>&gt; First, my apologies for the slow response.  Docker + Swift is a great combination that I&#39;d be very interested in exploring as having a more official support from the Swift.org project.<br>&gt; <br>&gt; This is something I need to discuss more with the rest of Swift Core, but what I&#39;m looking for is #3 or #4.  From my perspective, having official support for Docker would be about adding a new sibling download next to the Swift binary downloads for Xcode and Linux (Ubuntu).  It&#39;s something I think we&#39;d be open for exploring as long as their were active maintainers of the Docker image and a clear way for the Docker images to be built in an automated way.<br>&gt; <br>&gt; For reference, right now the snapshots we provide for downloads (both Xcode and Linux) are produced by a continuous integration system we have at Apple.  For context, that continuous integration system should soon be available out in the open.  Ideally, Docker images would also be produced by the same continuous integration system as well, and aligns with what you said for #4.  It would also be important to have a way to make sure the produced Docker packages were functional.<br>&gt; <br>&gt; If we took #4, I would imagine there are a couple of code owners for maintaining the Docker image.  They would be responsibility for curating content going into the image itself.  I would also expect them to help define the functionality of that image, and help crafting a story so that it can be maintained in an automated way.<br>&gt; <br>&gt; More generally, there&#39;s an interesting discussion about increasing the variants of binary packages on Swift.org.  For example, before the open source launch we discussed whether or not to publish rpms, debs, etc. for Linux and settled on tar files because of their simplicity and that we hoped that, if the community interest was there, others besides the Swift team at Apple could play a role in helping provide curated packages for specific distributions.  How exactly this would work logistically will likely have different answers for different platforms.  For some it may make sense to distribute those on Swift.org, and for others to distribute them independently, possibly with a nod from the Swift.org website (option #2 and #3).<br>&gt; <br>&gt; Ted<br>&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b6520643611a05fd040d0abcee3c883c?s=50"></div><header><strong>Official Docker Image &amp; &quot;Blessing&quot;s of Community Platforms</strong> from <string>Ted Kremenek</string> &lt;kremenek at apple.com&gt;<p>January 19, 2016 at 11:00:00pm</p></header><div class="content"><p>Hi Thomas,<br></p><p>There is an active &quot;yes&quot; here: Docker support is something we think is great for Swift.  Distributing it from Swift.org, if there was an active maintainer, seems great.<br></p><p>That said, in the general case we expect that distributing Swift will be decentralized.  For example, there are many Linux distributions, and while there will be a canonical definition of what the sources are for Swift 2.2, 3.0, etc., the core project will not be in the position to support building packages for every single Linux distribution because the differences are likely subtle changes in configuration.  What packages we distribute directly on Swift.org is something that can evolve over time, partially as we figure out what makes the most sense for the community and the project maintainers.<br></p><p>As for Docker, we expect that public CI will be up for Swift.org very soon.  Once that is in place, we can talk more about mechanizing the production of Docker packages.<br></p><p>Ted<br></p><p>&gt; On Jan 18, 2016, at 12:36 AM, Thomas Catterall &lt;me at swizzlr.co&gt; wrote:<br>&gt; <br>&gt; Hi Ted, all,<br>&gt; <br>&gt; Picking this up after a few days, Haris and I have both had unusually busy weeks (job interviews on my part).<br>&gt; <br>&gt; What I can conclude from this is that there&#39;s no active &quot;no&quot; here, and given that an official docker image is better than none, Haris and I will go ahead and work with Docker to start maintaining an official image. You know where to find us!<br>&gt; <br>&gt; When Apple open up their CI to the world, I would love to be involved in helping set up docker infrastructure for that, and distributing snapshots as part of it.<br>&gt; <br>&gt; Onwards to a containerised future!<br>&gt; <br>&gt; As for the more general issue about blessing distributions, I&#39;m glad we&#39;ve had some discussion about this - I&#39;m sure it&#39;s generated some internally as well, and for now that&#39;s all I need to know. The ad hoc basis upon which other distributions are proceeding is quite suited to the low volume for now, and no formal process is necessary. I&#39;m very glad Ted approves of more involvement between the Swift project and third party maintainers, and I hope this view is shared by many more.<br>&gt; <br>&gt; All the best, and I hope you&#39;re still having a great new year,<br>&gt; <br>&gt; Tom<br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt;&gt; On 11 Jan 2016, at 22:53, Ted kremenek &lt;kremenek at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 29, 2015, at 10:07 AM, Thomas Catterall via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; For the matter at hand, Haris and I would like to at the least hear &quot;go for it&quot; from the core team; better yet, we&#39;d love to have anyone from the core team/Apple who is interested in Docker/the build infrastructure to join Haris, Docker and I in creating this official repo, and serving as a representative of Apple&#39;s interests in this area.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; For the larger matter, it seems to me that the Swift Project can take a few directions:<br>&gt;&gt;&gt; 1. &quot;Knock yourselves out, but we&#39;re just making the language.&quot; In this direction, the Swift Project would disclaim official support or blessing of anything that doesn&#39;t come out of it. Occupation of a top level namespace or being the &quot;official&quot; Swift for a platform would be something for the community to sort out independently with the platform vendor.<br>&gt;&gt;&gt; 2. &quot;Knock yourselves out, here&#39;s a list of all the current efforts that we think you might be interested in&quot;<br>&gt;&gt;&gt; Not so much as blessing, still disclaiming support, but at the least acknowledging the ecosystem around Swift for other platforms besides OS X and the two Ubuntus.<br>&gt;&gt;&gt; 3. Blessing: in this direction, which I think a lot of people would like and I would prefer, the Swift project gives its blessing to projects, and links to them on its website. This has the benefit of centralising development efforts and providing an easy springboard for those who are interested in Swift and are checking the website.<br>&gt;&gt;&gt; 4. Official support: in this direction, when a project meets a certain criteria, it is folded into the main Swift project, given a repo on GitHub etc. This would probably not occur for quite a while yet, but as continuous integration improves for Swift it could make sense that the docker image might be something that is actively supported in the development of Swift if it is sufficiently popular.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;d like to hear back from the core team about this instance of the Docker issue, but I&#39;d also like to start a conversation about community platform support and how centralising issues like this one can be handled in future.<br>&gt;&gt; <br>&gt;&gt; Hi Thomas and Harris,<br>&gt;&gt; <br>&gt;&gt; First, my apologies for the slow response.  Docker + Swift is a great combination that I&#39;d be very interested in exploring as having a more official support from the Swift.org project.<br>&gt;&gt; <br>&gt;&gt; This is something I need to discuss more with the rest of Swift Core, but what I&#39;m looking for is #3 or #4.  From my perspective, having official support for Docker would be about adding a new sibling download next to the Swift binary downloads for Xcode and Linux (Ubuntu).  It&#39;s something I think we&#39;d be open for exploring as long as their were active maintainers of the Docker image and a clear way for the Docker images to be built in an automated way.<br>&gt;&gt; <br>&gt;&gt; For reference, right now the snapshots we provide for downloads (both Xcode and Linux) are produced by a continuous integration system we have at Apple.  For context, that continuous integration system should soon be available out in the open.  Ideally, Docker images would also be produced by the same continuous integration system as well, and aligns with what you said for #4.  It would also be important to have a way to make sure the produced Docker packages were functional.<br>&gt;&gt; <br>&gt;&gt; If we took #4, I would imagine there are a couple of code owners for maintaining the Docker image.  They would be responsibility for curating content going into the image itself.  I would also expect them to help define the functionality of that image, and help crafting a story so that it can be maintained in an automated way.<br>&gt;&gt; <br>&gt;&gt; More generally, there&#39;s an interesting discussion about increasing the variants of binary packages on Swift.org.  For example, before the open source launch we discussed whether or not to publish rpms, debs, etc. for Linux and settled on tar files because of their simplicity and that we hoped that, if the community interest was there, others besides the Swift team at Apple could play a role in helping provide curated packages for specific distributions.  How exactly this would work logistically will likely have different answers for different platforms.  For some it may make sense to distribute those on Swift.org, and for others to distribute them independently, possibly with a nod from the Swift.org website (option #2 and #3).<br>&gt;&gt; <br>&gt;&gt; Ted<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
