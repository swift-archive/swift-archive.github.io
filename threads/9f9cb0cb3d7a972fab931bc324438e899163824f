<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[SHORT Review] SE-0133: Rename `flatten()` to `joined()`</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July 25, 2016 at 01:00:00pm</p></header><div class="content"><p>on Sun Jul 24 2016, Chris Lattner &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0133: Rename `flatten()` to `joined()`&quot; begins now<br>&gt; and runs through July 26.  Apologies for the short review cycle, but<br>&gt; we’re right up against the end of source breaking changes for Swift 3.<br>&gt; The proposal is available here:<br>&gt;<br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0133-rename-flatten-to-joined.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All<br>&gt; reviews should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction of<br>&gt; Swift. When writing your review, here are some questions you might<br>&gt; want to answer in your review:<br>&gt;<br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>I&#39;m giving the overall idea a +0 and the specific proposal as currently<br>written a -1, because I think this is a much more complicated bikeshed<br>than it appears to be on the surface and the proposal doesn&#39;t begin to<br>address the issues.  Specifically, I&#39;m concerned about these points:<br></p><p>* `flatten` works on Optional&lt;Optional&lt;T&gt;&gt; and sequences of Optional&lt;T&gt;.<br>  How does it make sense to rename these operations “join?”<br></p><p>* The name and semantics of `flatten` is linked to that of `flatMap`.<br>  It&#39;s almost impossible to explain what `flatMap` does without<br>  reference to `flatten`.  Will it make sense to explain `flatMap` in<br>  terms of `joined`?<br></p><p>* `flatten` is a functional term of art in the same family as `flatMap`.<br>  We have good reasons to consider changing some of the other names in<br>  this family, such as `filter` and `reduce`, but that idea has met with<br>  significant resistance on the list.  How far should we go?  Does it<br>  make sense to make this one change alone?<br></p><p>I could be convinced to change my evaluation of the proposal if there<br>are good answers to these questions, but until then, I&#39;m not won over.<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[SHORT Review] SE-0133: Rename `flatten()` to `joined()`</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>July 25, 2016 at 01:00:00pm</p></header><div class="content"><p>On Mon, Jul 25, 2016 at 1:11 PM, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; I&#39;m giving the overall idea a +0 and the specific proposal as currently<br>&gt; written a -1, because I think this is a much more complicated bikeshed<br>&gt; than it appears to be on the surface and the proposal doesn&#39;t begin to<br>&gt; address the issues.  Specifically, I&#39;m concerned about these points:<br>&gt;<br>&gt; * `flatten` works on Optional&lt;Optional&lt;T&gt;&gt; and sequences of Optional&lt;T&gt;.<br>&gt;   How does it make sense to rename these operations “join?”<br>&gt;<br></p><p>Does it really? These don&#39;t work for me:<br></p><p>let x = [1,2,nil,4]<br>x.flatten()<br></p><p>let y = Optional(Optional(42))<br>y.flatten()<br></p><p><br></p><p>&gt; * The name and semantics of `flatten` is linked to that of `flatMap`.<br>&gt;   It&#39;s almost impossible to explain what `flatMap` does without<br>&gt;   reference to `flatten`.  Will it make sense to explain `flatMap` in<br>&gt;   terms of `joined`?<br>&gt;<br></p><p>I think the current documentation comments do a pretty good job:<br></p><p>On the [T].flatMap(T -&gt; U?) -&gt; [U] version:<br>  /// Returns an array containing the non-`nil` results of calling the given<br>  /// transformation with each element of this sequence.<br></p><p>On the [T].flatMap(T -&gt; [U]) -&gt; [U] version:<br>  /// Returns an array containing the concatenated results of calling the<br>  /// given transformation with each element of this sequence.<br></p><p>(This one also mentions array.map(transform).flatten(), which would become<br>array.map(transform).joined().)<br></p><p><br></p><p>&gt;<br>&gt; * `flatten` is a functional term of art in the same family as `flatMap`.<br>&gt;   We have good reasons to consider changing some of the other names in<br>&gt;   this family, such as `filter` and `reduce`, but that idea has met with<br>&gt;   significant resistance on the list.  How far should we go?  Does it<br>&gt;   make sense to make this one change alone?<br>&gt;<br></p><p>I wouldn&#39;t argue for renaming flatMap. I&#39;m not suggesting to change the<br>name of flatten() because I don&#39;t like it (I do); I&#39;m suggesting to change<br>it because — unlike Ruby, whose Array has #flatten and #join, but the<br>latter is *only* for producing strings — we seem to have the *same*<br>functionality behind 2 differently-named APIs.<br></p><p>(Actually I feel like flatMap is a more fundamental functional method in<br>the family of filter and reduce than flatten/joined is. flatten is just<br>flatMap({$0}), although as pointed out above, flatten isn&#39;t actually<br>available in all the places that flatMap({$0}) would work.)<br></p><p>Jacob<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160725/6db45993/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[SHORT Review] SE-0133: Rename `flatten()` to `joined()`</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July 25, 2016 at 03:00:00pm</p></header><div class="content"><p>on Mon Jul 25 2016, Jacob Bandes-Storch &lt;jtbandes-AT-gmail.com&gt; wrote:<br></p><p>&gt; On Mon, Jul 25, 2016 at 1:11 PM, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; I&#39;m giving the overall idea a +0 and the specific proposal as currently<br>&gt;&gt; written a -1, because I think this is a much more complicated bikeshed<br>&gt;&gt; than it appears to be on the surface and the proposal doesn&#39;t begin to<br>&gt;&gt; address the issues.  Specifically, I&#39;m concerned about these points:<br>&gt;&gt;<br>&gt;&gt; * `flatten` works on Optional&lt;Optional&lt;T&gt;&gt; and sequences of Optional&lt;T&gt;.<br>&gt;&gt;   How does it make sense to rename these operations “join?”<br>&gt;&gt;<br>&gt;<br>&gt; Does it really? These don&#39;t work for me:<br>&gt;<br>&gt; let x = [1,2,nil,4]<br>&gt; x.flatten()<br>&gt;<br>&gt; let y = Optional(Optional(42))<br>&gt; y.flatten()<br></p><p>Agh.  Well, hello, bug!  It&#39;s supposed to, IMO, for the same reason that<br>flatMap does.  The relationship is that <br></p><p>  x.flatten() === x.flatMap {$0}<br></p><p>So how would you document the semantics of <br></p><p>   Optional(Optional(42)).joined()<br></p><p>&gt;&gt; * The name and semantics of `flatten` is linked to that of `flatMap`.<br>&gt;&gt;   It&#39;s almost impossible to explain what `flatMap` does without<br>&gt;&gt;   reference to `flatten`.  Will it make sense to explain `flatMap` in<br>&gt;&gt;   terms of `joined`?<br>&gt;&gt;<br>&gt;<br>&gt; I think the current documentation comments do a pretty good job:<br>&gt;<br>&gt; On the [T].flatMap(T -&gt; U?) -&gt; [U] version:<br>&gt;   /// Returns an array containing the non-`nil` results of calling the given<br>&gt;   /// transformation with each element of this sequence.<br>&gt;<br>&gt; On the [T].flatMap(T -&gt; [U]) -&gt; [U] version:<br>&gt;   /// Returns an array containing the concatenated results of calling the<br>&gt;   /// given transformation with each element of this sequence.<br>&gt;<br>&gt; (This one also mentions array.map(transform).flatten(), which would become<br>&gt; array.map(transform).joined().)<br></p><p>Okay.<br></p><p>&gt;&gt; * `flatten` is a functional term of art in the same family as `flatMap`.<br>&gt;&gt;   We have good reasons to consider changing some of the other names in<br>&gt;&gt;   this family, such as `filter` and `reduce`, but that idea has met with<br>&gt;&gt;   significant resistance on the list.  How far should we go?  Does it<br>&gt;&gt;   make sense to make this one change alone?<br>&gt;<br>&gt; I wouldn&#39;t argue for renaming flatMap. I&#39;m not suggesting to change the<br>&gt; name of flatten() because I don&#39;t like it (I do); I&#39;m suggesting to change<br>&gt; it because — unlike Ruby, whose Array has #flatten and #join, but the<br>&gt; latter is *only* for producing strings — we seem to have the *same*<br>&gt; functionality behind 2 differently-named APIs.<br>&gt;<br>&gt; (Actually I feel like flatMap is a more fundamental functional method in<br>&gt; the family of filter and reduce than flatten/joined is. flatten is just<br>&gt; flatMap({$0}), <br></p><p>x.map(f) can be written as x.flatMap(Optional(f)) or even x.flatMap(f)<br>for that matter.  Does that make flatMap more fundamental than map? ;-)<br></p><p>Something roughly like this holds:<br></p><p>  flatMap = map • flatten<br>  map = flatMap • Optional<br>  flatten = flatMap • identity<br></p><p>-- <br>Dave<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[SHORT Review] SE-0133: Rename `flatten()` to `joined()`</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>July 26, 2016 at 06:00:00am</p></header><div class="content"><p>&gt; On Jul 25, 2016, at 1:11 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;m giving the overall idea a +0 and the specific proposal as currently<br>&gt; written a -1, because I think this is a much more complicated bikeshed<br>&gt; than it appears to be on the surface and the proposal doesn&#39;t begin to<br>&gt; address the issues.  Specifically, I&#39;m concerned about these points:<br>&gt; <br>&gt; * `flatten` works on Optional&lt;Optional&lt;T&gt;&gt; and sequences of Optional&lt;T&gt;.<br>&gt;  How does it make sense to rename these operations “join?”<br>&gt; <br>&gt; * The name and semantics of `flatten` is linked to that of `flatMap`.<br>&gt;  It&#39;s almost impossible to explain what `flatMap` does without<br>&gt;  reference to `flatten`.  Will it make sense to explain `flatMap` in<br>&gt;  terms of `joined`?<br>&gt; <br>&gt; * `flatten` is a functional term of art in the same family as `flatMap`.<br>&gt;  We have good reasons to consider changing some of the other names in<br>&gt;  this family, such as `filter` and `reduce`, but that idea has met with<br>&gt;  significant resistance on the list.  How far should we go?  Does it<br>&gt;  make sense to make this one change alone?<br>&gt; <br>&gt; I could be convinced to change my evaluation of the proposal if there<br>&gt; are good answers to these questions, but until then, I&#39;m not won over.<br></p><p>I&#39;m basically in agreement with Dave here. This is worth a lot more thought than we have time to put in right now, and the cost of waiting is a deprecation cycle on n+1 methods instead of n methods. Let&#39;s defer until 3.1 and have a proper think about it with a wider scope than just `flatten()`.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
