<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85f9b9a5c2d7cbaa85388ff1e0f571dc?s=50"></div><header><strong>[SR-933] Rename flatten to flattened</strong> from <string>David Rönnqvist</string> &lt;david.ronnqvist at me.com&gt;<p>April 14, 2016 at 04:00:00pm</p></header><div class="content"><p>I don’t particularly like these name changes. <br></p><p>I would even go as far as saying that these recent discussions about renaming flatten, map, filter, reduce has made me question the original Swift 3 API renaming. What I mostly like about the current (2.2) naming is that the non-mutating version is the default (for example `sort`/`sortInPlace` compared to `sorted`/`sort`). I feel that switching the default version to be the mutating variant is quite a strong statement on the languages behalf with regards to mutability vs immutability. <br></p><p>- David<br></p><p>&gt; on Sun Apr 10 2016, Arsen Gasparyan&lt;to.arsen.gasparyan-AT-gmail.com&gt;wrote:<br>&gt; <br>&gt; &gt; Ok. Is it final decision?<br>&gt; No, any API change needs to go through review on the evolution list.<br>&gt; Also, FWIW, I am not particularly keen on changing these names.<br>&gt; <br>&gt; &gt; Can I start working on it?<br>&gt; &gt; <br>&gt; &gt; On Sun, 10 Apr 2016 at 23:07, Howard Lovatt via swift-evolution<br>&gt; &gt; &lt;swift-evolution at swift.org&gt;wrote:<br>&gt; &gt; <br>&gt; &gt; Do it to them all: flatMapped, unioned, etc.<br>&gt; &gt; <br>&gt; &gt; On Monday, 11 April 2016, Dave Abrahams via swift-evolution<br>&gt; &gt; &lt;swift-evolution at swift.org&gt;wrote:<br>&gt; &gt; <br>&gt; &gt; on Fri Apr 08 2016, Brent Royal-Gordon&lt;swift-evolution at swift.org&gt;<br>&gt; &gt; wrote:<br>&gt; &gt; <br>&gt; &gt; &gt; &gt; The &#39;flatten()&#39; method didn&#39;t get the Swift 3 API renaming treatment<br>&gt; &gt; &gt; &gt; it should have, to go along with reversed, sorted, joined, etc.<br>&gt; &gt; &gt; &gt; As I see Dmitri Gribenko already agree with it but we still have to<br>&gt; &gt; &gt; &gt; discuss it here. So what do you think?<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; I&#39;m in favor.<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; Though all of these things are terms of art, not all terms of art are<br>&gt; &gt; created equal. For instance:<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; * `map` is supported by virtually any language which have any of these<br>&gt; &gt; &gt; higher-order functions, and to my knowledge the name `map` is<br>&gt; &gt; &gt; universally used.<br>&gt; &gt; &gt; * `reduce` is not quite as universally supported, but it&#39;s still very<br>&gt; &gt; &gt; common, and most (but not quite all) languages with higher-order<br>&gt; &gt; &gt; functions support it.<br>&gt; &gt; &gt; * `filter` is very widely supported, but the *name* `filter` is not<br>&gt; &gt; &gt; quite so consistent. Ruby, for instance, calls it `select`, Perl calls<br>&gt; &gt; &gt; it `grep`, etc.<br>&gt; &gt; &gt; * `takeWhile` lies on the other end of the spectrum, being very<br>&gt; &gt; narrowly supported.<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; In my opinion, it would be a really bad idea to rename `map` or<br>&gt; &gt; &gt; `reduce`; `filter` is probably a bad idea but not terrible; but we<br>&gt; &gt; &gt; should feel relatively free to rename `takeWhile`.<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; `flatten` is nowhere near as weak a term of art as `takeWhile`, but I<br>&gt; &gt; &gt; think it still falls towards that end of the spectrum. We shouldn&#39;t<br>&gt; &gt; &gt; worry too much about changing it. `map`, `reduce`, and `filter` are<br>&gt; &gt; &gt; much stronger terms, and we should be more cautious about changing<br>&gt; &gt; &gt; them.<br>&gt; &gt; <br>&gt; &gt; The problem is flatMap. The semantics of map, flatMap, and flatten are<br>&gt; &gt; inextricably linked. IMO it would be weird to do this to one or two of<br>&gt; &gt; these names and not to all of them.<br>&gt; &gt; <br>&gt; &gt; --<br>&gt; &gt; Dave<br>&gt; &gt; <br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; <br>&gt; &gt; --<br>&gt; &gt; -- Howard.<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; --<br>&gt; Dave<br>&gt; <br>&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5af07e950f10c7c1df1c44bed055c1eb?s=50"></div><header><strong>[SR-933] Rename flatten to flattened</strong> from <string>Daniel Steinberg</string> &lt;daniel at dimsumthinking.com&gt;<p>April 15, 2016 at 06:00:00am</p></header><div class="content"><p>I agree with this and add that the 2.2 naming is unambiguous. There’s no doubt what is meant by sortInPlace().<br></p><p>&gt; On Apr 14, 2016, at 9:26 AM, David Rönnqvist via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I don’t particularly like these name changes. <br>&gt; <br>&gt; I would even go as far as saying that these recent discussions about renaming flatten, map, filter, reduce has made me question the original Swift 3 API renaming. What I mostly like about the current (2.2) naming is that the non-mutating version is the default (for example `sort`/`sortInPlace` compared to `sorted`/`sort`). I feel that switching the default version to be the mutating variant is quite a strong statement on the languages behalf with regards to mutability vs immutability. <br>&gt; <br>&gt; - David<br>&gt; <br>&gt;&gt; on Sun Apr 10 2016, Arsen Gasparyan&lt;to.arsen.gasparyan-AT-gmail.com&gt;wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Ok. Is it final decision?<br>&gt;&gt; No, any API change needs to go through review on the evolution list.<br>&gt;&gt; Also, FWIW, I am not particularly keen on changing these names.<br>&gt;&gt; <br>&gt;&gt;&gt; Can I start working on it?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Sun, 10 Apr 2016 at 23:07, Howard Lovatt via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt;wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Do it to them all: flatMapped, unioned, etc.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Monday, 11 April 2016, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt;wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Fri Apr 08 2016, Brent Royal-Gordon&lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The &#39;flatten()&#39; method didn&#39;t get the Swift 3 API renaming treatment<br>&gt;&gt;&gt;&gt;&gt; it should have, to go along with reversed, sorted, joined, etc.<br>&gt;&gt;&gt;&gt;&gt; As I see Dmitri Gribenko already agree with it but we still have to<br>&gt;&gt;&gt;&gt;&gt; discuss it here. So what do you think?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;m in favor.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Though all of these things are terms of art, not all terms of art are<br>&gt;&gt;&gt; created equal. For instance:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; * `map` is supported by virtually any language which have any of these<br>&gt;&gt;&gt;&gt; higher-order functions, and to my knowledge the name `map` is<br>&gt;&gt;&gt;&gt; universally used.<br>&gt;&gt;&gt;&gt; * `reduce` is not quite as universally supported, but it&#39;s still very<br>&gt;&gt;&gt;&gt; common, and most (but not quite all) languages with higher-order<br>&gt;&gt;&gt;&gt; functions support it.<br>&gt;&gt;&gt;&gt; * `filter` is very widely supported, but the *name* `filter` is not<br>&gt;&gt;&gt;&gt; quite so consistent. Ruby, for instance, calls it `select`, Perl calls<br>&gt;&gt;&gt;&gt; it `grep`, etc.<br>&gt;&gt;&gt;&gt; * `takeWhile` lies on the other end of the spectrum, being very<br>&gt;&gt;&gt; narrowly supported.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; In my opinion, it would be a really bad idea to rename `map` or<br>&gt;&gt;&gt;&gt; `reduce`; `filter` is probably a bad idea but not terrible; but we<br>&gt;&gt;&gt;&gt; should feel relatively free to rename `takeWhile`.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; `flatten` is nowhere near as weak a term of art as `takeWhile`, but I<br>&gt;&gt;&gt;&gt; think it still falls towards that end of the spectrum. We shouldn&#39;t<br>&gt;&gt;&gt;&gt; worry too much about changing it. `map`, `reduce`, and `filter` are<br>&gt;&gt;&gt;&gt; much stronger terms, and we should be more cautious about changing<br>&gt;&gt;&gt;&gt; them.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The problem is flatMap. The semantics of map, flatMap, and flatten are<br>&gt;&gt;&gt; inextricably linked. IMO it would be weird to do this to one or two of<br>&gt;&gt;&gt; these names and not to all of them.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; Dave<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; -- Howard.<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; --<br>&gt;&gt; Dave<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[SR-933] Rename flatten to flattened</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>April 19, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On 19 Apr 2016, at 10:40, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; Totally agree with Brent, too. And I wouldn&#39;t rename flatten either.<br>&gt; <br>&gt; A brief postscript on terms of art:<br>&gt; <br>&gt; I wrote my first Python this week. I was very glad that `map` was named `map`. I just had to glance at the docs to see whether it was a function or a method and which argument came first. It took less time and involved less doubt than learning their closure syntax did.<br></p><p>Are you suggesting that if it had been named “mapped” or “mapping” that you would have been unable to find it? Any decent search engine and/or auto-complete should get you to the correct function just as quickly, again, I don’t think anyone is suggesting that these functions be radically renamed, just that their tense be altered to match the new naming convention, which doesn’t change the root word from which they are derived.<br></p><p>&gt; On 15 Apr 2016, at 12:49, Daniel Steinberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I agree with this and add that the 2.2 naming is unambiguous. There’s no doubt what is meant by sortInPlace().<br></p><p>I’m normally in favour of more explicit meaning rather than less, but this where Swift’s type system and the @warn_unused_result attribute come into play to eliminate the need for it:<br></p><p>	myCollection.sorted()			// Warning, unused result<br>	let sorted = myCollectioned.sort()	// Void return type<br></p><p>A more explicit term is only needed for functions where there is ambiguity in how they are used IMO, i.e- if a function is both mutating and has a return type. The fact that .sort() doesn’t return anything does a pretty good job of clarifying what it does.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160419/1cca7172/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[SR-933] Rename flatten to flattened</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>April 19, 2016 at 09:00:00am</p></header><div class="content"><p>&gt;&gt; I wrote my first Python this week. I was very glad that `map` was named `map`. I just had to glance at the docs to see whether it was a function or a method and which argument came first. It took less time and involved less doubt than learning their closure syntax did.<br>&gt; <br>&gt; Are you suggesting that if it had been named “mapped” or “mapping” that you would have been unable to find it? Any decent search engine and/or auto-complete should get you to the correct function just as quickly, again, I don’t think anyone is suggesting that these functions be radically renamed, just that their tense be altered to match the new naming convention, which doesn’t change the root word from which they are derived.<br></p><p>I&#39;m suggesting that if it had been named `mapped` or (especially) `mapping`, I would have been a lot less certain I was looking at the list function and not a type or method that was unrelated to the traditional `map`. I probably would have still found it, but I wouldn&#39;t have been immediately sure it was right. <br></p><p>Sent from my iPad<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160419/8626c066/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[SR-933] Rename flatten to flattened</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>April 19, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On 19 Apr 2016, at 17:19, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; I wrote my first Python this week. I was very glad that `map` was named `map`. I just had to glance at the docs to see whether it was a function or a method and which argument came first. It took less time and involved less doubt than learning their closure syntax did.<br>&gt;&gt; <br>&gt;&gt; Are you suggesting that if it had been named “mapped” or “mapping” that you would have been unable to find it? Any decent search engine and/or auto-complete should get you to the correct function just as quickly, again, I don’t think anyone is suggesting that these functions be radically renamed, just that their tense be altered to match the new naming convention, which doesn’t change the root word from which they are derived.<br>&gt; <br>&gt; I&#39;m suggesting that if it had been named `mapped` or (especially) `mapping`, I would have been a lot less certain I was looking at the list function and not a type or method that was unrelated to the traditional `map`. I probably would have still found it, but I wouldn&#39;t have been immediately sure it was right.<br></p><p>If we’re assuming you’re totally new to Swift and the first thing you do is go looking for a map function, then you’d still need to double check exactly what you’re doing anyway (how to write the closure etc.) so I’m not sure a few extra letters is going to make a meaningful difference in speed as you’ll be double checking documentation anyway to be sure you use the function correctly.<br></p><p>Meanwhile if you’ve been through a few Swift tutorials or whatever with the current API guidelines adhered to, then you should be used to, or at least aware of, the form for mutating vs non-mutating method names, so seeing mapped shouldn&#39;t cause much pause either.<br></p><p>I just don’t think it can possibly have a meaningful impact on time; it’s not as if developers are going to be off wandering the streets with their whole world turned upside-down, unable to figure out what to do with themselves because they’re suddenly unable to find a map method, only some bewildering, alien method named “mapped” that could be anything.<br></p><p>I’ll grant that switching to mapped is relatively minor, but if everything else is named following one set of rules I think a better case needs to be made for why some functions should have their own set of rules, especially if it amounts to “that’s what others call it”, in particular if those others call it that because that’s what others call it and so-on ;)<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160419/b867d603/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
