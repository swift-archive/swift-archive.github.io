<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>When to use argument labels (a new approach)</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February  3, 2016 at 03:00:00pm</p></header><div class="content"><p>on Wed Feb 03 2016, Charles Kissinger &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Feb 3, 2016, at 2:06 PM, Dave Abrahams via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; <br>&gt;&gt;&gt; The “sentence” requirement of Rule 1 doesn’t seem to be met here, but<br>&gt;&gt;&gt; the “primary semantics” part would still apply?<br>&gt;&gt; <br>&gt;&gt; I don&#39;t know what you mean; AFAICT, both parts apply; you have to apply<br>&gt;&gt; them together.  You omit the argument label if and only if you can<br>&gt;&gt; describe the primary semantics with a complete sentence starting in the<br>&gt;&gt; base name and ending in the first argument.  The primary semantics of<br>&gt;&gt; the method don&#39;t end with the mediaType: the genre is as much part of<br>&gt;&gt; the primary semantics, so we use an argument label.<br>&gt;<br>&gt; What I was getting at there is that<br>&gt; ‘a.tracksHavingMediaTypeWaxCylinder’ doesn’t seem like a sentence to<br>&gt; me. It is a clause, no doubt, but doesn’t seem to be an independent<br>&gt; one. <br></p><p>Agh, you&#39;re right.  If only we used verbs in these cases... but that is<br>a whole nother discussion.  I guess I&#39;ll have to say &quot;clause&quot; instead of<br>&quot;sentence,&quot; which really sucks.  Or I can say there&#39;s an implied &quot;get&quot;<br>at the front if there&#39;s no verb.  bleah.<br></p><p>&gt; It was unclear to me whether it didn’t fit the Rule 1 criteria for<br>&gt; that reason, but Rule 2 was specifically including it, or whether I<br>&gt; just wasn’t seeing the “sentence-like” nature of it.<br>&gt;<br>&gt; —CK<br>&gt;<br>&gt;&gt; <br>&gt;&gt;&gt; —CK<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 2, 2016, at 4:32 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This thread is related to the review of new API guidelines, but it&#39;s not<br>&gt;&gt;&gt;&gt; a review thread; it&#39;s exploratory.  The goal is to come up with<br>&gt;&gt;&gt;&gt; guidelines that:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; * describe when and where to use argument labels<br>&gt;&gt;&gt;&gt; * require labels in many of the cases people have asked for them<br>&gt;&gt;&gt;&gt; * are understandable by humans<br>&gt;&gt;&gt;&gt; * preserve important semantics communicated by existing APIs.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Here&#39;s what I&#39;m thinking<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 1. If and only if the first argument could complete a sentence*<br>&gt;&gt;&gt;&gt;  beginning in the base name and describing the primary semantics of<br>&gt;&gt;&gt;&gt;  the call, it gets no argument label:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;    a.contains(b)  // b completes the phrase &quot;a contains b&quot;<br>&gt;&gt;&gt;&gt;    a.mergeWith(b) // b completes the phrase &quot;merge with b&quot;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;    a.dismiss(animated: b) // &quot;a, dismiss b&quot; is a sentence but <br>&gt;&gt;&gt;&gt;                           // doesn&#39;t describe the semantics at all, <br>&gt;&gt;&gt;&gt;                           // thus we add a label for b.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;    a.moveTo(x: 300, y: 400) // &quot;a, move to 300&quot; is a sentence <br>&gt;&gt;&gt;&gt;                             // but doesn&#39;t describe the primary <br>&gt;&gt;&gt;&gt;                             // semantics, which are to move in both<br>&gt;&gt;&gt;&gt;                             // x and y.  Thus, x gets a label.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;    a.readFrom(u, ofType: b) // &quot;a, read from u&quot; describes<br>&gt;&gt;&gt;&gt;                             // the primary semantics, so u gets no<br>&gt;&gt;&gt;&gt;                             // label. b is an<br>&gt;&gt;&gt;&gt;                             // option that tunes the primary<br>&gt;&gt;&gt;&gt;                             // semantics<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  [Note that this covers all the direct object cases and, I believe,<br>&gt;&gt;&gt;&gt;  all the default argument cases too, so maybe that exception can be<br>&gt;&gt;&gt;&gt;  dropped.  We still need the exceptions for full-width type<br>&gt;&gt;&gt;&gt;  conversions and indistinguishable peers]<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  Note: when there is a noun in the base name describing the role of the<br>&gt;&gt;&gt;&gt;  first argument, we skip it in considering this criterion:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     a.addObserver(b) // &quot;a, add b&quot; completes a sentence describing <br>&gt;&gt;&gt;&gt;                      // the semantics.  &quot;Observer&quot; is omitted in <br>&gt;&gt;&gt;&gt;                      // making this determination.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; * We could say &quot;clause&quot; here but I think making it an *independent*<br>&gt;&gt;&gt;&gt; clause doesn&#39;t rule out any important use-cases (see<br>&gt;&gt;&gt;&gt; https://web.cn.edu/kwheeler/gram_clauses_n_phrases.html) and at that<br>&gt;&gt;&gt;&gt; point, you might as well say &quot;sentence,&quot; which is a more<br>&gt;&gt;&gt;&gt; universally-understood term.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 2. Words that describe attributes of an *already-existing* instance<br>&gt;&gt;&gt;&gt;  should go in the base name rather than in a label:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     a.tracksHavingMediaType(&quot;Wax Cylinder&quot;)      // yes<br>&gt;&gt;&gt;&gt;     a.removeFirstTrackHavingMediaType(&quot;BetaMax&quot;) // yes<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     a.tracks(mediaType: &quot;Wax Cylinder&quot;)          // no<br>&gt;&gt;&gt;&gt;     a.removeFirstTrack(havingMediaType: &quot;BetaMax&quot;) // no<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  [yes, we could use &quot;With&quot; instead of &quot;Having&quot;, but it&#39;s more<br>&gt;&gt;&gt;&gt;  ambiguous]<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  Words that describe attributes of an instance *to be created* should<br>&gt;&gt;&gt;&gt;  go in argument labels, rather than the base name (for parity with<br>&gt;&gt;&gt;&gt;  initializers):<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     AudioTrack(mediaType: &quot;BetaMax&quot;)                   // initializer<br>&gt;&gt;&gt;&gt;     trackFactory.newTrack(mediaType: &quot;Wax Cylinder&quot;)   // yes<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     trackFactory.newTrackWithMediaType(&quot;Wax Cylinder&quot;) // no<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 3. (this one is separable) When the first argument is the *name* or<br>&gt;&gt;&gt;&gt;  *identifier* of the subject in the base name, do not label it or<br>&gt;&gt;&gt;&gt;  describe it in the base name.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     a.transitionToScene(.GreatHall)               // yes<br>&gt;&gt;&gt;&gt;     a.transitionToSceneWithIdentifier(.GreatHall) // no<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     let p = someFont.glyph(&quot;propellor&quot;)           // yes<br>&gt;&gt;&gt;&gt;     let p = someFont.glyphWithName(&quot;propellor&quot;)   // no<br>&gt;&gt;&gt;&gt;     let p = someFont.glyph(name: &quot;propellor&quot;)     // no<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thoughts?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; -Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0089229ece6e648767cff4dc6c6d38ab?s=50"></div><header><strong>When to use argument labels (a new approach)</strong> from <string>Charles Kissinger</string> &lt;crk at akkyra.com&gt;<p>February  4, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Feb 3, 2016, at 3:54 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Wed Feb 03 2016, Charles Kissinger &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br></p><p>&gt;&gt; What I was getting at there is that<br>&gt;&gt; ‘a.tracksHavingMediaTypeWaxCylinder’ doesn’t seem like a sentence to<br>&gt;&gt; me. It is a clause, no doubt, but doesn’t seem to be an independent<br>&gt;&gt; one. <br>&gt; <br>&gt; Agh, you&#39;re right.  If only we used verbs in these cases... but that is<br>&gt; a whole nother discussion.  I guess I&#39;ll have to say &quot;clause&quot; instead of<br>&gt; &quot;sentence,&quot; which really sucks.  Or I can say there&#39;s an implied &quot;get&quot;<br>&gt; at the front if there&#39;s no verb.  bleah.<br></p><p>The implied ‘get&#39; approach doesn’t seem too bad to me. Would it suffice to stick with ‘sentence&#39; and add the condition that if there is an implied ‘get&#39; or ‘set&#39; that would form a sentence, then Rule 1 still applies?<br></p><p>I can’t think of any cases where people use an implied verb other than something in the &#39;get&#39; family (find, acquire, etc.). Looking through my own code, the very concise set of rules in your original post work perfectly (IMO) with the exception of the “missing get” problem.<br></p><p>—CK<br></p><p>&gt; <br>&gt;&gt; It was unclear to me whether it didn’t fit the Rule 1 criteria for<br>&gt;&gt; that reason, but Rule 2 was specifically including it, or whether I<br>&gt;&gt; just wasn’t seeing the “sentence-like” nature of it.<br>&gt;&gt; <br>&gt;&gt; —CK<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; —CK<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Feb 2, 2016, at 4:32 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; This thread is related to the review of new API guidelines, but it&#39;s not<br>&gt;&gt;&gt;&gt;&gt; a review thread; it&#39;s exploratory.  The goal is to come up with<br>&gt;&gt;&gt;&gt;&gt; guidelines that:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; * describe when and where to use argument labels<br>&gt;&gt;&gt;&gt;&gt; * require labels in many of the cases people have asked for them<br>&gt;&gt;&gt;&gt;&gt; * are understandable by humans<br>&gt;&gt;&gt;&gt;&gt; * preserve important semantics communicated by existing APIs.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Here&#39;s what I&#39;m thinking<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 1. If and only if the first argument could complete a sentence*<br>&gt;&gt;&gt;&gt;&gt; beginning in the base name and describing the primary semantics of<br>&gt;&gt;&gt;&gt;&gt; the call, it gets no argument label:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;   a.contains(b)  // b completes the phrase &quot;a contains b&quot;<br>&gt;&gt;&gt;&gt;&gt;   a.mergeWith(b) // b completes the phrase &quot;merge with b&quot;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;   a.dismiss(animated: b) // &quot;a, dismiss b&quot; is a sentence but <br>&gt;&gt;&gt;&gt;&gt;                          // doesn&#39;t describe the semantics at all, <br>&gt;&gt;&gt;&gt;&gt;                          // thus we add a label for b.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;   a.moveTo(x: 300, y: 400) // &quot;a, move to 300&quot; is a sentence <br>&gt;&gt;&gt;&gt;&gt;                            // but doesn&#39;t describe the primary <br>&gt;&gt;&gt;&gt;&gt;                            // semantics, which are to move in both<br>&gt;&gt;&gt;&gt;&gt;                            // x and y.  Thus, x gets a label.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;   a.readFrom(u, ofType: b) // &quot;a, read from u&quot; describes<br>&gt;&gt;&gt;&gt;&gt;                            // the primary semantics, so u gets no<br>&gt;&gt;&gt;&gt;&gt;                            // label. b is an<br>&gt;&gt;&gt;&gt;&gt;                            // option that tunes the primary<br>&gt;&gt;&gt;&gt;&gt;                            // semantics<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; [Note that this covers all the direct object cases and, I believe,<br>&gt;&gt;&gt;&gt;&gt; all the default argument cases too, so maybe that exception can be<br>&gt;&gt;&gt;&gt;&gt; dropped.  We still need the exceptions for full-width type<br>&gt;&gt;&gt;&gt;&gt; conversions and indistinguishable peers]<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Note: when there is a noun in the base name describing the role of the<br>&gt;&gt;&gt;&gt;&gt; first argument, we skip it in considering this criterion:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;    a.addObserver(b) // &quot;a, add b&quot; completes a sentence describing <br>&gt;&gt;&gt;&gt;&gt;                     // the semantics.  &quot;Observer&quot; is omitted in <br>&gt;&gt;&gt;&gt;&gt;                     // making this determination.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; * We could say &quot;clause&quot; here but I think making it an *independent*<br>&gt;&gt;&gt;&gt;&gt; clause doesn&#39;t rule out any important use-cases (see<br>&gt;&gt;&gt;&gt;&gt; https://web.cn.edu/kwheeler/gram_clauses_n_phrases.html) and at that<br>&gt;&gt;&gt;&gt;&gt; point, you might as well say &quot;sentence,&quot; which is a more<br>&gt;&gt;&gt;&gt;&gt; universally-understood term.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 2. Words that describe attributes of an *already-existing* instance<br>&gt;&gt;&gt;&gt;&gt; should go in the base name rather than in a label:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;    a.tracksHavingMediaType(&quot;Wax Cylinder&quot;)      // yes<br>&gt;&gt;&gt;&gt;&gt;    a.removeFirstTrackHavingMediaType(&quot;BetaMax&quot;) // yes<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;    a.tracks(mediaType: &quot;Wax Cylinder&quot;)          // no<br>&gt;&gt;&gt;&gt;&gt;    a.removeFirstTrack(havingMediaType: &quot;BetaMax&quot;) // no<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; [yes, we could use &quot;With&quot; instead of &quot;Having&quot;, but it&#39;s more<br>&gt;&gt;&gt;&gt;&gt; ambiguous]<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Words that describe attributes of an instance *to be created* should<br>&gt;&gt;&gt;&gt;&gt; go in argument labels, rather than the base name (for parity with<br>&gt;&gt;&gt;&gt;&gt; initializers):<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;    AudioTrack(mediaType: &quot;BetaMax&quot;)                   // initializer<br>&gt;&gt;&gt;&gt;&gt;    trackFactory.newTrack(mediaType: &quot;Wax Cylinder&quot;)   // yes<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;    trackFactory.newTrackWithMediaType(&quot;Wax Cylinder&quot;) // no<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 3. (this one is separable) When the first argument is the *name* or<br>&gt;&gt;&gt;&gt;&gt; *identifier* of the subject in the base name, do not label it or<br>&gt;&gt;&gt;&gt;&gt; describe it in the base name.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;    a.transitionToScene(.GreatHall)               // yes<br>&gt;&gt;&gt;&gt;&gt;    a.transitionToSceneWithIdentifier(.GreatHall) // no<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;    let p = someFont.glyph(&quot;propellor&quot;)           // yes<br>&gt;&gt;&gt;&gt;&gt;    let p = someFont.glyphWithName(&quot;propellor&quot;)   // no<br>&gt;&gt;&gt;&gt;&gt;    let p = someFont.glyph(name: &quot;propellor&quot;)     // no<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Thoughts?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>When to use argument labels (a new approach)</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February  4, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Feb 4, 2016, at 10:06 AM, Charles Kissinger &lt;crk at akkyra.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Feb 3, 2016, at 3:54 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Wed Feb 03 2016, Charles Kissinger &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt; <br>&gt;&gt;&gt; What I was getting at there is that<br>&gt;&gt;&gt; ‘a.tracksHavingMediaTypeWaxCylinder’ doesn’t seem like a sentence to<br>&gt;&gt;&gt; me. It is a clause, no doubt, but doesn’t seem to be an independent<br>&gt;&gt;&gt; one. <br>&gt;&gt; <br>&gt;&gt; Agh, you&#39;re right.  If only we used verbs in these cases... but that is<br>&gt;&gt; a whole nother discussion.  I guess I&#39;ll have to say &quot;clause&quot; instead of<br>&gt;&gt; &quot;sentence,&quot; which really sucks.  Or I can say there&#39;s an implied &quot;get&quot;<br>&gt;&gt; at the front if there&#39;s no verb.  bleah.<br>&gt; <br>&gt; The implied ‘get&#39; approach doesn’t seem too bad to me. Would it suffice to stick with ‘sentence&#39; and add the condition that if there is an implied ‘get&#39; or ‘set&#39; that would form a sentence, then Rule 1 still applies?<br></p><p>That&#39;s roughly what I was suggesting we might do.  But is there such a thing as an implied &quot;set?&quot;  I don&#39;t think so.  Why bring that into it?<br></p><p>&gt; I can’t think of any cases where people use an implied verb other than something in the &#39;get&#39; family (find, acquire, etc.). Looking through my own code, the very concise set of rules in your original post work perfectly (IMO) with the exception of the “missing get” problem.<br></p><p>Thanks; nice to hear not *everybody* thinks they need to be completely reworked for reasons that I can&#39;t yet understand ;-)<br></p><p>Cheers,<br>-Dave<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
