<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6b666f0cc8e0679c198e9dfba1a6b009?s=50"></div><header><strong>Swift Package Manager and Git submodules</strong> from <string>Anton Bronnikov</string> &lt;anton.bronnikov at me.com&gt;<p>October 28, 2016 at 10:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>I have a question whether what I observe is by-design, a bug, or not yet fully implemented feature in Swift Package Manager.<br></p><p>- Let’s say, I have a C repository with some library, and it has two versions tagged, namely 0.0.1 and 0.0.2.<br>- Then I have a Swift repository that includes the above as a submodule, provides necessary files and exports C functionality into Swift.  This one also has two versions tagged, 0.0.1 and 0.0.2, each matching corresponding version within C repository.<br>- Finally, I have an application in Swift, that uses the wrapper package as a dependency and specifies 0.0.1 as the desired version.<br></p><p>Normally, I would expect that `swift build` would have PM to check out 0.0.1/0.0.1 versions of the repositories (SwiftWrapper/CLibrary).  However, in fact what I get is 0.0.1/0.0.2 (in other words, I get the right - older - version of the wrapper package, but wrong - new - version of the C submodule).<br></p><p>The use case is to “escort” a C library that is being continuously developed and used as such (e.g. in Linux community) with its Swift bridge without having to copy-paste the sources from the original repo into the mirror (so that the Swift wrapper would only provide the Package.swift, public header file, and possible a modulemap).<br></p><p>If there are other (better) way to do this, I will be glad to hear.<br></p><p>Thanks for the help.<br>Cheers,<br>Anton<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Swift Package Manager and Git submodules</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>October 28, 2016 at 03:00:00pm</p></header><div class="content"><p>This sounds like a bug to me, I suspect that the current code isn&#39;t causing the submodule to update appropriately.<br></p><p>If you have a working example, can you try using the latest OSS snapshot from swift.org, and running:<br>  swift package reset<br>  swift build --enable-new-resolver<br>and seeing if you get the behavior you expect?<br></p><p> - Daniel<br></p><p>&gt; On Oct 28, 2016, at 1:53 PM, Anton Bronnikov via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; I have a question whether what I observe is by-design, a bug, or not yet fully implemented feature in Swift Package Manager.<br>&gt; <br>&gt; - Let’s say, I have a C repository with some library, and it has two versions tagged, namely 0.0.1 and 0.0.2.<br>&gt; - Then I have a Swift repository that includes the above as a submodule, provides necessary files and exports C functionality into Swift.  This one also has two versions tagged, 0.0.1 and 0.0.2, each matching corresponding version within C repository.<br>&gt; - Finally, I have an application in Swift, that uses the wrapper package as a dependency and specifies 0.0.1 as the desired version.<br>&gt; <br>&gt; Normally, I would expect that `swift build` would have PM to check out 0.0.1/0.0.1 versions of the repositories (SwiftWrapper/CLibrary).  However, in fact what I get is 0.0.1/0.0.2 (in other words, I get the right - older - version of the wrapper package, but wrong - new - version of the C submodule).<br>&gt; <br>&gt; The use case is to “escort” a C library that is being continuously developed and used as such (e.g. in Linux community) with its Swift bridge without having to copy-paste the sources from the original repo into the mirror (so that the Swift wrapper would only provide the Package.swift, public header file, and possible a modulemap).<br>&gt; <br>&gt; If there are other (better) way to do this, I will be glad to hear.<br>&gt; <br>&gt; Thanks for the help.<br>&gt; Cheers,<br>&gt; Anton<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6b666f0cc8e0679c198e9dfba1a6b009?s=50"></div><header><strong>Swift Package Manager and Git submodules</strong> from <string>Anton Bronnikov</string> &lt;anton.bronnikov at me.com&gt;<p>October 29, 2016 at 04:00:00pm</p></header><div class="content"><p>Thanks, Daniel.<br></p><p>Yes, on Oct-27 snapshot `Swift version 3.0-dev (LLVM b52fce3ab4, Clang 4edf31e82f, Swift bf2de4a41c)` if I build with `swift build --enable-new-resolver` then I do get the expected behaviour.  Building with usual `swift build` gets me an old - wrong - one.<br></p><p>It’s an experimental feature at the moment, right (e.g. I can not invoke `swift package fetch --enable-new-resolver`).  Will it be in 3.1?<br></p><p>Thank you.<br>Cheers,<br>Anton<br></p><p>&gt; On 29 Oct 2016, at 00:18, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt; wrote:<br>&gt; <br>&gt; This sounds like a bug to me, I suspect that the current code isn&#39;t causing the submodule to update appropriately.<br>&gt; <br>&gt; If you have a working example, can you try using the latest OSS snapshot from swift.org, and running:<br>&gt;  swift package reset<br>&gt;  swift build --enable-new-resolver<br>&gt; and seeing if you get the behavior you expect?<br>&gt; <br>&gt; - Daniel<br>&gt; <br>&gt;&gt; On Oct 28, 2016, at 1:53 PM, Anton Bronnikov via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi,<br>&gt;&gt; <br>&gt;&gt; I have a question whether what I observe is by-design, a bug, or not yet fully implemented feature in Swift Package Manager.<br>&gt;&gt; <br>&gt;&gt; - Let’s say, I have a C repository with some library, and it has two versions tagged, namely 0.0.1 and 0.0.2.<br>&gt;&gt; - Then I have a Swift repository that includes the above as a submodule, provides necessary files and exports C functionality into Swift.  This one also has two versions tagged, 0.0.1 and 0.0.2, each matching corresponding version within C repository.<br>&gt;&gt; - Finally, I have an application in Swift, that uses the wrapper package as a dependency and specifies 0.0.1 as the desired version.<br>&gt;&gt; <br>&gt;&gt; Normally, I would expect that `swift build` would have PM to check out 0.0.1/0.0.1 versions of the repositories (SwiftWrapper/CLibrary).  However, in fact what I get is 0.0.1/0.0.2 (in other words, I get the right - older - version of the wrapper package, but wrong - new - version of the C submodule).<br>&gt;&gt; <br>&gt;&gt; The use case is to “escort” a C library that is being continuously developed and used as such (e.g. in Linux community) with its Swift bridge without having to copy-paste the sources from the original repo into the mirror (so that the Swift wrapper would only provide the Package.swift, public header file, and possible a modulemap).<br>&gt;&gt; <br>&gt;&gt; If there are other (better) way to do this, I will be glad to hear.<br>&gt;&gt; <br>&gt;&gt; Thanks for the help.<br>&gt;&gt; Cheers,<br>&gt;&gt; Anton<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Swift Package Manager and Git submodules</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>October 30, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Oct 29, 2016, at 7:22 AM, Anton Bronnikov &lt;anton.bronnikov at me.com&gt; wrote:<br>&gt; <br>&gt; Thanks, Daniel.<br>&gt; <br>&gt; Yes, on Oct-27 snapshot `Swift version 3.0-dev (LLVM b52fce3ab4, Clang 4edf31e82f, Swift bf2de4a41c)` if I build with `swift build --enable-new-resolver` then I do get the expected behaviour.  Building with usual `swift build` gets me an old - wrong - one.<br>&gt; <br>&gt; It’s an experimental feature at the moment, right (e.g. I can not invoke `swift package fetch --enable-new-resolver`).<br></p><p>You should be able to use it almost everywhere, but yes it isn&#39;t on by default because there are a couple pieces not done.<br></p><p>&gt;  Will it be in 3.1?<br></p><p>We are working to switch over to it ASAP, but I don&#39;t know exactly when that will happen. I hope w/in a month or two.<br></p><p> - Daniel<br></p><p>&gt; <br>&gt; Thank you.<br>&gt; Cheers,<br>&gt; Anton<br>&gt; <br>&gt;&gt; On 29 Oct 2016, at 00:18, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; This sounds like a bug to me, I suspect that the current code isn&#39;t causing the submodule to update appropriately.<br>&gt;&gt; <br>&gt;&gt; If you have a working example, can you try using the latest OSS snapshot from swift.org, and running:<br>&gt;&gt; swift package reset<br>&gt;&gt; swift build --enable-new-resolver<br>&gt;&gt; and seeing if you get the behavior you expect?<br>&gt;&gt; <br>&gt;&gt; - Daniel<br>&gt;&gt; <br>&gt;&gt;&gt; On Oct 28, 2016, at 1:53 PM, Anton Bronnikov via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I have a question whether what I observe is by-design, a bug, or not yet fully implemented feature in Swift Package Manager.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Let’s say, I have a C repository with some library, and it has two versions tagged, namely 0.0.1 and 0.0.2.<br>&gt;&gt;&gt; - Then I have a Swift repository that includes the above as a submodule, provides necessary files and exports C functionality into Swift.  This one also has two versions tagged, 0.0.1 and 0.0.2, each matching corresponding version within C repository.<br>&gt;&gt;&gt; - Finally, I have an application in Swift, that uses the wrapper package as a dependency and specifies 0.0.1 as the desired version.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Normally, I would expect that `swift build` would have PM to check out 0.0.1/0.0.1 versions of the repositories (SwiftWrapper/CLibrary).  However, in fact what I get is 0.0.1/0.0.2 (in other words, I get the right - older - version of the wrapper package, but wrong - new - version of the C submodule).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The use case is to “escort” a C library that is being continuously developed and used as such (e.g. in Linux community) with its Swift bridge without having to copy-paste the sources from the original repo into the mirror (so that the Swift wrapper would only provide the Package.swift, public header file, and possible a modulemap).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If there are other (better) way to do this, I will be glad to hear.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks for the help.<br>&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt; Anton<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt; <br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
