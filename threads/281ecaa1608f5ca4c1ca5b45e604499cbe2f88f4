<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>ASCIIString</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>December 13, 2015 at 01:00:00pm</p></header><div class="content"><p>StaticString provides an &quot;isASCII&quot; boolean property, but manipulating<br>strings still requires the use of UnicodeScalarView / CharacterView, even<br>if the strings are statically known to be ASCII-only.<br></p><p>I think it would be nice to have an ASCIIString in the standard library,<br>similar to StaticString but with the following improvements:<br></p><p>- ASCIIString itself would be MutableCollectionType, with Index == Int for<br>easy access.<br></p><p>- Its Generator.Element would be something which works with simple + and -<br>operators (either UInt8, or perhaps a repurposed UnicodeScalar, or a new<br>ASCIIScalar).<br></p><p>- The ability to create new ASCIIStrings at runtime, by appending/removing<br>bytes, or by concatenating other ASCIIStrings.<br></p><p>Would anyone else find this useful?<br></p><p>Jacob Bandes-Storch<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/281e88f4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ecdb231117dda838340bfcbb8873d28e?s=50"></div><header><strong>ASCIIString</strong> from <string>Paul Cantrell</string> &lt;cantrell at pobox.com&gt;<p>December 13, 2015 at 04:00:00pm</p></header><div class="content"><p>I hit a related problem here:<br></p><p>https://github.com/bustoutsolutions/siesta/blob/master/Source/Resource.swift#L427 &lt;https://github.com/bustoutsolutions/siesta/blob/master/Source/Resource.swift#L427&gt;<br></p><p>I know I have an ASCII-only string because I’ve just applied escaping, but still have to force-unwrap the result of dataUsingEncoding(NSASCIIStringEncoding). Annoying!<br></p><p>However, I’m not sure that a new type would be a good way to solve this. A string may have many attributes that make it suitable or unsuitable for use in different situations: single line, valid identifier in a given language, no surrogate chars, no spaces … plus, of course, “valid in encoding X” for every encoding.<br></p><p>Handling these cases via the type system would result in a combinatorial explosion of API methods like dataUsingEncoding.<br></p><p>IMO, this is a perfect example of where force unwrapping is the right tool: I’m able to make guarantees about the correctness of the code that the compiler can’t verify. I’m OK with that.<br></p><p>• • •<br></p><p>If there’s a compelling use case for ASCIIString, it’s performance. In that case, I wonder whether:<br></p><p>• perhaps this would better be implemented as a set of extension methods on [UInt8] that do string-like things, instead of being a separate type, and<br></p><p>• perhaps String could — or already does — provide internal optimizations when the string is internally representable as single-byte chars.<br></p><p>Cheers, P<br></p><p><br>&gt; On Dec 13, 2015, at 3:47 PM, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; StaticString provides an &quot;isASCII&quot; boolean property, but manipulating strings still requires the use of UnicodeScalarView / CharacterView, even if the strings are statically known to be ASCII-only.<br>&gt; <br>&gt; I think it would be nice to have an ASCIIString in the standard library, similar to StaticString but with the following improvements:<br>&gt; <br>&gt; - ASCIIString itself would be MutableCollectionType, with Index == Int for easy access.<br>&gt; <br>&gt; - Its Generator.Element would be something which works with simple + and - operators (either UInt8, or perhaps a repurposed UnicodeScalar, or a new ASCIIScalar).<br>&gt; <br>&gt; - The ability to create new ASCIIStrings at runtime, by appending/removing bytes, or by concatenating other ASCIIStrings.<br>&gt; <br>&gt; Would anyone else find this useful?<br>&gt; <br>&gt; Jacob Bandes-Storch<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/efc969b4/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>ASCIIString</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>December 13, 2015 at 02:00:00pm</p></header><div class="content"><p>Pragmatically, I would love this. I&#39;ve run into use cases before where a sequence of ASCII characters would have sufficed, and the additional complexity of the Unicode model is unnecessary and undesired.<br></p><p>On a philosophical level, I think there&#39;s a discussion to be had as to whether the language/stdlib is the right place to delineate subsets of Unicode for programmer use, and whether or not having ASCIIString will encourage lazy programmers to avoid Unicode support altogether and/or &#39;misuse&#39; this type as a means of storing raw bytes. <br></p><p>Personally, I&#39;m +1 but I think we should carefully consider the ramifications.<br></p><p>Best,<br>Austin<br></p><p>&gt; On Dec 13, 2015, at 1:47 PM, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; StaticString provides an &quot;isASCII&quot; boolean property, but manipulating strings still requires the use of UnicodeScalarView / CharacterView, even if the strings are statically known to be ASCII-only.<br>&gt; <br>&gt; I think it would be nice to have an ASCIIString in the standard library, similar to StaticString but with the following improvements:<br>&gt; <br>&gt; - ASCIIString itself would be MutableCollectionType, with Index == Int for easy access.<br>&gt; <br>&gt; - Its Generator.Element would be something which works with simple + and - operators (either UInt8, or perhaps a repurposed UnicodeScalar, or a new ASCIIScalar).<br>&gt; <br>&gt; - The ability to create new ASCIIStrings at runtime, by appending/removing bytes, or by concatenating other ASCIIStrings.<br>&gt; <br>&gt; Would anyone else find this useful?<br>&gt; <br>&gt; Jacob Bandes-Storch<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/c2049618/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
