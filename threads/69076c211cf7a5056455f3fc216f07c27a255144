<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/54f387ccfb4a55e7bfe3d8c80cb25afe?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>William Shipley</string> &lt;wjs at mac.com&gt;<p>December 18, 2015 at 04:00:00pm</p></header><div class="content"><p>* What is your evaluation of the proposal?<br></p><p>Against.<br></p><p>As self.an self.example, self.you can self.see how much self.harder it is to self.understand this self.sentence. We self.are self.not self.designed to self.scan words with self.self. in self.front of self.them.<br></p><p>The problem with this proposal is simply that using “self.blah” all over the place makes the code less readable. Yes, it can eliminate a certain class of programmer errors. But, for example, I could argue that we could eliminate a certain class of programmer errors if every time we typed in a variable we had to manually enter its type, so like,<br></p><p>foo = foo + 1<br></p><p>must be<br></p><p>foo.Int = foo.Int + 1.Int<br></p><p>Obviously this is a pathological example because the compiler would catch the error in this case anyhow, but my point is that extra words have a cost in terms of programmer comprehension, and sometimes the cost isn’t worth an incremental gain in safety.<br></p><p>Right now Swift is extremely readable and clean. Let’s keep it that way!<br></p><p><br>* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>The problem is big enough but the solution isn’t good enough.<br></p><p><br>* Does this proposal fit well with the feel and direction of Swift?<br></p><p>It would if I agreed with the solution.<br></p><p><br>* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I’ve used Objective-C for 26 years, although obviously the “self.” style properties are (relatively) recent.<br></p><p><br>* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I’ve coded a ton in Swift and considered the arguments for. I also briefly considered this proposal myself a while ago, but decided that it was just too wordy to be worth the extra safety.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/69075144/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b1fc4ed1ed8e138ef0a87fd3e91c83a4?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Ricardo Parada</string> &lt;rparada at mac.com&gt;<p>December 18, 2015 at 11:00:00pm</p></header><div class="content"><p>* What is your evaluation of the proposal?<br></p><p>Against.<br></p><p>I think cost of the proposed solution is greater than the benefit for a type of bug I have never encountered.<br></p><p><br>* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>I think there are other ways to mitigate this kind of problem:<br></p><p>I would prefer syntax coloring to differentiate between local variables and properties.  I understand this may not work for the color blind and could easily be overlooked. <br></p><p>A compiler warning when a local variable shadows a property could also help.  The programmer would have to prefix the variable with either self or local in order to squelch the warning, i.e. self.title for the property or local.title for the local variable that shadows the property.<br></p><p><br>* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Swift is known for helping the programmer avoid making mistakes.  It is also known for being readable, concise and expressive.  This proposal is conflicting in that it may help the programmer avoid making this type of mistake but at the expense of making the language more verbose.<br></p><p>One of the many things I like about Swift is how much more concise and readable it is when compared to other languages.  I would like to keep it that way.<br></p><p><br>* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I used Objective-C for 10 years since it was developed at NeXT.  I watched how Objective-C became more powerful but more verbose over the years.  I can see how how some developers switching to Swift have mentioned not wanting to go back.  <br></p><p>I have also used Java for about 15 years ever since WebObjects moved to Java.  I find Java sometimes verbose and repetitive.  I wished it had inferred typing.  In Java, a local variable may shadow an instance variable.  I do not recall ever seeing a bug that was a result of a name conflict between a local variable and an instance variable.  Even though I can use  this.foo in Java to reference an instance variable I don’t ever use it because I despise it.  It makes the code more verbose and more difficult to digest.  <br></p><p>I look forward to using Swift on the server side, but I want the language syntax to remain concise and expressive to prefer it over Java.<br></p><p><br>* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I’ve read the proposal and the comments in favor and against.  I have also read a lot of the comments in the email thread.  I also pictured how my code would change if the proposal were incorporated into the language and I did not like it.<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/416d4806/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
