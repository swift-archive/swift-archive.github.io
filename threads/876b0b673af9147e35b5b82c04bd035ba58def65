<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>When to use argument labels (a new approach)</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February  3, 2016 at 02:00:00pm</p></header><div class="content"><p>on Wed Feb 03 2016, Matt Whiteside &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I have one comment (below) about this part:<br>&gt;<br>&gt;&gt; On Feb 2, 2016, at 18:59, Paul Cantrell via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I have reservations about this. It doesn’t generalize perfectly well:<br>&gt;&gt; <br>&gt;&gt; 	a.tracksHavingMediaType(&quot;Wax Cylinder”, andPianist: “Brahms”)<br>&gt;&gt; <br>&gt;&gt; …strikes me as awkward compared to one of these:<br>&gt;&gt; <br>&gt;&gt; 	a.tracksHaving(mediaType: &quot;Wax Cylinder”, pianist: “Brahms”)<br>&gt;&gt; 	// or <br>&gt;&gt; 	a.tracksMatchingCriteria(mediaType: &quot;Wax Cylinder”, pianist: “Brahms”)<br>&gt;&gt; 	// or even<br>&gt;&gt; 	a.tracks(mediaType: &quot;Wax Cylinder”, pianist: “Brahms”)<br>&gt;&gt; <br>&gt;&gt; …especially since, in a method of that form, _all_ the arguments are<br>&gt;&gt; likely to have a default value of nil:<br>&gt;&gt; <br>&gt;&gt; 	a.tracks(mediaType: &quot;Wax Cylinder”)<br>&gt;&gt; 	a.tracks(pianist: “Brahms”)<br>&gt;<br>&gt; I prefer the original:<br>&gt;<br>&gt; a.tracksHavingMediaType(&quot;Wax Cylinder&quot;, andPianist: &quot;Brahms”)<br>&gt;<br>&gt; to any of these,<br>&gt;<br>&gt; a.tracksHaving(mediaType: &quot;Wax Cylinder&quot;, pianist: &quot;Brahms&quot;)<br>&gt; // or<br>&gt; a.tracksMatchingCriteria(mediaType: &quot;Wax Cylinder&quot;, pianist: &quot;Brahms&quot;)<br>&gt; // or even<br>&gt; a.tracks(mediaType: &quot;Wax Cylinder&quot;, pianist: &quot;Brahms”)<br>&gt;<br>&gt; Because to me, the 3 alternatives, especially the last one, all read<br>&gt; more like hashmap accesses than method calls.  In other words, they<br>&gt; make it appear as if you are passing in arbitrary keys to be queried,<br>&gt; rather than calling one specific method.<br></p><p>I *think* I understand what you like and why you like it, but I can&#39;t<br>say I understand your rationale.  To test my understanding, what do you<br>think of this:<br></p><p>      a.tracksHaving(mediaType: &quot;Wax Cylinder&quot;, andPianist: &quot;Brahms&quot;)<br></p><p>?<br></p><p>Thanks,<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/34b9659227ea084bb09a8ba4a450a162?s=50"></div><header><strong>When to use argument labels (a new approach)</strong> from <string>Jessy Catterwaul</string> &lt;mr.jessy at gmail.com&gt;<p>February  3, 2016 at 06:00:00pm</p></header><div class="content"><p>The last example is more appropriate as a named subscript.<br></p><p>tracks[mediaType: .WaxCylinder, pianist: &quot;Brahms&quot;]<br></p><p><br>&gt; On Feb 3, 2016, at 5:34 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Wed Feb 03 2016, Matt Whiteside &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; I have one comment (below) about this part:<br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 2, 2016, at 18:59, Paul Cantrell via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I have reservations about this. It doesn’t generalize perfectly well:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	a.tracksHavingMediaType(&quot;Wax Cylinder”, andPianist: “Brahms”)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; …strikes me as awkward compared to one of these:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	a.tracksHaving(mediaType: &quot;Wax Cylinder”, pianist: “Brahms”)<br>&gt;&gt;&gt; 	// or <br>&gt;&gt;&gt; 	a.tracksMatchingCriteria(mediaType: &quot;Wax Cylinder”, pianist: “Brahms”)<br>&gt;&gt;&gt; 	// or even<br>&gt;&gt;&gt; 	a.tracks(mediaType: &quot;Wax Cylinder”, pianist: “Brahms”)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; …especially since, in a method of that form, _all_ the arguments are<br>&gt;&gt;&gt; likely to have a default value of nil:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	a.tracks(mediaType: &quot;Wax Cylinder”)<br>&gt;&gt;&gt; 	a.tracks(pianist: “Brahms”)<br>&gt;&gt; <br>&gt;&gt; I prefer the original:<br>&gt;&gt; <br>&gt;&gt; a.tracksHavingMediaType(&quot;Wax Cylinder&quot;, andPianist: &quot;Brahms”)<br>&gt;&gt; <br>&gt;&gt; to any of these,<br>&gt;&gt; <br>&gt;&gt; a.tracksHaving(mediaType: &quot;Wax Cylinder&quot;, pianist: &quot;Brahms&quot;)<br>&gt;&gt; // or<br>&gt;&gt; a.tracksMatchingCriteria(mediaType: &quot;Wax Cylinder&quot;, pianist: &quot;Brahms&quot;)<br>&gt;&gt; // or even<br>&gt;&gt; a.tracks(mediaType: &quot;Wax Cylinder&quot;, pianist: &quot;Brahms”)<br>&gt;&gt; <br>&gt;&gt; Because to me, the 3 alternatives, especially the last one, all read<br>&gt;&gt; more like hashmap accesses than method calls.  In other words, they<br>&gt;&gt; make it appear as if you are passing in arbitrary keys to be queried,<br>&gt;&gt; rather than calling one specific method.<br>&gt; <br>&gt; I *think* I understand what you like and why you like it, but I can&#39;t<br>&gt; say I understand your rationale.  To test my understanding, what do you<br>&gt; think of this:<br>&gt; <br>&gt;      a.tracksHaving(mediaType: &quot;Wax Cylinder&quot;, andPianist: &quot;Brahms&quot;)<br>&gt; <br>&gt; ?<br>&gt; <br>&gt; Thanks,<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160203/6de5bcb1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>When to use argument labels (a new approach)</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>February  3, 2016 at 03:00:00pm</p></header><div class="content"><p>That&#39;s a matter of opinion. I personally don&#39;t like subscripts that might take O(N) time, but Cocoa certainly has them &lt;https://developer.apple.com/library/ios/documentation/SpriteKit/Reference/SKNode_Ref/index.html#//apple_ref/doc/uid/TP40013023-CH1-SW74&gt;.<br></p><p>(I was going to say I don&#39;t like subscripts that can themselves return a collection, but then I remembered slicing, which seems perfectly natural to me. So that one&#39;s withdrawn.)<br></p><p>Jordan<br></p><p>&gt; On Feb 3, 2016, at 15:42, Jessy Catterwaul via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The last example is more appropriate as a named subscript.<br>&gt; <br>&gt; tracks[mediaType: .WaxCylinder, pianist: &quot;Brahms&quot;]<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 3, 2016, at 5:34 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Wed Feb 03 2016, Matt Whiteside &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; I have one comment (below) about this part:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 2, 2016, at 18:59, Paul Cantrell via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I have reservations about this. It doesn’t generalize perfectly well:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	a.tracksHavingMediaType(&quot;Wax Cylinder”, andPianist: “Brahms”)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; …strikes me as awkward compared to one of these:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	a.tracksHaving(mediaType: &quot;Wax Cylinder”, pianist: “Brahms”)<br>&gt;&gt;&gt;&gt; 	// or <br>&gt;&gt;&gt;&gt; 	a.tracksMatchingCriteria(mediaType: &quot;Wax Cylinder”, pianist: “Brahms”)<br>&gt;&gt;&gt;&gt; 	// or even<br>&gt;&gt;&gt;&gt; 	a.tracks(mediaType: &quot;Wax Cylinder”, pianist: “Brahms”)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; …especially since, in a method of that form, _all_ the arguments are<br>&gt;&gt;&gt;&gt; likely to have a default value of nil:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	a.tracks(mediaType: &quot;Wax Cylinder”)<br>&gt;&gt;&gt;&gt; 	a.tracks(pianist: “Brahms”)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I prefer the original:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; a.tracksHavingMediaType(&quot;Wax Cylinder&quot;, andPianist: &quot;Brahms”)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; to any of these,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; a.tracksHaving(mediaType: &quot;Wax Cylinder&quot;, pianist: &quot;Brahms&quot;)<br>&gt;&gt;&gt; // or<br>&gt;&gt;&gt; a.tracksMatchingCriteria(mediaType: &quot;Wax Cylinder&quot;, pianist: &quot;Brahms&quot;)<br>&gt;&gt;&gt; // or even<br>&gt;&gt;&gt; a.tracks(mediaType: &quot;Wax Cylinder&quot;, pianist: &quot;Brahms”)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Because to me, the 3 alternatives, especially the last one, all read<br>&gt;&gt;&gt; more like hashmap accesses than method calls.  In other words, they<br>&gt;&gt;&gt; make it appear as if you are passing in arbitrary keys to be queried,<br>&gt;&gt;&gt; rather than calling one specific method.<br>&gt;&gt; <br>&gt;&gt; I *think* I understand what you like and why you like it, but I can&#39;t<br>&gt;&gt; say I understand your rationale.  To test my understanding, what do you<br>&gt;&gt; think of this:<br>&gt;&gt; <br>&gt;&gt;      a.tracksHaving(mediaType: &quot;Wax Cylinder&quot;, andPianist: &quot;Brahms&quot;)<br>&gt;&gt; <br>&gt;&gt; ?<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; -Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160203/4f41dbfb/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2b19ddab2d7de4523412c875c258e278?s=50"></div><header><strong>When to use argument labels (a new approach)</strong> from <string>Matt Whiteside</string> &lt;mwhiteside.dev at gmail.com&gt;<p>February  3, 2016 at 05:00:00pm</p></header><div class="content"><p>I think this one:<br></p><p>	a.tracksHavingMediaType(“Wax Cylinder”, andPianist: “Brahms”)<br></p><p>reads better than this one:<br>	<br>	a.tracksHaving(mediaType: “Wax Cylinder”, andPianist: “Brahms”)<br></p><p>With the rationale that it would sound kind of stilted if you tried to say it out loud, and that splitting apart “tracksHavingMediaType” into “tracksHaving”… “mediaType” seems like a fairly random choice.  It could just as well be “tracks”…”havingMediaType”, where the first option only introduces the split when it must happen, at the first parameter.<br></p><p>I haven’t thought enough about it to see a general pattern, but that’s what I think on this particular example. HTH.<br></p><p>Matt<br></p><p>	<br>&gt; On Feb 3, 2016, at 14:34, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Wed Feb 03 2016, Matt Whiteside &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; I have one comment (below) about this part:<br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 2, 2016, at 18:59, Paul Cantrell via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I have reservations about this. It doesn’t generalize perfectly well:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	a.tracksHavingMediaType(&quot;Wax Cylinder”, andPianist: “Brahms”)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; …strikes me as awkward compared to one of these:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	a.tracksHaving(mediaType: &quot;Wax Cylinder”, pianist: “Brahms”)<br>&gt;&gt;&gt; 	// or <br>&gt;&gt;&gt; 	a.tracksMatchingCriteria(mediaType: &quot;Wax Cylinder”, pianist: “Brahms”)<br>&gt;&gt;&gt; 	// or even<br>&gt;&gt;&gt; 	a.tracks(mediaType: &quot;Wax Cylinder”, pianist: “Brahms”)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; …especially since, in a method of that form, _all_ the arguments are<br>&gt;&gt;&gt; likely to have a default value of nil:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	a.tracks(mediaType: &quot;Wax Cylinder”)<br>&gt;&gt;&gt; 	a.tracks(pianist: “Brahms”)<br>&gt;&gt; <br>&gt;&gt; I prefer the original:<br>&gt;&gt; <br>&gt;&gt; a.tracksHavingMediaType(&quot;Wax Cylinder&quot;, andPianist: &quot;Brahms”)<br>&gt;&gt; <br>&gt;&gt; to any of these,<br>&gt;&gt; <br>&gt;&gt; a.tracksHaving(mediaType: &quot;Wax Cylinder&quot;, pianist: &quot;Brahms&quot;)<br>&gt;&gt; // or<br>&gt;&gt; a.tracksMatchingCriteria(mediaType: &quot;Wax Cylinder&quot;, pianist: &quot;Brahms&quot;)<br>&gt;&gt; // or even<br>&gt;&gt; a.tracks(mediaType: &quot;Wax Cylinder&quot;, pianist: &quot;Brahms”)<br>&gt;&gt; <br>&gt;&gt; Because to me, the 3 alternatives, especially the last one, all read<br>&gt;&gt; more like hashmap accesses than method calls.  In other words, they<br>&gt;&gt; make it appear as if you are passing in arbitrary keys to be queried,<br>&gt;&gt; rather than calling one specific method.<br>&gt; <br>&gt; I *think* I understand what you like and why you like it, but I can&#39;t<br>&gt; say I understand your rationale.  To test my understanding, what do you<br>&gt; think of this:<br>&gt; <br>&gt;      a.tracksHaving(mediaType: &quot;Wax Cylinder&quot;, andPianist: &quot;Brahms&quot;)<br>&gt; <br>&gt; ?<br>&gt; <br>&gt; Thanks,<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160203/f8f99b85/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
