<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/389ea0cf26e2a2d4646bf580da2fb6b5?s=50"></div><header><strong>Rebinding UnsafePointer makes it mutable</strong> from <string>Martin R</string> &lt;martinr448 at gmail.com&gt;<p>September 19, 2016 at 10:00:00am</p></header><div class="content"><p>I noticed that both UnsafePointer and UnsafeMutablePointer have the identical method<br></p><p>    public func withMemoryRebound&lt;T, Result&gt;(to: T.Type, capacity count: Int, _ body: (UnsafeMutablePointer&lt;T&gt;) throws -&gt; Result) rethrows -&gt; Result<br></p><p>so that rebinding an immutable pointer gives you a _mutable_ pointer. That is different from what<br></p><p>    Unsafe[Mutable]Pointer&lt;Pointee&gt; {<br>      func withMemoryRebound&lt;T&gt;(to: T.Type, capacity count: Int,<br>        _ body: (Unsafe[Mutable]Pointer&lt;T&gt;) throws -&gt; ()) rethrows<br>    }<br></p><p>in https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md indicates. Perhaps I am misunderstanding something. Shouldn&#39;t rebinding an UnsafePointer result in an UnsafePointer again?<br></p><p>Martin<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6fe87aed0d64cdbc46378bf7596a7553?s=50"></div><header><strong>Rebinding UnsafePointer makes it mutable</strong> from <string>Andrew Trick</string> &lt;atrick at apple.com&gt;<p>September 19, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Sep 19, 2016, at 1:24 AM, Martin R via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; I noticed that both UnsafePointer and UnsafeMutablePointer have the identical method<br>&gt; <br>&gt;    public func withMemoryRebound&lt;T, Result&gt;(to: T.Type, capacity count: Int, _ body: (UnsafeMutablePointer&lt;T&gt;) throws -&gt; Result) rethrows -&gt; Result<br>&gt; <br>&gt; so that rebinding an immutable pointer gives you a _mutable_ pointer. That is different from what<br>&gt; <br>&gt;    Unsafe[Mutable]Pointer&lt;Pointee&gt; {<br>&gt;      func withMemoryRebound&lt;T&gt;(to: T.Type, capacity count: Int,<br>&gt;        _ body: (Unsafe[Mutable]Pointer&lt;T&gt;) throws -&gt; ()) rethrows<br>&gt;    }<br>&gt; <br>&gt; in https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md indicates. Perhaps I am misunderstanding something. Shouldn&#39;t rebinding an UnsafePointer result in an UnsafePointer again?<br>&gt; <br>&gt; Martin<br></p><p>You’re right. There is an inconsistency between the proposal and Swift 3 implementation. I’ve been thinking about whether it makes more sense to correct this sooner or later. I responded in more detail on swift-evolution.<br></p><p>-Andy<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6fe87aed0d64cdbc46378bf7596a7553?s=50"></div><header><strong>[swift-dev] Rebinding UnsafePointer makes it mutable</strong> from <string>Andrew Trick</string> &lt;atrick at apple.com&gt;<p>September 19, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Sep 19, 2016, at 1:24 AM, Martin R via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; I noticed that both UnsafePointer and UnsafeMutablePointer have the identical method<br>&gt; <br>&gt;    public func withMemoryRebound&lt;T, Result&gt;(to: T.Type, capacity count: Int, _ body: (UnsafeMutablePointer&lt;T&gt;) throws -&gt; Result) rethrows -&gt; Result<br>&gt; <br>&gt; so that rebinding an immutable pointer gives you a _mutable_ pointer. That is different from what<br>&gt; <br>&gt;    Unsafe[Mutable]Pointer&lt;Pointee&gt; {<br>&gt;      func withMemoryRebound&lt;T&gt;(to: T.Type, capacity count: Int,<br>&gt;        _ body: (Unsafe[Mutable]Pointer&lt;T&gt;) throws -&gt; ()) rethrows<br>&gt;    }<br>&gt; <br>&gt; in https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md indicates. Perhaps I am misunderstanding something. Shouldn&#39;t rebinding an UnsafePointer result in an UnsafePointer again?<br>&gt; <br>&gt; Martin<br></p><p>I think you’re right about that. I didn’t notice the discrepancy until source breaking changes were frozen and was concerned that fixing it would be more restrictive.<br></p><p>Some users may migrate their code to:<br></p><p>constPtr.withMemoryRebound(to: T.self, capacity: 1) {<br> takesMutablePointer($0)<br>}<br></p><p>We probably want them to be more explicit:<br></p><p>constPtr.withMemoryRebound(to: T.self, capacity: 1) {<br> takesMutablePointer(UnsafeMutablePointer(mutating: $0))<br>}<br></p><p>We could possibly justify correcting this in Swift 3 though on these grounds:<br></p><p>- It’s effectively a bug considering that the proposal and implementation are inconsistent.<br>- There is a correct way write the code that will continue to work before and after fixing the bug.<br>- A simple fixit will tell them to add the “mutating” label.<br></p><p>If not, it’s something I was already planning to roll into Swift 4.<br></p><p>-Andy<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
