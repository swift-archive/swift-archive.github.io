<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] SE-0064: Referencing the Objective-C selector of property getters and setters</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>April  7, 2016 at 01:00:00pm</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of SE-0064 &quot;Referencing the Objective-C selector of property getters and setters&quot; begins now and runs through April 12, 2016. The proposal is available here:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0064-property-selectors.md<br>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br></p><p>Proposal link:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0064-property-selectors.md<br>Reply text<br></p><p>Other replies<br> &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>What is your evaluation of the proposal?<br>Is the problem being addressed significant enough to warrant a change to Swift?<br>Does this proposal fit well with the feel and direction of Swift?<br>If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>More information about the Swift evolution process is available at<br></p><p>https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>Thank you,<br></p><p>Doug Gregor<br></p><p>Review Manager<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution-announce/attachments/20160407/7f8762dc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ac6593beac2a4da1e518e5001dbb2adc?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0064: Referencing the Objective-C selector of property getters and setters</strong> from <string>Michael Buckley</string> &lt;michael at buckleyisms.com&gt;<p>April  7, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; What is your evaluation of the proposal?<br></p><p>+1<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to<br>Swift?<br></p><p>Yes, with reservations. The proposal itself mentions that this may be a<br>temporary solution, and while I believe temporary solutions tend to add<br>more complexity over the long-term, and tend to end up being<br>not-so-temporary, I think interfacing well with Objective-C in a type safe<br>manner is important.<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes, I would consider this to be a natural extension of SE-0022. In fact, I<br>think SE-0022 isn&#39;t really complete without this.<br></p><p>&gt; If you have used other languages or libraries with a similar feature, how<br>do you feel that this proposal compares to those?<br></p><p>There are two ways to think of this feature: As a worse alternative to<br>lenses, and as a more type-safe mechanism for interoperating with<br>Objective-C.<br></p><p>The proposal already covers the first, acknowledging that lenses are<br>out-of-scope for Swift 3.<br></p><p>As for the second, I have used other languages with Objective-C bridges,<br>and all of them dealt with this problem by simply using foo for the getter,<br>and setFoo: for the setter. This approach has the advantage over SE-0064 of<br>not requiring any additional overloads, and I&#39;m not quite sure why SE-0022<br>wasn&#39;t just implemented this way to begin with. Because it keeps the<br>language simpler, I probably would have advocated for this approach, but I<br>don&#39;t think the impact is particularly large, and since SE-0064 is already<br>at the proposal stage, it&#39;s probably just water under the bridge at this<br>point.<br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading,<br>or an in-depth study?<br></p><p>I read through the proposal and the previous two threads, and thought about<br>it for a few minutes.<br></p><p>On Thu, Apr 7, 2016 at 1:57 PM, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of SE-0064 &quot;Referencing the Objective-C selector of property<br>&gt; getters and setters&quot; begins now and runs through April 12, 2016. The<br>&gt; proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0064-property-selectors.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager. When replying, please try to keep the proposal link at the<br>&gt; top of the message:<br>&gt;<br>&gt; Proposal link:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0064-property-selectors.md<br>&gt;<br>&gt; Reply text<br>&gt;<br>&gt; Other replies<br>&gt;<br>&gt; &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What<br>&gt; goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt;    - What is your evaluation of the proposal?<br>&gt;    - Is the problem being addressed significant enough to warrant a<br>&gt;    change to Swift?<br>&gt;    - Does this proposal fit well with the feel and direction of Swift?<br>&gt;    - If you have used other languages or libraries with a similar<br>&gt;    feature, how do you feel that this proposal compares to those?<br>&gt;    - How much effort did you put into your review? A glance, a quick<br>&gt;    reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; Doug Gregor<br>&gt;<br>&gt; Review Manager<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160407/46741f4a/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e25d5fca2c8d7b9ad1365e5bf859f9f3?s=50"></div><header><strong>SE-0064: Referencing the Objective-C selector of property getters and setters</strong> from <string>William Jon Shipley</string> &lt;wjs at delicious-monster.com&gt;<p>April  7, 2016 at 04:00:00pm</p></header><div class="content"><p>What is your evaluation of the proposal?<br></p><p>Strong yes.<br></p><p>Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>At Delicious we wrote a huge ugly macro set to define properties in a special way so we could make key paths safely:<br></p><p>// Declares a safe-KVC-accessible property<br>// Use as: @property (opts) MyType KVC(*name);<br>// Use as: @property (opts) MyType KVC2(*firstName, *lastName);<br>#define KVC(a) \<br>    a; SAFE_KVC(a)<br></p><p>#define SAFE_KVC(NAME) \<br>    void NAME ## $DMSafeKVC(void)<br></p><p>#define K(x) \<br>    __builtin_choose_expr(sizeof(&amp;x ## $DMSafeKVC), @#x, @&quot;_NOT_A_KEY_&quot;)<br></p><p>So you could then use K(title) for example in your code and get what would now be #keyPath(title) in this proposal.<br></p><p>And we also had:<br></p><p>#define KeyPath(...) \<br>    DMMakeKeyPath(__VA_ARGS__, nil)<br></p><p>NSString *DMMakeKeyPath(NSString *firstKey, ...)<br>{<br>    NSMutableArray *keyArray = [NSMutableArray arrayWithObject:firstKey];<br>    va_list varargs;<br>    va_start(varargs, firstKey);<br>    NSString *nextKey = nil;<br>    while ((nextKey = va_arg(varargs, __unsafe_unretained NSString *)))<br>        [keyArray addObject:nextKey];<br>    va_end(varargs);<br>    return [keyArray componentsJoinedByString:@&quot;.&quot;];<br>}<br></p><p>So we could make paths.<br></p><p>But this whole system was ugly as heck to read and required to you use ugly macros when defining properties AND when making key paths, so I wouldn’t use it again if I had to do it all again. I’d just like to demonstrate crazy lengths people have gone to to get SOME of this functionality.<br></p><p>—<br></p><p>I am curious how this proposal integrates with “KVO2.” Not that we’re talking about that here, but it’s something I imagine Apple is thinking about, so I’m not sure how much value my opinion is without knowing what’s coming.<br></p><p>(As an aside, gosh it’d be nice if other groups writing APIs had such a wonderful review process like the Swift group.)<br></p><p><br>Does this proposal fit well with the feel and direction of Swift?<br></p><p>I think so. Swift is about safety, and this make key paths much safer. And more readable as key paths instead of as strings.<br></p><p><br>If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>The horrifying one we wrote was much inferior yet we shipped a hundred thousand lines or so on it.<br></p><p><br>How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick reading. I’m not sure if everything in it is actually implementable and I don’t really care what the syntax is, I just want a way to do this cleanly.<br></p><p><br></p><p>Your pal,<br>-Wil<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160407/03cc423a/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0a299ea776456e5b490c6af93682926?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0064: Referencing the Objective-C selector of property getters and setters</strong> from <string>Sebastian Hagedorn</string> &lt;sebastian at iosphere.de&gt;<p>April  8, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; What is your evaluation of the proposal?<br></p><p>+1<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>Yes. I agree with Michael Buckley that this feels more like an oversight in SE-0022 rather than a completely new thing.<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br>Yes. I think it makes sense to use explicit getter/setter parameter names, as opposed to relying on the ObjC-based foo/setFoo: conventions. While the lines between property accessors and methods are blurry in ObjC, they are different things in Swift. I’m aware that this feature requires ObjC under the hood, but that’s not something you need to know when creating a selector.<br></p><p>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>Well, ObjC… I’ve explained the difference above.<br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>I’ve read the proposal and the previous review.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160408/9f774b40/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
