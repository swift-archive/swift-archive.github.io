<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2dee91b906841e8af2bda61d12fa1a00?s=50"></div><header><strong>Proposal: Optional Binding Shorthand Syntax</strong> from <string>Tyler Mandry</string> &lt;tmandry at gmail.com&gt;<p>December  6, 2015 at 03:00:00pm</p></header><div class="content"><p>What isn&#39;t clear to me from Chris&#39;s or John&#39;s comments is why the `if let<br>x? = foo` syntax was taken away. Was it for backward-compatibility? To me,<br>this syntax does have special syntactic support, and also seems to make it<br>clearer what&#39;s going on. It&#39;s also analogous to Swift&#39;s type inference for<br>generic &lt;T?&gt; types, for example:<br></p><p>   func doSomething&lt;T? where T: Equatable&gt;(x: T?) -&gt; T { ... }<br></p><p>Note the T? in brackets. If I pass an Int? to doSomething, the type is<br>&quot;unwrapped&quot; and T becomes Int. It seems like `if let x? = foo` would follow<br>the same pattern.<br></p><p>Was the syntax taken away for reasons unlikely to change, or is it up for<br>discussion? :)<br></p><p>-- <br>Tyler Mandry<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/fc1b6148/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/411a0fa16436bc975292f7044033a246?s=50"></div><header><strong>Proposal: Optional Binding Shorthand Syntax</strong> from <string>Alex Lew</string> &lt;alexl.mail+swift at gmail.com&gt;<p>December  6, 2015 at 04:00:00pm</p></header><div class="content"><p>let a: Int? = 3<br>if case let b? = a {<br>    print(b)<br>}<br></p><p>works for me in Swift 2.2. Have they announced that they&#39;re taking this<br>away?<br></p><p><br>On Sun, Dec 6, 2015 at 4:38 PM, Tyler Mandry via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; What isn&#39;t clear to me from Chris&#39;s or John&#39;s comments is why the `if let<br>&gt; x? = foo` syntax was taken away. Was it for backward-compatibility? To me,<br>&gt; this syntax does have special syntactic support, and also seems to make it<br>&gt; clearer what&#39;s going on. It&#39;s also analogous to Swift&#39;s type inference for<br>&gt; generic &lt;T?&gt; types, for example:<br>&gt;<br>&gt;    func doSomething&lt;T? where T: Equatable&gt;(x: T?) -&gt; T { ... }<br>&gt;<br>&gt; Note the T? in brackets. If I pass an Int? to doSomething, the type is<br>&gt; &quot;unwrapped&quot; and T becomes Int. It seems like `if let x? = foo` would follow<br>&gt; the same pattern.<br>&gt;<br>&gt; Was the syntax taken away for reasons unlikely to change, or is it up for<br>&gt; discussion? :)<br>&gt;<br>&gt; --<br>&gt; Tyler Mandry<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/869babf6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2dee91b906841e8af2bda61d12fa1a00?s=50"></div><header><strong>Proposal: Optional Binding Shorthand Syntax</strong> from <string>Tyler Mandry</string> &lt;tmandry at gmail.com&gt;<p>December  6, 2015 at 03:00:00pm</p></header><div class="content"><p>Ah no, it&#39;s just that they at one time had support for taking away `case`<br>and doing `if let b? = a`. See the commit notes that Chris linked to here:<br>https://github.com/apple/swift/commit/20f8f09ea8de5eb1c0cb559e59c8a8e8a0e115a9#diff-4513b692cdd5476630ebb66b73d5bf4b<br>.<br></p><p>I guess the current `if let b = a` syntax is what John was referring to as<br>special syntactic support, but I still don&#39;t see why the `?` was taken out<br>of the syntax.<br></p><p>On Sun, Dec 6, 2015 at 3:43 PM, Alex Lew &lt;alexl.mail+swift at gmail.com&gt; wrote:<br></p><p>&gt; let a: Int? = 3<br>&gt; if case let b? = a {<br>&gt;     print(b)<br>&gt; }<br>&gt;<br>&gt; works for me in Swift 2.2. Have they announced that they&#39;re taking this<br>&gt; away?<br>&gt;<br>&gt;<br>&gt; On Sun, Dec 6, 2015 at 4:38 PM, Tyler Mandry via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; What isn&#39;t clear to me from Chris&#39;s or John&#39;s comments is why the `if let<br>&gt;&gt; x? = foo` syntax was taken away. Was it for backward-compatibility? To me,<br>&gt;&gt; this syntax does have special syntactic support, and also seems to make it<br>&gt;&gt; clearer what&#39;s going on. It&#39;s also analogous to Swift&#39;s type inference for<br>&gt;&gt; generic &lt;T?&gt; types, for example:<br>&gt;&gt;<br>&gt;&gt;    func doSomething&lt;T? where T: Equatable&gt;(x: T?) -&gt; T { ... }<br>&gt;&gt;<br>&gt;&gt; Note the T? in brackets. If I pass an Int? to doSomething, the type is<br>&gt;&gt; &quot;unwrapped&quot; and T becomes Int. It seems like `if let x? = foo` would follow<br>&gt;&gt; the same pattern.<br>&gt;&gt;<br>&gt;&gt; Was the syntax taken away for reasons unlikely to change, or is it up for<br>&gt;&gt; discussion? :)<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Tyler Mandry<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br></p><p><br>-- <br>Tyler Mandry<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/3b56af76/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Proposal: Optional Binding Shorthand Syntax</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December  6, 2015 at 02:00:00pm</p></header><div class="content"><p>&gt; On Dec 6, 2015, at 1:38 PM, Tyler Mandry via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; What isn&#39;t clear to me from Chris&#39;s or John&#39;s comments is why the `if let x? = foo` syntax was taken away. Was it for backward-compatibility? <br></p><p>FWIW, that syntax hasn’t been taken away, it just means something different now.<br></p><p>	if let x = foo() {<br></p><p>captures is privileged syntax for testing an optional and binding to the thing inside of it.  The patch I linked to moved away from this, but at great cost: it uglified lots of common code.  Swift privileges optional in a number of ways (e.g. it is the result of as?, try?, etc) and the standard library uses it pervasively as well.  Optimizing for that common case makes sense.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2dee91b906841e8af2bda61d12fa1a00?s=50"></div><header><strong>Proposal: Optional Binding Shorthand Syntax</strong> from <string>Tyler Mandry</string> &lt;tmandry at gmail.com&gt;<p>December  6, 2015 at 04:00:00pm</p></header><div class="content"><p>True, I meant why was the `?` taken out of the syntax. I suppose it can<br>feel redundant to have `if x? = try? foo()` or similar, in the cases you<br>mentioned. That said, in the common case of unwrapping a variable of<br>optional type (`let foo: Int?`) which is not written with a `?`, it can add<br>extra clarity.<br></p><p>On Sun, Dec 6, 2015 at 4:42 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Dec 6, 2015, at 1:38 PM, Tyler Mandry via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; What isn&#39;t clear to me from Chris&#39;s or John&#39;s comments is why the `if<br>&gt; let x? = foo` syntax was taken away. Was it for backward-compatibility?<br>&gt;<br>&gt; FWIW, that syntax hasn’t been taken away, it just means something<br>&gt; different now.<br>&gt;<br>&gt;         if let x = foo() {<br>&gt;<br>&gt; captures is privileged syntax for testing an optional and binding to the<br>&gt; thing inside of it.  The patch I linked to moved away from this, but at<br>&gt; great cost: it uglified lots of common code.  Swift privileges optional in<br>&gt; a number of ways (e.g. it is the result of as?, try?, etc) and the standard<br>&gt; library uses it pervasively as well.  Optimizing for that common case makes<br>&gt; sense.<br>&gt;<br>&gt; -Chris<br>&gt;<br>&gt;<br>&gt;<br></p><p><br>-- <br>Tyler Mandry<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/efe3eb96/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Proposal: Optional Binding Shorthand Syntax</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December  6, 2015 at 02:00:00pm</p></header><div class="content"><p>&gt; On Dec 6, 2015, at 2:48 PM, Tyler Mandry &lt;tmandry at gmail.com&gt; wrote:<br>&gt; <br>&gt; True, I meant why was the `?` taken out of the syntax<br></p><p>Swift 2 does support ? patterns.<br></p><p>-Chris<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
