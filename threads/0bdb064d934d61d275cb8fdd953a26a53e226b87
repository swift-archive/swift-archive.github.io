<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Proposal] Fix lazy filter</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>June 19, 2016 at 03:00:00pm</p></header><div class="content"><p>on Sun Jun 19 2016, Антон Жилин &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt;<br>&gt;&gt; It&#39;s not a bug.  Measuring the length of the source before allocating<br>&gt;&gt; the destination array is usually a big win when compared to repeatedly<br>&gt;&gt; growing the array&#39;s memory and copying all its elements.<br>&gt;&gt; --<br>&gt;&gt; -Dave<br>&gt;<br>&gt; Usually yes, but not in the case of lazy filter. If predicate contains<br>&gt; anything more than a dozen CPU instructions, single-pass version is<br>&gt; faster.<br></p><p>...and predicates are often very lightweight.  I don&#39;t know how to prove<br>which approach will be faster.<br></p><p>&gt; We often want the predicate to have side effects, but we cannot with<br>&gt; current implementation: the side effects will be doubled.<br></p><p>Though I can&#39;t really endorse using a filter with side-effects, that&#39;s<br>why we have eager filter.<br></p><p>&gt; I also wonder if it&#39;s possible to allocate array with capacity of<br>&gt; underlying collection (before all lazy stuff) and shrink it in the end.<br></p><p>It might be possible, but right now we don&#39;t have a way to shrink memory<br>or efficiently find the length of the underlying collection, which could<br>itself be a lazy filter collection.<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
