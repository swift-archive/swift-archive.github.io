<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b2fc174169a3054f2e9bcb366884b02b?s=50"></div><header><strong>@noescape loop hole</strong> from <string>Fabian Ehrentraud</string> &lt;Fabian.Ehrentraud at willhaben.at&gt;<p>August 26, 2016 at 06:00:00am</p></header><div class="content"><p>The implemented change for closures being @noescape by default is awesome, but an important case was missed. When the closure is stored into a local variable, there currently is no way to make that variable non-escaping.<br></p><p><br>class A {<br>	<br>	let n: Int = 1<br>	var cp: (() -&gt; Int)?<br>	<br>	func f1() {<br>		// when directly constructing a new closure in the function call, the compiler knows it will be non-escaping, and no explicit `self` is needed in the closure...<br>		f2(c: { n })<br>		<br>		// ... but when storing the closure in an intermediate variable, it is not assumed as non-escaping, and explicit `self` is needed, and also we cannot prevent that it can be stored in some escaping way<br>		let c: () -&gt; Int = {<br>			// the closure variable would need to know if it is escaping or not, as this has impact on whether the user needs to think about problems with strong capture semantics<br>			return self.n<br>		}<br>		f2(c: c)<br>		<br>		// this should actually not be allowed, unless the closure c is marked as @escaping<br>		cp = c<br>	}<br>	<br>	func f2(c: () -&gt; Int) -&gt; Int {<br>		return c()<br>	}<br>	<br>}<br></p><p><br>Is this rather a bug in the implementation of SE-0103, or a new feature request?<br></p><p><br>best,<br>Fabian<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>@noescape loop hole</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>August 26, 2016 at 08:00:00am</p></header><div class="content"><p>You might know already, but you can write f2 { n } instead of f2(c: { n }).<br></p><p>I checked my code and found that this isn&#39;t a problem over here. Inertia is the only thing that guides my opinion here, I think that I could be swayed one way or the other rather easily.<br></p><p>Félix<br></p><p>&gt; Le 25 août 2016 à 23:58:28, Fabian Ehrentraud via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; The implemented change for closures being @noescape by default is awesome, but an important case was missed. When the closure is stored into a local variable, there currently is no way to make that variable non-escaping.<br>&gt; <br>&gt; <br>&gt; class A {<br>&gt; 	<br>&gt; 	let n: Int = 1<br>&gt; 	var cp: (() -&gt; Int)?<br>&gt; 	<br>&gt; 	func f1() {<br>&gt; 		// when directly constructing a new closure in the function call, the compiler knows it will be non-escaping, and no explicit `self` is needed in the closure...<br>&gt; 		f2(c: { n })<br>&gt; 		<br>&gt; 		// ... but when storing the closure in an intermediate variable, it is not assumed as non-escaping, and explicit `self` is needed, and also we cannot prevent that it can be stored in some escaping way<br>&gt; 		let c: () -&gt; Int = {<br>&gt; 			// the closure variable would need to know if it is escaping or not, as this has impact on whether the user needs to think about problems with strong capture semantics<br>&gt; 			return self.n<br>&gt; 		}<br>&gt; 		f2(c: c)<br>&gt; 		<br>&gt; 		// this should actually not be allowed, unless the closure c is marked as @escaping<br>&gt; 		cp = c<br>&gt; 	}<br>&gt; 	<br>&gt; 	func f2(c: () -&gt; Int) -&gt; Int {<br>&gt; 		return c()<br>&gt; 	}<br>&gt; 	<br>&gt; }<br>&gt; <br>&gt; <br>&gt; Is this rather a bug in the implementation of SE-0103, or a new feature request?<br>&gt; <br>&gt; <br>&gt; best,<br>&gt; Fabian<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160826/5c19f3b8/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>@noescape loop hole</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>August 26, 2016 at 05:00:00pm</p></header><div class="content"><p>That’s not really a loophole, because nothing unsafe can happen because of it. It’s just a missing feature. Personally I think the added complexity from allowing non-parameter closures to be marked non-escaping makes it not worth the effort.<br></p><p>Jordan<br></p><p><br>&gt; On Aug 25, 2016, at 23:58, Fabian Ehrentraud via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The implemented change for closures being @noescape by default is awesome, but an important case was missed. When the closure is stored into a local variable, there currently is no way to make that variable non-escaping.<br>&gt; <br>&gt; <br>&gt; class A {<br>&gt; 	<br>&gt; 	let n: Int = 1<br>&gt; 	var cp: (() -&gt; Int)?<br>&gt; 	<br>&gt; 	func f1() {<br>&gt; 		// when directly constructing a new closure in the function call, the compiler knows it will be non-escaping, and no explicit `self` is needed in the closure...<br>&gt; 		f2(c: { n })<br>&gt; 		<br>&gt; 		// ... but when storing the closure in an intermediate variable, it is not assumed as non-escaping, and explicit `self` is needed, and also we cannot prevent that it can be stored in some escaping way<br>&gt; 		let c: () -&gt; Int = {<br>&gt; 			// the closure variable would need to know if it is escaping or not, as this has impact on whether the user needs to think about problems with strong capture semantics<br>&gt; 			return self.n<br>&gt; 		}<br>&gt; 		f2(c: c)<br>&gt; 		<br>&gt; 		// this should actually not be allowed, unless the closure c is marked as @escaping<br>&gt; 		cp = c<br>&gt; 	}<br>&gt; 	<br>&gt; 	func f2(c: () -&gt; Int) -&gt; Int {<br>&gt; 		return c()<br>&gt; 	}<br>&gt; 	<br>&gt; }<br>&gt; <br>&gt; <br>&gt; Is this rather a bug in the implementation of SE-0103, or a new feature request?<br>&gt; <br>&gt; <br>&gt; best,<br>&gt; Fabian<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
