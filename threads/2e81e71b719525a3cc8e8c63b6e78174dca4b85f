<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Discussion]: Renaming #line, the line control statement</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>February  3, 2016 at 06:00:00pm</p></header><div class="content"><p>Swift Evolution SE-0028 (https://github.com/apple/swift-evolution/blob/master/proposals/0028-modernizing-debug-identifiers.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0028-modernizing-debug-identifiers.md&gt;) overloads<br>the use of #line to mean both an identifier that maps to a calling site&#39;s line number with a file and acts as part of a line control statement with the following grammar:<br></p><p>line-control-statement → #line­<br> &lt;&gt;line-control-statement → #line­line-number &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/line-number&gt;­file-name &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/file-name&gt;­<br> &lt;&gt;line-number → A decimal integer greater than zero<br> &lt;&gt;file-name → static-string-literal &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/LexicalStructure.html#//apple_ref/swift/grammar/static-string-literal&gt;­<br></p><p>The accepted implementation of SE-0028 disambiguates the two by requiring #line (the control statement) to appear at the first column for the time being. This is a stop-gap solution best remedied by renaming #line. <br></p><p>Chris Lattner writes, &quot;The core team isn’t thrilled with the magic “first token on a line” whitespace behavior that #line will be getting, and would like someone to start a discussion about renaming the old #line directive to something more specific and tailored to its purpose.   Once that name and syntax is settled, we can rename the directive and remove the whitespace rule.&quot;<br></p><p>I&#39;d recommend #setline or #linenumber. Starting this thread to solicit other suggestions.<br></p><p>Best, -- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160203/2e81b85f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc045f9bdc3bd1885767f2a2ba8af458?s=50"></div><header><strong>[Discussion]: Renaming #line, the line control statement</strong> from <string>Jonathan Tang</string> &lt;jonathan.d.tang at gmail.com&gt;<p>February  3, 2016 at 05:00:00pm</p></header><div class="content"><p>The primary use for the existing #line directive is for generated code like<br>parser/lexer generators, right?  If so, how about #sourceline, since it<br>represents the line number in the original source code?  I&#39;m also fine with<br>#setline, but don&#39;t like #linenumber because it&#39;s not clear what the<br>difference is between it and #line.<br></p><p>Actually, it&#39;d also be used to reset the line number back to the generated<br>code, right?  In that case, #sourceline seems awkward, and maybe I&#39;ll just<br>go with +1 to #setline.<br></p><p>On Wed, Feb 3, 2016 at 5:24 PM, Erica Sadun via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Swift Evolution SE-0028 (<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0028-modernizing-debug-identifiers.md)<br>&gt; overloads<br>&gt; the use of #line to mean both an identifier that maps to a calling site&#39;s<br>&gt; line number with a file and acts as part of a line control statement with<br>&gt; the following grammar:<br>&gt;<br>&gt; line-control-statement → #line­<br>&gt; line-control-statement → #line­line-number<br>&gt; &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/line-number&gt;<br>&gt; ­file-name<br>&gt; &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/file-name&gt;<br>&gt; ­<br>&gt; line-number → A decimal integer greater than zero<br>&gt; file-name → static-string-literal<br>&gt; &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/LexicalStructure.html#//apple_ref/swift/grammar/static-string-literal&gt;<br>&gt; ­<br>&gt;<br>&gt; The accepted implementation of SE-0028 disambiguates the two by requiring<br>&gt; #line (the control statement) to appear at the first column for the time<br>&gt; being. This is a stop-gap solution best remedied by renaming #line.<br>&gt;<br>&gt; Chris Lattner writes, &quot;The core team isn’t thrilled with the magic “first<br>&gt; token on a line” whitespace behavior that #line will be getting, and would<br>&gt; like someone to start a discussion about renaming the old #line directive<br>&gt; to something more specific and tailored to its purpose.   Once that name<br>&gt; and syntax is settled, we can rename the directive and remove the<br>&gt; whitespace rule.&quot;<br>&gt;<br>&gt; I&#39;d recommend #setline or #linenumber. Starting this thread to solicit<br>&gt; other suggestions.<br>&gt;<br>&gt; Best, -- E<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160203/5b3a99b5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>[Discussion]: Renaming #line, the line control statement</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>February  3, 2016 at 07:00:00pm</p></header><div class="content"><p>I like that reasoning. I&#39;d suggest even simpler and go with #source since it also can include a file name.<br></p><p>l8r<br>Sean<br></p><p>Sent from my iPad<br></p><p>&gt; On Feb 3, 2016, at 7:32 PM, Jonathan Tang via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The primary use for the existing #line directive is for generated code like parser/lexer generators, right?  If so, how about #sourceline, since it represents the line number in the original source code?  I&#39;m also fine with #setline, but don&#39;t like #linenumber because it&#39;s not clear what the difference is between it and #line.<br>&gt; <br>&gt; Actually, it&#39;d also be used to reset the line number back to the generated code, right?  In that case, #sourceline seems awkward, and maybe I&#39;ll just go with +1 to #setline.<br>&gt; <br>&gt;&gt; On Wed, Feb 3, 2016 at 5:24 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; Swift Evolution SE-0028 (https://github.com/apple/swift-evolution/blob/master/proposals/0028-modernizing-debug-identifiers.md) overloads<br>&gt;&gt; the use of #line to mean both an identifier that maps to a calling site&#39;s line number with a file and acts as part of a line control statement with the following grammar:<br>&gt;&gt; <br>&gt;&gt; line-control-statement → #line­<br>&gt;&gt; line-control-statement → #line­line-number­file-name­<br>&gt;&gt; line-number → A decimal integer greater than zero<br>&gt;&gt; file-name → static-string-literal­<br>&gt;&gt; <br>&gt;&gt; The accepted implementation of SE-0028 disambiguates the two by requiring #line (the control statement) to appear at the first column for the time being. This is a stop-gap solution best remedied by renaming #line. <br>&gt;&gt; <br>&gt;&gt; Chris Lattner writes, &quot;The core team isn’t thrilled with the magic “first token on a line” whitespace behavior that #line will be getting, and would like someone to start a discussion about renaming the old #line directive to something more specific and tailored to its purpose.   Once that name and syntax is settled, we can rename the directive and remove the whitespace rule.&quot;<br>&gt;&gt; <br>&gt;&gt; I&#39;d recommend #setline or #linenumber. Starting this thread to solicit other suggestions.<br>&gt;&gt; <br>&gt;&gt; Best, -- E<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160203/1e86c83d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Discussion]: Renaming #line, the line control statement</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>February  3, 2016 at 07:00:00pm</p></header><div class="content"><p>#source is already earmarked for future directions.<br></p><p>I&#39;m thinking #setline and #sourceline are both good.<br></p><p>&gt; On Feb 3, 2016, at 6:58 PM, Sean Heber &lt;sean at fifthace.com&gt; wrote:<br>&gt; <br>&gt; I like that reasoning. I&#39;d suggest even simpler and go with #source since it also can include a file name.<br>&gt; <br>&gt; l8r<br>&gt; Sean<br>&gt; <br>&gt; Sent from my iPad<br>&gt; <br>&gt; On Feb 3, 2016, at 7:32 PM, Jonathan Tang via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; The primary use for the existing #line directive is for generated code like parser/lexer generators, right?  If so, how about #sourceline, since it represents the line number in the original source code?  I&#39;m also fine with #setline, but don&#39;t like #linenumber because it&#39;s not clear what the difference is between it and #line.<br>&gt;&gt; <br>&gt;&gt; Actually, it&#39;d also be used to reset the line number back to the generated code, right?  In that case, #sourceline seems awkward, and maybe I&#39;ll just go with +1 to #setline.<br>&gt;&gt; <br>&gt;&gt; On Wed, Feb 3, 2016 at 5:24 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; Swift Evolution SE-0028 (https://github.com/apple/swift-evolution/blob/master/proposals/0028-modernizing-debug-identifiers.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0028-modernizing-debug-identifiers.md&gt;) overloads<br>&gt;&gt; the use of #line to mean both an identifier that maps to a calling site&#39;s line number with a file and acts as part of a line control statement with the following grammar:<br>&gt;&gt; <br>&gt;&gt; line-control-statement → #line­<br>&gt;&gt;  &lt;&gt;line-control-statement → #line­line-number &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/line-number&gt;­file-name &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/file-name&gt;­<br>&gt;&gt;  &lt;&gt;line-number → A decimal integer greater than zero<br>&gt;&gt;  &lt;&gt;file-name → static-string-literal &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/LexicalStructure.html#//apple_ref/swift/grammar/static-string-literal&gt;­<br>&gt;&gt; <br>&gt;&gt; The accepted implementation of SE-0028 disambiguates the two by requiring #line (the control statement) to appear at the first column for the time being. This is a stop-gap solution best remedied by renaming #line. <br>&gt;&gt; <br>&gt;&gt; Chris Lattner writes, &quot;The core team isn’t thrilled with the magic “first token on a line” whitespace behavior that #line will be getting, and would like someone to start a discussion about renaming the old #line directive to something more specific and tailored to its purpose.   Once that name and syntax is settled, we can rename the directive and remove the whitespace rule.&quot;<br>&gt;&gt; <br>&gt;&gt; I&#39;d recommend #setline or #linenumber. Starting this thread to solicit other suggestions.<br>&gt;&gt; <br>&gt;&gt; Best, -- E<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160203/7dfb3d1f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Discussion]: Renaming #line, the line control statement</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>February  3, 2016 at 06:00:00pm</p></header><div class="content"><p>I&#39;m in favor of #setline. It has as nice match to #line because #setline<br>changes the value that #line returns.<br></p><p>-Kevin Ballard<br></p><p>On Wed, Feb 3, 2016, at 06:19 PM, Erica Sadun via swift-evolution wrote:<br>&gt; #source is already earmarked for future directions.<br>&gt;<br>&gt; I&#39;m thinking #setline and #sourceline are both good.<br>&gt;<br>&gt;&gt; On Feb 3, 2016, at 6:58 PM, Sean Heber &lt;sean at fifthace.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I like that reasoning. I&#39;d suggest even simpler and go with #source<br>&gt;&gt; since it also can include a file name.<br>&gt;&gt;<br>&gt;&gt; l8r Sean<br>&gt;&gt;<br>&gt;&gt; Sent from my iPad<br>&gt;&gt;<br>&gt;&gt; On Feb 3, 2016, at 7:32 PM, Jonathan Tang via swift-evolution &lt;swift-<br>&gt;&gt; evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; The primary use for the existing #line directive is for generated<br>&gt;&gt;&gt; code like parser/lexer generators, right?  If so, how about<br>&gt;&gt;&gt; #sourceline, since it represents the line number in the original<br>&gt;&gt;&gt; source code?  I&#39;m also fine with #setline, but don&#39;t like<br>&gt;&gt;&gt; #linenumber because it&#39;s not clear what the difference is between it<br>&gt;&gt;&gt; and #line.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Actually, it&#39;d also be used to reset the line number back to the<br>&gt;&gt;&gt; generated code, right?  In that case, #sourceline seems awkward, and<br>&gt;&gt;&gt; maybe I&#39;ll just go with +1 to #setline.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Wed, Feb 3, 2016 at 5:24 PM, Erica Sadun via swift-evolution &lt;swift-<br>&gt;&gt;&gt; evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; Swift Evolution SE-0028<br>&gt;&gt;&gt;&gt; (https://github.com/apple/swift-evolution/blob/master/proposals/0028-modernizing-debug-identifiers.md)<br>&gt;&gt;&gt;&gt; overloads the use of #line to mean both an identifier that maps to<br>&gt;&gt;&gt;&gt; a calling site&#39;s line number with a file and acts as part of a line<br>&gt;&gt;&gt;&gt; control statement with the following grammar:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; *line-control-statement *→ #line­ *line-control-statement *→ #line­*line-number[1]­**file-<br>&gt;&gt;&gt;&gt; name[2]­* *line-number *→ A decimal integer greater than zero *file-<br>&gt;&gt;&gt;&gt; name *→ *static-string-literal[3]­*<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; The accepted implementation of SE-0028 disambiguates the two by<br>&gt;&gt;&gt;&gt; requiring #line (the control statement) to appear at the first<br>&gt;&gt;&gt;&gt; column for the time being. This is a stop-gap solution best<br>&gt;&gt;&gt;&gt; remedied by renaming #line.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Chris Lattner writes, &quot;The core team isn’t thrilled with the magic<br>&gt;&gt;&gt;&gt; “first token on a line” whitespace behavior that #line will be<br>&gt;&gt;&gt;&gt; getting, and would like someone to start a discussion about<br>&gt;&gt;&gt;&gt; renaming the old #line directive to something more specific and<br>&gt;&gt;&gt;&gt; tailored to its purpose.   Once that name and syntax is settled, we<br>&gt;&gt;&gt;&gt; can rename the directive and remove the whitespace rule.&quot;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I&#39;d recommend #setline or #linenumber. Starting this thread to<br>&gt;&gt;&gt;&gt; solicit other suggestions.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Best, -- E<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;<br>swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _________________________________________________<br>&gt; swift-evolution mailing list swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br></p><p>Links:<br></p><p>  1. https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/line-number<br>  2. https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/file-name<br>  3. https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/LexicalStructure.html#//apple_ref/swift/grammar/static-string-literal<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160203/ba3d68db/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f38cb038c3d9ae705c4db3b5b5272906?s=50"></div><header><strong>[Discussion]: Renaming #line, the line control statement</strong> from <string>Greg Parker</string> &lt;gparker at apple.com&gt;<p>February  3, 2016 at 07:00:00pm</p></header><div class="content"><p>I like something that has a verb. We don&#39;t expect humans to write this directive, so we should optimize to prevent accidental use of this where you really wanted #line. #setline is better than #sourceline by that metric.<br></p><p>&gt; On Feb 3, 2016, at 6:54 PM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;m in favor of #setline. It has as nice match to #line because #setline changes the value that #line returns.<br>&gt;  <br>&gt; -Kevin Ballard<br>&gt;  <br>&gt; On Wed, Feb 3, 2016, at 06:19 PM, Erica Sadun via swift-evolution wrote:<br>&gt;&gt; #source is already earmarked for future directions.<br>&gt;&gt;  <br>&gt;&gt; I&#39;m thinking #setline and #sourceline are both good.<br>&gt;&gt;  <br>&gt;&gt;&gt; On Feb 3, 2016, at 6:58 PM, Sean Heber &lt;sean at fifthace.com &lt;mailto:sean at fifthace.com&gt;&gt; wrote:<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; I like that reasoning. I&#39;d suggest even simpler and go with #source since it also can include a file name.<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; l8r<br>&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; On Feb 3, 2016, at 7:32 PM, Jonathan Tang via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; The primary use for the existing #line directive is for generated code like parser/lexer generators, right?  If so, how about #sourceline, since it represents the line number in the original source code?  I&#39;m also fine with #setline, but don&#39;t like #linenumber because it&#39;s not clear what the difference is between it and #line.<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; Actually, it&#39;d also be used to reset the line number back to the generated code, right?  In that case, #sourceline seems awkward, and maybe I&#39;ll just go with +1 to #setline.<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; On Wed, Feb 3, 2016 at 5:24 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; Swift Evolution SE-0028 (https://github.com/apple/swift-evolution/blob/master/proposals/0028-modernizing-debug-identifiers.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0028-modernizing-debug-identifiers.md&gt;) overloads<br>&gt;&gt;&gt;&gt; the use of #line to mean both an identifier that maps to a calling site&#39;s line number with a file and acts as part of a line control statement with the following grammar:<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; line-control-statement → #line­<br>&gt;&gt;&gt;&gt;  &lt;&gt;line-control-statement → #line­line-number &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/line-number&gt;­file-name &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/file-name&gt;­<br>&gt;&gt;&gt;&gt;  &lt;&gt;line-number → A decimal integer greater than zero<br>&gt;&gt;&gt;&gt;  &lt;&gt;file-name → static-string-literal &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/LexicalStructure.html#//apple_ref/swift/grammar/static-string-literal&gt;­<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; The accepted implementation of SE-0028 disambiguates the two by requiring #line (the control statement) to appear at the first column for the time being. This is a stop-gap solution best remedied by renaming #line. <br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; Chris Lattner writes, &quot;The core team isn’t thrilled with the magic “first token on a line” whitespace behavior that #line will be getting, and would like someone to start a discussion about renaming the old #line directive to something more specific and tailored to its purpose.   Once that name and syntax is settled, we can rename the directive and remove the whitespace rule.&quot;<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; I&#39;d recommend #setline or #linenumber. Starting this thread to solicit other suggestions.<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; Best, -- E<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160203/5edf68cd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/73a38bb7bc9528e31098defe30e68ea4?s=50"></div><header><strong>[Discussion]: Renaming #line, the line control statement</strong> from <string>Jean-Daniel Dupas</string> &lt;mailing at xenonium.com&gt;<p>February  4, 2016 at 08:00:00am</p></header><div class="content"><p>+1 for using a verb. We don’t need that statement to be short, we just need it to avoid any potential future conflict and so we can make it explicit.<br></p><p>#setline or #setlocation as it does not just change the line, but may change the filename too.<br></p><p>&gt; Le 4 févr. 2016 à 04:13, Greg Parker via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; I like something that has a verb. We don&#39;t expect humans to write this directive, so we should optimize to prevent accidental use of this where you really wanted #line. #setline is better than #sourceline by that metric.<br>&gt; <br>&gt;&gt; On Feb 3, 2016, at 6:54 PM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I&#39;m in favor of #setline. It has as nice match to #line because #setline changes the value that #line returns.<br>&gt;&gt;  <br>&gt;&gt; -Kevin Ballard<br>&gt;&gt;  <br>&gt;&gt; On Wed, Feb 3, 2016, at 06:19 PM, Erica Sadun via swift-evolution wrote:<br>&gt;&gt;&gt; #source is already earmarked for future directions.<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; I&#39;m thinking #setline and #sourceline are both good.<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; On Feb 3, 2016, at 6:58 PM, Sean Heber &lt;sean at fifthace.com &lt;mailto:sean at fifthace.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; I like that reasoning. I&#39;d suggest even simpler and go with #source since it also can include a file name.<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; l8r<br>&gt;&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; On Feb 3, 2016, at 7:32 PM, Jonathan Tang via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; The primary use for the existing #line directive is for generated code like parser/lexer generators, right?  If so, how about #sourceline, since it represents the line number in the original source code?  I&#39;m also fine with #setline, but don&#39;t like #linenumber because it&#39;s not clear what the difference is between it and #line.<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; Actually, it&#39;d also be used to reset the line number back to the generated code, right?  In that case, #sourceline seems awkward, and maybe I&#39;ll just go with +1 to #setline.<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; On Wed, Feb 3, 2016 at 5:24 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; Swift Evolution SE-0028 (https://github.com/apple/swift-evolution/blob/master/proposals/0028-modernizing-debug-identifiers.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0028-modernizing-debug-identifiers.md&gt;) overloads<br>&gt;&gt;&gt;&gt;&gt; the use of #line to mean both an identifier that maps to a calling site&#39;s line number with a file and acts as part of a line control statement with the following grammar:<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; line-control-statement → #line­<br>&gt;&gt;&gt;&gt;&gt;  &lt;&gt;line-control-statement → #line­line-number &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/line-number&gt;­file-name &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/file-name&gt;­<br>&gt;&gt;&gt;&gt;&gt;  &lt;&gt;line-number → A decimal integer greater than zero<br>&gt;&gt;&gt;&gt;&gt;  &lt;&gt;file-name → static-string-literal &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/LexicalStructure.html#//apple_ref/swift/grammar/static-string-literal&gt;­<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; The accepted implementation of SE-0028 disambiguates the two by requiring #line (the control statement) to appear at the first column for the time being. This is a stop-gap solution best remedied by renaming #line. <br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; Chris Lattner writes, &quot;The core team isn’t thrilled with the magic “first token on a line” whitespace behavior that #line will be getting, and would like someone to start a discussion about renaming the old #line directive to something more specific and tailored to its purpose.   Once that name and syntax is settled, we can rename the directive and remove the whitespace rule.&quot;<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; I&#39;d recommend #setline or #linenumber. Starting this thread to solicit other suggestions.<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; Best, -- E<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;  <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160204/d7d0d256/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Discussion]: Renaming #line, the line control statement</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>February  3, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; line-control-statement → #line­<br>&gt; line-control-statement → #line­line-number­file-name­<br>&gt; line-number → A decimal integer greater than zero<br>&gt; file-name → static-string-literal­<br>&gt; <br>&gt; The accepted implementation of SE-0028 disambiguates the two by requiring #line (the control statement) to appear at the first column for the time being. This is a stop-gap solution best remedied by renaming #line. <br>&gt; <br>&gt; Chris Lattner writes, &quot;The core team isn’t thrilled with the magic “first token on a line” whitespace behavior that #line will be getting, and would like someone to start a discussion about renaming the old #line directive to something more specific and tailored to its purpose.   Once that name and syntax is settled, we can rename the directive and remove the whitespace rule.&quot;<br>&gt; <br>&gt; I&#39;d recommend #setline or #linenumber. Starting this thread to solicit other suggestions.<br></p><p>I don&#39;t love the way the current format has two unlabeled parameters in an arbitrary order. Maybe something more like this?<br></p><p>	#reset line=50, file=&quot;foo.swift&quot;<br></p><p>(I have a soft preference for &quot;reset&quot; over &quot;set&quot; because these are things the compiler changes automatically, but that might be a silly reason.)<br></p><p>Perhaps this could even let you set any combination of the #whatever parameters, so if, for instance, you were writing a parser generator, you could set #function to the name of the rule a particular piece of code came from.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Discussion]: Renaming #line, the line control statement</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>February  4, 2016 at 03:00:00am</p></header><div class="content"><p>Is it true that this feature is only for the purpose of debug symbols /<br>compiler message locations? If so, what about including the word &quot;debug&quot;,<br>such as #debugline ?<br>On Wed, Feb 3, 2016 at 7:29 PM Brent Royal-Gordon via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; &gt; line-control-statement → #line­<br>&gt; &gt; line-control-statement → #line­line-number­file-name­<br>&gt; &gt; line-number → A decimal integer greater than zero<br>&gt; &gt; file-name → static-string-literal­<br>&gt; &gt;<br>&gt; &gt; The accepted implementation of SE-0028 disambiguates the two by<br>&gt; requiring #line (the control statement) to appear at the first column for<br>&gt; the time being. This is a stop-gap solution best remedied by renaming #line.<br>&gt; &gt;<br>&gt; &gt; Chris Lattner writes, &quot;The core team isn’t thrilled with the magic<br>&gt; “first token on a line” whitespace behavior that #line will be getting, and<br>&gt; would like someone to start a discussion about renaming the old #line<br>&gt; directive to something more specific and tailored to its purpose.   Once<br>&gt; that name and syntax is settled, we can rename the directive and remove the<br>&gt; whitespace rule.&quot;<br>&gt; &gt;<br>&gt; &gt; I&#39;d recommend #setline or #linenumber. Starting this thread to solicit<br>&gt; other suggestions.<br>&gt;<br>&gt; I don&#39;t love the way the current format has two unlabeled parameters in an<br>&gt; arbitrary order. Maybe something more like this?<br>&gt;<br>&gt;         #reset line=50, file=&quot;foo.swift&quot;<br>&gt;<br>&gt; (I have a soft preference for &quot;reset&quot; over &quot;set&quot; because these are things<br>&gt; the compiler changes automatically, but that might be a silly reason.)<br>&gt;<br>&gt; Perhaps this could even let you set any combination of the #whatever<br>&gt; parameters, so if, for instance, you were writing a parser generator, you<br>&gt; could set #function to the name of the rule a particular piece of code came<br>&gt; from.<br>&gt;<br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160204/a0df2c26/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Discussion]: Renaming #line, the line control statement</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>February  4, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Feb 3, 2016, at 8:29 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt; line-control-statement → #line­<br>&gt;&gt; line-control-statement → #line­line-number­file-name­<br>&gt;&gt; line-number → A decimal integer greater than zero<br>&gt;&gt; file-name → static-string-literal­<br>&gt;&gt; <br>&gt;&gt; The accepted implementation of SE-0028 disambiguates the two by requiring #line (the control statement) to appear at the first column for the time being. This is a stop-gap solution best remedied by renaming #line. <br>&gt; <br>&gt; I don&#39;t love the way the current format has two unlabeled parameters in an arbitrary order. Maybe something more like this?<br>&gt; <br>&gt; 	#reset line=50, file=&quot;foo.swift&quot;<br>&gt; <br>&gt; (I have a soft preference for &quot;reset&quot; over &quot;set&quot; because these are things the compiler changes automatically, but that might be a silly reason.)<br>&gt; <br>&gt; Perhaps this could even let you set any combination of the #whatever parameters, so if, for instance, you were writing a parser generator, you could set #function to the name of the rule a particular piece of code came from.<br>&gt; <br>&gt; <br></p><p>I like the idea of generalizing this a lot more than just going with #setline, which is otherwise currently the most popular response in this thread.<br></p><p>-- E<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Discussion]: Renaming #line, the line control statement</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>February  4, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Feb 3, 2016, at 7:29 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; line-control-statement → #line­<br>&gt;&gt; line-control-statement → #line­line-number­file-name­<br>&gt;&gt; line-number → A decimal integer greater than zero<br>&gt;&gt; file-name → static-string-literal­<br>&gt;&gt; <br>&gt;&gt; The accepted implementation of SE-0028 disambiguates the two by requiring #line (the control statement) to appear at the first column for the time being. This is a stop-gap solution best remedied by renaming #line. <br>&gt;&gt; <br>&gt;&gt; Chris Lattner writes, &quot;The core team isn’t thrilled with the magic “first token on a line” whitespace behavior that #line will be getting, and would like someone to start a discussion about renaming the old #line directive to something more specific and tailored to its purpose.   Once that name and syntax is settled, we can rename the directive and remove the whitespace rule.&quot;<br>&gt;&gt; <br>&gt;&gt; I&#39;d recommend #setline or #linenumber. Starting this thread to solicit other suggestions.<br>&gt; <br>&gt; I don&#39;t love the way the current format has two unlabeled parameters in an arbitrary order. Maybe something more like this?<br>&gt; <br>&gt; 	#reset line=50, file=&quot;foo.swift&quot;<br>&gt; <br>&gt; (I have a soft preference for &quot;reset&quot; over &quot;set&quot; because these are things the compiler changes automatically, but that might be a silly reason.)<br>&gt; <br>&gt; Perhaps this could even let you set any combination of the #whatever parameters, so if, for instance, you were writing a parser generator, you could set #function to the name of the rule a particular piece of code came from.<br></p><p>Using something like this as the grammar structure makes sense to me, but I’d suggest something more specific (and longer) for this, perhaps:<br></p><p>#setsyntacticsourcelocation<br></p><p>or something. :-)<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Discussion]: Renaming #line, the line control statement</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>February  4, 2016 at 10:00:00am</p></header><div class="content"><p>What do you feel about something more like:<br></p><p>syntactic-context-statement → #setsyntaxcontext<br>syntactic-context-statement → #setsyntaxcontext syntactic-control-assignments<br>syntactic-control-assignments → syntactic-control-assignments, syntactic-control-assignment<br>syntactic-control-assignments → syntactic-control-assignment<br>syntactic-control-assignment → line = line-number<br>syntactic-control-assignment → file = file-name<br>syntactic-control-assignment → column = column-number<br>syntactic-control-assignment → function = function-name<br>syntactic-control-assignment → dsohandle = dsohandle-name<br></p><p>-- E<br></p><p><br>&gt; On Feb 4, 2016, at 10:31 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Feb 3, 2016, at 7:29 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; line-control-statement → #line­<br>&gt;&gt;&gt; line-control-statement → #line ­line-number­ file-name­<br>&gt;&gt;&gt; line-number → A decimal integer greater than zero<br>&gt;&gt;&gt; file-name → static-string-literal­<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The accepted implementation of SE-0028 disambiguates the two by requiring #line (the control statement) to appear at the first column for the time being. This is a stop-gap solution best remedied by renaming #line. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Chris Lattner writes, &quot;The core team isn’t thrilled with the magic “first token on a line” whitespace behavior that #line will be getting, and would like someone to start a discussion about renaming the old #line directive to something more specific and tailored to its purpose.   Once that name and syntax is settled, we can rename the directive and remove the whitespace rule.&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;d recommend #setline or #linenumber. Starting this thread to solicit other suggestions.<br>&gt;&gt; <br>&gt;&gt; I don&#39;t love the way the current format has two unlabeled parameters in an arbitrary order. Maybe something more like this?<br>&gt;&gt; <br>&gt;&gt; 	#reset line=50, file=&quot;foo.swift&quot;<br>&gt;&gt; <br>&gt;&gt; (I have a soft preference for &quot;reset&quot; over &quot;set&quot; because these are things the compiler changes automatically, but that might be a silly reason.)<br>&gt;&gt; <br>&gt;&gt; Perhaps this could even let you set any combination of the #whatever parameters, so if, for instance, you were writing a parser generator, you could set #function to the name of the rule a particular piece of code came from.<br>&gt; <br>&gt; Using something like this as the grammar structure makes sense to me, but I’d suggest something more specific (and longer) for this, perhaps:<br>&gt; <br>&gt; #setsyntacticsourcelocation<br>&gt; <br>&gt; or something. :-)<br>&gt; <br>&gt; -Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160204/5ff552b9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Discussion]: Renaming #line, the line control statement</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>February  4, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Feb 4, 2016, at 9:46 AM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; What do you feel about something more like:<br>&gt; <br>&gt; syntactic-context-statement → #setsyntaxcontext<br>&gt; syntactic-context-statement → #setsyntaxcontext syntactic-control-assignments<br>&gt; syntactic-control-assignments → syntactic-control-assignments, syntactic-control-assignment<br>&gt; syntactic-control-assignments → syntactic-control-assignment<br>&gt; syntactic-control-assignment → line = line-number<br>&gt; syntactic-control-assignment → file = file-name<br>&gt; syntactic-control-assignment → column = column-number<br>&gt; syntactic-control-assignment → function = function-name<br>&gt; syntactic-control-assignment → dsohandle = dsohandle-name<br></p><p>Something like this makes sense to me, but only file and line can really be set by this construct.<br></p><p>-Chris<br></p><p>&gt; <br>&gt; -- E<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 4, 2016, at 10:31 AM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Feb 3, 2016, at 7:29 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; line-control-statement → #line­<br>&gt;&gt;&gt;&gt; line-control-statement → #line ­line-number­ file-name­<br>&gt;&gt;&gt;&gt; line-number → A decimal integer greater than zero<br>&gt;&gt;&gt;&gt; file-name → static-string-literal­<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The accepted implementation of SE-0028 disambiguates the two by requiring #line (the control statement) to appear at the first column for the time being. This is a stop-gap solution best remedied by renaming #line. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Chris Lattner writes, &quot;The core team isn’t thrilled with the magic “first token on a line” whitespace behavior that #line will be getting, and would like someone to start a discussion about renaming the old #line directive to something more specific and tailored to its purpose.   Once that name and syntax is settled, we can rename the directive and remove the whitespace rule.&quot;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;d recommend #setline or #linenumber. Starting this thread to solicit other suggestions.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t love the way the current format has two unlabeled parameters in an arbitrary order. Maybe something more like this?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	#reset line=50, file=&quot;foo.swift&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; (I have a soft preference for &quot;reset&quot; over &quot;set&quot; because these are things the compiler changes automatically, but that might be a silly reason.)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Perhaps this could even let you set any combination of the #whatever parameters, so if, for instance, you were writing a parser generator, you could set #function to the name of the rule a particular piece of code came from.<br>&gt;&gt; <br>&gt;&gt; Using something like this as the grammar structure makes sense to me, but I’d suggest something more specific (and longer) for this, perhaps:<br>&gt;&gt; <br>&gt;&gt; #setsyntacticsourcelocation<br>&gt;&gt; <br>&gt;&gt; or something. :-)<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160204/29dd7b83/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Discussion]: Renaming #line, the line control statement</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>February  4, 2016 at 10:00:00am</p></header><div class="content"><p>How about this then?<br></p><p>syntactic-context-statement → #setsyntaxcontext<br>syntactic-context-statement → #setsyntaxcontext syntactic-control-assignments<br>syntactic-control-assignments → syntactic-control-assignments, syntactic-control-assignment<br>syntactic-control-assignments → syntactic-control-assignment<br>syntactic-control-assignment → line = line-number<br>syntactic-control-assignment → file = file-name<br></p><p>* It offers a specific identifier that&#39;s unlikely to conflict with future keywords<br>* It enables the grammar to expand for future syntactic control assignments<br>* It adds labels so dropped arguments and arbitrary order are easily disambiguated (thanks BRG)<br></p><p>I know Brent prefers reset to set (#resetsyntaxcontext to #setsyntaxcontext), and wanted to punch that point again here.<br></p><p>-- E<br></p><p>&gt; On Feb 4, 2016, at 10:49 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Feb 4, 2016, at 9:46 AM, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; What do you feel about something more like:<br>&gt;&gt; <br>&gt;&gt; syntactic-context-statement → #setsyntaxcontext<br>&gt;&gt; syntactic-context-statement → #setsyntaxcontext syntactic-control-assignments<br>&gt;&gt; syntactic-control-assignments → syntactic-control-assignments, syntactic-control-assignment<br>&gt;&gt; syntactic-control-assignments → syntactic-control-assignment<br>&gt;&gt; syntactic-control-assignment → line = line-number<br>&gt;&gt; syntactic-control-assignment → file = file-name<br>&gt;&gt; syntactic-control-assignment → column = column-number<br>&gt;&gt; syntactic-control-assignment → function = function-name<br>&gt;&gt; syntactic-control-assignment → dsohandle = dsohandle-name<br>&gt; <br>&gt; Something like this makes sense to me, but only file and line can really be set by this construct.<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt;&gt; <br>&gt;&gt; -- E<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 4, 2016, at 10:31 AM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 3, 2016, at 7:29 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; line-control-statement → #line­<br>&gt;&gt;&gt;&gt;&gt; line-control-statement → #line ­line-number­ file-name­<br>&gt;&gt;&gt;&gt;&gt; line-number → A decimal integer greater than zero<br>&gt;&gt;&gt;&gt;&gt; file-name → static-string-literal­<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The accepted implementation of SE-0028 disambiguates the two by requiring #line (the control statement) to appear at the first column for the time being. This is a stop-gap solution best remedied by renaming #line. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Chris Lattner writes, &quot;The core team isn’t thrilled with the magic “first token on a line” whitespace behavior that #line will be getting, and would like someone to start a discussion about renaming the old #line directive to something more specific and tailored to its purpose.   Once that name and syntax is settled, we can rename the directive and remove the whitespace rule.&quot;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I&#39;d recommend #setline or #linenumber. Starting this thread to solicit other suggestions.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I don&#39;t love the way the current format has two unlabeled parameters in an arbitrary order. Maybe something more like this?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	#reset line=50, file=&quot;foo.swift&quot;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; (I have a soft preference for &quot;reset&quot; over &quot;set&quot; because these are things the compiler changes automatically, but that might be a silly reason.)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Perhaps this could even let you set any combination of the #whatever parameters, so if, for instance, you were writing a parser generator, you could set #function to the name of the rule a particular piece of code came from.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Using something like this as the grammar structure makes sense to me, but I’d suggest something more specific (and longer) for this, perhaps:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; #setsyntacticsourcelocation<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; or something. :-)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160204/02735f00/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Discussion]: Renaming #line, the line control statement</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>February  4, 2016 at 01:00:00pm</p></header><div class="content"><p>I think you&#39;re seriously over-designing here.<br></p><p>This feature isn&#39;t something end users are going to use. And it&#39;s not<br>something that will ever reasonably apply to anything except #file and<br>#line. This feature is only ever intended to be used by tools that auto-<br>generate source files. The most important concerns here really should<br>just be that whatever we use is trivial to generate correctly by even<br>the simplest of tools and is readable. And since this won&#39;t ever apply<br>to anything beyond #file and #line, there&#39;s no need to try to generalize<br>this feature at all.<br></p><p>To that end, since the precedent here is for the compiler directive<br>#line, I repeat my +1 for #setline. It has the verb, which Greg Parker<br>rightly points out is a good idea, and it&#39;s the simplest solution that<br>happens to be the closest to the existing precedent (which will help<br>because any tools that generate these directives for multiple languages,<br>or for multiple versions of Swift, only have to include/omit the word<br>&quot;set&quot; instead of generating two completely different directives, and<br>similarly it becomes trivial to take tools that generate #line<br>directives and fix up the output with something like `tool | sed<br>&#39;s/^#line\b/#setline/&#39;).<br></p><p>-Kevin Ballard<br></p><p>On Thu, Feb 4, 2016, at 09:55 AM, Erica Sadun via swift-evolution wrote:<br>&gt; How about this then?<br>&gt;<br>&gt; syntactic-context-statement → #setsyntaxcontext syntactic-context-<br>&gt; statement → #setsyntaxcontext syntactic-control-assignments syntactic-control-<br>&gt; assignments → syntactic-control-assignments, syntactic-control-<br>&gt; assignment<br>&gt;<br>&gt; syntactic-control-assignments → syntactic-control-assignment syntactic-control-<br>&gt; assignment → line = line-number syntactic-control-assignment → file =<br>&gt; file-name<br>&gt;<br>&gt; * It offers a specific identifier that&#39;s unlikely to conflict with<br>&gt;   future keywords<br>&gt; * It enables the grammar to expand for future syntactic control<br>&gt;   assignments<br>&gt; * It adds labels so dropped arguments and arbitrary order are easily<br>&gt;   disambiguated (thanks BRG)<br>&gt;<br>&gt; I know Brent prefers reset to set (#resetsyntaxcontext to<br>&gt; #setsyntaxcontext), and wanted to punch that point again here.<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt;&gt; On Feb 4, 2016, at 10:49 AM, Chris Lattner<br>&gt;&gt; &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Feb 4, 2016, at 9:46 AM, Erica Sadun &lt;erica at ericasadun.com&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; What do you feel about something more like:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; syntactic-context-statement → #setsyntaxcontext syntactic-context-<br>&gt;&gt;&gt; statement → #setsyntaxcontext syntactic-control-assignments syntactic-control-<br>&gt;&gt;&gt; assignments → syntactic-control-assignments, syntactic-control-<br>&gt;&gt;&gt; assignment<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; syntactic-control-assignments → syntactic-control-assignment syntactic-control-<br>&gt;&gt;&gt; assignment → line = line-number syntactic-control-assignment → file<br>&gt;&gt;&gt; = file-name syntactic-control-assignment → column = column-number<br>&gt;&gt;&gt; syntactic-control-assignment → function = function-name syntactic-control-<br>&gt;&gt;&gt; assignment → dsohandle = dsohandle-name<br>&gt;&gt;<br>&gt;&gt; Something like this makes sense to me, but only file and line can<br>&gt;&gt; really be set by this construct.<br>&gt;&gt;<br>&gt;&gt; -Chris<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; -- E<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Feb 4, 2016, at 10:31 AM, Chris Lattner &lt;clattner at apple.com&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Feb 3, 2016, at 7:29 PM, Brent Royal-Gordon via swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; line-control-statement → #line­ line-control-statement → #line<br>&gt;&gt;&gt;&gt;&gt;&gt; ­line-number­ file-name­ line-number → A decimal integer greater<br>&gt;&gt;&gt;&gt;&gt;&gt; than zero file-name → static-string-literal­<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; The accepted implementation of SE-0028 disambiguates the two by<br>&gt;&gt;&gt;&gt;&gt;&gt; requiring #line (the control statement) to appear at the first<br>&gt;&gt;&gt;&gt;&gt;&gt; column for the time being. This is a stop-gap solution best<br>&gt;&gt;&gt;&gt;&gt;&gt; remedied by renaming #line.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Chris Lattner writes, &quot;The core team isn’t thrilled with the<br>&gt;&gt;&gt;&gt;&gt;&gt; magic “first token on a line” whitespace behavior that #line will<br>&gt;&gt;&gt;&gt;&gt;&gt; be getting, and would like someone to start a discussion about<br>&gt;&gt;&gt;&gt;&gt;&gt; renaming the old #line directive to something more specific and<br>&gt;&gt;&gt;&gt;&gt;&gt; tailored to its purpose.   Once that name and syntax is settled,<br>&gt;&gt;&gt;&gt;&gt;&gt; we can rename the directive and remove the whitespace rule.&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; I&#39;d recommend #setline or #linenumber. Starting this thread to<br>&gt;&gt;&gt;&gt;&gt;&gt; solicit other suggestions.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I don&#39;t love the way the current format has two unlabeled<br>&gt;&gt;&gt;&gt;&gt; parameters in an arbitrary order. Maybe something more like this?<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; #reset line=50, file=&quot;foo.swift&quot;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; (I have a soft preference for &quot;reset&quot; over &quot;set&quot; because these are<br>&gt;&gt;&gt;&gt;&gt; things the compiler changes automatically, but that might be a<br>&gt;&gt;&gt;&gt;&gt; silly reason.)<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Perhaps this could even let you set any combination of the<br>&gt;&gt;&gt;&gt;&gt; #whatever parameters, so if, for instance, you were writing a<br>&gt;&gt;&gt;&gt;&gt; parser generator, you could set #function to the name of the rule<br>&gt;&gt;&gt;&gt;&gt; a particular piece of code came from.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Using something like this as the grammar structure makes sense to<br>&gt;&gt;&gt;&gt; me, but I’d suggest something more specific (and longer) for this,<br>&gt;&gt;&gt;&gt; perhaps:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; #setsyntacticsourcelocation<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; or something. :-)<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; -Chris<br>&gt;<br>&gt; _________________________________________________<br>&gt; swift-evolution mailing list swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160204/fcb29502/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Discussion]: Renaming #line, the line control statement</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>February  4, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; And it&#39;s not something that will ever reasonably apply to anything except #file and #line.<br></p><p>Why not `#function`, at least? `#function` is a human-readable indication of the surrounding unit of code. It&#39;s not intended to be used to look things up in the compiled file. If you&#39;re generating code from a definition somewhere, shouldn&#39;t `#function` properly reference that definition, not whatever random garbage your generator spat out because it was easier to structure the generated code that way?<br></p><p>Certainly `#dsoHandle` and the hypothetical `#mangledName`, which refer to locations in compiled code and can be used to look code up at runtime, shouldn&#39;t be settable, but I think all of the things that point to source code locations ought to be fair game.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Discussion]: Renaming #line, the line control statement</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>February  4, 2016 at 01:00:00pm</p></header><div class="content"><p>I don&#39;t think we can support arbitrary replacements for #function, since it&#39;s perfectly reasonable for people to write code that expects the format of #function to match what Swift generates.<br></p><p>With a theoretical #sourcecontext (or whatever the proposed name is) that vends different properties for different representations, it&#39;s reasonable to have a property that&#39;s explicitly intended to be a human-readable description of the function and therefore suitable for letting the description be overridden. But in that case, I&#39;d suggest adding an @attribute to override the human-readable name for the function instead of using a #directive. Two reasons why:<br></p><p>1. It&#39;s reasonable to expect that the description of the function remains constant for the entire function, which means it shouldn&#39;t be possible to change the function description halfway through the function, and<br>2. Unlike file/line, the function context is a stack, and when the function ends, the parent context takes over (e.g. if you have nested functions or closures in a function). And allowing #set-style directives to override the function description seems like it would be confusing; does it replace the current info, or push new info that has to be popped by another directive, or what? Restricting this kind of overriding to an @attribute on the function declaration eliminates this confusion.<br></p><p>-Kevin Ballard<br></p><p>On Thu, Feb 4, 2016, at 01:40 PM, Brent Royal-Gordon wrote:<br>&gt; &gt; And it&#39;s not something that will ever reasonably apply to anything except #file and #line.<br>&gt; <br>&gt; Why not `#function`, at least? `#function` is a human-readable indication of the surrounding unit of code. It&#39;s not intended to be used to look things up in the compiled file. If you&#39;re generating code from a definition somewhere, shouldn&#39;t `#function` properly reference that definition, not whatever random garbage your generator spat out because it was easier to structure the generated code that way?<br>&gt; <br>&gt; Certainly `#dsoHandle` and the hypothetical `#mangledName`, which refer to locations in compiled code and can be used to look code up at runtime, shouldn&#39;t be settable, but I think all of the things that point to source code locations ought to be fair game.<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Discussion]: Renaming #line, the line control statement</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>February  4, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Feb 4, 2016, at 1:49 PM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I don&#39;t think we can support arbitrary replacements for #function, since it&#39;s perfectly reasonable for people to write code that expects the format of #function to match what Swift generates.<br>&gt; <br>&gt; With a theoretical #sourcecontext (or whatever the proposed name is) that vends different properties for different representations, it&#39;s reasonable to have a property that&#39;s explicitly intended to be a human-readable description of the function and therefore suitable for letting the description be overridden. But in that case, I&#39;d suggest adding an @attribute to override the human-readable name for the function instead of using a #directive. Two reasons why:<br>&gt; <br>&gt; 1. It&#39;s reasonable to expect that the description of the function remains constant for the entire function, which means it shouldn&#39;t be possible to change the function description halfway through the function, and<br>&gt; 2. Unlike file/line, the function context is a stack, and when the function ends, the parent context takes over (e.g. if you have nested functions or closures in a function). And allowing #set-style directives to override the function description seems like it would be confusing; does it replace the current info, or push new info that has to be popped by another directive, or what? Restricting this kind of overriding to an @attribute on the function declaration eliminates this confusion.<br></p><p>I agree, and I’d add one more point: you didn’t mention a use case.<br></p><p>The existing #line (and I tend to agree with Kevin’s upthread commentary about #setline) feature exists for a very specific purpose: it is generated by source generation tools (e.g. gyb), and they are designed to change how compiler diagnostics and *debug information* are emitted.  Changing the function/symbol on the debugger isn’t something that is obviously good, because the debugger has a structured notion of the current frame which is a highly symbolic AST representation of the function.  A text string is probably not sufficient, and may not be necessary for all cases.  The important point though is that any discussion about adding it should be motivated by a concrete use-case, and what problem is being solved.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Discussion]: Renaming #line, the line control statement</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>February  5, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; I agree, and I’d add one more point: you didn’t mention a use case.<br>&gt; <br>&gt; The existing #line (and I tend to agree with Kevin’s upthread commentary about #setline) feature exists for a very specific purpose: it is generated by source generation tools (e.g. gyb), and they are designed to change how compiler diagnostics and *debug information* are emitted.  Changing the function/symbol on the debugger isn’t something that is obviously good, because the debugger has a structured notion of the current frame which is a highly symbolic AST representation of the function.  A text string is probably not sufficient, and may not be necessary for all cases.  The important point though is that any discussion about adding it should be motivated by a concrete use-case, and what problem is being solved.<br></p><p>But `#function` is not a structured representation of the function name suitable for debugger use, is it? It&#39;s not machine-parseable.<br></p><p>Here&#39;s my use case. I know a programmer who, in Objective-C, frequently uses a macro equivalent to this:<br></p><p>	func trace(functionName: StaticString = #function) {<br>		#if TRACE<br>			print(&quot;In \(functionName)&quot;)<br>		#endif<br>	}<br></p><p>He sprinkles these throughout his code and turns them on when he&#39;s trying to debug something where he thinks it&#39;d be helpful.<br></p><p>Now, imagine this guy wants to use his `trace()` function with a hypothetical Swift version of yacc, which like all yaccs writes an enormous ball of unreadable code in one big function for efficiency. So he writes a bunch of rules like:<br></p><p>	expression	:	expression &#39;+&#39; expression {<br>						trace()<br>						return FunctionCallNode(&quot;+&quot;, [$1, $3])<br>					}<br></p><p>What does `trace()` print? Normally it would print something like &quot;Parser.yyparse()&quot;, but wouldn&#39;t it be better to have it print &quot;action for rule `expression: expression &#39;+&#39; expression`&quot;?<br></p><p>I think these debug identifiers are best modeled as being split into two sets. #file, #line, #column, and #function (whatever it ends up being called) identify a location in source code and are, at least in theory, modifiable. #dsohandle and a hypothetical #mangledfunction (whatever it ends up being called) identify a location in compiled code and are not modifiable. (There might even be a third one of these representing the current offset into the function, as we see in crash reports.)<br></p><p>Even if we don&#39;t decide to do this now, I think we&#39;re better off choosing a syntax that can support this feature later. A syntax with name-value pairs is clearer anyway, and it also leaves the door open for us to do something like what I&#39;m describing in the future.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Discussion]: Renaming #line, the line control statement</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>February  8, 2016 at 11:00:00am</p></header><div class="content"><p>I&#39;m going to throw this out there so I can get this off my things-to-do list. This proposal puts forth `resetfilecontext` to match Brent&#39;s &quot;reset&quot; with Chris&#39;s well-specified long symbol: it describes what the command does and is unlikely to overlap with any future identifiers.<br></p><p>Feedback solicited. <br></p><p>-- E, who is casting her eye on a few other bike sheds and would like this one to be painted purple and done<br></p><p>Disambiguating Line Control Statements from Debugging Identifiers<br></p><p>Proposal: TBD<br>Author(s): Erica Sadun &lt;http://github.com/erica&gt;<br>Status: TBD<br>Review manager: TBD<br> &lt;https://gist.github.com/erica/8decc791e1319987eadd#introduction&gt;Introduction<br></p><p>In being accepted, Swift Evolution SE-0028 (https://github.com/apple/swift-evolution/blob/master/proposals/0028-modernizing-debug-identifiers.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0028-modernizing-debug-identifiers.md&gt;) overloads the use of #line to mean both an identifier that maps to a calling site&#39;s line number within a file and acts as part of a line control statement. This proposal nominates #resetfilecontext to replace #line for file and line syntactic source control.<br></p><p> &lt;https://gist.github.com/erica/8decc791e1319987eadd#motivation&gt;Motivation<br></p><p>Swift uses the the following grammar to define line control statements:<br></p><p>line-control-statement → #line­<br>line-control-statement → #line­line-number­file-name­<br>line-number → A decimal integer greater than zero<br>file-name → static-string-literal­<br>The accepted implementation of SE-0028 disambiguates the two uses by requiring #line (the control statement) to appear at the first column. This is a stop-gap solution best remedied by renaming #line. <br></p><p>The core team was not satisfied with the &#39;first token on a line&#39; whitespace behavior required for overloading #line. Chris Lattner requested a discussion about renaming the old #line directive to something more specific and tailored to its purpose: &quot;Once that name and syntax is settled, we can rename the directive and remove the whitespace rule.&quot; Chris also requested a well-specified long symbol, adding:<br></p><p>The existing #line feature exists for a very specific purpose: it is generated by source generation tools (e.g. gyb), and they are designed to change how compiler diagnostics and debug information are emitted. Changing the function/symbol on the debugger isn’t something that is obviously good, because the debugger has a structured notion of the current frame which is a highly symbolic AST representation of the function. A text string is probably not sufficient, and may not be necessary for all cases. The important point though is that any discussion about adding it should be motivated by a concrete use-case, and what problem is being solved.<br>The discussion took place on-line in the [Discussion]: Renaming #line, the line control statement thread.<br></p><p> &lt;https://gist.github.com/erica/8decc791e1319987eadd#detailed-design&gt;Detailed design<br></p><p>line-control-statement → #resetfilecontext<br>line-control-statement → #resetfilecontext line-number file-name<br>line-number → A decimal integer greater than zero<br>file-name → static-string-literal­<br> &lt;https://gist.github.com/erica/8decc791e1319987eadd#alternatives-considered&gt;Alternatives considered<br></p><p>Several alternatives were put forward, of which #setline was the most popular. This failed the &quot;make it specific and long&quot; (and presumably avoid future naming conflicts) request. <br></p><p>A more flexible grammar was suggested, however, as Kevin Ballard pointed out, &quot;This feature isn&#39;t something end users are going to use. And it&#39;s not something that will ever reasonably apply to anything except #file and #line. This feature is only ever intended to be used by tools that auto-generate source files. The most important concerns here really should just be that whatever we use is trivial to generate correctly by even the simplest of tools and is readable. And since this won&#39;t ever apply to anything beyond #file and #line, there&#39;s no need to try to generalize this feature at all.&quot;<br></p><p>A variety of other keywords were put forward in the discussion and can be found in the online discussion.<br></p><p><br></p><p><br>&gt; On Feb 4, 2016, at 4:06 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Feb 4, 2016, at 1:49 PM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I don&#39;t think we can support arbitrary replacements for #function, since it&#39;s perfectly reasonable for people to write code that expects the format of #function to match what Swift generates.<br>&gt;&gt; <br>&gt;&gt; With a theoretical #sourcecontext (or whatever the proposed name is) that vends different properties for different representations, it&#39;s reasonable to have a property that&#39;s explicitly intended to be a human-readable description of the function and therefore suitable for letting the description be overridden. But in that case, I&#39;d suggest adding an @attribute to override the human-readable name for the function instead of using a #directive. Two reasons why:<br>&gt;&gt; <br>&gt;&gt; 1. It&#39;s reasonable to expect that the description of the function remains constant for the entire function, which means it shouldn&#39;t be possible to change the function description halfway through the function, and<br>&gt;&gt; 2. Unlike file/line, the function context is a stack, and when the function ends, the parent context takes over (e.g. if you have nested functions or closures in a function). And allowing #set-style directives to override the function description seems like it would be confusing; does it replace the current info, or push new info that has to be popped by another directive, or what? Restricting this kind of overriding to an @attribute on the function declaration eliminates this confusion.<br>&gt; <br>&gt; I agree, and I’d add one more point: you didn’t mention a use case.<br>&gt; <br>&gt; The existing #line (and I tend to agree with Kevin’s upthread commentary about #setline) feature exists for a very specific purpose: it is generated by source generation tools (e.g. gyb), and they are designed to change how compiler diagnostics and *debug information* are emitted.  Changing the function/symbol on the debugger isn’t something that is obviously good, because the debugger has a structured notion of the current frame which is a highly symbolic AST representation of the function.  A text string is probably not sufficient, and may not be necessary for all cases.  The important point though is that any discussion about adding it should be motivated by a concrete use-case, and what problem is being solved.<br>&gt; <br>&gt; -Chris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160208/b55cc594/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Discussion]: Renaming #line, the line control statement</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>February  8, 2016 at 01:00:00pm</p></header><div class="content"><p>Where did &quot;make it long&quot; come from? I&#39;m not sure what the benefit is in<br>using a long identifier.<br></p><p>-Kevin Ballard<br></p><p>On Mon, Feb 8, 2016, at 10:09 AM, Erica Sadun wrote:<br>&gt; Several alternatives were put forward, of which #setline was the most<br>&gt; popular. This failed the &quot;make it specific and long&quot; (and presumably<br>&gt; avoid future naming conflicts) request.<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160208/58d30b4a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Discussion]: Renaming #line, the line control statement</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>February  8, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Feb 8, 2016, at 2:05 PM, Kevin Ballard &lt;kevin at sb.org&gt; wrote:<br>&gt; <br>&gt; Where did &quot;make it long&quot; come from? I&#39;m not sure what the benefit is in using a long identifier.<br>&gt;  <br>&gt; -Kevin Ballard<br>&gt;  <br>&gt; On Mon, Feb 8, 2016, at 10:09 AM, Erica Sadun wrote:<br>&gt;&gt; Several alternatives were put forward, of which #setline was the most popular. This failed the &quot;make it specific and long&quot; (and presumably avoid future naming conflicts) request. <br>&gt;&gt; <br>&gt;  <br></p><p>From this:<br></p><p>&gt; Using something like this as the grammar structure makes sense to me, but I’d suggest something more specific (and longer) for this, perhaps:<br>&gt; <br>&gt; #setsyntacticsourcelocation<br>&gt; <br>&gt; or something. :-)<br>&gt; <br>&gt; -Chris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160208/e01ea0ad/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Discussion]: Renaming #line, the line control statement</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>February 11, 2016 at 01:00:00pm</p></header><div class="content"><p>On Feb 8, 2016, at 10:09 AM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; -- E, who is casting her eye on a few other bike sheds and would like this one to be painted purple and done<br></p><p>I’d also like to “just get this done” as well.<br></p><p>&gt;  &lt;https://gist.github.com/erica/8decc791e1319987eadd#detailed-design&gt;Detailed design<br>&gt; line-control-statement → #resetfilecontext<br>I don’t think this is the right word, simply because “reset” implies more than “set” and “context” sounds more general than what we’re describing here.<br></p><p><br>How about:<br></p><p>#setdiagnosticlocation<br>#setdebuglocation<br>#setlogicallocation<br></p><p>… or, better yet, just go with the simple and seemingly obvious answer proposed on the other thread:<br></p><p>#setline<br></p><p>-Chris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/b541abb1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Discussion]: Renaming #line, the line control statement</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>February 11, 2016 at 03:00:00pm</p></header><div class="content"><p>I&#39;m good with #setline if I can throw this one out there and cross it off my list. Chris?<br></p><p>-- E<br></p><p>&gt; On Feb 11, 2016, at 2:17 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; On Feb 8, 2016, at 10:09 AM, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; -- E, who is casting her eye on a few other bike sheds and would like this one to be painted purple and done<br>&gt; <br>&gt; I’d also like to “just get this done” as well.<br>&gt; <br>&gt;&gt;  &lt;https://gist.github.com/erica/8decc791e1319987eadd#detailed-design&gt;Detailed design<br>&gt;&gt; line-control-statement → #resetfilecontext<br>&gt; I don’t think this is the right word, simply because “reset” implies more than “set” and “context” sounds more general than what we’re describing here.<br>&gt; <br>&gt; <br>&gt; How about:<br>&gt; <br>&gt; #setdiagnosticlocation<br>&gt; #setdebuglocation<br>&gt; #setlogicallocation<br>&gt; <br>&gt; … or, better yet, just go with the simple and seemingly obvious answer proposed on the other thread:<br>&gt; <br>&gt; #setline<br>&gt; <br>&gt; -Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/f2198a61/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Discussion]: Renaming #line, the line control statement</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>February 11, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Feb 11, 2016, at 2:30 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; I&#39;m good with #setline if I can throw this one out there and cross it off my list. Chris?<br></p><p>SGTM!<br></p><p>-Chris<br></p><p>&gt; <br>&gt; -- E<br>&gt; <br>&gt;&gt; On Feb 11, 2016, at 2:17 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Feb 8, 2016, at 10:09 AM, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- E, who is casting her eye on a few other bike sheds and would like this one to be painted purple and done<br>&gt;&gt; <br>&gt;&gt; I’d also like to “just get this done” as well.<br>&gt;&gt; <br>&gt;&gt;&gt;  &lt;https://gist.github.com/erica/8decc791e1319987eadd#detailed-design&gt;Detailed design<br>&gt;&gt;&gt; line-control-statement → #resetfilecontext<br>&gt;&gt; I don’t think this is the right word, simply because “reset” implies more than “set” and “context” sounds more general than what we’re describing here.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; How about:<br>&gt;&gt; <br>&gt;&gt; #setdiagnosticlocation<br>&gt;&gt; #setdebuglocation<br>&gt;&gt; #setlogicallocation<br>&gt;&gt; <br>&gt;&gt; … or, better yet, just go with the simple and seemingly obvious answer proposed on the other thread:<br>&gt;&gt; <br>&gt;&gt; #setline<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/daff8ad6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Discussion]: Renaming #line, the line control statement</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>February 11, 2016 at 03:00:00pm</p></header><div class="content"><p>https://github.com/apple/swift-evolution/pull/147 &lt;https://github.com/apple/swift-evolution/pull/147&gt;<br></p><p>-- E<br></p><p>&gt; On Feb 11, 2016, at 3:30 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 11, 2016, at 2:30 PM, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I&#39;m good with #setline if I can throw this one out there and cross it off my list. Chris?<br>&gt; <br>&gt; SGTM!<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt;&gt; <br>&gt;&gt; -- E<br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 11, 2016, at 2:17 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Feb 8, 2016, at 10:09 AM, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- E, who is casting her eye on a few other bike sheds and would like this one to be painted purple and done<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’d also like to “just get this done” as well.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/erica/8decc791e1319987eadd#detailed-design&gt;Detailed design<br>&gt;&gt;&gt;&gt; line-control-statement → #resetfilecontext<br>&gt;&gt;&gt; I don’t think this is the right word, simply because “reset” implies more than “set” and “context” sounds more general than what we’re describing here.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; How about:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; #setdiagnosticlocation<br>&gt;&gt;&gt; #setdebuglocation<br>&gt;&gt;&gt; #setlogicallocation<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; … or, better yet, just go with the simple and seemingly obvious answer proposed on the other thread:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; #setline<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Chris<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/559a92be/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Discussion]: Renaming #line, the line control statement</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>February 11, 2016 at 03:00:00pm</p></header><div class="content"><p>Change that to https://github.com/apple/swift-evolution/pull/148/files &lt;https://github.com/apple/swift-evolution/pull/148/files&gt;<br></p><p>Because I am so git-impaired that I believe I should be part of a protected class.<br></p><p>-- E<br></p><p>&gt; On Feb 11, 2016, at 3:41 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/pull/147 &lt;https://github.com/apple/swift-evolution/pull/147&gt;<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt;&gt; On Feb 11, 2016, at 3:30 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 11, 2016, at 2:30 PM, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m good with #setline if I can throw this one out there and cross it off my list. Chris?<br>&gt;&gt; <br>&gt;&gt; SGTM!<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- E<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 11, 2016, at 2:17 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 8, 2016, at 10:09 AM, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -- E, who is casting her eye on a few other bike sheds and would like this one to be painted purple and done<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’d also like to “just get this done” as well.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/erica/8decc791e1319987eadd#detailed-design&gt;Detailed design<br>&gt;&gt;&gt;&gt;&gt; line-control-statement → #resetfilecontext<br>&gt;&gt;&gt;&gt; I don’t think this is the right word, simply because “reset” implies more than “set” and “context” sounds more general than what we’re describing here.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; How about:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; #setdiagnosticlocation<br>&gt;&gt;&gt;&gt; #setdebuglocation<br>&gt;&gt;&gt;&gt; #setlogicallocation<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; … or, better yet, just go with the simple and seemingly obvious answer proposed on the other thread:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; #setline<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/ba6d42fd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Discussion]: Renaming #line, the line control statement</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>February 11, 2016 at 02:00:00pm</p></header><div class="content"><p>Thanks, it is 0034 now:<br>https://github.com/apple/swift-evolution/blob/master/proposals/0034-disambiguating-line.md<br></p><p>-Chris<br></p><p>&gt; On Feb 11, 2016, at 2:48 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; Change that to https://github.com/apple/swift-evolution/pull/148/files &lt;https://github.com/apple/swift-evolution/pull/148/files&gt;<br>&gt; <br>&gt; Because I am so git-impaired that I believe I should be part of a protected class.<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt;&gt; On Feb 11, 2016, at 3:41 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/pull/147 &lt;https://github.com/apple/swift-evolution/pull/147&gt;<br>&gt;&gt; <br>&gt;&gt; -- E<br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 11, 2016, at 3:30 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 11, 2016, at 2:30 PM, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;m good with #setline if I can throw this one out there and cross it off my list. Chris?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; SGTM!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- E<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Feb 11, 2016, at 2:17 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Feb 8, 2016, at 10:09 AM, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; -- E, who is casting her eye on a few other bike sheds and would like this one to be painted purple and done<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I’d also like to “just get this done” as well.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/erica/8decc791e1319987eadd#detailed-design&gt;Detailed design<br>&gt;&gt;&gt;&gt;&gt;&gt; line-control-statement → #resetfilecontext<br>&gt;&gt;&gt;&gt;&gt; I don’t think this is the right word, simply because “reset” implies more than “set” and “context” sounds more general than what we’re describing here.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; How about:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; #setdiagnosticlocation<br>&gt;&gt;&gt;&gt;&gt; #setdebuglocation<br>&gt;&gt;&gt;&gt;&gt; #setlogicallocation<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; … or, better yet, just go with the simple and seemingly obvious answer proposed on the other thread:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; #setline<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/0a0aec8c/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09d425d65431edfdb8ce3bbb2f2e2bf0?s=50"></div><header><strong>[Discussion]: Renaming #line, the line control statement</strong> from <string>Adrian Prantl</string> &lt;aprantl at apple.com&gt;<p>February  4, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Feb 4, 2016, at 9:31 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Feb 3, 2016, at 7:29 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; line-control-statement → #line­<br>&gt;&gt;&gt; line-control-statement → #line­line-number­file-name­<br>&gt;&gt;&gt; line-number → A decimal integer greater than zero<br>&gt;&gt;&gt; file-name → static-string-literal­<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The accepted implementation of SE-0028 disambiguates the two by requiring #line (the control statement) to appear at the first column for the time being. This is a stop-gap solution best remedied by renaming #line. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Chris Lattner writes, &quot;The core team isn’t thrilled with the magic “first token on a line” whitespace behavior that #line will be getting, and would like someone to start a discussion about renaming the old #line directive to something more specific and tailored to its purpose.   Once that name and syntax is settled, we can rename the directive and remove the whitespace rule.&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;d recommend #setline or #linenumber. Starting this thread to solicit other suggestions.<br>&gt;&gt; <br>&gt;&gt; I don&#39;t love the way the current format has two unlabeled parameters in an arbitrary order. Maybe something more like this?<br>&gt;&gt; <br>&gt;&gt; 	#reset line=50, file=&quot;foo.swift&quot;<br>&gt;&gt; <br>&gt;&gt; (I have a soft preference for &quot;reset&quot; over &quot;set&quot; because these are things the compiler changes automatically, but that might be a silly reason.)<br>&gt;&gt; <br>&gt;&gt; Perhaps this could even let you set any combination of the #whatever parameters, so if, for instance, you were writing a parser generator, you could set #function to the name of the rule a particular piece of code came from.<br>&gt; <br>&gt; Using something like this as the grammar structure makes sense to me, but I’d suggest something more specific (and longer) for this, perhaps:<br>&gt; <br>&gt; #setsyntacticsourcelocation<br>&gt; <br>&gt; or something. :-)<br></p><p>Is compatibility with the C preprocessor and other preprocessors that emit #line directives a non-goal for Swift?<br>I guess we probably don’t want to encourage (ab-)use of the C preprocessor and one could easily translate #line directives to Swift’s syntax by preprocessing the preprocessor output with sed, but I’m curious.<br></p><p>-- adrian<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Discussion]: Renaming #line, the line control statement</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>February  4, 2016 at 03:00:00pm</p></header><div class="content"><p>On Feb 4, 2016, at 10:38 AM, Adrian Prantl &lt;aprantl at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; #setsyntacticsourcelocation<br>&gt;&gt; <br>&gt;&gt; or something. :-)<br>&gt; <br>&gt; Is compatibility with the C preprocessor and other preprocessors that emit #line directives a non-goal for Swift?<br>&gt; I guess we probably don’t want to encourage (ab-)use of the C preprocessor and one could easily translate #line directives to Swift’s syntax by preprocessing the preprocessor output with sed, but I’m curious.<br></p><p>It is a non-goal.  “clang -E” generates a ton of weird forms that we don’t want or need to support.<br></p><p>-Chris<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdd257c9369fb68e1d06923d10ff789e?s=50"></div><header><strong>[Discussion]: Renaming #line, the line control statement</strong> from <string>Ben Rimmington</string> &lt;me at benrimmington.com&gt;<p>February  5, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On 4 Feb 2016, at 01:24, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Swift Evolution SE-0028 (https://github.com/apple/swift-evolution/blob/master/proposals/0028-modernizing-debug-identifiers.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0028-modernizing-debug-identifiers.md&gt;) overloads<br>&gt; the use of #line to mean both an identifier that maps to a calling site&#39;s line number with a file and acts as part of a line control statement with the following grammar:<br>&gt; <br>&gt; line-control-statement → #line­<br>&gt;  &lt;&gt;line-control-statement → #line­line-number &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/line-number&gt;­file-name &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/file-name&gt;­<br>&gt;  &lt;&gt;line-number → A decimal integer greater than zero<br>&gt;  &lt;&gt;file-name → static-string-literal &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/LexicalStructure.html#//apple_ref/swift/grammar/static-string-literal&gt;­<br>&gt; <br>&gt; The accepted implementation of SE-0028 disambiguates the two by requiring #line (the control statement) to appear at the first column for the time being. This is a stop-gap solution best remedied by renaming #line. <br>&gt; <br>&gt; Chris Lattner writes, &quot;The core team isn’t thrilled with the magic “first token on a line” whitespace behavior that #line will be getting, and would like someone to start a discussion about renaming the old #line directive to something more specific and tailored to its purpose.   Once that name and syntax is settled, we can rename the directive and remove the whitespace rule.&quot;<br>&gt; <br>&gt; I&#39;d recommend #setline or #linenumber. Starting this thread to solicit other suggestions.<br></p><p>#pragma line [line-number] [file-name]<br></p><p>-- Ben<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160205/ee3c1ed5/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
