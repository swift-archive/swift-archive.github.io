<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Why can I not filter or map a dictionary to another dictionary?</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>October 26, 2016 at 10:00:00pm</p></header><div class="content"><p>on Wed Oct 26 2016, Rick Mann &lt;swift-users-AT-swift.org&gt; wrote:<br></p><p>&gt; It seems fairly natural to want to do this:<br>&gt;<br>&gt; let bigDictionary = ...<br>&gt; let smallerDictionary = bigDictionary.filter { key, value in &lt;some test returning Bool&gt; }<br></p><p>&gt; Similarly, it seems natural to want to map this way.<br></p><p>It&#39;s reasonable for filter, but maybe not for map.  Map follows certain<br>laws, and one of them is that you get the same number of elements out as<br>you put in.  But you can easily map all keys to the same key, and the<br>law would be violated.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8809800aec2460f291384b794d7e6f8f?s=50"></div><header><strong>Why can I not filter or map a dictionary to another dictionary?</strong> from <string>Rick Mann</string> &lt;rmann at latencyzero.com&gt;<p>October 27, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; On Oct 26, 2016, at 22:23 , Dave Abrahams via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Wed Oct 26 2016, Rick Mann &lt;swift-users-AT-swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; It seems fairly natural to want to do this:<br>&gt;&gt; <br>&gt;&gt; let bigDictionary = ...<br>&gt;&gt; let smallerDictionary = bigDictionary.filter { key, value in &lt;some test returning Bool&gt; }<br>&gt; <br>&gt;&gt; Similarly, it seems natural to want to map this way.<br>&gt; <br>&gt; It&#39;s reasonable for filter, but maybe not for map.  Map follows certain<br>&gt; laws, and one of them is that you get the same number of elements out as<br>&gt; you put in.  But you can easily map all keys to the same key, and the<br>&gt; law would be violated.<br></p><p>Sure map would produce a dictionary of the same number of entries. I didn&#39;t mean to imply map would also filter. But I&#39;m basically transforming a JSON dictionary into a new version of that dictionary with fewer elements. I&#39;d like to first filter it, then map it, and have the result be a dictionary.<br></p><p><br>-- <br>Rick Mann<br>rmann at latencyzero.com<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Why can I not filter or map a dictionary to another dictionary?</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>October 27, 2016 at 10:00:00am</p></header><div class="content"><p>on Thu Oct 27 2016, Rick Mann &lt;rmann-AT-latencyzero.com&gt; wrote:<br></p><p>&gt;&gt; On Oct 26, 2016, at 22:23 , Dave Abrahams via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Wed Oct 26 2016, Rick Mann &lt;swift-users-AT-swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;<br>&gt;&gt;&gt; It seems fairly natural to want to do this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let bigDictionary = ...<br>&gt;&gt;&gt; let smallerDictionary = bigDictionary.filter { key, value in &lt;some test returning Bool&gt; }<br>&gt;&gt; <br>&gt;&gt;&gt; Similarly, it seems natural to want to map this way.<br>&gt;&gt; <br>&gt;&gt; It&#39;s reasonable for filter, but maybe not for map.  Map follows certain<br>&gt;&gt; laws, and one of them is that you get the same number of elements out as<br>&gt;&gt; you put in.  But you can easily map all keys to the same key, and the<br>&gt;&gt; law would be violated.<br>&gt;<br>&gt; Sure map would produce a dictionary of the same number of entries. I<br>&gt; didn&#39;t mean to imply map would also filter. <br></p><p>I think you&#39;re missing my point.  What result do you expect from<br></p><p>  {1:2, 3:4}.map { _ in (1, 1) }<br></p><p>? How many elements does it have?  Note that you can&#39;t have the same key<br>twice in a Dictionary.<br></p><p>&gt; But I&#39;m basically transforming a JSON dictionary into a new version of<br>&gt; that dictionary with fewer elements. I&#39;d like to first filter it, then<br>&gt; map it, and have the result be a dictionary.<br></p><p>What we need are Dictionary initializers that operate on Sequences, per<br>https://github.com/apple/swift-evolution/blob/master/proposals/0100-add-sequence-based-init-and-merge-to-dictionary.md<br></p><p>    Dictionary(merging: d.lazy.filter {... }.map {...})<br></p><p>That would get you the result you&#39;re looking for in a principled way,<br>without creating an intermediate Array.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8809800aec2460f291384b794d7e6f8f?s=50"></div><header><strong>Why can I not filter or map a dictionary to another dictionary?</strong> from <string>Rick Mann</string> &lt;rmann at latencyzero.com&gt;<p>October 31, 2016 at 01:00:00am</p></header><div class="content"><p>&gt; On Oct 27, 2016, at 10:29 , Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Thu Oct 27 2016, Rick Mann &lt;rmann-AT-latencyzero.com&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On Oct 26, 2016, at 22:23 , Dave Abrahams via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Wed Oct 26 2016, Rick Mann &lt;swift-users-AT-swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt;&gt; It seems fairly natural to want to do this:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let bigDictionary = ...<br>&gt;&gt;&gt;&gt; let smallerDictionary = bigDictionary.filter { key, value in &lt;some test returning Bool&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Similarly, it seems natural to want to map this way.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It&#39;s reasonable for filter, but maybe not for map.  Map follows certain<br>&gt;&gt;&gt; laws, and one of them is that you get the same number of elements out as<br>&gt;&gt;&gt; you put in.  But you can easily map all keys to the same key, and the<br>&gt;&gt;&gt; law would be violated.<br>&gt;&gt; <br>&gt;&gt; Sure map would produce a dictionary of the same number of entries. I<br>&gt;&gt; didn&#39;t mean to imply map would also filter. <br>&gt; <br>&gt; I think you&#39;re missing my point.  What result do you expect from<br>&gt; <br>&gt;  {1:2, 3:4}.map { _ in (1, 1) }<br></p><p>Fair point. I suppose I&#39;d be okay with unpredictable results, or an exception, if possible.<br></p><p>&gt; <br>&gt; ? How many elements does it have?  Note that you can&#39;t have the same key<br>&gt; twice in a Dictionary.<br>&gt; <br>&gt;&gt; But I&#39;m basically transforming a JSON dictionary into a new version of<br>&gt;&gt; that dictionary with fewer elements. I&#39;d like to first filter it, then<br>&gt;&gt; map it, and have the result be a dictionary.<br>&gt; <br>&gt; What we need are Dictionary initializers that operate on Sequences, per<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0100-add-sequence-based-init-and-merge-to-dictionary.md<br>&gt; <br>&gt;    Dictionary(merging: d.lazy.filter {... }.map {...})<br>&gt; <br>&gt; That would get you the result you&#39;re looking for in a principled way,<br>&gt; without creating an intermediate Array.<br></p><p>I guess for now I write it in a clunky way.<br></p><p><br>-- <br>Rick Mann<br>rmann at latencyzero.com<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
