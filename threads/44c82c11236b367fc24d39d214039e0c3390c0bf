<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b34ccd836b2d26b5eb6c1ba6e2b68186?s=50"></div><header><strong>Allow Selectors to be used as Closures</strong> from <string>Chris Byatt</string> &lt;byatt.chris at gmail.com&gt;<p>December  4, 2015 at 06:00:00pm</p></header><div class="content"><p>It feels a lot more Swift-like to me to allow a Selector argument to have<br>the option of being a closure.<br></p><p>For example, instead of:<br></p><p>UIBarButtonItem(title: &quot;Press&quot;, style: .Done, target: self, action:<br>&quot;functionToCall&quot;)<br></p><p>func functionToCall() {<br>    // Do something}<br></p><p>We should be able to do:<br></p><p>UIBarButtonItem(title: &quot;Press&quot;, style: .Done, target: self, action: {<br>    // Do Something})<br></p><p>For simple tasks it would be a lot neater, and indeed faster to code this<br>way.<br></p><p>Thanks,<br></p><p>Chris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/44c8c0bf/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c638dc69b46afe03e3491dea47620cf4?s=50"></div><header><strong>Allow Selectors to be used as Closures</strong> from <string>crk at fastmail.com</string> &lt;crk at fastmail.com&gt;<p>December  4, 2015 at 01:00:00pm</p></header><div class="content"><p>I agree that a closure is a much better solution to the target-action pattern in Swift, especially since you could pass a declared method with ?self.functionToCall? which is basically a type safe version of the current paradigm. All of that said, I believe the reason it doesn?t work this way right now is compatibility with objective-c and Cocoa. I?d love to see this changed, as it?s one of the least Swifty things I have to use on a regular basis. I?m just not sure exactly how large of an effort it would be to make it compatible.<br></p><p>Thanks for your time,<br>Cole Kurkowski<br>&gt; On Dec 4, 2015, at 12:49, Chris Byatt &lt;byatt.chris at gmail.com&gt; wrote:<br>&gt; <br>&gt; It feels a lot more Swift-like to me to allow a Selector argument to have the option of being a closure.<br>&gt; <br>&gt; For example, instead of:<br>&gt; <br>&gt; UIBarButtonItem(title: &quot;Press&quot;, style: .Done, target: self, action: &quot;functionToCall&quot;)<br>&gt; <br>&gt; func functionToCall() {<br>&gt;     // Do something<br>&gt; }<br>&gt; We should be able to do:<br>&gt; <br>&gt; UIBarButtonItem(title: &quot;Press&quot;, style: .Done, target: self, action: {<br>&gt;     // Do Something<br>&gt; })<br>&gt; For simple tasks it would be a lot neater, and indeed faster to code this way.<br>&gt; <br>&gt; Thanks,<br>&gt; <br>&gt; Chris<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/6453b9fb/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7ba3c93f9350613c243eeb87c602935e?s=50"></div><header><strong>Allow Selectors to be used as Closures</strong> from <string>David Smith</string> &lt;david_smith at apple.com&gt;<p>December  4, 2015 at 11:00:00am</p></header><div class="content"><p>The other concern with patterns like this is that they tend to lead to reference cycles due to unintentional closure capture.<br></p><p>	David<br></p><p>&gt; On Dec 4, 2015, at 11:25 AM, Cole Kurkowski &lt;crk at fastmail.com&gt; wrote:<br>&gt; <br>&gt; I agree that a closure is a much better solution to the target-action pattern in Swift, especially since you could pass a declared method with ?self.functionToCall? which is basically a type safe version of the current paradigm. All of that said, I believe the reason it doesn?t work this way right now is compatibility with objective-c and Cocoa. I?d love to see this changed, as it?s one of the least Swifty things I have to use on a regular basis. I?m just not sure exactly how large of an effort it would be to make it compatible.<br>&gt; <br>&gt; Thanks for your time,<br>&gt; Cole Kurkowski<br>&gt;&gt; On Dec 4, 2015, at 12:49, Chris Byatt &lt;byatt.chris at gmail.com &lt;mailto:byatt.chris at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; It feels a lot more Swift-like to me to allow a Selector argument to have the option of being a closure.<br>&gt;&gt; <br>&gt;&gt; For example, instead of:<br>&gt;&gt; <br>&gt;&gt; UIBarButtonItem(title: &quot;Press&quot;, style: .Done, target: self, action: &quot;functionToCall&quot;)<br>&gt;&gt; <br>&gt;&gt; func functionToCall() {<br>&gt;&gt;     // Do something<br>&gt;&gt; }<br>&gt;&gt; We should be able to do:<br>&gt;&gt; <br>&gt;&gt; UIBarButtonItem(title: &quot;Press&quot;, style: .Done, target: self, action: {<br>&gt;&gt;     // Do Something<br>&gt;&gt; })<br>&gt;&gt; For simple tasks it would be a lot neater, and indeed faster to code this way.<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; <br>&gt;&gt; Chris<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/502de486/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Allow Selectors to be used as Closures</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December  4, 2015 at 12:00:00pm</p></header><div class="content"><p>On Dec 4, 2015, at 11:26 AM, David Smith &lt;david_smith at apple.com&gt; wrote:<br>&gt; <br>&gt; The other concern with patterns like this is that they tend to lead to reference cycles due to unintentional closure capture.<br></p><p>We could do something with selectors similar to what we do with C function pointers and limit them to taking closures that take no context. We could do this by having a &#39;@convention(objc_selector)&#39; or something like that that represents a context-free (Self: class) -&gt; Args -&gt; Return function type as a selector pointer; invoking it emits objc_msgSend.<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/cc0d5e5c/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4e487a95498438cd044c2a9e936412a2?s=50"></div><header><strong>Allow Selectors to be used as Closures</strong> from <string>Jorge Bernal</string> &lt;me at koke.me&gt;<p>December  5, 2015 at 05:00:00pm</p></header><div class="content"><p>I think this has more to do with the UIKit API than the Swift language, but since we’re discussing it, here’s my 2¢<br></p><p>&gt; On 04 Dec 2015, at 19:49, Chris Byatt &lt;byatt.chris at gmail.com&gt; wrote:<br>&gt; <br>&gt; We should be able to do:<br>&gt; <br>&gt; UIBarButtonItem(title: &quot;Press&quot;, style: .Done, target: self, action: {<br>&gt;     // Do Something<br>&gt; })<br></p><p>If action is just a closure, why is target needed? This example doesn’t match what was proposed in the subject “Selectors to be used as Closures”.<br>I see a couple solutions to this:<br></p><p>1. Make it UIBarButtonIttem(title:style:action:), and pass any closure. That’s the most flexible, but as David mentioned it makes it too easy to create reference cycles.<br>2. Keep the target/action pattern, but make action’s type match the expected selector signature. To avoid cycles, the button item would keep a weak reference to self, and only call action if target != nil<br></p><p>class MyController: UIViewController {<br>    override func viewDidLoad() {<br>        super.viewDidLoad()<br></p><p>        self.navigationItem.rightBarButtonItem = UIBarButtonItem(title: &quot;Press&quot;, style: .Done, target: self, action: MyController.functionToCall)<br>    }<br></p><p>    func functionToCall(button: UIBarButtonItem) {<br>        // Do stuff<br>    }<br>}<br></p><p><br>--<br>Jorge Bernal | jbernal at gmail.com | jorge at automattic.com<br>Mobile Engineer @ Automattic | http://automattic.com/<br></p><p>http://koke.me/ | http://jorgebernal.es/ | http://twitter.com/koke<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/5312b46d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b34ccd836b2d26b5eb6c1ba6e2b68186?s=50"></div><header><strong>Allow Selectors to be used as Closures</strong> from <string>Chris Byatt</string> &lt;byatt.chris at gmail.com&gt;<p>December  7, 2015 at 11:00:00am</p></header><div class="content"><p>Jorge&#39;s second suggestion seems like a good one - it definitely makes more<br>sense to lay it out that way than the current usage of strings which makes<br>me cry a little bit..<br></p><p>It would be nice to eliminate the need for &quot;myFunction&quot;/&quot;myFunction:&quot;.<br></p><p>Chris<br></p><p>On Sat, 5 Dec 2015 at 16:21 Jorge Bernal &lt;me at koke.me&gt; wrote:<br></p><p>&gt; I think this has more to do with the UIKit API than the Swift language,<br>&gt; but since we’re discussing it, here’s my 2¢<br>&gt;<br>&gt; On 04 Dec 2015, at 19:49, Chris Byatt &lt;byatt.chris at gmail.com&gt; wrote:<br>&gt;<br>&gt; We should be able to do:<br>&gt;<br>&gt; UIBarButtonItem(title: &quot;Press&quot;, style: .Done, target: self, action: {<br>&gt;     // Do Something})<br>&gt;<br>&gt; If action is just a closure, why is target needed? This example doesn’t<br>&gt; match what was proposed in the subject “Selectors to be used as Closures”.<br>&gt; I see a couple solutions to this:<br>&gt;<br>&gt; 1. Make it UIBarButtonIttem(title:style:action:), and pass any closure.<br>&gt; That’s the most flexible, but as David mentioned it makes it too easy to<br>&gt; create reference cycles.<br>&gt; 2. Keep the target/action pattern, but make action’s type match the<br>&gt; expected selector signature. To avoid cycles, the button item would keep a<br>&gt; weak reference to self, and only call action if target != nil<br>&gt;<br>&gt; class MyController: UIViewController {<br>&gt;     override func viewDidLoad() {<br>&gt;         super.viewDidLoad()<br>&gt;<br>&gt;         self.navigationItem.rightBarButtonItem = UIBarButtonItem(title:<br>&gt; &quot;Press&quot;, style: .Done, target: self, action: MyController.functionToCall)<br>&gt;     }<br>&gt;<br>&gt;     func functionToCall(button: UIBarButtonItem) {<br>&gt;         // Do stuff<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Jorge Bernal | jbernal at gmail.com | jorge at automattic.com<br>&gt; Mobile Engineer @ Automattic | http://automattic.com/<br>&gt;<br>&gt; http://koke.me/ | http://jorgebernal.es/ | http://twitter.com/koke<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/598e5e31/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
