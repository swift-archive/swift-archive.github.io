<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14f382feb5f0dd3d3700edf8d6156aa9?s=50"></div><header><strong>[pitch] rename &#39;guard&#39; to &#39;ensure&#39;</strong> from <string>Jay Abbott</string> &lt;jay at abbott.me.uk&gt;<p>October 25, 2016 at 04:00:00pm</p></header><div class="content"><p>I mentioned this in passing on a different thread<br>&lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20161024/028371.html&gt;.<br>Although it caused some slight confusion when I first learned the &#39;guard&#39;<br>keyword, it was easy to overcome and I didn&#39;t think the issue was strong<br>enough to warrant a change. However, after reading the other discussion on<br>that thread (around the possibility of a &#39;matches&#39; keyword and how code is<br>&quot;read out&quot; or &quot;internally verbalised&quot;), and seeing how passionate everyone<br>here is about Swift, I&#39;m thinking that maybe it should be changed.<br></p><p>The issue is that in English, &#39;guard&#39; has an inverted logical connotation<br>to how it is used in Swift. For example, take this sentence:<br></p><p>&quot;In some functions it&#39;s a good idea is to put some checks in place, in<br>order to guard against invalid input values.&quot;<br></p><p>Swift&#39;s &#39;guard&#39; keyword is to *guard* against *invalid* values.<br>Or to put it another way, to *ensure* that we have *valid* values.<br></p><p>However, the way it reads in Swift, we *guard* that we have *valid* values.<br></p><p>I fully understand and agree that it&#39;s better to state the *true* condition<br>for *valid* values here, using *else* to perform a contingency. And I<br>understand why the word &#39;guard&#39; was picked (given the above example<br>sentence). I just think that &#39;ensure&#39; would be better.<br></p><p>ensure x &gt; 0 else {<br>    return<br>}<br></p><p>ensure camp.isSafe else {<br>    runForTheHills()<br>}<br></p><p>ensure let thingy = object as? Thingy else {<br>    return ExamineThingyResult.NotAThingy<br>}<br></p><p>As I said, I thought it was too small a niggle to worry about, but seeing<br>how people on here care so much about making Swift better, and the<br>willingness to change things, I thought I&#39;d suggest it. Although it would<br>be a breaking change, the code changes are easy.<br></p><p>So what do people think? In particular it would be interesting to hear from<br>non-native English speakers on this, did &#39;guard&#39; confuse you or did &#39;guard&#39;<br>cause your understanding of the English word to be confused?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161025/211aafcd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b0a8a8751387599c6d98c36808e8916c?s=50"></div><header><strong>[pitch] rename &#39;guard&#39; to &#39;ensure&#39;</strong> from <string>William Sumner</string> &lt;prestonsumner at me.com&gt;<p>October 25, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Oct 25, 2016, at 10:38 AM, Jay Abbott via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I mentioned this in passing on a different thread &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20161024/028371.html&gt;. Although it caused some slight confusion when I first learned the &#39;guard&#39; keyword, it was easy to overcome and I didn&#39;t think the issue was strong enough to warrant a change. However, after reading the other discussion on that thread (around the possibility of a &#39;matches&#39; keyword and how code is &quot;read out&quot; or &quot;internally verbalised&quot;), and seeing how passionate everyone here is about Swift, I&#39;m thinking that maybe it should be changed.<br>&gt; <br>&gt; The issue is that in English, &#39;guard&#39; has an inverted logical connotation to how it is used in Swift. For example, take this sentence:<br>&gt; <br>&gt; &quot;In some functions it&#39;s a good idea is to put some checks in place, in order to guard against invalid input values.&quot;<br>&gt; <br>&gt; Swift&#39;s &#39;guard&#39; keyword is to guard against invalid values.<br>&gt; Or to put it another way, to ensure that we have valid values.<br>&gt; <br>&gt; However, the way it reads in Swift, we guard that we have valid values.<br>&gt; <br>&gt; I fully understand and agree that it&#39;s better to state the true condition for valid values here, using else to perform a contingency. And I understand why the word &#39;guard&#39; was picked (given the above example sentence). I just think that &#39;ensure&#39; would be better.<br>&gt; <br>&gt; ensure x &gt; 0 else {<br>&gt;     return<br>&gt; }<br>&gt; <br>&gt; ensure camp.isSafe else {<br>&gt;     runForTheHills()<br>&gt; }<br>&gt; <br>&gt; ensure let thingy = object as? Thingy else {<br>&gt;     return ExamineThingyResult.NotAThingy<br>&gt; }<br>&gt; <br>&gt; As I said, I thought it was too small a niggle to worry about, but seeing how people on here care so much about making Swift better, and the willingness to change things, I thought I&#39;d suggest it. Although it would be a breaking change, the code changes are easy.<br>&gt; <br>&gt; So what do people think? In particular it would be interesting to hear from non-native English speakers on this, did &#39;guard&#39; confuse you or did &#39;guard&#39; cause your understanding of the English word to be confused?<br></p><p>“Guard” is a computer science term for a test that must pass for execution to continue. Given that, I don’t think changing the keyword is warranted.<br></p><p>Preston<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161025/f5d8b3f4/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[pitch] rename &#39;guard&#39; to &#39;ensure&#39;</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>October 25, 2016 at 10:00:00am</p></header><div class="content"><p>At this point in Swift&#39;s evolution, source-breaking changes to the language require strong motivation. We can&#39;t really entertain superficial keyword changes like this without overwhelming evidence that the existing syntax is problematic in practice. `guard` has precedent in functional languages, for instance in Haskell where the `guard` function is idiomatically used as part of monadic `do`-notation computations, and has the same positive condition semantics in those languages.<br></p><p>-Joe<br></p><p>&gt; On Oct 25, 2016, at 9:38 AM, Jay Abbott via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I mentioned this in passing on a different thread. Although it caused some slight confusion when I first learned the &#39;guard&#39; keyword, it was easy to overcome and I didn&#39;t think the issue was strong enough to warrant a change. However, after reading the other discussion on that thread (around the possibility of a &#39;matches&#39; keyword and how code is &quot;read out&quot; or &quot;internally verbalised&quot;), and seeing how passionate everyone here is about Swift, I&#39;m thinking that maybe it should be changed.<br>&gt; <br>&gt; The issue is that in English, &#39;guard&#39; has an inverted logical connotation to how it is used in Swift. For example, take this sentence:<br>&gt; <br>&gt; &quot;In some functions it&#39;s a good idea is to put some checks in place, in order to guard against invalid input values.&quot;<br>&gt; <br>&gt; Swift&#39;s &#39;guard&#39; keyword is to guard against invalid values.<br>&gt; Or to put it another way, to ensure that we have valid values.<br>&gt; <br>&gt; However, the way it reads in Swift, we guard that we have valid values.<br>&gt; <br>&gt; I fully understand and agree that it&#39;s better to state the true condition for valid values here, using else to perform a contingency. And I understand why the word &#39;guard&#39; was picked (given the above example sentence). I just think that &#39;ensure&#39; would be better.<br>&gt; <br>&gt; ensure x &gt; 0 else {<br>&gt;     return<br>&gt; }<br>&gt; <br>&gt; ensure camp.isSafe else {<br>&gt;     runForTheHills()<br>&gt; }<br>&gt; <br>&gt; ensure let thingy = object as? Thingy else {<br>&gt;     return ExamineThingyResult.NotAThingy<br>&gt; }<br>&gt; <br>&gt; As I said, I thought it was too small a niggle to worry about, but seeing how people on here care so much about making Swift better, and the willingness to change things, I thought I&#39;d suggest it. Although it would be a breaking change, the code changes are easy.<br>&gt; <br>&gt; So what do people think? In particular it would be interesting to hear from non-native English speakers on this, did &#39;guard&#39; confuse you or did &#39;guard&#39; cause your understanding of the English word to be confused?<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14f382feb5f0dd3d3700edf8d6156aa9?s=50"></div><header><strong>[pitch] rename &#39;guard&#39; to &#39;ensure&#39;</strong> from <string>Jay Abbott</string> &lt;jay at abbott.me.uk&gt;<p>October 25, 2016 at 06:00:00pm</p></header><div class="content"><p>Hey Joe,<br></p><p>I tend to agree, it seems like a tiny niggle for experienced C-family<br>developers who have used if(negative condition) as a guard for years, and<br>those with knowledge in other languages where it is already known. But for<br>new developers, learning the language of the future as a first-language<br>(such as my other half, who is learning Swift as her first programming<br>language with the &quot;Swift Playgrounds&quot; app), doesn&#39;t it make sense for such<br>a concept to fit right in with their existing linguistic model of the<br>world? This makes a language intuitive rather than something you need to<br>&#39;learn&#39;.<br></p><p>This is where &quot;strong motivation&quot; and &quot;overwhelming evidence&quot; lose their<br>meanings (to me). This group does seem to be strongly motivated to help new<br>developers, and ensure Swift is easy and intuitive for them, as well as<br>powerful for experienced developers. Is it practical to gather evidence on<br>how new developers learn and internalise &quot;guard&quot; or any other part of the<br>language? Probably not, so how can we ever have &quot;overwhelming evidence&quot; for<br>anything related to intuitiveness for new developers? Also is there a grey<br>area for source-breaking changes? I mean obviously a change is either<br>breaking or it&#39;s not, but if we were to take Marco&#39;s idea and use &quot;guard:&quot;<br>instead of &quot;ensure&quot; - existing articles and QA online would still be<br>searchable/relevant, the compiler could emit a fixme error to add the colon<br>when it came across old syntax (or Xcode&#39;s converter or a simple<br>project-wide search/replace would rectify old syntax), etc. so there are<br>breaking changes, and then there are trivial-to-rectify breaking changes.<br>Another point is: If there is a single breaking change, for strong reasons,<br>doesn&#39;t that invalidate all arguments against other (automatically<br>convertible) breaking changes which have not-so-strong reasons? If code<br>needs to be converted, then what difference does it make how many trivial<br>automated changes there are? And isn&#39;t that the entire point of a major<br>version bump anyway?<br></p><p>I think as a group we should be cautious of:<br>* hard/fast/unbreakable rules<br>* subjective terms like &quot;strong motivation&quot; and even &quot;overwhelming<br>evidence&quot;, especially where our evidence is our own arguments and examples,<br>as made and interpreted by some of the experienced to genius level<br>developers on this list.<br>* denying or failing to recognise grey areas.<br></p><p>I&#39;m not having a go at you Joe, or anyone else who has made these points. I<br>actually agree that this particular issue seems too trivial to warrant a<br>change, but I&#39;m trying to question if that&#39;s the right conclusion (which is<br>what motivated me to post this thread in the first place). The &#39;cost&#39; seems<br>small, and while the &#39;benefit&#39; seems tiny to us, it might actually be quite<br>huge for new developers.<br></p><p><br>On Tue, 25 Oct 2016 at 18:20 Joe Groff &lt;jgroff at apple.com&gt; wrote:<br></p><p>&gt; At this point in Swift&#39;s evolution, source-breaking changes to the<br>&gt; language require strong motivation. We can&#39;t really entertain superficial<br>&gt; keyword changes like this without overwhelming evidence that the existing<br>&gt; syntax is problematic in practice. `guard` has precedent in functional<br>&gt; languages, for instance in Haskell where the `guard` function is<br>&gt; idiomatically used as part of monadic `do`-notation computations, and has<br>&gt; the same positive condition semantics in those languages.<br>&gt;<br>&gt; -Joe<br>&gt;<br>&gt; &gt; On Oct 25, 2016, at 9:38 AM, Jay Abbott via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; I mentioned this in passing on a different thread. Although it caused<br>&gt; some slight confusion when I first learned the &#39;guard&#39; keyword, it was easy<br>&gt; to overcome and I didn&#39;t think the issue was strong enough to warrant a<br>&gt; change. However, after reading the other discussion on that thread (around<br>&gt; the possibility of a &#39;matches&#39; keyword and how code is &quot;read out&quot; or<br>&gt; &quot;internally verbalised&quot;), and seeing how passionate everyone here is about<br>&gt; Swift, I&#39;m thinking that maybe it should be changed.<br>&gt; &gt;<br>&gt; &gt; The issue is that in English, &#39;guard&#39; has an inverted logical<br>&gt; connotation to how it is used in Swift. For example, take this sentence:<br>&gt; &gt;<br>&gt; &gt; &quot;In some functions it&#39;s a good idea is to put some checks in place, in<br>&gt; order to guard against invalid input values.&quot;<br>&gt; &gt;<br>&gt; &gt; Swift&#39;s &#39;guard&#39; keyword is to guard against invalid values.<br>&gt; &gt; Or to put it another way, to ensure that we have valid values.<br>&gt; &gt;<br>&gt; &gt; However, the way it reads in Swift, we guard that we have valid values.<br>&gt; &gt;<br>&gt; &gt; I fully understand and agree that it&#39;s better to state the true<br>&gt; condition for valid values here, using else to perform a contingency. And I<br>&gt; understand why the word &#39;guard&#39; was picked (given the above example<br>&gt; sentence). I just think that &#39;ensure&#39; would be better.<br>&gt; &gt;<br>&gt; &gt; ensure x &gt; 0 else {<br>&gt; &gt;     return<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; ensure camp.isSafe else {<br>&gt; &gt;     runForTheHills()<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; ensure let thingy = object as? Thingy else {<br>&gt; &gt;     return ExamineThingyResult.NotAThingy<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; As I said, I thought it was too small a niggle to worry about, but<br>&gt; seeing how people on here care so much about making Swift better, and the<br>&gt; willingness to change things, I thought I&#39;d suggest it. Although it would<br>&gt; be a breaking change, the code changes are easy.<br>&gt; &gt;<br>&gt; &gt; So what do people think? In particular it would be interesting to hear<br>&gt; from non-native English speakers on this, did &#39;guard&#39; confuse you or did<br>&gt; &#39;guard&#39; cause your understanding of the English word to be confused?<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161025/dd056fa2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c906b43e6e16ae5540d8f40b95e29091?s=50"></div><header><strong>[pitch] rename &#39;guard&#39; to &#39;ensure&#39;</strong> from <string>Marinus van der Lugt</string> &lt;rien at starbase55.com&gt;<p>October 25, 2016 at 09:00:00pm</p></header><div class="content"><p>There is more difference between “guard” and “ensure”.<br>“Guarding” is something you do at the gate, not just everywhere. This has imo an impact on how code is structured. (It did for me)<br>“Ensuring” is something you can do everywhere.<br>Myself, I tend to use “guard” mostly at the beginning of a routine.<br>Further in I tend to use “if’s” unless I need to define a variable for subsequent use and want to avoid nesting.<br></p><p>Rien.<br>PS: non native….<br>PPS: No opinion on either changing or keeping guard<br></p><p>&gt; On 25 Oct 2016, at 20:44, Jay Abbott via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hey Joe,<br>&gt; <br>&gt; I tend to agree, it seems like a tiny niggle for experienced C-family developers who have used if(negative condition) as a guard for years, and those with knowledge in other languages where it is already known. But for new developers, learning the language of the future as a first-language (such as my other half, who is learning Swift as her first programming language with the &quot;Swift Playgrounds&quot; app), doesn&#39;t it make sense for such a concept to fit right in with their existing linguistic model of the world? This makes a language intuitive rather than something you need to &#39;learn&#39;.<br>&gt; <br>&gt; This is where &quot;strong motivation&quot; and &quot;overwhelming evidence&quot; lose their meanings (to me). This group does seem to be strongly motivated to help new developers, and ensure Swift is easy and intuitive for them, as well as powerful for experienced developers. Is it practical to gather evidence on how new developers learn and internalise &quot;guard&quot; or any other part of the language? Probably not, so how can we ever have &quot;overwhelming evidence&quot; for anything related to intuitiveness for new developers? Also is there a grey area for source-breaking changes? I mean obviously a change is either breaking or it&#39;s not, but if we were to take Marco&#39;s idea and use &quot;guard:&quot; instead of &quot;ensure&quot; - existing articles and QA online would still be searchable/relevant, the compiler could emit a fixme error to add the colon when it came across old syntax (or Xcode&#39;s converter or a simple project-wide search/replace would rectify old syntax), etc. so there are breaking changes, and then there are trivial-to-rectify breaking changes. Another point is: If there is a single breaking change, for strong reasons, doesn&#39;t that invalidate all arguments against other (automatically convertible) breaking changes which have not-so-strong reasons? If code needs to be converted, then what difference does it make how many trivial automated changes there are? And isn&#39;t that the entire point of a major version bump anyway?<br>&gt; <br>&gt; I think as a group we should be cautious of:<br>&gt; * hard/fast/unbreakable rules<br>&gt; * subjective terms like &quot;strong motivation&quot; and even &quot;overwhelming evidence&quot;, especially where our evidence is our own arguments and examples, as made and interpreted by some of the experienced to genius level developers on this list.<br>&gt; * denying or failing to recognise grey areas.<br>&gt; <br>&gt; I&#39;m not having a go at you Joe, or anyone else who has made these points. I actually agree that this particular issue seems too trivial to warrant a change, but I&#39;m trying to question if that&#39;s the right conclusion (which is what motivated me to post this thread in the first place). The &#39;cost&#39; seems small, and while the &#39;benefit&#39; seems tiny to us, it might actually be quite huge for new developers.<br>&gt; <br>&gt; <br>&gt; On Tue, 25 Oct 2016 at 18:20 Joe Groff &lt;jgroff at apple.com &lt;mailto:jgroff at apple.com&gt;&gt; wrote:<br>&gt; At this point in Swift&#39;s evolution, source-breaking changes to the language require strong motivation. We can&#39;t really entertain superficial keyword changes like this without overwhelming evidence that the existing syntax is problematic in practice. `guard` has precedent in functional languages, for instance in Haskell where the `guard` function is idiomatically used as part of monadic `do`-notation computations, and has the same positive condition semantics in those languages.<br>&gt; <br>&gt; -Joe<br>&gt; <br>&gt; &gt; On Oct 25, 2016, at 9:38 AM, Jay Abbott via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; I mentioned this in passing on a different thread. Although it caused some slight confusion when I first learned the &#39;guard&#39; keyword, it was easy to overcome and I didn&#39;t think the issue was strong enough to warrant a change. However, after reading the other discussion on that thread (around the possibility of a &#39;matches&#39; keyword and how code is &quot;read out&quot; or &quot;internally verbalised&quot;), and seeing how passionate everyone here is about Swift, I&#39;m thinking that maybe it should be changed.<br>&gt; &gt;<br>&gt; &gt; The issue is that in English, &#39;guard&#39; has an inverted logical connotation to how it is used in Swift. For example, take this sentence:<br>&gt; &gt;<br>&gt; &gt; &quot;In some functions it&#39;s a good idea is to put some checks in place, in order to guard against invalid input values.&quot;<br>&gt; &gt;<br>&gt; &gt; Swift&#39;s &#39;guard&#39; keyword is to guard against invalid values.<br>&gt; &gt; Or to put it another way, to ensure that we have valid values.<br>&gt; &gt;<br>&gt; &gt; However, the way it reads in Swift, we guard that we have valid values.<br>&gt; &gt;<br>&gt; &gt; I fully understand and agree that it&#39;s better to state the true condition for valid values here, using else to perform a contingency. And I understand why the word &#39;guard&#39; was picked (given the above example sentence). I just think that &#39;ensure&#39; would be better.<br>&gt; &gt;<br>&gt; &gt; ensure x &gt; 0 else {<br>&gt; &gt;     return<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; ensure camp.isSafe else {<br>&gt; &gt;     runForTheHills()<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; ensure let thingy = object as? Thingy else {<br>&gt; &gt;     return ExamineThingyResult.NotAThingy<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; As I said, I thought it was too small a niggle to worry about, but seeing how people on here care so much about making Swift better, and the willingness to change things, I thought I&#39;d suggest it. Although it would be a breaking change, the code changes are easy.<br>&gt; &gt;<br>&gt; &gt; So what do people think? In particular it would be interesting to hear from non-native English speakers on this, did &#39;guard&#39; confuse you or did &#39;guard&#39; cause your understanding of the English word to be confused?<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161025/228d3f98/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[pitch] rename &#39;guard&#39; to &#39;ensure&#39;</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>October 25, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Oct 25, 2016, at 11:44 AM, Jay Abbott &lt;jay at abbott.me.uk&gt; wrote:<br>&gt; <br>&gt; Hey Joe,<br>&gt; <br>&gt; I tend to agree, it seems like a tiny niggle for experienced C-family developers who have used if(negative condition) as a guard for years, and those with knowledge in other languages where it is already known. But for new developers, learning the language of the future as a first-language (such as my other half, who is learning Swift as her first programming language with the &quot;Swift Playgrounds&quot; app), doesn&#39;t it make sense for such a concept to fit right in with their existing linguistic model of the world? This makes a language intuitive rather than something you need to &#39;learn&#39;.<br>&gt; <br>&gt; This is where &quot;strong motivation&quot; and &quot;overwhelming evidence&quot; lose their meanings (to me). This group does seem to be strongly motivated to help new developers, and ensure Swift is easy and intuitive for them, as well as powerful for experienced developers. Is it practical to gather evidence on how new developers learn and internalise &quot;guard&quot; or any other part of the language? Probably not, so how can we ever have &quot;overwhelming evidence&quot; for anything related to intuitiveness for new developers? Also is there a grey area for source-breaking changes? I mean obviously a change is either breaking or it&#39;s not, but if we were to take Marco&#39;s idea and use &quot;guard:&quot; instead of &quot;ensure&quot; - existing articles and QA online would still be searchable/relevant, the compiler could emit a fixme error to add the colon when it came across old syntax (or Xcode&#39;s converter or a simple project-wide search/replace would rectify old syntax), etc. so there are breaking changes, and then there are trivial-to-rectify breaking changes. Another point is: If there is a single breaking change, for strong reasons, doesn&#39;t that invalidate all arguments against other (automatically convertible) breaking changes which have not-so-strong reasons? If code needs to be converted, then what difference does it make how many trivial automated changes there are? And isn&#39;t that the entire point of a major version bump anyway?<br>&gt; <br>&gt; I think as a group we should be cautious of:<br>&gt; * hard/fast/unbreakable rules<br>&gt; * subjective terms like &quot;strong motivation&quot; and even &quot;overwhelming evidence&quot;, especially where our evidence is our own arguments and examples, as made and interpreted by some of the experienced to genius level developers on this list.<br>&gt; * denying or failing to recognise grey areas.<br></p><p>These conditions are by their nature subjective and involve gray areas. I&#39;m not denying that. It&#39;s true that new developers are an important audience for Swift, but we have a large and growing user base of existing developers now, and we don&#39;t want to inflict churn on them without a good justification. By all means, if you or someone else gathered evidence that changing a keyword made a massive improvement in learnability, reduced error rate, or other benefits, we&#39;d pay attention. Our default position has to be to maintain stability absent that.<br></p><p>-Joe<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[pitch] rename &#39;guard&#39; to &#39;ensure&#39;</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>October 25, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Oct 25, 2016, at 10:20 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; At this point in Swift&#39;s evolution, source-breaking changes to the language require strong motivation. We can&#39;t really entertain superficial keyword changes like this without overwhelming evidence that the existing syntax is problematic in practice. `guard` has precedent in functional languages, for instance in Haskell where the `guard` function is idiomatically used as part of monadic `do`-notation computations, and has the same positive condition semantics in those languages.<br></p><p>Right.  Jay, I’m sorry if you or others find the name “guard” to be confusing, but there are many Swift developers that like it.  I is almost inconceivable that we would change it at this point.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ded637e504dbce3404221366895c76e3?s=50"></div><header><strong>[pitch] rename &#39;guard&#39; to &#39;ensure&#39;</strong> from <string>alessandro aresta</string> &lt;performerstone at gmail.com&gt;<p>October 26, 2016 at 10:00:00am</p></header><div class="content"><p>Ensure is more comprehensible, guard is for sure &quot;always&quot; been there in<br>older languages... could it be kind of aliased somehow? I tend to confuse<br>guard sometimes, despite many few decades of using it.<br></p><p>On Wed, Oct 26, 2016 at 2:52 AM, Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Oct 25, 2016, at 10:20 AM, Joe Groff via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; At this point in Swift&#39;s evolution, source-breaking changes to the<br>&gt; language require strong motivation. We can&#39;t really entertain superficial<br>&gt; keyword changes like this without overwhelming evidence that the existing<br>&gt; syntax is problematic in practice. `guard` has precedent in functional<br>&gt; languages, for instance in Haskell where the `guard` function is<br>&gt; idiomatically used as part of monadic `do`-notation computations, and has<br>&gt; the same positive condition semantics in those languages.<br>&gt;<br>&gt; Right.  Jay, I’m sorry if you or others find the name “guard” to be<br>&gt; confusing, but there are many Swift developers that like it.  I is almost<br>&gt; inconceivable that we would change it at this point.<br>&gt;<br>&gt; -Chris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p><br></p><p>-- <br>*Alessandro Alexander Stone Aresta*<br></p><p>senior development &amp; consulting<br></p><p>*email  : performerstone at gmail.com &lt;performerstone at gmail.com&gt;*<br>*skype : alexanderstone2007*<br></p><p><br>*This  is  a  confidential   communication   intended   only  for  the<br>named addressee. *<br>* If you received this **communication **in **error, please notify<br>us  and return and delete it without  reading it. *<br></p><p>*This e-mail may not be *<br>*disclosed,  copied or distributed*<br>* in  **any form without the obtained permission in writing of  Alessandro<br>Aresta. *<br></p><p>*In  any case it  may not be altered or otherwise *<br></p><p>*changed.  *<br>* Whilst  Alessandro Aresta believes  that  the   information  is  correct<br>at  the date  of   the  e-mail,  no  warranty and *<br></p><p>*representation  is given to this effect and no responsibility can be<br>accepted by Alessandro Aresta.*<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161026/50b039c5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[pitch] rename &#39;guard&#39; to &#39;ensure&#39;</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>October 26, 2016 at 09:00:00am</p></header><div class="content"><p>On Oct 26, 2016, at 1:11 AM, alessandro aresta &lt;performerstone at gmail.com&gt; wrote:<br>&gt; Ensure is more comprehensible, guard is for sure &quot;always&quot; been there in older languages... could it be kind of aliased somehow? I tend to confuse guard sometimes, despite many few decades of using it.<br></p><p>No, we don’t introduce needless aliases for keywords like this.<br></p><p>I haven’t seen it mentioned on this thread yet, but we did consider “ensure” back when the guard statement was being designed for Swift 2.  We specifically avoided it because “ensure” is very much in the lexicon of pre and post conditions, and we want to reserve its use if/when we ever get there.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[pitch] rename &#39;guard&#39; to &#39;ensure&#39;</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>October 27, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; On Oct 26, 2016, at 11:41, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Oct 26, 2016, at 1:11 AM, alessandro aresta &lt;performerstone at gmail.com&gt; wrote:<br>&gt;&gt; Ensure is more comprehensible, guard is for sure &quot;always&quot; been there in older languages... could it be kind of aliased somehow?<br>&gt; <br>&gt; No, we don’t introduce needless aliases for keywords like this.<br></p><p>What about allowing internal non-type aliases?<br>    alias ensure = guard //can&#39;t be public<br>I know it&#39;s kinda encroaching on &quot;macro&quot; territory, but can&#39;t we already do simple text substitutions by importing a #define from C? Would allowing non-type aliases really be any different?<br></p><p>It&#39;d address the concerns raised by I think nearly all of the &quot;term-of-art&quot; vs &quot;term-of-English&quot; proposals. Prohibiting aliases from being declared as `public` would guard the language&#39;s namespace, and ensure that it doesn&#39;t get polluted with every library author&#39;s favorite alternate spelling(s).<br></p><p>- Dave Sweeris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161027/a78e07d9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[pitch] rename &#39;guard&#39; to &#39;ensure&#39;</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>October 27, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On 27 Oct 2016, at 13:31, David Sweeris via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; On Oct 26, 2016, at 11:41, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Oct 26, 2016, at 1:11 AM, alessandro aresta &lt;performerstone at gmail.com &lt;mailto:performerstone at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; Ensure is more comprehensible, guard is for sure &quot;always&quot; been there in older languages... could it be kind of aliased somehow?<br>&gt;&gt; <br>&gt;&gt; No, we don’t introduce needless aliases for keywords like this.<br>&gt; <br>&gt; What about allowing internal non-type aliases?<br>&gt;     alias ensure = guard //can&#39;t be public<br>&gt; I know it&#39;s kinda encroaching on &quot;macro&quot; territory, but can&#39;t we already do simple text substitutions by importing a #define from C? Would allowing non-type aliases really be any different?<br>&gt; <br>&gt; It&#39;d address the concerns raised by I think nearly all of the &quot;term-of-art&quot; vs &quot;term-of-English&quot; proposals. Prohibiting aliases from being declared as `public` would guard the language&#39;s namespace, and ensure that it doesn&#39;t get polluted with every library author&#39;s favorite alternate spelling(s).<br></p><p>This would just risk more confusion I think when mixing and matching code that uses one or the other. Personally I think that guard is fine, while ensure reads a bit better I like that guard sounds more authoritative, which suits its requirement to return/break/continue.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161027/4a548bed/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[pitch] rename &#39;guard&#39; to &#39;ensure&#39;</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>October 27, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Oct 27, 2016, at 08:09, Haravikk &lt;swift-evolution at haravikk.me&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 27 Oct 2016, at 13:31, David Sweeris via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Oct 26, 2016, at 11:41, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; On Oct 26, 2016, at 1:11 AM, alessandro aresta &lt;performerstone at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; Ensure is more comprehensible, guard is for sure &quot;always&quot; been there in older languages... could it be kind of aliased somehow?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; No, we don’t introduce needless aliases for keywords like this.<br>&gt;&gt; <br>&gt;&gt; What about allowing internal non-type aliases?<br>&gt;&gt;     alias ensure = guard //can&#39;t be public<br>&gt;&gt; I know it&#39;s kinda encroaching on &quot;macro&quot; territory, but can&#39;t we already do simple text substitutions by importing a #define from C? Would allowing non-type aliases really be any different?<br>&gt;&gt; <br>&gt;&gt; It&#39;d address the concerns raised by I think nearly all of the &quot;term-of-art&quot; vs &quot;term-of-English&quot; proposals. Prohibiting aliases from being declared as `public` would guard the language&#39;s namespace, and ensure that it doesn&#39;t get polluted with every library author&#39;s favorite alternate spelling(s).<br>&gt; <br>&gt; This would just risk more confusion I think when mixing and matching code that uses one or the other.<br></p><p>You could make that argument about any code that &quot;wraps&quot; or duplicates stdlib/language behavior. That doesn&#39;t mean you shouldn&#39;t be able to use it. I&#39;m not in front of my computer, so I can&#39;t double-check, but I&#39;m pretty sure you can already put &quot;#define ensure guard&quot; in a C file and import it... This would just make the syntax nicer.<br></p><p>Come to think of it, that means this would be out of scope for phase 1.<br></p><p>- Dave Sweeris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161027/e0ad71c7/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14f382feb5f0dd3d3700edf8d6156aa9?s=50"></div><header><strong>[pitch] rename &#39;guard&#39; to &#39;ensure&#39;</strong> from <string>Jay Abbott</string> &lt;jay at abbott.me.uk&gt;<p>October 27, 2016 at 01:00:00pm</p></header><div class="content"><p>You’re really in pun mode today, David! :)<br></p><p>Even though I originally pitched this, I go along with the source-churn<br>arguments people have made[1], and the one about ensure potentially being<br>used for something else in the future. But I do really like Marco’s<br>suggestion of guard: because it changes the interpretation…<br></p><p>guard: x &gt; 0 else { return }<br></p><p>This now reads as: *This is a guard: x must be greater than zero, otherwise<br>return*. The only issue is it has the same syntax as a break-label so<br>becomes potentially ambiguous/confusing. Is there another way that could be<br>achieved?<br></p><p>[1] For larger changes, but I think some of the arguments against breaking<br>changes are weak for smaller changes/refinements.<br>​<br></p><p>On Thu, 27 Oct 2016 at 13:31 David Sweeris via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On Oct 26, 2016, at 11:41, Chris Lattner via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On Oct 26, 2016, at 1:11 AM, alessandro aresta &lt;performerstone at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; Ensure is more comprehensible, guard is for sure &quot;always&quot; been there in<br>&gt; older languages... could it be kind of aliased somehow?<br>&gt;<br>&gt;<br>&gt; No, we don’t introduce needless aliases for keywords like this.<br>&gt;<br>&gt;<br>&gt; What about allowing internal non-type aliases?<br>&gt;     alias ensure = guard //can&#39;t be public<br>&gt; I know it&#39;s kinda encroaching on &quot;macro&quot; territory, but can&#39;t we already<br>&gt; do simple text substitutions by importing a #define from C? Would allowing<br>&gt; non-type aliases really be any different?<br>&gt;<br>&gt; It&#39;d address the concerns raised by I think nearly all of the<br>&gt; &quot;term-of-art&quot; vs &quot;term-of-English&quot; proposals. Prohibiting aliases from<br>&gt; being declared as `public` would *guard* the language&#39;s namespace, and<br>&gt; *ensure* that it doesn&#39;t get polluted with every library author&#39;s<br>&gt; favorite alternate spelling(s).<br>&gt;<br>&gt; - Dave Sweeris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161027/c399f685/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[pitch] rename &#39;guard&#39; to &#39;ensure&#39;</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>October 27, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Oct 27, 2016, at 08:21, Jay Abbott &lt;jay at abbott.me.uk&gt; wrote:<br>&gt; <br>&gt; You’re really in pun mode today, David! :)<br>&gt; <br>It&#39;s the best mode 😎<br></p><p>&gt; But I do really like Marco’s suggestion of guard: because it changes the interpretation…<br>&gt; <br>&gt; guard: x &gt; 0 else { return }<br>&gt; This now reads as: This is a guard: x must be greater than zero, otherwise return. The only issue is it has the same syntax as a break-label so becomes potentially ambiguous/confusing. Is there another way that could be achieved?<br>&gt; <br>The ambiguity could be resolved by disallowing keywords as labels. I don&#39;t use them much, though, so I&#39;m not sure how much that would affect readability.<br></p><p>- Dave Sweeris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161027/fe346bb4/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[pitch] rename &#39;guard&#39; to &#39;ensure&#39;</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>October 27, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; Am 26.10.2016 um 18:41 schrieb Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt;&gt; On Oct 26, 2016, at 1:11 AM, alessandro aresta &lt;performerstone at gmail.com&gt; wrote:<br>&gt;&gt; Ensure is more comprehensible, guard is for sure &quot;always&quot; been there in older languages... could it be kind of aliased somehow? I tend to confuse guard sometimes, despite many few decades of using it.<br>&gt; <br>&gt; No, we don’t introduce needless aliases for keywords like this.<br>&gt; <br>&gt; I haven’t seen it mentioned on this thread yet, but we did consider “ensure” back when the guard statement was being designed for Swift 2.  We specifically avoided it because “ensure” is very much in the lexicon of pre and post conditions, and we want to reserve its use if/when we ever get there.<br></p><p>Good point! Looking forward to that :-) <br>I always liked Eiffel&#39;s handling of pre and post conditions.<br></p><p>-Thorsten <br></p><p>&gt; <br>&gt; -Chris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>[pitch] rename &#39;guard&#39; to &#39;ensure&#39;</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>October 27, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Oct 25, 2016, at 11:38 AM, Jay Abbott via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I mentioned this in passing on a different thread &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20161024/028371.html&gt;. Although it caused some slight confusion when I first learned the &#39;guard&#39; keyword, it was easy to overcome and I didn&#39;t think the issue was strong enough to warrant a change. However, after reading the other discussion on that thread (around the possibility of a &#39;matches&#39; keyword and how code is &quot;read out&quot; or &quot;internally verbalised&quot;), and seeing how passionate everyone here is about Swift, I&#39;m thinking that maybe it should be changed.<br>&gt; <br>&gt; The issue is that in English, &#39;guard&#39; has an inverted logical connotation to how it is used in Swift. For example, take this sentence:<br>&gt; <br>&gt; &quot;In some functions it&#39;s a good idea is to put some checks in place, in order to guard against invalid input values.&quot;<br>&gt; <br>&gt; Swift&#39;s &#39;guard&#39; keyword is to guard against invalid values.<br>&gt; Or to put it another way, to ensure that we have valid values.<br>&gt; <br>&gt; However, the way it reads in Swift, we guard that we have valid values.<br>&gt; <br>&gt; I fully understand and agree that it&#39;s better to state the true condition for valid values here, using else to perform a contingency. And I understand why the word &#39;guard&#39; was picked (given the above example sentence). I just think that &#39;ensure&#39; would be better.<br>&gt; <br>&gt; ensure x &gt; 0 else {<br>&gt;     return<br>&gt; }<br>&gt; <br>&gt; ensure camp.isSafe else {<br>&gt;     runForTheHills()<br>&gt; }<br>&gt; <br>&gt; ensure let thingy = object as? Thingy else {<br>&gt;     return ExamineThingyResult.NotAThingy<br>&gt; }<br>&gt; <br>&gt; As I said, I thought it was too small a niggle to worry about, but seeing how people on here care so much about making Swift better, and the willingness to change things, I thought I&#39;d suggest it. Although it would be a breaking change, the code changes are easy.<br>&gt; <br>&gt; So what do people think? In particular it would be interesting to hear from non-native English speakers on this, did &#39;guard&#39; confuse you or did &#39;guard&#39; cause your understanding of the English word to be confused?<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>As long as we’re considering Ensure, how about Depends? It will keep optional values from leaking out.<br></p><p>Charles<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161027/89ae1530/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[pitch] rename &#39;guard&#39; to &#39;ensure&#39;</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>October 29, 2016 at 03:00:00am</p></header><div class="content"><p>Sent from my iPhone<br></p><p>&gt; On Oct 27, 2016, at 17:53, Charles Srstka via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; As long as we’re considering Ensure, how about Depends? It will keep optional values from leaking out.<br>+1<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
