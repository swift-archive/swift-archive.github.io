<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b5c4dc755b4126460a891e89555de075?s=50"></div><header><strong>Guard Implicit Fallback</strong> from <string>Tighe Racicot</string> &lt;tighe.racicot at gmail.com&gt;<p>February 11, 2016 at 03:00:00am</p></header><div class="content"><p>Hey everyone,<br></p><p>I feel that `guard` could be a little more Swifty and would like to start a<br>conversation concerning it.<br></p><p>For example, I often have a function whose job depends on an optional<br>having a value, and so I guard-let at the start and return if the guard<br>fails. Or if the function returns an optional type, I&#39;ll simply return nil<br>if guard fails.<br></p><p>Can we improve on the general fallback case? Could we simply say:<br></p><p>func noReturn() {<br>    guard let aValue = someOptional<br>    ....<br>}<br></p><p>and have that imply &quot;else { return *void or nil* }&quot;<br></p><p>What are your thoughts?<br></p><p>Tighe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/a9e2d12a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>Guard Implicit Fallback</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>February 11, 2016 at 12:00:00pm</p></header><div class="content"><p>I agree the nil fallback case is a common one, but the loss of readability and decreased understanding of control flow here makes me think special-casing this isn&#39;t all it&#39;s cracked up to be.<br></p><p>~Robert Widmann<br></p><p>2016/02/10 22:40、Tighe Racicot via swift-evolution &lt;swift-evolution at swift.org&gt; のメッセージ:<br></p><p>&gt; Hey everyone, <br>&gt; <br>&gt; I feel that `guard` could be a little more Swifty and would like to start a conversation concerning it.<br>&gt; <br>&gt; For example, I often have a function whose job depends on an optional having a value, and so I guard-let at the start and return if the guard fails. Or if the function returns an optional type, I&#39;ll simply return nil if guard fails. <br>&gt; <br>&gt; Can we improve on the general fallback case? Could we simply say:<br>&gt; <br>&gt; func noReturn() {<br>&gt;     guard let aValue = someOptional<br>&gt;     ....<br>&gt; }<br>&gt; <br>&gt; and have that imply &quot;else { return void or nil }&quot;<br>&gt; <br>&gt; What are your thoughts?<br>&gt; <br>&gt; Tighe<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/1920add6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Guard Implicit Fallback</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>February 11, 2016 at 05:00:00pm</p></header><div class="content"><p>I believe this has already been proposed on the list in the past. I don&#39;t<br>have easy access to the archives at the moment so I can&#39;t provide a<br>convenient link.<br></p><p>The gist of it--or at least one of the compelling arguments against the<br>idea--was that the &#39;obvious&#39; implicit behavior becomes non-obvious when you<br>take into account guard statements inside loops, for example. Do you<br>continue? break? return? And once you make a decision for each of the<br>scenarios envisioned you end up with a complicated series of fallbacks that<br>need extensive documentation, which is no longer much of a win over<br>explicitly writing your fallback.<br>On Thu, Feb 11, 2016 at 11:38 AM Developer via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I agree the nil fallback case is a common one, but the loss of readability<br>&gt; and decreased understanding of control flow here makes me think<br>&gt; special-casing this isn&#39;t all it&#39;s cracked up to be.<br>&gt;<br>&gt; ~Robert Widmann<br>&gt;<br>&gt; 2016/02/10 22:40、Tighe Racicot via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; のメッセージ:<br>&gt;<br>&gt; Hey everyone,<br>&gt;<br>&gt; I feel that `guard` could be a little more Swifty and would like to start<br>&gt; a conversation concerning it.<br>&gt;<br>&gt; For example, I often have a function whose job depends on an optional<br>&gt; having a value, and so I guard-let at the start and return if the guard<br>&gt; fails. Or if the function returns an optional type, I&#39;ll simply return nil<br>&gt; if guard fails.<br>&gt;<br>&gt; Can we improve on the general fallback case? Could we simply say:<br>&gt;<br>&gt; func noReturn() {<br>&gt;     guard let aValue = someOptional<br>&gt;     ....<br>&gt; }<br>&gt;<br>&gt; and have that imply &quot;else { return *void or nil* }&quot;<br>&gt;<br>&gt; What are your thoughts?<br>&gt;<br>&gt; Tighe<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/3037eb7a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/27ca9066ad05bd8aa9ec366115f3cd38?s=50"></div><header><strong>Guard Implicit Fallback</strong> from <string>Kurt Werle</string> &lt;kurt at circlew.org&gt;<p>February 11, 2016 at 09:00:00am</p></header><div class="content"><p>It seems like this is related to the issue of closures and [weak self].  It<br>would be nice to have similar mechanisms for both.<br></p><p>func mustHaveAllParameters(arg: String!)*?* -&gt; String? // only executes if<br>arg is not nil.  Else returns nil/Void<br></p><p>object.withClosure() { [unowned self]*?* in ...} // only executes the<br>closure if self is not nil.  Else returns nil/Void<br></p><p><br>On Thu, Feb 11, 2016 at 9:46 AM, Xiaodi Wu via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I believe this has already been proposed on the list in the past. I don&#39;t<br>&gt; have easy access to the archives at the moment so I can&#39;t provide a<br>&gt; convenient link.<br>&gt;<br>&gt; The gist of it--or at least one of the compelling arguments against the<br>&gt; idea--was that the &#39;obvious&#39; implicit behavior becomes non-obvious when you<br>&gt; take into account guard statements inside loops, for example. Do you<br>&gt; continue? break? return? And once you make a decision for each of the<br>&gt; scenarios envisioned you end up with a complicated series of fallbacks that<br>&gt; need extensive documentation, which is no longer much of a win over<br>&gt; explicitly writing your fallback.<br>&gt;<br>&gt; On Thu, Feb 11, 2016 at 11:38 AM Developer via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; I agree the nil fallback case is a common one, but the loss of<br>&gt;&gt; readability and decreased understanding of control flow here makes me think<br>&gt;&gt; special-casing this isn&#39;t all it&#39;s cracked up to be.<br>&gt;&gt;<br>&gt;&gt; ~Robert Widmann<br>&gt;&gt;<br>&gt;&gt; 2016/02/10 22:40、Tighe Racicot via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; のメッセージ:<br>&gt;&gt;<br>&gt;&gt; Hey everyone,<br>&gt;&gt;<br>&gt;&gt; I feel that `guard` could be a little more Swifty and would like to start<br>&gt;&gt; a conversation concerning it.<br>&gt;&gt;<br>&gt;&gt; For example, I often have a function whose job depends on an optional<br>&gt;&gt; having a value, and so I guard-let at the start and return if the guard<br>&gt;&gt; fails. Or if the function returns an optional type, I&#39;ll simply return nil<br>&gt;&gt; if guard fails.<br>&gt;&gt;<br>&gt;&gt; Can we improve on the general fallback case? Could we simply say:<br>&gt;&gt;<br>&gt;&gt; func noReturn() {<br>&gt;&gt;     guard let aValue = someOptional<br>&gt;&gt;     ....<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; and have that imply &quot;else { return *void or nil* }&quot;<br>&gt;&gt;<br>&gt;&gt; What are your thoughts?<br>&gt;&gt;<br>&gt;&gt; Tighe<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p><p><br>-- <br>kurt at CircleW.org<br>http://www.CircleW.org/kurt/<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/710d6d5f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/34b9659227ea084bb09a8ba4a450a162?s=50"></div><header><strong>Guard Implicit Fallback</strong> from <string>Jessy Catterwaul</string> &lt;mr.jessy at gmail.com&gt;<p>February 11, 2016 at 01:00:00pm</p></header><div class="content"><p>The first related thought I had was answered by Chris Lattner:<br></p><p>https://forums.developer.apple.com/thread/4857<br></p><p>Does this proposal represent “code clarity”? Yes, I think so. Either guard must be paired with an “else”, or the else clause is the obvious, which is normally a return:<br></p><p>func ƒ&lt;A, B, C&gt;(a: A?, b: B?, c: C?) {<br>   guard let a = a, b = b, c = c else {return}<br>}<br></p><p>This is better:<br>guard let a, b, c<br></p><p>But what should it be in a loop? break? continue? I don’t think return would be appropriate. Not that I escape loops very often anymore; return is obvious for “forEach”, because it can’t “continue” or “break”.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/525bca1f/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>Guard Implicit Fallback</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>February 11, 2016 at 07:00:00pm</p></header><div class="content"><p>+1 to the arguments of Robert and Xiaodi<br></p><p>-Thorsten<br></p><p><br>&gt; Am 11.02.2016 um 18:46 schrieb Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; I believe this has already been proposed on the list in the past. I don&#39;t have easy access to the archives at the moment so I can&#39;t provide a convenient link.<br>&gt; <br>&gt; The gist of it--or at least one of the compelling arguments against the idea--was that the &#39;obvious&#39; implicit behavior becomes non-obvious when you take into account guard statements inside loops, for example. Do you continue? break? return? And once you make a decision for each of the scenarios envisioned you end up with a complicated series of fallbacks that need extensive documentation, which is no longer much of a win over explicitly writing your fallback.<br>&gt; On Thu, Feb 11, 2016 at 11:38 AM Developer via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; I agree the nil fallback case is a common one, but the loss of readability and decreased understanding of control flow here makes me think special-casing this isn&#39;t all it&#39;s cracked up to be.<br>&gt; <br>&gt; ~Robert Widmann<br>&gt; <br>&gt; 2016/02/10 22:40、Tighe Racicot via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; のメッセージ:<br>&gt; <br>&gt;&gt; Hey everyone, <br>&gt;&gt; <br>&gt;&gt; I feel that `guard` could be a little more Swifty and would like to start a conversation concerning it.<br>&gt;&gt; <br>&gt;&gt; For example, I often have a function whose job depends on an optional having a value, and so I guard-let at the start and return if the guard fails. Or if the function returns an optional type, I&#39;ll simply return nil if guard fails. <br>&gt;&gt; <br>&gt;&gt; Can we improve on the general fallback case? Could we simply say:<br>&gt;&gt; <br>&gt;&gt; func noReturn() {<br>&gt;&gt;     guard let aValue = someOptional<br>&gt;&gt;     ....<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; and have that imply &quot;else { return void or nil }&quot;<br>&gt;&gt; <br>&gt;&gt; What are your thoughts?<br>&gt;&gt; <br>&gt;&gt; Tighe<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/9b64e45d/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2861bfeb71de9de58206bb6ae750bc2f?s=50"></div><header><strong>Guard Implicit Fallback</strong> from <string>ilya</string> &lt;ilya.nikokoshev at gmail.com&gt;<p>February 12, 2016 at 07:00:00am</p></header><div class="content"><p>Agreed that explicit return is more readable.<br>I&#39;d be happy to lose brackets around return though:<br></p><p>guard let value = optional else return<br></p><p>On Thu, Feb 11, 2016 at 18:46 Xiaodi Wu via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I believe this has already been proposed on the list in the past. I don&#39;t<br>&gt; have easy access to the archives at the moment so I can&#39;t provide a<br>&gt; convenient link.<br>&gt;<br>&gt; The gist of it--or at least one of the compelling arguments against the<br>&gt; idea--was that the &#39;obvious&#39; implicit behavior becomes non-obvious when you<br>&gt; take into account guard statements inside loops, for example. Do you<br>&gt; continue? break? return? And once you make a decision for each of the<br>&gt; scenarios envisioned you end up with a complicated series of fallbacks that<br>&gt; need extensive documentation, which is no longer much of a win over<br>&gt; explicitly writing your fallback.<br>&gt; On Thu, Feb 11, 2016 at 11:38 AM Developer via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; I agree the nil fallback case is a common one, but the loss of<br>&gt;&gt; readability and decreased understanding of control flow here makes me think<br>&gt;&gt; special-casing this isn&#39;t all it&#39;s cracked up to be.<br>&gt;&gt;<br>&gt;&gt; ~Robert Widmann<br>&gt;&gt;<br>&gt;&gt; 2016/02/10 22:40、Tighe Racicot via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; のメッセージ:<br>&gt;&gt;<br>&gt;&gt; Hey everyone,<br>&gt;&gt;<br>&gt;&gt; I feel that `guard` could be a little more Swifty and would like to start<br>&gt;&gt; a conversation concerning it.<br>&gt;&gt;<br>&gt;&gt; For example, I often have a function whose job depends on an optional<br>&gt;&gt; having a value, and so I guard-let at the start and return if the guard<br>&gt;&gt; fails. Or if the function returns an optional type, I&#39;ll simply return nil<br>&gt;&gt; if guard fails.<br>&gt;&gt;<br>&gt;&gt; Can we improve on the general fallback case? Could we simply say:<br>&gt;&gt;<br>&gt;&gt; func noReturn() {<br>&gt;&gt;     guard let aValue = someOptional<br>&gt;&gt;     ....<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; and have that imply &quot;else { return *void or nil* }&quot;<br>&gt;&gt;<br>&gt;&gt; What are your thoughts?<br>&gt;&gt;<br>&gt;&gt; Tighe<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160212/25f4d8fe/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/72cc28f12d423d7d87c5e20e8de0966c?s=50"></div><header><strong>Guard Implicit Fallback</strong> from <string>Ilya Belenkiy</string> &lt;ilya.belenkiy at gmail.com&gt;<p>February 12, 2016 at 07:00:00pm</p></header><div class="content"><p>Losing brackets around the return would mean that no additional statements<br>(for example logging or some other useful thing) will be possible in the<br>early return<br></p><p>On Fri, Feb 12, 2016 at 2:26 AM ilya via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Agreed that explicit return is more readable.<br>&gt; I&#39;d be happy to lose brackets around return though:<br>&gt;<br>&gt; guard let value = optional else return<br>&gt;<br>&gt; On Thu, Feb 11, 2016 at 18:46 Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; I believe this has already been proposed on the list in the past. I don&#39;t<br>&gt;&gt; have easy access to the archives at the moment so I can&#39;t provide a<br>&gt;&gt; convenient link.<br>&gt;&gt;<br>&gt;&gt; The gist of it--or at least one of the compelling arguments against the<br>&gt;&gt; idea--was that the &#39;obvious&#39; implicit behavior becomes non-obvious when you<br>&gt;&gt; take into account guard statements inside loops, for example. Do you<br>&gt;&gt; continue? break? return? And once you make a decision for each of the<br>&gt;&gt; scenarios envisioned you end up with a complicated series of fallbacks that<br>&gt;&gt; need extensive documentation, which is no longer much of a win over<br>&gt;&gt; explicitly writing your fallback.<br>&gt;&gt; On Thu, Feb 11, 2016 at 11:38 AM Developer via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; I agree the nil fallback case is a common one, but the loss of<br>&gt;&gt;&gt; readability and decreased understanding of control flow here makes me think<br>&gt;&gt;&gt; special-casing this isn&#39;t all it&#39;s cracked up to be.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; ~Robert Widmann<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 2016/02/10 22:40、Tighe Racicot via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; のメッセージ:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Hey everyone,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I feel that `guard` could be a little more Swifty and would like to<br>&gt;&gt;&gt; start a conversation concerning it.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; For example, I often have a function whose job depends on an optional<br>&gt;&gt;&gt; having a value, and so I guard-let at the start and return if the guard<br>&gt;&gt;&gt; fails. Or if the function returns an optional type, I&#39;ll simply return nil<br>&gt;&gt;&gt; if guard fails.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Can we improve on the general fallback case? Could we simply say:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; func noReturn() {<br>&gt;&gt;&gt;     guard let aValue = someOptional<br>&gt;&gt;&gt;     ....<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; and have that imply &quot;else { return *void or nil* }&quot;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; What are your thoughts?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Tighe<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160212/04aadba1/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>Guard Implicit Fallback</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>February 11, 2016 at 12:00:00pm</p></header><div class="content"><p>Error cases are very often neglected and I feel that this would only encourage it.<br></p><p>Félix<br></p><p>&gt; Le 10 févr. 2016 à 22:40:48, Tighe Racicot via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Hey everyone, <br>&gt; <br>&gt; I feel that `guard` could be a little more Swifty and would like to start a conversation concerning it.<br>&gt; <br>&gt; For example, I often have a function whose job depends on an optional having a value, and so I guard-let at the start and return if the guard fails. Or if the function returns an optional type, I&#39;ll simply return nil if guard fails. <br>&gt; <br>&gt; Can we improve on the general fallback case? Could we simply say:<br>&gt; <br>&gt; func noReturn() {<br>&gt;     guard let aValue = someOptional<br>&gt;     ....<br>&gt; }<br>&gt; <br>&gt; and have that imply &quot;else { return void or nil }&quot;<br>&gt; <br>&gt; What are your thoughts?<br>&gt; <br>&gt; Tighe<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/a8ece021/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3e4acc351c34224514f9d58b08389390?s=50"></div><header><strong>Guard Implicit Fallback</strong> from <string>Myles Schultz</string> &lt;myleslschultz at icloud.com&gt;<p>February 11, 2016 at 06:00:00pm</p></header><div class="content"><p>Generally, if you&#39;re using guard, you&#39;re looking for something that your program requires before moving on. If you get nil back, you probably want to do more than just return nil. When you&#39;re developing something, returning nil is simply convent, but doing something about that so the user realizes something has gone wrong is also important.<br></p><p>At the same time, I don&#39;t see why we couldn&#39;t have both:  guard and guard else. Much like ARC, couldn&#39;t the compiler provide a case where lines that only specify guard automatically return nil and guards that specify an else run the specified else in that instance?<br></p><p>Myles<br></p><p>Sent from my iPhone<br></p><p>&gt; On Feb 10, 2016, at 10:40 PM, Tighe Racicot via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hey everyone, <br>&gt; <br>&gt; I feel that `guard` could be a little more Swifty and would like to start a conversation concerning it.<br>&gt; <br>&gt; For example, I often have a function whose job depends on an optional having a value, and so I guard-let at the start and return if the guard fails. Or if the function returns an optional type, I&#39;ll simply return nil if guard fails. <br>&gt; <br>&gt; Can we improve on the general fallback case? Could we simply say:<br>&gt; <br>&gt; func noReturn() {<br>&gt;     guard let aValue = someOptional<br>&gt;     ....<br>&gt; }<br>&gt; <br>&gt; and have that imply &quot;else { return void or nil }&quot;<br>&gt; <br>&gt; What are your thoughts?<br>&gt; <br>&gt; Tighe<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/20593f25/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
