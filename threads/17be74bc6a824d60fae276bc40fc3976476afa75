<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>Explicity Size Clipping</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>January  6, 2016 at 06:00:00pm</p></header><div class="content"><p>I have a overloaded method for a protocol that takes an Int or double.<br></p><p>I have an issue with swift calling the Int version when passing in a UInt32<br>. Ideally I would prefer the compiler to detect I am about to do something<br>which will cause an overflow and throw an error.<br></p><p>I would then have to explicitly add a overloaded UInt32 method or<br>explicitly convert it to Int like so &quot;Int(uintVariable)&quot;.<br></p><p>-- <br> Wizard<br>james at supmenow.com<br>+44 7523 279 698<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/17befa75/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>Explicity Size Clipping</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>January  6, 2016 at 01:00:00pm</p></header><div class="content"><p>I don&#39;t understand. Can you show a code example?<br></p><p>Félix<br></p><p>&gt; Le 6 janv. 2016 à 13:02:43, James Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; I have a overloaded method for a protocol that takes an Int or double.<br>&gt; <br>&gt; I have an issue with swift calling the Int version when passing in a UInt32 . Ideally I would prefer the compiler to detect I am about to do something which will cause an overflow and throw an error.<br>&gt; <br>&gt; I would then have to explicitly add a overloaded UInt32 method or explicitly convert it to Int like so &quot;Int(uintVariable)&quot;.<br>&gt; <br>&gt; -- <br>&gt;  Wizard<br>&gt; james at supmenow.com &lt;mailto:james at supmenow.com&gt;<br>&gt; +44 7523 279 698<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/01038232/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>Explicity Size Clipping</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>January  6, 2016 at 06:00:00pm</p></header><div class="content"><p>protocol Box: CustomStringConvertible, CustomDebugStringConvertible {<br></p><p><br></p><p>    typealias FloatLiteralType = Double<br></p><p>    typealias IntegerLiteralType = Int<br></p><p>    typealias BoxType = Any<br></p><p><br></p><p>    var value: BoxType { get set }<br></p><p><br></p><p>    init()<br></p><p>    init(_ value: BoxType)<br></p><p>}<br></p><p>extension Box where Self.BoxType == Double {<br></p><p><br></p><p>    init(_ value: Double) {<br></p><p><br></p><p>        self.init()<br></p><p>        self.value = value<br></p><p>    }<br></p><p><br></p><p>    init(_ value: Int) {<br></p><p>        self.init()<br></p><p>        self.value = Double(value)<br></p><p>    }<br></p><p><br></p><p>    init(_ value: UInt32) {<br></p><p>        self.init()<br></p><p>        self.value = Double(value)<br></p><p>    }<br></p><p>}<br></p><p><br></p><p>Without that last method, Swift tries to give the UInt32 to the Int version<br>of the method which isn&#39;t safe in my eyes and I would have expected a<br>compiler error.<br></p><p>On Wed, Jan 6, 2016 at 6:14 PM, Félix Cloutier &lt;felixcca at yahoo.ca&gt; wrote:<br></p><p>&gt; I don&#39;t understand. Can you show a code example?<br>&gt;<br>&gt; Félix<br>&gt;<br>&gt; Le 6 janv. 2016 à 13:02:43, James Campbell via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;<br>&gt; I have a overloaded method for a protocol that takes an Int or double.<br>&gt;<br>&gt; I have an issue with swift calling the Int version when passing in a<br>&gt; UInt32 . Ideally I would prefer the compiler to detect I am about to do<br>&gt; something which will cause an overflow and throw an error.<br>&gt;<br>&gt; I would then have to explicitly add a overloaded UInt32 method or<br>&gt; explicitly convert it to Int like so &quot;Int(uintVariable)&quot;.<br>&gt;<br>&gt; --<br>&gt;  Wizard<br>&gt; james at supmenow.com<br>&gt; +44 7523 279 698<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br></p><p><br>-- <br> Wizard<br>james at supmenow.com<br>+44 7523 279 698<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/de8bd7c8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>Explicity Size Clipping</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>January  6, 2016 at 01:00:00pm</p></header><div class="content"><p>I either don&#39;t understand or can&#39;t reproduce the issue. This code:<br></p><p>&gt; class Box {<br>&gt; 	let value: Int<br>&gt; 	<br>&gt; 	init(value: Int) {<br>&gt; 		self.value = value<br>&gt; 	}<br>&gt; }<br>&gt; <br>&gt; let test: UInt32 = 4<br>&gt; let box = Box(value: test)<br></p><p>does not compile (&quot;foo.swift:10:22: error: cannot convert value of type &#39;UInt32&#39; to expected argument type &#39;Int&#39;&quot;).<br></p><p>Félix<br></p><p>&gt; Le 6 janv. 2016 à 13:17:03, James Campbell &lt;james at supmenow.com&gt; a écrit :<br>&gt; <br>&gt; protocol Box: CustomStringConvertible, CustomDebugStringConvertible {<br>&gt; <br>&gt;     <br>&gt;     typealias FloatLiteralType = Double<br>&gt; <br>&gt;     typealias IntegerLiteralType = Int<br>&gt; <br>&gt;     typealias BoxType = Any<br>&gt; <br>&gt;     <br>&gt;     var value: BoxType { get set }<br>&gt; <br>&gt;     <br>&gt;     init()<br>&gt; <br>&gt;     init(_ value: BoxType)<br>&gt; <br>&gt; }<br>&gt; <br>&gt; extension Box where Self.BoxType == Double {<br>&gt; <br>&gt;     <br>&gt;     init(_ value: Double) {<br>&gt; <br>&gt;         <br>&gt;         self.init()<br>&gt; <br>&gt;         self.value = value<br>&gt; <br>&gt;     }<br>&gt; <br>&gt;     <br>&gt;     init(_ value: Int) {<br>&gt; <br>&gt;         self.init()<br>&gt; <br>&gt;         self.value = Double(value)<br>&gt; <br>&gt;     }<br>&gt; <br>&gt;     <br>&gt;     init(_ value: UInt32) {<br>&gt; <br>&gt;         self.init()<br>&gt; <br>&gt;         self.value = Double(value)<br>&gt; <br>&gt;     }<br>&gt; <br>&gt; }<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; Without that last method, Swift tries to give the UInt32 to the Int version of the method which isn&#39;t safe in my eyes and I would have expected a compiler error.<br>&gt; <br>&gt; <br>&gt; On Wed, Jan 6, 2016 at 6:14 PM, Félix Cloutier &lt;felixcca at yahoo.ca &lt;mailto:felixcca at yahoo.ca&gt;&gt; wrote:<br>&gt; I don&#39;t understand. Can you show a code example?<br>&gt; <br>&gt; Félix<br>&gt; <br>&gt;&gt; Le 6 janv. 2016 à 13:02:43, James Campbell via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; I have a overloaded method for a protocol that takes an Int or double.<br>&gt;&gt; <br>&gt;&gt; I have an issue with swift calling the Int version when passing in a UInt32 . Ideally I would prefer the compiler to detect I am about to do something which will cause an overflow and throw an error.<br>&gt;&gt; <br>&gt;&gt; I would then have to explicitly add a overloaded UInt32 method or explicitly convert it to Int like so &quot;Int(uintVariable)&quot;.<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt;  Wizard<br>&gt;&gt; james at supmenow.com &lt;mailto:james at supmenow.com&gt;<br>&gt;&gt; +44 7523 279 698 &lt;tel:%2B44%207523%20279%20698&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt;  Wizard<br>&gt; james at supmenow.com &lt;mailto:james at supmenow.com&gt;<br>&gt; +44 7523 279 698<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/20cf3974/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>Explicity Size Clipping</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>January  6, 2016 at 07:00:00pm</p></header><div class="content"><p>This is the full code:<br></p><p>//<br></p><p>//  Box.swift<br></p><p>//  Project<br></p><p>//<br></p><p>//  Created by James Campbell on 06/01/2016.<br></p><p>//<br></p><p>//<br></p><p>// This File implements the Box protocol for Type Safe Alogrithm Types and<br>other useful things.<br></p><p><br>import Foundation<br></p><p><br>//MARK:- Box<br></p><p><br>protocol Box: CustomStringConvertible, CustomDebugStringConvertible {<br></p><p><br></p><p>    typealias FloatLiteralType = Double<br></p><p>    typealias IntegerLiteralType = Int<br></p><p>    typealias BoxType = Any<br></p><p><br></p><p>    var value: BoxType { get set }<br></p><p><br></p><p>    init()<br></p><p>    init(_ value: BoxType)<br></p><p>}<br></p><p><br>extension Box where BoxType: CustomStringConvertible {<br></p><p><br></p><p>    var description: String {<br></p><p>        return self.value.description<br></p><p>    }<br></p><p><br></p><p>    var debugDescription: String {<br></p><p>        return &quot;\(self.value.description)&quot;<br></p><p>    }<br></p><p>}<br></p><p><br>//MARK: FloatingPointBox<br></p><p><br>protocol FloatingPointBox: Box, FloatLiteralConvertible,<br>IntegerLiteralConvertible {<br></p><p><br></p><p>    typealias BoxType = Double<br></p><p>    typealias FloatLiteralConvertible = Double<br></p><p>    typealias IntegerLiteralConvertible = Int<br></p><p>}<br></p><p><br>extension Box where Self.BoxType == Double {<br></p><p><br></p><p>    init(_ value: Double) {<br></p><p><br></p><p>        self.init()<br></p><p>        self.value = value<br></p><p>    }<br></p><p><br></p><p>    init(_ value: Int) {<br></p><p>        self.init()<br></p><p>        self.value = Double(value)<br></p><p>    }<br></p><p><br></p><p>    init(_ value: UInt32) {<br></p><p>        self.init()<br></p><p>        self.value = Double(value)<br></p><p>    }<br></p><p>}<br></p><p><br>extension FloatLiteralType {<br></p><p><br></p><p>    init&lt;T: Box where T.BoxType == Double &gt;(_ box: T) {<br></p><p>        self.init(box.value)<br></p><p>    }<br></p><p><br></p><p>    init&lt;T: Box where T.BoxType == Int &gt;(_ box: T) {<br></p><p>        self.init(box.value)<br></p><p>    }<br></p><p>}<br></p><p><br>extension CGFloat {<br></p><p><br></p><p>    init&lt;T: Box where T.BoxType == Double &gt;(_ box: T) {<br></p><p>        self.init(box.value)<br></p><p>    }<br></p><p><br></p><p>    init&lt;T: Box where T.BoxType == Int &gt;(_ box: T) {<br></p><p>        self.init(box.value)<br></p><p>    }<br></p><p>}<br></p><p><br>//Adding FloatLiteralConvertible, IntegerLiteralConvertible<br></p><p><br>extension FloatingPointBox where Self.BoxType == Double,<br>Self.FloatLiteralConvertible<br>== Double {<br></p><p><br></p><p>    init(floatLiteral value: Double) {<br></p><p>        self.init(value)<br></p><p>    }<br></p><p><br></p><p>    init(integerLiteral value: Int) {<br></p><p>        self.init(value)<br></p><p>    }<br></p><p><br></p><p>    init&lt;T: IntegerType&gt;(_ value: T) {<br></p><p>        self.init(value)<br></p><p>    }<br></p><p>}<br></p><p><br>//<br></p><p>//  Angles.swift<br></p><p>//  Sup<br></p><p>//<br></p><p>//  Created by James Campbell on 22/12/2015.<br></p><p>//  Copyright © 2015 Sup. All rights reserved.<br></p><p>//<br></p><p>// This File defines representations of Degrees and Radians as Type Safe<br>Alogrithm Types<br></p><p><br>import Foundation<br></p><p><br>//MARK:- Degree<br></p><p><br>struct Degree: FloatingPointBox {<br></p><p><br></p><p>    var value: Double = 0<br></p><p><br></p><p>    init()<br></p><p>    {<br></p><p>    }<br></p><p>}<br></p><p><br>protocol DegreeConvertiable {<br></p><p><br></p><p>    init(degreeLiteral value: Degree)<br></p><p>}<br></p><p><br>extension Degree: RadianConvertiable {<br></p><p><br></p><p>    init(radianLiteral value: Radian) {<br></p><p>        self.value = Double(value) * 180.0 / M_PI<br></p><p>    }<br></p><p><br></p><p>    init(_ value: Radian) {<br></p><p>        self.init(radianLiteral: value)<br></p><p>    }<br></p><p>}<br></p><p><br>//MARK:- Radian<br></p><p><br>struct Radian: FloatingPointBox {<br></p><p><br></p><p>    var value: Double = 0<br></p><p><br></p><p>    init()<br></p><p>    {<br></p><p>    }<br></p><p>}<br></p><p><br>protocol RadianConvertiable {<br></p><p><br></p><p>    init(radianLiteral value: Radian)<br></p><p>}<br></p><p><br>extension Radian: DegreeConvertiable {<br></p><p><br></p><p>    init(degreeLiteral value: Degree) {<br></p><p>        self.value = Double(value) * M_PI / 180.0<br></p><p>    }<br></p><p><br></p><p>    init(_ value: Degree) {<br></p><p>        self.init(degreeLiteral: value)<br></p><p>    }<br></p><p>}<br></p><p>let someOptiona: Degreee? = nil<br></p><p> let degree = someOptional ?? Degree(arc4random_uniform(360))<br></p><p>On Wed, Jan 6, 2016 at 6:57 PM, Félix Cloutier &lt;felixcca at yahoo.ca&gt; wrote:<br></p><p>&gt; I either don&#39;t understand or can&#39;t reproduce the issue. This code:<br>&gt;<br>&gt; class Box {<br>&gt; let value: Int<br>&gt; init(value: Int) {<br>&gt; self.value = value<br>&gt; }<br>&gt; }<br>&gt;<br>&gt; let test: UInt32 = 4<br>&gt; let box = Box(value: test)<br>&gt;<br>&gt;<br>&gt; does not compile (&quot;foo.swift:10:22: error: cannot convert value of type<br>&gt; &#39;UInt32&#39; to expected argument type &#39;Int&#39;&quot;).<br>&gt;<br>&gt; Félix<br>&gt;<br>&gt; Le 6 janv. 2016 à 13:17:03, James Campbell &lt;james at supmenow.com&gt; a écrit :<br>&gt;<br>&gt; protocol Box: CustomStringConvertible, CustomDebugStringConvertible {<br>&gt;<br>&gt;<br>&gt;     typealias FloatLiteralType = Double<br>&gt;<br>&gt;     typealias IntegerLiteralType = Int<br>&gt;<br>&gt;     typealias BoxType = Any<br>&gt;<br>&gt;<br>&gt;     var value: BoxType { get set }<br>&gt;<br>&gt;<br>&gt;     init()<br>&gt;<br>&gt;     init(_ value: BoxType)<br>&gt;<br>&gt; }<br>&gt;<br>&gt; extension Box where Self.BoxType == Double {<br>&gt;<br>&gt;<br>&gt;     init(_ value: Double) {<br>&gt;<br>&gt;<br>&gt;         self.init()<br>&gt;<br>&gt;         self.value = value<br>&gt;<br>&gt;     }<br>&gt;<br>&gt;<br>&gt;     init(_ value: Int) {<br>&gt;<br>&gt;         self.init()<br>&gt;<br>&gt;         self.value = Double(value)<br>&gt;<br>&gt;     }<br>&gt;<br>&gt;<br>&gt;     init(_ value: UInt32) {<br>&gt;<br>&gt;         self.init()<br>&gt;<br>&gt;         self.value = Double(value)<br>&gt;<br>&gt;     }<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt;<br>&gt; Without that last method, Swift tries to give the UInt32 to the Int<br>&gt; version of the method which isn&#39;t safe in my eyes and I would have expected<br>&gt; a compiler error.<br>&gt;<br>&gt; On Wed, Jan 6, 2016 at 6:14 PM, Félix Cloutier &lt;felixcca at yahoo.ca&gt; wrote:<br>&gt;<br>&gt;&gt; I don&#39;t understand. Can you show a code example?<br>&gt;&gt;<br>&gt;&gt; Félix<br>&gt;&gt;<br>&gt;&gt; Le 6 janv. 2016 à 13:02:43, James Campbell via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;<br>&gt;&gt; I have a overloaded method for a protocol that takes an Int or double.<br>&gt;&gt;<br>&gt;&gt; I have an issue with swift calling the Int version when passing in a<br>&gt;&gt; UInt32 . Ideally I would prefer the compiler to detect I am about to do<br>&gt;&gt; something which will cause an overflow and throw an error.<br>&gt;&gt;<br>&gt;&gt; I would then have to explicitly add a overloaded UInt32 method or<br>&gt;&gt; explicitly convert it to Int like so &quot;Int(uintVariable)&quot;.<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt;  Wizard<br>&gt;&gt; james at supmenow.com<br>&gt;&gt; +44 7523 279 698<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt;  Wizard<br>&gt; james at supmenow.com<br>&gt; +44 7523 279 698<br>&gt;<br>&gt;<br>&gt;<br></p><p><br>-- <br> Wizard<br>james at supmenow.com<br>+44 7523 279 698<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/0fccde68/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>Explicity Size Clipping</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>January  6, 2016 at 07:00:00pm</p></header><div class="content"><p>That last line, the value inside the Degree struct should be a Int created<br>from a UInt32<br></p><p>On Wed, Jan 6, 2016 at 7:08 PM, James Campbell &lt;james at supmenow.com&gt; wrote:<br></p><p>&gt; This is the full code:<br>&gt;<br>&gt; //<br>&gt;<br>&gt; //  Box.swift<br>&gt;<br>&gt; //  Project<br>&gt;<br>&gt; //<br>&gt;<br>&gt; //  Created by James Campbell on 06/01/2016.<br>&gt;<br>&gt; //<br>&gt;<br>&gt; //<br>&gt;<br>&gt; // This File implements the Box protocol for Type Safe Alogrithm Types and<br>&gt; other useful things.<br>&gt;<br>&gt;<br>&gt; import Foundation<br>&gt;<br>&gt;<br>&gt; //MARK:- Box<br>&gt;<br>&gt;<br>&gt; protocol Box: CustomStringConvertible, CustomDebugStringConvertible {<br>&gt;<br>&gt;<br>&gt;<br>&gt;     typealias FloatLiteralType = Double<br>&gt;<br>&gt;     typealias IntegerLiteralType = Int<br>&gt;<br>&gt;     typealias BoxType = Any<br>&gt;<br>&gt;<br>&gt;<br>&gt;     var value: BoxType { get set }<br>&gt;<br>&gt;<br>&gt;<br>&gt;     init()<br>&gt;<br>&gt;     init(_ value: BoxType)<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt; extension Box where BoxType: CustomStringConvertible {<br>&gt;<br>&gt;<br>&gt;<br>&gt;     var description: String {<br>&gt;<br>&gt;         return self.value.description<br>&gt;<br>&gt;     }<br>&gt;<br>&gt;<br>&gt;<br>&gt;     var debugDescription: String {<br>&gt;<br>&gt;         return &quot;\(self.value.description)&quot;<br>&gt;<br>&gt;     }<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt; //MARK: FloatingPointBox<br>&gt;<br>&gt;<br>&gt; protocol FloatingPointBox: Box, FloatLiteralConvertible,<br>&gt; IntegerLiteralConvertible {<br>&gt;<br>&gt;<br>&gt;<br>&gt;     typealias BoxType = Double<br>&gt;<br>&gt;     typealias FloatLiteralConvertible = Double<br>&gt;<br>&gt;     typealias IntegerLiteralConvertible = Int<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt; extension Box where Self.BoxType == Double {<br>&gt;<br>&gt;<br>&gt;<br>&gt;     init(_ value: Double) {<br>&gt;<br>&gt;<br>&gt;<br>&gt;         self.init()<br>&gt;<br>&gt;         self.value = value<br>&gt;<br>&gt;     }<br>&gt;<br>&gt;<br>&gt;<br>&gt;     init(_ value: Int) {<br>&gt;<br>&gt;         self.init()<br>&gt;<br>&gt;         self.value = Double(value)<br>&gt;<br>&gt;     }<br>&gt;<br>&gt;<br>&gt;<br>&gt;     init(_ value: UInt32) {<br>&gt;<br>&gt;         self.init()<br>&gt;<br>&gt;         self.value = Double(value)<br>&gt;<br>&gt;     }<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt; extension FloatLiteralType {<br>&gt;<br>&gt;<br>&gt;<br>&gt;     init&lt;T: Box where T.BoxType == Double &gt;(_ box: T) {<br>&gt;<br>&gt;         self.init(box.value)<br>&gt;<br>&gt;     }<br>&gt;<br>&gt;<br>&gt;<br>&gt;     init&lt;T: Box where T.BoxType == Int &gt;(_ box: T) {<br>&gt;<br>&gt;         self.init(box.value)<br>&gt;<br>&gt;     }<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt; extension CGFloat {<br>&gt;<br>&gt;<br>&gt;<br>&gt;     init&lt;T: Box where T.BoxType == Double &gt;(_ box: T) {<br>&gt;<br>&gt;         self.init(box.value)<br>&gt;<br>&gt;     }<br>&gt;<br>&gt;<br>&gt;<br>&gt;     init&lt;T: Box where T.BoxType == Int &gt;(_ box: T) {<br>&gt;<br>&gt;         self.init(box.value)<br>&gt;<br>&gt;     }<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt; //Adding FloatLiteralConvertible, IntegerLiteralConvertible<br>&gt;<br>&gt;<br>&gt; extension FloatingPointBox where Self.BoxType == Double, Self.FloatLiteralConvertible<br>&gt; == Double {<br>&gt;<br>&gt;<br>&gt;<br>&gt;     init(floatLiteral value: Double) {<br>&gt;<br>&gt;         self.init(value)<br>&gt;<br>&gt;     }<br>&gt;<br>&gt;<br>&gt;<br>&gt;     init(integerLiteral value: Int) {<br>&gt;<br>&gt;         self.init(value)<br>&gt;<br>&gt;     }<br>&gt;<br>&gt;<br>&gt;<br>&gt;     init&lt;T: IntegerType&gt;(_ value: T) {<br>&gt;<br>&gt;         self.init(value)<br>&gt;<br>&gt;     }<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt; //<br>&gt;<br>&gt; //  Angles.swift<br>&gt;<br>&gt; //  Sup<br>&gt;<br>&gt; //<br>&gt;<br>&gt; //  Created by James Campbell on 22/12/2015.<br>&gt;<br>&gt; //  Copyright © 2015 Sup. All rights reserved.<br>&gt;<br>&gt; //<br>&gt;<br>&gt; // This File defines representations of Degrees and Radians as Type Safe<br>&gt; Alogrithm Types<br>&gt;<br>&gt;<br>&gt; import Foundation<br>&gt;<br>&gt;<br>&gt; //MARK:- Degree<br>&gt;<br>&gt;<br>&gt; struct Degree: FloatingPointBox {<br>&gt;<br>&gt;<br>&gt;<br>&gt;     var value: Double = 0<br>&gt;<br>&gt;<br>&gt;<br>&gt;     init()<br>&gt;<br>&gt;     {<br>&gt;<br>&gt;     }<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt; protocol DegreeConvertiable {<br>&gt;<br>&gt;<br>&gt;<br>&gt;     init(degreeLiteral value: Degree)<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt; extension Degree: RadianConvertiable {<br>&gt;<br>&gt;<br>&gt;<br>&gt;     init(radianLiteral value: Radian) {<br>&gt;<br>&gt;         self.value = Double(value) * 180.0 / M_PI<br>&gt;<br>&gt;     }<br>&gt;<br>&gt;<br>&gt;<br>&gt;     init(_ value: Radian) {<br>&gt;<br>&gt;         self.init(radianLiteral: value)<br>&gt;<br>&gt;     }<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt; //MARK:- Radian<br>&gt;<br>&gt;<br>&gt; struct Radian: FloatingPointBox {<br>&gt;<br>&gt;<br>&gt;<br>&gt;     var value: Double = 0<br>&gt;<br>&gt;<br>&gt;<br>&gt;     init()<br>&gt;<br>&gt;     {<br>&gt;<br>&gt;     }<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt; protocol RadianConvertiable {<br>&gt;<br>&gt;<br>&gt;<br>&gt;     init(radianLiteral value: Radian)<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt; extension Radian: DegreeConvertiable {<br>&gt;<br>&gt;<br>&gt;<br>&gt;     init(degreeLiteral value: Degree) {<br>&gt;<br>&gt;         self.value = Double(value) * M_PI / 180.0<br>&gt;<br>&gt;     }<br>&gt;<br>&gt;<br>&gt;<br>&gt;     init(_ value: Degree) {<br>&gt;<br>&gt;         self.init(degreeLiteral: value)<br>&gt;<br>&gt;     }<br>&gt;<br>&gt; }<br>&gt;<br>&gt; let someOptiona: Degreee? = nil<br>&gt;<br>&gt;  let degree = someOptional ?? Degree(arc4random_uniform(360))<br>&gt;<br>&gt; On Wed, Jan 6, 2016 at 6:57 PM, Félix Cloutier &lt;felixcca at yahoo.ca&gt; wrote:<br>&gt;<br>&gt;&gt; I either don&#39;t understand or can&#39;t reproduce the issue. This code:<br>&gt;&gt;<br>&gt;&gt; class Box {<br>&gt;&gt; let value: Int<br>&gt;&gt; init(value: Int) {<br>&gt;&gt; self.value = value<br>&gt;&gt; }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; let test: UInt32 = 4<br>&gt;&gt; let box = Box(value: test)<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; does not compile (&quot;foo.swift:10:22: error: cannot convert value of type<br>&gt;&gt; &#39;UInt32&#39; to expected argument type &#39;Int&#39;&quot;).<br>&gt;&gt;<br>&gt;&gt; Félix<br>&gt;&gt;<br>&gt;&gt; Le 6 janv. 2016 à 13:17:03, James Campbell &lt;james at supmenow.com&gt; a écrit :<br>&gt;&gt;<br>&gt;&gt; protocol Box: CustomStringConvertible, CustomDebugStringConvertible {<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     typealias FloatLiteralType = Double<br>&gt;&gt;<br>&gt;&gt;     typealias IntegerLiteralType = Int<br>&gt;&gt;<br>&gt;&gt;     typealias BoxType = Any<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     var value: BoxType { get set }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     init()<br>&gt;&gt;<br>&gt;&gt;     init(_ value: BoxType)<br>&gt;&gt;<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; extension Box where Self.BoxType == Double {<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     init(_ value: Double) {<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;         self.init()<br>&gt;&gt;<br>&gt;&gt;         self.value = value<br>&gt;&gt;<br>&gt;&gt;     }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     init(_ value: Int) {<br>&gt;&gt;<br>&gt;&gt;         self.init()<br>&gt;&gt;<br>&gt;&gt;         self.value = Double(value)<br>&gt;&gt;<br>&gt;&gt;     }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     init(_ value: UInt32) {<br>&gt;&gt;<br>&gt;&gt;         self.init()<br>&gt;&gt;<br>&gt;&gt;         self.value = Double(value)<br>&gt;&gt;<br>&gt;&gt;     }<br>&gt;&gt;<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Without that last method, Swift tries to give the UInt32 to the Int<br>&gt;&gt; version of the method which isn&#39;t safe in my eyes and I would have expected<br>&gt;&gt; a compiler error.<br>&gt;&gt;<br>&gt;&gt; On Wed, Jan 6, 2016 at 6:14 PM, Félix Cloutier &lt;felixcca at yahoo.ca&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; I don&#39;t understand. Can you show a code example?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Félix<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Le 6 janv. 2016 à 13:02:43, James Campbell via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I have a overloaded method for a protocol that takes an Int or double.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I have an issue with swift calling the Int version when passing in a<br>&gt;&gt;&gt; UInt32 . Ideally I would prefer the compiler to detect I am about to do<br>&gt;&gt;&gt; something which will cause an overflow and throw an error.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I would then have to explicitly add a overloaded UInt32 method or<br>&gt;&gt;&gt; explicitly convert it to Int like so &quot;Int(uintVariable)&quot;.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt;  Wizard<br>&gt;&gt;&gt; james at supmenow.com<br>&gt;&gt;&gt; +44 7523 279 698<br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt;  Wizard<br>&gt;&gt; james at supmenow.com<br>&gt;&gt; +44 7523 279 698<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt;  Wizard<br>&gt; james at supmenow.com<br>&gt; +44 7523 279 698<br>&gt;<br></p><p><br></p><p>-- <br> Wizard<br>james at supmenow.com<br>+44 7523 279 698<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/4f294766/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
