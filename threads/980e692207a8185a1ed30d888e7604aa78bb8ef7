<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[swift-evolution-announce] [Review #3] SE-0117: Allow distinguishing between public access and public overridability</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July 21, 2016 at 04:00:00pm</p></header><div class="content"><p>on Thu Jul 21 2016, John McCall &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Jul 21, 2016, at 1:04 PM, Dave Abrahams via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; on Thu Jul 21 2016, John McCall<br>&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 21, 2016, at 10:47 AM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; on Thu Jul 21 2016, Matthew Johnson<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; +1 to the first design.  I think this is a great solution that<br>&gt;&gt;&gt;&gt;&gt; balances the many considerations that have been raised on all sides of<br>&gt;&gt;&gt;&gt;&gt; this issue.  `open` is 2 characters shorter than `public` so<br>&gt;&gt;&gt;&gt;&gt; complaints about boilerplate are no longer valid.  `internal` is the<br>&gt;&gt;&gt;&gt;&gt; “default” - neither `public` nor `open` are privileged as a “default”<br>&gt;&gt;&gt;&gt;&gt; for publishing API outside of a module.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I am interested in language enhancements such as exhaustive pattern<br>&gt;&gt;&gt;&gt;&gt; matching on classes and protocols which rely on knowledge of the full<br>&gt;&gt;&gt;&gt;&gt; class hierarchy.  Such enhancements will be far more useful if the<br>&gt;&gt;&gt;&gt;&gt; language supports non-open, non-final classes.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; There are design techniques that would require additional boilerplate<br>&gt;&gt;&gt;&gt;&gt; if we cannot have non-open, non-final classes.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Most importantly, requiring library authors to choose `public` or<br>&gt;&gt;&gt;&gt;&gt; `open` provides important documentation value.  Users of the library<br>&gt;&gt;&gt;&gt;&gt; will know whether the author intends to support subclasses or not.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think this reasoning is flawed.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If you make any methods overridable outside your module (“open”),<br>&gt;&gt;&gt;&gt; obviously you mean to allow subclassing outside the module.  If you have<br>&gt;&gt;&gt;&gt; no open methods, there&#39;s absolutely nothing you need to do to “support<br>&gt;&gt;&gt;&gt; subclasses,” and from a design point-of-view, there&#39;s no reason to<br>&gt;&gt;&gt;&gt; restrict people from subclassing.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Superclasses can have superclasses, which can themselves have open methods.<br>&gt;&gt;&gt; This is, in fact, quite common for Cocoa programmers.<br>&gt;&gt; <br>&gt;&gt; Okay, good point.<br>&gt;&gt; <br>&gt;&gt; Making a class non-subclassable seems like a pretty indirect way to say<br>&gt;&gt; “not even inherited methods should be overridden outside the defining<br>&gt;&gt; module,” though.<br>&gt;&gt; <br>&gt;&gt; Wouldn&#39;t we prefer to have a way to hide the inheritance relationship<br>&gt;&gt; (and thus prevent overriding of inherited methods) outside the module?<br>&gt;&gt; Or are these independently useful axes?<br>&gt;<br>&gt; I agree that it would make sense to be able to say &quot;I allow<br>&gt; subclasses, but they don&#39;t get to override any of my methods unless I<br>&gt; say so, even things I inherit&quot;.  But that feels like a refinement.<br></p><p>A refinement of what?<br></p><p>To me, “I don&#39;t allow any overrides outside my module” is a much more<br>useful thing to be able to say than “I don&#39;t allow subclasses.”  If we<br>made “open” on a class mean that it&#39;s possible to override methods in<br>other modules, then it would acheive that purpose, and it would leave<br>“open” with a consistent meaning related only to overriding.<br></p><p>&gt;<br>&gt;<br>&gt; John.<br>&gt;<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; John.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The only reasons I can see for allowing people to prevent non-final<br>&gt;&gt;&gt;&gt; classes from being subclassed outside the module in which they are<br>&gt;&gt;&gt;&gt; defined are:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 1. It feels like a nice point of control to have.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 2. Marginal performance gains as noted in the proposal<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I personally don&#39;t find these to be convincing.  #1 in particular seems<br>&gt;&gt;&gt;&gt; like a poor way to make language design decisions.  If we decide to add<br>&gt;&gt;&gt;&gt; this point of control, I&#39;ll justify it to myself in terms of #2.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; P.S., I can live with either alternative; it&#39;s just important to me that<br>&gt;&gt;&gt;&gt; we understand the situation clearly when evaluating them.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; HTH,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p>-- <br>Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
