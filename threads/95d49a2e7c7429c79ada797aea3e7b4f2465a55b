<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0005 Better Translation of Objective-C APIs Into Swift</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 28, 2016 at 02:00:00pm</p></header><div class="content"><p>on Thu Jan 28 2016, Jordan Rose &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Y&#39;know, I was going to complain about this too, and wrote up an example, complete with call site…<br>&gt;<br>&gt; accountStore.account(currentID)<br>&gt;<br>&gt; …and then realized that it didn&#39;t bother me as much as I<br>&gt; thought. &quot;account&quot; is a noun, so this is either getting or creating an<br>&gt; account for me (as if it were a property), and it&#39;s going to use<br>&gt; &quot;currentID&quot; to do it.<br>&gt;<br>&gt; I&#39;m very used to &quot;fooWithBar: baz&quot; meaning either &quot;get me the foo that<br>&gt; has a bar matching baz&quot; or &quot;create me a foo with its bar set to<br>&gt; baz&quot;. <br></p><p>That&#39;s great, when that&#39;s what &quot;with&quot; means.<br></p><p>&gt; But I&#39;m not sure this new convention is any worse, now that the base<br>&gt; name isn&#39;t assumed to include the first argument.<br></p><p>The problem is that, I&#39;m guessing at least 50% of the time, &quot;with&quot; is<br>just used as a vacuous connector to make the method name sound<br>grammatical, and &quot;fooWithBar&quot; doesn&#39;t actually mean the &quot;foo&quot; has-a<br>&quot;bar.&quot;  In these cases, it&#39;s actively misleading. I know that&#39;s not what<br>you were posting about, but I felt it had to be said :-/<br></p><p>&gt;<br>&gt; Jordan<br>&gt;<br>&gt;&gt; On Jan 28, 2016, at 0:51, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Loss of &#39;with&#39; sounds weird in certain cases:<br>&gt;&gt; <br>&gt;&gt; - func account(identifier identifier: String!) -&gt; ACAccount!<br>&gt;&gt; + func account(identifier: String!) -&gt; ACAccount!<br>&gt;&gt; <br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt; On 28 Jan 2016, at 00:31, Douglas Gregor via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 27, 2016, at 10:03 AM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; on Wed Jan 27 2016, Matthew Johnson<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Doug,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I think this change looks great!  I don’t have time to look through<br>&gt;&gt;&gt;&gt;&gt; the full patch but did look through quite a bit.  It adds clarity in<br>&gt;&gt;&gt;&gt;&gt; the vast majority of cases I looked at.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; It seems like with-as-separator is a good heuristic for determining<br>&gt;&gt;&gt;&gt;&gt; when the first parameter is not essential to a good name for the<br>&gt;&gt;&gt;&gt;&gt; fundamental operation.  I agree with the comments earlier on that in<br>&gt;&gt;&gt;&gt;&gt; these cases a label for the first parameter is the best approach.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I also really like that this groups methods with the same fundamental<br>&gt;&gt;&gt;&gt;&gt; operation into overload families where they previously had independent<br>&gt;&gt;&gt;&gt;&gt; names.  This is a big win IMO.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; There is a first-parameter-is-an-ID pattern I noticed after this<br>&gt;&gt;&gt;&gt;&gt; change.  I show a few examples here, but there are a lot more:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -  func trackWithTrackID(trackID: CMPersistentTrackID) -&gt; AVAssetTrack?<br>&gt;&gt;&gt;&gt;&gt; +  func track(trackID trackID: CMPersistentTrackID) -&gt; AVAssetTrack?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -  func trackWithTrackID(trackID: CMPersistentTrackID) -&gt; AVFragmentedAssetTrack?<br>&gt;&gt;&gt;&gt;&gt; +  func track(trackID trackID: CMPersistentTrackID) -&gt; AVFragmentedAssetTrack?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -  func trackWithTrackID(trackID: CMPersistentTrackID) -&gt; AVCompositionTrack?<br>&gt;&gt;&gt;&gt;&gt; +  func track(trackID trackID: CMPersistentTrackID) -&gt; AVCompositionTrack?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; - func discoverUserInfoWithUserRecordID(userRecordID: CKRecordID,<br>&gt;&gt;&gt;&gt;&gt; completionHandler: (CKDiscoveredUserInfo?, Error?) -&gt; Void)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; + func discoverUserInfo(userRecordID userRecordID: CKRecordID,<br>&gt;&gt;&gt;&gt;&gt; completionHandler: (CKDiscoveredUserInfo?, Error?) -&gt; Void)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The first argument label `trackID` seems like it repeats type<br>&gt;&gt;&gt;&gt;&gt; information without adding clarity.  I think it would be better to<br>&gt;&gt;&gt;&gt;&gt; just use `id` here.  It seems like a candidate for heuristics as well.<br>&gt;&gt;&gt;&gt;&gt; For example, if the type name ends in ID and the label is a suffix of<br>&gt;&gt;&gt;&gt;&gt; the type name we could just use `id`.  This is a somewhat specific<br>&gt;&gt;&gt;&gt;&gt; pattern, but IDs are common enough that it might make sense.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Actually I&#39;ve been saying for a while that arguments called ID,<br>&gt;&gt;&gt;&gt; identifier, and name should not be labelled at all in many cases.  Think<br>&gt;&gt;&gt;&gt; about it.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Patch where the words “ID”, “Identifier”, and “Name” in a name are considered to match the type “String”:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &lt;id-identifier-name-match-string.patch&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; … and then extending the rule to zap first argument labels named “identifier”, “id”, or “name”:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &lt;id-identifier-name-no-first-arg-label.patch&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; (I’m not sure which one of these you meant, or something different):<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	- Doug<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Review] SE-0005 Better Translation of Objective-C APIs Into Swift</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>January 29, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Jan 28, 2016, at 14:15, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; I&#39;m very used to &quot;fooWithBar: baz&quot; meaning either &quot;get me the foo that<br>&gt;&gt; has a bar matching baz&quot; or &quot;create me a foo with its bar set to<br>&gt;&gt; baz&quot;. <br>&gt; <br>&gt; That&#39;s great, when that&#39;s what &quot;with&quot; means.<br>&gt; <br>&gt;&gt; But I&#39;m not sure this new convention is any worse, now that the base<br>&gt;&gt; name isn&#39;t assumed to include the first argument.<br>&gt; <br>&gt; The problem is that, I&#39;m guessing at least 50% of the time, &quot;with&quot; is<br>&gt; just used as a vacuous connector to make the method name sound<br>&gt; grammatical, and &quot;fooWithBar&quot; doesn&#39;t actually mean the &quot;foo&quot; has-a<br>&gt; &quot;bar.&quot;  In these cases, it&#39;s actively misleading. I know that&#39;s not what<br>&gt; you were posting about, but I felt it had to be said :-/<br></p><p>I actually don&#39;t think this is true when &quot;foo&quot; is a noun (and searching through the selector dump Doug made a long time ago seems to back that up).<br></p><p>Exceptions:<br>- &quot;fooWithOptions&quot;, but that&#39;s already caught by the default parameter rule.<br>- &quot;fooWithLocale&quot;, which uses the locale to build the result.<br>- &quot;commonPrefixWithString&quot;, where the &quot;with&quot; isn&#39;t quite vacuous.<br></p><p>But when &quot;foo&quot; is a verb (or when it&#39;s a later parameter that&#39;s just &quot;withBar&quot;) it does seem pretty vacuous.<br></p><p>Jordan<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/1d189441/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>[Review] SE-0005 Better Translation of Objective-C APIs Into Swift</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>January 29, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jan 29, 2016, at 12:07 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 28, 2016, at 14:15, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; I&#39;m very used to &quot;fooWithBar: baz&quot; meaning either &quot;get me the foo that<br>&gt;&gt;&gt; has a bar matching baz&quot; or &quot;create me a foo with its bar set to<br>&gt;&gt;&gt; baz&quot;. <br>&gt;&gt; <br>&gt;&gt; That&#39;s great, when that&#39;s what &quot;with&quot; means.<br>&gt;&gt; <br>&gt;&gt;&gt; But I&#39;m not sure this new convention is any worse, now that the base<br>&gt;&gt;&gt; name isn&#39;t assumed to include the first argument.<br>&gt;&gt; <br>&gt;&gt; The problem is that, I&#39;m guessing at least 50% of the time, &quot;with&quot; is<br>&gt;&gt; just used as a vacuous connector to make the method name sound<br>&gt;&gt; grammatical, and &quot;fooWithBar&quot; doesn&#39;t actually mean the &quot;foo&quot; has-a<br>&gt;&gt; &quot;bar.&quot;  In these cases, it&#39;s actively misleading. I know that&#39;s not what<br>&gt;&gt; you were posting about, but I felt it had to be said :-/<br>&gt; <br>&gt; I actually don&#39;t think this is true when &quot;foo&quot; is a noun (and searching through the selector dump Doug made a long time ago seems to back that up).<br>&gt; <br>&gt; Exceptions:<br>&gt; - &quot;fooWithOptions&quot;, but that&#39;s already caught by the default parameter rule.<br>&gt; - &quot;fooWithLocale&quot;, which uses the locale to build the result.<br>&gt; - &quot;commonPrefixWithString&quot;, where the &quot;with&quot; isn&#39;t quite vacuous.<br>&gt; <br>&gt; But when &quot;foo&quot; is a verb (or when it&#39;s a later parameter that&#39;s just &quot;withBar&quot;) it does seem pretty vacuous.<br>&gt; <br>&gt; Jordan<br>&gt; <br></p><p>It’s important to be able to talk about these methods in a natural way, and a natural way to say this sentence in English is to put that connecting word there.<br></p><p>One option we discussed was to put the connecting word into the label instead of the method name:<br></p><p>foo(withOptions:)<br>description(withLocale:)<br></p><p>etc.<br></p><p>- Tony<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/abdb047a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Review] SE-0005 Better Translation of Objective-C APIs Into Swift</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>January 30, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; It’s important to be able to talk about these methods in a natural way, and a natural way to say this sentence in English is to put that connecting word there.<br></p><p><br>Why is this so important? You’re saying “this sentence”, but it’s not a sentence, and it’s not English. You can easily add the words “with” or “and” when trying to verbalize method names, but those words don&#39;t help at all in readability of code in its natural medium.<br></p><p>&gt; One option we discussed was to put the connecting word into the label instead of the method name:<br>&gt; <br>&gt; foo(withOptions:)<br>&gt; description(withLocale:)<br></p><p>Having “options” and “locale” on the parameters side of the method call is great, but then if you make this effort, there’s no value in keeping “with”.<br></p><p>— Radek<br></p><p>&gt; On 29 Jan 2016, at 22:18, Tony Parker via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Jan 29, 2016, at 12:07 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 28, 2016, at 14:15, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;m very used to &quot;fooWithBar: baz&quot; meaning either &quot;get me the foo that<br>&gt;&gt;&gt;&gt; has a bar matching baz&quot; or &quot;create me a foo with its bar set to<br>&gt;&gt;&gt;&gt; baz&quot;. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That&#39;s great, when that&#39;s what &quot;with&quot; means.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; But I&#39;m not sure this new convention is any worse, now that the base<br>&gt;&gt;&gt;&gt; name isn&#39;t assumed to include the first argument.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The problem is that, I&#39;m guessing at least 50% of the time, &quot;with&quot; is<br>&gt;&gt;&gt; just used as a vacuous connector to make the method name sound<br>&gt;&gt;&gt; grammatical, and &quot;fooWithBar&quot; doesn&#39;t actually mean the &quot;foo&quot; has-a<br>&gt;&gt;&gt; &quot;bar.&quot;  In these cases, it&#39;s actively misleading. I know that&#39;s not what<br>&gt;&gt;&gt; you were posting about, but I felt it had to be said :-/<br>&gt;&gt; <br>&gt;&gt; I actually don&#39;t think this is true when &quot;foo&quot; is a noun (and searching through the selector dump Doug made a long time ago seems to back that up).<br>&gt;&gt; <br>&gt;&gt; Exceptions:<br>&gt;&gt; - &quot;fooWithOptions&quot;, but that&#39;s already caught by the default parameter rule.<br>&gt;&gt; - &quot;fooWithLocale&quot;, which uses the locale to build the result.<br>&gt;&gt; - &quot;commonPrefixWithString&quot;, where the &quot;with&quot; isn&#39;t quite vacuous.<br>&gt;&gt; <br>&gt;&gt; But when &quot;foo&quot; is a verb (or when it&#39;s a later parameter that&#39;s just &quot;withBar&quot;) it does seem pretty vacuous.<br>&gt;&gt; <br>&gt;&gt; Jordan<br>&gt;&gt; <br>&gt; <br>&gt; It’s important to be able to talk about these methods in a natural way, and a natural way to say this sentence in English is to put that connecting word there.<br>&gt; <br>&gt; One option we discussed was to put the connecting word into the label instead of the method name:<br>&gt; <br>&gt; foo(withOptions:)<br>&gt; description(withLocale:)<br>&gt; <br>&gt; etc.<br>&gt; <br>&gt; - Tony<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160130/7c08e95b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c40db4457ab2c91a0d8006da31b177c6?s=50"></div><header><strong>[Review] SE-0005 Better Translation of Objective-C APIs Into Swift</strong> from <string>Trent Nadeau</string> &lt;tanadeau at gmail.com&gt;<p>January 30, 2016 at 10:00:00am</p></header><div class="content"><p>Agreed. Trying to shoehorn code into (very inconsistent) English grammar<br>should be a non-goal, IMHO. It becomes especially strange when you start<br>dealing with using various combinations of defaulted parameters. Should the<br>API designer try to check all possible combinations of which params are<br>used and defaulted to see if they read like English?<br></p><p>On Sat, Jan 30, 2016 at 10:45 AM, Radosław Pietruszewski &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; It’s important to be able to talk about these methods in a natural way,<br>&gt; and a natural way to say this sentence in English is to put that connecting<br>&gt; word there.<br>&gt;<br>&gt;<br>&gt; Why is this so important? You’re saying “this sentence”, but it’s not a<br>&gt; sentence, and it’s not English. You can easily add the words “with” or<br>&gt; “and” when trying to verbalize method names, but those words don&#39;t help at<br>&gt; all in readability of code in its natural medium.<br>&gt;<br>&gt; One option we discussed was to put the connecting word into the label<br>&gt; instead of the method name:<br>&gt;<br>&gt; foo(withOptions:)<br>&gt; description(withLocale:)<br>&gt;<br>&gt;<br>&gt; Having “options” and “locale” on the parameters side of the method call is<br>&gt; great, but then if you make this effort, there’s no value in keeping “with”.<br>&gt;<br>&gt; — Radek<br>&gt;<br>&gt; On 29 Jan 2016, at 22:18, Tony Parker via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Jan 29, 2016, at 12:07 PM, Jordan Rose via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Jan 28, 2016, at 14:15, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I&#39;m very used to &quot;fooWithBar: baz&quot; meaning either &quot;get me the foo that<br>&gt; has a bar matching baz&quot; or &quot;create me a foo with its bar set to<br>&gt; baz&quot;.<br>&gt;<br>&gt;<br>&gt; That&#39;s great, when that&#39;s what &quot;with&quot; means.<br>&gt;<br>&gt; But I&#39;m not sure this new convention is any worse, now that the base<br>&gt; name isn&#39;t assumed to include the first argument.<br>&gt;<br>&gt;<br>&gt; The problem is that, I&#39;m guessing at least 50% of the time, &quot;with&quot; is<br>&gt; just used as a vacuous connector to make the method name sound<br>&gt; grammatical, and &quot;fooWithBar&quot; doesn&#39;t actually mean the &quot;foo&quot; has-a<br>&gt; &quot;bar.&quot;  In these cases, it&#39;s actively misleading. I know that&#39;s not what<br>&gt; you were posting about, but I felt it had to be said :-/<br>&gt;<br>&gt;<br>&gt; I actually don&#39;t think this is true when &quot;foo&quot; is a noun (and searching<br>&gt; through the selector dump Doug made a long time ago seems to back that up).<br>&gt;<br>&gt; Exceptions:<br>&gt; - &quot;fooWithOptions&quot;, but that&#39;s already caught by the default parameter<br>&gt; rule.<br>&gt; - &quot;fooWithLocale&quot;, which uses the locale to build the result.<br>&gt; - &quot;commonPrefixWithString&quot;, where the &quot;with&quot; isn&#39;t *quite* vacuous.<br>&gt;<br>&gt; But when &quot;foo&quot; is a verb (or when it&#39;s a later parameter that&#39;s just<br>&gt; &quot;withBar&quot;) it does seem pretty vacuous.<br>&gt;<br>&gt; Jordan<br>&gt;<br>&gt;<br>&gt; It’s important to be able to talk about these methods in a natural way,<br>&gt; and a natural way to say this sentence in English is to put that connecting<br>&gt; word there.<br>&gt;<br>&gt; One option we discussed was to put the connecting word into the label<br>&gt; instead of the method name:<br>&gt;<br>&gt; foo(withOptions:)<br>&gt; description(withLocale:)<br>&gt;<br>&gt; etc.<br>&gt;<br>&gt; - Tony<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p><p><br>-- <br>Trent Nadeau<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160130/36abb998/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c65faa002b79348ac10e1fb9c1a9ad83?s=50"></div><header><strong>[Review] SE-0005 Better Translation of Objective-C APIs Into Swift</strong> from <string>Colin Cornaby</string> &lt;colin.cornaby at mac.com&gt;<p>February  1, 2016 at 12:00:00am</p></header><div class="content"><p>I think being able to naturally talk about code is important. Code is not write only. It’s meant to be read, talked about out loud, and reasoned about with others. Certainly “with” (and “using”) can be trimmed out of a lot of API, but I’m not supportive of taken that to an extent where functions need to have words inserted back into them to be naturally read out loud. It only generates confusion if the method name as spoken is different than the method name as written.<br></p><p>&gt; On Jan 30, 2016, at 7:45 AM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; It’s important to be able to talk about these methods in a natural way, and a natural way to say this sentence in English is to put that connecting word there.<br>&gt; <br>&gt; <br>&gt; Why is this so important? You’re saying “this sentence”, but it’s not a sentence, and it’s not English. You can easily add the words “with” or “and” when trying to verbalize method names, but those words don&#39;t help at all in readability of code in its natural medium.<br>&gt; <br>&gt;&gt; One option we discussed was to put the connecting word into the label instead of the method name:<br>&gt;&gt; <br>&gt;&gt; foo(withOptions:)<br>&gt;&gt; description(withLocale:)<br>&gt; <br>&gt; Having “options” and “locale” on the parameters side of the method call is great, but then if you make this effort, there’s no value in keeping “with”.<br>&gt; <br>&gt; — Radek<br>&gt; <br>&gt;&gt; On 29 Jan 2016, at 22:18, Tony Parker via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Jan 29, 2016, at 12:07 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 28, 2016, at 14:15, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I&#39;m very used to &quot;fooWithBar: baz&quot; meaning either &quot;get me the foo that<br>&gt;&gt;&gt;&gt;&gt; has a bar matching baz&quot; or &quot;create me a foo with its bar set to<br>&gt;&gt;&gt;&gt;&gt; baz&quot;. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; That&#39;s great, when that&#39;s what &quot;with&quot; means.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; But I&#39;m not sure this new convention is any worse, now that the base<br>&gt;&gt;&gt;&gt;&gt; name isn&#39;t assumed to include the first argument.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The problem is that, I&#39;m guessing at least 50% of the time, &quot;with&quot; is<br>&gt;&gt;&gt;&gt; just used as a vacuous connector to make the method name sound<br>&gt;&gt;&gt;&gt; grammatical, and &quot;fooWithBar&quot; doesn&#39;t actually mean the &quot;foo&quot; has-a<br>&gt;&gt;&gt;&gt; &quot;bar.&quot;  In these cases, it&#39;s actively misleading. I know that&#39;s not what<br>&gt;&gt;&gt;&gt; you were posting about, but I felt it had to be said :-/<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I actually don&#39;t think this is true when &quot;foo&quot; is a noun (and searching through the selector dump Doug made a long time ago seems to back that up).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Exceptions:<br>&gt;&gt;&gt; - &quot;fooWithOptions&quot;, but that&#39;s already caught by the default parameter rule.<br>&gt;&gt;&gt; - &quot;fooWithLocale&quot;, which uses the locale to build the result.<br>&gt;&gt;&gt; - &quot;commonPrefixWithString&quot;, where the &quot;with&quot; isn&#39;t quite vacuous.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But when &quot;foo&quot; is a verb (or when it&#39;s a later parameter that&#39;s just &quot;withBar&quot;) it does seem pretty vacuous.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jordan<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; It’s important to be able to talk about these methods in a natural way, and a natural way to say this sentence in English is to put that connecting word there.<br>&gt;&gt; <br>&gt;&gt; One option we discussed was to put the connecting word into the label instead of the method name:<br>&gt;&gt; <br>&gt;&gt; foo(withOptions:)<br>&gt;&gt; description(withLocale:)<br>&gt;&gt; <br>&gt;&gt; etc.<br>&gt;&gt; <br>&gt;&gt; - Tony<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160201/6548d312/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Review] SE-0005 Better Translation of Objective-C APIs Into Swift</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February  1, 2016 at 02:00:00pm</p></header><div class="content"><p>All of punctuation, symbols, parentheses, operators, abbreviations, etc. have the same problem -- they don&#39;t cleanly verbalize, and you have to some work to do that.<br></p><p>Should we get rid of all of that too? Should we try to make all of Swift &quot;read naturally&quot; as English-like sentences?<br></p><p>To me, that sounds absurd. You don&#39;t try to read code as if it was prose. It just makes no sense.<br></p><p>And I don&#39;t see why we should have a double standard for method names. They&#39;re still words and easy to say out loud. You don&#39;t need to litter code with vacuous words like &quot;with&quot; to do that.<br></p><p>Sent from my iPad<br></p><p>&gt; On 01 Feb 2016, at 09:19, Colin Cornaby &lt;colin.cornaby at mac.com&gt; wrote:<br>&gt; <br>&gt; I think being able to naturally talk about code is important. Code is not write only. It’s meant to be read, talked about out loud, and reasoned about with others. Certainly “with” (and “using”) can be trimmed out of a lot of API, but I’m not supportive of taken that to an extent where functions need to have words inserted back into them to be naturally read out loud. It only generates confusion if the method name as spoken is different than the method name as written.<br>&gt; <br>&gt;&gt;&gt; On Jan 30, 2016, at 7:45 AM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It’s important to be able to talk about these methods in a natural way, and a natural way to say this sentence in English is to put that connecting word there.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Why is this so important? You’re saying “this sentence”, but it’s not a sentence, and it’s not English. You can easily add the words “with” or “and” when trying to verbalize method names, but those words don&#39;t help at all in readability of code in its natural medium.<br>&gt;&gt; <br>&gt;&gt;&gt; One option we discussed was to put the connecting word into the label instead of the method name:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; foo(withOptions:)<br>&gt;&gt;&gt; description(withLocale:)<br>&gt;&gt; <br>&gt;&gt; Having “options” and “locale” on the parameters side of the method call is great, but then if you make this effort, there’s no value in keeping “with”.<br>&gt;&gt; <br>&gt;&gt; — Radek<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; On 29 Jan 2016, at 22:18, Tony Parker via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jan 29, 2016, at 12:07 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jan 28, 2016, at 14:15, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I&#39;m very used to &quot;fooWithBar: baz&quot; meaning either &quot;get me the foo that<br>&gt;&gt;&gt;&gt;&gt;&gt; has a bar matching baz&quot; or &quot;create me a foo with its bar set to<br>&gt;&gt;&gt;&gt;&gt;&gt; baz&quot;. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; That&#39;s great, when that&#39;s what &quot;with&quot; means.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; But I&#39;m not sure this new convention is any worse, now that the base<br>&gt;&gt;&gt;&gt;&gt;&gt; name isn&#39;t assumed to include the first argument.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The problem is that, I&#39;m guessing at least 50% of the time, &quot;with&quot; is<br>&gt;&gt;&gt;&gt;&gt; just used as a vacuous connector to make the method name sound<br>&gt;&gt;&gt;&gt;&gt; grammatical, and &quot;fooWithBar&quot; doesn&#39;t actually mean the &quot;foo&quot; has-a<br>&gt;&gt;&gt;&gt;&gt; &quot;bar.&quot;  In these cases, it&#39;s actively misleading. I know that&#39;s not what<br>&gt;&gt;&gt;&gt;&gt; you were posting about, but I felt it had to be said :-/<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I actually don&#39;t think this is true when &quot;foo&quot; is a noun (and searching through the selector dump Doug made a long time ago seems to back that up).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Exceptions:<br>&gt;&gt;&gt;&gt; - &quot;fooWithOptions&quot;, but that&#39;s already caught by the default parameter rule.<br>&gt;&gt;&gt;&gt; - &quot;fooWithLocale&quot;, which uses the locale to build the result.<br>&gt;&gt;&gt;&gt; - &quot;commonPrefixWithString&quot;, where the &quot;with&quot; isn&#39;t quite vacuous.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; But when &quot;foo&quot; is a verb (or when it&#39;s a later parameter that&#39;s just &quot;withBar&quot;) it does seem pretty vacuous.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Jordan<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It’s important to be able to talk about these methods in a natural way, and a natural way to say this sentence in English is to put that connecting word there.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; One option we discussed was to put the connecting word into the label instead of the method name:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; foo(withOptions:)<br>&gt;&gt;&gt; description(withLocale:)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; etc.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160201/49641f10/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>[Review] SE-0005 Better Translation of Objective-C APIs Into Swift</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>February  1, 2016 at 10:00:00am</p></header><div class="content"><p>Hi Radek,<br></p><p>&gt; On Feb 1, 2016, at 5:19 AM, Radek Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>&gt; <br>&gt; All of punctuation, symbols, parentheses, operators, abbreviations, etc. have the same problem -- they don&#39;t cleanly verbalize, and you have to some work to do that.<br>&gt; <br>&gt; Should we get rid of all of that too? Should we try to make all of Swift &quot;read naturally&quot; as English-like sentences?<br>&gt; <br>&gt; To me, that sounds absurd. You don&#39;t try to read code as if it was prose. It just makes no sense.<br>&gt; <br></p><p>I don’t think we need to create a straw man idea of removing all punctation from Swift.<br></p><p>&gt; And I don&#39;t see why we should have a double standard for method names. They&#39;re still words and easy to say out loud. You don&#39;t need to litter code with vacuous words like &quot;with&quot; to do that.<br>&gt; <br></p><p>This concept is naturally difficult to discuss over email since the point I am trying to make is about how you read these methods in person, but I’ll try.<br></p><p>Let’s take a method like:<br></p><p>-encodeWithCoder:<br></p><p>then, translated into Swift by dropping the ‘with’:<br></p><p>encode(coder:)<br></p><p>If you say this out loud, you hear: “encode coder”. This sounds like you’re encoding the coder, which is not the case.<br></p><p>I think in this particular method, a fair argument could be made that ‘with’ was not the right word to use in the first place, and instead it could have been “into”. Then it would probably be imported as “encodeInto(coder:)”. This sounds much more fluent while at the same time providing a more correct indication of the behavior. This is a direction that we are still exploring based on some of the feedback from the community in these review threads about the guidelines.<br></p><p>It’s probable that this aspect of naming is more important to some people than to others. Personally, every day I talk to people using these method names. Often I get up on stages and talk about these methods to large groups of people. I believe that anything that helps me to say them out loud more naturally will assist in the listener’s ability to clearly understand my intent.<br></p><p>Thanks,<br>- Tony<br></p><p><br>&gt; Sent from my iPad<br>&gt; <br>&gt; On 01 Feb 2016, at 09:19, Colin Cornaby &lt;colin.cornaby at mac.com &lt;mailto:colin.cornaby at mac.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; I think being able to naturally talk about code is important. Code is not write only. It’s meant to be read, talked about out loud, and reasoned about with others. Certainly “with” (and “using”) can be trimmed out of a lot of API, but I’m not supportive of taken that to an extent where functions need to have words inserted back into them to be naturally read out loud. It only generates confusion if the method name as spoken is different than the method name as written.<br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 30, 2016, at 7:45 AM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It’s important to be able to talk about these methods in a natural way, and a natural way to say this sentence in English is to put that connecting word there.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Why is this so important? You’re saying “this sentence”, but it’s not a sentence, and it’s not English. You can easily add the words “with” or “and” when trying to verbalize method names, but those words don&#39;t help at all in readability of code in its natural medium.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; One option we discussed was to put the connecting word into the label instead of the method name:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; foo(withOptions:)<br>&gt;&gt;&gt;&gt; description(withLocale:)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Having “options” and “locale” on the parameters side of the method call is great, but then if you make this effort, there’s no value in keeping “with”.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; — Radek<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 29 Jan 2016, at 22:18, Tony Parker via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jan 29, 2016, at 12:07 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jan 28, 2016, at 14:15, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I&#39;m very used to &quot;fooWithBar: baz&quot; meaning either &quot;get me the foo that<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; has a bar matching baz&quot; or &quot;create me a foo with its bar set to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; baz&quot;. <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; That&#39;s great, when that&#39;s what &quot;with&quot; means.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; But I&#39;m not sure this new convention is any worse, now that the base<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; name isn&#39;t assumed to include the first argument.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The problem is that, I&#39;m guessing at least 50% of the time, &quot;with&quot; is<br>&gt;&gt;&gt;&gt;&gt;&gt; just used as a vacuous connector to make the method name sound<br>&gt;&gt;&gt;&gt;&gt;&gt; grammatical, and &quot;fooWithBar&quot; doesn&#39;t actually mean the &quot;foo&quot; has-a<br>&gt;&gt;&gt;&gt;&gt;&gt; &quot;bar.&quot;  In these cases, it&#39;s actively misleading. I know that&#39;s not what<br>&gt;&gt;&gt;&gt;&gt;&gt; you were posting about, but I felt it had to be said :-/<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I actually don&#39;t think this is true when &quot;foo&quot; is a noun (and searching through the selector dump Doug made a long time ago seems to back that up).<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Exceptions:<br>&gt;&gt;&gt;&gt;&gt; - &quot;fooWithOptions&quot;, but that&#39;s already caught by the default parameter rule.<br>&gt;&gt;&gt;&gt;&gt; - &quot;fooWithLocale&quot;, which uses the locale to build the result.<br>&gt;&gt;&gt;&gt;&gt; - &quot;commonPrefixWithString&quot;, where the &quot;with&quot; isn&#39;t quite vacuous.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; But when &quot;foo&quot; is a verb (or when it&#39;s a later parameter that&#39;s just &quot;withBar&quot;) it does seem pretty vacuous.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Jordan<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It’s important to be able to talk about these methods in a natural way, and a natural way to say this sentence in English is to put that connecting word there.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; One option we discussed was to put the connecting word into the label instead of the method name:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; foo(withOptions:)<br>&gt;&gt;&gt;&gt; description(withLocale:)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; etc.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160201/02342cf3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Review] SE-0005 Better Translation of Objective-C APIs Into Swift</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February  2, 2016 at 12:00:00am</p></header><div class="content"><p>&gt;&gt; All of punctuation, symbols, parentheses, operators, abbreviations, etc. have the same problem -- they don&#39;t cleanly verbalize, and you have to some work to do that.<br>&gt;&gt; <br>&gt;&gt; Should we get rid of all of that too? Should we try to make all of Swift &quot;read naturally&quot; as English-like sentences?<br>&gt;&gt; <br>&gt;&gt; To me, that sounds absurd. You don&#39;t try to read code as if it was prose. It just makes no sense.<br>&gt;&gt; <br>&gt; <br>&gt; I don’t think we need to create a straw man idea of removing all punctation from Swift.<br></p><p>You’re right, my apologies.<br></p><p>What I tried to convey is: if there is (AFAICT) an agreement that trying to make code in general sound like English isn’t a very useful goal, perhaps the attempt to put ‘with’s etc in method names is more due to familiarity with how it was always done in Objective-C, rather than because it’s truly helpful in practice.<br></p><p>&gt; <br>&gt;&gt; And I don&#39;t see why we should have a double standard for method names. They&#39;re still words and easy to say out loud. You don&#39;t need to litter code with vacuous words like &quot;with&quot; to do that.<br>&gt;&gt; <br>&gt; <br>&gt; This concept is naturally difficult to discuss over email since the point I am trying to make is about how you read these methods in person, but I’ll try.<br>&gt; <br>&gt; Let’s take a method like:<br>&gt; <br>&gt; -encodeWithCoder:<br>&gt; <br>&gt; then, translated into Swift by dropping the ‘with’:<br>&gt; <br>&gt; encode(coder:)<br>&gt; <br>&gt; If you say this out loud, you hear: “encode coder”. This sounds like you’re encoding the coder, which is not the case.<br></p><p>That is a good example. When you read the code, there is no ambiguity as the Swift punctuation makes it clear you’re “encoding” not “encoding coder”, but indeed trying to say it out loud can be confusing.<br></p><p>I believe this is something of an edge case, though. In vast majority of cases (as far as I can see), removing “with”s makes verbalizing a method name a little less “nice”, but I don’t consider it a real problem, and would strongly side for readability / high S-to-N in the natural medium. But when the result is downright confusing — okay, I could see why this could be considered a problem.<br></p><p>&gt; I think in this particular method, a fair argument could be made that ‘with’ was not the right word to use in the first place, and instead it could have been “into”. Then it would probably be imported as “encodeInto(coder:)”. This sounds much more fluent while at the same time providing a more correct indication of the behavior. This is a direction that we are still exploring based on some of the feedback from the community in these review threads about the guidelines.<br></p><p>FWIW I’m not sure if “encode into coder”, verbalized, is an improvement in this respect. But I see what you’re going for.<br></p><p>&gt; <br>&gt; It’s probable that this aspect of naming is more important to some people than to others. Personally, every day I talk to people using these method names. Often I get up on stages and talk about these methods to large groups of people. I believe that anything that helps me to say them out loud more naturally will assist in the listener’s ability to clearly understand my intent.<br></p><p>Definitely a great perspective to consider. I just wouldn’t want the clarity in code’s natural medium to suffer because it’s a bit harder to present and say out loud.<br></p><p>Best,<br>— Radek<br></p><p>&gt; <br>&gt; Thanks,<br>&gt; - Tony<br>&gt; <br>&gt; <br>&gt;&gt; Sent from my iPad<br>&gt;&gt; <br>&gt;&gt; On 01 Feb 2016, at 09:19, Colin Cornaby &lt;colin.cornaby at mac.com &lt;mailto:colin.cornaby at mac.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; I think being able to naturally talk about code is important. Code is not write only. It’s meant to be read, talked about out loud, and reasoned about with others. Certainly “with” (and “using”) can be trimmed out of a lot of API, but I’m not supportive of taken that to an extent where functions need to have words inserted back into them to be naturally read out loud. It only generates confusion if the method name as spoken is different than the method name as written.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 30, 2016, at 7:45 AM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; It’s important to be able to talk about these methods in a natural way, and a natural way to say this sentence in English is to put that connecting word there.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Why is this so important? You’re saying “this sentence”, but it’s not a sentence, and it’s not English. You can easily add the words “with” or “and” when trying to verbalize method names, but those words don&#39;t help at all in readability of code in its natural medium.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; One option we discussed was to put the connecting word into the label instead of the method name:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; foo(withOptions:)<br>&gt;&gt;&gt;&gt;&gt; description(withLocale:)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Having “options” and “locale” on the parameters side of the method call is great, but then if you make this effort, there’s no value in keeping “with”.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; — Radek<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 29 Jan 2016, at 22:18, Tony Parker via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jan 29, 2016, at 12:07 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jan 28, 2016, at 14:15, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I&#39;m very used to &quot;fooWithBar: baz&quot; meaning either &quot;get me the foo that<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; has a bar matching baz&quot; or &quot;create me a foo with its bar set to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; baz&quot;. <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; That&#39;s great, when that&#39;s what &quot;with&quot; means.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; But I&#39;m not sure this new convention is any worse, now that the base<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; name isn&#39;t assumed to include the first argument.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; The problem is that, I&#39;m guessing at least 50% of the time, &quot;with&quot; is<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; just used as a vacuous connector to make the method name sound<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; grammatical, and &quot;fooWithBar&quot; doesn&#39;t actually mean the &quot;foo&quot; has-a<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;bar.&quot;  In these cases, it&#39;s actively misleading. I know that&#39;s not what<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; you were posting about, but I felt it had to be said :-/<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I actually don&#39;t think this is true when &quot;foo&quot; is a noun (and searching through the selector dump Doug made a long time ago seems to back that up).<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Exceptions:<br>&gt;&gt;&gt;&gt;&gt;&gt; - &quot;fooWithOptions&quot;, but that&#39;s already caught by the default parameter rule.<br>&gt;&gt;&gt;&gt;&gt;&gt; - &quot;fooWithLocale&quot;, which uses the locale to build the result.<br>&gt;&gt;&gt;&gt;&gt;&gt; - &quot;commonPrefixWithString&quot;, where the &quot;with&quot; isn&#39;t quite vacuous.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; But when &quot;foo&quot; is a verb (or when it&#39;s a later parameter that&#39;s just &quot;withBar&quot;) it does seem pretty vacuous.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Jordan<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; It’s important to be able to talk about these methods in a natural way, and a natural way to say this sentence in English is to put that connecting word there.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; One option we discussed was to put the connecting word into the label instead of the method name:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; foo(withOptions:)<br>&gt;&gt;&gt;&gt;&gt; description(withLocale:)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; etc.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160202/925e1b22/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] SE-0005 Better Translation of Objective-C APIs Into Swift</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>February  1, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Jan 29, 2016, at 12:07 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 28, 2016, at 14:15, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; I&#39;m very used to &quot;fooWithBar: baz&quot; meaning either &quot;get me the foo that<br>&gt;&gt;&gt; has a bar matching baz&quot; or &quot;create me a foo with its bar set to<br>&gt;&gt;&gt; baz&quot;. <br>&gt;&gt; <br>&gt;&gt; That&#39;s great, when that&#39;s what &quot;with&quot; means.<br>&gt;&gt; <br>&gt;&gt;&gt; But I&#39;m not sure this new convention is any worse, now that the base<br>&gt;&gt;&gt; name isn&#39;t assumed to include the first argument.<br>&gt;&gt; <br>&gt;&gt; The problem is that, I&#39;m guessing at least 50% of the time, &quot;with&quot; is<br>&gt;&gt; just used as a vacuous connector to make the method name sound<br>&gt;&gt; grammatical, and &quot;fooWithBar&quot; doesn&#39;t actually mean the &quot;foo&quot; has-a<br>&gt;&gt; &quot;bar.&quot;  In these cases, it&#39;s actively misleading. I know that&#39;s not what<br>&gt;&gt; you were posting about, but I felt it had to be said :-/<br>&gt; <br>&gt; I actually don&#39;t think this is true when &quot;foo&quot; is a noun (and searching through the selector dump Doug made a long time ago seems to back that up).<br>&gt; <br>&gt; Exceptions:<br>&gt; - &quot;fooWithOptions&quot;, but that&#39;s already caught by the default parameter rule.<br>&gt; - &quot;fooWithLocale&quot;, which uses the locale to build the result.<br>&gt; - &quot;commonPrefixWithString&quot;, where the &quot;with&quot; isn&#39;t quite vacuous.<br>&gt; <br>&gt; But when &quot;foo&quot; is a verb (or when it&#39;s a later parameter that&#39;s just &quot;withBar&quot;) it does seem pretty vacuous.<br></p><p>This is a great observation. Pull request here shows what this does:<br></p><p>	https://github.com/apple/swift-3-api-guidelines-review/pull/9<br></p><p>and, from the cases we’ve looked at, does a fantastic job of distinguishing the cases where “with” is a separator vs. “with” meaning some kind of selection criteria.<br></p><p>	- Doug<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160201/e71a7c14/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Review] SE-0005 Better Translation of Objective-C APIs Into Swift</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>February  1, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Feb 1, 2016, at 12:10, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 29, 2016, at 12:07 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 28, 2016, at 14:15, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;m very used to &quot;fooWithBar: baz&quot; meaning either &quot;get me the foo that<br>&gt;&gt;&gt;&gt; has a bar matching baz&quot; or &quot;create me a foo with its bar set to<br>&gt;&gt;&gt;&gt; baz&quot;. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That&#39;s great, when that&#39;s what &quot;with&quot; means.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; But I&#39;m not sure this new convention is any worse, now that the base<br>&gt;&gt;&gt;&gt; name isn&#39;t assumed to include the first argument.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The problem is that, I&#39;m guessing at least 50% of the time, &quot;with&quot; is<br>&gt;&gt;&gt; just used as a vacuous connector to make the method name sound<br>&gt;&gt;&gt; grammatical, and &quot;fooWithBar&quot; doesn&#39;t actually mean the &quot;foo&quot; has-a<br>&gt;&gt;&gt; &quot;bar.&quot;  In these cases, it&#39;s actively misleading. I know that&#39;s not what<br>&gt;&gt;&gt; you were posting about, but I felt it had to be said :-/<br>&gt;&gt; <br>&gt;&gt; I actually don&#39;t think this is true when &quot;foo&quot; is a noun (and searching through the selector dump Doug made a long time ago seems to back that up).<br>&gt;&gt; <br>&gt;&gt; Exceptions:<br>&gt;&gt; - &quot;fooWithOptions&quot;, but that&#39;s already caught by the default parameter rule.<br>&gt;&gt; - &quot;fooWithLocale&quot;, which uses the locale to build the result.<br>&gt;&gt; - &quot;commonPrefixWithString&quot;, where the &quot;with&quot; isn&#39;t quite vacuous.<br>&gt;&gt; <br>&gt;&gt; But when &quot;foo&quot; is a verb (or when it&#39;s a later parameter that&#39;s just &quot;withBar&quot;) it does seem pretty vacuous.<br>&gt; <br>&gt; This is a great observation. Pull request here shows what this does:<br>&gt; <br>&gt; 	https://github.com/apple/swift-3-api-guidelines-review/pull/9 &lt;https://github.com/apple/swift-3-api-guidelines-review/pull/9&gt;<br>&gt; <br>&gt; and, from the cases we’ve looked at, does a fantastic job of distinguishing the cases where “with” is a separator vs. “with” meaning some kind of selection criteria.<br></p><p>Oh no! Now I&#39;m sad I added a new automated rule based on parts of speech. As I&#39;ve said before, these rules are necessarily incomplete, difficult for non-native speakers, and problematic when a word can be either a noun or a verb (cf. &quot;displayNameWithLocale(_: NSLocale) -&gt; String&quot; and &quot;highlightWithLevel(_: CGFloat) -&gt; NSColor?&quot;).<br></p><p>I&#39;m looking at the diff but it&#39;s hard to tell what didn&#39;t change. Are there branches that differentiate the two different &quot;with&quot; heuristics?<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160201/e4f71c48/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] SE-0005 Better Translation of Objective-C APIs Into Swift</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>February  1, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Feb 1, 2016, at 12:49 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Feb 1, 2016, at 12:10, Douglas Gregor &lt;dgregor at apple.com &lt;mailto:dgregor at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 29, 2016, at 12:07 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 28, 2016, at 14:15, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I&#39;m very used to &quot;fooWithBar: baz&quot; meaning either &quot;get me the foo that<br>&gt;&gt;&gt;&gt;&gt; has a bar matching baz&quot; or &quot;create me a foo with its bar set to<br>&gt;&gt;&gt;&gt;&gt; baz&quot;. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; That&#39;s great, when that&#39;s what &quot;with&quot; means.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; But I&#39;m not sure this new convention is any worse, now that the base<br>&gt;&gt;&gt;&gt;&gt; name isn&#39;t assumed to include the first argument.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The problem is that, I&#39;m guessing at least 50% of the time, &quot;with&quot; is<br>&gt;&gt;&gt;&gt; just used as a vacuous connector to make the method name sound<br>&gt;&gt;&gt;&gt; grammatical, and &quot;fooWithBar&quot; doesn&#39;t actually mean the &quot;foo&quot; has-a<br>&gt;&gt;&gt;&gt; &quot;bar.&quot;  In these cases, it&#39;s actively misleading. I know that&#39;s not what<br>&gt;&gt;&gt;&gt; you were posting about, but I felt it had to be said :-/<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I actually don&#39;t think this is true when &quot;foo&quot; is a noun (and searching through the selector dump Doug made a long time ago seems to back that up).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Exceptions:<br>&gt;&gt;&gt; - &quot;fooWithOptions&quot;, but that&#39;s already caught by the default parameter rule.<br>&gt;&gt;&gt; - &quot;fooWithLocale&quot;, which uses the locale to build the result.<br>&gt;&gt;&gt; - &quot;commonPrefixWithString&quot;, where the &quot;with&quot; isn&#39;t quite vacuous.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But when &quot;foo&quot; is a verb (or when it&#39;s a later parameter that&#39;s just &quot;withBar&quot;) it does seem pretty vacuous.<br>&gt;&gt; <br>&gt;&gt; This is a great observation. Pull request here shows what this does:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-3-api-guidelines-review/pull/9 &lt;https://github.com/apple/swift-3-api-guidelines-review/pull/9&gt;<br>&gt;&gt; <br>&gt;&gt; and, from the cases we’ve looked at, does a fantastic job of distinguishing the cases where “with” is a separator vs. “with” meaning some kind of selection criteria.<br>&gt; <br>&gt; Oh no! Now I&#39;m sad I added a new automated rule based on parts of speech. As I&#39;ve said before, these rules are necessarily incomplete, difficult for non-native speakers, and problematic when a word can be either a noun or a verb (cf. &quot;displayNameWithLocale(_: NSLocale) -&gt; String&quot; and &quot;highlightWithLevel(_: CGFloat) -&gt; NSColor?”).<br></p><p>And they are (still) most of the basis for the automatic translation described in SE-0005. Frankly, I don’t think we can avoid using parts-of-speech analysis to transform Objective-C APIs into Swift APIs.<br></p><p>&gt; I&#39;m looking at the diff but it&#39;s hard to tell what didn&#39;t change. Are there branches that differentiate the two different &quot;with&quot; heuristics?<br></p><p>The swift-3-first-argument-labels branch is the initial “with” heuristic Radek proposed. You can see the diffs between that heuristic and the “verb” heuristic here:<br></p><p>	https://github.com/apple/swift-3-api-guidelines-review/compare/swift-3-first-argument-labels...swift-3-first-argument-labels-verb<br></p><p>	- Doug<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160201/6bfe1297/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Review] SE-0005 Better Translation of Objective-C APIs Into Swift</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February  2, 2016 at 12:00:00am</p></header><div class="content"><p>&gt;&gt;&gt;&gt; Exceptions:<br>&gt;&gt;&gt;&gt; - &quot;fooWithOptions&quot;, but that&#39;s already caught by the default parameter rule.<br>&gt;&gt;&gt;&gt; - &quot;fooWithLocale&quot;, which uses the locale to build the result.<br>&gt;&gt;&gt;&gt; - &quot;commonPrefixWithString&quot;, where the &quot;with&quot; isn&#39;t quite vacuous.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; But when &quot;foo&quot; is a verb (or when it&#39;s a later parameter that&#39;s just &quot;withBar&quot;) it does seem pretty vacuous.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is a great observation. Pull request here shows what this does:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-3-api-guidelines-review/pull/9 &lt;https://github.com/apple/swift-3-api-guidelines-review/pull/9&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; and, from the cases we’ve looked at, does a fantastic job of distinguishing the cases where “with” is a separator vs. “with” meaning some kind of selection criteria.<br>&gt;&gt; <br>&gt;&gt; Oh no! Now I&#39;m sad I added a new automated rule based on parts of speech. As I&#39;ve said before, these rules are necessarily incomplete, difficult for non-native speakers, and problematic when a word can be either a noun or a verb (cf. &quot;displayNameWithLocale(_: NSLocale) -&gt; String&quot; and &quot;highlightWithLevel(_: CGFloat) -&gt; NSColor?”).<br>&gt; <br>&gt; And they are (still) most of the basis for the automatic translation described in SE-0005. Frankly, I don’t think we can avoid using parts-of-speech analysis to transform Objective-C APIs into Swift APIs.<br>&gt; <br>&gt;&gt; I&#39;m looking at the diff but it&#39;s hard to tell what didn&#39;t change. Are there branches that differentiate the two different &quot;with&quot; heuristics?<br>&gt; <br>&gt; The swift-3-first-argument-labels branch is the initial “with” heuristic Radek proposed. You can see the diffs between that heuristic and the “verb” heuristic here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-3-api-guidelines-review/compare/swift-3-first-argument-labels...swift-3-first-argument-labels-verb &lt;https://github.com/apple/swift-3-api-guidelines-review/compare/swift-3-first-argument-labels...swift-3-first-argument-labels-verb&gt;<br></p><p>Ah, interesting!<br></p><p>I definitely see the rationale for this. Calling a method like `tracks` seems a bit confusing, it doesn’t capture the intent at all. The ObjC-convention version, say, `tracksWithMediaType(…)`, though less clear, makes a better job at this.<br></p><p>I can see more methods of this kind in the diff, and they seem to benefit the most.<br></p><p>I mentioned this before, but the way I would prefer this named is `findTracks(…)`, and skip the “with” in the name. The intent is captured better than the original, we start with a verb, and the method name is separated from its parameters. But obviously this is unlikely to work as an automated translation.<br></p><p>Having said that, a lot of the changes seem like a step back:<br></p><p><br>&gt;    func highlight(level val: CGFloat) -&gt; NSColor?		   func highlight(level val: CGFloat) -&gt; NSColor?<br>&gt; -  func shadow(level val: CGFloat) -&gt; NSColor?		+  func shadowWithLevel(val: CGFloat) -&gt; NSColor?<br></p><p>Inconsistency. Highlight analyzed as as a verb, shadow as a noun, even though those are obviously related.<br></p><p>&gt; -  func blendedColor(fraction fraction: CGFloat, of color: NSColor) -&gt; NSColor?		+  func blendedColorWithFraction(fraction: CGFloat, of color: NSColor) -&gt; NSColor?<br></p><p>This doesn’t seem like an improvement. “fraction” and “color” seem very much like parameters to be separated from the name.<br></p><p>&gt; -  class func availableColorSpaces(model model: NSColorSpaceModel) -&gt; [NSColorSpace]		+  class func availableColorSpacesWith(model: NSColorSpaceModel) -&gt; [NSColorSpace]<br>&gt;  func indexOfItem(objectValue object: AnyObject) -&gt; Int		+  func indexOfItemWithObjectValue(object: AnyObject) -&gt; Int<br></p><p>Same…<br></p><p><br>&gt; -  func reviewUnsavedDocuments(alertTitle title: String?, cancellable: Bool, delegate: AnyObject?, didReviewAllSelector: Selector, contextInfo: UnsafeMutablePointer&lt;Void&gt;)		+  func reviewUnsavedDocumentsWithAlertTitle(title: String?, cancellable: Bool, delegate: AnyObject?, didReviewAllSelector: Selector, contextInfo: UnsafeMutablePointer&lt;Void&gt;)<br></p><p>This definitely seem like a step back, “reviewUnsavedDocuments” works really well as a name, without the sort of confusion that the “tracks” mentioned above has.<br></p><p><br>&gt; -  class func mouseEvent(type type: NSEventType, location: Point, modifierFlags flags: NSEventModifierFlags, timestamp time: TimeInterval, windowNumber wNum: Int, context: NSGraphicsContext?, eventNumber eNum: Int, clickCount cNum: Int, pressure: Float) -&gt; NSEvent?		<br>&gt; +  class func mouseEventWith(type: NSEventType, location: Point, modifierFlags flags: NSEventModifierFlags, timestamp time: TimeInterval, windowNumber wNum: Int, context: NSGraphicsContext?, eventNumber eNum: Int, clickCount cNum: Int, pressure: Float) -&gt; NSEvent?<br></p><p>This one’s weird. “With” was added, but without “type” in the name.<br></p><p>* * *<br></p><p>Overall, I’m very conflicted about this diff. I’d obviously like the “with as a separator between method name and parameters” idea to go through, but not if there’s a lot of cases that seem more confusing for it. But I’m not convinced the heuristic suggested by Jordan can be implemented in a way it would work reliably. I can see more changes in the diff that seem worse than changes that seem like an improvement….<br></p><p>Best,<br>— Radek<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160202/64ac3f34/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] SE-0005 Better Translation of Objective-C APIs Into Swift</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>February  2, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Feb 1, 2016, at 3:45 PM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt;&gt;&gt;&gt; Exceptions:<br>&gt;&gt;&gt;&gt;&gt; - &quot;fooWithOptions&quot;, but that&#39;s already caught by the default parameter rule.<br>&gt;&gt;&gt;&gt;&gt; - &quot;fooWithLocale&quot;, which uses the locale to build the result.<br>&gt;&gt;&gt;&gt;&gt; - &quot;commonPrefixWithString&quot;, where the &quot;with&quot; isn&#39;t quite vacuous.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; But when &quot;foo&quot; is a verb (or when it&#39;s a later parameter that&#39;s just &quot;withBar&quot;) it does seem pretty vacuous.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This is a great observation. Pull request here shows what this does:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-3-api-guidelines-review/pull/9 &lt;https://github.com/apple/swift-3-api-guidelines-review/pull/9&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; and, from the cases we’ve looked at, does a fantastic job of distinguishing the cases where “with” is a separator vs. “with” meaning some kind of selection criteria.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Oh no! Now I&#39;m sad I added a new automated rule based on parts of speech. As I&#39;ve said before, these rules are necessarily incomplete, difficult for non-native speakers, and problematic when a word can be either a noun or a verb (cf. &quot;displayNameWithLocale(_: NSLocale) -&gt; String&quot; and &quot;highlightWithLevel(_: CGFloat) -&gt; NSColor?”).<br>&gt;&gt; <br>&gt;&gt; And they are (still) most of the basis for the automatic translation described in SE-0005. Frankly, I don’t think we can avoid using parts-of-speech analysis to transform Objective-C APIs into Swift APIs.<br>&gt;&gt; <br>&gt;&gt;&gt; I&#39;m looking at the diff but it&#39;s hard to tell what didn&#39;t change. Are there branches that differentiate the two different &quot;with&quot; heuristics?<br>&gt;&gt; <br>&gt;&gt; The swift-3-first-argument-labels branch is the initial “with” heuristic Radek proposed. You can see the diffs between that heuristic and the “verb” heuristic here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-3-api-guidelines-review/compare/swift-3-first-argument-labels...swift-3-first-argument-labels-verb &lt;https://github.com/apple/swift-3-api-guidelines-review/compare/swift-3-first-argument-labels...swift-3-first-argument-labels-verb&gt;<br>&gt; <br>&gt; Ah, interesting!<br>&gt; <br>&gt; I definitely see the rationale for this. Calling a method like `tracks` seems a bit confusing, it doesn’t capture the intent at all. The ObjC-convention version, say, `tracksWithMediaType(…)`, though less clear, makes a better job at this.<br>&gt; <br>&gt; I can see more methods of this kind in the diff, and they seem to benefit the most.<br>&gt; <br>&gt; I mentioned this before, but the way I would prefer this named is `findTracks(…)`, and skip the “with” in the name. The intent is captured better than the original, we start with a verb, and the method name is separated from its parameters. But obviously this is unlikely to work as an automated translation.<br>&gt; <br>&gt; Having said that, a lot of the changes seem like a step back:<br>&gt; <br>&gt; <br>&gt;&gt;    func highlight(level val: CGFloat) -&gt; NSColor?		   func highlight(level val: CGFloat) -&gt; NSColor?<br>&gt;&gt; -  func shadow(level val: CGFloat) -&gt; NSColor?		+  func shadowWithLevel(val: CGFloat) -&gt; NSColor?<br>&gt; <br>&gt; Inconsistency. Highlight analyzed as as a verb, shadow as a noun, even though those are obviously related.<br></p><p>Yes, this is an inconsistency we would need to deal with via NS_SWIFT_NAME. “highlight” is acting as an adjective here, although it’s predominantly a verb in Cocoa APIs.<br></p><p>&gt; <br>&gt;&gt; -  func blendedColor(fraction fraction: CGFloat, of color: NSColor) -&gt; NSColor?		+  func blendedColorWithFraction(fraction: CGFloat, of color: NSColor) -&gt; NSColor?<br>&gt; <br>&gt; This doesn’t seem like an improvement. “fraction” and “color” seem very much like parameters to be separated from the name.<br></p><p>Note that this is the intent of the change, however: blendedColor is a noun phrase describing the result, and “withFraction” is a characteristic of the resulting color.<br></p><p>&gt; <br>&gt;&gt; -  class func availableColorSpaces(model model: NSColorSpaceModel) -&gt; [NSColorSpace]		+  class func availableColorSpacesWith(model: NSColorSpaceModel) -&gt; [NSColorSpace]<br>&gt;&gt;  func indexOfItem(objectValue object: AnyObject) -&gt; Int		+  func indexOfItemWithObjectValue(object: AnyObject) -&gt; Int<br>&gt; <br>&gt; Same…<br></p><p>With the same answer: both start with noun phrases describing the result, so the “with” is acting more like “having”, indicating that the parameter is describing the characteristics of the result.<br></p><p>&gt; <br>&gt; <br>&gt;&gt; -  func reviewUnsavedDocuments(alertTitle title: String?, cancellable: Bool, delegate: AnyObject?, didReviewAllSelector: Selector, contextInfo: UnsafeMutablePointer&lt;Void&gt;)		+  func reviewUnsavedDocumentsWithAlertTitle(title: String?, cancellable: Bool, delegate: AnyObject?, didReviewAllSelector: Selector, contextInfo: UnsafeMutablePointer&lt;Void&gt;)<br>&gt; <br>&gt; This definitely seem like a step back, “reviewUnsavedDocuments” works really well as a name, without the sort of confusion that the “tracks” mentioned above has.<br></p><p>Somehow, “review” wasn’t in my list of verbs. I’ll fix this.<br></p><p>&gt;&gt; -  class func mouseEvent(type type: NSEventType, location: Point, modifierFlags flags: NSEventModifierFlags, timestamp time: TimeInterval, windowNumber wNum: Int, context: NSGraphicsContext?, eventNumber eNum: Int, clickCount cNum: Int, pressure: Float) -&gt; NSEvent?		<br>&gt;&gt; +  class func mouseEventWith(type: NSEventType, location: Point, modifierFlags flags: NSEventModifierFlags, timestamp time: TimeInterval, windowNumber wNum: Int, context: NSGraphicsContext?, eventNumber eNum: Int, clickCount cNum: Int, pressure: Float) -&gt; NSEvent?<br>&gt; <br>&gt; This one’s weird. “With” was added, but without “type” in the name.<br></p><p>“type” is redundant with the type info, so it has been pruned.<br></p><p><br>&gt; <br>&gt; * * *<br>&gt; <br>&gt; Overall, I’m very conflicted about this diff. I’d obviously like the “with as a separator between method name and parameters” idea to go through, but not if there’s a lot of cases that seem more confusing for it. But I’m not convinced the heuristic suggested by Jordan can be implemented in a way it would work reliably. I can see more changes in the diff that seem worse than changes that seem like an improvement….<br></p><p><br>There is definitely a mindset difference between this diff and the diff corresponding to with-as-separator. This diff produces fewer first argument labels, but maintains many cases where the “with” is useful for describing the characteristics of the results.<br></p><p>	- Doug<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160202/656224a1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Review] SE-0005 Better Translation of Objective-C APIs Into Swift</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February  2, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt;&gt; Ah, interesting!<br>&gt;&gt; <br>&gt;&gt; I definitely see the rationale for this. Calling a method like `tracks` seems a bit confusing, it doesn’t capture the intent at all. The ObjC-convention version, say, `tracksWithMediaType(…)`, though less clear, makes a better job at this.<br>&gt;&gt; <br>&gt;&gt; I can see more methods of this kind in the diff, and they seem to benefit the most.<br>&gt;&gt; <br>&gt;&gt; I mentioned this before, but the way I would prefer this named is `findTracks(…)`, and skip the “with” in the name. The intent is captured better than the original, we start with a verb, and the method name is separated from its parameters. But obviously this is unlikely to work as an automated translation.<br>&gt;&gt; <br>&gt;&gt; Having said that, a lot of the changes seem like a step back:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt;    func highlight(level val: CGFloat) -&gt; NSColor?		   func highlight(level val: CGFloat) -&gt; NSColor?<br>&gt;&gt;&gt; -  func shadow(level val: CGFloat) -&gt; NSColor?		+  func shadowWithLevel(val: CGFloat) -&gt; NSColor?<br>&gt;&gt; <br>&gt;&gt; Inconsistency. Highlight analyzed as as a verb, shadow as a noun, even though those are obviously related.<br>&gt; <br>&gt; Yes, this is an inconsistency we would need to deal with via NS_SWIFT_NAME. “highlight” is acting as an adjective here, although it’s predominantly a verb in Cocoa APIs.<br></p><p>True, but it would seem preferable to me to choose an approach for which having to fix up a name with NS_SWIFT_NAME is a rare occurrence.<br></p><p>&gt;&gt; <br>&gt;&gt;&gt; -  func blendedColor(fraction fraction: CGFloat, of color: NSColor) -&gt; NSColor?		+  func blendedColorWithFraction(fraction: CGFloat, of color: NSColor) -&gt; NSColor?<br>&gt;&gt; <br>&gt;&gt; This doesn’t seem like an improvement. “fraction” and “color” seem very much like parameters to be separated from the name.<br>&gt; <br>&gt; Note that this is the intent of the change, however: blendedColor is a noun phrase describing the result, and “withFraction” is a characteristic of the resulting color.<br></p><p>I understand; I just find it a much less compelling example for Jordan’s approach than something like the previously mentioned “tracks”.<br></p><p>Perhaps the way to differentiate further cases where “with” in the name is useful is: methods that you can imagine being called “findFoo”, and take some argument as a search condition, but without it, only a single noun remains.<br></p><p>Looking through the diff, methods like these:<br></p><p>track(trackID trackID: CMPersistentTrackID) -&gt; AVAssetTrack?<br>func tracks(mediaCharacteristic mediaCharacteristic: String) -&gt; [AVFragmentedAssetTrack]<br>class func devices(mediaType mediaType: String!) -&gt; [AnyObject]!<br>class func defaultDevice(mediaType mediaType: String!) -&gt; AVCaptureDevice!<br>func connection(mediaType mediaType: String!) -&gt; AVCaptureConnection!<br>func mutableTrack(compatibleWith track: AVAssetTrack) -&gt; AVMutableCompositionTrack?	<br></p><p>Bother me the most. But a lot others, I feel like they’re worse off for having “with” back in the name<br></p><p>&gt;&gt;&gt; -  class func availableColorSpaces(model model: NSColorSpaceModel) -&gt; [NSColorSpace]		+  class func availableColorSpacesWith(model: NSColorSpaceModel) -&gt; [NSColorSpace]<br>&gt;&gt;&gt;  func indexOfItem(objectValue object: AnyObject) -&gt; Int		+  func indexOfItemWithObjectValue(object: AnyObject) -&gt; Int<br>&gt;&gt; <br>&gt;&gt; Same…<br>&gt; <br>&gt; With the same answer: both start with noun phrases describing the result, so the “with” is acting more like “having”, indicating that the parameter is describing the characteristics of the result.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; -  func reviewUnsavedDocuments(alertTitle title: String?, cancellable: Bool, delegate: AnyObject?, didReviewAllSelector: Selector, contextInfo: UnsafeMutablePointer&lt;Void&gt;)		+  func reviewUnsavedDocumentsWithAlertTitle(title: String?, cancellable: Bool, delegate: AnyObject?, didReviewAllSelector: Selector, contextInfo: UnsafeMutablePointer&lt;Void&gt;)<br>&gt;&gt; <br>&gt;&gt; This definitely seem like a step back, “reviewUnsavedDocuments” works really well as a name, without the sort of confusion that the “tracks” mentioned above has.<br>&gt; <br>&gt; Somehow, “review” wasn’t in my list of verbs. I’ll fix this.<br></p><p>Another one:<br></p><p>func invalidateLayoutWith(context: NSCollectionViewLayoutInvalidationContext)<br>+  func swapWithMark(sender: AnyObject?)<br></p><p>&gt; <br>&gt;&gt;&gt; -  class func mouseEvent(type type: NSEventType, location: Point, modifierFlags flags: NSEventModifierFlags, timestamp time: TimeInterval, windowNumber wNum: Int, context: NSGraphicsContext?, eventNumber eNum: Int, clickCount cNum: Int, pressure: Float) -&gt; NSEvent?		<br>&gt;&gt;&gt; +  class func mouseEventWith(type: NSEventType, location: Point, modifierFlags flags: NSEventModifierFlags, timestamp time: TimeInterval, windowNumber wNum: Int, context: NSGraphicsContext?, eventNumber eNum: Int, clickCount cNum: Int, pressure: Float) -&gt; NSEvent?<br>&gt;&gt; <br>&gt;&gt; This one’s weird. “With” was added, but without “type” in the name.<br>&gt; <br>&gt; “type” is redundant with the type info, so it has been pruned.<br></p><p>But is “mouseEventWith” as a name actually desirable?<br></p><p>* * *<br></p><p>Another thing that bothers me is how this makes method families have different names:<br></p><p>&gt; -  func indexOfItem(title aTitle: String) -&gt; Int		+  func indexOfItemWithTitle(aTitle: String) -&gt; Int<br>&gt; -  func indexOfItem(tag aTag: Int) -&gt; Int		+  func indexOfItemWithTag(aTag: Int) -&gt; Int<br>&gt; -  func indexOfItem(representedObject object: AnyObject) -&gt; Int		+  func indexOfItemWithRepresentedObject(object: AnyObject) -&gt; Int<br>&gt; -  func indexOfItem(submenu submenu: NSMenu?) -&gt; Int		+  func indexOfItemWithSubmenu(submenu: NSMenu?) -&gt; Int<br>&gt; -  func indexOfItem(target target: AnyObject?, andAction actionSelector: Selector) -&gt; Int		+  func indexOfItemWithTarget(target: AnyObject?, andAction actionSelector: Selector) -&gt; Int<br></p><p><br>I think it would be desirable for this, being essentially a few versions of the same method, just taking different arguments, to have a single name.<br></p><p>This also passes the “you could imagine the name starting with ‘find’” test.<br></p><p>* * *<br></p><p><br>&gt;   func smartMagnify(event event: NSEvent)		+  func smartMagnifyWith(event: NSEvent)<br>&gt;    @available(OSX 10.6, *)		   @available(OSX 10.6, *)<br>&gt; -  func touchesBegan(event event: NSEvent)		+  func touchesBeganWith(event: NSEvent)<br>&gt;    @available(OSX 10.6, *)		   @available(OSX 10.6, *)<br>&gt; -  func touchesMoved(event event: NSEvent)		+  func touchesMovedWith(event: NSEvent)<br>&gt;    @available(OSX 10.6, *)		   @available(OSX 10.6, *)<br>&gt; -  func touchesEnded(event event: NSEvent)		+  func touchesEndedWith(event: NSEvent)<br>&gt;    @available(OSX 10.6, *)		   @available(OSX 10.6, *)<br>&gt; -  func touchesCancelled(event event: NSEvent)		+  func touchesCancelledWith(event: NSEvent)<br>&gt;    @available(OSX 10.8, *)		   @available(OSX 10.8, *)<br>&gt; -  func quickLook(event event: NSEvent)		+  func quickLookWith(event: NSEvent)<br>&gt;    @available(OSX 10.10.3, *)		   @available(OSX 10.10.3, *)<br>&gt; -  func pressureChange(event event: NSEvent)		+  func pressureChangeWith(event: NSEvent)<br></p><p>Not digging this either. Passing NSEvent here feels like passing “sender” — an idiom that seems in no need of adding a “With” suffix to the method name…<br></p><p><br>Best,<br>— Radek<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160202/5ae9b64d/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
