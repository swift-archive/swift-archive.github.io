<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4e98dd28e8af453c8c06c2536e913fc5?s=50"></div><header><strong>Why this can&#39;t compile</strong> from <string>Wang LiMing</string> &lt;uomb at outlook.com&gt;<p>June 30, 2016 at 11:00:00am</p></header><div class="content"><p>import Cocoa<br></p><p>var numbers = [12, 14, 15, 21]<br></p><p>// This is OK<br>numbers.map({<br>    (number:Int) -&gt; Int in<br>        let result = 3 * number<br>        return result<br>})<br></p><p><br>// This is OK<br>numbers.map({<br>    (number: Int) in<br>        return 3 * number<br></p><p>})<br></p><p>//Report Error: Ambiguous reference to member ‘map’ <br>//    <br>numbers.map({<br>    (number: Int) in<br>        var ret = 3 * number<br>        return ret<br>})<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160630/fe31958e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a49c2b8a7e2ffa1339ac013f4cf9b6ff?s=50"></div><header><strong>Why this can&#39;t compile</strong> from <string>Neil Faiman</string> &lt;neil.swift at faiman.org&gt;<p>June 29, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On Jun 29, 2016, at 11:03 PM, boris via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; //Report Error: Ambiguous reference to member ‘map’ <br>&gt; //    <br>&gt; numbers.map({<br>&gt;     (number: Int) in<br>&gt;         var ret = 3 * number<br>&gt;         return ret<br>&gt; })<br></p><p>I asked the same question a few months ago; the answer was that it is a deliberate design choice that you can only omit the return type from a single-expression closure (and that the error message is less than helpful). For example, Jordan Rose offered this explanation:<br></p><p>&gt; Swift very deliberately does not infer types across multiple statements in closure bodies. This is mostly an implementation restriction (our type-checking system can&#39;t handle it very well), but it&#39;s also a simple rule that explains the implementation restriction, rather than having type inference in closure bodies working some of the time but not all.<br>&gt; <br>&gt; As Chris pointed out, the compiler could definitely do a better job communicating the problem, but actually changing the behavior here would require significant implementation work. So this is not considered a &quot;bug&quot;, just an implementation-driven design choice.<br></p><p>Regards,<br></p><p>	Neil Faiman<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160629/78f9955b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4e98dd28e8af453c8c06c2536e913fc5?s=50"></div><header><strong>Why this can&#39;t compile</strong> from <string>Wang LiMing</string> &lt;uomb at outlook.com&gt;<p>June 30, 2016 at 10:00:00am</p></header><div class="content"><p>Thanks for you help!<br></p><p><br>在 2016年6月30日，上午11:58，Neil Faiman &lt;neil.swift at faiman.org&lt;mailto:neil.swift at faiman.org&gt;&gt; 写道：<br></p><p><br>On Jun 29, 2016, at 11:03 PM, boris via swift-users &lt;swift-users at swift.org&lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br></p><p>//Report Error: Ambiguous reference to member ‘map’<br>//<br>numbers.map({<br>    (number: Int) in<br>        var ret = 3 * number<br>        return ret<br>})<br></p><p>I asked the same question a few months ago; the answer was that it is a deliberate design choice that you can only omit the return type from a single-expression closure (and that the error message is less than helpful). For example, Jordan Rose offered this explanation:<br></p><p>Swift very deliberately does not infer types across multiple statements in closure bodies. This is mostly an implementation restriction (our type-checking system can&#39;t handle it very well), but it&#39;s also a simple rule that explains the implementation restriction, rather than having type inference in closure bodies working some of the time but not all.<br></p><p>As Chris pointed out, the compiler could definitely do a better job communicating the problem, but actually changing the behavior here would require significant implementation work. So this is not considered a &quot;bug&quot;, just an implementation-driven design choice.<br></p><p>Regards,<br></p><p>Neil Faiman<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160630/a8656ccf/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
