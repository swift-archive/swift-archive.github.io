<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Standard operator precedence</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>February 13, 2016 at 08:00:00am</p></header><div class="content"><p>Not sure if this is intentional, a bug, and/or a topic for evolution:<br></p><p>In Swift, bitwise operators seem to have a different precedence in<br>relation to other operators than they do in (all other?) C-family<br>languages, at least per documentation. One specific example--this<br>statement in C:<br>```<br>v = v + (v &gt;&gt; 4) &amp; 0x0F0F0F0F;<br>```<br>is evaluated in a different order (at least, per documentation) from<br>this statement in Swift:<br>```<br>v = v &amp;+ (v &gt;&gt; 4) &amp; 0x0F0F0F0F<br>```<br></p><p>In C, C++, C#, Java, Python, Perl, Scala (these are the ones I&#39;ve just<br>checked), infix + has higher precedence than infix bitwise &amp;, but in<br>Swift the bitwise &amp; operator has multiplicative precedence 150 while +<br>has precedence 140. Meanwhile, bitshift operators &lt;&lt; and &gt;&gt; are<br>documented to have exponentiative precedence 160 in Swift, higher than<br>* / + -, which is not seen in other languages. Is this an intentional<br>deviation with some rationale not documented somewhere? Can we change<br>it back? [I know I can change it on a per-file basis, but the point<br>here is that, for a C-style language, having different results for<br>innocuous-looking statements with these operators seems to be a little<br>too easy a pitfall to step in.]<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Standard operator precedence</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>February 13, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On Feb 13, 2016, at 6:32 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Not sure if this is intentional, a bug, and/or a topic for evolution:<br>&gt; <br>&gt; In Swift, bitwise operators seem to have a different precedence in<br>&gt; relation to other operators than they do in (all other?) C-family<br>&gt; languages, at least per documentation. <br></p><p>Yep, this is true, and this is intentional.  Swift has a greatly simplified and rationalized set of precedences, and yes, that means they differ from C.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Standard operator precedence</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>February 14, 2016 at 07:00:00am</p></header><div class="content"><p>Very well. May I ask what the rationale might be? I&#39;m not sure I can deduce<br>it from the available documentation. In other circumstances where Swift<br>operators differ from C (e.g. overflow handling for addition, etc.), the<br>behavior is amply documented and the rationale quite clear. (I should add<br>that Swift documentation currently introduces these bitwise operators as<br>&#39;familiar&#39; to those coming from C and Objective-C before defining what they<br>are, which discourages careful study.)<br>On Sat, Feb 13, 2016 at 10:10 PM Chris Lattner &lt;clattner at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Feb 13, 2016, at 6:32 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Not sure if this is intentional, a bug, and/or a topic for evolution:<br>&gt; &gt;<br>&gt; &gt; In Swift, bitwise operators seem to have a different precedence in<br>&gt; &gt; relation to other operators than they do in (all other?) C-family<br>&gt; &gt; languages, at least per documentation.<br>&gt;<br>&gt; Yep, this is true, and this is intentional.  Swift has a greatly<br>&gt; simplified and rationalized set of precedences, and yes, that means they<br>&gt; differ from C.<br>&gt;<br>&gt; -Chris<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160214/733f7bf2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Standard operator precedence</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>February 14, 2016 at 06:00:00pm</p></header><div class="content"><p>Some further study has been helpful. Am I close to the mark in answering my<br>own question?<br></p><p>- Further reading shows that Swift&#39;s rationalized operator precedence<br>levels broadly align with those of Erlang and Go. (However, those languages<br>also seem to lack documentation on how they arrived at this set of<br>precedence levels.)<br></p><p>- It is quite evident why &lt;&lt; is considered exponentiative.<br></p><p>- Dennis Ritchie has explained &lt;http://www.lysator.liu.se/c/dmr-on-or.html&gt;<br>why &amp; has lower precedence than == in C, and why in hindsight that is<br>better off changed. This change has been implemented in Swift/Go/Erlang and<br>also in other languages like Python.<br></p><p>- &amp; is considered multiplicative because for two bits A and B, A &amp; B == A *<br>B.<br></p><p>- ^ and | should have equal precedence to - and +, respectively, by<br>analogous reasoning.<br></p><p>- It also happens to be rational for &amp; to have higher precedence than | by<br>analogy with &amp;&amp; and ||.<br></p><p>It&#39;s a bit of a bummer, if this line of reasoning was indeed used in<br>arriving at these operator precedence levels, that Swift will not allow<br>evaluation of true * true (etc.) without casting. I would expect true &amp;<br>true == true * true.<br></p><p>On Sun, Feb 14, 2016 at 1:42 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br></p><p>&gt; Very well. May I ask what the rationale might be? I&#39;m not sure I can<br>&gt; deduce it from the available documentation. In other circumstances where<br>&gt; Swift operators differ from C (e.g. overflow handling for addition, etc.),<br>&gt; the behavior is amply documented and the rationale quite clear. (I should<br>&gt; add that Swift documentation currently introduces these bitwise operators<br>&gt; as &#39;familiar&#39; to those coming from C and Objective-C before defining what<br>&gt; they are, which discourages careful study.)<br>&gt; On Sat, Feb 13, 2016 at 10:10 PM Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; &gt; On Feb 13, 2016, at 6:32 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Not sure if this is intentional, a bug, and/or a topic for evolution:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; In Swift, bitwise operators seem to have a different precedence in<br>&gt;&gt; &gt; relation to other operators than they do in (all other?) C-family<br>&gt;&gt; &gt; languages, at least per documentation.<br>&gt;&gt;<br>&gt;&gt; Yep, this is true, and this is intentional.  Swift has a greatly<br>&gt;&gt; simplified and rationalized set of precedences, and yes, that means they<br>&gt;&gt; differ from C.<br>&gt;&gt;<br>&gt;&gt; -Chris<br>&gt;&gt;<br>&gt;&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160214/db4aacb6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Standard operator precedence</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>February 15, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Feb 14, 2016, at 10:25 AM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; Some further study has been helpful. Am I close to the mark in answering my own question?<br>&gt; <br>&gt; - Further reading shows that Swift&#39;s rationalized operator precedence levels broadly align with those of Erlang and Go. (However, those languages also seem to lack documentation on how they arrived at this set of precedence levels.)<br>&gt; <br>&gt; - It is quite evident why &lt;&lt; is considered exponentiative.<br>&gt; <br>&gt; - Dennis Ritchie has explained &lt;http://www.lysator.liu.se/c/dmr-on-or.html &lt;http://www.lysator.liu.se/c/dmr-on-or.html&gt;&gt; why &amp; has lower precedence than == in C, and why in hindsight that is better off changed. This change has been implemented in Swift/Go/Erlang and also in other languages like Python.<br>&gt; <br>&gt; - &amp; is considered multiplicative because for two bits A and B, A &amp; B == A * B.<br>&gt; <br>&gt; - ^ and | should have equal precedence to - and +, respectively, by analogous reasoning.<br>&gt; <br>&gt; - It also happens to be rational for &amp; to have higher precedence than | by analogy with &amp;&amp; and ||.<br></p><p>Yep, this is all right.<br></p><p>&gt; It&#39;s a bit of a bummer, if this line of reasoning was indeed used in arriving at these operator precedence levels, that Swift will not allow evaluation of true * true (etc.) without casting. I would expect true &amp; true == true * true.<br></p><p>I’m not sure what you mean here.  You want multiplication defined on booleans?<br></p><p>-Chris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160215/3ea1289e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Standard operator precedence</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>February 15, 2016 at 07:00:00pm</p></header><div class="content"><p>Yes, but not enough to claim limited resources needed for pressing matters.<br>It&#39;s not a feature anyone would clamor for, more a product of the foolish<br>consistency hobgoblin. Rationale: it is possible in JavaScript (for<br>instance) to evaluate true * true, but not in Swift. [I&#39;m aware that<br>implicit casting is taking place in JavaScript, and that the return type<br>isn&#39;t a Boolean.] It comes into play in exactly one scenario I can think of:<br></p><p>Student: &quot;Why is &amp; a multiplicative operation?&quot;<br>Teacher: &quot;Well, because for two bits A and B, A &amp; B == A * B.&quot;<br>Student: &quot;That&#39;s interesting, let me try it with the only type I know that<br>represents a single bit of data.&quot;<br>[At this point the student should, IMO, be able to actually evaluate A * B<br>where A and B are booleans.]<br></p><p>Analogous rationale for defining &amp;+ and &amp;- on booleans.<br></p><p>On Mon, Feb 15, 2016 at 12:20 PM Chris Lattner &lt;clattner at apple.com&gt; wrote:<br></p><p>&gt; On Feb 14, 2016, at 10:25 AM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt; Some further study has been helpful. Am I close to the mark in answering<br>&gt; my own question?<br>&gt;<br>&gt; - Further reading shows that Swift&#39;s rationalized operator precedence<br>&gt; levels broadly align with those of Erlang and Go. (However, those languages<br>&gt; also seem to lack documentation on how they arrived at this set of<br>&gt; precedence levels.)<br>&gt;<br>&gt; - It is quite evident why &lt;&lt; is considered exponentiative.<br>&gt;<br>&gt; - Dennis Ritchie has explained &lt;http://www.lysator.liu.se/c/dmr-on-or.html&gt;<br>&gt; why &amp; has lower precedence than == in C, and why in hindsight that is<br>&gt; better off changed. This change has been implemented in Swift/Go/Erlang and<br>&gt; also in other languages like Python.<br>&gt;<br>&gt; - &amp; is considered multiplicative because for two bits A and B, A &amp; B == A<br>&gt; * B.<br>&gt;<br>&gt; - ^ and | should have equal precedence to - and +, respectively, by<br>&gt; analogous reasoning.<br>&gt;<br>&gt; - It also happens to be rational for &amp; to have higher precedence than | by<br>&gt; analogy with &amp;&amp; and ||.<br>&gt;<br>&gt;<br>&gt; Yep, this is all right.<br>&gt;<br>&gt; It&#39;s a bit of a bummer, if this line of reasoning was indeed used in<br>&gt; arriving at these operator precedence levels, that Swift will not allow<br>&gt; evaluation of true * true (etc.) without casting. I would expect true &amp;<br>&gt; true == true * true.<br>&gt;<br>&gt;<br>&gt; I’m not sure what you mean here.  You want multiplication defined on<br>&gt; booleans?<br>&gt;<br>&gt; -Chris<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160215/8f3e4526/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Standard operator precedence</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>February 15, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Feb 15, 2016, at 11:17 AM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; Yes, but not enough to claim limited resources needed for pressing matters. It&#39;s not a feature anyone would clamor for, more a product of the foolish consistency hobgoblin. Rationale: it is possible in JavaScript (for instance) to evaluate true * true, but not in Swift.<br></p><p>A feature existing in another language isn’t sufficient rationale for including it in Swift.  It needs to solve a problem for Swift developers.<br></p><p>-Chris<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Standard operator precedence</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>February 15, 2016 at 11:00:00am</p></header><div class="content"><p>A boolean is not a single bit of data in Swift, in the same way that &quot;someIntegerValue &amp; 1&quot; cannot be used as a condition. There is a bijection between boolean values and integers with one bit set or cleared, but they are not the same type.<br></p><p>(You can&#39;t use &#39;&amp;&#39; on a Bool either, only &#39;&amp;&amp;&#39;. That does mean Swift has no non-short-circuiting boolean AND operation, but so far we haven&#39;t needed one.)<br></p><p>Jordan<br></p><p><br>&gt; On Feb 15, 2016, at 11:17, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Yes, but not enough to claim limited resources needed for pressing matters. It&#39;s not a feature anyone would clamor for, more a product of the foolish consistency hobgoblin. Rationale: it is possible in JavaScript (for instance) to evaluate true * true, but not in Swift. [I&#39;m aware that implicit casting is taking place in JavaScript, and that the return type isn&#39;t a Boolean.] It comes into play in exactly one scenario I can think of:<br>&gt; <br>&gt; Student: &quot;Why is &amp; a multiplicative operation?&quot;<br>&gt; Teacher: &quot;Well, because for two bits A and B, A &amp; B == A * B.&quot;<br>&gt; Student: &quot;That&#39;s interesting, let me try it with the only type I know that represents a single bit of data.&quot;<br>&gt; [At this point the student should, IMO, be able to actually evaluate A * B where A and B are booleans.]<br>&gt; <br>&gt; Analogous rationale for defining &amp;+ and &amp;- on booleans.<br>&gt; <br>&gt; On Mon, Feb 15, 2016 at 12:20 PM Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt; On Feb 14, 2016, at 10:25 AM, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Some further study has been helpful. Am I close to the mark in answering my own question?<br>&gt;&gt; <br>&gt;&gt; - Further reading shows that Swift&#39;s rationalized operator precedence levels broadly align with those of Erlang and Go. (However, those languages also seem to lack documentation on how they arrived at this set of precedence levels.)<br>&gt;&gt; <br>&gt;&gt; - It is quite evident why &lt;&lt; is considered exponentiative.<br>&gt;&gt; <br>&gt;&gt; - Dennis Ritchie has explained &lt;http://www.lysator.liu.se/c/dmr-on-or.html &lt;http://www.lysator.liu.se/c/dmr-on-or.html&gt;&gt; why &amp; has lower precedence than == in C, and why in hindsight that is better off changed. This change has been implemented in Swift/Go/Erlang and also in other languages like Python.<br>&gt;&gt; <br>&gt;&gt; - &amp; is considered multiplicative because for two bits A and B, A &amp; B == A * B.<br>&gt;&gt; <br>&gt;&gt; - ^ and | should have equal precedence to - and +, respectively, by analogous reasoning.<br>&gt;&gt; <br>&gt;&gt; - It also happens to be rational for &amp; to have higher precedence than | by analogy with &amp;&amp; and ||.<br>&gt; <br>&gt; Yep, this is all right.<br>&gt; <br>&gt;&gt; It&#39;s a bit of a bummer, if this line of reasoning was indeed used in arriving at these operator precedence levels, that Swift will not allow evaluation of true * true (etc.) without casting. I would expect true &amp; true == true * true.<br>&gt; <br>&gt; <br>&gt; I’m not sure what you mean here.  You want multiplication defined on booleans?<br>&gt; <br>&gt; -Chris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160215/350fe982/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/566528c7f7c28c35c0c646d415943612?s=50"></div><header><strong>Standard operator precedence</strong> from <string>Taras Zakharko</string> &lt;taras.zakharko at uzh.ch&gt;<p>February 15, 2016 at 08:00:00pm</p></header><div class="content"><p>I think the teacher should just do a better job explaining group theory ;) Its perfectly consistent to treat * and &amp; separately, because they de-facto interpret their arguments as different types. <br></p><p>— T<br></p><p>&gt; On 15 Feb 2016, at 20:17, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Yes, but not enough to claim limited resources needed for pressing matters. It&#39;s not a feature anyone would clamor for, more a product of the foolish consistency hobgoblin. Rationale: it is possible in JavaScript (for instance) to evaluate true * true, but not in Swift. [I&#39;m aware that implicit casting is taking place in JavaScript, and that the return type isn&#39;t a Boolean.] It comes into play in exactly one scenario I can think of:<br>&gt; <br>&gt; Student: &quot;Why is &amp; a multiplicative operation?&quot;<br>&gt; Teacher: &quot;Well, because for two bits A and B, A &amp; B == A * B.&quot;<br>&gt; Student: &quot;That&#39;s interesting, let me try it with the only type I know that represents a single bit of data.&quot;<br>&gt; [At this point the student should, IMO, be able to actually evaluate A * B where A and B are booleans.]<br>&gt; <br>&gt; Analogous rationale for defining &amp;+ and &amp;- on booleans.<br>&gt; <br>&gt; On Mon, Feb 15, 2016 at 12:20 PM Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt; On Feb 14, 2016, at 10:25 AM, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Some further study has been helpful. Am I close to the mark in answering my own question?<br>&gt;&gt; <br>&gt;&gt; - Further reading shows that Swift&#39;s rationalized operator precedence levels broadly align with those of Erlang and Go. (However, those languages also seem to lack documentation on how they arrived at this set of precedence levels.)<br>&gt;&gt; <br>&gt;&gt; - It is quite evident why &lt;&lt; is considered exponentiative.<br>&gt;&gt; <br>&gt;&gt; - Dennis Ritchie has explained &lt;http://www.lysator.liu.se/c/dmr-on-or.html &lt;http://www.lysator.liu.se/c/dmr-on-or.html&gt;&gt; why &amp; has lower precedence than == in C, and why in hindsight that is better off changed. This change has been implemented in Swift/Go/Erlang and also in other languages like Python.<br>&gt;&gt; <br>&gt;&gt; - &amp; is considered multiplicative because for two bits A and B, A &amp; B == A * B.<br>&gt;&gt; <br>&gt;&gt; - ^ and | should have equal precedence to - and +, respectively, by analogous reasoning.<br>&gt;&gt; <br>&gt;&gt; - It also happens to be rational for &amp; to have higher precedence than | by analogy with &amp;&amp; and ||.<br>&gt; <br>&gt; Yep, this is all right.<br>&gt; <br>&gt;&gt; It&#39;s a bit of a bummer, if this line of reasoning was indeed used in arriving at these operator precedence levels, that Swift will not allow evaluation of true * true (etc.) without casting. I would expect true &amp; true == true * true.<br>&gt; <br>&gt; <br>&gt; I’m not sure what you mean here.  You want multiplication defined on booleans?<br>&gt; <br>&gt; -Chris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160215/28d3c02c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Standard operator precedence</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>February 15, 2016 at 07:00:00pm</p></header><div class="content"><p>Yes all good points--and very interesting history from Dave. Thanks all.<br>On Mon, Feb 15, 2016 at 1:47 PM Taras Zakharko &lt;taras.zakharko at uzh.ch&gt;<br>wrote:<br></p><p>&gt; I think the teacher should just do a better job explaining group theory ;)<br>&gt; Its perfectly consistent to treat * and &amp; separately, because they de-facto<br>&gt; interpret their arguments as different types.<br>&gt;<br>&gt; — T<br>&gt;<br>&gt; On 15 Feb 2016, at 20:17, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Yes, but not enough to claim limited resources needed for pressing<br>&gt; matters. It&#39;s not a feature anyone would clamor for, more a product of the<br>&gt; foolish consistency hobgoblin. Rationale: it is possible in JavaScript (for<br>&gt; instance) to evaluate true * true, but not in Swift. [I&#39;m aware that<br>&gt; implicit casting is taking place in JavaScript, and that the return type<br>&gt; isn&#39;t a Boolean.] It comes into play in exactly one scenario I can think of:<br>&gt;<br>&gt; Student: &quot;Why is &amp; a multiplicative operation?&quot;<br>&gt; Teacher: &quot;Well, because for two bits A and B, A &amp; B == A * B.&quot;<br>&gt; Student: &quot;That&#39;s interesting, let me try it with the only type I know that<br>&gt; represents a single bit of data.&quot;<br>&gt; [At this point the student should, IMO, be able to actually evaluate A * B<br>&gt; where A and B are booleans.]<br>&gt;<br>&gt; Analogous rationale for defining &amp;+ and &amp;- on booleans.<br>&gt;<br>&gt; On Mon, Feb 15, 2016 at 12:20 PM Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;<br>&gt;&gt; On Feb 14, 2016, at 10:25 AM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Some further study has been helpful. Am I close to the mark in answering<br>&gt;&gt; my own question?<br>&gt;&gt;<br>&gt;&gt; - Further reading shows that Swift&#39;s rationalized operator precedence<br>&gt;&gt; levels broadly align with those of Erlang and Go. (However, those languages<br>&gt;&gt; also seem to lack documentation on how they arrived at this set of<br>&gt;&gt; precedence levels.)<br>&gt;&gt;<br>&gt;&gt; - It is quite evident why &lt;&lt; is considered exponentiative.<br>&gt;&gt;<br>&gt;&gt; - Dennis Ritchie has explained &lt;<br>&gt;&gt; http://www.lysator.liu.se/c/dmr-on-or.html&gt; why &amp; has lower precedence<br>&gt;&gt; than == in C, and why in hindsight that is better off changed. This change<br>&gt;&gt; has been implemented in Swift/Go/Erlang and also in other languages like<br>&gt;&gt; Python.<br>&gt;&gt;<br>&gt;&gt; - &amp; is considered multiplicative because for two bits A and B, A &amp; B == A<br>&gt;&gt; * B.<br>&gt;&gt;<br>&gt;&gt; - ^ and | should have equal precedence to - and +, respectively, by<br>&gt;&gt; analogous reasoning.<br>&gt;&gt;<br>&gt;&gt; - It also happens to be rational for &amp; to have higher precedence than |<br>&gt;&gt; by analogy with &amp;&amp; and ||.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Yep, this is all right.<br>&gt;&gt;<br>&gt;&gt; It&#39;s a bit of a bummer, if this line of reasoning was indeed used in<br>&gt;&gt; arriving at these operator precedence levels, that Swift will not allow<br>&gt;&gt; evaluation of true * true (etc.) without casting. I would expect true &amp;<br>&gt;&gt; true == true * true.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I’m not sure what you mean here.  You want multiplication defined on<br>&gt;&gt; booleans?<br>&gt;&gt;<br>&gt;&gt; -Chris<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt;<br>&gt;<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160215/3d35440d/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
