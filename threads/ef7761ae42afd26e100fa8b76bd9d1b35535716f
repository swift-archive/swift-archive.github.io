<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c6761b86fcf674411c42ea5d32bbf6e5?s=50"></div><header><strong>Implementing HTTPCookieStorage</strong> from <string>Pushkar N Kulkarni</string> &lt;pushkar.nk at in.ibm.com&gt;<p>November  7, 2016 at 07:00:00pm</p></header><div class="content"><p>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20161107/ef77716f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Implementing HTTPCookieStorage</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>November  7, 2016 at 02:00:00pm</p></header><div class="content"><p>Hi Pushkar,<br></p><p>Good question. If this were Darwin I guess I would say ~/Library/Application Support — but I don’t know what the best practices are on other platforms. Does anyone out there have some suggestions?<br></p><p>- Tony<br></p><p>&gt; On Nov 7, 2016, at 11:09 AM, Pushkar N Kulkarni via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi there, <br>&gt; <br>&gt; I have spent some time working on a basic implementation of HTTPCookieStorage. In the process, I came across two crucial questions related to cookie persistence:<br>&gt; 1. How do you persist the cookies?<br>&gt; 2. Where do you persist them?<br>&gt; <br>&gt; In my current implementation (https://github.com/apple/swift-corelibs-foundation/pull/672) &lt;https://github.com/apple/swift-corelibs-foundation/pull/672),&gt;, I write them to a hidden plist file located in the user&#39;s home directory. Would that be an acceptable approach?<br>&gt; <br>&gt; Is there anything more to consider while thinking of persistence? I&#39;d greatly appreciate suggestions/comments. <br>&gt; <br>&gt; Thanks!<br>&gt; Pushkar N Kulkarni,<br>&gt; IBM Runtimes<br>&gt; <br>&gt; Simplicity is prerequisite for reliability - Edsger W. Dijkstra<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20161107/72a78cf7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e01e37acbfad671da1b94a61cf819d82?s=50"></div><header><strong>Implementing HTTPCookieStorage</strong> from <string>Kenny Leung</string> &lt;kenny_leung at pobox.com&gt;<p>November  7, 2016 at 04:00:00pm</p></header><div class="content"><p>I’m for locating it in the same place on all platforms. In general, I’m tired of digging around in different places for stuff depending on which flavor I’m using.<br></p><p>-Kenny<br></p><p><br>&gt; On Nov 7, 2016, at 2:45 PM, Tony Parker via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Pushkar,<br>&gt; <br>&gt; Good question. If this were Darwin I guess I would say ~/Library/Application Support — but I don’t know what the best practices are on other platforms. Does anyone out there have some suggestions?<br>&gt; <br>&gt; - Tony<br>&gt; <br>&gt;&gt; On Nov 7, 2016, at 11:09 AM, Pushkar N Kulkarni via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi there, <br>&gt;&gt; <br>&gt;&gt; I have spent some time working on a basic implementation of HTTPCookieStorage. In the process, I came across two crucial questions related to cookie persistence:<br>&gt;&gt; 1. How do you persist the cookies?<br>&gt;&gt; 2. Where do you persist them?<br>&gt;&gt; <br>&gt;&gt; In my current implementation (https://github.com/apple/swift-corelibs-foundation/pull/672), I write them to a hidden plist file located in the user&#39;s home directory. Would that be an acceptable approach?<br>&gt;&gt; <br>&gt;&gt; Is there anything more to consider while thinking of persistence? I&#39;d greatly appreciate suggestions/comments. <br>&gt;&gt; <br>&gt;&gt; Thanks!<br>&gt;&gt; Pushkar N Kulkarni,<br>&gt;&gt; IBM Runtimes<br>&gt;&gt; <br>&gt;&gt; Simplicity is prerequisite for reliability - Edsger W. Dijkstra<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0ca11611f1637938f1d1db967fa4b064?s=50"></div><header><strong>Implementing HTTPCookieStorage</strong> from <string>Will Stanton</string> &lt;willstanton1 at yahoo.com&gt;<p>November  7, 2016 at 10:00:00pm</p></header><div class="content"><p>Was wondering if there could be a common directory for Foundation-related files, such as NSUserDefaults in addition to cookie storage?<br></p><p>So maybe for cookies:<br>NSHomeDirectory() + &quot;/.foundation/Cookies/shared&quot;<br></p><p>And settings for an app/service:<br>NSHomeDirectory() + &quot;/.foundation/Preferences/EXECUTABLE_NAME.plist&quot;<br></p><p><br>And I’m not familiar with how Apple Foundation/CFNetwork/nsurlsessiond handles cookies… or caches things, but I think I agree with Kenny that naming symmetry would be nice if there is a per-user cookies file.<br></p><p>So having a /Library may be nicer, but potentially unnecessary?<br>NSHomeDirectory() + &quot;/.foundation/Library/Cookies/Cookies.something&quot;<br></p><p>Regards,<br>Will Stanton<br></p><p>&gt; On Nov 7, 2016, at 5:45 PM, Tony Parker via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Pushkar,<br>&gt; <br>&gt; Good question. If this were Darwin I guess I would say ~/Library/Application Support — but I don’t know what the best practices are on other platforms. Does anyone out there have some suggestions?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c6761b86fcf674411c42ea5d32bbf6e5?s=50"></div><header><strong>Implementing HTTPCookieStorage</strong> from <string>Pushkar N Kulkarni</string> &lt;pushkar.nk at in.ibm.com&gt;<p>November 14, 2016 at 09:00:00am</p></header><div class="content"><p>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20161114/5bd72db6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Implementing HTTPCookieStorage</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>November 14, 2016 at 09:00:00am</p></header><div class="content"><p>Isn’t it a bit odd to use ‘.foundation’ as the name of the directory, when Foundation is just one of the libraries involved? On Darwin, the prefs are organized by application, not by framework.<br></p><p>- Tony<br></p><p>&gt; On Nov 14, 2016, at 1:43 AM, Pushkar N Kulkarni via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Thanks Will! <br>&gt; <br>&gt; &quot;NSHomeDirectory() + &quot;/.foundation/Cookies/shared&quot; seems good to me<br>&gt; <br>&gt; Pushkar N Kulkarni,<br>&gt; IBM Runtimes<br>&gt; <br>&gt; Simplicity is prerequisite for reliability - Edsger W. Dijkstra<br>&gt; <br>&gt; <br>&gt; <br>&gt; -----Will Stanton &lt;willstanton1 at yahoo.com &lt;mailto:willstanton1 at yahoo.com&gt;&gt; wrote: -----<br>&gt; To: Pushkar N Kulkarni/India/IBM at IBMIN<br>&gt; From: Will Stanton &lt;willstanton1 at yahoo.com &lt;mailto:willstanton1 at yahoo.com&gt;&gt;<br>&gt; Date: 11/08/2016 08:45AM<br>&gt; Cc: swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt;<br>&gt; Subject: Re: [swift-corelibs-dev] Implementing HTTPCookieStorage<br>&gt; <br>&gt; Was wondering if there could be a common directory for Foundation-related files, such as NSUserDefaults in addition to cookie storage?<br>&gt; <br>&gt; So maybe for cookies:<br>&gt; NSHomeDirectory() + &quot;/.foundation/Cookies/shared&quot;<br>&gt; <br>&gt; And settings for an app/service:<br>&gt; NSHomeDirectory() + &quot;/.foundation/Preferences/EXECUTABLE_NAME.plist&quot;<br>&gt; <br>&gt; <br>&gt; And I’m not familiar with how Apple Foundation/CFNetwork/nsurlsessiond handles cookies… or caches things, but I think I agree with Kenny that naming symmetry would be nice if there is a per-user cookies file.<br>&gt; <br>&gt; So having a /Library may be nicer, but potentially unnecessary?<br>&gt; NSHomeDirectory() + &quot;/.foundation/Library/Cookies/Cookies.something&quot;<br>&gt; <br>&gt; Regards,<br>&gt; Will Stanton<br>&gt; <br>&gt; &gt; On Nov 7, 2016, at 5:45 PM, Tony Parker via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt; &gt; <br>&gt; &gt; Hi Pushkar,<br>&gt; &gt; <br>&gt; &gt; Good question. If this were Darwin I guess I would say ~/Library/Application Support — but I don’t know what the best practices are on other platforms. Does anyone out there have some suggestions?<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20161114/2177bb11/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>Implementing HTTPCookieStorage</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>November 14, 2016 at 10:00:00am</p></header><div class="content"><p>Furthermore isn’t it a bit of a conflict if we have multiple versions of Foundation running apps on a server? I would expect that the mutable state of cookies should never be shared across processes not just from a security standpoint but also from a versioning standpoint. <br></p><p>Let have a scenario where there are two web apps running on the same server. They should never share data between them unless specifically allowed to. Service A uses Foundation version A and service B uses version B. Unless service A and B have privileges to communicate they should never use common storage for cookies or preferences. This could allow service A to inappropriately use the stored credentials of service B if they are stored in the same directory. Moreover if the version B of Foundation has some refinement to the storage version of the cookie the file may be incompatible with Foundation A’s reading schema. <br></p><p>In my opinion the directories should be unique to the services running unless they share a system based privilege system that is a common version (e.g. they are allowed to talk to each other and are not sandboxed apart).<br></p><p>Of course some of this could be side-stepped by having the services running as different users. But the versioning issue still occurs and should perhaps be something that we consider.<br></p><p><br>&gt; On Nov 14, 2016, at 9:44 AM, Tony Parker via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Isn’t it a bit odd to use ‘.foundation’ as the name of the directory, when Foundation is just one of the libraries involved? On Darwin, the prefs are organized by application, not by framework.<br>&gt; <br>&gt; - Tony<br>&gt; <br>&gt;&gt; On Nov 14, 2016, at 1:43 AM, Pushkar N Kulkarni via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Thanks Will! <br>&gt;&gt; <br>&gt;&gt; &quot;NSHomeDirectory() + &quot;/.foundation/Cookies/shared&quot; seems good to me<br>&gt;&gt; <br>&gt;&gt; Pushkar N Kulkarni,<br>&gt;&gt; IBM Runtimes<br>&gt;&gt; <br>&gt;&gt; Simplicity is prerequisite for reliability - Edsger W. Dijkstra<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -----Will Stanton &lt;willstanton1 at yahoo.com &lt;mailto:willstanton1 at yahoo.com&gt;&gt; wrote: -----<br>&gt;&gt; To: Pushkar N Kulkarni/India/IBM at IBMIN<br>&gt;&gt; From: Will Stanton &lt;willstanton1 at yahoo.com &lt;mailto:willstanton1 at yahoo.com&gt;&gt;<br>&gt;&gt; Date: 11/08/2016 08:45AM<br>&gt;&gt; Cc: swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt;<br>&gt;&gt; Subject: Re: [swift-corelibs-dev] Implementing HTTPCookieStorage<br>&gt;&gt; <br>&gt;&gt; Was wondering if there could be a common directory for Foundation-related files, such as NSUserDefaults in addition to cookie storage?<br>&gt;&gt; <br>&gt;&gt; So maybe for cookies:<br>&gt;&gt; NSHomeDirectory() + &quot;/.foundation/Cookies/shared&quot;<br>&gt;&gt; <br>&gt;&gt; And settings for an app/service:<br>&gt;&gt; NSHomeDirectory() + &quot;/.foundation/Preferences/EXECUTABLE_NAME.plist&quot;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; And I’m not familiar with how Apple Foundation/CFNetwork/nsurlsessiond handles cookies… or caches things, but I think I agree with Kenny that naming symmetry would be nice if there is a per-user cookies file.<br>&gt;&gt; <br>&gt;&gt; So having a /Library may be nicer, but potentially unnecessary?<br>&gt;&gt; NSHomeDirectory() + &quot;/.foundation/Library/Cookies/Cookies.something&quot;<br>&gt;&gt; <br>&gt;&gt; Regards,<br>&gt;&gt; Will Stanton<br>&gt;&gt; <br>&gt;&gt; &gt; On Nov 7, 2016, at 5:45 PM, Tony Parker via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; Hi Pushkar,<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; Good question. If this were Darwin I guess I would say ~/Library/Application Support — but I don’t know what the best practices are on other platforms. Does anyone out there have some suggestions?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20161114/03eefc28/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0ca11611f1637938f1d1db967fa4b064?s=50"></div><header><strong>Implementing HTTPCookieStorage</strong> from <string>Will Stanton</string> &lt;willstanton1 at yahoo.com&gt;<p>November 14, 2016 at 01:00:00pm</p></header><div class="content"><p>Hello Tony and Philippe,<br></p><p>I don’t think it would be odd for cookie/setting files to be in a folder named after Foundation (namely ~/.foundation):<br>- The files are owned by Swift/Linux Foundation in the sense Foundation writes them, and Foundation is the only one that should access them directly. Foundation should enforce security.<br>- On macOS, settings seem to be written to ~/Library/Preferences/$(BUNDLE_ID).plist, and the proposed ~/.foundation/Preferences/EXECUTABLE_NAME.plist isn’t that different.<br>‘.foundation’ is used in lieu of a library directory, and I feel this is acceptable so as not to clash with any user ~/Preferences or ~/Library directory.  I am OK with the ‘Foundation ownership’ per above.<br>And, executable name seems reasonable in lieu of bundle ID.<br></p><p>I noted something like ~/.foundation/Library/Preferences/EXECUTABLE_NAME.plist may be desirable to keep symmetry/reuse more CF code, but changing Swift CF is probably necessary anyway and better (fewer search paths to loop through, possibly less I/O).<br></p><p><br>Am interested in alternatives of course :-)<br>- But having separate folders for each app seems complicated, ex. &#39;~/.app1/Preferences’ ‘~/.app2/Preferences’ pollutes home.<br>- I don’t really mind the name of an encapsulating folder, .foundation or otherwise.<br>- Placing system configuration files in /etc is a norm, but I think I’d feel more comfortable with Swift app settings in /home/user (easier to keep track of, and I can delete the whole thing without consequences*). I’m also not writing any real low-level services in Swift… but others probably are… but they probably have their own code to write config data to /etc!<br></p><p><br>To Philippe’s points about security+future-proofing:<br>Perhaps the cookie file could be named per version of its format:<br>~/.foundation/Cookies/shared initially<br>When we have a new format:<br>~/.foundation/Cookies/shared2, shared3, etc? Or even pick a new name entirely?<br></p><p>I also think it should be up to Swift Foundation to enforce cookie security on a per-app/family basis (the latter requires changes to the package structure?).<br>Perhaps for now, it is possible to save the hash and name of the executable storing a cookie? And Foundation can load cookie storage only if the executable name and file haven’t changed? (Is that an unnecessary pain?)<br></p><p>Regards,<br>Will Stanton<br></p><p>&gt; On Nov 14, 2016, at 12:44 PM, Tony Parker &lt;anthony.parker at apple.com&gt; wrote:<br>&gt; <br>&gt; Isn’t it a bit odd to use ‘.foundation’ as the name of the directory, when Foundation is just one of the libraries involved? On Darwin, the prefs are organized by application, not by framework.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Implementing HTTPCookieStorage</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>November 14, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Nov 14, 2016, at 10:47 AM, Will Stanton &lt;willstanton1 at yahoo.com&gt; wrote:<br>&gt; <br>&gt; Hello Tony and Philippe,<br>&gt; <br>&gt; I don’t think it would be odd for cookie/setting files to be in a folder named after Foundation (namely ~/.foundation):<br>&gt; - The files are owned by Swift/Linux Foundation in the sense Foundation writes them, and Foundation is the only one that should access them directly. Foundation should enforce security.<br>&gt; - On macOS, settings seem to be written to ~/Library/Preferences/$(BUNDLE_ID).plist, and the proposed ~/.foundation/Preferences/EXECUTABLE_NAME.plist isn’t that different.<br>&gt; ‘.foundation’ is used in lieu of a library directory, and I feel this is acceptable so as not to clash with any user ~/Preferences or ~/Library directory.  I am OK with the ‘Foundation ownership’ per above.<br>&gt; And, executable name seems reasonable in lieu of bundle ID.<br>&gt; <br>&gt; I noted something like ~/.foundation/Library/Preferences/EXECUTABLE_NAME.plist may be desirable to keep symmetry/reuse more CF code, but changing Swift CF is probably necessary anyway and better (fewer search paths to loop through, possibly less I/O).<br>&gt; <br></p><p>Agreed, I don’t have any problem with baking a set of rules into CF that is specific to various platforms. That’s it’s job after all.<br></p><p>&gt; <br>&gt; Am interested in alternatives of course :-)<br>&gt; - But having separate folders for each app seems complicated, ex. &#39;~/.app1/Preferences’ ‘~/.app2/Preferences’ pollutes home.<br>&gt; - I don’t really mind the name of an encapsulating folder, .foundation or otherwise.<br>&gt; - Placing system configuration files in /etc is a norm, but I think I’d feel more comfortable with Swift app settings in /home/user (easier to keep track of, and I can delete the whole thing without consequences*). I’m also not writing any real low-level services in Swift… but others probably are… but they probably have their own code to write config data to /etc!<br>&gt; <br></p><p>Off-list, someone pointed me here:<br></p><p>https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html<br></p><p>and here:<br></p><p>http://stackoverflow.com/questions/1024114/location-of-ini-config-files-in-linux-unix<br></p><p>Noting that there seems to be a growing consensus for $HOME/.config.<br></p><p>Is this spec beginning to be used in the real world?<br></p><p>- Tony<br></p><p>&gt; <br>&gt; To Philippe’s points about security+future-proofing:<br>&gt; Perhaps the cookie file could be named per version of its format:<br>&gt; ~/.foundation/Cookies/shared initially<br>&gt; When we have a new format:<br>&gt; ~/.foundation/Cookies/shared2, shared3, etc? Or even pick a new name entirely?<br>&gt; <br>&gt; I also think it should be up to Swift Foundation to enforce cookie security on a per-app/family basis (the latter requires changes to the package structure?).<br>&gt; Perhaps for now, it is possible to save the hash and name of the executable storing a cookie? And Foundation can load cookie storage only if the executable name and file haven’t changed? (Is that an unnecessary pain?)<br>&gt; <br>&gt; Regards,<br>&gt; Will Stanton<br>&gt; <br>&gt;&gt; On Nov 14, 2016, at 12:44 PM, Tony Parker &lt;anthony.parker at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Isn’t it a bit odd to use ‘.foundation’ as the name of the directory, when Foundation is just one of the libraries involved? On Darwin, the prefs are organized by application, not by framework.<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ae0e87aebe750b91cdfc63333ff8f3e5?s=50"></div><header><strong>Implementing HTTPCookieStorage</strong> from <string>Itai Ferber</string> &lt;iferber at apple.com&gt;<p>November 14, 2016 at 12:00:00pm</p></header><div class="content"><p>From my (potentially limited) experience, I would say that yes, many tools out there do follow this spec.<br>I only have anecdotal evidence to back this up, but I think many new tools use this convention, and those that don&#39;t do not out of long-standing conventions that say otherwise (e.g. `~/.vimrc`, `~/.emacs.d`, etc.). Someone with more immediate access to a Linux box can maybe help back this up.<br></p><p>I personally like this convention, and think it&#39;s a safe option. We are highly unlikely to conflict with anything in `~/.config` or `~/.local`.<br></p><p>On 14 Nov 2016, at 11:37, Tony Parker via swift-corelibs-dev wrote:<br></p><p>&gt;<br>&gt;&gt; On Nov 14, 2016, at 10:47 AM, Will Stanton &lt;willstanton1 at yahoo.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hello Tony and Philippe,<br>&gt;&gt;<br>&gt;&gt; I don’t think it would be odd for cookie/setting files to be in a folder named after Foundation (namely ~/.foundation):<br>&gt;&gt; - The files are owned by Swift/Linux Foundation in the sense Foundation writes them, and Foundation is the only one that should access them directly. Foundation should enforce security.<br>&gt;&gt; - On macOS, settings seem to be written to ~/Library/Preferences/$(BUNDLE_ID).plist, and the proposed ~/.foundation/Preferences/EXECUTABLE_NAME.plist isn’t that different.<br>&gt;&gt; ‘.foundation’ is used in lieu of a library directory, and I feel this is acceptable so as not to clash with any user ~/Preferences or ~/Library directory.  I am OK with the ‘Foundation ownership’ per above.<br>&gt;&gt; And, executable name seems reasonable in lieu of bundle ID.<br>&gt;&gt;<br>&gt;&gt; I noted something like ~/.foundation/Library/Preferences/EXECUTABLE_NAME.plist may be desirable to keep symmetry/reuse more CF code, but changing Swift CF is probably necessary anyway and better (fewer search paths to loop through, possibly less I/O).<br>&gt;&gt;<br>&gt;<br>&gt; Agreed, I don’t have any problem with baking a set of rules into CF that is specific to various platforms. That’s it’s job after all.<br>&gt;<br>&gt;&gt;<br>&gt;&gt; Am interested in alternatives of course :-)<br>&gt;&gt; - But having separate folders for each app seems complicated, ex. &#39;~/.app1/Preferences’ ‘~/.app2/Preferences’ pollutes home.<br>&gt;&gt; - I don’t really mind the name of an encapsulating folder, .foundation or otherwise.<br>&gt;&gt; - Placing system configuration files in /etc is a norm, but I think I’d feel more comfortable with Swift app settings in /home/user (easier to keep track of, and I can delete the whole thing without consequences*). I’m also not writing any real low-level services in Swift… but others probably are… but they probably have their own code to write config data to /etc!<br>&gt;&gt;<br>&gt;<br>&gt; Off-list, someone pointed me here:<br>&gt;<br>&gt; https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html<br>&gt;<br>&gt; and here:<br>&gt;<br>&gt; http://stackoverflow.com/questions/1024114/location-of-ini-config-files-in-linux-unix<br>&gt;<br>&gt; Noting that there seems to be a growing consensus for $HOME/.config.<br>&gt;<br>&gt; Is this spec beginning to be used in the real world?<br>&gt;<br>&gt; - Tony<br>&gt;<br>&gt;&gt;<br>&gt;&gt; To Philippe’s points about security+future-proofing:<br>&gt;&gt; Perhaps the cookie file could be named per version of its format:<br>&gt;&gt; ~/.foundation/Cookies/shared initially<br>&gt;&gt; When we have a new format:<br>&gt;&gt; ~/.foundation/Cookies/shared2, shared3, etc? Or even pick a new name entirely?<br>&gt;&gt;<br>&gt;&gt; I also think it should be up to Swift Foundation to enforce cookie security on a per-app/family basis (the latter requires changes to the package structure?).<br>&gt;&gt; Perhaps for now, it is possible to save the hash and name of the executable storing a cookie? And Foundation can load cookie storage only if the executable name and file haven’t changed? (Is that an unnecessary pain?)<br>&gt;&gt;<br>&gt;&gt; Regards,<br>&gt;&gt; Will Stanton<br>&gt;&gt;<br>&gt;&gt;&gt; On Nov 14, 2016, at 12:44 PM, Tony Parker &lt;anthony.parker at apple.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Isn’t it a bit odd to use ‘.foundation’ as the name of the directory, when Foundation is just one of the libraries involved? On Darwin, the prefs are organized by application, not by framework.<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20161114/9afc916d/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: signature.asc<br>Type: application/pgp-signature<br>Size: 455 bytes<br>Desc: OpenPGP digital signature<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20161114/9afc916d/attachment.sig&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0ca11611f1637938f1d1db967fa4b064?s=50"></div><header><strong>Implementing HTTPCookieStorage</strong> from <string>Will Stanton</string> &lt;willstanton1 at yahoo.com&gt;<p>November 14, 2016 at 03:00:00pm</p></header><div class="content"><p>Hello Tony,<br></p><p>Thanks for the reply. About XDG_DATA_HOME, the variable is undefined on my desktop-less server, and I think many processes still have their own save locations.<br>Still, I can believe its used in a lot of places (https://github.com/search?q=XDG_DATA_HOME&amp;type=Code&amp;utf8=✓) and am not opposed to it!<br></p><p>Perhaps SEARCH/$EXECUTABLE_NAME/Preferences.plist would be good place and format for NSUserDefaults with SEARCH = getenv(XDG_DATA_HOME) then ~/.config?<br></p><p><br>What about the path for cookies+caches?<br></p><p>Regards,<br>Will Stanton<br></p><p>&gt; On Nov 14, 2016, at 2:37 PM, Tony Parker via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Off-list, someone pointed me here:<br>&gt; <br>&gt; https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html<br>&gt; <br>&gt; and here:<br>&gt; <br>&gt; http://stackoverflow.com/questions/1024114/location-of-ini-config-files-in-linux-unix<br>&gt; <br>&gt; Noting that there seems to be a growing consensus for $HOME/.config.<br>&gt; <br>&gt; Is this spec beginning to be used in the real world?<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
