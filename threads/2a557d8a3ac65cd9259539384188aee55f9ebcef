<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Fix or remove Swift.min and Swift.max?</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July  5, 2016 at 08:00:00am</p></header><div class="content"><p>on Sun Jul 03 2016, Haravikk &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; There was a proposal a little while ago to change Comparable to have<br>&gt; an operator producing an enum (with ordered before, same and ordered<br>&gt; after cases) which provides strict ordering requirements (unlike the<br>&gt; current comparable methods). I think this would serve as a better<br>&gt; basis for replacing Swift.min(), and was intended specifically to<br>&gt; solve the floating point problem.<br></p><p>+1<br></p><p>&gt; It doesn&#39;t look like it has a proposal though, maybe I&#39;m not searching for the right terms?<br></p><p>It&#39;s the direction I&#39;d like to pursue, but no proposal has been written.<br></p><p>&gt;&gt; On 3 Jul 2016, at 22:28, Pyry Jahkola via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; +1, and bumping this topic.<br>&gt;&gt; <br>&gt;&gt; The background — which I&#39;m sure Jens is aware of — is that IEEE-754 floating point numbers can&#39;t truly conform to Comparable. (The problematic case being that neither of `x &lt; .nan`, `x == .nan`, or `x &gt; .nan` can be `true`.)<br>&gt;&gt; <br>&gt;&gt; But given that the NaN-abolishing semantics of `fmin` is quite useful, and since we also want that Double and Float remain conforming to Comparable (albeit brokenly), could we consider fixing this issue by moving `min(_:_:)` and `max(_:_:)` into Comparable?<br>&gt;&gt; <br>&gt;&gt; The Comparable protocol would become:<br>&gt;&gt; <br>&gt;&gt;     public protocol Comparable : Equatable {<br>&gt;&gt;       func &lt; (lhs: Self, rhs: Self) -&gt; Bool<br>&gt;&gt;       func &lt;= (lhs: Self, rhs: Self) -&gt; Bool<br>&gt;&gt;       func &gt;= (lhs: Self, rhs: Self) -&gt; Bool<br>&gt;&gt;       func &gt; (lhs: Self, rhs: Self) -&gt; Bool<br>&gt;&gt;       static func minimum(lhs: Self, rhs: Self) -&gt; Self<br>&gt;&gt;       static func maximum(lhs: Self, rhs: Self) -&gt; Self<br>&gt;&gt;     }<br>&gt;&gt; <br>&gt;&gt; with default implementations added for the new static functions, and custom implementations for FloatingPoint types. The `Swift.min` and `Swift.max` functions would then forward their logic to `Comparable.minimum` and `Comparable.maximum`.<br>&gt;&gt; <br>&gt;&gt; — Pyry<br>&gt;&gt; <br>&gt;&gt;&gt; On 29 Jun 2016, Jens Persson wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi all!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Swift.min (and Swift.max) propagates nan or not depending on the order of its args:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Swift.min(1.0, .nan) // 1.0<br>&gt;&gt;&gt; Swift.min(.nan, 1.0) // nan (!)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Double.minimum(1.0, .nan) // 1.0<br>&gt;&gt;&gt; Double.minimum(.nan, 1.0) // 1.0<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; fmin(1.0, .nan) // 1.0<br>&gt;&gt;&gt; fmin(.nan, 1.0) // 1.0<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The new static minimum and maximum funcs on FloatingPoint in Swift<br>&gt;&gt;&gt; 3 shows the expected behaviour (ie the same as fmin, fmax and<br>&gt;&gt;&gt; IEEE-754), so what should happen with Swift.min and Swift.max?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Fix, remove or perhaps something else?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://bugs.swift.org/browse/SR-1011 &lt;https://bugs.swift.org/browse/SR-1011&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
