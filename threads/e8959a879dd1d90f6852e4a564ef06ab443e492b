<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>June  8, 2016 at 01:00:00am</p></header><div class="content"><p>Interesting. What if you put newlines before `where` and `while`? It’s hard to get the spacing right in a mailing list, but I tried it in Xcode and it looks really good to me (except for the compiler error it currently produces). Way better than the way I wrote it initially and the alternatives you mentioned.<br></p><p>for number in fibonacci<br>    where number % 2 == 0<br>    while number &lt; 4_000_000 { }<br></p><p>&gt; On Tue, Jun 7, 2016 at 5:11 PM, Tim Vermeulen&lt;tvermeulen at me.com(mailto:tvermeulen at me.com)&gt;wrote:<br>&gt; &gt; I’ve been thinking about this for a bit now, and I think it would make most sense to evaluate these clauses from left to right. However, cases where the order matters are very uncommon, and I would rather have the power to choose which clause is evaluated first than to have a forced default order. Either way I don’t see this as a reason not to allow combining the two clauses because IMO it can lead to some very clean code. For instance, say we want to loop through all even fibonacci numbers below 4 million(see problem #2 from project euler), we could do this:<br>&gt; &gt; <br>&gt; &gt; `for number in fibonacci where number % 2 == 0 while number&lt;4_000_000 { }`<br>&gt; This statement looks like spaghetti to me. I would not at all support extending the language to permit it. Do you really think it&#39;s more readable than going step-by-step?<br>&gt; <br>&gt; ```<br>&gt; let numbers = fibonacci.prefix { $0&lt;4_000_000 }<br>&gt; for number in numbers where number % 2 == 0 {<br>&gt; // ...<br>&gt; }<br>&gt; ```<br>&gt; <br>&gt; or just:<br>&gt; <br>&gt; ```<br>&gt; let numbers = fibonacci.prefix { $0&lt;4_000_000 }<br>&gt; let evens = numbers.filter { $0 % 2 == 0 }<br>&gt; for number in evens {<br>&gt; // ...<br>&gt; }<br>&gt; ```<br>&gt; <br>&gt; &gt; <br>&gt; &gt; I could have ordered the two clauses in any way I want. If combining the clauses weren’t allowed, I’d have to put (at least) one of them inside the block, which would be a (minor) pain.<br>&gt; &gt; <br>&gt; &gt; I don’t currently have a very strong opinion about the order of evaluation, so I might be convinced otherwise. But combining the two clauses is so powerful that I don’t think it’s worth to get rid of just because of an edge case.<br>&gt; &gt; <br>&gt; &gt; &gt;It may be workable if you can have only one or the other, but mixing and matching them as proposed above would be a world of hurt:<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;```<br>&gt; &gt; &gt;for foo in bar where condition1 while condition2 { ... }<br>&gt; &gt; &gt;```<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;If condition1 and condition2 both evaluate to true, then whether you continue or break would depend on the relative order of where and while; for generality, you would want to allow both `for...in...where...while` and `for...in...while...where`, and likely `for...in...while...where...while`, etc. There is nothing in the meaning of those words that would suggest that `while...where` behaves differently from `where...while`, etc. This is why words like &quot;break&quot; and &quot;continue&quot; are IMO far superior.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;On Tue, Jun 7, 2016 at 2:34 PM, Erica Sadun&lt;erica at ericasadun.com(mailto:erica at ericasadun.com)(mailto:erica at ericasadun.com)&gt;wrote:<br>&gt; &gt; &gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;On Jun 7, 2016, at 1:16 PM, Tim Vermeulen via swift-evolution&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)(mailto:swift-evolution at swift.org)&gt;wrote:<br>&gt; &gt; &gt;&gt;&gt;&gt;The meaning of the proposed while is not at all a pair for where, since where clauses in while loops would do the same thing as while clauses in for loops. That&#39;s crazy.<br>&gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;It sounds crazy, but it’s the nature of the while loop. A where clause in a while loop also has a different result than a where clause in a for loop.<br>&gt; &gt; &gt;&gt;<br>&gt; &gt; &gt;&gt;The where_clause appears in the for in statement<br>&gt; &gt; &gt;&gt;<br>&gt; &gt; &gt;&gt;for_in_statement : &#39;for&#39; &#39;case&#39;? pattern &#39;in&#39; expression where_clause? code_block<br>&gt; &gt; &gt;&gt;<br>&gt; &gt; &gt;&gt;It&#39;s syntactic sugar because the expression can be already be limited through functional chaining of some sort or another. At the same time, it&#39;s nice and pleasant to have `where` and I&#39;m not itching to throw it out. The same courtesy could be easily extend to `when` (because I don&#39;t really want to use the `while` keyword here, but I could easily be convinced otherwise because I don&#39;t have a strong stance either way):<br>&gt; &gt; &gt;&gt;<br>&gt; &gt; &gt;&gt;for_in_statement : &#39;for&#39; &#39;case&#39;? pattern &#39;in&#39; expression (where_clause | when_clause)? code_block<br>&gt; &gt; &gt;&gt;when_clause : &#39;when&#39; expression<br>&gt; &gt; &gt;&gt;<br>&gt; &gt; &gt;&gt;and again it could be nice and pleasant to have, although not necessary. The question comes down to how much does the language benefit by this sugar.<br>&gt; &gt; &gt;&gt;<br>&gt; &gt; &gt;&gt;I&#39;d say that in both cases, combining chaining and statements is marginallyless goodthan either using standalone chaining or statements without chaining. But as I say this, I know as a fact, I fully intend to use `sequence(_:, next:).take(while:)` with for0in statements, so I&#39;m starting from a hypocritical vantage point.<br>&gt; &gt; &gt;&gt;<br>&gt; &gt; &gt;&gt;To summarize, I&#39;m more +0.01 than I am -0.01 on this.<br>&gt; &gt; &gt;&gt;<br>&gt; &gt; &gt;&gt;-- E<br>&gt; &gt; &gt;&gt;p.s. Sorry, wux<br>&gt; &gt; &gt;&gt;<br>&gt; &gt; &gt;&gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; <br>&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4ab486d7597af4cfe0be33a762150848?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Dany St-Amant</string> &lt;dsa.mls at icloud.com&gt;<p>June  7, 2016 at 08:00:00pm</p></header><div class="content"><p>For most of of this discussion I have been for the introduction of &#39;while&#39; and against the removal of &#39;where&#39;; IMO, both help carry the intent of the code a bit better than the un-sugared version using if block (which can be mistaken for a regular condition)<br></p><p>for number in fibonacci<br>{<br> if number % 2 == 0 { continue }<br> if number &lt; 4_000_000 { break }<br> if number &lt; 10 { print(&quot;small:&quot;, number) }<br> else { print(&quot;large:&quot;, number) }<br>}<br></p><p>The issue with the &#39;where&#39; and this new &#39;while&#39; is that they may not be useable with the &#39;repeat&#39; and &#39;while&#39;-loop.<br></p><p>Thinking outside of the box, I was wondering if the &#39;where&#39;/&#39;while&#39; could be move inside the loop code itself; but without tagging a &#39;continue&#39; or &#39;break&#39; it would be too confusing, as too disconnected from the &#39;for&#39;<br></p><p>for number in fibonacci<br>{<br> where number % 2 == 0<br> while number &lt; 4_000_000<br>}<br></p><p>And not sure how one could specify the loop label as now being free-standing, they can appear anywhere. So how about &#39;when ... continue|break&#39; which is just pure sugar<br></p><p>label:<br>for number in fibonacci<br>{<br> when number % 2 == 0 continue label<br> when number &lt; 4_000_000 break label<br>}<br></p><p>Not shorter than the &#39;if&#39; variant, but I&#39;m sure a some on the list would enjoy the curly brace free syntax.<br></p><p>Dany<br></p><p>&gt; Le 7 juin 2016 à 19:26, Tim Vermeulen via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Interesting. What if you put newlines before `where` and `while`? It’s hard to get the spacing right in a mailing list, but I tried it in Xcode and it looks really good to me (except for the compiler error it currently produces). Way better than the way I wrote it initially and the alternatives you mentioned.<br>&gt; <br>&gt; for number in fibonacci<br>&gt;   where number % 2 == 0<br>&gt;   while number &lt; 4_000_000 { }<br>&gt; <br>&gt;&gt; On Tue, Jun 7, 2016 at 5:11 PM, Tim Vermeulen&lt;tvermeulen at me.com(mailto:tvermeulen at me.com)&gt;wrote:<br>&gt;&gt;&gt; I’ve been thinking about this for a bit now, and I think it would make most sense to evaluate these clauses from left to right. However, cases where the order matters are very uncommon, and I would rather have the power to choose which clause is evaluated first than to have a forced default order. Either way I don’t see this as a reason not to allow combining the two clauses because IMO it can lead to some very clean code. For instance, say we want to loop through all even fibonacci numbers below 4 million(see problem #2 from project euler), we could do this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; `for number in fibonacci where number % 2 == 0 while number&lt;4_000_000 { }`<br>&gt;&gt; This statement looks like spaghetti to me. I would not at all support extending the language to permit it. Do you really think it&#39;s more readable than going step-by-step?<br>&gt;&gt; <br>&gt;&gt; ```<br>&gt;&gt; let numbers = fibonacci.prefix { $0&lt;4_000_000 }<br>&gt;&gt; for number in numbers where number % 2 == 0 {<br>&gt;&gt; // ...<br>&gt;&gt; }<br>&gt;&gt; ```<br>&gt;&gt; <br>&gt;&gt; or just:<br>&gt;&gt; <br>&gt;&gt; ```<br>&gt;&gt; let numbers = fibonacci.prefix { $0&lt;4_000_000 }<br>&gt;&gt; let evens = numbers.filter { $0 % 2 == 0 }<br>&gt;&gt; for number in evens {<br>&gt;&gt; // ...<br>&gt;&gt; }<br>&gt;&gt; ```<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I could have ordered the two clauses in any way I want. If combining the clauses weren’t allowed, I’d have to put (at least) one of them inside the block, which would be a (minor) pain.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don’t currently have a very strong opinion about the order of evaluation, so I might be convinced otherwise. But combining the two clauses is so powerful that I don’t think it’s worth to get rid of just because of an edge case.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It may be workable if you can have only one or the other, but mixing and matching them as proposed above would be a world of hurt:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt; for foo in bar where condition1 while condition2 { ... }<br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If condition1 and condition2 both evaluate to true, then whether you continue or break would depend on the relative order of where and while; for generality, you would want to allow both `for...in...where...while` and `for...in...while...where`, and likely `for...in...while...where...while`, etc. There is nothing in the meaning of those words that would suggest that `while...where` behaves differently from `where...while`, etc. This is why words like &quot;break&quot; and &quot;continue&quot; are IMO far superior.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Tue, Jun 7, 2016 at 2:34 PM, Erica Sadun&lt;erica at ericasadun.com(mailto:erica at ericasadun.com)(mailto:erica at ericasadun.com)&gt;wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jun 7, 2016, at 1:16 PM, Tim Vermeulen via swift-evolution&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)(mailto:swift-evolution at swift.org)&gt;wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; The meaning of the proposed while is not at all a pair for where, since where clauses in while loops would do the same thing as while clauses in for loops. That&#39;s crazy.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; It sounds crazy, but it’s the nature of the while loop. A where clause in a while loop also has a different result than a where clause in a for loop.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The where_clause appears in the for in statement<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; for_in_statement : &#39;for&#39; &#39;case&#39;? pattern &#39;in&#39; expression where_clause? code_block<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; It&#39;s syntactic sugar because the expression can be already be limited through functional chaining of some sort or another. At the same time, it&#39;s nice and pleasant to have `where` and I&#39;m not itching to throw it out. The same courtesy could be easily extend to `when` (because I don&#39;t really want to use the `while` keyword here, but I could easily be convinced otherwise because I don&#39;t have a strong stance either way):<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; for_in_statement : &#39;for&#39; &#39;case&#39;? pattern &#39;in&#39; expression (where_clause | when_clause)? code_block<br>&gt;&gt;&gt;&gt;&gt; when_clause : &#39;when&#39; expression<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; and again it could be nice and pleasant to have, although not necessary. The question comes down to how much does the language benefit by this sugar.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I&#39;d say that in both cases, combining chaining and statements is marginallyless goodthan either using standalone chaining or statements without chaining. But as I say this, I know as a fact, I fully intend to use `sequence(_:, next:).take(while:)` with for0in statements, so I&#39;m starting from a hypocritical vantage point.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; To summarize, I&#39;m more +0.01 than I am -0.01 on this.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -- E<br>&gt;&gt;&gt;&gt;&gt; p.s. Sorry, wux<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June  7, 2016 at 07:00:00pm</p></header><div class="content"><p>On Tue, Jun 7, 2016 at 6:26 PM, Tim Vermeulen &lt;tvermeulen at me.com&gt; wrote:<br></p><p>&gt; Interesting. What if you put newlines before `where` and `while`? It’s<br>&gt; hard to get the spacing right in a mailing list, but I tried it in Xcode<br>&gt; and it looks really good to me (except for the compiler error it currently<br>&gt; produces). Way better than the way I wrote it initially and the<br>&gt; alternatives you mentioned.<br>&gt;<br>&gt; for number in fibonacci<br>&gt;     where number % 2 == 0<br>&gt;     while number &lt; 4_000_000 { }<br>&gt;<br></p><p>This last line here is indistinguishable from the beginning of a while<br>loop. I still think my examples above are superior, but even if you don&#39;t<br>want to operate on the sequence beforehand, we can rewrite your multiline<br>statement inside the loop in a crystal-clear way, no dollar signs or<br>anything:<br></p><p>```<br>for number in fibonacci {<br>  if number % 2 != 0 { continue }<br>  if number &gt;= 4_000_000 { break }<br>}<br>```<br></p><p>Now the behavior is written out in full. It has the following advantages:<br></p><p>1) It is spelled out exactly what happens when a condition is met. I no<br>longer have to remember whether the word that describes breaking from a<br>loop uses a place analogy (&quot;where&quot;) or a time analogy (&quot;while&quot; or &quot;when&quot;).<br></p><p>(You cannot convince me that these words are intuitive when the meaning of<br>&quot;where&quot; changes by context in today&#39;s Swift. Now, if you want to propose<br>that these be named &quot;breakif&quot; and &quot;continueif&quot; instead, then I&#39;d agree with<br>you that they&#39;re intuitive names, but then they&#39;d also be really ugly.)<br></p><p>2) It is absolutely clear which if statement gets evaluated first. Of<br>course, we can make a rule for your proposed keyword, but there&#39;s no basis<br>for assuming a priori that such a statement must be evaluated from left to<br>right without consulting the Swift-specific rulebook. Take, for example,<br>Python `foo if bar else boo`. By contrast, the if statements shown above<br>are clearly evaluated one after the other and would be evaluated in the<br>same order in every language under the sun.<br></p><p>3) I have the flexibility to do something between the first if statement<br>and the second if statement, if I want. By placing the break statement at<br>the end of my loop, I could effectively choose to have one more iteration<br>than if I placed it at the beginning of my loop. There is nothing you can<br>do to mimic that choice with your proposed while clause, unless you want to<br>also propose a `for...in...repeat { } while` syntax.<br></p><p>4) This is the perhaps the important point. A beginning programmer--not any<br>of us, presumably, but we were all beginners once--can accomplish<br>everything that he or she desires without learning this new proposed<br>syntax. Almost all texts, I believe, teach if statements before loops, and<br>teach break and continue in the same breath as the loops themselves.<br></p><p>Each new piece of syntax is a challenge, and making connections between two<br>equivalent facilities can be very, very hard. I&#39;ve witnessed truly<br>brilliant people who are starting out to code throw up their hands in<br>frustration because it feels unnecessarily cruel that they must learn<br>several synonyms for the same concept. One of them asked me recently, &quot;If I<br>can write i = i + 1, why would I ever write i += 1 or i++? There must be<br>something special about ++, surely? Does it have any other uses?&quot; He<br>concluded that he did not in fact understand assignment operators; I could<br>not convince him that he understood them perfectly adequately.<br></p><p>Adding sugar for visual elegance carries this cost to the learner, and it<br>is a real and non-trivial cost. Many beginners, I find, can accept that<br>they&#39;ll read function names that they haven&#39;t heard of; after all, they can<br>see that anyone can make a function named anything. But, a keyword or a<br>core part of the language&#39;s syntax? Please appreciate that every addition<br>there increases the learning curve for everyone.<br></p><p>Given that so many choices about how to write a loop are already available,<br>you haven&#39;t convinced me that having another one brings tangible benefit to<br>the language or to the code that I write. By contrast, I would cringe if I<br>saw something like `for number in fibonacci where number % 2 == 0 while<br>number&lt;4_000_000 { }` written on one line (and there is an understandable<br>natural tendency to want to put a single statement all in one line). IMO,<br>the Swifty way, with its emphasis on not having multiple &quot;dialects&quot; of the<br>same language, would be to *decrease* the number of ways to write the same<br>loop to one or a small number of well-considered, generally useful<br>facilities. That&#39;s why I&#39;m in favor of cutting down on sugar rather than<br>increasing it.<br></p><p><br>&gt;<br>&gt; &gt; On Tue, Jun 7, 2016 at 5:11 PM, Tim Vermeulen&lt;tvermeulen at me.com(mailto:<br>&gt; tvermeulen at me.com)&gt;wrote:<br>&gt; &gt; &gt; I’ve been thinking about this for a bit now, and I think it would make<br>&gt; most sense to evaluate these clauses from left to right. However, cases<br>&gt; where the order matters are very uncommon, and I would rather have the<br>&gt; power to choose which clause is evaluated first than to have a forced<br>&gt; default order. Either way I don’t see this as a reason not to allow<br>&gt; combining the two clauses because IMO it can lead to some very clean code.<br>&gt; For instance, say we want to loop through all even fibonacci numbers below<br>&gt; 4 million(see problem #2 from project euler), we could do this:<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; `for number in fibonacci where number % 2 == 0 while number&lt;4_000_000<br>&gt; { }`<br>&gt; &gt; This statement looks like spaghetti to me. I would not at all support<br>&gt; extending the language to permit it. Do you really think it&#39;s more readable<br>&gt; than going step-by-step?<br>&gt; &gt;<br>&gt; &gt; ```<br>&gt; &gt; let numbers = fibonacci.prefix { $0&lt;4_000_000 }<br>&gt; &gt; for number in numbers where number % 2 == 0 {<br>&gt; &gt; // ...<br>&gt; &gt; }<br>&gt; &gt; ```<br>&gt; &gt;<br>&gt; &gt; or just:<br>&gt; &gt;<br>&gt; &gt; ```<br>&gt; &gt; let numbers = fibonacci.prefix { $0&lt;4_000_000 }<br>&gt; &gt; let evens = numbers.filter { $0 % 2 == 0 }<br>&gt; &gt; for number in evens {<br>&gt; &gt; // ...<br>&gt; &gt; }<br>&gt; &gt; ```<br>&gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; I could have ordered the two clauses in any way I want. If combining<br>&gt; the clauses weren’t allowed, I’d have to put (at least) one of them inside<br>&gt; the block, which would be a (minor) pain.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; I don’t currently have a very strong opinion about the order of<br>&gt; evaluation, so I might be convinced otherwise. But combining the two<br>&gt; clauses is so powerful that I don’t think it’s worth to get rid of just<br>&gt; because of an edge case.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;It may be workable if you can have only one or the other, but mixing<br>&gt; and matching them as proposed above would be a world of hurt:<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;```<br>&gt; &gt; &gt; &gt;for foo in bar where condition1 while condition2 { ... }<br>&gt; &gt; &gt; &gt;```<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;If condition1 and condition2 both evaluate to true, then whether you<br>&gt; continue or break would depend on the relative order of where and while;<br>&gt; for generality, you would want to allow both `for...in...where...while` and<br>&gt; `for...in...while...where`, and likely `for...in...while...where...while`,<br>&gt; etc. There is nothing in the meaning of those words that would suggest that<br>&gt; `while...where` behaves differently from `where...while`, etc. This is why<br>&gt; words like &quot;break&quot; and &quot;continue&quot; are IMO far superior.<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;On Tue, Jun 7, 2016 at 2:34 PM, Erica Sadun&lt;erica at ericasadun.com<br>&gt; (mailto:erica at ericasadun.com)(mailto:erica at ericasadun.com)&gt;wrote:<br>&gt; &gt; &gt; &gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;On Jun 7, 2016, at 1:16 PM, Tim Vermeulen via swift-evolution&lt;<br>&gt; swift-evolution at swift.org(mailto:swift-evolution at swift.org)(mailto:<br>&gt; swift-evolution at swift.org)&gt;wrote:<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;The meaning of the proposed while is not at all a pair for where,<br>&gt; since where clauses in while loops would do the same thing as while clauses<br>&gt; in for loops. That&#39;s crazy.<br>&gt; &gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;It sounds crazy, but it’s the nature of the while loop. A where<br>&gt; clause in a while loop also has a different result than a where clause in a<br>&gt; for loop.<br>&gt; &gt; &gt; &gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;The where_clause appears in the for in statement<br>&gt; &gt; &gt; &gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;for_in_statement : &#39;for&#39; &#39;case&#39;? pattern &#39;in&#39; expression<br>&gt; where_clause? code_block<br>&gt; &gt; &gt; &gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;It&#39;s syntactic sugar because the expression can be already be<br>&gt; limited through functional chaining of some sort or another. At the same<br>&gt; time, it&#39;s nice and pleasant to have `where` and I&#39;m not itching to throw<br>&gt; it out. The same courtesy could be easily extend to `when` (because I don&#39;t<br>&gt; really want to use the `while` keyword here, but I could easily be<br>&gt; convinced otherwise because I don&#39;t have a strong stance either way):<br>&gt; &gt; &gt; &gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;for_in_statement : &#39;for&#39; &#39;case&#39;? pattern &#39;in&#39; expression<br>&gt; (where_clause | when_clause)? code_block<br>&gt; &gt; &gt; &gt;&gt;when_clause : &#39;when&#39; expression<br>&gt; &gt; &gt; &gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;and again it could be nice and pleasant to have, although not<br>&gt; necessary. The question comes down to how much does the language benefit by<br>&gt; this sugar.<br>&gt; &gt; &gt; &gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;I&#39;d say that in both cases, combining chaining and statements is<br>&gt; marginallyless goodthan either using standalone chaining or statements<br>&gt; without chaining. But as I say this, I know as a fact, I fully intend to<br>&gt; use `sequence(_:, next:).take(while:)` with for0in statements, so I&#39;m<br>&gt; starting from a hypocritical vantage point.<br>&gt; &gt; &gt; &gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;To summarize, I&#39;m more +0.01 than I am -0.01 on this.<br>&gt; &gt; &gt; &gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;-- E<br>&gt; &gt; &gt; &gt;&gt;p.s. Sorry, wux<br>&gt; &gt; &gt; &gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160607/b3f7721c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>June  8, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On 8 Jun 2016, at 01:54, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; 1) It is spelled out exactly what happens when a condition is met. I no longer have to remember whether the word that describes breaking from a loop uses a place analogy (&quot;where&quot;) or a time analogy (&quot;while&quot; or &quot;when”).<br>&gt; <br>&gt; (You cannot convince me that these words are intuitive when the meaning of &quot;where&quot; changes by context in today&#39;s Swift. Now, if you want to propose that these be named &quot;breakif&quot; and &quot;continueif&quot; instead, then I&#39;d agree with you that they&#39;re intuitive names, but then they&#39;d also be really ugly.)<br></p><p>I’m not sure I agree that this is confusing, a little extra to learn for new programmers perhaps but I think it’s fairly intuitive:<br></p><p>	while let value = foo.next() where someCondition(value) { … }<br></p><p>This reads to me as “repeat the following block until this fails to be true”, the conditional binding in this case fails to be true if someCondition(value) isn’t true, so the loop ends. I think the key thing here is that the where clause is for the conditional binding and not the loop itself, so in this respect it behaves exactly like an if or guard statement. Meanwhile:<br></p><p>	for eachValue in theValues where someCondition(eachValue) { … }<br></p><p>Reads as “for everything in theValues do the following if someCondition(eachValue) is also true”, in other words this loop always tries to visit every element of the sequence (a while loop has no implicit awareness of the sequence, it’s really just an if statement that runs over and over). In this case the where clause is part of the loop itself. There may be an argument that where should be renamed on for loops to better distinguish this, but once you consider that there’s no pattern or conditional binding here I think it makes a reasonable amount of sense.<br></p><p>Yes this could be handled by an if/guard statement with continue, and while as proposed here could be done with the same plus a break, but these things come up so often that it just makes a lot of sense to get it all neatly onto one line. Chaining methods can do this, but it’s actually less readable IMO, or requires multiple lines to keep it clear which defeats the point.<br></p><p>As with where on if/guard statements it’s about keeping the simpler, more common cases as clean and readable as possible. If the re-use of the keyword where on the for loop is confusing then that’s an argument for renaming that, rather than rejecting while or ditching the whole thing IMO. Personally I think it’s okay, you just have to think what the where clause is actually acting upon.<br></p><p>&gt; 3) I have the flexibility to do something between the first if statement and the second if statement, if I want. By placing the break statement at the end of my loop, I could effectively choose to have one more iteration than if I placed it at the beginning of my loop. There is nothing you can do to mimic that choice with your proposed while clause, unless you want to also propose a `for...in...repeat { } while` syntax.<br></p><p>So? Like where clauses this is for the simpler cases, if you want to do something more complex you remain free to use more complex conditionals. A lot of the time you don’t need this however, so it makes sense to simplify the common case while leaving the complex one just as useful as it is today. Nothing about this proposal would stop you from using if/guard conditions inside the loop.<br></p><p>&gt; 4) This is the perhaps the important point. A beginning programmer--not any of us, presumably, but we were all beginners once--can accomplish everything that he or she desires without learning this new proposed syntax. Almost all texts, I believe, teach if statements before loops, and teach break and continue in the same breath as the loops themselves.<br></p><p>In terms of teaching there shouldn’t be a problem with just teaching the basic building blocks first, then showing off simplifications later. As with any coding the most important thing is to get the intended behaviour correct, simplifying or optimising the code can always come later.<br></p><p>You could argue the same thing about the shorthands around closures; I’m not sure why but I had trouble with those initially until after I’d worked with them in the more verbose form (with fully named parameters and a return statement) till I started to get the logic behind it, now I can just right a quick closure with the dollar sign shorthand.<br></p><p>A good linter could be written to detect the presence of a simple if/guard right inside the loop and could then suggest the use of where/while as appropriate.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160608/1588d9c8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June  8, 2016 at 11:00:00am</p></header><div class="content"><p>On Wed, Jun 8, 2016 at 3:38 AM, Haravikk &lt;swift-evolution at haravikk.me&gt;<br>wrote:<br></p><p>&gt;<br>&gt; On 8 Jun 2016, at 01:54, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; 1) It is spelled out exactly what happens when a condition is met. I no<br>&gt; longer have to remember whether the word that describes breaking from a<br>&gt; loop uses a place analogy (&quot;where&quot;) or a time analogy (&quot;while&quot; or &quot;when”).<br>&gt;<br>&gt;<br>&gt; (You cannot convince me that these words are intuitive when the meaning of<br>&gt; &quot;where&quot; changes by context in today&#39;s Swift. Now, if you want to propose<br>&gt; that these be named &quot;breakif&quot; and &quot;continueif&quot; instead, then I&#39;d agree with<br>&gt; you that they&#39;re intuitive names, but then they&#39;d also be really ugly.)<br>&gt;<br>&gt;<br>&gt; I’m not sure I agree that this is confusing,<br>&gt;<br></p><p>Why would breaking from a loop intuitively use a place analogy and<br>continuing to the next iteration use a time analogy? This is totally made<br>up; hence, it is not intuitive. I make no argument about whether or not it<br>would be conceptually confusing. If you renamed &#39;break&#39; to &#39;foo&#39; and<br>&#39;continue&#39; to &#39;bar&#39;, it would not be intuitive, but you could likewise<br>argue that it&#39;s not confusing, in that &#39;foo&#39; is clearly not &#39;bar&#39;.<br></p><p><br>&gt; a little extra to learn for new programmers perhaps but I think it’s<br>&gt; fairly intuitive:<br>&gt;<br>&gt; while let value = foo.next() where someCondition(value) { … }<br>&gt;<br>&gt; This reads to me as “repeat the following block until this fails to be<br>&gt; true”, the conditional binding in this case fails to be true if<br>&gt; someCondition(value) isn’t true, so the loop ends. I think the key thing<br>&gt; here is that the where clause is for the conditional binding and not the<br>&gt; loop itself, so in this respect it behaves exactly like an if or guard<br>&gt; statement. Meanwhile:<br>&gt;<br>&gt; for eachValue in theValues where someCondition(eachValue) { … }<br>&gt;<br>&gt; Reads as “for everything in theValues do the following if<br>&gt; someCondition(eachValue) is also true”, in other words this loop always<br>&gt; tries to visit every element of the sequence (a while loop has no implicit<br>&gt; awareness of the sequence, it’s really just an if statement that runs over<br>&gt; and over). In this case the where clause is part of the loop itself. There<br>&gt; may be an argument that where should be renamed on for loops to better<br>&gt; distinguish this, but once you consider that there’s no pattern or<br>&gt; conditional binding here I think it makes a reasonable amount of sense.<br>&gt;<br>&gt; Yes this could be handled by an if/guard statement with continue, and<br>&gt; while as proposed here could be done with the same plus a break, but these<br>&gt; things come up so often that it just makes a lot of sense to get it all<br>&gt; neatly onto one line.<br>&gt;<br></p><p>As I pointed out above with Tim&#39;s example, putting it all on one line is<br>absolutely not &#39;neat&#39;--it reads like spaghetti. That is one major beef I<br>have with this proposal: that it *encourages* writing on one line too many<br>things that, whether you use `where` or not, are much more clearly written<br>on multiple lines. If writing everything on one line is for you the major<br>advantage of this proposal, we could agree on everything else and I would<br>be very much opposed to this proposal on that basis alone.<br></p><p><br>&gt; Chaining methods can do this, but it’s actually less readable IMO, or<br>&gt; requires multiple lines to keep it clear which defeats the point.<br>&gt;<br></p><p>For me, encouraging the use of multiple lines is the point. Tim&#39;s example<br>demonstrated to me very clearly that clarity is not served by additional<br>sugar to reduce the amount of punctuation on one line; it is served only by<br>putting things on multiple lines. As I said above, I would cringe to read a<br>loop that begins `for foo in bar where something while somethingElse where<br>yetAnotherSomething while againAnotherSomething { ... }`.<br></p><p><br>&gt; As with where on if/guard statements it’s about keeping the simpler, more<br>&gt; common cases as clean and readable as possible. If the re-use of the<br>&gt; keyword where on the for loop is confusing then that’s an argument for<br>&gt; renaming that, rather than rejecting while or ditching the whole thing IMO.<br>&gt; Personally I think it’s okay, you just have to think what the where clause<br>&gt; is actually acting upon.<br>&gt;<br>&gt; 3) I have the flexibility to do something between the first if statement<br>&gt; and the second if statement, if I want. By placing the break statement at<br>&gt; the end of my loop, I could effectively choose to have one more iteration<br>&gt; than if I placed it at the beginning of my loop. There is nothing you can<br>&gt; do to mimic that choice with your proposed while clause, unless you want to<br>&gt; also propose a `for...in...repeat { } while` syntax.<br>&gt;<br>&gt;<br>&gt; So? Like where clauses this is for the simpler cases, if you want to do<br>&gt; something more complex you remain free to use more complex conditionals.<br>&gt;<br></p><p>And I was/am a proponent of SE-0099 to remove `where` from if and while<br>loops; and if that succeeds I will definitely solicit comments to remove it<br>from for loops!<br></p><p><br>&gt; A lot of the time you don’t need this however, so it makes sense to<br>&gt; simplify the common case while leaving the complex one just as useful as it<br>&gt; is today. Nothing about this proposal would stop you from using if/guard<br>&gt; conditions inside the loop.<br>&gt;<br>&gt; 4) This is the perhaps the important point. A beginning programmer--not<br>&gt; any of us, presumably, but we were all beginners once--can accomplish<br>&gt; everything that he or she desires without learning this new proposed<br>&gt; syntax. Almost all texts, I believe, teach if statements before loops, and<br>&gt; teach break and continue in the same breath as the loops themselves.<br>&gt;<br>&gt;<br>&gt; In terms of teaching there shouldn’t be a problem with just teaching the<br>&gt; basic building blocks first, then showing off simplifications later. As<br>&gt; with any coding the most important thing is to get the intended behaviour<br>&gt; correct, simplifying or optimising the code can always come later.<br>&gt;<br>&gt; You could argue the same thing about the shorthands around closures; I’m<br>&gt; not sure why but I had trouble with those initially until after I’d worked<br>&gt; with them in the more verbose form (with fully named parameters and a<br>&gt; return statement) till I started to get the logic behind it, now I can just<br>&gt; right a quick closure with the dollar sign shorthand.<br>&gt;<br></p><p>Closures are--I&#39;m sure you&#39;d agree--a far more advanced concept than loops.<br>Concepts like closing over a variable are very, very hard. Many useful<br>things can be written without using closures. Not so many things could do<br>without loops. It very much matters that a learner might feel that he or<br>she cannot understand everything about a loop with the handwavy explanation<br>that it&#39;ll &quot;come later&quot;. One critique of using Java as a starting language<br>is that you are forced to teach your students on day one that the real<br>meaning of the words &quot;public static void main(String[] args)&quot; will &quot;come<br>later&quot;.<br></p><p><br>&gt;<br>&gt; A good linter could be written to detect the presence of a simple if/guard<br>&gt; right inside the loop and could then suggest the use of where/while as<br>&gt; appropriate.<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160608/40e136f6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>June  8, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On 8 Jun 2016, at 17:11, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt; On Wed, Jun 8, 2016 at 3:38 AM, Haravikk &lt;swift-evolution at haravikk.me &lt;mailto:swift-evolution at haravikk.me&gt;&gt; wrote:<br>&gt;&gt; Yes this could be handled by an if/guard statement with continue, and while as proposed here could be done with the same plus a break, but these things come up so often that it just makes a lot of sense to get it all neatly onto one line.<br>&gt; <br>&gt; As I pointed out above with Tim&#39;s example, putting it all on one line is absolutely not &#39;neat&#39;--it reads like spaghetti. That is one major beef I have with this proposal: that it *encourages* writing on one line too many things that, whether you use `where` or not, are much more clearly written on multiple lines. If writing everything on one line is for you the major advantage of this proposal, we could agree on everything else and I would be very much opposed to this proposal on that basis alone.<br></p><p>I’m not proposing that every single loop have all of its conditions crushed onto one line, just like I wasn’t when discussing where on the condition clause thread. The usefulness of where and the proposed while is in the common, simple cases, for example:<br></p><p>	for eachValue in theValues while eachValue &lt; 100 where eachValue % 2 == 0 { … }<br></p><p>The alternatives would be:<br></p><p>	for eachValue in theValues {<br>		guard eachValue &lt; 100 else { break }<br>		guard eachValue % 2 == 0 else { continue }<br>		…<br>	}<br>	for eachValue in theValues.prefix(while: { $0 &lt; 100 }).filter({ $0 % 2 == 0 }) { … } // Could also be on multiple lines<br></p><p>The former wastes vertical space for what it does IMO; it’s fine if the conditions were more complicated, but since they’re not where/while is ideal. The second isn’t terrible, but it’s a pretty noisy way to handle common loop conditions.<br></p><p>The use of where/while isn’t about eliminating either of these alternatives, they’re absolutely useful in cases where their drawbacks become advantages. For example the inline guards are great when the conditions are more complex, and necessary if you want to do more than the simple cases allow. The second form is best when you need more than the two methods, alternate methods, or you have predicates you can pass in directly, although personally when I do this I tend to do the chinning on its own lines outside of the loop, leaving me with a loop of: for eachValue in theFilteredValues { … } or whatever.<br></p><p>&gt; Closures are--I&#39;m sure you&#39;d agree--a far more advanced concept than loops. Concepts like closing over a variable are very, very hard. Many useful things can be written without using closures. Not so many things could do without loops. It very much matters that a learner might feel that he or she cannot understand everything about a loop with the handwavy explanation that it&#39;ll &quot;come later”.<br></p><p>Not my point at all; my point was about the shorthand for closures not closure as a whole, you can’t learn the closure shorthands without first learning what a closure is. In exactly the same way where/while are just be shorthands for inline if/guard, you don’t need to learn about these clauses to make a functioning loop if you know how to do it with your if/guard statements. In fact it’s better to learn it in this order as once you know what each clause is a shorthand form of (if/guard continue or break) then you know exactly what it does already.<br></p><p><br>Ignoring for a moment that you’re opposed to the where clause in general, what would your thoughts be on only permitting one of where/while in a for? i.e- you would be able to do only one of:<br></p><p>	for eachValue in theValues where eachValue % 2 == 0 { … }<br>	for eachValue in theValues while eachValue &lt; 100 { … }<br></p><p>But not have both a where and a while on the same line. This eliminates the question mark around the order they are applied in, while still giving us the ability to essentially switch the behaviour of the where from continue to break. I’m not decided whether I want both in a single statement or if I just want to be able to choose between them. It also limits how much goes on one line as you have to use an inline condition to achieve both for a single loop.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160608/06d5447a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>June  8, 2016 at 04:00:00pm</p></header><div class="content"><p>There might be value in entertaining the idea of unifying constructs such that they all allow arbitrary combinations of for/while/where/etc.<br></p><p>Such as:<br></p><p>while !stopped for unit in workToDo where unit.passesTest(condition) { unit.process() }<br></p><p>Which would mean something different than:<br></p><p>for unit in workToDo while !stopped where unit.passesTest(condition) { unit.process() }<br></p><p>And yes, they are very similar visually but differ subtly in meaning, but the same can be said about different sentences in english that might all share the same words and differ only by their order. It’s not exactly a foreign concept! I don’t know of any languages that are quite so expressive as that might be. Are there advantages to something more outlandish like this? I don’t know. I’m not proposing it directly, just thinking out loud, I guess.<br></p><p>l8r<br>Sean<br></p><p><br>&gt; On Jun 8, 2016, at 4:44 PM, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 8 Jun 2016, at 17:11, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt; On Wed, Jun 8, 2016 at 3:38 AM, Haravikk &lt;swift-evolution at haravikk.me&gt; wrote:<br>&gt;&gt;&gt; Yes this could be handled by an if/guard statement with continue, and while as proposed here could be done with the same plus a break, but these things come up so often that it just makes a lot of sense to get it all neatly onto one line.<br>&gt;&gt; <br>&gt;&gt; As I pointed out above with Tim&#39;s example, putting it all on one line is absolutely not &#39;neat&#39;--it reads like spaghetti. That is one major beef I have with this proposal: that it *encourages* writing on one line too many things that, whether you use `where` or not, are much more clearly written on multiple lines. If writing everything on one line is for you the major advantage of this proposal, we could agree on everything else and I would be very much opposed to this proposal on that basis alone.<br>&gt; <br>&gt; I’m not proposing that every single loop have all of its conditions crushed onto one line, just like I wasn’t when discussing where on the condition clause thread. The usefulness of where and the proposed while is in the common, simple cases, for example:<br>&gt; <br>&gt; 	for eachValue in theValues while eachValue &lt; 100 where eachValue % 2 == 0 { … }<br>&gt; <br>&gt; The alternatives would be:<br>&gt; <br>&gt; 	for eachValue in theValues {<br>&gt; 		guard eachValue &lt; 100 else { break }<br>&gt; 		guard eachValue % 2 == 0 else { continue }<br>&gt; 		…<br>&gt; 	}<br>&gt; 	for eachValue in theValues.prefix(while: { $0 &lt; 100 }).filter({ $0 % 2 == 0 }) { … } // Could also be on multiple lines<br>&gt; <br>&gt; The former wastes vertical space for what it does IMO; it’s fine if the conditions were more complicated, but since they’re not where/while is ideal. The second isn’t terrible, but it’s a pretty noisy way to handle common loop conditions.<br>&gt; <br>&gt; The use of where/while isn’t about eliminating either of these alternatives, they’re absolutely useful in cases where their drawbacks become advantages. For example the inline guards are great when the conditions are more complex, and necessary if you want to do more than the simple cases allow. The second form is best when you need more than the two methods, alternate methods, or you have predicates you can pass in directly, although personally when I do this I tend to do the chinning on its own lines outside of the loop, leaving me with a loop of: for eachValue in theFilteredValues { … } or whatever.<br>&gt; <br>&gt;&gt; Closures are--I&#39;m sure you&#39;d agree--a far more advanced concept than loops. Concepts like closing over a variable are very, very hard. Many useful things can be written without using closures. Not so many things could do without loops. It very much matters that a learner might feel that he or she cannot understand everything about a loop with the handwavy explanation that it&#39;ll &quot;come later”.<br>&gt; <br>&gt; Not my point at all; my point was about the shorthand for closures not closure as a whole, you can’t learn the closure shorthands without first learning what a closure is. In exactly the same way where/while are just be shorthands for inline if/guard, you don’t need to learn about these clauses to make a functioning loop if you know how to do it with your if/guard statements. In fact it’s better to learn it in this order as once you know what each clause is a shorthand form of (if/guard continue or break) then you know exactly what it does already.<br>&gt; <br>&gt; <br>&gt; Ignoring for a moment that you’re opposed to the where clause in general, what would your thoughts be on only permitting one of where/while in a for? i.e- you would be able to do only one of:<br>&gt; <br>&gt; 	for eachValue in theValues where eachValue % 2 == 0 { … }<br>&gt; 	for eachValue in theValues while eachValue &lt; 100 { … }<br>&gt; <br>&gt; But not have both a where and a while on the same line. This eliminates the question mark around the order they are applied in, while still giving us the ability to essentially switch the behaviour of the where from continue to break. I’m not decided whether I want both in a single statement or if I just want to be able to choose between them. It also limits how much goes on one line as you have to use an inline condition to achieve both for a single loop.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June  8, 2016 at 06:00:00pm</p></header><div class="content"><p>On Wed, Jun 8, 2016 at 4:44 PM, Haravikk &lt;swift-evolution at haravikk.me&gt;<br>wrote:<br></p><p>&gt;<br>&gt; On 8 Jun 2016, at 17:11, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt; On Wed, Jun 8, 2016 at 3:38 AM, Haravikk &lt;swift-evolution at haravikk.me&gt;<br>&gt; wrote:<br>&gt;<br>&gt; Yes this could be handled by an if/guard statement with continue, and<br>&gt;&gt; while as proposed here could be done with the same plus a break, but these<br>&gt;&gt; things come up so often that it just makes a lot of sense to get it all<br>&gt;&gt; neatly onto one line.<br>&gt;&gt;<br>&gt;<br>&gt; As I pointed out above with Tim&#39;s example, putting it all on one line is<br>&gt; absolutely not &#39;neat&#39;--it reads like spaghetti. That is one major beef I<br>&gt; have with this proposal: that it *encourages* writing on one line too many<br>&gt; things that, whether you use `where` or not, are much more clearly written<br>&gt; on multiple lines. If writing everything on one line is for you the major<br>&gt; advantage of this proposal, we could agree on everything else and I would<br>&gt; be very much opposed to this proposal on that basis alone.<br>&gt;<br>&gt;<br>&gt; I’m not proposing that every single loop have all of its conditions<br>&gt; crushed onto one line, just like I wasn’t when discussing where on the<br>&gt; condition clause thread. The usefulness of where and the proposed while is<br>&gt; in the common, simple cases, for example:<br>&gt;<br>&gt; for eachValue in theValues while eachValue &lt; 100 where eachValue % 2 == 0<br>&gt; { … }<br>&gt;<br>&gt; The alternatives would be:<br>&gt;<br>&gt; for eachValue in theValues {<br>&gt; guard eachValue &lt; 100 else { break }<br>&gt; guard eachValue % 2 == 0 else { continue }<br>&gt; …<br>&gt; }<br>&gt; for eachValue in theValues.prefix(while: { $0 &lt; 100 }).filter({ $0 % 2 ==<br>&gt; 0 }) { … } // Could also be on multiple lines<br>&gt;<br>&gt; The former wastes vertical space for what it does IMO; it’s fine if the<br>&gt; conditions were more complicated, but since they’re not where/while is<br>&gt; ideal. The second isn’t terrible, but it’s a pretty noisy way to handle<br>&gt; common loop conditions.<br>&gt;<br></p><p>We&#39;ve rehashed this a few times. The version with guard statements is what<br>I argue is the ideal. Perhaps you can prove me wrong, but I have never<br>heard anyone enunciate a principle regarding conservation of vertical<br>space. Line length, however, there&#39;s been tomes written about that.<br></p><p>The last version is unreadable to me, because it&#39;s too long; the first<br>version with your proposed syntax suffers the same defect, but has fewer<br>punctuation marks.<br></p><p><br>&gt;<br>&gt; The use of where/while isn’t about eliminating either of these<br>&gt; alternatives, they’re absolutely useful in cases where their drawbacks<br>&gt; become advantages. For example the inline guards are great when the<br>&gt; conditions are more complex, and necessary if you want to do more than the<br>&gt; simple cases allow. The second form is best when you need more than the two<br>&gt; methods, alternate methods, or you have predicates you can pass in<br>&gt; directly, although personally when I do this I tend to do the chinning on<br>&gt; its own lines outside of the loop, leaving me with a loop of: for eachValue<br>&gt; in theFilteredValues { … } or whatever.<br>&gt;<br></p><p>Yes, that&#39;s a good option as well IMO.<br></p><p><br>&gt;<br>&gt; Closures are--I&#39;m sure you&#39;d agree--a far more advanced concept than<br>&gt; loops. Concepts like closing over a variable are very, very hard. Many<br>&gt; useful things can be written without using closures. Not so many things<br>&gt; could do without loops. It very much matters that a learner might feel that<br>&gt; he or she cannot understand everything about a loop with the handwavy<br>&gt; explanation that it&#39;ll &quot;come later”.<br>&gt;<br>&gt;<br>&gt; Not my point at all; my point was about the shorthand for closures not<br>&gt; closure as a whole, you can’t learn the closure shorthands without first<br>&gt; learning what a closure is.<br>&gt;<br></p><p>Neither here nor there, but what you call a &quot;closure shorthand&quot; is a<br>shorthand for functions in general; you can absolutely write something in<br>that shorthand that doesn&#39;t close over anything in the outer scope (making<br>it, by definition, not a closure). And it is definitely possible, with<br>trailing closure syntax, to write a closure without learning what it is.<br>Consider, for example, the future `queue.async { ... }`.<br></p><p><br>&gt; In exactly the same way where/while are just be shorthands for inline<br>&gt; if/guard, you don’t need to learn about these clauses to make a functioning<br>&gt; loop if you know how to do it with your if/guard statements. In fact it’s<br>&gt; better to learn it in this order as once you know what each clause is a<br>&gt; shorthand form of (if/guard continue or break) then you know exactly what<br>&gt; it does already.<br>&gt;<br></p><p>Learning to code involves not just learning what you&#39;ll use but also<br>understanding other people&#39;s code when you read it. As I mentioned above, I<br>have seen a student helpless with frustration because he could not<br>understand what the ++ operator does (in his case, in Java). More<br>accurately, he understood the fact that it&#39;s a shorthand and what it&#39;s a<br>shorthand for, but he could not see a rationale for its existence and<br>concluded that he must be misunderstanding some major concept regarding<br>operators in general. It was a huge stumbling block, not because he was<br>incapable of learning this syntax but because the syntax seemed<br>unnecessarily redundant and illogical. &quot;There must be something else going<br>on,&quot; he insisted over and over.<br></p><p><br>&gt; Ignoring for a moment that you’re opposed to the where clause in general,<br>&gt; what would your thoughts be on only permitting one of where/while in a for?<br>&gt; i.e- you would be able to do only one of:<br>&gt;<br>&gt; for eachValue in theValues where eachValue % 2 == 0 { … }<br>&gt; for eachValue in theValues while eachValue &lt; 100 { … }<br>&gt;<br>&gt; But not have both a where and a while on the same line. This eliminates<br>&gt; the question mark around the order they are applied in, while still giving<br>&gt; us the ability to essentially switch the behaviour of the where from<br>&gt; continue to break. I’m not decided whether I want both in a single<br>&gt; statement or if I just want to be able to choose between them. It also<br>&gt; limits how much goes on one line as you have to use an inline condition to<br>&gt; achieve both for a single loop.<br>&gt;<br></p><p>I could live with that, although maybe I would want to explore different<br>words, as they do look very similar visually. I think this will also<br>depend, as Erica says, on the outcome of SE-0099.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160608/e69767e6/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>June  9, 2016 at 12:00:00am</p></header><div class="content"><p>I support your position on the use of where and while/when being confusing<br>in the loop statement. I (and I know others) have for example used where in<br>a loop statement mistakenly thinking it would terminate the loop early but<br>of course learned that it basically filters what causes the loop body to be<br>executed. After the fact that made sense to me but it didn&#39;t click at first.<br></p><p>If you separate the loop statement (what you are looping over) from the<br>filter (continue) conditions and/or termination conditions (break, guard) I<br>also feel it can be clearer to eyeball quickly. Additionally it lends<br>itself to being debugged in a line based debugger.<br></p><p>-Shawn<br></p><p>On Wed, Jun 8, 2016 at 9:11 AM Xiaodi Wu via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Wed, Jun 8, 2016 at 3:38 AM, Haravikk &lt;swift-evolution at haravikk.me&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On 8 Jun 2016, at 01:54, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; 1) It is spelled out exactly what happens when a condition is met. I no<br>&gt;&gt; longer have to remember whether the word that describes breaking from a<br>&gt;&gt; loop uses a place analogy (&quot;where&quot;) or a time analogy (&quot;while&quot; or &quot;when”).<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; (You cannot convince me that these words are intuitive when the meaning<br>&gt;&gt; of &quot;where&quot; changes by context in today&#39;s Swift. Now, if you want to propose<br>&gt;&gt; that these be named &quot;breakif&quot; and &quot;continueif&quot; instead, then I&#39;d agree with<br>&gt;&gt; you that they&#39;re intuitive names, but then they&#39;d also be really ugly.)<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I’m not sure I agree that this is confusing,<br>&gt;&gt;<br>&gt;<br>&gt; Why would breaking from a loop intuitively use a place analogy and<br>&gt; continuing to the next iteration use a time analogy? This is totally made<br>&gt; up; hence, it is not intuitive. I make no argument about whether or not it<br>&gt; would be conceptually confusing. If you renamed &#39;break&#39; to &#39;foo&#39; and<br>&gt; &#39;continue&#39; to &#39;bar&#39;, it would not be intuitive, but you could likewise<br>&gt; argue that it&#39;s not confusing, in that &#39;foo&#39; is clearly not &#39;bar&#39;.<br>&gt;<br>&gt;<br>&gt;&gt; a little extra to learn for new programmers perhaps but I think it’s<br>&gt;&gt; fairly intuitive:<br>&gt;&gt;<br>&gt;&gt; while let value = foo.next() where someCondition(value) { … }<br>&gt;&gt;<br>&gt;&gt; This reads to me as “repeat the following block until this fails to be<br>&gt;&gt; true”, the conditional binding in this case fails to be true if<br>&gt;&gt; someCondition(value) isn’t true, so the loop ends. I think the key thing<br>&gt;&gt; here is that the where clause is for the conditional binding and not the<br>&gt;&gt; loop itself, so in this respect it behaves exactly like an if or guard<br>&gt;&gt; statement. Meanwhile:<br>&gt;&gt;<br>&gt;&gt; for eachValue in theValues where someCondition(eachValue) { … }<br>&gt;&gt;<br>&gt;&gt; Reads as “for everything in theValues do the following if<br>&gt;&gt; someCondition(eachValue) is also true”, in other words this loop always<br>&gt;&gt; tries to visit every element of the sequence (a while loop has no implicit<br>&gt;&gt; awareness of the sequence, it’s really just an if statement that runs over<br>&gt;&gt; and over). In this case the where clause is part of the loop itself. There<br>&gt;&gt; may be an argument that where should be renamed on for loops to better<br>&gt;&gt; distinguish this, but once you consider that there’s no pattern or<br>&gt;&gt; conditional binding here I think it makes a reasonable amount of sense.<br>&gt;&gt;<br>&gt;&gt; Yes this could be handled by an if/guard statement with continue, and<br>&gt;&gt; while as proposed here could be done with the same plus a break, but these<br>&gt;&gt; things come up so often that it just makes a lot of sense to get it all<br>&gt;&gt; neatly onto one line.<br>&gt;&gt;<br>&gt;<br>&gt; As I pointed out above with Tim&#39;s example, putting it all on one line is<br>&gt; absolutely not &#39;neat&#39;--it reads like spaghetti. That is one major beef I<br>&gt; have with this proposal: that it *encourages* writing on one line too many<br>&gt; things that, whether you use `where` or not, are much more clearly written<br>&gt; on multiple lines. If writing everything on one line is for you the major<br>&gt; advantage of this proposal, we could agree on everything else and I would<br>&gt; be very much opposed to this proposal on that basis alone.<br>&gt;<br>&gt;<br>&gt;&gt; Chaining methods can do this, but it’s actually less readable IMO, or<br>&gt;&gt; requires multiple lines to keep it clear which defeats the point.<br>&gt;&gt;<br>&gt;<br>&gt; For me, encouraging the use of multiple lines is the point. Tim&#39;s example<br>&gt; demonstrated to me very clearly that clarity is not served by additional<br>&gt; sugar to reduce the amount of punctuation on one line; it is served only by<br>&gt; putting things on multiple lines. As I said above, I would cringe to read a<br>&gt; loop that begins `for foo in bar where something while somethingElse where<br>&gt; yetAnotherSomething while againAnotherSomething { ... }`.<br>&gt;<br>&gt;<br>&gt;&gt; As with where on if/guard statements it’s about keeping the simpler, more<br>&gt;&gt; common cases as clean and readable as possible. If the re-use of the<br>&gt;&gt; keyword where on the for loop is confusing then that’s an argument for<br>&gt;&gt; renaming that, rather than rejecting while or ditching the whole thing IMO.<br>&gt;&gt; Personally I think it’s okay, you just have to think what the where clause<br>&gt;&gt; is actually acting upon.<br>&gt;&gt;<br>&gt;&gt; 3) I have the flexibility to do something between the first if statement<br>&gt;&gt; and the second if statement, if I want. By placing the break statement at<br>&gt;&gt; the end of my loop, I could effectively choose to have one more iteration<br>&gt;&gt; than if I placed it at the beginning of my loop. There is nothing you can<br>&gt;&gt; do to mimic that choice with your proposed while clause, unless you want to<br>&gt;&gt; also propose a `for...in...repeat { } while` syntax.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; So? Like where clauses this is for the simpler cases, if you want to do<br>&gt;&gt; something more complex you remain free to use more complex conditionals.<br>&gt;&gt;<br>&gt;<br>&gt; And I was/am a proponent of SE-0099 to remove `where` from if and while<br>&gt; loops; and if that succeeds I will definitely solicit comments to remove it<br>&gt; from for loops!<br>&gt;<br>&gt;<br>&gt;&gt; A lot of the time you don’t need this however, so it makes sense to<br>&gt;&gt; simplify the common case while leaving the complex one just as useful as it<br>&gt;&gt; is today. Nothing about this proposal would stop you from using if/guard<br>&gt;&gt; conditions inside the loop.<br>&gt;&gt;<br>&gt;&gt; 4) This is the perhaps the important point. A beginning programmer--not<br>&gt;&gt; any of us, presumably, but we were all beginners once--can accomplish<br>&gt;&gt; everything that he or she desires without learning this new proposed<br>&gt;&gt; syntax. Almost all texts, I believe, teach if statements before loops, and<br>&gt;&gt; teach break and continue in the same breath as the loops themselves.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; In terms of teaching there shouldn’t be a problem with just teaching the<br>&gt;&gt; basic building blocks first, then showing off simplifications later. As<br>&gt;&gt; with any coding the most important thing is to get the intended behaviour<br>&gt;&gt; correct, simplifying or optimising the code can always come later.<br>&gt;&gt;<br>&gt;&gt; You could argue the same thing about the shorthands around closures; I’m<br>&gt;&gt; not sure why but I had trouble with those initially until after I’d worked<br>&gt;&gt; with them in the more verbose form (with fully named parameters and a<br>&gt;&gt; return statement) till I started to get the logic behind it, now I can just<br>&gt;&gt; right a quick closure with the dollar sign shorthand.<br>&gt;&gt;<br>&gt;<br>&gt; Closures are--I&#39;m sure you&#39;d agree--a far more advanced concept than<br>&gt; loops. Concepts like closing over a variable are very, very hard. Many<br>&gt; useful things can be written without using closures. Not so many things<br>&gt; could do without loops. It very much matters that a learner might feel that<br>&gt; he or she cannot understand everything about a loop with the handwavy<br>&gt; explanation that it&#39;ll &quot;come later&quot;. One critique of using Java as a<br>&gt; starting language is that you are forced to teach your students on day one<br>&gt; that the real meaning of the words &quot;public static void main(String[] args)&quot;<br>&gt; will &quot;come later&quot;.<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt; A good linter could be written to detect the presence of a simple<br>&gt;&gt; if/guard right inside the loop and could then suggest the use of<br>&gt;&gt; where/while as appropriate.<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/2fb20aab/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June  9, 2016 at 12:00:00am</p></header><div class="content"><p>Well put; an excellent articulation of concerns arising from the daily<br>experience of using the feature.<br></p><p>On Wed, Jun 8, 2016 at 19:14 Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br></p><p>&gt; I support your position on the use of where and while/when being confusing<br>&gt; in the loop statement. I (and I know others) have for example used where in<br>&gt; a loop statement mistakenly thinking it would terminate the loop early but<br>&gt; of course learned that it basically filters what causes the loop body to be<br>&gt; executed. After the fact that made sense to me but it didn&#39;t click at first.<br>&gt;<br>&gt; If you separate the loop statement (what you are looping over) from the<br>&gt; filter (continue) conditions and/or termination conditions (break, guard) I<br>&gt; also feel it can be clearer to eyeball quickly. Additionally it lends<br>&gt; itself to being debugged in a line based debugger.<br>&gt;<br>&gt;<br>&gt; -Shawn<br>&gt; On Wed, Jun 8, 2016 at 9:11 AM Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; On Wed, Jun 8, 2016 at 3:38 AM, Haravikk &lt;swift-evolution at haravikk.me&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On 8 Jun 2016, at 01:54, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 1) It is spelled out exactly what happens when a condition is met. I no<br>&gt;&gt;&gt; longer have to remember whether the word that describes breaking from a<br>&gt;&gt;&gt; loop uses a place analogy (&quot;where&quot;) or a time analogy (&quot;while&quot; or &quot;when”).<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; (You cannot convince me that these words are intuitive when the meaning<br>&gt;&gt;&gt; of &quot;where&quot; changes by context in today&#39;s Swift. Now, if you want to propose<br>&gt;&gt;&gt; that these be named &quot;breakif&quot; and &quot;continueif&quot; instead, then I&#39;d agree with<br>&gt;&gt;&gt; you that they&#39;re intuitive names, but then they&#39;d also be really ugly.)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I’m not sure I agree that this is confusing,<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Why would breaking from a loop intuitively use a place analogy and<br>&gt;&gt; continuing to the next iteration use a time analogy? This is totally made<br>&gt;&gt; up; hence, it is not intuitive. I make no argument about whether or not it<br>&gt;&gt; would be conceptually confusing. If you renamed &#39;break&#39; to &#39;foo&#39; and<br>&gt;&gt; &#39;continue&#39; to &#39;bar&#39;, it would not be intuitive, but you could likewise<br>&gt;&gt; argue that it&#39;s not confusing, in that &#39;foo&#39; is clearly not &#39;bar&#39;.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; a little extra to learn for new programmers perhaps but I think it’s<br>&gt;&gt;&gt; fairly intuitive:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; while let value = foo.next() where someCondition(value) { … }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; This reads to me as “repeat the following block until this fails to be<br>&gt;&gt;&gt; true”, the conditional binding in this case fails to be true if<br>&gt;&gt;&gt; someCondition(value) isn’t true, so the loop ends. I think the key thing<br>&gt;&gt;&gt; here is that the where clause is for the conditional binding and not the<br>&gt;&gt;&gt; loop itself, so in this respect it behaves exactly like an if or guard<br>&gt;&gt;&gt; statement. Meanwhile:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; for eachValue in theValues where someCondition(eachValue) { … }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Reads as “for everything in theValues do the following if<br>&gt;&gt;&gt; someCondition(eachValue) is also true”, in other words this loop always<br>&gt;&gt;&gt; tries to visit every element of the sequence (a while loop has no implicit<br>&gt;&gt;&gt; awareness of the sequence, it’s really just an if statement that runs over<br>&gt;&gt;&gt; and over). In this case the where clause is part of the loop itself. There<br>&gt;&gt;&gt; may be an argument that where should be renamed on for loops to better<br>&gt;&gt;&gt; distinguish this, but once you consider that there’s no pattern or<br>&gt;&gt;&gt; conditional binding here I think it makes a reasonable amount of sense.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Yes this could be handled by an if/guard statement with continue, and<br>&gt;&gt;&gt; while as proposed here could be done with the same plus a break, but these<br>&gt;&gt;&gt; things come up so often that it just makes a lot of sense to get it all<br>&gt;&gt;&gt; neatly onto one line.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; As I pointed out above with Tim&#39;s example, putting it all on one line is<br>&gt;&gt; absolutely not &#39;neat&#39;--it reads like spaghetti. That is one major beef I<br>&gt;&gt; have with this proposal: that it *encourages* writing on one line too many<br>&gt;&gt; things that, whether you use `where` or not, are much more clearly written<br>&gt;&gt; on multiple lines. If writing everything on one line is for you the major<br>&gt;&gt; advantage of this proposal, we could agree on everything else and I would<br>&gt;&gt; be very much opposed to this proposal on that basis alone.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; Chaining methods can do this, but it’s actually less readable IMO, or<br>&gt;&gt;&gt; requires multiple lines to keep it clear which defeats the point.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; For me, encouraging the use of multiple lines is the point. Tim&#39;s example<br>&gt;&gt; demonstrated to me very clearly that clarity is not served by additional<br>&gt;&gt; sugar to reduce the amount of punctuation on one line; it is served only by<br>&gt;&gt; putting things on multiple lines. As I said above, I would cringe to read a<br>&gt;&gt; loop that begins `for foo in bar where something while somethingElse where<br>&gt;&gt; yetAnotherSomething while againAnotherSomething { ... }`.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; As with where on if/guard statements it’s about keeping the simpler,<br>&gt;&gt;&gt; more common cases as clean and readable as possible. If the re-use of the<br>&gt;&gt;&gt; keyword where on the for loop is confusing then that’s an argument for<br>&gt;&gt;&gt; renaming that, rather than rejecting while or ditching the whole thing IMO.<br>&gt;&gt;&gt; Personally I think it’s okay, you just have to think what the where clause<br>&gt;&gt;&gt; is actually acting upon.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 3) I have the flexibility to do something between the first if statement<br>&gt;&gt;&gt; and the second if statement, if I want. By placing the break statement at<br>&gt;&gt;&gt; the end of my loop, I could effectively choose to have one more iteration<br>&gt;&gt;&gt; than if I placed it at the beginning of my loop. There is nothing you can<br>&gt;&gt;&gt; do to mimic that choice with your proposed while clause, unless you want to<br>&gt;&gt;&gt; also propose a `for...in...repeat { } while` syntax.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; So? Like where clauses this is for the simpler cases, if you want to do<br>&gt;&gt;&gt; something more complex you remain free to use more complex conditionals.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; And I was/am a proponent of SE-0099 to remove `where` from if and while<br>&gt;&gt; loops; and if that succeeds I will definitely solicit comments to remove it<br>&gt;&gt; from for loops!<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; A lot of the time you don’t need this however, so it makes sense to<br>&gt;&gt;&gt; simplify the common case while leaving the complex one just as useful as it<br>&gt;&gt;&gt; is today. Nothing about this proposal would stop you from using if/guard<br>&gt;&gt;&gt; conditions inside the loop.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 4) This is the perhaps the important point. A beginning programmer--not<br>&gt;&gt;&gt; any of us, presumably, but we were all beginners once--can accomplish<br>&gt;&gt;&gt; everything that he or she desires without learning this new proposed<br>&gt;&gt;&gt; syntax. Almost all texts, I believe, teach if statements before loops, and<br>&gt;&gt;&gt; teach break and continue in the same breath as the loops themselves.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; In terms of teaching there shouldn’t be a problem with just teaching the<br>&gt;&gt;&gt; basic building blocks first, then showing off simplifications later. As<br>&gt;&gt;&gt; with any coding the most important thing is to get the intended behaviour<br>&gt;&gt;&gt; correct, simplifying or optimising the code can always come later.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; You could argue the same thing about the shorthands around closures; I’m<br>&gt;&gt;&gt; not sure why but I had trouble with those initially until after I’d worked<br>&gt;&gt;&gt; with them in the more verbose form (with fully named parameters and a<br>&gt;&gt;&gt; return statement) till I started to get the logic behind it, now I can just<br>&gt;&gt;&gt; right a quick closure with the dollar sign shorthand.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Closures are--I&#39;m sure you&#39;d agree--a far more advanced concept than<br>&gt;&gt; loops. Concepts like closing over a variable are very, very hard. Many<br>&gt;&gt; useful things can be written without using closures. Not so many things<br>&gt;&gt; could do without loops. It very much matters that a learner might feel that<br>&gt;&gt; he or she cannot understand everything about a loop with the handwavy<br>&gt;&gt; explanation that it&#39;ll &quot;come later&quot;. One critique of using Java as a<br>&gt;&gt; starting language is that you are forced to teach your students on day one<br>&gt;&gt; that the real meaning of the words &quot;public static void main(String[] args)&quot;<br>&gt;&gt; will &quot;come later&quot;.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; A good linter could be written to detect the presence of a simple<br>&gt;&gt;&gt; if/guard right inside the loop and could then suggest the use of<br>&gt;&gt;&gt; where/while as appropriate.<br>&gt;&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;<br>&gt;<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/dc5da445/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>June  8, 2016 at 11:00:00am</p></header><div class="content"><p>On Wed, Jun 8, 2016 at 1:38 AM, Haravikk via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I’m not sure I agree that this is confusing, a little extra to learn for<br>&gt; new programmers perhaps but I think it’s fairly intuitive:<br>&gt;<br>&gt; while let value = foo.next() where someCondition(value) { … }<br>&gt;<br>&gt; This reads to me as “repeat the following block until this fails to be<br>&gt; true”, the conditional binding in this case fails to be true if<br>&gt; someCondition(value) isn’t true, so the loop ends. I think the key thing<br>&gt; here is that the where clause is for the conditional binding and not the<br>&gt; loop itself, so in this respect it behaves exactly like an if or guard<br>&gt; statement.<br>&gt;<br></p><p>So, I think it might be much clearer if, similarly to how there&#39;s a<br>discussion about unifying &quot;where&quot; vs. &quot;comma&quot; conditions in guard/if, we<br>could do the same here.<br></p><p>    while let value = foo.next(), let something = value.property, something<br>== 4 { ... }<br></p><p>(Apologies if this has been said; I haven&#39;t followed the whole thread<br>closely.)<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160608/195e6574/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June  8, 2016 at 01:00:00pm</p></header><div class="content"><p>On Wed, Jun 8, 2016 at 1:51 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;<br>wrote:<br></p><p>&gt; On Wed, Jun 8, 2016 at 1:38 AM, Haravikk via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; I’m not sure I agree that this is confusing, a little extra to learn for<br>&gt;&gt; new programmers perhaps but I think it’s fairly intuitive:<br>&gt;&gt;<br>&gt;&gt; while let value = foo.next() where someCondition(value) { … }<br>&gt;&gt;<br>&gt;&gt; This reads to me as “repeat the following block until this fails to be<br>&gt;&gt; true”, the conditional binding in this case fails to be true if<br>&gt;&gt; someCondition(value) isn’t true, so the loop ends. I think the key thing<br>&gt;&gt; here is that the where clause is for the conditional binding and not the<br>&gt;&gt; loop itself, so in this respect it behaves exactly like an if or guard<br>&gt;&gt; statement.<br>&gt;&gt;<br>&gt;<br>&gt; So, I think it might be much clearer if, similarly to how there&#39;s a<br>&gt; discussion about unifying &quot;where&quot; vs. &quot;comma&quot; conditions in guard/if, we<br>&gt; could do the same here.<br>&gt;<br></p><p>&gt;     while let value = foo.next(), let something = value.property,<br>&gt; something == 4 { ... }<br>&gt;<br>&gt; (Apologies if this has been said; I haven&#39;t followed the whole thread<br>&gt; closely.)<br>&gt;<br></p><p>That&#39;s actually also a part of what&#39;s proposed in SE-0099.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160608/faa67cb7/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>June  8, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; This reads to me as “repeat the following block until this fails to be true”, the conditional binding in this case fails to be true if someCondition(value) isn’t true, so the loop ends. I think the key thing here is that the where clause is for the conditional binding and not the loop itself, so in this respect it behaves exactly like an if or guard statement. Meanwhile:<br>&gt; <br>&gt; 	for eachValue in theValues where someCondition(eachValue) { … }<br>&gt; <br>&gt; Reads as “for everything in theValues do the following if someCondition(eachValue) is also true”, in other words this loop always tries to visit every element of the sequence (a while loop has no implicit awareness of the sequence, it’s really just an if statement that runs over and over). In this case the where clause is part of the loop itself. There may be an argument that where should be renamed on for loops to better distinguish this, but once you consider that there’s no pattern or conditional binding here I think it makes a reasonable amount of sense.<br></p><p>The original sin here was in connecting the `where` clause to the for loop&#39;s sequence expression, rather than its pattern. If `where` were positioned right after the loop variable:<br></p><p>	for eachValue where someCondition(eachValue) in theValues { … }<br></p><p>It would be much clearer that `where` constrains the values seen by the loop body.<br></p><p>I&#39;m not sure why the `where` clause was placed where it is. I suspect it has something to do with the `where` clause potentially being more complex than the sequence expression, but I was not in the room where it happened, so that&#39;s idle speculation.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June  9, 2016 at 03:00:00am</p></header><div class="content"><p>That&#39;s a good insight, Brent. That placement of where is actually pretty<br>ingenious and probably unambiguous.<br>On Wed, Jun 8, 2016 at 22:23 Brent Royal-Gordon &lt;brent at architechies.com&gt;<br>wrote:<br></p><p>&gt; &gt; This reads to me as “repeat the following block until this fails to be<br>&gt; true”, the conditional binding in this case fails to be true if<br>&gt; someCondition(value) isn’t true, so the loop ends. I think the key thing<br>&gt; here is that the where clause is for the conditional binding and not the<br>&gt; loop itself, so in this respect it behaves exactly like an if or guard<br>&gt; statement. Meanwhile:<br>&gt; &gt;<br>&gt; &gt;       for eachValue in theValues where someCondition(eachValue) { … }<br>&gt; &gt;<br>&gt; &gt; Reads as “for everything in theValues do the following if<br>&gt; someCondition(eachValue) is also true”, in other words this loop always<br>&gt; tries to visit every element of the sequence (a while loop has no implicit<br>&gt; awareness of the sequence, it’s really just an if statement that runs over<br>&gt; and over). In this case the where clause is part of the loop itself. There<br>&gt; may be an argument that where should be renamed on for loops to better<br>&gt; distinguish this, but once you consider that there’s no pattern or<br>&gt; conditional binding here I think it makes a reasonable amount of sense.<br>&gt;<br>&gt; The original sin here was in connecting the `where` clause to the for<br>&gt; loop&#39;s sequence expression, rather than its pattern. If `where` were<br>&gt; positioned right after the loop variable:<br>&gt;<br>&gt;         for eachValue where someCondition(eachValue) in theValues { … }<br>&gt;<br>&gt; It would be much clearer that `where` constrains the values seen by the<br>&gt; loop body.<br>&gt;<br>&gt; I&#39;m not sure why the `where` clause was placed where it is. I suspect it<br>&gt; has something to do with the `where` clause potentially being more complex<br>&gt; than the sequence expression, but I was not in the room where it happened,<br>&gt; so that&#39;s idle speculation.<br>&gt;<br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/8d50f2cd/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June  9, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jun 8, 2016, at 9:23 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; The original sin here was in connecting the `where` clause to the for loop&#39;s sequence expression, rather than its pattern. If `where` were positioned right after the loop variable:<br>&gt; <br>&gt; 	for eachValue where someCondition(eachValue) in theValues { … }<br>&gt; <br>&gt; It would be much clearer that `where` constrains the values seen by the loop body.<br>&gt; <br>&gt; I&#39;m not sure why the `where` clause was placed where it is. I suspect it has something to do with the `where` clause potentially being more complex than the sequence expression, but I was not in the room where it happened, so that&#39;s idle speculation.<br></p><p><br>I still think `where` should probably be removed from for loops for the reasons<br>I lay out in the other thread (just use guards, lower confusion, increase readability), <br>but you&#39;re right. There&#39;s something wrong in the way that patterns work outside<br>switch statements.<br></p><p>Switch statement grammar:<br>case_item_list : pattern where_clause? | pattern where_clause? &#39;,&#39; case_item_list  <br>(with inferred initializer at the end)<br></p><p>vs<br></p><p>Case condition grammar:<br>case_condition : &#39;case&#39; pattern initializer where_clause?<br>(with the initializer before the where clause)  <br></p><p>To match, the case_condition should have been:<br></p><p>case_condition : &#39;case&#39; pattern where_clause? initializer<br></p><p>If SE-0099 is re-evaluated, and I have a strong sense there&#39;s a quorum of folk who want <br>their `where` clauses, this would introduce more consistent use across the language. <br></p><p>I plan to stay out of the &quot;oh where oh where can my where clause be&quot; argument. <br>I did want to throw in my observations about the inconsistencies between the <br>grammars.  Kudos, Brent for spotting that.<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/8ddc68e3/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[DRAFT] Regularizing Where Grammar (was Re: Add a while clause to for loops)</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June  9, 2016 at 01:00:00pm</p></header><div class="content"><p>Gist: https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57<br></p><p>Regularizing Where grammar<br></p><p>Proposal: TBD<br>Author: Brent Royal-Gordon &lt;https://github.com/brentdax&gt;, Erica Sadun &lt;http://github.com/erica&gt;<br>Status: TBD<br>Review manager: TBD<br> &lt;https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57#introduction&gt;Introduction<br></p><p>This proposal fixes an inconsistency for where clause grammar in Swift language for-in loops.<br></p><p>Swift Evolution Discussion: Add a while clause to for loops &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/19772/focus=20143&gt;<br> &lt;https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57#motivation&gt;Motivation<br></p><p>Unlike in switch statements and do loops, a for-in loop&#39;s where-clause is separated from the pattern it modifies.<br></p><p>for case? pattern in expression where-clause? code-block<br></p><p>case-item-list → pattern where-clause? | pattern where-clause? , case-item-list<br></p><p>catch pattern? where-clause? code-block<br>This separation makes the clause harder to associate with the pattern, can confuse users as to whether it modifies the expression or the pattern, and represents an inconsistency in Swift&#39;s grammar. This proposal regularizes the grammar to match other uses.<br></p><p>Note where clauses in case conditions and optional bindings have been removed in SE-0099 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0099-conditionclauses.md&gt;.<br></p><p> &lt;https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57#detailed-design&gt;Detailed Design<br></p><p>Current:<br></p><p>for case? pattern in expression where-clause? code-block<br>Proposed:<br></p><p>for case? pattern where-clause? in expression code-block<br> &lt;https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57#impact-on-existing-code&gt;Impact on Existing Code<br></p><p>Migration should be easily addressed with a simple fix-it.<br></p><p> &lt;https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57#alternatives-considered&gt;Alternatives Considered<br></p><p>Not accepting this proposal<br></p><p><br>&gt; On Jun 8, 2016, at 9:23 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; This reads to me as “repeat the following block until this fails to be true”, the conditional binding in this case fails to be true if someCondition(value) isn’t true, so the loop ends. I think the key thing here is that the where clause is for the conditional binding and not the loop itself, so in this respect it behaves exactly like an if or guard statement. Meanwhile:<br>&gt;&gt; <br>&gt;&gt; 	for eachValue in theValues where someCondition(eachValue) { … }<br>&gt;&gt; <br>&gt;&gt; Reads as “for everything in theValues do the following if someCondition(eachValue) is also true”, in other words this loop always tries to visit every element of the sequence (a while loop has no implicit awareness of the sequence, it’s really just an if statement that runs over and over). In this case the where clause is part of the loop itself. There may be an argument that where should be renamed on for loops to better distinguish this, but once you consider that there’s no pattern or conditional binding here I think it makes a reasonable amount of sense.<br>&gt; <br>&gt; The original sin here was in connecting the `where` clause to the for loop&#39;s sequence expression, rather than its pattern. If `where` were positioned right after the loop variable:<br>&gt; <br>&gt; 	for eachValue where someCondition(eachValue) in theValues { … }<br>&gt; <br>&gt; It would be much clearer that `where` constrains the values seen by the loop body.<br>&gt; <br>&gt; I&#39;m not sure why the `where` clause was placed where it is. I suspect it has something to do with the `where` clause potentially being more complex than the sequence expression, but I was not in the room where it happened, so that&#39;s idle speculation.<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/bef617cf/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4a9841be165fb834d08296761b4a32e3?s=50"></div><header><strong>[DRAFT] Regularizing Where Grammar (was Re: Add a while clause to for loops)</strong> from <string>Christopher Kornher</string> &lt;ckornher at me.com&gt;<p>June  9, 2016 at 01:00:00pm</p></header><div class="content"><p>+1<br></p><p>&gt; On Jun 9, 2016, at 1:05 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Gist: https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57 &lt;https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57&gt;<br>&gt; <br>&gt; Regularizing Where grammar<br>&gt; <br>&gt; Proposal: TBD<br>&gt; Author: Brent Royal-Gordon &lt;https://github.com/brentdax&gt;, Erica Sadun &lt;http://github.com/erica&gt;<br>&gt; Status: TBD<br>&gt; Review manager: TBD<br>&gt;  &lt;https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57#introduction&gt;Introduction<br>&gt; <br>&gt; This proposal fixes an inconsistency for where clause grammar in Swift language for-in loops.<br>&gt; <br>&gt; Swift Evolution Discussion: Add a while clause to for loops &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/19772/focus=20143&gt;<br>&gt;  &lt;https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57#motivation&gt;Motivation<br>&gt; <br>&gt; Unlike in switch statements and do loops, a for-in loop&#39;s where-clause is separated from the pattern it modifies.<br>&gt; <br>&gt; for case? pattern in expression where-clause? code-block<br>&gt; <br>&gt; case-item-list → pattern where-clause? | pattern where-clause? , case-item-list<br>&gt; <br>&gt; catch pattern? where-clause? code-block<br>&gt; This separation makes the clause harder to associate with the pattern, can confuse users as to whether it modifies the expression or the pattern, and represents an inconsistency in Swift&#39;s grammar. This proposal regularizes the grammar to match other uses.<br>&gt; <br>&gt; Note where clauses in case conditions and optional bindings have been removed in SE-0099 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0099-conditionclauses.md&gt;.<br>&gt; <br>&gt;  &lt;https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57#detailed-design&gt;Detailed Design<br>&gt; <br>&gt; Current:<br>&gt; <br>&gt; for case? pattern in expression where-clause? code-block<br>&gt; Proposed:<br>&gt; <br>&gt; for case? pattern where-clause? in expression code-block<br>&gt;  &lt;https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57#impact-on-existing-code&gt;Impact on Existing Code<br>&gt; <br>&gt; Migration should be easily addressed with a simple fix-it.<br>&gt; <br>&gt;  &lt;https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57#alternatives-considered&gt;Alternatives Considered<br>&gt; <br>&gt; Not accepting this proposal<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 8, 2016, at 9:23 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; This reads to me as “repeat the following block until this fails to be true”, the conditional binding in this case fails to be true if someCondition(value) isn’t true, so the loop ends. I think the key thing here is that the where clause is for the conditional binding and not the loop itself, so in this respect it behaves exactly like an if or guard statement. Meanwhile:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	for eachValue in theValues where someCondition(eachValue) { … }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Reads as “for everything in theValues do the following if someCondition(eachValue) is also true”, in other words this loop always tries to visit every element of the sequence (a while loop has no implicit awareness of the sequence, it’s really just an if statement that runs over and over). In this case the where clause is part of the loop itself. There may be an argument that where should be renamed on for loops to better distinguish this, but once you consider that there’s no pattern or conditional binding here I think it makes a reasonable amount of sense.<br>&gt;&gt; <br>&gt;&gt; The original sin here was in connecting the `where` clause to the for loop&#39;s sequence expression, rather than its pattern. If `where` were positioned right after the loop variable:<br>&gt;&gt; <br>&gt;&gt; 	for eachValue where someCondition(eachValue) in theValues { … }<br>&gt;&gt; <br>&gt;&gt; It would be much clearer that `where` constrains the values seen by the loop body.<br>&gt;&gt; <br>&gt;&gt; I&#39;m not sure why the `where` clause was placed where it is. I suspect it has something to do with the `where` clause potentially being more complex than the sequence expression, but I was not in the room where it happened, so that&#39;s idle speculation.<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/03422de3/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[DRAFT] Regularizing Where Grammar (was Re: Add a while clause to for loops)</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>June  9, 2016 at 03:00:00pm</p></header><div class="content"><p>Can you include an example? I find it hard to visualize for case? pattern where-clause? in expression code-block<br></p><p><br>Thanks,<br>Brandon<br></p><p>&gt; On Jun 9, 2016, at 3:05 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Gist: https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57 &lt;https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57&gt;<br>&gt; <br>&gt; Regularizing Where grammar<br>&gt; <br>&gt; Proposal: TBD<br>&gt; Author: Brent Royal-Gordon &lt;https://github.com/brentdax&gt;, Erica Sadun &lt;http://github.com/erica&gt;<br>&gt; Status: TBD<br>&gt; Review manager: TBD<br>&gt;  &lt;https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57#introduction&gt;Introduction<br>&gt; <br>&gt; This proposal fixes an inconsistency for where clause grammar in Swift language for-in loops.<br>&gt; <br>&gt; Swift Evolution Discussion: Add a while clause to for loops &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/19772/focus=20143&gt;<br>&gt;  &lt;https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57#motivation&gt;Motivation<br>&gt; <br>&gt; Unlike in switch statements and do loops, a for-in loop&#39;s where-clause is separated from the pattern it modifies.<br>&gt; <br>&gt; for case? pattern in expression where-clause? code-block<br>&gt; <br>&gt; case-item-list → pattern where-clause? | pattern where-clause? , case-item-list<br>&gt; <br>&gt; catch pattern? where-clause? code-block<br>&gt; This separation makes the clause harder to associate with the pattern, can confuse users as to whether it modifies the expression or the pattern, and represents an inconsistency in Swift&#39;s grammar. This proposal regularizes the grammar to match other uses.<br>&gt; <br>&gt; Note where clauses in case conditions and optional bindings have been removed in SE-0099 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0099-conditionclauses.md&gt;.<br>&gt; <br>&gt;  &lt;https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57#detailed-design&gt;Detailed Design<br>&gt; <br>&gt; Current:<br>&gt; <br>&gt; for case? pattern in expression where-clause? code-block<br>&gt; Proposed:<br>&gt; <br>&gt; for case? pattern where-clause? in expression code-block<br>&gt;  &lt;https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57#impact-on-existing-code&gt;Impact on Existing Code<br>&gt; <br>&gt; Migration should be easily addressed with a simple fix-it.<br>&gt; <br>&gt;  &lt;https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57#alternatives-considered&gt;Alternatives Considered<br>&gt; <br>&gt; Not accepting this proposal<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 8, 2016, at 9:23 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; This reads to me as “repeat the following block until this fails to be true”, the conditional binding in this case fails to be true if someCondition(value) isn’t true, so the loop ends. I think the key thing here is that the where clause is for the conditional binding and not the loop itself, so in this respect it behaves exactly like an if or guard statement. Meanwhile:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	for eachValue in theValues where someCondition(eachValue) { … }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Reads as “for everything in theValues do the following if someCondition(eachValue) is also true”, in other words this loop always tries to visit every element of the sequence (a while loop has no implicit awareness of the sequence, it’s really just an if statement that runs over and over). In this case the where clause is part of the loop itself. There may be an argument that where should be renamed on for loops to better distinguish this, but once you consider that there’s no pattern or conditional binding here I think it makes a reasonable amount of sense.<br>&gt;&gt; <br>&gt;&gt; The original sin here was in connecting the `where` clause to the for loop&#39;s sequence expression, rather than its pattern. If `where` were positioned right after the loop variable:<br>&gt;&gt; <br>&gt;&gt; 	for eachValue where someCondition(eachValue) in theValues { … }<br>&gt;&gt; <br>&gt;&gt; It would be much clearer that `where` constrains the values seen by the loop body.<br>&gt;&gt; <br>&gt;&gt; I&#39;m not sure why the `where` clause was placed where it is. I suspect it has something to do with the `where` clause potentially being more complex than the sequence expression, but I was not in the room where it happened, so that&#39;s idle speculation.<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/31c2b77a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[DRAFT] Regularizing Where Grammar (was Re: Add a while clause to for loops)</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>June  9, 2016 at 08:00:00pm</p></header><div class="content"><p>I think the idea here is for a change from the first to the second of:<br></p><p>	for eachValue in theValues where eachValue.isOdd { … }<br>	for eachValue where eachValue.isOdd in theValues { … }<br></p><p>I’m kind of split on this for a few reasons. The first is that it doesn’t ready quite as well plain like this, however I find it looks a bit better like:<br></p><p>	for (eachValue where eachValue.isOdd) in theValues { … }<br></p><p>Just to clarify that what we’re looking for in theValues is “eachValue where eachValue.isOdd”, though I could probably learn to read it like this without parenthesis. That said, parenthesis lines up nicely with assignment of tuples like:<br></p><p>	for (eachKey, eachValue where eachValue &gt; 5) in theKeyValuePairs { … }<br></p><p>But I’m not as sure how to adapt it to the pattern matching variation:<br></p><p>	for (case .Some(let value) where value &gt; 5) in theValues { … }<br></p><p>It may be harder to declare with parenthesis support like this, I’m not sure. I think whether or not they’re required in order to declare the where clause it may be worth considering allowing parenthesis for slightly more complex cases where it will help to visually group these parts.<br></p><p><br>I’m actually curious whether moving the where clause closer could be a good (probably future) opportunity to borrow from the closure shorthand:<br></p><p>	for (eachKey, eachValue where $1 &gt; 5) in theKeyValuePairs { … }<br></p><p>i.e- we allow the same shorthand variable names to avoid having to reuse eachKey/eachValue in the condition. Not something that needs to be added to the proposal now, but something it could make possible which may not be as good an idea with the current positioning, so is worth considering. I raise this especially because it would likely work best with support for parenthesis to make it completely clear what the shorthand belongs to, it’s also the kind of possible improvement that would interest me more vs just keeping it as-is.<br></p><p><br>Given that today’s been a bit of a whirlwind for the where clause I’m not sure where to fall on this yet. I’m definitely more in favour of this compared to removing the where clause entirely, but I still quite like it as it is now. Just wanted to lend some thoughts for the time being.<br></p><p>&gt; On 9 Jun 2016, at 20:25, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Can you include an example? I find it hard to visualize for case? pattern where-clause? in expression code-block<br>&gt; <br>&gt; <br>&gt; Thanks,<br>&gt; Brandon<br>&gt; <br>&gt;&gt; On Jun 9, 2016, at 3:05 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Gist: https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57 &lt;https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57&gt;<br>&gt;&gt; <br>&gt;&gt; Regularizing Where grammar<br>&gt;&gt; <br>&gt;&gt; Proposal: TBD<br>&gt;&gt; Author: Brent Royal-Gordon &lt;https://github.com/brentdax&gt;, Erica Sadun &lt;http://github.com/erica&gt;<br>&gt;&gt; Status: TBD<br>&gt;&gt; Review manager: TBD<br>&gt;&gt;  &lt;https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57#introduction&gt;Introduction<br>&gt;&gt; <br>&gt;&gt; This proposal fixes an inconsistency for where clause grammar in Swift language for-in loops.<br>&gt;&gt; <br>&gt;&gt; Swift Evolution Discussion: Add a while clause to for loops &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/19772/focus=20143&gt;<br>&gt;&gt;  &lt;https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57#motivation&gt;Motivation<br>&gt;&gt; <br>&gt;&gt; Unlike in switch statements and do loops, a for-in loop&#39;s where-clause is separated from the pattern it modifies.<br>&gt;&gt; <br>&gt;&gt; for case? pattern in expression where-clause? code-block<br>&gt;&gt; <br>&gt;&gt; case-item-list → pattern where-clause? | pattern where-clause? , case-item-list<br>&gt;&gt; <br>&gt;&gt; catch pattern? where-clause? code-block<br>&gt;&gt; This separation makes the clause harder to associate with the pattern, can confuse users as to whether it modifies the expression or the pattern, and represents an inconsistency in Swift&#39;s grammar. This proposal regularizes the grammar to match other uses.<br>&gt;&gt; <br>&gt;&gt; Note where clauses in case conditions and optional bindings have been removed in SE-0099 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0099-conditionclauses.md&gt;.<br>&gt;&gt; <br>&gt;&gt;  &lt;https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57#detailed-design&gt;Detailed Design<br>&gt;&gt; <br>&gt;&gt; Current:<br>&gt;&gt; <br>&gt;&gt; for case? pattern in expression where-clause? code-block<br>&gt;&gt; Proposed:<br>&gt;&gt; <br>&gt;&gt; for case? pattern where-clause? in expression code-block<br>&gt;&gt;  &lt;https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57#impact-on-existing-code&gt;Impact on Existing Code<br>&gt;&gt; <br>&gt;&gt; Migration should be easily addressed with a simple fix-it.<br>&gt;&gt; <br>&gt;&gt;  &lt;https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57#alternatives-considered&gt;Alternatives Considered<br>&gt;&gt; <br>&gt;&gt; Not accepting this proposal<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 8, 2016, at 9:23 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This reads to me as “repeat the following block until this fails to be true”, the conditional binding in this case fails to be true if someCondition(value) isn’t true, so the loop ends. I think the key thing here is that the where clause is for the conditional binding and not the loop itself, so in this respect it behaves exactly like an if or guard statement. Meanwhile:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	for eachValue in theValues where someCondition(eachValue) { … }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Reads as “for everything in theValues do the following if someCondition(eachValue) is also true”, in other words this loop always tries to visit every element of the sequence (a while loop has no implicit awareness of the sequence, it’s really just an if statement that runs over and over). In this case the where clause is part of the loop itself. There may be an argument that where should be renamed on for loops to better distinguish this, but once you consider that there’s no pattern or conditional binding here I think it makes a reasonable amount of sense.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The original sin here was in connecting the `where` clause to the for loop&#39;s sequence expression, rather than its pattern. If `where` were positioned right after the loop variable:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	for eachValue where someCondition(eachValue) in theValues { … }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It would be much clearer that `where` constrains the values seen by the loop body.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m not sure why the `where` clause was placed where it is. I suspect it has something to do with the `where` clause potentially being more complex than the sequence expression, but I was not in the room where it happened, so that&#39;s idle speculation.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/fb8465f6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[DRAFT] Regularizing Where Grammar (was Re: Add a while clause to for loops)</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>June  9, 2016 at 04:00:00pm</p></header><div class="content"><p>I believe this is for case conditionals in for loops only. There is another proposal to remove where from for loops I believe.<br></p><p>I am curious, is there any conflict with the reasoning to move where here compared to the accepted SE-0081 &quot;Move where clause to end of declaration&quot; https://lists.swift.org/pipermail/swift-evolution-announce/2016-May/000161.html<br></p><p>We moved the where clause to before the body in one case (SE-0081) and now we are trying to move the where clause from before the body to right next to the variable. <br></p><p>In SE-0081: &quot;With the proposed change, where clauses do not impede the main declaration and are also more easily formattable&quot;<br></p><p>I know these are different uses but it is beginning to hurt my head where all the where clauses are suppose to go in different contexts<br></p><p>Brandon<br></p><p>Sent from my iPad<br></p><p>&gt; On Jun 9, 2016, at 3:57 PM, Haravikk &lt;swift-evolution at haravikk.me&gt; wrote:<br>&gt; <br>&gt; I think the idea here is for a change from the first to the second of:<br>&gt; <br>&gt; 	for eachValue in theValues where eachValue.isOdd { … }<br>&gt; 	for eachValue where eachValue.isOdd in theValues { … }<br>&gt; <br>&gt; I’m kind of split on this for a few reasons. The first is that it doesn’t ready quite as well plain like this, however I find it looks a bit better like:<br>&gt; <br>&gt; 	for (eachValue where eachValue.isOdd) in theValues { … }<br>&gt; <br>&gt; Just to clarify that what we’re looking for in theValues is “eachValue where eachValue.isOdd”, though I could probably learn to read it like this without parenthesis. That said, parenthesis lines up nicely with assignment of tuples like:<br>&gt; <br>&gt; 	for (eachKey, eachValue where eachValue &gt; 5) in theKeyValuePairs { … }<br>&gt; <br>&gt; But I’m not as sure how to adapt it to the pattern matching variation:<br>&gt; <br>&gt; 	for (case .Some(let value) where value &gt; 5) in theValues { … }<br>&gt; <br>&gt; It may be harder to declare with parenthesis support like this, I’m not sure. I think whether or not they’re required in order to declare the where clause it may be worth considering allowing parenthesis for slightly more complex cases where it will help to visually group these parts.<br>&gt; <br>&gt; <br>&gt; I’m actually curious whether moving the where clause closer could be a good (probably future) opportunity to borrow from the closure shorthand:<br>&gt; <br>&gt; 	for (eachKey, eachValue where $1 &gt; 5) in theKeyValuePairs { … }<br>&gt; <br>&gt; i.e- we allow the same shorthand variable names to avoid having to reuse eachKey/eachValue in the condition. Not something that needs to be added to the proposal now, but something it could make possible which may not be as good an idea with the current positioning, so is worth considering. I raise this especially because it would likely work best with support for parenthesis to make it completely clear what the shorthand belongs to, it’s also the kind of possible improvement that would interest me more vs just keeping it as-is.<br>&gt; <br>&gt; <br>&gt; Given that today’s been a bit of a whirlwind for the where clause I’m not sure where to fall on this yet. I’m definitely more in favour of this compared to removing the where clause entirely, but I still quite like it as it is now. Just wanted to lend some thoughts for the time being.<br>&gt; <br>&gt;&gt; On 9 Jun 2016, at 20:25, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Can you include an example? I find it hard to visualize for case? pattern where-clause? in expression code-block<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; Brandon<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 9, 2016, at 3:05 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Gist: https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Regularizing Where grammar<br>&gt;&gt;&gt; Proposal: TBD<br>&gt;&gt;&gt; Author: Brent Royal-Gordon, Erica Sadun<br>&gt;&gt;&gt; Status: TBD<br>&gt;&gt;&gt; Review manager: TBD<br>&gt;&gt;&gt; Introduction<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This proposal fixes an inconsistency for where clause grammar in Swift language for-in loops.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Swift Evolution Discussion: Add a while clause to for loops<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Motivation<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Unlike in switch statements and do loops, a for-in loop&#39;s where-clause is separated from the pattern it modifies.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; for case? pattern in expression where-clause? code-block<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; case-item-list → pattern where-clause? | pattern where-clause? , case-item-list<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; catch pattern? where-clause? code-block<br>&gt;&gt;&gt; This separation makes the clause harder to associate with the pattern, can confuse users as to whether it modifies the expression or the pattern, and represents an inconsistency in Swift&#39;s grammar. This proposal regularizes the grammar to match other uses.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Note where clauses in case conditions and optional bindings have been removed in SE-0099.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Detailed Design<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Current:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; for case? pattern in expression where-clause? code-block<br>&gt;&gt;&gt; Proposed:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; for case? pattern where-clause? in expression code-block<br>&gt;&gt;&gt; Impact on Existing Code<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Migration should be easily addressed with a simple fix-it.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Alternatives Considered<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Not accepting this proposal<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jun 8, 2016, at 9:23 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; This reads to me as “repeat the following block until this fails to be true”, the conditional binding in this case fails to be true if someCondition(value) isn’t true, so the loop ends. I think the key thing here is that the where clause is for the conditional binding and not the loop itself, so in this respect it behaves exactly like an if or guard statement. Meanwhile:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	for eachValue in theValues where someCondition(eachValue) { … }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Reads as “for everything in theValues do the following if someCondition(eachValue) is also true”, in other words this loop always tries to visit every element of the sequence (a while loop has no implicit awareness of the sequence, it’s really just an if statement that runs over and over). In this case the where clause is part of the loop itself. There may be an argument that where should be renamed on for loops to better distinguish this, but once you consider that there’s no pattern or conditional binding here I think it makes a reasonable amount of sense.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The original sin here was in connecting the `where` clause to the for loop&#39;s sequence expression, rather than its pattern. If `where` were positioned right after the loop variable:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	for eachValue where someCondition(eachValue) in theValues { … }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It would be much clearer that `where` constrains the values seen by the loop body.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;m not sure why the `where` clause was placed where it is. I suspect it has something to do with the `where` clause potentially being more complex than the sequence expression, but I was not in the room where it happened, so that&#39;s idle speculation.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/2e7392b7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[DRAFT] Regularizing Where Grammar (was Re: Add a while clause to for loops)</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>June 10, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; I am curious, is there any conflict with the reasoning to move where here compared to the accepted SE-0081 &quot;Move where clause to end of declaration&quot; https://lists.swift.org/pipermail/swift-evolution-announce/2016-May/000161.html<br>&gt; <br>&gt; We moved the where clause to before the body in one case (SE-0081) and now we are trying to move the where clause from before the body to right next to the variable. <br>&gt; <br>&gt; In SE-0081: &quot;With the proposed change, where clauses do not impede the main declaration and are also more easily formattable&quot;<br>&gt; <br>&gt; I know these are different uses but it is beginning to hurt my head where all the where clauses are suppose to go in different contexts<br></p><p>I understand why this would confuse you, but there are practical reasons for them to be different.<br></p><p>The `where` clause is used in a couple different ways:<br></p><p>* In a declaration, it specifies additional type information—for instance, that an associated type conforms to a certain protocol or matches another associated type on a different type parameter.<br></p><p>	func append&lt;C: Collection&gt;(contentsOf other: C) where C.Iterator.Element == Self.Iterator.Element { … }<br></p><p>* In a `case` statement or other pattern, it specifies a Boolean condition which must be met for the pattern to match.<br></p><p>	switch value {<br>	case .result(let character) where emoji.contains(character):<br>		print(&quot;Hello, millennial!&quot;)<br>	case .result(_):<br>		print(&quot;Hello, fogey!&quot;)<br>	default:<br>		print(&quot;Goodbye, world!&quot;)<br>	}<br></p><p>Both versions of the clause refine a match to specify additional conditions; that&#39;s why they use the same keyword. But they&#39;re actually quite different.<br></p><p>In particular, one big difference between the two is that you can only attach one `where` clause to a declaration, but there might be many `where` clauses in a pattern match. For instance, in this example:<br></p><p>	enum X { case a, b }<br>	switch X.a {<br>	case .a, .b where 1 == 0:<br>		print(&quot;Matched&quot;)<br>	default:<br>		print(&quot;Didn&#39;t&quot;)<br>	}<br></p><p>The `where` clause only applies to the `.b`, not the `.a`, so the code will print &quot;Matched&quot;. To make it print &quot;Didn&#39;t&quot;, you&#39;d have to write `case .a where 1 == 0, .b where 1 == 0`. In other words, the `where` clause is part of the specific pattern, not the `case` statement as a whole, and so it *must* be attached to the specific pattern.<br></p><p>The `for` syntax, however, does not respect this rule. It inserts the `in` clause between the pattern (the thing after the `for` keyword is a pattern too, even if it doesn&#39;t have a `case` keyword) and its `where` clause. That&#39;s not consistent with `switch`-`case`&#39;s syntax, and in practice, I find it leads to confusion about what `where` does.<br></p><p>For a declaration, however, there can only be one `where` clause, and you can equally well view it as applying to only the generic parameter list (the old way) or to the entire declaration (the new way). There are several reasons why it&#39;s very convenient to put it at the end:<br></p><p>1. Declaration `where` clauses tend to involve lots of verbose names and be very long.<br>2. Declaration `where` clauses sometimes need to be attached to declarations with no generic parameter list, like `extension` and hopefully soon `associatedtype`.<br>3. Declaration `where` clauses embedded in a generic parameter list end up wedging a bunch of usually unimportant information between two of the most important parts of the declaration: the list of generic parameters and the list of regular parameters. This ends up turning the whole thing into a jumbled mess.<br></p><p>So even though both kinds of `where` clause do broadly similar things, they face very different constraints and pressures, and thus are positioned a little bit differently. That&#39;s unfortunate, but probably unavoidable.<br></p><p>The proposal being discussed in this thread is actually trying to improve this situation by making pattern `where` clauses in `for` loops match pattern `where` clauses in `switch` statements. In other words, I believe it actually improves consistency over the status quo. So if you&#39;re confused about where you put `where`, this should make it a little easier to keep things straight.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552d80567b8f0241a53cee772470ddd0?s=50"></div><header><strong>[DRAFT] Regularizing Where Grammar (was Re: Add a while clause to for loops)</strong> from <string>Rob Norback</string> &lt;rnorback at gmail.com&gt;<p>June 10, 2016 at 07:00:00pm</p></header><div class="content"><p>Following Brent&#39;s logic that the for-in where should mimic the switch<br>statement functionality, then this example:<br></p><p>for (eachKey, eachValue)<br>where eachValue &gt; 5<br>in theKeyValuePairs {... }<br></p><p>Should read like:<br></p><p>for (eachKey, eachValue where eachValue &gt; 5) in theKeyValuePairs {... }<br></p><p>And,<br></p><p>for (eachKey, eachValue)<br>where eachKey % 2 == 0 &amp;&amp; eachValue &gt; 5<br>in theKeyValuePairs {... }<br></p><p>Should read like:<br></p><p>for (eachKey where eachKey % 2 == 0, eachValue where eachValue &gt; 5)<br>in theKeyValuePairs {... }<br></p><p>Personally, I think the first examples are much more readable. But if we go<br>with the proposal as it stands, we will be creating yet another syntax<br>structure for where.<br></p><p>Just wanted to point that out.<br></p><p><br></p><p>On Fri, Jun 10, 2016 at 11:06 AM Brent Royal-Gordon via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; &gt; I am curious, is there any conflict with the reasoning to move where<br>&gt; here compared to the accepted SE-0081 &quot;Move where clause to end of<br>&gt; declaration&quot;<br>&gt; https://lists.swift.org/pipermail/swift-evolution-announce/2016-May/000161.html<br>&gt; &gt;<br>&gt; &gt; We moved the where clause to before the body in one case (SE-0081) and<br>&gt; now we are trying to move the where clause from before the body to right<br>&gt; next to the variable.<br>&gt; &gt;<br>&gt; &gt; In SE-0081: &quot;With the proposed change, where clauses do not impede the<br>&gt; main declaration and are also more easily formattable&quot;<br>&gt; &gt;<br>&gt; &gt; I know these are different uses but it is beginning to hurt my head<br>&gt; where all the where clauses are suppose to go in different contexts<br>&gt;<br>&gt; I understand why this would confuse you, but there are practical reasons<br>&gt; for them to be different.<br>&gt;<br>&gt; The `where` clause is used in a couple different ways:<br>&gt;<br>&gt; * In a declaration, it specifies additional type information—for instance,<br>&gt; that an associated type conforms to a certain protocol or matches another<br>&gt; associated type on a different type parameter.<br>&gt;<br>&gt;         func append&lt;C: Collection&gt;(contentsOf other: C) where<br>&gt; C.Iterator.Element == Self.Iterator.Element { … }<br>&gt;<br>&gt; * In a `case` statement or other pattern, it specifies a Boolean condition<br>&gt; which must be met for the pattern to match.<br>&gt;<br>&gt;         switch value {<br>&gt;         case .result(let character) where emoji.contains(character):<br>&gt;                 print(&quot;Hello, millennial!&quot;)<br>&gt;         case .result(_):<br>&gt;                 print(&quot;Hello, fogey!&quot;)<br>&gt;         default:<br>&gt;                 print(&quot;Goodbye, world!&quot;)<br>&gt;         }<br>&gt;<br>&gt; Both versions of the clause refine a match to specify additional<br>&gt; conditions; that&#39;s why they use the same keyword. But they&#39;re actually<br>&gt; quite different.<br>&gt;<br>&gt; In particular, one big difference between the two is that you can only<br>&gt; attach one `where` clause to a declaration, but there might be many `where`<br>&gt; clauses in a pattern match. For instance, in this example:<br>&gt;<br>&gt;         enum X { case a, b }<br>&gt;         switch X.a {<br>&gt;         case .a, .b where 1 == 0:<br>&gt;                 print(&quot;Matched&quot;)<br>&gt;         default:<br>&gt;                 print(&quot;Didn&#39;t&quot;)<br>&gt;         }<br>&gt;<br>&gt; The `where` clause only applies to the `.b`, not the `.a`, so the code<br>&gt; will print &quot;Matched&quot;. To make it print &quot;Didn&#39;t&quot;, you&#39;d have to write `case<br>&gt; .a where 1 == 0, .b where 1 == 0`. In other words, the `where` clause is<br>&gt; part of the specific pattern, not the `case` statement as a whole, and so<br>&gt; it *must* be attached to the specific pattern.<br>&gt;<br>&gt; The `for` syntax, however, does not respect this rule. It inserts the `in`<br>&gt; clause between the pattern (the thing after the `for` keyword is a pattern<br>&gt; too, even if it doesn&#39;t have a `case` keyword) and its `where` clause.<br>&gt; That&#39;s not consistent with `switch`-`case`&#39;s syntax, and in practice, I<br>&gt; find it leads to confusion about what `where` does.<br>&gt;<br>&gt; For a declaration, however, there can only be one `where` clause, and you<br>&gt; can equally well view it as applying to only the generic parameter list<br>&gt; (the old way) or to the entire declaration (the new way). There are several<br>&gt; reasons why it&#39;s very convenient to put it at the end:<br>&gt;<br>&gt; 1. Declaration `where` clauses tend to involve lots of verbose names and<br>&gt; be very long.<br>&gt; 2. Declaration `where` clauses sometimes need to be attached to<br>&gt; declarations with no generic parameter list, like `extension` and hopefully<br>&gt; soon `associatedtype`.<br>&gt; 3. Declaration `where` clauses embedded in a generic parameter list end up<br>&gt; wedging a bunch of usually unimportant information between two of the most<br>&gt; important parts of the declaration: the list of generic parameters and the<br>&gt; list of regular parameters. This ends up turning the whole thing into a<br>&gt; jumbled mess.<br>&gt;<br>&gt; So even though both kinds of `where` clause do broadly similar things,<br>&gt; they face very different constraints and pressures, and thus are positioned<br>&gt; a little bit differently. That&#39;s unfortunate, but probably unavoidable.<br>&gt;<br>&gt; The proposal being discussed in this thread is actually trying to improve<br>&gt; this situation by making pattern `where` clauses in `for` loops match<br>&gt; pattern `where` clauses in `switch` statements. In other words, I believe<br>&gt; it actually improves consistency over the status quo. So if you&#39;re confused<br>&gt; about where you put `where`, this should make it a little easier to keep<br>&gt; things straight.<br>&gt;<br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/3f6b8760/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[DRAFT] Regularizing Where Grammar (was Re: Add a while clause to for loops)</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June 10, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jun 10, 2016, at 1:06 PM, Rob Norback via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Following Brent&#39;s logic that the for-in where should mimic the switch statement functionality, then this example:<br>&gt; <br>&gt; for (eachKey, eachValue) <br>&gt; where eachValue &gt; 5 <br>&gt; in theKeyValuePairs {... }<br>&gt; <br></p><p>&lt;squish&gt;<br></p><p>I finally convinced myself of which direction I wanted to go: https://github.com/apple/swift-evolution/pull/362/files<br></p><p>Related blog post here: http://ericasadun.com/2016/06/10/swift-where-oh-where-can-my-where-clause-be/<br></p><p>Big thanks to Brent and Wux.<br></p><p>-- E<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[DRAFT] Regularizing Where Grammar (was Re: Add a while clause to for loops)</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June 10, 2016 at 09:00:00pm</p></header><div class="content"><p>Goodness... where is this language going..... <br></p><p>&gt; On Jun 10, 2016, at 9:08 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 10, 2016, at 1:06 PM, Rob Norback via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Following Brent&#39;s logic that the for-in where should mimic the switch statement functionality, then this example:<br>&gt;&gt; <br>&gt;&gt; for (eachKey, eachValue) <br>&gt;&gt; where eachValue &gt; 5 <br>&gt;&gt; in theKeyValuePairs {... }<br>&gt; <br>&gt; &lt;squish&gt;<br>&gt; <br>&gt; I finally convinced myself of which direction I wanted to go: https://github.com/apple/swift-evolution/pull/362/files<br>&gt; <br>&gt; Related blog post here: http://ericasadun.com/2016/06/10/swift-where-oh-where-can-my-where-clause-be/<br>&gt; <br>&gt; Big thanks to Brent and Wux.<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[DRAFT] Regularizing Where Grammar (was Re: Add a while clause to for loops)</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>June 10, 2016 at 03:00:00pm</p></header><div class="content"><p>Thanks for the laugh! <br></p><p>The last week or so is actually stressing me out about the direction where swift is going…<br></p><p>I hope it is just a fleeting feeling but that remains to be seen. I am beginning to think my interests and taste are no longer aligning with the communities or core teams.<br></p><p>Brandon<br></p><p>&gt; On Jun 10, 2016, at 3:25 PM, L. Mihalkovic via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Goodness... where is this language going..... <br>&gt; <br>&gt;&gt; On Jun 10, 2016, at 9:08 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 10, 2016, at 1:06 PM, Rob Norback via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Following Brent&#39;s logic that the for-in where should mimic the switch statement functionality, then this example:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; for (eachKey, eachValue) <br>&gt;&gt;&gt; where eachValue &gt; 5 <br>&gt;&gt;&gt; in theKeyValuePairs {... }<br>&gt;&gt; <br>&gt;&gt; &lt;squish&gt;<br>&gt;&gt; <br>&gt;&gt; I finally convinced myself of which direction I wanted to go: https://github.com/apple/swift-evolution/pull/362/files<br>&gt;&gt; <br>&gt;&gt; Related blog post here: http://ericasadun.com/2016/06/10/swift-where-oh-where-can-my-where-clause-be/<br>&gt;&gt; <br>&gt;&gt; Big thanks to Brent and Wux.<br>&gt;&gt; <br>&gt;&gt; -- E<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[DRAFT] Regularizing Where Grammar (was Re: Add a while clause to for loops)</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 10, 2016 at 02:00:00pm</p></header><div class="content"><p>On Fri, Jun 10, 2016 at 2:38 PM, Brandon Knope via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Thanks for the laugh!<br>&gt;<br>&gt; The last week or so is actually stressing me out about the direction where<br>&gt; swift is going…<br>&gt;<br>&gt; I hope it is just a fleeting feeling but that remains to be seen. I am<br>&gt; beginning to think my interests and taste are no longer aligning with the<br>&gt; communities or core teams.<br>&gt;<br>&gt; Brandon<br>&gt;<br></p><p>I think, given the usage statistics, we&#39;ll find that these amount to small<br>nips and tucks. I can&#39;t speak to whether things will be to your taste, but<br>please rest assured that these proposals do not arise out of anyone&#39;s taste<br>or distaste (outside that of the core team). If taste were the basis for<br>proposals, I&#39;d be proposing rather larger changes to the syntax, but I<br>appreciate that my personal taste is of no import.<br></p><p>But as to interests, please do speak loudly and without reserve if any<br>proposed changes are putting a stop to real-world (or even anticipated)<br>uses you have. That&#39;s precisely what this process is about.<br></p><p><br>&gt;<br>&gt; &gt; On Jun 10, 2016, at 3:25 PM, L. Mihalkovic via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Goodness... where is this language going.....<br>&gt; &gt;<br>&gt; &gt;&gt; On Jun 10, 2016, at 9:08 PM, Erica Sadun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; On Jun 10, 2016, at 1:06 PM, Rob Norback via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Following Brent&#39;s logic that the for-in where should mimic the switch<br>&gt; statement functionality, then this example:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; for (eachKey, eachValue)<br>&gt; &gt;&gt;&gt; where eachValue &gt; 5<br>&gt; &gt;&gt;&gt; in theKeyValuePairs {... }<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; &lt;squish&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I finally convinced myself of which direction I wanted to go:<br>&gt; https://github.com/apple/swift-evolution/pull/362/files<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Related blog post here:<br>&gt; http://ericasadun.com/2016/06/10/swift-where-oh-where-can-my-where-clause-be/<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Big thanks to Brent and Wux.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; -- E<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/9e678805/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4a9841be165fb834d08296761b4a32e3?s=50"></div><header><strong>[DRAFT] Regularizing Where Grammar (was Re: Add a while clause to for loops)</strong> from <string>Christopher Kornher</string> &lt;ckornher at me.com&gt;<p>June 10, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Jun 10, 2016, at 1:52 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Fri, Jun 10, 2016 at 2:38 PM, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Thanks for the laugh!<br>&gt; <br>&gt; The last week or so is actually stressing me out about the direction where swift is going…<br>&gt; <br>&gt; I hope it is just a fleeting feeling but that remains to be seen. I am beginning to think my interests and taste are no longer aligning with the communities or core teams.<br>&gt; <br>&gt; Brandon<br>&gt; <br>&gt; I think, given the usage statistics, we&#39;ll find that these amount to small nips and tucks. I can&#39;t speak to whether things will be to your taste, but please rest assured that these proposals do not arise out of anyone&#39;s taste or distaste (outside that of the core team). If taste were the basis for proposals, I&#39;d be proposing rather larger changes to the syntax, but I appreciate that my personal taste is of no import.<br></p><p>Language design is an art as much as a science. Expressiveness is an extremely important feature of a language to me (and of Swift). If we want to be scientific about it, character and line counts are very rough metrics for expressiveness. How many more characters does changing &#39;where’s to ‘guards&#39; cost?  How many lines would be added by a sensibly formatted replacement?<br></p><p>Java is a great example of a language that did not put a high priority on expressiveness and consequently Java code has a very high fraction of boilerplate. I do not want to see Swift be “Javaized” in the name of “rationalization”. Rationalization does not require the language to be dumbed-down to a lowest common denominator syntax.<br></p><p>&gt; <br>&gt; But as to interests, please do speak loudly and without reserve if any proposed changes are putting a stop to real-world (or even anticipated) uses you have. That&#39;s precisely what this process is about.<br>&gt;  <br>&gt; <br>&gt; &gt; On Jun 10, 2016, at 3:25 PM, L. Mihalkovic via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Goodness... where is this language going.....<br>&gt; &gt;<br>&gt; &gt;&gt; On Jun 10, 2016, at 9:08 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; On Jun 10, 2016, at 1:06 PM, Rob Norback via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Following Brent&#39;s logic that the for-in where should mimic the switch statement functionality, then this example:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; for (eachKey, eachValue)<br>&gt; &gt;&gt;&gt; where eachValue &gt; 5<br>&gt; &gt;&gt;&gt; in theKeyValuePairs {... }<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; &lt;squish&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I finally convinced myself of which direction I wanted to go: https://github.com/apple/swift-evolution/pull/362/files &lt;https://github.com/apple/swift-evolution/pull/362/files&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Related blog post here: http://ericasadun.com/2016/06/10/swift-where-oh-where-can-my-where-clause-be/ &lt;http://ericasadun.com/2016/06/10/swift-where-oh-where-can-my-where-clause-be/&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Big thanks to Brent and Wux.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; -- E<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/24c0987a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[DRAFT] Regularizing Where Grammar (was Re: Add a while clause to for loops)</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 10, 2016 at 03:00:00pm</p></header><div class="content"><p>On Fri, Jun 10, 2016 at 3:04 PM, Christopher Kornher &lt;ckornher at me.com&gt;<br>wrote:<br></p><p>&gt;<br>&gt; On Jun 10, 2016, at 1:52 PM, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On Fri, Jun 10, 2016 at 2:38 PM, Brandon Knope via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Thanks for the laugh!<br>&gt;&gt;<br>&gt;&gt; The last week or so is actually stressing me out about the direction<br>&gt;&gt; where swift is going…<br>&gt;&gt;<br>&gt;&gt; I hope it is just a fleeting feeling but that remains to be seen. I am<br>&gt;&gt; beginning to think my interests and taste are no longer aligning with the<br>&gt;&gt; communities or core teams.<br>&gt;&gt;<br>&gt;&gt; Brandon<br>&gt;&gt;<br>&gt;<br>&gt; I think, given the usage statistics, we&#39;ll find that these amount to small<br>&gt; nips and tucks. I can&#39;t speak to whether things will be to your taste, but<br>&gt; please rest assured that these proposals do not arise out of anyone&#39;s taste<br>&gt; or distaste (outside that of the core team). If taste were the basis for<br>&gt; proposals, I&#39;d be proposing rather larger changes to the syntax, but I<br>&gt; appreciate that my personal taste is of no import.<br>&gt;<br>&gt;<br>&gt; Language design is an art as much as a science. Expressiveness is an<br>&gt; extremely important feature of a language to me (and of Swift). If we want<br>&gt; to be scientific about it, character and line counts are very rough metrics<br>&gt; for expressiveness. How many more characters does changing &#39;where’s to<br>&gt; ‘guards&#39; cost?  How many lines would be added by a sensibly formatted<br>&gt; replacement?<br>&gt;<br>&gt; Java is a great example of a language that did not put a high priority on<br>&gt; expressiveness and consequently Java code has a very high fraction of<br>&gt; boilerplate.<br>&gt;<br></p><p>We&#39;ve had this discussion before. I and others don&#39;t consider `{ continue<br>}` to be boilerplate but essential for understanding control flow. No one<br>is advocating for more boilerplate. You proceed on the premise that `while`<br>is just enough and `guard` is too much boilerplate; what we are arguing is<br>that `while` is *not* enough and `guard` is just right.<br></p><p><br>&gt; I do not want to see Swift be “Javaized” in the name of “rationalization”.<br>&gt; Rationalization does not require the language to be dumbed-down to a lowest<br>&gt; common denominator syntax.<br>&gt;<br></p><p>&quot;Clarity,&quot; not &quot;rationalization&quot; is the watchword here.<br></p><p><br>&gt;<br>&gt;<br>&gt; But as to interests, please do speak loudly and without reserve if any<br>&gt; proposed changes are putting a stop to real-world (or even anticipated)<br>&gt; uses you have. That&#39;s precisely what this process is about.<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt; &gt; On Jun 10, 2016, at 3:25 PM, L. Mihalkovic via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Goodness... where is this language going.....<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; On Jun 10, 2016, at 9:08 PM, Erica Sadun via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; On Jun 10, 2016, at 1:06 PM, Rob Norback via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; Following Brent&#39;s logic that the for-in where should mimic the switch<br>&gt;&gt; statement functionality, then this example:<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; for (eachKey, eachValue)<br>&gt;&gt; &gt;&gt;&gt; where eachValue &gt; 5<br>&gt;&gt; &gt;&gt;&gt; in theKeyValuePairs {... }<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; &lt;squish&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; I finally convinced myself of which direction I wanted to go:<br>&gt;&gt; https://github.com/apple/swift-evolution/pull/362/files<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Related blog post here:<br>&gt;&gt; http://ericasadun.com/2016/06/10/swift-where-oh-where-can-my-where-clause-be/<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Big thanks to Brent and Wux.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; -- E<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/c76055db/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[DRAFT] Regularizing Where Grammar (was Re: Add a while clause to for loops)</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>June 10, 2016 at 04:00:00pm</p></header><div class="content"><p>Your patience in the face of my hysterics is truly inspirational (no sarcasm!). <br></p><p>I just want to say up front that I hope none of my emails come across as an attack. They are just coming from a place of passion. Based on your rational responses to me, I think you do understand that :)<br></p><p>I am not concerned about Swift not letting me do something. I am concerned about the fun and beauty of the resulting code.<br></p><p>For example, I got into Objective-C because it was fun. It can read like poetry with its verbose methods and was so much simpler to me than other languages like C/C++/Java.<br></p><p>My fear is that this fun will be removed from Swift after I have invested so much time into it. <br></p><p>I can still be productive because Swift still allows me to build things.<br></p><p>But will it be as fun in the future? Will it just feel like C++…all sterile and very bleep bloop bloopy (my description of what people PICTURE in their heads when they think of people programming…you know their impression that we are just typing 0s and 1s).<br></p><p>I had the luxury of coming into Objective-C near the end, so I didn’t have to go through all the syntax changes (well some of them). Maybe if I had joined ObjC from the beginning I would have either hated or loved the direction it was going. It’s hard to say.<br></p><p>Coming into a brand new language is much different to say the least. Swift 1 and 2 introduced a very beautiful and expressive language in my opinion. Swift 3 is still expressive, but with some of these proposals, it feels like some of that is being stripped away little by little and it is a very uncomfortable feeling<br></p><p>My concerns may be unfounded. I just fear that the simplicity that brought me to Objective-C and then Swift will be lost over time if it starts turning into something as complex as C++ (which I do not enjoy writing in).<br></p><p>I hope this makes some sense about my perspective<br>Brandon<br></p><p><br>&gt; On Jun 10, 2016, at 3:52 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Fri, Jun 10, 2016 at 2:38 PM, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Thanks for the laugh!<br>&gt; <br>&gt; The last week or so is actually stressing me out about the direction where swift is going…<br>&gt; <br>&gt; I hope it is just a fleeting feeling but that remains to be seen. I am beginning to think my interests and taste are no longer aligning with the communities or core teams.<br>&gt; <br>&gt; Brandon<br>&gt; <br>&gt; I think, given the usage statistics, we&#39;ll find that these amount to small nips and tucks. I can&#39;t speak to whether things will be to your taste, but please rest assured that these proposals do not arise out of anyone&#39;s taste or distaste (outside that of the core team). If taste were the basis for proposals, I&#39;d be proposing rather larger changes to the syntax, but I appreciate that my personal taste is of no import.<br>&gt; <br>&gt; But as to interests, please do speak loudly and without reserve if any proposed changes are putting a stop to real-world (or even anticipated) uses you have. That&#39;s precisely what this process is about.<br>&gt;  <br>&gt; <br>&gt; &gt; On Jun 10, 2016, at 3:25 PM, L. Mihalkovic via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Goodness... where is this language going.....<br>&gt; &gt;<br>&gt; &gt;&gt; On Jun 10, 2016, at 9:08 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; On Jun 10, 2016, at 1:06 PM, Rob Norback via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Following Brent&#39;s logic that the for-in where should mimic the switch statement functionality, then this example:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; for (eachKey, eachValue)<br>&gt; &gt;&gt;&gt; where eachValue &gt; 5<br>&gt; &gt;&gt;&gt; in theKeyValuePairs {... }<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; &lt;squish&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I finally convinced myself of which direction I wanted to go: https://github.com/apple/swift-evolution/pull/362/files &lt;https://github.com/apple/swift-evolution/pull/362/files&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Related blog post here: http://ericasadun.com/2016/06/10/swift-where-oh-where-can-my-where-clause-be/ &lt;http://ericasadun.com/2016/06/10/swift-where-oh-where-can-my-where-clause-be/&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Big thanks to Brent and Wux.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; -- E<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/c6c1d304/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[DRAFT] Regularizing Where Grammar (was Re: Add a while clause to for loops)</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 10, 2016 at 03:00:00pm</p></header><div class="content"><p>On Fri, Jun 10, 2016 at 3:24 PM, Brandon Knope &lt;bknope at me.com&gt; wrote:<br></p><p>&gt; Your patience in the face of my hysterics is truly inspirational (no<br>&gt; sarcasm!).<br>&gt;<br>&gt; I just want to say up front that I hope none of my emails come across as<br>&gt; an attack. They are just coming from a place of passion. Based on your<br>&gt; rational responses to me, I think you do understand that :)<br>&gt;<br>&gt; I am *not *concerned about Swift not letting me do something. I am<br>&gt; concerned about the fun and beauty of the resulting code.<br>&gt;<br>&gt; For example, I got into Objective-C because it was fun. It can read like<br>&gt; poetry with its verbose methods and was so much simpler to me than other<br>&gt; languages like C/C++/Java.<br>&gt;<br>&gt; My fear is that this fun will be removed from Swift after I have invested<br>&gt; so much time into it.<br>&gt;<br>&gt; I can still be productive because Swift still allows me to build things.<br>&gt;<br>&gt; *But will it be as fun *in the future? Will it just feel like C++…all<br>&gt; sterile and very bleep bloop bloopy (my description of what people PICTURE<br>&gt; in their heads when they think of people programming…you know their<br>&gt; impression that we are just typing 0s and 1s).<br>&gt;<br>&gt; I had the luxury of coming into Objective-C near the end, so I didn’t have<br>&gt; to go through all the syntax changes (well some of them). Maybe if I had<br>&gt; joined ObjC from the beginning I would have either hated or loved the<br>&gt; direction it was going. It’s hard to say.<br>&gt;<br>&gt; Coming into a brand new language is much different to say the least. Swift<br>&gt; 1 and 2 introduced a very beautiful and expressive language in my opinion.<br>&gt; Swift 3 is still expressive, but with some of these proposals, it feels<br>&gt; like some of that is being stripped away little by little and it is a very<br>&gt; uncomfortable feeling<br>&gt;<br>&gt; My concerns may be unfounded. I just fear that the simplicity that brought<br>&gt; me to Objective-C and then Swift will be lost over time if it starts<br>&gt; turning into something as complex as C++ (which I do not enjoy writing in).<br>&gt;<br>&gt; I hope this makes some sense about my perspective<br>&gt;<br></p><p>For my part, I&#39;ll reassure you I enjoy fun more than bleep bloop bloopy :)<br></p><p>If you want to know my first impression of Swift, it just felt &quot;smooth.&quot;<br>Like buttery smooth. I hope it&#39;ll stay that way :) IMO--and this is not a<br>rational argument for anything to do with this proposal--the fewer furrowed<br>eyebrows amongst learners of Swift, the more we get to pass that along that<br>feeling to those who come after. And that&#39;d be nice (and not only<br>selfishly, though if I ever get this pet project of mine done I&#39;d like for<br>someone to be around who might be willing to keep it alive).<br></p><p><br>&gt; Brandon<br>&gt;<br>&gt;<br>&gt; On Jun 10, 2016, at 3:52 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt; On Fri, Jun 10, 2016 at 2:38 PM, Brandon Knope via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Thanks for the laugh!<br>&gt;&gt;<br>&gt;&gt; The last week or so is actually stressing me out about the direction<br>&gt;&gt; where swift is going…<br>&gt;&gt;<br>&gt;&gt; I hope it is just a fleeting feeling but that remains to be seen. I am<br>&gt;&gt; beginning to think my interests and taste are no longer aligning with the<br>&gt;&gt; communities or core teams.<br>&gt;&gt;<br>&gt;&gt; Brandon<br>&gt;&gt;<br>&gt;<br>&gt; I think, given the usage statistics, we&#39;ll find that these amount to small<br>&gt; nips and tucks. I can&#39;t speak to whether things will be to your taste, but<br>&gt; please rest assured that these proposals do not arise out of anyone&#39;s taste<br>&gt; or distaste (outside that of the core team). If taste were the basis for<br>&gt; proposals, I&#39;d be proposing rather larger changes to the syntax, but I<br>&gt; appreciate that my personal taste is of no import.<br>&gt;<br>&gt; But as to interests, please do speak loudly and without reserve if any<br>&gt; proposed changes are putting a stop to real-world (or even anticipated)<br>&gt; uses you have. That&#39;s precisely what this process is about.<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt; &gt; On Jun 10, 2016, at 3:25 PM, L. Mihalkovic via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Goodness... where is this language going.....<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; On Jun 10, 2016, at 9:08 PM, Erica Sadun via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; On Jun 10, 2016, at 1:06 PM, Rob Norback via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; Following Brent&#39;s logic that the for-in where should mimic the switch<br>&gt;&gt; statement functionality, then this example:<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; for (eachKey, eachValue)<br>&gt;&gt; &gt;&gt;&gt; where eachValue &gt; 5<br>&gt;&gt; &gt;&gt;&gt; in theKeyValuePairs {... }<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; &lt;squish&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; I finally convinced myself of which direction I wanted to go:<br>&gt;&gt; https://github.com/apple/swift-evolution/pull/362/files<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Related blog post here:<br>&gt;&gt; http://ericasadun.com/2016/06/10/swift-where-oh-where-can-my-where-clause-be/<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Big thanks to Brent and Wux.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; -- E<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/ced99704/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[DRAFT] Regularizing Where Grammar (was Re: Add a while clause to for loops)</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June 10, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On Jun 10, 2016, at 10:32 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; On Fri, Jun 10, 2016 at 3:24 PM, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;&gt; Your patience in the face of my hysterics is truly inspirational (no sarcasm!). <br>&gt;&gt; <br>&gt;&gt; I just want to say up front that I hope none of my emails come across as an attack. They are just coming from a place of passion. Based on your rational responses to me, I think you do understand that :)<br>&gt;&gt; <br>&gt;&gt; I am not concerned about Swift not letting me do something. I am concerned about the fun and beauty of the resulting code.<br>&gt;&gt; <br>&gt;&gt; For example, I got into Objective-C because it was fun. It can read like poetry with its verbose methods and was so much simpler to me than other languages like C/C++/Java.<br></p><p>Objc is a 30 year old language that has managed to evolve quit well, but it is time to retire it. And the people behind swift are as good as it gets to be able to pull it off. History will not remember the hickups of 1, 2, or maybe even 3... <br></p><p><br>&gt;&gt; <br>&gt;&gt; My fear is that this fun will be removed from Swift after I have invested so much time into it. <br>&gt;&gt; <br>&gt;&gt; I can still be productive because Swift still allows me to build things.<br>&gt;&gt; <br>&gt;&gt; But will it be as fun in the future? Will it just feel like C++…all sterile and very bleep bloop bloopy (my description of what people PICTURE in their heads when they think of people programming…you know their impression that we are just typing 0s and 1s).<br>&gt;&gt; <br>&gt;&gt; I had the luxury of coming into Objective-C near the end, so I didn’t have to go through all the syntax changes (well some of them). Maybe if I had joined ObjC from the beginning I would have either hated or loved the direction it was going. It’s hard to say.<br>&gt;&gt; <br>&gt;&gt; Coming into a brand new language is much different to say the least. Swift 1 and 2 introduced a very beautiful and expressive language in my opinion. Swift 3 is still expressive, but with some of these proposals, it feels like some of that is being stripped away little by little and it is a very uncomfortable feeling<br>&gt;&gt; <br>&gt;&gt; My concerns may be unfounded. I just fear that the simplicity that brought me to Objective-C and then Swift will be lost over time if it starts turning into something as complex as C++ (which I do not enjoy writing in).<br>&gt;&gt; <br>&gt;&gt; I hope this makes some sense about my perspective<br>&gt; <br>&gt; For my part, I&#39;ll reassure you I enjoy fun more than bleep bloop bloopy :)<br>&gt; <br>&gt; If you want to know my first impression of Swift, it just felt &quot;smooth.&quot; Like buttery smooth. I hope it&#39;ll stay that way :) IMO--and this is not a rational argument for anything to do with this proposal--the fewer furrowed eyebrows amongst learners of Swift, the more we get to pass that along that feeling to those who come after. And that&#39;d be nice (and not only selfishly, though if I ever get this pet project of mine done I&#39;d like for someone to be around who might be willing to keep it alive).<br>&gt;  <br>&gt;&gt; Brandon<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 10, 2016, at 3:52 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Fri, Jun 10, 2016 at 2:38 PM, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; Thanks for the laugh!<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The last week or so is actually stressing me out about the direction where swift is going…<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I hope it is just a fleeting feeling but that remains to be seen. I am beginning to think my interests and taste are no longer aligning with the communities or core teams.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think, given the usage statistics, we&#39;ll find that these amount to small nips and tucks. I can&#39;t speak to whether things will be to your taste, but please rest assured that these proposals do not arise out of anyone&#39;s taste or distaste (outside that of the core team). If taste were the basis for proposals, I&#39;d be proposing rather larger changes to the syntax, but I appreciate that my personal taste is of no import.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But as to interests, please do speak loudly and without reserve if any proposed changes are putting a stop to real-world (or even anticipated) uses you have. That&#39;s precisely what this process is about.<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; &gt; On Jun 10, 2016, at 3:25 PM, L. Mihalkovic via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; Goodness... where is this language going.....<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;&gt; On Jun 10, 2016, at 9:08 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; On Jun 10, 2016, at 1:06 PM, Rob Norback via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; Following Brent&#39;s logic that the for-in where should mimic the switch statement functionality, then this example:<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; for (eachKey, eachValue)<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; where eachValue &gt; 5<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; in theKeyValuePairs {... }<br>&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt; &lt;squish&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt; I finally convinced myself of which direction I wanted to go: https://github.com/apple/swift-evolution/pull/362/files<br>&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt; Related blog post here: http://ericasadun.com/2016/06/10/swift-where-oh-where-can-my-where-clause-be/<br>&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt; Big thanks to Brent and Wux.<br>&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt; -- E<br>&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/0cd217ab/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[DRAFT] Regularizing Where Grammar (was Re: Add a while clause to for loops)</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 10, 2016 at 02:00:00pm</p></header><div class="content"><p>On Fri, Jun 10, 2016 at 2:08 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Jun 10, 2016, at 1:06 PM, Rob Norback via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Following Brent&#39;s logic that the for-in where should mimic the switch<br>&gt; statement functionality, then this example:<br>&gt; &gt;<br>&gt; &gt; for (eachKey, eachValue)<br>&gt; &gt; where eachValue &gt; 5<br>&gt; &gt; in theKeyValuePairs {... }<br>&gt; &gt;<br>&gt;<br>&gt; &lt;squish&gt;<br>&gt;<br>&gt; I finally convinced myself of which direction I wanted to go:<br>&gt; https://github.com/apple/swift-evolution/pull/362/files<br>&gt;<br>&gt; Related blog post here:<br>&gt; http://ericasadun.com/2016/06/10/swift-where-oh-where-can-my-where-clause-be/<br>&gt;<br>&gt; Big thanks to Brent and Wux.<br>&gt;<br></p><p>I&#39;m rather taken by the idea of replacing `where` with `if` for `case` and<br>`catch`: it&#39;s unambiguous and eliminates the implication of a subordinate<br>semantic relationship which can&#39;t actually be enforced, while still<br>exposing all of the expressiveness made possible by `where` in that<br>particular scenario.<br></p><p><br>&gt;<br>&gt; -- E<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/ffb5fa64/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4a9841be165fb834d08296761b4a32e3?s=50"></div><header><strong>[DRAFT] Regularizing Where Grammar (was Re: Add a while clause to for loops)</strong> from <string>Christopher Kornher</string> &lt;ckornher at me.com&gt;<p>June 10, 2016 at 01:00:00pm</p></header><div class="content"><p>-1 <br></p><p>An alternative would be to:<br></p><p>	1) State clearly in all relevant documentation that ‘where’ filters and  ‘while’ terminates.<br>	2) Eliminate the use of ‘where’ within ‘while’ clauses.<br></p><p>This seems pretty straightforward to me. The principle in  #1 should be easy for even beginners to grasp.<br></p><p>Using ‘guard’ statements instead of ‘where’ clauses adds a lot of visual noise for me. <br></p><p><br></p><p>&gt; On Jun 10, 2016, at 1:08 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 10, 2016, at 1:06 PM, Rob Norback via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Following Brent&#39;s logic that the for-in where should mimic the switch statement functionality, then this example:<br>&gt;&gt; <br>&gt;&gt; for (eachKey, eachValue) <br>&gt;&gt; where eachValue &gt; 5 <br>&gt;&gt; in theKeyValuePairs {... }<br>&gt;&gt; <br>&gt; <br>&gt; &lt;squish&gt;<br>&gt; <br>&gt; I finally convinced myself of which direction I wanted to go: https://github.com/apple/swift-evolution/pull/362/files<br>&gt; <br>&gt; Related blog post here: http://ericasadun.com/2016/06/10/swift-where-oh-where-can-my-where-clause-be/<br>&gt; <br>&gt; Big thanks to Brent and Wux.<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/6689d8ba/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[DRAFT] Regularizing Where Grammar (was Re: Add a while clause to for loops)</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 10, 2016 at 02:00:00pm</p></header><div class="content"><p>On Fri, Jun 10, 2016 at 2:42 PM, Christopher Kornher &lt;ckornher at me.com&gt;<br>wrote:<br></p><p>&gt; -1<br>&gt;<br>&gt; An alternative would be to:<br>&gt;<br>&gt; 1) State clearly in all relevant documentation that ‘where’ filters and<br>&gt;  ‘while’ terminates.<br>&gt; 2) Eliminate the use of ‘where’ within ‘while’ clauses.<br>&gt;<br>&gt; This seems pretty straightforward to me. The principle in  #1 should be<br>&gt; easy for even beginners to grasp.<br>&gt;<br>&gt;<br>&gt; Using ‘guard’ statements instead of ‘where’ clauses adds a lot of visual<br>&gt; noise for me.<br>&gt;<br></p><p>Yes, that is one alternative mentioned in the proposal.<br></p><p>&gt; On Jun 10, 2016, at 1:08 PM, Erica Sadun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Jun 10, 2016, at 1:06 PM, Rob Norback via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Following Brent&#39;s logic that the for-in where should mimic the switch<br>&gt; statement functionality, then this example:<br>&gt;<br>&gt; for (eachKey, eachValue)<br>&gt; where eachValue &gt; 5<br>&gt; in theKeyValuePairs {... }<br>&gt;<br>&gt;<br>&gt; &lt;squish&gt;<br>&gt;<br>&gt; I finally convinced myself of which direction I wanted to go:<br>&gt; https://github.com/apple/swift-evolution/pull/362/files<br>&gt;<br>&gt; Related blog post here:<br>&gt; http://ericasadun.com/2016/06/10/swift-where-oh-where-can-my-where-clause-be/<br>&gt;<br>&gt; Big thanks to Brent and Wux.<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/ac9e5e46/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4a9841be165fb834d08296761b4a32e3?s=50"></div><header><strong>[DRAFT] Regularizing Where Grammar (was Re: Add a while clause to for loops)</strong> from <string>Christopher Kornher</string> &lt;ckornher at me.com&gt;<p>June 10, 2016 at 04:00:00pm</p></header><div class="content"><p>I wonder how reactionary I will become when Swift is 5 years old :) <br></p><p>I goggled a bit, to get some context on the use of “where” in mathematics. I was surprised to learn that and the use of “where” in mathematics is disliked by some mathematicians for its lack of precision:<br></p><p>In his famous paper How to write mathematics &lt;http://www.math.uh.edu/~tomforde/Books/Halmos-How-To-Write.pdf&gt;, P.R. Halmos says the following about &quot;where&quot;<br></p><p>&quot;Where&quot; is usually a sign of a lazy afterthought that should have been thought through before. <br>From http://math.stackexchange.com/questions/1304270/math-symbol-for-where &lt;http://math.stackexchange.com/questions/1304270/math-symbol-for-where&gt;<br></p><p>So you may in good company in your concerns about the use of this word.<br></p><p>Taking a clue from this, perhaps a less vague term would clarify things for loops:<br></p><p>Current ‘where’ syntax<br></p><p>```<br>for i in arr where i%2 == 0 {<br>    print( i )<br>}<br>```<br></p><p>can be rewritten (using the same variable name in the closure):<br></p><p>```<br>for i in arr.filter({(i) in i%2 == 0 }) {<br>    print( i )<br>}<br>```<br></p><p>There area many extra characters in the second version. ‘i’ is already bound, so the binding (if that is the correct term) in the filter clause doesn’t add any information. The non-escaping closure requires a set of parens and a set of braces.<br></p><p>What if a new keyword is introduced as a shorthand for using ‘filter’ in this way:<br></p><p> ```<br>for i in arr filteredby i%2 == 0 {<br>    print( i )<br>}<br> ```<br></p><p>or perhaps, keeping the closure syntax and reusing the variable binding:<br></p><p> ```<br>for i in arr.filteredby{ i%2 == 0 } {<br>    print( i )<br>}<br>```<br></p><p><br>&gt; On Jun 10, 2016, at 1:08 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 10, 2016, at 1:06 PM, Rob Norback via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Following Brent&#39;s logic that the for-in where should mimic the switch statement functionality, then this example:<br>&gt;&gt; <br>&gt;&gt; for (eachKey, eachValue) <br>&gt;&gt; where eachValue &gt; 5 <br>&gt;&gt; in theKeyValuePairs {... }<br>&gt;&gt; <br>&gt; <br>&gt; &lt;squish&gt;<br>&gt; <br>&gt; I finally convinced myself of which direction I wanted to go: https://github.com/apple/swift-evolution/pull/362/files<br>&gt; <br>&gt; Related blog post here: http://ericasadun.com/2016/06/10/swift-where-oh-where-can-my-where-clause-be/<br>&gt; <br>&gt; Big thanks to Brent and Wux.<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>&gt; On Jun 10, 2016, at 1:08 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 10, 2016, at 1:06 PM, Rob Norback via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Following Brent&#39;s logic that the for-in where should mimic the switch statement functionality, then this example:<br>&gt;&gt; <br>&gt;&gt; for (eachKey, eachValue) <br>&gt;&gt; where eachValue &gt; 5 <br>&gt;&gt; in theKeyValuePairs {... }<br>&gt;&gt; <br>&gt; <br>&gt; &lt;squish&gt;<br>&gt; <br>&gt; I finally convinced myself of which direction I wanted to go: https://github.com/apple/swift-evolution/pull/362/files<br>&gt; <br>&gt; Related blog post here: http://ericasadun.com/2016/06/10/swift-where-oh-where-can-my-where-clause-be/<br>&gt; <br>&gt; Big thanks to Brent and Wux.<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/a6133dea/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[DRAFT] Regularizing Where Grammar (was Re: Add a while clause to for loops)</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>June 10, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; Following Brent&#39;s logic that the for-in where should mimic the switch statement functionality, then this example:<br>&gt; <br>&gt; for (eachKey, eachValue) <br>&gt; where eachValue &gt; 5 <br>&gt; in theKeyValuePairs {... }<br>&gt; <br>&gt; Should read like:<br>&gt; <br>&gt; for (eachKey, eachValue where eachValue &gt; 5) in theKeyValuePairs {... }<br>&gt; <br>&gt; And,<br>&gt; <br>&gt; for (eachKey, eachValue) <br>&gt; where eachKey % 2 == 0 &amp;&amp; eachValue &gt; 5<br>&gt; in theKeyValuePairs {... }<br>&gt; <br>&gt; Should read like:<br>&gt; <br>&gt; for (eachKey where eachKey % 2 == 0, eachValue where eachValue &gt; 5) <br>&gt; in theKeyValuePairs {... }<br></p><p>I&#39;m not sure why you say that. This compiles:<br></p><p>	switch pair {<br>	case let (key, value) where key % 2 == 0 &amp;&amp; value &gt; 5:<br>		print(&quot;yes&quot;)<br>	default:<br>		print(&quot;no&quot;)<br>	}<br></p><p>While this fails to compile:<br></p><p>	switch pair {<br>	case let (key where key % 2, value where value &gt; 5):<br>		print(&quot;yes&quot;)<br>	default:<br>		print(&quot;no&quot;)<br>	}<br></p><p>So where are your multiple, parenthesized `where` clauses coming from?<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552d80567b8f0241a53cee772470ddd0?s=50"></div><header><strong>[DRAFT] Regularizing Where Grammar (was Re: Add a while clause to for loops)</strong> from <string>Rob Norback</string> &lt;rnorback at gmail.com&gt;<p>June 10, 2016 at 07:00:00pm</p></header><div class="content"><p>Ok so they are aligned. My mistake. Didn&#39;t compile the code first. I got<br>confused by your statement:<br></p><p>enum X { case a, b }<br>switch X.a {<br>case .a, .b where 1 == 0:<br>print(&quot;Matched&quot;)<br>default:<br>print(&quot;Didn&#39;t&quot;)<br>}<br></p><p>The `where` clause only applies to the `.b`, not the `.a`, so the code will<br>print &quot;Matched&quot;. To make it print &quot;Didn&#39;t&quot;, you&#39;d have to write `case .a<br>where 1 == 0, .b where 1 == 0`<br>------<br></p><p>Your example was of where used as a break condition and I was applying the<br>same pattern to the for-in where which is a filter like case-let.<br></p><p>I guess this just illustrates the confusion of the where clauses. Think<br>I&#39;ll just use guards for now.<br>On Fri, Jun 10, 2016 at 12:15 PM Brent Royal-Gordon &lt;brent at architechies.com&gt;<br>wrote:<br></p><p>&gt; &gt; Following Brent&#39;s logic that the for-in where should mimic the switch<br>&gt; statement functionality, then this example:<br>&gt; &gt;<br>&gt; &gt; for (eachKey, eachValue)<br>&gt; &gt; where eachValue &gt; 5<br>&gt; &gt; in theKeyValuePairs {... }<br>&gt; &gt;<br>&gt; &gt; Should read like:<br>&gt; &gt;<br>&gt; &gt; for (eachKey, eachValue where eachValue &gt; 5) in theKeyValuePairs {... }<br>&gt; &gt;<br>&gt; &gt; And,<br>&gt; &gt;<br>&gt; &gt; for (eachKey, eachValue)<br>&gt; &gt; where eachKey % 2 == 0 &amp;&amp; eachValue &gt; 5<br>&gt; &gt; in theKeyValuePairs {... }<br>&gt; &gt;<br>&gt; &gt; Should read like:<br>&gt; &gt;<br>&gt; &gt; for (eachKey where eachKey % 2 == 0, eachValue where eachValue &gt; 5)<br>&gt; &gt; in theKeyValuePairs {... }<br>&gt;<br>&gt; I&#39;m not sure why you say that. This compiles:<br>&gt;<br>&gt;         switch pair {<br>&gt;         case let (key, value) where key % 2 == 0 &amp;&amp; value &gt; 5:<br>&gt;                 print(&quot;yes&quot;)<br>&gt;         default:<br>&gt;                 print(&quot;no&quot;)<br>&gt;         }<br>&gt;<br>&gt; While this fails to compile:<br>&gt;<br>&gt;         switch pair {<br>&gt;         case let (key where key % 2, value where value &gt; 5):<br>&gt;                 print(&quot;yes&quot;)<br>&gt;         default:<br>&gt;                 print(&quot;no&quot;)<br>&gt;         }<br>&gt;<br>&gt; So where are your multiple, parenthesized `where` clauses coming from?<br>&gt;<br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/9d94ff99/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[DRAFT] Regularizing Where Grammar (was Re: Add a while clause to for loops)</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June  9, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Jun 9, 2016, at 1:57 PM, Haravikk &lt;swift-evolution at haravikk.me&gt; wrote:<br>&gt; <br>&gt; I think the idea here is for a change from the first to the second of:<br>&gt; <br>&gt; 	for eachValue in theValues where eachValue.isOdd { … }<br>&gt; 	for eachValue where eachValue.isOdd in theValues { … }<br>&gt; <br>&gt; I’m kind of split on this for a few reasons. The first is that it doesn’t ready quite as well plain like this, however I find it looks a bit better like:<br>&gt; <br>&gt; 	for (eachValue where eachValue.isOdd) in theValues { … }<br></p><p><br>for eachValue where eachValue.isOdd in theValues { ... }<br>for case .Some(let value) where value &gt; 5 in theValues { ... }<br></p><p>vs<br></p><p>for eachValue in theValues where eachValue.isOdd {...}<br>for case .Some(let value) in theValues where value &gt; 5 { ... }<br></p><p>It should be parseable without parens.<br></p><p><br>&gt; Just to clarify that what we’re looking for in theValues is “eachValue where eachValue.isOdd”, though I could probably learn to read it like this without parenthesis. That said, parenthesis lines up nicely with assignment of tuples like:<br>&gt; <br>&gt; 	for (eachKey, eachValue where eachValue &gt; 5) in theKeyValuePairs { … }<br></p><p>for (eachKey, eachValue) where eachValue &gt; 5 in theKeyValuePairs {... }<br></p><p>The where clause is distinct from the pattern<br></p><p>-- E<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/66a63b18/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552d80567b8f0241a53cee772470ddd0?s=50"></div><header><strong>[DRAFT] Regularizing Where Grammar (was Re: Add a while clause to for loops)</strong> from <string>Rob Norback</string> &lt;rnorback at gmail.com&gt;<p>June  9, 2016 at 09:00:00pm</p></header><div class="content"><p>Def like this change, but Erica I&#39;m wondering what changed your mind about<br>the syntax since the last I read you still were concerned by the ambiguity<br>between filtering and exiting.<br>On Thu, Jun 9, 2016 at 1:54 PM Erica Sadun via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Jun 9, 2016, at 1:57 PM, Haravikk &lt;swift-evolution at haravikk.me&gt; wrote:<br>&gt;<br>&gt; I think the idea here is for a change from the first to the second of:<br>&gt;<br>&gt; for eachValue in theValues where eachValue.isOdd { … }<br>&gt; for eachValue where eachValue.isOdd in theValues { … }<br>&gt;<br>&gt; I’m kind of split on this for a few reasons. The first is that it doesn’t<br>&gt; ready quite as well plain like this, however I find it looks a bit better<br>&gt; like:<br>&gt;<br>&gt; for (eachValue where eachValue.isOdd) in theValues { … }<br>&gt;<br>&gt;<br>&gt;<br>&gt; for eachValue where eachValue.isOdd in theValues { ... }<br>&gt; for case .Some(let value) where value &gt; 5 in theValues { ... }<br>&gt;<br>&gt; vs<br>&gt;<br>&gt; for eachValue in theValues where eachValue.isOdd {...}<br>&gt; for case .Some(let value) in theValues where value &gt; 5 { ... }<br>&gt;<br>&gt; It should be parseable without parens.<br>&gt;<br>&gt;<br>&gt; Just to clarify that what we’re looking for in theValues is “eachValue<br>&gt; where eachValue.isOdd”, though I could probably learn to read it like this<br>&gt; without parenthesis. That said, parenthesis lines up nicely with assignment<br>&gt; of tuples like:<br>&gt;<br>&gt; for (eachKey, eachValue where eachValue &gt; 5) in theKeyValuePairs { … }<br>&gt;<br>&gt;<br>&gt; for (eachKey, eachValue) where eachValue &gt; 5 in theKeyValuePairs {... }<br>&gt;<br>&gt; The where clause is distinct from the pattern<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/14418acf/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[DRAFT] Regularizing Where Grammar (was Re: Add a while clause to for loops)</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June  9, 2016 at 03:00:00pm</p></header><div class="content"><p>On Jun 9, 2016, at 3:18 PM, Rob Norback &lt;rnorback at gmail.com&gt; wrote:<br>&gt; <br>&gt; Def like this change, but Erica I&#39;m wondering what changed your mind about the syntax since the last I read you still were concerned by the ambiguity between filtering and exiting.<br></p><p>My concerns remain. However, after going back and forth with Brent, <br>wux, and others, I think my concerns could be addressed in style guides <br>and linters[1]. This draft introduces a major consistency win, I get to rail <br>against actually using the feature when I publicly opine[2], but when <br>used it will be better. (I&#39;m quite curious to see hear from someone on the <br>core team whether this change is practical and whether it improves parsing <br>or makes it harder from the compiler&#39;s point of view.)<br></p><p>In any case, I reserve the right to argue from several different points of <br>view[1, ibid] to see how well each suggestion works (and to hear the feedback <br>and opinions of others) before settling on anything. Until it&#39;s a pull request, it&#39;s <br>not fixed. And even then, I still want to listen to arguments.<br></p><p>-- Erica<br></p><p>[1] As the Italians say, &quot;La donna è mobile &lt;https://en.wikipedia.org/wiki/La_donna_%C3%A8_mobile&gt;&quot;, which translates to &quot;women are furniture.&quot; Ask an Italian.<br>[2] I find a `where`-less `for-in` loop with `guard` statements to read the most clearly and offer the most maintainable approach. My computation tests show that it is in the top efficiency group.<br>[3] Nulla nota 3.<br></p><p><br>&gt; On Thu, Jun 9, 2016 at 1:54 PM Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; On Jun 9, 2016, at 1:57 PM, Haravikk &lt;swift-evolution at haravikk.me &lt;mailto:swift-evolution at haravikk.me&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I think the idea here is for a change from the first to the second of:<br>&gt;&gt; <br>&gt;&gt; 	for eachValue in theValues where eachValue.isOdd { … }<br>&gt;&gt; 	for eachValue where eachValue.isOdd in theValues { … }<br>&gt;&gt; <br>&gt;&gt; I’m kind of split on this for a few reasons. The first is that it doesn’t ready quite as well plain like this, however I find it looks a bit better like:<br>&gt;&gt; <br>&gt;&gt; 	for (eachValue where eachValue.isOdd) in theValues { … }<br>&gt; <br>&gt; <br>&gt; for eachValue where eachValue.isOdd in theValues { ... }<br>&gt; for case .Some(let value) where value &gt; 5 in theValues { ... }<br>&gt; <br>&gt; vs<br>&gt; <br>&gt; for eachValue in theValues where eachValue.isOdd {...}<br>&gt; for case .Some(let value) in theValues where value &gt; 5 { ... }<br>&gt; <br>&gt; It should be parseable without parens.<br>&gt; <br>&gt; <br>&gt;&gt; Just to clarify that what we’re looking for in theValues is “eachValue where eachValue.isOdd”, though I could probably learn to read it like this without parenthesis. That said, parenthesis lines up nicely with assignment of tuples like:<br>&gt;&gt; <br>&gt;&gt; 	for (eachKey, eachValue where eachValue &gt; 5) in theKeyValuePairs { … }<br>&gt; <br>&gt; for (eachKey, eachValue) where eachValue &gt; 5 in theKeyValuePairs {... }<br>&gt; <br>&gt; The where clause is distinct from the pattern<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/320c318a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[DRAFT] Regularizing Where Grammar (was Re: Add a while clause to for loops)</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June 10, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; On Jun 9, 2016, at 11:37 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Jun 9, 2016, at 3:18 PM, Rob Norback &lt;rnorback at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Def like this change, but Erica I&#39;m wondering what changed your mind about the syntax since the last I read you still were concerned by the ambiguity between filtering and exiting.<br>&gt; <br>&gt; My concerns remain. However, after going back and forth with Brent, <br>&gt; wux, and others, I think my concerns could be addressed in style guides <br>&gt; and linters[1]. This draft introduces a major consistency win, I get to rail <br>&gt; against actually using the feature when I publicly opine[2], but when <br>&gt; used it will be better. (I&#39;m quite curious to see hear from someone on the <br>&gt; core team whether this change is practical and whether it improves parsing <br>&gt; or makes it harder from the compiler&#39;s point of view.)<br>&gt; <br>&gt; In any case, I reserve the right to argue from several different points of <br>&gt; view[1, ibid] to see how well each suggestion works (and to hear the feedback <br>&gt; and opinions of others) before settling on anything. Until it&#39;s a pull request, it&#39;s <br>&gt; not fixed. And even then, I still want to listen to arguments.<br>&gt; <br>&gt; -- Erica<br>&gt; <br>&gt; [1] As the Italians say, &quot;La donna è mobile&quot;, which translates to &quot;women are furniture.&quot; Ask an Italian.<br></p><p>Poor Verdi... he wouldn&#39;t recognize his rigoletto in that &#39;new&#39; light...<br></p><p>&gt; [2] I find a `where`-less `for-in` loop with `guard` statements to read the most clearly and offer the most maintainable approach. My computation tests show that it is in the top efficiency group.<br>&gt; [3] Nulla nota 3.<br>&gt; <br>&gt; <br>&gt;&gt; On Thu, Jun 9, 2016 at 1:54 PM Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; On Jun 9, 2016, at 1:57 PM, Haravikk &lt;swift-evolution at haravikk.me&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think the idea here is for a change from the first to the second of:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	for eachValue in theValues where eachValue.isOdd { … }<br>&gt;&gt;&gt;&gt; 	for eachValue where eachValue.isOdd in theValues { … }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’m kind of split on this for a few reasons. The first is that it doesn’t ready quite as well plain like this, however I find it looks a bit better like:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	for (eachValue where eachValue.isOdd) in theValues { … }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; for eachValue where eachValue.isOdd in theValues { ... }<br>&gt;&gt;&gt; for case .Some(let value) where value &gt; 5 in theValues { ... }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; vs<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; for eachValue in theValues where eachValue.isOdd {...}<br>&gt;&gt;&gt; for case .Some(let value) in theValues where value &gt; 5 { ... }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It should be parseable without parens.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Just to clarify that what we’re looking for in theValues is “eachValue where eachValue.isOdd”, though I could probably learn to read it like this without parenthesis. That said, parenthesis lines up nicely with assignment of tuples like:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	for (eachKey, eachValue where eachValue &gt; 5) in theKeyValuePairs { … }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; for (eachKey, eachValue) where eachValue &gt; 5 in theKeyValuePairs {... }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The where clause is distinct from the pattern<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- E<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/6271b5b5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552d80567b8f0241a53cee772470ddd0?s=50"></div><header><strong>[DRAFT] Regularizing Where Grammar (was Re: Add a while clause to for loops)</strong> from <string>Rob Norback</string> &lt;rnorback at gmail.com&gt;<p>June  9, 2016 at 11:00:00pm</p></header><div class="content"><p>After some research I finally get the reference. lol<br></p><p>La donna è mobile<br>Qual piuma al vento,<br>Muta d&#39;accento — e di pensiero.<br>Sempre un amabile,<br>Leggiadro viso,<br>In pianto o in riso, — è menzognero.<br>È sempre misero<br>Chi a lei s&#39;affida,<br>Chi le confida — mal cauto il cuore!<br>Pur mai non sentesi<br>Felice appieno<br>Chi su quel seno — non liba amore!English Translation of &quot;La donna e<br>mobile&quot;Woman<br>is flighty<br>Like a feather in the wind,<br>She changes her voice — and her mind.<br>Always sweet,<br>Pretty face,<br>In tears or in laughter, — she is always lying.<br>Always miserable<br>Is he who trusts her,<br>He who confides in her — his unwary heart!<br>Yet one never feels<br>Fully happy<br>Who on that bosom — does not drink love!<br></p><p>And to fully appreciate it, a youtube link:<br>https://www.youtube.com/watch?v=xCFEk6Y8TmM<br></p><p>Erica, thanks for the Opera lesson, and I look forward to seeing where this<br>proposal goes.<br></p><p>On Thu, Jun 9, 2016 at 3:11 PM L. Mihalkovic &lt;laurent.mihalkovic at gmail.com&gt;<br>wrote:<br></p><p>&gt;<br>&gt; On Jun 9, 2016, at 11:37 PM, Erica Sadun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On Jun 9, 2016, at 3:18 PM, Rob Norback &lt;rnorback at gmail.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt; Def like this change, but Erica I&#39;m wondering what changed your mind about<br>&gt; the syntax since the last I read you still were concerned by the ambiguity<br>&gt; between filtering and exiting.<br>&gt;<br>&gt;<br>&gt; My concerns remain. However, after going back and forth with Brent,<br>&gt; wux, and others, I think my concerns could be addressed in style guides<br>&gt; and linters[1]. This draft introduces a major consistency win, I get to<br>&gt; rail<br>&gt; against actually using the feature when I publicly opine[2], but when<br>&gt; used it will be *better. *(I&#39;m quite curious to see hear from someone on<br>&gt; the<br>&gt; core team whether this change is practical and whether it improves parsing<br>&gt; or makes it harder from the compiler&#39;s point of view.)<br>&gt;<br>&gt; In any case, I reserve the right to argue from several different points of<br>&gt; view[1, *ibid*] to see how well each suggestion works (and to hear the<br>&gt; feedback<br>&gt; and opinions of others) before settling on anything. Until it&#39;s a pull<br>&gt; request, it&#39;s<br>&gt; not fixed. And even then, I still want to listen to arguments.<br>&gt;<br>&gt; -- Erica<br>&gt;<br>&gt; [1] As the Italians say, &quot;La donna è mobile<br>&gt; &lt;https://en.wikipedia.org/wiki/La_donna_%C3%A8_mobile&gt;&quot;, which translates<br>&gt; to &quot;women are furniture.&quot; Ask an Italian.<br>&gt;<br>&gt;<br>&gt; Poor Verdi... he wouldn&#39;t recognize his rigoletto in that &#39;new&#39; light...<br>&gt;<br>&gt; [2] I find a `where`-less `for-in` loop with `guard` statements to read<br>&gt; the most clearly and offer the most maintainable approach. My computation<br>&gt; tests show that it is in the top efficiency group.<br>&gt; [3] Nulla nota 3.<br>&gt;<br>&gt;<br>&gt; On Thu, Jun 9, 2016 at 1:54 PM Erica Sadun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; On Jun 9, 2016, at 1:57 PM, Haravikk &lt;swift-evolution at haravikk.me&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I think the idea here is for a change from the first to the second of:<br>&gt;&gt;<br>&gt;&gt; for eachValue in theValues where eachValue.isOdd { … }<br>&gt;&gt; for eachValue where eachValue.isOdd in theValues { … }<br>&gt;&gt;<br>&gt;&gt; I’m kind of split on this for a few reasons. The first is that it doesn’t<br>&gt;&gt; ready quite as well plain like this, however I find it looks a bit better<br>&gt;&gt; like:<br>&gt;&gt;<br>&gt;&gt; for (eachValue where eachValue.isOdd) in theValues { … }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; for eachValue where eachValue.isOdd in theValues { ... }<br>&gt;&gt; for case .Some(let value) where value &gt; 5 in theValues { ... }<br>&gt;&gt;<br>&gt;&gt; vs<br>&gt;&gt;<br>&gt;&gt; for eachValue in theValues where eachValue.isOdd {...}<br>&gt;&gt; for case .Some(let value) in theValues where value &gt; 5 { ... }<br>&gt;&gt;<br>&gt;&gt; It should be parseable without parens.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Just to clarify that what we’re looking for in theValues is “eachValue<br>&gt;&gt; where eachValue.isOdd”, though I could probably learn to read it like this<br>&gt;&gt; without parenthesis. That said, parenthesis lines up nicely with assignment<br>&gt;&gt; of tuples like:<br>&gt;&gt;<br>&gt;&gt; for (eachKey, eachValue where eachValue &gt; 5) in theKeyValuePairs { … }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; for (eachKey, eachValue) where eachValue &gt; 5 in theKeyValuePairs {... }<br>&gt;&gt;<br>&gt;&gt; The where clause is distinct from the pattern<br>&gt;&gt;<br>&gt;&gt; -- E<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/d0495b2a/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4ab486d7597af4cfe0be33a762150848?s=50"></div><header><strong>[DRAFT] Regularizing Where Grammar (was Re: Add a while clause to for loops)</strong> from <string>Dany St-Amant</string> &lt;dsa.mls at icloud.com&gt;<p>June  9, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; Le 9 juin 2016 à 15:05, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Gist: https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57<br>&gt; <br>&gt; Regularizing Where grammar<br>&gt; Proposal: TBD<br>&gt; Author: Brent Royal-Gordon, Erica Sadun<br>&gt; Status: TBD<br>&gt; Review manager: TBD<br>&gt; Introduction<br>&gt; <br>&gt; This proposal fixes an inconsistency for where clause grammar in Swift language for-in loops.<br>&gt; <br>&gt; Swift Evolution Discussion: Add a while clause to for loops<br>&gt; <br>&gt; Motivation<br>&gt; <br>&gt; Unlike in switch statements and do loops, a for-in loop&#39;s where-clause is separated from the pattern it modifies.<br>&gt; <br>&gt; for case? pattern in expression where-clause? code-block<br>&gt; <br>&gt; case-item-list → pattern where-clause? | pattern where-clause? , case-item-list<br>&gt; <br>&gt; catch pattern? where-clause? code-block<br>&gt; This separation makes the clause harder to associate with the pattern, can confuse users as to whether it modifies the expression or the pattern, and represents an inconsistency in Swift&#39;s grammar. This proposal regularizes the grammar to match other uses.<br>&gt; <br>&gt; Note where clauses in case conditions and optional bindings have been removed in SE-0099.<br>&gt; <br></p><p>Though, in the &#39;catch&#39; and &#39;case&#39; scenarios, as you read the pattern you already know what the pattern is about making the &#39;where&#39; clause easy to understand. In the case of the &#39;for&#39; you have no clue of what the pattern is about until you reach the &#39;in&#39;, so it is only once you have read the &#39;in&#39; expression that you can really understand  impact of the &#39;where&#39;-clause. So even though the &#39;for&#39; do not have the same &#39;pattern where-clause&#39; syntax as the others, the &#39;where&#39; is probably where it belong for the &#39;for&#39;<br></p><p>Dany<br>&gt; Detailed Design<br>&gt; <br>&gt; Current:<br>&gt; <br>&gt; for case? pattern in expression where-clause? code-block<br>&gt; Proposed:<br>&gt; <br>&gt; for case? pattern where-clause? in expression code-block<br>&gt; Impact on Existing Code<br>&gt; <br>&gt; Migration should be easily addressed with a simple fix-it.<br>&gt; <br>&gt; Alternatives Considered<br>&gt; <br>&gt; Not accepting this proposal<br>&gt; <br>&gt; <br>&gt;&gt;&gt; On Jun 8, 2016, at 9:23 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This reads to me as “repeat the following block until this fails to be true”, the conditional binding in this case fails to be true if someCondition(value) isn’t true, so the loop ends. I think the key thing here is that the where clause is for the conditional binding and not the loop itself, so in this respect it behaves exactly like an if or guard statement. Meanwhile:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	for eachValue in theValues where someCondition(eachValue) { … }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Reads as “for everything in theValues do the following if someCondition(eachValue) is also true”, in other words this loop always tries to visit every element of the sequence (a while loop has no implicit awareness of the sequence, it’s really just an if statement that runs over and over). In this case the where clause is part of the loop itself. There may be an argument that where should be renamed on for loops to better distinguish this, but once you consider that there’s no pattern or conditional binding here I think it makes a reasonable amount of sense.<br>&gt;&gt; <br>&gt;&gt; The original sin here was in connecting the `where` clause to the for loop&#39;s sequence expression, rather than its pattern. If `where` were positioned right after the loop variable:<br>&gt;&gt; <br>&gt;&gt; 	for eachValue where someCondition(eachValue) in theValues { … }<br>&gt;&gt; <br>&gt;&gt; It would be much clearer that `where` constrains the values seen by the loop body.<br>&gt;&gt; <br>&gt;&gt; I&#39;m not sure why the `where` clause was placed where it is. I suspect it has something to do with the `where` clause potentially being more complex than the sequence expression, but I was not in the room where it happened, so that&#39;s idle speculation.<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/7d4fd993/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[DRAFT] Regularizing Where Grammar (was Re: Add a while clause to for loops)</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June 10, 2016 at 09:00:00pm</p></header><div class="content"><p>-1   makes no sense to me... <br></p><p>&gt; On Jun 9, 2016, at 9:05 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Gist: https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57<br>&gt; <br>&gt; Regularizing Where grammar<br>&gt; Proposal: TBD<br>&gt; Author: Brent Royal-Gordon, Erica Sadun<br>&gt; Status: TBD<br>&gt; Review manager: TBD<br>&gt; Introduction<br>&gt; <br>&gt; This proposal fixes an inconsistency for where clause grammar in Swift language for-in loops.<br>&gt; <br>&gt; Swift Evolution Discussion: Add a while clause to for loops<br>&gt; <br>&gt; Motivation<br>&gt; <br>&gt; Unlike in switch statements and do loops, a for-in loop&#39;s where-clause is separated from the pattern it modifies.<br>&gt; <br>&gt; for case? pattern in expression where-clause? code-block<br>&gt; <br>&gt; case-item-list → pattern where-clause? | pattern where-clause? , case-item-list<br>&gt; <br>&gt; catch pattern? where-clause? code-block<br>&gt; This separation makes the clause harder to associate with the pattern, can confuse users as to whether it modifies the expression or the pattern, and represents an inconsistency in Swift&#39;s grammar. This proposal regularizes the grammar to match other uses.<br>&gt; <br>&gt; Note where clauses in case conditions and optional bindings have been removed in SE-0099.<br>&gt; <br>&gt; Detailed Design<br>&gt; <br>&gt; Current:<br>&gt; <br>&gt; for case? pattern in expression where-clause? code-block<br>&gt; Proposed:<br>&gt; <br>&gt; for case? pattern where-clause? in expression code-block<br>&gt; Impact on Existing Code<br>&gt; <br>&gt; Migration should be easily addressed with a simple fix-it.<br>&gt; <br>&gt; Alternatives Considered<br>&gt; <br>&gt; Not accepting this proposal<br>&gt; <br>&gt; <br>&gt;&gt;&gt; On Jun 8, 2016, at 9:23 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This reads to me as “repeat the following block until this fails to be true”, the conditional binding in this case fails to be true if someCondition(value) isn’t true, so the loop ends. I think the key thing here is that the where clause is for the conditional binding and not the loop itself, so in this respect it behaves exactly like an if or guard statement. Meanwhile:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	for eachValue in theValues where someCondition(eachValue) { … }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Reads as “for everything in theValues do the following if someCondition(eachValue) is also true”, in other words this loop always tries to visit every element of the sequence (a while loop has no implicit awareness of the sequence, it’s really just an if statement that runs over and over). In this case the where clause is part of the loop itself. There may be an argument that where should be renamed on for loops to better distinguish this, but once you consider that there’s no pattern or conditional binding here I think it makes a reasonable amount of sense.<br>&gt;&gt; <br>&gt;&gt; The original sin here was in connecting the `where` clause to the for loop&#39;s sequence expression, rather than its pattern. If `where` were positioned right after the loop variable:<br>&gt;&gt; <br>&gt;&gt; 	for eachValue where someCondition(eachValue) in theValues { … }<br>&gt;&gt; <br>&gt;&gt; It would be much clearer that `where` constrains the values seen by the loop body.<br>&gt;&gt; <br>&gt;&gt; I&#39;m not sure why the `where` clause was placed where it is. I suspect it has something to do with the `where` clause potentially being more complex than the sequence expression, but I was not in the room where it happened, so that&#39;s idle speculation.<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/aa398290/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[DRAFT] Regularizing Where Grammar (was Re: Add a while clause to for loops)</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>June 10, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; Unlike in switch statements and do loops, a for-in loop&#39;s where-clause is separated from the pattern it modifies.<br></p><p>(I think &quot;do loops&quot; is supposed to be &quot;do-catch statements&quot;?)<br></p><p>&gt; for case? pattern in expression where-clause? code-block<br>&gt; <br>&gt; case-item-list → pattern where-clause? | pattern where-clause? , case-item-list<br>&gt; <br>&gt; catch pattern? where-clause? code-block<br>&gt; <br>&gt; This separation makes the clause harder to associate with the pattern, can confuse users as to whether it modifies the expression or the pattern, and represents an inconsistency in Swift&#39;s grammar. This proposal regularizes the grammar to match other uses.<br></p><p>I&#39;m definitely in favor of this. (I should be—I&#39;m listed as coauthor.)<br></p><p>While I&#39;ve never struggled with the `where` clause—I always assumed it was a filter—it never read right to me. This way does. When I say it out loud, &quot;for x where x less than 10 in numbers&quot; simply seems *far* easier to understand than &quot;for x in numbers where x less than 10&quot;. There&#39;s something about the way the &quot;where&quot; combines with &quot;for&quot; that clarifies the entire statement.<br></p><p>I also think this better matches the grammar of the `case` statements in a `switch`. Erica quotes the formal grammar above, but you can actually see this in running code: in a `switch` statement, a compound case with a `where` clause like:<br></p><p>	case .foo, .bar where baz():<br></p><p>Only applies the `where` clause to the last pattern (.bar, but not .foo). That&#39;s because the rule is that the `where` belongs to the *pattern*, not the entire statement.<br></p><p>As a question of the proposal&#39;s drafting—as opposed to the feature being proposed—I do think that we should include an example of code before and after the change. The isOdd example ought to do.<br></p><p>&gt; Note where clauses in case conditions and optional bindings have been removed in SE-0099.<br></p><p>I think there&#39;s actually a case to be made (no pun intended) for bringing `where` back in case conditions, but with an analogous movement of the clause&#39;s position. In other words, where (post-SE-0099) we have this production:<br></p><p>	case-condition → &quot;case&quot; pattern initializer<br></p><p>We would change it to:<br></p><p>	case-condition → &quot;case&quot; pattern where-clause? initializer<br></p><p>In use, this would look like:<br></p><p>	if case .some(let Point.cartesian(x, y)) where x &lt; y = json[&quot;rect&quot;]?[&quot;origin&quot;].flatMap(.init(rawValue:)) { … }<br></p><p>Of course, the above could equally be written without a `where` clause:<br></p><p>	if case .some(let Point.cartesian(x, y)) = json[&quot;rect&quot;]?[&quot;origin&quot;].flatMap(.init(rawValue:)), x &lt; y { … }<br></p><p>But nevertheless, I think it&#39;s a good idea. Why? Two reasons:<br></p><p>1. Consistency. If this proposal is accepted, all other `case` statements will be able to take a `where` clause in the exact same position.<br></p><p>2. Expressiveness. In its new position, the `where` clause is actually in the middle—not at the end—of the case condition. This makes its role much more clear: `where` in a case condition is for refining the pattern to reject things which can&#39;t quite be expressed purely as a pattern. With `where` in this position, you will not be tempted to use it for a truly unrelated condition, as you might if `where` were after the initializer.<br></p><p>You might be able to make an analogous argument for optional bindings, turning this:<br></p><p>	optional-binding-head → &quot;let&quot; pattern initializer<br></p><p>Into this:<br></p><p>	optional-binding-head → &quot;let&quot; pattern where-clause? initializer<br></p><p>With results like:<br></p><p>	if let x where x &gt; 5 = optionalX { … }<br></p><p>I&#39;m less convinced this is a good idea; there&#39;s no optional binding anywhere else in the language to be consistent with, the uses of a `where` clause are limited since an optional binding only captures one value anyway, and I don&#39;t think it makes much sense to complicate such a simple syntax.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[DRAFT] Regularizing Where Grammar (was Re: Add a while clause to for loops)</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 10, 2016 at 02:00:00pm</p></header><div class="content"><p>On Fri, Jun 10, 2016 at 2:10 PM, Brent Royal-Gordon via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; &gt; Unlike in switch statements and do loops, a for-in loop&#39;s where-clause<br>&gt; is separated from the pattern it modifies.<br>&gt;<br>&gt; (I think &quot;do loops&quot; is supposed to be &quot;do-catch statements&quot;?)<br>&gt;<br>&gt; &gt; for case? pattern in expression where-clause? code-block<br>&gt; &gt;<br>&gt; &gt; case-item-list → pattern where-clause? | pattern where-clause? ,<br>&gt; case-item-list<br>&gt; &gt;<br>&gt; &gt; catch pattern? where-clause? code-block<br>&gt; &gt;<br>&gt; &gt; This separation makes the clause harder to associate with the pattern,<br>&gt; can confuse users as to whether it modifies the expression or the pattern,<br>&gt; and represents an inconsistency in Swift&#39;s grammar. This proposal<br>&gt; regularizes the grammar to match other uses.<br>&gt;<br>&gt; I&#39;m definitely in favor of this. (I should be—I&#39;m listed as coauthor.)<br>&gt;<br>&gt; While I&#39;ve never struggled with the `where` clause—I always assumed it was<br>&gt; a filter—it never read right to me. This way does. When I say it out loud,<br>&gt; &quot;for x where x less than 10 in numbers&quot; simply seems *far* easier to<br>&gt; understand than &quot;for x in numbers where x less than 10&quot;. There&#39;s something<br>&gt; about the way the &quot;where&quot; combines with &quot;for&quot; that clarifies the entire<br>&gt; statement.<br>&gt;<br>&gt; I also think this better matches the grammar of the `case` statements in a<br>&gt; `switch`. Erica quotes the formal grammar above, but you can actually see<br>&gt; this in running code: in a `switch` statement, a compound case with a<br>&gt; `where` clause like:<br>&gt;<br>&gt;         case .foo, .bar where baz():<br>&gt;<br>&gt; Only applies the `where` clause to the last pattern (.bar, but not .foo).<br>&gt; That&#39;s because the rule is that the `where` belongs to the *pattern*, not<br>&gt; the entire statement.<br>&gt;<br>&gt; As a question of the proposal&#39;s drafting—as opposed to the feature being<br>&gt; proposed—I do think that we should include an example of code before and<br>&gt; after the change. The isOdd example ought to do.<br>&gt;<br>&gt; &gt; Note where clauses in case conditions and optional bindings have been<br>&gt; removed in SE-0099.<br>&gt;<br>&gt; I think there&#39;s actually a case to be made (no pun intended) for bringing<br>&gt; `where` back in case conditions, but with an analogous movement of the<br>&gt; clause&#39;s position. In other words, where (post-SE-0099) we have this<br>&gt; production:<br>&gt;<br>&gt;         case-condition → &quot;case&quot; pattern initializer<br>&gt;<br>&gt; We would change it to:<br>&gt;<br>&gt;         case-condition → &quot;case&quot; pattern where-clause? initializer<br>&gt;<br>&gt; In use, this would look like:<br>&gt;<br>&gt;         if case .some(let Point.cartesian(x, y)) where x &lt; y =<br>&gt; json[&quot;rect&quot;]?[&quot;origin&quot;].flatMap(.init(rawValue:)) { … }<br>&gt;<br></p><p>I&#39;m concerned here about the `x &lt; y = json...` part of this, if not for the<br>parser then for the human reader. I like the thought in principle though.<br></p><p><br>&gt;<br>&gt; Of course, the above could equally be written without a `where` clause:<br>&gt;<br>&gt;         if case .some(let Point.cartesian(x, y)) =<br>&gt; json[&quot;rect&quot;]?[&quot;origin&quot;].flatMap(.init(rawValue:)), x &lt; y { … }<br>&gt;<br>&gt; But nevertheless, I think it&#39;s a good idea. Why? Two reasons:<br>&gt;<br>&gt; 1. Consistency. If this proposal is accepted, all other `case` statements<br>&gt; will be able to take a `where` clause in the exact same position.<br>&gt;<br>&gt; 2. Expressiveness. In its new position, the `where` clause is actually in<br>&gt; the middle—not at the end—of the case condition. This makes its role much<br>&gt; more clear: `where` in a case condition is for refining the pattern to<br>&gt; reject things which can&#39;t quite be expressed purely as a pattern. With<br>&gt; `where` in this position, you will not be tempted to use it for a truly<br>&gt; unrelated condition, as you might if `where` were after the initializer.<br>&gt;<br>&gt; You might be able to make an analogous argument for optional bindings,<br>&gt; turning this:<br>&gt;<br>&gt;         optional-binding-head → &quot;let&quot; pattern initializer<br>&gt;<br>&gt; Into this:<br>&gt;<br>&gt;         optional-binding-head → &quot;let&quot; pattern where-clause? initializer<br>&gt;<br>&gt; With results like:<br>&gt;<br>&gt;         if let x where x &gt; 5 = optionalX { … }<br>&gt;<br>&gt; I&#39;m less convinced this is a good idea; there&#39;s no optional binding<br>&gt; anywhere else in the language to be consistent with, the uses of a `where`<br>&gt; clause are limited since an optional binding only captures one value<br>&gt; anyway, and I don&#39;t think it makes much sense to complicate such a simple<br>&gt; syntax.<br>&gt;<br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/20eaa235/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[DRAFT] Regularizing Where Grammar (was Re: Add a while clause to for loops)</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>June 10, 2016 at 10:00:00pm</p></header><div class="content"><p>-1<br></p><p>&gt; Am 10.06.2016 um 21:10 schrieb Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; if case .some(let Point.cartesian(x, y)) where x &lt; y = json[&quot;rect&quot;]?[&quot;origin&quot;].flatMap(.init(rawValue:)) { … }<br></p><p>This: `where x &lt; y = json[…]` is *very* unreadable and probably unparseable as it is missing a delimiter between the boolean expression and the expression behind the assignment operator. And I do not count the assignment operator as a sufficient delimiter.<br></p><p><br>I’ll give the following counterargument against this shuffling around of `where` or trying to eliminate it:<br></p><p>	if case .some(let x) = someExpression where x &gt; 0<br></p><p>	for x in xs where x &gt; 0<br></p><p>These are actually very consistent in their grammar when you look at it like follows:<br></p><p>	&lt;target&gt; &lt;assignment op&gt; &lt;source&gt; where &lt;condition&gt;<br></p><p><br>	if case .some(let x) = someExpression where x &gt; 0<br></p><p>	target: `case .some(let x)`<br>	assignment op: `=`<br>	source: `someExpression`<br>	condition: `x &gt; 0`<br></p><p><br>	for x in xs where x &gt; 0<br></p><p>	target: `x`<br>	assignment op: `in`<br>	source: `xs`<br>	condition: `x &gt; 0`<br></p><p><br>That is I’m arguing the `where` grammar is already quite regular and should not be changed. And yes, I’d like to have `where` back in `case`. And `let`.<br></p><p>-Thorsten<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/442afc2a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[DRAFT] Regularizing Where Grammar (was Re: Add a while clause to for loops)</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 10, 2016 at 03:00:00pm</p></header><div class="content"><p>On Fri, Jun 10, 2016 at 3:15 PM, Thorsten Seitz via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; -1<br>&gt;<br>&gt; Am 10.06.2016 um 21:10 schrieb Brent Royal-Gordon via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt;:<br>&gt;<br>&gt; if case .some(let Point.cartesian(x, y)) where x &lt; y =<br>&gt; json[&quot;rect&quot;]?[&quot;origin&quot;].flatMap(.init(rawValue:)) { … }<br>&gt;<br>&gt;<br>&gt; This: `where x &lt; y = json[…]` is *very* unreadable and probably<br>&gt; unparseable as it is missing a delimiter between the boolean expression and<br>&gt; the expression behind the assignment operator. And I do not count the<br>&gt; assignment operator as a sufficient delimiter.<br>&gt;<br></p><p>Agreed. Unless this readability issue can be solved, I&#39;m concerned about<br>this particular reshuffling.<br></p><p><br>&gt;<br>&gt; I’ll give the following counterargument against this shuffling around of<br>&gt; `where` or trying to eliminate it:<br>&gt;<br>&gt; if case .some(let x) = someExpression where x &gt; 0<br>&gt;<br>&gt; for x in xs where x &gt; 0<br>&gt;<br>&gt; These are actually very consistent in their grammar when you look at it<br>&gt; like follows:<br>&gt;<br>&gt; &lt;target&gt; &lt;assignment op&gt; &lt;source&gt; where &lt;condition&gt;<br>&gt;<br>&gt;<br>&gt; if case .some(let x) = someExpression where x &gt; 0<br>&gt;<br>&gt; target: `case .some(let x)`<br>&gt; assignment op: `=`<br>&gt; source: `someExpression`<br>&gt; condition: `x &gt; 0`<br>&gt;<br>&gt;<br>&gt; for x in xs where x &gt; 0<br>&gt;<br>&gt; target: `x`<br>&gt; assignment op: `in`<br>&gt; source: `xs`<br>&gt; condition: `x &gt; 0`<br>&gt;<br>&gt;<br>&gt; That is I’m arguing the `where` grammar is already quite regular and<br>&gt; should not be changed. And yes, I’d like to have `where` back in `case`.<br>&gt; And `let`.<br>&gt;<br></p><p>The inconsistency argument is that this grammar is inconsistent with usage<br>when switching over cases, etc., not that it&#39;s inconsistent with usage in<br>`if`.<br></p><p>Principally, though, the problem is that `where` leaves implied but<br>unanswered the question of &quot;what happens where not?&quot; For an `if` statement<br>the answer is inherent to the word &quot;if,&quot; but because it is inherent, it<br>becomes redundant and can be replaced with a comma. Likewise `while`. For a<br>`for` loop, `where` cannot be replaced with a comma because it is not<br>implied by the word `for`; but because it is not redundant, it is also not<br>inherent in the meaning of the word &quot;where.&quot;<br></p><p><br>&gt;<br>&gt; -Thorsten<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/b651bdcd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[DRAFT] Regularizing Where Grammar (was Re: Add a while clause to for loops)</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>June 10, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; Am 10.06.2016 um 22:26 schrieb Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt;:<br>&gt; <br>&gt; <br>&gt; <br>&gt; On Fri, Jun 10, 2016 at 3:15 PM, Thorsten Seitz via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; -1<br>&gt; <br>&gt;&gt; Am 10.06.2016 um 21:10 schrieb Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt;&gt; <br>&gt;&gt; if case .some(let Point.cartesian(x, y)) where x &lt; y = json[&quot;rect&quot;]?[&quot;origin&quot;].flatMap(.init(rawValue:)) { … }<br>&gt; <br>&gt; This: `where x &lt; y = json[…]` is *very* unreadable and probably unparseable as it is missing a delimiter between the boolean expression and the expression behind the assignment operator. And I do not count the assignment operator as a sufficient delimiter.<br>&gt; <br>&gt; Agreed. Unless this readability issue can be solved, I&#39;m concerned about this particular reshuffling.<br>&gt;  <br>&gt; <br>&gt; I’ll give the following counterargument against this shuffling around of `where` or trying to eliminate it:<br>&gt; <br>&gt; 	if case .some(let x) = someExpression where x &gt; 0<br>&gt; <br>&gt; 	for x in xs where x &gt; 0<br>&gt; <br>&gt; These are actually very consistent in their grammar when you look at it like follows:<br>&gt; <br>&gt; 	&lt;target&gt; &lt;assignment op&gt; &lt;source&gt; where &lt;condition&gt;<br>&gt; <br>&gt; <br>&gt; 	if case .some(let x) = someExpression where x &gt; 0<br>&gt; <br>&gt; 	target: `case .some(let x)`<br>&gt; 	assignment op: `=`<br>&gt; 	source: `someExpression`<br>&gt; 	condition: `x &gt; 0`<br>&gt; <br>&gt; <br>&gt; 	for x in xs where x &gt; 0<br>&gt; <br>&gt; 	target: `x`<br>&gt; 	assignment op: `in`<br>&gt; 	source: `xs`<br>&gt; 	condition: `x &gt; 0`<br>&gt; <br>&gt; <br>&gt; That is I’m arguing the `where` grammar is already quite regular and should not be changed. And yes, I’d like to have `where` back in `case`. And `let`.<br>&gt; <br>&gt; The inconsistency argument is that this grammar is inconsistent with usage when switching over cases, etc., not that it&#39;s inconsistent with usage in `if`.<br></p><p>For switching the whole &lt;assignment op&gt; &lt;source&gt; part is not needed because the &lt;source&gt; is the expression behind `switch`.<br>I don’t have a problem if that part vanishes from the middle of the grammar instead of from the end.<br></p><p><br>&gt; <br>&gt; Principally, though, the problem is that `where` leaves implied but unanswered the question of &quot;what happens where not?&quot; For an `if` statement the answer is inherent to the word &quot;if,&quot; but because it is inherent, it becomes redundant and can be replaced with a comma.<br></p><p>I do not agree with that replacement but I’m glad that at least we didn’t end up with semicolons (shudder)...<br></p><p><br>&gt; Likewise `while`. For a `for` loop, `where` cannot be replaced with a comma because it is not implied by the word `for`; but because it is not redundant, it is also not inherent in the meaning of the word &quot;where.“<br></p><p>I don’t agree. `for x in xs where condition` is crystal clear to me. It is just like a mathematical set with a condition reads:<br></p><p>{ x ∈ xs | x &gt; 0 } reads as &quot;x in xs where x greater than zero“<br></p><p>So why do you claim the meaning of `where` is unclear in a `for` loop?<br></p><p>-Thorsten<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/f6ea8858/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[DRAFT] Regularizing Where Grammar (was Re: Add a while clause to for loops)</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>June 11, 2016 at 12:00:00pm</p></header><div class="content"><p>-1 I have similar concerns on the mental ambiguity of the direction this is going.<br></p><p>&gt; On 10 Jun 2016, at 22:15, Thorsten Seitz via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; -1<br>&gt; <br>&gt;&gt; Am 10.06.2016 um 21:10 schrieb Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt; <br>&gt;&gt; if case .some(let Point.cartesian(x, y)) where x &lt; y = json[&quot;rect&quot;]?[&quot;origin&quot;].flatMap(.init(rawValue:)) { … }<br>&gt; <br>&gt; This: `where x &lt; y = json[…]` is *very* unreadable and probably unparseable as it is missing a delimiter between the boolean expression and the expression behind the assignment operator. And I do not count the assignment operator as a sufficient delimiter.<br>&gt; <br>&gt; <br>&gt; I’ll give the following counterargument against this shuffling around of `where` or trying to eliminate it:<br>&gt; <br>&gt; 	if case .some(let x) = someExpression where x &gt; 0<br>&gt; <br>&gt; 	for x in xs where x &gt; 0<br>&gt; <br>&gt; These are actually very consistent in their grammar when you look at it like follows:<br>&gt; <br>&gt; 	&lt;target&gt; &lt;assignment op&gt; &lt;source&gt; where &lt;condition&gt;<br>&gt; <br>&gt; <br>&gt; 	if case .some(let x) = someExpression where x &gt; 0<br>&gt; <br>&gt; 	target: `case .some(let x)`<br>&gt; 	assignment op: `=`<br>&gt; 	source: `someExpression`<br>&gt; 	condition: `x &gt; 0`<br>&gt; <br>&gt; <br>&gt; 	for x in xs where x &gt; 0<br>&gt; <br>&gt; 	target: `x`<br>&gt; 	assignment op: `in`<br>&gt; 	source: `xs`<br>&gt; 	condition: `x &gt; 0`<br>&gt; <br>&gt; <br>&gt; That is I’m arguing the `where` grammar is already quite regular and should not be changed. And yes, I’d like to have `where` back in `case`. And `let`.<br>&gt; <br>&gt; -Thorsten<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160611/768c6c20/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[DRAFT] Regularizing Where Grammar (was Re: Add a while clause to for loops)</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>June 11, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On 10 Jun 2016, at 21:15, Thorsten Seitz via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; -1<br>&gt; <br>&gt;&gt; Am 10.06.2016 um 21:10 schrieb Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt;&gt; <br>&gt;&gt; if case .some(let Point.cartesian(x, y)) where x &lt; y = json[&quot;rect&quot;]?[&quot;origin&quot;].flatMap(.init(rawValue:)) { … }<br>&gt; <br>&gt; This: `where x &lt; y = json[…]` is *very* unreadable and probably unparseable as it is missing a delimiter between the boolean expression and the expression behind the assignment operator. And I do not count the assignment operator as a sufficient delimiter.<br></p><p>This was why I mentioned parenthesis earlier, this example could be formatted more easily if the where clause moved into the case like so:<br></p><p>	if case .some(let Point.cartesian(x, y) where x &lt; y) = json[“rect”]?[“origin”].flatMap(.init(rawValue:)) { … }<br></p><p>Though it’s probably a good candidate for spreading onto multiple lines in the first place, but I think that moving the where clause into the parenthesis clarifies its usage a bit if we have to move the where clause.<br></p><p>&gt; I’ll give the following counterargument against this shuffling around of `where` or trying to eliminate it:<br>&gt; <br>&gt; 	if case .some(let x) = someExpression where x &gt; 0<br>&gt; <br>&gt; 	for x in xs where x &gt; 0<br>&gt; <br>&gt; These are actually very consistent in their grammar when you look at it like follows:<br>&gt; <br>&gt; 	&lt;target&gt; &lt;assignment op&gt; &lt;source&gt; where &lt;condition&gt;<br>&gt; <br>&gt; <br>&gt; 	if case .some(let x) = someExpression where x &gt; 0<br>&gt; <br>&gt; 	target: `case .some(let x)`<br>&gt; 	assignment op: `=`<br>&gt; 	source: `someExpression`<br>&gt; 	condition: `x &gt; 0`<br>&gt; <br>&gt; <br>&gt; 	for x in xs where x &gt; 0<br>&gt; <br>&gt; 	target: `x`<br>&gt; 	assignment op: `in`<br>&gt; 	source: `xs`<br>&gt; 	condition: `x &gt; 0`<br>&gt; <br>&gt; <br>&gt; That is I’m arguing the `where` grammar is already quite regular and should not be changed. And yes, I’d like to have `where` back in `case`. And `let`.<br></p><p>Still, I’m inclined to agree with this. I find the where clause coming last pretty logical as I interpret it as reading like “complete this pattern match only if this condition is true”, or in the for loop “do the following only if this condition is true”, the latter could be clarified if we could write it as for x in xs where x &gt; 0 do { … }, though that’s how I tend to read blocks to begin with (I’d just like to be able to use the do keyword to make it explicit).<br></p><p>The other thing I like about keeping the where clause at the end is that it keeps the fine detail to last, allowing the more significant action/intent to be described first. It’s tricky, there are merits to both options, but I’d say that trailing where is more consistent with the new trailing where on functions; this similarly lets you declare the most significant piece first, then fill in the details later.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160611/f3fd4664/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
