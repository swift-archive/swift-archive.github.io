<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] SE-0044 Import as Member</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>March 15, 2016 at 09:00:00am</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of SE-0044 “Import as Member&quot; begins now and runs through March 22, 2016. The proposal is available here:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0044-import-as-member.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/NNNN-proposal.md&gt;<br>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br></p><p>Proposal link:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0044-import-as-member.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/NNNN-proposal.md&gt;<br>Reply text<br></p><p>Other replies<br> &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>What is your evaluation of the proposal?<br>Is the problem being addressed significant enough to warrant a change to Swift?<br>Does this proposal fit well with the feel and direction of Swift?<br>If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>More information about the Swift evolution process is available at<br></p><p>https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>Thank you,<br></p><p>Doug Gregor<br></p><p>Review Manager<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution-announce/attachments/20160315/fade432d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0044 Import as Member</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>March 15, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Mar 15, 2016, at 9:31 AM, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0044 “Import as Member&quot; begins now and runs through March 22, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0044-import-as-member.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0044-import-as-member.md&gt;<br>Sigh. Real link here:<br></p><p> https://github.com/apple/swift-evolution/blob/master/proposals/0044-import-as-member.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0044-import-as-member.md&gt;<br></p><p>	- Doug<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160315/14aa96e1/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3befbef375e71fb85d3bf266f4dabee0?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0044 Import as Member</strong> from <string>Karsten Bruns</string> &lt;karsten at bruns.me&gt;<p>March 15, 2016 at 05:00:00pm</p></header><div class="content"><p>First link does not work.<br></p><p><br>&gt; On 15 Mar 2016, at 17:31, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0044 “Import as Member&quot; begins now and runs through March 22, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0044-import-as-member.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/NNNN-proposal.md&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0044-import-as-member.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/NNNN-proposal.md&gt;<br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt;  &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; What is your evaluation of the proposal?<br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; Thank you,<br>&gt; <br>&gt; Doug Gregor<br>&gt; <br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160315/7b7d6b9c/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/283bdc6ec76dd4d16b7a8234222e55d4?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0044 Import as Member</strong> from <string>Michel Fortin</string> &lt;michel.fortin at michelf.ca&gt;<p>March 15, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; What is your evaluation of the proposal?<br></p><p>Looks like a very good idea. Less wrapper code means less possibility of an error, a less cluttered call stack when debugging, and faster compile times (because of less code).<br></p><p>It looks like it&#39;ll work well for importing Apple headers. I&#39;m a bit worried however about what it&#39;ll do for APIs that have a different design or syntax conventions. What happens with this function for instance?<br></p><p>	int sqlite3_stmt_readonly(sqlite3_stmt *pStmt);<br></p><p>Reading the proposal, it isn&#39;t all that clear where it stops. Does automatic inference work with snake-case? Should it? Does it import functions with unmanaged pointers in the first position as mutating methods? Hopefully not. Is this going to make some APIs seemingly inconsistent as to what becomes a member and what stays global? Probably. I can&#39;t tell really from reading the proposal.<br></p><p><br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>It makes code more readable, less alien in a Swift program, and by having less wrapper code it just makes everything simpler. I think that is an important improvement.<br></p><p><br>&gt; Does this proposal fit well with the feel and direction of Swift?<br></p><p>It fits very well with the path taken for renaming Objective-C methods to have more Swifty names. Swift 3 seems to be the right release for this change.<br></p><p><br>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>N/A<br></p><p><br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick reading, then looked at some non-Apple C APIs trying to figure out what the automatic inference heuristics would do to them.<br></p><p><br>-- <br>Michel Fortin<br>https://michelf.ca<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8dfc6932943f38e7a7de48be3194f13c?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0044 Import as Member</strong> from <string>Michael Ilseman</string> &lt;milseman at apple.com&gt;<p>March 15, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Mar 15, 2016, at 5:12 PM, Michel Fortin via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; What is your evaluation of the proposal?<br>&gt; <br>&gt; Looks like a very good idea. Less wrapper code means less possibility of an error, a less cluttered call stack when debugging, and faster compile times (because of less code).<br>&gt; <br>&gt; It looks like it&#39;ll work well for importing Apple headers. I&#39;m a bit worried however about what it&#39;ll do for APIs that have a different design or syntax conventions. What happens with this function for instance?<br>&gt; <br>&gt; 	int sqlite3_stmt_readonly(sqlite3_stmt *pStmt);<br>&gt; <br>&gt; Reading the proposal, it isn&#39;t all that clear where it stops. Does automatic inference work with snake-case? Should it? Does it import functions with unmanaged pointers in the first position as mutating methods? Hopefully not. Is this going to make some APIs seemingly inconsistent as to what becomes a member and what stays global? Probably. I can&#39;t tell really from reading the proposal.<br>&gt; <br></p><p>There’s two things present in this proposal, manual annotation and automatic inference. Projects such as sqlite3 can use manual annotation, so that they can control their APIs and have a chance to import e.g. sqlite3_stmt_readonly as a member on a type (perhaps also named/defined otherwise, e.g. through existing attributes or other proposed elsewhere).<br></p><p>Automatic inference, at least in the near term, will not be turned on by default for all C APIs, but will start out as opt-in. In the near term, heuristics and techniques are tuned for CF-style naming conventions. Future work could be broadening this, and I think having something to also reason through snake_case is definitely possible. Future work could expand the inference system to have many more (configurable) heuristics, but that’s out of scope for this proposal. But, unless the project opts-in, the inference system will not try to infer how to import as a member.<br></p><p>&gt; <br>&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; It makes code more readable, less alien in a Swift program, and by having less wrapper code it just makes everything simpler. I think that is an important improvement.<br>&gt; <br>&gt; <br>&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; It fits very well with the path taken for renaming Objective-C methods to have more Swifty names. Swift 3 seems to be the right release for this change.<br>&gt; <br>&gt; <br>&gt;&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; N/A<br>&gt; <br>&gt; <br>&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; Quick reading, then looked at some non-Apple C APIs trying to figure out what the automatic inference heuristics would do to them.<br>&gt; <br></p><p>I am very interested in improving non-Apple C APIs as well. I’m not sure how much will be in scope for Swift 3, though.<br></p><p>&gt; <br>&gt; -- <br>&gt; Michel Fortin<br>&gt; https://michelf.ca<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/283bdc6ec76dd4d16b7a8234222e55d4?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0044 Import as Member</strong> from <string>Michel Fortin</string> &lt;michel.fortin at michelf.ca&gt;<p>March 16, 2016 at 07:00:00am</p></header><div class="content"><p>Le 15 mars 2016 à 20:31, Michael Ilseman &lt;milseman at apple.com&gt; a écrit :<br></p><p>&gt; Automatic inference, at least in the near term, will not be turned on by default for all C APIs, but will start out as opt-in. In the near term, heuristics and techniques are tuned for CF-style naming conventions. Future work could be broadening this, and I think having something to also reason through snake_case is definitely possible. Future work could expand the inference system to have many more (configurable) heuristics, but that’s out of scope for this proposal. But, unless the project opts-in, the inference system will not try to infer how to import as a member.<br></p><p><br>That clarifies things and it makes perfect sense. Thanks. :-)<br></p><p>-- <br>Michel Fortin<br>https://michelf.ca<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8dfc6932943f38e7a7de48be3194f13c?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0044 Import as Member</strong> from <string>Michael Ilseman</string> &lt;milseman at apple.com&gt;<p>March 16, 2016 at 02:00:00pm</p></header><div class="content"><p>Thanks for pointing out the ambiguity! I added an amendment to the proposal in https://github.com/apple/swift-evolution/pull/214<br></p><p><br></p><p><br>&gt; On Mar 16, 2016, at 4:58 AM, Michel Fortin &lt;michel.fortin at michelf.ca&gt; wrote:<br>&gt; <br>&gt; Le 15 mars 2016 à 20:31, Michael Ilseman &lt;milseman at apple.com&gt; a écrit :<br>&gt; <br>&gt;&gt; Automatic inference, at least in the near term, will not be turned on by default for all C APIs, but will start out as opt-in. In the near term, heuristics and techniques are tuned for CF-style naming conventions. Future work could be broadening this, and I think having something to also reason through snake_case is definitely possible. Future work could expand the inference system to have many more (configurable) heuristics, but that’s out of scope for this proposal. But, unless the project opts-in, the inference system will not try to infer how to import as a member.<br>&gt; <br>&gt; <br>&gt; That clarifies things and it makes perfect sense. Thanks. :-)<br>&gt; <br>&gt; -- <br>&gt; Michel Fortin<br>&gt; https://michelf.ca<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0044 Import as Member</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>March 16, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; 	• What is your evaluation of the proposal?<br></p><p>Overall in favor.<br></p><p>I don&#39;t like the getter syntax:<br></p><p>	float Point3DGetRadius(Point3D point) __attribute__((swift_name(&quot;getter:Point3D.radius(self:)&quot;)));<br></p><p>I think we would be better off thinking of this instead as adding an accessor to a property, perhaps with a syntax along these lines:<br></p><p>	float Point3DGetRadius(Point3D point) __attribute__((swift_name(&quot;Point3D.radius.get(self:)&quot;)));<br></p><p>However, talking about operations-associated-with-a-property seems to be a common theme with the behaviors proposal; you may want to think about a syntax that could be used for both of them (and perhaps in demangling and diagnostics as well).<br></p><p>I also find it odd that this proposal doesn&#39;t address subscripts.<br></p><p>I assume that, on types imported as value types, Swift treats operations whose self parameter is a (non-const) pointer to the type as mutating and others as nonmutating. (This is not explicitly stated in the proposal, though.) However, it&#39;s not clear how Swift makes that initial determination of whether a type should be imported as a value type or a reference type.<br></p><p>Has this proposal&#39;s use against libdispatch been evaluated? I would love to see `dispatch_async(_:_:)` become `dispatch_queue.async(function:)`.<br></p><p>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes. Directly imported C APIs are a mess, and simple adapters are a pain to write. This substantially improves the situation.<br></p><p>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes, it does. We seem to be pretty aggressively trying to improve bridging in this version, and this continues that theme.<br></p><p>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I haven&#39;t; bridging is universally terrible.<br></p><p>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>A couple reads at various points.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0044 Import as Member</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>March 16, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Mar 16, 2016, at 4:48 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; 	• What is your evaluation of the proposal?<br>&gt; <br>&gt; Overall in favor.<br>&gt; <br>&gt; I don&#39;t like the getter syntax:<br>&gt; <br>&gt; 	float Point3DGetRadius(Point3D point) __attribute__((swift_name(&quot;getter:Point3D.radius(self:)&quot;)));<br>&gt; <br>&gt; I think we would be better off thinking of this instead as adding an accessor to a property, perhaps with a syntax along these lines:<br>&gt; <br>&gt; 	float Point3DGetRadius(Point3D point) __attribute__((swift_name(&quot;Point3D.radius.get(self:)&quot;)));<br>&gt; <br>&gt; However, talking about operations-associated-with-a-property seems to be a common theme with the behaviors proposal; you may want to think about a syntax that could be used for both of them (and perhaps in demangling and diagnostics as well).<br></p><p>FWIW, the “getter:” and “setter:” syntax was borrowed from the discussion of extending #selector to work with getters and setters of properties. Also, Point3D.radius.get could be a badly-named function “get” in a badly-named type “Point3D.radius” ;)<br></p><p>&gt; I also find it odd that this proposal doesn&#39;t address subscripts.<br></p><p>Yeah. It should probably be a part of the proposal for completeness.<br></p><p>&gt; <br>&gt; I assume that, on types imported as value types, Swift treats operations whose self parameter is a (non-const) pointer to the type as mutating and others as nonmutating. (This is not explicitly stated in the proposal, though.)<br></p><p>That’s correct. It’s in the implementation but not the proposal.<br></p><p>&gt; However, it&#39;s not clear how Swift makes that initial determination of whether a type should be imported as a value type or a reference type.<br></p><p>That’s actually orthogonal to this proposal. However, right now you have C enums and structs mapping to value types, CF types mapping to reference types, and ObjC classes and protocols mapping to reference types.<br></p><p>&gt; Has this proposal&#39;s use against libdispatch been evaluated? I would love to see `dispatch_async(_:_:)` become `dispatch_queue.async(function:)`.<br></p><p>IIRC, the heuristics didn’t work so well, but it should be possible to swift_name libdispatch.<br></p><p>	- Doug<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/05e222e6ef4d84013bb3baeb0e25c90b?s=50"></div><header><strong>[Review] SE-0044 Import as Member</strong> from <string>Patrick Gili</string> &lt;gili.patrick.r at gili-labs.com&gt;<p>March 17, 2016 at 06:00:00am</p></header><div class="content"><p>&gt; <br>&gt; What is your evaluation of the proposal?<br>This is a well thought out proposal with many facets to simplify importing C libraries into Swift. I especially like the automatic inference heuristics.<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>Yes.<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br>Yes.<br></p><p>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>This would far excel what other languages support by way of importing, bridging, and wrapping.<br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>Thoroughly read the proposal.<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160317/53bd2de6/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
