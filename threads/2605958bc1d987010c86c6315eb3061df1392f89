<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>[Pitch] Change location of &#39;try&#39; for infix operators</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>October 11, 2016 at 08:00:00am</p></header><div class="content"><p>You might expect this code to work:<br></p><p>func aFunction() -&gt; Int?       { return 5 }<br>func bFunction() throws -&gt; Int { return 4 }<br></p><p>let value = aFunction() ?? try bFunction() // ERROR: Operator can throw but expression is not marked with a ‘try&#39;<br>print(value)<br></p><p>Instead, you must put the ‘try’ before the entire expression:<br></p><p>let value = try aFunction() ?? bFunction()<br></p><p>This is awkward, since aFunction() doesn’t throw.<br>I propose we change the grammar to allow the first example and disallow the second, consistent with the idea that throwing calls are ‘marked’ by using the try keyword.<br></p><p>Karl<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161011/26052f89/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdd257c9369fb68e1d06923d10ff789e?s=50"></div><header><strong>[Pitch] Change location of &#39;try&#39; for infix operators</strong> from <string>Ben Rimmington</string> &lt;me at benrimmington.com&gt;<p>October 11, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; On 11 Oct 2016, at 07:16, Karl wrote:<br>&gt; <br>&gt; You might expect this code to work:<br>&gt; <br>&gt; func aFunction() -&gt; Int?       { return 5 }<br>&gt; func bFunction() throws -&gt; Int { return 4 }<br>&gt; <br>&gt; let value = aFunction() ?? try bFunction() // ERROR: Operator can throw but expression is not marked with a ‘try&#39;<br>&gt; print(value)<br>&gt; <br>&gt; Instead, you must put the ‘try’ before the entire expression:<br>&gt; <br>&gt; let value = try aFunction() ?? bFunction()<br>&gt; <br>&gt; This is awkward, since aFunction() doesn’t throw.<br>&gt; I propose we change the grammar to allow the first example and disallow the second, consistent with the idea that throwing calls are ‘marked’ by using the try keyword.<br></p><p>The `??` function rethrows an error from its rhs operand.<br></p><p>	@_transparent<br>	public func ?? &lt;T&gt;(optional: T?, defaultValue: @autoclosure () throws -&gt; T)<br>	    rethrows -&gt; T {<br>	  switch optional {<br>	  case .some(let value):<br>	    return value<br>	  case .none:<br>	    return try defaultValue()<br>	  }<br>	}<br></p><p>&lt;https://github.com/apple/swift/blob/5d3a7f7c230ae238c848a06f58b58c7e68fb5ed0/stdlib/public/core/Optional.swift#L415-L424&gt;<br></p><p>-- Ben<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161011/cdf55927/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4c198ffcf0853e6011f58fdcdd32a111?s=50"></div><header><strong>[Pitch] Change location of &#39;try&#39; for infix operators</strong> from <string>Benjamin Spratling</string> &lt;bspratling at mac.com&gt;<p>October 11, 2016 at 01:00:00am</p></header><div class="content"><p>Howdy,<br>The error message is not saying that aFunction throws, it says “??&quot; might throw.  After all, you supplied a ()rethrows-&gt;(Int) to it as its second argument, which is wrapping a ()throws-&gt;Int, “bFunction()&quot;<br>?? and &amp;&amp; and || wrap the trailing expression in an @autoclosure.<br></p><p>I am a little surprised two “try” are not required.  This would be my expectation:<br>&gt; let value = try aFunction() ?? try bFunction()<br>but, using try to the right of a non-assignment operator is not allowed.<br></p><p>This, however, is not disallowed:<br></p><p>let value = try aFunction() ?? (try bFunction())<br></p><p>The purpose of the @autoclosure is to make developers forget they need to write a closure, and it apparently worked for you.<br></p><p>-Ben Spratling<br></p><p><br>&gt; On Oct 11, 2016, at 1:16 AM, Karl via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; You might expect this code to work:<br>&gt; <br>&gt; func aFunction() -&gt; Int?       { return 5 }<br>&gt; func bFunction() throws -&gt; Int { return 4 }<br>&gt; <br>&gt; let value = aFunction() ?? try bFunction() // ERROR: Operator can throw but expression is not marked with a ‘try&#39;<br>&gt; print(value)<br>&gt; <br>&gt; Instead, you must put the ‘try’ before the entire expression:<br>&gt; <br>&gt; let value = try aFunction() ?? bFunction()<br>&gt; <br>&gt; This is awkward, since aFunction() doesn’t throw.<br>&gt; I propose we change the grammar to allow the first example and disallow the second, consistent with the idea that throwing calls are ‘marked’ by using the try keyword.<br>&gt; <br>&gt; Karl<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161011/1c70b7a1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>[Pitch] Change location of &#39;try&#39; for infix operators</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>October 11, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On 11 Oct 2016, at 08:49, Benjamin Spratling &lt;bspratling at mac.com&gt; wrote:<br>&gt; <br>&gt; Howdy,<br>&gt; The error message is not saying that aFunction throws, it says “??&quot; might throw.  After all, you supplied a ()rethrows-&gt;(Int) to it as its second argument, which is wrapping a ()throws-&gt;Int, “bFunction()&quot;<br>&gt; ?? and &amp;&amp; and || wrap the trailing expression in an @autoclosure.<br>&gt; <br>&gt; I am a little surprised two “try” are not required.  This would be my expectation:<br>&gt;&gt; let value = try aFunction() ?? try bFunction()<br>&gt; but, using try to the right of a non-assignment operator is not allowed.<br>&gt; <br>&gt; This, however, is not disallowed:<br>&gt; <br>&gt; let value = try aFunction() ?? (try bFunction())<br>&gt; <br>&gt; The purpose of the @autoclosure is to make developers forget they need to write a closure, and it apparently worked for you.<br>&gt; <br>&gt; -Ben Spratling<br>&gt; <br></p><p>Yeah, I understand the reason for it, but I still think we should change it so you write the ‘try’ before the part which actually throws. Perhaps the rule should be something more general around rethrowing autoclosures?<br></p><p>After all, I thought that was the entire point of the ‘try’ keyword. The compiler doesn&#39;t really need it (it already knows what throws and what doesn’t), but it helps humans to mark where the throwing stuff happens.<br></p><p>Karl<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161011/a0ec4961/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>[Pitch] Change location of &#39;try&#39; for infix operators</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>October 14, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Oct 11, 2016, at 12:04 AM, Karl via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On 11 Oct 2016, at 08:49, Benjamin Spratling &lt;bspratling at mac.com &lt;mailto:bspratling at mac.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Howdy,<br>&gt;&gt; The error message is not saying that aFunction throws, it says “??&quot; might throw.  After all, you supplied a ()rethrows-&gt;(Int) to it as its second argument, which is wrapping a ()throws-&gt;Int, “bFunction()&quot;<br>&gt;&gt; ?? and &amp;&amp; and || wrap the trailing expression in an @autoclosure.<br>&gt;&gt; <br>&gt;&gt; I am a little surprised two “try” are not required.  This would be my expectation:<br>&gt;&gt;&gt; let value = try aFunction() ?? try bFunction()<br>&gt;&gt; but, using try to the right of a non-assignment operator is not allowed.<br>&gt;&gt; <br>&gt;&gt; This, however, is not disallowed:<br>&gt;&gt; <br>&gt;&gt; let value = try aFunction() ?? (try bFunction())<br>&gt;&gt; <br>&gt;&gt; The purpose of the @autoclosure is to make developers forget they need to write a closure, and it apparently worked for you.<br>&gt;&gt; <br>&gt;&gt; -Ben Spratling<br>&gt;&gt; <br>&gt; <br>&gt; Yeah, I understand the reason for it, but I still think we should change it so you write the ‘try’ before the part which actually throws. Perhaps the rule should be something more general around rethrowing autoclosures?<br>&gt; <br>&gt; After all, I thought that was the entire point of the ‘try’ keyword. The compiler doesn&#39;t really need it (it already knows what throws and what doesn’t), but it helps humans to mark where the throwing stuff happens.<br></p><p>I agree that you should be able to place the try inside the autoclosure and have that propagate out.  This doesn&#39;t need evolution discussion; please file a bug.<br></p><p>John.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161014/03ae72eb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>[Pitch] Change location of &#39;try&#39; for infix operators</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>October 15, 2016 at 09:00:00am</p></header><div class="content"><p>Done. https://bugs.swift.org/browse/SR-2963.<br></p><p>&gt; On 14 Oct 2016, at 22:42, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; On Oct 11, 2016, at 12:04 AM, Karl via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On 11 Oct 2016, at 08:49, Benjamin Spratling &lt;bspratling at mac.com &lt;mailto:bspratling at mac.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Howdy,<br>&gt;&gt;&gt; The error message is not saying that aFunction throws, it says “??&quot; might throw.  After all, you supplied a ()rethrows-&gt;(Int) to it as its second argument, which is wrapping a ()throws-&gt;Int, “bFunction()&quot;<br>&gt;&gt;&gt; ?? and &amp;&amp; and || wrap the trailing expression in an @autoclosure.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I am a little surprised two “try” are not required.  This would be my expectation:<br>&gt;&gt;&gt;&gt; let value = try aFunction() ?? try bFunction()<br>&gt;&gt;&gt; but, using try to the right of a non-assignment operator is not allowed.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This, however, is not disallowed:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let value = try aFunction() ?? (try bFunction())<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The purpose of the @autoclosure is to make developers forget they need to write a closure, and it apparently worked for you.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Ben Spratling<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Yeah, I understand the reason for it, but I still think we should change it so you write the ‘try’ before the part which actually throws. Perhaps the rule should be something more general around rethrowing autoclosures?<br>&gt;&gt; <br>&gt;&gt; After all, I thought that was the entire point of the ‘try’ keyword. The compiler doesn&#39;t really need it (it already knows what throws and what doesn’t), but it helps humans to mark where the throwing stuff happens.<br>&gt; <br>&gt; I agree that you should be able to place the try inside the autoclosure and have that propagate out.  This doesn&#39;t need evolution discussion; please file a bug.<br>&gt; <br>&gt; John.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161015/5bef6f12/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
