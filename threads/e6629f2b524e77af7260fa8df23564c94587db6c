<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[SR-933] Rename flatten to flattened</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April  7, 2016 at 11:00:00am</p></header><div class="content"><p>on Thu Apr 07 2016, Arsen Gasparyan &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hey guys,<br>&gt;<br>&gt; The &#39;flatten()&#39; method didn&#39;t get the Swift 3 API renaming treatment it should<br>&gt; have, to go along with reversed, sorted, joined, etc.<br>&gt; As I see Dmitri Gribenko already agree with it but we still have to discuss it<br>&gt; here. So what do you think?<br>&gt;<br>&gt; Implementation: https://github.com/apple/swift/pull/2038<br></p><p>I am agnostic on this, but should explain the rationale for the current<br>name. It wasn&#39;t overlooked.  We kept flatten as is because it is part of<br>a suite of methods that are terms of art from functional programming<br>(map, filter, flatMap, reduce) that don&#39;t follow the naming guidelines<br>but we are nonetheless leaving alone.  The fact that the semantics of<br>flatMap can only be sensibly described in terms of map and flatten<br>reinforces this rationale.<br></p><p>If we want to change flatten, we should decide whether this is a<br>principled change, and if so, what the principle is.  If it&#39;s a change<br>simply because “flatten() feels weird,” that&#39;s OK too, but we should<br>understand what we&#39;re doing and why.<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>[SR-933] Rename flatten to flattened</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>April  7, 2016 at 01:00:00pm</p></header><div class="content"><p>In the sense that these are existing terms of art from functional programming, they inherit the meaning of being non-mutating.<br></p><p>If we did consider changing the name of one, I’d prefer if we considered all of them at once (so the various bike sheds would be painted in complementary colors)<br></p><p>-DW<br></p><p>&gt; On Apr 7, 2016, at 12:12 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Thu Apr 07 2016, Arsen Gasparyan &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; Hey guys,<br>&gt;&gt; <br>&gt;&gt; The &#39;flatten()&#39; method didn&#39;t get the Swift 3 API renaming treatment it should<br>&gt;&gt; have, to go along with reversed, sorted, joined, etc.<br>&gt;&gt; As I see Dmitri Gribenko already agree with it but we still have to discuss it<br>&gt;&gt; here. So what do you think?<br>&gt;&gt; <br>&gt;&gt; Implementation: https://github.com/apple/swift/pull/2038<br>&gt; <br>&gt; I am agnostic on this, but should explain the rationale for the current<br>&gt; name. It wasn&#39;t overlooked.  We kept flatten as is because it is part of<br>&gt; a suite of methods that are terms of art from functional programming<br>&gt; (map, filter, flatMap, reduce) that don&#39;t follow the naming guidelines<br>&gt; but we are nonetheless leaving alone.  The fact that the semantics of<br>&gt; flatMap can only be sensibly described in terms of map and flatten<br>&gt; reinforces this rationale.<br>&gt; <br>&gt; If we want to change flatten, we should decide whether this is a<br>&gt; principled change, and if so, what the principle is.  If it&#39;s a change<br>&gt; simply because “flatten() feels weird,” that&#39;s OK too, but we should<br>&gt; understand what we&#39;re doing and why.<br>&gt; <br>&gt; -- <br>&gt; Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>[SR-933] Rename flatten to flattened</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>April  8, 2016 at 06:00:00am</p></header><div class="content"><p>I would prefer to change them all: mapped, filtered, flatMapped, reduced,<br>and flattened.<br></p><p>On Friday, 8 April 2016, David Waite via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; In the sense that these are existing terms of art from functional<br>&gt; programming, they inherit the meaning of being non-mutating.<br>&gt;<br>&gt; If we did consider changing the name of one, I’d prefer if we considered<br>&gt; all of them at once (so the various bike sheds would be painted in<br>&gt; complementary colors)<br>&gt;<br>&gt; -DW<br>&gt;<br>&gt; &gt; On Apr 7, 2016, at 12:12 PM, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org &lt;javascript:;&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; on Thu Apr 07 2016, Arsen Gasparyan &lt;swift-evolution at swift.org<br>&gt; &lt;javascript:;&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt; Hey guys,<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; The &#39;flatten()&#39; method didn&#39;t get the Swift 3 API renaming treatment it<br>&gt; should<br>&gt; &gt;&gt; have, to go along with reversed, sorted, joined, etc.<br>&gt; &gt;&gt; As I see Dmitri Gribenko already agree with it but we still have to<br>&gt; discuss it<br>&gt; &gt;&gt; here. So what do you think?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Implementation: https://github.com/apple/swift/pull/2038<br>&gt; &gt;<br>&gt; &gt; I am agnostic on this, but should explain the rationale for the current<br>&gt; &gt; name. It wasn&#39;t overlooked.  We kept flatten as is because it is part of<br>&gt; &gt; a suite of methods that are terms of art from functional programming<br>&gt; &gt; (map, filter, flatMap, reduce) that don&#39;t follow the naming guidelines<br>&gt; &gt; but we are nonetheless leaving alone.  The fact that the semantics of<br>&gt; &gt; flatMap can only be sensibly described in terms of map and flatten<br>&gt; &gt; reinforces this rationale.<br>&gt; &gt;<br>&gt; &gt; If we want to change flatten, we should decide whether this is a<br>&gt; &gt; principled change, and if so, what the principle is.  If it&#39;s a change<br>&gt; &gt; simply because “flatten() feels weird,” that&#39;s OK too, but we should<br>&gt; &gt; understand what we&#39;re doing and why.<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; Dave<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org &lt;javascript:;&gt;<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;javascript:;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p><br>-- <br>-- Howard.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160408/1051f99c/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[SR-933] Rename flatten to flattened</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>April  8, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On 7 Apr 2016, at 19:12, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; We kept flatten as is because it is part of a suite of methods that are terms of art from functional programming (map, filter, flatMap, reduce) that don&#39;t follow the naming guidelines<br></p><p>I think it makes sense to just rename them; it’s not as though flattened or mapped is somehow far removed from the original meaning as the actual action is the same, it’s just changing tense.<br></p><p>For users coming to Swift as a first language I think that consistent naming is more important, and while terms of art are useful, it’s not as if changing the tense is changing the meaning or making them hard to find; anyone that types myArray.map… will have Xcode present them with .mapped. If we want mutating forms of this methods then I much prefer .map() and .mapped() to .map() and .mapInPlace() or whatever, as the latter contradicts the naming convention used everywhere else which only adds confusion.<br></p><p>Besides, I’d say the terms of art in these cases are more about what the basic operation does, whether or not the method manipulates the original is something that a developer should really check, i.e- when I look for .map in a new language I’m looking for a transformation method, I’ll then check what exactly that transformation does to the original collection. Plus features like unused result and type checks should keep people right about wether they’re using it correctly, so any mistake should be caught pretty easily.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e0a5152b275c43b493a94b5a6a868905?s=50"></div><header><strong>[SR-933] Rename flatten to flattened</strong> from <string>Pyry Jahkola</string> &lt;pyry.jahkola at iki.fi&gt;<p>April  8, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On 08 Apr 2016, at 13:19, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I think it makes sense to just rename them; it’s not as though flattened or mapped is somehow far removed from the original meaning as the actual action is the same, it’s just changing tense.<br></p><p>-1, and not only for the reasons we neither call trigonometric functions `sine`, `cosine`, and `tangent`. The existing names are widely known, commonly taught in modern introductory programming courses, to the point, and googleable.<br></p><p>In addition:<br></p><p>&gt; If we want mutating forms of this methods then I much prefer .map() and .mapped() to .map() and .mapInPlace() or whatever, as the latter contradicts the naming convention used everywhere else which only adds confusion.<br></p><p>This idea of in-place versions is innocuous but absurd. In general, there&#39;s no way mapping `T -&gt; U` over a `[T]` could possibly accommodate the result in the argument of type `[T]`:<br></p><p>    var xs: [Int] = ...<br>    xs.mapInPlace {String($0)} // ???<br></p><p>And the same goes for `flatMap`, and `Optional` and others. Likewise, `flatten()` couldn&#39;t possibly happen in place because the result type has one level of nesting less than the argument.<br></p><p>— Pyry<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160408/cbf6f8df/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[SR-933] Rename flatten to flattened</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>April  8, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On 8 Apr 2016, at 12:00, Pyry Jahkola &lt;pyry.jahkola at iki.fi&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 08 Apr 2016, at 13:19, Haravikk via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I think it makes sense to just rename them; it’s not as though flattened or mapped is somehow far removed from the original meaning as the actual action is the same, it’s just changing tense.<br>&gt; <br>&gt; -1, and not only for the reasons we neither call trigonometric functions `sine`, `cosine`, and `tangent`. The existing names are widely known, commonly taught in modern introductory programming courses, to the point, and googleable.<br></p><p>I’m not sure if sine, cosine etc. are equivalent to the case of map, flatten and so-on? Are they not nouns rather than verbs?<br>I don’t think googleable should be that important; what’s important is what the method does, i.e- what you want to do, as long as it’s well described it should still be searchable, especially if there is a mutating equivalent that’s named in present tense.<br></p><p>&gt; This idea of in-place versions is innocuous but absurd. In general, there&#39;s no way mapping `T -&gt; U` over a `[T]` could possibly accommodate the result in the argument of type `[T]`:<br>&gt; <br>&gt;     var xs: [Int] = ...<br>&gt;     xs.mapInPlace {String($0)} // ???<br>&gt; <br>&gt; And the same goes for `flatMap`, and `Optional` and others. Likewise, `flatten()` couldn&#39;t possibly happen in place because the result type has one level of nesting less than the argument.<br></p><p>True enough, didn’t think that through, though mapping where the type remains unchanged would be possible. Not really the point though, I think it should still be named consistently; if you make exceptions then why have guidelines on naming at all?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160408/13d31404/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>[SR-933] Rename flatten to flattened</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>April  8, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Apr 8, 2016, at 4:19 AM, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;  If we want mutating forms of this methods then I much prefer .map() and .mapped() to .map() and .mapInPlace() or whatever, as the latter contradicts the naming convention used everywhere else which only adds confusion.<br></p><p><br>Strong -1 to recycling the meaning of &#39;map&#39; or any of the others to be the mutating versions. That would make &#39;map&#39; fundamentally different and even counter to the term of art<br></p><p>-DW<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
