<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c65faa002b79348ac10e1fb9c1a9ad83?s=50"></div><header><strong>C-style For Loops</strong> from <string>Colin Cornaby</string> &lt;colin.cornaby at mac.com&gt;<p>December  4, 2015 at 10:00:00pm</p></header><div class="content"><p>I was talking with people in the office about this proposal today, in since there has been such a long discussion already I&#39;ll just reply to the top of the tree just to get our take in before the review...<br></p><p>It&#39;s understood that Swift has better, more readable ways to do for loops, but C style for loops reduce friction for getting our C or C++ developers on board with Swift. Unless there is a gain elsewhere to be made in their removal, it would be nice to keep them. As we transition to Swift we can educate developers on better ways to iterate, but it would be nice to have one less thing in the way of getting people writing Swift code.<br></p><p>We work on a lot of algorithmic code which would be well suited for Swift. And again, I understand that C style for loops are redundant. But it&#39;s just one less speed bump in understanding for some of our developers or for porting pure C or C++ code without having to do as much re-validation of algorithms for accidental changes.<br></p><p>But if it&#39;s actively hurting some other part of the language we could probably be talked into it.<br></p><p>On Dec 03, 2015, at 03:32 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br></p><p>Does Swift still needs C-style for loops with conditions and incrementers? <br></p><p><br></p><p>More Swift-like construction is already available with for-in-statements and stride. <br>This would naturally starve the most common point for -- and ++ operators as well.<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/129946cd/attachment-0001.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: Screen Shot 2015-12-03 at 4.30.15 PM.png<br>Type: image/png<br>Size: 27490 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/129946cd/attachment-0001.png&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>C-style For Loops</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December  4, 2015 at 02:00:00pm</p></header><div class="content"><p>You might ease the pain by approximating C-style &#39;for&#39; by a higher-order function:<br></p><p>func cStyleFor(@autoclosure init initializer: () -&gt; (), @autoclosure test: () -&gt; Bool, @autoclosure inc: () -&gt; (), body: () throws -&gt; ()) rethrows {<br>  // left as an exercise<br>}<br></p><p>var i = 0<br>cStyleFor(init: i = 0, test: i &lt; 10, inc: ++i) {<br>  print(i)<br>}<br></p><p>-Joe<br></p><p>&gt; On Dec 4, 2015, at 2:33 PM, Colin Cornaby &lt;colin.cornaby at mac.com&gt; wrote:<br>&gt; <br>&gt; I was talking with people in the office about this proposal today, in since there has been such a long discussion already I&#39;ll just reply to the top of the tree just to get our take in before the review...<br>&gt; <br>&gt; It&#39;s understood that Swift has better, more readable ways to do for loops, but C style for loops reduce friction for getting our C or C++ developers on board with Swift. Unless there is a gain elsewhere to be made in their removal, it would be nice to keep them. As we transition to Swift we can educate developers on better ways to iterate, but it would be nice to have one less thing in the way of getting people writing Swift code.<br>&gt; <br>&gt; We work on a lot of algorithmic code which would be well suited for Swift. And again, I understand that C style for loops are redundant. But it&#39;s just one less speed bump in understanding for some of our developers or for porting pure C or C++ code without having to do as much re-validation of algorithms for accidental changes.<br>&gt; <br>&gt; But if it&#39;s actively hurting some other part of the language we could probably be talked into it.<br>&gt; <br>&gt; On Dec 03, 2015, at 03:32 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt;&gt; Does Swift still needs C-style for loops with conditions and incrementers? <br>&gt;&gt; <br>&gt;&gt; &lt;Screen Shot 2015-12-03 at 4.30.15 PM.png&gt;<br>&gt;&gt; <br>&gt;&gt; More Swift-like construction is already available with for-in-statements and stride. <br>&gt;&gt; This would naturally starve the most common point for -- and ++ operators as well.<br>&gt;&gt; <br>&gt;&gt; -- E<br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/5603a92b/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/57885cfd0c4b4db16653e76d9e6f0266?s=50"></div><header><strong>C-style For Loops</strong> from <string>Johan Jensen</string> &lt;jj at johanjensen.dk&gt;<p>December  4, 2015 at 11:00:00pm</p></header><div class="content"><p>With the removal of post/pre-increment/decrement you might as well<br>translate C-style for-loops to something akin to<br></p><p>for var i in 0..&lt;10 {<br>    ...<br>}<br></p><p>If more advanced C-style for-loops are needed, I am sure most developers<br>can use a while-loop (as mentioned by Ray Fix) until they get accustomed to<br>Swift’s syntax.<br></p><p>On Fri, Dec 4, 2015 at 11:37 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br></p><p>&gt; You might ease the pain by approximating C-style &#39;for&#39; by a higher-order<br>&gt; function:<br>&gt;<br>&gt; func cStyleFor(@autoclosure init initializer: () -&gt; (), @autoclosure test:<br>&gt; () -&gt; Bool, @autoclosure inc: () -&gt; (), body: () throws -&gt; ()) rethrows {<br>&gt;   // left as an exercise<br>&gt; }<br>&gt;<br>&gt; var i = 0<br>&gt; cStyleFor(init: i = 0, test: i &lt; 10, inc: ++i) {<br>&gt;   print(i)<br>&gt; }<br>&gt;<br>&gt; -Joe<br>&gt;<br>&gt; On Dec 4, 2015, at 2:33 PM, Colin Cornaby &lt;colin.cornaby at mac.com&gt; wrote:<br>&gt;<br>&gt; I was talking with people in the office about this proposal today, in<br>&gt; since there has been such a long discussion already I&#39;ll just reply to the<br>&gt; top of the tree just to get our take in before the review...<br>&gt;<br>&gt; It&#39;s understood that Swift has better, more readable ways to do for loops,<br>&gt; but C style for loops reduce friction for getting our C or C++ developers<br>&gt; on board with Swift. Unless there is a gain elsewhere to be made in their<br>&gt; removal, it would be nice to keep them. As we transition to Swift we can<br>&gt; educate developers on better ways to iterate, but it would be nice to have<br>&gt; one less thing in the way of getting people writing Swift code.<br>&gt;<br>&gt; We work on a lot of algorithmic code which would be well suited for Swift.<br>&gt; And again, I understand that C style for loops are redundant. But it&#39;s just<br>&gt; one less speed bump in understanding for some of our developers or for<br>&gt; porting pure C or C++ code without having to do as much re-validation of<br>&gt; algorithms for accidental changes.<br>&gt;<br>&gt; But if it&#39;s actively hurting some other part of the language we could<br>&gt; probably be talked into it.<br>&gt;<br>&gt; On Dec 03, 2015, at 03:32 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;<br>&gt; Does Swift still needs C-style for loops with conditions and incrementers?<br>&gt;<br>&gt; &lt;Screen Shot 2015-12-03 at 4.30.15 PM.png&gt;<br>&gt;<br>&gt; More Swift-like construction is already available with *for-in*-statements<br>&gt; and *stride*.<br>&gt; This would naturally starve the most common point for -- and ++ operators<br>&gt; as well.<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/a787ad7a/attachment-0001.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
