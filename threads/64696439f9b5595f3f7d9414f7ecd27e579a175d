<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/169f08d9daad26bd620adb82fffff289?s=50"></div><header><strong>Reflection: typeref_lowering test case on Linuxone</strong> from <string>Raminder Sodhi</string> &lt;sodramin at ca.ibm.com&gt;<p>August 25, 2016 at 03:00:00pm</p></header><div class="content"><p>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160825/6469175d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/569ed436467cf145f3bbdd0d53fbe115?s=50"></div><header><strong>Reflection: typeref_lowering test case on Linuxone</strong> from <string>Slava Pestov</string> &lt;spestov at apple.com&gt;<p>August 25, 2016 at 01:00:00pm</p></header><div class="content"><p>You’ll notice the existing CHECK-64’s already have stuff like<br></p><p>&gt; // CHECK-64-NEXT: (struct size=72 alignment=8 stride=72 num_extra_inhabitants=[[PTR_XI:2048|2147483647]]<br></p><p>To deal with Linux vs Darwin. You could just fold all the different possible values into the alternation there, instead of having CHECK lines for each architecture/OS combination.<br></p><p>However if you think it’s more readable or more robust to separate the tests into OS/CPU combinations, that’s fine by me. Don’t worry too much about verbosity, it is easy to update the tests when things change with regular expressions :)<br></p><p>If you wanted to clean this up further, you could take a look at some of the other tests in test/Reflection/* which have CPU: x86_64 requirements. Those can probably be relaxed.<br></p><p>Thanks for digging into this!<br></p><p>Slava<br></p><p>&gt; On Aug 25, 2016, at 8:10 AM, Raminder Sodhi via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi,<br>&gt;  <br>&gt; I am trying to fix the typeref_lowering tet on the LinuxONE platform (s390x).<br>&gt; Due to differernce in value of SWIFT_ABI_DEFAULT_OBJC_RESERVED_BITS_MASK the num_extra_inhabitants is different for some structures.<br>&gt; I just wanted a opinion on the best way to fix this issue as the one which I have looks a bit messy to me.<br>&gt; Note: I have modified the FileCheck params to have arch based matching.<br>&gt;  <br>&gt; Below is a diff which passes on both the x86_64 and s390x platform.<br>&gt; diff --git a/test/Reflection/typeref_lowering.swift b/test/Reflection/typeref_lowering.swift<br>&gt; index c2d721c..15f971c 100644<br>&gt; --- a/test/Reflection/typeref_lowering.swift<br>&gt; +++ b/test/Reflection/typeref_lowering.swift<br>&gt; @@ -1,6 +1,6 @@<br>&gt;  // RUN: rm -rf %t &amp;&amp; mkdir -p %t<br>&gt;  // RUN: %target-build-swift %S/Inputs/TypeLowering.swift -parse-as-library -emit-module -emit-library -module-name TypeLowering -o %t/libTypesToReflect.%target-dylib-extension<br>&gt; -// RUN: %target-swift-reflection-dump -binary-filename %t/libTypesToReflect.%target-dylib-extension -binary-filename %platform-module-dir/libswiftCore.%target-dylib-extension -dump-type-lowering &lt; %s | %FileCheck %s --check-prefix=CHECK-%target-ptrsize<br>&gt; +// RUN: %target-swift-reflection-dump -binary-filename %t/libTypesToReflect.%target-dylib-extension -binary-filename %platform-module-dir/libswiftCore.%target-dylib-extension -dump-type-lowering &lt; %s | %FileCheck %s --check-prefix=CHECK-%target-ptrsize --check-prefix=CHECK-%target-cpu<br>&gt;  V12TypeLowering11BasicStruct<br>&gt;  // CHECK-64:      (struct TypeLowering.BasicStruct)<br>&gt; @@ -170,34 +170,63 @@ TGV12TypeLowering3BoxVs5Int16_Vs5Int32_<br>&gt; <br>&gt;  V12TypeLowering15ReferenceStruct<br>&gt; -// CHECK-64:      (struct TypeLowering.ReferenceStruct)<br>&gt; -// CHECK-64-NEXT: (struct size=72 alignment=8 stride=72 num_extra_inhabitants=[[PTR_XI:2048|2147483647]]<br>&gt; -// CHECK-64-NEXT:   (field name=strongRef offset=0<br>&gt; -// CHECK-64-NEXT:     (reference kind=strong refcounting=native))<br>&gt; -// CHECK-64-NEXT:   (field name=optionalStrongRef offset=8<br>&gt; -// CHECK-64-NEXT:     (single_payload_enum size=8 alignment=8 stride=8 num_extra_inhabitants=[[PTR_XI_SUB_1:2047|2147483646]]<br>&gt; -// CHECK-64-NEXT:       (field name=some offset=0<br>&gt; -// CHECK-64-NEXT:         (reference kind=strong refcounting=native))))<br>&gt; -// CHECK-64-NEXT:   (field name=strongRefTuple offset=16<br>&gt; -// CHECK-64-NEXT:     (tuple size=16 alignment=8 stride=16 num_extra_inhabitants=[[PTR_XI]]<br>&gt; -// CHECK-64-NEXT:       (field offset=0<br>&gt; -// CHECK-64-NEXT:         (reference kind=strong refcounting=native))<br>&gt; -// CHECK-64-NEXT:       (field offset=8<br>&gt; -// CHECK-64-NEXT:         (reference kind=strong refcounting=native))))<br>&gt; -// CHECK-64-NEXT:   (field name=optionalStrongRefTuple offset=32<br>&gt; -// CHECK-64-NEXT:     (single_payload_enum size=16 alignment=8 stride=16 num_extra_inhabitants=[[PTR_XI_SUB_1]]<br>&gt; -// CHECK-64-NEXT:       (field name=some offset=0<br>&gt; -// CHECK-64-NEXT:         (tuple size=16 alignment=8 stride=16 num_extra_inhabitants=[[PTR_XI]]<br>&gt; -// CHECK-64-NEXT:           (field offset=0<br>&gt; -// CHECK-64-NEXT:             (reference kind=strong refcounting=native))<br>&gt; -// CHECK-64-NEXT:           (field offset=8<br>&gt; -// CHECK-64-NEXT:             (reference kind=strong refcounting=native))))))<br>&gt; -// CHECK-64-NEXT:   (field name=unownedRef offset=48<br>&gt; -// CHECK-64-NEXT:     (reference kind=unowned refcounting=native))<br>&gt; -// CHECK-64-NEXT:   (field name=weakRef offset=56<br>&gt; -// CHECK-64-NEXT:     (reference kind=weak refcounting=native))<br>&gt; -// CHECK-64-NEXT:   (field name=unmanagedRef offset=64<br>&gt; -// CHECK-64-NEXT:     (reference kind=unmanaged refcounting=native)))<br>&gt; +// CHECK-x86_64:      (struct TypeLowering.ReferenceStruct)<br>&gt; +// CHECK-x86_64-NEXT: (struct size=72 alignment=8 stride=72 num_extra_inhabitants=[[PTR_XI:2048|2147483647]]<br>&gt; +// CHECK-x86_64-NEXT:   (field name=strongRef offset=0<br>&gt; +// CHECK-x86_64-NEXT:     (reference kind=strong refcounting=native))<br>&gt; +// CHECK-x86_64-NEXT:   (field name=optionalStrongRef offset=8<br>&gt; +// CHECK-x86_64-NEXT:     (single_payload_enum size=8 alignment=8 stride=8 num_extra_inhabitants=[[PTR_XI_SUB_1:2047|2147483646]]<br>&gt; +// CHECK-x86_64-NEXT:       (field name=some offset=0<br>&gt; +// CHECK-x86_64-NEXT:         (reference kind=strong refcounting=native))))<br>&gt; +// CHECK-x86_64-NEXT:   (field name=strongRefTuple offset=16<br>&gt; +// CHECK-x86_64-NEXT:     (tuple size=16 alignment=8 stride=16 num_extra_inhabitants=[[PTR_XI]]<br>&gt; +// CHECK-x86_64-NEXT:       (field offset=0<br>&gt; +// CHECK-x86_64-NEXT:         (reference kind=strong refcounting=native))<br>&gt; +// CHECK-x86_64-NEXT:       (field offset=8<br>&gt; +// CHECK-x86_64-NEXT:         (reference kind=strong refcounting=native))))<br>&gt; +// CHECK-x86_64-NEXT:   (field name=optionalStrongRefTuple offset=32<br>&gt; +// CHECK-x86_64-NEXT:     (single_payload_enum size=16 alignment=8 stride=16 num_extra_inhabitants=[[PTR_XI_SUB_1]]<br>&gt; +// CHECK-x86_64-NEXT:       (field name=some offset=0<br>&gt; +// CHECK-x86_64-NEXT:         (tuple size=16 alignment=8 stride=16 num_extra_inhabitants=[[PTR_XI]]<br>&gt; +// CHECK-x86_64-NEXT:           (field offset=0<br>&gt; +// CHECK-x86_64-NEXT:             (reference kind=strong refcounting=native))<br>&gt; +// CHECK-x86_64-NEXT:           (field offset=8<br>&gt; +// CHECK-x86_64-NEXT:             (reference kind=strong refcounting=native))))))<br>&gt; +// CHECK-x86_64-NEXT:   (field name=unownedRef offset=48<br>&gt; +// CHECK-x86_64-NEXT:     (reference kind=unowned refcounting=native))<br>&gt; +// CHECK-x86_64-NEXT:   (field name=weakRef offset=56<br>&gt; +// CHECK-x86_64-NEXT:     (reference kind=weak refcounting=native))<br>&gt; +// CHECK-x86_64-NEXT:   (field name=unmanagedRef offset=64<br>&gt; +// CHECK-x86_64-NEXT:     (reference kind=unmanaged refcounting=native)))<br>&gt; +<br>&gt; +// CHECK-s390x: (struct TypeLowering.ReferenceStruct)<br>&gt; +// CHECK-s390x-NEXT: (struct size=72 alignment=8 stride=72 num_extra_inhabitants=[[PTR_XI:4096|2147483647]]<br>&gt; +// CHECK-s390x-NEXT:   (field name=strongRef offset=0<br>&gt; +// CHECK-s390x-NEXT:     (reference kind=strong refcounting=native))<br>&gt; +// CHECK-s390x-NEXT:   (field name=optionalStrongRef offset=8<br>&gt; +// CHECK-s390x-NEXT:     (single_payload_enum size=8 alignment=8 stride=8 num_extra_inhabitants=[[PTR_XI_SUB_1:4095|2147483646]]<br>&gt; +// CHECK-s390x-NEXT:       (field name=some offset=0<br>&gt; +// CHECK-s390x-NEXT:         (reference kind=strong refcounting=native))))<br>&gt; +// CHECK-s390x-NEXT:   (field name=strongRefTuple offset=16<br>&gt; +// CHECK-s390x-NEXT:     (tuple size=16 alignment=8 stride=16 num_extra_inhabitants=[[PTR_XI]]<br>&gt; +// CHECK-s390x-NEXT:       (field offset=0<br>&gt; +// CHECK-s390x-NEXT:         (reference kind=strong refcounting=native))<br>&gt; +// CHECK-s390x-NEXT:       (field offset=8<br>&gt; +// CHECK-s390x-NEXT:         (reference kind=strong refcounting=native))))<br>&gt; +// CHECK-s390x-NEXT:   (field name=optionalStrongRefTuple offset=32<br>&gt; +// CHECK-s390x-NEXT:     (single_payload_enum size=16 alignment=8 stride=16 num_extra_inhabitants=[[PTR_XI_SUB_1]]<br>&gt; +// CHECK-s390x-NEXT:       (field name=some offset=0<br>&gt; +// CHECK-s390x-NEXT:         (tuple size=16 alignment=8 stride=16 num_extra_inhabitants=[[PTR_XI]]<br>&gt; +// CHECK-s390x-NEXT:           (field offset=0<br>&gt; +// CHECK-s390x-NEXT:             (reference kind=strong refcounting=native))<br>&gt; +// CHECK-s390x-NEXT:           (field offset=8<br>&gt; +// CHECK-s390x-NEXT:             (reference kind=strong refcounting=native))))))<br>&gt; +// CHECK-s390x-NEXT:   (field name=unownedRef offset=48<br>&gt; +// CHECK-s390x-NEXT:     (reference kind=unowned refcounting=native))<br>&gt; +// CHECK-s390x-NEXT:   (field name=weakRef offset=56<br>&gt; +// CHECK-s390x-NEXT:     (reference kind=weak refcounting=native))<br>&gt; +// CHECK-s390x-NEXT:   (field name=unmanagedRef offset=64<br>&gt; +// CHECK-s390x-NEXT:     (reference kind=unmanaged refcounting=native)))<br>&gt;  // CHECK-32: (struct TypeLowering.ReferenceStruct)<br>&gt;  // CHECK-32-NEXT: (struct size=36 alignment=4 stride=36 num_extra_inhabitants=4096<br>&gt; @@ -686,57 +715,107 @@ V12TypeLowering14MetatypeStruct<br>&gt;  // CHECK-32-NEXT:         (builtin size=4 alignment=4 stride=4 num_extra_inhabitants=4096)))))<br>&gt;  V12TypeLowering10EnumStruct<br>&gt; -// CHECK-64: (struct TypeLowering.EnumStruct)<br>&gt; -// CHECK-64-NEXT: (struct size=81 alignment=8 stride=88 num_extra_inhabitants=0<br>&gt; -// CHECK-64-NEXT:   (field name=empty offset=0<br>&gt; -// CHECK-64-NEXT:     (no_payload_enum size=0 alignment=0 stride=0 num_extra_inhabitants=0))<br>&gt; -// CHECK-64-NEXT:   (field name=noPayload offset=0<br>&gt; -// CHECK-64-NEXT:     (no_payload_enum size=1 alignment=0 stride=0 num_extra_inhabitants=0))<br>&gt; -// CHECK-64-NEXT:   (field name=sillyNoPayload offset=0<br>&gt; -// CHECK-64-NEXT:     (no_payload_enum size=1 alignment=0 stride=0 num_extra_inhabitants=0))<br>&gt; -// CHECK-64-NEXT:   (field name=singleton offset=8<br>&gt; -// CHECK-64-NEXT:     (reference kind=strong refcounting=native))<br>&gt; -// CHECK-64-NEXT:   (field name=singlePayload offset=16<br>&gt; -// CHECK-64-NEXT:     (single_payload_enum size=8 alignment=8 stride=8 num_extra_inhabitants=[[PTR_XI_SUB_1]]<br>&gt; -// CHECK-64-NEXT:       (field name=Indirect offset=0<br>&gt; -// CHECK-64-NEXT:         (reference kind=strong refcounting=native))))<br>&gt; -// CHECK-64-NEXT:   (field name=multiPayloadConcrete offset=24<br>&gt; -// CHECK-64-NEXT:     (multi_payload_enum size=8 alignment=8 stride=8 num_extra_inhabitants=0<br>&gt; -// CHECK-64-NEXT:       (field name=Left offset=0<br>&gt; -// CHECK-64-NEXT:         (reference kind=strong refcounting=native))<br>&gt; -// CHECK-64-NEXT:       (field name=Right offset=0<br>&gt; -// CHECK-64-NEXT:         (reference kind=strong refcounting=native))))<br>&gt; -// CHECK-64-NEXT:   (field name=multiPayloadGenericFixed offset=32<br>&gt; -// CHECK-64-NEXT:     (multi_payload_enum size=9 alignment=8 stride=16 num_extra_inhabitants=0<br>&gt; -// CHECK-64-NEXT:       (field name=Left offset=0<br>&gt; -// CHECK-64-NEXT:         (reference kind=strong refcounting=native))<br>&gt; -// CHECK-64-NEXT:       (field name=Right offset=0<br>&gt; -// CHECK-64-NEXT:         (reference kind=strong refcounting=native))))<br>&gt; -// CHECK-64-NEXT:   (field name=multiPayloadGenericDynamic offset=48<br>&gt; -// CHECK-64-NEXT:     (multi_payload_enum size=9 alignment=8 stride=16 num_extra_inhabitants=0<br>&gt; -// CHECK-64-NEXT:       (field name=Left offset=0<br>&gt; -// CHECK-64-NEXT:         (struct size=1 alignment=1 stride=1 num_extra_inhabitants=0<br>&gt; -// CHECK-64-NEXT:           (field name=_value offset=0<br>&gt; -// CHECK-64-NEXT:             (builtin size=1 alignment=1 stride=1 num_extra_inhabitants=0))))<br>&gt; -// CHECK-64-NEXT:       (field name=Right offset=0<br>&gt; -// CHECK-64-NEXT:         (struct size=8 alignment=8 stride=8 num_extra_inhabitants=0<br>&gt; -// CHECK-64-NEXT:           (field name=_value offset=0<br>&gt; -// CHECK-64-NEXT:             (builtin size=8 alignment=8 stride=8 num_extra_inhabitants=0))))))<br>&gt; -// CHECK-64-NEXT:   (field name=optionalOptionalRef offset=64<br>&gt; -// CHECK-64-NEXT:     (single_payload_enum size=8 alignment=8 stride=8 num_extra_inhabitants=[[PTR_XI_SUB_2:2147483645|2046]]<br>&gt; -// CHECK-64-NEXT:       (field name=some offset=0<br>&gt; -// CHECK-64-NEXT:         (single_payload_enum size=8 alignment=8 stride=8 num_extra_inhabitants=[[PTR_XI_SUB_1]]<br>&gt; -// CHECK-64-NEXT:           (field name=some offset=0<br>&gt; -// CHECK-64-NEXT:             (reference kind=strong refcounting=native))))))<br>&gt; -// CHECK-64-NEXT:   (field name=optionalOptionalPtr offset=72<br>&gt; -// CHECK-64-NEXT:     (single_payload_enum size=9 alignment=8 stride=16 num_extra_inhabitants=0<br>&gt; -// CHECK-64-NEXT:       (field name=some offset=0<br>&gt; -// CHECK-64-NEXT:         (single_payload_enum size=8 alignment=8 stride=8 num_extra_inhabitants=0<br>&gt; -// CHECK-64-NEXT:           (field name=some offset=0<br>&gt; -// CHECK-64-NEXT:             (struct size=8 alignment=8 stride=8 num_extra_inhabitants=1<br>&gt; -// CHECK-64-NEXT:               (field name=_rawValue offset=0<br>&gt; -// CHECK-64-NEXT:                 (builtin size=8 alignment=8 stride=8 num_extra_inhabitants=1)))))))))<br>&gt; +// CHECK-x86_64: (struct TypeLowering.EnumStruct)<br>&gt; +// CHECK-x86_64-NEXT: (struct size=81 alignment=8 stride=88 num_extra_inhabitants=0<br>&gt; +// CHECK-x86_64-NEXT:   (field name=empty offset=0<br>&gt; +// CHECK-x86_64-NEXT:     (no_payload_enum size=0 alignment=0 stride=0 num_extra_inhabitants=0))<br>&gt; +// CHECK-x86_64-NEXT:   (field name=noPayload offset=0<br>&gt; +// CHECK-x86_64-NEXT:     (no_payload_enum size=1 alignment=0 stride=0 num_extra_inhabitants=0))<br>&gt; +// CHECK-x86_64-NEXT:   (field name=sillyNoPayload offset=0<br>&gt; +// CHECK-x86_64-NEXT:     (no_payload_enum size=1 alignment=0 stride=0 num_extra_inhabitants=0))<br>&gt; +// CHECK-x86_64-NEXT:   (field name=singleton offset=8<br>&gt; +// CHECK-x86_64-NEXT:     (reference kind=strong refcounting=native))<br>&gt; +// CHECK-x86_64-NEXT:   (field name=singlePayload offset=16<br>&gt; +// CHECK-x86_64-NEXT:     (single_payload_enum size=8 alignment=8 stride=8 num_extra_inhabitants=[[PTR_XI_SUB_1]]<br>&gt; +// CHECK-x86_64-NEXT:       (field name=Indirect offset=0<br>&gt; +// CHECK-x86_64-NEXT:         (reference kind=strong refcounting=native))))<br>&gt; +// CHECK-x86_64-NEXT:   (field name=multiPayloadConcrete offset=24<br>&gt; +// CHECK-x86_64-NEXT:     (multi_payload_enum size=8 alignment=8 stride=8 num_extra_inhabitants=0<br>&gt; +// CHECK-x86_64-NEXT:       (field name=Left offset=0<br>&gt; +// CHECK-x86_64-NEXT:         (reference kind=strong refcounting=native))<br>&gt; +// CHECK-x86_64-NEXT:       (field name=Right offset=0<br>&gt; +// CHECK-x86_64-NEXT:         (reference kind=strong refcounting=native))))<br>&gt; +// CHECK-x86_64-NEXT:   (field name=multiPayloadGenericFixed offset=32<br>&gt; +// CHECK-x86_64-NEXT:     (multi_payload_enum size=9 alignment=8 stride=16 num_extra_inhabitants=0<br>&gt; +// CHECK-x86_64-NEXT:       (field name=Left offset=0<br>&gt; +// CHECK-x86_64-NEXT:         (reference kind=strong refcounting=native))<br>&gt; +// CHECK-x86_64-NEXT:       (field name=Right offset=0<br>&gt; +// CHECK-x86_64-NEXT:         (reference kind=strong refcounting=native))))<br>&gt; +// CHECK-x86_64-NEXT:   (field name=multiPayloadGenericDynamic offset=48<br>&gt; +// CHECK-x86_64-NEXT:     (multi_payload_enum size=9 alignment=8 stride=16 num_extra_inhabitants=0<br>&gt; +// CHECK-x86_64-NEXT:       (field name=Left offset=0<br>&gt; +// CHECK-x86_64-NEXT:         (struct size=1 alignment=1 stride=1 num_extra_inhabitants=0<br>&gt; +// CHECK-x86_64-NEXT:           (field name=_value offset=0<br>&gt; +// CHECK-x86_64-NEXT:             (builtin size=1 alignment=1 stride=1 num_extra_inhabitants=0))))<br>&gt; +// CHECK-x86_64-NEXT:       (field name=Right offset=0<br>&gt; +// CHECK-x86_64-NEXT:         (struct size=8 alignment=8 stride=8 num_extra_inhabitants=0<br>&gt; +// CHECK-x86_64-NEXT:           (field name=_value offset=0<br>&gt; +// CHECK-x86_64-NEXT:             (builtin size=8 alignment=8 stride=8 num_extra_inhabitants=0))))))<br>&gt; +// CHECK-x86_64-NEXT:   (field name=optionalOptionalRef offset=64<br>&gt; +// CHECK-x86_64-NEXT:     (single_payload_enum size=8 alignment=8 stride=8 num_extra_inhabitants=[[PTR_XI_SUB_2:2147483645|2046]]<br>&gt; +// CHECK-x86_64-NEXT:       (field name=some offset=0<br>&gt; +// CHECK-x86_64-NEXT:         (single_payload_enum size=8 alignment=8 stride=8 num_extra_inhabitants=[[PTR_XI_SUB_1]]<br>&gt; +// CHECK-x86_64-NEXT:           (field name=some offset=0<br>&gt; +// CHECK-x86_64-NEXT:             (reference kind=strong refcounting=native))))))<br>&gt; +// CHECK-x86_64-NEXT:   (field name=optionalOptionalPtr offset=72<br>&gt; +// CHECK-x86_64-NEXT:     (single_payload_enum size=9 alignment=8 stride=16 num_extra_inhabitants=0<br>&gt; +// CHECK-x86_64-NEXT:       (field name=some offset=0<br>&gt; +// CHECK-x86_64-NEXT:         (single_payload_enum size=8 alignment=8 stride=8 num_extra_inhabitants=0<br>&gt; +// CHECK-x86_64-NEXT:           (field name=some offset=0<br>&gt; +// CHECK-x86_64-NEXT:             (struct size=8 alignment=8 stride=8 num_extra_inhabitants=1<br>&gt; +// CHECK-x86_64-NEXT:               (field name=_rawValue offset=0<br>&gt; +// CHECK-x86_64-NEXT:                 (builtin size=8 alignment=8 stride=8 num_extra_inhabitants=1)))))))))<br>&gt; +// CHECK-s390x: (struct TypeLowering.EnumStruct)<br>&gt; +// CHECK-s390x-NEXT: (struct size=81 alignment=8 stride=88 num_extra_inhabitants=0<br>&gt; +// CHECK-s390x-NEXT:   (field name=empty offset=0<br>&gt; +// CHECK-s390x-NEXT:     (no_payload_enum size=0 alignment=0 stride=0 num_extra_inhabitants=0))<br>&gt; +// CHECK-s390x-NEXT:   (field name=noPayload offset=0<br>&gt; +// CHECK-s390x-NEXT:     (no_payload_enum size=1 alignment=0 stride=0 num_extra_inhabitants=0))<br>&gt; +// CHECK-s390x-NEXT:   (field name=sillyNoPayload offset=0<br>&gt; +// CHECK-s390x-NEXT:     (no_payload_enum size=1 alignment=0 stride=0 num_extra_inhabitants=0))<br>&gt; +// CHECK-s390x-NEXT:   (field name=singleton offset=8<br>&gt; +// CHECK-s390x-NEXT:     (reference kind=strong refcounting=native))<br>&gt; +// CHECK-s390x-NEXT:   (field name=singlePayload offset=16<br>&gt; +// CHECK-s390x-NEXT:     (single_payload_enum size=8 alignment=8 stride=8 num_extra_inhabitants=[[PTR_XI_SUB_1]]<br>&gt; +// CHECK-s390x-NEXT:       (field name=Indirect offset=0<br>&gt; +// CHECK-s390x-NEXT:         (reference kind=strong refcounting=native))))<br>&gt; +// CHECK-s390x-NEXT:   (field name=multiPayloadConcrete offset=24<br>&gt; +// CHECK-s390x-NEXT:     (multi_payload_enum size=8 alignment=8 stride=8 num_extra_inhabitants=0<br>&gt; +// CHECK-s390x-NEXT:       (field name=Left offset=0<br>&gt; +// CHECK-s390x-NEXT:         (reference kind=strong refcounting=native))<br>&gt; +// CHECK-s390x-NEXT:       (field name=Right offset=0<br>&gt; +// CHECK-s390x-NEXT:         (reference kind=strong refcounting=native))))<br>&gt; +// CHECK-s390x-NEXT:   (field name=multiPayloadGenericFixed offset=32<br>&gt; +// CHECK-s390x-NEXT:     (multi_payload_enum size=9 alignment=8 stride=16 num_extra_inhabitants=0<br>&gt; +// CHECK-s390x-NEXT:       (field name=Left offset=0<br>&gt; +// CHECK-s390x-NEXT:         (reference kind=strong refcounting=native))<br>&gt; +// CHECK-s390x-NEXT:       (field name=Right offset=0<br>&gt; +// CHECK-s390x-NEXT:         (reference kind=strong refcounting=native))))<br>&gt; +// CHECK-s390x-NEXT:   (field name=multiPayloadGenericDynamic offset=48<br>&gt; +// CHECK-s390x-NEXT:     (multi_payload_enum size=9 alignment=8 stride=16 num_extra_inhabitants=0<br>&gt; +// CHECK-s390x-NEXT:       (field name=Left offset=0<br>&gt; +// CHECK-s390x-NEXT:         (struct size=1 alignment=1 stride=1 num_extra_inhabitants=0<br>&gt; +// CHECK-s390x-NEXT:           (field name=_value offset=0<br>&gt; +// CHECK-s390x-NEXT:             (builtin size=1 alignment=1 stride=1 num_extra_inhabitants=0))))<br>&gt; +// CHECK-s390x-NEXT:       (field name=Right offset=0<br>&gt; +// CHECK-s390x-NEXT:         (struct size=8 alignment=8 stride=8 num_extra_inhabitants=0<br>&gt; +// CHECK-s390x-NEXT:           (field name=_value offset=0<br>&gt; +// CHECK-s390x-NEXT:             (builtin size=8 alignment=8 stride=8 num_extra_inhabitants=0))))))<br>&gt; +// CHECK-s390x-NEXT:   (field name=optionalOptionalRef offset=64<br>&gt; +// CHECK-s390x-NEXT:     (single_payload_enum size=8 alignment=8 stride=8 num_extra_inhabitants=[[PTR_XI_2_SUB_2:2147483645|4094]]<br>&gt; +// CHECK-s390x-NEXT:       (field name=some offset=0<br>&gt; +// CHECK-s390x-NEXT:         (single_payload_enum size=8 alignment=8 stride=8 num_extra_inhabitants=[[PTR_XI_SUB_1]]<br>&gt; +// CHECK-s390x-NEXT:           (field name=some offset=0<br>&gt; +// CHECK-s390x-NEXT:             (reference kind=strong refcounting=native))))))<br>&gt; +// CHECK-s390x-NEXT:   (field name=optionalOptionalPtr offset=72<br>&gt; +// CHECK-s390x-NEXT:     (single_payload_enum size=9 alignment=8 stride=16 num_extra_inhabitants=0<br>&gt; +// CHECK-s390x-NEXT:       (field name=some offset=0<br>&gt; +// CHECK-s390x-NEXT:         (single_payload_enum size=8 alignment=8 stride=8 num_extra_inhabitants=0<br>&gt; +// CHECK-s390x-NEXT:           (field name=some offset=0<br>&gt; +// CHECK-s390x-NEXT:             (struct size=8 alignment=8 stride=8 num_extra_inhabitants=1<br>&gt; +// CHECK-s390x-NEXT:               (field name=_rawValue offset=0<br>&gt; +// CHECK-s390x-NEXT:                 (builtin size=8 alignment=8 stride=8 num_extra_inhabitants=1)))))))))<br>&gt;  <br>&gt;  <br>&gt;  <br>&gt; Thanks<br>&gt; Raminder Sodhi<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160825/a9e382aa/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
