<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f2602cf02202a0b5b4ece6ace2f1d65a?s=50"></div><header><strong>try? with a function that returns an optional</strong> from <string>Jonathan Bailey</string> &lt;jon889 at me.com&gt;<p>January 25, 2016 at 01:00:00pm</p></header><div class="content"><p>In the language guide on the apple website, https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ErrorHandling.html#//apple_ref/doc/uid/TP40014097-CH42-ID542<br></p><p>It says the following assignments to x and y are equivalent:<br>func someThrowingFunction() throws -&gt; Int { ... }<br>let x = try? someThrowingFunction()<br>// x has type `Int?`<br> <br>let y: Int?<br>do {<br>    y = try someThrowingFunction()<br>} catch {<br>    y = nil<br>}<br></p><p>However this isn’t the case if someThrowingFunction also returns an optional, say:<br></p><p>func someThrowingFunction() throws -&gt; Int? { ... }<br></p><p>The type of x would be `Int??`, but the type of y is still `Int?`, is there some way to make the `try?` return an `Int?` instead of a double optional, which is not very helpful.<br></p><p>Thanks,<br>Jonathan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160125/dcee383d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f1b93037cbc5f78f16450bd925ce3b5b?s=50"></div><header><strong>try? with a function that returns an optional</strong> from <string>Marco Masser</string> &lt;lists at duckcode.com&gt;<p>January 25, 2016 at 05:00:00pm</p></header><div class="content"><p>If your function returns an Int? then there’s a reason for that and nil will mean something. And if your function can throw or return an Int? there will also be a very good reason for that and nil will also meaning something. If you then choose to use try? Swift has to return a double Optional because otherwise it would hide information from you. The outer Optional tells you whether there was an error and the inner Optional represents the return value of the function.<br></p><p>But to answer your question: If I’m not mistaken, there is no way to make try? unwrap the optional result of a function in case of success.<br></p><p>Is the function you’re calling one that you wrote? If so, I would try to find a way to make it return a non-optional Int. Maybe the case where it would return nil could be modeled as throwing an error?<br></p><p>Cheers,<br></p><p>Marco<br></p><p><br>&gt; On 2016-01-25, at 14:01, Jonathan Bailey via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; In the language guide on the apple website, https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ErrorHandling.html#//apple_ref/doc/uid/TP40014097-CH42-ID542 &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ErrorHandling.html#//apple_ref/doc/uid/TP40014097-CH42-ID542&gt;<br>&gt; <br>&gt; It says the following assignments to x and y are equivalent:<br>&gt; func someThrowingFunction() throws -&gt; Int { ... }<br>&gt; let x = try? someThrowingFunction()<br>&gt; // x has type `Int?`<br>&gt;  <br>&gt; let y: Int?<br>&gt; do {<br>&gt;     y = try someThrowingFunction()<br>&gt; } catch {<br>&gt;     y = nil<br>&gt; }<br>&gt; <br>&gt; However this isn’t the case if someThrowingFunction also returns an optional, say:<br>&gt; <br>&gt; func someThrowingFunction() throws -&gt; Int? { ... }<br>&gt; <br>&gt; The type of x would be `Int??`, but the type of y is still `Int?`, is there some way to make the `try?` return an `Int?` instead of a double optional, which is not very helpful.<br>&gt; <br>&gt; Thanks,<br>&gt; Jonathan<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160125/55098964/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6cceede6579cba5bf1f48581ea904f1b?s=50"></div><header><strong>try? with a function that returns an optional</strong> from <string>Svein Halvor Halvorsen</string> &lt;svein.h at lvor.halvorsen.cc&gt;<p>January 25, 2016 at 04:00:00pm</p></header><div class="content"><p>This is exactly according to the documentation.<br>In your first example `someThrowingFunction` returns an `Int`, so `y` is<br>defined as an `Int?`.<br>In the second example `someThrowingFunction` returns an `Int?`, so `y`<br>should be an `Int??`<br></p><p>However, since you didn&#39;t update the definition of `y` in your second<br>example, the if branch either assigns an `Int?` to an `Int?`, which is<br>legal, and may be nil, or it explicitly sets it to nil, which is also<br>legal. Thus, effectively unwrapping the nested optionals.<br></p><p>Yu could also apply a `flatMap` to the nested optional, like so:<br></p><p>let x = (try? someThrowingFunction())?.flatMap({$0})<br></p><p>I&#39;m not sure if it&#39;s more readable, though.<br></p><p><br>2016-01-25 14:01 GMT+01:00 Jonathan Bailey via swift-users &lt;<br>swift-users at swift.org&gt;:<br></p><p>&gt; In the language guide on the apple website,<br>&gt; https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ErrorHandling.html#//apple_ref/doc/uid/TP40014097-CH42-ID542<br>&gt;<br>&gt; It says the following assignments to x and y are equivalent:<br>&gt;<br>&gt;    1. func someThrowingFunction() throws -&gt; Int { ... }<br>&gt;<br>&gt;<br>&gt;    1. let x = try? someThrowingFunction()<br>&gt;    2. // x has type `Int?`<br>&gt;    3.<br>&gt;    4. let y: Int?<br>&gt;    5. do {<br>&gt;    6. y = try someThrowingFunction()<br>&gt;    7. } catch {<br>&gt;    8. y = nil<br>&gt;    9. }<br>&gt;<br>&gt;<br>&gt; However this isn’t the case if someThrowingFunction also returns an<br>&gt; optional, say:<br>&gt;<br>&gt;<br>&gt;    1. func someThrowingFunction() throws -&gt; Int? { ... }<br>&gt;<br>&gt;<br>&gt; The type of x would be `Int??`, but the type of y is still `Int?`, is<br>&gt; there some way to make the `try?` return an `Int?` instead of a double<br>&gt; optional, which is not very helpful.<br>&gt;<br>&gt; Thanks,<br>&gt; Jonathan<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160125/2b6533e3/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
