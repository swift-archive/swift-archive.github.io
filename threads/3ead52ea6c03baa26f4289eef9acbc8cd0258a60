<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2679e7a28cb46e207a562ad4e7fc45fc?s=50"></div><header><strong>mutating/non-mutating suggestion from a Rubyist</strong> from <string>James F</string> &lt;conductator at ntlworld.com&gt;<p>April 28, 2016 at 09:00:00am</p></header><div class="content"><p>The mutating keyword as it exists now actually has a meaning to classes. If one declares a protocol with a mutating function, then implements it with a protocol extension, any conforming classes can gain the mutating function, allowing ‘self’, the pointer, to be reassigned.<br></p><p>I think this is a bug, but this is also what I would expect ‘mutating’ to mean for reference types.<br></p><p>------------ Begin Message ------------ <br>Group: gmane.comp.lang.swift.evolution <br>MsgID: &lt;f2e98910-c625-55b1-e608-67be93888bdc at gmail.com&gt; <br></p><p>Choosing between sort/sorted/union/formUnion(but map/filter/reduce) and <br>explicit &#39;mutating&#39; keyword - I&#39;ll choose the later.<br>(But I prefer marker like array&amp;.sort(&lt;) for mutating methods)<br></p><p>But I feel like this discussion(regarding naming) is closed and decision is <br>made, and we can just exchange opinions on that decision. And it seems like <br>the most of us agree with the decision. So...<br></p><p>On 28.04.2016 0:13, Howard Lovatt via swift-evolution wrote:<br>&gt; Personally I like the xxx and xxxed naming, e.g. sort and sorted, and think<br>&gt; it should be universally applied, e.g. union and unioned.<br>&gt;<br>&gt; However that proved unpopular and we ended up with a hybrid with sort and<br>&gt; sorted but union and formUnion. Which no one seems to like!<br>&gt;<br>&gt; Therefore I suggest a new review for the proposed:<br>&gt;<br>&gt;    mutating array.sort(&lt;)<br>&gt;    let sorted = array.sort(&lt;)<br>&gt;    mutating set.union(other)<br>&gt;    let unioned = set.union(other)<br>&gt;<br>&gt; I think the motivation for new review, or new information if you like, is<br>&gt; the discussion didn&#39;t cease after the decision was taken, unlike most<br>&gt; discussions on swift-evolution.<br>&gt;<br>&gt; On Wednesday, 27 April 2016, Matthew Johnson via swift-evolution<br>&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;<br>&gt;<br>&gt;<br>&gt;    Sent from my iPad<br>&gt;<br>&gt;    On Apr 27, 2016, at 12:37 AM, Thorsten Seitz via swift-evolution<br>&gt;    &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;    Am 26. April 2016 um 22:02 schrieb Dave Abrahams &lt;dabrahams at apple.com&gt;:<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;    on Tue Apr 26 2016, Thorsten Seitz &lt;tseitz42-AT-icloud.com<br>&gt;&gt;&gt;    &lt;http://tseitz42-at-icloud.com&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;    Am 23.04.2016 um 10:27 schrieb Pyry Jahkola via swift-evolution<br>&gt;&gt;&gt;&gt;    &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;    I&#39;d like to second James Campbell&#39;s suggestion of a `mutate` keyword.<br>&gt;&gt;&gt;&gt;    Clarifying comments inline below:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;    On 23 Apr 2016, at 00:24, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;    &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;    This is not a new idea. Something almost identical to this has been<br>&gt;&gt;&gt;&gt;    explored and discussed quite thoroughly already:<br>&gt;&gt;&gt;&gt;    &lt;https://github.com/apple/swift/blob/master/docs/proposals/Inplace.rst&gt;<br>&gt;&gt;&gt;&gt;    &lt;https://github.com/apple/swift/blob/master/docs/proposals/Inplace.rst%3E&gt;.<br>&gt;&gt;&gt;&gt;    In fact, it was implmented and later reverted because it raised<br>&gt;&gt;&gt;&gt;    language-design questions for which we had no good answers.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;    I don&#39;t know if the following are particularly good answers, but<br>&gt;&gt;&gt;&gt;    I&#39;ll try<br>&gt;&gt;&gt;&gt;    anyway:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;    I don&#39;t believe the choice of glyph (&amp; vs =) affects any of the<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;    fundamental issues:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;    * Should the x.=f() syntax be required for *every* mutating method<br>&gt;&gt;&gt;&gt;    invocation?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;    Allow me to ask it differently: Should some specific syntax be<br>&gt;&gt;&gt;&gt;    required for<br>&gt;&gt;&gt;&gt;    every mutating method? â€” Yes.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;    I think I like that idea.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;    Should the syntax be `x.=f()`? â€” Not necessarily. I kinda like James<br>&gt;&gt;&gt;&gt;    Campbell&#39;s idea of a `mutate` keyword. Consider the following:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;    var numbers = [5, 12, 6, 2]<br>&gt;&gt;&gt;&gt;    mutate numbers.append(10)<br>&gt;&gt;&gt;&gt;    mutate numbers.sort()<br>&gt;&gt;&gt;&gt;    if let biggest = mutate numbers.popLast() {<br>&gt;&gt;&gt;&gt;    print(&quot;The biggest number was:&quot;, biggest)<br>&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;    So `mutate` would work much like `try` butâ€”unlike `try` which can move<br>&gt;&gt;&gt;&gt;    further to the leftâ€”`mutate` would have to always prefix the mutating<br>&gt;&gt;&gt;&gt;    receiver.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;    That doesn&#39;t look so bad (we might shorten &#39;mutate&#39; to &#39;mut&#39;,<br>&gt;&gt;&gt;&gt;    though I don&#39;t<br>&gt;&gt;&gt;&gt;    think that would be really necessary).<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;    We&#39;ve already discussed this whole question length, specifically<br>&gt;&gt;&gt;    considered the direction of an almost-identical language feature, and<br>&gt;&gt;&gt;    ended up settling on the â€śform/ed/ingâ€ť naming conventions. If there is<br>&gt;&gt;&gt;    some new information since then, it would be possible to handle<br>&gt;&gt;<br>&gt;&gt;    The new information might be that the &quot;form&quot; naming conventions have<br>&gt;&gt;    not been that well received, i.e. the naming discussion cannot really<br>&gt;&gt;    be described as &quot;settled&quot; :-)<br>&gt;<br>&gt;    Also, I could be wrong but IIRC the discussion of having some kind of<br>&gt;    &quot;mutation&quot; syntax post Swift 3 was held open when that discussion<br>&gt;    concluded.  It was just out of scope for Swift 3 to address all of the<br>&gt;    necessary issues.<br>&gt;<br>&gt;    I hope this issue isn&#39;t settled once and for all as I am not very happy<br>&gt;    with the current solution.  The &quot;form&quot; names are quite awkward and<br>&gt;    confusing IMO.  I would eventually get used to them but that is the<br>&gt;    problem - they will really take getting used to.<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt;    -Thorsten<br>&gt;&gt;    _______________________________________________<br>&gt;&gt;    swift-evolution mailing list<br>&gt;&gt;    swift-evolution at swift.org<br>&gt;&gt;    https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; -- Howard.<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>‰í<br></p><p>------------- End Message ------------- <br></p><p><br></p><p>From James F<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
