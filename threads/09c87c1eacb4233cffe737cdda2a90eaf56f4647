<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0047 Defaulting non-Void functions so they warn on unused results</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>March 16, 2016 at 12:00:00pm</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of “Defaulting non-Void functions so they warn on unused results” begins now and runs through March 21, 2016. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0047-nonvoid-warn.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at:<br>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	• What is your evaluation of the proposal?<br>	• Is the problem being addressed significant enough to warrant a change to Swift?<br>	• Does this proposal fit well with the feel and direction of Swift?<br>	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at:<br></p><p>https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b9904260218b6d7942782c2b2355f2aa?s=50"></div><header><strong>[Review] SE-0047 Defaulting non-Void functions so they warn on unused results</strong> from <string>William Dillon</string> &lt;william at housedillon.com&gt;<p>March 16, 2016 at 01:00:00pm</p></header><div class="content"><p>• What is your evaluation of the proposal?<br></p><p>+1<br></p><p>	• Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Probably, yes.  It’s not a problem in the sense that something is broken, but I believe that the philosophy of swift regarding safety and the avoidance of bugs justifies this change.<br></p><p>	• Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I don’t believe so.<br></p><p>	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Read the proposal and followed the discussion on the ML.<br></p><p>- Will<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>[Review] SE-0047 Defaulting non-Void functions so they warn on unused results</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>March 16, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; The review of “Defaulting non-Void functions so they warn on unused results” begins now and runs through March 21, 2016. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0047-nonvoid-warn.md<br>&gt; <br>&gt; 	• What is your evaluation of the proposal?<br></p><p>Strongly in favor of this. I’ve added the existing @warn_unused_result all over the place in my own code and it helps keep me honest - but I’m kind of tired of the boilerplate!<br></p><p><br>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Calling it a “problem” is probably not the right term in this case, but yes, I think change is warranted due to Swift’s willingness to help developers avoid bugs by omission.<br></p><p><br>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes, I believe so. Swift already alerts you when you don’t mutate a var or cover all possible switch cases and this feels like a very similar situation.<br></p><p><br>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I don’t think I’ve used any with this sort of default.<br></p><p><br>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Followed the mailing list discussion, read the proposal, encountered the issue in my own code.<br></p><p>l8r<br>Sean<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/47e3aeeaf151d4f51ee15fc7871bf584?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0047 Defaulting non-Void functions so they warn on unused results</strong> from <string>Rudolf Adamkovič</string> &lt;salutis at me.com&gt;<p>March 16, 2016 at 09:00:00pm</p></header><div class="content"><p>After using Swift all day, every day since day #1, I&#39;m strongly in favor, e.g. +1 here!<br></p><p>Now bring the @pure! :)<br></p><p>R+ <br></p><p>Sent from my iPhone<br></p><p>&gt; On 16 Mar 2016, at 20:36, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of “Defaulting non-Void functions so they warn on unused results” begins now and runs through March 21, 2016. The proposal is available here:<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/proposals/0047-nonvoid-warn.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at:<br>&gt;    https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt;    • What is your evaluation of the proposal?<br>&gt;    • Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;    • Does this proposal fit well with the feel and direction of Swift?<br>&gt;    • If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;    • How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Review] SE-0047 Defaulting non-Void functions so they warn on unused results</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>March 16, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; 	• What is your evaluation of the proposal?<br></p><p>Strong +1.<br></p><p>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes, as it should help prevent mistakes (i.e- not adding it). It should also clean up code as I find myself adding the attribute a lot more than I omit it. In fact cases where I have a return value but don’t want a warning are very rare in my experience.<br></p><p>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes, as it should prevent mistakes by making the less common case the exception.<br></p><p>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quickly re-read the proposal, but participated in the discussion.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bce64da43e291f2ce30987a83780502c?s=50"></div><header><strong>[Review] SE-0047 Defaulting non-Void functions so they warn on unused results</strong> from <string>Patrick Pijnappel</string> &lt;patrickpijnappel at gmail.com&gt;<p>March 17, 2016 at 10:00:00am</p></header><div class="content"><p>+1 but:<br></p><p>I&#39;m somewhat hesistant about not marking the plausibly discarable ones<br>@discardableResult.<br>- I rarely use the result value of removeLast() and I don&#39;t see how<br>requiring it here adds any safety. It is obvious this call has side-effects<br>and doesn&#39;t just return the last element.<br>- I would say the canonical way to clean-up observers would be to call<br>removeObservers(self) in deinit to remove all of them at once. Though<br>arguably not marking it @discardable might have some small safety benefit<br>here.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160317/9f5b7507/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d30e546d655d1c7ece0464791a9a90d5?s=50"></div><header><strong>[Review] SE-0047 Defaulting non-Void functions so they warn on unused results</strong> from <string>Adrian Kashivskyy</string> &lt;adrian.kashivskyy at me.com&gt;<p>March 17, 2016 at 07:00:00am</p></header><div class="content"><p>@Patrick,<br></p><p>&gt; I rarely use the result value of removeLast() and I don&#39;t see how requiring it here adds any safety. It is obvious this call has side-effects and doesn&#39;t just return the last element.<br></p><p>Actually, removeLast() and other pop()-like functions are examples of functions that will most probably be marked with @discartableResult attribute.<br></p><p>————————————————————<br></p><p>@Brent,<br></p><p>&gt; I would prefer that we either use a shorter word than &quot;discardable&quot;, attach the keyword to the return type as discussed in &quot;Future Directions&quot;, or both.<br></p><p>That was the first idea, but it has been changed to function declaration attribute, per core team design discussion &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160314/012823.html&gt;.<br></p><p>&gt; I also don&#39;t like that this proposal doesn&#39;t include an &quot;Impact on existing code&quot; section. We ought to decide whether the migrator will add `@discardableResult` to existing symbols or not.<br></p><p>I totally agree with Erica – the migrator should only remove existing @warn_unused_result attributes. @discardableResult should be added manually and deliberately to functions in stdlib and your own code. We&#39;ll be happy to clarify this behavior under &quot;Impact on existing code&quot; section.<br></p><p>————————————————————<br></p><p>@Jed,<br></p><p>&gt; That said, the problem isn’t necessarily difficult to solve — it’s just that it’s important that it actually be solved at the same time the feature is rolled out.<br></p><p>I cannot speak for Apple, but judging from last Swift releases where SDKs were always up-to-date with latest Swift changes, I believe this change will be reflected as well.<br></p><p>The only place that inconsistencies may appear, are third-party libraries, but this has always been the case with all language changes.<br> <br></p><p>Regards,<br>Adrian Kashivskyy<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160317/5e67aa6d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Review] SE-0047 Defaulting non-Void functions so they warn on unused results</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>March 17, 2016 at 02:00:00am</p></header><div class="content"><p>&gt;&gt; I also don&#39;t like that this proposal doesn&#39;t include an &quot;Impact on existing code&quot; section. We ought to decide whether the migrator will add `@discardableResult` to existing symbols or not.<br>&gt; <br>&gt; I totally agree with Erica – the migrator should only remove existing @warn_unused_result attributes. @discardableResult should be added manually and deliberately to functions in stdlib and your own code. We&#39;ll be happy to clarify this behavior under &quot;Impact on existing code&quot; section.<br></p><p>I agree in general, but I&#39;m sure there are at least one or two codebases out there which really *have* been thoroughly audited and their authors will be highly displeased to have to update them manually. We might want to provide an option to invert the existing annotations, or to invert things automatically if the code meets some heuristic, like having more than half of the functions in a given file marked with `@warn_unused_result`.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f38cb038c3d9ae705c4db3b5b5272906?s=50"></div><header><strong>[Review] SE-0047 Defaulting non-Void functions so they warn on unused results</strong> from <string>Greg Parker</string> &lt;gparker at apple.com&gt;<p>March 21, 2016 at 04:00:00am</p></header><div class="content"><p>&gt; On Mar 16, 2016, at 11:46 PM, Adrian Kashivskyy via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; @Jed,<br>&gt; <br>&gt;&gt; That said, the problem isn’t necessarily difficult to solve — it’s just that it’s important that it actually be solved at the same time the feature is rolled out.<br>&gt; <br>&gt; I cannot speak for Apple, but judging from last Swift releases where SDKs were always up-to-date with latest Swift changes, I believe this change will be reflected as well.<br></p><p>OS SDKs don&#39;t turn on a dime so this is a reasonable concern. We don&#39;t want to ship an Xcode package with Swift and SDKs that don&#39;t play well together. (Those of you in bleeding-edge open source land are not so lucky…)  For this feature there are feasible adoption paths even if the SDK updates slowly so we should be okay.<br></p><p>If we can&#39;t get enough of the SDK to adapt in time then we can make the change in stages, deferring complete adoption until the SDK can catch up. For this feature one interim measure would be to temporarily accept both @warn_unused_result and @discardable, add a temporary compiler flag to choose what the default is for unmarked functions, and set the flag to the old way by default. Then the new SDK could update their code while the old SDK still works. Once the SDK was ready we could remove @warn_unused_result and the compiler flag. <br></p><p>A simpler staged adoption would be to temporarily accept both @warn_unused_default and @discardable, but ignore them both. The downside there is that we would temporarily get no unused result warnings at all, which sounds bad.<br></p><p>In any case the problem of SDK malleability is not a show-stopper for acceptance of this proposal. It&#39;s not hard to make it work. <br></p><p><br>-- <br>Greg Parker     gparker at apple.com &lt;mailto:gparker at apple.com&gt;     Runtime Wrangler<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160321/fd84145f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] SE-0047 Defaulting non-Void functions so they warn on unused results</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>March 21, 2016 at 02:00:00pm</p></header><div class="content"><p>This is the last official day of SE-0047 review. I wanted to throw this in here before things wrapped up.<br>Hopefully this addresses concerns brought up during the review period.<br></p><p>Thanks, -- Erica<br></p><p><br>Migration and Impact On Existing Code<br></p><p>Flipping Swift&#39;s default behavior to automatically warn on unused results should expose overlooked errors in existing code. Community review has convinced us that simply removing the existing attributes from Swift code will not be the best solution for all developers. <br></p><p>For many developers, removing @warn_unused_result will be sufficient, enabling warnings to drive code audits. Deprecating @warn_unused_result instead of remove-on-migration, would better allow inspection of any code that is not @warn_unused_result.<br></p><p>Some developers have requested an on-demand inversion (marking un-marked functions) for code they believe is well audited and will resist any issues with masking inherent problems. Brent Royal-Gordan wrote, &quot;If you have done a reasonably thorough audit, deleting the annotations instead of inverting them is a destructive change. When Swift 2 changed the documentation format, the migrator didn&#39;t delete all the old doc comments. Deleting @warn_unused_result in audited codebases is akin to that.&quot;<br></p><p>Concerns were raised over imported functions written in discardable-by-default environments, especially for C-language sources where community members felt imported functions should match the default behavior of the C-language. Global functions that return scalar values from Objective-C sources might be treated in the same way. We believe any Objective-C method or function that returns an NSObject should warn on ignored result unless explicitly marked.  removeLast() and other pop()-like functions are examples of functions that will most probably be marked with @discartableResult attribute. <br></p><p><br> &lt;https://gist.github.com/erica/05f7815cdb7e644062f5#non-migration-concerns&gt;Non-migration concerns:<br></p><p>In Swift Evolution discussions, the term @discardable was mildly preferred over @discardableResult.<br></p><p>Some community members requested a new attribute enabling exceptional imported functions to be properly annotated from Objective-C source.<br></p><p>Dany St-Amant requested two levels of compiler response: @discardableResult(warn) for simple warnings and @discardableResult(critical) which generates an error with unused results, such as when returning allocated resources.<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160321/a2ddc71b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Review] SE-0047 Defaulting non-Void functions so they warn on unused results</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>March 21, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On 21 Mar 2016, at 20:35, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; In Swift Evolution discussions, the term @discardable was mildly preferred over @discardableResult.<br>&gt; <br>&gt; Some community members requested a new attribute enabling exceptional imported functions to be properly annotated from Objective-C source.<br>&gt; <br>&gt; Dany St-Amant requested two levels of compiler response: @discardableResult(warn) for simple warnings and @discardableResult(critical) which generates an error with unused results, such as when returning allocated resources<br>&gt; <br>&gt; <br></p><p>This looks good, I think that @discardableResult() makes sense until we can get @discardable on the return type itself. I think that if warn/critical is added then there should also be a corresponding “allow” or similar (which is what the default is), i.e- @discardableResult on its own implies @discardResult(allow) to issue no warnings of any kind.<br></p><p>I also like the idea of being able to add this attribute to types as well as functions, allowing the default behaviour to be changed on a per-type basis, as this would be useful for types that are specifically designed with method chaining for example (where most results are discardable as standard). While the choice of default will never satisfy everyone, this would make it easy to tweak for your own needs.<br></p><p>Allow us to do something like the following, assuming that @discardableResult(warn) is now the default:<br></p><p>	@discardableResult(allow)<br>	class MyChainableType {<br>		func chainableMethod() -&gt; Self { … }<br>		func anotherChainableMethod() -&gt; Self { … }<br></p><p>		@discardableResult(critical)<br>		func getResult() -&gt; Dictionary { … }<br>	}<br></p><p>Of course, if we can get attributes on return types now or in future, then the function form of the attribute should be @discardable(warn) for .getResult().<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160321/04b2bf99/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d30e546d655d1c7ece0464791a9a90d5?s=50"></div><header><strong>[Review] SE-0047 Defaulting non-Void functions so they warn on unused results</strong> from <string>Adrian Kashivskyy</string> &lt;adrian.kashivskyy at me.com&gt;<p>March 22, 2016 at 12:00:00am</p></header><div class="content"><p>I believe the scoped @discardableResult(warn|critical) attribute is a nice idea for future directions, but I&#39;m not sure it&#39;s in scope of this proposal, which, as a first small step, aims to basically invert the @warn_unused_result standard.<br></p><p>cc Erica<br></p><p><br>Pozdrawiam – Regards,<br>Adrian Kashivskyy<br></p><p>&gt; Wiadomość napisana przez Haravikk &lt;swift-evolution at haravikk.me&gt; w dniu 21.03.2016, o godz. 22:28:<br>&gt; <br>&gt; <br>&gt;&gt; On 21 Mar 2016, at 20:35, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; In Swift Evolution discussions, the term @discardable was mildly preferred over @discardableResult.<br>&gt;&gt; <br>&gt;&gt; Some community members requested a new attribute enabling exceptional imported functions to be properly annotated from Objective-C source.<br>&gt;&gt; <br>&gt;&gt; Dany St-Amant requested two levels of compiler response: @discardableResult(warn) for simple warnings and @discardableResult(critical) which generates an error with unused results, such as when returning allocated resources<br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; This looks good, I think that @discardableResult() makes sense until we can get @discardable on the return type itself. I think that if warn/critical is added then there should also be a corresponding “allow” or similar (which is what the default is), i.e- @discardableResult on its own implies @discardResult(allow) to issue no warnings of any kind.<br>&gt; <br>&gt; I also like the idea of being able to add this attribute to types as well as functions, allowing the default behaviour to be changed on a per-type basis, as this would be useful for types that are specifically designed with method chaining for example (where most results are discardable as standard). While the choice of default will never satisfy everyone, this would make it easy to tweak for your own needs.<br>&gt; <br>&gt; Allow us to do something like the following, assuming that @discardableResult(warn) is now the default:<br>&gt; <br>&gt; 	@discardableResult(allow)<br>&gt; 	class MyChainableType {<br>&gt; 		func chainableMethod() -&gt; Self { … }<br>&gt; 		func anotherChainableMethod() -&gt; Self { … }<br>&gt; <br>&gt; 		@discardableResult(critical)<br>&gt; 		func getResult() -&gt; Dictionary { … }<br>&gt; 	}<br>&gt; <br>&gt; Of course, if we can get attributes on return types now or in future, then the function form of the attribute should be @discardable(warn) for .getResult().<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160322/2e1e9907/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Review] SE-0047 Defaulting non-Void functions so they warn on unused results</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>March 22, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On 21 Mar 2016, at 23:21, Adrian Kashivskyy &lt;adrian.kashivskyy at me.com&gt; wrote:<br>&gt; <br>&gt; I believe the scoped @discardableResult(warn|critical) attribute is a nice idea for future directions, but I&#39;m not sure it&#39;s in scope of this proposal, which, as a first small step, aims to basically invert the @warn_unused_result standard.<br>&gt; <br>&gt; cc Erica<br></p><p>For the addition of critical sure, but the ability for developers to switch between warn-by-default and ignore-by-default (current) behaviour would ease migration, and address concerns from those that prefer the current behaviour; i.e- for types designed with method chaining in mind the current default is preferable to the new one, and the new default will actually cause those types to become susceptible to the same mistakes that warn-by-default hopes to avoid.<br></p><p>For this reason I think that having an attribute at both function and type levels is important, as it lets developers choose for themselves what the default for their type is (or file, or extension, whatever scope makes most sense).<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160322/e2468d99/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>[Review] SE-0047 Defaulting non-Void functions so they warn on unused results</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>March 17, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; 	• What is your evaluation of the proposal?<br></p><p>Great idea<br></p><p>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes I think so, currently the declaration line is very cluttered with lots of noise up front that hides what the line actually does. This proposal removes some of that noise.<br></p><p>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes, Swift is clutter free and tries to pick as the default the most common case<br></p><p>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I have used languages with the current Swift behaviour of having to explicitly initiate the warning and they like Swift tended to be a pain. Either the declaration got cluttered or the annotation was omitted.<br></p><p>I have used products like lint for C and appreciated that it automatically warned about unused returned values.<br></p><p>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Have followed along on Swift Evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0047 Defaulting non-Void functions so they warn on unused results</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>March 16, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; 	• What is your evaluation of the proposal?<br></p><p>I am in favor of the semantic, but I don&#39;t like `@discardableResult`; it&#39;s long and unwieldy. I would prefer that we either use a shorter word than &quot;discardable&quot;, attach the keyword to the return type as discussed in &quot;Future Directions&quot;, or both.<br></p><p>I also don&#39;t like that this proposal doesn&#39;t include an &quot;Impact on existing code&quot; section. We ought to decide whether the migrator will add `@discardableResult` to existing symbols or not.<br></p><p>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes. I should use `@warn_unused_result`, but never bother because it&#39;s just too much of a hassle. My code will be safer with this change.<br></p><p>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes. This kind of safety and explicitness is very Swifty.<br></p><p>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I believe most languages I used either had &quot;every function returns its last expression&quot; semantics, or had an optional warning but no well-publicized way to suppress it for a given function.<br></p><p>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Read the proposal and participated in some of the discussion.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0047 Defaulting non-Void functions so they warn on unused results</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>March 16, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Mar 16, 2016, at 5:27 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; 	• What is your evaluation of the proposal?<br>&gt; <br>&gt; I am in favor of the semantic, but I don&#39;t like `@discardableResult`; it&#39;s long and unwieldy. I would prefer that we either use a shorter word than &quot;discardable&quot;, attach the keyword to the return type as discussed in &quot;Future Directions&quot;, or both.<br>&gt; <br></p><p>1. The keyword will be used rarely. I don&#39;t mind if it&#39;s slightly hard to type.<br>2. When used, it should be as clear as possible, both in understanding what it does and visually standing out.<br>3. The most popular keyword requested was actually @allowUnusedResult followed by @suppressUnusedResultWarning. <br>   Both of these are longer. I felt @discardableResult was more descriptive than @allowUnusedResult. I wanted to avoid<br>   the word &quot;suppress&quot; as it is appears on many frequently misspelled words lists. <br></p><p>   I believe discardable (the number one choice  by *far* for a type annotation, with ignorable as its second)  perfectly describes<br>   how the return value/result should be treated.  When included, the behavior mimics:<br></p><p>        let _ = resultReturningFunctionOfSomeType()<br>   <br>   which basically discards the result (an active decision) rather than ignores it (a passive one).<br></p><p>&gt; I also don&#39;t like that this proposal doesn&#39;t include an &quot;Impact on existing code&quot; section. We ought to decide whether the migrator will add `@discardableResult` to existing symbols or not.<br></p><p>This is a good point and Adrian and I will be happy to add this in. I do not believe it should, although I&#39;ll let Adrian answer<br>on his own.  The entire point of this exercise is to reduce likely error points. Simply changing the behavior without fixits<br>should help accomplish that in existing code. If you add @discardableResult, we mask the advantage this behavior<br>should address.<br></p><p>&gt; <br>&gt;&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; Yes. I should use `@warn_unused_result`, but never bother because it&#39;s just too much of a hassle. My code will be safer with this change.<br></p><p>And that&#39;s why I don&#39;t think the migrator should make any code changes.<br></p><p>-- E<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0047 Defaulting non-Void functions so they warn on unused results</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>March 16, 2016 at 09:00:00pm</p></header><div class="content"><p>• What is your evaluation of the proposal?<br>+1 on proposal overall. I agree that @discardable is sufficient to describe what it does. If there is questions it is easy to search it on the web. Also the context of where the @discardable modifier is on the line will reduce ambiguity. Conciseness is important and I don’t think it significantly detracts from the clarity to leave off the “Return” part. <br></p><p>	• Is the problem being addressed significant enough to warrant a change to Swift?<br>Yes<br></p><p>	• Does this proposal fit well with the feel and direction of Swift?<br>Yes<br></p><p>	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>NA<br></p><p>	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Been following and contributing to discussion and read the proposal. <br></p><p><br>&gt; On Mar 16, 2016, at 5:57 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Mar 16, 2016, at 5:27 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; 	• What is your evaluation of the proposal?<br>&gt;&gt; <br>&gt;&gt; I am in favor of the semantic, but I don&#39;t like `@discardableResult`; it&#39;s long and unwieldy. I would prefer that we either use a shorter word than &quot;discardable&quot;, attach the keyword to the return type as discussed in &quot;Future Directions&quot;, or both.<br>&gt;&gt; <br>&gt; <br>&gt; 1. The keyword will be used rarely. I don&#39;t mind if it&#39;s slightly hard to type.<br>&gt; 2. When used, it should be as clear as possible, both in understanding what it does and visually standing out.<br>&gt; 3. The most popular keyword requested was actually @allowUnusedResult followed by @suppressUnusedResultWarning. <br>&gt;   Both of these are longer. I felt @discardableResult was more descriptive than @allowUnusedResult. I wanted to avoid<br>&gt;   the word &quot;suppress&quot; as it is appears on many frequently misspelled words lists. <br>&gt; <br>&gt;   I believe discardable (the number one choice  by *far* for a type annotation, with ignorable as its second)  perfectly describes<br>&gt;   how the return value/result should be treated.  When included, the behavior mimics:<br>&gt; <br>&gt;        let _ = resultReturningFunctionOfSomeType()<br>&gt; <br>&gt;   which basically discards the result (an active decision) rather than ignores it (a passive one).<br>&gt; <br>&gt;&gt; I also don&#39;t like that this proposal doesn&#39;t include an &quot;Impact on existing code&quot; section. We ought to decide whether the migrator will add `@discardableResult` to existing symbols or not.<br>&gt; <br>&gt; This is a good point and Adrian and I will be happy to add this in. I do not believe it should, although I&#39;ll let Adrian answer<br>&gt; on his own.  The entire point of this exercise is to reduce likely error points. Simply changing the behavior without fixits<br>&gt; should help accomplish that in existing code. If you add @discardableResult, we mask the advantage this behavior<br>&gt; should address.<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; <br>&gt;&gt; Yes. I should use `@warn_unused_result`, but never bother because it&#39;s just too much of a hassle. My code will be safer with this change.<br>&gt; <br>&gt; And that&#39;s why I don&#39;t think the migrator should make any code changes.<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160316/a25940a2/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0047 Defaulting non-Void functions so they warn on unused results</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>March 17, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; 1. The keyword will be used rarely. I don&#39;t mind if it&#39;s slightly hard to type.<br>The first sentence might be true for many developers, but you can&#39;t predict how other people will design their libraries:<br>Have a look at http://www.martinfowler.com/bliki/FluentInterface.html for a good reason to keep &quot;results&quot; discardable.<br></p><p>Sadly, the second sentence is definitely true — &quot;@discardableResult&quot; doesn&#39;t &quot;feel&quot; right, and would discourage techniques like fluent interfaces.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0047 Defaulting non-Void functions so they warn on unused results</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>March 17, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On 17 Mar 2016, at 09:27, Tino Heth via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Sadly, the second sentence is definitely true — &quot;@discardableResult&quot; doesn&#39;t &quot;feel&quot; right, and would discourage techniques like fluent interfaces.<br></p><p>Somehow I completely forgot about the issue around naming the replacement attribute; I agree that it doesn’t feel right, but then @warn_unused_result doesn’t feel that right to me either.<br></p><p>I’m very much more in favour of decorating the return type itself as mentioned in alternatives. In fact, I’d be in favour of delaying this change until that can be done, rather than using something else in the mean time; I do want this change, but it’s not such a big deal to me that I’m unwilling to wait a little bit longer to get what I feel is the better form of it.<br></p><p><br>If it does go ahead though, I think that in the short term @ignore_unused_result is more consistent with what we have now, and can be re-evaluated depending upon what we want to do with the attribute naming convention (or has that been decided already?). While it’s longer, I think that any variation of &quot;ignore unused” is a bit clearer than discardable, at least to me.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0047 Defaulting non-Void functions so they warn on unused results</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>March 17, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On 17 Mar 2016, at 09:27, Tino Heth via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; Have a look at http://www.martinfowler.com/bliki/FluentInterface.html for a good reason to keep &quot;results&quot; discardable.<br></p><p>Ack, hit send before quoting this part to come back to it.<br></p><p>I assume your point here is that having to add @discardableResult (or whatever) will lead to fluent interfaces becoming prone to the same mistakes that non-fluent interfaces currently have with @warn_unused_result.<br></p><p>Perhaps we could add some kind of attribute to the type itself to allow for selection between the two behaviours?<br></p><p>For example, we could use a different attribute in the style of:<br></p><p>@unusedResult(ignore)<br>@unusedResult(warn)<br></p><p>Add this to a function and it affects that specifically, add it to a type and it affects all methods of that type (unless they have their own attribute overriding it). So for a fluent interface I could do:<br></p><p>	@unusedResult(ignore)<br>	protocol MyFluentType {<br>		func something() -&gt; Self<br>		func somethignElse() -&gt; Self<br></p><p>		@unusedResult(warn)<br>		func notAFluentMethod() -&gt; Self<br>	}<br></p><p>If we do get return type attributes then the return type form could become @unused(ignore) to make it a bit shorter?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160317/5a09dbad/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0047 Defaulting non-Void functions so they warn on unused results</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>March 17, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; Perhaps we could add some kind of attribute to the type itself to allow for selection between the two behaviours?<br></p><p><br>imho that&#39;s a good direction —  it&#39;s a pity that linking to other posts is so tedious ;-): I voted for something similar (change the setting for a whole module).<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0047 Defaulting non-Void functions so they warn on unused results</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>March 17, 2016 at 08:00:00am</p></header><div class="content"><p>Sorry for how informal this review is; I&#39;m generally in favor of it, although I would recommend that imported C functions are by default tagged with @discardableResult.<br></p><p>Félix<br></p><p>&gt; Le 17 mars 2016 à 07:33:10, Tino Heth via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt;&gt; Perhaps we could add some kind of attribute to the type itself to allow for selection between the two behaviours?<br>&gt; <br>&gt; <br>&gt; imho that&#39;s a good direction —  it&#39;s a pity that linking to other posts is so tedious ;-): I voted for something similar (change the setting for a whole module).<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160317/98198c59/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/423beb7cfb5894f7b53623d6e515b01d?s=50"></div><header><strong>[Review] SE-0047 Defaulting non-Void functions so they warn on unused results</strong> from <string>Jed Lewison</string> &lt;jed.lewison at icloud.com&gt;<p>March 17, 2016 at 12:00:00am</p></header><div class="content"><p>In theory, I like this idea, and I think it fits with the general direction of Swift in terms of making APIs and their usage more explicit, particularly custom and third-party ones, but I’m concerned about what would happen if system APIs that were intended to have discardable results aren’t annotated at the same time that the feature is rolled out — while the intent is laudable, if the net result was that a bunch of spurious warnings are generated, then it makes the warning system less valuable.<br></p><p>That said, the problem isn’t necessarily difficult to solve — it’s just that it’s important that it actually be solved at the same time the feature is rolled out. The most obvious examples are the popViewController methods on UINavigationController — it’s very common, probably more common than not, to ignore the return value of these methods, but it would be unfortunate to need to explicitly ignore the results. (I suppose a counter argument here is that a lot of people may not even realize that those methods have a return value, but even if that’s the case, I suspect the typical pattern is to ignore the return.)<br></p><p>Assuming that most common APIs are audited (and that APIs like popViewController methods would be marked as discardable), then I think the proposal would have a positive impact. Perhaps one way to figure out the scope of the auditing would be to determine how many Apple SDK methods that return values aren’t already marked as warn_unused_result.<br></p><p><br>&gt; On Mar 16, 2016, at 3:36 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of “Defaulting non-Void functions so they warn on unused results” begins now and runs through March 21, 2016. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/maout ster/proposals/0047-nonvoid-warn.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at:<br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	• What is your evaluation of the proposal?<br>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0047 Defaulting non-Void functions so they warn on unused results</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>March 17, 2016 at 04:00:00pm</p></header><div class="content"><p>I am +1 on this proposal, which helps counter a common programmer error and encourages better-designed APIs.<br></p><p>Developers and users have three powerful ways to deal with this new behavior:<br></p><p>- Values that are meant to be optionally returned to the caller if the caller cares can be denoted by the API vendor using an inout argument of type T?.<br>- The API vendor can add the &#39;allow unused result&#39; attribute to explicitly document that the API&#39;s semantics allow the return value to be ignored safely.<br>- The API consumer can use the &quot;_ = returnsSomething()&quot; pattern to denote that they explicitly don&#39;t care about the return value, regardless of the API vendor&#39;s intent.<br></p><p>Yes, it&#39;s true that any programmer can write incorrect code regardless of language features if they are sufficiently determined, but in my opinion this proposal moves the defaults towards better safety without laying a disproportionately onerous burden upon users and API vendors.<br></p><p>Best,<br>Austin<br></p><p><br>&gt; On Mar 17, 2016, at 3:36 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of “Defaulting non-Void functions so they warn on unused results” begins now and runs through March 21, 2016. The proposal is available here:<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/proposals/0047-nonvoid-warn.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at:<br>&gt;    https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt;    • What is your evaluation of the proposal?<br>&gt;    • Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;    • Does this proposal fit well with the feel and direction of Swift?<br>&gt;    • If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;    • How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/05e222e6ef4d84013bb3baeb0e25c90b?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0047 Defaulting non-Void functions so they warn on unused results</strong> from <string>Patrick Gili</string> &lt;gili.patrick.r at gili-labs.com&gt;<p>March 17, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; <br>&gt; 	• What is your evaluation of the proposal?<br></p><p>+1<br></p><p>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes.<br></p><p>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I really don&#39;t like language compilers/interpreters that do not warn when a return value hasn&#39;t been consumed. It is one of the few aspects of Ruby that I dislike, and it causes no end of frustration. However, this enforces a policy while allowing a opt-out behavior, which is a plus. Either way, the developer was forced to consider the return value.<br></p><p>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick read.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/283bdc6ec76dd4d16b7a8234222e55d4?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0047 Defaulting non-Void functions so they warn on unused results</strong> from <string>Michel Fortin</string> &lt;michel.fortin at michelf.ca&gt;<p>March 17, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; What is your evaluation of the proposal?<br></p><p>I worry about imported libraries. I think the default is right for code that was written directly in Swift, but for C and Objective-C code that was written in discartable-by-default environment, the APIs were designed with discardable results that in mind.<br></p><p>I also think it is imperative that the attribute is put just before the return type. Placing the attribute near the return type helps with the discoverability of the feature, which is important. It also makes it easier not to forget the attribute when adding a return type, which will reduce annoyances later.<br></p><p><br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Does this proposal fit well with the feel and direction of Swift?<br></p><p>Maybe, but I&#39;m not sure. It might cause annoyances for people who aren&#39;t aware of the feature. Either they&#39;ll feel forced to use &quot;_ = foo()&quot; repeatedly (what the compiler will suggest to them), or they&#39;ll feel annoyed enough that they&#39;ll just remove the return value from the function. So whether this is a convenience or an inconvenience depends entirely on people&#39;s awareness of the feature.<br></p><p><br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Followed the discussion, read the proposal. Also checked whether adding @warn_unused_result everywhere in my code where appropriate would find bugs: it didn&#39;t.<br></p><p><br>-- <br>Michel Fortin<br>https://michelf.ca<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4002684831b0a89736f4837d2e60f66a?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0047 Defaulting non-Void functions so they warn on unused results</strong> from <string>Pierre Monod-Broca</string> &lt;pierremonodbroca at gmail.com&gt;<p>March 22, 2016 at 08:00:00am</p></header><div class="content"><p>&gt;    https://github.com/apple/swift-evolution/blob/master/proposals/0047-nonvoid-warn.md<br></p><p>   • What is your evaluation of the proposal?<br></p><p>+1<br></p><p>   • Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes, I believe so.<br></p><p>   • Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes, this should encourage better practices, without forcing any pattern.<br></p><p>   • If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>No.<br></p><p>   • How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Thorough reading of the proposal, quick reading of the discussion thread.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f822334c2f6ebeafd3a41cd44c82a62b?s=50"></div><header><strong>[Review] SE-0047 Defaulting non-Void functions so they warn on unused results</strong> from <string>Andrey Tarantsov</string> &lt;andrey at tarantsov.com&gt;<p>March 24, 2016 at 02:00:00am</p></header><div class="content"><p>&gt; What is your evaluation of the proposal?<br></p><p>-0.5 if the annotation is verbose (much longer than @discardable).<br>+0.5 if the annotation is pleasant and concise, like @discardable<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>The warn-by-default behavior is mostly useless. The only reason to make the change is because “if we were designing Swift from scratch, this would probably be a slightly better default”.<br></p><p>Most non-void functions are called for their result, and nobody ever forgets to use that result; if they do, it&#39;s like if they forgot to call the function altogether — trivial to find, not useful as a compiler diagnostic at all.<br></p><p>The new default is better for:<br></p><p>- (A) classes that provide both mutating and non-mutating methods;<br>- (B) methods where forgetting to use the result produces a bug (a download task that needs to be resumed, an alert that needs to be displayed, a listener that needs to be stored somewhere, etc).<br></p><p>The old default is better for:<br></p><p>- (C) fluid APIs and other similar DSL scenarios;<br>- (D) methods that are mainly invoked for their side effect and return a value “just in case”, like removing/adding elements, scheduling tasks, ...<br></p><p>I&#39;ve just scanned the entire Swift codebase I wrote since that fateful WWDC&#39;14 (~20 kLOC excluding comments and blanks). I only have a handful of classes/methods in each category above, and annotating them one way or another is a trivial matter. Some of them *are not* currently annotated with @warn_unused_result, which is a point in favor of this proposal.<br></p><p><br>&gt; Does this proposal fit well with the feel and direction of Swift?<br></p><p>I think the safe-by-default, explicit-opt-out behavior is a better default for Swift, although, like I&#39;ve said, in practice it doesn&#39;t really matter much.<br></p><p>Perhaps it&#39;s most useful for newcomers; you can easily skip over @warn_unused_result when learning Swift, but you won&#39;t be able ignore @discardable.<br></p><p><br>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Haven&#39;t ever seen this in a language.<br></p><p>Golang had a (not very informative) discussion on this topic at https://groups.google.com/forum/#!topic/golang-nuts/ksfgSWxJcCo<br></p><p><br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Closer to an in-depth study; looked at my Swift codebase, and read through all the discussions.<br></p><p>On a side note, let me once again point to a dangerous trend in this mailing list: not looking at (or reporting on) how potential changes affect actual, specific, production code bases. We need a lot more of that in our reviews.<br></p><p>Thanks,<br></p><p>A.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>[Review] SE-0047 Defaulting non-Void functions so they warn on unused results</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>March 28, 2016 at 07:00:00pm</p></header><div class="content"><p>• What is your evaluation of the proposal?<br></p><p><br>Great idea<br></p><p>• Is the problem being addressed significant enough to warrant a change to<br>Swift?<br></p><p><br>Yes I think so, currently the declaration line is very cluttered with lots<br>of noise up front that hides what the line actually does. This proposal<br>removes some of that noise.<br></p><p>• Does this proposal fit well with the feel and direction of Swift?<br></p><p><br>Yes, Swift is clutter free and tries to pick as the default the most common<br>case<br></p><p>• If you have used other languages or libraries with a similar feature, how<br>do you feel that this proposal compares to those?<br></p><p><br>I have used languages with the current Swift bevahiour of having to<br>explicitly initiate the warning and they like Swift tended to be a pain.<br>Either the declaration got cluttered or the annotation was omitted.<br></p><p>I have used products like lint and appreciated this feature.<br></p><p>• How much effort did you put into your review? A glance, a quick reading,<br>or an in-depth study?<br></p><p><br></p><p><br>-- <br>-- Howard.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160328/6307110e/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
