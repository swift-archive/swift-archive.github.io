<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2a461f6af6a598c78eb573075ed2e577?s=50"></div><header><strong>Waiting for mouse input in a while loop (OS X)</strong> from <string>Ergin Bilgin</string> &lt;erginbil at gmail.com&gt;<p>March 23, 2016 at 06:00:00pm</p></header><div class="content"><p>Hello,<br></p><p>I have a very simple while loop and I want to wait for a mouse click(can be<br>a different input, not important) between every step.  What I want to<br>achieve is something like this:<br></p><p>while (i &lt; 50){<br>    print(i)<br>    i += 1<br>    waitForMouseClick() //Wait here for user input.}<br></p><p>I also use Sprite Kit if you can think a solution related to it.<br></p><p>Cheers,<br></p><p>Ergin<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160323/89affde4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ab16ef0384ba9270ddc26abea6c0d413?s=50"></div><header><strong>Waiting for mouse input in a while loop (OS X)</strong> from <string>George King</string> &lt;gwk.lists at gmail.com&gt;<p>March 23, 2016 at 12:00:00pm</p></header><div class="content"><p>Hi Ergin,<br>Are you familiar with how events are delivered via the application runloop? Essentially, you should not create a top-level loop that waits for input; the application runloop does this for you. If you want to accumulate 50 clicks, create the counter variable in the appropriate NSResponder (or UIResponder on iOS), e.g. your root NSView or your NSViewController. Then override `func mouseDown(event: NSEvent)` and increment the counter there.<br>Hope that helps,<br>George<br></p><p><br>&gt; <br>&gt; On Mar 23, 2016, at 12:35 PM, Ergin Bilgin via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello,<br>&gt; <br>&gt; I have a very simple while loop and I want to wait for a mouse click(can be a different input, not important) between every step.  What I want to achieve is something like this:<br>&gt; <br>&gt; while (i &lt; 50){<br>&gt; <br>&gt;     <br>&gt; print(i)<br>&gt; <br>&gt;     i <br>&gt; += 1<br>&gt; <br>&gt;     waitForMouseClick<br>&gt; () //Wait here for user input.<br>&gt; }<br>&gt; I also use Sprite Kit if you can think a solution related to it.<br>&gt; <br>&gt; Cheers,<br>&gt; <br>&gt; Ergin<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2a461f6af6a598c78eb573075ed2e577?s=50"></div><header><strong>Waiting for mouse input in a while loop (OS X)</strong> from <string>Ergin Bilgin</string> &lt;erginbil at gmail.com&gt;<p>March 23, 2016 at 07:00:00pm</p></header><div class="content"><p>Thank you for help. Maybe I have over simplified my problem. In my first<br>example, your advice was totally fine. But when I want to do something more<br>complex, I could not figure out how to use it. For example, I want to print<br>each step in my insertion sort. Like this:<br></p><p>for i in 1..&lt;toSort.count{<br>    var j: Int = i<br>    while ((j &gt; 0) &amp;&amp; (toSort[j-1] &gt; toSort[j])){<br>        let temp: Int = toSort[j]<br>        toSort[j] = toSort[j-1]<br>        toSort[j-1] = temp<br>        j--<br>        print(toSort)<br>        //Wait here.<br>    }<br>}<br></p><p>I am looking for a solution without tearing the sorting algorithm into<br>pieces. (If it is possible.)<br></p><p>Ergin<br></p><p>On 23 March 2016 at 18:52, George King &lt;gwk.lists at gmail.com&gt; wrote:<br></p><p>&gt; Hi Ergin,<br>&gt; Are you familiar with how events are delivered via the application<br>&gt; runloop? Essentially, you should not create a top-level loop that waits for<br>&gt; input; the application runloop does this for you. If you want to accumulate<br>&gt; 50 clicks, create the counter variable in the appropriate NSResponder (or<br>&gt; UIResponder on iOS), e.g. your root NSView or your NSViewController. Then<br>&gt; override `func mouseDown(event: NSEvent)` and increment the counter there.<br>&gt; Hope that helps,<br>&gt; George<br>&gt;<br>&gt;<br>&gt; &gt;<br>&gt; &gt; On Mar 23, 2016, at 12:35 PM, Ergin Bilgin via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Hello,<br>&gt; &gt;<br>&gt; &gt; I have a very simple while loop and I want to wait for a mouse click(can<br>&gt; be a different input, not important) between every step.  What I want to<br>&gt; achieve is something like this:<br>&gt; &gt;<br>&gt; &gt; while (i &lt; 50){<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; print(i)<br>&gt; &gt;<br>&gt; &gt;     i<br>&gt; &gt; += 1<br>&gt; &gt;<br>&gt; &gt;     waitForMouseClick<br>&gt; &gt; () //Wait here for user input.<br>&gt; &gt; }<br>&gt; &gt; I also use Sprite Kit if you can think a solution related to it.<br>&gt; &gt;<br>&gt; &gt; Cheers,<br>&gt; &gt;<br>&gt; &gt; Ergin<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-users mailing list<br>&gt; &gt; swift-users at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160323/2e394f8b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ab16ef0384ba9270ddc26abea6c0d413?s=50"></div><header><strong>Waiting for mouse input in a while loop (OS X)</strong> from <string>George King</string> &lt;gwk.lists at gmail.com&gt;<p>March 23, 2016 at 01:00:00pm</p></header><div class="content"><p>I don&#39;t know of an easy way to block the main thread and wait for GUI input, without disrupting Cocoa. If you do not need the GUI, then I suggest using the debugger to set a breakpoint; in general it&#39;s worth the effort to learn to use the debugger, rather than just print statements. Alternatively, you could read a line from stdin, and then step through your algorithm by hitting return in the terminal. If you are trying to visualize your algorithm it gets trickier to do so without restructuring it to operate within the runloop.<br></p><p>&gt; On Mar 23, 2016, at 1:48 PM, Ergin Bilgin &lt;erginbil at gmail.com&gt; wrote:<br>&gt; <br>&gt; Thank you for help. Maybe I have over simplified my problem. In my first example, your advice was totally fine. But when I want to do something more complex, I could not figure out how to use it. For example, I want to print each step in my insertion sort. Like this:<br>&gt; <br>&gt; for i in 1..&lt;toSort.count{<br>&gt;     var j: Int = i<br>&gt;     while ((j &gt; 0) &amp;&amp; (toSort[j-1] &gt; toSort[j])){<br>&gt;         let temp: Int = toSort[j]<br>&gt;         toSort[j] = toSort[j-1]<br>&gt;         toSort[j-1] = temp<br>&gt;         j--<br>&gt;         print(toSort)<br>&gt;         //Wait here.<br>&gt;     }   <br>&gt; }<br>&gt; <br>&gt; I am looking for a solution without tearing the sorting algorithm into pieces. (If it is possible.) <br>&gt; <br>&gt; Ergin<br>&gt; <br>&gt; On 23 March 2016 at 18:52, George King &lt;gwk.lists at gmail.com &lt;mailto:gwk.lists at gmail.com&gt;&gt; wrote:<br>&gt; Hi Ergin,<br>&gt; Are you familiar with how events are delivered via the application runloop? Essentially, you should not create a top-level loop that waits for input; the application runloop does this for you. If you want to accumulate 50 clicks, create the counter variable in the appropriate NSResponder (or UIResponder on iOS), e.g. your root NSView or your NSViewController. Then override `func mouseDown(event: NSEvent)` and increment the counter there.<br>&gt; Hope that helps,<br>&gt; George<br>&gt; <br>&gt; <br>&gt; &gt;<br>&gt; &gt; On Mar 23, 2016, at 12:35 PM, Ergin Bilgin via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Hello,<br>&gt; &gt;<br>&gt; &gt; I have a very simple while loop and I want to wait for a mouse click(can be a different input, not important) between every step.  What I want to achieve is something like this:<br>&gt; &gt;<br>&gt; &gt; while (i &lt; 50){<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; print(i)<br>&gt; &gt;<br>&gt; &gt;     i<br>&gt; &gt; += 1<br>&gt; &gt;<br>&gt; &gt;     waitForMouseClick<br>&gt; &gt; () //Wait here for user input.<br>&gt; &gt; }<br>&gt; &gt; I also use Sprite Kit if you can think a solution related to it.<br>&gt; &gt;<br>&gt; &gt; Cheers,<br>&gt; &gt;<br>&gt; &gt; Ergin<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-users mailing list<br>&gt; &gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160323/873e3f9c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2a461f6af6a598c78eb573075ed2e577?s=50"></div><header><strong>Waiting for mouse input in a while loop (OS X)</strong> from <string>Ergin Bilgin</string> &lt;erginbil at gmail.com&gt;<p>March 23, 2016 at 08:00:00pm</p></header><div class="content"><p>&quot;print(toSort)&quot; is only a placeholder there. Yes, it will be a<br>visualization. I am thinking of saving each state of &quot;toSort&quot; to another<br>array and show a fake visualization after sorting is finished. Using stdin<br>also might be a good solution but not very presentable.<br></p><p>Ergin<br></p><p>On 23 March 2016 at 19:55, George King &lt;gwk.lists at gmail.com&gt; wrote:<br></p><p>&gt; I don&#39;t know of an easy way to block the main thread and wait for GUI<br>&gt; input, without disrupting Cocoa. If you do not need the GUI, then I suggest<br>&gt; using the debugger to set a breakpoint; in general it&#39;s worth the effort to<br>&gt; learn to use the debugger, rather than just print statements.<br>&gt; Alternatively, you could read a line from stdin, and then step through your<br>&gt; algorithm by hitting return in the terminal. If you are trying to visualize<br>&gt; your algorithm it gets trickier to do so without restructuring it to<br>&gt; operate within the runloop.<br>&gt;<br>&gt; On Mar 23, 2016, at 1:48 PM, Ergin Bilgin &lt;erginbil at gmail.com&gt; wrote:<br>&gt;<br>&gt; Thank you for help. Maybe I have over simplified my problem. In my first<br>&gt; example, your advice was totally fine. But when I want to do something more<br>&gt; complex, I could not figure out how to use it. For example, I want to print<br>&gt; each step in my insertion sort. Like this:<br>&gt;<br>&gt; for i in 1..&lt;toSort.count{<br>&gt;     var j: Int = i<br>&gt;     while ((j &gt; 0) &amp;&amp; (toSort[j-1] &gt; toSort[j])){<br>&gt;         let temp: Int = toSort[j]<br>&gt;         toSort[j] = toSort[j-1]<br>&gt;         toSort[j-1] = temp<br>&gt;         j--<br>&gt;         print(toSort)<br>&gt;         //Wait here.<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; I am looking for a solution without tearing the sorting algorithm into<br>&gt; pieces. (If it is possible.)<br>&gt;<br>&gt; Ergin<br>&gt;<br>&gt; On 23 March 2016 at 18:52, George King &lt;gwk.lists at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; Hi Ergin,<br>&gt;&gt; Are you familiar with how events are delivered via the application<br>&gt;&gt; runloop? Essentially, you should not create a top-level loop that waits for<br>&gt;&gt; input; the application runloop does this for you. If you want to accumulate<br>&gt;&gt; 50 clicks, create the counter variable in the appropriate NSResponder (or<br>&gt;&gt; UIResponder on iOS), e.g. your root NSView or your NSViewController. Then<br>&gt;&gt; override `func mouseDown(event: NSEvent)` and increment the counter there.<br>&gt;&gt; Hope that helps,<br>&gt;&gt; George<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; On Mar 23, 2016, at 12:35 PM, Ergin Bilgin via swift-users &lt;<br>&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Hello,<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I have a very simple while loop and I want to wait for a mouse<br>&gt;&gt; click(can be a different input, not important) between every step.  What I<br>&gt;&gt; want to achieve is something like this:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; while (i &lt; 50){<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; print(i)<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;     i<br>&gt;&gt; &gt; += 1<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;     waitForMouseClick<br>&gt;&gt; &gt; () //Wait here for user input.<br>&gt;&gt; &gt; }<br>&gt;&gt; &gt; I also use Sprite Kit if you can think a solution related to it.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Cheers,<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Ergin<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-users mailing list<br>&gt;&gt; &gt; swift-users at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160323/c1eb7844/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bec901e49831834ec4a6f4b86ff1f9b5?s=50"></div><header><strong>Waiting for mouse input in a while loop (OS X)</strong> from <string>Ramakrishna Mallireddy</string> &lt;ramakrishna.malli at gmail.com&gt;<p>March 24, 2016 at 12:00:00am</p></header><div class="content"><p>Make the loop into a function.<br>call the function everytime a mouseevent happened with appropriate input<br>counters.<br></p><p>var i = 1<br>var innerloopCounter = 1<br>var innerloopRunning = false<br>// this is the os mouseevent handler<br>func mouseevent(event:Event) {<br>if i &lt; toSort.count {<br>sort(toSort)<br>}<br>}<br>// ++, -- operators will be dropped from swift 3.0<br>// now these operators are deprecated.<br>func sort(toSort:[Element]) {<br>var j = innerloopCounter &gt; 0 ? innerloopCounter : i<br>if(toSort[j-1] &gt; toSort[j]) {<br>    let temp: Int = toSort[j]<br>    toSort[j] = toSort[j-1]<br>    toSort[j-1] = temp<br>    innerloopCounter = j - 1<br>    print(toSort)<br>  }<br>  if innerloopCounter == 0 {<br>i += 1<br>}<br>}<br></p><p><br></p><p>On Wed, Mar 23, 2016 at 11:36 PM, Ergin Bilgin via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; &quot;print(toSort)&quot; is only a placeholder there. Yes, it will be a<br>&gt; visualization. I am thinking of saving each state of &quot;toSort&quot; to another<br>&gt; array and show a fake visualization after sorting is finished. Using stdin<br>&gt; also might be a good solution but not very presentable.<br>&gt;<br>&gt; Ergin<br>&gt;<br>&gt; On 23 March 2016 at 19:55, George King &lt;gwk.lists at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; I don&#39;t know of an easy way to block the main thread and wait for GUI<br>&gt;&gt; input, without disrupting Cocoa. If you do not need the GUI, then I suggest<br>&gt;&gt; using the debugger to set a breakpoint; in general it&#39;s worth the effort to<br>&gt;&gt; learn to use the debugger, rather than just print statements.<br>&gt;&gt; Alternatively, you could read a line from stdin, and then step through your<br>&gt;&gt; algorithm by hitting return in the terminal. If you are trying to visualize<br>&gt;&gt; your algorithm it gets trickier to do so without restructuring it to<br>&gt;&gt; operate within the runloop.<br>&gt;&gt;<br>&gt;&gt; On Mar 23, 2016, at 1:48 PM, Ergin Bilgin &lt;erginbil at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Thank you for help. Maybe I have over simplified my problem. In my first<br>&gt;&gt; example, your advice was totally fine. But when I want to do something more<br>&gt;&gt; complex, I could not figure out how to use it. For example, I want to print<br>&gt;&gt; each step in my insertion sort. Like this:<br>&gt;&gt;<br>&gt;&gt; for i in 1..&lt;toSort.count{<br>&gt;&gt;     var j: Int = i<br>&gt;&gt;     while ((j &gt; 0) &amp;&amp; (toSort[j-1] &gt; toSort[j])){<br>&gt;&gt;         let temp: Int = toSort[j]<br>&gt;&gt;         toSort[j] = toSort[j-1]<br>&gt;&gt;         toSort[j-1] = temp<br>&gt;&gt;         j--<br>&gt;&gt;         print(toSort)<br>&gt;&gt;         //Wait here.<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; I am looking for a solution without tearing the sorting algorithm into<br>&gt;&gt; pieces. (If it is possible.)<br>&gt;&gt;<br>&gt;&gt; Ergin<br>&gt;&gt;<br>&gt;&gt; On 23 March 2016 at 18:52, George King &lt;gwk.lists at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Hi Ergin,<br>&gt;&gt;&gt; Are you familiar with how events are delivered via the application<br>&gt;&gt;&gt; runloop? Essentially, you should not create a top-level loop that waits for<br>&gt;&gt;&gt; input; the application runloop does this for you. If you want to accumulate<br>&gt;&gt;&gt; 50 clicks, create the counter variable in the appropriate NSResponder (or<br>&gt;&gt;&gt; UIResponder on iOS), e.g. your root NSView or your NSViewController. Then<br>&gt;&gt;&gt; override `func mouseDown(event: NSEvent)` and increment the counter there.<br>&gt;&gt;&gt; Hope that helps,<br>&gt;&gt;&gt; George<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; On Mar 23, 2016, at 12:35 PM, Ergin Bilgin via swift-users &lt;<br>&gt;&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; Hello,<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; I have a very simple while loop and I want to wait for a mouse<br>&gt;&gt;&gt; click(can be a different input, not important) between every step.  What I<br>&gt;&gt;&gt; want to achieve is something like this:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; while (i &lt; 50){<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; print(i)<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;     i<br>&gt;&gt;&gt; &gt; += 1<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;     waitForMouseClick<br>&gt;&gt;&gt; &gt; () //Wait here for user input.<br>&gt;&gt;&gt; &gt; }<br>&gt;&gt;&gt; &gt; I also use Sprite Kit if you can think a solution related to it.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; Cheers,<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; Ergin<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt; &gt; swift-users mailing list<br>&gt;&gt;&gt; &gt; swift-users at swift.org<br>&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160324/f5ccd43d/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/46439321e8b5b5ba0944eef50e18c3a3?s=50"></div><header><strong>Waiting for mouse input in a while loop (OS X)</strong> from <string>Jean-Denis Muys</string> &lt;jdmuys at gmail.com&gt;<p>March 23, 2016 at 07:00:00pm</p></header><div class="content"><p>Here is an outline on how you might achieve that.<br></p><p>1- Create a background GCD queue and a GCD semaphore.<br>2- dispatch_async your sort routine on that queue<br>3- add a call to dispatch_semaphore_wait before starting your sort. This will grab the semaphore.<br>4- at the //wait here point, call dispatch_semaphore_wait on your semaphore. Since the semaphore was already grabbed, this will block.<br>5- separately implement some button on your interface, and on the main thread, its action will be to call dispatch_semaphore_signal. This will release the semaphore, and make your sort continue<br></p><p>I haven’t tested it, and there may be some devil in the details, but I think this can work.<br></p><p>Jean-Denis<br></p><p><br></p><p>&gt; On 23 Mar 2016, at 18:48, Ergin Bilgin via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Thank you for help. Maybe I have over simplified my problem. In my first example, your advice was totally fine. But when I want to do something more complex, I could not figure out how to use it. For example, I want to print each step in my insertion sort. Like this:<br>&gt; <br>&gt; for i in 1..&lt;toSort.count{<br>&gt;     var j: Int = i<br>&gt;     while ((j &gt; 0) &amp;&amp; (toSort[j-1] &gt; toSort[j])){<br>&gt;         let temp: Int = toSort[j]<br>&gt;         toSort[j] = toSort[j-1]<br>&gt;         toSort[j-1] = temp<br>&gt;         j--<br>&gt;         print(toSort)<br>&gt;         //Wait here.<br>&gt;     }   <br>&gt; }<br>&gt; <br>&gt; I am looking for a solution without tearing the sorting algorithm into pieces. (If it is possible.) <br>&gt; <br>&gt; Ergin<br>&gt; <br>&gt; On 23 March 2016 at 18:52, George King &lt;gwk.lists at gmail.com &lt;mailto:gwk.lists at gmail.com&gt;&gt; wrote:<br>&gt; Hi Ergin,<br>&gt; Are you familiar with how events are delivered via the application runloop? Essentially, you should not create a top-level loop that waits for input; the application runloop does this for you. If you want to accumulate 50 clicks, create the counter variable in the appropriate NSResponder (or UIResponder on iOS), e.g. your root NSView or your NSViewController. Then override `func mouseDown(event: NSEvent)` and increment the counter there.<br>&gt; Hope that helps,<br>&gt; George<br>&gt; <br>&gt; <br>&gt; &gt;<br>&gt; &gt; On Mar 23, 2016, at 12:35 PM, Ergin Bilgin via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Hello,<br>&gt; &gt;<br>&gt; &gt; I have a very simple while loop and I want to wait for a mouse click(can be a different input, not important) between every step.  What I want to achieve is something like this:<br>&gt; &gt;<br>&gt; &gt; while (i &lt; 50){<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; print(i)<br>&gt; &gt;<br>&gt; &gt;     i<br>&gt; &gt; += 1<br>&gt; &gt;<br>&gt; &gt;     waitForMouseClick<br>&gt; &gt; () //Wait here for user input.<br>&gt; &gt; }<br>&gt; &gt; I also use Sprite Kit if you can think a solution related to it.<br>&gt; &gt;<br>&gt; &gt; Cheers,<br>&gt; &gt;<br>&gt; &gt; Ergin<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-users mailing list<br>&gt; &gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160323/e1a4bd94/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2a461f6af6a598c78eb573075ed2e577?s=50"></div><header><strong>Waiting for mouse input in a while loop (OS X)</strong> from <string>Ergin Bilgin</string> &lt;erginbil at gmail.com&gt;<p>March 23, 2016 at 09:00:00pm</p></header><div class="content"><p>Thank you. I knew it should be possible with GCD, but I was just not<br>familiar with semaphores. Now everything perfectly works in the way I want.<br></p><p><br>Ergin<br></p><p>On 23 March 2016 at 20:11, Jean-Denis Muys &lt;jdmuys at gmail.com&gt; wrote:<br></p><p>&gt; Here is an outline on how you might achieve that.<br>&gt;<br>&gt; 1- Create a background GCD queue and a GCD semaphore.<br>&gt; 2- dispatch_async your sort routine on that queue<br>&gt; 3- add a call to dispatch_semaphore_wait before starting your sort. This<br>&gt; will grab the semaphore.<br>&gt; 4- at the //wait here point, call dispatch_semaphore_wait on your<br>&gt; semaphore. Since the semaphore was already grabbed, this will block.<br>&gt; 5- separately implement some button on your interface, and on the main<br>&gt; thread, its action will be to call dispatch_semaphore_signal. This will<br>&gt; release the semaphore, and make your sort continue<br>&gt;<br>&gt; I haven’t tested it, and there may be some devil in the details, but I<br>&gt; think this can work.<br>&gt;<br>&gt; Jean-Denis<br>&gt;<br>&gt;<br>&gt;<br>&gt; On 23 Mar 2016, at 18:48, Ergin Bilgin via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; Thank you for help. Maybe I have over simplified my problem. In my first<br>&gt; example, your advice was totally fine. But when I want to do something more<br>&gt; complex, I could not figure out how to use it. For example, I want to print<br>&gt; each step in my insertion sort. Like this:<br>&gt;<br>&gt; for i in 1..&lt;toSort.count{<br>&gt;     var j: Int = i<br>&gt;     while ((j &gt; 0) &amp;&amp; (toSort[j-1] &gt; toSort[j])){<br>&gt;         let temp: Int = toSort[j]<br>&gt;         toSort[j] = toSort[j-1]<br>&gt;         toSort[j-1] = temp<br>&gt;         j--<br>&gt;         print(toSort)<br>&gt;         //Wait here.<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; I am looking for a solution without tearing the sorting algorithm into<br>&gt; pieces. (If it is possible.)<br>&gt;<br>&gt; Ergin<br>&gt;<br>&gt; On 23 March 2016 at 18:52, George King &lt;gwk.lists at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; Hi Ergin,<br>&gt;&gt; Are you familiar with how events are delivered via the application<br>&gt;&gt; runloop? Essentially, you should not create a top-level loop that waits for<br>&gt;&gt; input; the application runloop does this for you. If you want to accumulate<br>&gt;&gt; 50 clicks, create the counter variable in the appropriate NSResponder (or<br>&gt;&gt; UIResponder on iOS), e.g. your root NSView or your NSViewController. Then<br>&gt;&gt; override `func mouseDown(event: NSEvent)` and increment the counter there.<br>&gt;&gt; Hope that helps,<br>&gt;&gt; George<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; On Mar 23, 2016, at 12:35 PM, Ergin Bilgin via swift-users &lt;<br>&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Hello,<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I have a very simple while loop and I want to wait for a mouse<br>&gt;&gt; click(can be a different input, not important) between every step.  What I<br>&gt;&gt; want to achieve is something like this:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; while (i &lt; 50){<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; print(i)<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;     i<br>&gt;&gt; &gt; += 1<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;     waitForMouseClick<br>&gt;&gt; &gt; () //Wait here for user input.<br>&gt;&gt; &gt; }<br>&gt;&gt; &gt; I also use Sprite Kit if you can think a solution related to it.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Cheers,<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Ergin<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-users mailing list<br>&gt;&gt; &gt; swift-users at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160323/ac519b25/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
