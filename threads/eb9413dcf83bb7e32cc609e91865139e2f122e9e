<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>Distinguishing classes from value types/ObjC bridged types?</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>December 29, 2015 at 04:00:00pm</p></header><div class="content"><p>Hello,<br></p><p>First, some background. I&#39;m currently working on refactoring the way<br>mirrors are handled within the Swift standard library (conversion from use<br>of _Reflectable and _MirrorType to CustomReflectable).<br></p><p>Note that the _MirrorType protocol exposes an &#39;objectIdentifier&#39; property<br>which is only relevant for class instances. Each type&#39;s mirror would have<br>to manually implement this property, with mirrors for non-class types<br>expected to return nil.<br></p><p>CustomReflectable moves away from each type having a custom<br>_MirrorType-conforming mirror type in favor of using Mirror for everything,<br>which means that certain manually specified properties such as<br>&#39;objectIdentifier&#39; and &#39;summary&#39; disappear, and must be replaced by other<br>language features.<br></p><p>Now, the current way I distinguish between classes and non-class types (for<br>the dump() function) is through the following code (variable names are made<br>up):<br></p><p>if let thisClassThing = thisThing as? AnyObject {<br>  let theIdentifier = ObjectIdentifier(thisClassThing)<br>  // do other stuff...<br>}<br></p><p>(In the context of dump(), this is necessary to ensure that dumping an<br>object with a cycle of references doesn&#39;t result in infinite recursion.)<br></p><p>However, where this breaks down is when Foundation is imported. In this<br>case, performing as? or is casts/checks on a bridged Swift type such as<br>String or Array&lt;T&gt; results in the test returning true or the type being<br>bridged to an NS* object type.<br></p><p>My question is whether or not there exist tools in the stdlib to determine<br>whether an instance is an instance of a class or not, while also being able<br>to distinguish between native Swift bridgeable structs and their NS*<br>equivalents. I have a few ideas I&#39;m exploring but I wanted to run this<br>question by the community first to see if there&#39;s anything I&#39;m missing, or<br>if anyone has any good ideas.<br></p><p>Thanks for your time, and if you have any questions I&#39;d be happy to clarify.<br></p><p>Best regards,<br>Austin<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151229/eb942e9e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Distinguishing classes from value types/ObjC bridged types?</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December 29, 2015 at 05:00:00pm</p></header><div class="content"><p>&gt; On Dec 29, 2015, at 4:50 PM, Austin Zheng via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello,<br>&gt; <br>&gt; First, some background. I&#39;m currently working on refactoring the way mirrors are handled within the Swift standard library (conversion from use of _Reflectable and _MirrorType to CustomReflectable).<br>&gt; <br>&gt; Note that the _MirrorType protocol exposes an &#39;objectIdentifier&#39; property which is only relevant for class instances. Each type&#39;s mirror would have to manually implement this property, with mirrors for non-class types expected to return nil.<br>&gt; <br>&gt; CustomReflectable moves away from each type having a custom _MirrorType-conforming mirror type in favor of using Mirror for everything, which means that certain manually specified properties such as &#39;objectIdentifier&#39; and &#39;summary&#39; disappear, and must be replaced by other language features.<br>&gt; <br>&gt; Now, the current way I distinguish between classes and non-class types (for the dump() function) is through the following code (variable names are made up):<br>&gt; <br>&gt; if let thisClassThing = thisThing as? AnyObject {<br>&gt;   let theIdentifier = ObjectIdentifier(thisClassThing)<br>&gt;   // do other stuff...<br>&gt; }<br>&gt; <br>&gt; (In the context of dump(), this is necessary to ensure that dumping an object with a cycle of references doesn&#39;t result in infinite recursion.)<br>&gt; <br>&gt; However, where this breaks down is when Foundation is imported. In this case, performing as? or is casts/checks on a bridged Swift type such as String or Array&lt;T&gt; results in the test returning true or the type being bridged to an NS* object type.<br>&gt; <br>&gt; My question is whether or not there exist tools in the stdlib to determine whether an instance is an instance of a class or not, while also being able to distinguish between native Swift bridgeable structs and their NS* equivalents. I have a few ideas I&#39;m exploring but I wanted to run this question by the community first to see if there&#39;s anything I&#39;m missing, or if anyone has any good ideas.<br>&gt; <br>&gt; Thanks for your time, and if you have any questions I&#39;d be happy to clarify.<br></p><p>You can ask if `thisThing.dynamicType is AnyObject.Type`, since the metatypes of bridgeable types don&#39;t themselves bridge.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>Distinguishing classes from value types/ObjC bridged types?</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>December 29, 2015 at 05:00:00pm</p></header><div class="content"><p>Perfect! Thanks so much, I&#39;ll try that out.<br></p><p>Austin<br></p><p>&gt; On Dec 29, 2015, at 5:31 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 29, 2015, at 4:50 PM, Austin Zheng via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello,<br>&gt;&gt; <br>&gt;&gt; First, some background. I&#39;m currently working on refactoring the way mirrors are handled within the Swift standard library (conversion from use of _Reflectable and _MirrorType to CustomReflectable).<br>&gt;&gt; <br>&gt;&gt; Note that the _MirrorType protocol exposes an &#39;objectIdentifier&#39; property which is only relevant for class instances. Each type&#39;s mirror would have to manually implement this property, with mirrors for non-class types expected to return nil.<br>&gt;&gt; <br>&gt;&gt; CustomReflectable moves away from each type having a custom _MirrorType-conforming mirror type in favor of using Mirror for everything, which means that certain manually specified properties such as &#39;objectIdentifier&#39; and &#39;summary&#39; disappear, and must be replaced by other language features.<br>&gt;&gt; <br>&gt;&gt; Now, the current way I distinguish between classes and non-class types (for the dump() function) is through the following code (variable names are made up):<br>&gt;&gt; <br>&gt;&gt; if let thisClassThing = thisThing as? AnyObject {<br>&gt;&gt;  let theIdentifier = ObjectIdentifier(thisClassThing)<br>&gt;&gt;  // do other stuff...<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; (In the context of dump(), this is necessary to ensure that dumping an object with a cycle of references doesn&#39;t result in infinite recursion.)<br>&gt;&gt; <br>&gt;&gt; However, where this breaks down is when Foundation is imported. In this case, performing as? or is casts/checks on a bridged Swift type such as String or Array&lt;T&gt; results in the test returning true or the type being bridged to an NS* object type.<br>&gt;&gt; <br>&gt;&gt; My question is whether or not there exist tools in the stdlib to determine whether an instance is an instance of a class or not, while also being able to distinguish between native Swift bridgeable structs and their NS* equivalents. I have a few ideas I&#39;m exploring but I wanted to run this question by the community first to see if there&#39;s anything I&#39;m missing, or if anyone has any good ideas.<br>&gt;&gt; <br>&gt;&gt; Thanks for your time, and if you have any questions I&#39;d be happy to clarify.<br>&gt; <br>&gt; You can ask if `thisThing.dynamicType is AnyObject.Type`, since the metatypes of bridgeable types don&#39;t themselves bridge.<br>&gt; <br>&gt; -Joe<br>&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
