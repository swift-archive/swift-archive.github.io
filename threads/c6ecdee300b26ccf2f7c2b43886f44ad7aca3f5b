<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9d9d4c769b20cd12b15f4e5b991b4ca5?s=50"></div><header><strong>Draft of proposal for autoreleasepool signature change</strong> from <string>Timothy J. Wood</string> &lt;tjw at omnigroup.com&gt;<p>March 21, 2016 at 10:00:00pm</p></header><div class="content"><p>I think I’ve captured the feedback and conversation so far. Please let me know if I’ve missed anything or if there are further concerns or ideas for improvement.<br></p><p>Thanks!<br></p><p>-tim<br></p><p><br>&lt;https://github.com/tjw/swift-evolution/blob/SR-842/proposals/NNNN-autoreleasepool-signature.md&gt;<br></p><p>Add Generic Result and Error Handling to autoreleasepool()<br>Proposal: SE-NNNN &lt;https://github.com/apple/swift-evolution/blob/master/proposals/NNNN-autoreleasepool-signature.md&gt;<br>Author(s): Timothy J. Wood &lt;https://github.com/tjw&gt;<br>Status: Awaiting review<br>Review manager: TBD<br> &lt;https://github.com/tjw/swift-evolution/tree/SR-842#introduction&gt;Introduction<br></p><p>The autoreleasepool function in the standard library does not currently support a return value or error handling, making it difficult and error-prone to pass results or errors from the body to the calling context.<br></p><p>Swift-evolution thread: A first call for discussion was made here &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160314/013054.html&gt;. Dmitri Gribenko pointed out that adding a generic return type would be useful (first in my premature pull request) and then also here &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160321/013059.html&gt;. Jordan Rose pointed out &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160321/013077.html&gt; that care was needed to avoid inferring an incorrect return type for the body block, but after testing we confirmed that this is handled correctly by the compiler.<br></p><p> &lt;https://github.com/tjw/swift-evolution/tree/SR-842#motivation&gt;Motivation<br></p><p>The current signature for autoreleasepool forces the creation of temporary variables to capture any results of the inner computation, as well as any error to eventually throw, in the case they are needed in the calling code. This extra boilerplate clutters up the intent, as well as introduces the risk of accidentally unwrapping a nil value.<br></p><p>For example:<br></p><p>func doWork() throws -&gt; Result {<br>    var result: Result? = nil<br>    var error: ErrorProtocol? = nil<br>    autoreleasepool {<br>        do {<br>            ... actual computation which hopefully assigns to result but might not ...<br>        } catch let e {<br>            error = e<br>        }<br>    }<br>    guard let result = result else {<br>        throw error!<br>    }<br>    return result!<br>}<br> &lt;https://github.com/tjw/swift-evolution/tree/SR-842#proposed-solution&gt;Proposed solution<br></p><p>I&#39;d like to propose altering the signature of the standard library autoreleasepool function to allow for a generic return type, as well as allowing a throw of an error:<br></p><p>public func autoreleasepool&lt;Result&gt;(@noescape body: () throws -&gt; Result) rethrows -&gt; Result<br>The case above becomes much more clear and less error-prone since the compiler can enforce that exactly one of the error and result are used:<br></p><p>func doWork() throws -&gt; Result {<br>    return try autoreleasepool {<br>        ... actual computation which either returns or throws ...<br>    }<br>}<br>As an aside, since this proposes changing the signature already, I would like to further propose changing the argument label from code to body. This seems more in line with the parameter name used in the rest of the standard library, but isn&#39;t central to this proposal.<br></p><p> &lt;https://github.com/tjw/swift-evolution/tree/SR-842#detailed-design&gt;Detailed design<br></p><p>The updated standard library function would read:<br></p><p>public func autoreleasepool&lt;Result&gt;(@noescape body: () throws -&gt; Result) rethrows -&gt; Result {<br>    let pool = __pushAutoreleasePool()<br>    defer {<br>        __popAutoreleasePool(pool)<br>    }<br>    return try body()<br>}<br> &lt;https://github.com/tjw/swift-evolution/tree/SR-842#impact-on-existing-code&gt;Impact on existing code<br></p><p>No impact expected.<br></p><p> &lt;https://github.com/tjw/swift-evolution/tree/SR-842#alternatives-considered&gt;Alternatives considered<br></p><p>The original request, SR-842 &lt;https://bugs.swift.org/browse/SR-842&gt; only suggested adding throws, but Dmitri Gribenko pointed out that adding a generic return type would be better.<br></p><p>I also explored whether third-party code could wrap autoreleasepool themselves with something like:<br></p><p>func autoreleasepool_generic&lt;ResultType&gt;(@noescape code: Void throws -&gt; ResultType) rethrows -&gt; ResultType {<br>    var result:ResultType?<br>    var error:ErrorProtocol?<br></p><p>    autoreleasepool {<br>        do {<br>            result = try code()<br>        } catch let e {<br>            error = e<br>        }<br>    }<br></p><p>    if let result = result {<br>        return result<br>    }<br></p><p>    throw error! // Doesn&#39;t compile.<br>}<br>but this doesn&#39;t compile, since in a function with rethrows, only the call to the passed in function that is marked as throws is allowed to throw. Even if it was possible to create a rethrows wrapper from the non-throwing function, it is better to add the safety to the standard library in the first place.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160321/c6ec3f5b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Draft of proposal for autoreleasepool signature change</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>March 21, 2016 at 11:00:00pm</p></header><div class="content"><p>On Mon, Mar 21, 2016 at 10:34 PM, Timothy Wood via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I think I’ve captured the feedback and conversation so far. Please let me<br>&gt; know if I’ve missed anything or if there are further concerns or ideas for<br>&gt; improvement.<br></p><p>Hi Timothy,<br></p><p>Your proposal looks great -- and thank you for capturing the whole<br>conversation.  Please submit a PR to swift-evolution!<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9d9d4c769b20cd12b15f4e5b991b4ca5?s=50"></div><header><strong>Draft of proposal for autoreleasepool signature change</strong> from <string>Timothy J. Wood</string> &lt;tjw at omnigroup.com&gt;<p>March 23, 2016 at 09:00:00pm</p></header><div class="content"><p>If it is useful, I’ll mention that I have a branch with an implementation of this proposal at &lt;https://github.com/tjw/swift/tree/SR-842&gt; (though I presume the eventual pull request should have a squashed commit?)<br></p><p>-tim<br></p><p><br>&gt; On Mar 21, 2016, at 10:34 PM, Timothy Wood via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; I think I’ve captured the feedback and conversation so far. Please let me know if I’ve missed anything or if there are further concerns or ideas for improvement.<br>&gt; <br>&gt; Thanks!<br>&gt; <br>&gt; -tim<br>&gt; <br>&gt; <br>&gt; &lt;https://github.com/tjw/swift-evolution/blob/SR-842/proposals/NNNN-autoreleasepool-signature.md &lt;https://github.com/tjw/swift-evolution/blob/SR-842/proposals/NNNN-autoreleasepool-signature.md&gt;&gt;<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160323/b016ec62/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a06dd7924588141b9c907543798c2524?s=50"></div><header><strong>Draft of proposal for autoreleasepool signature change</strong> from <string>Gwendal Roué</string> &lt;gwendal.roue at gmail.com&gt;<p>April 10, 2016 at 03:00:00pm</p></header><div class="content"><p>This proposal would be even better with the @autoescape(once) proposal (https://github.com/zneak/swift-evolution/blob/master/proposals/00xx-noescape-once.md)<br></p><p>We could extract `let` values from the block:<br></p><p>	let a: Int<br>	let b: String<br>	autoreleasepool {<br>		a = …<br>		b = ...<br>	}<br>	// use a and b<br></p><p>Gwendal Roué<br></p><p>&gt; Le 22 mars 2016 à 06:34, Timothy Wood via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; <br>&gt; I think I’ve captured the feedback and conversation so far. Please let me know if I’ve missed anything or if there are further concerns or ideas for improvement.<br>&gt; <br>&gt; Thanks!<br>&gt; <br>&gt; -tim<br>&gt; <br>&gt; <br>&gt; &lt;https://github.com/tjw/swift-evolution/blob/SR-842/proposals/NNNN-autoreleasepool-signature.md &lt;https://github.com/tjw/swift-evolution/blob/SR-842/proposals/NNNN-autoreleasepool-signature.md&gt;&gt;<br>&gt; <br>&gt; Add Generic Result and Error Handling to autoreleasepool()<br>&gt; Proposal: SE-NNNN &lt;https://github.com/apple/swift-evolution/blob/master/proposals/NNNN-autoreleasepool-signature.md&gt;<br>&gt; Author(s): Timothy J. Wood &lt;https://github.com/tjw&gt;<br>&gt; Status: Awaiting review<br>&gt; Review manager: TBD<br>&gt;  &lt;https://github.com/tjw/swift-evolution/tree/SR-842#introduction&gt;Introduction<br>&gt; <br>&gt; The autoreleasepool function in the standard library does not currently support a return value or error handling, making it difficult and error-prone to pass results or errors from the body to the calling context.<br>&gt; <br>&gt; Swift-evolution thread: A first call for discussion was made here &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160314/013054.html&gt;. Dmitri Gribenko pointed out that adding a generic return type would be useful (first in my premature pull request) and then also here &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160321/013059.html&gt;. Jordan Rose pointed out &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160321/013077.html&gt; that care was needed to avoid inferring an incorrect return type for the body block, but after testing we confirmed that this is handled correctly by the compiler.<br>&gt; <br>&gt;  &lt;https://github.com/tjw/swift-evolution/tree/SR-842#motivation&gt;Motivation<br>&gt; <br>&gt; The current signature for autoreleasepool forces the creation of temporary variables to capture any results of the inner computation, as well as any error to eventually throw, in the case they are needed in the calling code. This extra boilerplate clutters up the intent, as well as introduces the risk of accidentally unwrapping a nil value.<br>&gt; <br>&gt; For example:<br>&gt; <br>&gt; func doWork() throws -&gt; Result {<br>&gt;     var result: Result? = nil<br>&gt;     var error: ErrorProtocol? = nil<br>&gt;     autoreleasepool {<br>&gt;         do {<br>&gt;             ... actual computation which hopefully assigns to result but might not ...<br>&gt;         } catch let e {<br>&gt;             error = e<br>&gt;         }<br>&gt;     }<br>&gt;     guard let result = result else {<br>&gt;         throw error!<br>&gt;     }<br>&gt;     return result!<br>&gt; }<br>&gt;  &lt;https://github.com/tjw/swift-evolution/tree/SR-842#proposed-solution&gt;Proposed solution<br>&gt; <br>&gt; I&#39;d like to propose altering the signature of the standard library autoreleasepool function to allow for a generic return type, as well as allowing a throw of an error:<br>&gt; <br>&gt; public func autoreleasepool&lt;Result&gt;(@noescape body: () throws -&gt; Result) rethrows -&gt; Result<br>&gt; The case above becomes much more clear and less error-prone since the compiler can enforce that exactly one of the error and result are used:<br>&gt; <br>&gt; func doWork() throws -&gt; Result {<br>&gt;     return try autoreleasepool {<br>&gt;         ... actual computation which either returns or throws ...<br>&gt;     }<br>&gt; }<br>&gt; As an aside, since this proposes changing the signature already, I would like to further propose changing the argument label from code to body. This seems more in line with the parameter name used in the rest of the standard library, but isn&#39;t central to this proposal.<br>&gt; <br>&gt;  &lt;https://github.com/tjw/swift-evolution/tree/SR-842#detailed-design&gt;Detailed design<br>&gt; <br>&gt; The updated standard library function would read:<br>&gt; <br>&gt; public func autoreleasepool&lt;Result&gt;(@noescape body: () throws -&gt; Result) rethrows -&gt; Result {<br>&gt;     let pool = __pushAutoreleasePool()<br>&gt;     defer {<br>&gt;         __popAutoreleasePool(pool)<br>&gt;     }<br>&gt;     return try body()<br>&gt; }<br>&gt;  &lt;https://github.com/tjw/swift-evolution/tree/SR-842#impact-on-existing-code&gt;Impact on existing code<br>&gt; <br>&gt; No impact expected.<br>&gt; <br>&gt;  &lt;https://github.com/tjw/swift-evolution/tree/SR-842#alternatives-considered&gt;Alternatives considered<br>&gt; <br>&gt; The original request, SR-842 &lt;https://bugs.swift.org/browse/SR-842&gt; only suggested adding throws, but Dmitri Gribenko pointed out that adding a generic return type would be better.<br>&gt; <br>&gt; I also explored whether third-party code could wrap autoreleasepool themselves with something like:<br>&gt; <br>&gt; func autoreleasepool_generic&lt;ResultType&gt;(@noescape code: Void throws -&gt; ResultType) rethrows -&gt; ResultType {<br>&gt;     var result:ResultType?<br>&gt;     var error:ErrorProtocol?<br>&gt; <br>&gt;     autoreleasepool {<br>&gt;         do {<br>&gt;             result = try code()<br>&gt;         } catch let e {<br>&gt;             error = e<br>&gt;         }<br>&gt;     }<br>&gt; <br>&gt;     if let result = result {<br>&gt;         return result<br>&gt;     }<br>&gt; <br>&gt;     throw error! // Doesn&#39;t compile.<br>&gt; }<br>&gt; but this doesn&#39;t compile, since in a function with rethrows, only the call to the passed in function that is marked as throws is allowed to throw. Even if it was possible to create a rethrows wrapper from the non-throwing function, it is better to add the safety to the standard library in the first place.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160410/dbf2c59f/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
