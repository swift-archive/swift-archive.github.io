<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Proposal] Move public AutoreleasingUnsafeMutablePointer API from StdlibCore -&gt; Objective C Overlay</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July 21, 2016 at 10:00:00am</p></header><div class="content"><p>on Thu Jul 21 2016, Michael Gottesman &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello everyone.<br>&gt;<br>&gt; This is a proposal to move AutoreleasingUnsafeMutablePointer from<br>&gt; StdlibCore to the Objective C overlay. The reason to do this is that<br>&gt; ideally StdlibCore would not have any code specific to ObjC in<br>&gt; it. This is a small step that we can take in this direction by moving<br>&gt; the public API of AutoreleasingUnsafeMutablePointer to the ObjC<br>&gt; overlay. <br></p><p>+1<br></p><p>To avoid confusion among reviewers, I feel I need to point out that<br>everything below this point is implementation detail that IMO has no<br>relevance to the evolution list.<br></p><p>&gt; The way that this would be done is that the implementation<br>&gt; for AutoreleasingUnsafeMutablePointer would remain in StdlibCore, but<br>&gt; we would add an underscore to make that API private to the standard<br>&gt; library. Then inside the ObjC overlay, we would create a typealias to<br>&gt; the internal API with the non-underscored name (i.e. make the<br>&gt; typealias the public API). Then at a later point in time we can move<br>&gt; the implementation. The reason why I am not proposing to move the<br>&gt; implementation today is that there are dependencies in Array/Hashed<br>&gt; Collections on AutoreleasingUnsafeMutablePointer. Moving that code is<br>&gt; a larger project that is preconditioned on this proposal going in<br>&gt; first as an incremental step.<br></p><p>I am not confident that we will ever be able to move that code, but as I<br>said before, that&#39;s really irrelevant here.  Let&#39;s do it!<br></p><p>-- <br>Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
