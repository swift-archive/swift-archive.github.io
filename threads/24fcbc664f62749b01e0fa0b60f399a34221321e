<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0119: Remove access modifiers from extensions</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July 12, 2016 at 11:00:00am</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;SE-0119: Remove access modifiers from extensions&quot; begins now and runs through July 19. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0119-extensions-access-modifiers.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>[Review] SE-0119: Remove access modifiers from extensions</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>July 12, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>-1 Strong. <br></p><p>This proposal should go back to the drawing board because it is incoherent. <br></p><p>This proposal claims to try to remove access modifiers but then also is trying to add them for:<br></p><p>&gt; 	2.Allow access modifier when type-inheritance-clause is present.<br>&gt; 	3 Access modifier on extensions should respect the modifier of the extended type and the protocol to which it should conform.<br></p><p>First it claims to remove them, then it claims to add them (2) and finally enforce them (3). <br></p><p>Not to mentioned the proposed solution now has rules for enforce addition of modifiers (3).<br></p><p>There is more adding than removing. I don’t understand the benefit here.  <br></p><p>&gt; &quot; If you extend a private type, any new type members you add will have a default access level of private&quot;.<br></p><p><br>This is not longer accurate with the new definition of private. Top level extensions will have default access of fileprivate. <br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>no. I was never confused by access level on extensions. I don’t think this fixes anything but on the contrary. <br></p><p>I don’t understand what the real problem this proposal is trying to address. <br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>nope. It takes away a really cool feature and adds weird rules. <br></p><p>I think extensions are special and they should be treated as so. <br></p><p>If I want to extend a type as private, let me mark the extension as private and treat the extension score as private. <br></p><p>These rules are also going to force programers to write fileprivate a lot more often . <br></p><p>private extension MyType {<br>	func1(){}<br>	func2(){}<br>}<br></p><p>with this proposal:<br></p><p>[MyType’s access level] extension MyType {<br>	fileprivate func1(){}<br>	fileprivate func2(){}<br>}<br></p><p>What if my type is internal? Now I have to write internal all the time. <br></p><p>internal extension MyTyep{}<br></p><p><br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>n/a<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>participated in the original thread. <br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160712/e3c416ae/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Review] SE-0119: Remove access modifiers from extensions</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>July 13, 2016 at 08:00:00am</p></header><div class="content"><p>&gt;    * What is your evaluation of the proposal?<br></p><p>-1. I&#39;d like to split my review of this proposal in its two features:<br></p><p>The loss of extensions as an access modifier grouping construct is what I really dislike. IMHO, extensions are a natural way to express that, and I wouldn&#39;t want to have `group` to achieve the same results.<br></p><p>But being explicit about the access of a protocol conformance seems like a nice feature to me. But not enough to warrant the above loss.<br></p><p>&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>I&#39;m not sure the problem really warrants a change.<br></p><p>&gt;    * Does this proposal fit well with the feel and direction of Swift?<br></p><p>I don&#39;t think so. I have the impression it makes the rules more complicated.<br></p><p>&gt;    * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>No.<br></p><p>&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Serious read.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e9b374b9587bd8da1a1a027c8716ac0d?s=50"></div><header><strong>[Review] SE-0119: Remove access modifiers from extensions</strong> from <string>Rod Brown</string> &lt;rodney.brown6 at icloud.com&gt;<p>July 13, 2016 at 07:00:00pm</p></header><div class="content"><p>Proposal link: https://github.com/apple/swift-evolution/blob/master/proposals/0119-extensions-access-modifiers.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0119-extensions-access-modifiers.md&gt;<br></p><p>&gt; 	* What is your evaluation of the proposal?<br>-1. Extensions appear to me to follow the access control of the rest of Swift: Implicit to the type you are extending, and you can either / both declare as part of the extension declaration or on the method. I don’t see how this is confusing, and I expect people will be more confused that extensions don’t follow the convention of the rest of Swift for Access Control.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>I don’t think this warrants a change.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>No. This seems to go against the direction of Swift.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>No.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>A reading of the proposal.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160713/5752f606/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Review] SE-0119: Remove access modifiers from extensions</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July 13, 2016 at 10:00:00am</p></header><div class="content"><p>On Wed, Jul 13, 2016 at 4:04 AM, Rod Brown via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Proposal link:<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0119-extensions-access-modifiers.md<br>&gt;<br>&gt; * What is your evaluation of the proposal?<br>&gt;<br>&gt; -1. Extensions appear to me to follow the access control of the rest of<br>&gt; Swift: Implicit to the type you are extending, and you can either / both<br>&gt; declare as part of the extension declaration or on the method. I don’t see<br>&gt; how this is confusing, and I expect people will be more confused that<br>&gt; extensions don’t follow the convention of the rest of Swift for Access<br>&gt; Control.<br>&gt;<br></p><p>So, actually, the proposal is correct that extensions (at least once<br>fileprivate/private is implemented) don&#39;t follow the access control rules<br>for the rest of Swift. There is a problem to be addressed. However, I agree<br>that this proposal hasn&#39;t identified the issue or adequately explained how<br>the solution solves it. Here&#39;s the problem I&#39;m thinking of:<br></p><p>```<br>public struct foo {<br>  func frobnicate() { } // implicitly internal<br>}<br></p><p>public struct bar { }<br>public extension bar {<br>  func frobnicate() { } // implicitly public<br>  // at least, according to the revised rules explained in SE-0025<br>}<br>```<br></p><p>This is an inconsistency that may (and IMO, really is) worth addressing. If<br>there&#39;s adequate interest, I can circulate a draft with a proposed solution<br>I have in mind.<br></p><p><br>&gt;<br>&gt; * Is the problem being addressed significant enough to warrant a change to<br>&gt; Swift?<br>&gt;<br>&gt; I don’t think this warrants a change.<br>&gt;<br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>&gt; No. This seems to go against the direction of Swift.<br>&gt;<br>&gt; * If you have used other languages or libraries with a similar feature,<br>&gt; how do you feel that this proposal compares to those?<br>&gt;<br>&gt; No.<br>&gt;<br>&gt; * How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt;<br>&gt; A reading of the proposal.<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160713/28cafa3d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>[Review] SE-0119: Remove access modifiers from extensions</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>July 13, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jul 13, 2016, at 8:46 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Wed, Jul 13, 2016 at 4:04 AM, Rod Brown via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; Proposal link: https://github.com/apple/swift-evolution/blob/master/proposals/0119-extensions-access-modifiers.md<br>&gt;&gt; <br>&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; <br>&gt;&gt; -1. Extensions appear to me to follow the access control of the rest of Swift: Implicit to the type you are extending, and you can either / both declare as part of the extension declaration or on the method. I don’t see how this is confusing, and I expect people will be more confused that extensions don’t follow the convention of the rest of Swift for Access Control.<br>&gt; <br>&gt; So, actually, the proposal is correct that extensions (at least once fileprivate/private is implemented) don&#39;t follow the access control rules for the rest of Swift. There is a problem to be addressed. However, I agree that this proposal hasn&#39;t identified the issue or adequately explained how the solution solves it. Here&#39;s the problem I&#39;m thinking of:<br>&gt; <br>&gt; ```<br>&gt; public struct foo {<br>&gt;   func frobnicate() { } // implicitly internal<br>&gt; }<br>&gt; <br>&gt; public struct bar { }<br>&gt; public extension bar {<br>&gt;   func frobnicate() { } // implicitly public<br>&gt;   // at least, according to the revised rules explained in SE-0025<br>&gt; }<br>&gt; ```<br></p><p>There is definitely a difference, I think that is a good thing. They look similar but they are completely different. <br></p><p>public Type // the type is public<br>public extension Type //  the extension is public <br></p><p>For extensions, public is just a modifier on extension, not the type. The default scope inside the extension is that of the &quot;modifier&quot; keyword on the extension. <br></p><p>This is easy to explain to someone new. <br></p><p><br>&gt; <br>&gt; This is an inconsistency that may (and IMO, really is) worth addressing. If there&#39;s adequate interest, I can circulate a draft with a proposed solution I have in mind.<br>&gt;  <br>&gt;&gt; <br>&gt;&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; <br>&gt;&gt; I don’t think this warrants a change.<br>&gt;&gt; <br>&gt;&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; No. This seems to go against the direction of Swift.<br>&gt;&gt; <br>&gt;&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; <br>&gt;&gt; No.<br>&gt;&gt; <br>&gt;&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; A reading of the proposal.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160713/368bc5d4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Review] SE-0119: Remove access modifiers from extensions</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July 13, 2016 at 05:00:00pm</p></header><div class="content"><p>As Jordan mentioned, I don&#39;t (and I think other people don&#39;t) think of<br>extensions as their own entities, as they can&#39;t be referred to and have no<br>runtime representation. In that mental model, there isn&#39;t such a thing as<br>&quot;an extension being public.&quot; Instead, the access modifier is just a<br>shorthand default for the properties and methods it contains, which is<br>teachable but unique to extensions. It is a matter of opinion whether that<br>uniqueness is a feature or a bug.<br></p><p>On Wed, Jul 13, 2016 at 12:19 Jose Cheyo Jimenez &lt;cheyo at masters3d.com&gt;<br>wrote:<br></p><p>&gt;<br>&gt;<br>&gt; On Jul 13, 2016, at 8:46 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Wed, Jul 13, 2016 at 4:04 AM, Rod Brown via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Proposal link:<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0119-extensions-access-modifiers.md<br>&gt;&gt;<br>&gt;&gt; * What is your evaluation of the proposal?<br>&gt;&gt;<br>&gt;&gt; -1. Extensions appear to me to follow the access control of the rest of<br>&gt;&gt; Swift: Implicit to the type you are extending, and you can either / both<br>&gt;&gt; declare as part of the extension declaration or on the method. I don’t see<br>&gt;&gt; how this is confusing, and I expect people will be more confused that<br>&gt;&gt; extensions don’t follow the convention of the rest of Swift for Access<br>&gt;&gt; Control.<br>&gt;&gt;<br>&gt;<br>&gt; So, actually, the proposal is correct that extensions (at least once<br>&gt; fileprivate/private is implemented) don&#39;t follow the access control rules<br>&gt; for the rest of Swift. There is a problem to be addressed. However, I agree<br>&gt; that this proposal hasn&#39;t identified the issue or adequately explained how<br>&gt; the solution solves it. Here&#39;s the problem I&#39;m thinking of:<br>&gt;<br>&gt; ```<br>&gt; public struct foo {<br>&gt;   func frobnicate() { } // implicitly internal<br>&gt; }<br>&gt;<br>&gt; public struct bar { }<br>&gt; public extension bar {<br>&gt;   func frobnicate() { } // implicitly public<br>&gt;   // at least, according to the revised rules explained in SE-0025<br>&gt; }<br>&gt; ```<br>&gt;<br>&gt;<br>&gt; There is definitely a difference, I think that is a good thing. They look<br>&gt; similar but they are completely different.<br>&gt;<br>&gt; public Type // the type is public<br>&gt; public extension Type //  the extension is public<br>&gt;<br>&gt; For extensions, public is just a modifier on extension, not the type. The<br>&gt; default scope inside the extension is that of the &quot;modifier&quot; keyword on the<br>&gt; extension.<br>&gt;<br>&gt; This is easy to explain to someone new.<br>&gt;<br>&gt;<br>&gt;<br>&gt; This is an inconsistency that may (and IMO, really is) worth addressing.<br>&gt; If there&#39;s adequate interest, I can circulate a draft with a proposed<br>&gt; solution I have in mind.<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt; * Is the problem being addressed significant enough to warrant a change<br>&gt;&gt; to Swift?<br>&gt;&gt;<br>&gt;&gt; I don’t think this warrants a change.<br>&gt;&gt;<br>&gt;&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;<br>&gt;&gt; No. This seems to go against the direction of Swift.<br>&gt;&gt;<br>&gt;&gt; * If you have used other languages or libraries with a similar feature,<br>&gt;&gt; how do you feel that this proposal compares to those?<br>&gt;&gt;<br>&gt;&gt; No.<br>&gt;&gt;<br>&gt;&gt; * How much effort did you put into your review? A glance, a quick<br>&gt;&gt; reading, or an in-depth study?<br>&gt;&gt;<br>&gt;&gt; A reading of the proposal.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160713/ade8fd8d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>[Review] SE-0119: Remove access modifiers from extensions</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>July 13, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jul 13, 2016, at 10:26 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; As Jordan mentioned, I don&#39;t (and I think other people don&#39;t) think of extensions as their own entities, as they can&#39;t be referred to and have no runtime representation. In that mental model, there isn&#39;t such a thing as &quot;an extension being public.&quot; Instead, the access modifier is just a shorthand default for the properties and methods it contains, which is teachable but unique to extensions. It is a matter of opinion whether that uniqueness is a feature or a bug.<br></p><p>I would say that it&#39;s interesting but ultimately not worth the confusion about the nature of extensions.<br></p><p>John.<br></p><p>&gt; <br>&gt; On Wed, Jul 13, 2016 at 12:19 Jose Cheyo Jimenez &lt;cheyo at masters3d.com &lt;mailto:cheyo at masters3d.com&gt;&gt; wrote:<br>&gt; <br>&gt; <br>&gt; On Jul 13, 2016, at 8:46 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Wed, Jul 13, 2016 at 4:04 AM, Rod Brown via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; Proposal link: https://github.com/apple/swift-evolution/blob/master/proposals/0119-extensions-access-modifiers.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0119-extensions-access-modifiers.md&gt;<br>&gt;&gt; <br>&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; <br>&gt;&gt; -1. Extensions appear to me to follow the access control of the rest of Swift: Implicit to the type you are extending, and you can either / both declare as part of the extension declaration or on the method. I don’t see how this is confusing, and I expect people will be more confused that extensions don’t follow the convention of the rest of Swift for Access Control.<br>&gt;&gt; <br>&gt;&gt; So, actually, the proposal is correct that extensions (at least once fileprivate/private is implemented) don&#39;t follow the access control rules for the rest of Swift. There is a problem to be addressed. However, I agree that this proposal hasn&#39;t identified the issue or adequately explained how the solution solves it. Here&#39;s the problem I&#39;m thinking of:<br>&gt;&gt; <br>&gt;&gt; ```<br>&gt;&gt; public struct foo {<br>&gt;&gt;   func frobnicate() { } // implicitly internal<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; public struct bar { }<br>&gt;&gt; public extension bar {<br>&gt;&gt;   func frobnicate() { } // implicitly public<br>&gt;&gt;   // at least, according to the revised rules explained in SE-0025<br>&gt;&gt; }<br>&gt;&gt; ```<br>&gt; <br>&gt; There is definitely a difference, I think that is a good thing. They look similar but they are completely different. <br>&gt; <br>&gt; public Type // the type is public<br>&gt; public extension Type //  the extension is public <br>&gt; <br>&gt; For extensions, public is just a modifier on extension, not the type. The default scope inside the extension is that of the &quot;modifier&quot; keyword on the extension. <br>&gt; <br>&gt; This is easy to explain to someone new. <br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; This is an inconsistency that may (and IMO, really is) worth addressing. If there&#39;s adequate interest, I can circulate a draft with a proposed solution I have in mind.<br>&gt;&gt;  <br>&gt;&gt; <br>&gt;&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; <br>&gt;&gt; I don’t think this warrants a change.<br>&gt;&gt; <br>&gt;&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; No. This seems to go against the direction of Swift.<br>&gt;&gt; <br>&gt;&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; <br>&gt;&gt; No.<br>&gt;&gt; <br>&gt;&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; A reading of the proposal.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160713/86d57240/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Review] SE-0119: Remove access modifiers from extensions</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>July 16, 2016 at 06:00:00pm</p></header><div class="content"><p>If it’s possible I’d like to withdraw this proposal. I’m convinced by the feedback from the community. Feel free to reject it. ;)<br></p><p><br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 13. Juli 2016 um 19:33:00, John McCall via swift-evolution (swift-evolution at swift.org) schrieb:<br></p><p>On Jul 13, 2016, at 10:26 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>As Jordan mentioned, I don&#39;t (and I think other people don&#39;t) think of extensions as their own entities, as they can&#39;t be referred to and have no runtime representation. In that mental model, there isn&#39;t such a thing as &quot;an extension being public.&quot; Instead, the access modifier is just a shorthand default for the properties and methods it contains, which is teachable but unique to extensions. It is a matter of opinion whether that uniqueness is a feature or a bug.<br></p><p>I would say that it&#39;s interesting but ultimately not worth the confusion about the nature of extensions.<br></p><p>John.<br></p><p><br>On Wed, Jul 13, 2016 at 12:19 Jose Cheyo Jimenez &lt;cheyo at masters3d.com&gt; wrote:<br></p><p><br>On Jul 13, 2016, at 8:46 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p><br></p><p>On Wed, Jul 13, 2016 at 4:04 AM, Rod Brown via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>Proposal link: https://github.com/apple/swift-evolution/blob/master/proposals/0119-extensions-access-modifiers.md<br></p><p>* What is your evaluation of the proposal?<br>-1. Extensions appear to me to follow the access control of the rest of Swift: Implicit to the type you are extending, and you can either / both declare as part of the extension declaration or on the method. I don’t see how this is confusing, and I expect people will be more confused that extensions don’t follow the convention of the rest of Swift for Access Control.<br></p><p>So, actually, the proposal is correct that extensions (at least once fileprivate/private is implemented) don&#39;t follow the access control rules for the rest of Swift. There is a problem to be addressed. However, I agree that this proposal hasn&#39;t identified the issue or adequately explained how the solution solves it. Here&#39;s the problem I&#39;m thinking of:<br></p><p>```<br>public struct foo {<br>  func frobnicate() { } // implicitly internal<br>}<br></p><p>public struct bar { }<br>public extension bar {<br>  func frobnicate() { } // implicitly public<br>  // at least, according to the revised rules explained in SE-0025<br>}<br>```<br></p><p>There is definitely a difference, I think that is a good thing. They look similar but they are completely different. <br></p><p>public Type // the type is public<br>public extension Type //  the extension is public <br></p><p>For extensions, public is just a modifier on extension, not the type. The default scope inside the extension is that of the &quot;modifier&quot; keyword on the extension. <br></p><p>This is easy to explain to someone new. <br></p><p><br></p><p>This is an inconsistency that may (and IMO, really is) worth addressing. If there&#39;s adequate interest, I can circulate a draft with a proposed solution I have in mind.<br> <br></p><p>* Is the problem being addressed significant enough to warrant a change to Swift?<br>I don’t think this warrants a change.<br></p><p>* Does this proposal fit well with the feel and direction of Swift?<br>No. This seems to go against the direction of Swift.<br></p><p>* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>No.<br></p><p>* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>A reading of the proposal.<br></p><p><br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160716/fb86ab39/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ecdb231117dda838340bfcbb8873d28e?s=50"></div><header><strong>[Review] SE-0119: Remove access modifiers from extensions</strong> from <string>Paul Cantrell</string> &lt;cantrell at pobox.com&gt;<p>July 16, 2016 at 12:00:00pm</p></header><div class="content"><p>Like others, I do find the details of this proposal hard to follow. It doesn’t seem like a simpler mental model for developers.<br></p><p>However, I also find the current rules around extension access modifiers hard to follow. It’s confusing that “public extension” changes the default for members, when “public class” and “public struct” don’t. And this is not ideal:<br></p><p>extension String: Fungible  // Extension not “public”, but the conformance is public?<br></p><p>IMO, every public API commitment a module makes should include the word “public” at the declaration site.<br></p><p>Because of all this, I have stopped using extension-level access modifiers altogether, instead always specifying access at the member level. I would be interested in a proposal to improve the current model — perhaps, for example, making “public extension” apply only to a protocol conformance, and disabling access modifiers on extensions that don’t have a protocol conformance.<br></p><p>Cheers, P<br></p><p>&gt; On Jul 16, 2016, at 11:36 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; If it’s possible I’d like to withdraw this proposal. I’m convinced by the feedback from the community. Feel free to reject it. ;)<br>&gt; <br>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt; <br>&gt; Am 13. Juli 2016 um 19:33:00, John McCall via swift-evolution (swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;) schrieb:<br>&gt; <br>&gt;&gt;&gt; On Jul 13, 2016, at 10:26 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; As Jordan mentioned, I don&#39;t (and I think other people don&#39;t) think of extensions as their own entities, as they can&#39;t be referred to and have no runtime representation. In that mental model, there isn&#39;t such a thing as &quot;an extension being public.&quot; Instead, the access modifier is just a shorthand default for the properties and methods it contains, which is teachable but unique to extensions. It is a matter of opinion whether that uniqueness is a feature or a bug.<br>&gt;&gt; <br>&gt;&gt; I would say that it&#39;s interesting but ultimately not worth the confusion about the nature of extensions.<br>&gt;&gt; <br>&gt;&gt; John.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Wed, Jul 13, 2016 at 12:19 Jose Cheyo Jimenez &lt;cheyo at masters3d.com &lt;mailto:cheyo at masters3d.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Jul 13, 2016, at 8:46 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Wed, Jul 13, 2016 at 4:04 AM, Rod Brown via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; Proposal link: https://github.com/apple/swift-evolution/blob/master/proposals/0119-extensions-access-modifiers.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0119-extensions-access-modifiers.md&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; * What is your evaluation of the proposal?<br>&gt;&gt;&gt;&gt; -1. Extensions appear to me to follow the access control of the rest of Swift: Implicit to the type you are extending, and you can either / both declare as part of the extension declaration or on the method. I don’t see how this is confusing, and I expect people will be more confused that extensions don’t follow the convention of the rest of Swift for Access Control.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; So, actually, the proposal is correct that extensions (at least once fileprivate/private is implemented) don&#39;t follow the access control rules for the rest of Swift. There is a problem to be addressed. However, I agree that this proposal hasn&#39;t identified the issue or adequately explained how the solution solves it. Here&#39;s the problem I&#39;m thinking of:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt; public struct foo {<br>&gt;&gt;&gt;&gt;   func frobnicate() { } // implicitly internal<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; public struct bar { }<br>&gt;&gt;&gt;&gt; public extension bar {<br>&gt;&gt;&gt;&gt;   func frobnicate() { } // implicitly public<br>&gt;&gt;&gt;&gt;   // at least, according to the revised rules explained in SE-0025<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; There is definitely a difference, I think that is a good thing. They look similar but they are completely different. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; public Type // the type is public<br>&gt;&gt;&gt; public extension Type //  the extension is public <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; For extensions, public is just a modifier on extension, not the type. The default scope inside the extension is that of the &quot;modifier&quot; keyword on the extension. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is easy to explain to someone new. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This is an inconsistency that may (and IMO, really is) worth addressing. If there&#39;s adequate interest, I can circulate a draft with a proposed solution I have in mind.<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt;&gt; I don’t think this warrants a change.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt;&gt; No. This seems to go against the direction of Swift.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt;&gt; No.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt;&gt; A reading of the proposal.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160716/ee489b2e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Review] SE-0119: Remove access modifiers from extensions</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July 16, 2016 at 12:00:00pm</p></header><div class="content"><p>I agree. I&#39;ll post a draft of a proposal surrounding this topic shortly :)<br></p><p><br>On Sat, Jul 16, 2016 at 12:09 PM, Paul Cantrell via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Like others, I do find the details of this proposal hard to follow. It<br>&gt; doesn’t seem like a simpler mental model for developers.<br>&gt;<br>&gt; However, I also find the *current* rules around extension access<br>&gt; modifiers hard to follow. It’s confusing that “public extension” changes<br>&gt; the default for members, when “public class” and “public struct” don’t. And<br>&gt; this is not ideal:<br>&gt;<br>&gt; extension String: Fungible  // Extension not “public”, but the<br>&gt; conformance is public?<br>&gt;<br>&gt; IMO, every public API commitment a module makes should include the word<br>&gt; “public” at the declaration site.<br>&gt;<br>&gt; Because of all this, I have stopped using extension-level access modifiers<br>&gt; altogether, instead always specifying access at the member level. I would<br>&gt; be interested in a proposal to improve the current model — perhaps, for<br>&gt; example, making “public extension” apply only to a protocol conformance,<br>&gt; and disabling access modifiers on extensions that don’t have a protocol<br>&gt; conformance.<br>&gt;<br>&gt; Cheers, P<br>&gt;<br>&gt; On Jul 16, 2016, at 11:36 AM, Adrian Zubarev via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; If it’s possible I’d like to withdraw this proposal. I’m convinced by the<br>&gt; feedback from the community. Feel free to reject it. ;)<br>&gt; --<br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt;<br>&gt; Am 13. Juli 2016 um 19:33:00, John McCall via swift-evolution (<br>&gt; swift-evolution at swift.org) schrieb:<br>&gt;<br>&gt; On Jul 13, 2016, at 10:26 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; As Jordan mentioned, I don&#39;t (and I think other people don&#39;t) think of<br>&gt; extensions as their own entities, as they can&#39;t be referred to and have no<br>&gt; runtime representation. In that mental model, there isn&#39;t such a thing as<br>&gt; &quot;an extension being public.&quot; Instead, the access modifier is just a<br>&gt; shorthand default for the properties and methods it contains, which is<br>&gt; teachable but unique to extensions. It is a matter of opinion whether that<br>&gt; uniqueness is a feature or a bug.<br>&gt;<br>&gt;<br>&gt; I would say that it&#39;s interesting but ultimately not worth the confusion<br>&gt; about the nature of extensions.<br>&gt;<br>&gt; John.<br>&gt;<br>&gt;<br>&gt; On Wed, Jul 13, 2016 at 12:19 Jose Cheyo Jimenez &lt;cheyo at masters3d.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Jul 13, 2016, at 8:46 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Wed, Jul 13, 2016 at 4:04 AM, Rod Brown via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Proposal link:<br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0119-extensions-access-modifiers.md<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; * What is your evaluation of the proposal?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; -1. Extensions appear to me to follow the access control of the rest of<br>&gt;&gt;&gt; Swift: Implicit to the type you are extending, and you can either / both<br>&gt;&gt;&gt; declare as part of the extension declaration or on the method. I don’t see<br>&gt;&gt;&gt; how this is confusing, and I expect people will be more confused that<br>&gt;&gt;&gt; extensions don’t follow the convention of the rest of Swift for Access<br>&gt;&gt;&gt; Control.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; So, actually, the proposal is correct that extensions (at least once<br>&gt;&gt; fileprivate/private is implemented) don&#39;t follow the access control rules<br>&gt;&gt; for the rest of Swift. There is a problem to be addressed. However, I agree<br>&gt;&gt; that this proposal hasn&#39;t identified the issue or adequately explained how<br>&gt;&gt; the solution solves it. Here&#39;s the problem I&#39;m thinking of:<br>&gt;&gt;<br>&gt;&gt; ```<br>&gt;&gt; public struct foo {<br>&gt;&gt;   func frobnicate() { } // implicitly internal<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; public struct bar { }<br>&gt;&gt; public extension bar {<br>&gt;&gt;   func frobnicate() { } // implicitly public<br>&gt;&gt;   // at least, according to the revised rules explained in SE-0025<br>&gt;&gt; }<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; There is definitely a difference, I think that is a good thing. They<br>&gt;&gt; look similar but they are completely different.<br>&gt;&gt;<br>&gt;&gt; public Type // the type is public<br>&gt;&gt; public extension Type //  the extension is public<br>&gt;&gt;<br>&gt;&gt; For extensions, public is just a modifier on extension, not the type. The<br>&gt;&gt; default scope inside the extension is that of the &quot;modifier&quot; keyword on the<br>&gt;&gt; extension.<br>&gt;&gt;<br>&gt;&gt; This is easy to explain to someone new.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; This is an inconsistency that may (and IMO, really is) worth addressing.<br>&gt;&gt; If there&#39;s adequate interest, I can circulate a draft with a proposed<br>&gt;&gt; solution I have in mind.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; * Is the problem being addressed significant enough to warrant a change<br>&gt;&gt;&gt; to Swift?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I don’t think this warrants a change.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; No. This seems to go against the direction of Swift.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; * If you have used other languages or libraries with a similar feature,<br>&gt;&gt;&gt; how do you feel that this proposal compares to those?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; No.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; * How much effort did you put into your review? A glance, a quick<br>&gt;&gt;&gt; reading, or an in-depth study?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; A reading of the proposal.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160716/dd0378e1/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Review] SE-0119: Remove access modifiers from extensions</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>July 16, 2016 at 07:00:00pm</p></header><div class="content"><p>I tried to tackle the ability to write extensions where everyone would be forced to write access modifier on member level. That’s what I had in my mind all the time. But the respond on this was, as you can see purely negative. :D<br></p><p>Making all extensions public when there is protocol conformance makes no sense, because you could extend your type with an internal protocol, or the extended type might be not public.<br></p><p>Anyways, I’m withdrawing this proposal. :)<br></p><p><br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 16. Juli 2016 um 19:09:09, Paul Cantrell (cantrell at pobox.com) schrieb:<br></p><p>Because of all this, I have stopped using extension-level access modifiers altogether, instead always specifying access at the member level. I would be interested in a proposal to improve the current model — perhaps, for example, making “public extension” apply only to a protocol conformance, and disabling access modifiers on extensions that don’t have a protocol conformance.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160716/5aeac671/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Review] SE-0119: Remove access modifiers from extensions</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>July 16, 2016 at 09:00:00pm</p></header><div class="content"><p>To me this is reminicent of what is happening with the T.Type / Type&lt;T&gt; story, where there seems to be a rush to throw a proposal under the cut-off date even if it is ill-prepared, or based on misunderstandinds.<br>Regards<br>(From mobile)<br></p><p>&gt; On Jul 16, 2016, at 7:15 PM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I tried to tackle the ability to write extensions where everyone would be forced to write access modifier on member level. That’s what I had in my mind all the time. But the respond on this was, as you can see purely negative. :D<br>&gt; <br>&gt; Making all extensions public when there is protocol conformance makes no sense, because you could extend your type with an internal protocol, or the extended type might be not public.<br>&gt; <br>&gt; Anyways, I’m withdrawing this proposal. :)<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt; <br>&gt; Am 16. Juli 2016 um 19:09:09, Paul Cantrell (cantrell at pobox.com) schrieb:<br>&gt; <br>&gt;&gt; Because of all this, I have stopped using extension-level access modifiers altogether, instead always specifying access at the member level. I would be interested in a proposal to improve the current model — perhaps, for example, making “public extension” apply only to a protocol conformance, and disabling access modifiers on extensions that don’t have a protocol conformance.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160716/ba7a3ac8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Review] SE-0119: Remove access modifiers from extensions</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>July 16, 2016 at 09:00:00pm</p></header><div class="content"><p>Wrong thread ;) If you think it’s ill-prepared than provide some feedback instead of just watching and waiting to throw negative feedback during review process.<br></p><p>There is a lot done, but it’s not visible to the public thread yet. Will be soon (by tomorrow I’d guess).<br></p><p>Thanks.<br></p><p><br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 16. Juli 2016 um 21:21:59, L. Mihalkovic (laurent.mihalkovic at gmail.com) schrieb:<br></p><p>To me this is reminicent of what is happening with the T.Type / Type&lt;T&gt; story, where there seems to be a rush to throw a proposal under the cut-off date even if it is ill-prepared, or based on misunderstandinds.<br>Regards<br>(From mobile)<br></p><p>On Jul 16, 2016, at 7:15 PM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>I tried to tackle the ability to write extensions where everyone would be forced to write access modifier on member level. That’s what I had in my mind all the time. But the respond on this was, as you can see purely negative. :D<br></p><p>Making all extensions public when there is protocol conformance makes no sense, because you could extend your type with an internal protocol, or the extended type might be not public.<br></p><p>Anyways, I’m withdrawing this proposal. :)<br></p><p><br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 16. Juli 2016 um 19:09:09, Paul Cantrell (cantrell at pobox.com) schrieb:<br></p><p>Because of all this, I have stopped using extension-level access modifiers altogether, instead always specifying access at the member level. I would be interested in a proposal to improve the current model — perhaps, for example, making “public extension” apply only to a protocol conformance, and disabling access modifiers on extensions that don’t have a protocol conformance.<br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160716/f96823f3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Review] SE-0119: Remove access modifiers from extensions</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>July 17, 2016 at 05:00:00am</p></header><div class="content"><p>Regards<br>(From mobile)<br></p><p>&gt; On Jul 16, 2016, at 9:35 PM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Wrong thread ;) If you think it’s ill-prepared than provide some feedback instead of just watching and waiting to throw negative feedback during review process.<br>&gt; <br>&gt; There is a lot done, but it’s not visible to the public thread yet. Will be soon (by tomorrow I’d guess).<br>&gt; <br>&gt; Thanks.<br>&gt; <br></p><p>A question i regularly ponder on with modern opensource is how it went so fast from stallman writting gcc to today&#39;s anything-goes, where there seems to be an expectatation that throwing even the worst unfinished piece of code in the public should implicitely gag others, and only compel them to have to fix it. <br>There has always been great as well as ludicrous ideas in the history of mankind, and it would be a rare privilege of the opensource movement that the latter ought not to be singled out as such, and have them become by their mere presence in the public, everyone&#39;s responsibility to improve upon. <br>This proposal was based on a lack of understanding of extensions. My understand of the process is that the initial discussion phase is there to evaluate an idea leaving, only the promissing ones reach proposal stage.<br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt; <br>&gt; Am 16. Juli 2016 um 21:21:59, L. Mihalkovic (laurent.mihalkovic at gmail.com) schrieb:<br>&gt; <br>&gt;&gt; To me this is reminicent of what is happening with the T.Type / Type&lt;T&gt; story, where there seems to be a rush to throw a proposal under the cut-off date even if it is ill-prepared, or based on misunderstandinds.<br>&gt;&gt; Regards<br>&gt;&gt; (From mobile)<br>&gt;&gt; <br>&gt;&gt; On Jul 16, 2016, at 7:15 PM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; I tried to tackle the ability to write extensions where everyone would be forced to write access modifier on member level. That’s what I had in my mind all the time. But the respond on this was, as you can see purely negative. :D<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Making all extensions public when there is protocol conformance makes no sense, because you could extend your type with an internal protocol, or the extended type might be not public.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Anyways, I’m withdrawing this proposal. :)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Adrian Zubarev<br>&gt;&gt;&gt; Sent with Airmail<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Am 16. Juli 2016 um 19:09:09, Paul Cantrell (cantrell at pobox.com) schrieb:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Because of all this, I have stopped using extension-level access modifiers altogether, instead always specifying access at the member level. I would be interested in a proposal to improve the current model — perhaps, for example, making “public extension” apply only to a protocol conformance, and disabling access modifiers on extensions that don’t have a protocol conformance.<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160717/67fcc795/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Review] SE-0119: Remove access modifiers from extensions</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July 17, 2016 at 03:00:00am</p></header><div class="content"><p>Can you elaborate? What understanding of extensions is lacking in this<br>proposal?<br>On Sat, Jul 16, 2016 at 22:30 L. Mihalkovic via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; Regards<br>&gt; (From mobile)<br>&gt;<br>&gt; On Jul 16, 2016, at 9:35 PM, Adrian Zubarev via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Wrong thread ;) If you think it’s ill-prepared than provide some feedback<br>&gt; instead of just watching and waiting to throw negative feedback during<br>&gt; review process.<br>&gt;<br>&gt; There is a lot done, but it’s not visible to the public thread yet. Will<br>&gt; be soon (by tomorrow I’d guess).<br>&gt;<br>&gt; Thanks.<br>&gt;<br>&gt;<br>&gt; A question i regularly ponder on with modern opensource is how it went so<br>&gt; fast from stallman writting gcc to today&#39;s anything-goes, where there seems<br>&gt; to be an expectatation that throwing even the worst unfinished piece of<br>&gt; code in the public should implicitely gag others, and only compel them to<br>&gt; have to fix it.<br>&gt; There has always been great as well as ludicrous ideas in the history of<br>&gt; mankind, and it would be a rare privilege of the opensource movement that<br>&gt; the latter ought not to be singled out as such, and have them become by<br>&gt; their mere presence in the public, everyone&#39;s responsibility to improve<br>&gt; upon.<br>&gt; This proposal was based on a lack of understanding of extensions. My<br>&gt; understand of the process is that the initial discussion phase is there to<br>&gt; evaluate an idea leaving, only the promissing ones reach proposal stage.<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt;<br>&gt; Am 16. Juli 2016 um 21:21:59, L. Mihalkovic (laurent.mihalkovic at gmail.com)<br>&gt; schrieb:<br>&gt;<br>&gt; To me this is reminicent of what is happening with the T.Type / Type&lt;T&gt;<br>&gt; story, where there seems to be a rush to throw a proposal under the cut-off<br>&gt; date even if it is ill-prepared, or based on misunderstandinds.<br>&gt; Regards<br>&gt; (From mobile)<br>&gt;<br>&gt; On Jul 16, 2016, at 7:15 PM, Adrian Zubarev via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I tried to tackle the ability to write extensions where everyone would be<br>&gt; forced to write access modifier on member level. That’s what I had in my<br>&gt; mind all the time. But the respond on this was, as you can see purely<br>&gt; negative. :D<br>&gt;<br>&gt; Making all extensions public when there is protocol conformance makes no<br>&gt; sense, because you could extend your type with an internal protocol, or the<br>&gt; extended type might be not public.<br>&gt;<br>&gt; Anyways, I’m withdrawing this proposal. :)<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt;<br>&gt; Am 16. Juli 2016 um 19:09:09, Paul Cantrell (cantrell at pobox.com) schrieb:<br>&gt;<br>&gt; Because of all this, I have stopped using extension-level access modifiers<br>&gt; altogether, instead always specifying access at the member level. I would<br>&gt; be interested in a proposal to improve the current model — perhaps, for<br>&gt; example, making “public extension” apply only to a protocol conformance,<br>&gt; and disabling access modifiers on extensions that don’t have a protocol<br>&gt; conformance.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160717/1065e7f9/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Review] SE-0119: Remove access modifiers from extensions</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>July 17, 2016 at 08:00:00am</p></header><div class="content"><p>My first draft had some mistakes related access modifier on extension but the final proposal does fully understands how they work and aims to eliminate default access modifier behavior.<br></p><p>There is no default access modifier on other types like classes etc. So why should there be any on extensions I’d ask you. The Swift folks here were just whining and arguing with their laziness on typing out and repeating access modifier on each extension member.<br></p><p>Jordan was in favor of removing them completely, but argued that “he knows some people that would still want the default access modifier to be there.”<br></p><p>Right now access modifier on extensions are an ugly shake from how they work with protocols combined with access modifier of classes etc. (On protocols they just like default access modifier, but you cannot override them member wise.)<br></p><p>I didn’t want to remove them completely, but allow to set the visibility boundary to the outside world.<br></p><p>public extension - visible to everywhere.<br>internal extension - member cannot be public and therefore the implementation is only visible for the whole module.<br>private/fileprivate extension - the extension member are only visible to the current file.<br>And yes with this model you’d need to repeat correct access modifier member wise, but some folks already do that with extensions and everyone does it with classes, structs and enums.<br></p><p>Again that concept is not about being able to refer to extensions. It’s about the visibility boundary set by their access modifier, which is also bounded by the access modifier of the extended type in respect with the protocol conformance that might be applied on that extension.<br></p><p>If someone don’t get my intension right, I’m sorry for that. I’m a programmer not a book author and I can’t write something spectacular looking arguments like Mr. Mihalkovic does.<br></p><p>That said, thats not related to your first comment about Type&lt;T&gt;, nor it does help here anyone. I feel like I’m reading philosophical books when reading comments that don’t have a clear answer on a particular topic/question. It’s more like wrapping the topic around with some flowers.<br></p><p><br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 17. Juli 2016 um 05:30:28, L. Mihalkovic (laurent.mihalkovic at gmail.com) schrieb:<br></p><p><br>Regards<br>(From mobile)<br></p><p>On Jul 16, 2016, at 9:35 PM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>Wrong thread ;) If you think it’s ill-prepared than provide some feedback instead of just watching and waiting to throw negative feedback during review process.<br></p><p>There is a lot done, but it’s not visible to the public thread yet. Will be soon (by tomorrow I’d guess).<br></p><p>Thanks.<br></p><p><br>A question i regularly ponder on with modern opensource is how it went so fast from stallman writting gcc to today&#39;s anything-goes, where there seems to be an expectatation that throwing even the worst unfinished piece of code in the public should implicitely gag others, and only compel them to have to fix it. <br>There has always been great as well as ludicrous ideas in the history of mankind, and it would be a rare privilege of the opensource movement that the latter ought not to be singled out as such, and have them become by their mere presence in the public, everyone&#39;s responsibility to improve upon. <br>This proposal was based on a lack of understanding of extensions. My understand of the process is that the initial discussion phase is there to evaluate an idea leaving, only the promissing ones reach proposal stage.<br></p><p><br>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 16. Juli 2016 um 21:21:59, L. Mihalkovic (laurent.mihalkovic at gmail.com) schrieb:<br></p><p>To me this is reminicent of what is happening with the T.Type / Type&lt;T&gt; story, where there seems to be a rush to throw a proposal under the cut-off date even if it is ill-prepared, or based on misunderstandinds.<br>Regards<br>(From mobile)<br></p><p>On Jul 16, 2016, at 7:15 PM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>I tried to tackle the ability to write extensions where everyone would be forced to write access modifier on member level. That’s what I had in my mind all the time. But the respond on this was, as you can see purely negative. :D<br></p><p>Making all extensions public when there is protocol conformance makes no sense, because you could extend your type with an internal protocol, or the extended type might be not public.<br></p><p>Anyways, I’m withdrawing this proposal. :)<br></p><p><br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 16. Juli 2016 um 19:09:09, Paul Cantrell (cantrell at pobox.com) schrieb:<br></p><p>Because of all this, I have stopped using extension-level access modifiers altogether, instead always specifying access at the member level. I would be interested in a proposal to improve the current model — perhaps, for example, making “public extension” apply only to a protocol conformance, and disabling access modifiers on extensions that don’t have a protocol conformance.<br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160717/29d916c4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Review] SE-0119: Remove access modifiers from extensions</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July 17, 2016 at 01:00:00am</p></header><div class="content"><p>On Sun, Jul 17, 2016 at 1:07 AM, Adrian Zubarev via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; My first draft had some mistakes related access modifier on extension but<br>&gt; the final proposal does fully understands how they work and aims to<br>&gt; eliminate default access modifier behavior.<br>&gt;<br>&gt; There is no default access modifier on other types like classes etc. So<br>&gt; why should there be any on extensions I’d ask you. The Swift folks here<br>&gt; were just whining and arguing with their laziness on typing out and<br>&gt; repeating access modifier on each extension member.<br>&gt;<br>&gt; Jordan was in favor of removing them completely, but argued that “he knows<br>&gt; some people that would still want the default access modifier to be<br>&gt; there.”<br>&gt;<br>&gt; Right now access modifier on extensions are an ugly shake from how they<br>&gt; work with protocols combined with access modifier of classes etc. (On<br>&gt; protocols they just like default access modifier, but you cannot override<br>&gt; them member wise.)<br>&gt;<br>&gt; I didn’t want to remove them completely, but allow to set the visibility<br>&gt; boundary to the outside world.<br>&gt;<br>&gt;    - public extension - visible to everywhere.<br>&gt;    - internal extension - member cannot be public and therefore the<br>&gt;    implementation is only visible for the whole module.<br>&gt;    - private/fileprivate extension - the extension member are only<br>&gt;    visible to the current file.<br>&gt;<br>&gt; And yes with this model you’d need to repeat correct access modifier<br>&gt; member wise, but some folks already do that with extensions and everyone<br>&gt; does it with classes, structs and enums.<br>&gt;<br>&gt; Again that concept is not about being able to refer to extensions. It’s<br>&gt; about the visibility boundary set by their access modifier, which is also<br>&gt; bounded by the access modifier of the extended type in respect with the<br>&gt; protocol conformance that might be applied on that extension.<br>&gt;<br></p><p>Well, let&#39;s see if my draft gains traction. I hope it addresses some/most<br>of these concerns of yours. I&#39;m trying to incorporate all of the feedback I<br>got today and hopefully will have something improved by tomorrow.<br></p><p><br>&gt; If someone don’t get my intension right, I’m sorry for that. I’m a<br>&gt; programmer not a book author and I can’t write something spectacular<br>&gt; looking arguments like Mr. Mihalkovic does.<br>&gt;<br>&gt; That said, thats not related to your first comment about Type&lt;T&gt;, nor it<br>&gt; does help here anyone. I feel like I’m reading philosophical books when<br>&gt; reading comments that don’t have a clear answer on a particular<br>&gt; topic/question. It’s more like wrapping the topic around with some flowers.<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt;<br>&gt; Am 17. Juli 2016 um 05:30:28, L. Mihalkovic (laurent.mihalkovic at gmail.com)<br>&gt; schrieb:<br>&gt;<br>&gt;<br>&gt; Regards<br>&gt; (From mobile)<br>&gt;<br>&gt; On Jul 16, 2016, at 9:35 PM, Adrian Zubarev via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Wrong thread ;) If you think it’s ill-prepared than provide some feedback<br>&gt; instead of just watching and waiting to throw negative feedback during<br>&gt; review process.<br>&gt;<br>&gt; There is a lot done, but it’s not visible to the public thread yet. Will<br>&gt; be soon (by tomorrow I’d guess).<br>&gt;<br>&gt; Thanks.<br>&gt;<br>&gt;<br>&gt; A question i regularly ponder on with modern opensource is how it went so<br>&gt; fast from stallman writting gcc to today&#39;s anything-goes, where there seems<br>&gt; to be an expectatation that throwing even the worst unfinished piece of<br>&gt; code in the public should implicitely gag others, and only compel them to<br>&gt; have to fix it.<br>&gt; There has always been great as well as ludicrous ideas in the history of<br>&gt; mankind, and it would be a rare privilege of the opensource movement that<br>&gt; the latter ought not to be singled out as such, and have them become by<br>&gt; their mere presence in the public, everyone&#39;s responsibility to improve<br>&gt; upon.<br>&gt; This proposal was based on a lack of understanding of extensions. My<br>&gt; understand of the process is that the initial discussion phase is there to<br>&gt; evaluate an idea leaving, only the promissing ones reach proposal stage.<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt;<br>&gt; Am 16. Juli 2016 um 21:21:59, L. Mihalkovic (laurent.mihalkovic at gmail.com)<br>&gt; schrieb:<br>&gt;<br>&gt; To me this is reminicent of what is happening with the T.Type / Type&lt;T&gt;<br>&gt; story, where there seems to be a rush to throw a proposal under the cut-off<br>&gt; date even if it is ill-prepared, or based on misunderstandinds.<br>&gt; Regards<br>&gt; (From mobile)<br>&gt;<br>&gt; On Jul 16, 2016, at 7:15 PM, Adrian Zubarev via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I tried to tackle the ability to write extensions where everyone would be<br>&gt; forced to write access modifier on member level. That’s what I had in my<br>&gt; mind all the time. But the respond on this was, as you can see purely<br>&gt; negative. :D<br>&gt;<br>&gt; Making all extensions public when there is protocol conformance makes no<br>&gt; sense, because you could extend your type with an internal protocol, or the<br>&gt; extended type might be not public.<br>&gt;<br>&gt; Anyways, I’m withdrawing this proposal. :)<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt;<br>&gt; Am 16. Juli 2016 um 19:09:09, Paul Cantrell (cantrell at pobox.com) schrieb:<br>&gt;<br>&gt; Because of all this, I have stopped using extension-level access modifiers<br>&gt; altogether, instead always specifying access at the member level. I would<br>&gt; be interested in a proposal to improve the current model — perhaps, for<br>&gt; example, making “public extension” apply only to a protocol conformance,<br>&gt; and disabling access modifiers on extensions that don’t have a protocol<br>&gt; conformance.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160717/82c96c22/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>[Review] SE-0119: Remove access modifiers from extensions</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>July 17, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Jul 16, 2016, at 11:16 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Sun, Jul 17, 2016 at 1:07 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; My first draft had some mistakes related access modifier on extension but the final proposal does fully understands how they work and aims to eliminate default access modifier behavior.<br>&gt;&gt; <br>&gt;&gt; There is no default access modifier on other types like classes etc. So why should there be any on extensions I’d ask you. The Swift folks here were just whining and arguing with their laziness on typing out and repeating access modifier on each extension member.<br>&gt;&gt; <br>&gt;&gt; Jordan was in favor of removing them completely, but argued that “he knows some people that would still want the default access modifier to be there.”<br>&gt;&gt; <br>&gt;&gt; Right now access modifier on extensions are an ugly shake from how they work with protocols combined with access modifier of classes etc. (On protocols they just like default access modifier, but you cannot override them member wise.)<br>&gt;&gt; <br>&gt;&gt; I didn’t want to remove them completely, but allow to set the visibility boundary to the outside world.<br>&gt;&gt; <br>&gt;&gt; public extension - visible to everywhere.<br>&gt;&gt; internal extension - member cannot be public and therefore the implementation is only visible for the whole module.<br>&gt;&gt; private/fileprivate extension - the extension member are only visible to the current file.<br>&gt;&gt; And yes with this model you’d need to repeat correct access modifier member wise, but some folks already do that with extensions and everyone does it with classes, structs and enums.<br>&gt;&gt; <br>&gt;&gt; Again that concept is not about being able to refer to extensions. It’s about the visibility boundary set by their access modifier, which is also bounded by the access modifier of the extended type in respect with the protocol conformance that might be applied on that extension.<br>&gt;&gt; <br>&gt; <br>&gt; Well, let&#39;s see if my draft gains traction. I hope it addresses some/most of these concerns of yours. I&#39;m trying to incorporate all of the feedback I got today and hopefully will have something improved by tomorrow.<br></p><p>I don&#39;t think it would be good thing to propose (even as an alternative), the complete removal of access modifiers again in a new proposal. A better approach would be to cut to the heart of the issue (public access modifier) and cut the scope to the smallest possible subset requirements to make that work. I do think we need to be able to declare some things with a higher access modifier inside extensions (even though their effective scope will be less) in order to make `private extension` work with implicitly internal methods that effectively have fileprivate access. <br></p><p>I think this new proposal will definitely would have a better chance of acceptance by keeping extension in making all methods inside the extension to be internal and still force public method to be explicit like everywhere else. <br></p><p><br>&gt;  <br>&gt;&gt; If someone don’t get my intension right, I’m sorry for that. I’m a programmer not a book author and I can’t write something spectacular looking arguments like Mr. Mihalkovic does.<br>&gt;&gt; <br>&gt;&gt; That said, thats not related to your first comment about Type&lt;T&gt;, nor it does help here anyone. I feel like I’m reading philosophical books when reading comments that don’t have a clear answer on a particular topic/question. It’s more like wrapping the topic around with some flowers.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Adrian Zubarev<br>&gt;&gt; Sent with Airmail<br>&gt;&gt; <br>&gt;&gt; Am 17. Juli 2016 um 05:30:28, L. Mihalkovic (laurent.mihalkovic at gmail.com) schrieb:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Regards<br>&gt;&gt;&gt; (From mobile)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Jul 16, 2016, at 9:35 PM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Wrong thread ;) If you think it’s ill-prepared than provide some feedback instead of just watching and waiting to throw negative feedback during review process.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; There is a lot done, but it’s not visible to the public thread yet. Will be soon (by tomorrow I’d guess).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; A question i regularly ponder on with modern opensource is how it went so fast from stallman writting gcc to today&#39;s anything-goes, where there seems to be an expectatation that throwing even the worst unfinished piece of code in the public should implicitely gag others, and only compel them to have to fix it. <br>&gt;&gt;&gt; There has always been great as well as ludicrous ideas in the history of mankind, and it would be a rare privilege of the opensource movement that the latter ought not to be singled out as such, and have them become by their mere presence in the public, everyone&#39;s responsibility to improve upon. <br>&gt;&gt;&gt; This proposal was based on a lack of understanding of extensions. My understand of the process is that the initial discussion phase is there to evaluate an idea leaving, only the promissing ones reach proposal stage.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; Adrian Zubarev<br>&gt;&gt;&gt;&gt; Sent with Airmail<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Am 16. Juli 2016 um 21:21:59, L. Mihalkovic (laurent.mihalkovic at gmail.com) schrieb:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; To me this is reminicent of what is happening with the T.Type / Type&lt;T&gt; story, where there seems to be a rush to throw a proposal under the cut-off date even if it is ill-prepared, or based on misunderstandinds.<br>&gt;&gt;&gt;&gt;&gt; Regards<br>&gt;&gt;&gt;&gt;&gt; (From mobile)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jul 16, 2016, at 7:15 PM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I tried to tackle the ability to write extensions where everyone would be forced to write access modifier on member level. That’s what I had in my mind all the time. But the respond on this was, as you can see purely negative. :D<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Making all extensions public when there is protocol conformance makes no sense, because you could extend your type with an internal protocol, or the extended type might be not public.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Anyways, I’m withdrawing this proposal. :)<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt;&gt; Adrian Zubarev<br>&gt;&gt;&gt;&gt;&gt;&gt; Sent with Airmail<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Am 16. Juli 2016 um 19:09:09, Paul Cantrell (cantrell at pobox.com) schrieb:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Because of all this, I have stopped using extension-level access modifiers altogether, instead always specifying access at the member level. I would be interested in a proposal to improve the current model — perhaps, for example, making “public extension” apply only to a protocol conformance, and disabling access modifiers on extensions that don’t have a protocol conformance.<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160717/5cbddba4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Review] SE-0119: Remove access modifiers from extensions</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July 17, 2016 at 03:00:00pm</p></header><div class="content"><p>On Sun, Jul 17, 2016 at 1:42 PM, Jose Cheyo Jimenez &lt;cheyo at masters3d.com&gt;<br>wrote:<br></p><p>&gt;<br>&gt;<br>&gt; On Jul 16, 2016, at 11:16 PM, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On Sun, Jul 17, 2016 at 1:07 AM, Adrian Zubarev via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; My first draft had some mistakes related access modifier on extension but<br>&gt;&gt; the final proposal does fully understands how they work and aims to<br>&gt;&gt; eliminate default access modifier behavior.<br>&gt;&gt;<br>&gt;&gt; There is no default access modifier on other types like classes etc. So<br>&gt;&gt; why should there be any on extensions I’d ask you. The Swift folks here<br>&gt;&gt; were just whining and arguing with their laziness on typing out and<br>&gt;&gt; repeating access modifier on each extension member.<br>&gt;&gt;<br>&gt;&gt; Jordan was in favor of removing them completely, but argued that “he<br>&gt;&gt; knows some people that would still want the default access modifier to<br>&gt;&gt; be there.”<br>&gt;&gt;<br>&gt;&gt; Right now access modifier on extensions are an ugly shake from how they<br>&gt;&gt; work with protocols combined with access modifier of classes etc. (On<br>&gt;&gt; protocols they just like default access modifier, but you cannot override<br>&gt;&gt; them member wise.)<br>&gt;&gt;<br>&gt;&gt; I didn’t want to remove them completely, but allow to set the visibility<br>&gt;&gt; boundary to the outside world.<br>&gt;&gt;<br>&gt;&gt;    - public extension - visible to everywhere.<br>&gt;&gt;    - internal extension - member cannot be public and therefore the<br>&gt;&gt;    implementation is only visible for the whole module.<br>&gt;&gt;    - private/fileprivate extension - the extension member are only<br>&gt;&gt;    visible to the current file.<br>&gt;&gt;<br>&gt;&gt; And yes with this model you’d need to repeat correct access modifier<br>&gt;&gt; member wise, but some folks already do that with extensions and everyone<br>&gt;&gt; does it with classes, structs and enums.<br>&gt;&gt;<br>&gt;&gt; Again that concept is not about being able to refer to extensions. It’s<br>&gt;&gt; about the visibility boundary set by their access modifier, which is also<br>&gt;&gt; bounded by the access modifier of the extended type in respect with the<br>&gt;&gt; protocol conformance that might be applied on that extension.<br>&gt;&gt;<br>&gt;<br>&gt; Well, let&#39;s see if my draft gains traction. I hope it addresses some/most<br>&gt; of these concerns of yours. I&#39;m trying to incorporate all of the feedback I<br>&gt; got today and hopefully will have something improved by tomorrow.<br>&gt;<br>&gt;<br>&gt; I don&#39;t think it would be good thing to propose (even as an alternative),<br>&gt; the complete removal of access modifiers again in a new proposal.<br>&gt;<br></p><p>I have been swinging back and forth about whether removal should be the<br>proposed solution; right now, I&#39;m leaning again towards your view (i.e.<br>that it shouldn&#39;t be the proposed solution, because it gets rid of some<br>features that people like which aren&#39;t doing harm).<br></p><p>I would expect that it should show up as an alternative because, well, it<br>is an alternative. We should have a formal paper trail of the design<br>alternatives explored and reasons why the community and core team accept or<br>reject them; otherwise, it could come up again.<br></p><p>A better approach would be to cut to the heart of the issue (public access<br>&gt; modifier) and cut the scope to the smallest possible subset requirements to<br>&gt; make that work. I do think we need to be able to declare some things with a<br>&gt; higher access modifier inside extensions (even though their effective scope<br>&gt; will be less) in order to make `private extension` work with implicitly<br>&gt; internal methods that effectively have fileprivate access.<br>&gt;<br></p><p>Right, I will limit the proposal to those two issues.<br></p><p><br>&gt; I think this new proposal will definitely would have a better chance of<br>&gt; acceptance by keeping extension in making all methods inside the extension<br>&gt; to be internal and still force public method to be explicit like everywhere<br>&gt; else.<br>&gt;<br></p><p>Great. I will aim to complete a revised draft this evening.<br></p><p><br>&gt;<br>&gt; If someone don’t get my intension right, I’m sorry for that. I’m a<br>&gt;&gt; programmer not a book author and I can’t write something spectacular<br>&gt;&gt; looking arguments like Mr. Mihalkovic does.<br>&gt;&gt;<br>&gt;&gt; That said, thats not related to your first comment about Type&lt;T&gt;, nor it<br>&gt;&gt; does help here anyone. I feel like I’m reading philosophical books when<br>&gt;&gt; reading comments that don’t have a clear answer on a particular<br>&gt;&gt; topic/question. It’s more like wrapping the topic around with some flowers.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Adrian Zubarev<br>&gt;&gt; Sent with Airmail<br>&gt;&gt;<br>&gt;&gt; Am 17. Juli 2016 um 05:30:28, L. Mihalkovic (laurent.mihalkovic at gmail.com)<br>&gt;&gt; schrieb:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Regards<br>&gt;&gt; (From mobile)<br>&gt;&gt;<br>&gt;&gt; On Jul 16, 2016, at 9:35 PM, Adrian Zubarev via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Wrong thread ;) If you think it’s ill-prepared than provide some feedback<br>&gt;&gt; instead of just watching and waiting to throw negative feedback during<br>&gt;&gt; review process.<br>&gt;&gt;<br>&gt;&gt; There is a lot done, but it’s not visible to the public thread yet. Will<br>&gt;&gt; be soon (by tomorrow I’d guess).<br>&gt;&gt;<br>&gt;&gt; Thanks.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; A question i regularly ponder on with modern opensource is how it went so<br>&gt;&gt; fast from stallman writting gcc to today&#39;s anything-goes, where there seems<br>&gt;&gt; to be an expectatation that throwing even the worst unfinished piece of<br>&gt;&gt; code in the public should implicitely gag others, and only compel them to<br>&gt;&gt; have to fix it.<br>&gt;&gt; There has always been great as well as ludicrous ideas in the history of<br>&gt;&gt; mankind, and it would be a rare privilege of the opensource movement that<br>&gt;&gt; the latter ought not to be singled out as such, and have them become by<br>&gt;&gt; their mere presence in the public, everyone&#39;s responsibility to improve<br>&gt;&gt; upon.<br>&gt;&gt; This proposal was based on a lack of understanding of extensions. My<br>&gt;&gt; understand of the process is that the initial discussion phase is there to<br>&gt;&gt; evaluate an idea leaving, only the promissing ones reach proposal stage.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Adrian Zubarev<br>&gt;&gt; Sent with Airmail<br>&gt;&gt;<br>&gt;&gt; Am 16. Juli 2016 um 21:21:59, L. Mihalkovic (laurent.mihalkovic at gmail.com)<br>&gt;&gt; schrieb:<br>&gt;&gt;<br>&gt;&gt; To me this is reminicent of what is happening with the T.Type / Type&lt;T&gt;<br>&gt;&gt; story, where there seems to be a rush to throw a proposal under the cut-off<br>&gt;&gt; date even if it is ill-prepared, or based on misunderstandinds.<br>&gt;&gt; Regards<br>&gt;&gt; (From mobile)<br>&gt;&gt;<br>&gt;&gt; On Jul 16, 2016, at 7:15 PM, Adrian Zubarev via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I tried to tackle the ability to write extensions where everyone would be<br>&gt;&gt; forced to write access modifier on member level. That’s what I had in my<br>&gt;&gt; mind all the time. But the respond on this was, as you can see purely<br>&gt;&gt; negative. :D<br>&gt;&gt;<br>&gt;&gt; Making all extensions public when there is protocol conformance makes no<br>&gt;&gt; sense, because you could extend your type with an internal protocol, or the<br>&gt;&gt; extended type might be not public.<br>&gt;&gt;<br>&gt;&gt; Anyways, I’m withdrawing this proposal. :)<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Adrian Zubarev<br>&gt;&gt; Sent with Airmail<br>&gt;&gt;<br>&gt;&gt; Am 16. Juli 2016 um 19:09:09, Paul Cantrell (cantrell at pobox.com) schrieb:<br>&gt;&gt;<br>&gt;&gt; Because of all this, I have stopped using extension-level access<br>&gt;&gt; modifiers altogether, instead always specifying access at the member level.<br>&gt;&gt; I would be interested in a proposal to improve the current model — perhaps,<br>&gt;&gt; for example, making “public extension” apply only to a protocol<br>&gt;&gt; conformance, and disabling access modifiers on extensions that don’t have a<br>&gt;&gt; protocol conformance.<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160717/a0569e08/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Review] SE-0119: Remove access modifiers from extensions</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>July 17, 2016 at 12:00:00pm</p></header><div class="content"><p>Regards<br>(From mobile)<br></p><p>&gt; On Jul 17, 2016, at 8:07 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; My first draft had some mistakes related access modifier on extension but the final proposal does fully understands how they work and aims to eliminate default access modifier behavior.<br>&gt; <br>&gt; There is no default access modifier on other types like classes etc. So why should there be any on extensions I’d ask you. The Swift folks here were just whining and arguing with their laziness on typing out and repeating access modifier on each extension member.<br>&gt; <br>&gt; Jordan was in favor of removing them completely, but argued that “he knows some people that would still want the default access modifier to be there.”<br>&gt; <br>&gt; Right now access modifier on extensions are an ugly shake from how they work with protocols combined with access modifier of classes etc. (On protocols they just like default access modifier, but you cannot override them member wise.)<br>&gt; <br>&gt; I didn’t want to remove them completely, but allow to set the visibility boundary to the outside world.<br>&gt; <br>&gt; public extension - visible to everywhere.<br>&gt; internal extension - member cannot be public and therefore the implementation is only visible for the whole module.<br>&gt; private/fileprivate extension - the extension member are only visible to the current file.<br>&gt; And yes with this model you’d need to repeat correct access modifier member wise, but some folks already do that with extensions and everyone does it with classes, structs and enums.<br>&gt; <br>&gt; Again that concept is not about being able to refer to extensions. It’s about the visibility boundary set by their access modifier, which is also bounded by the access modifier of the extended type in respect with the protocol conformance that might be applied on that extension.<br>&gt; <br>&gt; If someone don’t get my intension right, I’m sorry for that. I’m a programmer not a book author and I can’t write something spectacular looking arguments like Mr. Mihalkovic does.<br>&gt; <br>&gt; That said, thats not related to your first comment about Type&lt;T&gt;, nor it does help here anyone. I feel like I’m reading philosophical books when reading comments that don’t have a clear answer on a particular topic/question. It’s more like wrapping the topic around with some flowers.<br>&gt; <br>I thought I had clearly shared my personal view (not any truth) in the other thread. IMVHO Type&lt;T&gt; is ill-prepared for addressing the topic of reflection. Some of the ideas are there of course simply because it is obvious that swift currently has a gap in this area and some of the pieces of a reflection API are obvious in nature. But the proposal does not propose a cohesive vision of which Type&lt;T&gt; would be a small step, paving the way for the rest being additive later. <br>When dealing with reflection, the first step should IMHO be to understand the 2 facets it takes (there is plenty of literature and research papers on the topic) to give a frame of reference to the solution, and then proceed with the code that will deliver the solution. Starting from the ground up with a single class and saying &#39;the rest will organize itself around&#39; is asking a lot out of lady luck, and has a very high chance of creating more &#39;oops we didn&#39;t think about that&#39; moments like recently happened with 0111 a week ago, or with other proposals hitting snags at the implementattion stage.<br>This is not unlike what happened with Any&lt;P,Q&gt; and all the subsequent debating.. I had offered early on that before fixating on the downstream details, a fundamental question had to be answered: whether or not to carry the semantic on a container, versus expressing it directly in the grammar. Any possible detailed syntax would just be the materialization of either of these two core choices. Instead of answering this question first -it has to do with the fundamental feel or the language, as well as deep implications for the compiler, and as such could only be answered by the core team- weeks of banter went on for no valuable outcome. IMHO this is even critical for the design of a reflection API, and i have no desire to participate in was I see as improductive without the core team making the early decisions they only can make.<br></p><p><br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt; <br>&gt; Am 17. Juli 2016 um 05:30:28, L. Mihalkovic (laurent.mihalkovic at gmail.com) schrieb:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Regards<br>&gt;&gt; (From mobile)<br>&gt;&gt; <br>&gt;&gt; On Jul 16, 2016, at 9:35 PM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Wrong thread ;) If you think it’s ill-prepared than provide some feedback instead of just watching and waiting to throw negative feedback during review process.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; There is a lot done, but it’s not visible to the public thread yet. Will be soon (by tomorrow I’d guess).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks.<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; A question i regularly ponder on with modern opensource is how it went so fast from stallman writting gcc to today&#39;s anything-goes, where there seems to be an expectatation that throwing even the worst unfinished piece of code in the public should implicitely gag others, and only compel them to have to fix it. <br>&gt;&gt; There has always been great as well as ludicrous ideas in the history of mankind, and it would be a rare privilege of the opensource movement that the latter ought not to be singled out as such, and have them become by their mere presence in the public, everyone&#39;s responsibility to improve upon. <br>&gt;&gt; This proposal was based on a lack of understanding of extensions. My understand of the process is that the initial discussion phase is there to evaluate an idea leaving, only the promissing ones reach proposal stage.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Adrian Zubarev<br>&gt;&gt;&gt; Sent with Airmail<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Am 16. Juli 2016 um 21:21:59, L. Mihalkovic (laurent.mihalkovic at gmail.com) schrieb:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; To me this is reminicent of what is happening with the T.Type / Type&lt;T&gt; story, where there seems to be a rush to throw a proposal under the cut-off date even if it is ill-prepared, or based on misunderstandinds.<br>&gt;&gt;&gt;&gt; Regards<br>&gt;&gt;&gt;&gt; (From mobile)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 16, 2016, at 7:15 PM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I tried to tackle the ability to write extensions where everyone would be forced to write access modifier on member level. That’s what I had in my mind all the time. But the respond on this was, as you can see purely negative. :D<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Making all extensions public when there is protocol conformance makes no sense, because you could extend your type with an internal protocol, or the extended type might be not public.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Anyways, I’m withdrawing this proposal. :)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt; Adrian Zubarev<br>&gt;&gt;&gt;&gt;&gt; Sent with Airmail<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Am 16. Juli 2016 um 19:09:09, Paul Cantrell (cantrell at pobox.com) schrieb:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Because of all this, I have stopped using extension-level access modifiers altogether, instead always specifying access at the member level. I would be interested in a proposal to improve the current model — perhaps, for example, making “public extension” apply only to a protocol conformance, and disabling access modifiers on extensions that don’t have a protocol conformance.<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160717/14a1193e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Review] SE-0119: Remove access modifiers from extensions</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>July 17, 2016 at 01:00:00pm</p></header><div class="content"><p>That’s what this mailing list is for. To discuss everything with the community and the core team behind Swift. If you don’t try, you won’t get anything. If everyone would be afraid to tackle something that might go really wrong during review, nothing will happen at all. We’ll end up with a language that is driven by the core team where the community would be to afraid to step in.<br></p><p>Which ‘Type proposal’ exactly are you referring here?<br></p><p><br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 17. Juli 2016 um 12:50:32, L. Mihalkovic (laurent.mihalkovic at gmail.com) schrieb:<br></p><p><br></p><p>Regards<br>(From mobile)<br></p><p>On Jul 17, 2016, at 8:07 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>My first draft had some mistakes related access modifier on extension but the final proposal does fully understands how they work and aims to eliminate default access modifier behavior.<br></p><p>There is no default access modifier on other types like classes etc. So why should there be any on extensions I’d ask you. The Swift folks here were just whining and arguing with their laziness on typing out and repeating access modifier on each extension member.<br></p><p>Jordan was in favor of removing them completely, but argued that “he knows some people that would still want the default access modifier to be there.”<br></p><p>Right now access modifier on extensions are an ugly shake from how they work with protocols combined with access modifier of classes etc. (On protocols they just like default access modifier, but you cannot override them member wise.)<br></p><p>I didn’t want to remove them completely, but allow to set the visibility boundary to the outside world.<br></p><p>public extension - visible to everywhere.<br>internal extension - member cannot be public and therefore the implementation is only visible for the whole module.<br>private/fileprivate extension - the extension member are only visible to the current file.<br>And yes with this model you’d need to repeat correct access modifier member wise, but some folks already do that with extensions and everyone does it with classes, structs and enums.<br></p><p>Again that concept is not about being able to refer to extensions. It’s about the visibility boundary set by their access modifier, which is also bounded by the access modifier of the extended type in respect with the protocol conformance that might be applied on that extension.<br></p><p>If someone don’t get my intension right, I’m sorry for that. I’m a programmer not a book author and I can’t write something spectacular looking arguments like Mr. Mihalkovic does.<br></p><p>That said, thats not related to your first comment about Type&lt;T&gt;, nor it does help here anyone. I feel like I’m reading philosophical books when reading comments that don’t have a clear answer on a particular topic/question. It’s more like wrapping the topic around with some flowers.<br></p><p>I thought I had clearly shared my personal view (not any truth) in the other thread. IMVHO Type&lt;T&gt; is ill-prepared for addressing the topic of reflection. Some of the ideas are there of course simply because it is obvious that swift currently has a gap in this area and some of the pieces of a reflection API are obvious in nature. But the proposal does not propose a cohesive vision of which Type&lt;T&gt; would be a small step, paving the way for the rest being additive later. <br>When dealing with reflection, the first step should IMHO be to understand the 2 facets it takes (there is plenty of literature and research papers on the topic) to give a frame of reference to the solution, and then proceed with the code that will deliver the solution. Starting from the ground up with a single class and saying &#39;the rest will organize itself around&#39; is asking a lot out of lady luck, and has a very high chance of creating more &#39;oops we didn&#39;t think about that&#39; moments like recently happened with 0111 a week ago, or with other proposals hitting snags at the implementattion stage.<br>This is not unlike what happened with Any&lt;P,Q&gt; and all the subsequent debating.. I had offered early on that before fixating on the downstream details, a fundamental question had to be answered: whether or not to carry the semantic on a container, versus expressing it directly in the grammar. Any possible detailed syntax would just be the materialization of either of these two core choices. Instead of answering this question first -it has to do with the fundamental feel or the language, as well as deep implications for the compiler, and as such could only be answered by the core team- weeks of banter went on for no valuable outcome. IMHO this is even critical for the design of a reflection API, and i have no desire to participate in was I see as improductive without the core team making the early decisions they only can make.<br></p><p><br></p><p><br>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 17. Juli 2016 um 05:30:28, L. Mihalkovic (laurent.mihalkovic at gmail.com) schrieb:<br></p><p><br>Regards<br>(From mobile)<br></p><p>On Jul 16, 2016, at 9:35 PM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>Wrong thread ;) If you think it’s ill-prepared than provide some feedback instead of just watching and waiting to throw negative feedback during review process.<br></p><p>There is a lot done, but it’s not visible to the public thread yet. Will be soon (by tomorrow I’d guess).<br></p><p>Thanks.<br></p><p><br>A question i regularly ponder on with modern opensource is how it went so fast from stallman writting gcc to today&#39;s anything-goes, where there seems to be an expectatation that throwing even the worst unfinished piece of code in the public should implicitely gag others, and only compel them to have to fix it. <br>There has always been great as well as ludicrous ideas in the history of mankind, and it would be a rare privilege of the opensource movement that the latter ought not to be singled out as such, and have them become by their mere presence in the public, everyone&#39;s responsibility to improve upon. <br>This proposal was based on a lack of understanding of extensions. My understand of the process is that the initial discussion phase is there to evaluate an idea leaving, only the promissing ones reach proposal stage.<br></p><p><br>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 16. Juli 2016 um 21:21:59, L. Mihalkovic (laurent.mihalkovic at gmail.com) schrieb:<br></p><p>To me this is reminicent of what is happening with the T.Type / Type&lt;T&gt; story, where there seems to be a rush to throw a proposal under the cut-off date even if it is ill-prepared, or based on misunderstandinds.<br>Regards<br>(From mobile)<br></p><p>On Jul 16, 2016, at 7:15 PM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>I tried to tackle the ability to write extensions where everyone would be forced to write access modifier on member level. That’s what I had in my mind all the time. But the respond on this was, as you can see purely negative. :D<br></p><p>Making all extensions public when there is protocol conformance makes no sense, because you could extend your type with an internal protocol, or the extended type might be not public.<br></p><p>Anyways, I’m withdrawing this proposal. :)<br></p><p><br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 16. Juli 2016 um 19:09:09, Paul Cantrell (cantrell at pobox.com) schrieb:<br></p><p>Because of all this, I have stopped using extension-level access modifiers altogether, instead always specifying access at the member level. I would be interested in a proposal to improve the current model — perhaps, for example, making “public extension” apply only to a protocol conformance, and disabling access modifiers on extensions that don’t have a protocol conformance.<br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160717/b68c3263/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>[Review] SE-0119: Remove access modifiers from extensions</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>July 16, 2016 at 10:00:00pm</p></header><div class="content"><p>+1 from me. While I understand that this is convenient for some, I think<br>that the access modifier being separate from each specific<br>declaration/definition leads to issues stemming from the implicit<br>attributes.<br></p><p>On Sat, Jul 16, 2016 at 1:15 PM, Adrian Zubarev via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I tried to tackle the ability to write extensions where everyone would be<br>&gt; forced to write access modifier on member level. That’s what I had in my<br>&gt; mind all the time. But the respond on this was, as you can see purely<br>&gt; negative. :D<br>&gt;<br>&gt; Making all extensions public when there is protocol conformance makes no<br>&gt; sense, because you could extend your type with an internal protocol, or the<br>&gt; extended type might be not public.<br>&gt;<br>&gt; Anyways, I’m withdrawing this proposal. :)<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt;<br>&gt; Am 16. Juli 2016 um 19:09:09, Paul Cantrell (cantrell at pobox.com) schrieb:<br>&gt;<br>&gt; Because of all this, I have stopped using extension-level access modifiers<br>&gt; altogether, instead always specifying access at the member level. I would<br>&gt; be interested in a proposal to improve the current model — perhaps, for<br>&gt; example, making “public extension” apply only to a protocol conformance,<br>&gt; and disabling access modifiers on extensions that don’t have a protocol<br>&gt; conformance.<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160716/7cb5d475/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Review] SE-0119: Remove access modifiers from extensions</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July 13, 2016 at 10:00:00am</p></header><div class="content"><p>&gt;<br>&gt;         * What is your evaluation of the proposal?<br>&gt;<br></p><p>-1. I think the proposal has great technical merit; if implemented, it<br>would improve the developer experience and pave the way for other<br>improvements in expressivity in the future. However, the proposal doesn&#39;t<br>do what it says on the tin (aka in the title), and it fails to explain the<br>motivation behind it or the rationale for the specific solution proposed.<br>My first reaction on reading it was exactly the same as that of Jose Cheyo<br>Jimenez, because it seemed not to do what it advertised at all. Since input<br>from the community is important, a proposal that doesn&#39;t explain the<br>problem or solution adequately can&#39;t be subjected to the scrutiny it needs<br>before implementation, and unfortunately I&#39;ll have to give it a thumbs-down.<br></p><p>        * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;<br></p><p>There is a problem to be addressed, and I think that problem is<br>significant. However, it&#39;s not really explained in the proposal.<br></p><p><br>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br></p><p>Potentially.<br></p><p><br>&gt;         * If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;<br></p><p>I have not.<br></p><p><br>&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br></p><p>I thought about this in-depth and participated in the original discussion<br>about revisions to SE-0025 that revised how access levels are treated for<br>classes, structs, and enums.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160713/6944f340/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0119: Remove access modifiers from extensions</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>July 13, 2016 at 09:00:00am</p></header><div class="content"><p>[Proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0119-extensions-access-modifiers.md ]<br></p><p>Hi, Adrian. I have to agree with everyone else that the proposal is unclear. “Remove access modifiers from extensions” sounds like you just aren’t allowed to write them at all, but your proposal seems to be more “access modifiers on extensions set a maximum level of access for members, like they do for types, and do not change the default”. (Plus a bit about conformances.)<br></p><p>I am against the latter proposal because I don’t think people should think of extensions as first-class entities. There is really no such thing as a “public extension” or a “private extension” because extensions cannot be referred to in the language and do not have any run-time representation. The access control that really matters is that of the original type, and I wouldn’t want to force people to repeat it here.<br></p><p>I am personally all right with the idea of removing access modifiers from extensions altogether, but I know several people like that feature a lot, and I don’t think it passes the criterion of being “a significant enough problem to warrant a change in Swift”.<br></p><p>Jordan<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0119: Remove access modifiers from extensions</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>July 13, 2016 at 07:00:00pm</p></header><div class="content"><p>Am 13. Juli 2016 um 18:49:11, Jordan Rose (jordan_rose at apple.com) schrieb:<br></p><p>Hi, Adrian. I have to agree with everyone else that the proposal is unclear. “Remove access modifiers from extensions” sounds like you just aren’t allowed to write them at all, but your proposal seems to be more “access modifiers on extensions set a maximum level of access for members, like they do for types, and do not change the default”. (Plus a bit about conformances.) <br>I probably misunderstood you in the original proposal thread here: https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160627/022341.html<br></p><p>I renamed the proposal by thinking that would be the correct technical issue I was addressing. I apologize for any confusion the title have caused.<br></p><p>I am against the latter proposal because I don’t think people should think of extensions as first-class entities. There is really no such thing as a “public extension” or a “private extension” because extensions cannot be referred to in the language and do not have any run-time representation. The access control that really matters is that of the original type, and I wouldn’t want to force people to repeat it here. <br>Just for the record:<br></p><p>- What happens under the hood if I extend a specific type?<br></p><p>- Do you create only one single `extension bag` and sort members by the access modifiers from all different extensions?<br></p><p>- How do these members reference to other extensions members which are visible only inside a specific extension?<br></p><p>I am personally all right with the idea of removing access modifiers from extensions altogether, but I know several people like that feature a lot, and I don’t think it passes the criterion of being “a significant enough problem to warrant a change in Swift”. <br>I don’t mind if the proposal gets rejected now, at least I’ve seen a bit more feedback now.<br></p><p>PS: One think I might still would want to solve with this proposal is the default access modifier on extensions with protocols.<br></p><p>If you’d think about the rules in the proposed solution, aren’t they exactly how a default access modifier still can be present when there is conformance involved? <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160713/7cf0cbf1/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
