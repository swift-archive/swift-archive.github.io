<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d172fa3c47108d84ee35a68e8d675c1?s=50"></div><header><strong>[Idea] Switching Comparable types: a new operator</strong> from <string>Ross O&#39;Brien</string> &lt;narrativium+swift at gmail.com&gt;<p>February  4, 2016 at 08:00:00pm</p></header><div class="content"><p>Compare two values, and react differently if the first is larger, the<br>second is larger, or they are equal.<br></p><p>An if statement will result in an &#39;if { } else if { } else { }&#39; structure.<br>A switch can be used (case _ where x &lt; y) but the compiler will complain<br>that the switch is not exhaustive, resulting in a redundant &#39;default&#39; case.<br></p><p>I&#39;d like to propose this addition to the Comparable type:<br></p><p>infix operator &lt;=&gt; {}<br></p><p>func &lt;=&gt; &lt;C : Comparable&gt; (lhs: C, rhs:C) -&gt; NSComparisonResult<br></p><p>{<br></p><p>if lhs == rhs<br></p><p>{<br></p><p>return .OrderedSame<br></p><p>}<br></p><p>if lhs &lt; rhs<br></p><p>{<br></p><p>return .OrderedAscending<br></p><p>}<br></p><p>return .OrderedDescending<br></p><p>}<br></p><p><br>This now allows code like this:<br></p><p><br>let x = 3<br></p><p>let y = 4<br></p><p>switch x &lt;=&gt; y<br></p><p>{<br></p><p>case .OrderedSame:<br></p><p>print(3)<br></p><p>case .OrderedAscending:<br></p><p>print(4)<br></p><p>case .OrderedDescending:<br></p><p>print(5)<br></p><p>}<br></p><p>-- Ross<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160204/808aa26d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc045f9bdc3bd1885767f2a2ba8af458?s=50"></div><header><strong>[Idea] Switching Comparable types: a new operator</strong> from <string>Jonathan Tang</string> &lt;jonathan.d.tang at gmail.com&gt;<p>February  4, 2016 at 03:00:00pm</p></header><div class="content"><p>Can&#39;t you define this yourself?  This worked in a Playground using Swift<br>2.1:<br></p><p>enum Ordering {<br>    case OrderedSame, OrderedAscending, OrderedDescending<br>}<br></p><p>infix operator &lt;=&gt; {}<br>func &lt;=&gt; &lt;T: Comparable&gt;(x: T, y: T) -&gt; Ordering {<br>    if x &lt; y {<br>        return .OrderedAscending<br>    } else if x &gt; y {<br>        return .OrderedDescending<br>    } else {<br>        return .OrderedSame<br>    }<br>}<br></p><p><br>let x = 3<br>let y = 4<br>switch x &lt;=&gt; y {<br>case .OrderedSame:<br>    print(3)<br>case .OrderedAscending:<br>    print(4)  // Executed<br>case .OrderedDescending:<br>    print(5)<br>}<br></p><p>On Thu, Feb 4, 2016 at 12:52 PM, Ross O&#39;Brien via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Compare two values, and react differently if the first is larger, the<br>&gt; second is larger, or they are equal.<br>&gt;<br>&gt; An if statement will result in an &#39;if { } else if { } else { }&#39; structure.<br>&gt; A switch can be used (case _ where x &lt; y) but the compiler will complain<br>&gt; that the switch is not exhaustive, resulting in a redundant &#39;default&#39; case.<br>&gt;<br>&gt; I&#39;d like to propose this addition to the Comparable type:<br>&gt;<br>&gt; infix operator &lt;=&gt; {}<br>&gt;<br>&gt; func &lt;=&gt; &lt;C : Comparable&gt; (lhs: C, rhs:C) -&gt; NSComparisonResult<br>&gt;<br>&gt; {<br>&gt;<br>&gt; if lhs == rhs<br>&gt;<br>&gt; {<br>&gt;<br>&gt; return .OrderedSame<br>&gt;<br>&gt; }<br>&gt;<br>&gt; if lhs &lt; rhs<br>&gt;<br>&gt; {<br>&gt;<br>&gt; return .OrderedAscending<br>&gt;<br>&gt; }<br>&gt;<br>&gt; return .OrderedDescending<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt; This now allows code like this:<br>&gt;<br>&gt;<br>&gt; let x = 3<br>&gt;<br>&gt; let y = 4<br>&gt;<br>&gt; switch x &lt;=&gt; y<br>&gt;<br>&gt; {<br>&gt;<br>&gt; case .OrderedSame:<br>&gt;<br>&gt; print(3)<br>&gt;<br>&gt; case .OrderedAscending:<br>&gt;<br>&gt; print(4)<br>&gt;<br>&gt; case .OrderedDescending:<br>&gt;<br>&gt; print(5)<br>&gt;<br>&gt; }<br>&gt;<br>&gt; -- Ross<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160204/ee41ced0/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
