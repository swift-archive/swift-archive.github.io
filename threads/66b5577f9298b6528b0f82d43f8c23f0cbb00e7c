<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>December 16, 2015 at 10:00:00am</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of “Require self for accessing instance members” begins now and runs through Sunday, December 20th. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br></p><p>	Cheers,<br>	Doug Gregor<br>	Review Manager<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution-announce/attachments/20151216/66b50e7c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>December 16, 2015 at 10:00:00am</p></header><div class="content"><p>All of the prior swift-evolution commentary on this proposal (which is nearing the 100-message mark) will also be considered, of course!<br></p><p>	- Doug<br></p><p>&gt; On Dec 16, 2015, at 10:55 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of “Require self for accessing instance members” begins now and runs through Sunday, December 20th. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md&gt;<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; <br>&gt; 	Cheers,<br>&gt; 	Doug Gregor<br>&gt; 	Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/50f92a6c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0acf75deb034e62d9e8c18c2d3680b54?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Michael Wells</string> &lt;michael at michaelwells.com&gt;<p>December 16, 2015 at 11:00:00am</p></header><div class="content"><p>* What is your evaluation of the proposal?<br></p><p>-1<br></p><p>I’m not in favor of the changes. After adopting the current Swift style of omitting self when possible, I find my code is much more readable. I certainly understand and respect the reasoning behind the proposal, but I am not convinced that the changes are worth the cost. <br></p><p>* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>I don’t think so. This seems like something best addressed with a code style or formatting tool. Nothing prohibits you from requiring the use of self in your own code. <br></p><p>* Does this proposal fit well with the feel and direction of Swift?<br></p><p>I do like that it would lead to consistent code: you always use self to access instance members. On the other had, the visual weight of it seems to outbalance any gain.<br></p><p>* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I’ve always preferred the style that Swift has adopted and will continue to use that if at all possible.<br></p><p>* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br> <br>I’ve been keeping up with the thread, but I didn’t do any in-depth study or anything. <br></p><p><br>&gt; On Dec 16, 2015, at 10:58 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; All of the prior swift-evolution commentary on this proposal (which is nearing the 100-message mark) will also be considered, of course!<br>&gt; <br>&gt; 	- Doug<br>&gt; <br>&gt;&gt; On Dec 16, 2015, at 10:55 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of “Require self for accessing instance members” begins now and runs through Sunday, December 20th. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md&gt;<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt; <br>&gt;&gt; 	Cheers,<br>&gt;&gt; 	Doug Gregor<br>&gt;&gt; 	Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/fa8da031/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f1b93037cbc5f78f16450bd925ce3b5b?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Marco Masser</string> &lt;lists at duckcode.com&gt;<p>December 16, 2015 at 08:00:00pm</p></header><div class="content"><p>I don&#39;t have anything to add to Michael&#39;s answer but want to add my voice<br>to this side of the argument. I&#39;d answer ever question as he did.<br></p><p>On Wednesday, December 16, 2015, Michael Wells via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; * What is your evaluation of the proposal?<br>&gt;<br>&gt; -1<br>&gt;<br>&gt; I’m not in favor of the changes. After adopting the current Swift style of<br>&gt; omitting self when possible, I find my code is much more readable. I<br>&gt; certainly understand and respect the reasoning behind the proposal, but I<br>&gt; am not convinced that the changes are worth the cost.<br>&gt;<br>&gt; * Is the problem being addressed significant enough to warrant a change to<br>&gt; Swift?<br>&gt;<br>&gt; I don’t think so. This seems like something best addressed with a code<br>&gt; style or formatting tool. Nothing prohibits you from requiring the use of<br>&gt; self in your own code.<br>&gt;<br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>&gt; I do like that it would lead to consistent code: you always use self to<br>&gt; access instance members. On the other had, the visual weight of it seems to<br>&gt; outbalance any gain.<br>&gt;<br>&gt; * If you have you used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;<br>&gt; I’ve always preferred the style that Swift has adopted and will continue<br>&gt; to use that if at all possible.<br>&gt;<br>&gt; * How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt;<br>&gt; I’ve been keeping up with the thread, but I didn’t do any in-depth study<br>&gt; or anything.<br>&gt;<br>&gt;<br>&gt; On Dec 16, 2015, at 10:58 AM, Douglas Gregor via swift-evolution &lt;<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt; All of the prior swift-evolution commentary on this proposal (which is<br>&gt; nearing the 100-message mark) will also be considered, of course!<br>&gt;<br>&gt; - Doug<br>&gt;<br>&gt; On Dec 16, 2015, at 10:55 AM, Douglas Gregor via swift-evolution &lt;<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of “Require self for accessing instance members” begins now and<br>&gt; runs through Sunday, December 20th. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt; * What is your evaluation of the proposal?<br>&gt; * Is the problem being addressed significant enough to warrant a change<br>&gt; to Swift?<br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt; * If you have you used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt; * How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Cheers,<br>&gt; Doug Gregor<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/507a5b4c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/706baf09e574d70814e4af2d54a315e0?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Vinicius Vendramini</string> &lt;vinivendra at gmail.com&gt;<p>December 16, 2015 at 03:00:00pm</p></header><div class="content"><p>Same here: not much to add, but also a -1 on this proposal.<br></p><p>I would, however, like to bring up the obvious comparison between swift and objective-c. Swift is much more readable for a series of reasons, and the fact that ‘self’ isn’t mandatory is doubtlessly one of them.<br></p><p>&gt; On Dec 16, 2015, at 2:52 PM, Marco Masser via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I don&#39;t have anything to add to Michael&#39;s answer but want to add my voice to this side of the argument. I&#39;d answer ever question as he did.<br>&gt; <br>&gt; On Wednesday, December 16, 2015, Michael Wells via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; * What is your evaluation of the proposal?<br>&gt; <br>&gt; -1<br>&gt; <br>&gt; I’m not in favor of the changes. After adopting the current Swift style of omitting self when possible, I find my code is much more readable. I certainly understand and respect the reasoning behind the proposal, but I am not convinced that the changes are worth the cost. <br>&gt; <br>&gt; * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; I don’t think so. This seems like something best addressed with a code style or formatting tool. Nothing prohibits you from requiring the use of self in your own code. <br>&gt; <br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; I do like that it would lead to consistent code: you always use self to access instance members. On the other had, the visual weight of it seems to outbalance any gain.<br>&gt; <br>&gt; * If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; I’ve always preferred the style that Swift has adopted and will continue to use that if at all possible.<br>&gt; <br>&gt; * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;  <br>&gt; I’ve been keeping up with the thread, but I didn’t do any in-depth study or anything. <br>&gt; <br>&gt; <br>&gt;&gt; On Dec 16, 2015, at 10:58 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; All of the prior swift-evolution commentary on this proposal (which is nearing the 100-message mark) will also be considered, of course!<br>&gt;&gt; <br>&gt;&gt; 	- Doug<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 16, 2015, at 10:55 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The review of “Require self for accessing instance members” begins now and runs through Sunday, December 20th. The proposal is available here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	Cheers,<br>&gt;&gt;&gt; 	Doug Gregor<br>&gt;&gt;&gt; 	Review Manager<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/5db29f6c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/174027b50a0e205ba6aa860e94aacaa1?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Bill Burgar</string> &lt;bill at burgar.co.uk&gt;<p>December 16, 2015 at 08:00:00pm</p></header><div class="content"><p>I&#39;d like to +1 the proposal.<br></p><p>I think the reasoning is very sound in terms of the readability of code.<br>In particular in code reviewing, reading code that I haven&#39;t looked at<br>for a while or that I&#39;m otherwise unfamiliar with; the lack of a self<br>identifier on properties means that I&#39;m continually checking back in the<br>code (often requiring scrolling) to be sure that I&#39;m looking at a<br>property or local var. That continual eye skipping back is a serious<br>impediment to fluent reading of code that this proposal would go some<br>way to improving.<br></p><p>The arguments in favour of removing self that claim to make code more<br>readable (I think) centre on the idea that there are fewer characters on<br>the line - which is a fair point - it makes direct reading easier but I<br>think overall increases ambiguity in the mind of the reader<br>(particularly where the reader is not the original writer of the code).<br>Typically, if you are a single developer that would make this counter<br>claim stronger. If you are working as part of a team, doing code reviews<br>and picking up unfamiliar code, unambiguous reading is more valuable.<br>I&#39;m coming at this from the point of view of working as part of a team<br>and that gives more strength to the proposal.<br></p><p>Regards<br></p><p>Bill.<br></p><p><br>On Wed, Dec 16, 2015, at 08:02 PM, Vinicius Vendramini via swift-evolution wrote:<br>&gt; Same here: not much to add, but also a -1 on this proposal.<br>&gt;<br>&gt; I would, however, like to bring up the obvious comparison between<br>&gt; swift and objective-c. Swift is much more readable for a series of<br>&gt; reasons, and the fact that ‘self’ isn’t mandatory is doubtlessly one<br>&gt; of them.<br>&gt;<br>&gt;&gt; On Dec 16, 2015, at 2:52 PM, Marco Masser via swift-evolution &lt;swift-<br>&gt;&gt; evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I don&#39;t have anything to add to Michael&#39;s answer but want to add<br>&gt;&gt; my voice to this side of the argument. I&#39;d answer ever question as<br>&gt;&gt; he did.<br>&gt;&gt;<br>&gt;&gt; On Wednesday, December 16, 2015, Michael Wells via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; * What is your evaluation of the proposal?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; -1<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I’m not in favor of the changes. After adopting the current Swift<br>&gt;&gt;&gt; style of omitting self when possible, I find my code is much more<br>&gt;&gt;&gt; readable. I certainly understand and respect the reasoning behind<br>&gt;&gt;&gt; the proposal, but I am not convinced that the changes are worth<br>&gt;&gt;&gt; the cost.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; * Is the problem being addressed significant enough to warrant a<br>&gt;&gt;&gt;   change to Swift?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I don’t think so. This seems like something best addressed with a<br>&gt;&gt;&gt; code style or formatting tool. Nothing prohibits you from requiring<br>&gt;&gt;&gt; the use of self in your own code.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I do like that it would lead to consistent code: you always use self<br>&gt;&gt;&gt; to access instance members. On the other had, the visual weight of<br>&gt;&gt;&gt; it seems to outbalance any gain.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; * If you have you used other languages or libraries with a similar<br>&gt;&gt;&gt;   feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I’ve always preferred the style that Swift has adopted and will<br>&gt;&gt;&gt; continue to use that if at all possible.<br>&gt;&gt;&gt; * How much effort did you put into your review? A glance, a quick<br>&gt;&gt;&gt;   reading, or an in-depth study?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I’ve been keeping up with the thread, but I didn’t do any in-depth<br>&gt;&gt;&gt; study or anything.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Dec 16, 2015, at 10:58 AM, Douglas Gregor via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; All of the prior swift-evolution commentary on this proposal (which<br>&gt;&gt;&gt;&gt; is nearing the 100-message mark) will also be considered, of<br>&gt;&gt;&gt;&gt; course!<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; - Doug<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Dec 16, 2015, at 10:55 AM, Douglas Gregor via swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; The review of “Require self for accessing instance members” begins<br>&gt;&gt;&gt;&gt;&gt; now and runs through Sunday, December 20th. The proposal is<br>&gt;&gt;&gt;&gt;&gt; available here:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All<br>&gt;&gt;&gt;&gt;&gt; reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to<br>&gt;&gt;&gt;&gt;&gt; the review manager.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; The goal of the review process is to improve the proposal under<br>&gt;&gt;&gt;&gt;&gt; review through constructive criticism and, eventually, determine<br>&gt;&gt;&gt;&gt;&gt; the direction of Swift. When writing your review, here are some<br>&gt;&gt;&gt;&gt;&gt; questions you might want to answer in your review:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; * What is your evaluation of the proposal? * Is the problem being<br>&gt;&gt;&gt;&gt;&gt; addressed significant enough to warrant a change to Swift? * Does<br>&gt;&gt;&gt;&gt;&gt; this proposal fit well with the feel and direction of Swift? * If<br>&gt;&gt;&gt;&gt;&gt; you have you used other languages or libraries with a similar<br>&gt;&gt;&gt;&gt;&gt; feature, how do you feel that this proposal compares to those? *<br>&gt;&gt;&gt;&gt;&gt; How much effort did you put into your review? A glance, a quick<br>&gt;&gt;&gt;&gt;&gt; reading, or an in-depth study?<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Cheers, Doug Gregor Review Manager<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _________________________________________________<br>&gt; swift-evolution mailing list swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/e5dcedc1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5a72880ffed1a30cb9b8e3f372507145?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Rob Mayoff</string> &lt;mayoff at dqd.com&gt;<p>December 16, 2015 at 02:00:00pm</p></header><div class="content"><p>&gt;<br>&gt; the lack of a self identifier on properties means that I&#39;m continually<br>&gt; checking back in the code (often requiring scrolling) to be sure that I&#39;m<br>&gt; looking at a property or local var.<br>&gt;<br></p><p>Syntax highlighting is a good solution to this problem.<br></p><p>I&#39;m opposed to mandatory `self`.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/c2490979/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>December 17, 2015 at 12:00:00pm</p></header><div class="content"><p>&gt; On 16 Dec 2015, at 21:18, Bill Burgar via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; The arguments in favour of removing self that claim to make code more readable (I think) centre on the idea that there are fewer characters on the line<br></p><p><br>I don’t think this is the case. Consider the following:<br></p><p>import Darwin<br></p><p>struct Quadratic<br>{<br>    let a: Double<br>    let b: Double<br>    let c: Double<br></p><p>    func rootsNoSelf() -&gt; (Double, Double)?<br>    {<br>        let discriminant = b * b - 4 * a * c<br></p><p>        guard discriminant &gt;= 0 else { return nil }<br>        let discRoot = sqrt(discriminant)<br>	return ((-b + discRoot) / (2 * a), (-b - discRoot) / (2 * a))<br>    }<br></p><p>    func rootsSelf() -&gt; (Double, Double)?<br>    {<br>        let discriminant = self.b * self.b - 4 * self.a * self.c<br></p><p>        guard discriminant &gt;= 0 else { return nil }<br>        let discRoot = sqrt(discriminant)<br>        return ((-self.b + discRoot) / (2 * self.a), (-self.b - discRoot) / (2 * self.a))<br>    }<br>}<br></p><p>I think the former function is easier to read. It’s instantly recognisable to anybody who has a passing acquaintance with The Formula. The second function, slightly less so. The constants get a bit lost with all the “self”s around and I don’t think it has anything to do with line length.<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a59b0df1d55761e4d340da93232790ea?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Kevin Wooten</string> &lt;kdubb at me.com&gt;<p>December 16, 2015 at 01:00:00pm</p></header><div class="content"><p>I vote strongly against this proposal <br></p><p>— Michael’s answers seem to sum up pretty well my opinion. So I will mostly rely on them without restating them.<br></p><p>I have kept up to date with discussion up until now and I must say that no clear advantage has been stated; all the arguments made for and against seemed to pretty much cancel each other out. With no clear advantage I vote, strongly, for choice! <br></p><p><br>One final thought, the proposal is severely one sided. You’d almost think nobody was opposed to it at all, when in reality there were many dissenters that all made at least as good arguments as the proponents did.<br></p><p><br>&gt; On Dec 16, 2015, at 12:37 PM, Michael Wells via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; * What is your evaluation of the proposal?<br>&gt; <br>&gt; -1<br>&gt; <br>&gt; I’m not in favor of the changes. After adopting the current Swift style of omitting self when possible, I find my code is much more readable. I certainly understand and respect the reasoning behind the proposal, but I am not convinced that the changes are worth the cost. <br>&gt; <br>&gt; * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; I don’t think so. This seems like something best addressed with a code style or formatting tool. Nothing prohibits you from requiring the use of self in your own code. <br>&gt; <br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; I do like that it would lead to consistent code: you always use self to access instance members. On the other had, the visual weight of it seems to outbalance any gain.<br>&gt; <br>&gt; * If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; I’ve always preferred the style that Swift has adopted and will continue to use that if at all possible.<br>&gt; <br>&gt; * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;  <br>&gt; I’ve been keeping up with the thread, but I didn’t do any in-depth study or anything. <br>&gt; <br>&gt; <br>&gt;&gt; On Dec 16, 2015, at 10:58 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; All of the prior swift-evolution commentary on this proposal (which is nearing the 100-message mark) will also be considered, of course!<br>&gt;&gt; <br>&gt;&gt; 	- Doug<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 16, 2015, at 10:55 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The review of “Require self for accessing instance members” begins now and runs through Sunday, December 20th. The proposal is available here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	Cheers,<br>&gt;&gt;&gt; 	Doug Gregor<br>&gt;&gt;&gt; 	Review Manager<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/7f816bdc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>December 16, 2015 at 09:00:00pm</p></header><div class="content"><p>As I replied in another thread, the proposal represented the community view at the time of writing. I haven’t updated it as the feedback from the mailing has been fairly enormous and I wasn’t sure it should be summarised or ported back. I would be happy to correct that if someone from Apple lets me know I should port it back to the document.<br></p><p>David.<br></p><p>&gt; On 16 Dec 2015, at 21:27, Kevin Wooten via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I vote strongly against this proposal <br>&gt; <br>&gt; — Michael’s answers seem to sum up pretty well my opinion. So I will mostly rely on them without restating them.<br>&gt; <br>&gt; I have kept up to date with discussion up until now and I must say that no clear advantage has been stated; all the arguments made for and against seemed to pretty much cancel each other out. With no clear advantage I vote, strongly, for choice! <br>&gt; <br>&gt; <br>&gt; One final thought, the proposal is severely one sided. You’d almost think nobody was opposed to it at all, when in reality there were many dissenters that all made at least as good arguments as the proponents did.<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 16, 2015, at 12:37 PM, Michael Wells via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; * What is your evaluation of the proposal?<br>&gt;&gt; <br>&gt;&gt; -1<br>&gt;&gt; <br>&gt;&gt; I’m not in favor of the changes. After adopting the current Swift style of omitting self when possible, I find my code is much more readable. I certainly understand and respect the reasoning behind the proposal, but I am not convinced that the changes are worth the cost. <br>&gt;&gt; <br>&gt;&gt; * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; <br>&gt;&gt; I don’t think so. This seems like something best addressed with a code style or formatting tool. Nothing prohibits you from requiring the use of self in your own code. <br>&gt;&gt; <br>&gt;&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; <br>&gt;&gt; I do like that it would lead to consistent code: you always use self to access instance members. On the other had, the visual weight of it seems to outbalance any gain.<br>&gt;&gt; <br>&gt;&gt; * If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; <br>&gt;&gt; I’ve always preferred the style that Swift has adopted and will continue to use that if at all possible.<br>&gt;&gt; <br>&gt;&gt; * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;  <br>&gt;&gt; I’ve been keeping up with the thread, but I didn’t do any in-depth study or anything. <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 16, 2015, at 10:58 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; All of the prior swift-evolution commentary on this proposal (which is nearing the 100-message mark) will also be considered, of course!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	- Doug<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 16, 2015, at 10:55 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The review of “Require self for accessing instance members” begins now and runs through Sunday, December 20th. The proposal is available here:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt;&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	Cheers,<br>&gt;&gt;&gt;&gt; 	Doug Gregor<br>&gt;&gt;&gt;&gt; 	Review Manager<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/90155b75/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/caa7226ca750e974668243476ffbafd5?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Greg Titus</string> &lt;greg at omnigroup.com&gt;<p>December 16, 2015 at 01:00:00pm</p></header><div class="content"><p>Like several others so far, I think that Michael has stated the “against” side fairly well, and I agree, and have the same answers. -1.<br></p><p>	- Greg<br></p><p>&gt; On Dec 16, 2015, at 11:37 AM, Michael Wells via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; * What is your evaluation of the proposal?<br>&gt; <br>&gt; -1<br>&gt; <br>&gt; I’m not in favor of the changes. After adopting the current Swift style of omitting self when possible, I find my code is much more readable. I certainly understand and respect the reasoning behind the proposal, but I am not convinced that the changes are worth the cost. <br>&gt; <br>&gt; * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; I don’t think so. This seems like something best addressed with a code style or formatting tool. Nothing prohibits you from requiring the use of self in your own code. <br>&gt; <br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; I do like that it would lead to consistent code: you always use self to access instance members. On the other had, the visual weight of it seems to outbalance any gain.<br>&gt; <br>&gt; * If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; I’ve always preferred the style that Swift has adopted and will continue to use that if at all possible.<br>&gt; <br>&gt; * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;  <br>&gt; I’ve been keeping up with the thread, but I didn’t do any in-depth study or anything. <br>&gt; <br>&gt; <br>&gt;&gt; On Dec 16, 2015, at 10:58 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; All of the prior swift-evolution commentary on this proposal (which is nearing the 100-message mark) will also be considered, of course!<br>&gt;&gt; <br>&gt;&gt; 	- Doug<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 16, 2015, at 10:55 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The review of “Require self for accessing instance members” begins now and runs through Sunday, December 20th. The proposal is available here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	Cheers,<br>&gt;&gt;&gt; 	Doug Gregor<br>&gt;&gt;&gt; 	Review Manager<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/c733d157/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d5ada5f318f38f99b9d0a5d88284743a?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Nick Shelley</string> &lt;nickmshelley at gmail.com&gt;<p>December 16, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt;<br>&gt; All of the prior swift-evolution commentary on this proposal (which is<br>&gt; nearing the 100-message mark) will also be considered, of course!<br></p><p><br>It is my opinion that the proposal should encapsulate as much of that<br>discussion as possible so every reviewer doesn&#39;t have to read every comment<br>in that thread. The current proposal is wildly one-sided and seems to only<br>reflect the opinion of its author and those who agree with the proposal. I<br>created a Pull Request (https://github.com/apple/swift-evolution/pull/59,<br>still not merged and no comments as to why) to more fairly represent the<br>single counter-argument pointed out in the proposal, but others in the<br>mailing list expressed concern that none of the other downsides of the<br>proposal are represented at all.<br></p><p>Is my (and others&#39;) desire to have the proposal contain an accurate<br>representation of the main points of the community discussion off base? Is<br>the main purpose of the proposal to be a sales pitch for an idea, even if<br>it includes building up and tearing down straw-man versions of the<br>arguments brought forth by the opposition? I&#39;m asking with sincere<br>curiosity because I can&#39;t seem to find a good description of the purpose of<br>the proposal in my research of how the evolution process works.<br></p><p>Thanks in advance for clarifying these points for me.<br></p><p>On Wed, Dec 16, 2015 at 11:58 AM, Douglas Gregor via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; All of the prior swift-evolution commentary on this proposal (which is<br>&gt; nearing the 100-message mark) will also be considered, of course!<br>&gt;<br>&gt; - Doug<br>&gt;<br>&gt; On Dec 16, 2015, at 10:55 AM, Douglas Gregor via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of “Require self for accessing instance members” begins now and<br>&gt; runs through Sunday, December 20th. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt; * What is your evaluation of the proposal?<br>&gt; * Is the problem being addressed significant enough to warrant a change<br>&gt; to Swift?<br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt; * If you have you used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt; * How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Cheers,<br>&gt; Doug Gregor<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/2dc46ff6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d5ada5f318f38f99b9d0a5d88284743a?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Nick Shelley</string> &lt;nickmshelley at gmail.com&gt;<p>December 16, 2015 at 01:00:00pm</p></header><div class="content"><p>Also, the &quot;community responses&quot; section only lists the positive community<br>responses, when the actual community discussion seemed to be more of an<br>even split (if not more people opposed). That&#39;s just more evidence that at<br>least this particular proposal is blatantly and purposefully one-sided in<br>its representation of the community&#39;s input.<br></p><p>On Wed, Dec 16, 2015 at 1:09 PM, Nick Shelley &lt;nickmshelley at gmail.com&gt;<br>wrote:<br></p><p>&gt; All of the prior swift-evolution commentary on this proposal (which is<br>&gt;&gt; nearing the 100-message mark) will also be considered, of course!<br>&gt;<br>&gt;<br>&gt; It is my opinion that the proposal should encapsulate as much of that<br>&gt; discussion as possible so every reviewer doesn&#39;t have to read every comment<br>&gt; in that thread. The current proposal is wildly one-sided and seems to only<br>&gt; reflect the opinion of its author and those who agree with the proposal. I<br>&gt; created a Pull Request (https://github.com/apple/swift-evolution/pull/59,<br>&gt; still not merged and no comments as to why) to more fairly represent the<br>&gt; single counter-argument pointed out in the proposal, but others in the<br>&gt; mailing list expressed concern that none of the other downsides of the<br>&gt; proposal are represented at all.<br>&gt;<br>&gt; Is my (and others&#39;) desire to have the proposal contain an accurate<br>&gt; representation of the main points of the community discussion off base? Is<br>&gt; the main purpose of the proposal to be a sales pitch for an idea, even if<br>&gt; it includes building up and tearing down straw-man versions of the<br>&gt; arguments brought forth by the opposition? I&#39;m asking with sincere<br>&gt; curiosity because I can&#39;t seem to find a good description of the purpose of<br>&gt; the proposal in my research of how the evolution process works.<br>&gt;<br>&gt; Thanks in advance for clarifying these points for me.<br>&gt;<br>&gt; On Wed, Dec 16, 2015 at 11:58 AM, Douglas Gregor via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; All of the prior swift-evolution commentary on this proposal (which is<br>&gt;&gt; nearing the 100-message mark) will also be considered, of course!<br>&gt;&gt;<br>&gt;&gt; - Doug<br>&gt;&gt;<br>&gt;&gt; On Dec 16, 2015, at 10:55 AM, Douglas Gregor via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hello Swift community,<br>&gt;&gt;<br>&gt;&gt; The review of “Require self for accessing instance members” begins now<br>&gt;&gt; and runs through Sunday, December 20th. The proposal is available here:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md<br>&gt;&gt;<br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt;&gt; should be sent to the swift-evolution mailing list at<br>&gt;&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; or, if you would like to keep your feedback private, directly to the<br>&gt;&gt; review manager.<br>&gt;&gt;<br>&gt;&gt; What goes into a review?<br>&gt;&gt;<br>&gt;&gt; The goal of the review process is to improve the proposal under review<br>&gt;&gt; through constructive criticism and, eventually, determine the direction of<br>&gt;&gt; Swift. When writing your review, here are some questions you might want to<br>&gt;&gt; answer in your review:<br>&gt;&gt;<br>&gt;&gt; * What is your evaluation of the proposal?<br>&gt;&gt; * Is the problem being addressed significant enough to warrant a change<br>&gt;&gt; to Swift?<br>&gt;&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; * If you have you used other languages or libraries with a similar<br>&gt;&gt; feature, how do you feel that this proposal compares to those?<br>&gt;&gt; * How much effort did you put into your review? A glance, a quick<br>&gt;&gt; reading, or an in-depth study?<br>&gt;&gt;<br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;<br>&gt;&gt; Cheers,<br>&gt;&gt; Doug Gregor<br>&gt;&gt; Review Manager<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/369778c0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1696913cf1335685a75e63e11b459ae3?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Sune Foldager</string> &lt;cyano at me.com&gt;<p>December 16, 2015 at 09:00:00pm</p></header><div class="content"><p>&gt; On 16 Dec 2015, at 21:13, Nick Shelley via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Also, the &quot;community responses&quot; section only lists the positive community responses, when the actual community discussion seemed to be more of an even split (if not more people opposed). That&#39;s just more evidence that at least this particular proposal is blatantly and purposefully one-sided in its representation of the community&#39;s input.<br></p><p>I made the same comments in the thread 1-2 days ago. I wasn’t, and am not, sure if it’s supposed to be that way or not, but it seems weird.<br></p><p>-Sune<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/c6a31d65/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>December 16, 2015 at 09:00:00pm</p></header><div class="content"><p>Hi Nick,<br></p><p>As author of the proposal, the community responses reflected the general feedback that existed at the point I created the proposal. I wasn’t sure if the subsequent feedback should better stay in the mailing list or be summarised back in the proposal.<br></p><p>If someone from Apple can confirm what should be done, I wouldn’t mind updating the proposal to better reflect the 50/50 split and arguments of this monstrous thread :)<br></p><p>David.<br></p><p>&gt; On 16 Dec 2015, at 21:13, Nick Shelley via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Also, the &quot;community responses&quot; section only lists the positive community responses, when the actual community discussion seemed to be more of an even split (if not more people opposed). That&#39;s just more evidence that at least this particular proposal is blatantly and purposefully one-sided in its representation of the community&#39;s input.<br>&gt; <br>&gt; On Wed, Dec 16, 2015 at 1:09 PM, Nick Shelley &lt;nickmshelley at gmail.com &lt;mailto:nickmshelley at gmail.com&gt;&gt; wrote:<br>&gt; All of the prior swift-evolution commentary on this proposal (which is nearing the 100-message mark) will also be considered, of course!<br>&gt; <br>&gt; It is my opinion that the proposal should encapsulate as much of that discussion as possible so every reviewer doesn&#39;t have to read every comment in that thread. The current proposal is wildly one-sided and seems to only reflect the opinion of its author and those who agree with the proposal. I created a Pull Request (https://github.com/apple/swift-evolution/pull/59 &lt;https://github.com/apple/swift-evolution/pull/59&gt;, still not merged and no comments as to why) to more fairly represent the single counter-argument pointed out in the proposal, but others in the mailing list expressed concern that none of the other downsides of the proposal are represented at all.<br>&gt; <br>&gt; Is my (and others&#39;) desire to have the proposal contain an accurate representation of the main points of the community discussion off base? Is the main purpose of the proposal to be a sales pitch for an idea, even if it includes building up and tearing down straw-man versions of the arguments brought forth by the opposition? I&#39;m asking with sincere curiosity because I can&#39;t seem to find a good description of the purpose of the proposal in my research of how the evolution process works.<br>&gt; <br>&gt; Thanks in advance for clarifying these points for me.<br>&gt; <br>&gt; On Wed, Dec 16, 2015 at 11:58 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; All of the prior swift-evolution commentary on this proposal (which is nearing the 100-message mark) will also be considered, of course!<br>&gt; <br>&gt; 	- Doug<br>&gt; <br>&gt;&gt; On Dec 16, 2015, at 10:55 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of “Require self for accessing instance members” begins now and runs through Sunday, December 20th. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md&gt;<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt; <br>&gt;&gt; 	Cheers,<br>&gt;&gt; 	Doug Gregor<br>&gt;&gt; 	Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/c19e899b/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d5ada5f318f38f99b9d0a5d88284743a?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Nick Shelley</string> &lt;nickmshelley at gmail.com&gt;<p>December 16, 2015 at 01:00:00pm</p></header><div class="content"><p>David,<br></p><p>Sorry if I&#39;m coming across as overly harsh towards the proposal and you as<br>the author. I think I&#39;m mainly surprised and a bit frustrated that this<br>version of the proposal is what is being reviewed when there&#39;s so much of<br>the community&#39;s input that it doesn&#39;t represent.<br></p><p>I understand that you were doing the best you could at the time, and the<br>process doesn&#39;t make it clear whether and when proposals should be updated.<br>So please take all of my expressed criticism and frustration as directed<br>toward the process itself in an attempt to improve it, and not toward any<br>individual or group of people.<br></p><p>Thanks for your patience.<br></p><p>-Nick<br></p><p>On Wed, Dec 16, 2015 at 1:22 PM, David Hart &lt;david at hartbit.com&gt; wrote:<br></p><p>&gt; Hi Nick,<br>&gt;<br>&gt; As author of the proposal, the community responses reflected the general<br>&gt; feedback that existed at the point I created the proposal. I wasn’t sure if<br>&gt; the subsequent feedback should better stay in the mailing list or be<br>&gt; summarised back in the proposal.<br>&gt;<br>&gt; If someone from Apple can confirm what should be done, I wouldn’t mind<br>&gt; updating the proposal to better reflect the 50/50 split and arguments of<br>&gt; this monstrous thread :)<br>&gt;<br>&gt; David.<br>&gt;<br>&gt; On 16 Dec 2015, at 21:13, Nick Shelley via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Also, the &quot;community responses&quot; section only lists the positive community<br>&gt; responses, when the actual community discussion seemed to be more of an<br>&gt; even split (if not more people opposed). That&#39;s just more evidence that at<br>&gt; least this particular proposal is blatantly and purposefully one-sided in<br>&gt; its representation of the community&#39;s input.<br>&gt;<br>&gt; On Wed, Dec 16, 2015 at 1:09 PM, Nick Shelley &lt;nickmshelley at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; All of the prior swift-evolution commentary on this proposal (which is<br>&gt;&gt;&gt; nearing the 100-message mark) will also be considered, of course!<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; It is my opinion that the proposal should encapsulate as much of that<br>&gt;&gt; discussion as possible so every reviewer doesn&#39;t have to read every comment<br>&gt;&gt; in that thread. The current proposal is wildly one-sided and seems to only<br>&gt;&gt; reflect the opinion of its author and those who agree with the proposal. I<br>&gt;&gt; created a Pull Request (https://github.com/apple/swift-evolution/pull/59,<br>&gt;&gt; still not merged and no comments as to why) to more fairly represent the<br>&gt;&gt; single counter-argument pointed out in the proposal, but others in the<br>&gt;&gt; mailing list expressed concern that none of the other downsides of the<br>&gt;&gt; proposal are represented at all.<br>&gt;&gt;<br>&gt;&gt; Is my (and others&#39;) desire to have the proposal contain an accurate<br>&gt;&gt; representation of the main points of the community discussion off base? Is<br>&gt;&gt; the main purpose of the proposal to be a sales pitch for an idea, even if<br>&gt;&gt; it includes building up and tearing down straw-man versions of the<br>&gt;&gt; arguments brought forth by the opposition? I&#39;m asking with sincere<br>&gt;&gt; curiosity because I can&#39;t seem to find a good description of the purpose of<br>&gt;&gt; the proposal in my research of how the evolution process works.<br>&gt;&gt;<br>&gt;&gt; Thanks in advance for clarifying these points for me.<br>&gt;&gt;<br>&gt;&gt; On Wed, Dec 16, 2015 at 11:58 AM, Douglas Gregor via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; All of the prior swift-evolution commentary on this proposal (which is<br>&gt;&gt;&gt; nearing the 100-message mark) will also be considered, of course!<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; - Doug<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Dec 16, 2015, at 10:55 AM, Douglas Gregor via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The review of “Require self for accessing instance members” begins now<br>&gt;&gt;&gt; and runs through Sunday, December 20th. The proposal is available here:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All<br>&gt;&gt;&gt; reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the<br>&gt;&gt;&gt; review manager.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The goal of the review process is to improve the proposal under review<br>&gt;&gt;&gt; through constructive criticism and, eventually, determine the direction of<br>&gt;&gt;&gt; Swift. When writing your review, here are some questions you might want to<br>&gt;&gt;&gt; answer in your review:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; * What is your evaluation of the proposal?<br>&gt;&gt;&gt; * Is the problem being addressed significant enough to warrant a change<br>&gt;&gt;&gt; to Swift?<br>&gt;&gt;&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; * If you have you used other languages or libraries with a similar<br>&gt;&gt;&gt; feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt; * How much effort did you put into your review? A glance, a quick<br>&gt;&gt;&gt; reading, or an in-depth study?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt; Doug Gregor<br>&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/f4120619/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>December 16, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt; On Dec 16, 2015, at 12:22 PM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt; <br>&gt; Hi Nick,<br>&gt; <br>&gt; As author of the proposal, the community responses reflected the general feedback that existed at the point I created the proposal. I wasn’t sure if the subsequent feedback should better stay in the mailing list or be summarised back in the proposal.<br>&gt; <br>&gt; If someone from Apple can confirm what should be done, I wouldn’t mind updating the proposal to better reflect the 50/50 split and arguments of this monstrous thread :)<br></p><p>I think it would be beneficial if you submit a pull request that amends the proposal with a discussion of the main counter-arguments that have come up with the discussion. <br></p><p>My apologies, I probably should have asked for this before kicking off the review. We’re still working out the process here.<br></p><p>	- Doug<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d5ada5f318f38f99b9d0a5d88284743a?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Nick Shelley</string> &lt;nickmshelley at gmail.com&gt;<p>December 16, 2015 at 02:00:00pm</p></header><div class="content"><p>&gt;<br>&gt; My apologies, I probably should have asked for this before kicking off the<br>&gt; review. We’re still working out the process here.<br></p><p><br>My appreciation for being allowed to be part of the process far outweighs<br>any frustration I may have with the process. Sorry if my communication<br>doesn&#39;t always reflect that. Thank you for your work and patience.<br></p><p>On Wed, Dec 16, 2015 at 2:13 PM, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Dec 16, 2015, at 12:22 PM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Hi Nick,<br>&gt; &gt;<br>&gt; &gt; As author of the proposal, the community responses reflected the general<br>&gt; feedback that existed at the point I created the proposal. I wasn’t sure if<br>&gt; the subsequent feedback should better stay in the mailing list or be<br>&gt; summarised back in the proposal.<br>&gt; &gt;<br>&gt; &gt; If someone from Apple can confirm what should be done, I wouldn’t mind<br>&gt; updating the proposal to better reflect the 50/50 split and arguments of<br>&gt; this monstrous thread :)<br>&gt;<br>&gt; I think it would be beneficial if you submit a pull request that amends<br>&gt; the proposal with a discussion of the main counter-arguments that have come<br>&gt; up with the discussion.<br>&gt;<br>&gt; My apologies, I probably should have asked for this before kicking off the<br>&gt; review. We’re still working out the process here.<br>&gt;<br>&gt;         - Doug<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/f15deb49/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>December 16, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt; On Dec 16, 2015, at 1:13 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 16, 2015, at 12:22 PM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi Nick,<br>&gt;&gt; <br>&gt;&gt; As author of the proposal, the community responses reflected the general feedback that existed at the point I created the proposal. I wasn’t sure if the subsequent feedback should better stay in the mailing list or be summarised back in the proposal.<br>&gt;&gt; <br>&gt;&gt; If someone from Apple can confirm what should be done, I wouldn’t mind updating the proposal to better reflect the 50/50 split and arguments of this monstrous thread :)<br>&gt; <br>&gt; I think it would be beneficial if you submit a pull request that amends the proposal with a discussion of the main counter-arguments that have come up with the discussion. <br>&gt; <br>&gt; My apologies, I probably should have asked for this before kicking off the review. We’re still working out the process here.<br></p><p><br>That said, I want to re-iterate that we consider *all* of the prior discussions on this topic. The point of including some of the counter-arguments in the main proposal is to clearly indicate that you’ve considered them and give a central place for you (as the proposal author) to state why they don’t weigh as heavily for you as your arguments in favor of the proposal.<br></p><p>	- Doug<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>December 17, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt; On 16 Dec 2015, at 22:13, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; I think it would be beneficial if you submit a pull request that amends the proposal with a discussion of the main counter-arguments that have come up with the discussion. <br>&gt; <br>&gt; My apologies, I probably should have asked for this before kicking off the review. We’re still working out the process here.<br>&gt; <br>&gt; 	- Doug<br>&gt; <br>&gt; <br></p><p>I think the “Community Response” section should be dropped from the proposal. It merely duplicates information that is already available in the mailing list at the cost of a huge burden on the proposal’s author/maintainer.<br></p><p><br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>December 18, 2015 at 12:00:00am</p></header><div class="content"><p>&gt; I think the “Community Response” section should be dropped from the proposal. It merely duplicates information that is already available in the mailing list at the cost of a huge burden on the proposal’s author/maintainer.<br></p><p>I think the “Community Response” section should be dropped from *every* proposal. If the section is supposed to be balanced, the proposal’s author and chief proponent is the wrong person to be compiling it. If the section is *not* supposed to be balanced, it’s basically the open source equivalent of a politician packing the house with supporters.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>December 21, 2015 at 03:00:00am</p></header><div class="content"><p>I&#39;m strongly in favor of the proposal, but I too think the proposal is missing balance. I&#39;d really like to see all the points for and against laid out in one place, so they can be weighed appropriately.<br></p><p>Tyler<br></p><p>&gt; On Dec 16, 2015, at 12:13 PM, Nick Shelley via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Also, the &quot;community responses&quot; section only lists the positive community responses, when the actual community discussion seemed to be more of an even split (if not more people opposed). That&#39;s just more evidence that at least this particular proposal is blatantly and purposefully one-sided in its representation of the community&#39;s input.<br>&gt; <br>&gt; On Wed, Dec 16, 2015 at 1:09 PM, Nick Shelley &lt;nickmshelley at gmail.com&gt; wrote:<br>&gt;&gt;&gt; All of the prior swift-evolution commentary on this proposal (which is nearing the 100-message mark) will also be considered, of course!<br>&gt;&gt; <br>&gt;&gt; It is my opinion that the proposal should encapsulate as much of that discussion as possible so every reviewer doesn&#39;t have to read every comment in that thread. The current proposal is wildly one-sided and seems to only reflect the opinion of its author and those who agree with the proposal. I created a Pull Request (https://github.com/apple/swift-evolution/pull/59, still not merged and no comments as to why) to more fairly represent the single counter-argument pointed out in the proposal, but others in the mailing list expressed concern that none of the other downsides of the proposal are represented at all.<br>&gt;&gt; <br>&gt;&gt; Is my (and others&#39;) desire to have the proposal contain an accurate representation of the main points of the community discussion off base? Is the main purpose of the proposal to be a sales pitch for an idea, even if it includes building up and tearing down straw-man versions of the arguments brought forth by the opposition? I&#39;m asking with sincere curiosity because I can&#39;t seem to find a good description of the purpose of the proposal in my research of how the evolution process works.<br>&gt;&gt; <br>&gt;&gt; Thanks in advance for clarifying these points for me.<br>&gt;&gt; <br>&gt;&gt;&gt; On Wed, Dec 16, 2015 at 11:58 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; All of the prior swift-evolution commentary on this proposal (which is nearing the 100-message mark) will also be considered, of course!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	- Doug<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 16, 2015, at 10:55 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The review of “Require self for accessing instance members” begins now and runs through Sunday, December 20th. The proposal is available here:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt;&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	Cheers,<br>&gt;&gt;&gt;&gt; 	Doug Gregor<br>&gt;&gt;&gt;&gt; 	Review Manager<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151221/9e03d972/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>December 21, 2015 at 04:00:00am</p></header><div class="content"><p>I will add one thing here that I don&#39;t think has been mentioned, which is code completion in Xcode.<br></p><p>Frequently, I use &quot;self.&quot; to see what methods/properties are available to me on the current object. If I am working on a project where implicit self is preferred (as suggested by a number of style guides), going back and removing these self references is unfortunate.<br></p><p>Also reading further in the thread I realize that the issue mention below was addressed. Furthermore, perhaps &quot;strongly&quot; in favor is not quite right. I could deal with the status quo.<br></p><p>Tyler<br></p><p>&gt; On Dec 21, 2015, at 3:43 AM, Tyler Cloutier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;m strongly in favor of the proposal, but I too think the proposal is missing balance. I&#39;d really like to see all the points for and against laid out in one place, so they can be weighed appropriately.<br>&gt; <br>&gt; Tyler<br>&gt; <br>&gt;&gt; On Dec 16, 2015, at 12:13 PM, Nick Shelley via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Also, the &quot;community responses&quot; section only lists the positive community responses, when the actual community discussion seemed to be more of an even split (if not more people opposed). That&#39;s just more evidence that at least this particular proposal is blatantly and purposefully one-sided in its representation of the community&#39;s input.<br>&gt;&gt; <br>&gt;&gt; On Wed, Dec 16, 2015 at 1:09 PM, Nick Shelley &lt;nickmshelley at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; All of the prior swift-evolution commentary on this proposal (which is nearing the 100-message mark) will also be considered, of course!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It is my opinion that the proposal should encapsulate as much of that discussion as possible so every reviewer doesn&#39;t have to read every comment in that thread. The current proposal is wildly one-sided and seems to only reflect the opinion of its author and those who agree with the proposal. I created a Pull Request (https://github.com/apple/swift-evolution/pull/59, still not merged and no comments as to why) to more fairly represent the single counter-argument pointed out in the proposal, but others in the mailing list expressed concern that none of the other downsides of the proposal are represented at all.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is my (and others&#39;) desire to have the proposal contain an accurate representation of the main points of the community discussion off base? Is the main purpose of the proposal to be a sales pitch for an idea, even if it includes building up and tearing down straw-man versions of the arguments brought forth by the opposition? I&#39;m asking with sincere curiosity because I can&#39;t seem to find a good description of the purpose of the proposal in my research of how the evolution process works.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks in advance for clarifying these points for me.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Wed, Dec 16, 2015 at 11:58 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; All of the prior swift-evolution commentary on this proposal (which is nearing the 100-message mark) will also be considered, of course!<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	- Doug<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 16, 2015, at 10:55 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The review of “Require self for accessing instance members” begins now and runs through Sunday, December 20th. The proposal is available here:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt;&gt;&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt;&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt;&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt;&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	Cheers,<br>&gt;&gt;&gt;&gt;&gt; 	Doug Gregor<br>&gt;&gt;&gt;&gt;&gt; 	Review Manager<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151221/65b74944/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b1fc4ed1ed8e138ef0a87fd3e91c83a4?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Ricardo Parada</string> &lt;rparada at mac.com&gt;<p>December 21, 2015 at 11:00:00am</p></header><div class="content"><p>You can still make use of code completion regardless of whether you end up using the &quot;self.&quot;   part. <br></p><p>For example, you type &quot;self.&quot; to get code completion and after you select the desired method or property and fill in the arguments you can then remove the &quot;self.&quot; part from it. <br></p><p><br></p><p>&gt; On Dec 21, 2015, at 7:05 AM, Tyler Cloutier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I will add one thing here that I don&#39;t think has been mentioned, which is code completion in Xcode.<br>&gt; <br>&gt; Frequently, I use &quot;self.&quot; to see what methods/properties are available to me on the current object. If I am working on a project where implicit self is preferred (as suggested by a number of style guides), going back and removing these self references is unfortunate.<br>&gt; <br>&gt; Also reading further in the thread I realize that the issue mention below was addressed. Furthermore, perhaps &quot;strongly&quot; in favor is not quite right. I could deal with the status quo.<br>&gt; <br>&gt; Tyler<br>&gt; <br>&gt;&gt; On Dec 21, 2015, at 3:43 AM, Tyler Cloutier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I&#39;m strongly in favor of the proposal, but I too think the proposal is missing balance. I&#39;d really like to see all the points for and against laid out in one place, so they can be weighed appropriately.<br>&gt;&gt; <br>&gt;&gt; Tyler<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 16, 2015, at 12:13 PM, Nick Shelley via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Also, the &quot;community responses&quot; section only lists the positive community responses, when the actual community discussion seemed to be more of an even split (if not more people opposed). That&#39;s just more evidence that at least this particular proposal is blatantly and purposefully one-sided in its representation of the community&#39;s input.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Wed, Dec 16, 2015 at 1:09 PM, Nick Shelley &lt;nickmshelley at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; All of the prior swift-evolution commentary on this proposal (which is nearing the 100-message mark) will also be considered, of course!<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It is my opinion that the proposal should encapsulate as much of that discussion as possible so every reviewer doesn&#39;t have to read every comment in that thread. The current proposal is wildly one-sided and seems to only reflect the opinion of its author and those who agree with the proposal. I created a Pull Request (https://github.com/apple/swift-evolution/pull/59, still not merged and no comments as to why) to more fairly represent the single counter-argument pointed out in the proposal, but others in the mailing list expressed concern that none of the other downsides of the proposal are represented at all.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Is my (and others&#39;) desire to have the proposal contain an accurate representation of the main points of the community discussion off base? Is the main purpose of the proposal to be a sales pitch for an idea, even if it includes building up and tearing down straw-man versions of the arguments brought forth by the opposition? I&#39;m asking with sincere curiosity because I can&#39;t seem to find a good description of the purpose of the proposal in my research of how the evolution process works.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks in advance for clarifying these points for me.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Wed, Dec 16, 2015 at 11:58 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; All of the prior swift-evolution commentary on this proposal (which is nearing the 100-message mark) will also be considered, of course!<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	- Doug<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Dec 16, 2015, at 10:55 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The review of “Require self for accessing instance members” begins now and runs through Sunday, December 20th. The proposal is available here:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt;&gt;&gt;&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt;&gt;&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt;&gt;&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt;&gt;&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 	Cheers,<br>&gt;&gt;&gt;&gt;&gt;&gt; 	Doug Gregor<br>&gt;&gt;&gt;&gt;&gt;&gt; 	Review Manager<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151221/5742e979/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d47baf3a0f80c9fd13ece9c4b87c7fce?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Marc Knaup</string> &lt;marc at knaup.koeln&gt;<p>December 16, 2015 at 09:00:00pm</p></header><div class="content"><p>The Swift Evolution Process states &quot;continue to refine the proposal on the<br>evolution mailing list&quot; which is indeed very vague.<br></p><p>I suggest a proposal should contain *all* pros, cons, alternative<br>approaches, concerns from the mailing list discussion along with examples<br>for each of them.<br>Community votes should not be part of the proposal itself but appear solely<br>in the mailing list.<br></p><p>The likely issue is that the proposal was submitted for review way too<br>early while the discussion as still hot.<br>The Swift Evolution Process states that it should be submitted for review<br>after addressing feedback from the discussion.<br></p><p>On Wed, Dec 16, 2015 at 9:09 PM, Nick Shelley via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; All of the prior swift-evolution commentary on this proposal (which is<br>&gt;&gt; nearing the 100-message mark) will also be considered, of course!<br>&gt;<br>&gt;<br>&gt; It is my opinion that the proposal should encapsulate as much of that<br>&gt; discussion as possible so every reviewer doesn&#39;t have to read every comment<br>&gt; in that thread. The current proposal is wildly one-sided and seems to only<br>&gt; reflect the opinion of its author and those who agree with the proposal. I<br>&gt; created a Pull Request (https://github.com/apple/swift-evolution/pull/59,<br>&gt; still not merged and no comments as to why) to more fairly represent the<br>&gt; single counter-argument pointed out in the proposal, but others in the<br>&gt; mailing list expressed concern that none of the other downsides of the<br>&gt; proposal are represented at all.<br>&gt;<br>&gt; Is my (and others&#39;) desire to have the proposal contain an accurate<br>&gt; representation of the main points of the community discussion off base? Is<br>&gt; the main purpose of the proposal to be a sales pitch for an idea, even if<br>&gt; it includes building up and tearing down straw-man versions of the<br>&gt; arguments brought forth by the opposition? I&#39;m asking with sincere<br>&gt; curiosity because I can&#39;t seem to find a good description of the purpose of<br>&gt; the proposal in my research of how the evolution process works.<br>&gt;<br>&gt; Thanks in advance for clarifying these points for me.<br>&gt;<br>&gt; On Wed, Dec 16, 2015 at 11:58 AM, Douglas Gregor via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; All of the prior swift-evolution commentary on this proposal (which is<br>&gt;&gt; nearing the 100-message mark) will also be considered, of course!<br>&gt;&gt;<br>&gt;&gt; - Doug<br>&gt;&gt;<br>&gt;&gt; On Dec 16, 2015, at 10:55 AM, Douglas Gregor via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hello Swift community,<br>&gt;&gt;<br>&gt;&gt; The review of “Require self for accessing instance members” begins now<br>&gt;&gt; and runs through Sunday, December 20th. The proposal is available here:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md<br>&gt;&gt;<br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt;&gt; should be sent to the swift-evolution mailing list at<br>&gt;&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; or, if you would like to keep your feedback private, directly to the<br>&gt;&gt; review manager.<br>&gt;&gt;<br>&gt;&gt; What goes into a review?<br>&gt;&gt;<br>&gt;&gt; The goal of the review process is to improve the proposal under review<br>&gt;&gt; through constructive criticism and, eventually, determine the direction of<br>&gt;&gt; Swift. When writing your review, here are some questions you might want to<br>&gt;&gt; answer in your review:<br>&gt;&gt;<br>&gt;&gt; * What is your evaluation of the proposal?<br>&gt;&gt; * Is the problem being addressed significant enough to warrant a change<br>&gt;&gt; to Swift?<br>&gt;&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; * If you have you used other languages or libraries with a similar<br>&gt;&gt; feature, how do you feel that this proposal compares to those?<br>&gt;&gt; * How much effort did you put into your review? A glance, a quick<br>&gt;&gt; reading, or an in-depth study?<br>&gt;&gt;<br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;<br>&gt;&gt; Cheers,<br>&gt;&gt; Doug Gregor<br>&gt;&gt; Review Manager<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/ddf4bcaf/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0f0154768aeec561194e651b0bca02d9?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Dan Loewenherz</string> &lt;dan at lionheartsw.com&gt;<p>December 16, 2015 at 02:00:00pm</p></header><div class="content"><p>It’s my understanding that the proposal itself is just a starting<br>point. I do believe that the reviewers will review all commentary from<br>the mailing list in addition to direct commentary. I doubt that the<br>one-sided argument in the proposal was blatant; undoubtedly, the Swift<br>team has been inundated with work and merging PR #59 fell by the<br>wayside. I’m sure everyone’s arguments for and against will be<br>considered and reviewed. The team has proven many times that they are<br>thoughtful in their decision-making process.<br></p><p>Dan<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d5ada5f318f38f99b9d0a5d88284743a?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Nick Shelley</string> &lt;nickmshelley at gmail.com&gt;<p>December 16, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt;<br>&gt; I doubt that the one-sided argument in the proposal was blatant.<br></p><p><br>I should not have called it blatant, I&#39;m sorry I rashly attributed intent.<br></p><p>The fact is that the current proposal is one-sided (regardless of intent),<br>and it seems like many in the community (including the author) are unsure<br>whether and when a proposal should be updated and what its actual role is<br>in the review process.<br></p><p>I would like to take back any accusations I may have made and simply ask<br>for clarification about the role and lifecycle of a proposal.<br></p><p>On Wed, Dec 16, 2015 at 1:32 PM, Dan Loewenherz &lt;dan at lionheartsw.com&gt; wrote:<br></p><p>&gt; It’s my understanding that the proposal itself is just a starting<br>&gt; point. I do believe that the reviewers will review all commentary from<br>&gt; the mailing list in addition to direct commentary. I doubt that the<br>&gt; one-sided argument in the proposal was blatant; undoubtedly, the Swift<br>&gt; team has been inundated with work and merging PR #59 fell by the<br>&gt; wayside. I’m sure everyone’s arguments for and against will be<br>&gt; considered and reviewed. The team has proven many times that they are<br>&gt; thoughtful in their decision-making process.<br>&gt;<br>&gt; Dan<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/cc4fa242/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>December 16, 2015 at 05:00:00pm</p></header><div class="content"><p>Creating that summary seems like it would be a large burden to place on<br>whoever manages the review. I don&#39;t think that that is worth the effort<br>when the responses *are* readily available.<br></p><p>On Wed, Dec 16, 2015 at 3:09 PM, Nick Shelley via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; All of the prior swift-evolution commentary on this proposal (which is<br>&gt;&gt; nearing the 100-message mark) will also be considered, of course!<br>&gt;<br>&gt;<br>&gt; It is my opinion that the proposal should encapsulate as much of that<br>&gt; discussion as possible so every reviewer doesn&#39;t have to read every comment<br>&gt; in that thread. The current proposal is wildly one-sided and seems to only<br>&gt; reflect the opinion of its author and those who agree with the proposal. I<br>&gt; created a Pull Request (https://github.com/apple/swift-evolution/pull/59,<br>&gt; still not merged and no comments as to why) to more fairly represent the<br>&gt; single counter-argument pointed out in the proposal, but others in the<br>&gt; mailing list expressed concern that none of the other downsides of the<br>&gt; proposal are represented at all.<br>&gt;<br>&gt; Is my (and others&#39;) desire to have the proposal contain an accurate<br>&gt; representation of the main points of the community discussion off base? Is<br>&gt; the main purpose of the proposal to be a sales pitch for an idea, even if<br>&gt; it includes building up and tearing down straw-man versions of the<br>&gt; arguments brought forth by the opposition? I&#39;m asking with sincere<br>&gt; curiosity because I can&#39;t seem to find a good description of the purpose of<br>&gt; the proposal in my research of how the evolution process works.<br>&gt;<br>&gt; Thanks in advance for clarifying these points for me.<br>&gt;<br>&gt; On Wed, Dec 16, 2015 at 11:58 AM, Douglas Gregor via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; All of the prior swift-evolution commentary on this proposal (which is<br>&gt;&gt; nearing the 100-message mark) will also be considered, of course!<br>&gt;&gt;<br>&gt;&gt; - Doug<br>&gt;&gt;<br>&gt;&gt; On Dec 16, 2015, at 10:55 AM, Douglas Gregor via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hello Swift community,<br>&gt;&gt;<br>&gt;&gt; The review of “Require self for accessing instance members” begins now<br>&gt;&gt; and runs through Sunday, December 20th. The proposal is available here:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md<br>&gt;&gt;<br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt;&gt; should be sent to the swift-evolution mailing list at<br>&gt;&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; or, if you would like to keep your feedback private, directly to the<br>&gt;&gt; review manager.<br>&gt;&gt;<br>&gt;&gt; What goes into a review?<br>&gt;&gt;<br>&gt;&gt; The goal of the review process is to improve the proposal under review<br>&gt;&gt; through constructive criticism and, eventually, determine the direction of<br>&gt;&gt; Swift. When writing your review, here are some questions you might want to<br>&gt;&gt; answer in your review:<br>&gt;&gt;<br>&gt;&gt; * What is your evaluation of the proposal?<br>&gt;&gt; * Is the problem being addressed significant enough to warrant a change<br>&gt;&gt; to Swift?<br>&gt;&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; * If you have you used other languages or libraries with a similar<br>&gt;&gt; feature, how do you feel that this proposal compares to those?<br>&gt;&gt; * How much effort did you put into your review? A glance, a quick<br>&gt;&gt; reading, or an in-depth study?<br>&gt;&gt;<br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;<br>&gt;&gt; Cheers,<br>&gt;&gt; Doug Gregor<br>&gt;&gt; Review Manager<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/24acaf35/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>December 16, 2015 at 05:00:00pm</p></header><div class="content"><p>* What is your evaluation of the proposal?<br>    -1. I vote against this proposal. I believe that a linter and/or an in<br>house code guide is the best place to manage this.<br></p><p>* Is the problem being addressed significant enough to warrant a change<br>to Swift?<br>    I think that it is a significant concern but, as I stated above, best<br>handled with tooling.<br>* Does this proposal fit well with the feel and direction of Swift?<br>    No. The current Swift behavior around this issue is clear and is<br>reasonable to many.<br>* How much effort did you put into your review? A glance, a quick reading,<br>or an in-depth study?<br>    I have followed the thread and have had this discussion many times.<br></p><p>On Wed, Dec 16, 2015 at 5:47 PM, T.J. Usiyan &lt;griotspeak at gmail.com&gt; wrote:<br></p><p>&gt; Creating that summary seems like it would be a large burden to place on<br>&gt; whoever manages the review. I don&#39;t think that that is worth the effort<br>&gt; when the responses *are* readily available.<br>&gt;<br>&gt; On Wed, Dec 16, 2015 at 3:09 PM, Nick Shelley via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; All of the prior swift-evolution commentary on this proposal (which is<br>&gt;&gt;&gt; nearing the 100-message mark) will also be considered, of course!<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; It is my opinion that the proposal should encapsulate as much of that<br>&gt;&gt; discussion as possible so every reviewer doesn&#39;t have to read every comment<br>&gt;&gt; in that thread. The current proposal is wildly one-sided and seems to only<br>&gt;&gt; reflect the opinion of its author and those who agree with the proposal. I<br>&gt;&gt; created a Pull Request (https://github.com/apple/swift-evolution/pull/59,<br>&gt;&gt; still not merged and no comments as to why) to more fairly represent the<br>&gt;&gt; single counter-argument pointed out in the proposal, but others in the<br>&gt;&gt; mailing list expressed concern that none of the other downsides of the<br>&gt;&gt; proposal are represented at all.<br>&gt;&gt;<br>&gt;&gt; Is my (and others&#39;) desire to have the proposal contain an accurate<br>&gt;&gt; representation of the main points of the community discussion off base? Is<br>&gt;&gt; the main purpose of the proposal to be a sales pitch for an idea, even if<br>&gt;&gt; it includes building up and tearing down straw-man versions of the<br>&gt;&gt; arguments brought forth by the opposition? I&#39;m asking with sincere<br>&gt;&gt; curiosity because I can&#39;t seem to find a good description of the purpose of<br>&gt;&gt; the proposal in my research of how the evolution process works.<br>&gt;&gt;<br>&gt;&gt; Thanks in advance for clarifying these points for me.<br>&gt;&gt;<br>&gt;&gt; On Wed, Dec 16, 2015 at 11:58 AM, Douglas Gregor via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; All of the prior swift-evolution commentary on this proposal (which is<br>&gt;&gt;&gt; nearing the 100-message mark) will also be considered, of course!<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; - Doug<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Dec 16, 2015, at 10:55 AM, Douglas Gregor via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The review of “Require self for accessing instance members” begins now<br>&gt;&gt;&gt; and runs through Sunday, December 20th. The proposal is available here:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All<br>&gt;&gt;&gt; reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the<br>&gt;&gt;&gt; review manager.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The goal of the review process is to improve the proposal under review<br>&gt;&gt;&gt; through constructive criticism and, eventually, determine the direction of<br>&gt;&gt;&gt; Swift. When writing your review, here are some questions you might want to<br>&gt;&gt;&gt; answer in your review:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; * What is your evaluation of the proposal?<br>&gt;&gt;&gt; * Is the problem being addressed significant enough to warrant a change<br>&gt;&gt;&gt; to Swift?<br>&gt;&gt;&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; * If you have you used other languages or libraries with a similar<br>&gt;&gt;&gt; feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt; * How much effort did you put into your review? A glance, a quick<br>&gt;&gt;&gt; reading, or an in-depth study?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt; Doug Gregor<br>&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/3494afd8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d68c97e8e2f1653b54c24493caf236ae?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Stephen Celis</string> &lt;stephen.celis at gmail.com&gt;<p>December 16, 2015 at 06:00:00pm</p></header><div class="content"><p>* What is your evaluation of the proposal?<br></p><p>A strong -1. I understand the argument but believe it&#39;s a matter of style<br>that should not be enforced by the compiler.<br></p><p>* Is the problem being addressed significant enough to warrant a change to<br>Swift?<br></p><p>No. The few times implicit self has caused me to lose a few minutes<br>troubleshooting would have been better addressed with improved diagnostics<br>and error messaging (these few times were a result of me trying to be too<br>clever). I agree with others that enforcing self is the job of a linter<br>and/or in-house style guide.<br></p><p>* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Overall no. I believe it reduces expressiveness (a major tenet according to<br>https://swift.org/about/#swiftorg-and-open-source) and adds noise. While<br>explicit self can add clarity at the point of use, I do not believe it&#39;s<br>worth the noise and enforcing in all cases.<br></p><p>* If you have you used other languages or libraries with a similar feature,<br>how do you feel that this proposal compares to those?<br></p><p>I&#39;ve written Ruby and Python extensively and value Ruby&#39;s expressive nature<br>over Python&#39;s explicit proliferation of self.<br></p><p>* How much effort did you put into your review? A glance, a quick reading,<br>or an in-depth study?<br></p><p>I read the entire thread and participated throughout.<br></p><p>At the time review began, I counted 5 explicit yeas and 12 explicit nays<br>(as well as a few implicit nays).<br></p><p>Stephen<br></p><p>On Wed, Dec 16, 2015 at 5:54 PM, T.J. Usiyan via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; * What is your evaluation of the proposal?<br>&gt;     -1. I vote against this proposal. I believe that a linter and/or an in<br>&gt; house code guide is the best place to manage this.<br>&gt;<br>&gt; * Is the problem being addressed significant enough to warrant a change<br>&gt; to Swift?<br>&gt;     I think that it is a significant concern but, as I stated above, best<br>&gt; handled with tooling.<br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt;     No. The current Swift behavior around this issue is clear and is<br>&gt; reasonable to many.<br>&gt; * How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt;     I have followed the thread and have had this discussion many times.<br>&gt;<br>&gt; On Wed, Dec 16, 2015 at 5:47 PM, T.J. Usiyan &lt;griotspeak at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; Creating that summary seems like it would be a large burden to place on<br>&gt;&gt; whoever manages the review. I don&#39;t think that that is worth the effort<br>&gt;&gt; when the responses *are* readily available.<br>&gt;&gt;<br>&gt;&gt; On Wed, Dec 16, 2015 at 3:09 PM, Nick Shelley via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; All of the prior swift-evolution commentary on this proposal (which is<br>&gt;&gt;&gt;&gt; nearing the 100-message mark) will also be considered, of course!<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; It is my opinion that the proposal should encapsulate as much of that<br>&gt;&gt;&gt; discussion as possible so every reviewer doesn&#39;t have to read every comment<br>&gt;&gt;&gt; in that thread. The current proposal is wildly one-sided and seems to only<br>&gt;&gt;&gt; reflect the opinion of its author and those who agree with the proposal. I<br>&gt;&gt;&gt; created a Pull Request (https://github.com/apple/swift-evolution/pull/59,<br>&gt;&gt;&gt; still not merged and no comments as to why) to more fairly represent the<br>&gt;&gt;&gt; single counter-argument pointed out in the proposal, but others in the<br>&gt;&gt;&gt; mailing list expressed concern that none of the other downsides of the<br>&gt;&gt;&gt; proposal are represented at all.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Is my (and others&#39;) desire to have the proposal contain an accurate<br>&gt;&gt;&gt; representation of the main points of the community discussion off base? Is<br>&gt;&gt;&gt; the main purpose of the proposal to be a sales pitch for an idea, even if<br>&gt;&gt;&gt; it includes building up and tearing down straw-man versions of the<br>&gt;&gt;&gt; arguments brought forth by the opposition? I&#39;m asking with sincere<br>&gt;&gt;&gt; curiosity because I can&#39;t seem to find a good description of the purpose of<br>&gt;&gt;&gt; the proposal in my research of how the evolution process works.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Thanks in advance for clarifying these points for me.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Wed, Dec 16, 2015 at 11:58 AM, Douglas Gregor via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; All of the prior swift-evolution commentary on this proposal (which is<br>&gt;&gt;&gt;&gt; nearing the 100-message mark) will also be considered, of course!<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; - Doug<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Dec 16, 2015, at 10:55 AM, Douglas Gregor via swift-evolution &lt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; The review of “Require self for accessing instance members” begins now<br>&gt;&gt;&gt;&gt; and runs through Sunday, December 20th. The proposal is available here:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All<br>&gt;&gt;&gt;&gt; reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the<br>&gt;&gt;&gt;&gt; review manager.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; The goal of the review process is to improve the proposal under review<br>&gt;&gt;&gt;&gt; through constructive criticism and, eventually, determine the direction of<br>&gt;&gt;&gt;&gt; Swift. When writing your review, here are some questions you might want to<br>&gt;&gt;&gt;&gt; answer in your review:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; * What is your evaluation of the proposal?<br>&gt;&gt;&gt;&gt; * Is the problem being addressed significant enough to warrant a change<br>&gt;&gt;&gt;&gt; to Swift?<br>&gt;&gt;&gt;&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt;&gt; * If you have you used other languages or libraries with a similar<br>&gt;&gt;&gt;&gt; feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt;&gt; * How much effort did you put into your review? A glance, a quick<br>&gt;&gt;&gt;&gt; reading, or an in-depth study?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt;&gt; Doug Gregor<br>&gt;&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/3b4208de/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/27fb74253bf2cb9c8dcea56452f74006?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Honza Dvorsky</string> &lt;czechboy0 at gmail.com&gt;<p>December 16, 2015 at 11:00:00pm</p></header><div class="content"><p>Many people (myself included) already expressed their preference in the<br>discussion that happened before the review, where there were many more<br>yes&#39;s. So for the sake of objectivity, I think we should refrain from<br>counting the score half way through the discussion :)<br></p><p>We all care about the outcome, but it was mentioned upstream that all<br>feedback (including pre-review) is being taken into consideration, which I<br>believe is fair.<br>On Thu, Dec 17, 2015 at 12:22 AM Stephen Celis via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; * What is your evaluation of the proposal?<br>&gt;<br>&gt; A strong -1. I understand the argument but believe it&#39;s a matter of style<br>&gt; that should not be enforced by the compiler.<br>&gt;<br>&gt; * Is the problem being addressed significant enough to warrant a change to<br>&gt; Swift?<br>&gt;<br>&gt; No. The few times implicit self has caused me to lose a few minutes<br>&gt; troubleshooting would have been better addressed with improved diagnostics<br>&gt; and error messaging (these few times were a result of me trying to be too<br>&gt; clever). I agree with others that enforcing self is the job of a linter<br>&gt; and/or in-house style guide.<br>&gt;<br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>&gt; Overall no. I believe it reduces expressiveness (a major tenet according<br>&gt; to https://swift.org/about/#swiftorg-and-open-source) and adds noise.<br>&gt; While explicit self can add clarity at the point of use, I do not believe<br>&gt; it&#39;s worth the noise and enforcing in all cases.<br>&gt;<br>&gt; * If you have you used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;<br>&gt; I&#39;ve written Ruby and Python extensively and value Ruby&#39;s expressive<br>&gt; nature over Python&#39;s explicit proliferation of self.<br>&gt;<br>&gt; * How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt;<br>&gt; I read the entire thread and participated throughout.<br>&gt;<br>&gt; At the time review began, I counted 5 explicit yeas and 12 explicit nays<br>&gt; (as well as a few implicit nays).<br>&gt;<br>&gt; Stephen<br>&gt;<br>&gt; On Wed, Dec 16, 2015 at 5:54 PM, T.J. Usiyan via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; * What is your evaluation of the proposal?<br>&gt;&gt;     -1. I vote against this proposal. I believe that a linter and/or an<br>&gt;&gt; in house code guide is the best place to manage this.<br>&gt;&gt;<br>&gt;&gt; * Is the problem being addressed significant enough to warrant a change<br>&gt;&gt; to Swift?<br>&gt;&gt;     I think that it is a significant concern but, as I stated above, best<br>&gt;&gt; handled with tooling.<br>&gt;&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;     No. The current Swift behavior around this issue is clear and is<br>&gt;&gt; reasonable to many.<br>&gt;&gt; * How much effort did you put into your review? A glance, a quick<br>&gt;&gt; reading, or an in-depth study?<br>&gt;&gt;     I have followed the thread and have had this discussion many times.<br>&gt;&gt;<br>&gt;&gt; On Wed, Dec 16, 2015 at 5:47 PM, T.J. Usiyan &lt;griotspeak at gmail.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Creating that summary seems like it would be a large burden to place on<br>&gt;&gt;&gt; whoever manages the review. I don&#39;t think that that is worth the effort<br>&gt;&gt;&gt; when the responses *are* readily available.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Wed, Dec 16, 2015 at 3:09 PM, Nick Shelley via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; All of the prior swift-evolution commentary on this proposal (which is<br>&gt;&gt;&gt;&gt;&gt; nearing the 100-message mark) will also be considered, of course!<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; It is my opinion that the proposal should encapsulate as much of that<br>&gt;&gt;&gt;&gt; discussion as possible so every reviewer doesn&#39;t have to read every comment<br>&gt;&gt;&gt;&gt; in that thread. The current proposal is wildly one-sided and seems to only<br>&gt;&gt;&gt;&gt; reflect the opinion of its author and those who agree with the proposal. I<br>&gt;&gt;&gt;&gt; created a Pull Request (<br>&gt;&gt;&gt;&gt; https://github.com/apple/swift-evolution/pull/59, still not merged and<br>&gt;&gt;&gt;&gt; no comments as to why) to more fairly represent the single counter-argument<br>&gt;&gt;&gt;&gt; pointed out in the proposal, but others in the mailing list expressed<br>&gt;&gt;&gt;&gt; concern that none of the other downsides of the proposal are represented at<br>&gt;&gt;&gt;&gt; all.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Is my (and others&#39;) desire to have the proposal contain an accurate<br>&gt;&gt;&gt;&gt; representation of the main points of the community discussion off base? Is<br>&gt;&gt;&gt;&gt; the main purpose of the proposal to be a sales pitch for an idea, even if<br>&gt;&gt;&gt;&gt; it includes building up and tearing down straw-man versions of the<br>&gt;&gt;&gt;&gt; arguments brought forth by the opposition? I&#39;m asking with sincere<br>&gt;&gt;&gt;&gt; curiosity because I can&#39;t seem to find a good description of the purpose of<br>&gt;&gt;&gt;&gt; the proposal in my research of how the evolution process works.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Thanks in advance for clarifying these points for me.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Wed, Dec 16, 2015 at 11:58 AM, Douglas Gregor via swift-evolution &lt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; All of the prior swift-evolution commentary on this proposal (which is<br>&gt;&gt;&gt;&gt;&gt; nearing the 100-message mark) will also be considered, of course!<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; - Doug<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Dec 16, 2015, at 10:55 AM, Douglas Gregor via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; The review of “Require self for accessing instance members” begins now<br>&gt;&gt;&gt;&gt;&gt; and runs through Sunday, December 20th. The proposal is available here:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All<br>&gt;&gt;&gt;&gt;&gt; reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the<br>&gt;&gt;&gt;&gt;&gt; review manager.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; The goal of the review process is to improve the proposal under review<br>&gt;&gt;&gt;&gt;&gt; through constructive criticism and, eventually, determine the direction of<br>&gt;&gt;&gt;&gt;&gt; Swift. When writing your review, here are some questions you might want to<br>&gt;&gt;&gt;&gt;&gt; answer in your review:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; * What is your evaluation of the proposal?<br>&gt;&gt;&gt;&gt;&gt; * Is the problem being addressed significant enough to warrant a<br>&gt;&gt;&gt;&gt;&gt; change to Swift?<br>&gt;&gt;&gt;&gt;&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt;&gt;&gt; * If you have you used other languages or libraries with a similar<br>&gt;&gt;&gt;&gt;&gt; feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt;&gt;&gt; * How much effort did you put into your review? A glance, a quick<br>&gt;&gt;&gt;&gt;&gt; reading, or an in-depth study?<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt;&gt;&gt; Doug Gregor<br>&gt;&gt;&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/7285b38b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d68c97e8e2f1653b54c24493caf236ae?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Stephen Celis</string> &lt;stephen.celis at gmail.com&gt;<p>December 16, 2015 at 06:00:00pm</p></header><div class="content"><p>On Wed, Dec 16, 2015 at 6:34 PM, Honza Dvorsky &lt;czechboy0 at gmail.com&gt; wrote:<br></p><p>&gt; Many people (myself included) already expressed their preference in the<br>&gt; discussion that happened before the review, where there were many more<br>&gt; yes&#39;s. So for the sake of objectivity, I think we should refrain from<br>&gt; counting the score half way through the discussion :)<br>&gt;<br>&gt; We all care about the outcome, but it was mentioned upstream that all<br>&gt; feedback (including pre-review) is being taken into consideration, which I<br>&gt; believe is fair.<br></p><p><br>Apologies for any confusion. My count was of the upstream discussion, where<br>I found 5 explicit yeas and many more nays.<br></p><p>For reference, the upstream thread tally:<br></p><p>Yeas:<br>- Rob Napier<br>- David Hart<br>- Dennis Lysenko<br>- Dan Loewenherz<br>- Honza Dvorsky<br></p><p>Nays:<br>- Ilya Nikokoshev<br>- Mark Knaup<br>- Al Skipp<br>- Andrey Tarantsov<br>- Stephen Celis<br>- Erica Sadun<br>- Sune Foldager<br>- Paul Ossenbruggen<br>- Slava Pestov<br>- David Rodrigues<br>- Ilya Belenkiy<br>- Pierre Monod-boca<br></p><p>(Apologies for any autocorrect name butchering. I tried!)<br></p><p>There were more that were ambiguous, some seeming to favor implicit, others<br>seeming to prefer explicit but not as a requirement.<br></p><p>Stephen<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/bb83c00f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>December 16, 2015 at 09:00:00pm</p></header><div class="content"><p>You can add me to the nays.  I don’t have much to add that hasn’t already been stated.  <br></p><p>It’s possible I could be convinced of adding a pragma to help teams that want to adopt this style enforce it.  It isn’t possible to convince me that everyone should be required to adopt this style in all of their code.<br></p><p><br></p><p>&gt; On Dec 16, 2015, at 5:45 PM, Stephen Celis via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Wed, Dec 16, 2015 at 6:34 PM, Honza Dvorsky &lt;czechboy0 at gmail.com &lt;mailto:czechboy0 at gmail.com&gt;&gt; wrote:<br>&gt; Many people (myself included) already expressed their preference in the discussion that happened before the review, where there were many more yes&#39;s. So for the sake of objectivity, I think we should refrain from counting the score half way through the discussion :) <br>&gt; <br>&gt; We all care about the outcome, but it was mentioned upstream that all feedback (including pre-review) is being taken into consideration, which I believe is fair.<br>&gt; <br>&gt; Apologies for any confusion. My count was of the upstream discussion, where I found 5 explicit yeas and many more nays.<br>&gt; <br>&gt; For reference, the upstream thread tally:<br>&gt; <br>&gt; Yeas:<br>&gt; - Rob Napier<br>&gt; - David Hart<br>&gt; - Dennis Lysenko<br>&gt; - Dan Loewenherz<br>&gt; - Honza Dvorsky<br>&gt; <br>&gt; Nays:<br>&gt; - Ilya Nikokoshev<br>&gt; - Mark Knaup<br>&gt; - Al Skipp<br>&gt; - Andrey Tarantsov<br>&gt; - Stephen Celis<br>&gt; - Erica Sadun<br>&gt; - Sune Foldager<br>&gt; - Paul Ossenbruggen<br>&gt; - Slava Pestov<br>&gt; - David Rodrigues<br>&gt; - Ilya Belenkiy<br>&gt; - Pierre Monod-boca<br>&gt; <br>&gt; (Apologies for any autocorrect name butchering. I tried!)<br>&gt; <br>&gt; There were more that were ambiguous, some seeming to favor implicit, others seeming to prefer explicit but not as a requirement.<br>&gt; <br>&gt; Stephen<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/20fcaaf5/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d5ada5f318f38f99b9d0a5d88284743a?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Nick Shelley</string> &lt;nickmshelley at gmail.com&gt;<p>December 16, 2015 at 04:00:00pm</p></header><div class="content"><p>&gt;<br>&gt; Creating that summary seems like it would be a large burden to place on<br>&gt; whoever manages the review.<br></p><p><br>I imagine this would be done by the community through pull requests. If<br>someone doesn&#39;t feel like their point of view has been accurately<br>represented in the proposal, they should make a PR that changes that.<br></p><p>I don&#39;t think that that is worth the effort when the responses *are*<br>&gt; readily available.<br></p><p><br>Readily available and easily consumable are two very different things. I&#39;d<br>guess that everyone voting on this proposal read or at least skimmed the<br>proposal, but I doubt many of those who didn&#39;t follow the thread from the<br>beginning looked at much of the mailing list discussion. (That&#39;s based on<br>what I would do, so maybe it&#39;s not a fair assumption.)<br></p><p>On Wed, Dec 16, 2015 at 3:47 PM, T.J. Usiyan &lt;griotspeak at gmail.com&gt; wrote:<br></p><p>&gt; Creating that summary seems like it would be a large burden to place on<br>&gt; whoever manages the review. I don&#39;t think that that is worth the effort<br>&gt; when the responses *are* readily available.<br>&gt;<br>&gt; On Wed, Dec 16, 2015 at 3:09 PM, Nick Shelley via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; All of the prior swift-evolution commentary on this proposal (which is<br>&gt;&gt;&gt; nearing the 100-message mark) will also be considered, of course!<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; It is my opinion that the proposal should encapsulate as much of that<br>&gt;&gt; discussion as possible so every reviewer doesn&#39;t have to read every comment<br>&gt;&gt; in that thread. The current proposal is wildly one-sided and seems to only<br>&gt;&gt; reflect the opinion of its author and those who agree with the proposal. I<br>&gt;&gt; created a Pull Request (https://github.com/apple/swift-evolution/pull/59,<br>&gt;&gt; still not merged and no comments as to why) to more fairly represent the<br>&gt;&gt; single counter-argument pointed out in the proposal, but others in the<br>&gt;&gt; mailing list expressed concern that none of the other downsides of the<br>&gt;&gt; proposal are represented at all.<br>&gt;&gt;<br>&gt;&gt; Is my (and others&#39;) desire to have the proposal contain an accurate<br>&gt;&gt; representation of the main points of the community discussion off base? Is<br>&gt;&gt; the main purpose of the proposal to be a sales pitch for an idea, even if<br>&gt;&gt; it includes building up and tearing down straw-man versions of the<br>&gt;&gt; arguments brought forth by the opposition? I&#39;m asking with sincere<br>&gt;&gt; curiosity because I can&#39;t seem to find a good description of the purpose of<br>&gt;&gt; the proposal in my research of how the evolution process works.<br>&gt;&gt;<br>&gt;&gt; Thanks in advance for clarifying these points for me.<br>&gt;&gt;<br>&gt;&gt; On Wed, Dec 16, 2015 at 11:58 AM, Douglas Gregor via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; All of the prior swift-evolution commentary on this proposal (which is<br>&gt;&gt;&gt; nearing the 100-message mark) will also be considered, of course!<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; - Doug<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Dec 16, 2015, at 10:55 AM, Douglas Gregor via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The review of “Require self for accessing instance members” begins now<br>&gt;&gt;&gt; and runs through Sunday, December 20th. The proposal is available here:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All<br>&gt;&gt;&gt; reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the<br>&gt;&gt;&gt; review manager.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The goal of the review process is to improve the proposal under review<br>&gt;&gt;&gt; through constructive criticism and, eventually, determine the direction of<br>&gt;&gt;&gt; Swift. When writing your review, here are some questions you might want to<br>&gt;&gt;&gt; answer in your review:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; * What is your evaluation of the proposal?<br>&gt;&gt;&gt; * Is the problem being addressed significant enough to warrant a change<br>&gt;&gt;&gt; to Swift?<br>&gt;&gt;&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; * If you have you used other languages or libraries with a similar<br>&gt;&gt;&gt; feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt; * How much effort did you put into your review? A glance, a quick<br>&gt;&gt;&gt; reading, or an in-depth study?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt; Doug Gregor<br>&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/07f88282/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Reflecting updated feedback was Re: [Review] Require self for accessing instance members</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>December 16, 2015 at 04:00:00pm</p></header><div class="content"><p>Changing the topic hopefully to take some of the burden off Doug sorting through this thread. <br></p><p>My for-loop proposal was heavily commented upon but to a lesser degree than this one. If you recall, I ended up with a shadow update on gist to address major concerns: https://gist.github.com/erica/56d533b75d0a36e3908f &lt;https://gist.github.com/erica/56d533b75d0a36e3908f&gt;  I don&#39;t think that was an ideal solution but it certainly helped. Having been through this, I have some rather strong feelings about the proposal process and I&#39;ll try to condense them here as a starting point to discuss these things.<br></p><p>* I wish ideas could go through initial vetting before they appear as a formal on-list [Proposal].  <br></p><p>Ideally, it would be great to pitch the team with a [Pitch] and see if the pitch has a chance. The downside is that the Swift.team has enough on their plate to deal with. It may not be feasible to do this. That said, the sooner you can get a sense of the pitch&#39;s health the better:  Is the pitch not worth pursuing, better suited for bug report system, worth pursuing but not for 3.0, or worth pursuing?<br></p><p>* If your idea is not fully formed, it would be nice to just have a discussion about it and not call it a proposal.<br></p><p>An idea that starts out, say, as an enhancement for initialization may turn out to be better suited by Swift adopting language features from existing modern languages. A discussion without being tied to a specific proposal gives you the freedom to explore, find, and develop the idea before starting the costly process of proposing a formal language change. Consider [Request for Discussion].<br></p><p>* You may want to test the idea&#39;s temperature before starting the formal proposal process<br></p><p>As I learned, Survey Monkey is free and is a good way to quickly test the crowd.<br></p><p>* It helps to differentiate a preliminary &quot;proposal&quot;, like Matthew Johnson&#39;s original protocol naming one, from one that&#39;s ready to submit for potential review. It went through significant updates before being ready to submit as a pull request.<br></p><p>I don&#39;t know what you&#39;d call it, but maybe [Proposal Draft} would be a better subject for discussing and refining an idea.<br></p><p>* Once you&#39;re ready to propose, you&#39;ll probably want to incorporate the draft discussion. That discussion may not reflect the feelings of the entire mailing list, which is what happened with the `self` proposal. The entire list wasn&#39;t really invested until the actual review period opened.<br></p><p>Allowing the proposal author to update the proposal with *major* feedback and tweaks should be a part of the proposal process, and can be done via pull requests to the evolution repo. However, that requires Swift.team time and demands. You may just have to update on a gist to save them the extra work.<br></p><p>Also: It&#39;s unreasonable to expect updates on every complaint or support but if the proposal has already made it through a straw poll, and initial draft discussions, it&#39;s probably not going to have as much push back as this one did.<br></p><p>Okay, that&#39;s my suggested starting point. What do you think? <br></p><p>-- Erica<br></p><p><br>&gt; On Dec 16, 2015, at 4:15 PM, Nick Shelley via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Creating that summary seems like it would be a large burden to place on whoever manages the review.<br>&gt; <br>&gt; I imagine this would be done by the community through pull requests. If someone doesn&#39;t feel like their point of view has been accurately represented in the proposal, they should make a PR that changes that.<br>&gt; <br>&gt; I don&#39;t think that that is worth the effort when the responses *are* readily available.<br>&gt; <br>&gt; Readily available and easily consumable are two very different things. I&#39;d guess that everyone voting on this proposal read or at least skimmed the proposal, but I doubt many of those who didn&#39;t follow the thread from the beginning looked at much of the mailing list discussion. (That&#39;s based on what I would do, so maybe it&#39;s not a fair assumption.)<br>&gt; <br>&gt; On Wed, Dec 16, 2015 at 3:47 PM, T.J. Usiyan &lt;griotspeak at gmail.com &lt;mailto:griotspeak at gmail.com&gt;&gt; wrote:<br>&gt; Creating that summary seems like it would be a large burden to place on whoever manages the review. I don&#39;t think that that is worth the effort when the responses *are* readily available.<br>&gt; <br>&gt; On Wed, Dec 16, 2015 at 3:09 PM, Nick Shelley via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; All of the prior swift-evolution commentary on this proposal (which is nearing the 100-message mark) will also be considered, of course!<br>&gt; <br>&gt; It is my opinion that the proposal should encapsulate as much of that discussion as possible so every reviewer doesn&#39;t have to read every comment in that thread. The current proposal is wildly one-sided and seems to only reflect the opinion of its author and those who agree with the proposal. I created a Pull Request (https://github.com/apple/swift-evolution/pull/59 &lt;https://github.com/apple/swift-evolution/pull/59&gt;, still not merged and no comments as to why) to more fairly represent the single counter-argument pointed out in the proposal, but others in the mailing list expressed concern that none of the other downsides of the proposal are represented at all.<br>&gt; <br>&gt; Is my (and others&#39;) desire to have the proposal contain an accurate representation of the main points of the community discussion off base? Is the main purpose of the proposal to be a sales pitch for an idea, even if it includes building up and tearing down straw-man versions of the arguments brought forth by the opposition? I&#39;m asking with sincere curiosity because I can&#39;t seem to find a good description of the purpose of the proposal in my research of how the evolution process works.<br>&gt; <br>&gt; Thanks in advance for clarifying these points for me.<br>&gt; <br>&gt; On Wed, Dec 16, 2015 at 11:58 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; All of the prior swift-evolution commentary on this proposal (which is nearing the 100-message mark) will also be considered, of course!<br>&gt; <br>&gt; 	- Doug<br>&gt; <br>&gt;&gt; On Dec 16, 2015, at 10:55 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of “Require self for accessing instance members” begins now and runs through Sunday, December 20th. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md&gt;<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt; <br>&gt;&gt; 	Cheers,<br>&gt;&gt; 	Doug Gregor<br>&gt;&gt; 	Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/5ed85895/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Reflecting updated feedback was Re: [Review] Require self for accessing instance members</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>December 16, 2015 at 03:00:00pm</p></header><div class="content"><p>&gt; On Dec 16, 2015, at 3:41 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Changing the topic hopefully to take some of the burden off Doug sorting through this thread. <br>&gt; <br>&gt; My for-loop proposal was heavily commented upon but to a lesser degree than this one. If you recall, I ended up with a shadow update on gist to address major concerns: https://gist.github.com/erica/56d533b75d0a36e3908f &lt;https://gist.github.com/erica/56d533b75d0a36e3908f&gt;  I don&#39;t think that was an ideal solution but it certainly helped. Having been through this, I have some rather strong feelings about the proposal process and I&#39;ll try to condense them here as a starting point to discuss these things.<br>&gt; <br>&gt; * I wish ideas could go through initial vetting before they appear as a formal on-list [Proposal].  <br>&gt; <br>&gt; Ideally, it would be great to pitch the team with a [Pitch] and see if the pitch has a chance. The downside is that the Swift.team has enough on their plate to deal with. It may not be feasible to do this. That said, the sooner you can get a sense of the pitch&#39;s health the better:  Is the pitch not worth pursuing, better suited for bug report system, worth pursuing but not for 3.0, or worth pursuing?<br></p><p>I think this is a great idea.  The main challenge would be managing expectations w.r.t. the detail of feedback.  To truly take the burden off the core team, proposers would have to be willing to accept a simple multiple-choice answer with no additional detail, without feeling insulted.  I think if people knew there was a way to ask for more detailed discussion (as in your next bullet), this might be possible<br></p><p>&gt; * If your idea is not fully formed, it would be nice to just have a discussion about it and not call it a proposal.<br>&gt; <br>&gt; An idea that starts out, say, as an enhancement for initialization may turn out to be better suited by Swift adopting language features from existing modern languages. A discussion without being tied to a specific proposal gives you the freedom to explore, find, and develop the idea before starting the costly process of proposing a formal language change. Consider [Request for Discussion].<br></p><p>Yes, we definitely need some kind of RFC as part of the process/culture.<br></p><p>&gt; * You may want to test the idea&#39;s temperature before starting the formal proposal process<br>&gt; <br>&gt; As I learned, Survey Monkey is free and is a good way to quickly test the crowd.<br>&gt; <br>&gt; * It helps to differentiate a preliminary &quot;proposal&quot;, like Matthew Johnson&#39;s original protocol naming one, from one that&#39;s ready to submit for potential review. It went through significant updates before being ready to submit as a pull request.<br>&gt; <br>&gt; I don&#39;t know what you&#39;d call it, but maybe [Proposal Draft} would be a better subject for discussing and refining an idea.<br>&gt; <br>&gt; * Once you&#39;re ready to propose, you&#39;ll probably want to incorporate the draft discussion. That discussion may not reflect the feelings of the entire mailing list, which is what happened with the `self` proposal. The entire list wasn&#39;t really invested until the actual review period opened.<br>&gt; <br>&gt; Allowing the proposal author to update the proposal with *major* feedback and tweaks should be a part of the proposal process, and can be done via pull requests to the evolution repo. However, that requires Swift.team time and demands. You may just have to update on a gist to save them the extra work.<br>&gt; <br>&gt; Also: It&#39;s unreasonable to expect updates on every complaint or support but if the proposal has already made it through a straw poll, and initial draft discussions, it&#39;s probably not going to have as much push back as this one did.<br>&gt; <br>&gt; Okay, that&#39;s my suggested starting point. What do you think? <br>&gt; <br>&gt; -- Erica<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 16, 2015, at 4:15 PM, Nick Shelley via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Creating that summary seems like it would be a large burden to place on whoever manages the review.<br>&gt;&gt; <br>&gt;&gt; I imagine this would be done by the community through pull requests. If someone doesn&#39;t feel like their point of view has been accurately represented in the proposal, they should make a PR that changes that.<br>&gt;&gt; <br>&gt;&gt; I don&#39;t think that that is worth the effort when the responses *are* readily available.<br>&gt;&gt; <br>&gt;&gt; Readily available and easily consumable are two very different things. I&#39;d guess that everyone voting on this proposal read or at least skimmed the proposal, but I doubt many of those who didn&#39;t follow the thread from the beginning looked at much of the mailing list discussion. (That&#39;s based on what I would do, so maybe it&#39;s not a fair assumption.)<br>&gt;&gt; <br>&gt;&gt; On Wed, Dec 16, 2015 at 3:47 PM, T.J. Usiyan &lt;griotspeak at gmail.com &lt;mailto:griotspeak at gmail.com&gt;&gt; wrote:<br>&gt;&gt; Creating that summary seems like it would be a large burden to place on whoever manages the review. I don&#39;t think that that is worth the effort when the responses *are* readily available.<br>&gt;&gt; <br>&gt;&gt; On Wed, Dec 16, 2015 at 3:09 PM, Nick Shelley via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; All of the prior swift-evolution commentary on this proposal (which is nearing the 100-message mark) will also be considered, of course!<br>&gt;&gt; <br>&gt;&gt; It is my opinion that the proposal should encapsulate as much of that discussion as possible so every reviewer doesn&#39;t have to read every comment in that thread. The current proposal is wildly one-sided and seems to only reflect the opinion of its author and those who agree with the proposal. I created a Pull Request (https://github.com/apple/swift-evolution/pull/59 &lt;https://github.com/apple/swift-evolution/pull/59&gt;, still not merged and no comments as to why) to more fairly represent the single counter-argument pointed out in the proposal, but others in the mailing list expressed concern that none of the other downsides of the proposal are represented at all.<br>&gt;&gt; <br>&gt;&gt; Is my (and others&#39;) desire to have the proposal contain an accurate representation of the main points of the community discussion off base? Is the main purpose of the proposal to be a sales pitch for an idea, even if it includes building up and tearing down straw-man versions of the arguments brought forth by the opposition? I&#39;m asking with sincere curiosity because I can&#39;t seem to find a good description of the purpose of the proposal in my research of how the evolution process works.<br>&gt;&gt; <br>&gt;&gt; Thanks in advance for clarifying these points for me.<br>&gt;&gt; <br>&gt;&gt; On Wed, Dec 16, 2015 at 11:58 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; All of the prior swift-evolution commentary on this proposal (which is nearing the 100-message mark) will also be considered, of course!<br>&gt;&gt; <br>&gt;&gt; 	- Doug<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 16, 2015, at 10:55 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The review of “Require self for accessing instance members” begins now and runs through Sunday, December 20th. The proposal is available here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	Cheers,<br>&gt;&gt;&gt; 	Doug Gregor<br>&gt;&gt;&gt; 	Review Manager<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-Dave<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/c1315949/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Reflecting updated feedback was Re: [Review] Require self for accessing instance members</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>December 16, 2015 at 04:00:00pm</p></header><div class="content"><p>&gt; On Dec 16, 2015, at 4:51 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Dec 16, 2015, at 3:41 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Changing the topic hopefully to take some of the burden off Doug sorting through this thread. <br>&gt;&gt; <br>&gt;&gt; My for-loop proposal was heavily commented upon but to a lesser degree than this one. If you recall, I ended up with a shadow update on gist to address major concerns: https://gist.github.com/erica/56d533b75d0a36e3908f &lt;https://gist.github.com/erica/56d533b75d0a36e3908f&gt;  I don&#39;t think that was an ideal solution but it certainly helped. Having been through this, I have some rather strong feelings about the proposal process and I&#39;ll try to condense them here as a starting point to discuss these things.<br>&gt;&gt; <br>&gt;&gt; * I wish ideas could go through initial vetting before they appear as a formal on-list [Proposal].  <br>&gt;&gt; <br>&gt;&gt; Ideally, it would be great to pitch the team with a [Pitch] and see if the pitch has a chance. The downside is that the Swift.team has enough on their plate to deal with. It may not be feasible to do this. That said, the sooner you can get a sense of the pitch&#39;s health the better:  Is the pitch not worth pursuing, better suited for bug report system, worth pursuing but not for 3.0, or worth pursuing?<br>&gt; <br>&gt; I think this is a great idea.  The main challenge would be managing expectations w.r.t. the detail of feedback.  To truly take the burden off the core team, proposers would have to be willing to accept a simple multiple-choice answer with no additional detail, without feeling insulted.  I think if people knew there was a way to ask for more detailed discussion (as in your next bullet), this might be possible<br></p><p>[ ] Not worth pursuing<br>     [ ] Not technical feasible<br>     [ ] Not suited to Swift<br>     [ ] Needs a much more compelling pitch to be considered at this time<br>     [ ] Other (unspecified, sorry, but we are overwhelmed)<br>[ ] Submit to bugs.swift.org &lt;http://bugs.swift.org/&gt;<br>[ ] Consider for 4.0 or later<br>[ ] This sounds like it&#39;s worth developing further.<br></p><p>Better?<br></p><p>&gt; <br>&gt;&gt; * If your idea is not fully formed, it would be nice to just have a discussion about it and not call it a proposal.<br>&gt;&gt; <br>&gt;&gt; An idea that starts out, say, as an enhancement for initialization may turn out to be better suited by Swift adopting language features from existing modern languages. A discussion without being tied to a specific proposal gives you the freedom to explore, find, and develop the idea before starting the costly process of proposing a formal language change. Consider [Request for Discussion].<br>&gt; <br>&gt; Yes, we definitely need some kind of RFC as part of the process/culture.<br>&gt; <br>&gt;&gt; * You may want to test the idea&#39;s temperature before starting the formal proposal process<br>&gt;&gt; <br>&gt;&gt; As I learned, Survey Monkey is free and is a good way to quickly test the crowd.<br>&gt;&gt; <br>&gt;&gt; * It helps to differentiate a preliminary &quot;proposal&quot;, like Matthew Johnson&#39;s original protocol naming one, from one that&#39;s ready to submit for potential review. It went through significant updates before being ready to submit as a pull request.<br>&gt;&gt; <br>&gt;&gt; I don&#39;t know what you&#39;d call it, but maybe [Proposal Draft} would be a better subject for discussing and refining an idea.<br>&gt;&gt; <br>&gt;&gt; * Once you&#39;re ready to propose, you&#39;ll probably want to incorporate the draft discussion. That discussion may not reflect the feelings of the entire mailing list, which is what happened with the `self` proposal. The entire list wasn&#39;t really invested until the actual review period opened.<br>&gt;&gt; <br>&gt;&gt; Allowing the proposal author to update the proposal with *major* feedback and tweaks should be a part of the proposal process, and can be done via pull requests to the evolution repo. However, that requires Swift.team time and demands. You may just have to update on a gist to save them the extra work.<br>&gt;&gt; <br>&gt;&gt; Also: It&#39;s unreasonable to expect updates on every complaint or support but if the proposal has already made it through a straw poll, and initial draft discussions, it&#39;s probably not going to have as much push back as this one did.<br>&gt;&gt; <br>&gt;&gt; Okay, that&#39;s my suggested starting point. What do you think? <br>&gt;&gt; <br>&gt;&gt; -- Erica<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 16, 2015, at 4:15 PM, Nick Shelley via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Creating that summary seems like it would be a large burden to place on whoever manages the review.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I imagine this would be done by the community through pull requests. If someone doesn&#39;t feel like their point of view has been accurately represented in the proposal, they should make a PR that changes that.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t think that that is worth the effort when the responses *are* readily available.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Readily available and easily consumable are two very different things. I&#39;d guess that everyone voting on this proposal read or at least skimmed the proposal, but I doubt many of those who didn&#39;t follow the thread from the beginning looked at much of the mailing list discussion. (That&#39;s based on what I would do, so maybe it&#39;s not a fair assumption.)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Wed, Dec 16, 2015 at 3:47 PM, T.J. Usiyan &lt;griotspeak at gmail.com &lt;mailto:griotspeak at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; Creating that summary seems like it would be a large burden to place on whoever manages the review. I don&#39;t think that that is worth the effort when the responses *are* readily available.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Wed, Dec 16, 2015 at 3:09 PM, Nick Shelley via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; All of the prior swift-evolution commentary on this proposal (which is nearing the 100-message mark) will also be considered, of course!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It is my opinion that the proposal should encapsulate as much of that discussion as possible so every reviewer doesn&#39;t have to read every comment in that thread. The current proposal is wildly one-sided and seems to only reflect the opinion of its author and those who agree with the proposal. I created a Pull Request (https://github.com/apple/swift-evolution/pull/59 &lt;https://github.com/apple/swift-evolution/pull/59&gt;, still not merged and no comments as to why) to more fairly represent the single counter-argument pointed out in the proposal, but others in the mailing list expressed concern that none of the other downsides of the proposal are represented at all.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is my (and others&#39;) desire to have the proposal contain an accurate representation of the main points of the community discussion off base? Is the main purpose of the proposal to be a sales pitch for an idea, even if it includes building up and tearing down straw-man versions of the arguments brought forth by the opposition? I&#39;m asking with sincere curiosity because I can&#39;t seem to find a good description of the purpose of the proposal in my research of how the evolution process works.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks in advance for clarifying these points for me.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Wed, Dec 16, 2015 at 11:58 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; All of the prior swift-evolution commentary on this proposal (which is nearing the 100-message mark) will also be considered, of course!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	- Doug<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 16, 2015, at 10:55 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The review of “Require self for accessing instance members” begins now and runs through Sunday, December 20th. The proposal is available here:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt;&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	Cheers,<br>&gt;&gt;&gt;&gt; 	Doug Gregor<br>&gt;&gt;&gt;&gt; 	Review Manager<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; -Dave<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/5eb93238/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Reflecting updated feedback was Re: [Review] Require self for accessing instance members</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>December 16, 2015 at 09:00:00pm</p></header><div class="content"><p>I think it would be extremely helpful to have a gut check response like this from the core team early one.  That would help to focus our effort and discussion in directions that will have an impact.  <br></p><p>It might also help reduce volume on the list related to ideas that are unlikely to be accepted.<br></p><p><br></p><p>&gt; On Dec 16, 2015, at 5:58 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Dec 16, 2015, at 4:51 PM, Dave Abrahams &lt;dabrahams at apple.com &lt;mailto:dabrahams at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Dec 16, 2015, at 3:41 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Changing the topic hopefully to take some of the burden off Doug sorting through this thread. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; My for-loop proposal was heavily commented upon but to a lesser degree than this one. If you recall, I ended up with a shadow update on gist to address major concerns: https://gist.github.com/erica/56d533b75d0a36e3908f &lt;https://gist.github.com/erica/56d533b75d0a36e3908f&gt;  I don&#39;t think that was an ideal solution but it certainly helped. Having been through this, I have some rather strong feelings about the proposal process and I&#39;ll try to condense them here as a starting point to discuss these things.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * I wish ideas could go through initial vetting before they appear as a formal on-list [Proposal].  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Ideally, it would be great to pitch the team with a [Pitch] and see if the pitch has a chance. The downside is that the Swift.team has enough on their plate to deal with. It may not be feasible to do this. That said, the sooner you can get a sense of the pitch&#39;s health the better:  Is the pitch not worth pursuing, better suited for bug report system, worth pursuing but not for 3.0, or worth pursuing?<br>&gt;&gt; <br>&gt;&gt; I think this is a great idea.  The main challenge would be managing expectations w.r.t. the detail of feedback.  To truly take the burden off the core team, proposers would have to be willing to accept a simple multiple-choice answer with no additional detail, without feeling insulted.  I think if people knew there was a way to ask for more detailed discussion (as in your next bullet), this might be possible<br>&gt; <br>&gt; [ ] Not worth pursuing<br>&gt;      [ ] Not technical feasible<br>&gt;      [ ] Not suited to Swift<br>&gt;      [ ] Needs a much more compelling pitch to be considered at this time<br>&gt;      [ ] Other (unspecified, sorry, but we are overwhelmed)<br>&gt; [ ] Submit to bugs.swift.org &lt;http://bugs.swift.org/&gt;<br>&gt; [ ] Consider for 4.0 or later<br>&gt; [ ] This sounds like it&#39;s worth developing further.<br>&gt; <br>&gt; Better?<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; * If your idea is not fully formed, it would be nice to just have a discussion about it and not call it a proposal.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; An idea that starts out, say, as an enhancement for initialization may turn out to be better suited by Swift adopting language features from existing modern languages. A discussion without being tied to a specific proposal gives you the freedom to explore, find, and develop the idea before starting the costly process of proposing a formal language change. Consider [Request for Discussion].<br>&gt;&gt; <br>&gt;&gt; Yes, we definitely need some kind of RFC as part of the process/culture.<br>&gt;&gt; <br>&gt;&gt;&gt; * You may want to test the idea&#39;s temperature before starting the formal proposal process<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As I learned, Survey Monkey is free and is a good way to quickly test the crowd.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * It helps to differentiate a preliminary &quot;proposal&quot;, like Matthew Johnson&#39;s original protocol naming one, from one that&#39;s ready to submit for potential review. It went through significant updates before being ready to submit as a pull request.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t know what you&#39;d call it, but maybe [Proposal Draft} would be a better subject for discussing and refining an idea.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * Once you&#39;re ready to propose, you&#39;ll probably want to incorporate the draft discussion. That discussion may not reflect the feelings of the entire mailing list, which is what happened with the `self` proposal. The entire list wasn&#39;t really invested until the actual review period opened.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Allowing the proposal author to update the proposal with *major* feedback and tweaks should be a part of the proposal process, and can be done via pull requests to the evolution repo. However, that requires Swift.team time and demands. You may just have to update on a gist to save them the extra work.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Also: It&#39;s unreasonable to expect updates on every complaint or support but if the proposal has already made it through a straw poll, and initial draft discussions, it&#39;s probably not going to have as much push back as this one did.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Okay, that&#39;s my suggested starting point. What do you think? <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- Erica<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 16, 2015, at 4:15 PM, Nick Shelley via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Creating that summary seems like it would be a large burden to place on whoever manages the review.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I imagine this would be done by the community through pull requests. If someone doesn&#39;t feel like their point of view has been accurately represented in the proposal, they should make a PR that changes that.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I don&#39;t think that that is worth the effort when the responses *are* readily available.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Readily available and easily consumable are two very different things. I&#39;d guess that everyone voting on this proposal read or at least skimmed the proposal, but I doubt many of those who didn&#39;t follow the thread from the beginning looked at much of the mailing list discussion. (That&#39;s based on what I would do, so maybe it&#39;s not a fair assumption.)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Wed, Dec 16, 2015 at 3:47 PM, T.J. Usiyan &lt;griotspeak at gmail.com &lt;mailto:griotspeak at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; Creating that summary seems like it would be a large burden to place on whoever manages the review. I don&#39;t think that that is worth the effort when the responses *are* readily available.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Wed, Dec 16, 2015 at 3:09 PM, Nick Shelley via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; All of the prior swift-evolution commentary on this proposal (which is nearing the 100-message mark) will also be considered, of course!<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It is my opinion that the proposal should encapsulate as much of that discussion as possible so every reviewer doesn&#39;t have to read every comment in that thread. The current proposal is wildly one-sided and seems to only reflect the opinion of its author and those who agree with the proposal. I created a Pull Request (https://github.com/apple/swift-evolution/pull/59 &lt;https://github.com/apple/swift-evolution/pull/59&gt;, still not merged and no comments as to why) to more fairly represent the single counter-argument pointed out in the proposal, but others in the mailing list expressed concern that none of the other downsides of the proposal are represented at all.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Is my (and others&#39;) desire to have the proposal contain an accurate representation of the main points of the community discussion off base? Is the main purpose of the proposal to be a sales pitch for an idea, even if it includes building up and tearing down straw-man versions of the arguments brought forth by the opposition? I&#39;m asking with sincere curiosity because I can&#39;t seem to find a good description of the purpose of the proposal in my research of how the evolution process works.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks in advance for clarifying these points for me.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Wed, Dec 16, 2015 at 11:58 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; All of the prior swift-evolution commentary on this proposal (which is nearing the 100-message mark) will also be considered, of course!<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	- Doug<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 16, 2015, at 10:55 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The review of “Require self for accessing instance members” begins now and runs through Sunday, December 20th. The proposal is available here:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt;&gt;&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt;&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt;&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt;&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	Cheers,<br>&gt;&gt;&gt;&gt;&gt; 	Doug Gregor<br>&gt;&gt;&gt;&gt;&gt; 	Review Manager<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; -Dave<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/7304f766/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d68c97e8e2f1653b54c24493caf236ae?s=50"></div><header><strong>Reflecting updated feedback was Re: [Review] Require self for accessing instance members</strong> from <string>Stephen Celis</string> &lt;stephen.celis at gmail.com&gt;<p>December 17, 2015 at 12:00:00am</p></header><div class="content"><p>&gt; On Dec 16, 2015, at 10:25 PM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I think it would be extremely helpful to have a gut check response like this from the core team early one.  That would help to focus our effort and discussion in directions that will have an impact.  <br>&gt; <br>&gt; It might also help reduce volume on the list related to ideas that are unlikely to be accepted.<br></p><p>I very much agree with Erica and Matthew. A little extra moderation would go a long way.<br></p><p>Stephen<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>Reflecting updated feedback was Re: [Review] Require self for accessing instance members</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>December 17, 2015 at 05:00:00pm</p></header><div class="content"><p>Hi Erica,<br></p><p>Thank you! Some comments below...<br></p><p>&gt; On Dec 16, 2015, at 3:41 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Changing the topic hopefully to take some of the burden off Doug sorting through this thread. <br>&gt; <br>&gt; My for-loop proposal was heavily commented upon but to a lesser degree than this one. If you recall, I ended up with a shadow update on gist to address major concerns: https://gist.github.com/erica/56d533b75d0a36e3908f &lt;https://gist.github.com/erica/56d533b75d0a36e3908f&gt;  I don&#39;t think that was an ideal solution but it certainly helped. Having been through this, I have some rather strong feelings about the proposal process and I&#39;ll try to condense them here as a starting point to discuss these things.<br>&gt; <br>&gt; * I wish ideas could go through initial vetting before they appear as a formal on-list [Proposal].  <br>&gt; <br>&gt; Ideally, it would be great to pitch the team with a [Pitch] and see if the pitch has a chance. The downside is that the Swift.team has enough on their plate to deal with. It may not be feasible to do this. That said, the sooner you can get a sense of the pitch&#39;s health the better:  Is the pitch not worth pursuing, better suited for bug report system, worth pursuing but not for 3.0, or worth pursuing?<br></p><p>Pushing things into bug-fixes is the easy one of these, since that skips a more heavy-weight process for a lighter one.<br></p><p>The thing I like about your “[Pitch]” idea is that it indicates a willingness to hear “not worth pursuing”, which is generally a tricky social problem: it is very hard to convince someone that their idea is “not worth pursuing” (even “not now” can be difficult), and the core team absolutely do not want to come across as dismissive. That’s especially true because there are a ton of ideas that we *like*, but the need to focus on Swift 3 prevents us from engaging on them.<br></p><p>&gt; * If your idea is not fully formed, it would be nice to just have a discussion about it and not call it a proposal.<br>&gt; <br>&gt; An idea that starts out, say, as an enhancement for initialization may turn out to be better suited by Swift adopting language features from existing modern languages. A discussion without being tied to a specific proposal gives you the freedom to explore, find, and develop the idea before starting the costly process of proposing a formal language change. Consider [Request for Discussion].<br></p><p>&gt; * It helps to differentiate a preliminary &quot;proposal&quot;, like Matthew Johnson&#39;s original protocol naming one, from one that&#39;s ready to submit for potential review. It went through significant updates before being ready to submit as a pull request.<br>&gt; <br>&gt; I don&#39;t know what you&#39;d call it, but maybe [Proposal Draft} would be a better subject for discussing and refining an idea.<br></p><p>There’s a general theme here of being more clear about where a proposal is in the process. Right now, we have “pre-review” and “review”, but you’re looking for something to distinguish the “pre-review” state further: an initial, more free-form “ideas” state which is more about solving a specific problem, then a later “proposal draft” state that means we’re getting closer to the “review” state.<br></p><p>The benefit of having more states is that it makes it easier for people to jump into the process at the point where they get interested: one might not have time to consider all of the “ideas”, but would want to weigh in on proposals once they hit the “proposal draft” state and things are getter more specific and more serious. Indeed, this is the reason why we have the swift-evolution-announce list for reviews, so that more casual observers can see what’s made it to the last part of the process at which point it’s time to either weigh in or accept whatever happens.<br></p><p>The downside of having more states is that it’s more complicated for proposers.. start with [Idea], then go to [Proposal Draft], then create a pull request, then [Review]. That’s not necessarily a huge problem: it takes real work to produce a proposal that will go through the whole process already<br></p><p>&gt; <br>&gt; * You may want to test the idea&#39;s temperature before starting the formal proposal process<br>&gt; <br>&gt; As I learned, Survey Monkey is free and is a good way to quickly test the crowd.<br>&gt; <br></p><p>I’m mixed on this. It’s so very easy to “+1” a partially-formed idea and then, when confronted with specific details and trade-offs, change one’s mind. I guess that’s fine if you’re going into the survey knowing that you’re getting very imperfect data, and that the “yes”’s that come in are fairly weak and entirely nonbinding.<br></p><p><br>[Note: I pulled the following sentence out of it’s original context, because it’s a separate thing I want to comment on…]<br></p><p>&gt; The entire list wasn&#39;t really invested until the actual review period opened.<br></p><p>That’s actually an intentional part of the process. Some (many!) people won’t want to get involved until that [Review] e-mail comes through, because they don’t have the time to follow everything that’s going on, yet they care about Swift’s evolution. That’s a good thing in general, but it does mean that feedback comes late. Adding [Proposal Draft], as you suggest above, give another stage at which more people can jump in because the proposal has reached some intermediate point in its seriousness, so more feedback comes earlier. The benefit here is perhaps that the inputs to the actual [Review] process are more likely to end up being accepted, because more people paid attention earlier.<br></p><p><br>&gt; * Once you&#39;re ready to propose, you&#39;ll probably want to incorporate the draft discussion. That discussion may not reflect the feelings of the entire mailing list, which is what happened with the `self` proposal.<br></p><p>&gt; <br>&gt; Allowing the proposal author to update the proposal with *major* feedback and tweaks should be a part of the proposal process, and can be done via pull requests to the evolution repo. However, that requires Swift.team time and demands. You may just have to update on a gist to save them the extra work.<br>&gt; <br>&gt; Also: It&#39;s unreasonable to expect updates on every complaint or support but if the proposal has already made it through a straw poll, and initial draft discussions, it&#39;s probably not going to have as much push back as this one did.<br></p><p>It’s human nature to want to present one’s proposal in the best light, so any attempt to incorporate the draft discussion will inevitably have some bias, and that’s okay. That said, listing counter-arguments along with responses to those counter-arguments in the proposal generally makes a proposal stronger, so it’s in the proposer’s best interest to do that.<br></p><p>	- Doug<br></p><p>&gt; <br>&gt; -- Erica<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 16, 2015, at 4:15 PM, Nick Shelley via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Creating that summary seems like it would be a large burden to place on whoever manages the review.<br>&gt;&gt; <br>&gt;&gt; I imagine this would be done by the community through pull requests. If someone doesn&#39;t feel like their point of view has been accurately represented in the proposal, they should make a PR that changes that.<br>&gt;&gt; <br>&gt;&gt; I don&#39;t think that that is worth the effort when the responses *are* readily available.<br>&gt;&gt; <br>&gt;&gt; Readily available and easily consumable are two very different things. I&#39;d guess that everyone voting on this proposal read or at least skimmed the proposal, but I doubt many of those who didn&#39;t follow the thread from the beginning looked at much of the mailing list discussion. (That&#39;s based on what I would do, so maybe it&#39;s not a fair assumption.)<br>&gt;&gt; <br>&gt;&gt; On Wed, Dec 16, 2015 at 3:47 PM, T.J. Usiyan &lt;griotspeak at gmail.com &lt;mailto:griotspeak at gmail.com&gt;&gt; wrote:<br>&gt;&gt; Creating that summary seems like it would be a large burden to place on whoever manages the review. I don&#39;t think that that is worth the effort when the responses *are* readily available.<br>&gt;&gt; <br>&gt;&gt; On Wed, Dec 16, 2015 at 3:09 PM, Nick Shelley via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; All of the prior swift-evolution commentary on this proposal (which is nearing the 100-message mark) will also be considered, of course!<br>&gt;&gt; <br>&gt;&gt; It is my opinion that the proposal should encapsulate as much of that discussion as possible so every reviewer doesn&#39;t have to read every comment in that thread. The current proposal is wildly one-sided and seems to only reflect the opinion of its author and those who agree with the proposal. I created a Pull Request (https://github.com/apple/swift-evolution/pull/59 &lt;https://github.com/apple/swift-evolution/pull/59&gt;, still not merged and no comments as to why) to more fairly represent the single counter-argument pointed out in the proposal, but others in the mailing list expressed concern that none of the other downsides of the proposal are represented at all.<br>&gt;&gt; <br>&gt;&gt; Is my (and others&#39;) desire to have the proposal contain an accurate representation of the main points of the community discussion off base? Is the main purpose of the proposal to be a sales pitch for an idea, even if it includes building up and tearing down straw-man versions of the arguments brought forth by the opposition? I&#39;m asking with sincere curiosity because I can&#39;t seem to find a good description of the purpose of the proposal in my research of how the evolution process works.<br>&gt;&gt; <br>&gt;&gt; Thanks in advance for clarifying these points for me.<br>&gt;&gt; <br>&gt;&gt; On Wed, Dec 16, 2015 at 11:58 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; All of the prior swift-evolution commentary on this proposal (which is nearing the 100-message mark) will also be considered, of course!<br>&gt;&gt; <br>&gt;&gt; 	- Doug<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 16, 2015, at 10:55 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The review of “Require self for accessing instance members” begins now and runs through Sunday, December 20th. The proposal is available here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	Cheers,<br>&gt;&gt;&gt; 	Doug Gregor<br>&gt;&gt;&gt; 	Review Manager<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151217/6779e44f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Reflecting updated feedback was Re: [Review] Require self for accessing instance members</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>December 17, 2015 at 07:00:00pm</p></header><div class="content"><p>Doug said stuff, I said stuff, and I stupidly cut off all context. I&#39;ll let you figure out who said what:<br></p><p>&gt;&gt; * I wish ideas could go through initial vetting before they appear as a formal on-list [Proposal].  <br>&gt;&gt; <br>&gt;&gt; Ideally, it would be great to pitch the team with a [Pitch] and see if the pitch has a chance. The downside is that the Swift.team has enough on their plate to deal with. It may not be feasible to do this. That said, the sooner you can get a sense of the pitch&#39;s health the better:  Is the pitch not worth pursuing, better suited for bug report system, worth pursuing but not for 3.0, or worth pursuing?<br>&gt; <br>&gt; Pushing things into bug-fixes is the easy one of these, since that skips a more heavy-weight process for a lighter one.<br>&gt; <br>&gt; The thing I like about your “[Pitch]” idea is that it indicates a willingness to hear “not worth pursuing”, which is generally a tricky social problem: it is very hard to convince someone that their idea is “not worth pursuing” (even “not now” can be difficult), and the core team absolutely do not want to come across as dismissive. That’s especially true because there are a ton of ideas that we *like*, but the need to focus on Swift 3 prevents us from engaging on them.<br></p><p>I&#39;m basically going for an &quot;I have an idea, does it have legs&quot; sanity check here because what&#39;s the point of clogging the list and people&#39;s time for something that really has no chance of ever coming to fruition. As I mentioned in a separate reply, &quot;no&quot; can mean &quot;not technically feasible&quot;, &quot;not within the right language scope&quot;, &quot;not compelling enough a pitch&quot;, and &quot;other reason that we&#39;re honestly not going to get into because we&#39;re not going to fight with you on this and we have to have some leadership here.&quot;<br></p><p>I admit there are really good badly phrased ideas, but isn&#39;t it a part of life that to make something happen you have to be able to express it and think about it? Forcing an elevator pitch as a first step would cut down on a lot of fluff and nothing I&#39;ve said prevents an [RFC] from happening before a [Pitch].<br></p><p>&gt;&gt; I don&#39;t know what you&#39;d call it, but maybe [Proposal Draft} would be a better subject for discussing and refining an idea.<br>&gt; <br>&gt; There’s a general theme here of being more clear about where a proposal is in the process. Right now, we have “pre-review” and “review”, but you’re looking for something to distinguish the “pre-review” state further: an initial, more free-form “ideas” state which is more about solving a specific problem, then a later “proposal draft” state that means we’re getting closer to the “review” state.<br></p><p>I don&#39;t think it even has to be formal. I just don&#39;t want it to be this: http://imgur.com/azaPOPu<br></p><p>&gt; The benefit of having more states is that it makes it easier for people to jump into the process at the point where they get interested: one might not have time to consider all of the “ideas”, but would want to weigh in on proposals once they hit the “proposal draft” state and things are getter more specific and more serious. Indeed, this is the reason why we have the swift-evolution-announce list for reviews, so that more casual observers can see what’s made it to the last part of the process at which point it’s time to either weigh in or accept whatever happens.<br></p><p>Having a vocabulary, even an informal one, helps differentiate how &quot;real&quot; a subject is: I&#39;m kicking around an idea, I&#39;m trying to formalize this idea, Is this idea worth pursuing, I have formalized this idea and need a final sanity check before starting the real proposal process, etc.<br></p><p>Right now there&#39;s so much stuff in my mailbox it&#39;s hard to find the wheat among the chaff. (Although I have a few biased algorithms I&#39;m starting to follow.)<br></p><p>&gt;&gt; <br>&gt;&gt; * You may want to test the idea&#39;s temperature before starting the formal proposal process<br>&gt;&gt; <br>&gt;&gt; As I learned, Survey Monkey is free and is a good way to quickly test the crowd.<br>&gt;&gt; <br>&gt; <br>&gt; I’m mixed on this. It’s so very easy to “+1” a partially-formed idea and then, when confronted with specific details and trade-offs, change one’s mind. I guess that’s fine if you’re going into the survey knowing that you’re getting very imperfect data, and that the “yes”’s that come in are fairly weak and entirely nonbinding.<br></p><p>I think if the &quot;require self&quot; had been put to a survey, it would have gone down in flames without taking up so much list time. I get how passionately people who love the idea feel it will enhance safety, etc. But I suspect it would have given a pretty strong, pretty quick dousing. (I could be completely wrong however about the current vote tallies, and if so, please adjust my opinion accordingly.)<br></p><p>-- Erica<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151217/dca83411/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>December 16, 2015 at 01:00:00pm</p></header><div class="content"><p>I vote against this proposal. <br></p><p>I believe instance-member access outside of closures is better addressed with in-house standards rather than language-mandated supervision. Swift&#39;s clarity and readability are its strengths and this proposal works against those design goals. I endorse using self when it makes sense to do so but I don’t like the idea of a heavy-handed universal language-mandate. If effort equates to &quot;venting loudly and often about the inadvisable nature of this proposal&quot;, I have put significant effort into reviewing this proposal.<br></p><p>I hold my vote to be `self`-evident that not all language enhancements are created equal, and that we are endowed by our compiler with certain unalienable rights, that among these are simplicity, elegance, and the pursuit of our own coding standards.<br></p><p>-- Erica<br></p><p>&gt; On Dec 16, 2015, at 11:55 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of “Require self for accessing instance members” begins now and runs through Sunday, December 20th. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md&gt;<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; <br>&gt; 	Cheers,<br>&gt; 	Doug Gregor<br>&gt; 	Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/794c26e1/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d5ada5f318f38f99b9d0a5d88284743a?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Nick Shelley</string> &lt;nickmshelley at gmail.com&gt;<p>December 16, 2015 at 01:00:00pm</p></header><div class="content"><p>-1 from me.<br></p><p>My experience with Objective-C taught me that I&#39;m bad at thinking about<br>retain cycles every time I write code in a block or closure. Only requiring<br>self in closures in Swift has been a great way for me to avoid the bugs<br>caused by introducing retain cycles when self is captured in closures. This<br>proposal takes that extra needed reminder away from me, which will result<br>in more bugs (as my experience with Objective-C requiring self everywhere<br>has shown).<br></p><p>On Wed, Dec 16, 2015 at 11:55 AM, Douglas Gregor via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of “Require self for accessing instance members” begins now and<br>&gt; runs through Sunday, December 20th. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt; * What is your evaluation of the proposal?<br>&gt; * Is the problem being addressed significant enough to warrant a change<br>&gt; to Swift?<br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt; * If you have you used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt; * How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Cheers,<br>&gt; Doug Gregor<br>&gt; Review Manager<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/46303488/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/33536e304f2318595dbd6104fdb0bd4a?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Alejandro Martinez</string> &lt;alexito4 at gmail.com&gt;<p>December 16, 2015 at 08:00:00pm</p></header><div class="content"><p>I&#39;ve been following the thread for some days and being the community quite separated in this makes it a hard decision. <br></p><p>Honestly I&#39;ve been using self. in my Swift code most of the time, for me it makes things more explicit and removes any confusion that can happen. That said, I say &quot;most of the time&quot; because is really true that it feels nicer to not include it. <br></p><p>I would like to point out that being explicit is not necessary a bad thing, as Swift already force us to being explicit in some ways (optionals, throws, etc) as the proposal says, but specially that, IMHO, we should not decide if things that affect directly the code that we write and, specially, read should be omitted because another tool makes it obvious. In other words, that an IDE colorizes the text is not enough to discard it. We read a lot of code from the internet, specially PR, and we can not rely on having always an IDE to make things explicit.<br></p><p>That said, seeing that the community is so separated in this and that the language doesn&#39;t enforce it already (which looks like the core team didn&#39;t think that it that important for being part of the core language) I would say that having this enforced by a linter or a compiler warning (that can be disabled) may be enough. <br></p><p>Sorry for not having a stronger opinion, but I wanted to add my opinion to the review ;)<br></p><p>PS: I agree that maybe the proposals should contain more of the opinions in the mailing list, at least in cases like this that have been so many mails and not everyone can keep up with it. Cheers.<br></p><p><br>&gt; El 16 dic 2015, a las 18:55, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; escribió:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of “Require self for accessing instance members” begins now and runs through Sunday, December 20th. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md&gt;<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; <br>&gt; 	Cheers,<br>&gt; 	Doug Gregor<br>&gt; 	Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/9953d265/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e7e554db1f80d7d6041d92edd5145698?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Hooman Mehr</string> &lt;hooman at mac.com&gt;<p>December 16, 2015 at 12:00:00pm</p></header><div class="content"><p>&gt; On Dec 16, 2015, at 10:55 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>-1<br></p><p>Not much to add to the discussion.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>No. Although a suppressible/enforceable warning might be beneficial.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>I don’t think so. It enforces a lot of visual clutter everywhere to provide some benefit for people with certain coding/naming habits.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>A quick reading.<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/ac769a77/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>December 16, 2015 at 12:00:00pm</p></header><div class="content"><p>I agree with Nick that we should clarify the purpose of the proposals: to<br>convince the community that the idea is worth formally reviewing (hence,<br>the sales pitch), or to provide an overview of the idea and of the<br>community&#39;s preliminary reaction to it on the lists (more impartial).<br></p><p>In terms of actual review: I am against the proposal.<br></p><p>The primary contention seems to be safety versus programmer convenience.<br></p><p>In terms of programmer convenience, having pervasive self for instance<br>member access adds visual noise that makes reading code more tedious. To<br>me, Swift code within a method is easier to visually parse than equivalent<br>Objective-C code because I&#39;m not constantly being distracted by &quot;self.&quot;.<br></p><p>In terms of safety: to me, non-mandatory &#39;self&#39; is about as dangerous as<br>the more general variable shadowing/name masking which you can do elsewhere<br>in the language. Programmer experience is anecdotal and of limited utility;<br>that being said the stated issue has not been a problem for me, or for any<br>of the Swift developers that I&#39;ve worked with.<br></p><p>In the context of mandatory/optional &quot;self.&quot;, the possibility of shadowing<br>exists between instance members and local variables/parameters. Best<br>practice is to keep methods short enough to be intelligible as a whole,<br>with complex sub-tasks delegated to other methods. In this situation it<br>should be trivial to tell if a particular name refers to an instance member<br>or a local variable/parameter.<br></p><p>In terms of alternatives, this is something that an opt-in warning or a<br>linter should be able to handle, for those disinclined to allow use of<br>implicit self within their own codebases.<br></p><p>In terms of language philosophy, Swift is clearly not a &quot;safety at any<br>costs&quot; language. (If it were, the language would look very different: array<br>subscripts returning optionals, prohibition of shadowing altogether, etc.)<br>Instead, Swift aims to balance safety with other factors, such as<br>performance, accessibility to programmers coming from C-style languages,<br>programmer ergonomics, etc (as seen by the pitch on the Swift web site and<br>previous posts from the developer team). In that light, it only makes sense<br>to degrade programmer ergonomics/code readability if the resultant increase<br>in safety (or some other dimension) is worth it. I don&#39;t think it is.<br></p><p>Best,<br>Austin<br></p><p><br>On Wed, Dec 16, 2015 at 12:49 PM, Hooman Mehr via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On Dec 16, 2015, at 10:55 AM, Douglas Gregor via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; * What is your evaluation of the proposal?<br>&gt;<br>&gt;<br>&gt; -1<br>&gt;<br>&gt; Not much to add to the discussion.<br>&gt;<br>&gt; * Is the problem being addressed significant enough to warrant a change<br>&gt; to Swift?<br>&gt;<br>&gt;<br>&gt; No. Although a suppressible/enforceable warning might be beneficial.<br>&gt;<br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>&gt;<br>&gt; I don’t think so. It enforces a lot of visual clutter *everywhere* to<br>&gt; provide some benefit for people with certain coding/naming habits.<br>&gt;<br>&gt; * How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt;<br>&gt;<br>&gt; A quick reading.<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/468e8034/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ecdb231117dda838340bfcbb8873d28e?s=50"></div><header><strong>[swift-evolution-announce] [Review] Require self for accessing instance members</strong> from <string>Paul Cantrell</string> &lt;cantrell at pobox.com&gt;<p>December 16, 2015 at 03:00:00pm</p></header><div class="content"><p>Please forgive the length of the treatise that follows. It touches on some strong feelings I have about code as information design.<br></p><p><br>┝━━━ What is your evaluation of the proposal? ━━━━┥<br></p><p>I strongly oppose this proposal.<br></p><p>Despite the author’s claims, it reduces the signal/noise ratio of code, and thus has a negative impact on readability which outweighs its marginal safety benefit.<br></p><p>Developer opinion is strong, but strongly divided. Can one answer work for everyone? Consider: Teams who like this proposal have easy recourse if it is rejected: they can enable a build-time lint checker which will makes look and feel almost exactly like a language feature. However, teams who prefer implicit self have no recourse if this proposal is accepted.<br></p><p>This is, and should remain, a matter of style and taste left to individual teams.<br></p><p><br>┝━━━ Does this proposal fit well with the feel and direction of Swift? ━━━━┥<br></p><p>No, despite the proposal’s arguments to the contrary.<br></p><p>• This proposal confuses verbosity with clarity.<br></p><p>In its support, the proposal quotes Swift API guidelines that talk about clarity at point of use taking precedence over brevity. Note, however, that those guidelines do not speak against brevity either; they merely call out obsessive code golf as a fool’s errand.<br></p><p>Clarity comes neither from brevity nor from verbosity, but from mindfulness about which information to express. Both excessive conciseness and excessive repetition injure clarity.<br></p><p>In several places, these very same Swift guidelines that warn against brevity for its own sake also identify brevity as a way of achieving clarity. For example, in the “Omit Needless Words” section, they state, “More words may be needed to clarify intent or disambiguate meaning, but those that are redundant with information the reader already possesses should be omitted.”<br></p><p>That section proceeds to recommend that this is bad:<br></p><p>    allViews.removeElement(cancelButton)<br></p><p>… and this is clearer:<br></p><p>    allViews.remove(cancelButton)<br></p><p>…because the cancelButton argument already is of type Element.<br></p><p>Take note! The guidelines consider information redundant, and thus inadvisable, merely because it is already present in inferred information that may not have ever been stated explicitly near the call site. A “self.” that adds no further information certainly runs afoul of this principle.<br></p><p>This brings us to the core of my rejection:<br></p><p>	Anything that is widely repeated becomes invisible.<br></p><p>This truth shoots an arrow through the heart of the preposterous argument that “explicit &gt; implicit, always.” Imagine how ridiculous our code would look if we truly took this to heart! Instead of “let x = 1 + 1”, we&#39;d have “allocate(constant, stack_allocated, unsynchronized, 32 bits) → name(“x”, locally_scoped); x ← integer_addition(1, 1, min: -2^31, max:2^31-1, overflow: exception)” … or wait, no, even that leaves things such as the meaning of “integer” implicit. Explicit always better? Really? Shouldn’t we then have to state the Peano Axioms every time we use an integer? Even LLVM IR leaves some things unstated.<br></p><p>Language design is all about what we choose to make implicit. Explicitness has no inherent virtue, and does not by itself justify this proposal. Explicitness is useful only when it is not redundant. Mandating “self.” creates redundancy. Leaving it to programmer discretion allows clarity in all cases — both when clarity is explicit and when clarity is concise.<br></p><p>• Swift adds language features that reduce boilerplate; this proposal increases it.<br></p><p>(Yes, we’re still in the “Does this proposal fit well with the feel and direction of Swift?” section.)<br></p><p>Some languages, such as C and Java, show a preference for minimizing the number of language constructs, even if this comes at the expense of repetitive keystrokes — and repetitive reading. (Witness Java’s approach to properties, for example.)<br></p><p>Though that approach does have the advantage of keeping the language smaller, easier to learn, and more stable over time, Swift comes down firmly on the other side: it seeks to eliminate boilerplate, and is willing to add language features to accomplish this when the benefits are clear. For example: stored properties and their surrounding features (willSet, didSet, lazy, etc.), optional unwrapping conveniences (if let, ??, etc.), default struct initializers, default arguments, etc.<br></p><p>This proposal runs contrary to Swift’s dislike of boilerplate and senseless repetition.<br></p><p>• This proposal runs contrary to Swift’s state purpose of being useful in a wide variety of programming domains.<br></p><p>One of the surprising things that this C/C++/Java developer learned from Ruby is that there’s tremendous value when a language’s syntax can get out of the way to let library authors create domain-specific idioms.<br></p><p>Ruby’s primary technique for doing this is leaning on implicit self (and no-parens method calls; a different question!) to provide a scope in which, for example, code describing a domain model or a state machine or an HTTP router can use only language relevant to the task at hand. Swift as it stands is reasonably friendly to this approach.<br></p><p>Mandatory “self.” would rule out this sort of programming — or least many of the best technique for implementing it.<br></p><p>Chris L has stated that he’d like to see Swift work in a wide variety of programming contexts. This proposal runs counter to that goal.<br></p><p><br>┝━━━ Is the problem being addressed significant enough to warrant a change to Swift? ━━━━┥<br></p><p>Scope errors and name collisions are indeed a source of programmer error, and it’s worth considering ways to address them.<br></p><p>However, the specific problem this proposal addresses is very narrow. Because of Swift’s lowercase letter naming convention, its relative paucity of global variables and functions, and the relatively low use of method-local functions, 99% of the problem this proposal solves is confusing local variables with member variables. That specific error is already flagged in common cases by other compile-time sanity checks, such as nonsensical self-assignments (foo = foo), use of a local variable before its declaration, and initializers completing before all stored properties are initialized.<br></p><p>While these compiler checks clearly do not cover all accidental uses of a local func / var where a member was intended, they leave the remaining safety gap filled by this proposal fairly small.<br></p><p>If Swift were to address the problem of scope confusion, it should do so in a way that covers more than this narrow subset of mistakes.<br></p><p><br>┝━━━ If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those? ━━━━┥<br></p><p>I’ve worked in the following languages which have implicit self/this:<br></p><p>Ruby*<br>Java<br>C++<br></p><p>…and in the following languages which do not have it:<br></p><p>Objective-C<br>Javascript<br>Coffeescript<br>Python<br></p><p>(And gosh, did THINK C have it? I honestly can’t remember.)<br></p><p>My arguments above reflect my experiences with languages of both kinds.<br></p><p>* I realize that in the discussion thread, Ruby’s @ came up as an alternative to explicit self. However, @ ≠ self in Ruby; instead, it distinguishes member variables from methods — and Ruby properties implemented as methods. Wherever it is legal in Ruby to say “self.”, if there’s no name conflict, then it’s also legal to leave it out.<br></p><p><br>┝━━━ How much effort did you put into your review? A glance, a quick reading, or an in-depth study? ━━━━┥<br></p><p>Probably too much — or perhaps not enough into editing it down! :P<br></p><p>Cheers,<br></p><p>Paul<br></p><p><br></p><p>&gt; On Dec 16, 2015, at 12:55 PM, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of “Require self for accessing instance members” begins now and runs through Sunday, December 20th. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md&gt;<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; <br>&gt; 	Cheers,<br>&gt; 	Doug Gregor<br>&gt; 	Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/a1ca37ec/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2af8daf170a3ed693e577a9471ea1f10?s=50"></div><header><strong>[swift-evolution-announce] [Review] Require self for accessing instance members</strong> from <string>Ray Fix</string> &lt;rayfix at gmail.com&gt;<p>December 16, 2015 at 01:00:00pm</p></header><div class="content"><p>* What is your evaluation of the proposal?<br></p><p>My vote is to reject this proposal.  <br></p><p>	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>I have been writing code that prefers the more succinct style since Swift was announced and have not run into readability issues.  This proposal adds too much visual noise with very little benefit.  <br></p><p>The UIViewController.title example is interesting but I think more of an indictment of  inheritance.  I would have been more open to a proposal that addressed this problem specifically rather than blanket requiring self everywhere.  For example, in cases where you accessing non-private members from a base class, you might require self. <br></p><p>Giving up the compiler’s hint that you are making a circular retain in a closure is too important to give up.  <br></p><p>	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>This proposal adds too much boilerplate.  I note that the Ray Wenderlich swift style guide whose priorities are for &quot;shorter and more readable code” for conciseness prefers not writing self when not required.  If including self everywhere truly helped readers understand tutorials better, you would expect to see an exception here.<br></p><p>	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Many successful languages(C++/Java) do not require you to reference “self&quot; or “this&quot; explicitly.  In using them I have never once thought that they would be improved if doing so was a requirement.<br></p><p>Javascript does require referencing “this&quot; but CoffeeScript makes a shortcut for it to reduce visual noise.  this.thing in Javascript is written @thing in CoffeeScript.<br></p><p>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I read the proposal carefully and considered all of the points of the author and thought about my own experiences reading Swift code and teaching Swift over the last couple years.  Because of time constraints, I wasn’t able to conduct an in-depth study on the subject.<br></p><p>Ray Fix<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dc18a7074ca1d3f16d35f1a86c3a87c1?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Nikolaj Schumacher</string> &lt;me at nschum.de&gt;<p>December 16, 2015 at 10:00:00pm</p></header><div class="content"><p>-1 (in it’s current form)<br></p><p>I’m concerned about decreasing the signal/noise ratio.<br>The current way is similar to type inference. We can’t immediately see the type, but tool support makes it easy to retrieve the information if needed. And most of the time, i.e. when just scanning the code, there is simply less information to work through.<br>With less syntax, the code structure becomes clearer than when every second word is “self”.<br>As such, I don’t think the proposal in its current form fits well with Swift, which is very good at keeping code “to the point”.<br></p><p><br>I wonder if leaving out “self”, but keeping the dot would be a better alternative. There is precedent in Swift (c.f. enums), the dot is easier to ignore when skimming the code and it’s still immediately obvious when you want to know.<br>Ruby does something similar (using @) and it feels muss less heavy than “self.” in Objective-C while having most of the benefits. Any other single character would work, too, of course.<br></p><p>Example:<br></p><p>class Person {<br>    var name: String = &quot;David&quot;<br>    func foo() {<br>        print(&quot;Hello \(.name)&quot;)<br>    }<br>    <br>    func bar() {<br>        .foo()<br>    }<br>}<br></p><p><br>I think the problem is significant enough that it might warrant *a* change to Swift, but not the proposed one. The costs are higher than the benefits compared to my current solution (which is very clear syntax highlighting).<br>I do question if the problem occurs frequently enough (or at all) when it comes to methods.<br></p><p><br>Nik<br></p><p><br></p><p>&gt; On 16 Dec 2015, at 19:55, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of “Require self for accessing instance members” begins now and runs through Sunday, December 20th. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md&gt;<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; <br>&gt; 	Cheers,<br>&gt; 	Doug Gregor<br>&gt; 	Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/3f61869d/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7abf2ce34651dd5e97cd97b16ce21bae?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Guillaume Lessard</string> &lt;glessard at tffenterprises.com&gt;<p>December 16, 2015 at 03:00:00pm</p></header><div class="content"><p>I vote against this proposal.<br></p><p>The stated “advantages&quot; of this proposal are mostly matters of taste and opinion and, as such, are not real advantages at all. Furthermore, the proposal is silent as to the advantage of requiring `self` in `struct` and `enum` definitions.<br></p><p>The only stated advantage that seems relevant is that it lets the compiler “warn users (and [avoid] bugs) where the authors mean to use a local variable but instead are unknowingly using an instance property (and the other way round).&quot;<br></p><p>Given that being the sole genuine “advantage” of this proposal, a clear alternative is to improve and strengthen warnings for some cases of variable shadowing. I might not be opposed to that.<br></p><p><br>* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>No<br></p><p>* Does this proposal fit well with the feel and direction of Swift?<br></p><p>No. It trades an increased verbosity in all applicable cases for a small clarity advantage in a few cases.<br>It is not Swift-like at all.<br></p><p>* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I read too much of the thread, and have written much Swift code, including a *lot* of closures.<br></p><p>Early on in my use of Swift I regularly wrote `self` in places where it was not required.<br>Upon reviewing my code, I removed the majority of those for clarity.<br></p><p>Sincerely,<br>Guillaume Lessard<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/de7ad0a98b5a246d7825f220b0174f4a?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Preston Sumner</string> &lt;preston.sumner at gmail.com&gt;<p>December 16, 2015 at 04:00:00pm</p></header><div class="content"><p>While I acknowledge the issues raised by the proposal, I don’t think they&#39;re crucial enough to warrant changing the language.<br></p><p>One concern is that I expect people would simply sidestep the requirement by getting all their accesses through self out of the way early, as they do in Objective-C:<br></p><p>	// Store a bunch of local variables to the stuff we want to work with.<br>	let alpha = self.alpha<br>	let beta = self.beta<br>	let gamma = self.gamma<br>	var results = self.results<br></p><p>	// Actually do the work we wanted to do.<br>	let result = calculateResultWithAlpha(alpha, beta: beta, gamma: gamma)<br>	results.append(result)<br></p><p>As in Objective-C, these preambles can be mildly annoying to read and write, depending on your temperament. More importantly, a bug exists in the example: the results array is a copy, so the calculated result doesn’t get appended to the instance variable as intended. The proposal trades one set of potential gotchas for another, as modifications to internal value types would require either always accessing them through self or remembering to propagate local changes to their respective instance variables at the end of work.<br></p><p>Good points can be made by both sides in favor of preferring a particular style, while no sufficiently persuasive points have yet been made for changing the language to prohibit either one. Thus—like tabs versus spaces or eating bread buttered-side up or buttered-side down—I think this is a style choice better enforced at the project level.<br></p><p>Preston<br></p><p>&gt; On Dec 16, 2015, at 11:55 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of “Require self for accessing instance members” begins now and runs through Sunday, December 20th. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md&gt;<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; <br>&gt; 	Cheers,<br>&gt; 	Doug Gregor<br>&gt; 	Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/a90c1b8c/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8b9f0c10986385f3c7f50615d6176be3?s=50"></div><header><strong>[swift-evolution-announce] [Review] Require self for accessing instance members</strong> from <string>Pierre Monod-Broca</string> &lt;pierre at monod-broca.fr&gt;<p>December 17, 2015 at 09:00:00am</p></header><div class="content"><p>* What is your evaluation of the proposal?<br></p><p>I’m strongly against it.<br></p><p>* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>I don’t think so.<br></p><p>I, personally, never encountered a bug due to this problem, and it would be really easy to fix.<br></p><p>I hear that such bugs might be difficult to track, and there might be ways to help to detect them, but I’m not convinced by the proposed solution.<br></p><p>It seems more like a matter of taste, and the proposed solution would remove choice.<br></p><p>* Does this proposal fit well with the feel and direction of Swift?<br></p><p>I don’t think so.<br></p><p>I think Swift should be concise when that doesn’t hinder clarity. (And in this case, I’m afraid it is explicitness that would hinder clarity).<br></p><p>Also, it seems to me implicit self makes properties and methods first-class citizens, and I think they should be.<br></p><p>* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Yes: Objective-C, and I was glad, migrating to Swift, to get rid of all those explicit self.<br></p><p>* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I followed most of the thread.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151217/8584e884/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>December 17, 2015 at 12:00:00am</p></header><div class="content"><p>After having considered this for a while, I&#39;m still strongly opposed to<br>this proposal. I think the relevant reasons have already all been cited<br>in this thread.<br></p><p>I also think there&#39;s a good opportunity here for someone to take<br>SourceKit and write their own linting tool, to allow people to establish<br>their own conventions and check them with a build script.<br></p><p>-Kevin Ballard<br></p><p>On Wed, Dec 16, 2015, at 10:55 AM, Douglas Gregor via swift-evolution wrote:<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of “Require self for accessing instance members” begins<br>&gt; now and runs through Sunday, December 20th. The proposal is<br>&gt; available here:<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All<br>&gt; reviews should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the<br>&gt; direction of Swift. When writing your review, here are some questions<br>&gt; you might want to answer in your review:<br>&gt;<br>&gt; * What is your evaluation of the proposal? * Is the problem being<br>&gt; addressed significant enough to warrant a change to Swift? * Does<br>&gt; this proposal fit well with the feel and direction of Swift? * If you<br>&gt; have you used other languages or libraries with a similar feature,<br>&gt; how do you feel that this proposal compares to those? * How much<br>&gt; effort did you put into your review? A glance, a quick reading, or an<br>&gt; in-depth study? More information about the Swift evolution process is<br>&gt; available at<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Cheers, Doug Gregor Review Manager<br>&gt;<br>&gt; _________________________________________________<br>&gt; swift-evolution mailing list swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151217/46e4d626/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>December 17, 2015 at 02:00:00am</p></header><div class="content"><p>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>-1<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>There are enhancements around this problem which are worthwhile in pursuing, but I don’t believe this verbosity is the right approach.<br></p><p>Imagining a 3D point struct (possibly the worse case example):<br></p><p>var length:Double {<br>  get {<br>    return self.x*self.x+self.y*self.z+self.z*self.z<br>  }<br>}<br></p><p>this is significantly harder to read and maintain than the implicit self code<br>var length:Double {<br>  get {<br>    return x*x+y*z+z*z<br>  }<br>}<br>There is a bug in the two functions - which version is easier to spot?<br></p><p>So for the given points:<br></p><p>More readable at the point of use. <br>I strongly agree this has been shown. The author may have meant to say the code is less ambiguous, but it is certainly less readable in my example and the examples the author gave.<br></p><p>More consistent than only requiring self in closure contexts.<br>This is true, but I actually would like to eventually propose not requiring self in closure contexts<br>Less confusing from a learning point of view.<br>I cannot speak to this, languages are taught different now, and I was self-taught until college. The specification of this when I was learning C++ in college was an advanced feature - we did not use ‘this’ in my first year. Once Java came about, initializers often require “this&quot; because of parameters shadowing properties, which was the first time I really started using the keyword.<br></p><p>Lets the compiler warn users (and avoids bugs) where the authors mean to use a local variable but instead are unknowingly using an instance property (and the other way round).<br>I believe that warning the user that a variable which is being used is shadowed in all cases other than let x=x is a far better solution. This is admittedly still more ambiguous than requiring the user to explicitly reference the context of the variable/function, but there is an expectation of API knowledge when working *inside* of a class or subclass that remains whether you are explicit or implicit in referencing self.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>I believe it represents a syntactical regression. <br></p><p>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>I have not. I know Python and Rust have explicit self parameters in function declarations, but even then they have implicit usage of that self parameter.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>Somewhere between a quick reading and an in-depth study, as the discussion is not represented by the proposal, and the mailing list discussion got too big for me to follow 100%<br></p><p>-David Waite (DW)<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151217/adff6e46/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5c9df42e3c293e3cdb5f3e1b34d44ef9?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Step C</string> &lt;schristopher at bignerdranch.com&gt;<p>December 17, 2015 at 10:00:00am</p></header><div class="content"><p>* What is your evaluation of the proposal?<br>-1. I do not support the proposal.<br>    * Is the problem being addressed significant enough to warrant a change<br>to Swift?<br>No. When Swift was first announced, the implicit self was one of the things<br>we argued about at the ranch. I was initially opposed. However after<br>working with the language for a short time, I slowly became convinced it<br>was not as significant an issue as I thought at first. In Objective-C it is<br>common to do something like:<br>NSString *foo = bar;<br>foo.baz = 1;<br>foo.blargh = 2;<br>self.foo = foo; // Don&#39;t forget to set the property using the temporary<br>local!<br>This is another way to reduce the syntactic noise and baggage of otherwise<br>adding &quot;self&quot; on each line, and it makes the code&#39;s intention clearer.<br>However this has led to many (admittedly easy to find) bugs where I&#39;ve<br>forgotten to assign the temporary local variable back to self at the end.<br>There&#39;s a similar pattern with a closure that can help prevent that issue -<br>but neither of these are necessary in Swift if your semantics don&#39;t need<br>them.<br>In addition, I have been teaching Swift (via Big Nerd Ranch courses of<br>various kinds) since Swift was released. Implicit self has not led to as<br>much confusion as I was initially concerned with. I do think it allows some<br>misconceptions to linger longer, but the tradeoff is it makes the language<br>easier to start with - the language is less intimidating initially because<br>it supports common patterns such as this.<br>Finally I&#39;ll note that type inference is essential to Swift, and yet that<br>leaves a lot of information implicit as well in the plain-text code. Both<br>that and shadowing can cause as much confusion as implicit self. Others<br>have already explained the other scoping issues that are not addressed by<br>this proposal.<br>    * Does this proposal fit well with the feel and direction of Swift?<br>No. Swift carefully and nicely rebalances clarity to also value brevity.<br>Others have explained well already how signal-to-noise is important. I<br>agree with those sentiments and think the best balance has been struck on<br>this issue by not requiring self.<br>Swift also seems to me a somewhat tool-centric language, for better and<br>worse. Many commenters have made the valid point that leaning on syntax<br>highlighting is not sufficient (or even possible) for many developers. Not<br>only is there the colorblind issue, but many of us regularly read code in<br>emails and other locations where tool assistance is not available. I do not<br>think that argument weighs strongly enough in this case, where in practice<br>you should usually have sufficient information in the code if you need to<br>determine local vs. object (though I&#39;m sure examples can be constructed to<br>the contrary).<br>    * If you have you used other languages or libraries with a similar<br>feature, how do you feel that this proposal compares to those?<br>I&#39;ve compared to Obj-C above. Obj-C also values readability, but with no<br>weight given to brevity (it almost considers verbosity a virtue at times).<br>As much as I enjoy the language, Swift&#39;s comparative terseness allows more<br>expressivity, while not taking it as far as Ruby or Perl.<br>    * How much effort did you put into your review? A glance, a quick<br>reading, or an in-depth study?<br>I followed the discussion, and considered this issue when Swift was first<br>announced all the way through release. I&#39;ve taught Swift to many classes,<br>some largely new to programming and many coming from an Obj-C background. I<br>have not done an in-depth study but I consider myself relatively<br>well-informed on this issue.<br></p><p>Sincerely,<br>Step Christopher<br></p><p>Step Christopher<br>Big Nerd Ranch, LLC<br>schristopher at bignerdranch.com<br></p><p><br>On Wed, Dec 16, 2015 at 1:55 PM, Douglas Gregor via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of “Require self for accessing instance members” begins now and<br>&gt; runs through Sunday, December 20th. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt; * What is your evaluation of the proposal?<br>&gt; * Is the problem being addressed significant enough to warrant a change<br>&gt; to Swift?<br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt; * If you have you used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt; * How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Cheers,<br>&gt; Doug Gregor<br>&gt; Review Manager<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151217/1fe214ca/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ab8ff5d36ad4f40d7905509956e5c706?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Jacopo Andrea Giola</string> &lt;swift-evolution at jacopo.giola.org&gt;<p>December 17, 2015 at 05:00:00pm</p></header><div class="content"><p>* What is your evaluation of the proposal?<br>	-1 I don’t support this proposal<br>	<br>    * Is the problem being addressed significant enough to warrant a change to Swift?<br>	For me not really, even if I can’t agree with people that sustain the thesis which syntax highlighting is a sufficient way to recognise local variable against instance properties.<br>	<br>    * Does this proposal fit well with the feel and direction of Swift?<br>	Swift value brevity and clarity and accepting this proposal will add a lot of noise, not counting the fact that in Swift 3 will likely break almost all the swift code available in the short term (and I don’t think that an automation translation can do always the right thing).<br>	<br>    * If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	I’ve only used Obj-C extensively but in terms of values is like the opposite of Swift about brevity.<br>	For me the implicit self was one of the best features announced with Swift.  <br></p><p>    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>	I’ve followed sparingly the discussion and I’ve read the official proposal on GitHub and all the response on this thread.<br></p><p>- Jacopo<br></p><p>&gt; On Wed, Dec 16, 2015 at 1:55 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of “Require self for accessing instance members” begins now and runs through Sunday, December 20th. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md&gt;<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; <br>&gt; 	Cheers,<br>&gt; 	Doug Gregor<br>&gt; 	Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151217/e14521cb/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/05e222e6ef4d84013bb3baeb0e25c90b?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Patrick Gili</string> &lt;gili.patrick.r at gili-labs.com&gt;<p>December 17, 2015 at 04:00:00pm</p></header><div class="content"><p>&gt; On Dec 16, 2015, at 1:55 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of “Require self for accessing instance members” begins now and runs through Sunday, December 20th. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md&gt;<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>This proposal does not improve Swift.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>No.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>No. From the first time I saw Swift, I felt it represented the best aspects of my favorite modern languages, such as C# and Ruby. This changes would represent a step backwards.<br></p><p>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Object-C: too verbose for my taste. Swift was a welcome change for developing OSX/iOS application.<br>Python: too strict for my taste. Ruby became my go-to alternative for scripting. I saw Swift borrowing or improving on many of Ruby&#39;s concepts.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I have carefully read every message posted to the mailing list. I did a little research to confirm my experiences with languages I have used over the last 37 years, but not a lot.<br></p><p>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; <br>&gt; 	Cheers,<br>&gt; 	Doug Gregor<br>&gt; 	Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151217/f8e16913/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/47e3aeeaf151d4f51ee15fc7871bf584?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Rudolf Adamkovič</string> &lt;salutis at me.com&gt;<p>December 17, 2015 at 11:00:00pm</p></header><div class="content"><p>After careful reading through all the arguments, I&#39;m now in the -1 camp too.<br></p><p>The &quot;visual noise&quot; examples and reasoning about consistency with the rest of the language totally got me.<br></p><p>P.S. I really liked the idea to use a dot instead of dot self but yeah, dot is already reserved for enums.<br></p><p>R+<br></p><p>Sent from my iPhone<br></p><p>&gt; On 16 Dec 2015, at 19:55, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of “Require self for accessing instance members” begins now and runs through Sunday, December 20th. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; 	Cheers,<br>&gt; 	Doug Gregor<br>&gt; 	Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151217/1c093494/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ac6593beac2a4da1e518e5001dbb2adc?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Michael Buckley</string> &lt;michael at buckleyisms.com&gt;<p>December 17, 2015 at 03:00:00pm</p></header><div class="content"><p>* What is your evaluation of the proposal?<br></p><p>+1<br></p><p>I&#39;m definitely going against the trend here, but I want to reserve the<br>right to complain about the lack of a required self later. If I don&#39;t speak<br>up when I have the chance, I can&#39;t really complain later.<br></p><p>* Is the problem being addressed significant enough to warrant a change to<br>Swift?<br></p><p>I believe it is, but it took me until now to convince myself of it.<br></p><p>When Swift 1 was released, I was very nervous about the bugs that implicit<br>self would cause. In the nearly two years since then, it has caused a<br>significant or difficult to diagnose bug for me for two reasons: I have<br>been very nervous about writing such a bug, and I&#39;ve used self for property<br>access as much as possible. But this has caused bugs for others, so it is a<br>problem.<br></p><p>Since it is optional, I am able to avoid these kinds of bugs by using<br>explicit self whenever possible. But I am human, and sometimes I make<br>mistakes, and it would be better if the compiler caught those mistakes<br>early. I also think the compiler should give me the peace of mind of<br>knowing that my collaborators aren&#39;t making the same mistakes.<br></p><p>As been brought up multiple times, both of these problems go away if<br>explicit self is enforced with a linter. But this hides the real problem<br>with implicit self: readability.<br></p><p>Explicit self, in my view, makes the code much more readable. I know others<br>have mentioned that self blindness will result from this proposal, but I<br>just don&#39;t see it. If all the selfs were meaningless, then sure, the<br>language is being more verbose than necessary, and thus less readable. But<br>I&#39;ve been reviewing a lot of code, both code I&#39;ve written, and code others<br>have written, and I&#39;ve been adding/deleting explicit selfs, and I have not<br>found a case where, to me personally, the explicit selfs made the code less<br>readable, and a few cases where they have made the code more readable.<br></p><p>Perhaps I just don&#39;t suffer from self blindness. It&#39;s not a problem for me.<br>I&#39;m willing to admit this might be a personal experience thing, where<br>different people have different experiences. A couple months ago on<br>Twitter, I quipped,Seems to me that the implied self/explicit self war<br>splits along the same ideological lines as the dot syntax war.&quot; The context<br>here is that those who were against dot syntax argued that it created lines<br>of code that, in isolation, was ambiguous. Unless you knew the types<br>referenced, you can&#39;t tell if it&#39;s an Objective-C object accessing a<br>property, or a C struct accessing a field.<br></p><p>The counterargument to this was, of course, that it&#39;s not a good idea to<br>try to read code in isolation anyway. You have to read it all to understand<br>what it does, and in that process, you will gain the context needed to tell<br>whether the dot syntax is a property access or something else.<br></p><p>This is very true, but code is seldom read beginning to end like a book.<br>You usually start with the function you want to understand, and keep<br>digging deeper until you understand how the function works, and how it fits<br>into the overall structure of the code. And when reading this way, explicit<br>self saves you a lot of time in understanding the overall structure of the<br>code. You can tell unambiguously from each line whether the variable is a<br>property or a variable with a higher scope. Being more explicit and<br>expressive in the small picture makes it faster and easier to understand<br>the big picture that dot-syntax proponents maintained was necessary for<br>reading code.<br></p><p>* If you have you used other languages or libraries with a similar feature,<br>how do you feel that this proposal compares to those?<br></p><p>Yes, I have used other languages with this requirement, including Python<br>and Objective-C, as well as languages without this behavior. As others have<br>mentioned, in Objective-C, you can get around the self requirement by<br>accessing ivars directly. Some have also pointed out that some are in the<br>habit of aliasing properties which are used multiple times in a function to<br>local variables, just to avoid the self requirement. These are both poor<br>practices, and something I would definitely reject a code review for.<br></p><p>They are also not practices I have seen very often. Again, this may be a<br>personal experience thing.<br></p><p>In these languages, it is still possible to fail to add an explicit self in<br>some contexts, and the language will use the local variable when you intend<br>to use the property. The language is not psychic, and explicit self is not<br>a panacea, but Swift&#39;s behavior doesn&#39;t prevent these bugs either.<br></p><p>Ultimately I think languages with explicit self are more readable, and it&#39;s<br>nice that they prevent a small class of bugs.<br></p><p>* How much effort did you put into your review? A glance, a quick reading,<br>or an in-depth study?<br></p><p>I have been keeping up with these threads over the last few days and<br>re-evaluating my own ideas and experiences, and trying them out with new<br>code samples.<br></p><p>I have not looked at any empirical research on this subject.<br></p><p>On Thu, Dec 17, 2015 at 2:38 PM, Rudolf Adamkovic via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; After careful reading through all the arguments, I&#39;m now in the -1 camp<br>&gt; too.<br>&gt;<br>&gt; The &quot;visual noise&quot; examples and reasoning about consistency with the rest<br>&gt; of the language totally got me.<br>&gt;<br>&gt; P.S. I really liked the idea to use a dot instead of dot self but yeah,<br>&gt; dot is already reserved for enums.<br>&gt;<br>&gt; R+<br>&gt;<br>&gt; Sent from my iPhone<br>&gt;<br>&gt; On 16 Dec 2015, at 19:55, Douglas Gregor via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of “Require self for accessing instance members” begins now and<br>&gt; runs through Sunday, December 20th. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt; * What is your evaluation of the proposal?<br>&gt; * Is the problem being addressed significant enough to warrant a change<br>&gt; to Swift?<br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt; * If you have you used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt; * How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Cheers,<br>&gt; Doug Gregor<br>&gt; Review Manager<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151217/01d938d4/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>December 18, 2015 at 12:00:00am</p></header><div class="content"><p>Hi people,<br></p><p>I&#39;ve tried to avoid interacting with the discussions here and on Twitter because all the good arguments on both sides of the fence seem to have been given and that it would just add more fuel to what seems like a pretty hot fire :)<br></p><p>But I&#39;d like to move the discussion forward. I&#39;ve I&#39;d have to summarize all of it, it seems like they are people who like the implicitness of self and REALLY don&#39;t like my proposal, because it would induce a heavy writing and reading cost to code which looks fine to them.<br></p><p>On the other hand, there are people like me who already use self explicitly to help document the scope of variables used and where there might be hidden side effects of getters and setters, and really appreciate he advantages it brings. It seems that we would enjoy a language that forces explicitness to be able to read code everywhere and be able to make the same assumptions.<br></p><p>But it seems that we all agree with the underlying issue: that the fact that the neither the language, nor the code conventions, nor the compiler makes it extremely clear about the scope of variables at the point of use as other languages might (Ruby comes to mind).<br></p><p>We just seem to disagree on explicit self being the solution: it adds a lot of verbosity for people who prefer succinctness (even if I think it is a less important goal).<br></p><p>What other solutions can we think up? We already discussed using other prefix keywords which are less verbose than self, but couldn&#39;t come up with any great solution. I would just like the language help us here to make things safer without everybody using their own naming conventions or Hungarian notation.<br></p><p>David<br></p><p>PS: I haven&#39;t found time to update the proposal and I&#39;d like to apologize if it sounded a bit too much one sided - I wrote it before a lot off e nag give feedback, and tried to stick to the style of other proposals, but perhaps failed in doing so.<br></p><p><br>&gt; On 17 Dec 2015, at 23:38, Rudolf Adamkovic via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; After careful reading through all the arguments, I&#39;m now in the -1 camp too.<br>&gt; <br>&gt; The &quot;visual noise&quot; examples and reasoning about consistency with the rest of the language totally got me.<br>&gt; <br>&gt; P.S. I really liked the idea to use a dot instead of dot self but yeah, dot is already reserved for enums.<br>&gt; <br>&gt; R+<br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt;&gt; On 16 Dec 2015, at 19:55, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of “Require self for accessing instance members” begins now and runs through Sunday, December 20th. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; 	Cheers,<br>&gt;&gt; 	Doug Gregor<br>&gt;&gt; 	Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/43bb4859/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>December 17, 2015 at 11:00:00pm</p></header><div class="content"><p>&gt; On Dec 17, 2015, at 4:33 PM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; What other solutions can we think up? We already discussed using other prefix keywords which are less verbose than self, but couldn&#39;t come up with any great solution. I would just like the language help us here to make things safer without everybody using their own naming conventions or Hungarian notation.<br></p><p>I believe that the compiler should give warnings (on use, not declaration/import) of a variable or function overload which has been implicitly shadowed and is ambiguous. Explicit shadowing today I believe is only defined by let x=x or var x=x (where the local copy and original have the same name). Of course, a recommendation for resolving these issues would be part of any such proposal.<br></p><p>That does still leave the following issue from your proposal:<br>    func updateButton() {<br>        // var title = &quot;Hello \(name)&quot;<br>        button.setTitle(title, forState: .Normal) // forgot to comment this line but the compiler does not complain and title is now referencing UIViewController’s title by mistake<br>        button.setTitleColor(UIColor.blackColor(), forState: .Normal)<br>    }<br></p><p>This is not ambiguous, so I would not expect such a problem to take long to debug. Moreso, any run of the code *before* they commented out the var title=… line would have had a warning about the shadowing.<br></p><p>This would also make some of the method cascading approaches (where a value behave like an implicit self within a block of code) possible without introducing massive ambiguity - the compiler likely just requires you to fully specify the types in the case where your names are ambiguous. Who knows, this might encourage people to come up with more descriptive names! ;-) <br> <br>-DW<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151217/cd6b603a/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f7d56214606b5cc60e5cf1e2bc91add3?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Francisco Costa</string> &lt;phelgo at gmail.com&gt;<p>December 18, 2015 at 10:00:00am</p></header><div class="content"><p>I think most of what has been said in favor of explicit `self` is valid to<br>some degree, however I think it is a matter of _code style_ that should be<br>considered by each team. If there is indeed a clear benefit in using it, it<br>will certainly become idiomatic over time. Personally, I think this is some<br>verbosity that we can live without.<br></p><p>Francisco<br></p><p><br>On Fri, Dec 18, 2015 at 12:33 AM, David Hart via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hi people,<br>&gt;<br>&gt; I&#39;ve tried to avoid interacting with the discussions here and on Twitter<br>&gt; because all the good arguments on both sides of the fence seem to have been<br>&gt; given and that it would just add more fuel to what seems like a pretty hot<br>&gt; fire :)<br>&gt;<br>&gt; But I&#39;d like to move the discussion forward. I&#39;ve I&#39;d have to summarize<br>&gt; all of it, it seems like they are people who like the implicitness of self<br>&gt; and REALLY don&#39;t like my proposal, because it would induce a heavy writing<br>&gt; and reading cost to code which looks fine to them.<br>&gt;<br>&gt; On the other hand, there are people like me who already use self<br>&gt; explicitly to help document the scope of variables used and where there<br>&gt; might be hidden side effects of getters and setters, and really appreciate<br>&gt; he advantages it brings. It seems that we would enjoy a language that<br>&gt; forces explicitness to be able to read code everywhere and be able to make<br>&gt; the same assumptions.<br>&gt;<br>&gt; But it seems that we all agree with the underlying issue: that the fact<br>&gt; that the neither the language, nor the code conventions, nor the compiler<br>&gt; makes it extremely clear about the scope of variables at the point of use<br>&gt; as other languages might (Ruby comes to mind).<br>&gt;<br>&gt; We just seem to disagree on explicit self being the solution: it adds a<br>&gt; lot of verbosity for people who prefer succinctness (even if I think it is<br>&gt; a less important goal).<br>&gt;<br>&gt; What other solutions can we think up? We already discussed using other<br>&gt; prefix keywords which are less verbose than self, but couldn&#39;t come up with<br>&gt; any great solution. I would just like the language help us here to make<br>&gt; things safer without everybody using their own naming conventions or<br>&gt; Hungarian notation.<br>&gt;<br>&gt; David<br>&gt;<br>&gt; PS: I haven&#39;t found time to update the proposal and I&#39;d like to apologize<br>&gt; if it sounded a bit too much one sided - I wrote it before a lot off e nag<br>&gt; give feedback, and tried to stick to the style of other proposals, but<br>&gt; perhaps failed in doing so.<br>&gt;<br>&gt;<br>&gt; On 17 Dec 2015, at 23:38, Rudolf Adamkovic via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; After careful reading through all the arguments, I&#39;m now in the -1 camp<br>&gt; too.<br>&gt;<br>&gt; The &quot;visual noise&quot; examples and reasoning about consistency with the rest<br>&gt; of the language totally got me.<br>&gt;<br>&gt; P.S. I really liked the idea to use a dot instead of dot self but yeah,<br>&gt; dot is already reserved for enums.<br>&gt;<br>&gt; R+<br>&gt;<br>&gt; Sent from my iPhone<br>&gt;<br>&gt; On 16 Dec 2015, at 19:55, Douglas Gregor via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of “Require self for accessing instance members” begins now and<br>&gt; runs through Sunday, December 20th. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt; * What is your evaluation of the proposal?<br>&gt; * Is the problem being addressed significant enough to warrant a change<br>&gt; to Swift?<br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt; * If you have you used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt; * How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Cheers,<br>&gt; Doug Gregor<br>&gt; Review Manager<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/f50dff8e/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>December 19, 2015 at 11:00:00am</p></header><div class="content"><p>&gt; 	• What is your evaluation of the proposal?<br>-1<br>I like to use the self-prefix in many places, but there is no need to impose personal preferences on those with a different opinion.<br></p><p>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>I doubt that the proposal addresses any existing problem at all; it merely lessens issues due to unfortunate choice of names.<br></p><p>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>When I look at the efforts that were taken to save type strokes when declaring a closure, and how the option of leaving out self is highlighted in the docs: I don&#39;t think so.<br>As others have shown, clarity can be decreased by using the self prefix.<br></p><p>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>I&#39;ve read the whole discussion - although I think that &quot;discussion&quot; is a flattering expression, as I have to look really hard to find any examination of the valid counter arguments.<br>Pondering over when to use self and when to skip it, I come to the conclusion that I have rules for this, but I would neither dictate those on others nor on the compiler.<br></p><p>&gt; What other solutions can we think up?<br>1) Use the right tools - syntax coloring can ensure that you don&#39;t confuse members with other elements (please no &quot;and what&#39;s with those that are color blind?&quot;-arguments: There are other aspects of font that can be changed as well). It would also possible to automatically insert &quot;self.&quot; if it is that important.<br>2) Don&#39;t choose names that cause confusion in the first place… doing stupid things leads to stupid problems - but I have to admit that is possible to trip accidentally when choosing a name: For parent methods, this is solved with &quot;override&quot;, for other identifiers, there could be warnings.<br></p><p>Best regards,<br>Tino<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a32f0c9071fd24f75322395496dc6a32?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Eugene Gubin</string> &lt;hemet.mail at gmail.com&gt;<p>December 19, 2015 at 03:00:00pm</p></header><div class="content"><p>• What is your evaluation of the proposal?<br>Against.<br></p><p>• Is the problem being addressed significant enough to warrant a change to Swift?<br>Problem is important enough. However my opinion is it is worth additional warnings not mandatory self.<br></p><p>• Does this proposal fit well with the feel and direction of Swift?<br>I don&#39;t think adding so much visual noise to avoid name shadowing is a good thing. <br></p><p>• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>I have read some posts not all of course. <br></p><p>• If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>The only language I have used where self is mandatory is Objective-C. I was never happy with this but it was justified by messaging idiom at least.<br></p><p>2015-12-19 13:01 GMT+03:00 Tino Heth via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt;       • What is your evaluation of the proposal?<br>-1<br>I like to use the self-prefix in many places, but there is no need to impose personal preferences on those with a different opinion.<br></p><p>&gt;       • Is the problem being addressed significant enough to warrant a change to Swift?<br>I doubt that the proposal addresses any existing problem at all; it merely lessens issues due to unfortunate choice of names.<br></p><p>&gt;       • Does this proposal fit well with the feel and direction of Swift?<br>When I look at the efforts that were taken to save type strokes when declaring a closure, and how the option of leaving out self is highlighted in the docs: I don&#39;t think so.<br>As others have shown, clarity can be decreased by using the self prefix.<br></p><p>&gt;       • How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>I&#39;ve read the whole discussion - although I think that &quot;discussion&quot; is a flattering expression, as I have to look really hard to find any examination of the valid counter arguments.<br>Pondering over when to use self and when to skip it, I come to the conclusion that I have rules for this, but I would neither dictate those on others nor on the compiler.<br></p><p>&gt; What other solutions can we think up?<br>1) Use the right tools - syntax coloring can ensure that you don&#39;t confuse members with other elements (please no &quot;and what&#39;s with those that are color blind?&quot;-arguments: There are other aspects of font that can be changed as well). It would also possible to automatically insert &quot;self.&quot; if it is that important.<br>2) Don&#39;t choose names that cause confusion in the first place… doing stupid things leads to stupid problems - but I have to admit that is possible to trip accidentally when choosing a name: For parent methods, this is solved with &quot;override&quot;, for other identifiers, there could be warnings.<br></p><p>Best regards,<br>Tino<br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/5e3cb8d6/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>December 18, 2015 at 08:00:00pm</p></header><div class="content"><p>&gt; P.S. I really liked the idea to use a dot instead of dot self but yeah, dot is already reserved for enums.<br></p><p>FWIW This isn’t enum-specific — the dot shortcut syntax works for any type member of a type, but only in contexts where you’re passing a value.<br></p><p>Correct me if I’m wrong, I believe the ambiguity is that you can start a line with a dot when you split a method call/property access chain into multiple lines and want to continue calling methods on the last line’s value.<br></p><p>— Radek<br></p><p>&gt; On 17 Dec 2015, at 23:38, Rudolf Adamkovic via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; After careful reading through all the arguments, I&#39;m now in the -1 camp too.<br>&gt; <br>&gt; The &quot;visual noise&quot; examples and reasoning about consistency with the rest of the language totally got me.<br>&gt; <br>&gt; P.S. I really liked the idea to use a dot instead of dot self but yeah, dot is already reserved for enums.<br>&gt; <br>&gt; R+<br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt; On 16 Dec 2015, at 19:55, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of “Require self for accessing instance members” begins now and runs through Sunday, December 20th. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md&gt;<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt; <br>&gt;&gt; 	Cheers,<br>&gt;&gt; 	Doug Gregor<br>&gt;&gt; 	Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/7c17f5bb/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/423beb7cfb5894f7b53623d6e515b01d?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Jed Lewison</string> &lt;jed.lewison at icloud.com&gt;<p>December 18, 2015 at 01:00:00am</p></header><div class="content"><p>I’m not in favor of this proposal, and rather than repeat arguments that have already been made, I thought I’d share a small piece of data from the project I’m working on to illustrate the impact of implicit self in terms of reducing repetitive boilerplate cruft.<br></p><p>Our project consists of a legacy ObjC code base for an iOS app and a new version written entirely in Swift. The feature set is largely the same in both code bases, so it’s a good A vs B comparison.<br></p><p>In the Objective C version of the app, there are ~25,000 explicit references to self. (Keep in mind that this could easily have been a much bigger number if there weren’t such pervasive usage of ivars in the code.).<br></p><p>In the Swift version, there are ~1,000 explicit references to self, mostly in initializers and when passing self as an argument to a protocol — and about 10% of those would disappear with the proposal to allow implicit references to self with a strong capture list.<br></p><p>I know self is just a 4-letter word, and I know Swift’s goal isn’t to reduce character count simply for the sake of reducing character count, but it least for our project, avoiding “self”-blindness has really mode code more readable.<br></p><p><br>&gt; On Dec 16, 2015, at 1:55 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of “Require self for accessing instance members” begins now and runs through Sunday, December 20th. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md&gt;<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; <br>&gt; 	Cheers,<br>&gt; 	Doug Gregor<br>&gt; 	Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/43354fe8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bab03b11d4cd60804cf4a6ba68589430?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Kevin Lundberg</string> &lt;kevin at klundberg.com&gt;<p>December 20, 2015 at 10:00:00am</p></header><div class="content"><p>-1, for this reason, and for the extreme loss in conciseness already<br>mentioned elsewhere. The purported extra clarity is not worth the extra<br>burden placed on writing code in my opinion. I would favor a compiler<br>warning at the most, and this can be solved on an individual/team basis<br>with linting tools as well.<br></p><p>On 12/18/2015 1:02 AM, Jed Lewison via swift-evolution wrote:<br>&gt; I’m not in favor of this proposal, and rather than repeat arguments<br>&gt; that have already been made, I thought I’d share a small piece of data<br>&gt; from the project I’m working on to illustrate the impact of implicit<br>&gt; self in terms of reducing repetitive boilerplate cruft.<br>&gt;<br>&gt; Our project consists of a legacy ObjC code base for an iOS app and a<br>&gt; new version written entirely in Swift. The feature set is largely the<br>&gt; same in both code bases, so it’s a good A vs B comparison.<br>&gt;<br>&gt; In the Objective C version of the app, there are ~25,000 explicit<br>&gt; references to self. (Keep in mind that this could easily have been a<br>&gt; much bigger number if there weren’t such pervasive usage of ivars in<br>&gt; the code.).<br>&gt;<br>&gt; In the Swift version, there are ~1,000 explicit references to self,<br>&gt; mostly in initializers and when passing self as an argument to a<br>&gt; protocol — and about 10% of those would disappear with the proposal to<br>&gt; allow implicit references to self with a strong capture list.<br>&gt;<br>&gt; I know self is just a 4-letter word, and I know Swift’s goal isn’t to<br>&gt; reduce character count simply for the sake of reducing character<br>&gt; count, but it least for our project, avoiding “self”-blindness has<br>&gt; really mode code more readable.<br>&gt;<br>&gt;<br>&gt;&gt; On Dec 16, 2015, at 1:55 PM, Douglas Gregor via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hello Swift community,<br>&gt;&gt;<br>&gt;&gt; The review of “Require self for accessing instance members” begins<br>&gt;&gt; now and runs through Sunday, December 20th. The proposal is available<br>&gt;&gt; here:<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md<br>&gt;&gt;<br>&gt;&gt; Reviews are an important part of the Swift evolution process. All<br>&gt;&gt; reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; or, if you would like to keep your feedback private, directly to the<br>&gt;&gt; review manager.<br>&gt;&gt;<br>&gt;&gt; What goes into a review?<br>&gt;&gt;<br>&gt;&gt; The goal of the review process is to improve the proposal under<br>&gt;&gt; review through constructive criticism and, eventually, determine the<br>&gt;&gt; direction of Swift. When writing your review, here are some questions<br>&gt;&gt; you might want to answer in your review:<br>&gt;&gt;<br>&gt;&gt; * What is your evaluation of the proposal?<br>&gt;&gt; * Is the problem being addressed significant enough to warrant a<br>&gt;&gt; change to Swift?<br>&gt;&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; * If you have you used other languages or libraries with a similar<br>&gt;&gt; feature, how do you feel that this proposal compares to those?<br>&gt;&gt; * How much effort did you put into your review? A glance, a quick<br>&gt;&gt; reading, or an in-depth study?<br>&gt;&gt;<br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;<br>&gt;&gt; Cheers,<br>&gt;&gt; Doug Gregor<br>&gt;&gt; Review Manager<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/2b44208f/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2969f67fc010e956c71442148f3f6fc0?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Wallacy</string> &lt;wallacyf at gmail.com&gt;<p>December 20, 2015 at 04:00:00pm</p></header><div class="content"><p>* What is your evaluation of the proposal?<br></p><p>Against.<br></p><p>* Is the problem being addressed significant enough to warrant a change<br>to Swift?<br></p><p>I do not believe that this is the best way to solve the problem described.<br></p><p>* Does this proposal fit well with the feel and direction of Swift?<br></p><p>I don&#39;t think, i think is the wrong direction. Visual noise is a big<br>problem here.<br></p><p>* If you have you used other languages or libraries with a similar feature,<br>how do you feel that this proposal compares to those?<br></p><p>In ObjC the sea of Selfs always distract me while debugging code.<br></p><p>* How much effort did you put into your review? A glance, a quick reading,<br>or an in-depth study?<br></p><p>I read the entire thread, and i have one software we always need to use<br>self (team accordance) and other we avoid when is possible (also team<br>accordance) and the first team is think to remove the need because the<br>noise.<br></p><p>Em dom, 20 de dez de 2015 às 13:54, Kevin Lundberg via swift-evolution &lt;<br>swift-evolution at swift.org&gt; escreveu:<br></p><p>&gt; -1, for this reason, and for the extreme loss in conciseness already<br>&gt; mentioned elsewhere. The purported extra clarity is not worth the extra<br>&gt; burden placed on writing code in my opinion. I would favor a compiler<br>&gt; warning at the most, and this can be solved on an individual/team basis<br>&gt; with linting tools as well.<br>&gt;<br>&gt;<br>&gt; On 12/18/2015 1:02 AM, Jed Lewison via swift-evolution wrote:<br>&gt;<br>&gt; I’m not in favor of this proposal, and rather than repeat arguments that<br>&gt; have already been made, I thought I’d share a small piece of data from the<br>&gt; project I’m working on to illustrate the impact of implicit self in terms<br>&gt; of reducing repetitive boilerplate cruft.<br>&gt;<br>&gt; Our project consists of a legacy ObjC code base for an iOS app and a new<br>&gt; version written entirely in Swift. The feature set is largely the same in<br>&gt; both code bases, so it’s a good A vs B comparison.<br>&gt;<br>&gt; In the Objective C version of the app, there are ~25,000 explicit<br>&gt; references to self. (Keep in mind that this could easily have been a much<br>&gt; bigger number if there weren’t such pervasive usage of ivars in the code.).<br>&gt;<br>&gt; In the Swift version, there are ~1,000 explicit references to self, mostly<br>&gt; in initializers and when passing self as an argument to a protocol — and<br>&gt; about 10% of those would disappear with the proposal to allow implicit<br>&gt; references to self with a strong capture list.<br>&gt;<br>&gt; I know self is just a 4-letter word, and I know Swift’s goal isn’t to<br>&gt; reduce character count simply for the sake of reducing character count, but<br>&gt; it least for our project, avoiding “self”-blindness has really mode code<br>&gt; more readable.<br>&gt;<br>&gt;<br>&gt; On Dec 16, 2015, at 1:55 PM, Douglas Gregor via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of “Require self for accessing instance members” begins now and<br>&gt; runs through Sunday, December 20th. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt; * What is your evaluation of the proposal?<br>&gt; * Is the problem being addressed significant enough to warrant a change<br>&gt; to Swift?<br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt; * If you have you used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt; * How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Cheers,<br>&gt; Doug Gregor<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt;<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/5aca5025/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00435f154d85e9aabaf8d76687233b42?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Benjamin Deming</string> &lt;ben at bendeming.com&gt;<p>December 20, 2015 at 06:00:00pm</p></header><div class="content"><p>* What is your evaluation of the proposal?<br></p><p>I am against.<br></p><p>* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>No. <br></p><p>Quoting the proposal: <br></p><p>&gt; Lets the compiler warn users (and avoids bugs) where the authors mean to use a local variable but instead are unknowingly using an instance property (and the other way round).<br></p><p>I’m unsure that this is so prevalent a programmer error that it should dictate an eventual breaking change in the language (in the proposal, the breaking change would occur starting in Swift 3.0). The provided example shows commented out declaration of a local variable that shadows an instance variable. That is the only apparent situation one would incur mistaken use of an instance member instead of a local variable having the same name. The proposed change seems like a large undertaking to prevent such a situation. Because whenever such a line would *not* be commented out, you would end up using the local variable because it shadows the instance variable. <br></p><p>The accidental commenting out of a local variable declaration would be easier to spot during a review or bug fixing than the “other way round”: meaning to use an instance member, but instead using a local variable. But one can enable the -Wshadow clang flag, and the compiler will omit a warning when shadowing of an instance member by a local variable occurs. That would fulfill the proposal’s desire for a compiler warning––for this case––although it would not be on by default. But for projects concerned by shadowing of instance members, it could be an option.<br></p><p>* Does this proposal fit well with the feel and direction of Swift?<br></p><p>My take on this is more handwave-y and philosophical as a lot of stylistic opinions can be. Requiring use of self when accessing instance members would feel like a vestige from Objective-C because you must do it in Objective-C and not in Swift.<br></p><p>For many, the majority of the time (e.g., when not specifying custom setters or getters for properties), use of properties *feel* much more like direct manipulation of backing storage than in Objective-C because you don’t have to specify `self` as when writing in Objective-C. In Obj-C, when setting or getting some property, you are sending a message to self, so the required syntax, while still boilerplate-y, looks just like invocation of other kinds of methods either using brackets or dot syntax. Default setter and getter synthesis is less apparent in Swift..<br></p><p>* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Equivalent of a glance. I’ve been writing primarily in Swift for the last few months and being able to omit self has been really nice. It’s one of the places where Swift’s terseness feels most comfortable for me.<br></p><p>&gt; On Dec 20, 2015, at 7:54 AM, Kevin Lundberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; -1, for this reason, and for the extreme loss in conciseness already mentioned elsewhere. The purported extra clarity is not worth the extra burden placed on writing code in my opinion. I would favor a compiler warning at the most, and this can be solved on an individual/team basis with linting tools as well.<br>&gt; <br>&gt; On 12/18/2015 1:02 AM, Jed Lewison via swift-evolution wrote:<br>&gt;&gt; I’m not in favor of this proposal, and rather than repeat arguments that have already been made, I thought I’d share a small piece of data from the project I’m working on to illustrate the impact of implicit self in terms of reducing repetitive boilerplate cruft.<br>&gt;&gt; <br>&gt;&gt; Our project consists of a legacy ObjC code base for an iOS app and a new version written entirely in Swift. The feature set is largely the same in both code bases, so it’s a good A vs B comparison.<br>&gt;&gt; <br>&gt;&gt; In the Objective C version of the app, there are ~25,000 explicit references to self. (Keep in mind that this could easily have been a much bigger number if there weren’t such pervasive usage of ivars in the code.).<br>&gt;&gt; <br>&gt;&gt; In the Swift version, there are ~1,000 explicit references to self, mostly in initializers and when passing self as an argument to a protocol — and about 10% of those would disappear with the proposal to allow implicit references to self with a strong capture list.<br>&gt;&gt; <br>&gt;&gt; I know self is just a 4-letter word, and I know Swift’s goal isn’t to reduce character count simply for the sake of reducing character count, but it least for our project, avoiding “self”-blindness has really mode code more readable.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 16, 2015, at 1:55 PM, Douglas Gregor via swift-evolution &lt; &lt;mailto:swift-evolution at swift.org&gt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The review of “Require self for accessing instance members” begins now and runs through Sunday, December 20th. The proposal is available here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md&gt;https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	 &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	 &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	Cheers,<br>&gt;&gt;&gt; 	Doug Gregor<br>&gt;&gt;&gt; 	Review Manager<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt;  <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/77551d3d/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>December 17, 2015 at 11:00:00pm</p></header><div class="content"><p>* What is your evaluation of the proposal?<br></p><p>+1.<br></p><p>* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes. I believe that is much clarity lost. I also really dislike the inconsistent requirement of self in multiple contexts. When we talk about language rules, I really think it’s a disservice when there needs to be a lot of qualifiers. You use “self” in this context, but you don’t have to in this one, well, unless you then do that… This kind of explanation, in my opinion, signals a design flaw.<br></p><p>I’ve never encountered a bug in a language that requires self to access its members with shadowing, but I have had the opposite experience many, many times. While this doesn’t fix all shadowing issues, I do think it fixes the vast majority of them.<br></p><p>* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I’ve used languages on both sides. Most recently, I’ve been working with TypeScript. I don’t know the language well (at all really), it requires self for member access. I have to say, it’s really been a help for understanding what is where.<br></p><p>* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I’ve read through the threads and proposal and experience from languages that don’t require this and do.<br></p><p>-David<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b6a0b6562cd412f587c69d192f335161?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>plx</string> &lt;plxswift at icloud.com&gt;<p>December 18, 2015 at 12:00:00pm</p></header><div class="content"><p>Quite quickly: <br></p><p>I favor the proposal, but not for its stated reasons.<br></p><p>In isolation it’s not a big deal to have implicit-self or to not have implicit-self. It does offer real conveniences, albeit ones that are IMHO rather small-and-petty.<br></p><p>Given that, I think implicit self isn’t worth having if it gets in the way of higher-value features, and at least to my eyes that’s already happening.<br></p><p>Consider that both the &quot;method-chaining&quot; and the “introduce-new-scope-with-new-self” proposals have, to my read, stalled due to the apparent lack of any suitable syntax for them that’s:<br></p><p>- concise enough to be useful<br>- unambiguous enough to be implementable-and-usable<br>- in-line with / behaving-analogously-to the rest of the language<br></p><p>…with the concise syntax ideas being ambiguous largely due to issues either caused-by or made substantially-more-difficult due to implicit-self. <br></p><p>I could be mischaracterizing the issues those proposals encountered — in which case I apologize — but even so, this kind of consideration is why I’d be in favor of dropping implicit-self; I suspect it either complicates or rules-out too many other useful things to really &quot;pay it’s own way&quot;.<br></p><p>&gt; On Dec 16, 2015, at 12:55 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of “Require self for accessing instance members” begins now and runs through Sunday, December 20th. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md&gt;<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; <br>&gt; 	Cheers,<br>&gt; 	Doug Gregor<br>&gt; 	Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/cc69297b/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7bf23434de8dd5cd3e642fb8b402e542?s=50"></div><header><strong>[swift-evolution-announce] [Review] Require self for accessing instance members</strong> from <string>Tracy Keeling</string> &lt;tracer.eraser at gmail.com&gt;<p>December 18, 2015 at 10:00:00am</p></header><div class="content"><p>I just want to throw in a +1 for making self mandatory.  It is very<br>confusing for it to be optional.<br></p><p>As far as the discussion on warning against shadowed variables.... I think<br>the warning is useful outside of constructors, but I am more ambivalent on<br>that.<br></p><p>On Wed, Dec 16, 2015 at 10:55 AM, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of “Require self for accessing instance members” begins now and<br>&gt; runs through Sunday, December 20th. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt; * What is your evaluation of the proposal?<br>&gt; * Is the problem being addressed significant enough to warrant a change<br>&gt; to Swift?<br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt; * If you have you used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt; * How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Cheers,<br>&gt; Doug Gregor<br>&gt; Review Manager<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/6493552f/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e01e37acbfad671da1b94a61cf819d82?s=50"></div><header><strong>[swift-evolution-announce] [Review] Require self for accessing instance members</strong> from <string>Kenny Leung</string> &lt;kenny_leung at pobox.com&gt;<p>December 18, 2015 at 09:00:00pm</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>+1 for it.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes. I feel it makes things more correct.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes. One of Swift’s goals is to be clear in reading, and this makes it it readily explicit when an instance property or function is being referred to when reading over code.<br></p><p>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I prefer a shorter syntax, like Ruby’s @blah. It will serve the same purpose, and save some space and typing. In fact, I would prefer to have all scopes of variables decorated so you could tell them all at a glance:<br>    - local variables have no decoration<br>    - instance properties with @<br>    - arguments with $<br>    - statics, globals, etc…<br>    - types that I have to worry about mutating because someone else might have a reference to it vs. ones that I don’t have to worry about. (I used to think this was structs vs classes, but after being on this list I’m not so sure…)<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I have read about half of the posts on this.<br></p><p>--------------------<br></p><p>Considering this makes me think - if self were not required:<br></p><p>you have a standalone function foo()<br></p><p>you also have an instance method foo()<br></p><p>If you have another instance method<br></p><p>func bar() {<br>    //Could you ever call the standalone function foo?<br>    foo()<br>}<br></p><p><br>-Kenny<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d042be5dcfe90e649f760303af3e429?s=50"></div><header><strong>[swift-evolution-announce] [Review] Require self for accessing instance members</strong> from <string>Jens Persson</string> &lt;jens at bitcycle.com&gt;<p>December 19, 2015 at 07:00:00am</p></header><div class="content"><p>Yes, to call the standalone foo, you&#39;d call it on its module name:<br>TheModuleOfFoo.foo()<br></p><p>On Sat, Dec 19, 2015 at 6:52 AM, Kenny Leung via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; &gt;       * What is your evaluation of the proposal?<br>&gt;<br>&gt; +1 for it.<br>&gt;<br>&gt; &gt;       * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;<br>&gt; Yes. I feel it makes things more correct.<br>&gt;<br>&gt; &gt;       * Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>&gt; Yes. One of Swift’s goals is to be clear in reading, and this makes it it<br>&gt; readily explicit when an instance property or function is being referred to<br>&gt; when reading over code.<br>&gt;<br>&gt; &gt;       * If you have you used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;<br>&gt; I prefer a shorter syntax, like Ruby’s @blah. It will serve the same<br>&gt; purpose, and save some space and typing. In fact, I would prefer to have<br>&gt; all scopes of variables decorated so you could tell them all at a glance:<br>&gt;     - local variables have no decoration<br>&gt;     - instance properties with @<br>&gt;     - arguments with $<br>&gt;     - statics, globals, etc…<br>&gt;     - types that I have to worry about mutating because someone else might<br>&gt; have a reference to it vs. ones that I don’t have to worry about. (I used<br>&gt; to think this was structs vs classes, but after being on this list I’m not<br>&gt; so sure…)<br>&gt;<br>&gt; &gt;       * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br>&gt; I have read about half of the posts on this.<br>&gt;<br>&gt; --------------------<br>&gt;<br>&gt; Considering this makes me think - if self were not required:<br>&gt;<br>&gt; you have a standalone function foo()<br>&gt;<br>&gt; you also have an instance method foo()<br>&gt;<br>&gt; If you have another instance method<br>&gt;<br>&gt; func bar() {<br>&gt;     //Could you ever call the standalone function foo?<br>&gt;     foo()<br>&gt; }<br>&gt;<br>&gt;<br>&gt; -Kenny<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p><br></p><p>-- <br>bitCycle AB | Smedjegatan 12 | 742 32 Östhammar | Sweden<br>http://www.bitcycle.com/<br>Phone: +46-73-753 24 62<br>E-mail: jens at bitcycle.com<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/856b1364/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e01e37acbfad671da1b94a61cf819d82?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Kenny Leung</string> &lt;kenny_leung at pobox.com&gt;<p>December 18, 2015 at 10:00:00pm</p></header><div class="content"><p>I know I’m responding to myself here, but a couple more points:<br></p><p>1. I’ve programmed in Objective-C for many years, and I don’t feel like I’ve used “self” all that often.<br></p><p>2. If we do enforce self, method cascading would mitigate some of the repetition.<br></p><p>-Kenny<br></p><p><br>&gt; On Dec 18, 2015, at 9:52 PM, Kenny Leung via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt; <br>&gt; +1 for it.<br>&gt; <br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; Yes. I feel it makes things more correct.<br>&gt; <br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; Yes. One of Swift’s goals is to be clear in reading, and this makes it it readily explicit when an instance property or function is being referred to when reading over code.<br>&gt; <br>&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; I prefer a shorter syntax, like Ruby’s @blah. It will serve the same purpose, and save some space and typing. In fact, I would prefer to have all scopes of variables decorated so you could tell them all at a glance:<br>&gt;    - local variables have no decoration<br>&gt;    - instance properties with @<br>&gt;    - arguments with $<br>&gt;    - statics, globals, etc…<br>&gt;    - types that I have to worry about mutating because someone else might have a reference to it vs. ones that I don’t have to worry about. (I used to think this was structs vs classes, but after being on this list I’m not so sure…)<br>&gt; <br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; I have read about half of the posts on this.<br>&gt; <br>&gt; --------------------<br>&gt; <br>&gt; Considering this makes me think - if self were not required:<br>&gt; <br>&gt; you have a standalone function foo()<br>&gt; <br>&gt; you also have an instance method foo()<br>&gt; <br>&gt; If you have another instance method<br>&gt; <br>&gt; func bar() {<br>&gt;    //Could you ever call the standalone function foo?<br>&gt;    foo()<br>&gt; }<br>&gt; <br>&gt; <br>&gt; -Kenny<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>December 19, 2015 at 10:00:00am</p></header><div class="content"><p>&gt; 2. If we do enforce self, method cascading would mitigate some of the repetition.<br>If both ideas would be decided in a package, I&#39;d rather have method cascading and required self than none of it - but I really doubt that those who want to enforce self where it is optional would vote for any shortcut to work around it...<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>December 19, 2015 at 12:00:00am</p></header><div class="content"><p>* What is your evaluation of the proposal?<br></p><p>+1. I support this proposal, although I would be in favor of making it optional via a command-line switch on the compiler, as a courtesy to those who don’t agree.<br></p><p>* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes. Implicit self has been, in my experience, an effective cloaking device for bugs, from accidental property accesses after a shadowing variable has been deleted to just plain weird things like the infamous NSView print bug, in which calling print() to log something to the console ended up actually printing the contents of the view onto paper and ink. It also makes code less readable, as it is not immediately obvious whether the entity being referenced is a property, a global, or a local variable.<br></p><p>One can, of course, enforce self. through a style guide, however, as others have noted, coders are human. I myself have caught several accidental usages of implicit self in my own code, and I imagine others have as well.<br></p><p>Reading some of the “nay” votes on this list, I started realizing that there is a performance issue here, as well. Several people have commented on the following pattern, inherited from Objective-C:<br></p><p>func doSomething() {<br>	let foo = self.foo<br>	<br>	self.barWithFoo(foo)<br>	self.bazWithFoo(foo)<br>	self.quxWithFoo(foo)<br>}<br></p><p>deriding the above pattern as being a “poor practice” which is only done to get around the self requirement. My contention is that this is far from the case, and that there are good reasons for the above pattern:<br></p><p>1) Accessing a property, in a class, is more expensive than accessing a local variable. The above code would require three message sends and/or vtable accesses instead of one, if it were not assigning the property to a local variable. These unnecessary property accesses needlessly reduce the efficiency of the program.<br></p><p>2) In a multi-threaded program, it is conceivable that the value of self.foo could change in between accesses to it. If the logic of doSomething() does not take this possibility into account (or protect itself with a locking mechanism or some such), this could lead to all sorts of odd behavior.<br></p><p>The upshot is that treating property accesses as if they were local variables can encourage developers not to keep in mind the costs and dangers of property accesses.<br></p><p>* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes. Despite what others have written, self.foo does not come across to me as particularly verbose. Objective-C was a verbose language, but it was not because of self. It was because -methodNamesTendedToBeWrittenToLookALotLikeThisWithLotsAndLotsOfCamelCaseWords:thatWentOn:andOn:andOn:andOn:.<br></p><p>* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I’ve done Objective-C coding for quite a long time, and was never bothered by the need to use self to access properties. I *was* bothered by the fact that instance variables were implicitly referenced without self-&gt;, making them far too easy to accidentally reference. I find it telling that almost everyone eventually ended up standardizing on the underscore prefixes for ivar names, just to avoid this issue.<br></p><p>Charles<br></p><p>&gt; On Dec 16, 2015, at 12:55 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of “Require self for accessing instance members” begins now and runs through Sunday, December 20th. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md&gt;<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; <br>&gt; 	Cheers,<br>&gt; 	Doug Gregor<br>&gt; 	Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/5636ee04/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>December 19, 2015 at 10:00:00am</p></header><div class="content"><p>imho the most valuable vote for mandatory self, just one comment on it <br></p><p>&gt; 1) Accessing a property, in a class, is more expensive than accessing a local variable. The above code would require three message sends and/or vtable accesses instead of one, if it were not assigning the property to a local variable. These unnecessary property accesses needlessly reduce the efficiency of the program.<br>True for Objective-C, and might be true for Swift in many cases as well - but just because of legacy reasons:<br>Correct me if I&#39;m wrong, but I expect that simple getters have no performance penalty at all.<br>Nonetheless, you can&#39;t see how expensive the access is, and the effects in multi-threaded environments are a real issue - but those two reasons are no argument for mandatory self, but rather against it:<br>When there are issues with repetitive access, you can just insert a &quot;let foo = self.foo&quot;, and the problem is gone; you can&#39;t do so when you already referenced the variable with &quot;self.foo&quot; all over the place.<br>This is imho one of the most important lessons to learn from this thread:<br>Just don&#39;t give your variables confusing names, unless you have good reason to do so!<br></p><p>Best regards,<br>Tino<br></p><p>p.s.:<br>I&#39;ve have read an article that advises not to cache getters at all - but couldn&#39;t remember or search a reference for this. Afair the proposal came from a Java-background - which fits to my memory that the possible performance problems weren&#39;t addressed ;-)<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/b0ce5181/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>December 19, 2015 at 12:00:00pm</p></header><div class="content"><p>&gt; On Dec 19, 2015, at 3:02 AM, Tino Heth &lt;2th at gmx.de&gt; wrote:<br>&gt; <br>&gt; imho the most valuable vote for mandatory self, just one comment on it <br>&gt; <br>&gt;&gt; 1) Accessing a property, in a class, is more expensive than accessing a local variable. The above code would require three message sends and/or vtable accesses instead of one, if it were not assigning the property to a local variable. These unnecessary property accesses needlessly reduce the efficiency of the program.<br>&gt; True for Objective-C, and might be true for Swift in many cases as well - but just because of legacy reasons:<br>&gt; Correct me if I&#39;m wrong, but I expect that simple getters have no performance penalty at all.<br></p><p>If a property isn’t marked final, it can be overridden by a subclass. That suggests to me that a vtable lookup is necessary at the very least. Keep in mind also that the property may be computed (and if it’s not, it might *become* a computed property at some point in the future), in which case the performance penalty could be *anything*. It could be an atomic property which takes a lock every single time it’s accessed. It could run some complex computation involving a host of other properties which themselves have unknown costs. It could even be doing something like loading something off the disk each time. Unless you have the source, you just don’t know. (And even if you *do* have the source, hunting down every single access of the property in the future won’t be fun if it becomes necessary to make the property computed in the future).<br></p><p>IMHO, best practice is to load the property once and then use the result of that, instead of spamming the getter over and over and over.<br></p><p>Charles<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/80867f82/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>[Review] Require self for accessing instance members</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>December 19, 2015 at 12:00:00pm</p></header><div class="content"><p>&gt; On Dec 19, 2015, at 12:23 PM, Charles Srstka via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Dec 19, 2015, at 3:02 AM, Tino Heth &lt;2th at gmx.de &lt;mailto:2th at gmx.de&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; imho the most valuable vote for mandatory self, just one comment on it <br>&gt;&gt; <br>&gt;&gt;&gt; 1) Accessing a property, in a class, is more expensive than accessing a local variable. The above code would require three message sends and/or vtable accesses instead of one, if it were not assigning the property to a local variable. These unnecessary property accesses needlessly reduce the efficiency of the program.<br>&gt;&gt; True for Objective-C, and might be true for Swift in many cases as well - but just because of legacy reasons:<br>&gt;&gt; Correct me if I&#39;m wrong, but I expect that simple getters have no performance penalty at all.<br>&gt; <br>&gt; If a property isn’t marked final, it can be overridden by a subclass. That suggests to me that a vtable lookup is necessary at the very least. Keep in mind also that the property may be computed (and if it’s not, it might *become* a computed property at some point in the future), in which case the performance penalty could be *anything*. It could be an atomic property which takes a lock every single time it’s accessed. It could run some complex computation involving a host of other properties which themselves have unknown costs. It could even be doing something like loading something off the disk each time. Unless you have the source, you just don’t know. (And even if you *do* have the source, hunting down every single access of the property in the future won’t be fun if it becomes necessary to make the property computed in the future).<br>&gt; <br>&gt; IMHO, best practice is to load the property once and then use the result of that, instead of spamming the getter over and over and over.<br></p><p>Another thing worth keeping in mind is that Apple has stated interest in fixing the fragile base-class problem in Swift (as, indeed, they will need to if it is to be usable as a framework language). However they solve this, it will have to create some kind of layer of indirection indirection when accessing instance members of classes (and possibly even structs, if they decide that framework authors should have the flexibility to add things to those as well). A small penalty, but still one to be aware of.<br></p><p>Charles<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/5ce9f698/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
