<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] SE-0109: Remove the Boolean protocol</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>June 28, 2016 at 11:00:00pm</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of SE-0109 &quot;Remove the Boolean protocol&quot; begins now and runs through July 4, 2016. The proposal is available here:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0109-remove-boolean.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0109-remove-boolean.md&gt;<br>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br></p><p>Proposal link:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0109-remove-boolean.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0109-remove-boolean.md&gt;<br>Reply text<br></p><p>Other replies<br> &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>What is your evaluation of the proposal?<br>Is the problem being addressed significant enough to warrant a change to Swift?<br>Does this proposal fit well with the feel and direction of Swift?<br>If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>More information about the Swift evolution process is available at<br></p><p>https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>Thank you,<br></p><p>-Doug<br></p><p>Review Manager<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160628/036c0ca0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5818a8a9211c31af95d6db8974457683?s=50"></div><header><strong>[Review] SE-0109: Remove the Boolean protocol</strong> from <string>Joseph Lord</string> &lt;joseph at human-friendly.com&gt;<p>June 29, 2016 at 09:00:00am</p></header><div class="content"><p>https://github.com/apple/swift-evolution/blob/master/proposals/0109-remove-boolean.md<br></p><p>  &gt;   * What is your evaluation of the proposal?<br></p><p>Agree.<br></p><p>In extensive Swift use I&#39;ve never had cause to actively use Boolean <br>rather than Bool.<br></p><p>If there is a need to keep it (which I don&#39;t see) I think it would be <br>better renamed to something less succinct and confusing.<br></p><p>&gt;   * Is the problem being addressed significant enough to warrant a<br>&gt;     change to Swift?<br></p><p>Yes. Removing things, especially confusing things is good when there is <br>little impact.<br></p><p>&gt;   * Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>&gt;   * How much effort did you put into your review? A glance, a quick<br>&gt;     reading, or an in-depth study?<br>&gt;<br></p><p>Quick read.<br></p><p>Joseph<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/566528c7f7c28c35c0c646d415943612?s=50"></div><header><strong>[Review] SE-0109: Remove the Boolean protocol</strong> from <string>Taras Zakharko</string> &lt;taras.zakharko at uzh.ch&gt;<p>June 29, 2016 at 02:00:00pm</p></header><div class="content"><p>Just a quick clarification: I was under impression that the utility of Boolean was that one could extend any type to behave as a boolean type and thus be used in control flow constructions etc. Not something that has to do often, but nice to have nevertheless. I would be sad if this functionality were to go. At the same time, I understand the rationale behind this proposal. Maybe we could introduce something like CustomBoolConvertible instead (if not yet suggested)?<br></p><p>Best, <br></p><p> Taras<br></p><p><br>&gt; On 29 Jun 2016, at 08:44, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0109 &quot;Remove the Boolean protocol&quot; begins now and runs through July 4, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0109-remove-boolean.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0109-remove-boolean.md&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0109-remove-boolean.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0109-remove-boolean.md&gt;<br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt;  &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; What is your evaluation of the proposal?<br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; Thank you,<br>&gt; <br>&gt; -Doug<br>&gt; <br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160629/c5950055/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[Review] SE-0109: Remove the Boolean protocol</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>June 29, 2016 at 07:00:00am</p></header><div class="content"><p>Ha! You clicked send 4 minutes before I did :-) <br>&gt; On Jun 29, 2016, at 7:48 AM, Taras Zakharko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Just a quick clarification: I was under impression that the utility of Boolean was that one could extend any type to behave as a boolean type and thus be used in control flow constructions etc. Not something that has to do often, but nice to have nevertheless. I would be sad if this functionality were to go. At the same time, I understand the rationale behind this proposal. Maybe we could introduce something like CustomBoolConvertible instead (if not yet suggested)?<br>&gt; <br>&gt; Best, <br>&gt; <br>&gt;  Taras<br>&gt; <br>&gt; <br>&gt;&gt; On 29 Jun 2016, at 08:44, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of SE-0109 &quot;Remove the Boolean protocol&quot; begins now and runs through July 4, 2016. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0109-remove-boolean.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0109-remove-boolean.md&gt;<br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt;&gt; <br>&gt;&gt; Proposal link:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0109-remove-boolean.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0109-remove-boolean.md&gt;<br>&gt;&gt; Reply text<br>&gt;&gt; <br>&gt;&gt; Other replies<br>&gt;&gt;  &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; What is your evaluation of the proposal?<br>&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Doug<br>&gt;&gt; <br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160629/c4bcdb1b/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0109: Remove the Boolean protocol</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>June 29, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Jun 29, 2016, at 5:48 AM, Taras Zakharko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Just a quick clarification: I was under impression that the utility of Boolean was that one could extend any type to behave as a boolean type and thus be used in control flow constructions etc. Not something that has to do often, but nice to have nevertheless.<br></p><p>The baseline is not generally whether something that is “nice to have nevertheless”.  A better way to look at legacy features like this is: if Swift 3 didn’t already have this feature, would we add it now?<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>[Review] SE-0109: Remove the Boolean protocol</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>June 29, 2016 at 08:00:00pm</p></header><div class="content"><p>Is Swift  that old that we can really talk about &#39;legacy&#39; features though? Should we give language features more time to shine and get more people on board on this mailing list and at Apple Dev conferences giving feedback?<br></p><p>Sent from my iPhone<br></p><p>&gt; On 29 Jun 2016, at 20:37, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 29, 2016, at 5:48 AM, Taras Zakharko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Just a quick clarification: I was under impression that the utility of Boolean was that one could extend any type to behave as a boolean type and thus be used in control flow constructions etc. Not something that has to do often, but nice to have nevertheless.<br>&gt; <br>&gt; The baseline is not generally whether something that is “nice to have nevertheless”.  A better way to look at legacy features like this is: if Swift 3 didn’t already have this feature, would we add it now?<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/566528c7f7c28c35c0c646d415943612?s=50"></div><header><strong>[Review] SE-0109: Remove the Boolean protocol</strong> from <string>Taras Zakharko</string> &lt;taras.zakharko at uzh.ch&gt;<p>June 29, 2016 at 10:00:00pm</p></header><div class="content"><p>If it didn’t have it, I am sure that we’d sooner or later get a request for CustomBoolConvertible :) Bool is a magic type which is privileged by the compiler for control-flow constructions. Having a hook into that magic would allow the programmer to more clearly express certain models (there are examples in this thread). Not to mention that we already have a precedent : CustomStringConvertible (I don’t suppose anyone would argue for removing THAT). I agree that conversion to boolean has less utility, but IMO removing a hook into privileged Bool type makes the language more asymmetrical and is not a design choice I would make. <br></p><p>Anyway, I think I’ve made my arguments clear. Sorry for the noise. For a full feedback:<br></p><p>What is your evaluation of the proposal?<br>-1. Implicit Bool conversion is a useful utility when modelling logical entities. The confusion between Boolean and Bool can be solved by refactoring  Boolean into CustomBoolConvertible<br></p><p>Is the problem being addressed significant enough to warrant a change to Swift?<br>Yes (confusion potential), but removing the protocol over renaming it removes useful functionality from the language. <br></p><p>Does this proposal fit well with the feel and direction of Swift?<br>IMO, no. So far, general concepts/models are playing a vital role in Swift and are source of its elegance. Boolean might be a ’small’ feature, but its a natural part of the system.   <br></p><p>If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>Most modern scripting languages offer a boolean conversion hook. Its a useful thing to have. <br></p><p>How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>A glance. <br></p><p>&gt; On 29 Jun 2016, at 21:37, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 29, 2016, at 5:48 AM, Taras Zakharko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Just a quick clarification: I was under impression that the utility of Boolean was that one could extend any type to behave as a boolean type and thus be used in control flow constructions etc. Not something that has to do often, but nice to have nevertheless.<br>&gt; <br>&gt; The baseline is not generally whether something that is “nice to have nevertheless”.  A better way to look at legacy features like this is: if Swift 3 didn’t already have this feature, would we add it now?<br>&gt; <br>&gt; -Chris<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160629/ef6f74e1/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[Review] SE-0109: Remove the Boolean protocol</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>June 29, 2016 at 07:00:00am</p></header><div class="content"><p>Aside from confusing people, does it actually hurt anything? It&#39;s not too hard to imagine that someone might make a type conform to `Boolean` because, within their code, the semantics of &quot;x || y” are clear and that reads better than &quot;x.foo || y.foo&quot;.<br></p><p>I agree it feels out of place, though. What about renaming it to something like &quot;CustomBooleanConvertible”?<br></p><p>- Dave Sweeris<br></p><p><br>On Jun 29, 2016, at 01:44, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0109 &quot;Remove the Boolean protocol&quot; begins now and runs through July 4, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0109-remove-boolean.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0109-remove-boolean.md&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0109-remove-boolean.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0109-remove-boolean.md&gt;<br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt;  &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; What is your evaluation of the proposal?<br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; Thank you,<br>&gt; <br>&gt; -Doug<br>&gt; <br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160629/a07ac9d1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Review] SE-0109: Remove the Boolean protocol</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>June 29, 2016 at 08:00:00am</p></header><div class="content"><p>Sent from my iPad<br></p><p>&gt; On Jun 29, 2016, at 7:52 AM, David Sweeris via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Aside from confusing people, does it actually hurt anything? It&#39;s not too hard to imagine that someone might make a type conform to `Boolean` because, within their code, the semantics of &quot;x || y” are clear and that reads better than &quot;x.foo || y.foo&quot;.<br>&gt; <br>&gt; I agree it feels out of place, though. What about renaming it to something like &quot;CustomBooleanConvertible”?<br></p><p>IIRC Optional conformed to this protocol early on and that conformance was removed.  In practice the idea of a protocol for &quot;truthiness&quot; to which non-Boolean types conform caused more confusion than it provided value.  It was a cool idea that just didn&#39;t work out so well.<br></p><p>IMO if it doesn&#39;t make sense for Optional to conform it is pretty unlikely it would make sense for other types to conform.  It seems like a good idea to remove the protocol.<br></p><p>&gt; <br>&gt; - Dave Sweeris<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 29, 2016, at 01:44, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of SE-0109 &quot;Remove the Boolean protocol&quot; begins now and runs through July 4, 2016. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0109-remove-boolean.md<br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt;&gt; <br>&gt;&gt; Proposal link:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0109-remove-boolean.md<br>&gt;&gt; Reply text<br>&gt;&gt; <br>&gt;&gt; Other replies<br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; What is your evaluation of the proposal?<br>&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Doug<br>&gt;&gt; <br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160629/f9177f13/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/566528c7f7c28c35c0c646d415943612?s=50"></div><header><strong>[Review] SE-0109: Remove the Boolean protocol</strong> from <string>Taras Zakharko</string> &lt;taras.zakharko at uzh.ch&gt;<p>June 29, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On 29 Jun 2016, at 15:47, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; IIRC Optional conformed to this protocol early on and that conformance was removed.  In practice the idea of a protocol for &quot;truthiness&quot; to which non-Boolean types conform caused more confusion than it provided value.  It was a cool idea that just didn&#39;t work out so well.<br>&gt; <br>&gt; IMO if it doesn&#39;t make sense for Optional to conform it is pretty unlikely it would make sense for other types to conform.  It seems like a good idea to remove the protocol.<br></p><p>I certainly agree that it doesn’t make much sense for Optional, but I believe that implicit bool conformance can be a desirable feature for a number of applications. For instance, imagine a logical inference library where you can have entities like Term or Formula. For those, Boolean conformance would make a lot of sense. Of course, one can also make explicit conversions e.g.:<br></p><p>extension Bool {<br> init(x: Term) { self = x.truthValue }<br>}<br></p><p>if Bool(f1) { … }<br></p><p>But since Bool is a syntactically privileged construct in the language, it makes sense to have it as a target of built-in type conversion support, for the same reason why we have CustomStringConvertible etc. <br></p><p>To be honest, I’d prefer to have a generic mechanism such as:<br></p><p>ImplicitConvertible&lt;T&gt; {<br>	var as -&gt; T { get }<br>} <br></p><p>to replace the Custom*Convertible and friends, but thats a different topic. <br></p><p>— Taras<br></p><p>&gt; <br>&gt;&gt; <br>&gt;&gt; - Dave Sweeris<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Jun 29, 2016, at 01:44, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The review of SE-0109 &quot;Remove the Boolean protocol&quot; begins now and runs through July 4, 2016. The proposal is available here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0109-remove-boolean.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0109-remove-boolean.md&gt;<br>&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Proposal link:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0109-remove-boolean.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0109-remove-boolean.md&gt;<br>&gt;&gt;&gt; Reply text<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Other replies<br>&gt;&gt;&gt;  &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What is your evaluation of the proposal?<br>&gt;&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Doug<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160629/12cb1098/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[Review] SE-0109: Remove the Boolean protocol</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>June 29, 2016 at 11:00:00am</p></header><div class="content"><p>On Jun 29, 2016, at 8:47 AM, Matthew Johnson &lt;matthew at anandabits.com&gt; wrote:<br>&gt; <br>&gt; On Jun 29, 2016, at 7:52 AM, David Sweeris via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Aside from confusing people, does it actually hurt anything? It&#39;s not too hard to imagine that someone might make a type conform to `Boolean` because, within their code, the semantics of &quot;x || y” are clear and that reads better than &quot;x.foo || y.foo&quot;.<br>&gt;&gt; <br>&gt;&gt; I agree it feels out of place, though. What about renaming it to something like &quot;CustomBooleanConvertible”?<br>&gt; <br>&gt; IIRC Optional conformed to this protocol early on and that conformance was removed.  In practice the idea of a protocol for &quot;truthiness&quot; to which non-Boolean types conform caused more confusion than it provided value.  It was a cool idea that just didn&#39;t work out so well.<br>&gt; <br>&gt; IMO if it doesn&#39;t make sense for Optional to conform it is pretty unlikely it would make sense for other types to conform.  It seems like a good idea to remove the protocol.<br></p><p>What if you wanted to do something like this?<br>class RemoteBool : Boolean {<br>    let url: URL<br>    private var cachedValue: Bool? = nil // gets updated periodically in another thread or some other async method<br>    init(boolURL: URL) { url = boolURL; sync_update() }<br>    var boolValue: Bool { return cachedValue ?? sync_update() }<br>    func sync_update() -&gt; Bool {…} // synchronously sets `cachedValue` and returns the newValue<br>    func async_update() {…} // asynchronously sets `cachedValue`<br>}<br></p><p>Or experiment with how ternary logic interacts with boolean logic?<br>protocol Ternary : Boolean, BooleanLiteralConvertible, NilLiteralConvertible {<br>    static var forcedBoolValue: Bool { get }<br>    var ternValue: Bool? { get set }<br>    init(_: Bool?)<br>}<br>extension Ternary {<br>    var boolValue: Bool { return ternValue ?? Self.forcedBoolValue }<br>    init(booleanLiteral value: Bool) { self.init(value) }<br>    init(nilLiteral: ()) { self.init(nil) }<br>}<br>struct TendsTrue: Ternary {<br>    static let forcedBoolValue = true<br>    var ternValue: Bool?<br>    init(_ value: Bool?) { ternValue = value }<br>}<br>struct TendsFalse: Ternary {<br>    static let forcedBoolValue = false<br>    var ternValue: Bool?<br>    init(_ value: Bool?) { ternValue = value }<br>}<br></p><p>Yeah, sure, in either case you could go through and use extensions to add support for your custom type on an as-needed basis. Life would be way easier, though, if the standard library was simply coded to an abstracted boolean protocol. Isn’t this kind of scenario that led to Swift having generics?<br></p><p>Renaming `Boolean` to something that doesn’t sort next to `Bool` removes the source of confusion. And while I completely agree that the standard library should be consistent it its use of abstraction protocols vs concrete types, in this regard I think this proposal goes in the wrong direction (although, in my whatever-the-opposite-of-defense-is I’m a huge fan of having generic library code wherever possible, so maybe I’m biased).<br></p><p>Is there a downside to overloading any function which takes a Bool with a version that takes a “CustomBooleanConvertible”?<br>func foo(_ bar: Bool) {} // pretend this exists in the standard library<br>func foo &lt;T: CustomBooleanConvertible&gt; (_ bar: T) { foo(bar.boolValue) } // add this, and keep the concrete version as well, both to provide the actual implementation and to prevent the generic version from recursively calling itself<br></p><p>- Dave Sweeris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160629/a1e65632/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e910871dda004717de19e83626308b5a?s=50"></div><header><strong>[Review] SE-0109: Remove the Boolean protocol</strong> from <string>Tony Allevato</string> &lt;allevato at google.com&gt;<p>June 29, 2016 at 08:00:00pm</p></header><div class="content"><p>On Tue, Jun 28, 2016 at 11:44 PM Douglas Gregor via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of SE-0109 &quot;Remove the Boolean protocol&quot; begins now and runs<br>&gt; through July 4, 2016. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0109-remove-boolean.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager. When replying, please try to keep the proposal link at the<br>&gt; top of the message:<br>&gt;<br>&gt; Proposal link:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0109-remove-boolean.md<br>&gt;<br>&gt; Reply text<br>&gt;<br>&gt; Other replies<br>&gt;<br>&gt; &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What<br>&gt; goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt;    - What is your evaluation of the proposal?<br>&gt;<br>&gt; +1. Having two similarly named types is confusing to newcomers (especially<br>those from languages where &quot;Boolean&quot; is the preferred term instead of<br>&quot;Bool&quot;) and the Boolean protocol has very little use.<br></p><p><br></p><p>&gt;<br>&gt;    - Is the problem being addressed significant enough to warrant a<br>&gt;    change to Swift?<br>&gt;<br>&gt; Yes.<br></p><p><br></p><p>&gt;<br>&gt;    - Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>&gt; Yes. Indeed, the fact that any type can conform to Boolean and get an<br>implicit conversion in if statements and Boolean expressions is very<br>un-Swift-like; the language currently prefers explicit and safe conversions<br>instead of implicit ones. I would be surprised by a language that doesn&#39;t<br>let me implicitly convert two similar types like Int32 and Int but would<br>let me implicitly convert anything I wanted to Boolean.<br></p><p>Giving users the ability to implicitly treat anything as a Boolean in those<br>contexts harms the readability of code, IMO. It forces readers to track<br>down the meaning in a place that isn&#39;t evident from that line of code. If I<br>see something like this:<br></p><p>    struct SomeValue: Boolean { ... }<br></p><p>    func foo(x: SomeValue) {<br>        if x {<br>            ...<br>        }<br>    }<br></p><p>...where do I go to find the meaning of this? The user isn&#39;t querying<br>.boolValue explicitly, so I can&#39;t hover over that and get to its<br>documentation. Maybe they didn&#39;t even document that property from the<br>conformance, so I have to go on a fishing expedition through the type&#39;s<br>documentation to figure out which values map to true and which map to false.<br></p><p>I like that Swift tends away from such &quot;magic&quot; and forces the user to say<br>what they mean. If a developer was writing an arbitrary type where they<br>wanted to use this, I would want to know why they think that&#39;s better than<br>*saying what they mean*—in many cases, I would expect that a property like<br>&quot;isValid&quot;, &quot;isEmpty&quot;, &quot;exists&quot;, or any number of other assertions would<br>clarify the meaning and read better in a world where we put so much<br>emphasis on API design/naming.<br></p><p><br></p><p>&gt;<br>&gt;    - If you have used other languages or libraries with a similar<br>&gt;    feature, how do you feel that this proposal compares to those?<br>&gt;<br>&gt; Many languages provide implicit conversions between some of its types and<br>boolean contexts (Javascript, Python, PHP), or a way to define custom<br>conversions (C++), and it&#39;s almost always clever, mysterious, or horrible.<br>I definitely don&#39;t want to see Swift going down the road of users writing<br>or extending types to make them work magically as if they were booleans. An<br>extra property/method call or comparison is not onerous. Let&#39;s nip this in<br>the bud now.<br></p><p><br></p><p>&gt;<br>&gt;    - How much effort did you put into your review? A glance, a quick<br>&gt;    reading, or an in-depth study?<br>&gt;<br>&gt; Briefly read the proposal.<br></p><p><br></p><p>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Doug<br>&gt;<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160629/69e7d90c/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Review] SE-0109: Remove the Boolean protocol</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>June 29, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0109-remove-boolean.md<br></p><p>&gt; 	• What is your evaluation of the proposal?<br></p><p>+1. I hope we eventually get this functionality back through a more flexible mechanism—either subtyping Bool or a protocol for creating custom conditional constructs[1]—but I don&#39;t think `Boolean` is really carrying its weight at this point.<br></p><p>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes. We&#39;re trying to get rid of this kind of thing now.<br></p><p>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br></p><p>See previous.<br></p><p>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>The only language I&#39;ve used <br></p><p>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick reading.<br></p><p><br></p><p>[1] For instance, if we have a pattern matching protocol like this:<br></p><p>	// Allows for `if case .foo(let bar, let baz) = quux`-style pattern matching.<br>	protocol PatternProtocol {<br>		associatedtype Value<br>		associatedtype Destructured = Void<br>		<br>		// Returns nil for a failed match, or the destructured values for a <br>		// successful match.<br>		func match(for value: Value) -&gt; Destructured?<br>		<br>		// One could also imagine a `func init(values...: Destructured) -&gt; Value` here<br>	}<br>	<br>	// Enum cases would have a pattern as one of their &quot;aspects&quot;, as though <br>	// they had things like:<br>	extension Optional {<br>		static let none: Pattern.None<br>		static let some: Pattern.Some<br>		<br>		enum Pattern {<br>			struct None: PatternProtocol {<br>				typealias Value = Optional&lt;Wrapped&gt;<br>				func match(for value: Value) -&gt; Void? { … }<br>			}<br>			struct Some: PatternProtocol {<br>				typealias Value = Optional&lt;Wrapped&gt;<br>				typealias Destructured = Wrapped<br>				func match(for value: Value) -&gt; Void? { … }<br>			}<br>		}	<br>	}<br>	<br>	// You could write your own patterns for other types:<br>	extension URL {<br>		static let http = SchemePattern(scheme: &quot;http&quot;)<br>		static let https = SchemePattern(scheme: &quot;https&quot;)<br>		static let mailto = SchemePattern(scheme: &quot;mailto&quot;)<br>		<br>		struct SchemePattern: PatternProtocol {<br>			associatedtype Value = URL<br>			associatedtype Destructured = (host: String, path: String)<br>			<br>			var scheme: String<br>			<br>			func match(for value: Value) -&gt; Destructured? {<br>				guard value.scheme == scheme else { return nil }<br>				return (value.host, value.path)<br>			}<br>		}<br>	}<br></p><p>Then we could offer a `ConditionalConvertible` protocol which would open up `if let` and plain `if` to other types:<br>	<br>	// Allows for `if let (bar, baz) = quux` and, if UnwrappedValues is Void, `if quux`.<br>	protocol ConditionalConvertible {<br>		associatedtype Conditional: PatternProtocol where ConditionalPattern.Value == Self<br>		static var conditional: Conditional<br>	}<br>	<br>	extension Optional: ConditionalConvertible {<br>		typealias Conditional = Pattern.Some<br>		static let conditional = some<br>	}<br>	<br>	extension Bool: ConditionalConvertible {<br>		struct Conditional: PatternProtocol {<br>			typealias Value = Bool<br>			<br>			func match(for value: Value) -&gt; Void? {<br>				// equivalent to...<br>				return value ? () : nil<br>			}<br>		}<br>		static let conditional = Conditional()<br>	}<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
