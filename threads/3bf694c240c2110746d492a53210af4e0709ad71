<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/eacfbb9e5bb4a4432bd629a8747f5d78?s=50"></div><header><strong>Revise GCD API to conform to API Design Guidelines</strong> from <string>Scott Gardner</string> &lt;scott.gardner at mac.com&gt;<p>February 13, 2016 at 09:00:00am</p></header><div class="content"><p>Hello everyone!<br></p><p>I would like to submit the following rough sketch of a proposal to revise the GCD API syntax to adhere to the API Design Guidelines, in order to gauge interest and collect feedback and suggestions.<br></p><p>Here is a preliminary proposal outline:<br></p><p>Author: Scott Gardner<br></p><p>Introduction<br></p><p>I propose that the Grand Central Dispatch (GCD) API be revised. GCD function signatures use snake-casing and are devoid of parameter names. This syntax does not conform to the Swift API Design Guidelines (“API guidelines”).<br></p><p><br>Motivation<br></p><p>The GCD API provides a rich set of capabilities for writing concurrent code. Yet GCD’s syntax can be a barrier to entry for developers, because it does not conform to the API guidelines.<br></p><p><br>Proposed solution<br></p><p>I propose revising the GCD API to follow the API guidelines. For example, instead of writing the following code to execute an operation asynchronously and then return to the main queue, such as to update the UI...<br></p><p>let concurrentQueue = dispatch_queue_create(&quot;com.scotteg.concurrent&quot;, DISPATCH_QUEUE_CONCURRENT)<br></p><p>dispatch_async(concurrentQueue) {<br>  // ...<br>  <br>  dispatch_async(dispatch_get_main_queue()) {<br>    // ...<br>  }<br>}<br></p><p>…this should be able to written in a more Swifty manner, e.g.,...<br></p><p>let concurrentQueue = GCDQueue(.Concurrent, withIdentifier: &quot;com.scotteg.concurrent&quot;)<br></p><p>GCD.enqueueOn(concurrentQueue) {<br>  // ...<br>  <br>  GCD.enqueueOn(.Main) {<br>    // ...<br>  }<br>}<br></p><p><br>Detailed design<br></p><p>TBD<br></p><p><br>Impact on existing code<br></p><p>This would be a wholesale replacement of syntax for the GCD API. A utility should also be created to convert pre-existing GCD code to the new syntax.<br></p><p><br>Alternatives considered<br></p><p>TBD<br></p><p><br>I would really appreciate your comments and suggestions, and I&#39;d certainly be willing and committed to completing this proposal based on community feedback.<br></p><p>Thanks!<br>Scott<br></p><p>--<br>Scott Gardner<br>http://scotteg.com &lt;http://scotteg.com/&gt;<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160213/3bf6ad71/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>Revise GCD API to conform to API Design Guidelines</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February 13, 2016 at 04:00:00pm</p></header><div class="content"><p>Certainly looks much nicer, but considering a major theme Swift 4 is likely to be concurrency, and in the meantime, this is easily solved with a 3rd party library — is it worth it?<br></p><p>SE-0006 admittedly changes Objective-C APIs *a lot*, but in a predictable way, without redesigning it from scratch. So, aside from minor enhancements to CGRect and the like, this would be a precedent AFAICT.<br></p><p>— Radek<br></p><p>&gt; On 13 Feb 2016, at 16:48, Scott Gardner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello everyone!<br>&gt; <br>&gt; I would like to submit the following rough sketch of a proposal to revise the GCD API syntax to adhere to the API Design Guidelines, in order to gauge interest and collect feedback and suggestions.<br>&gt; <br>&gt; Here is a preliminary proposal outline:<br>&gt; <br>&gt; Author: Scott Gardner<br>&gt; <br>&gt; Introduction<br>&gt; <br>&gt; I propose that the Grand Central Dispatch (GCD) API be revised. GCD function signatures use snake-casing and are devoid of parameter names. This syntax does not conform to the Swift API Design Guidelines (“API guidelines”).<br>&gt; <br>&gt; <br>&gt; Motivation<br>&gt; <br>&gt; The GCD API provides a rich set of capabilities for writing concurrent code. Yet GCD’s syntax can be a barrier to entry for developers, because it does not conform to the API guidelines.<br>&gt; <br>&gt; <br>&gt; Proposed solution<br>&gt; <br>&gt; I propose revising the GCD API to follow the API guidelines. For example, instead of writing the following code to execute an operation asynchronously and then return to the main queue, such as to update the UI...<br>&gt; <br>&gt; let concurrentQueue = dispatch_queue_create(&quot;com.scotteg.concurrent&quot;, DISPATCH_QUEUE_CONCURRENT)<br>&gt; <br>&gt; dispatch_async(concurrentQueue) {<br>&gt;   // ...<br>&gt;   <br>&gt;   dispatch_async(dispatch_get_main_queue()) {<br>&gt;     // ...<br>&gt;   }<br>&gt; }<br>&gt; <br>&gt; …this should be able to written in a more Swifty manner, e.g.,...<br>&gt; <br>&gt; let concurrentQueue = GCDQueue(.Concurrent, withIdentifier: &quot;com.scotteg.concurrent&quot;)<br>&gt; <br>&gt; GCD.enqueueOn(concurrentQueue) {<br>&gt;   // ...<br>&gt;   <br>&gt;   GCD.enqueueOn(.Main) {<br>&gt;     // ...<br>&gt;   }<br>&gt; }<br>&gt; <br>&gt; <br>&gt; Detailed design<br>&gt; <br>&gt; TBD<br>&gt; <br>&gt; <br>&gt; Impact on existing code<br>&gt; <br>&gt; This would be a wholesale replacement of syntax for the GCD API. A utility should also be created to convert pre-existing GCD code to the new syntax.<br>&gt; <br>&gt; <br>&gt; Alternatives considered<br>&gt; <br>&gt; TBD<br>&gt; <br>&gt; <br>&gt; I would really appreciate your comments and suggestions, and I&#39;d certainly be willing and committed to completing this proposal based on community feedback.<br>&gt; <br>&gt; Thanks!<br>&gt; Scott<br>&gt; <br>&gt; --<br>&gt; Scott Gardner<br>&gt; http://scotteg.com &lt;http://scotteg.com/&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160213/7d46ecb5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/eacfbb9e5bb4a4432bd629a8747f5d78?s=50"></div><header><strong>Revise GCD API to conform to API Design Guidelines</strong> from <string>Scott Gardner</string> &lt;scott.gardner at mac.com&gt;<p>February 13, 2016 at 10:00:00am</p></header><div class="content"><p>Thanks, and I totally agree that there are decent 3rd party libraries, such as Async that wraps GCD (https://github.com/duemunk/Async &lt;https://github.com/duemunk/Async&gt;). I submitted this because I feel it should not be solely the responsibility of 3rd party libraries to facilitate conformance of Apple API. Also, it puts the onus on newcomers to Swift, iOS, et al, to go find those 3rd party libraries. :]<br></p><p>Scott<br></p><p><br>&gt; On Feb 13, 2016, at 9:51 AM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>&gt; <br>&gt; Certainly looks much nicer, but considering a major theme Swift 4 is likely to be concurrency, and in the meantime, this is easily solved with a 3rd party library — is it worth it?<br>&gt; <br>&gt; SE-0006 admittedly changes Objective-C APIs *a lot*, but in a predictable way, without redesigning it from scratch. So, aside from minor enhancements to CGRect and the like, this would be a precedent AFAICT.<br>&gt; <br>&gt; — Radek<br>&gt; <br>&gt;&gt; On 13 Feb 2016, at 16:48, Scott Gardner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello everyone!<br>&gt;&gt; <br>&gt;&gt; I would like to submit the following rough sketch of a proposal to revise the GCD API syntax to adhere to the API Design Guidelines, in order to gauge interest and collect feedback and suggestions.<br>&gt;&gt; <br>&gt;&gt; Here is a preliminary proposal outline:<br>&gt;&gt; <br>&gt;&gt; Author: Scott Gardner<br>&gt;&gt; <br>&gt;&gt; Introduction<br>&gt;&gt; <br>&gt;&gt; I propose that the Grand Central Dispatch (GCD) API be revised. GCD function signatures use snake-casing and are devoid of parameter names. This syntax does not conform to the Swift API Design Guidelines (“API guidelines”).<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Motivation<br>&gt;&gt; <br>&gt;&gt; The GCD API provides a rich set of capabilities for writing concurrent code. Yet GCD’s syntax can be a barrier to entry for developers, because it does not conform to the API guidelines.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Proposed solution<br>&gt;&gt; <br>&gt;&gt; I propose revising the GCD API to follow the API guidelines. For example, instead of writing the following code to execute an operation asynchronously and then return to the main queue, such as to update the UI...<br>&gt;&gt; <br>&gt;&gt; let concurrentQueue = dispatch_queue_create(&quot;com.scotteg.concurrent&quot;, DISPATCH_QUEUE_CONCURRENT)<br>&gt;&gt; <br>&gt;&gt; dispatch_async(concurrentQueue) {<br>&gt;&gt;   // ...<br>&gt;&gt;   <br>&gt;&gt;   dispatch_async(dispatch_get_main_queue()) {<br>&gt;&gt;     // ...<br>&gt;&gt;   }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; …this should be able to written in a more Swifty manner, e.g.,...<br>&gt;&gt; <br>&gt;&gt; let concurrentQueue = GCDQueue(.Concurrent, withIdentifier: &quot;com.scotteg.concurrent&quot;)<br>&gt;&gt; <br>&gt;&gt; GCD.enqueueOn(concurrentQueue) {<br>&gt;&gt;   // ...<br>&gt;&gt;   <br>&gt;&gt;   GCD.enqueueOn(.Main) {<br>&gt;&gt;     // ...<br>&gt;&gt;   }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Detailed design<br>&gt;&gt; <br>&gt;&gt; TBD<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Impact on existing code<br>&gt;&gt; <br>&gt;&gt; This would be a wholesale replacement of syntax for the GCD API. A utility should also be created to convert pre-existing GCD code to the new syntax.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Alternatives considered<br>&gt;&gt; <br>&gt;&gt; TBD<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I would really appreciate your comments and suggestions, and I&#39;d certainly be willing and committed to completing this proposal based on community feedback.<br>&gt;&gt; <br>&gt;&gt; Thanks!<br>&gt;&gt; Scott<br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; Scott Gardner<br>&gt;&gt; http://scotteg.com &lt;http://scotteg.com/&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160213/ddeb855f/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c65faa002b79348ac10e1fb9c1a9ad83?s=50"></div><header><strong>Revise GCD API to conform to API Design Guidelines</strong> from <string>Colin Cornaby</string> &lt;colin.cornaby at mac.com&gt;<p>February 15, 2016 at 12:00:00pm</p></header><div class="content"><p>Is there guidance from the Swift team in making C code conform with the Swift design guidelines? I know that there is an effort to apply it to imported Obj-C API, but I wasn’t aware of any guidance on C API. There are a lot of C libraries floating around out there that Swift so far is not trying to change, and so far I’m ok with that.<br></p><p>I’d favor leaving it alone. It’s an existing cross platform open source library. I’d like it to continue to be consistent with where it’s used elsewhere. I’m not huge on the idea of making everything a class level function, and it looks like this proposal is trying to make a set of C functions look like a Swift class.<br></p><p>As others have mentioned, this seems like something someone could wrap, but I don’t feel GCD as it stands is that scary. :)<br></p><p>&gt; On Feb 13, 2016, at 7:48 AM, Scott Gardner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello everyone!<br>&gt; <br>&gt; I would like to submit the following rough sketch of a proposal to revise the GCD API syntax to adhere to the API Design Guidelines, in order to gauge interest and collect feedback and suggestions.<br>&gt; <br>&gt; Here is a preliminary proposal outline:<br>&gt; <br>&gt; Author: Scott Gardner<br>&gt; <br>&gt; Introduction<br>&gt; <br>&gt; I propose that the Grand Central Dispatch (GCD) API be revised. GCD function signatures use snake-casing and are devoid of parameter names. This syntax does not conform to the Swift API Design Guidelines (“API guidelines”).<br>&gt; <br>&gt; <br>&gt; Motivation<br>&gt; <br>&gt; The GCD API provides a rich set of capabilities for writing concurrent code. Yet GCD’s syntax can be a barrier to entry for developers, because it does not conform to the API guidelines.<br>&gt; <br>&gt; <br>&gt; Proposed solution<br>&gt; <br>&gt; I propose revising the GCD API to follow the API guidelines. For example, instead of writing the following code to execute an operation asynchronously and then return to the main queue, such as to update the UI...<br>&gt; <br>&gt; let concurrentQueue = dispatch_queue_create(&quot;com.scotteg.concurrent&quot;, DISPATCH_QUEUE_CONCURRENT)<br>&gt; <br>&gt; dispatch_async(concurrentQueue) {<br>&gt;   // ...<br>&gt;   <br>&gt;   dispatch_async(dispatch_get_main_queue()) {<br>&gt;     // ...<br>&gt;   }<br>&gt; }<br>&gt; <br>&gt; …this should be able to written in a more Swifty manner, e.g.,...<br>&gt; <br>&gt; let concurrentQueue = GCDQueue(.Concurrent, withIdentifier: &quot;com.scotteg.concurrent&quot;)<br>&gt; <br>&gt; GCD.enqueueOn(concurrentQueue) {<br>&gt;   // ...<br>&gt;   <br>&gt;   GCD.enqueueOn(.Main) {<br>&gt;     // ...<br>&gt;   }<br>&gt; }<br>&gt; <br>&gt; <br>&gt; Detailed design<br>&gt; <br>&gt; TBD<br>&gt; <br>&gt; <br>&gt; Impact on existing code<br>&gt; <br>&gt; This would be a wholesale replacement of syntax for the GCD API. A utility should also be created to convert pre-existing GCD code to the new syntax.<br>&gt; <br>&gt; <br>&gt; Alternatives considered<br>&gt; <br>&gt; TBD<br>&gt; <br>&gt; <br>&gt; I would really appreciate your comments and suggestions, and I&#39;d certainly be willing and committed to completing this proposal based on community feedback.<br>&gt; <br>&gt; Thanks!<br>&gt; Scott<br>&gt; <br>&gt; --<br>&gt; Scott Gardner<br>&gt; http://scotteg.com &lt;http://scotteg.com/&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160215/a211a21b/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
