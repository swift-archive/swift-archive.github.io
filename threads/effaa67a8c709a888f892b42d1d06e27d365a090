<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/633f8d8784196397dc0170b83ea52739?s=50"></div><header><strong>What about a VBA style with Statement?</strong> from <string>李海珍</string> &lt;banxi1988 at gmail.com&gt;<p>April 13, 2016 at 01:00:00pm</p></header><div class="content"><p>I recently learned some VBA and I found a very conveniently `with`<br>statement.<br></p><p>`with` statement can be helpful to set property for UIKit instance.<br></p><p>for instance a UILabel instance `textLabel` ,with `with` statement we can<br>set UILabel property like this<br></p><p><br>```swift<br></p><p>with textLabel{<br></p><p>.textAlignment = .Left<br></p><p>.textColor = UIColor.darkTextColor()<br></p><p>.font = UIFont.systemFontOfSize(15)<br></p><p>}<br></p><p>```<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160413/effaa090/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>What about a VBA style with Statement?</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 13, 2016 at 04:00:00pm</p></header><div class="content"><p>I like this idea.<br></p><p>In Delphi(Pascal) there is also such construction<br>with someVar do<br>  begin<br>  end;<br>And it is very handy and is used a lot (usually if you need to set/read a <br>lot of properties of some object).<br></p><p>Additionally, I believe such construction prevents some possible mistakes <br>with used variable name, especially if there is a similar-named variables <br>in cod (sometimes because of code completion feature in editor) ex:<br>someVar1 = ...<br>someVar1....<br></p><p>someVar2 = ..<br>someVar2....<br>someVar1...  &lt;&lt; mistake<br>someVar2...<br></p><p>and if &quot;with&quot; construction were here:<br></p><p>with someVar2 {<br>   .some...<br>   var a = .another<br>   etc<br>}<br></p><p>But the problem with &quot;with&quot; in Delphi is that it is not explicit what <br>method/property belongs to that someVar and what doesn&#39;t belong.<br>In Swift, such construction should force us to somehow be explicit <br>regarding what methods/props belongs to that someVar instance. Seems like <br>&quot;dot&quot; syntax looks OK.<br></p><p>Don&#39;t know if that could be implemented in Swift technically.<br></p><p>On 13.04.2016 16:15, 李海珍 via swift-evolution wrote:<br>&gt; I recently learned some VBA and I found a very conveniently `with` statement.<br>&gt;<br>&gt; `with` statement can be helpful to set property for UIKit instance.<br>&gt;<br>&gt; for instance a UILabel instance `textLabel` ,with `with` statement we can<br>&gt; set UILabel property like this<br>&gt;<br>&gt;<br>&gt; ```swift<br>&gt;<br>&gt; with textLabel{<br>&gt;<br>&gt; .textAlignment= .Left<br>&gt;<br>&gt; .textColor= UIColor.darkTextColor()<br>&gt;<br>&gt; .font= UIFont.systemFontOfSize(15)<br>&gt;<br>&gt; }<br>&gt;<br>&gt; ```<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>What about a VBA style with Statement?</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>April 13, 2016 at 04:00:00pm</p></header><div class="content"><p>It can be (more-or-less) solved in library code today:<br></p><p>extension NSObjectProtocol {<br>    public func with(@noescape fn: Self -&gt; Void) -&gt; Self {<br>        fn(self)<br>        return self<br>    }<br>}<br></p><p>This way, you can do, on NSObjects:<br></p><p>textLabel.with {<br>	$0.textAlignment = .Left<br>	$0.textColor = .darkTextColor()<br>}<br></p><p>I love this pattern.<br></p><p>You can also make it a function to make it work with any value of any kind (it will then take form of `with(foo) { …}`).<br></p><p>Ideally, if you could write a universal extension (something like `extension Any`), you could just add this behavior, with method syntax, to everything.<br></p><p>— Radek<br></p><p>&gt; On 13 Apr 2016, at 15:15, 李海珍 via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I recently learned some VBA and I found a very conveniently `with` statement.<br>&gt; <br>&gt; `with` statement can be helpful to set property for UIKit instance.<br>&gt; <br>&gt; for instance a UILabel instance `textLabel` ,with `with` statement we can set UILabel property like this<br>&gt; <br>&gt; <br>&gt; <br>&gt; ```swift<br>&gt; <br>&gt; with textLabel{<br>&gt; <br>&gt; .textAlignment = .Left<br>&gt; <br>&gt; .textColor = UIColor.darkTextColor()<br>&gt; <br>&gt; .font = UIFont.systemFontOfSize(15)<br>&gt; <br>&gt; }<br>&gt; <br>&gt; ```<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160413/3fb9be6f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>What about a VBA style with Statement?</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>April 13, 2016 at 09:00:00am</p></header><div class="content"><p>This pair works pretty well, too, if you don’t mind free functions:<br></p><p>func with&lt;T&gt;(inout this: T, @noescape using: inout T-&gt;Void) { using(&amp;this) }<br>func with&lt;T&gt;(this: T, @noescape using: T-&gt;Void) { using(this) }<br></p><p>It works either with classes or mutable structs if you call it correctly and the type doesn’t matter.<br></p><p>l8r<br>Sean<br></p><p><br>&gt; On Apr 13, 2016, at 9:17 AM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; It can be (more-or-less) solved in library code today:<br>&gt; <br>&gt; extension NSObjectProtocol {<br>&gt;     public func with(@noescape fn: Self -&gt; Void) -&gt; Self {<br>&gt;         fn(self)<br>&gt;         return self<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; This way, you can do, on NSObjects:<br>&gt; <br>&gt; textLabel.with {<br>&gt; 	$0.textAlignment = .Left<br>&gt; 	$0.textColor = .darkTextColor()<br>&gt; }<br>&gt; <br>&gt; I love this pattern.<br>&gt; <br>&gt; You can also make it a function to make it work with any value of any kind (it will then take form of `with(foo) { …}`).<br>&gt; <br>&gt; Ideally, if you could write a universal extension (something like `extension Any`), you could just add this behavior, with method syntax, to everything.<br>&gt; <br>&gt; — Radek<br>&gt; <br>&gt;&gt; On 13 Apr 2016, at 15:15, 李海珍 via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I recently learned some VBA and I found a very conveniently `with` statement.<br>&gt;&gt; <br>&gt;&gt; `with` statement can be helpful to set property for UIKit instance.<br>&gt;&gt; <br>&gt;&gt; for instance a UILabel instance `textLabel` ,with `with` statement we can set UILabel property like this<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; ```swift<br>&gt;&gt; <br>&gt;&gt; with textLabel{<br>&gt;&gt; <br>&gt;&gt; .textAlignment = .Left<br>&gt;&gt; <br>&gt;&gt; .textColor = UIColor.darkTextColor()<br>&gt;&gt; <br>&gt;&gt; .font = UIFont.systemFontOfSize(15)<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; ```<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/566528c7f7c28c35c0c646d415943612?s=50"></div><header><strong>What about a VBA style with Statement?</strong> from <string>Taras Zakharko</string> &lt;taras.zakharko at uzh.ch&gt;<p>April 13, 2016 at 04:00:00pm</p></header><div class="content"><p>We had this kind of proposal earlier, didn’t seem to be very well received. I still think it would be a useful thing, but I’d do it as a statement (extension of do) that introduces new lexical  scope (similar to self)<br></p><p>— Taras<br></p><p>&gt; On 13 Apr 2016, at 16:25, Sean Heber via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; This pair works pretty well, too, if you don’t mind free functions:<br>&gt; <br>&gt; func with&lt;T&gt;(inout this: T, @noescape using: inout T-&gt;Void) { using(&amp;this) }<br>&gt; func with&lt;T&gt;(this: T, @noescape using: T-&gt;Void) { using(this) }<br>&gt; <br>&gt; It works either with classes or mutable structs if you call it correctly and the type doesn’t matter.<br>&gt; <br>&gt; l8r<br>&gt; Sean<br>&gt; <br>&gt; <br>&gt;&gt; On Apr 13, 2016, at 9:17 AM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; It can be (more-or-less) solved in library code today:<br>&gt;&gt; <br>&gt;&gt; extension NSObjectProtocol {<br>&gt;&gt;    public func with(@noescape fn: Self -&gt; Void) -&gt; Self {<br>&gt;&gt;        fn(self)<br>&gt;&gt;        return self<br>&gt;&gt;    }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; This way, you can do, on NSObjects:<br>&gt;&gt; <br>&gt;&gt; textLabel.with {<br>&gt;&gt; 	$0.textAlignment = .Left<br>&gt;&gt; 	$0.textColor = .darkTextColor()<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; I love this pattern.<br>&gt;&gt; <br>&gt;&gt; You can also make it a function to make it work with any value of any kind (it will then take form of `with(foo) { …}`).<br>&gt;&gt; <br>&gt;&gt; Ideally, if you could write a universal extension (something like `extension Any`), you could just add this behavior, with method syntax, to everything.<br>&gt;&gt; <br>&gt;&gt; — Radek<br>&gt;&gt; <br>&gt;&gt;&gt; On 13 Apr 2016, at 15:15, 李海珍 via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I recently learned some VBA and I found a very conveniently `with` statement.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; `with` statement can be helpful to set property for UIKit instance.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; for instance a UILabel instance `textLabel` ,with `with` statement we can set UILabel property like this<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ```swift<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; with textLabel{<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; .textAlignment = .Left<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; .textColor = UIColor.darkTextColor()<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; .font = UIFont.systemFontOfSize(15)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>What about a VBA style with Statement?</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 13, 2016 at 06:00:00pm</p></header><div class="content"><p>+1 on statement vs lexical scope. additionally { $0.something ... } is more <br>explicit than just .something.<br></p><p>On 13.04.2016 17:36, Taras Zakharko via swift-evolution wrote:<br>&gt; We had this kind of proposal earlier, didn’t seem to be very well received. I still think it would be a useful thing, but I’d do it as a statement (extension of do) that introduces new lexical  scope (similar to self)<br>&gt;<br>&gt; — Taras<br>&gt;<br>&gt;&gt; On 13 Apr 2016, at 16:25, Sean Heber via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; This pair works pretty well, too, if you don’t mind free functions:<br>&gt;&gt;<br>&gt;&gt; func with&lt;T&gt;(inout this: T, @noescape using: inout T-&gt;Void) { using(&amp;this) }<br>&gt;&gt; func with&lt;T&gt;(this: T, @noescape using: T-&gt;Void) { using(this) }<br>&gt;&gt;<br>&gt;&gt; It works either with classes or mutable structs if you call it correctly and the type doesn’t matter.<br>&gt;&gt;<br>&gt;&gt; l8r<br>&gt;&gt; Sean<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; On Apr 13, 2016, at 9:17 AM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; It can be (more-or-less) solved in library code today:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; extension NSObjectProtocol {<br>&gt;&gt;&gt;     public func with(@noescape fn: Self -&gt; Void) -&gt; Self {<br>&gt;&gt;&gt;         fn(self)<br>&gt;&gt;&gt;         return self<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; This way, you can do, on NSObjects:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; textLabel.with {<br>&gt;&gt;&gt; 	$0.textAlignment = .Left<br>&gt;&gt;&gt; 	$0.textColor = .darkTextColor()<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I love this pattern.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; You can also make it a function to make it work with any value of any kind (it will then take form of `with(foo) { …}`).<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Ideally, if you could write a universal extension (something like `extension Any`), you could just add this behavior, with method syntax, to everything.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; — Radek<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On 13 Apr 2016, at 15:15, 李海珍 via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I recently learned some VBA and I found a very conveniently `with` statement.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; `with` statement can be helpful to set property for UIKit instance.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; for instance a UILabel instance `textLabel` ,with `with` statement we can set UILabel property like this<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; ```swift<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; with textLabel{<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; .textAlignment = .Left<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; .textColor = UIColor.darkTextColor()<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; .font = UIFont.systemFontOfSize(15)<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/27ca9066ad05bd8aa9ec366115f3cd38?s=50"></div><header><strong>What about a VBA style with Statement?</strong> from <string>Kurt Werle</string> &lt;kurt at circlew.org&gt;<p>April 13, 2016 at 08:00:00am</p></header><div class="content"><p>I&#39;ve always thought that the with construct is not a good idea.  It seems<br>to me that the moment you want to use with it indicates that you are<br>getting too much into some other classes business; shouldn&#39;t that class<br>deal with this?  Why are you exposing/integrating so much of some other<br>class&#39;s logic?  Maybe there should be a method that does all this, or maybe<br>a custom struct that passes all the appropriate information...<br></p><p>Yeah, there are exceptions - always.  But for the most part I&#39;m not a fan.<br></p><p>Kurt<br>-- <br>kurt at CircleW.org<br>http://www.CircleW.org/kurt/<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160413/2073f1ff/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/566528c7f7c28c35c0c646d415943612?s=50"></div><header><strong>What about a VBA style with Statement?</strong> from <string>Taras Zakharko</string> &lt;taras.zakharko at uzh.ch&gt;<p>April 13, 2016 at 05:00:00pm</p></header><div class="content"><p>Because many APIs use configuration/partial initialisation patterns. Look at Metal for example. But I agree that most of the time, its not such a big deal.  <br></p><p>— Taras<br></p><p>&gt; On 13 Apr 2016, at 17:34, Kurt Werle &lt;kurt at circlew.org&gt; wrote:<br>&gt; <br>&gt; I&#39;ve always thought that the with construct is not a good idea.  It seems to me that the moment you want to use with it indicates that you are getting too much into some other classes business; shouldn&#39;t that class deal with this?  Why are you exposing/integrating so much of some other class&#39;s logic?  Maybe there should be a method that does all this, or maybe a custom struct that passes all the appropriate information...<br>&gt; <br>&gt; Yeah, there are exceptions - always.  But for the most part I&#39;m not a fan.<br>&gt; <br>&gt; Kurt<br>&gt; -- <br>&gt; kurt at CircleW.org<br>&gt; http://www.CircleW.org/kurt/ &lt;http://www.circlew.org/kurt/&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160413/6d6729be/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>What about a VBA style with Statement?</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>April 13, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Apr 13, 2016, at 9:34 AM, Kurt Werle via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;ve always thought that the with construct is not a good idea.  It seems to me that the moment you want to use with it indicates that you are getting too much into some other classes business; shouldn&#39;t that class deal with this?  Why are you exposing/integrating so much of some other class&#39;s logic?  Maybe there should be a method that does all this, or maybe a custom struct that passes all the appropriate information...<br>&gt; <br>&gt; Yeah, there are exceptions - always.  But for the most part I&#39;m not a fan.<br>&gt; <br>&gt; Kurt<br></p><p>The biggest advantage of the with pattern IMO is Cocoa initializers. It provides a more unified <br>initialization scope. Instead of:<br></p><p>let questionLabel = UILabel()<br>questionLabel.textAlignment = .Center<br>questionLabel.font =  UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>questionLabel.text = currentQuestion.text<br>questionLabel.numberOfLines = 0<br></p><p>You get:<br></p><p>let questionLabel2 = with(UILabel()) {<br>    $0.textAlignment = .Center<br>    $0.font =  UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>    $0.text = currentQuestion.text<br>    $0.numberOfLines = 0<br>}<br></p><p>You also have the option to customize a Value type before assigning it to a constant or to base<br>a new value constant on a copy of an existing value constant:<br></p><p>struct Foo { var (a, b, c) = (&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) }<br>var f = with(Foo()) { $0.a = &quot;X&quot; }<br>print(f) // Foo(a: &quot;X&quot;, b: &quot;b&quot;, c: &quot;c&quot;)<br></p><p>I personally would love to see a Swift construct that created a scope with `self` defined so the<br>awkward `$0.` prefixes could be discarded.<br></p><p>-- E, who may have brought up this topic once or twice before on this list<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160413/eb7c7165/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6d3081a5b9c408dfecc2681ab82af734?s=50"></div><header><strong>What about a VBA style with Statement?</strong> from <string>Milos Rankovic</string> &lt;milos at milos-and-slavica.net&gt;<p>April 14, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On 13 Apr 2016, at 17:04, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The biggest advantage of the with pattern IMO is Cocoa initializers. It provides a more unified <br>&gt; initialization scope. Instead of:<br>&gt; <br>&gt; let questionLabel = UILabel()<br>&gt; questionLabel.textAlignment = .Center<br>&gt; questionLabel.font =  UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>&gt; questionLabel.text = currentQuestion.text<br>&gt; questionLabel.numberOfLines = 0<br></p><p>Whilst I would not mind the `with` pattern, it’s worth noting that Swift already has some very fine alternatives:<br></p><p>	let questionLabel: UILabel = {<br>		let $ = UILabel()<br>		$.textAlignment = .Center<br>		$.font = UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>		$.text = &quot;?&quot;<br>		$.numberOfLines = 0<br>		return $<br>	}()<br></p><p>Including some lazy options:<br>	<br>	private(set) lazy var questionLabel: UILabel = { ... }()<br>	<br>	static let questionLabel: UILabel = { ... }()<br></p><p>milos<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160414/8814c88f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>What about a VBA style with Statement?</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 14, 2016 at 04:00:00pm</p></header><div class="content"><p>Agree, that we can already use some hacks(IMO) to have some kind of what we <br>need.<br>Actually, we already discussed some variants : method &quot;with&quot; in extension <br>to type and global generic function &quot;with&quot;. Each of them has disadvantages <br>in compare to &quot;with&quot; language construction. In your example you need to <br>create temp instance, need &quot;return&quot;, calls the block() - many noise for <br>simple action.<br></p><p>Also, such workarounds not always protect us from problems(like modifying <br>constant struct instance in generic &quot;with&quot; method - it compiles. but raise <br>runtime error) and each of us needs to move these workarounds from project <br>to project, plus we use different implementation for the &quot;with&quot; feature, no <br>standard, in one project with many developers we&#39;ll find different variants <br>for the same &quot;with&quot; feature.<br></p><p>I believe we need such language construction in some or another implementation.<br></p><p>I suggest these constructions:<br></p><p>// similar to &quot;if let.. &quot; and &quot;guard let..&quot;<br>with let questionLabel = UILabel() {<br>   //...<br>}<br></p><p>with var some = SomeStruct() {<br>   //...<br>}<br></p><p>with questionLabel {<br>   // ..<br>}<br></p><p>And suggest to discuss these variants:<br></p><p>&quot;one-point&quot; (my preffered) :<br></p><p>with questionLabel {<br>   .textAlignment = .Center<br>   .font = UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>   .text = &quot;?&quot;<br>   .numberOfLines = 0<br>}<br></p><p>&quot;two points&quot;:<br></p><p>with questionLabel {<br>   ..textAlignment = .Center<br>   ..font = UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>   ..text = &quot;?&quot;<br>   ..numberOfLines = 0<br>}<br></p><p>&quot;$&quot; sign :<br></p><p>with questionLabel {<br>   $.textAlignment = .Center<br>   $.font = UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>   $.text = &quot;?&quot;<br>   $.numberOfLines = 0<br>}<br></p><p>&quot;$0&quot; (don&#39;t think this is good, as there can not be $1 etc):<br></p><p>with questionLabel {<br>   $0.textAlignment = .Center<br>   $0.font = UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>   $0.text = &quot;?&quot;<br>   $0.numberOfLines = 0<br>}<br></p><p>Opinions?<br></p><p>On 14.04.2016 13:41, Milos Rankovic via swift-evolution wrote:<br>&gt;&gt; On 13 Apr 2016, at 17:04, Erica Sadun via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; The biggest advantage of thewithpattern IMO is Cocoa initializers. It<br>&gt;&gt; provides a more unified<br>&gt;&gt; initialization scope. Instead of:<br>&gt;&gt;<br>&gt;&gt; letquestionLabel =UILabel()<br>&gt;&gt; questionLabel.textAlignment= .Center<br>&gt;&gt; questionLabel.font= UIFont(name:&quot;DnealianManuscript&quot;, size:72)<br>&gt;&gt; questionLabel.text=currentQuestion.text<br>&gt;&gt; questionLabel.numberOfLines=0<br>&gt;<br>&gt; Whilst I would not mind the `with` pattern, it’s worth noting that Swift<br>&gt; already has some very fine alternatives:<br>&gt;<br>&gt; letquestionLabel: UILabel= {<br>&gt; let$ = UILabel()<br>&gt; $.textAlignment= .Center<br>&gt; $.font= UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>&gt; $.text= &quot;?&quot;<br>&gt; $.numberOfLines= 0<br>&gt; return$<br>&gt; }()<br>&gt;<br>&gt;<br>&gt; Including some lazy options:<br>&gt;<br>&gt;<br>&gt; private(set)lazyvarquestionLabel: UILabel= {...}()<br>&gt;<br>&gt;<br>&gt; staticletquestionLabel: UILabel= {...}()<br>&gt;<br>&gt; milos<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>What about a VBA style with Statement?</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>April 14, 2016 at 06:00:00pm</p></header><div class="content"><p>For what it&#39;s worth, I left vba behind a long time ago and I have some bad memories of what I saw in these with blocks: people writing a page worth of code where only a couple line were actually referencing .xxxxx. In the end, they thought it made their code look cool when I just saw it as a readability nightmare.<br>IMHO a good language is a mix between coolness and restraint, such that the worse things the worst programmers will do cannot FAR outweigh the good the fewer disciplined programmers will write. Leaving this feature in the realm of libraries will mandate that teams discuss the topic, and choose the pattern they want to buy into. Putting it into the language will IMHO result in a lot more anything-goes, on account of &quot;well it was there, so they want us to use it, right?!&quot;<br></p><p>Cheers<br>(From mobile)<br></p><p>&gt; On Apr 14, 2016, at 3:49 PM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Agree, that we can already use some hacks(IMO) to have some kind of what we need.<br>&gt; Actually, we already discussed some variants : method &quot;with&quot; in extension to type and global generic function &quot;with&quot;. Each of them has disadvantages in compare to &quot;with&quot; language construction. In your example you need to create temp instance, need &quot;return&quot;, calls the block() - many noise for simple action.<br>&gt; <br>&gt; Also, such workarounds not always protect us from problems(like modifying constant struct instance in generic &quot;with&quot; method - it compiles. but raise runtime error) and each of us needs to move these workarounds from project to project, plus we use different implementation for the &quot;with&quot; feature, no standard, in one project with many developers we&#39;ll find different variants for the same &quot;with&quot; feature.<br>&gt; <br>&gt; I believe we need such language construction in some or another implementation.<br>&gt; <br>&gt; I suggest these constructions:<br>&gt; <br>&gt; // similar to &quot;if let.. &quot; and &quot;guard let..&quot;<br>&gt; with let questionLabel = UILabel() {<br>&gt;  //...<br>&gt; }<br>&gt; <br>&gt; with var some = SomeStruct() {<br>&gt;  //...<br>&gt; }<br>&gt; <br>&gt; with questionLabel {<br>&gt;  // ..<br>&gt; }<br>&gt; <br>&gt; And suggest to discuss these variants:<br>&gt; <br>&gt; &quot;one-point&quot; (my preffered) :<br>&gt; <br>&gt; with questionLabel {<br>&gt;  .textAlignment = .Center<br>&gt;  .font = UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>&gt;  .text = &quot;?&quot;<br>&gt;  .numberOfLines = 0<br>&gt; }<br>&gt; <br>&gt; &quot;two points&quot;:<br>&gt; <br>&gt; with questionLabel {<br>&gt;  ..textAlignment = .Center<br>&gt;  ..font = UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>&gt;  ..text = &quot;?&quot;<br>&gt;  ..numberOfLines = 0<br>&gt; }<br>&gt; <br>&gt; &quot;$&quot; sign :<br>&gt; <br>&gt; with questionLabel {<br>&gt;  $.textAlignment = .Center<br>&gt;  $.font = UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>&gt;  $.text = &quot;?&quot;<br>&gt;  $.numberOfLines = 0<br>&gt; }<br>&gt; <br>&gt; &quot;$0&quot; (don&#39;t think this is good, as there can not be $1 etc):<br>&gt; <br>&gt; with questionLabel {<br>&gt;  $0.textAlignment = .Center<br>&gt;  $0.font = UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>&gt;  $0.text = &quot;?&quot;<br>&gt;  $0.numberOfLines = 0<br>&gt; }<br>&gt; <br>&gt; Opinions?<br>&gt; <br>&gt; On 14.04.2016 13:41, Milos Rankovic via swift-evolution wrote:<br>&gt;&gt;&gt; On 13 Apr 2016, at 17:04, Erica Sadun via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The biggest advantage of thewithpattern IMO is Cocoa initializers. It<br>&gt;&gt;&gt; provides a more unified<br>&gt;&gt;&gt; initialization scope. Instead of:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; letquestionLabel =UILabel()<br>&gt;&gt;&gt; questionLabel.textAlignment= .Center<br>&gt;&gt;&gt; questionLabel.font= UIFont(name:&quot;DnealianManuscript&quot;, size:72)<br>&gt;&gt;&gt; questionLabel.text=currentQuestion.text<br>&gt;&gt;&gt; questionLabel.numberOfLines=0<br>&gt;&gt; <br>&gt;&gt; Whilst I would not mind the `with` pattern, it’s worth noting that Swift<br>&gt;&gt; already has some very fine alternatives:<br>&gt;&gt; <br>&gt;&gt; letquestionLabel: UILabel= {<br>&gt;&gt; let$ = UILabel()<br>&gt;&gt; $.textAlignment= .Center<br>&gt;&gt; $.font= UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>&gt;&gt; $.text= &quot;?&quot;<br>&gt;&gt; $.numberOfLines= 0<br>&gt;&gt; return$<br>&gt;&gt; }()<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Including some lazy options:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; private(set)lazyvarquestionLabel: UILabel= {...}()<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; staticletquestionLabel: UILabel= {...}()<br>&gt;&gt; <br>&gt;&gt; milos<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4ab486d7597af4cfe0be33a762150848?s=50"></div><header><strong>What about a VBA style with Statement?</strong> from <string>Dany St-Amant</string> &lt;dsa.mls at icloud.com&gt;<p>April 14, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; Le 14 avr. 2016 à 09:49, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Agree, that we can already use some hacks(IMO) to have some kind of what we need.<br>&gt; Actually, we already discussed some variants : method &quot;with&quot; in extension to type and global generic function &quot;with&quot;. Each of them has disadvantages in compare to &quot;with&quot; language construction. In your example you need to create temp instance, need &quot;return&quot;, calls the block() - many noise for simple action.<br>&gt; <br>&gt; Also, such workarounds not always protect us from problems(like modifying constant struct instance in generic &quot;with&quot; method - it compiles. but raise runtime error) and each of us needs to move these workarounds from project to project, plus we use different implementation for the &quot;with&quot; feature, no standard, in one project with many developers we&#39;ll find different variants for the same &quot;with&quot; feature.<br>&gt; <br>&gt; I believe we need such language construction in some or another implementation.<br>&gt; <br>&gt; I suggest these constructions:<br>&gt; <br>&gt; // similar to &quot;if let.. &quot; and &quot;guard let..&quot;<br>&gt; with let questionLabel = UILabel() {<br>&gt;  //...<br>&gt; }<br>&gt; <br>&gt; with var some = SomeStruct() {<br>&gt;  //...<br>&gt; }<br>&gt; <br>&gt; with questionLabel {<br>&gt;  // ..<br>&gt; }<br>&gt; <br>&gt; And suggest to discuss these variants:<br>&gt; <br>&gt; &quot;one-point&quot; (my preffered) :<br>&gt; <br>&gt; with questionLabel {<br>&gt;  .textAlignment = .Center<br>&gt;  .font = UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>&gt;  .text = &quot;?&quot;<br>&gt;  .numberOfLines = 0<br>&gt; }<br>&gt; <br>&gt; &quot;two points&quot;:<br>&gt; <br>&gt; with questionLabel {<br>&gt;  ..textAlignment = .Center<br>&gt;  ..font = UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>&gt;  ..text = &quot;?&quot;<br>&gt;  ..numberOfLines = 0<br>&gt; }<br>&gt; <br>&gt; &quot;$&quot; sign :<br>&gt; <br>&gt; with questionLabel {<br>&gt;  $.textAlignment = .Center<br>&gt;  $.font = UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>&gt;  $.text = &quot;?&quot;<br>&gt;  $.numberOfLines = 0<br>&gt; }<br>&gt; <br>&gt; &quot;$0&quot; (don&#39;t think this is good, as there can not be $1 etc):<br>&gt; <br>&gt; with questionLabel {<br>&gt;  $0.textAlignment = .Center<br>&gt;  $0.font = UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>&gt;  $0.text = &quot;?&quot;<br>&gt;  $0.numberOfLines = 0<br>&gt; }<br>&gt; <br></p><p>Thought with a free standing &#39;with&#39; the next request to come in, could be to be able to do something like:<br></p><p>with source, destination {<br>  $1.something = $0.somethingSimilar<br>  $1.x = $0.bound.left<br>  $1.y = $0.point.top<br>}<br></p><p>So using $0,  may be a future proofing option.<br></p><p>Dany<br></p><p>&gt; <br>&gt; On 14.04.2016 13:41, Milos Rankovic via swift-evolution wrote:<br>&gt;&gt;&gt; On 13 Apr 2016, at 17:04, Erica Sadun via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The biggest advantage of thewithpattern IMO is Cocoa initializers. It<br>&gt;&gt;&gt; provides a more unified<br>&gt;&gt;&gt; initialization scope. Instead of:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; letquestionLabel =UILabel()<br>&gt;&gt;&gt; questionLabel.textAlignment= .Center<br>&gt;&gt;&gt; questionLabel.font= UIFont(name:&quot;DnealianManuscript&quot;, size:72)<br>&gt;&gt;&gt; questionLabel.text=currentQuestion.text<br>&gt;&gt;&gt; questionLabel.numberOfLines=0<br>&gt;&gt; <br>&gt;&gt; Whilst I would not mind the `with` pattern, it’s worth noting that Swift<br>&gt;&gt; already has some very fine alternatives:<br>&gt;&gt; <br>&gt;&gt; letquestionLabel: UILabel= {<br>&gt;&gt; let$ = UILabel()<br>&gt;&gt; $.textAlignment= .Center<br>&gt;&gt; $.font= UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>&gt;&gt; $.text= &quot;?&quot;<br>&gt;&gt; $.numberOfLines= 0<br>&gt;&gt; return$<br>&gt;&gt; }()<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Including some lazy options:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; private(set)lazyvarquestionLabel: UILabel= {...}()<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; staticletquestionLabel: UILabel= {...}()<br>&gt;&gt; <br>&gt;&gt; milos<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>What about a VBA style with Statement?</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 18, 2016 at 06:00:00pm</p></header><div class="content"><p>Agree. Such construction is also very useful. +1 to implement it.<br></p><p> From one side we know, that we should name variables with meaningful <br>names. From other side, the longer the name of variable - the more noise <br>you see in code and in some cases this noise,copy-paste,ide completion <br>suggestions produce bugs in code when you need a lot of assignments/actions <br>for one/two particular instance(s).<br>So IMO such &quot;with&quot; produces less errors and is clear.<br></p><p>Please provide your opinions on this.<br></p><p>On 15.04.2016 3:47, Dany St-Amant via swift-evolution wrote:<br>&gt; Thought with a free standing &#39;with&#39; the next request to come in, could be to be able to do something like:<br>&gt;<br>&gt; with source, destination {<br>&gt;   $1.something = $0.somethingSimilar<br>&gt;   $1.x = $0.bound.left<br>&gt;   $1.y = $0.point.top<br>&gt; }<br>&gt;<br>&gt; So using $0,  may be a future proofing option.<br>&gt;<br>&gt; Dany<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>What about a VBA style with Statement?</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 13, 2016 at 05:00:00pm</p></header><div class="content"><p>Yes, it really looks like language construction, and I like this approach.<br>with (some) {<br>   $0... = ...<br>}<br></p><p>But should many of us copy-paste these functions in each module/project or <br>this is very handful feature that we want to have in our language? What do <br>you think about the proposal?<br></p><p>Actually I think it is even OK if such functions will be in standard lib, <br>i.e. without intruducing new language construct, and we can use them <br>out-of-box to have &#39;with&#39; functionality.<br></p><p>On 13.04.2016 17:25, Sean Heber via swift-evolution wrote:<br>&gt; This pair works pretty well, too, if you don’t mind free functions:<br>&gt;<br>&gt; func with&lt;T&gt;(inout this: T, @noescape using: inout T-&gt;Void) { using(&amp;this) }<br>&gt; func with&lt;T&gt;(this: T, @noescape using: T-&gt;Void) { using(this) }<br>&gt;<br>&gt; It works either with classes or mutable structs if you call it correctly and the type doesn’t matter.<br>&gt;<br>&gt; l8r<br>&gt; Sean<br>&gt;<br>&gt;<br>&gt;&gt; On Apr 13, 2016, at 9:17 AM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; It can be (more-or-less) solved in library code today:<br>&gt;&gt;<br>&gt;&gt; extension NSObjectProtocol {<br>&gt;&gt;      public func with(@noescape fn: Self -&gt; Void) -&gt; Self {<br>&gt;&gt;          fn(self)<br>&gt;&gt;          return self<br>&gt;&gt;      }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; This way, you can do, on NSObjects:<br>&gt;&gt;<br>&gt;&gt; textLabel.with {<br>&gt;&gt; 	$0.textAlignment = .Left<br>&gt;&gt; 	$0.textColor = .darkTextColor()<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; I love this pattern.<br>&gt;&gt;<br>&gt;&gt; You can also make it a function to make it work with any value of any kind (it will then take form of `with(foo) { …}`).<br>&gt;&gt;<br>&gt;&gt; Ideally, if you could write a universal extension (something like `extension Any`), you could just add this behavior, with method syntax, to everything.<br>&gt;&gt;<br>&gt;&gt; — Radek<br>&gt;&gt;<br>&gt;&gt;&gt; On 13 Apr 2016, at 15:15, 李海珍 via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I recently learned some VBA and I found a very conveniently `with` statement.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; `with` statement can be helpful to set property for UIKit instance.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; for instance a UILabel instance `textLabel` ,with `with` statement we can set UILabel property like this<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; ```swift<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; with textLabel{<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; .textAlignment = .Left<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; .textColor = UIColor.darkTextColor()<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; .font = UIFont.systemFontOfSize(15)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>What about a VBA style with Statement?</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 13, 2016 at 05:00:00pm</p></header><div class="content"><p>Than you for sharing this method. So, do you suggest to not have this <br>&quot;with&quot; construction in Swift just because we *can* implement the same <br>behavior by using some workarounds/hacks?<br></p><p>I.e. do you support this proposal or don&#39;t?<br>Do you agree that such built-in feature will be very useful and make our <br>programming live a little better/easier?<br></p><p>I strongly believe that if such feature is really useful and handy, if it <br>is explicit and if it is clearly showing in code what we are doing - we <br>most likely want to have this feature as part of language rather than <br>possibility to use some workaround to implement it.<br></p><p>With your suggestion, how to deal with two separate classes that have no <br>common protocol? I.e.<br>class A { .. }; class B {..};<br>Should we conform them to some protocol or create extension of each just to <br>have this &quot;with&quot; feature? Don&#39;t think so.<br></p><p>On 13.04.2016 17:17, Radosław Pietruszewski via swift-evolution wrote:<br>&gt; It can be (more-or-less) solved in library code today:<br>&gt;<br>&gt;     extension NSObjectProtocol {<br>&gt;          public func with(@noescape fn: Self -&gt; Void) -&gt; Self {<br>&gt;              fn(self)<br>&gt;              return self<br>&gt;          }<br>&gt;     }<br>&gt;<br>&gt;<br>&gt; This way, you can do, on NSObjects:<br>&gt;<br>&gt;     textLabel.with {<br>&gt;<br>&gt;     $0.textAlignment = .Left<br>&gt;<br>&gt;     $0.textColor = .darkTextColor()<br>&gt;<br>&gt;     }<br>&gt;<br>&gt;<br>&gt; I love this pattern.<br>&gt;<br>&gt; You can also make it a function to make it work with any value of any kind<br>&gt; (it will then take form of `with(foo) { …}`).<br>&gt;<br>&gt; Ideally, if you could write a universal extension (something like<br>&gt; `extension Any`), you could just add this behavior, with method syntax, to<br>&gt; everything.<br>&gt;<br>&gt; — Radek<br>&gt;<br>&gt;&gt; On 13 Apr 2016, at 15:15, 李海珍 via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I recently learned some VBA and I found a very conveniently `with` statement.<br>&gt;&gt;<br>&gt;&gt; `with` statement can be helpful to set property for UIKit instance.<br>&gt;&gt;<br>&gt;&gt; for instance a UILabel instance `textLabel` ,with `with` statement we can<br>&gt;&gt; set UILabel property like this<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; ```swift<br>&gt;&gt;<br>&gt;&gt; with textLabel{<br>&gt;&gt;<br>&gt;&gt; .textAlignment= .Left<br>&gt;&gt;<br>&gt;&gt; .textColor= UIColor.darkTextColor()<br>&gt;&gt;<br>&gt;&gt; .font= UIFont.systemFontOfSize(15)<br>&gt;&gt;<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>What about a VBA style with Statement?</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>April 13, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On 13 Apr 2016, at 16:47, Vladimir.S &lt;svabox at gmail.com&gt; wrote:<br>&gt; <br>&gt; Than you for sharing this method. So, do you suggest to not have this &quot;with&quot; construction in Swift just because we *can* implement the same behavior by using some workarounds/hacks?<br>&gt; <br>&gt; I.e. do you support this proposal or don&#39;t?<br>&gt; Do you agree that such built-in feature will be very useful and make our programming live a little better/easier?<br></p><p>I’m -1, at least in the foreseeable future. I do agree that this is a useful construct, but if I can do it in library code, paying only a small price for this, I’d prefer Swift to grow better in places that a library *can’t* fix.<br></p><p>&gt; <br>&gt; I strongly believe that if such feature is really useful and handy, if it is explicit and if it is clearly showing in code what we are doing - we most likely want to have this feature as part of language rather than possibility to use some workaround to implement it.<br>&gt; <br>&gt; With your suggestion, how to deal with two separate classes that have no common protocol? I.e.<br>&gt; class A { .. }; class B {..};<br>&gt; Should we conform them to some protocol or create extension of each just to have this &quot;with&quot; feature? Don&#39;t think so.<br></p><p>No — for now, it’s best to use a free function for now. And, like I mentioned, universal conformances could allow this to be easily added to all types — and so I’d focus on pushing *that* proposal.<br></p><p>&gt; <br>&gt; On 13.04.2016 17:17, Radosław Pietruszewski via swift-evolution wrote:<br>&gt;&gt; It can be (more-or-less) solved in library code today:<br>&gt;&gt; <br>&gt;&gt;    extension NSObjectProtocol {<br>&gt;&gt;         public func with(@noescape fn: Self -&gt; Void) -&gt; Self {<br>&gt;&gt;             fn(self)<br>&gt;&gt;             return self<br>&gt;&gt;         }<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; This way, you can do, on NSObjects:<br>&gt;&gt; <br>&gt;&gt;    textLabel.with {<br>&gt;&gt; <br>&gt;&gt;    $0.textAlignment = .Left<br>&gt;&gt; <br>&gt;&gt;    $0.textColor = .darkTextColor()<br>&gt;&gt; <br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I love this pattern.<br>&gt;&gt; <br>&gt;&gt; You can also make it a function to make it work with any value of any kind<br>&gt;&gt; (it will then take form of `with(foo) { …}`).<br>&gt;&gt; <br>&gt;&gt; Ideally, if you could write a universal extension (something like<br>&gt;&gt; `extension Any`), you could just add this behavior, with method syntax, to<br>&gt;&gt; everything.<br>&gt;&gt; <br>&gt;&gt; — Radek<br>&gt;&gt; <br>&gt;&gt;&gt; On 13 Apr 2016, at 15:15, 李海珍 via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I recently learned some VBA and I found a very conveniently `with` statement.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; `with` statement can be helpful to set property for UIKit instance.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; for instance a UILabel instance `textLabel` ,with `with` statement we can<br>&gt;&gt;&gt; set UILabel property like this<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ```swift<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; with textLabel{<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; .textAlignment= .Left<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; .textColor= UIColor.darkTextColor()<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; .font= UIFont.systemFontOfSize(15)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160413/6033a31c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>What about a VBA style with Statement?</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 13, 2016 at 07:00:00pm</p></header><div class="content"><p>On 13.04.2016 18:09, Radosław Pietruszewski wrote:<br>&gt; I’m -1, at least in the foreseeable future. I do agree that this is a<br>&gt; useful construct, but if I can do it in library code, paying only a small<br>&gt; price for this, I’d prefer Swift to grow better in places that a library<br>&gt; *can’t* fix.<br></p><p>Well, there a lot of things that *your personal* library can fix for you.<br>Should we stop improve the language and start to write just personal libs <br>with improvements?<br>This proposals about the feature that makes Swift better, more enjoyable to <br>work with.<br></p><p>Btw, this &quot;with&quot; method you suggest is not replacement for language <br>construction - it allows compilation when struct instance constant (let s = <br>SomeStruct()) is changed inside block. Do you like this? Do you want to <br>produce such an non-safe code to your projects?<br></p><p>&gt;<br>&gt; No — for now, it’s best to use a free function for now. And, like I<br></p><p>No, not best, even not OK. Described above.<br></p><p>&gt; mentioned, universal conformances could allow this to be easily added to<br>&gt; all types — and so I’d focus on pushing *that* proposal.<br></p><p>As I understand, such a method will have the same problem with un-safe <br>behavior in case of constant.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc045f9bdc3bd1885767f2a2ba8af458?s=50"></div><header><strong>What about a VBA style with Statement?</strong> from <string>Jonathan Tang</string> &lt;jonathan.d.tang at gmail.com&gt;<p>April 14, 2016 at 07:00:00am</p></header><div class="content"><p>Very strong -1 to implicit &#39;with&#39;.  Javascript tried this and it was a<br>disaster, and eventually banned in strict mode.  It tends to make<br>compilation and optimization of a variable within a &#39;with&#39; block<br>impossible, as it could refer to the fields of any object, or even a method<br>call behind protocol accessors.  It also made it very difficult to<br>understand code, as you had to inspect values with a debugger before you<br>could grok the meaning of a simple variable reference.<br></p><p>Explicit &#39;with&#39; is intriguing - it avoids a number of these pitfalls.  But<br>the syntax suggested conflicts with that used for enums and static member<br>access.  Right now, &#39;.foo&#39; is shorthand for &#39;Type.foo&#39;, where Type is the<br>inferred type of the expression.  With the proposed syntax, would it<br>instead refer to the member of the &#39;with&#39; referend?  From the proposed<br>example, it looks like it:<br></p><p>with textLabel{<br>  .textAlignment = .Left<br>  .textColor = UIColor.darkTextColor()<br>  .font = UIFont.systemFontOfSize(15)<br>}<br></p><p>Note that UIColor and UIFont have to be explicit here.  That&#39;s not really<br>an improvement in verbosity on how you&#39;d write it now:<br></p><p>textLabel.textAlignment = .Left<br>textLabel.textColor = .darkTextColor()<br>textLabel.font = .systemFontOfSize(15)<br></p><p>Ultimately, I think I&#39;m +1 for the library solution, where NSObject (is<br>there any way to extend all *Swift* objects, so they don&#39;t need the<br>Objective-C runtime?) gets a new method:<br></p><p>let textLabel = UILabel().with {<br>  $0.textAlignment = .Left<br>  $0.textColor = .darkTextColor()<br>  $0.font = .systemFontOfSize(15)<br>}<br></p><p>Also, on a philosophical note:<br></p><p>On Wed, Apr 13, 2016 at 9:54 AM, Vladimir.S via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On 13.04.2016 18:09, Radosław Pietruszewski wrote:<br>&gt;<br>&gt;&gt; I’m -1, at least in the foreseeable future. I do agree that this is a<br>&gt;&gt; useful construct, but if I can do it in library code, paying only a small<br>&gt;&gt; price for this, I’d prefer Swift to grow better in places that a library<br>&gt;&gt; *can’t* fix.<br>&gt;&gt;<br>&gt;<br>&gt; Well, there a lot of things that *your personal* library can fix for you.<br>&gt; Should we stop improve the language and start to write just personal libs<br>&gt; with improvements?<br>&gt;<br>&gt;<br>Yes, absolutely.  At least until your personal lib has gotten some<br>widespread adoption and people have had a chance to hack with it for a<br>while.   Perhaps we need better tools for sharing, distributing, and<br>integrating utility libs (SwiftPM is coming!), but I feel strongly that<br>this is a better development methodology than including every imaginable<br>feature in the language itself.<br></p><p>The problem is that nearly all language features have unintended corner<br>cases, unintended consequences on development, and impedance mismatches<br>with existing language features.  You can&#39;t predict what these will be<br>until you&#39;ve written a bunch of *actual code* using them, in the target<br>language.  When it&#39;s your personal lib, you can iterate on this nearly<br>instantaneously.  When it&#39;s a language spec, every change requires long<br>consensus discussions, and you can&#39;t back out previous changes that people<br>are relying on.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160414/976e241d/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Discussion] &quot;with&quot; statement/method</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 22, 2016 at 10:00:00am</p></header><div class="content"><p>Just wanted to summarize our opinions on this suggestion that we was <br>discussing earlier and check if someone is ready to crate an &quot;official&quot; <br>proposal for this feature.<br></p><p>There a number of questions regarding this feature we can discuss, for <br>example statement vs method, what could be a placeholder of target instance <br>inside the scope($0, $, _, .., nothing etc)<br></p><p>The main question, *do you support that we need &quot;with&quot; feature in some way <br>in Swift 3.0 out of the box* . And if so, what variant do you prefer.<br></p><p>* this proposal is for *explicit* &quot;with&quot;, where it is clear what <br>method/property belongs to the &quot;target&quot; instance<br>* I believe that as such feature is really useful and handy, if it is <br>explicit and if it is clearly showing in code what we are doing - we want <br>to have this feature as part of language/standard lib rather than <br>possibility to use some workaround to implement it<br>* It is not about saving the space in code. It is about more readable and <br>(I insist) more stable(with less errors) code. Much less possibilities for <br>copy-paste errors. Wrong code completion suggestion(by editor) can not <br>produce error. It is explicit and clear, it has much less noise in code.<br>* Many of us already implemented and use such &quot;with&quot; construction in some way<br></p><p>There were 2 main suggestions :<br></p><p>1) Introduce &quot;with&quot; statement that can be used in for example in such way:<br></p><p>// set props just after creating<br>// similar to &quot;if let.. &quot; and &quot;guard let..&quot;<br>with let questionLabel = UILabel() {<br>   //set props of created instance here<br>   // here we can have:<br>   // $0.prop = value<br>   // or<br>   // ..prop = value<br>   // or<br>   // .prop = value<br>   // or<br>   // _.prop = value<br>   // or<br>   // $.prop = value<br>   // or ?<br>}<br>// questionLabel is available here<br></p><p><br>// works for structures<br>with var some = SomeStruct() {<br>   //...<br>}<br></p><p>// just for some class/structure/enum<br>with questionLabel {<br>   // ..<br>}<br></p><p>probably<br></p><p>with var src = someNamedInstance1,<br>      let dst = someNamedInstance2 {<br>    src.propA = dst.propB<br>    dst.someMethod(src.propC)<br>    src.someMehtod()<br>}<br></p><p>or<br>with someNamedInstance1, someNamedInstance2 {<br>    $0.propA = $1.propB<br>    $1.someMethod($0.propC)<br>    $0.someMehtod()<br>}<br></p><p><br>2) Introduce .with method for each(?) class/struct, so we can use out-of-box:<br></p><p>let questionLabel = UILabel().with {<br>   //set props of created instance here<br>   $0.prop = value<br>}<br></p><p>var someStructInstance = SomeStruct().with {target in<br>   target.prop = value<br>}<br></p><p>questionLabel.with {label in<br>   label.prop = value<br>}<br></p><p>someNamedInstance1.with(someNamedInstance2) {src, dst in<br>    src.propA = dst.propB<br>    dst.someMethod(src.propC)<br>    src.someMehtod()<br>}<br></p><p>Note that function like this :<br>func with&lt;T&gt;(item:T, apply:(T)-&gt;Void) {  apply(item) }<br></p><p>Produces such kind of problems:<br>struct A {var x = 1}<br>let a1 = A() // constant<br>with (a1) { $0.x = 10 } // this will be compiled without errors/warnings<br></p><p><br>On 13.04.2016 17:17, Radosław Pietruszewski via swift-evolution wrote:<br>&gt; It can be (more-or-less) solved in library code today:<br>&gt;<br>&gt;     extension NSObjectProtocol {<br>&gt;         public func with(@noescape fn: Self -&gt; Void) -&gt; Self {<br>&gt;             fn(self)<br>&gt;             return self<br>&gt;         }<br>&gt;     }<br>&gt;<br>&gt;<br>&gt; This way, you can do, on NSObjects:<br>&gt;<br>&gt;     textLabel.with {<br>&gt;<br>&gt;     $0.textAlignment = .Left<br>&gt;<br>&gt;     $0.textColor = .darkTextColor()<br>&gt;<br>&gt;     }<br>&gt;<br>&gt;<br>&gt; I love this pattern.<br>&gt;<br>&gt; You can also make it a function to make it work with any value of any kind<br>&gt; (it will then take form of `with(foo) { …}`).<br>&gt;<br>&gt; Ideally, if you could write a universal extension (something like<br>&gt; `extension Any`), you could just add this behavior, with method syntax, to<br>&gt; everything.<br>&gt;<br>&gt; — Radek<br>&gt;<br>&gt;&gt; On 13 Apr 2016, at 15:15, 李海珍 via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I recently learned some VBA and I found a very conveniently `with` statement.<br>&gt;&gt;<br>&gt;&gt; `with` statement can be helpful to set property for UIKit instance.<br>&gt;&gt;<br>&gt;&gt; for instance a UILabel instance `textLabel` ,with `with` statement we can<br>&gt;&gt; set UILabel property like this<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; ```swift<br>&gt;&gt;<br>&gt;&gt; with textLabel{<br>&gt;&gt;<br>&gt;&gt; .textAlignment= .Left<br>&gt;&gt;<br>&gt;&gt; .textColor= UIColor.darkTextColor()<br>&gt;&gt;<br>&gt;&gt; .font= UIFont.systemFontOfSize(15)<br>&gt;&gt;<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c74c15ba14b1096d4e42900ddd2dacd0?s=50"></div><header><strong>[Discussion] &quot;with&quot; statement/method</strong> from <string>Patrick Smith</string> &lt;pgwsmith at gmail.com&gt;<p>April 22, 2016 at 08:00:00am</p></header><div class="content"><p>I was wondering if all mutating and setters of a method could become a type (Typename.Mutation), say something similar to an enum.<br>You’d use it like this:<br>let alice = john mutating [  .firstName = &quot;Alice&quot;,  .makeScottishClan]<br>See more here:https://gist.github.com/BurntCaramel/ba2ce9dfd49595dacce07394de579172<br>Patrick<br></p><p><br></p><p><br>On Fri, Apr 22, 2016 at 12:18 AM -0700, &quot;Vladimir.S via swift-evolution&quot; &lt;swift-evolution at swift.org&gt; wrote:<br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br>Just wanted to summarize our opinions on this suggestion that we was <br>discussing earlier and check if someone is ready to crate an &quot;official&quot; <br>proposal for this feature.<br></p><p>There a number of questions regarding this feature we can discuss, for <br>example statement vs method, what could be a placeholder of target instance <br>inside the scope($0, $, _, .., nothing etc)<br></p><p>The main question, *do you support that we need &quot;with&quot; feature in some way <br>in Swift 3.0 out of the box* . And if so, what variant do you prefer.<br></p><p>* this proposal is for *explicit* &quot;with&quot;, where it is clear what <br>method/property belongs to the &quot;target&quot; instance<br>* I believe that as such feature is really useful and handy, if it is <br>explicit and if it is clearly showing in code what we are doing - we want <br>to have this feature as part of language/standard lib rather than <br>possibility to use some workaround to implement it<br>* It is not about saving the space in code. It is about more readable and <br>(I insist) more stable(with less errors) code. Much less possibilities for <br>copy-paste errors. Wrong code completion suggestion(by editor) can not <br>produce error. It is explicit and clear, it has much less noise in code.<br>* Many of us already implemented and use such &quot;with&quot; construction in some way<br></p><p>There were 2 main suggestions :<br></p><p>1) Introduce &quot;with&quot; statement that can be used in for example in such way:<br></p><p>// set props just after creating<br>// similar to &quot;if let.. &quot; and &quot;guard let..&quot;<br>with let questionLabel = UILabel() {<br>   //set props of created instance here<br>   // here we can have:<br>   // $0.prop = value<br>   // or<br>   // ..prop = value<br>   // or<br>   // .prop = value<br>   // or<br>   // _.prop = value<br>   // or<br>   // $.prop = value<br>   // or ?<br>}<br>// questionLabel is available here<br></p><p><br>// works for structures<br>with var some = SomeStruct() {<br>   //...<br>}<br></p><p>// just for some class/structure/enum<br>with questionLabel {<br>   // ..<br>}<br></p><p>probably<br></p><p>with var src = someNamedInstance1,<br>      let dst = someNamedInstance2 {<br>    src.propA = dst.propB<br>    dst.someMethod(src.propC)<br>    src.someMehtod()<br>}<br></p><p>or<br>with someNamedInstance1, someNamedInstance2 {<br>    $0.propA = $1.propB<br>    $1.someMethod($0.propC)<br>    $0.someMehtod()<br>}<br></p><p><br>2) Introduce .with method for each(?) class/struct, so we can use out-of-box:<br></p><p>let questionLabel = UILabel().with {<br>   //set props of created instance here<br>   $0.prop = value<br>}<br></p><p>var someStructInstance = SomeStruct().with {target in<br>   target.prop = value<br>}<br></p><p>questionLabel.with {label in<br>   label.prop = value<br>}<br></p><p>someNamedInstance1.with(someNamedInstance2) {src, dst in<br>    src.propA = dst.propB<br>    dst.someMethod(src.propC)<br>    src.someMehtod()<br>}<br></p><p>Note that function like this :<br>func with(item:T, apply:(T)-&gt;Void) {  apply(item) }<br></p><p>Produces such kind of problems:<br>struct A {var x = 1}<br>let a1 = A() // constant<br>with (a1) { $0.x = 10 } // this will be compiled without errors/warnings<br></p><p><br>On 13.04.2016 17:17, Radosław Pietruszewski via swift-evolution wrote:<br>&gt; It can be (more-or-less) solved in library code today:<br>&gt;<br>&gt;     extension NSObjectProtocol {<br>&gt;         public func with(@noescape fn: Self -&gt; Void) -&gt; Self {<br>&gt;             fn(self)<br>&gt;             return self<br>&gt;         }<br>&gt;     }<br>&gt;<br>&gt;<br>&gt; This way, you can do, on NSObjects:<br>&gt;<br>&gt;     textLabel.with {<br>&gt;<br>&gt;     $0.textAlignment = .Left<br>&gt;<br>&gt;     $0.textColor = .darkTextColor()<br>&gt;<br>&gt;     }<br>&gt;<br>&gt;<br>&gt; I love this pattern.<br>&gt;<br>&gt; You can also make it a function to make it work with any value of any kind<br>&gt; (it will then take form of `with(foo) { …}`).<br>&gt;<br>&gt; Ideally, if you could write a universal extension (something like<br>&gt; `extension Any`), you could just add this behavior, with method syntax, to<br>&gt; everything.<br>&gt;<br>&gt; — Radek<br>&gt;<br>&gt;&gt; On 13 Apr 2016, at 15:15, 李海珍 via swift-evolution<br>&gt;&gt; &gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I recently learned some VBA and I found a very conveniently `with` statement.<br>&gt;&gt;<br>&gt;&gt; `with` statement can be helpful to set property for UIKit instance.<br>&gt;&gt;<br>&gt;&gt; for instance a UILabel instance `textLabel` ,with `with` statement we can<br>&gt;&gt; set UILabel property like this<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; ```swift<br>&gt;&gt;<br>&gt;&gt; with textLabel{<br>&gt;&gt;<br>&gt;&gt; .textAlignment= .Left<br>&gt;&gt;<br>&gt;&gt; .textColor= UIColor.darkTextColor()<br>&gt;&gt;<br>&gt;&gt; .font= UIFont.systemFontOfSize(15)<br>&gt;&gt;<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org <br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160422/a3683c29/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Discussion] &quot;with&quot; statement/method</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 22, 2016 at 01:00:00pm</p></header><div class="content"><p>Personally, I don&#39;t feel like your suggestion is a replacement for &quot;with&quot; <br>feature. &quot;With&quot; not just about mutating(it can be used to just get multiply <br>props from &quot;target&quot; instance), it allows to call methods of instance, use a <br>label of &quot;target&quot; instance (like $0) to be used as argument (like with <br>someInstance { ...; callFunc($0); } etc.<br></p><p>Also, in your suggestion there is implicit &quot;self&quot; for the target instance <br>(.firstName) and this will produce not obvious code (like .someColor = <br>.colorRed - first belongs to target instance, second - enum value)<br></p><p>I believe you can start new [Discussion]/[Idea] about this &quot;mutating&quot; <br>feature, in this thread I&#39;d like to collect opinions regarding the &quot;with&quot; <br>feature proposal.<br></p><p>On 22.04.2016 11:12, Patrick Smith wrote:<br>&gt; I was wondering if all mutating and setters of a method could become a type<br>&gt; (Typename.Mutation), say something similar to an enum.<br>&gt;<br>&gt; You’d use it like this:<br>&gt;<br>&gt; let alice = john mutating [<br>&gt;   .firstName = &quot;Alice&quot;,<br>&gt;   .makeScottishClan<br>&gt; ]<br>&gt;<br>&gt; See more here:<br>&gt; https://gist.github.com/BurntCaramel/ba2ce9dfd49595dacce07394de579172<br>&gt;<br>&gt; Patrick<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Fri, Apr 22, 2016 at 12:18 AM -0700, &quot;Vladimir.S via swift-evolution&quot;<br>&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;<br>&gt;     Just wanted to summarize our opinions on this suggestion that we was<br>&gt;     discussing earlier and check if someone is ready to crate an &quot;official&quot;<br>&gt;     proposal for this feature.<br>&gt;<br>&gt;     There a number of questions regarding this feature we can discuss, for<br>&gt;     example statement vs method, what could be a placeholder of target instance<br>&gt;     inside the scope($0, $, _, .., nothing etc)<br>&gt;<br>&gt;     The main question, *do you support that we need &quot;with&quot; feature in some way<br>&gt;     in Swift 3.0 out of the box* . And if so, what variant do you prefer.<br>&gt;<br>&gt;     * this proposal is for *explicit* &quot;with&quot;, where it is clear what<br>&gt;     method/property belongs to the &quot;target&quot; instance<br>&gt;     * I believe that as such feature is really useful and handy, if it is<br>&gt;     explicit and if it is clearly showing in code what we are doing - we want<br>&gt;     to have this feature as part of language/standard lib rather than<br>&gt;     possibility to use some workaround to implement it<br>&gt;     * It is not about saving the space in code. It is about more readable and<br>&gt;     (I insist) more stable(with less errors) code. Much less possibilities for<br>&gt;     copy-paste errors. Wrong code completion suggestion(by editor) can not<br>&gt;     produce error. It is explicit and clear, it has much less noise in code.<br>&gt;     * Many of us already implemented and use such &quot;with&quot; construction in some way<br>&gt;<br>&gt;     There were 2 main suggestions :<br>&gt;<br>&gt;     1) Introduce &quot;with&quot; statement that can be used in for example in such way:<br>&gt;<br>&gt;     // set props just after creating<br>&gt;     // similar to &quot;if let.. &quot; and &quot;guard let..&quot;<br>&gt;     with let questionLabel = UILabel() {<br>&gt;        //set props of created instance here<br>&gt;        // here we can have:<br>&gt;        // $0.prop = value<br>&gt;        // or<br>&gt;        // ..prop = value<br>&gt;        // or<br>&gt;        // .prop = value<br>&gt;        // or<br>&gt;        // _.prop = value<br>&gt;        // or<br>&gt;        // $.prop = value<br>&gt;        // or ?<br>&gt;     }<br>&gt;     // questionLabel is available here<br>&gt;<br>&gt;<br>&gt;     // works for structures<br>&gt;     with var some = SomeStruct() {<br>&gt;        //...<br>&gt;     }<br>&gt;<br>&gt;     // just for some class/structure/enum<br>&gt;     with questionLabel {<br>&gt;        // ..<br>&gt;     }<br>&gt;<br>&gt;     probably<br>&gt;<br>&gt;     with var src = someNamedInstance1,<br>&gt;           let dst = someNamedInstance2 {<br>&gt;         src.propA = dst.propB<br>&gt;         dst.someMethod(src.propC)<br>&gt;         src.someMehtod()<br>&gt;     }<br>&gt;<br>&gt;     or<br>&gt;     with someNamedInstance1, someNamedInstance2 {<br>&gt;         $0.propA = $1.propB<br>&gt;         $1.someMethod($0.propC)<br>&gt;         $0.someMehtod()<br>&gt;     }<br>&gt;<br>&gt;<br>&gt;     2) Introduce .with method for each(?) class/struct, so we can use out-of-box:<br>&gt;<br>&gt;     let questionLabel = UILabel().with {<br>&gt;        //set props of created instance here<br>&gt;        $0.prop = value<br>&gt;     }<br>&gt;<br>&gt;     var someStructInstance = SomeStruct().with {target in<br>&gt;        target.prop = value<br>&gt;     }<br>&gt;<br>&gt;     questionLabel.with {label in<br>&gt;        label.prop = value<br>&gt;     }<br>&gt;<br>&gt;     someNamedInstance1.with(someNamedInstance2) {src, dst in<br>&gt;         src.propA = dst.propB<br>&gt;         dst.someMethod(src.propC)<br>&gt;         src.someMehtod()<br>&gt;     }<br>&gt;<br>&gt;     Note that function like this :<br>&gt;     func with(item:T, apply:(T)-&gt;Void) {  apply(item) }<br>&gt;<br>&gt;     Produces such kind of problems:<br>&gt;     struct A {var x = 1}<br>&gt;     let a1 = A() // constant<br>&gt;     with (a1) { $0.x = 10 } // this will be compiled without errors/warnings<br>&gt;<br>&gt;<br>&gt;     On 13.04.2016 17:17, Radosław Pietruszewski via swift-evolution wrote:<br>&gt;     &gt; It can be (more-or-less) solved in library code today:<br>&gt;     &gt;<br>&gt;     &gt;     extension NSObjectProtocol {<br>&gt;     &gt;         public func with(@noescape fn: Self -&gt; Void) -&gt; Self {<br>&gt;     &gt;             fn(self)<br>&gt;     &gt;             return self<br>&gt;     &gt;         }<br>&gt;     &gt;     }<br>&gt;     &gt;<br>&gt;     &gt;<br>&gt;     &gt; This way, you can do, on NSObjects:<br>&gt;     &gt;<br>&gt;     &gt;     textLabel.with {<br>&gt;     &gt;<br>&gt;     &gt;     $0.textAlignment = .Left<br>&gt;     &gt;<br>&gt;     &gt;     $0.textColor = .darkTextColor()<br>&gt;     &gt;<br>&gt;     &gt;     }<br>&gt;     &gt;<br>&gt;     &gt;<br>&gt;     &gt; I love this pattern.<br>&gt;     &gt;<br>&gt;     &gt; You can also make it a function to make it work with any value of any kind<br>&gt;     &gt; (it will then take form of `with(foo) { …}`).<br>&gt;     &gt;<br>&gt;     &gt; Ideally, if you could write a universal extension (something like<br>&gt;     &gt; `extension Any`), you could just add this behavior, with method syntax, to<br>&gt;     &gt; everything.<br>&gt;     &gt;<br>&gt;     &gt; — Radek<br>&gt;     &gt;<br>&gt;     &gt;&gt; On 13 Apr 2016, at 15:15, 李海珍 via swift-evolution<br>&gt;     &gt;&gt; &gt; wrote:<br>&gt;     &gt;&gt;<br>&gt;     &gt;&gt; I recently learned some VBA and I found a very conveniently `with` statement.<br>&gt;     &gt;&gt;<br>&gt;     &gt;&gt; `with` statement can be helpful to set property for UIKit instance.<br>&gt;     &gt;&gt;<br>&gt;     &gt;&gt; for instance a UILabel instance `textLabel` ,with `with` statement we can<br>&gt;     &gt;&gt; set UILabel property like this<br>&gt;     &gt;&gt;<br>&gt;     &gt;&gt;<br>&gt;     &gt;&gt; ```swift<br>&gt;     &gt;&gt;<br>&gt;     &gt;&gt; with textLabel{<br>&gt;     &gt;&gt;<br>&gt;     &gt;&gt; .textAlignment= .Left<br>&gt;     &gt;&gt;<br>&gt;     &gt;&gt; .textColor= UIColor.darkTextColor()<br>&gt;     &gt;&gt;<br>&gt;     &gt;&gt; .font= UIFont.systemFontOfSize(15)<br>&gt;     &gt;&gt;<br>&gt;     &gt;&gt; }<br>&gt;     &gt;&gt;<br>&gt;     &gt;&gt; ```<br>&gt;     &gt;&gt;<br>&gt;     &gt;&gt; _______________________________________________<br>&gt;     &gt;&gt; swift-evolution mailing list<br>&gt;     &gt;&gt; swift-evolution at swift.org<br>&gt;     &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;     &gt;<br>&gt;     &gt;<br>&gt;     &gt;<br>&gt;     &gt; _______________________________________________<br>&gt;     &gt; swift-evolution mailing list<br>&gt;     &gt; swift-evolution at swift.org<br>&gt;     &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;     &gt;<br>&gt;     _______________________________________________<br>&gt;     swift-evolution mailing list<br>&gt;     swift-evolution at swift.org<br>&gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4bb2d8cd29d26d7067e8b62a5e1cbf95?s=50"></div><header><strong>[Discussion] &quot;with&quot; statement/method</strong> from <string>Joanna Carter</string> &lt;joanna at carterconsulting.org.uk&gt;<p>April 22, 2016 at 01:00:00pm</p></header><div class="content"><p>As much as I detested the &#39;with&#39; construct in Delphi, with all its accompanying opportunities for errors of scope, if you really think it a good idea, then you need to consider the possibility of those who want to &#39;with&#39; more than one target. In which case, the use of $0, $1, etc would seem logical, although not necessarily very readable.<br></p><p>Joanna<br></p><p>--<br>Joanna Carter<br>Carter Consulting<br></p><p>(de mon iPhone)<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Discussion] &quot;with&quot; statement/method</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 22, 2016 at 03:00:00pm</p></header><div class="content"><p>On 22.04.2016 14:02, Joanna Carter wrote:<br> &gt; As much as I detested the &#39;with&#39; construct in Delphi, with all its <br>accompanying opportunities for errors of scope, if you really think it a <br>good idea, then you need to consider the possibility of those who want to <br>&#39;with&#39; more than one target. In which case, the use of $0, $1, etc would <br>seem logical, although not necessarily very readable.<br> &gt;<br> &gt; Joanna<br> &gt;<br> &gt; --<br> &gt; Joanna Carter<br> &gt; Carter Consulting<br> &gt;<br> &gt; (de mon iPhone)<br> &gt;<br></p><p>Actually we can &quot;manually&quot; now implement the very clean and handy &quot;with&quot; <br>(including with more than 1 &quot;target&quot;) like this:<br></p><p>(I propose to include such kind of &quot;with&quot; feature to language or to <br>standard classes/protocols to be able to use it out-of-box for any <br>class/structure, not for some we have to apply manually)<br></p><p>class A {<br>     var x = 0<br>     var y = 0<br>     var z = 0<br></p><p>     func with(block: (this: A)-&gt;()) -&gt; Self {<br>         block(this: self)<br></p><p>         return self<br>     }<br></p><p>     func with&lt;T&gt;(another: T, block: (this: A, that: T)-&gt;()) -&gt; Self {<br>         block(this: self, that: another)<br></p><p>         return self<br>     }<br>}<br></p><p>var myFirstVeryLongInstanceName = A().with {<br>     $0.x = 1<br>     $0.y = 2<br>     $0.z = 3<br>}<br></p><p>var mySecondVeryLongInstanceName = A().with {new in<br>     new.x = 11<br>     new.y = 12<br>     new.z = 13<br>}<br></p><p>myFirstVeryLongInstanceName.with {my in<br>     my.x *= 1<br>     my.y *= 2<br>     my.z *= 3<br>}<br></p><p>mySecondVeryLongInstanceName.with(myFirstVeryLongInstanceName) {to, from in<br>     to.x = from.x * 10<br>     to.y = from.y * 20<br>     to.z = from.z * 30<br></p><p>     print(from.x)<br>     print(to.x)<br>}<br></p><p>mySecondVeryLongInstanceName.with(myFirstVeryLongInstanceName) {<br>     $0.x = $1.x * 100<br>     $0.y = $1.y * 200<br>     $0.z = $1.z * 300<br></p><p>     print($1.x)<br>     print($0.x)<br>}<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Discussion] &quot;with&quot; statement/method</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>April 23, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; Note that function like this :<br>&gt; func with&lt;T&gt;(item:T, apply:(T)-&gt;Void) {  apply(item) }<br>&gt; <br>&gt; Produces such kind of problems:<br>&gt; struct A {var x = 1}<br>&gt; let a1 = A() // constant<br>&gt; with (a1) { $0.x = 10 } // this will be compiled without errors/warnings<br></p><p><br>This works as expected (giving a compile error for let constant):<br></p><p>// for value types<br>func with&lt;T&gt;(inout item: T, apply: (inout T) throws -&gt; Void) rethrows -&gt; Void {<br>    try apply(&amp;item)<br>}<br></p><p>// for reference types (classes)<br>func with&lt;T: AnyObject&gt;(item: T, apply: (T) throws -&gt; Void) rethrows -&gt; T {<br>    try apply(item)<br>    return item<br>}<br></p><p>// value types<br></p><p>struct A { var x = 1 }<br></p><p>var a1 = A()<br>with (&amp;a1) {<br>    $0.x = 10<br>}<br>print(a1) // A(x: 10)<br></p><p>/*<br>let a2 = A()<br>with (&amp;a2) { // error: cannot pass immutable value as inout argument: &#39;a2&#39; is a &#39;let&#39; constant<br>    $0.x = 10<br>}<br>print(a2)<br>*/<br></p><p>// reference types (classes)<br></p><p>class B : CustomDebugStringConvertible {<br>    var y = 1<br>    var debugDescription: String { return &quot;B(y: \(y))&quot; }<br>}<br></p><p>var b1 = B()<br>with (b1) {<br>    $0.y = 11<br>}<br>print(b1) // B(y: 11)<br></p><p>// reference types allow this pattern (value types don&#39;t)<br>let b2 = with (B()) {<br>    $0.y = 12<br>}<br>print(b2) // B(y: 12)<br></p><p><br>-Thorsten<br></p><p><br>&gt; Am 22.04.2016 um 09:18 schrieb Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; Just wanted to summarize our opinions on this suggestion that we was discussing earlier and check if someone is ready to crate an &quot;official&quot; proposal for this feature.<br>&gt; <br>&gt; There a number of questions regarding this feature we can discuss, for example statement vs method, what could be a placeholder of target instance inside the scope($0, $, _, .., nothing etc)<br>&gt; <br>&gt; The main question, *do you support that we need &quot;with&quot; feature in some way in Swift 3.0 out of the box* . And if so, what variant do you prefer.<br>&gt; <br>&gt; * this proposal is for *explicit* &quot;with&quot;, where it is clear what method/property belongs to the &quot;target&quot; instance<br>&gt; * I believe that as such feature is really useful and handy, if it is explicit and if it is clearly showing in code what we are doing - we want to have this feature as part of language/standard lib rather than possibility to use some workaround to implement it<br>&gt; * It is not about saving the space in code. It is about more readable and (I insist) more stable(with less errors) code. Much less possibilities for copy-paste errors. Wrong code completion suggestion(by editor) can not produce error. It is explicit and clear, it has much less noise in code.<br>&gt; * Many of us already implemented and use such &quot;with&quot; construction in some way<br>&gt; <br>&gt; There were 2 main suggestions :<br>&gt; <br>&gt; 1) Introduce &quot;with&quot; statement that can be used in for example in such way:<br>&gt; <br>&gt; // set props just after creating<br>&gt; // similar to &quot;if let.. &quot; and &quot;guard let..&quot;<br>&gt; with let questionLabel = UILabel() {<br>&gt;  //set props of created instance here<br>&gt;  // here we can have:<br>&gt;  // $0.prop = value<br>&gt;  // or<br>&gt;  // ..prop = value<br>&gt;  // or<br>&gt;  // .prop = value<br>&gt;  // or<br>&gt;  // _.prop = value<br>&gt;  // or<br>&gt;  // $.prop = value<br>&gt;  // or ?<br>&gt; }<br>&gt; // questionLabel is available here<br>&gt; <br>&gt; <br>&gt; // works for structures<br>&gt; with var some = SomeStruct() {<br>&gt;  //...<br>&gt; }<br>&gt; <br>&gt; // just for some class/structure/enum<br>&gt; with questionLabel {<br>&gt;  // ..<br>&gt; }<br>&gt; <br>&gt; probably<br>&gt; <br>&gt; with var src = someNamedInstance1,<br>&gt;     let dst = someNamedInstance2 {<br>&gt;   src.propA = dst.propB<br>&gt;   dst.someMethod(src.propC)<br>&gt;   src.someMehtod()<br>&gt; }<br>&gt; <br>&gt; or<br>&gt; with someNamedInstance1, someNamedInstance2 {<br>&gt;   $0.propA = $1.propB<br>&gt;   $1.someMethod($0.propC)<br>&gt;   $0.someMehtod()<br>&gt; }<br>&gt; <br>&gt; <br>&gt; 2) Introduce .with method for each(?) class/struct, so we can use out-of-box:<br>&gt; <br>&gt; let questionLabel = UILabel().with {<br>&gt;  //set props of created instance here<br>&gt;  $0.prop = value<br>&gt; }<br>&gt; <br>&gt; var someStructInstance = SomeStruct().with {target in<br>&gt;  target.prop = value<br>&gt; }<br>&gt; <br>&gt; questionLabel.with {label in<br>&gt;  label.prop = value<br>&gt; }<br>&gt; <br>&gt; someNamedInstance1.with(someNamedInstance2) {src, dst in<br>&gt;   src.propA = dst.propB<br>&gt;   dst.someMethod(src.propC)<br>&gt;   src.someMehtod()<br>&gt; }<br>&gt; <br>&gt; Note that function like this :<br>&gt; func with&lt;T&gt;(item:T, apply:(T)-&gt;Void) {  apply(item) }<br>&gt; <br>&gt; Produces such kind of problems:<br>&gt; struct A {var x = 1}<br>&gt; let a1 = A() // constant<br>&gt; with (a1) { $0.x = 10 } // this will be compiled without errors/warnings<br>&gt; <br>&gt; <br>&gt; On 13.04.2016 17:17, Radosław Pietruszewski via swift-evolution wrote:<br>&gt;&gt; It can be (more-or-less) solved in library code today:<br>&gt;&gt; <br>&gt;&gt;    extension NSObjectProtocol {<br>&gt;&gt;        public func with(@noescape fn: Self -&gt; Void) -&gt; Self {<br>&gt;&gt;            fn(self)<br>&gt;&gt;            return self<br>&gt;&gt;        }<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; This way, you can do, on NSObjects:<br>&gt;&gt; <br>&gt;&gt;    textLabel.with {<br>&gt;&gt; <br>&gt;&gt;    $0.textAlignment = .Left<br>&gt;&gt; <br>&gt;&gt;    $0.textColor = .darkTextColor()<br>&gt;&gt; <br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I love this pattern.<br>&gt;&gt; <br>&gt;&gt; You can also make it a function to make it work with any value of any kind<br>&gt;&gt; (it will then take form of `with(foo) { …}`).<br>&gt;&gt; <br>&gt;&gt; Ideally, if you could write a universal extension (something like<br>&gt;&gt; `extension Any`), you could just add this behavior, with method syntax, to<br>&gt;&gt; everything.<br>&gt;&gt; <br>&gt;&gt; — Radek<br>&gt;&gt; <br>&gt;&gt;&gt; On 13 Apr 2016, at 15:15, 李海珍 via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I recently learned some VBA and I found a very conveniently `with` statement.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; `with` statement can be helpful to set property for UIKit instance.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; for instance a UILabel instance `textLabel` ,with `with` statement we can<br>&gt;&gt;&gt; set UILabel property like this<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ```swift<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; with textLabel{<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; .textAlignment= .Left<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; .textColor= UIColor.darkTextColor()<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; .font= UIFont.systemFontOfSize(15)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160423/fc7d0dba/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Discussion] &quot;with&quot; statement/method</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 25, 2016 at 04:00:00pm</p></header><div class="content"><p>@Thorsten, thank you for providing these functions and sample code.<br>Unfortunately personally I can&#39;t check them now to find out if there is <br>some problems with them. (But will check later)<br></p><p>In any case. Let&#39;s assume these functions are 100% fine and can be used in <br>almost any situation with no drawbacks.<br></p><p>Do you(and all other) agree that such functions should be a part of <br>standard library, so we&#39;ll have this &quot;with&quot; feature out-of-box with correct <br>implementation (and so there will be no need to re-invent them for many of <br>us and to re-copy into each project) ?<br></p><p>This is the main first question regarding this proposal.<br></p><p>On 23.04.2016 14:28, Thorsten Seitz wrote:<br>&gt;&gt; Note that function like this :<br>&gt;&gt; func with&lt;T&gt;(item:T, apply:(T)-&gt;Void) {  apply(item) }<br>&gt;&gt;<br>&gt;&gt; Produces such kind of problems:<br>&gt;&gt; struct A {var x = 1}<br>&gt;&gt; let a1 = A() // constant<br>&gt;&gt; with (a1) { $0.x = 10 } // this will be compiled without errors/warnings<br>&gt;<br>&gt; This works as expected (giving a compile error for let constant):<br>&gt;<br>&gt; // for value types<br>&gt; funcwith&lt;T&gt;(inoutitem: T, apply: (inoutT) throws-&gt; Void) rethrows-&gt; Void{<br>&gt;     tryapply(&amp;item)<br>&gt; }<br>&gt;<br>&gt; // for reference types (classes)<br>&gt; funcwith&lt;T: AnyObject&gt;(item: T, apply: (T) throws-&gt; Void) rethrows-&gt; T{<br>&gt;     tryapply(item)<br>&gt;     returnitem<br>&gt; }<br>&gt;<br>&gt; // value types<br>&gt;<br>&gt; structA { varx = 1}<br>&gt;<br>&gt; vara1 = A()<br>&gt; with(&amp;a1) {<br>&gt;     $0.x= 10<br>&gt; }<br>&gt; print(a1) // A(x: 10)<br>&gt;<br>&gt; /*<br>&gt; let a2 = A()<br>&gt; with (&amp;a2) { // error: cannot pass immutable value as inout argument: &#39;a2&#39;<br>&gt; is a &#39;let&#39; constant<br>&gt;     $0.x = 10<br>&gt; }<br>&gt; print(a2)<br>&gt; */<br>&gt;<br>&gt; // reference types (classes)<br>&gt;<br>&gt; classB : CustomDebugStringConvertible{<br>&gt;     vary = 1<br>&gt;     vardebugDescription: String{ return&quot;B(y: \(y))&quot;}<br>&gt; }<br>&gt;<br>&gt; varb1 = B()<br>&gt; with(b1) {<br>&gt;     $0.y= 11<br>&gt; }<br>&gt; print(b1) // B(y: 11)<br>&gt;<br>&gt; // reference types allow this pattern (value types don&#39;t)<br>&gt; letb2 = with(B()) {<br>&gt;     $0.y= 12<br>&gt; }<br>&gt; print(b2) // B(y: 12)<br>&gt;<br>&gt;<br>&gt; -Thorsten<br>&gt;<br>&gt;<br>&gt;&gt; Am 22.04.2016 um 09:18 schrieb Vladimir.S via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt;&gt;<br>&gt;&gt; Just wanted to summarize our opinions on this suggestion that we was<br>&gt;&gt; discussing earlier and check if someone is ready to crate an &quot;official&quot;<br>&gt;&gt; proposal for this feature.<br>&gt;&gt;<br>&gt;&gt; There a number of questions regarding this feature we can discuss, for<br>&gt;&gt; example statement vs method, what could be a placeholder of target<br>&gt;&gt; instance inside the scope($0, $, _, .., nothing etc)<br>&gt;&gt;<br>&gt;&gt; The main question, *do you support that we need &quot;with&quot; feature in some<br>&gt;&gt; way in Swift 3.0 out of the box* . And if so, what variant do you prefer.<br>&gt;&gt;<br>&gt;&gt; * this proposal is for *explicit* &quot;with&quot;, where it is clear what<br>&gt;&gt; method/property belongs to the &quot;target&quot; instance<br>&gt;&gt; * I believe that as such feature is really useful and handy, if it is<br>&gt;&gt; explicit and if it is clearly showing in code what we are doing - we want<br>&gt;&gt; to have this feature as part of language/standard lib rather than<br>&gt;&gt; possibility to use some workaround to implement it<br>&gt;&gt; * It is not about saving the space in code. It is about more readable and<br>&gt;&gt; (I insist) more stable(with less errors) code. Much less possibilities<br>&gt;&gt; for copy-paste errors. Wrong code completion suggestion(by editor) can<br>&gt;&gt; not produce error. It is explicit and clear, it has much less noise in code.<br>&gt;&gt; * Many of us already implemented and use such &quot;with&quot; construction in some way<br>&gt;&gt;<br>&gt;&gt; There were 2 main suggestions :<br>&gt;&gt;<br>&gt;&gt; 1) Introduce &quot;with&quot; statement that can be used in for example in such way:<br>&gt;&gt;<br>&gt;&gt; // set props just after creating<br>&gt;&gt; // similar to &quot;if let.. &quot; and &quot;guard let..&quot;<br>&gt;&gt; with let questionLabel = UILabel() {<br>&gt;&gt;  //set props of created instance here<br>&gt;&gt;  // here we can have:<br>&gt;&gt;  // $0.prop = value<br>&gt;&gt;  // or<br>&gt;&gt;  // ..prop = value<br>&gt;&gt;  // or<br>&gt;&gt;  // .prop = value<br>&gt;&gt;  // or<br>&gt;&gt;  // _.prop = value<br>&gt;&gt;  // or<br>&gt;&gt;  // $.prop = value<br>&gt;&gt;  // or ?<br>&gt;&gt; }<br>&gt;&gt; // questionLabel is available here<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; // works for structures<br>&gt;&gt; with var some = SomeStruct() {<br>&gt;&gt;  //...<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; // just for some class/structure/enum<br>&gt;&gt; with questionLabel {<br>&gt;&gt;  // ..<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; probably<br>&gt;&gt;<br>&gt;&gt; with var src = someNamedInstance1,<br>&gt;&gt;     let dst = someNamedInstance2 {<br>&gt;&gt;   src.propA = dst.propB<br>&gt;&gt;   dst.someMethod(src.propC)<br>&gt;&gt;   src.someMehtod()<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; or<br>&gt;&gt; with someNamedInstance1, someNamedInstance2 {<br>&gt;&gt;   $0.propA = $1.propB<br>&gt;&gt;   $1.someMethod($0.propC)<br>&gt;&gt;   $0.someMehtod()<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; 2) Introduce .with method for each(?) class/struct, so we can use out-of-box:<br>&gt;&gt;<br>&gt;&gt; let questionLabel = UILabel().with {<br>&gt;&gt;  //set props of created instance here<br>&gt;&gt;  $0.prop = value<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; var someStructInstance = SomeStruct().with {target in<br>&gt;&gt;  target.prop = value<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; questionLabel.with {label in<br>&gt;&gt;  label.prop = value<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; someNamedInstance1.with(someNamedInstance2) {src, dst in<br>&gt;&gt;   src.propA = dst.propB<br>&gt;&gt;   dst.someMethod(src.propC)<br>&gt;&gt;   src.someMehtod()<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; Note that function like this :<br>&gt;&gt; func with&lt;T&gt;(item:T, apply:(T)-&gt;Void) {  apply(item) }<br>&gt;&gt;<br>&gt;&gt; Produces such kind of problems:<br>&gt;&gt; struct A {var x = 1}<br>&gt;&gt; let a1 = A() // constant<br>&gt;&gt; with (a1) { $0.x = 10 } // this will be compiled without errors/warnings<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On 13.04.2016 17:17, Radosław Pietruszewski via swift-evolution wrote:<br>&gt;&gt;&gt; It can be (more-or-less) solved in library code today:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;    extension NSObjectProtocol {<br>&gt;&gt;&gt;        public func with(@noescape fn: Self -&gt; Void) -&gt; Self {<br>&gt;&gt;&gt;            fn(self)<br>&gt;&gt;&gt;            return self<br>&gt;&gt;&gt;        }<br>&gt;&gt;&gt;    }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; This way, you can do, on NSObjects:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;    textLabel.with {<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;    $0.textAlignment = .Left<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;    $0.textColor = .darkTextColor()<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;    }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I love this pattern.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; You can also make it a function to make it work with any value of any kind<br>&gt;&gt;&gt; (it will then take form of `with(foo) { …}`).<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Ideally, if you could write a universal extension (something like<br>&gt;&gt;&gt; `extension Any`), you could just add this behavior, with method syntax, to<br>&gt;&gt;&gt; everything.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; — Radek<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On 13 Apr 2016, at 15:15, 李海珍 via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I recently learned some VBA and I found a very conveniently `with`<br>&gt;&gt;&gt;&gt; statement.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; `with` statement can be helpful to set property for UIKit instance.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; for instance a UILabel instance `textLabel` ,with `with` statement we can<br>&gt;&gt;&gt;&gt; set UILabel property like this<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; ```swift<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; with textLabel{<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; .textAlignment= .Left<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; .textColor= UIColor.darkTextColor()<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; .font= UIFont.systemFontOfSize(15)<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
