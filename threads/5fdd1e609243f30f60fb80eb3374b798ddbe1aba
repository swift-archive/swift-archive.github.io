<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e41b4af40e5dcd99ca063dbbfd7af182?s=50"></div><header><strong>[swift-evolution] [Proposal] Applying local git patches</strong> from <string>Valentin Radu</string> &lt;radu.v.valentin at me.com&gt;<p>January 11, 2016 at 12:00:00am</p></header><div class="content"><p>Hello all,<br></p><p>I’d like to discuss the possibility of adding support for git patching packages.<br></p><p>This would solve the following problem:<br></p><p>You want to add library A to your project. It’s open source and mostly does what it says, but has a small bug. You fix the bug but the library’s developer is not responsive or doesn’t want to add the fix right away. Or, maybe you add a small modification to fit your requirements. Either case, you would like to have a way to apply your patch but also keep the original repo linked.<br></p><p>Both text (i.e. `empty_name.patch`) and local/remote url patches could be supported. For the urls, they could be contained in the package manifest. The files could follow the directory naming convention (maybe `Patches`?)<br></p><p>The only way I can think of achieving something similar would be to separately clone project A, make the changes and maintain yet another repo. This, in my opinion, should be avoided.<br></p><p>Please let me know what you think about it. <br></p><p>– Valentin<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>[swift-evolution] [Proposal] Applying local git patches</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>January 11, 2016 at 12:00:00am</p></header><div class="content"><p>Hello Valentin,<br></p><p>setting up a repository with a custom branch is so easy today, I don&#39;t think that I personally would use this feature (actually, I&#39;m quite sure for most developers it is easier to fork a repo than to create a patch…).<br></p><p>That said, the feature wouldn&#39;t hurt me (although I would be quite happy if the Kernel for my Raspi would have a proper repo instead of an arcane buildscript that applies a series of patches)<br></p><p>Best regards,<br>Tino<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e41b4af40e5dcd99ca063dbbfd7af182?s=50"></div><header><strong>[swift-evolution] [Proposal] Applying local git patches</strong> from <string>Valentin Radu</string> &lt;radu.v.valentin at me.com&gt;<p>January 11, 2016 at 01:00:00pm</p></header><div class="content"><p>Hey Tino,<br></p><p>That makes sense, having a forked repo with your own branch works best for situations like you described, significant or multiple changes to the original repo. I wouldn&#39;t use arcane patches either for a custom kernel.<br></p><p>However, I recently had to make a very tiny change to a repo, one line of code and it felt wrong to loose the ability to draw from the original upstream because of it.<br></p><p>It was after all, such a minor change that could have been applied after each upstream pull. I know, this could lead to merging conflicts if you support arbitrary versions (x.x +), however, merging your forked repo would lead to the same thing, but remotely (another thing to worry about)<br></p><p>To be honest, I&#39;m not convinced either this would be the best course of action, but it does build upon git, and it does help in certain situations. I&#39;m not sure how often their occurance is tho<br></p><p>- V<br></p><p><br>Sent from my iPhone<br></p><p>&gt; On 11 Jan 2016, at 01:20, Tino Heth &lt;2th at gmx.de&gt; wrote:<br>&gt; <br>&gt; Hello Valentin,<br>&gt; <br>&gt; setting up a repository with a custom branch is so easy today, I don&#39;t think that I personally would use this feature (actually, I&#39;m quite sure for most developers it is easier to fork a repo than to create a patch…).<br>&gt; <br>&gt; That said, the feature wouldn&#39;t hurt me (although I would be quite happy if the Kernel for my Raspi would have a proper repo instead of an arcane buildscript that applies a series of patches)<br>&gt; <br>&gt; Best regards,<br>&gt; Tino<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ae51ca494b37cc270597830da66f089f?s=50"></div><header><strong>[swift-evolution] [Proposal] Applying local git patches</strong> from <string>Max Howell</string> &lt;max.howell at apple.com&gt;<p>January 12, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; Hello all,<br>&gt; <br>&gt; I’d like to discuss the possibility of adding support for git patching packages.<br>&gt; <br>&gt; This would solve the following problem:<br>&gt; <br>&gt; You want to add library A to your project. It’s open source and mostly does what it says, but has a small bug. You fix the bug but the library’s developer is not responsive or doesn’t want to add the fix right away. Or, maybe you add a small modification to fit your requirements. Either case, you would like to have a way to apply your patch but also keep the original repo linked.<br>&gt; <br>&gt; Both text (i.e. `empty_name.patch`) and local/remote url patches could be supported. For the urls, they could be contained in the package manifest. The files could follow the directory naming convention (maybe `Patches`?)<br>&gt; <br>&gt; The only way I can think of achieving something similar would be to separately clone project A, make the changes and maintain yet another repo. This, in my opinion, should be avoided.<br>&gt; <br>&gt; Please let me know what you think about it. <br></p><p>My perspective here is:<br></p><p>1) You can do this by checking in your Packages directory, once this is a supported feature (which is intended) SwiftPM will warn that your Packages directory differs from that of upstream.<br>2) You can fork and change which fork is used as per our lockfile proposal<br></p><p>How do these options sound?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ae51ca494b37cc270597830da66f089f?s=50"></div><header><strong>[swift-evolution] [Proposal] Applying local git patches</strong> from <string>Max Howell</string> &lt;max.howell at apple.com&gt;<p>January 12, 2016 at 04:00:00pm</p></header><div class="content"><p>3) Add a Swift Extensions in your own modules if possible<br>&gt; <br>&gt; My perspective here is:<br>&gt; <br>&gt; 1) You can do this by checking in your Packages directory, once this is a supported feature (which is intended) SwiftPM will warn that your Packages directory differs from that of upstream.<br>&gt; 2) You can fork and change which fork is used as per our lockfile proposal<br>&gt; <br>&gt; How do these options sound?<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160112/0cb0825f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e41b4af40e5dcd99ca063dbbfd7af182?s=50"></div><header><strong>[swift-evolution] [Proposal] Applying local git patches</strong> from <string>Valentin Radu</string> &lt;radu.v.valentin at me.com&gt;<p>January 13, 2016 at 12:00:00pm</p></header><div class="content"><p>1) - sounds good. Will it fast forward any changes if possible (or attempt merging at all) on demand? Is there a proposal re this?<br></p><p>Sent from my iPhone<br></p><p>&gt; On 13 Jan 2016, at 02:53, Max Howell &lt;max.howell at apple.com&gt; wrote:<br>&gt; <br>&gt; 3) Add a Swift Extensions in your own modules if possible<br>&gt;&gt; <br>&gt;&gt; My perspective here is:<br>&gt;&gt; <br>&gt;&gt; 1) You can do this by checking in your Packages directory, once this is a supported feature (which is intended) SwiftPM will warn that your Packages directory differs from that of upstream.<br>&gt;&gt; 2) You can fork and change which fork is used as per our lockfile proposal<br>&gt;&gt; <br>&gt;&gt; How do these options sound?<br>&gt; <br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160113/d46ee504/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ae51ca494b37cc270597830da66f089f?s=50"></div><header><strong>[swift-evolution] [Proposal] Applying local git patches</strong> from <string>Max Howell</string> &lt;max.howell at apple.com&gt;<p>January 13, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; 1) - sounds good. Will it fast forward any changes if possible (or attempt merging at all) on demand? Is there a proposal re this?<br></p><p>The stuff in Packages are actual clones, so you can manage your own merging. However I should think the default update command can try to do it for you, yes.<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
