<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3a6c94632d8c82a2f077bbabbdd412f6?s=50"></div><header><strong>Role of Brace-Stmt in Swift AST</strong> from <string>Toni Suter</string> &lt;tonisuter at me.com&gt;<p>March 23, 2016 at 01:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>I am trying to understand the Swift AST by looking at output produced from swiftc -dump-ast &lt;file&gt;.<br>Most of it makes sense to me, but there are some things that I don’t understand. For example, consider<br>the following code:<br></p><p>var x = 42<br></p><p>This produces the following output:<br></p><p>(source_file<br>  (top_level_code_decl<br>    (brace_stmt<br>      (pattern_binding_decl<br>        (pattern_named type=&#39;Int&#39; &#39;x&#39;)<br>        (call_expr implicit type=&#39;Int&#39; location=test.swift:1:9 range=[test.swift:1:9 - line:1:9] nothrow<br>          (constructor_ref_call_expr implicit type=&#39;(_builtinIntegerLiteral: Int2048) -&gt; Int&#39; location=test.swift:1:9 range=[test.swift:1:9 - line:1:9] nothrow<br>            (declref_expr implicit type=&#39;Int.Type -&gt; (_builtinIntegerLiteral: Int2048) -&gt; Int&#39; location=test.swift:1:9 range=[test.swift:1:9 - line:1:9] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) specialized=no)<br>            (type_expr implicit type=&#39;Int.Type&#39; location=test.swift:1:9 range=[test.swift:1:9 - line:1:9] typerepr=&#39;Int&#39;))<br>          (tuple_expr implicit type=&#39;(_builtinIntegerLiteral: Int2048)&#39; location=test.swift:1:9 range=[test.swift:1:9 - line:1:9] names=_builtinIntegerLiteral<br>            (integer_literal_expr type=&#39;Int2048&#39; location=test.swift:1:9 range=[test.swift:1:9 - line:1:9] value=42))))<br>))<br>  (var_decl &quot;x&quot; type=&#39;Int&#39; access=internal storage_kind=stored))<br></p><p>Intuitively, I would have expected that the initializer is part of the var_decl. Also, why is there a brace_stmt involved?<br>As far as I have seen, the term brace statement doesn’t appear anywhere in the Swift Language Reference. Is it the<br>same as code-block &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/swift/grammar/code-block&gt;?<br></p><p>Thanks in advance!<br></p><p>Best regards,<br>Toni<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160323/f3b2107e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/caa7226ca750e974668243476ffbafd5?s=50"></div><header><strong>Role of Brace-Stmt in Swift AST</strong> from <string>Greg Titus</string> &lt;greg at omnigroup.com&gt;<p>March 23, 2016 at 09:00:00am</p></header><div class="content"><p>Hi Toni,<br></p><p>What you are seeing is a side-effect of / workaround for the use of top-level executable statements.<br></p><p>In general, at the top level of a source file you expect declarations (of types, of functions, etc) and then statements will be inside those declarations (the implementations of free functions or members, etc). Various portions of the type checker and AST checker depend on these assumptions — that scanning through the top-level parts of a source file will be all declarations, and conversely, that every statement will be inside braces (e.g. “{}”) to control scopes and so on.<br></p><p>When compiling in library-mode, this setup is always true. But when compiling for playgrounds/tools/etc you can have executable statements at the top level. In order to keep the expected invariants of declarations on top and statements inside, top_level_code_decl is a declaration that contains a brace_stmt that contains the parsed top-level executable statements.<br></p><p>And then finally, because you are declaring a variable “x” that ought to be visible further down in the file, the var_decl, which would normally be in the scope inside the braces in a ‘normal’ declaration is emitted at the top level as well. <br></p><p>In short, the AST for this kind of thing is a bit weird looking in order to preserve expected structure invariants of the tree.<br></p><p>Hope this helps!<br>	- Greg<br></p><p>&gt; On Mar 23, 2016, at 5:58 AM, Toni Suter via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; I am trying to understand the Swift AST by looking at output produced from swiftc -dump-ast &lt;file&gt;.<br>&gt; Most of it makes sense to me, but there are some things that I don’t understand. For example, consider<br>&gt; the following code:<br>&gt; <br>&gt; var x = 42<br>&gt; <br>&gt; This produces the following output:<br>&gt; <br>&gt; (source_file<br>&gt;   (top_level_code_decl<br>&gt;     (brace_stmt<br>&gt;       (pattern_binding_decl<br>&gt;         (pattern_named type=&#39;Int&#39; &#39;x&#39;)<br>&gt;         (call_expr implicit type=&#39;Int&#39; location=test.swift:1:9 range=[test.swift:1:9 - line:1:9] nothrow<br>&gt;           (constructor_ref_call_expr implicit type=&#39;(_builtinIntegerLiteral: Int2048) -&gt; Int&#39; location=test.swift:1:9 range=[test.swift:1:9 - line:1:9] nothrow<br>&gt;             (declref_expr implicit type=&#39;Int.Type -&gt; (_builtinIntegerLiteral: Int2048) -&gt; Int&#39; location=test.swift:1:9 range=[test.swift:1:9 - line:1:9] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) specialized=no)<br>&gt;             (type_expr implicit type=&#39;Int.Type&#39; location=test.swift:1:9 range=[test.swift:1:9 - line:1:9] typerepr=&#39;Int&#39;))<br>&gt;           (tuple_expr implicit type=&#39;(_builtinIntegerLiteral: Int2048)&#39; location=test.swift:1:9 range=[test.swift:1:9 - line:1:9] names=_builtinIntegerLiteral<br>&gt;             (integer_literal_expr type=&#39;Int2048&#39; location=test.swift:1:9 range=[test.swift:1:9 - line:1:9] value=42))))<br>&gt; ))<br>&gt;   (var_decl &quot;x&quot; type=&#39;Int&#39; access=internal storage_kind=stored))<br>&gt; <br>&gt; Intuitively, I would have expected that the initializer is part of the var_decl. Also, why is there a brace_stmt involved?<br>&gt; As far as I have seen, the term brace statement doesn’t appear anywhere in the Swift Language Reference. Is it the<br>&gt; same as code-block &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/swift/grammar/code-block&gt;?<br>&gt; <br>&gt; Thanks in advance!<br>&gt; <br>&gt; Best regards,<br>&gt; Toni<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160323/2af2dc6c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3a6c94632d8c82a2f077bbabbdd412f6?s=50"></div><header><strong>Role of Brace-Stmt in Swift AST</strong> from <string>Toni Suter</string> &lt;tonisuter at me.com&gt;<p>March 23, 2016 at 08:00:00pm</p></header><div class="content"><p>Hi Greg,<br></p><p>Thanks very much for the clear answer. This helps me a lot!<br></p><p>Best regards,<br>Toni<br></p><p>&gt; On 23 Mar 2016, at 17:53, Greg Titus &lt;greg at omnigroup.com&gt; wrote:<br>&gt; <br>&gt; Hi Toni,<br>&gt; <br>&gt; What you are seeing is a side-effect of / workaround for the use of top-level executable statements.<br>&gt; <br>&gt; In general, at the top level of a source file you expect declarations (of types, of functions, etc) and then statements will be inside those declarations (the implementations of free functions or members, etc). Various portions of the type checker and AST checker depend on these assumptions — that scanning through the top-level parts of a source file will be all declarations, and conversely, that every statement will be inside braces (e.g. “{}”) to control scopes and so on.<br>&gt; <br>&gt; When compiling in library-mode, this setup is always true. But when compiling for playgrounds/tools/etc you can have executable statements at the top level. In order to keep the expected invariants of declarations on top and statements inside, top_level_code_decl is a declaration that contains a brace_stmt that contains the parsed top-level executable statements.<br>&gt; <br>&gt; And then finally, because you are declaring a variable “x” that ought to be visible further down in the file, the var_decl, which would normally be in the scope inside the braces in a ‘normal’ declaration is emitted at the top level as well. <br>&gt; <br>&gt; In short, the AST for this kind of thing is a bit weird looking in order to preserve expected structure invariants of the tree.<br>&gt; <br>&gt; Hope this helps!<br>&gt; 	- Greg<br>&gt; <br>&gt;&gt; On Mar 23, 2016, at 5:58 AM, Toni Suter via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi,<br>&gt;&gt; <br>&gt;&gt; I am trying to understand the Swift AST by looking at output produced from swiftc -dump-ast &lt;file&gt;.<br>&gt;&gt; Most of it makes sense to me, but there are some things that I don’t understand. For example, consider<br>&gt;&gt; the following code:<br>&gt;&gt; <br>&gt;&gt; var x = 42<br>&gt;&gt; <br>&gt;&gt; This produces the following output:<br>&gt;&gt; <br>&gt;&gt; (source_file<br>&gt;&gt;   (top_level_code_decl<br>&gt;&gt;     (brace_stmt<br>&gt;&gt;       (pattern_binding_decl<br>&gt;&gt;         (pattern_named type=&#39;Int&#39; &#39;x&#39;)<br>&gt;&gt;         (call_expr implicit type=&#39;Int&#39; location=test.swift:1:9 range=[test.swift:1:9 - line:1:9] nothrow<br>&gt;&gt;           (constructor_ref_call_expr implicit type=&#39;(_builtinIntegerLiteral: Int2048) -&gt; Int&#39; location=test.swift:1:9 range=[test.swift:1:9 - line:1:9] nothrow<br>&gt;&gt;             (declref_expr implicit type=&#39;Int.Type -&gt; (_builtinIntegerLiteral: Int2048) -&gt; Int&#39; location=test.swift:1:9 range=[test.swift:1:9 - line:1:9] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) specialized=no)<br>&gt;&gt;             (type_expr implicit type=&#39;Int.Type&#39; location=test.swift:1:9 range=[test.swift:1:9 - line:1:9] typerepr=&#39;Int&#39;))<br>&gt;&gt;           (tuple_expr implicit type=&#39;(_builtinIntegerLiteral: Int2048)&#39; location=test.swift:1:9 range=[test.swift:1:9 - line:1:9] names=_builtinIntegerLiteral<br>&gt;&gt;             (integer_literal_expr type=&#39;Int2048&#39; location=test.swift:1:9 range=[test.swift:1:9 - line:1:9] value=42))))<br>&gt;&gt; ))<br>&gt;&gt;   (var_decl &quot;x&quot; type=&#39;Int&#39; access=internal storage_kind=stored))<br>&gt;&gt; <br>&gt;&gt; Intuitively, I would have expected that the initializer is part of the var_decl. Also, why is there a brace_stmt involved?<br>&gt;&gt; As far as I have seen, the term brace statement doesn’t appear anywhere in the Swift Language Reference. Is it the<br>&gt;&gt; same as code-block &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/swift/grammar/code-block&gt;?<br>&gt;&gt; <br>&gt;&gt; Thanks in advance!<br>&gt;&gt; <br>&gt;&gt; Best regards,<br>&gt;&gt; Toni<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-dev mailing list<br>&gt;&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160323/40dfc6c9/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
