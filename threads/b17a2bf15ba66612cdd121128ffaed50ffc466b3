<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9b667f2c07faf9d4f65628effe475382?s=50"></div><header><strong>&quot;bad smells&quot; should be compiler errors with suggestions on how to fix them</strong> from <string>Amir Michail</string> &lt;amichail at gmail.com&gt;<p>December  4, 2015 at 06:00:00pm</p></header><div class="content"><p>Perhaps you could specify a programming style at the top of each file (e.g., OOP, functional, hybrid, etc.) and code that doesn’t match that style would result in a compiler error.<br></p><p>For example, a long method could trigger an error along with suggestions for refactorings to fix this “bad smell”.<br></p><p>If you don’t want to fix the problem, you could use a style exception construct to surround the code in question and it would get rid of the compile error.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d30e546d655d1c7ece0464791a9a90d5?s=50"></div><header><strong>&quot;bad smells&quot; should be compiler errors with suggestions on how to fix them</strong> from <string>Adrian Kashivskyy</string> &lt;adrian.kashivskyy at me.com&gt;<p>December  5, 2015 at 11:00:00am</p></header><div class="content"><p>I&#39;m -1 on that – compiler should guarantee the program correctness, not style correctness.<br></p><p>&gt; Perhaps you could specify a programming style at the top of each file (e.g., OOP, functional, hybrid, etc.)<br></p><p>I almost immediately thought of whole projects where people would put `@style(hybrid)` at the top to get rid of troublesome compiler warnings, or put the &quot;style exception&quot; annotation for the whole file. This would become &quot;public static void main&quot; of Swift.<br></p><p>&gt; For example, a long method could trigger an error along with suggestions for refactorings to fix this “bad smell”.<br></p><p>My greatest concern is about who will define what &quot;bad smell&quot; and individual styles look like. Coding style is a very subjective matter, and should not be enforced by compiler or any manifest (that&#39;s why I&#39;m against strict code style guides as well).<br></p><p>Besides, enforcing one style per source file would loose one of the best features of Swift – diversity. Swift is a multi-paradigm language, influenced by the best features of many other modern languages. It is imperative, functional, object-oriented and protocol-oriented at the same time. We&#39;d loose that variety.<br></p><p><br>Regards,<br>Adrian Kashivskyy<br>iOS Developer at Netguru<br></p><p>&gt; Wiadomość napisana przez Amir Michail &lt;amichail at gmail.com&gt; w dniu 05.12.2015, o godz. 00:53:<br>&gt; <br>&gt; Perhaps you could specify a programming style at the top of each file (e.g., OOP, functional, hybrid, etc.) and code that doesn’t match that style would result in a compiler error.<br>&gt; <br>&gt; For example, a long method could trigger an error along with suggestions for refactorings to fix this “bad smell”.<br>&gt; <br>&gt; If you don’t want to fix the problem, you could use a style exception construct to surround the code in question and it would get rid of the compile error.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/24f94159/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9b667f2c07faf9d4f65628effe475382?s=50"></div><header><strong>&quot;bad smells&quot; should be compiler errors with suggestions on how to fix them</strong> from <string>Amir Michail</string> &lt;amichail at gmail.com&gt;<p>December  5, 2015 at 08:00:00am</p></header><div class="content"><p>The problem is that solo developers rarely have the self-discipline to avoid obviously bad code style.<br></p><p>&gt; On Dec 5, 2015, at 5:15 AM, Adrian Kashivskyy &lt;adrian.kashivskyy at me.com&gt; wrote:<br>&gt; <br>&gt; I&#39;m -1 on that – compiler should guarantee the program correctness, not style correctness.<br>&gt; <br>&gt;&gt; Perhaps you could specify a programming style at the top of each file (e.g., OOP, functional, hybrid, etc.)<br>&gt; <br>&gt; I almost immediately thought of whole projects where people would put `@style(hybrid)` at the top to get rid of troublesome compiler warnings, or put the &quot;style exception&quot; annotation for the whole file. This would become &quot;public static void main&quot; of Swift.<br>&gt; <br>&gt;&gt; For example, a long method could trigger an error along with suggestions for refactorings to fix this “bad smell”.<br>&gt; <br>&gt; My greatest concern is about who will define what &quot;bad smell&quot; and individual styles look like. Coding style is a very subjective matter, and should not be enforced by compiler or any manifest (that&#39;s why I&#39;m against strict code style guides as well).<br>&gt; <br>&gt; Besides, enforcing one style per source file would loose one of the best features of Swift – diversity. Swift is a multi-paradigm language, influenced by the best features of many other modern languages. It is imperative, functional, object-oriented and protocol-oriented at the same time. We&#39;d loose that variety.<br>&gt; <br>&gt; <br>&gt; Regards,<br>&gt; Adrian Kashivskyy<br>&gt; iOS Developer at Netguru<br>&gt; <br>&gt;&gt; Wiadomość napisana przez Amir Michail &lt;amichail at gmail.com &lt;mailto:amichail at gmail.com&gt;&gt; w dniu 05.12.2015, o godz. 00:53:<br>&gt;&gt; <br>&gt;&gt; Perhaps you could specify a programming style at the top of each file (e.g., OOP, functional, hybrid, etc.) and code that doesn’t match that style would result in a compiler error.<br>&gt;&gt; <br>&gt;&gt; For example, a long method could trigger an error along with suggestions for refactorings to fix this “bad smell”.<br>&gt;&gt; <br>&gt;&gt; If you don’t want to fix the problem, you could use a style exception construct to surround the code in question and it would get rid of the compile error.<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/a3a01419/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>&quot;bad smells&quot; should be compiler errors with suggestions on how to fix them</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>December  5, 2015 at 05:00:00am</p></header><div class="content"><p>Rather than having the compiler attempt to enforce (subjective, constantly evolving) best practices, maybe we should think about ways to make it easier for people to write their own linters that can integrate well with the rest of the toolchain.<br></p><p>Austin<br></p><p>&gt; On Dec 5, 2015, at 5:02 AM, Amir Michail &lt;amichail at gmail.com&gt; wrote:<br>&gt; <br>&gt; The problem is that solo developers rarely have the self-discipline to avoid obviously bad code style.<br>&gt; <br>&gt;&gt; On Dec 5, 2015, at 5:15 AM, Adrian Kashivskyy &lt;adrian.kashivskyy at me.com &lt;mailto:adrian.kashivskyy at me.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I&#39;m -1 on that – compiler should guarantee the program correctness, not style correctness.<br>&gt;&gt; <br>&gt;&gt;&gt; Perhaps you could specify a programming style at the top of each file (e.g., OOP, functional, hybrid, etc.)<br>&gt;&gt; <br>&gt;&gt; I almost immediately thought of whole projects where people would put `@style(hybrid)` at the top to get rid of troublesome compiler warnings, or put the &quot;style exception&quot; annotation for the whole file. This would become &quot;public static void main&quot; of Swift.<br>&gt;&gt; <br>&gt;&gt;&gt; For example, a long method could trigger an error along with suggestions for refactorings to fix this “bad smell”.<br>&gt;&gt; <br>&gt;&gt; My greatest concern is about who will define what &quot;bad smell&quot; and individual styles look like. Coding style is a very subjective matter, and should not be enforced by compiler or any manifest (that&#39;s why I&#39;m against strict code style guides as well).<br>&gt;&gt; <br>&gt;&gt; Besides, enforcing one style per source file would loose one of the best features of Swift – diversity. Swift is a multi-paradigm language, influenced by the best features of many other modern languages. It is imperative, functional, object-oriented and protocol-oriented at the same time. We&#39;d loose that variety.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Regards,<br>&gt;&gt; Adrian Kashivskyy<br>&gt;&gt; iOS Developer at Netguru<br>&gt;&gt; <br>&gt;&gt;&gt; Wiadomość napisana przez Amir Michail &lt;amichail at gmail.com &lt;mailto:amichail at gmail.com&gt;&gt; w dniu 05.12.2015, o godz. 00:53:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Perhaps you could specify a programming style at the top of each file (e.g., OOP, functional, hybrid, etc.) and code that doesn’t match that style would result in a compiler error.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; For example, a long method could trigger an error along with suggestions for refactorings to fix this “bad smell”.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If you don’t want to fix the problem, you could use a style exception construct to surround the code in question and it would get rid of the compile error.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/c451d368/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9b667f2c07faf9d4f65628effe475382?s=50"></div><header><strong>&quot;bad smells&quot; should be compiler errors with suggestions on how to fix them</strong> from <string>Amir Michail</string> &lt;amichail at gmail.com&gt;<p>December  5, 2015 at 08:00:00am</p></header><div class="content"><p>&gt; On Dec 5, 2015, at 8:14 AM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt; <br>&gt; Rather than having the compiler attempt to enforce (subjective, constantly evolving) best practices, maybe we should think about ways to make it easier for people to write their own linters that can integrate well with the rest of the toolchain.<br></p><p>All programming languages are already enforcing subjective views about best practice in one form or another.<br></p><p>&gt; <br>&gt; Austin<br>&gt; <br>&gt;&gt; On Dec 5, 2015, at 5:02 AM, Amir Michail &lt;amichail at gmail.com &lt;mailto:amichail at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The problem is that solo developers rarely have the self-discipline to avoid obviously bad code style.<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 5, 2015, at 5:15 AM, Adrian Kashivskyy &lt;adrian.kashivskyy at me.com &lt;mailto:adrian.kashivskyy at me.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m -1 on that – compiler should guarantee the program correctness, not style correctness.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Perhaps you could specify a programming style at the top of each file (e.g., OOP, functional, hybrid, etc.)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I almost immediately thought of whole projects where people would put `@style(hybrid)` at the top to get rid of troublesome compiler warnings, or put the &quot;style exception&quot; annotation for the whole file. This would become &quot;public static void main&quot; of Swift.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; For example, a long method could trigger an error along with suggestions for refactorings to fix this “bad smell”.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; My greatest concern is about who will define what &quot;bad smell&quot; and individual styles look like. Coding style is a very subjective matter, and should not be enforced by compiler or any manifest (that&#39;s why I&#39;m against strict code style guides as well).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Besides, enforcing one style per source file would loose one of the best features of Swift – diversity. Swift is a multi-paradigm language, influenced by the best features of many other modern languages. It is imperative, functional, object-oriented and protocol-oriented at the same time. We&#39;d loose that variety.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Regards,<br>&gt;&gt;&gt; Adrian Kashivskyy<br>&gt;&gt;&gt; iOS Developer at Netguru<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Wiadomość napisana przez Amir Michail &lt;amichail at gmail.com &lt;mailto:amichail at gmail.com&gt;&gt; w dniu 05.12.2015, o godz. 00:53:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Perhaps you could specify a programming style at the top of each file (e.g., OOP, functional, hybrid, etc.) and code that doesn’t match that style would result in a compiler error.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; For example, a long method could trigger an error along with suggestions for refactorings to fix this “bad smell”.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If you don’t want to fix the problem, you could use a style exception construct to surround the code in question and it would get rid of the compile error.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/4ae5fcf8/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>&quot;bad smells&quot; should be compiler errors with suggestions on how to fix them</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>December  5, 2015 at 05:00:00am</p></header><div class="content"><p>This is a bit pedantic. Every programming language and associated community (that I am aware of) makes a distinction between the set of inputs accepted by the compiler/interpreter, and the set of inputs constrained by whatever community conventions have evolved over time.<br></p><p>Anyways, I am -1 on this as well for the same reasons Adrian brought up: endless disagreement over what constitutes &quot;OOP&quot;, &quot;functional&quot;, etc programming style, and the loss of the ability to leverage Swift in a multi-paradigm fashion without ugly boilerplate.<br></p><p>Austin<br></p><p>&gt; On Dec 5, 2015, at 5:43 AM, Amir Michail &lt;amichail at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Dec 5, 2015, at 8:14 AM, Austin Zheng &lt;austinzheng at gmail.com &lt;mailto:austinzheng at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Rather than having the compiler attempt to enforce (subjective, constantly evolving) best practices, maybe we should think about ways to make it easier for people to write their own linters that can integrate well with the rest of the toolchain.<br>&gt; <br>&gt; All programming languages are already enforcing subjective views about best practice in one form or another.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Austin<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 5, 2015, at 5:02 AM, Amir Michail &lt;amichail at gmail.com &lt;mailto:amichail at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The problem is that solo developers rarely have the self-discipline to avoid obviously bad code style.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 5, 2015, at 5:15 AM, Adrian Kashivskyy &lt;adrian.kashivskyy at me.com &lt;mailto:adrian.kashivskyy at me.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;m -1 on that – compiler should guarantee the program correctness, not style correctness.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Perhaps you could specify a programming style at the top of each file (e.g., OOP, functional, hybrid, etc.)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I almost immediately thought of whole projects where people would put `@style(hybrid)` at the top to get rid of troublesome compiler warnings, or put the &quot;style exception&quot; annotation for the whole file. This would become &quot;public static void main&quot; of Swift.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; For example, a long method could trigger an error along with suggestions for refactorings to fix this “bad smell”.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; My greatest concern is about who will define what &quot;bad smell&quot; and individual styles look like. Coding style is a very subjective matter, and should not be enforced by compiler or any manifest (that&#39;s why I&#39;m against strict code style guides as well).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Besides, enforcing one style per source file would loose one of the best features of Swift – diversity. Swift is a multi-paradigm language, influenced by the best features of many other modern languages. It is imperative, functional, object-oriented and protocol-oriented at the same time. We&#39;d loose that variety.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Regards,<br>&gt;&gt;&gt;&gt; Adrian Kashivskyy<br>&gt;&gt;&gt;&gt; iOS Developer at Netguru<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Wiadomość napisana przez Amir Michail &lt;amichail at gmail.com &lt;mailto:amichail at gmail.com&gt;&gt; w dniu 05.12.2015, o godz. 00:53:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Perhaps you could specify a programming style at the top of each file (e.g., OOP, functional, hybrid, etc.) and code that doesn’t match that style would result in a compiler error.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; For example, a long method could trigger an error along with suggestions for refactorings to fix this “bad smell”.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; If you don’t want to fix the problem, you could use a style exception construct to surround the code in question and it would get rid of the compile error.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/0d1febb0/attachment-0001.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ee593093b3a4aa721ad6979c752a9c9d?s=50"></div><header><strong>&quot;bad smells&quot; should be compiler errors with suggestions on how to fix them</strong> from <string>Paul Young</string> &lt;paulyoungonline at gmail.com&gt;<p>December  5, 2015 at 06:00:00am</p></header><div class="content"><p>Amir, you may be interested in SwiftLint: https://github.com/realm/SwiftLint<br></p><p>On Sat, Dec 5, 2015 at 1:43 PM, Amir Michail &lt;amichail at gmail.com&gt; wrote:<br></p><p>&gt;&gt; On Dec 5, 2015, at 8:14 AM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Rather than having the compiler attempt to enforce (subjective, constantly evolving) best practices, maybe we should think about ways to make it easier for people to write their own linters that can integrate well with the rest of the toolchain.<br>&gt; All programming languages are already enforcing subjective views about best practice in one form or another.<br>&gt;&gt; <br>&gt;&gt; Austin<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 5, 2015, at 5:02 AM, Amir Michail &lt;amichail at gmail.com &lt;mailto:amichail at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The problem is that solo developers rarely have the self-discipline to avoid obviously bad code style.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 5, 2015, at 5:15 AM, Adrian Kashivskyy &lt;adrian.kashivskyy at me.com &lt;mailto:adrian.kashivskyy at me.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;m -1 on that – compiler should guarantee the program correctness, not style correctness.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Perhaps you could specify a programming style at the top of each file (e.g., OOP, functional, hybrid, etc.)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I almost immediately thought of whole projects where people would put `@style(hybrid)` at the top to get rid of troublesome compiler warnings, or put the &quot;style exception&quot; annotation for the whole file. This would become &quot;public static void main&quot; of Swift.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; For example, a long method could trigger an error along with suggestions for refactorings to fix this “bad smell”.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; My greatest concern is about who will define what &quot;bad smell&quot; and individual styles look like. Coding style is a very subjective matter, and should not be enforced by compiler or any manifest (that&#39;s why I&#39;m against strict code style guides as well).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Besides, enforcing one style per source file would loose one of the best features of Swift – diversity. Swift is a multi-paradigm language, influenced by the best features of many other modern languages. It is imperative, functional, object-oriented and protocol-oriented at the same time. We&#39;d loose that variety.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Regards,<br>&gt;&gt;&gt;&gt; Adrian Kashivskyy<br>&gt;&gt;&gt;&gt; iOS Developer at Netguru<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Wiadomość napisana przez Amir Michail &lt;amichail at gmail.com &lt;mailto:amichail at gmail.com&gt;&gt; w dniu 05.12.2015, o godz. 00:53:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Perhaps you could specify a programming style at the top of each file (e.g., OOP, functional, hybrid, etc.) and code that doesn’t match that style would result in a compiler error.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; For example, a long method could trigger an error along with suggestions for refactorings to fix this “bad smell”.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; If you don’t want to fix the problem, you could use a style exception construct to surround the code in question and it would get rid of the compile error.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/892dc461/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8ae34e6aaf28c0e1fe929f36897d107e?s=50"></div><header><strong>&quot;bad smells&quot; should be compiler errors with suggestions on how to fix them</strong> from <string>Harlan Haskins</string> &lt;harlan at harlanhaskins.com&gt;<p>December  5, 2015 at 11:00:00am</p></header><div class="content"><p>SwiftLint looks really nice, but one thing I&#39;d really like is automatic formatting. I&#39;d absolutely like to see clang-format adapted with Swift support. Maybe the SwiftLint people can, now that Swift is open source, contribute the bulk of the SwiftLint project directly into clang-format.<br></p><p>&gt; On Dec 5, 2015, at 9:09 AM, Paul Young &lt;paulyoungonline at gmail.com&gt; wrote:<br>&gt; <br>&gt; Amir, you may be interested in SwiftLint: https://github.com/realm/SwiftLint<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Sat, Dec 5, 2015 at 1:43 PM, Amir Michail &lt;amichail at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 5, 2015, at 8:14 AM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Rather than having the compiler attempt to enforce (subjective, constantly evolving) best practices, maybe we should think about ways to make it easier for people to write their own linters that can integrate well with the rest of the toolchain.<br>&gt;&gt; <br>&gt;&gt; All programming languages are already enforcing subjective views about best practice in one form or another.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Austin<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 5, 2015, at 5:02 AM, Amir Michail &lt;amichail at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The problem is that solo developers rarely have the self-discipline to avoid obviously bad code style.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 5, 2015, at 5:15 AM, Adrian Kashivskyy &lt;adrian.kashivskyy at me.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I&#39;m -1 on that – compiler should guarantee the program correctness, not style correctness.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Perhaps you could specify a programming style at the top of each file (e.g., OOP, functional, hybrid, etc.)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I almost immediately thought of whole projects where people would put `@style(hybrid)` at the top to get rid of troublesome compiler warnings, or put the &quot;style exception&quot; annotation for the whole file. This would become &quot;public static void main&quot; of Swift.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; For example, a long method could trigger an error along with suggestions for refactorings to fix this “bad smell”.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; My greatest concern is about who will define what &quot;bad smell&quot; and individual styles look like. Coding style is a very subjective matter, and should not be enforced by compiler or any manifest (that&#39;s why I&#39;m against strict code style guides as well).<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Besides, enforcing one style per source file would loose one of the best features of Swift – diversity. Swift is a multi-paradigm language, influenced by the best features of many other modern languages. It is imperative, functional, object-oriented and protocol-oriented at the same time. We&#39;d loose that variety.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Regards,<br>&gt;&gt;&gt;&gt;&gt; Adrian Kashivskyy<br>&gt;&gt;&gt;&gt;&gt; iOS Developer at Netguru<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Wiadomość napisana przez Amir Michail &lt;amichail at gmail.com&gt; w dniu 05.12.2015, o godz. 00:53:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Perhaps you could specify a programming style at the top of each file (e.g., OOP, functional, hybrid, etc.) and code that doesn’t match that style would result in a compiler error.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; For example, a long method could trigger an error along with suggestions for refactorings to fix this “bad smell”.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; If you don’t want to fix the problem, you could use a style exception construct to surround the code in question and it would get rid of the compile error.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/d48cbf49/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d30e546d655d1c7ece0464791a9a90d5?s=50"></div><header><strong>&quot;bad smells&quot; should be compiler errors with suggestions on how to fix them</strong> from <string>Adrian Kashivskyy</string> &lt;adrian.kashivskyy at me.com&gt;<p>December  5, 2015 at 07:00:00pm</p></header><div class="content"><p>&gt; SwiftLint looks really nice, but one thing I&#39;d really like is automatic formatting.<br></p><p>That&#39;s a feature of IDE, not the language itself.<br></p><p>Pozdrawiam – Regards,<br>Adrian Kashivskyy<br></p><p>&gt; Wiadomość napisana przez Harlan Haskins &lt;harlan at harlanhaskins.com&gt; w dniu 05.12.2015, o godz. 17:52:<br>&gt; <br>&gt; SwiftLint looks really nice, but one thing I&#39;d really like is automatic formatting. I&#39;d absolutely like to see clang-format adapted with Swift support. Maybe the SwiftLint people can, now that Swift is open source, contribute the bulk of the SwiftLint project directly into clang-format.<br>&gt; <br>&gt; On Dec 5, 2015, at 9:09 AM, Paul Young &lt;paulyoungonline at gmail.com &lt;mailto:paulyoungonline at gmail.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Amir, you may be interested in SwiftLint: https://github.com/realm/SwiftLint &lt;https://github.com/realm/SwiftLint&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Sat, Dec 5, 2015 at 1:43 PM, Amir Michail &lt;amichail at gmail.com &lt;mailto:amichail at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 5, 2015, at 8:14 AM, Austin Zheng &lt;austinzheng at gmail.com &lt;mailto:austinzheng at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Rather than having the compiler attempt to enforce (subjective, constantly evolving) best practices, maybe we should think about ways to make it easier for people to write their own linters that can integrate well with the rest of the toolchain.<br>&gt;&gt; <br>&gt;&gt; All programming languages are already enforcing subjective views about best practice in one form or another.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Austin<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 5, 2015, at 5:02 AM, Amir Michail &lt;amichail at gmail.com &lt;mailto:amichail at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The problem is that solo developers rarely have the self-discipline to avoid obviously bad code style.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 5, 2015, at 5:15 AM, Adrian Kashivskyy &lt;adrian.kashivskyy at me.com &lt;mailto:adrian.kashivskyy at me.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I&#39;m -1 on that – compiler should guarantee the program correctness, not style correctness.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Perhaps you could specify a programming style at the top of each file (e.g., OOP, functional, hybrid, etc.)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I almost immediately thought of whole projects where people would put `@style(hybrid)` at the top to get rid of troublesome compiler warnings, or put the &quot;style exception&quot; annotation for the whole file. This would become &quot;public static void main&quot; of Swift.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; For example, a long method could trigger an error along with suggestions for refactorings to fix this “bad smell”.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; My greatest concern is about who will define what &quot;bad smell&quot; and individual styles look like. Coding style is a very subjective matter, and should not be enforced by compiler or any manifest (that&#39;s why I&#39;m against strict code style guides as well).<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Besides, enforcing one style per source file would loose one of the best features of Swift – diversity. Swift is a multi-paradigm language, influenced by the best features of many other modern languages. It is imperative, functional, object-oriented and protocol-oriented at the same time. We&#39;d loose that variety.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Regards,<br>&gt;&gt;&gt;&gt;&gt; Adrian Kashivskyy<br>&gt;&gt;&gt;&gt;&gt; iOS Developer at Netguru<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Wiadomość napisana przez Amir Michail &lt;amichail at gmail.com &lt;mailto:amichail at gmail.com&gt;&gt; w dniu 05.12.2015, o godz. 00:53:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Perhaps you could specify a programming style at the top of each file (e.g., OOP, functional, hybrid, etc.) and code that doesn’t match that style would result in a compiler error.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; For example, a long method could trigger an error along with suggestions for refactorings to fix this “bad smell”.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; If you don’t want to fix the problem, you could use a style exception construct to surround the code in question and it would get rid of the compile error.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/c4274202/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3d3a2cce932eca144b8c13a63966404?s=50"></div><header><strong>&quot;bad smells&quot; should be compiler errors with suggestions on how to fix them</strong> from <string>Alex Blewitt</string> &lt;alex.blewitt at gmail.com&gt;<p>December  5, 2015 at 09:00:00pm</p></header><div class="content"><p>Sent from my iPhat 6<br></p><p>&gt; On 5 Dec 2015, at 19:23, Adrian Kashivskyy &lt;adrian.kashivskyy at me.com&gt; wrote:<br>&gt; <br>&gt;&gt; SwiftLint looks really nice, but one thing I&#39;d really like is automatic formatting.<br>&gt; <br>&gt; That&#39;s a feature of IDE, not the language itself.<br></p><p>Not necessarily. The existence of &quot;go fmt&quot; has resulted in teams running it as a pre-commit translation and as a way of standardising across all users, regardless of IDEs. Otherwise you end up with multiple IDEs (like Eclipse and IntelliJ) which do formatting slightly differently and lead to all manner of pointless arguments. <br></p><p>Letting &quot;the IDE&quot; do formatting is fine provided there is a maximum of one IDE. <br></p><p>Alex<br></p><p>&gt; Pozdrawiam – Regards,<br>&gt; Adrian Kashivskyy<br>&gt; <br>&gt;&gt; Wiadomość napisana przez Harlan Haskins &lt;harlan at harlanhaskins.com&gt; w dniu 05.12.2015, o godz. 17:52:<br>&gt;&gt; <br>&gt;&gt; SwiftLint looks really nice, but one thing I&#39;d really like is automatic formatting. I&#39;d absolutely like to see clang-format adapted with Swift support. Maybe the SwiftLint people can, now that Swift is open source, contribute the bulk of the SwiftLint project directly into clang-format.<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 5, 2015, at 9:09 AM, Paul Young &lt;paulyoungonline at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Amir, you may be interested in SwiftLint: https://github.com/realm/SwiftLint<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Sat, Dec 5, 2015 at 1:43 PM, Amir Michail &lt;amichail at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 5, 2015, at 8:14 AM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Rather than having the compiler attempt to enforce (subjective, constantly evolving) best practices, maybe we should think about ways to make it easier for people to write their own linters that can integrate well with the rest of the toolchain.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; All programming languages are already enforcing subjective views about best practice in one form or another.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Austin<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Dec 5, 2015, at 5:02 AM, Amir Michail &lt;amichail at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The problem is that solo developers rarely have the self-discipline to avoid obviously bad code style.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Dec 5, 2015, at 5:15 AM, Adrian Kashivskyy &lt;adrian.kashivskyy at me.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I&#39;m -1 on that – compiler should guarantee the program correctness, not style correctness.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Perhaps you could specify a programming style at the top of each file (e.g., OOP, functional, hybrid, etc.)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I almost immediately thought of whole projects where people would put `@style(hybrid)` at the top to get rid of troublesome compiler warnings, or put the &quot;style exception&quot; annotation for the whole file. This would become &quot;public static void main&quot; of Swift.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; For example, a long method could trigger an error along with suggestions for refactorings to fix this “bad smell”.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; My greatest concern is about who will define what &quot;bad smell&quot; and individual styles look like. Coding style is a very subjective matter, and should not be enforced by compiler or any manifest (that&#39;s why I&#39;m against strict code style guides as well).<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Besides, enforcing one style per source file would loose one of the best features of Swift – diversity. Swift is a multi-paradigm language, influenced by the best features of many other modern languages. It is imperative, functional, object-oriented and protocol-oriented at the same time. We&#39;d loose that variety.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Regards,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Adrian Kashivskyy<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; iOS Developer at Netguru<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Wiadomość napisana przez Amir Michail &lt;amichail at gmail.com&gt; w dniu 05.12.2015, o godz. 00:53:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Perhaps you could specify a programming style at the top of each file (e.g., OOP, functional, hybrid, etc.) and code that doesn’t match that style would result in a compiler error.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; For example, a long method could trigger an error along with suggestions for refactorings to fix this “bad smell”.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If you don’t want to fix the problem, you could use a style exception construct to surround the code in question and it would get rid of the compile error.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/38c0f194/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>&quot;bad smells&quot; should be compiler errors with suggestions on how to fix them</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>December  5, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt;&gt;&gt; SwiftLint looks really nice, but one thing I&#39;d really like is automatic formatting.<br>&gt;&gt; <br>&gt;&gt; That&#39;s a feature of IDE, not the language itself.<br>&gt; <br>&gt; Not necessarily. The existence of &quot;go fmt&quot; has resulted in teams running it as a pre-commit translation and as a way of standardising across all users, regardless of IDEs. Otherwise you end up with multiple IDEs (like Eclipse and IntelliJ) which do formatting slightly differently and lead to all manner of pointless arguments. <br>&gt; <br>&gt; Letting &quot;the IDE&quot; do formatting is fine provided there is a maximum of one IDE. <br></p><p>This is perhaps out of scope for this group, but I’ve actually long wanted languages to move in a direction where indentation is not present at all in the source file—your git repo might never have an instance of /\n[ \t]/ in it. Instead, it’s automatically added by the IDE while displaying the code, based on the block beginnings and endings present in the actual source. This would make incorrectly indented code a thing of the past; it would also be obvious when you’re missing a curly bracket, because your code would be indented all wrong. And it would end the destructive whitespace wars, because everyone could just set their IDE to do whatever they liked best.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d30e546d655d1c7ece0464791a9a90d5?s=50"></div><header><strong>&quot;bad smells&quot; should be compiler errors with suggestions on how to fix them</strong> from <string>Adrian Kashivskyy</string> &lt;adrian.kashivskyy at me.com&gt;<p>December  6, 2015 at 12:00:00am</p></header><div class="content"><p>How would you do code review then? ;)<br></p><p>Regards,<br>Adrian Kashivskyy<br>iOS Developer at Netguru<br></p><p>&gt; Wiadomość napisana przez Brent Royal-Gordon &lt;brent at architechies.com&gt; w dniu 05.12.2015, o godz. 22:10:<br>&gt; <br>&gt;&gt;&gt;&gt; SwiftLint looks really nice, but one thing I&#39;d really like is automatic formatting.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That&#39;s a feature of IDE, not the language itself.<br>&gt;&gt; <br>&gt;&gt; Not necessarily. The existence of &quot;go fmt&quot; has resulted in teams running it as a pre-commit translation and as a way of standardising across all users, regardless of IDEs. Otherwise you end up with multiple IDEs (like Eclipse and IntelliJ) which do formatting slightly differently and lead to all manner of pointless arguments. <br>&gt;&gt; <br>&gt;&gt; Letting &quot;the IDE&quot; do formatting is fine provided there is a maximum of one IDE. <br>&gt; <br>&gt; This is perhaps out of scope for this group, but I’ve actually long wanted languages to move in a direction where indentation is not present at all in the source file—your git repo might never have an instance of /\n[ \t]/ in it. Instead, it’s automatically added by the IDE while displaying the code, based on the block beginnings and endings present in the actual source. This would make incorrectly indented code a thing of the past; it would also be obvious when you’re missing a curly bracket, because your code would be indented all wrong. And it would end the destructive whitespace wars, because everyone could just set their IDE to do whatever they liked best.<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/869e05fb/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>&quot;bad smells&quot; should be compiler errors with suggestions on how to fix them</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December  5, 2015 at 10:00:00pm</p></header><div class="content"><p>&gt; On Dec 5, 2015, at 12:54 PM, Alex Blewitt via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; Sent from my iPhat 6<br>&gt; <br>&gt; On 5 Dec 2015, at 19:23, Adrian Kashivskyy &lt;adrian.kashivskyy at me.com &lt;mailto:adrian.kashivskyy at me.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; SwiftLint looks really nice, but one thing I&#39;d really like is automatic formatting.<br>&gt;&gt; <br>&gt;&gt; That&#39;s a feature of IDE, not the language itself.<br>&gt; <br>&gt; Not necessarily. The existence of &quot;go fmt&quot; has resulted in teams running it as a pre-commit translation and as a way of standardising across all users, regardless of IDEs. Otherwise you end up with multiple IDEs (like Eclipse and IntelliJ) which do formatting slightly differently and lead to all manner of pointless arguments. <br>&gt; <br>&gt; Letting &quot;the IDE&quot; do formatting is fine provided there is a maximum of one IDE. <br></p><p>Just to chime in on this thread with some guidelines for thought:<br></p><p>1) The compiler does have some code smell warnings (e.g. unmutated var -&gt; let).<br>2) It is really important that these be warnings, not errors.  Turning them into errors makes refactoring code a pain (as commonly complained about in the go community).<br>3) By doing these sorts of things, the compiler needs to be conservative in its policies - the policies that it enforces has to be unquestionably the right thing to do.<br></p><p>Separate from compiler-enforced policies, I’d *love* to see someone tackle implementing a &quot;go fmt” analog that reformats Swift code into a standard style, as well as a “clang format”  tool that could be used by IDEs for on-the-fly editing of code, as well as a “linter” / static analysis tool which can flag potential issues while having a higher tolerance for false positives.  These should be separate from the “always on” compiler diagnostics though.<br></p><p>-Chris<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/02214089/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>&quot;bad smells&quot; should be compiler errors with suggestions on how to fix them</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>December  6, 2015 at 10:00:00am</p></header><div class="content"><p>On Dec 5, 2015, at 11:15 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; Separate from compiler-enforced policies, I’d *love* to see someone tackle implementing a &quot;go fmt” analog that reformats Swift code into a standard style, as well as a “clang format”  tool that could be used by IDEs for on-the-fly editing of code, as well as a “linter” / static analysis tool which can flag potential issues while having a higher tolerance for false positives.  These should be separate from the “always on” compiler diagnostics though.<br>&gt; <br>&gt; -Chris<br></p><p>I have a fairly minimal held-together-by-bandaids linter I put together: <br></p><p>https://github.com/erica/testlint<br></p><p>I have hesitated to develop it much further because I didn&#39;t want to be committed to inter-process SourceKit hacking and did not yet have access to a reliable parse tree. In its current state, it&#39;s a regex-based line-by-line scan.<br></p><p>The rules it follows are here: https://github.com/erica/testlint/blob/master/testlint/sources/Linter.m<br>with fairly copious commenting<br></p><p><br>-- Erica<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3a0ae72b2f6bdc4476f1fcb63396e717?s=50"></div><header><strong>&quot;bad smells&quot; should be compiler errors with suggestions on how to fix them</strong> from <string>Jean-Pierre Simard</string> &lt;jp at jpsim.com&gt;<p>December  6, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt;<br>&gt; Separate from compiler-enforced policies, I’d *love* to see someone tackle<br>&gt; implementing a &quot;go fmt” analog that reformats Swift code into a standard<br>&gt; style, as well as a “clang format”  tool that could be used by IDEs for<br>&gt; on-the-fly editing of code, as well as a “linter” / static analysis tool<br>&gt; which can flag potential issues while having a higher tolerance for false<br>&gt; positives.  These should be separate from the “always on” compiler<br>&gt; diagnostics though.<br></p><p><br>I agree that a compiler cannot be too stylistically opinionated, and that<br>an opt-in, standalone linter/formatter is preferable.<br></p><p>As others have mentioned, there&#39;s a community-built tool called SwiftLint<br>&lt;https://github.com/realm/SwiftLint&gt; that does much of this today. It&#39;s an<br>AST-assisted tool to enforce code style conventions &amp; automatically correct<br>certain violations. Rules can be enabled/disabled and parameterized either<br>inline in the source or via a YAML configuration file.<br></p><p>One of the tool&#39;s main limitations so far is that the Swift AST it operates<br>on is obtained from a reverse-engineered SourceKit interface and is<br>incomplete.<br></p><p>Myself and other SwiftLint contributors intend to replace the<br>reverse-engineered SourceKit backend with more official tooling that was<br>just open sourced, which will enable SwiftLint to do things like an<br>opinionated go-fmt/clang-format style formatting (source-&gt;AST-source) and<br>some types of static analysis like identifying cyclomatic complexity.<br></p><p>One thing I&#39;d like to discuss with relevant Swift project owners (notably<br>Argyrios and Chris) is the possibility of moving SwiftLint development into<br>github.com/apple, which would increase the tool&#39;s exposure and pace of<br>development. I hope to make a more official proposal for how that<br>transition could happen in the upcoming week, probably in swift-dev.<br></p><p>On Sun, Dec 6, 2015 at 9:07 AM, Erica Sadun via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Dec 5, 2015, at 11:15 PM, Chris Lattner via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; Separate from compiler-enforced policies, I’d *love* to see someone<br>&gt; tackle implementing a &quot;go fmt” analog that reformats Swift code into a<br>&gt; standard style, as well as a “clang format”  tool that could be used by<br>&gt; IDEs for on-the-fly editing of code, as well as a “linter” / static<br>&gt; analysis tool which can flag potential issues while having a higher<br>&gt; tolerance for false positives.  These should be separate from the “always<br>&gt; on” compiler diagnostics though.<br>&gt; &gt;<br>&gt; &gt; -Chris<br>&gt;<br>&gt; I have a fairly minimal held-together-by-bandaids linter I put together:<br>&gt;<br>&gt; https://github.com/erica/testlint<br>&gt;<br>&gt; I have hesitated to develop it much further because I didn&#39;t want to be<br>&gt; committed to inter-process SourceKit hacking and did not yet have access to<br>&gt; a reliable parse tree. In its current state, it&#39;s a regex-based<br>&gt; line-by-line scan.<br>&gt;<br>&gt; The rules it follows are here:<br>&gt; https://github.com/erica/testlint/blob/master/testlint/sources/Linter.m<br>&gt; with fairly copious commenting<br>&gt;<br>&gt;<br>&gt; -- Erica<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/f816565a/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
