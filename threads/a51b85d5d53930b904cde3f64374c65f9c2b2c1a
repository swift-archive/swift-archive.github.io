<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/768487e5a7371f5824d4d33ee63428d1?s=50"></div><header><strong>strange property observer behavior</strong> from <string>adelzhang at qq.com</string> &lt;adelzhang at qq.com&gt;<p>September  4, 2016 at 06:00:00pm</p></header><div class="content"><p>Hi all<br></p><p>It sounds convenient to monitor change in property&#39;s value using property  <br>observer.<br>But TSPL(The Swift Programming Language) talk little about property  <br>observer. There<br>are some questions abouts property observer.<br></p><p>1) when `didSet` observer will call?<br></p><p>I assume it&#39;s fine that changing property&#39;s value in `didSet` observer.<br></p><p>     class Foo {<br>         var a: Int = 0 {<br>             didSet {<br>                 print(&quot;didset&quot;)<br>                 a = a + 1<br>             }<br>         }<br>     }<br></p><p>     let foo = Foo()<br>     foo.a = 4  // only output &quot;didset&quot; once<br></p><p>Why it don&#39;t cause infinite loop?<br></p><p>2) infinite loop<br></p><p>     // this code snippet cause inifinite loop<br>     class Foo {<br>         var a: Int = 0 {<br>             didSet {<br>                 b = a + 1<br>             }<br>         }<br></p><p>         var b: Int = 1 {<br>             didSet {<br>                 a = b - 1<br>             }<br>         }<br>     }<br></p><p>     let foo = Foo()<br>     foo.a = 2<br></p><p>3) override property observer<br></p><p>     class Base {<br>         var a: Int = 0 {<br>             didSet {<br>                 print(&quot;base didset&quot;)<br>             }<br>         }<br>     }<br></p><p>     class Child : Base {<br>         override var a : Int {<br>             didSet {<br>                 print(&quot;child didset&quot;)<br>             }<br>         }<br>     }<br></p><p>     let child = Child()<br>     child.a = 2 // output &quot;base didset&quot; and &quot;child didset&quot;<br>     let base = child as Base<br>     base.a  = 4 // still output &quot;base didset&quot; and &quot;child didset&quot;<br></p><p>Why overriding property observer still call parent&#39;s `didSet` observer?<br></p><p>--<br>Adel<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>strange property observer behavior</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>September  4, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt;<br>&gt; 1) when `didSet` observer will call?<br></p><p><br>​For me, it is more like Swift developer tries to override some beginner&#39;s<br>flaw.<br></p><p>​2) infinite loop<br></p><p><br>​If you intended to do things bad, things ​went bad.<br></p><p>3) override property observer<br></p><p><br>​You mentioned &quot;TSPL(The Swift Programming Language) ​&quot;, and it says in it:<br></p><p>“NOTE<br></p><p>The willSet and didSet observers of superclass properties are called when a<br>property is set in a subclass initializer, after the superclass initializer<br>has been called. They are not called while a class is setting its own<br>properties, before the superclass initializer has been called.<br></p><p>For more information about initializer delegation, see Initializer<br>Delegation for Value Types and Initializer Delegation for Class Types.”<br></p><p>From: Apple Inc. “The Swift Programming Language (Swift 3 Beta)”。 iBooks.<br>https://itun.es/us/k5SW7.l<br></p><p>You didn&#39;t provide a `init()`, but since you properties were already set.<br>There was a hidden `init()` when you called `Child()`.<br></p><p>Last,<br></p><p> let base = child as Base<br> base.a  = 4 // still output &quot;base didset&quot; and &quot;child didset&quot;<br></p><p>In Swift, as or as! won&#39;t change the instance&#39;s dynamic type. So it does<br>nothing. `type(of:base)` is still `Child`.<br></p><p>Zhaoxin<br></p><p><br></p><p>On Sun, Sep 4, 2016 at 6:25 PM, adelzhang via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Hi all<br>&gt;<br>&gt; It sounds convenient to monitor change in property&#39;s value using property<br>&gt; observer.<br>&gt; But TSPL(The Swift Programming Language) talk little about property<br>&gt; observer. There<br>&gt; are some questions abouts property observer.<br>&gt;<br>&gt; 1) when `didSet` observer will call?<br>&gt;<br>&gt; I assume it&#39;s fine that changing property&#39;s value in `didSet` observer.<br>&gt;<br>&gt;     class Foo {<br>&gt;         var a: Int = 0 {<br>&gt;             didSet {<br>&gt;                 print(&quot;didset&quot;)<br>&gt;                 a = a + 1<br>&gt;             }<br>&gt;         }<br>&gt;     }<br>&gt;<br>&gt;     let foo = Foo()<br>&gt;     foo.a = 4  // only output &quot;didset&quot; once<br>&gt;<br>&gt; Why it don&#39;t cause infinite loop?<br>&gt;<br>&gt; 2) infinite loop<br>&gt;<br>&gt;     // this code snippet cause inifinite loop<br>&gt;     class Foo {<br>&gt;         var a: Int = 0 {<br>&gt;             didSet {<br>&gt;                 b = a + 1<br>&gt;             }<br>&gt;         }<br>&gt;<br>&gt;         var b: Int = 1 {<br>&gt;             didSet {<br>&gt;                 a = b - 1<br>&gt;             }<br>&gt;         }<br>&gt;     }<br>&gt;<br>&gt;     let foo = Foo()<br>&gt;     foo.a = 2<br>&gt;<br>&gt; 3) override property observer<br>&gt;<br>&gt;     class Base {<br>&gt;         var a: Int = 0 {<br>&gt;             didSet {<br>&gt;                 print(&quot;base didset&quot;)<br>&gt;             }<br>&gt;         }<br>&gt;     }<br>&gt;<br>&gt;     class Child : Base {<br>&gt;         override var a : Int {<br>&gt;             didSet {<br>&gt;                 print(&quot;child didset&quot;)<br>&gt;             }<br>&gt;         }<br>&gt;     }<br>&gt;<br>&gt;     let child = Child()<br>&gt;     child.a = 2 // output &quot;base didset&quot; and &quot;child didset&quot;<br>&gt;     let base = child as Base<br>&gt;     base.a  = 4 // still output &quot;base didset&quot; and &quot;child didset&quot;<br>&gt;<br>&gt; Why overriding property observer still call parent&#39;s `didSet` observer?<br>&gt;<br>&gt; --<br>&gt; Adel<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160904/0f4eeb54/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>strange property observer behavior</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>September  4, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt;<br>&gt; 1) when `didSet` observer will call?<br></p><p><br>​For me, it is more like Swift developer tries to override some beginner&#39;s<br>&gt; flaw.<br></p><p><br>Above is incorrect. You can change property&#39;s value in `didSet`, that won&#39;t<br>cause didSet called again as it is intended to give you the opportunity to<br>do that.<br></p><p>​2) infinite loop<br></p><p><br>This can&#39;t apply the above rule as they set each other, causing the<br>infinite loops.<br></p><p>Zhaoxin<br></p><p>On Sun, Sep 4, 2016 at 7:41 PM, Zhao Xin &lt;owenzx at gmail.com&gt; wrote:<br></p><p>&gt; 1) when `didSet` observer will call?<br>&gt;<br>&gt;<br>&gt; ​For me, it is more like Swift developer tries to override some beginner&#39;s<br>&gt; flaw.<br>&gt;<br>&gt; ​2) infinite loop<br>&gt;<br>&gt;<br>&gt; ​If you intended to do things bad, things ​went bad.<br>&gt;<br>&gt; 3) override property observer<br>&gt;<br>&gt;<br>&gt; ​You mentioned &quot;TSPL(The Swift Programming Language) ​&quot;, and it says in it:<br>&gt;<br>&gt; “NOTE<br>&gt;<br>&gt; The willSet and didSet observers of superclass properties are called when<br>&gt; a property is set in a subclass initializer, after the superclass<br>&gt; initializer has been called. They are not called while a class is setting<br>&gt; its own properties, before the superclass initializer has been called.<br>&gt;<br>&gt; For more information about initializer delegation, see Initializer<br>&gt; Delegation for Value Types and Initializer Delegation for Class Types.”<br>&gt;<br>&gt; From: Apple Inc. “The Swift Programming Language (Swift 3 Beta)”。 iBooks.<br>&gt; https://itun.es/us/k5SW7.l<br>&gt;<br>&gt; You didn&#39;t provide a `init()`, but since you properties were already set.<br>&gt; There was a hidden `init()` when you called `Child()`.<br>&gt;<br>&gt; Last,<br>&gt;<br>&gt;  let base = child as Base<br>&gt;  base.a  = 4 // still output &quot;base didset&quot; and &quot;child didset&quot;<br>&gt;<br>&gt; In Swift, as or as! won&#39;t change the instance&#39;s dynamic type. So it does<br>&gt; nothing. `type(of:base)` is still `Child`.<br>&gt;<br>&gt; Zhaoxin<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Sun, Sep 4, 2016 at 6:25 PM, adelzhang via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Hi all<br>&gt;&gt;<br>&gt;&gt; It sounds convenient to monitor change in property&#39;s value using property<br>&gt;&gt; observer.<br>&gt;&gt; But TSPL(The Swift Programming Language) talk little about property<br>&gt;&gt; observer. There<br>&gt;&gt; are some questions abouts property observer.<br>&gt;&gt;<br>&gt;&gt; 1) when `didSet` observer will call?<br>&gt;&gt;<br>&gt;&gt; I assume it&#39;s fine that changing property&#39;s value in `didSet` observer.<br>&gt;&gt;<br>&gt;&gt;     class Foo {<br>&gt;&gt;         var a: Int = 0 {<br>&gt;&gt;             didSet {<br>&gt;&gt;                 print(&quot;didset&quot;)<br>&gt;&gt;                 a = a + 1<br>&gt;&gt;             }<br>&gt;&gt;         }<br>&gt;&gt;     }<br>&gt;&gt;<br>&gt;&gt;     let foo = Foo()<br>&gt;&gt;     foo.a = 4  // only output &quot;didset&quot; once<br>&gt;&gt;<br>&gt;&gt; Why it don&#39;t cause infinite loop?<br>&gt;&gt;<br>&gt;&gt; 2) infinite loop<br>&gt;&gt;<br>&gt;&gt;     // this code snippet cause inifinite loop<br>&gt;&gt;     class Foo {<br>&gt;&gt;         var a: Int = 0 {<br>&gt;&gt;             didSet {<br>&gt;&gt;                 b = a + 1<br>&gt;&gt;             }<br>&gt;&gt;         }<br>&gt;&gt;<br>&gt;&gt;         var b: Int = 1 {<br>&gt;&gt;             didSet {<br>&gt;&gt;                 a = b - 1<br>&gt;&gt;             }<br>&gt;&gt;         }<br>&gt;&gt;     }<br>&gt;&gt;<br>&gt;&gt;     let foo = Foo()<br>&gt;&gt;     foo.a = 2<br>&gt;&gt;<br>&gt;&gt; 3) override property observer<br>&gt;&gt;<br>&gt;&gt;     class Base {<br>&gt;&gt;         var a: Int = 0 {<br>&gt;&gt;             didSet {<br>&gt;&gt;                 print(&quot;base didset&quot;)<br>&gt;&gt;             }<br>&gt;&gt;         }<br>&gt;&gt;     }<br>&gt;&gt;<br>&gt;&gt;     class Child : Base {<br>&gt;&gt;         override var a : Int {<br>&gt;&gt;             didSet {<br>&gt;&gt;                 print(&quot;child didset&quot;)<br>&gt;&gt;             }<br>&gt;&gt;         }<br>&gt;&gt;     }<br>&gt;&gt;<br>&gt;&gt;     let child = Child()<br>&gt;&gt;     child.a = 2 // output &quot;base didset&quot; and &quot;child didset&quot;<br>&gt;&gt;     let base = child as Base<br>&gt;&gt;     base.a  = 4 // still output &quot;base didset&quot; and &quot;child didset&quot;<br>&gt;&gt;<br>&gt;&gt; Why overriding property observer still call parent&#39;s `didSet` observer?<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Adel<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160904/32b62719/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/768487e5a7371f5824d4d33ee63428d1?s=50"></div><header><strong>strange property observer behavior</strong> from <string>adelzhang at qq.com</string> &lt;adelzhang at qq.com&gt;<p>September  4, 2016 at 11:00:00pm</p></header><div class="content"><p>Thanks for reply.<br></p><p>How does Swift choose *rules* as you said?<br></p><p>Swfit encourage to override the property observer. But when we change the  <br>own property in Child class&#39;s `didSet` observer, that would cause infinite  <br>loop:<br></p><p>     class Base {<br>         var a: Int = 0<br>     }<br></p><p>     class Child : Base {<br>         override var a: Int {<br>             didSet {<br>                  a = a + 1<br>             }<br>         }<br>      }<br></p><p>      let child = Child()<br>      child.a = 3<br></p><p>Any differcen with situation 1?<br></p><p><br>在 Sun, 04 Sep 2016 20:12:42 +0800，Zhao Xin &lt;owenzx at gmail.com&gt; 写道:<br></p><p>&gt;&gt;&gt; 1) when `didSet` observer will call?<br>&gt;<br>&gt;&gt; ​For me, it is more like Swift developer tries to override some  <br>&gt;&gt; beginner&#39;s flaw.<br>&gt;<br>&gt; Above is incorrect. You can change property&#39;s value in `didSet`, that  <br>&gt; won&#39;t cause didSet called again as it is intended to give you the  <br>&gt; opportunity to do that.<br>&gt;&gt; ​2) infinite loop<br>&gt;<br>&gt; This can&#39;t apply the above rule as they set each other, causing the  <br>&gt; infinite loops.<br>&gt; Zhaoxin<br></p><p>On Sun, Sep 4, 2016 at 7:41 PM, Zhao Xin &lt;owenzx at gmail.com&gt; wrote:<br>&gt;&gt;&gt; 1) when `didSet` observer will call?<br>&gt;<br>&gt; ​For me, it is more like Swift developer tries to override some  <br>&gt; beginner&#39;s flaw.<br>&gt;&gt; ​2) infinite loop<br>&gt;<br>&gt; ​If you intended to do things bad, things ​went bad.<br>&gt;<br>&gt;&gt; 3) override property observer<br>&gt;​You mentioned &quot;TSPL(The Swift Programming Language) ​&quot;, and it says in  <br>&gt; it:<br>&gt;<br>&gt; “NOTE<br>&gt;<br>&gt; The willSet and didSet observers of superclass properties are called  <br>&gt; when a property is set in a subclass initializer, after the superclass  <br>&gt; initializer has been called. They &gt;are not called while a class is  <br>&gt; setting its own properties, before the superclass initializer has been  <br>&gt; called.<br>&gt;<br>&gt; For more information about initializer delegation, see Initializer  <br>&gt; Delegation for Value Types and Initializer Delegation for Class Types.”<br>&gt;<br>&gt; From: Apple Inc. “The Swift Programming Language (Swift 3 Beta)”。  <br>&gt; iBooks. https://itun.es/us/k5SW7.l<br>&gt;<br>&gt; You didn&#39;t provide a `init()`, but since you properties were already  <br>&gt; set. There was a hidden `init()` when you called `Child()`.<br>&gt;<br>&gt; Last,<br>&gt;&gt; let base = child as Base<br>&gt; base.a  = 4 // still output &quot;base didset&quot; and &quot;child didset&quot;<br>&gt;<br>&gt;&gt; In Swift, as or as! won&#39;t change the instance&#39;s dynamic type. So it  <br>&gt;&gt; does nothing. `type(of:base)` is still `Child`.<br>&gt;<br>&gt; Zhaoxin<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Sun, Sep 4, 2016 at 6:25 PM, adelzhang via swift-users  <br>&gt; &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; Hi all<br>&gt;&gt;<br>&gt;&gt; It sounds convenient to monitor change in property&#39;s value using  <br>&gt;&gt; property observer.<br>&gt;&gt; But TSPL(The Swift Programming Language) talk little about property  <br>&gt;&gt; observer. There<br>&gt;&gt; are some questions abouts property observer.<br>&gt;&gt;<br>&gt;&gt; 1) when `didSet` observer will call?<br>&gt;&gt;<br>&gt;&gt; I assume it&#39;s fine that changing property&#39;s value in `didSet` observer.<br>&gt;&gt;<br>&gt;&gt;    class Foo {<br>&gt;&gt;        var a: Int = 0 {<br>&gt;&gt;            didSet {<br>&gt;&gt;                print(&quot;didset&quot;)<br>&gt;&gt;                a = a + 1<br>&gt;&gt;            }<br>&gt;&gt;        }<br>&gt;&gt;    }<br>&gt;&gt;<br>&gt;&gt;    let foo = Foo()<br>&gt;&gt;    foo.a = 4  // only output &quot;didset&quot; once<br>&gt;&gt;<br>&gt;&gt; Why it don&#39;t cause infinite loop?<br>&gt;&gt;<br>&gt;&gt; 2) infinite loop<br>&gt;&gt;<br>&gt;&gt;    // this code snippet cause inifinite loop<br>&gt;&gt;    class Foo {<br>&gt;&gt;        var a: Int = 0 {<br>&gt;&gt;            didSet {<br>&gt;&gt;                b = a + 1<br>&gt;&gt;            }<br>&gt;&gt;        }<br>&gt;&gt;<br>&gt;&gt;        var b: Int = 1 {<br>&gt;&gt;            didSet {<br>&gt;&gt;                a = b - 1<br>&gt;&gt;            }<br>&gt;&gt;        }<br>&gt;&gt;    }<br>&gt;&gt;<br>&gt;&gt;    let foo = Foo()<br>&gt;&gt;    foo.a = 2<br>&gt;&gt;<br>&gt;&gt; 3) override property observer<br>&gt;&gt;<br>&gt;&gt;    class Base {<br>&gt;&gt;        var a: Int = 0 {<br>&gt;&gt;            didSet {<br>&gt;&gt;                print(&quot;base didset&quot;)<br>&gt;&gt;            }<br>&gt;&gt;        }<br>&gt;&gt;    }<br>&gt;&gt;<br>&gt;&gt;    class Child : Base {<br>&gt;&gt;        override var a : Int {<br>&gt;&gt;            didSet {<br>&gt;&gt;                print(&quot;child didset&quot;)<br>&gt;&gt;            }<br>&gt;&gt;        }<br>&gt;&gt;    }<br>&gt;&gt;<br>&gt;&gt;    let child = Child()<br>&gt;&gt;    child.a = 2 // output &quot;base didset&quot; and &quot;child didset&quot;<br>&gt;&gt;    let base = child as Base<br>&gt;&gt;    base.a  = 4 // still output &quot;base didset&quot; and &quot;child didset&quot;<br>&gt;&gt;<br>&gt;&gt; Why overriding property observer still call parent&#39;s `didSet` observer?<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Adel<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160904/efa42ca1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f0c42759e3b302ee8b0665d8b59c1197?s=50"></div><header><strong>strange property observer behavior</strong> from <string>Gerard Iglesias</string> &lt;gerard_iglesias at me.com&gt;<p>September  4, 2016 at 06:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>didSet is called as soon as the property is stored… Excepted when the value is stored in the initialiser code.<br></p><p>For me it is completely predictable that your code enter an infinite loop<br></p><p>Regards<br></p><p><br>&gt; On 4 Sep 2016, at 17:11, adelzhang via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Thanks for reply.<br>&gt; <br>&gt; How does Swift choose *rules* as you said?<br>&gt; <br>&gt; Swfit encourage to override the property observer. But when we change the own property in Child class&#39;s `didSet` observer, that would cause infinite loop:<br>&gt; <br>&gt;     class Base { <br>&gt;         var a: Int = 0 <br>&gt;     } <br>&gt; <br>&gt;     class Child : Base { <br>&gt;         override var a: Int { <br>&gt;             didSet { <br>&gt;                  a = a + 1 <br>&gt;             } <br>&gt;         } <br>&gt;      }<br>&gt;     <br>&gt;      let child = Child() <br>&gt;      child.a = 3<br>&gt; <br>&gt; Any differcen with situation 1? <br>&gt; <br>&gt; <br>&gt; 在 Sun, 04 Sep 2016 20:12:42 +0800，Zhao Xin &lt;owenzx at gmail.com&gt; 写道:<br>&gt; <br>&gt; 1) when `didSet` observer will call?<br>&gt; <br>&gt; ​For me, it is more like Swift developer tries to override some beginner&#39;s flaw. <br>&gt; <br>&gt; Above is incorrect. You can change property&#39;s value in `didSet`, that won&#39;t cause didSet called again as it is intended to give you the opportunity to do that. <br>&gt; <br>&gt; ​2) infinite loop<br>&gt; <br>&gt; This can&#39;t apply the above rule as they set each other, causing the infinite loops. <br>&gt; <br>&gt; Zhaoxin<br>&gt; <br>&gt; On Sun, Sep 4, 2016 at 7:41 PM, Zhao Xin &lt;owenzx at gmail.com &lt;mailto:owenzx at gmail.com&gt;&gt; wrote:<br>&gt; 1) when `didSet` observer will call?<br>&gt; <br>&gt; ​For me, it is more like Swift developer tries to override some beginner&#39;s flaw. <br>&gt; <br>&gt; ​2) infinite loop<br>&gt; <br>&gt; ​If you intended to do things bad, things ​went bad.<br>&gt; <br>&gt; 3) override property observer<br>&gt;  <br>&gt; ​You mentioned &quot;TSPL(The Swift Programming Language) ​&quot;, and it says in it:<br>&gt; <br>&gt; “NOTE<br>&gt; <br>&gt; The willSet and didSet observers of superclass properties are called when a property is set in a subclass initializer, after the superclass initializer has been called. They are not called while a class is setting its own properties, before the superclass initializer has been called.<br>&gt; <br>&gt; For more information about initializer delegation, see Initializer Delegation for Value Types and Initializer Delegation for Class Types.”<br>&gt; <br>&gt; From: Apple Inc. “The Swift Programming Language (Swift 3 Beta)”。 iBooks. https://itun.es/us/k5SW7.l &lt;https://itun.es/us/k5SW7.l&gt;<br>&gt; <br>&gt; You didn&#39;t provide a `init()`, but since you properties were already set. There was a hidden `init()` when you called `Child()`.<br>&gt; <br>&gt; Last, <br>&gt; <br>&gt;  let base = child as Base<br>&gt;  base.a  = 4 // still output &quot;base didset&quot; and &quot;child didset&quot;<br>&gt; <br>&gt; In Swift, as or as! won&#39;t change the instance&#39;s dynamic type. So it does nothing. `type(of:base)` is still `Child`.<br>&gt; <br>&gt; Zhaoxin<br>&gt; <br>&gt; <br>&gt; <br>&gt; On Sun, Sep 4, 2016 at 6:25 PM, adelzhang via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt; Hi all<br>&gt; <br>&gt; It sounds convenient to monitor change in property&#39;s value using property observer.<br>&gt; But TSPL(The Swift Programming Language) talk little about property observer. There<br>&gt; are some questions abouts property observer.<br>&gt; <br>&gt; 1) when `didSet` observer will call?<br>&gt; <br>&gt; I assume it&#39;s fine that changing property&#39;s value in `didSet` observer.<br>&gt; <br>&gt;     class Foo {<br>&gt;         var a: Int = 0 {<br>&gt;             didSet {<br>&gt;                 print(&quot;didset&quot;)<br>&gt;                 a = a + 1<br>&gt;             }<br>&gt;         }<br>&gt;     }<br>&gt; <br>&gt;     let foo = Foo()<br>&gt;     foo.a = 4  // only output &quot;didset&quot; once<br>&gt; <br>&gt; Why it don&#39;t cause infinite loop?<br>&gt; <br>&gt; 2) infinite loop<br>&gt; <br>&gt;     // this code snippet cause inifinite loop<br>&gt;     class Foo {<br>&gt;         var a: Int = 0 {<br>&gt;             didSet {<br>&gt;                 b = a + 1<br>&gt;             }<br>&gt;         }<br>&gt; <br>&gt;         var b: Int = 1 {<br>&gt;             didSet {<br>&gt;                 a = b - 1<br>&gt;             }<br>&gt;         }<br>&gt;     }<br>&gt; <br>&gt;     let foo = Foo()<br>&gt;     foo.a = 2<br>&gt; <br>&gt; 3) override property observer<br>&gt; <br>&gt;     class Base {<br>&gt;         var a: Int = 0 {<br>&gt;             didSet {<br>&gt;                 print(&quot;base didset&quot;)<br>&gt;             }<br>&gt;         }<br>&gt;     }<br>&gt; <br>&gt;     class Child : Base {<br>&gt;         override var a : Int {<br>&gt;             didSet {<br>&gt;                 print(&quot;child didset&quot;)<br>&gt;             }<br>&gt;         }<br>&gt;     }<br>&gt; <br>&gt;     let child = Child()<br>&gt;     child.a = 2 // output &quot;base didset&quot; and &quot;child didset&quot;<br>&gt;     let base = child as Base<br>&gt;     base.a  = 4 // still output &quot;base didset&quot; and &quot;child didset&quot;<br>&gt; <br>&gt; Why overriding property observer still call parent&#39;s `didSet` observer?<br>&gt; <br>&gt; --<br>&gt; Adel<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160904/82764a0c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/768487e5a7371f5824d4d33ee63428d1?s=50"></div><header><strong>strange property observer behavior</strong> from <string>adelzhang at qq.com</string> &lt;adelzhang at qq.com&gt;<p>September  5, 2016 at 11:00:00am</p></header><div class="content"><p>Hi,<br></p><p>The following code works fine. The property `a` is stored twice. But<br>it don&#39;t enter infinite loop.<br></p><p>     class Foo {<br>         var a: Int = 0 {<br>              didSet {<br>                  a = a + 1<br>              }<br>         }<br>     }<br></p><p>     let foo = Foo()<br>     foo.a = 2<br>     print(foo.a) // output 3<br></p><p><br>Regards<br></p><p>--adel<br></p><p><br>在 Mon, 05 Sep 2016 00:27:16 +0800，Gerard Iglesias  <br>&lt;gerard_iglesias at me.com&gt; 写道:<br></p><p>&gt; Hi,<br>&gt;<br>&gt; didSet is called as soon as the property is stored… Excepted when the  <br>&gt; value is stored in the initialiser code.<br>&gt;<br>&gt; For me it is completely predictable that your code enter an infinite loop<br>&gt;<br>&gt; Regards<br>&gt;<br>&gt;<br>&gt;&gt; On 4 Sep 2016, at 17:11, adelzhang via swift-users  <br>&gt;&gt; &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Thanks for reply.<br>&gt;&gt;<br>&gt;&gt; How does Swift choose *rules* as you said?<br>&gt;&gt;<br>&gt;&gt; Swfit encourage to override the property observer. But when we change  <br>&gt;&gt; the own property in Child class&#39;s `didSet` observer, that would cause  <br>&gt;&gt; infinite loop:<br>&gt;&gt;<br>&gt;&gt;     class Base {<br>&gt;&gt;         var a: Int = 0<br>&gt;&gt;     }<br>&gt;&gt;<br>&gt;&gt;     class Child : Base {<br>&gt;&gt;         override var a: Int {<br>&gt;&gt;             didSet {<br>&gt;&gt;                  a = a + 1<br>&gt;&gt;             }<br>&gt;&gt;         }<br>&gt;&gt;      }<br>&gt;&gt;<br>&gt;&gt;      let child = Child()<br>&gt;&gt;      child.a = 3<br>&gt;&gt;<br>&gt;&gt; Any differcen with situation 1?<br>&gt;&gt;<br>&gt;&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>strange property observer behavior</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>September  4, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Sep 4, 2016, at 8:11 AM, adelzhang via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Swfit encourage to override the property observer. But when we change the own property in Child class&#39;s `didSet` observer, that would cause infinite loop:<br></p><p>I’m not a Swift guru, but that seems like a bug to me. The book explicitly says that it’s legal for a didSet block to set the property value, with no caveats about overridden properties.<br></p><p>You should be able to work around this by having the subclass override the `set` block instead, and pass the modified value to the superclass. (It’s probably slightly more efficient too.)<br></p><p>—Jens<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>strange property observer behavior</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>September  5, 2016 at 05:00:00am</p></header><div class="content"><p>It seems like a bug. You should file it.<br></p><p>Zhaoxin<br></p><p>On Sun, Sep 4, 2016 at 11:11 PM, &lt;adelzhang at qq.com&gt; wrote:<br></p><p>&gt; Thanks for reply.<br>&gt;<br>&gt; How does Swift choose *rules* as you said?<br>&gt;<br>&gt; Swfit encourage to override the property observer. But when we change the<br>&gt; own property in Child class&#39;s `didSet` observer, that would cause infinite<br>&gt; loop:<br>&gt;<br>&gt;     class Base {<br>&gt;         var a: Int = 0<br>&gt;     }<br>&gt;<br>&gt;     class Child : Base {<br>&gt;         override var a: Int {<br>&gt;             didSet {<br>&gt;                  a = a + 1<br>&gt;             }<br>&gt;         }<br>&gt;      }<br>&gt;<br>&gt;      let child = Child()<br>&gt;      child.a = 3<br>&gt;<br>&gt; Any differcen with situation 1?<br>&gt;<br>&gt;<br>&gt; 在 Sun, 04 Sep 2016 20:12:42 +0800，Zhao Xin &lt;owenzx at gmail.com&gt; 写道:<br>&gt;<br>&gt; 1) when `didSet` observer will call?<br>&gt;<br>&gt;<br>&gt; ​For me, it is more like Swift developer tries to override some beginner&#39;s<br>&gt;&gt; flaw.<br>&gt;<br>&gt;<br>&gt; Above is incorrect. You can change property&#39;s value in `didSet`, that<br>&gt; won&#39;t cause didSet called again as it is intended to give you the<br>&gt; opportunity to do that.<br>&gt;<br>&gt; ​2) infinite loop<br>&gt;<br>&gt;<br>&gt; This can&#39;t apply the above rule as they set each other, causing the<br>&gt; infinite loops.<br>&gt;<br>&gt; Zhaoxin<br>&gt;<br>&gt;<br>&gt; On Sun, Sep 4, 2016 at 7:41 PM, Zhao Xin &lt;owenzx at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; 1) when `didSet` observer will call?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; ​For me, it is more like Swift developer tries to override some<br>&gt;&gt; beginner&#39;s flaw.<br>&gt;&gt;<br>&gt;&gt; ​2) infinite loop<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; ​If you intended to do things bad, things ​went bad.<br>&gt;&gt;<br>&gt;&gt; 3) override property observer<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; ​You mentioned &quot;TSPL(The Swift Programming Language) ​&quot;, and it says in<br>&gt;&gt; it:<br>&gt;&gt;<br>&gt;&gt; “NOTE<br>&gt;&gt;<br>&gt;&gt; The willSet and didSet observers of superclass properties are called when<br>&gt;&gt; a property is set in a subclass initializer, after the superclass<br>&gt;&gt; initializer has been called. They are not called while a class is setting<br>&gt;&gt; its own properties, before the superclass initializer has been called.<br>&gt;&gt;<br>&gt;&gt; For more information about initializer delegation, see Initializer<br>&gt;&gt; Delegation for Value Types and Initializer Delegation for Class Types.”<br>&gt;&gt;<br>&gt;&gt; From: Apple Inc. “The Swift Programming Language (Swift 3 Beta)”。 iBooks.<br>&gt;&gt; https://itun.es/us/k5SW7.l<br>&gt;&gt;<br>&gt;&gt; You didn&#39;t provide a `init()`, but since you properties were already set.<br>&gt;&gt; There was a hidden `init()` when you called `Child()`.<br>&gt;&gt;<br>&gt;&gt; Last,<br>&gt;&gt;<br>&gt;&gt;  let base = child as Base<br>&gt;&gt;  base.a  = 4 // still output &quot;base didset&quot; and &quot;child didset&quot;<br>&gt;&gt;<br>&gt;&gt; In Swift, as or as! won&#39;t change the instance&#39;s dynamic type. So it does<br>&gt;&gt; nothing. `type(of:base)` is still `Child`.<br>&gt;&gt;<br>&gt;&gt; Zhaoxin<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Sun, Sep 4, 2016 at 6:25 PM, adelzhang via swift-users &lt;<br>&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Hi all<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; It sounds convenient to monitor change in property&#39;s value using<br>&gt;&gt;&gt; property observer.<br>&gt;&gt;&gt; But TSPL(The Swift Programming Language) talk little about property<br>&gt;&gt;&gt; observer. There<br>&gt;&gt;&gt; are some questions abouts property observer.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 1) when `didSet` observer will call?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I assume it&#39;s fine that changing property&#39;s value in `didSet` observer.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     class Foo {<br>&gt;&gt;&gt;         var a: Int = 0 {<br>&gt;&gt;&gt;             didSet {<br>&gt;&gt;&gt;                 print(&quot;didset&quot;)<br>&gt;&gt;&gt;                 a = a + 1<br>&gt;&gt;&gt;             }<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     let foo = Foo()<br>&gt;&gt;&gt;     foo.a = 4  // only output &quot;didset&quot; once<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Why it don&#39;t cause infinite loop?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 2) infinite loop<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     // this code snippet cause inifinite loop<br>&gt;&gt;&gt;     class Foo {<br>&gt;&gt;&gt;         var a: Int = 0 {<br>&gt;&gt;&gt;             didSet {<br>&gt;&gt;&gt;                 b = a + 1<br>&gt;&gt;&gt;             }<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         var b: Int = 1 {<br>&gt;&gt;&gt;             didSet {<br>&gt;&gt;&gt;                 a = b - 1<br>&gt;&gt;&gt;             }<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     let foo = Foo()<br>&gt;&gt;&gt;     foo.a = 2<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 3) override property observer<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     class Base {<br>&gt;&gt;&gt;         var a: Int = 0 {<br>&gt;&gt;&gt;             didSet {<br>&gt;&gt;&gt;                 print(&quot;base didset&quot;)<br>&gt;&gt;&gt;             }<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     class Child : Base {<br>&gt;&gt;&gt;         override var a : Int {<br>&gt;&gt;&gt;             didSet {<br>&gt;&gt;&gt;                 print(&quot;child didset&quot;)<br>&gt;&gt;&gt;             }<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     let child = Child()<br>&gt;&gt;&gt;     child.a = 2 // output &quot;base didset&quot; and &quot;child didset&quot;<br>&gt;&gt;&gt;     let base = child as Base<br>&gt;&gt;&gt;     base.a  = 4 // still output &quot;base didset&quot; and &quot;child didset&quot;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Why overriding property observer still call parent&#39;s `didSet` observer?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; Adel<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160905/284b660b/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
