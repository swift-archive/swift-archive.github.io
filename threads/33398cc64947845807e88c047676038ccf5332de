<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9a224621aec4e503027c7a399b3a405f?s=50"></div><header><strong>Carriage Return in Collection Array Literal Initializer</strong> from <string>Ivan Oparin</string> &lt;oparin at me.com&gt;<p>April 24, 2016 at 01:00:00am</p></header><div class="content"><p>Sometimes in is necessary to initialize a collection with a long list of items. Consider this example:<br></p><p>let dictionaryWithALotOfItems = [&quot;someString0&quot; : SomeFunctionality.0, &quot;someString1&quot; : SomeFunctionality.0, &quot;someString2&quot; : SomeFunctionality.0, &quot;someString3&quot; : SomeFunctionality.1, &quot;someString4&quot; : SomeFunctionality.1]<br></p><p>items are separated with a comma, and we can ommit it for the last item.<br></p><p>However, sometimes we deal with longer collections and we can make the code more readable by writing each item on it&#39;s own line:<br></p><p>let dictionaryWithALotOfItems = [<br>    &quot;someString0&quot; : SomeFunctionality.0,<br>    &quot;someString1&quot; : SomeFunctionality.0,<br>    &quot;someString2&quot; : SomeFunctionality.0,<br>    &quot;someString3&quot; : SomeFunctionality.1,<br>    &quot;someString4&quot; : SomeFunctionality.1<br>]<br></p><p>now it looks much better except the comma in the end of line does not look natural<br></p><p>that is espessialy true for the line with a closure:<br>    &quot;someString5&quot; : SomeFunctionality.2 { some functionality },<br></p><p>some closures are longer:<br>    &quot;someString6&quot; : SomeFunctionality.3 {<br>        some <br>        long<br>        closure<br>        functionality<br>    },<br></p><p>if Swift could treat carriage return in array literal initializer as a separation for the items, that would make some collections look cleaner:<br></p><p>let dictionaryWithALotOfItems = [<br>    &quot;someString0&quot; : SomeFunctionality.0<br>    &quot;someString1&quot; : SomeFunctionality.0<br>    &quot;someString2&quot; : SomeFunctionality.0<br>    &quot;someString3&quot; : SomeFunctionality.1<br>    &quot;someString4&quot; : SomeFunctionality.1<br>]<br></p><p>just like a line without a semicolon looks better<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d172fa3c47108d84ee35a68e8d675c1?s=50"></div><header><strong>Carriage Return in Collection Array Literal Initializer</strong> from <string>Ross O&#39;Brien</string> &lt;narrativium+swift at gmail.com&gt;<p>April 24, 2016 at 10:00:00pm</p></header><div class="content"><p>There was a discussion some time ago about making the comma of the last<br>entry optional, because adding entries meant changing more than one line of<br>code and this annoyed users of version control systems. This is an elegant<br>approach to that problem.<br>I don&#39;t know if it&#39;s a practical approach for the compiler, but if it is<br>then I&#39;m in favour.<br></p><p>On Sat, Apr 23, 2016 at 11:27 PM, Ivan Oparin via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Sometimes in is necessary to initialize a collection with a long list of<br>&gt; items. Consider this example:<br>&gt;<br>&gt; let dictionaryWithALotOfItems = [&quot;someString0&quot; : SomeFunctionality.0,<br>&gt; &quot;someString1&quot; : SomeFunctionality.0, &quot;someString2&quot; : SomeFunctionality.0,<br>&gt; &quot;someString3&quot; : SomeFunctionality.1, &quot;someString4&quot; : SomeFunctionality.1]<br>&gt;<br>&gt; items are separated with a comma, and we can ommit it for the last item.<br>&gt;<br>&gt; However, sometimes we deal with longer collections and we can make the<br>&gt; code more readable by writing each item on it&#39;s own line:<br>&gt;<br>&gt; let dictionaryWithALotOfItems = [<br>&gt;     &quot;someString0&quot; : SomeFunctionality.0,<br>&gt;     &quot;someString1&quot; : SomeFunctionality.0,<br>&gt;     &quot;someString2&quot; : SomeFunctionality.0,<br>&gt;     &quot;someString3&quot; : SomeFunctionality.1,<br>&gt;     &quot;someString4&quot; : SomeFunctionality.1<br>&gt; ]<br>&gt;<br>&gt; now it looks much better except the comma in the end of line does not look<br>&gt; natural<br>&gt;<br>&gt; that is espessialy true for the line with a closure:<br>&gt;     &quot;someString5&quot; : SomeFunctionality.2 { some functionality },<br>&gt;<br>&gt; some closures are longer:<br>&gt;     &quot;someString6&quot; : SomeFunctionality.3 {<br>&gt;         some<br>&gt;         long<br>&gt;         closure<br>&gt;         functionality<br>&gt;     },<br>&gt;<br>&gt; if Swift could treat carriage return in array literal initializer as a<br>&gt; separation for the items, that would make some collections look cleaner:<br>&gt;<br>&gt; let dictionaryWithALotOfItems = [<br>&gt;     &quot;someString0&quot; : SomeFunctionality.0<br>&gt;     &quot;someString1&quot; : SomeFunctionality.0<br>&gt;     &quot;someString2&quot; : SomeFunctionality.0<br>&gt;     &quot;someString3&quot; : SomeFunctionality.1<br>&gt;     &quot;someString4&quot; : SomeFunctionality.1<br>&gt; ]<br>&gt;<br>&gt; just like a line without a semicolon looks better<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160424/51fce714/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e01e37acbfad671da1b94a61cf819d82?s=50"></div><header><strong>Carriage Return in Collection Array Literal Initializer</strong> from <string>Kenny Leung</string> &lt;kenny_leung at pobox.com&gt;<p>April 25, 2016 at 09:00:00am</p></header><div class="content"><p>This is brilliant! If semicolons are optional, why not commas?<br></p><p>-Kenny<br></p><p><br>&gt; On Apr 24, 2016, at 2:40 PM, Ross O&#39;Brien via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; There was a discussion some time ago about making the comma of the last entry optional, because adding entries meant changing more than one line of code and this annoyed users of version control systems. This is an elegant approach to that problem.<br>&gt; I don&#39;t know if it&#39;s a practical approach for the compiler, but if it is then I&#39;m in favour.<br>&gt; <br>&gt; On Sat, Apr 23, 2016 at 11:27 PM, Ivan Oparin via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; Sometimes in is necessary to initialize a collection with a long list of items. Consider this example:<br>&gt; <br>&gt; let dictionaryWithALotOfItems = [&quot;someString0&quot; : SomeFunctionality.0, &quot;someString1&quot; : SomeFunctionality.0, &quot;someString2&quot; : SomeFunctionality.0, &quot;someString3&quot; : SomeFunctionality.1, &quot;someString4&quot; : SomeFunctionality.1]<br>&gt; <br>&gt; items are separated with a comma, and we can ommit it for the last item.<br>&gt; <br>&gt; However, sometimes we deal with longer collections and we can make the code more readable by writing each item on it&#39;s own line:<br>&gt; <br>&gt; let dictionaryWithALotOfItems = [<br>&gt;     &quot;someString0&quot; : SomeFunctionality.0,<br>&gt;     &quot;someString1&quot; : SomeFunctionality.0,<br>&gt;     &quot;someString2&quot; : SomeFunctionality.0,<br>&gt;     &quot;someString3&quot; : SomeFunctionality.1,<br>&gt;     &quot;someString4&quot; : SomeFunctionality.1<br>&gt; ]<br>&gt; <br>&gt; now it looks much better except the comma in the end of line does not look natural<br>&gt; <br>&gt; that is espessialy true for the line with a closure:<br>&gt;     &quot;someString5&quot; : SomeFunctionality.2 { some functionality },<br>&gt; <br>&gt; some closures are longer:<br>&gt;     &quot;someString6&quot; : SomeFunctionality.3 {<br>&gt;         some<br>&gt;         long<br>&gt;         closure<br>&gt;         functionality<br>&gt;     },<br>&gt; <br>&gt; if Swift could treat carriage return in array literal initializer as a separation for the items, that would make some collections look cleaner:<br>&gt; <br>&gt; let dictionaryWithALotOfItems = [<br>&gt;     &quot;someString0&quot; : SomeFunctionality.0<br>&gt;     &quot;someString1&quot; : SomeFunctionality.0<br>&gt;     &quot;someString2&quot; : SomeFunctionality.0<br>&gt;     &quot;someString3&quot; : SomeFunctionality.1<br>&gt;     &quot;someString4&quot; : SomeFunctionality.1<br>&gt; ]<br>&gt; <br>&gt; just like a line without a semicolon looks better<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/23bb59b802aac41afdf8ffffae1040d5?s=50"></div><header><strong>Carriage Return in Collection Array Literal Initializer</strong> from <string>Alex Martini</string> &lt;amartini at apple.com&gt;<p>April 27, 2016 at 02:00:00pm</p></header><div class="content"><p>A comma is already allowed after the last element in an array or dictionary literal:<br></p><p>Welcome to Apple Swift version 2.2 (swiftlang-703.0.18.1 clang-703.0.29). Type :help for assistance.<br>  1&gt; let x = [1, 2, 3,]<br>x: [Int] = 3 values {<br>  [0] = 1<br>  [1] = 2<br>  [2] = 3<br>}<br>  2&gt; let y = [1: &quot;one&quot;, 2: &quot;two&quot;, 3: &quot;three&quot;,]<br>y: [Int : String] = 3 key/value pairs {<br>  [0] = {<br>    key = 2<br>    value = &quot;two&quot;<br>  }<br>  [1] = {<br>    key = 3<br>    value = &quot;three&quot;<br>  }<br>  [2] = {<br>    key = 1<br>    value = &quot;one&quot;<br>  }<br>}<br></p><p><br></p><p>&gt; On Apr 25, 2016, at 9:25 AM, Kenny Leung via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; This is brilliant! If semicolons are optional, why not commas?<br>&gt; <br>&gt; -Kenny<br>&gt; <br>&gt; <br>&gt;&gt; On Apr 24, 2016, at 2:40 PM, Ross O&#39;Brien via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; There was a discussion some time ago about making the comma of the last entry optional, because adding entries meant changing more than one line of code and this annoyed users of version control systems. This is an elegant approach to that problem.<br>&gt;&gt; I don&#39;t know if it&#39;s a practical approach for the compiler, but if it is then I&#39;m in favour.<br>&gt;&gt; <br>&gt;&gt; On Sat, Apr 23, 2016 at 11:27 PM, Ivan Oparin via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; Sometimes in is necessary to initialize a collection with a long list of items. Consider this example:<br>&gt;&gt; <br>&gt;&gt; let dictionaryWithALotOfItems = [&quot;someString0&quot; : SomeFunctionality.0, &quot;someString1&quot; : SomeFunctionality.0, &quot;someString2&quot; : SomeFunctionality.0, &quot;someString3&quot; : SomeFunctionality.1, &quot;someString4&quot; : SomeFunctionality.1]<br>&gt;&gt; <br>&gt;&gt; items are separated with a comma, and we can ommit it for the last item.<br>&gt;&gt; <br>&gt;&gt; However, sometimes we deal with longer collections and we can make the code more readable by writing each item on it&#39;s own line:<br>&gt;&gt; <br>&gt;&gt; let dictionaryWithALotOfItems = [<br>&gt;&gt;    &quot;someString0&quot; : SomeFunctionality.0,<br>&gt;&gt;    &quot;someString1&quot; : SomeFunctionality.0,<br>&gt;&gt;    &quot;someString2&quot; : SomeFunctionality.0,<br>&gt;&gt;    &quot;someString3&quot; : SomeFunctionality.1,<br>&gt;&gt;    &quot;someString4&quot; : SomeFunctionality.1<br>&gt;&gt; ]<br>&gt;&gt; <br>&gt;&gt; now it looks much better except the comma in the end of line does not look natural<br>&gt;&gt; <br>&gt;&gt; that is espessialy true for the line with a closure:<br>&gt;&gt;    &quot;someString5&quot; : SomeFunctionality.2 { some functionality },<br>&gt;&gt; <br>&gt;&gt; some closures are longer:<br>&gt;&gt;    &quot;someString6&quot; : SomeFunctionality.3 {<br>&gt;&gt;        some<br>&gt;&gt;        long<br>&gt;&gt;        closure<br>&gt;&gt;        functionality<br>&gt;&gt;    },<br>&gt;&gt; <br>&gt;&gt; if Swift could treat carriage return in array literal initializer as a separation for the items, that would make some collections look cleaner:<br>&gt;&gt; <br>&gt;&gt; let dictionaryWithALotOfItems = [<br>&gt;&gt;    &quot;someString0&quot; : SomeFunctionality.0<br>&gt;&gt;    &quot;someString1&quot; : SomeFunctionality.0<br>&gt;&gt;    &quot;someString2&quot; : SomeFunctionality.0<br>&gt;&gt;    &quot;someString3&quot; : SomeFunctionality.1<br>&gt;&gt;    &quot;someString4&quot; : SomeFunctionality.1<br>&gt;&gt; ]<br>&gt;&gt; <br>&gt;&gt; just like a line without a semicolon looks better<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Carriage Return in Collection Array Literal Initializer</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>April 27, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Apr 27, 2016, at 3:00 PM, Alex Martini via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; A comma is already allowed after the last element in an array or dictionary literal:<br></p><p><br>And is very appreciated!! I wish the same courtesy were extended to parameter lists.<br></p><p>:)<br></p><p>-- E<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/49f329a0267f5a1773a77017882a82a8?s=50"></div><header><strong>Carriage Return in Collection Array Literal Initializer</strong> from <string>Rainer Brockerhoff</string> &lt;rainer at brockerhoff.net&gt;<p>April 28, 2016 at 07:00:00am</p></header><div class="content"><p>On 4/28/16 00:00, Erica Sadun via swift-evolution wrote:<br>&gt;&gt; On Apr 27, 2016, at 3:00 PM, Alex Martini via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; A comma is already allowed after the last element in an array or dictionary literal:<br>&gt; <br>&gt; And is very appreciated!! I wish the same courtesy were extended to parameter lists.<br></p><p>In general, I wish that in all such situations — when the parser expects<br>_either_ a comma or a closing token — it would be acceptable to use a<br>line break instead of the comma, or _both_ comma and closing token.<br></p><p>In analogy to statements, which can be delimited by semicolons or line<br>breaks.<br></p><p>-- <br>Rainer Brockerhoff  &lt;rainer at brockerhoff.net&gt;<br>Belo Horizonte, Brazil<br>&quot;In the affairs of others even fools are wise<br>In their own business even sages err.&quot;<br>http://brockerhoff.net/blog/<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
