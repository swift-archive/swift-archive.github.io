<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>ed/ing, InPlace, Set/SetAlgebra naming resolution</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 15, 2016 at 12:00:00pm</p></header><div class="content"><p>on Mon Feb 15 2016, Austin Zheng &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; +1. Would rather see us retain the (IMHO) correct math-based nomenclature,<br>&gt; and come up with rules for handling cases where there are &#39;terms of art&#39;<br>&gt; that don&#39;t fit neatly into the standard ruleset.<br></p><p>Of course, that&#39;s what &quot;InPlace&quot; was supposed to do.<br></p><p>&gt;<br>&gt; Austin<br>&gt;<br>&gt; On Mon, Feb 15, 2016 at 11:46 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; It pains me that well-known math terms and even whole protocols get lopped<br>&gt;&gt; off because of vagaries of the English language. New thought prompted by<br>&gt;&gt; some of these suggestions:<br>&gt;&gt;<br>&gt;&gt; There&#39;s a fairly circumscribed number of commonly used mathematical terms<br>&gt;&gt; of art. These describe for the most part functions for which there are no<br>&gt;&gt; noun/verb pairs. Suppose then, we have a rule:<br>&gt;&gt;<br>&gt;&gt; Define these mathematical functions only outside types, as though they<br>&gt;&gt; were operators. If (as it seems), operators are an acceptable option for<br>&gt;&gt; Set but for the nomenclature, surely these functions can be acceptable as<br>&gt;&gt; well. Then you would have:<br>&gt;&gt; union(a, b) // non-mutating<br>&gt;&gt; union(&amp;a, b) // mutating<br>&gt;&gt;<br>&gt;&gt; This is unambiguous, terse, conformant to expectations arising from<br>&gt;&gt; familiarity with math, and recognizably English, and you can still have a<br>&gt;&gt; SetAlgebra protocol if it can ensure these functions exist for conforming<br>&gt;&gt; types as Equatable ensures ==. &quot;Pollution&quot; of the global scope would be<br>&gt;&gt; limited to commonly used math terms, which should not be coopted for<br>&gt;&gt; another purpose in any case.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Mon, Feb 15, 2016 at 1:17 PM Dave Abrahams via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; on Mon Feb 15 2016, Xiaodi Wu &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt; Agreed that &quot;union&quot; creates an expectation that it&#39;s non-mutating.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; There&#39;s no real point in pushing back on whether UIs are more or less<br>&gt;&gt;&gt; &gt; important for Swift than math.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; Problem is, the moment you name something SetAlgebra, you&#39;ve set user<br>&gt;&gt;&gt; &gt; expectations that it&#39;s a &#39;math API&#39;. Those ain&#39;t UI terms.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Yep.  As I mentioned in<br>&gt;&gt;&gt; &lt;<br>&gt;&gt;&gt; http://news.gmane.org/find-root.php?message_id=m2pow033r1.fsf%40eno.apple.com<br>&gt;&gt;&gt; &gt;,<br>&gt;&gt;&gt; we have a semantic muddle here.  Given where this is all headed, I am<br>&gt;&gt;&gt; somewhat inclined to retire the SetAlgebra protocol (it only seems to<br>&gt;&gt;&gt; have 3-4 uses on github), but renaming it could be another viable<br>&gt;&gt;&gt; option.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt; On Mon, Feb 15, 2016 at 11:25 AM Dave Abrahams via swift-evolution &lt;<br>&gt;&gt;&gt; &gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; on Mon Feb 15 2016, Maximilian HÃ¼nenberger &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt; I also prefer (2). Isn&#39;t &quot;union&quot;, &quot;intersection&quot;, ... a &quot;Term of<br>&gt;&gt;&gt; Art&quot;?<br>&gt;&gt;&gt; &gt;&gt; &gt; See the guidelines under &quot;Stick to the established meaning&quot;.<br>&gt;&gt;&gt; &gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;&gt; &gt; So we should stick to the mathematical naming.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; My understanding of the rationale for the current direction is that the<br>&gt;&gt;&gt; &gt;&gt; domain of building GUI apps is more important than that of math, so the<br>&gt;&gt;&gt; &gt;&gt; look and feel of sets should match those of most other (non-math) APIs.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt; Since these terms almost always return a new instance we should have<br>&gt;&gt;&gt; &gt;&gt; &gt; an obvious mutating version with an &quot;inPlace&quot; suffix.<br>&gt;&gt;&gt; &gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;&gt; &gt; - Maximilian<br>&gt;&gt;&gt; &gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; Am 14.02.2016 um 22:37 schrieb Xiaodi Wu via swift-evolution<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; From a 10,000-ft view, I&#39;d suggest that the noun/verb rule<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; consistently runs into a problem with mathematical terms.<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; In general, mathematical functions don&#39;t have verb forms. You<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; &#39;compute&#39; the reciprocal, or &#39;find&#39; the reciprocal, or &#39;take&#39; the<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; reciprocal, you don&#39;t &#39;reciprocate&#39; or &#39;reciprocalize&#39;. Likewise for<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; trigonometric functions, etc. Nor can you really &#39;cross produce&#39;...<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; So consistent is this trend that where two words might be noun/verb<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; counterparts, like intersect/intersection and<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; transform/transformation, common math usage treats both as<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; acceptable nouns.<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; In colloquial usage, you might verb the noun, but then by definition<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; the verb and noun become the same. Then, to generate a noun<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; phrase/participle/etc. that looks different from the verb, you have<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; to noun-ify the verbed noun.<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; Without an exception for mathematical function names, the only<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; solution to fulfill these new Swift rules are clobbering the<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; well-known math name or not using the math name at all. Indeed all<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; proposed solutions so far come down to one of four options, either<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; applied globally or only to sets for now, punting the rest down the<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; road:<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; (1) Abandon the rule, making a new one (e.g.: .=)<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; (2) Make an exception to the rule for math function names<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; (3) Generate the least offensive noun-ified verbed nouns based on<br>&gt;&gt;&gt; math<br>&gt;&gt;&gt; &gt;&gt; function names<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; (4) Don&#39;t use math function names<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; (1) is off the table, according to the core team. My vote at this<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; point is for (2), and I see that a few others have voiced that<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; opinion. It&#39;d be nice to get a sense from the core team if that is<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; even a possibility. (3) has elicited a lot of discussion and<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; visceral reactions. (4) might be workable for sets alone but surely<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; can&#39;t be a generalized solution for all mathematical concepts to be<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; encountered in Swift.<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; On Sun, Feb 14, 2016 at 3:14 PM Tyler Fleming Cloutier via<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; swift-evolution<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; On Feb 14, 2016, at 12:48 PM, Dave Abrahams<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; on Sun Feb 14 2016, Tyler Fleming Cloutier<br>&gt;&gt;&gt; &lt;cloutiertyler-AT-aol.com&gt;<br>&gt;&gt;&gt; &gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; On Feb 14, 2016, at 8:27 AM, Dave Abrahams<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; on Sat Feb 13 2016, Tyler Fleming Cloutier<br>&gt;&gt;&gt; &gt;&gt; &lt;cloutiertyler-AT-aol.com&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; I would, personally, be very careful about discarding the<br>&gt;&gt;&gt; &gt;&gt; mathematical<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; terms since they are so widely used and understood.<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; IMO it&#39;s better to leave them aside than to use them in<br>&gt;&gt;&gt; âcreativeâ<br>&gt;&gt;&gt; &gt;&gt; ways<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; that might be misleading.<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Agreed. Iâm all for that.<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; One issue is that itâs going to be hard to search for the<br>&gt;&gt;&gt; &gt;&gt; operation I<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; want considering I wonât be looking for &quot;func<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; invertingMembershipOfContentsOf(other: Self) -&gt; Selfâ. Iâm<br>&gt;&gt;&gt; &gt;&gt; concerned<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; people are going to have to do mental gymnastics to build the<br>&gt;&gt;&gt; map<br>&gt;&gt;&gt; &gt;&gt; from<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; math term to Swift function every time they want to look for a<br>&gt;&gt;&gt; set<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; operation method. âfunc invertingMembershipOfContentsOf(other:<br>&gt;&gt;&gt; &gt;&gt; Self)<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; -&gt; Selfâ doesnât exactly seem to fit in the commonly held Venn<br>&gt;&gt;&gt; &gt;&gt; diagram<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; mental model of set operations. You could always have a<br>&gt;&gt;&gt; &gt;&gt; documentation<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; comment that specifies the mathematical term so that people<br>&gt;&gt;&gt; didnât<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; have to double check themselves every time.<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; That being said, if the autocomplete issue is not a concern,<br>&gt;&gt;&gt; Iâm of<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; the opinion that the names Ricardo proposed are short, clear,<br>&gt;&gt;&gt; and<br>&gt;&gt;&gt; &gt;&gt; are<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; not so hard to fit to my Venn diagram mental model.<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; +1<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; However, I tend to think that if there has to be this much<br>&gt;&gt;&gt; dancing<br>&gt;&gt;&gt; &gt;&gt; to<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; name a set of fundamental operations, the guidelines arenât<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; accomplishing their goal.<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; I can&#39;t disagree.<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; Itâs going to make it that much harder for people do design<br>&gt;&gt;&gt; their<br>&gt;&gt;&gt; &gt;&gt; own<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; APIs. I&#39;m having quite a time trying to conform Matttâs Surge<br>&gt;&gt;&gt; API<br>&gt;&gt;&gt; &gt;&gt; to<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; the guidelines.<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; Please explain in detail.  Without details we don&#39;t know what&#39;s<br>&gt;&gt;&gt; &gt;&gt; wrong<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; with the guidelines.<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Ah, I apologize. Iâve gone into detail about this API on the list<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; before, but I should have included the details here.<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Here are my previous posts:<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160118/007560.html<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160118/007560.html<br>&gt;&gt;&gt; &gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Basically the issues come down to the following. The Accelerate<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; framework typical operates in a non-mutating way. This means<br>&gt;&gt;&gt; that my<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; API only has non mutating member functions and I should use the<br>&gt;&gt;&gt; &gt;&gt; ed/ing<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; rule according to the guidelines to name my methods.<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; This is very difficult for some methods. Iâm able to frequently<br>&gt;&gt;&gt; get<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; around the problem for things like âsinâ or âarctanâ by keeping<br>&gt;&gt;&gt; them<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; as global functions, but I canât do that for a number of<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; methods. Consider:<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; remainder<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; dot (returns a scalar, thus there canât be a mutating version, so<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; should I just call it dot? Guidelines donât really comment on<br>&gt;&gt;&gt; this)<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; mean (same as above)<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; cross<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; reciprocal<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; threshold<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; copysign<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; fastFourierTransform<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; pow (arguably the method version should be called raisedTo)<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; I could force all these to be global functions only, but these<br>&gt;&gt;&gt; are<br>&gt;&gt;&gt; &gt;&gt; not<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; as cut and dry as âsinâ or âarctanâ. I feel like Iâd be<br>&gt;&gt;&gt; splitting my<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; API up into two parts just based on the fact that itâs difficult<br>&gt;&gt;&gt; to<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; use the ed/ing rule. That makes it very difficult for users to<br>&gt;&gt;&gt; find<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; certain functions in my API.<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; In this case there are no corresponding mutating operations<br>&gt;&gt;&gt; because<br>&gt;&gt;&gt; &gt;&gt; of<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; the way Accelerate works, but one could certainly imagine an API<br>&gt;&gt;&gt; with<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; mutating counterparts. The way I read the guidelines, they seem<br>&gt;&gt;&gt; to<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; imply I should use ed/ing regardless of whether there is a<br>&gt;&gt;&gt; mutating<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; counterpart. Iâd love to hear your thoughts on this.<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; As long as the ones without side effects read as noun phrases and<br>&gt;&gt;&gt; the<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; ones with side-effects read as verb phrases, you&#39;re good.  No<br>&gt;&gt;&gt; ed/ing<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; needed.<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; Ah yes, you are very right. Still what would the mutating versions<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; of remainder, fastFourierTransform, or reciprocal be? getRemainder?<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; applyFastFourierTransform? reciprocate? I suppose those arenât so<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; bad.<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; I also suppose cross could become x.crossProduct(with: y) and<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; copysign, x.copyingSign(of: y). Seems a little verbose, but it does<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; the job.<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; Tyler<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Tyler<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; Tyler<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Feb 13, 2016, at 9:09 PM, Ricardo Parada via<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hi Dave,<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I would be okay with staying away from the mathematical terms<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; similar to what you are suggesting except that the union can<br>&gt;&gt;&gt; still<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; be made more concise if you use merged / merge for the base<br>&gt;&gt;&gt; name<br>&gt;&gt;&gt; &gt;&gt; and<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; shorten the labels to a bare minimum without loosing<br>&gt;&gt;&gt; clarity.  In<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; addition, the merge can have a second parameter with a<br>&gt;&gt;&gt; default to<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; false in order to implement the symmetric difference<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; (a.k.a. exclusive or).  Recall that symmetric difference is<br>&gt;&gt;&gt; the<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; union of two sets and then removing the intersection (or<br>&gt;&gt;&gt; members<br>&gt;&gt;&gt; &gt;&gt; in<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; common).  I think it looks perfect (concise and clear).  What<br>&gt;&gt;&gt; does<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; everybody else think?<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Non-mutable<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; let union =                    a.merged(with: b)<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; let intersection =             a.members(in: b)<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; let difference =               a.removingMembers(in: b)<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; let symmetricDifference =      a.merged(with: b,<br>&gt;&gt;&gt; &gt;&gt; removingMembersInCommon: true)<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Mutable (In-Place)<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; a.merge(with: b)               // union in-place<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; a.removeMembers(notIn: b)      // intersect in-place<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; a.removeMembers(in: b)         // difference in-place<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; a.merge(with: b, removeMembersInCommon: true)  // symmetric<br>&gt;&gt;&gt; &gt;&gt; difference in-place<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Ricardo Parada<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Feb 13, 2016, at 1:16 PM, Dave Abrahams via<br>&gt;&gt;&gt; swift-evolution<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Fri Feb 12 2016, Ricardo Parada &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hi all,<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I canât make up my mind.  Let me propose two different<br>&gt;&gt;&gt; &gt;&gt; alternatives<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; that Iâm not sure if they have been considered:<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ALTERNATIVE 1<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Non-mutable (noun-based)<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func union(other: Self) -&gt; Self<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func union(other: Self) -&gt; Self           Assumes union<br>&gt;&gt;&gt; is a<br>&gt;&gt;&gt; &gt;&gt; noun, i.e. not a verb<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func intersect(other: Self) -&gt; Self<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func intersection(other: Self) -&gt; Self<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func subtract(other: Self) -&gt; Self<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func subtraction(other: Self) -&gt; Self<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func exclusiveOr(other: Self) -&gt; Self<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func symmetricSubtraction(other: Self) -&gt; Self<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Mutable (verb-based)<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func unionInPlace(other: Self)<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func unite(other: Self)<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func intersectInPlace(other: Self)<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func intersect(other: Self)<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func subtractInPlace(other: Self)<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func subtract(other: Self)<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func exclusiveOrInPlace(other: Self)<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func symmetricSubtract(other: Self)<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Comments:<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; With this alternative we keep the union name which I assume<br>&gt;&gt;&gt; is<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; popular.  However, one has to accept unite as a verb (for<br>&gt;&gt;&gt; the<br>&gt;&gt;&gt; &gt;&gt; mutable<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; version) as I wanted all the mutable methods use verbs for<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; consistency.  I think unite is acceptable because it can be<br>&gt;&gt;&gt; &gt;&gt; found in<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; the dictionary and it is a verb.<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Notice that all the non-mutable methods use nouns: union,<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; intersection, subtraction and symmetricSubtraction.<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I understand some may oppose to symmetricSubtraction saying<br>&gt;&gt;&gt; that<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; symmetricSubraction is not as common as &quot;exclusive or&quot;.<br>&gt;&gt;&gt; &gt;&gt; However,<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; using symmetricSubtraction is consistent with subtraction<br>&gt;&gt;&gt; and<br>&gt;&gt;&gt; &gt;&gt; it hints<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; to a variation of the âsubtraction&quot; operation.  We will get<br>&gt;&gt;&gt; &gt;&gt; used to it<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; quickly / easily.<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; The mutable methods all use verbs:  unite, intersect,<br>&gt;&gt;&gt; subtract<br>&gt;&gt;&gt; &gt;&gt; and symmetricSubtract.<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ALTERNATIVE 2<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Non-mutable<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func union(other: Self) -&gt; Self<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func adding(other: Self) -&gt; Self<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func intersect(other: Self) -&gt; Self<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func intersecting(other: Self) -&gt; Self<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func exclusiveOr(other: Self) -&gt; Self<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func exclusiveOring(other: Self) -&gt; Self<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func subtract(other: Self) -&gt; Self<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func removing(other: Self) -&gt; Self<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Mutable<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func unionInPlace(other: Self)<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func add(other: Self)<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func intersectInPlace(other: Self)<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func intersect(other: Self)<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func exclusiveOrInPlace(other: Self)<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func exclusiveOr(other: Self)<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func subtractInPlace(other: Self)<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func remove(other: Self)<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Comments: This alternative gives up on union in favor or<br>&gt;&gt;&gt; add.<br>&gt;&gt;&gt; &gt;&gt; Many<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; may not like this, that is why I have it as the second<br>&gt;&gt;&gt; &gt;&gt; alternative.<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It brings back exclusiveOr and treats it as a verb.  Some<br>&gt;&gt;&gt; may<br>&gt;&gt;&gt; &gt;&gt; argue<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; that exclusiveOr is a noun for the &quot;exclusive or&quot; operation.<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If we are going to force Set fit the naming guidelines, I<br>&gt;&gt;&gt; would<br>&gt;&gt;&gt; &gt;&gt; prefer<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; to stay away from the mathematical terms altogether.<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func insertingContentsOf(other: Self) -&gt; Self<br>&gt;&gt;&gt;  //<br>&gt;&gt;&gt; &gt;&gt; union<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; mutating func insertContentsOf(other)<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func members(in other: Self) -&gt; Self<br>&gt;&gt;&gt; &gt;&gt;  // intersection<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; mutating func removeMembers(notIn: other)<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func removingMembersAndAddingNonMembers(in other: Self) -&gt;<br>&gt;&gt;&gt; Self<br>&gt;&gt;&gt; &gt;&gt; // symmetric difference<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; mutating func removeMembersAndAddingNonMembers(in other:<br>&gt;&gt;&gt; Self)<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func removingMembers(in other: Self) -&gt; Self<br>&gt;&gt;&gt; &gt;&gt; // subtract<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; mutating func removeMembers(in other: Self)<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If it would help with clarity, we could replace &quot;in&quot; with<br>&gt;&gt;&gt; &gt;&gt; &quot;foundIn&quot;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; above.<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt; &gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; --<br>&gt;&gt;&gt; &gt;&gt; -Dave<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>ed/ing, InPlace, Set/SetAlgebra naming resolution</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>February 15, 2016 at 08:00:00pm</p></header><div class="content"><p>On that topic, you mentioned earlier that you&#39;ve asked someone involved in<br>the decision to explain why we can&#39;t have a term-of-art InPlace exception.<br>That would be enormously beneficial as it seems we&#39;ve returned once again<br>to: &quot;InPlace isn&#39;t so bad&quot;!<br></p><p>It&#39;s difficult to advance alternatives clearly superior to InPlace while<br>the objection to its use in this context originating from the Inner Sanctum<br>of Swiftiness[TM] remains opaque.<br></p><p><br>On Mon, Feb 15, 2016 at 2:32 PM Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; on Mon Feb 15 2016, Austin Zheng &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt; +1. Would rather see us retain the (IMHO) correct math-based<br>&gt; nomenclature,<br>&gt; &gt; and come up with rules for handling cases where there are &#39;terms of art&#39;<br>&gt; &gt; that don&#39;t fit neatly into the standard ruleset.<br>&gt;<br>&gt; Of course, that&#39;s what &quot;InPlace&quot; was supposed to do.<br>&gt;<br>&gt; &gt;<br>&gt; &gt; Austin<br>&gt; &gt;<br>&gt; &gt; On Mon, Feb 15, 2016 at 11:46 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt; &gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt; It pains me that well-known math terms and even whole protocols get<br>&gt; lopped<br>&gt; &gt;&gt; off because of vagaries of the English language. New thought prompted by<br>&gt; &gt;&gt; some of these suggestions:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; There&#39;s a fairly circumscribed number of commonly used mathematical<br>&gt; terms<br>&gt; &gt;&gt; of art. These describe for the most part functions for which there are<br>&gt; no<br>&gt; &gt;&gt; noun/verb pairs. Suppose then, we have a rule:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Define these mathematical functions only outside types, as though they<br>&gt; &gt;&gt; were operators. If (as it seems), operators are an acceptable option for<br>&gt; &gt;&gt; Set but for the nomenclature, surely these functions can be acceptable<br>&gt; as<br>&gt; &gt;&gt; well. Then you would have:<br>&gt; &gt;&gt; union(a, b) // non-mutating<br>&gt; &gt;&gt; union(&amp;a, b) // mutating<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; This is unambiguous, terse, conformant to expectations arising from<br>&gt; &gt;&gt; familiarity with math, and recognizably English, and you can still have<br>&gt; a<br>&gt; &gt;&gt; SetAlgebra protocol if it can ensure these functions exist for<br>&gt; conforming<br>&gt; &gt;&gt; types as Equatable ensures ==. &quot;Pollution&quot; of the global scope would be<br>&gt; &gt;&gt; limited to commonly used math terms, which should not be coopted for<br>&gt; &gt;&gt; another purpose in any case.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; On Mon, Feb 15, 2016 at 1:17 PM Dave Abrahams via swift-evolution &lt;<br>&gt; &gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; on Mon Feb 15 2016, Xiaodi Wu &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt; Agreed that &quot;union&quot; creates an expectation that it&#39;s non-mutating.<br>&gt; &gt;&gt;&gt; &gt;<br>&gt; &gt;&gt;&gt; &gt; There&#39;s no real point in pushing back on whether UIs are more or less<br>&gt; &gt;&gt;&gt; &gt; important for Swift than math.<br>&gt; &gt;&gt;&gt; &gt;<br>&gt; &gt;&gt;&gt; &gt; Problem is, the moment you name something SetAlgebra, you&#39;ve set user<br>&gt; &gt;&gt;&gt; &gt; expectations that it&#39;s a &#39;math API&#39;. Those ain&#39;t UI terms.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Yep.  As I mentioned in<br>&gt; &gt;&gt;&gt; &lt;<br>&gt; &gt;&gt;&gt;<br>&gt; http://news.gmane.org/find-root.php?message_id=m2pow033r1.fsf%40eno.apple.com<br>&gt; &gt;&gt;&gt; &gt;,<br>&gt; &gt;&gt;&gt; we have a semantic muddle here.  Given where this is all headed, I am<br>&gt; &gt;&gt;&gt; somewhat inclined to retire the SetAlgebra protocol (it only seems to<br>&gt; &gt;&gt;&gt; have 3-4 uses on github), but renaming it could be another viable<br>&gt; &gt;&gt;&gt; option.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt; On Mon, Feb 15, 2016 at 11:25 AM Dave Abrahams via swift-evolution &lt;<br>&gt; &gt;&gt;&gt; &gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; on Mon Feb 15 2016, Maximilian HÃ¼nenberger &lt;<br>&gt; swift-evolution at swift.org&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt; I also prefer (2). Isn&#39;t &quot;union&quot;, &quot;intersection&quot;, ... a &quot;Term of<br>&gt; &gt;&gt;&gt; Art&quot;?<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt; See the guidelines under &quot;Stick to the established meaning&quot;.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt; So we should stick to the mathematical naming.<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; My understanding of the rationale for the current direction is that<br>&gt; the<br>&gt; &gt;&gt;&gt; &gt;&gt; domain of building GUI apps is more important than that of math, so<br>&gt; the<br>&gt; &gt;&gt;&gt; &gt;&gt; look and feel of sets should match those of most other (non-math)<br>&gt; APIs.<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt; Since these terms almost always return a new instance we should<br>&gt; have<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt; an obvious mutating version with an &quot;inPlace&quot; suffix.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt; - Maximilian<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; Am 14.02.2016 um 22:37 schrieb Xiaodi Wu via swift-evolution<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; &lt;swift-evolution at swift.org&gt;:<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; From a 10,000-ft view, I&#39;d suggest that the noun/verb rule<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; consistently runs into a problem with mathematical terms.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; In general, mathematical functions don&#39;t have verb forms. You<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; &#39;compute&#39; the reciprocal, or &#39;find&#39; the reciprocal, or &#39;take&#39; the<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; reciprocal, you don&#39;t &#39;reciprocate&#39; or &#39;reciprocalize&#39;. Likewise<br>&gt; for<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; trigonometric functions, etc. Nor can you really &#39;cross<br>&gt; produce&#39;...<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; So consistent is this trend that where two words might be<br>&gt; noun/verb<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; counterparts, like intersect/intersection and<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; transform/transformation, common math usage treats both as<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; acceptable nouns.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; In colloquial usage, you might verb the noun, but then by<br>&gt; definition<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; the verb and noun become the same. Then, to generate a noun<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; phrase/participle/etc. that looks different from the verb, you<br>&gt; have<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; to noun-ify the verbed noun.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; Without an exception for mathematical function names, the only<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; solution to fulfill these new Swift rules are clobbering the<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; well-known math name or not using the math name at all. Indeed<br>&gt; all<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; proposed solutions so far come down to one of four options,<br>&gt; either<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; applied globally or only to sets for now, punting the rest down<br>&gt; the<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; road:<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; (1) Abandon the rule, making a new one (e.g.: .=)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; (2) Make an exception to the rule for math function names<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; (3) Generate the least offensive noun-ified verbed nouns based on<br>&gt; &gt;&gt;&gt; math<br>&gt; &gt;&gt;&gt; &gt;&gt; function names<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; (4) Don&#39;t use math function names<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; (1) is off the table, according to the core team. My vote at this<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; point is for (2), and I see that a few others have voiced that<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; opinion. It&#39;d be nice to get a sense from the core team if that<br>&gt; is<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; even a possibility. (3) has elicited a lot of discussion and<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; visceral reactions. (4) might be workable for sets alone but<br>&gt; surely<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; can&#39;t be a generalized solution for all mathematical concepts to<br>&gt; be<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; encountered in Swift.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; On Sun, Feb 14, 2016 at 3:14 PM Tyler Fleming Cloutier via<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; swift-evolution<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; On Feb 14, 2016, at 12:48 PM, Dave Abrahams<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; &lt;dabrahams at apple.com&gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; on Sun Feb 14 2016, Tyler Fleming Cloutier<br>&gt; &gt;&gt;&gt; &lt;cloutiertyler-AT-aol.com&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; On Feb 14, 2016, at 8:27 AM, Dave Abrahams<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; &lt;dabrahams at apple.com&gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; on Sat Feb 13 2016, Tyler Fleming Cloutier<br>&gt; &gt;&gt;&gt; &gt;&gt; &lt;cloutiertyler-AT-aol.com&gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; I would, personally, be very careful about discarding the<br>&gt; &gt;&gt;&gt; &gt;&gt; mathematical<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; terms since they are so widely used and understood.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; IMO it&#39;s better to leave them aside than to use them in<br>&gt; &gt;&gt;&gt; âcreativeâ<br>&gt; &gt;&gt;&gt; &gt;&gt; ways<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; that might be misleading.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Agreed. Iâm all for that.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; One issue is that itâs going to be hard to search for the<br>&gt; &gt;&gt;&gt; &gt;&gt; operation I<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; want considering I wonât be looking for &quot;func<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; invertingMembershipOfContentsOf(other: Self) -&gt; Selfâ. Iâm<br>&gt; &gt;&gt;&gt; &gt;&gt; concerned<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; people are going to have to do mental gymnastics to build<br>&gt; the<br>&gt; &gt;&gt;&gt; map<br>&gt; &gt;&gt;&gt; &gt;&gt; from<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; math term to Swift function every time they want to look<br>&gt; for a<br>&gt; &gt;&gt;&gt; set<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; operation method. âfunc<br>&gt; invertingMembershipOfContentsOf(other:<br>&gt; &gt;&gt;&gt; &gt;&gt; Self)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; -&gt; Selfâ doesnât exactly seem to fit in the commonly held<br>&gt; Venn<br>&gt; &gt;&gt;&gt; &gt;&gt; diagram<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; mental model of set operations. You could always have a<br>&gt; &gt;&gt;&gt; &gt;&gt; documentation<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; comment that specifies the mathematical term so that people<br>&gt; &gt;&gt;&gt; didnât<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; have to double check themselves every time.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; That being said, if the autocomplete issue is not a concern,<br>&gt; &gt;&gt;&gt; Iâm of<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; the opinion that the names Ricardo proposed are short,<br>&gt; clear,<br>&gt; &gt;&gt;&gt; and<br>&gt; &gt;&gt;&gt; &gt;&gt; are<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; not so hard to fit to my Venn diagram mental model.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; +1<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; However, I tend to think that if there has to be this much<br>&gt; &gt;&gt;&gt; dancing<br>&gt; &gt;&gt;&gt; &gt;&gt; to<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; name a set of fundamental operations, the guidelines arenât<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; accomplishing their goal.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; I can&#39;t disagree.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; Itâs going to make it that much harder for people do design<br>&gt; &gt;&gt;&gt; their<br>&gt; &gt;&gt;&gt; &gt;&gt; own<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; APIs. I&#39;m having quite a time trying to conform Matttâs<br>&gt; Surge<br>&gt; &gt;&gt;&gt; API<br>&gt; &gt;&gt;&gt; &gt;&gt; to<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; the guidelines.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; Please explain in detail.  Without details we don&#39;t know<br>&gt; what&#39;s<br>&gt; &gt;&gt;&gt; &gt;&gt; wrong<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; with the guidelines.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Ah, I apologize. Iâve gone into detail about this API on the<br>&gt; list<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; before, but I should have included the details here.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Here are my previous posts:<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160118/007560.html<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160118/007560.html<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Basically the issues come down to the following. The<br>&gt; Accelerate<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; framework typical operates in a non-mutating way. This means<br>&gt; &gt;&gt;&gt; that my<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; API only has non mutating member functions and I should use<br>&gt; the<br>&gt; &gt;&gt;&gt; &gt;&gt; ed/ing<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; rule according to the guidelines to name my methods.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; This is very difficult for some methods. Iâm able to<br>&gt; frequently<br>&gt; &gt;&gt;&gt; get<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; around the problem for things like âsinâ or âarctanâ by<br>&gt; keeping<br>&gt; &gt;&gt;&gt; them<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; as global functions, but I canât do that for a number of<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; methods. Consider:<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; remainder<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; dot (returns a scalar, thus there canât be a mutating<br>&gt; version, so<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; should I just call it dot? Guidelines donât really comment on<br>&gt; &gt;&gt;&gt; this)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; mean (same as above)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; cross<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; reciprocal<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; threshold<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; copysign<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; fastFourierTransform<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; pow (arguably the method version should be called raisedTo)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; I could force all these to be global functions only, but these<br>&gt; &gt;&gt;&gt; are<br>&gt; &gt;&gt;&gt; &gt;&gt; not<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; as cut and dry as âsinâ or âarctanâ. I feel like Iâd be<br>&gt; &gt;&gt;&gt; splitting my<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; API up into two parts just based on the fact that itâs<br>&gt; difficult<br>&gt; &gt;&gt;&gt; to<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; use the ed/ing rule. That makes it very difficult for users to<br>&gt; &gt;&gt;&gt; find<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; certain functions in my API.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; In this case there are no corresponding mutating operations<br>&gt; &gt;&gt;&gt; because<br>&gt; &gt;&gt;&gt; &gt;&gt; of<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; the way Accelerate works, but one could certainly imagine an<br>&gt; API<br>&gt; &gt;&gt;&gt; with<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; mutating counterparts. The way I read the guidelines, they<br>&gt; seem<br>&gt; &gt;&gt;&gt; to<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; imply I should use ed/ing regardless of whether there is a<br>&gt; &gt;&gt;&gt; mutating<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; counterpart. Iâd love to hear your thoughts on this.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; As long as the ones without side effects read as noun phrases<br>&gt; and<br>&gt; &gt;&gt;&gt; the<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; ones with side-effects read as verb phrases, you&#39;re good.  No<br>&gt; &gt;&gt;&gt; ed/ing<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; needed.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; Ah yes, you are very right. Still what would the mutating<br>&gt; versions<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; of remainder, fastFourierTransform, or reciprocal be?<br>&gt; getRemainder?<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; applyFastFourierTransform? reciprocate? I suppose those arenât<br>&gt; so<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; bad.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; I also suppose cross could become x.crossProduct(with: y) and<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; copysign, x.copyingSign(of: y). Seems a little verbose, but it<br>&gt; does<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; the job.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; Thanks,<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; Tyler<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Tyler<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; Tyler<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Feb 13, 2016, at 9:09 PM, Ricardo Parada via<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hi Dave,<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I would be okay with staying away from the mathematical<br>&gt; terms<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; similar to what you are suggesting except that the union<br>&gt; can<br>&gt; &gt;&gt;&gt; still<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; be made more concise if you use merged / merge for the base<br>&gt; &gt;&gt;&gt; name<br>&gt; &gt;&gt;&gt; &gt;&gt; and<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; shorten the labels to a bare minimum without loosing<br>&gt; &gt;&gt;&gt; clarity.  In<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; addition, the merge can have a second parameter with a<br>&gt; &gt;&gt;&gt; default to<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; false in order to implement the symmetric difference<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; (a.k.a. exclusive or).  Recall that symmetric difference is<br>&gt; &gt;&gt;&gt; the<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; union of two sets and then removing the intersection (or<br>&gt; &gt;&gt;&gt; members<br>&gt; &gt;&gt;&gt; &gt;&gt; in<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; common).  I think it looks perfect (concise and clear).<br>&gt; What<br>&gt; &gt;&gt;&gt; does<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; everybody else think?<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Non-mutable<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; let union =                    a.merged(with: b)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; let intersection =             a.members(in: b)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; let difference =               a.removingMembers(in: b)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; let symmetricDifference =      a.merged(with: b,<br>&gt; &gt;&gt;&gt; &gt;&gt; removingMembersInCommon: true)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Mutable (In-Place)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; a.merge(with: b)               // union in-place<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; a.removeMembers(notIn: b)      // intersect in-place<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; a.removeMembers(in: b)         // difference in-place<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; a.merge(with: b, removeMembersInCommon: true)  // symmetric<br>&gt; &gt;&gt;&gt; &gt;&gt; difference in-place<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Ricardo Parada<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Feb 13, 2016, at 1:16 PM, Dave Abrahams via<br>&gt; &gt;&gt;&gt; swift-evolution<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Fri Feb 12 2016, Ricardo Parada &lt;<br>&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hi all,<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I canât make up my mind.  Let me propose two different<br>&gt; &gt;&gt;&gt; &gt;&gt; alternatives<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; that Iâm not sure if they have been considered:<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ALTERNATIVE 1<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Non-mutable (noun-based)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func union(other: Self) -&gt; Self<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func union(other: Self) -&gt; Self           Assumes<br>&gt; union<br>&gt; &gt;&gt;&gt; is a<br>&gt; &gt;&gt;&gt; &gt;&gt; noun, i.e. not a verb<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func intersect(other: Self) -&gt; Self<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func intersection(other: Self) -&gt; Self<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func subtract(other: Self) -&gt; Self<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func subtraction(other: Self) -&gt; Self<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func exclusiveOr(other: Self) -&gt; Self<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func symmetricSubtraction(other: Self) -&gt; Self<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Mutable (verb-based)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func unionInPlace(other: Self)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func unite(other: Self)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func intersectInPlace(other: Self)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func intersect(other: Self)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func subtractInPlace(other: Self)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func subtract(other: Self)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func exclusiveOrInPlace(other: Self)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func symmetricSubtract(other: Self)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Comments:<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; With this alternative we keep the union name which I<br>&gt; assume<br>&gt; &gt;&gt;&gt; is<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; popular.  However, one has to accept unite as a verb (for<br>&gt; &gt;&gt;&gt; the<br>&gt; &gt;&gt;&gt; &gt;&gt; mutable<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; version) as I wanted all the mutable methods use verbs<br>&gt; for<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; consistency.  I think unite is acceptable because it can<br>&gt; be<br>&gt; &gt;&gt;&gt; &gt;&gt; found in<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; the dictionary and it is a verb.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Notice that all the non-mutable methods use nouns: union,<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; intersection, subtraction and symmetricSubtraction.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I understand some may oppose to symmetricSubtraction<br>&gt; saying<br>&gt; &gt;&gt;&gt; that<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; symmetricSubraction is not as common as &quot;exclusive or&quot;.<br>&gt; &gt;&gt;&gt; &gt;&gt; However,<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; using symmetricSubtraction is consistent with subtraction<br>&gt; &gt;&gt;&gt; and<br>&gt; &gt;&gt;&gt; &gt;&gt; it hints<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; to a variation of the âsubtraction&quot; operation.  We will<br>&gt; get<br>&gt; &gt;&gt;&gt; &gt;&gt; used to it<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; quickly / easily.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; The mutable methods all use verbs:  unite, intersect,<br>&gt; &gt;&gt;&gt; subtract<br>&gt; &gt;&gt;&gt; &gt;&gt; and symmetricSubtract.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ALTERNATIVE 2<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Non-mutable<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func union(other: Self) -&gt; Self<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func adding(other: Self) -&gt; Self<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func intersect(other: Self) -&gt; Self<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func intersecting(other: Self) -&gt; Self<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func exclusiveOr(other: Self) -&gt; Self<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func exclusiveOring(other: Self) -&gt; Self<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func subtract(other: Self) -&gt; Self<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func removing(other: Self) -&gt; Self<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Mutable<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func unionInPlace(other: Self)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func add(other: Self)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func intersectInPlace(other: Self)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func intersect(other: Self)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func exclusiveOrInPlace(other: Self)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func exclusiveOr(other: Self)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func subtractInPlace(other: Self)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func remove(other: Self)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Comments: This alternative gives up on union in favor or<br>&gt; &gt;&gt;&gt; add.<br>&gt; &gt;&gt;&gt; &gt;&gt; Many<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; may not like this, that is why I have it as the second<br>&gt; &gt;&gt;&gt; &gt;&gt; alternative.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It brings back exclusiveOr and treats it as a verb.  Some<br>&gt; &gt;&gt;&gt; may<br>&gt; &gt;&gt;&gt; &gt;&gt; argue<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; that exclusiveOr is a noun for the &quot;exclusive or&quot;<br>&gt; operation.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If we are going to force Set fit the naming guidelines, I<br>&gt; &gt;&gt;&gt; would<br>&gt; &gt;&gt;&gt; &gt;&gt; prefer<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; to stay away from the mathematical terms altogether.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func insertingContentsOf(other: Self) -&gt; Self<br>&gt; &gt;&gt;&gt;  //<br>&gt; &gt;&gt;&gt; &gt;&gt; union<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; mutating func insertContentsOf(other)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func members(in other: Self) -&gt; Self<br>&gt; &gt;&gt;&gt; &gt;&gt;  // intersection<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; mutating func removeMembers(notIn: other)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func removingMembersAndAddingNonMembers(in other: Self) -&gt;<br>&gt; &gt;&gt;&gt; Self<br>&gt; &gt;&gt;&gt; &gt;&gt; // symmetric difference<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; mutating func removeMembersAndAddingNonMembers(in other:<br>&gt; &gt;&gt;&gt; Self)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func removingMembers(in other: Self) -&gt; Self<br>&gt; &gt;&gt;&gt; &gt;&gt; // subtract<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; mutating func removeMembers(in other: Self)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If it would help with clarity, we could replace &quot;in&quot; with<br>&gt; &gt;&gt;&gt; &gt;&gt; &quot;foundIn&quot;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; above.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -Dave<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; -Dave<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; --<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; -Dave<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt; _______________________________________________<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; --<br>&gt; &gt;&gt;&gt; &gt;&gt; -Dave<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt; _______________________________________________<br>&gt; &gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; &gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; --<br>&gt; &gt;&gt;&gt; -Dave<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; --<br>&gt; -Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160215/c09afb2d/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d118cdf2fe31053bc7032466c4da282?s=50"></div><header><strong>ed/ing, InPlace, Set/SetAlgebra naming resolution</strong> from <string>Craig Cruden</string> &lt;ccruden at novafore.com&gt;<p>February 16, 2016 at 03:00:00am</p></header><div class="content"><p>It does seem to me that there is seriously wrong - when you are literally taking a sledge-hammer to try and make standard mathematical terminology (square peg) fit into a given proposal (round hole).  <br></p><p>When you are at a point where you are taking a sledgehammer to make a square peg fit into a round hole, then it might be a sign that it wonât fit.  <br></p><p>I have less issues with âInPlaceâ than other proposals so far - it makes mutable operations second class citizens (instead of the other way around).<br></p><p>I still think that the having two copies of every operation on a single type - is sort of the schizophrenic version of interface design â which is leading collections down the path of being less concise of what itâs function is.  Giving the same collection two completely identities within the same body.<br></p><p>&gt; On 2016-02-16, at 3:46:07, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On that topic, you mentioned earlier that you&#39;ve asked someone involved in the decision to explain why we can&#39;t have a term-of-art InPlace exception. That would be enormously beneficial as it seems we&#39;ve returned once again to: &quot;InPlace isn&#39;t so bad&quot;!<br>&gt; <br>&gt; It&#39;s difficult to advance alternatives clearly superior to InPlace while the objection to its use in this context originating from the Inner Sanctum of Swiftiness[TM] remains opaque.<br>&gt; <br>&gt; <br>&gt; On Mon, Feb 15, 2016 at 2:32 PM Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; on Mon Feb 15 2016, Austin Zheng &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; &gt; +1. Would rather see us retain the (IMHO) correct math-based nomenclature,<br>&gt; &gt; and come up with rules for handling cases where there are &#39;terms of art&#39;<br>&gt; &gt; that don&#39;t fit neatly into the standard ruleset.<br>&gt; <br>&gt; Of course, that&#39;s what &quot;InPlace&quot; was supposed to do.<br>&gt; <br>&gt; &gt;<br>&gt; &gt; Austin<br>&gt; &gt;<br>&gt; &gt; On Mon, Feb 15, 2016 at 11:46 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt; It pains me that well-known math terms and even whole protocols get lopped<br>&gt; &gt;&gt; off because of vagaries of the English language. New thought prompted by<br>&gt; &gt;&gt; some of these suggestions:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; There&#39;s a fairly circumscribed number of commonly used mathematical terms<br>&gt; &gt;&gt; of art. These describe for the most part functions for which there are no<br>&gt; &gt;&gt; noun/verb pairs. Suppose then, we have a rule:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Define these mathematical functions only outside types, as though they<br>&gt; &gt;&gt; were operators. If (as it seems), operators are an acceptable option for<br>&gt; &gt;&gt; Set but for the nomenclature, surely these functions can be acceptable as<br>&gt; &gt;&gt; well. Then you would have:<br>&gt; &gt;&gt; union(a, b) // non-mutating<br>&gt; &gt;&gt; union(&amp;a, b) // mutating<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; This is unambiguous, terse, conformant to expectations arising from<br>&gt; &gt;&gt; familiarity with math, and recognizably English, and you can still have a<br>&gt; &gt;&gt; SetAlgebra protocol if it can ensure these functions exist for conforming<br>&gt; &gt;&gt; types as Equatable ensures ==. &quot;Pollution&quot; of the global scope would be<br>&gt; &gt;&gt; limited to commonly used math terms, which should not be coopted for<br>&gt; &gt;&gt; another purpose in any case.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; On Mon, Feb 15, 2016 at 1:17 PM Dave Abrahams via swift-evolution &lt;<br>&gt; &gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; on Mon Feb 15 2016, Xiaodi Wu &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt; Agreed that &quot;union&quot; creates an expectation that it&#39;s non-mutating.<br>&gt; &gt;&gt;&gt; &gt;<br>&gt; &gt;&gt;&gt; &gt; There&#39;s no real point in pushing back on whether UIs are more or less<br>&gt; &gt;&gt;&gt; &gt; important for Swift than math.<br>&gt; &gt;&gt;&gt; &gt;<br>&gt; &gt;&gt;&gt; &gt; Problem is, the moment you name something SetAlgebra, you&#39;ve set user<br>&gt; &gt;&gt;&gt; &gt; expectations that it&#39;s a &#39;math API&#39;. Those ain&#39;t UI terms.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Yep.  As I mentioned in<br>&gt; &gt;&gt;&gt; &lt;<br>&gt; &gt;&gt;&gt; http://news.gmane.org/find-root.php?message_id=m2pow033r1.fsf%40eno.apple.com &lt;http://news.gmane.org/find-root.php?message_id=m2pow033r1.fsf%40eno.apple.com&gt;<br>&gt; &gt;&gt;&gt; &gt;,<br>&gt; &gt;&gt;&gt; we have a semantic muddle here.  Given where this is all headed, I am<br>&gt; &gt;&gt;&gt; somewhat inclined to retire the SetAlgebra protocol (it only seems to<br>&gt; &gt;&gt;&gt; have 3-4 uses on github), but renaming it could be another viable<br>&gt; &gt;&gt;&gt; option.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt; On Mon, Feb 15, 2016 at 11:25 AM Dave Abrahams via swift-evolution &lt;<br>&gt; &gt;&gt;&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; on Mon Feb 15 2016, Maximilian HÃ¼nenberger &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt; I also prefer (2). Isn&#39;t &quot;union&quot;, &quot;intersection&quot;, ... a &quot;Term of<br>&gt; &gt;&gt;&gt; Art&quot;?<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt; See the guidelines under &quot;Stick to the established meaning&quot;.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt; So we should stick to the mathematical naming.<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; My understanding of the rationale for the current direction is that the<br>&gt; &gt;&gt;&gt; &gt;&gt; domain of building GUI apps is more important than that of math, so the<br>&gt; &gt;&gt;&gt; &gt;&gt; look and feel of sets should match those of most other (non-math) APIs.<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt; Since these terms almost always return a new instance we should have<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt; an obvious mutating version with an &quot;inPlace&quot; suffix.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt; - Maximilian<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; Am 14.02.2016 um 22:37 schrieb Xiaodi Wu via swift-evolution<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; From a 10,000-ft view, I&#39;d suggest that the noun/verb rule<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; consistently runs into a problem with mathematical terms.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; In general, mathematical functions don&#39;t have verb forms. You<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; &#39;compute&#39; the reciprocal, or &#39;find&#39; the reciprocal, or &#39;take&#39; the<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; reciprocal, you don&#39;t &#39;reciprocate&#39; or &#39;reciprocalize&#39;. Likewise for<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; trigonometric functions, etc. Nor can you really &#39;cross produce&#39;...<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; So consistent is this trend that where two words might be noun/verb<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; counterparts, like intersect/intersection and<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; transform/transformation, common math usage treats both as<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; acceptable nouns.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; In colloquial usage, you might verb the noun, but then by definition<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; the verb and noun become the same. Then, to generate a noun<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; phrase/participle/etc. that looks different from the verb, you have<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; to noun-ify the verbed noun.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; Without an exception for mathematical function names, the only<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; solution to fulfill these new Swift rules are clobbering the<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; well-known math name or not using the math name at all. Indeed all<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; proposed solutions so far come down to one of four options, either<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; applied globally or only to sets for now, punting the rest down the<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; road:<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; (1) Abandon the rule, making a new one (e.g.: .=)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; (2) Make an exception to the rule for math function names<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; (3) Generate the least offensive noun-ified verbed nouns based on<br>&gt; &gt;&gt;&gt; math<br>&gt; &gt;&gt;&gt; &gt;&gt; function names<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; (4) Don&#39;t use math function names<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; (1) is off the table, according to the core team. My vote at this<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; point is for (2), and I see that a few others have voiced that<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; opinion. It&#39;d be nice to get a sense from the core team if that is<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; even a possibility. (3) has elicited a lot of discussion and<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; visceral reactions. (4) might be workable for sets alone but surely<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; can&#39;t be a generalized solution for all mathematical concepts to be<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; encountered in Swift.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; On Sun, Feb 14, 2016 at 3:14 PM Tyler Fleming Cloutier via<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; swift-evolution<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; On Feb 14, 2016, at 12:48 PM, Dave Abrahams<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; &lt;dabrahams at apple.com &lt;mailto:dabrahams at apple.com&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; on Sun Feb 14 2016, Tyler Fleming Cloutier<br>&gt; &gt;&gt;&gt; &lt;cloutiertyler-AT-aol.com&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; On Feb 14, 2016, at 8:27 AM, Dave Abrahams<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; &lt;dabrahams at apple.com &lt;mailto:dabrahams at apple.com&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; on Sat Feb 13 2016, Tyler Fleming Cloutier<br>&gt; &gt;&gt;&gt; &gt;&gt; &lt;cloutiertyler-AT-aol.com&gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; I would, personally, be very careful about discarding the<br>&gt; &gt;&gt;&gt; &gt;&gt; mathematical<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; terms since they are so widely used and understood.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; IMO it&#39;s better to leave them aside than to use them in<br>&gt; &gt;&gt;&gt; âcreativeâ<br>&gt; &gt;&gt;&gt; &gt;&gt; ways<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; that might be misleading.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Agreed. Iâm all for that.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; One issue is that itâs going to be hard to search for the<br>&gt; &gt;&gt;&gt; &gt;&gt; operation I<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; want considering I wonât be looking for &quot;func<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; invertingMembershipOfContentsOf(other: Self) -&gt; Selfâ. Iâm<br>&gt; &gt;&gt;&gt; &gt;&gt; concerned<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; people are going to have to do mental gymnastics to build the<br>&gt; &gt;&gt;&gt; map<br>&gt; &gt;&gt;&gt; &gt;&gt; from<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; math term to Swift function every time they want to look for a<br>&gt; &gt;&gt;&gt; set<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; operation method. âfunc invertingMembershipOfContentsOf(other:<br>&gt; &gt;&gt;&gt; &gt;&gt; Self)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; -&gt; Selfâ doesnât exactly seem to fit in the commonly held Venn<br>&gt; &gt;&gt;&gt; &gt;&gt; diagram<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; mental model of set operations. You could always have a<br>&gt; &gt;&gt;&gt; &gt;&gt; documentation<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; comment that specifies the mathematical term so that people<br>&gt; &gt;&gt;&gt; didnât<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; have to double check themselves every time.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; That being said, if the autocomplete issue is not a concern,<br>&gt; &gt;&gt;&gt; Iâm of<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; the opinion that the names Ricardo proposed are short, clear,<br>&gt; &gt;&gt;&gt; and<br>&gt; &gt;&gt;&gt; &gt;&gt; are<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; not so hard to fit to my Venn diagram mental model.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; +1<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; However, I tend to think that if there has to be this much<br>&gt; &gt;&gt;&gt; dancing<br>&gt; &gt;&gt;&gt; &gt;&gt; to<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; name a set of fundamental operations, the guidelines arenât<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; accomplishing their goal.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; I can&#39;t disagree.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; Itâs going to make it that much harder for people do design<br>&gt; &gt;&gt;&gt; their<br>&gt; &gt;&gt;&gt; &gt;&gt; own<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; APIs. I&#39;m having quite a time trying to conform Matttâs Surge<br>&gt; &gt;&gt;&gt; API<br>&gt; &gt;&gt;&gt; &gt;&gt; to<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; the guidelines.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; Please explain in detail.  Without details we don&#39;t know what&#39;s<br>&gt; &gt;&gt;&gt; &gt;&gt; wrong<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; with the guidelines.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Ah, I apologize. Iâve gone into detail about this API on the list<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; before, but I should have included the details here.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Here are my previous posts:<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160118/007560.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160118/007560.html&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160118/007560.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160118/007560.html&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Basically the issues come down to the following. The Accelerate<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; framework typical operates in a non-mutating way. This means<br>&gt; &gt;&gt;&gt; that my<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; API only has non mutating member functions and I should use the<br>&gt; &gt;&gt;&gt; &gt;&gt; ed/ing<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; rule according to the guidelines to name my methods.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; This is very difficult for some methods. Iâm able to frequently<br>&gt; &gt;&gt;&gt; get<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; around the problem for things like âsinâ or âarctanâ by keeping<br>&gt; &gt;&gt;&gt; them<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; as global functions, but I canât do that for a number of<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; methods. Consider:<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; remainder<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; dot (returns a scalar, thus there canât be a mutating version, so<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; should I just call it dot? Guidelines donât really comment on<br>&gt; &gt;&gt;&gt; this)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; mean (same as above)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; cross<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; reciprocal<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; threshold<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; copysign<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; fastFourierTransform<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; pow (arguably the method version should be called raisedTo)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; I could force all these to be global functions only, but these<br>&gt; &gt;&gt;&gt; are<br>&gt; &gt;&gt;&gt; &gt;&gt; not<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; as cut and dry as âsinâ or âarctanâ. I feel like Iâd be<br>&gt; &gt;&gt;&gt; splitting my<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; API up into two parts just based on the fact that itâs difficult<br>&gt; &gt;&gt;&gt; to<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; use the ed/ing rule. That makes it very difficult for users to<br>&gt; &gt;&gt;&gt; find<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; certain functions in my API.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; In this case there are no corresponding mutating operations<br>&gt; &gt;&gt;&gt; because<br>&gt; &gt;&gt;&gt; &gt;&gt; of<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; the way Accelerate works, but one could certainly imagine an API<br>&gt; &gt;&gt;&gt; with<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; mutating counterparts. The way I read the guidelines, they seem<br>&gt; &gt;&gt;&gt; to<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; imply I should use ed/ing regardless of whether there is a<br>&gt; &gt;&gt;&gt; mutating<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; counterpart. Iâd love to hear your thoughts on this.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; As long as the ones without side effects read as noun phrases and<br>&gt; &gt;&gt;&gt; the<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; ones with side-effects read as verb phrases, you&#39;re good.  No<br>&gt; &gt;&gt;&gt; ed/ing<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; needed.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; Ah yes, you are very right. Still what would the mutating versions<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; of remainder, fastFourierTransform, or reciprocal be? getRemainder?<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; applyFastFourierTransform? reciprocate? I suppose those arenât so<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; bad.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; I also suppose cross could become x.crossProduct(with: y) and<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; copysign, x.copyingSign(of: y). Seems a little verbose, but it does<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; the job.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; Thanks,<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; Tyler<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Tyler<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; Tyler<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Feb 13, 2016, at 9:09 PM, Ricardo Parada via<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hi Dave,<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I would be okay with staying away from the mathematical terms<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; similar to what you are suggesting except that the union can<br>&gt; &gt;&gt;&gt; still<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; be made more concise if you use merged / merge for the base<br>&gt; &gt;&gt;&gt; name<br>&gt; &gt;&gt;&gt; &gt;&gt; and<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; shorten the labels to a bare minimum without loosing<br>&gt; &gt;&gt;&gt; clarity.  In<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; addition, the merge can have a second parameter with a<br>&gt; &gt;&gt;&gt; default to<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; false in order to implement the symmetric difference<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; (a.k.a. exclusive or).  Recall that symmetric difference is<br>&gt; &gt;&gt;&gt; the<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; union of two sets and then removing the intersection (or<br>&gt; &gt;&gt;&gt; members<br>&gt; &gt;&gt;&gt; &gt;&gt; in<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; common).  I think it looks perfect (concise and clear).  What<br>&gt; &gt;&gt;&gt; does<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; everybody else think?<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Non-mutable<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; let union =                    a.merged(with: b)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; let intersection =             a.members(in: b)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; let difference =               a.removingMembers(in: b)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; let symmetricDifference =      a.merged(with: b,<br>&gt; &gt;&gt;&gt; &gt;&gt; removingMembersInCommon: true)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Mutable (In-Place)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; a.merge(with: b)               // union in-place<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; a.removeMembers(notIn: b)      // intersect in-place<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; a.removeMembers(in: b)         // difference in-place<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; a.merge(with: b, removeMembersInCommon: true)  // symmetric<br>&gt; &gt;&gt;&gt; &gt;&gt; difference in-place<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Ricardo Parada<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Feb 13, 2016, at 1:16 PM, Dave Abrahams via<br>&gt; &gt;&gt;&gt; swift-evolution<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Fri Feb 12 2016, Ricardo Parada &lt;<br>&gt; &gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hi all,<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I canât make up my mind.  Let me propose two different<br>&gt; &gt;&gt;&gt; &gt;&gt; alternatives<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; that Iâm not sure if they have been considered:<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ALTERNATIVE 1<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Non-mutable (noun-based)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func union(other: Self) -&gt; Self<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func union(other: Self) -&gt; Self           Assumes union<br>&gt; &gt;&gt;&gt; is a<br>&gt; &gt;&gt;&gt; &gt;&gt; noun, i.e. not a verb<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func intersect(other: Self) -&gt; Self<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func intersection(other: Self) -&gt; Self<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func subtract(other: Self) -&gt; Self<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func subtraction(other: Self) -&gt; Self<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func exclusiveOr(other: Self) -&gt; Self<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func symmetricSubtraction(other: Self) -&gt; Self<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Mutable (verb-based)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func unionInPlace(other: Self)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func unite(other: Self)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func intersectInPlace(other: Self)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func intersect(other: Self)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func subtractInPlace(other: Self)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func subtract(other: Self)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func exclusiveOrInPlace(other: Self)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func symmetricSubtract(other: Self)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Comments:<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; With this alternative we keep the union name which I assume<br>&gt; &gt;&gt;&gt; is<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; popular.  However, one has to accept unite as a verb (for<br>&gt; &gt;&gt;&gt; the<br>&gt; &gt;&gt;&gt; &gt;&gt; mutable<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; version) as I wanted all the mutable methods use verbs for<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; consistency.  I think unite is acceptable because it can be<br>&gt; &gt;&gt;&gt; &gt;&gt; found in<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; the dictionary and it is a verb.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Notice that all the non-mutable methods use nouns: union,<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; intersection, subtraction and symmetricSubtraction.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I understand some may oppose to symmetricSubtraction saying<br>&gt; &gt;&gt;&gt; that<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; symmetricSubraction is not as common as &quot;exclusive or&quot;.<br>&gt; &gt;&gt;&gt; &gt;&gt; However,<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; using symmetricSubtraction is consistent with subtraction<br>&gt; &gt;&gt;&gt; and<br>&gt; &gt;&gt;&gt; &gt;&gt; it hints<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; to a variation of the âsubtraction&quot; operation.  We will get<br>&gt; &gt;&gt;&gt; &gt;&gt; used to it<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; quickly / easily.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; The mutable methods all use verbs:  unite, intersect,<br>&gt; &gt;&gt;&gt; subtract<br>&gt; &gt;&gt;&gt; &gt;&gt; and symmetricSubtract.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ALTERNATIVE 2<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Non-mutable<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func union(other: Self) -&gt; Self<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func adding(other: Self) -&gt; Self<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func intersect(other: Self) -&gt; Self<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func intersecting(other: Self) -&gt; Self<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func exclusiveOr(other: Self) -&gt; Self<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func exclusiveOring(other: Self) -&gt; Self<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func subtract(other: Self) -&gt; Self<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func removing(other: Self) -&gt; Self<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Mutable<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func unionInPlace(other: Self)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func add(other: Self)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func intersectInPlace(other: Self)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func intersect(other: Self)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func exclusiveOrInPlace(other: Self)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func exclusiveOr(other: Self)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func subtractInPlace(other: Self)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func remove(other: Self)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Comments: This alternative gives up on union in favor or<br>&gt; &gt;&gt;&gt; add.<br>&gt; &gt;&gt;&gt; &gt;&gt; Many<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; may not like this, that is why I have it as the second<br>&gt; &gt;&gt;&gt; &gt;&gt; alternative.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It brings back exclusiveOr and treats it as a verb.  Some<br>&gt; &gt;&gt;&gt; may<br>&gt; &gt;&gt;&gt; &gt;&gt; argue<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; that exclusiveOr is a noun for the &quot;exclusive or&quot; operation.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If we are going to force Set fit the naming guidelines, I<br>&gt; &gt;&gt;&gt; would<br>&gt; &gt;&gt;&gt; &gt;&gt; prefer<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; to stay away from the mathematical terms altogether.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func insertingContentsOf(other: Self) -&gt; Self<br>&gt; &gt;&gt;&gt;  //<br>&gt; &gt;&gt;&gt; &gt;&gt; union<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; mutating func insertContentsOf(other)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func members(in other: Self) -&gt; Self<br>&gt; &gt;&gt;&gt; &gt;&gt;  // intersection<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; mutating func removeMembers(notIn: other)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func removingMembersAndAddingNonMembers(in other: Self) -&gt;<br>&gt; &gt;&gt;&gt; Self<br>&gt; &gt;&gt;&gt; &gt;&gt; // symmetric difference<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; mutating func removeMembersAndAddingNonMembers(in other:<br>&gt; &gt;&gt;&gt; Self)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func removingMembers(in other: Self) -&gt; Self<br>&gt; &gt;&gt;&gt; &gt;&gt; // subtract<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; mutating func removeMembers(in other: Self)<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If it would help with clarity, we could replace &quot;in&quot; with<br>&gt; &gt;&gt;&gt; &gt;&gt; &quot;foundIn&quot;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; above.<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -Dave<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; -Dave<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; --<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; -Dave<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt; _______________________________________________<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; --<br>&gt; &gt;&gt;&gt; &gt;&gt; -Dave<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; &gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt; _______________________________________________<br>&gt; &gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; --<br>&gt; &gt;&gt;&gt; -Dave<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; --<br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160216/7f6337e7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d118cdf2fe31053bc7032466c4da282?s=50"></div><header><strong>ed/ing, InPlace, Set/SetAlgebra naming resolution</strong> from <string>Craig Cruden</string> &lt;ccruden at novafore.com&gt;<p>February 16, 2016 at 04:00:00am</p></header><div class="content"><p>continued thoughtâ¦.<br></p><p>I am wondering if part of my issue is that there is also an inherent difference between bare to the metal âcollectionâ operations and those of higher-level collections. <br></p><p>i.e. defining SetAlgebra (which infers higher level collections) based on low level requirements for âin placeâ mutations (for performance reasons) while trying to also satisfy the immutable ârequirementsâ of higher level collections.<br></p><p>Trying to satisfy two really different objectives through the same interface - makes both seem a like a kludge â and will eventually have to be refactoredâ¦. but at greater cost down the road.<br></p><p>I donât think any language really did a good job of implementing collections or defining overall collection behaviour - the first time around.<br></p><p>Which leads me to â if the decision is to stay away from math terms of art because it really does not fit, then maybe also staying away from using âAlgebraâ in the title might also lessen the discomfort.<br></p><p>People might actually think they have to implement âSetAlgebraâ on real mathematical collections :p<br></p><p><br>&gt; On 2016-02-16, at 3:57:02, Craig Cruden &lt;ccruden at novafore.com&gt; wrote:<br>&gt; <br>&gt; It does seem to me that there is seriously wrong - when you are literally taking a sledge-hammer to try and make standard mathematical terminology (square peg) fit into a given proposal (round hole).  <br>&gt; <br>&gt; When you are at a point where you are taking a sledgehammer to make a square peg fit into a round hole, then it might be a sign that it wonât fit.  <br>&gt; <br>&gt; I have less issues with âInPlaceâ than other proposals so far - it makes mutable operations second class citizens (instead of the other way around).<br>&gt; <br>&gt; I still think that the having two copies of every operation on a single type - is sort of the schizophrenic version of interface design â which is leading collections down the path of being less concise of what itâs function is.  Giving the same collection two completely identities within the same body.<br>&gt; <br>&gt;&gt; On 2016-02-16, at 3:46:07, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On that topic, you mentioned earlier that you&#39;ve asked someone involved in the decision to explain why we can&#39;t have a term-of-art InPlace exception. That would be enormously beneficial as it seems we&#39;ve returned once again to: &quot;InPlace isn&#39;t so bad&quot;!<br>&gt;&gt; <br>&gt;&gt; It&#39;s difficult to advance alternatives clearly superior to InPlace while the objection to its use in this context originating from the Inner Sanctum of Swiftiness[TM] remains opaque.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Mon, Feb 15, 2016 at 2:32 PM Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; on Mon Feb 15 2016, Austin Zheng &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &gt; +1. Would rather see us retain the (IMHO) correct math-based nomenclature,<br>&gt;&gt; &gt; and come up with rules for handling cases where there are &#39;terms of art&#39;<br>&gt;&gt; &gt; that don&#39;t fit neatly into the standard ruleset.<br>&gt;&gt; <br>&gt;&gt; Of course, that&#39;s what &quot;InPlace&quot; was supposed to do.<br>&gt;&gt; <br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Austin<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; On Mon, Feb 15, 2016 at 11:46 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; It pains me that well-known math terms and even whole protocols get lopped<br>&gt;&gt; &gt;&gt; off because of vagaries of the English language. New thought prompted by<br>&gt;&gt; &gt;&gt; some of these suggestions:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; There&#39;s a fairly circumscribed number of commonly used mathematical terms<br>&gt;&gt; &gt;&gt; of art. These describe for the most part functions for which there are no<br>&gt;&gt; &gt;&gt; noun/verb pairs. Suppose then, we have a rule:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Define these mathematical functions only outside types, as though they<br>&gt;&gt; &gt;&gt; were operators. If (as it seems), operators are an acceptable option for<br>&gt;&gt; &gt;&gt; Set but for the nomenclature, surely these functions can be acceptable as<br>&gt;&gt; &gt;&gt; well. Then you would have:<br>&gt;&gt; &gt;&gt; union(a, b) // non-mutating<br>&gt;&gt; &gt;&gt; union(&amp;a, b) // mutating<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; This is unambiguous, terse, conformant to expectations arising from<br>&gt;&gt; &gt;&gt; familiarity with math, and recognizably English, and you can still have a<br>&gt;&gt; &gt;&gt; SetAlgebra protocol if it can ensure these functions exist for conforming<br>&gt;&gt; &gt;&gt; types as Equatable ensures ==. &quot;Pollution&quot; of the global scope would be<br>&gt;&gt; &gt;&gt; limited to commonly used math terms, which should not be coopted for<br>&gt;&gt; &gt;&gt; another purpose in any case.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; On Mon, Feb 15, 2016 at 1:17 PM Dave Abrahams via swift-evolution &lt;<br>&gt;&gt; &gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; on Mon Feb 15 2016, Xiaodi Wu &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt; Agreed that &quot;union&quot; creates an expectation that it&#39;s non-mutating.<br>&gt;&gt; &gt;&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;&gt; &gt; There&#39;s no real point in pushing back on whether UIs are more or less<br>&gt;&gt; &gt;&gt;&gt; &gt; important for Swift than math.<br>&gt;&gt; &gt;&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;&gt; &gt; Problem is, the moment you name something SetAlgebra, you&#39;ve set user<br>&gt;&gt; &gt;&gt;&gt; &gt; expectations that it&#39;s a &#39;math API&#39;. Those ain&#39;t UI terms.<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; Yep.  As I mentioned in<br>&gt;&gt; &gt;&gt;&gt; &lt;<br>&gt;&gt; &gt;&gt;&gt; http://news.gmane.org/find-root.php?message_id=m2pow033r1.fsf%40eno.apple.com &lt;http://news.gmane.org/find-root.php?message_id=m2pow033r1.fsf%40eno.apple.com&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;,<br>&gt;&gt; &gt;&gt;&gt; we have a semantic muddle here.  Given where this is all headed, I am<br>&gt;&gt; &gt;&gt;&gt; somewhat inclined to retire the SetAlgebra protocol (it only seems to<br>&gt;&gt; &gt;&gt;&gt; have 3-4 uses on github), but renaming it could be another viable<br>&gt;&gt; &gt;&gt;&gt; option.<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt; On Mon, Feb 15, 2016 at 11:25 AM Dave Abrahams via swift-evolution &lt;<br>&gt;&gt; &gt;&gt;&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; on Mon Feb 15 2016, Maximilian HÃ¼nenberger &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt; I also prefer (2). Isn&#39;t &quot;union&quot;, &quot;intersection&quot;, ... a &quot;Term of<br>&gt;&gt; &gt;&gt;&gt; Art&quot;?<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt; See the guidelines under &quot;Stick to the established meaning&quot;.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt; So we should stick to the mathematical naming.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; My understanding of the rationale for the current direction is that the<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; domain of building GUI apps is more important than that of math, so the<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; look and feel of sets should match those of most other (non-math) APIs.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt; Since these terms almost always return a new instance we should have<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt; an obvious mutating version with an &quot;inPlace&quot; suffix.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt; - Maximilian<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; Am 14.02.2016 um 22:37 schrieb Xiaodi Wu via swift-evolution<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; From a 10,000-ft view, I&#39;d suggest that the noun/verb rule<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; consistently runs into a problem with mathematical terms.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; In general, mathematical functions don&#39;t have verb forms. You<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; &#39;compute&#39; the reciprocal, or &#39;find&#39; the reciprocal, or &#39;take&#39; the<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; reciprocal, you don&#39;t &#39;reciprocate&#39; or &#39;reciprocalize&#39;. Likewise for<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; trigonometric functions, etc. Nor can you really &#39;cross produce&#39;...<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; So consistent is this trend that where two words might be noun/verb<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; counterparts, like intersect/intersection and<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; transform/transformation, common math usage treats both as<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; acceptable nouns.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; In colloquial usage, you might verb the noun, but then by definition<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; the verb and noun become the same. Then, to generate a noun<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; phrase/participle/etc. that looks different from the verb, you have<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; to noun-ify the verbed noun.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; Without an exception for mathematical function names, the only<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; solution to fulfill these new Swift rules are clobbering the<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; well-known math name or not using the math name at all. Indeed all<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; proposed solutions so far come down to one of four options, either<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; applied globally or only to sets for now, punting the rest down the<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; road:<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; (1) Abandon the rule, making a new one (e.g.: .=)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; (2) Make an exception to the rule for math function names<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; (3) Generate the least offensive noun-ified verbed nouns based on<br>&gt;&gt; &gt;&gt;&gt; math<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; function names<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; (4) Don&#39;t use math function names<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; (1) is off the table, according to the core team. My vote at this<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; point is for (2), and I see that a few others have voiced that<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; opinion. It&#39;d be nice to get a sense from the core team if that is<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; even a possibility. (3) has elicited a lot of discussion and<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; visceral reactions. (4) might be workable for sets alone but surely<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; can&#39;t be a generalized solution for all mathematical concepts to be<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; encountered in Swift.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; On Sun, Feb 14, 2016 at 3:14 PM Tyler Fleming Cloutier via<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; swift-evolution<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; On Feb 14, 2016, at 12:48 PM, Dave Abrahams<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; &lt;dabrahams at apple.com &lt;mailto:dabrahams at apple.com&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; on Sun Feb 14 2016, Tyler Fleming Cloutier<br>&gt;&gt; &gt;&gt;&gt; &lt;cloutiertyler-AT-aol.com &lt;http://cloutiertyler-at-aol.com/&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; On Feb 14, 2016, at 8:27 AM, Dave Abrahams<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; &lt;dabrahams at apple.com &lt;mailto:dabrahams at apple.com&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; on Sat Feb 13 2016, Tyler Fleming Cloutier<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &lt;cloutiertyler-AT-aol.com &lt;http://cloutiertyler-at-aol.com/&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; I would, personally, be very careful about discarding the<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; mathematical<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; terms since they are so widely used and understood.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; IMO it&#39;s better to leave them aside than to use them in<br>&gt;&gt; &gt;&gt;&gt; âcreativeâ<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; ways<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; that might be misleading.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Agreed. Iâm all for that.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; One issue is that itâs going to be hard to search for the<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; operation I<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; want considering I wonât be looking for &quot;func<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; invertingMembershipOfContentsOf(other: Self) -&gt; Selfâ. Iâm<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; concerned<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; people are going to have to do mental gymnastics to build the<br>&gt;&gt; &gt;&gt;&gt; map<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; from<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; math term to Swift function every time they want to look for a<br>&gt;&gt; &gt;&gt;&gt; set<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; operation method. âfunc invertingMembershipOfContentsOf(other:<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; Self)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; -&gt; Selfâ doesnât exactly seem to fit in the commonly held Venn<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; diagram<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; mental model of set operations. You could always have a<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; documentation<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; comment that specifies the mathematical term so that people<br>&gt;&gt; &gt;&gt;&gt; didnât<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; have to double check themselves every time.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; That being said, if the autocomplete issue is not a concern,<br>&gt;&gt; &gt;&gt;&gt; Iâm of<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; the opinion that the names Ricardo proposed are short, clear,<br>&gt;&gt; &gt;&gt;&gt; and<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; are<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; not so hard to fit to my Venn diagram mental model.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; +1<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; However, I tend to think that if there has to be this much<br>&gt;&gt; &gt;&gt;&gt; dancing<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; to<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; name a set of fundamental operations, the guidelines arenât<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; accomplishing their goal.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; I can&#39;t disagree.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; Itâs going to make it that much harder for people do design<br>&gt;&gt; &gt;&gt;&gt; their<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; own<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; APIs. I&#39;m having quite a time trying to conform Matttâs Surge<br>&gt;&gt; &gt;&gt;&gt; API<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; to<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; the guidelines.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; Please explain in detail.  Without details we don&#39;t know what&#39;s<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; wrong<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; with the guidelines.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Ah, I apologize. Iâve gone into detail about this API on the list<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; before, but I should have included the details here.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Here are my previous posts:<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160118/007560.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160118/007560.html&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160118/007560.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160118/007560.html&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Basically the issues come down to the following. The Accelerate<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; framework typical operates in a non-mutating way. This means<br>&gt;&gt; &gt;&gt;&gt; that my<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; API only has non mutating member functions and I should use the<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; ed/ing<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; rule according to the guidelines to name my methods.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; This is very difficult for some methods. Iâm able to frequently<br>&gt;&gt; &gt;&gt;&gt; get<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; around the problem for things like âsinâ or âarctanâ by keeping<br>&gt;&gt; &gt;&gt;&gt; them<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; as global functions, but I canât do that for a number of<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; methods. Consider:<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; remainder<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; dot (returns a scalar, thus there canât be a mutating version, so<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; should I just call it dot? Guidelines donât really comment on<br>&gt;&gt; &gt;&gt;&gt; this)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; mean (same as above)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; cross<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; reciprocal<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; threshold<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; copysign<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; fastFourierTransform<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; pow (arguably the method version should be called raisedTo)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; I could force all these to be global functions only, but these<br>&gt;&gt; &gt;&gt;&gt; are<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; not<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; as cut and dry as âsinâ or âarctanâ. I feel like Iâd be<br>&gt;&gt; &gt;&gt;&gt; splitting my<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; API up into two parts just based on the fact that itâs difficult<br>&gt;&gt; &gt;&gt;&gt; to<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; use the ed/ing rule. That makes it very difficult for users to<br>&gt;&gt; &gt;&gt;&gt; find<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; certain functions in my API.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; In this case there are no corresponding mutating operations<br>&gt;&gt; &gt;&gt;&gt; because<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; of<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; the way Accelerate works, but one could certainly imagine an API<br>&gt;&gt; &gt;&gt;&gt; with<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; mutating counterparts. The way I read the guidelines, they seem<br>&gt;&gt; &gt;&gt;&gt; to<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; imply I should use ed/ing regardless of whether there is a<br>&gt;&gt; &gt;&gt;&gt; mutating<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; counterpart. Iâd love to hear your thoughts on this.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; As long as the ones without side effects read as noun phrases and<br>&gt;&gt; &gt;&gt;&gt; the<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; ones with side-effects read as verb phrases, you&#39;re good.  No<br>&gt;&gt; &gt;&gt;&gt; ed/ing<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; needed.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; Ah yes, you are very right. Still what would the mutating versions<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; of remainder, fastFourierTransform, or reciprocal be? getRemainder?<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; applyFastFourierTransform? reciprocate? I suppose those arenât so<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; bad.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; I also suppose cross could become x.crossProduct(with: y) and<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; copysign, x.copyingSign(of: y). Seems a little verbose, but it does<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; the job.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; Thanks,<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; Tyler<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Tyler<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; Tyler<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Feb 13, 2016, at 9:09 PM, Ricardo Parada via<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hi Dave,<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I would be okay with staying away from the mathematical terms<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; similar to what you are suggesting except that the union can<br>&gt;&gt; &gt;&gt;&gt; still<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; be made more concise if you use merged / merge for the base<br>&gt;&gt; &gt;&gt;&gt; name<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; and<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; shorten the labels to a bare minimum without loosing<br>&gt;&gt; &gt;&gt;&gt; clarity.  In<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; addition, the merge can have a second parameter with a<br>&gt;&gt; &gt;&gt;&gt; default to<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; false in order to implement the symmetric difference<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; (a.k.a. exclusive or).  Recall that symmetric difference is<br>&gt;&gt; &gt;&gt;&gt; the<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; union of two sets and then removing the intersection (or<br>&gt;&gt; &gt;&gt;&gt; members<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; in<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; common).  I think it looks perfect (concise and clear).  What<br>&gt;&gt; &gt;&gt;&gt; does<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; everybody else think?<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Non-mutable<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; let union =                    a.merged(with: b)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; let intersection =             a.members(in: b)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; let difference =               a.removingMembers(in: b)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; let symmetricDifference =      a.merged(with: b,<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; removingMembersInCommon: true)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Mutable (In-Place)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; a.merge(with: b)               // union in-place<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; a.removeMembers(notIn: b)      // intersect in-place<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; a.removeMembers(in: b)         // difference in-place<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; a.merge(with: b, removeMembersInCommon: true)  // symmetric<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; difference in-place<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Ricardo Parada<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Feb 13, 2016, at 1:16 PM, Dave Abrahams via<br>&gt;&gt; &gt;&gt;&gt; swift-evolution<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Fri Feb 12 2016, Ricardo Parada &lt;<br>&gt;&gt; &gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hi all,<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I canât make up my mind.  Let me propose two different<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; alternatives<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; that Iâm not sure if they have been considered:<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ALTERNATIVE 1<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Non-mutable (noun-based)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func union(other: Self) -&gt; Self<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func union(other: Self) -&gt; Self           Assumes union<br>&gt;&gt; &gt;&gt;&gt; is a<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; noun, i.e. not a verb<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func intersect(other: Self) -&gt; Self<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func intersection(other: Self) -&gt; Self<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func subtract(other: Self) -&gt; Self<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func subtraction(other: Self) -&gt; Self<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func exclusiveOr(other: Self) -&gt; Self<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func symmetricSubtraction(other: Self) -&gt; Self<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Mutable (verb-based)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func unionInPlace(other: Self)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func unite(other: Self)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func intersectInPlace(other: Self)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func intersect(other: Self)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func subtractInPlace(other: Self)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func subtract(other: Self)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func exclusiveOrInPlace(other: Self)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func symmetricSubtract(other: Self)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Comments:<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; With this alternative we keep the union name which I assume<br>&gt;&gt; &gt;&gt;&gt; is<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; popular.  However, one has to accept unite as a verb (for<br>&gt;&gt; &gt;&gt;&gt; the<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; mutable<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; version) as I wanted all the mutable methods use verbs for<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; consistency.  I think unite is acceptable because it can be<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; found in<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; the dictionary and it is a verb.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Notice that all the non-mutable methods use nouns: union,<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; intersection, subtraction and symmetricSubtraction.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I understand some may oppose to symmetricSubtraction saying<br>&gt;&gt; &gt;&gt;&gt; that<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; symmetricSubraction is not as common as &quot;exclusive or&quot;.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; However,<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; using symmetricSubtraction is consistent with subtraction<br>&gt;&gt; &gt;&gt;&gt; and<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; it hints<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; to a variation of the âsubtraction&quot; operation.  We will get<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; used to it<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; quickly / easily.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; The mutable methods all use verbs:  unite, intersect,<br>&gt;&gt; &gt;&gt;&gt; subtract<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; and symmetricSubtract.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ALTERNATIVE 2<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Non-mutable<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func union(other: Self) -&gt; Self<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func adding(other: Self) -&gt; Self<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func intersect(other: Self) -&gt; Self<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func intersecting(other: Self) -&gt; Self<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func exclusiveOr(other: Self) -&gt; Self<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func exclusiveOring(other: Self) -&gt; Self<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func subtract(other: Self) -&gt; Self<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func removing(other: Self) -&gt; Self<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Mutable<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func unionInPlace(other: Self)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func add(other: Self)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func intersectInPlace(other: Self)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func intersect(other: Self)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func exclusiveOrInPlace(other: Self)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func exclusiveOr(other: Self)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func subtractInPlace(other: Self)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func remove(other: Self)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Comments: This alternative gives up on union in favor or<br>&gt;&gt; &gt;&gt;&gt; add.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; Many<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; may not like this, that is why I have it as the second<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; alternative.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It brings back exclusiveOr and treats it as a verb.  Some<br>&gt;&gt; &gt;&gt;&gt; may<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; argue<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; that exclusiveOr is a noun for the &quot;exclusive or&quot; operation.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If we are going to force Set fit the naming guidelines, I<br>&gt;&gt; &gt;&gt;&gt; would<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; prefer<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; to stay away from the mathematical terms altogether.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func insertingContentsOf(other: Self) -&gt; Self<br>&gt;&gt; &gt;&gt;&gt;  //<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; union<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; mutating func insertContentsOf(other)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func members(in other: Self) -&gt; Self<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;  // intersection<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; mutating func removeMembers(notIn: other)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func removingMembersAndAddingNonMembers(in other: Self) -&gt;<br>&gt;&gt; &gt;&gt;&gt; Self<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; // symmetric difference<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; mutating func removeMembersAndAddingNonMembers(in other:<br>&gt;&gt; &gt;&gt;&gt; Self)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func removingMembers(in other: Self) -&gt; Self<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; // subtract<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; mutating func removeMembers(in other: Self)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If it would help with clarity, we could replace &quot;in&quot; with<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &quot;foundIn&quot;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; above.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -Dave<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; -Dave<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; --<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; -Dave<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; --<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; -Dave<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; --<br>&gt;&gt; &gt;&gt;&gt; -Dave<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; -Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160216/50a6a75c/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>ed/ing, InPlace, Set/SetAlgebra naming resolution</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 15, 2016 at 01:00:00pm</p></header><div class="content"><p>on Mon Feb 15 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br></p><p>&gt; On that topic, you mentioned earlier that you&#39;ve asked someone involved in<br>&gt; the decision to explain why we can&#39;t have a term-of-art InPlace exception.<br>&gt; That would be enormously beneficial as it seems we&#39;ve returned once again<br>&gt; to: &quot;InPlace isn&#39;t so bad&quot;!<br>&gt;<br>&gt; It&#39;s difficult to advance alternatives clearly superior to InPlace while<br>&gt; the objection to its use in this context originating from the Inner Sanctum<br>&gt; of Swiftiness[TM] remains opaque.<br></p><p>I understand; thanks for your patience.<br></p><p>&gt;<br>&gt;<br>&gt; On Mon, Feb 15, 2016 at 2:32 PM Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; on Mon Feb 15 2016, Austin Zheng &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; &gt; +1. Would rather see us retain the (IMHO) correct math-based<br>&gt;&gt; nomenclature,<br>&gt;&gt; &gt; and come up with rules for handling cases where there are &#39;terms of art&#39;<br>&gt;&gt; &gt; that don&#39;t fit neatly into the standard ruleset.<br>&gt;&gt;<br>&gt;&gt; Of course, that&#39;s what &quot;InPlace&quot; was supposed to do.<br>&gt;&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Austin<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; On Mon, Feb 15, 2016 at 11:46 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt; &gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; It pains me that well-known math terms and even whole protocols get<br>&gt;&gt; lopped<br>&gt;&gt; &gt;&gt; off because of vagaries of the English language. New thought prompted by<br>&gt;&gt; &gt;&gt; some of these suggestions:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; There&#39;s a fairly circumscribed number of commonly used mathematical<br>&gt;&gt; terms<br>&gt;&gt; &gt;&gt; of art. These describe for the most part functions for which there are<br>&gt;&gt; no<br>&gt;&gt; &gt;&gt; noun/verb pairs. Suppose then, we have a rule:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Define these mathematical functions only outside types, as though they<br>&gt;&gt; &gt;&gt; were operators. If (as it seems), operators are an acceptable option for<br>&gt;&gt; &gt;&gt; Set but for the nomenclature, surely these functions can be acceptable<br>&gt;&gt; as<br>&gt;&gt; &gt;&gt; well. Then you would have:<br>&gt;&gt; &gt;&gt; union(a, b) // non-mutating<br>&gt;&gt; &gt;&gt; union(&amp;a, b) // mutating<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; This is unambiguous, terse, conformant to expectations arising from<br>&gt;&gt; &gt;&gt; familiarity with math, and recognizably English, and you can still have<br>&gt;&gt; a<br>&gt;&gt; &gt;&gt; SetAlgebra protocol if it can ensure these functions exist for<br>&gt;&gt; conforming<br>&gt;&gt; &gt;&gt; types as Equatable ensures ==. &quot;Pollution&quot; of the global scope would be<br>&gt;&gt; &gt;&gt; limited to commonly used math terms, which should not be coopted for<br>&gt;&gt; &gt;&gt; another purpose in any case.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; On Mon, Feb 15, 2016 at 1:17 PM Dave Abrahams via swift-evolution &lt;<br>&gt;&gt; &gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; on Mon Feb 15 2016, Xiaodi Wu &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt; Agreed that &quot;union&quot; creates an expectation that it&#39;s non-mutating.<br>&gt;&gt; &gt;&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;&gt; &gt; There&#39;s no real point in pushing back on whether UIs are more or less<br>&gt;&gt; &gt;&gt;&gt; &gt; important for Swift than math.<br>&gt;&gt; &gt;&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;&gt; &gt; Problem is, the moment you name something SetAlgebra, you&#39;ve set user<br>&gt;&gt; &gt;&gt;&gt; &gt; expectations that it&#39;s a &#39;math API&#39;. Those ain&#39;t UI terms.<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; Yep.  As I mentioned in<br>&gt;&gt; &gt;&gt;&gt; &lt;<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; http://news.gmane.org/find-root.php?message_id=m2pow033r1.fsf%40eno.apple.com<br>&gt;&gt; &gt;&gt;&gt; &gt;,<br>&gt;&gt; &gt;&gt;&gt; we have a semantic muddle here.  Given where this is all headed, I am<br>&gt;&gt; &gt;&gt;&gt; somewhat inclined to retire the SetAlgebra protocol (it only seems to<br>&gt;&gt; &gt;&gt;&gt; have 3-4 uses on github), but renaming it could be another viable<br>&gt;&gt; &gt;&gt;&gt; option.<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt; On Mon, Feb 15, 2016 at 11:25 AM Dave Abrahams via swift-evolution &lt;<br>&gt;&gt; &gt;&gt;&gt; &gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; on Mon Feb 15 2016, Maximilian HÃ¼nenberger &lt;<br>&gt;&gt; swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt; I also prefer (2). Isn&#39;t &quot;union&quot;, &quot;intersection&quot;, ... a &quot;Term of<br>&gt;&gt; &gt;&gt;&gt; Art&quot;?<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt; See the guidelines under &quot;Stick to the established meaning&quot;.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt; So we should stick to the mathematical naming.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; My understanding of the rationale for the current direction is that<br>&gt;&gt; the<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; domain of building GUI apps is more important than that of math, so<br>&gt;&gt; the<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; look and feel of sets should match those of most other (non-math)<br>&gt;&gt; APIs.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt; Since these terms almost always return a new instance we should<br>&gt;&gt; have<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt; an obvious mutating version with an &quot;inPlace&quot; suffix.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt; - Maximilian<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; Am 14.02.2016 um 22:37 schrieb Xiaodi Wu via swift-evolution<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; From a 10,000-ft view, I&#39;d suggest that the noun/verb rule<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; consistently runs into a problem with mathematical terms.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; In general, mathematical functions don&#39;t have verb forms. You<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; &#39;compute&#39; the reciprocal, or &#39;find&#39; the reciprocal, or &#39;take&#39; the<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; reciprocal, you don&#39;t &#39;reciprocate&#39; or &#39;reciprocalize&#39;. Likewise<br>&gt;&gt; for<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; trigonometric functions, etc. Nor can you really &#39;cross<br>&gt;&gt; produce&#39;...<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; So consistent is this trend that where two words might be<br>&gt;&gt; noun/verb<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; counterparts, like intersect/intersection and<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; transform/transformation, common math usage treats both as<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; acceptable nouns.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; In colloquial usage, you might verb the noun, but then by<br>&gt;&gt; definition<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; the verb and noun become the same. Then, to generate a noun<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; phrase/participle/etc. that looks different from the verb, you<br>&gt;&gt; have<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; to noun-ify the verbed noun.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; Without an exception for mathematical function names, the only<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; solution to fulfill these new Swift rules are clobbering the<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; well-known math name or not using the math name at all. Indeed<br>&gt;&gt; all<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; proposed solutions so far come down to one of four options,<br>&gt;&gt; either<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; applied globally or only to sets for now, punting the rest down<br>&gt;&gt; the<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; road:<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; (1) Abandon the rule, making a new one (e.g.: .=)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; (2) Make an exception to the rule for math function names<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; (3) Generate the least offensive noun-ified verbed nouns based on<br>&gt;&gt; &gt;&gt;&gt; math<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; function names<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; (4) Don&#39;t use math function names<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; (1) is off the table, according to the core team. My vote at this<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; point is for (2), and I see that a few others have voiced that<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; opinion. It&#39;d be nice to get a sense from the core team if that<br>&gt;&gt; is<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; even a possibility. (3) has elicited a lot of discussion and<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; visceral reactions. (4) might be workable for sets alone but<br>&gt;&gt; surely<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; can&#39;t be a generalized solution for all mathematical concepts to<br>&gt;&gt; be<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; encountered in Swift.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; On Sun, Feb 14, 2016 at 3:14 PM Tyler Fleming Cloutier via<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; swift-evolution<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; On Feb 14, 2016, at 12:48 PM, Dave Abrahams<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; on Sun Feb 14 2016, Tyler Fleming Cloutier<br>&gt;&gt; &gt;&gt;&gt; &lt;cloutiertyler-AT-aol.com&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; On Feb 14, 2016, at 8:27 AM, Dave Abrahams<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; on Sat Feb 13 2016, Tyler Fleming Cloutier<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &lt;cloutiertyler-AT-aol.com&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; I would, personally, be very careful about discarding the<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; mathematical<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; terms since they are so widely used and understood.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; IMO it&#39;s better to leave them aside than to use them in<br>&gt;&gt; &gt;&gt;&gt; âcreativeâ<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; ways<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; that might be misleading.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Agreed. Iâm all for that.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; One issue is that itâs going to be hard to search for the<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; operation I<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; want considering I wonât be looking for &quot;func<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; invertingMembershipOfContentsOf(other: Self) -&gt; Selfâ. Iâm<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; concerned<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; people are going to have to do mental gymnastics to build<br>&gt;&gt; the<br>&gt;&gt; &gt;&gt;&gt; map<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; from<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; math term to Swift function every time they want to look<br>&gt;&gt; for a<br>&gt;&gt; &gt;&gt;&gt; set<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; operation method. âfunc<br>&gt;&gt; invertingMembershipOfContentsOf(other:<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; Self)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; -&gt; Selfâ doesnât exactly seem to fit in the commonly held<br>&gt;&gt; Venn<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; diagram<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; mental model of set operations. You could always have a<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; documentation<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; comment that specifies the mathematical term so that people<br>&gt;&gt; &gt;&gt;&gt; didnât<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; have to double check themselves every time.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; That being said, if the autocomplete issue is not a concern,<br>&gt;&gt; &gt;&gt;&gt; Iâm of<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; the opinion that the names Ricardo proposed are short,<br>&gt;&gt; clear,<br>&gt;&gt; &gt;&gt;&gt; and<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; are<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; not so hard to fit to my Venn diagram mental model.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; +1<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; However, I tend to think that if there has to be this much<br>&gt;&gt; &gt;&gt;&gt; dancing<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; to<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; name a set of fundamental operations, the guidelines arenât<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; accomplishing their goal.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; I can&#39;t disagree.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; Itâs going to make it that much harder for people do design<br>&gt;&gt; &gt;&gt;&gt; their<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; own<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; APIs. I&#39;m having quite a time trying to conform Matttâs<br>&gt;&gt; Surge<br>&gt;&gt; &gt;&gt;&gt; API<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; to<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; the guidelines.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; Please explain in detail.  Without details we don&#39;t know<br>&gt;&gt; what&#39;s<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; wrong<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; with the guidelines.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Ah, I apologize. Iâve gone into detail about this API on the<br>&gt;&gt; list<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; before, but I should have included the details here.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Here are my previous posts:<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160118/007560.html<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160118/007560.html<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Basically the issues come down to the following. The<br>&gt;&gt; Accelerate<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; framework typical operates in a non-mutating way. This means<br>&gt;&gt; &gt;&gt;&gt; that my<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; API only has non mutating member functions and I should use<br>&gt;&gt; the<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; ed/ing<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; rule according to the guidelines to name my methods.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; This is very difficult for some methods. Iâm able to<br>&gt;&gt; frequently<br>&gt;&gt; &gt;&gt;&gt; get<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; around the problem for things like âsinâ or âarctanâ by<br>&gt;&gt; keeping<br>&gt;&gt; &gt;&gt;&gt; them<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; as global functions, but I canât do that for a number of<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; methods. Consider:<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; remainder<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; dot (returns a scalar, thus there canât be a mutating<br>&gt;&gt; version, so<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; should I just call it dot? Guidelines donât really comment on<br>&gt;&gt; &gt;&gt;&gt; this)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; mean (same as above)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; cross<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; reciprocal<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; threshold<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; copysign<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; fastFourierTransform<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; pow (arguably the method version should be called raisedTo)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; I could force all these to be global functions only, but these<br>&gt;&gt; &gt;&gt;&gt; are<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; not<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; as cut and dry as âsinâ or âarctanâ. I feel like Iâd be<br>&gt;&gt; &gt;&gt;&gt; splitting my<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; API up into two parts just based on the fact that itâs<br>&gt;&gt; difficult<br>&gt;&gt; &gt;&gt;&gt; to<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; use the ed/ing rule. That makes it very difficult for users to<br>&gt;&gt; &gt;&gt;&gt; find<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; certain functions in my API.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; In this case there are no corresponding mutating operations<br>&gt;&gt; &gt;&gt;&gt; because<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; of<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; the way Accelerate works, but one could certainly imagine an<br>&gt;&gt; API<br>&gt;&gt; &gt;&gt;&gt; with<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; mutating counterparts. The way I read the guidelines, they<br>&gt;&gt; seem<br>&gt;&gt; &gt;&gt;&gt; to<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; imply I should use ed/ing regardless of whether there is a<br>&gt;&gt; &gt;&gt;&gt; mutating<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; counterpart. Iâd love to hear your thoughts on this.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; As long as the ones without side effects read as noun phrases<br>&gt;&gt; and<br>&gt;&gt; &gt;&gt;&gt; the<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; ones with side-effects read as verb phrases, you&#39;re good.  No<br>&gt;&gt; &gt;&gt;&gt; ed/ing<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; needed.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; Ah yes, you are very right. Still what would the mutating<br>&gt;&gt; versions<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; of remainder, fastFourierTransform, or reciprocal be?<br>&gt;&gt; getRemainder?<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; applyFastFourierTransform? reciprocate? I suppose those arenât<br>&gt;&gt; so<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; bad.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; I also suppose cross could become x.crossProduct(with: y) and<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; copysign, x.copyingSign(of: y). Seems a little verbose, but it<br>&gt;&gt; does<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; the job.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; Thanks,<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; Tyler<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Tyler<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; Tyler<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Feb 13, 2016, at 9:09 PM, Ricardo Parada via<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hi Dave,<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I would be okay with staying away from the mathematical<br>&gt;&gt; terms<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; similar to what you are suggesting except that the union<br>&gt;&gt; can<br>&gt;&gt; &gt;&gt;&gt; still<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; be made more concise if you use merged / merge for the base<br>&gt;&gt; &gt;&gt;&gt; name<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; and<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; shorten the labels to a bare minimum without loosing<br>&gt;&gt; &gt;&gt;&gt; clarity.  In<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; addition, the merge can have a second parameter with a<br>&gt;&gt; &gt;&gt;&gt; default to<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; false in order to implement the symmetric difference<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; (a.k.a. exclusive or).  Recall that symmetric difference is<br>&gt;&gt; &gt;&gt;&gt; the<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; union of two sets and then removing the intersection (or<br>&gt;&gt; &gt;&gt;&gt; members<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; in<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; common).  I think it looks perfect (concise and clear).<br>&gt;&gt; What<br>&gt;&gt; &gt;&gt;&gt; does<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; everybody else think?<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Non-mutable<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; let union =                    a.merged(with: b)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; let intersection =             a.members(in: b)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; let difference =               a.removingMembers(in: b)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; let symmetricDifference =      a.merged(with: b,<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; removingMembersInCommon: true)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Mutable (In-Place)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; a.merge(with: b)               // union in-place<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; a.removeMembers(notIn: b)      // intersect in-place<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; a.removeMembers(in: b)         // difference in-place<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; a.merge(with: b, removeMembersInCommon: true)  // symmetric<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; difference in-place<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Ricardo Parada<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Feb 13, 2016, at 1:16 PM, Dave Abrahams via<br>&gt;&gt; &gt;&gt;&gt; swift-evolution<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Fri Feb 12 2016, Ricardo Parada &lt;<br>&gt;&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hi all,<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I canât make up my mind.  Let me propose two different<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; alternatives<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; that Iâm not sure if they have been considered:<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ALTERNATIVE 1<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Non-mutable (noun-based)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func union(other: Self) -&gt; Self<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func union(other: Self) -&gt; Self           Assumes<br>&gt;&gt; union<br>&gt;&gt; &gt;&gt;&gt; is a<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; noun, i.e. not a verb<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func intersect(other: Self) -&gt; Self<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func intersection(other: Self) -&gt; Self<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func subtract(other: Self) -&gt; Self<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func subtraction(other: Self) -&gt; Self<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func exclusiveOr(other: Self) -&gt; Self<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func symmetricSubtraction(other: Self) -&gt; Self<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Mutable (verb-based)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func unionInPlace(other: Self)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func unite(other: Self)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func intersectInPlace(other: Self)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func intersect(other: Self)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func subtractInPlace(other: Self)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func subtract(other: Self)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func exclusiveOrInPlace(other: Self)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func symmetricSubtract(other: Self)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Comments:<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; With this alternative we keep the union name which I<br>&gt;&gt; assume<br>&gt;&gt; &gt;&gt;&gt; is<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; popular.  However, one has to accept unite as a verb (for<br>&gt;&gt; &gt;&gt;&gt; the<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; mutable<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; version) as I wanted all the mutable methods use verbs<br>&gt;&gt; for<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; consistency.  I think unite is acceptable because it can<br>&gt;&gt; be<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; found in<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; the dictionary and it is a verb.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Notice that all the non-mutable methods use nouns: union,<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; intersection, subtraction and symmetricSubtraction.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I understand some may oppose to symmetricSubtraction<br>&gt;&gt; saying<br>&gt;&gt; &gt;&gt;&gt; that<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; symmetricSubraction is not as common as &quot;exclusive or&quot;.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; However,<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; using symmetricSubtraction is consistent with subtraction<br>&gt;&gt; &gt;&gt;&gt; and<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; it hints<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; to a variation of the âsubtraction&quot; operation.  We will<br>&gt;&gt; get<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; used to it<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; quickly / easily.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; The mutable methods all use verbs:  unite, intersect,<br>&gt;&gt; &gt;&gt;&gt; subtract<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; and symmetricSubtract.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ALTERNATIVE 2<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Non-mutable<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func union(other: Self) -&gt; Self<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func adding(other: Self) -&gt; Self<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func intersect(other: Self) -&gt; Self<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func intersecting(other: Self) -&gt; Self<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func exclusiveOr(other: Self) -&gt; Self<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func exclusiveOring(other: Self) -&gt; Self<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func subtract(other: Self) -&gt; Self<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func removing(other: Self) -&gt; Self<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Mutable<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func unionInPlace(other: Self)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func add(other: Self)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func intersectInPlace(other: Self)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func intersect(other: Self)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func exclusiveOrInPlace(other: Self)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func exclusiveOr(other: Self)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func subtractInPlace(other: Self)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func remove(other: Self)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Comments: This alternative gives up on union in favor or<br>&gt;&gt; &gt;&gt;&gt; add.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; Many<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; may not like this, that is why I have it as the second<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; alternative.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It brings back exclusiveOr and treats it as a verb.  Some<br>&gt;&gt; &gt;&gt;&gt; may<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; argue<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; that exclusiveOr is a noun for the &quot;exclusive or&quot;<br>&gt;&gt; operation.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If we are going to force Set fit the naming guidelines, I<br>&gt;&gt; &gt;&gt;&gt; would<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; prefer<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; to stay away from the mathematical terms altogether.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func insertingContentsOf(other: Self) -&gt; Self<br>&gt;&gt; &gt;&gt;&gt;  //<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; union<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; mutating func insertContentsOf(other)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func members(in other: Self) -&gt; Self<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;  // intersection<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; mutating func removeMembers(notIn: other)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func removingMembersAndAddingNonMembers(in other: Self) -&gt;<br>&gt;&gt; &gt;&gt;&gt; Self<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; // symmetric difference<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; mutating func removeMembersAndAddingNonMembers(in other:<br>&gt;&gt; &gt;&gt;&gt; Self)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func removingMembers(in other: Self) -&gt; Self<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; // subtract<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; mutating func removeMembers(in other: Self)<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If it would help with clarity, we could replace &quot;in&quot; with<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &quot;foundIn&quot;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; above.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -Dave<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; -Dave<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; --<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; -Dave<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; --<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; -Dave<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; --<br>&gt;&gt; &gt;&gt;&gt; -Dave<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; -Dave<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>ed/ing, InPlace, Set/SetAlgebra naming resolution</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>February 15, 2016 at 01:00:00pm</p></header><div class="content"><p>Thanks for working on getting an answer for this. I&#39;m sure there&#39;s a<br>perfectly good justification for excluding &#39;inPlace&#39;, but based on all the<br>conversations about naming that I&#39;ve been trying (with mixed success) to<br>follow, it seems like none of the alternatives are all that palatable:<br></p><p>- &#39;inPlace&#39; exception - superficially a good solution, but there&#39;s a reason<br>we can&#39;t use it<br>- Applying standard rules to terms of art - leads to ugly, non-standard<br>(both in terms of terminology and general English usage) terminology<br>- Moving away from math naming to get rid of terms of art - avoids the<br>&#39;most obvious&#39; name for the thing, privileges a specific use case (UI/app<br>programming) over the general domain (sets as a mathematical concept)<br></p><p>Anyways, I&#39;ll wait for more information before making any further judgments.<br></p><p><br></p><p>On Mon, Feb 15, 2016 at 1:15 PM, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; on Mon Feb 15 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br>&gt;<br>&gt; &gt; On that topic, you mentioned earlier that you&#39;ve asked someone involved<br>&gt; in<br>&gt; &gt; the decision to explain why we can&#39;t have a term-of-art InPlace<br>&gt; exception.<br>&gt; &gt; That would be enormously beneficial as it seems we&#39;ve returned once again<br>&gt; &gt; to: &quot;InPlace isn&#39;t so bad&quot;!<br>&gt; &gt;<br>&gt; &gt; It&#39;s difficult to advance alternatives clearly superior to InPlace while<br>&gt; &gt; the objection to its use in this context originating from the Inner<br>&gt; Sanctum<br>&gt; &gt; of Swiftiness[TM] remains opaque.<br>&gt;<br>&gt; I understand; thanks for your patience.<br>&gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; On Mon, Feb 15, 2016 at 2:32 PM Dave Abrahams via swift-evolution &lt;<br>&gt; &gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; on Mon Feb 15 2016, Austin Zheng &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt; +1. Would rather see us retain the (IMHO) correct math-based<br>&gt; &gt;&gt; nomenclature,<br>&gt; &gt;&gt; &gt; and come up with rules for handling cases where there are &#39;terms of<br>&gt; art&#39;<br>&gt; &gt;&gt; &gt; that don&#39;t fit neatly into the standard ruleset.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Of course, that&#39;s what &quot;InPlace&quot; was supposed to do.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt; &gt; Austin<br>&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt; &gt; On Mon, Feb 15, 2016 at 11:46 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt; &gt;&gt; &gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt; &gt;&gt; It pains me that well-known math terms and even whole protocols get<br>&gt; &gt;&gt; lopped<br>&gt; &gt;&gt; &gt;&gt; off because of vagaries of the English language. New thought<br>&gt; prompted by<br>&gt; &gt;&gt; &gt;&gt; some of these suggestions:<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; There&#39;s a fairly circumscribed number of commonly used mathematical<br>&gt; &gt;&gt; terms<br>&gt; &gt;&gt; &gt;&gt; of art. These describe for the most part functions for which there<br>&gt; are<br>&gt; &gt;&gt; no<br>&gt; &gt;&gt; &gt;&gt; noun/verb pairs. Suppose then, we have a rule:<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; Define these mathematical functions only outside types, as though<br>&gt; they<br>&gt; &gt;&gt; &gt;&gt; were operators. If (as it seems), operators are an acceptable option<br>&gt; for<br>&gt; &gt;&gt; &gt;&gt; Set but for the nomenclature, surely these functions can be<br>&gt; acceptable<br>&gt; &gt;&gt; as<br>&gt; &gt;&gt; &gt;&gt; well. Then you would have:<br>&gt; &gt;&gt; &gt;&gt; union(a, b) // non-mutating<br>&gt; &gt;&gt; &gt;&gt; union(&amp;a, b) // mutating<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; This is unambiguous, terse, conformant to expectations arising from<br>&gt; &gt;&gt; &gt;&gt; familiarity with math, and recognizably English, and you can still<br>&gt; have<br>&gt; &gt;&gt; a<br>&gt; &gt;&gt; &gt;&gt; SetAlgebra protocol if it can ensure these functions exist for<br>&gt; &gt;&gt; conforming<br>&gt; &gt;&gt; &gt;&gt; types as Equatable ensures ==. &quot;Pollution&quot; of the global scope would<br>&gt; be<br>&gt; &gt;&gt; &gt;&gt; limited to commonly used math terms, which should not be coopted for<br>&gt; &gt;&gt; &gt;&gt; another purpose in any case.<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; On Mon, Feb 15, 2016 at 1:17 PM Dave Abrahams via swift-evolution &lt;<br>&gt; &gt;&gt; &gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; on Mon Feb 15 2016, Xiaodi Wu &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt; Agreed that &quot;union&quot; creates an expectation that it&#39;s non-mutating.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt; There&#39;s no real point in pushing back on whether UIs are more or<br>&gt; less<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt; important for Swift than math.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt; Problem is, the moment you name something SetAlgebra, you&#39;ve set<br>&gt; user<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt; expectations that it&#39;s a &#39;math API&#39;. Those ain&#39;t UI terms.<br>&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; Yep.  As I mentioned in<br>&gt; &gt;&gt; &gt;&gt;&gt; &lt;<br>&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;<br>&gt; http://news.gmane.org/find-root.php?message_id=m2pow033r1.fsf%40eno.apple.com<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;,<br>&gt; &gt;&gt; &gt;&gt;&gt; we have a semantic muddle here.  Given where this is all headed, I<br>&gt; am<br>&gt; &gt;&gt; &gt;&gt;&gt; somewhat inclined to retire the SetAlgebra protocol (it only seems<br>&gt; to<br>&gt; &gt;&gt; &gt;&gt;&gt; have 3-4 uses on github), but renaming it could be another viable<br>&gt; &gt;&gt; &gt;&gt;&gt; option.<br>&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt; On Mon, Feb 15, 2016 at 11:25 AM Dave Abrahams via<br>&gt; swift-evolution &lt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; on Mon Feb 15 2016, Maximilian HÃ¼nenberger &lt;<br>&gt; &gt;&gt; swift-evolution at swift.org&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; wrote:<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt; I also prefer (2). Isn&#39;t &quot;union&quot;, &quot;intersection&quot;, ... a &quot;Term<br>&gt; of<br>&gt; &gt;&gt; &gt;&gt;&gt; Art&quot;?<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt; See the guidelines under &quot;Stick to the established meaning&quot;.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt; So we should stick to the mathematical naming.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; My understanding of the rationale for the current direction is<br>&gt; that<br>&gt; &gt;&gt; the<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; domain of building GUI apps is more important than that of math,<br>&gt; so<br>&gt; &gt;&gt; the<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; look and feel of sets should match those of most other (non-math)<br>&gt; &gt;&gt; APIs.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt; Since these terms almost always return a new instance we should<br>&gt; &gt;&gt; have<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt; an obvious mutating version with an &quot;inPlace&quot; suffix.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt; - Maximilian<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; Am 14.02.2016 um 22:37 schrieb Xiaodi Wu via swift-evolution<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; &lt;swift-evolution at swift.org&gt;:<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; From a 10,000-ft view, I&#39;d suggest that the noun/verb rule<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; consistently runs into a problem with mathematical terms.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; In general, mathematical functions don&#39;t have verb forms. You<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; &#39;compute&#39; the reciprocal, or &#39;find&#39; the reciprocal, or &#39;take&#39;<br>&gt; the<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; reciprocal, you don&#39;t &#39;reciprocate&#39; or &#39;reciprocalize&#39;.<br>&gt; Likewise<br>&gt; &gt;&gt; for<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; trigonometric functions, etc. Nor can you really &#39;cross<br>&gt; &gt;&gt; produce&#39;...<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; So consistent is this trend that where two words might be<br>&gt; &gt;&gt; noun/verb<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; counterparts, like intersect/intersection and<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; transform/transformation, common math usage treats both as<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; acceptable nouns.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; In colloquial usage, you might verb the noun, but then by<br>&gt; &gt;&gt; definition<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; the verb and noun become the same. Then, to generate a noun<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; phrase/participle/etc. that looks different from the verb, you<br>&gt; &gt;&gt; have<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; to noun-ify the verbed noun.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; Without an exception for mathematical function names, the only<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; solution to fulfill these new Swift rules are clobbering the<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; well-known math name or not using the math name at all. Indeed<br>&gt; &gt;&gt; all<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; proposed solutions so far come down to one of four options,<br>&gt; &gt;&gt; either<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; applied globally or only to sets for now, punting the rest<br>&gt; down<br>&gt; &gt;&gt; the<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; road:<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; (1) Abandon the rule, making a new one (e.g.: .=)<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; (2) Make an exception to the rule for math function names<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; (3) Generate the least offensive noun-ified verbed nouns<br>&gt; based on<br>&gt; &gt;&gt; &gt;&gt;&gt; math<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; function names<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; (4) Don&#39;t use math function names<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; (1) is off the table, according to the core team. My vote at<br>&gt; this<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; point is for (2), and I see that a few others have voiced that<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; opinion. It&#39;d be nice to get a sense from the core team if<br>&gt; that<br>&gt; &gt;&gt; is<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; even a possibility. (3) has elicited a lot of discussion and<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; visceral reactions. (4) might be workable for sets alone but<br>&gt; &gt;&gt; surely<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; can&#39;t be a generalized solution for all mathematical concepts<br>&gt; to<br>&gt; &gt;&gt; be<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; encountered in Swift.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; On Sun, Feb 14, 2016 at 3:14 PM Tyler Fleming Cloutier via<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; swift-evolution<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; On Feb 14, 2016, at 12:48 PM, Dave Abrahams<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; &lt;dabrahams at apple.com&gt; wrote:<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; on Sun Feb 14 2016, Tyler Fleming Cloutier<br>&gt; &gt;&gt; &gt;&gt;&gt; &lt;cloutiertyler-AT-aol.com&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; wrote:<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; On Feb 14, 2016, at 8:27 AM, Dave Abrahams<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; &lt;dabrahams at apple.com&gt; wrote:<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; on Sat Feb 13 2016, Tyler Fleming Cloutier<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &lt;cloutiertyler-AT-aol.com&gt; wrote:<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; I would, personally, be very careful about discarding the<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; mathematical<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; terms since they are so widely used and understood.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; IMO it&#39;s better to leave them aside than to use them in<br>&gt; &gt;&gt; &gt;&gt;&gt; âcreativeâ<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; ways<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; that might be misleading.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Agreed. Iâm all for that.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; One issue is that itâs going to be hard to search for the<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; operation I<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; want considering I wonât be looking for &quot;func<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; invertingMembershipOfContentsOf(other: Self) -&gt; Selfâ.<br>&gt; Iâm<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; concerned<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; people are going to have to do mental gymnastics to build<br>&gt; &gt;&gt; the<br>&gt; &gt;&gt; &gt;&gt;&gt; map<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; from<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; math term to Swift function every time they want to look<br>&gt; &gt;&gt; for a<br>&gt; &gt;&gt; &gt;&gt;&gt; set<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; operation method. âfunc<br>&gt; &gt;&gt; invertingMembershipOfContentsOf(other:<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; Self)<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; -&gt; Selfâ doesnât exactly seem to fit in the commonly held<br>&gt; &gt;&gt; Venn<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; diagram<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; mental model of set operations. You could always have a<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; documentation<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; comment that specifies the mathematical term so that<br>&gt; people<br>&gt; &gt;&gt; &gt;&gt;&gt; didnât<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; have to double check themselves every time.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; That being said, if the autocomplete issue is not a<br>&gt; concern,<br>&gt; &gt;&gt; &gt;&gt;&gt; Iâm of<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; the opinion that the names Ricardo proposed are short,<br>&gt; &gt;&gt; clear,<br>&gt; &gt;&gt; &gt;&gt;&gt; and<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; are<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; not so hard to fit to my Venn diagram mental model.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; +1<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; However, I tend to think that if there has to be this<br>&gt; much<br>&gt; &gt;&gt; &gt;&gt;&gt; dancing<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; to<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; name a set of fundamental operations, the guidelines<br>&gt; arenât<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; accomplishing their goal.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; I can&#39;t disagree.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; Itâs going to make it that much harder for people do<br>&gt; design<br>&gt; &gt;&gt; &gt;&gt;&gt; their<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; own<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; APIs. I&#39;m having quite a time trying to conform Matttâs<br>&gt; &gt;&gt; Surge<br>&gt; &gt;&gt; &gt;&gt;&gt; API<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; to<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; the guidelines.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; Please explain in detail.  Without details we don&#39;t know<br>&gt; &gt;&gt; what&#39;s<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; wrong<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; with the guidelines.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Ah, I apologize. Iâve gone into detail about this API on<br>&gt; the<br>&gt; &gt;&gt; list<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; before, but I should have included the details here.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Here are my previous posts:<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;<br>&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160118/007560.html<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;<br>&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160118/007560.html<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Basically the issues come down to the following. The<br>&gt; &gt;&gt; Accelerate<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; framework typical operates in a non-mutating way. This<br>&gt; means<br>&gt; &gt;&gt; &gt;&gt;&gt; that my<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; API only has non mutating member functions and I should use<br>&gt; &gt;&gt; the<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; ed/ing<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; rule according to the guidelines to name my methods.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; This is very difficult for some methods. Iâm able to<br>&gt; &gt;&gt; frequently<br>&gt; &gt;&gt; &gt;&gt;&gt; get<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; around the problem for things like âsinâ or âarctanâ by<br>&gt; &gt;&gt; keeping<br>&gt; &gt;&gt; &gt;&gt;&gt; them<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; as global functions, but I canât do that for a number of<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; methods. Consider:<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; remainder<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; dot (returns a scalar, thus there canât be a mutating<br>&gt; &gt;&gt; version, so<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; should I just call it dot? Guidelines donât really comment<br>&gt; on<br>&gt; &gt;&gt; &gt;&gt;&gt; this)<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; mean (same as above)<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; cross<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; reciprocal<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; threshold<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; copysign<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; fastFourierTransform<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; pow (arguably the method version should be called raisedTo)<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; I could force all these to be global functions only, but<br>&gt; these<br>&gt; &gt;&gt; &gt;&gt;&gt; are<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; not<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; as cut and dry as âsinâ or âarctanâ. I feel like Iâd be<br>&gt; &gt;&gt; &gt;&gt;&gt; splitting my<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; API up into two parts just based on the fact that itâs<br>&gt; &gt;&gt; difficult<br>&gt; &gt;&gt; &gt;&gt;&gt; to<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; use the ed/ing rule. That makes it very difficult for<br>&gt; users to<br>&gt; &gt;&gt; &gt;&gt;&gt; find<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; certain functions in my API.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; In this case there are no corresponding mutating operations<br>&gt; &gt;&gt; &gt;&gt;&gt; because<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; of<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; the way Accelerate works, but one could certainly imagine<br>&gt; an<br>&gt; &gt;&gt; API<br>&gt; &gt;&gt; &gt;&gt;&gt; with<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; mutating counterparts. The way I read the guidelines, they<br>&gt; &gt;&gt; seem<br>&gt; &gt;&gt; &gt;&gt;&gt; to<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; imply I should use ed/ing regardless of whether there is a<br>&gt; &gt;&gt; &gt;&gt;&gt; mutating<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; counterpart. Iâd love to hear your thoughts on this.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; As long as the ones without side effects read as noun<br>&gt; phrases<br>&gt; &gt;&gt; and<br>&gt; &gt;&gt; &gt;&gt;&gt; the<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; ones with side-effects read as verb phrases, you&#39;re good.<br>&gt; No<br>&gt; &gt;&gt; &gt;&gt;&gt; ed/ing<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; needed.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; Ah yes, you are very right. Still what would the mutating<br>&gt; &gt;&gt; versions<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; of remainder, fastFourierTransform, or reciprocal be?<br>&gt; &gt;&gt; getRemainder?<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; applyFastFourierTransform? reciprocate? I suppose those<br>&gt; arenât<br>&gt; &gt;&gt; so<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; bad.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; I also suppose cross could become x.crossProduct(with: y) and<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; copysign, x.copyingSign(of: y). Seems a little verbose, but<br>&gt; it<br>&gt; &gt;&gt; does<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; the job.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; Thanks,<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; Tyler<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Tyler<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; Tyler<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Feb 13, 2016, at 9:09 PM, Ricardo Parada via<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hi Dave,<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I would be okay with staying away from the mathematical<br>&gt; &gt;&gt; terms<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; similar to what you are suggesting except that the union<br>&gt; &gt;&gt; can<br>&gt; &gt;&gt; &gt;&gt;&gt; still<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; be made more concise if you use merged / merge for the<br>&gt; base<br>&gt; &gt;&gt; &gt;&gt;&gt; name<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; and<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; shorten the labels to a bare minimum without loosing<br>&gt; &gt;&gt; &gt;&gt;&gt; clarity.  In<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; addition, the merge can have a second parameter with a<br>&gt; &gt;&gt; &gt;&gt;&gt; default to<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; false in order to implement the symmetric difference<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; (a.k.a. exclusive or).  Recall that symmetric<br>&gt; difference is<br>&gt; &gt;&gt; &gt;&gt;&gt; the<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; union of two sets and then removing the intersection (or<br>&gt; &gt;&gt; &gt;&gt;&gt; members<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; in<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; common).  I think it looks perfect (concise and clear).<br>&gt; &gt;&gt; What<br>&gt; &gt;&gt; &gt;&gt;&gt; does<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; everybody else think?<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Non-mutable<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; let union =                    a.merged(with: b)<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; let intersection =             a.members(in: b)<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; let difference =               a.removingMembers(in: b)<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; let symmetricDifference =      a.merged(with: b,<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; removingMembersInCommon: true)<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Mutable (In-Place)<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; a.merge(with: b)               // union in-place<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; a.removeMembers(notIn: b)      // intersect in-place<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; a.removeMembers(in: b)         // difference in-place<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; a.merge(with: b, removeMembersInCommon: true)  //<br>&gt; symmetric<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; difference in-place<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Ricardo Parada<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Feb 13, 2016, at 1:16 PM, Dave Abrahams via<br>&gt; &gt;&gt; &gt;&gt;&gt; swift-evolution<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Fri Feb 12 2016, Ricardo Parada &lt;<br>&gt; &gt;&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hi all,<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I canât make up my mind.  Let me propose two different<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; alternatives<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; that Iâm not sure if they have been considered:<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ALTERNATIVE 1<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Non-mutable (noun-based)<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func union(other: Self) -&gt; Self<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func union(other: Self) -&gt; Self           Assumes<br>&gt; &gt;&gt; union<br>&gt; &gt;&gt; &gt;&gt;&gt; is a<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; noun, i.e. not a verb<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func intersect(other: Self) -&gt; Self<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func intersection(other: Self) -&gt; Self<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func subtract(other: Self) -&gt; Self<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func subtraction(other: Self) -&gt; Self<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func exclusiveOr(other: Self) -&gt; Self<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func symmetricSubtraction(other: Self) -&gt; Self<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Mutable (verb-based)<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func unionInPlace(other: Self)<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func unite(other: Self)<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func intersectInPlace(other: Self)<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func intersect(other: Self)<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func subtractInPlace(other: Self)<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func subtract(other: Self)<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func exclusiveOrInPlace(other: Self)<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func symmetricSubtract(other: Self)<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Comments:<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; With this alternative we keep the union name which I<br>&gt; &gt;&gt; assume<br>&gt; &gt;&gt; &gt;&gt;&gt; is<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; popular.  However, one has to accept unite as a verb<br>&gt; (for<br>&gt; &gt;&gt; &gt;&gt;&gt; the<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; mutable<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; version) as I wanted all the mutable methods use verbs<br>&gt; &gt;&gt; for<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; consistency.  I think unite is acceptable because it<br>&gt; can<br>&gt; &gt;&gt; be<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; found in<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; the dictionary and it is a verb.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Notice that all the non-mutable methods use nouns:<br>&gt; union,<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; intersection, subtraction and symmetricSubtraction.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I understand some may oppose to symmetricSubtraction<br>&gt; &gt;&gt; saying<br>&gt; &gt;&gt; &gt;&gt;&gt; that<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; symmetricSubraction is not as common as &quot;exclusive<br>&gt; or&quot;.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; However,<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; using symmetricSubtraction is consistent with<br>&gt; subtraction<br>&gt; &gt;&gt; &gt;&gt;&gt; and<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; it hints<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; to a variation of the âsubtraction&quot; operation.  We<br>&gt; will<br>&gt; &gt;&gt; get<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; used to it<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; quickly / easily.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; The mutable methods all use verbs:  unite, intersect,<br>&gt; &gt;&gt; &gt;&gt;&gt; subtract<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; and symmetricSubtract.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ALTERNATIVE 2<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Non-mutable<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func union(other: Self) -&gt; Self<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func adding(other: Self) -&gt; Self<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func intersect(other: Self) -&gt; Self<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func intersecting(other: Self) -&gt; Self<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func exclusiveOr(other: Self) -&gt; Self<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func exclusiveOring(other: Self) -&gt; Self<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  func subtract(other: Self) -&gt; Self<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  func removing(other: Self) -&gt; Self<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Mutable<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func unionInPlace(other: Self)<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func add(other: Self)<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func intersectInPlace(other: Self)<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func intersect(other: Self)<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func exclusiveOrInPlace(other: Self)<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func exclusiveOr(other: Self)<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  mutating func subtractInPlace(other: Self)<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +  mutating func remove(other: Self)<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Comments: This alternative gives up on union in favor<br>&gt; or<br>&gt; &gt;&gt; &gt;&gt;&gt; add.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; Many<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; may not like this, that is why I have it as the second<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; alternative.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It brings back exclusiveOr and treats it as a verb.<br>&gt; Some<br>&gt; &gt;&gt; &gt;&gt;&gt; may<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; argue<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; that exclusiveOr is a noun for the &quot;exclusive or&quot;<br>&gt; &gt;&gt; operation.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If we are going to force Set fit the naming<br>&gt; guidelines, I<br>&gt; &gt;&gt; &gt;&gt;&gt; would<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; prefer<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; to stay away from the mathematical terms altogether.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func insertingContentsOf(other: Self) -&gt; Self<br>&gt; &gt;&gt; &gt;&gt;&gt;  //<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; union<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; mutating func insertContentsOf(other)<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func members(in other: Self) -&gt; Self<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;  // intersection<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; mutating func removeMembers(notIn: other)<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func removingMembersAndAddingNonMembers(in other:<br>&gt; Self) -&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; Self<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; // symmetric difference<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; mutating func removeMembersAndAddingNonMembers(in<br>&gt; other:<br>&gt; &gt;&gt; &gt;&gt;&gt; Self)<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func removingMembers(in other: Self) -&gt; Self<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; // subtract<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; mutating func removeMembers(in other: Self)<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If it would help with clarity, we could replace &quot;in&quot;<br>&gt; with<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &quot;foundIn&quot;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; above.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -Dave<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; -Dave<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; --<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; -Dave<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt; _______________________________________________<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt; swift-evolution mailing list<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt; swift-evolution at swift.org<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; --<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; -Dave<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt; _______________________________________________<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt; swift-evolution at swift.org<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; --<br>&gt; &gt;&gt; &gt;&gt;&gt; -Dave<br>&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt; _______________________________________________<br>&gt; &gt;&gt; &gt; swift-evolution mailing list<br>&gt; &gt;&gt; &gt; swift-evolution at swift.org<br>&gt; &gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; --<br>&gt; &gt;&gt; -Dave<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;<br>&gt;<br>&gt; --<br>&gt; -Dave<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160215/3a555f7b/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
