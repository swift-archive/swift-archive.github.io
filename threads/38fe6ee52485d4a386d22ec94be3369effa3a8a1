<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9c0fdc1a3b20ae1f3281550d941b71d3?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>Pj Fechner</string> &lt;pj.fechner at gmail.com&gt;<p>January 19, 2016 at 08:00:00pm</p></header><div class="content"><p>To avoid beating a dead horse, I’ll sum up my sentiments by saying that it<br>seems clear Selectors as they currently exist are a fairly outdated and<br>confusing approach for Objective-C and even more so for Swift.<br></p><p><br>When learning or developing a new paradigm, it’s very easy to bring the<br>baggage of the old philosophy into the new approach. While adding the<br>ability to initialize Selectors with a function/closure is certainly an<br>improvement, (and possibly should be implemented regardless), it also seems<br>to be a very non-Swift solution to the problems Selectors are trying to<br>solve.<br></p><p><br>If Classes like UIGestureRecognizers were being written today without<br>Selectors already in existence, I find it hard to believe they would be<br>created when a function reference or closure/block would be more<br>understandable and reliable in most cases.<br></p><p><br>With that in mind, the more forward thinking and swift-like approach<br>appears to be rewriting or replacing the APIs that use selectors to use<br>newer strategies to accomplish the same thing. There may be edge cases<br>where the dynamism and flexibility of Selectors are needed or desired, but<br>this is by no means the norm and should only be considered on a case by<br>case basis.<br></p><p><br>In Summation:<br></p><p><br></p><p>   - *What is your evaluation of the proposal?*<br>      - Possibly necessary, but it seems to be a workaround, not a solution<br></p><p><br></p><p>   - * Is the problem being addressed significant enough to warrant a<br>   change to Swift?*<br>      - Yes. Whether with this solution or another, it is a serious<br>      oversight of the current platform<br></p><p><br></p><p>   - *Does this proposal fit well with the feel and direction of Swift?*<br>      - Direction, yes. Feel, no.<br></p><p><br></p><p>   - *If you have you used other languages or libraries with a similar<br>   feature, how do you feel that this proposal compares to those?*<br>      - I haven’t used another language that uses a Selector-like approach.<br>      Yet another reason why it should be changed :)<br></p><p><br></p><p>   - How much effort did you put into your review? A glance, a quick<br>   reading, or an in-depth study?<br>      - Roughly 7 out of 10.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160119/38fea8a1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>January 20, 2016 at 11:00:00am</p></header><div class="content"><p>Would using backticks work? If we used them here and in the<br>closure-from-function syntax, it would be somewhat consistent<br>and–hopefully–not terribly ambiguous.<br></p><p>TJ<br></p><p>On Tue, Jan 19, 2016 at 9:20 PM, Pj Fechner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; To avoid beating a dead horse, I’ll sum up my sentiments by saying that it<br>&gt; seems clear Selectors as they currently exist are a fairly outdated and<br>&gt; confusing approach for Objective-C and even more so for Swift.<br>&gt;<br>&gt;<br>&gt; When learning or developing a new paradigm, it’s very easy to bring the<br>&gt; baggage of the old philosophy into the new approach. While adding the<br>&gt; ability to initialize Selectors with a function/closure is certainly an<br>&gt; improvement, (and possibly should be implemented regardless), it also seems<br>&gt; to be a very non-Swift solution to the problems Selectors are trying to<br>&gt; solve.<br>&gt;<br>&gt;<br>&gt; If Classes like UIGestureRecognizers were being written today without<br>&gt; Selectors already in existence, I find it hard to believe they would be<br>&gt; created when a function reference or closure/block would be more<br>&gt; understandable and reliable in most cases.<br>&gt;<br>&gt;<br>&gt; With that in mind, the more forward thinking and swift-like approach<br>&gt; appears to be rewriting or replacing the APIs that use selectors to use<br>&gt; newer strategies to accomplish the same thing. There may be edge cases<br>&gt; where the dynamism and flexibility of Selectors are needed or desired, but<br>&gt; this is by no means the norm and should only be considered on a case by<br>&gt; case basis.<br>&gt;<br>&gt;<br>&gt; In Summation:<br>&gt;<br>&gt;<br>&gt;<br>&gt;    - *What is your evaluation of the proposal?*<br>&gt;       - Possibly necessary, but it seems to be a workaround, not a<br>&gt;       solution<br>&gt;<br>&gt;<br>&gt;<br>&gt;    - * Is the problem being addressed significant enough to warrant a<br>&gt;    change to Swift?*<br>&gt;       - Yes. Whether with this solution or another, it is a serious<br>&gt;       oversight of the current platform<br>&gt;<br>&gt;<br>&gt;<br>&gt;    - *Does this proposal fit well with the feel and direction of Swift?*<br>&gt;       - Direction, yes. Feel, no.<br>&gt;<br>&gt;<br>&gt;<br>&gt;    - *If you have you used other languages or libraries with a similar<br>&gt;    feature, how do you feel that this proposal compares to those?*<br>&gt;       - I haven’t used another language that uses a Selector-like<br>&gt;       approach. Yet another reason why it should be changed :)<br>&gt;<br>&gt;<br>&gt;<br>&gt;    - How much effort did you put into your review? A glance, a quick<br>&gt;    reading, or an in-depth study?<br>&gt;       - Roughly 7 out of 10.<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160120/c2e38e6c/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
