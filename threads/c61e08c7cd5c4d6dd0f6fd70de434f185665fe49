<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Pre-Draft] Nil-coalescing and errors</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>April  8, 2016 at 09:00:00am</p></header><div class="content"><p>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160408/c61efe49/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Pre-Draft] Nil-coalescing and errors</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>April  8, 2016 at 02:00:00am</p></header><div class="content"><p>&gt; I only wonder whether you really want to repeat Error() all over, possibly with `aString` etc. as argument.<br></p><p>`Error()`, no. `SpimsterKitError.invalidWicketField(&quot;a&quot;`), yes, because even if `Int.init(_:)` threw *an* error, it wouldn&#39;t throw *your* error.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Pre-Draft] Nil-coalescing and errors</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>April  8, 2016 at 04:00:00pm</p></header><div class="content"><p>Am 08.04.2016 um 11:59 schrieb Brent Royal-Gordon &lt;brent at architechies.com&gt;:<br></p><p>&gt;&gt; I only wonder whether you really want to repeat Error() all over, possibly with `aString` etc. as argument.<br>&gt; <br>&gt; `Error()`, no. `SpimsterKitError.invalidWicketField(&quot;a&quot;`), yes, because even if `Int.init(_:)` threw *an* error, it wouldn&#39;t throw *your* error.<br></p><p>That&#39;s why I thought that in a real use case that logic would likely be extracted.<br></p><p>-Thorsten<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c031541ed3d92869414857dfef853de?s=50"></div><header><strong>[Pre-Draft] Nil-coalescing and errors</strong> from <string>Yuta Koshizawa</string> &lt;koher at koherent.org&gt;<p>April  9, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; I only wonder whether you really want to repeat Error() all over,<br>&gt; possibly with `aString` etc. as argument.<br></p><p>What I really want is the postfix version of `???` as I wrote in my<br>first post in this thread.<br></p><p>&gt; Besides the proposed infix `???`, I also want the postfix one which<br>&gt; throws a `NilError` (something like `struct NilError: ErrorType {}`).<br>&gt; It is useful to handle multiple `nil`s at once when we are not<br>&gt; interested in the kind of the error.<br></p><p>And also<br></p><p>&gt; I think `???` is too long. Instead, I propose `|?`.<br>&gt; For `foo: Foo?`, `try foo|?` can be read like `Foo` or `nil`. It<br>&gt; separates (`|`) nil (`?`) from the value and return `Foo`.<br>&gt; I think it makes sense.<br></p><p>Then it becomes something like the following.<br></p><p>```<br>do {<br>    let foo: Foo = try foo(<br>        a: Int(aString)|?,<br>        b: Int(bString)|?,<br>        c: Int(cString)|?<br>    )<br>} catch _ {<br>    // Error handling<br>}<br>```<br></p><p>I think the infix version is also useful when we actually want to<br>specify the types of errors.<br></p><p>Swift provides two ways of error handling: optionals and do/try/catch.<br>I think it lacks a way to handle multiple optionals easily in some<br>cases. Someone uses applicative styles for it.<br></p><p>```<br>let foo: Foo? = curry(Foo.init) &lt;^&gt; Int(aString) &lt;*&gt; Int(bString) &lt;*&gt;<br>Int(cString)<br>```<br></p><p>But I think it is unreasonable to expect all programmers to understand<br>and master it. So I want the postfix `???` or `|?`.<br></p><p>-- Yuta<br></p><p><br>2016-04-08 23:47 GMT+09:00 Thorsten Seitz &lt;tseitz42 at icloud.com&gt;:<br>&gt;<br>&gt; Am 08.04.2016 um 11:59 schrieb Brent Royal-Gordon &lt;brent at architechies.com&gt;:<br>&gt;<br>&gt;&gt;&gt; I only wonder whether you really want to repeat Error() all over, possibly with `aString` etc. as argument.<br>&gt;&gt;<br>&gt;&gt; `Error()`, no. `SpimsterKitError.invalidWicketField(&quot;a&quot;`), yes, because even if `Int.init(_:)` threw *an* error, it wouldn&#39;t throw *your* error.<br>&gt;<br>&gt; That&#39;s why I thought that in a real use case that logic would likely be extracted.<br>&gt;<br>&gt; -Thorsten<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Pre-Draft] Nil-coalescing and errors</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>April 10, 2016 at 08:00:00pm</p></header><div class="content"><p>Just FWIW:<br></p><p>&gt; ```<br>&gt; let foo: Foo? = curry(Foo.init) &lt;^&gt; Int(aString) &lt;*&gt; Int(bString) &lt;*&gt;<br>&gt; Int(cString)<br>&gt; ```<br>&gt; <br>&gt; But I think it is unreasonable to expect all programmers to understand<br>&gt; and master it. So I want the postfix `???` or `|?`.<br></p><p>I agree. But I would also say that deserializing from JSON is complex enough of a problem to warrant a domain-specific solution. There’s a ton of them, of course, but for example, with Freddy, it would look something like:<br></p><p>extension Person: JSONDecodable {<br>    init(json j: JSON) throws {<br>        firstName = try j.string(“firstName”)<br>        lastName = try j.string(“lastName”)<br>        age = try j.int(“age”)<br>    }<br>}<br></p><p>let person = try Person(json: json)<br></p><p>Even with the proposed `???`, a domain-specific solution would be arguably better. So I just don’t consider that a compelling use case.<br></p><p>— Radek<br></p><p>&gt; On 09 Apr 2016, at 16:56, Yuta Koshizawa via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; I only wonder whether you really want to repeat Error() all over,<br>&gt;&gt; possibly with `aString` etc. as argument.<br>&gt; <br>&gt; What I really want is the postfix version of `???` as I wrote in my<br>&gt; first post in this thread.<br>&gt; <br>&gt;&gt; Besides the proposed infix `???`, I also want the postfix one which<br>&gt;&gt; throws a `NilError` (something like `struct NilError: ErrorType {}`).<br>&gt;&gt; It is useful to handle multiple `nil`s at once when we are not<br>&gt;&gt; interested in the kind of the error.<br>&gt; <br>&gt; And also<br>&gt; <br>&gt;&gt; I think `???` is too long. Instead, I propose `|?`.<br>&gt;&gt; For `foo: Foo?`, `try foo|?` can be read like `Foo` or `nil`. It<br>&gt;&gt; separates (`|`) nil (`?`) from the value and return `Foo`.<br>&gt;&gt; I think it makes sense.<br>&gt; <br>&gt; Then it becomes something like the following.<br>&gt; <br>&gt; ```<br>&gt; do {<br>&gt;    let foo: Foo = try foo(<br>&gt;        a: Int(aString)|?,<br>&gt;        b: Int(bString)|?,<br>&gt;        c: Int(cString)|?<br>&gt;    )<br>&gt; } catch _ {<br>&gt;    // Error handling<br>&gt; }<br>&gt; ```<br>&gt; <br>&gt; I think the infix version is also useful when we actually want to<br>&gt; specify the types of errors.<br>&gt; <br>&gt; Swift provides two ways of error handling: optionals and do/try/catch.<br>&gt; I think it lacks a way to handle multiple optionals easily in some<br>&gt; cases. Someone uses applicative styles for it.<br>&gt; <br>&gt; ```<br>&gt; let foo: Foo? = curry(Foo.init) &lt;^&gt; Int(aString) &lt;*&gt; Int(bString) &lt;*&gt;<br>&gt; Int(cString)<br>&gt; ```<br>&gt; <br>&gt; But I think it is unreasonable to expect all programmers to understand<br>&gt; and master it. So I want the postfix `???` or `|?`.<br>&gt; <br>&gt; -- Yuta<br>&gt; <br>&gt; <br>&gt; 2016-04-08 23:47 GMT+09:00 Thorsten Seitz &lt;tseitz42 at icloud.com&gt;:<br>&gt;&gt; <br>&gt;&gt; Am 08.04.2016 um 11:59 schrieb Brent Royal-Gordon &lt;brent at architechies.com&gt;:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; I only wonder whether you really want to repeat Error() all over, possibly with `aString` etc. as argument.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; `Error()`, no. `SpimsterKitError.invalidWicketField(&quot;a&quot;`), yes, because even if `Int.init(_:)` threw *an* error, it wouldn&#39;t throw *your* error.<br>&gt;&gt; <br>&gt;&gt; That&#39;s why I thought that in a real use case that logic would likely be extracted.<br>&gt;&gt; <br>&gt;&gt; -Thorsten<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160410/cd01c637/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c031541ed3d92869414857dfef853de?s=50"></div><header><strong>[Pre-Draft] Nil-coalescing and errors</strong> from <string>Yuta Koshizawa</string> &lt;koher at koherent.org&gt;<p>April 12, 2016 at 08:00:00am</p></header><div class="content"><p>Hi.<br></p><p>Decoding a JSON is just an example. As I replied to Thorsten, we can<br>think about various cases we want to unwrap multiple optionals at<br>once.<br></p><p>This is another example (with the notation `|?` and the postfix<br>version I proposed instead of the infix `???`).<br></p><p>```<br>do {<br>  let sum = try Int(aString)|? + Int(bString)|?<br>} catch _ {<br>  // Error handling<br>}<br>```<br></p><p>With optional binding, we need to write something like the following.<br>It needs additional assignments (bindings) to `a` and `b`.<br></p><p>```<br>if let a = Int(aString), b = Int(bString) {<br>  let sum = a + b<br>} else {<br>  // Error handling<br>}<br>```<br></p><p>`Dictionary`&#39;s subscript also returns an optional. Or simply we may<br>have optional values as properties. We have a lot of optional values<br>and cases in which we want to pass their unwrapped values directly to<br>functions. It seems endless to prepare domain-specific solutions for<br>all of them.<br></p><p>-- Yuta<br></p><p>2016-04-11 3:33 GMT+09:00 Radosław Pietruszewski &lt;radexpl at gmail.com&gt;:<br>&gt; Just FWIW:<br>&gt;<br>&gt; ```<br>&gt; let foo: Foo? = curry(Foo.init) &lt;^&gt; Int(aString) &lt;*&gt; Int(bString) &lt;*&gt;<br>&gt; Int(cString)<br>&gt; ```<br>&gt;<br>&gt; But I think it is unreasonable to expect all programmers to understand<br>&gt; and master it. So I want the postfix `???` or `|?`.<br>&gt;<br>&gt;<br>&gt; I agree. But I would also say that deserializing from JSON is complex enough<br>&gt; of a problem to warrant a domain-specific solution. There’s a ton of them,<br>&gt; of course, but for example, with Freddy, it would look something like:<br>&gt;<br>&gt; extension Person: JSONDecodable {<br>&gt;     init(json j: JSON) throws {<br>&gt;         firstName = try j.string(“firstName”)<br>&gt;         lastName = try j.string(“lastName”)<br>&gt;         age = try j.int(“age”)<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; let person = try Person(json: json)<br>&gt;<br>&gt;<br>&gt; Even with the proposed `???`, a domain-specific solution would be arguably<br>&gt; better. So I just don’t consider that a compelling use case.<br>&gt;<br>&gt; — Radek<br>&gt;<br>&gt; On 09 Apr 2016, at 16:56, Yuta Koshizawa via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I only wonder whether you really want to repeat Error() all over,<br>&gt; possibly with `aString` etc. as argument.<br>&gt;<br>&gt;<br>&gt; What I really want is the postfix version of `???` as I wrote in my<br>&gt; first post in this thread.<br>&gt;<br>&gt; Besides the proposed infix `???`, I also want the postfix one which<br>&gt; throws a `NilError` (something like `struct NilError: ErrorType {}`).<br>&gt; It is useful to handle multiple `nil`s at once when we are not<br>&gt; interested in the kind of the error.<br>&gt;<br>&gt;<br>&gt; And also<br>&gt;<br>&gt; I think `???` is too long. Instead, I propose `|?`.<br>&gt; For `foo: Foo?`, `try foo|?` can be read like `Foo` or `nil`. It<br>&gt; separates (`|`) nil (`?`) from the value and return `Foo`.<br>&gt; I think it makes sense.<br>&gt;<br>&gt;<br>&gt; Then it becomes something like the following.<br>&gt;<br>&gt; ```<br>&gt; do {<br>&gt;    let foo: Foo = try foo(<br>&gt;        a: Int(aString)|?,<br>&gt;        b: Int(bString)|?,<br>&gt;        c: Int(cString)|?<br>&gt;    )<br>&gt; } catch _ {<br>&gt;    // Error handling<br>&gt; }<br>&gt; ```<br>&gt;<br>&gt; I think the infix version is also useful when we actually want to<br>&gt; specify the types of errors.<br>&gt;<br>&gt; Swift provides two ways of error handling: optionals and do/try/catch.<br>&gt; I think it lacks a way to handle multiple optionals easily in some<br>&gt; cases. Someone uses applicative styles for it.<br>&gt;<br>&gt; ```<br>&gt; let foo: Foo? = curry(Foo.init) &lt;^&gt; Int(aString) &lt;*&gt; Int(bString) &lt;*&gt;<br>&gt; Int(cString)<br>&gt; ```<br>&gt;<br>&gt; But I think it is unreasonable to expect all programmers to understand<br>&gt; and master it. So I want the postfix `???` or `|?`.<br>&gt;<br>&gt; -- Yuta<br>&gt;<br>&gt;<br>&gt; 2016-04-08 23:47 GMT+09:00 Thorsten Seitz &lt;tseitz42 at icloud.com&gt;:<br>&gt;<br>&gt;<br>&gt; Am 08.04.2016 um 11:59 schrieb Brent Royal-Gordon &lt;brent at architechies.com&gt;:<br>&gt;<br>&gt; I only wonder whether you really want to repeat Error() all over, possibly<br>&gt; with `aString` etc. as argument.<br>&gt;<br>&gt;<br>&gt; `Error()`, no. `SpimsterKitError.invalidWicketField(&quot;a&quot;`), yes, because even<br>&gt; if `Int.init(_:)` threw *an* error, it wouldn&#39;t throw *your* error.<br>&gt;<br>&gt;<br>&gt; That&#39;s why I thought that in a real use case that logic would likely be<br>&gt; extracted.<br>&gt;<br>&gt; -Thorsten<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Pre-Draft] Nil-coalescing and errors</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>April 16, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; Am 12.04.2016 um 01:01 schrieb Yuta Koshizawa &lt;koher at koherent.org&gt;:<br>&gt; <br>&gt; Hi.<br>&gt; <br>&gt; Decoding a JSON is just an example. As I replied to Thorsten, we can<br>&gt; think about various cases we want to unwrap multiple optionals at<br>&gt; once.<br>&gt; <br>&gt; This is another example (with the notation `|?` and the postfix<br>&gt; version I proposed instead of the infix `???`).<br>&gt; <br>&gt; ```<br>&gt; do {<br>&gt;  let sum = try Int(aString)|? + Int(bString)|?<br>&gt; } catch _ {<br>&gt;  // Error handling<br>&gt; }<br>&gt; ```<br>&gt; <br>&gt; With optional binding, we need to write something like the following.<br>&gt; It needs additional assignments (bindings) to `a` and `b`.<br>&gt; <br>&gt; ```<br>&gt; if let a = Int(aString), b = Int(bString) {<br>&gt;  let sum = a + b<br>&gt; } else {<br>&gt;  // Error handling<br>&gt; }<br>&gt; ```<br></p><p>Actually I find this much more readable than the version above which mixes error handling (|?) and the business logic (a + b), making the business logic more difficult to understand. Using meaningful names instead of `a` and `b` will increase readability even more.<br></p><p>-Thorsten<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
