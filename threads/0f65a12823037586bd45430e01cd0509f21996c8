<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>3.0 if-var workaround construction question</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>December 17, 2015 at 11:00:00am</p></header><div class="content"><p>My new linter picked up the following as a problem for Swift 3.0, because of my interpretation of the rules in  https://github.com/apple/swift-evolution/blob/master/proposals/0003-remove-var-parameters-patterns.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0003-remove-var-parameters-patterns.md&gt;<br></p><p>    if var testStream = OutputStream(path: aPath) {<br>        print(&quot;Testing custom output&quot;, toStream: &amp;testStream)<br>        print(&quot;Hello &quot;, terminator: &quot;&quot;, toStream: &amp;testStream)<br>        print(&quot;World&quot;, toStream: &amp;testStream)<br>        print(&quot;Output sent to \(testStream.path)&quot;)<br>    } else {<br>        print(&quot;Failed to create custom output&quot;)<br>    }<br></p><p>Am I right in assuming this construction will not compile in Swift 3.0? And if so, how should I best recommend re-configuration. I assume the preferred route would be either:<br></p><p>    if let outputStream = OutputStream(path: aPath) {<br>        var testStream = outputStream<br>        print(&quot;Testing custom output&quot;, toStream: &amp;testStream)<br>        print(&quot;Hello &quot;, terminator: &quot;&quot;, toStream: &amp;testStream)<br>        print(&quot;World&quot;, toStream: &amp;testStream)<br>        print(&quot;Output sent to \(testStream.path)&quot;)<br>    } else {<br>        print(&quot;Failed to create custom output&quot;)<br>    }<br></p><p>Or using shadowing to mimics the &quot;if let x = x&quot; pattern that has become conventional:<br></p><p>    if let outputStream = OutputStream(path: aPath) {<br>        var outputStream = outputStream<br>        print(&quot;Testing custom output&quot;, toStream: &amp;outputStream)<br>        print(&quot;Hello &quot;, terminator: &quot;&quot;, toStream: &amp;outputStream)<br>        print(&quot;World&quot;, toStream: &amp;outputStream)<br>        print(&quot;Output sent to \(outputStream.path)&quot;)<br>    } else {<br>        print(&quot;Failed to create custom output&quot;)<br>    }<br></p><p>Thanks in advance for insight.<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151217/0f6596c8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>3.0 if-var workaround construction question</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December 17, 2015 at 10:00:00am</p></header><div class="content"><p>Yeah, declaring the `var` immediately inside the `if` block is equivalent to the deprecated `if var` form.<br></p><p>-Joe<br></p><p>&gt; On Dec 17, 2015, at 10:32 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; My new linter picked up the following as a problem for Swift 3.0, because of my interpretation of the rules in  https://github.com/apple/swift-evolution/blob/master/proposals/0003-remove-var-parameters-patterns.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0003-remove-var-parameters-patterns.md&gt;<br>&gt; <br>&gt;     if var testStream = OutputStream(path: aPath) {<br>&gt;         print(&quot;Testing custom output&quot;, toStream: &amp;testStream)<br>&gt;         print(&quot;Hello &quot;, terminator: &quot;&quot;, toStream: &amp;testStream)<br>&gt;         print(&quot;World&quot;, toStream: &amp;testStream)<br>&gt;         print(&quot;Output sent to \(testStream.path)&quot;)<br>&gt;     } else {<br>&gt;         print(&quot;Failed to create custom output&quot;)<br>&gt;     }<br>&gt; <br>&gt; Am I right in assuming this construction will not compile in Swift 3.0? And if so, how should I best recommend re-configuration. I assume the preferred route would be either:<br>&gt; <br>&gt;     if let outputStream = OutputStream(path: aPath) {<br>&gt;         var testStream = outputStream<br>&gt;         print(&quot;Testing custom output&quot;, toStream: &amp;testStream)<br>&gt;         print(&quot;Hello &quot;, terminator: &quot;&quot;, toStream: &amp;testStream)<br>&gt;         print(&quot;World&quot;, toStream: &amp;testStream)<br>&gt;         print(&quot;Output sent to \(testStream.path)&quot;)<br>&gt;     } else {<br>&gt;         print(&quot;Failed to create custom output&quot;)<br>&gt;     }<br>&gt; <br>&gt; Or using shadowing to mimics the &quot;if let x = x&quot; pattern that has become conventional:<br>&gt; <br>&gt;     if let outputStream = OutputStream(path: aPath) {<br>&gt;         var outputStream = outputStream<br>&gt;         print(&quot;Testing custom output&quot;, toStream: &amp;outputStream)<br>&gt;         print(&quot;Hello &quot;, terminator: &quot;&quot;, toStream: &amp;outputStream)<br>&gt;         print(&quot;World&quot;, toStream: &amp;outputStream)<br>&gt;         print(&quot;Output sent to \(outputStream.path)&quot;)<br>&gt;     } else {<br>&gt;         print(&quot;Failed to create custom output&quot;)<br>&gt;     }<br>&gt; <br>&gt; Thanks in advance for insight.<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151217/72aa6f9f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>3.0 if-var workaround construction question</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>December 17, 2015 at 11:00:00am</p></header><div class="content"><p>Thatâ€™s a bummer. :(<br></p><p>&gt; On Dec 17, 2015, at 10:35 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Yeah, declaring the `var` immediately inside the `if` block is equivalent to the deprecated `if var` form.<br>&gt; <br>&gt; -Joe<br>&gt; <br>&gt;&gt; On Dec 17, 2015, at 10:32 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; My new linter picked up the following as a problem for Swift 3.0, because of my interpretation of the rules in  https://github.com/apple/swift-evolution/blob/master/proposals/0003-remove-var-parameters-patterns.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0003-remove-var-parameters-patterns.md&gt;<br>&gt;&gt; <br>&gt;&gt;     if var testStream = OutputStream(path: aPath) {<br>&gt;&gt;         print(&quot;Testing custom output&quot;, toStream: &amp;testStream)<br>&gt;&gt;         print(&quot;Hello &quot;, terminator: &quot;&quot;, toStream: &amp;testStream)<br>&gt;&gt;         print(&quot;World&quot;, toStream: &amp;testStream)<br>&gt;&gt;         print(&quot;Output sent to \(testStream.path)&quot;)<br>&gt;&gt;     } else {<br>&gt;&gt;         print(&quot;Failed to create custom output&quot;)<br>&gt;&gt;     }<br>&gt;&gt; <br>&gt;&gt; Am I right in assuming this construction will not compile in Swift 3.0? And if so, how should I best recommend re-configuration. I assume the preferred route would be either:<br>&gt;&gt; <br>&gt;&gt;     if let outputStream = OutputStream(path: aPath) {<br>&gt;&gt;         var testStream = outputStream<br>&gt;&gt;         print(&quot;Testing custom output&quot;, toStream: &amp;testStream)<br>&gt;&gt;         print(&quot;Hello &quot;, terminator: &quot;&quot;, toStream: &amp;testStream)<br>&gt;&gt;         print(&quot;World&quot;, toStream: &amp;testStream)<br>&gt;&gt;         print(&quot;Output sent to \(testStream.path)&quot;)<br>&gt;&gt;     } else {<br>&gt;&gt;         print(&quot;Failed to create custom output&quot;)<br>&gt;&gt;     }<br>&gt;&gt; <br>&gt;&gt; Or using shadowing to mimics the &quot;if let x = x&quot; pattern that has become conventional:<br>&gt;&gt; <br>&gt;&gt;     if let outputStream = OutputStream(path: aPath) {<br>&gt;&gt;         var outputStream = outputStream<br>&gt;&gt;         print(&quot;Testing custom output&quot;, toStream: &amp;outputStream)<br>&gt;&gt;         print(&quot;Hello &quot;, terminator: &quot;&quot;, toStream: &amp;outputStream)<br>&gt;&gt;         print(&quot;World&quot;, toStream: &amp;outputStream)<br>&gt;&gt;         print(&quot;Output sent to \(outputStream.path)&quot;)<br>&gt;&gt;     } else {<br>&gt;&gt;         print(&quot;Failed to create custom output&quot;)<br>&gt;&gt;     }<br>&gt;&gt; <br>&gt;&gt; Thanks in advance for insight.<br>&gt;&gt; <br>&gt;&gt; -- E<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151217/f81a1ad2/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>3.0 if-var workaround construction question</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>December 18, 2015 at 05:00:00am</p></header><div class="content"><p>&gt;     if var testStream = OutputStream(path: aPath) {<br>&gt;         print(&quot;Testing custom output&quot;, toStream: &amp;testStream)<br></p><p>What sticks out to me here is, why is OutputStream a value type at all? Does it have some sensible copying behavior? It looks like an OutputStream more or less represents an open file, which seems like a perfect use case for a reference type.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>3.0 if-var workaround construction question</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>December 18, 2015 at 05:00:00pm</p></header><div class="content"><p>&gt; On Dec 18, 2015, at 5:53 AM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt;    if var testStream = OutputStream(path: aPath) {<br>&gt;&gt;        print(&quot;Testing custom output&quot;, toStream: &amp;testStream)<br>&gt; <br>&gt; What sticks out to me here is, why is OutputStream a value type at all? Does it have some sensible copying behavior? It looks like an OutputStream more or less represents an open file, which seems like a perfect use case for a reference type.<br></p><p>One reason is that we wanted to be able to use a String as an OutputStream.<br></p><p>-Dave<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
