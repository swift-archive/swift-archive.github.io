<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e18859caca1afb014ad58590415b638a?s=50"></div><header><strong>Proposal: Extend CG(Rect)Geometry with center methods</strong> from <string>D. Felipe Torres</string> &lt;warorface at gmail.com&gt;<p>December 10, 2015 at 03:00:00pm</p></header><div class="content"><p>One of the task that is performed often is center a frame with respect to<br>it&#39;s parent.<br>The code for this is short and simple:<br></p><p>rect.origin.x = (rect.width-parent.width)/2 // or...<br>rect.origin.y = (rect.height-parent.height)/2<br></p><p>## Current Problems<br></p><p>- It is very easy to get it wrong and confuse X or Y and their length<br>associations.<br>- Because this code is often found in a layout method, several other rect<br>variables may be defined in the scope which makes it easier to mistake one<br>variable with another if their names are close (and you are used to<br>autocomplete)<br>- And finally but most importantly, while the equation here is simple, one<br>must parse it and understand it and is not a very swifty approach.<br></p><p>##Proposed Additions<br></p><p>2 (actually 4) extensions in CGGeometry to CGRect:<br></p><p>extension CGRect {<br>      public func centerX(parentRect: CGRect) -&gt; CGRect<br>      public mutating func centerXInPlace(parentRect: CGRect)<br>      public fun centerY(parentRect: CGRect) -&gt; CGRect<br>      public mutating func centerYInPlace(parentRect: CGRect)<br>}<br></p><p>This extension allows very easily (and verbally) center a rect in respect<br>to a parent.<br></p><p>I&#39;m pretty sure there are other pretty useful extensions that can be added<br>to CGGeometry as well but this one I think is basic and pretty important.<br></p><p>-- <br>++++++++++++++++++++++++++<br>Diego Torres.<br>Web: dtorres.me<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/5a9f86d7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Proposal: Extend CG(Rect)Geometry with center methods</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>December 10, 2015 at 10:00:00pm</p></header><div class="content"><p>Would it make sense to achieve the same thing by giving midX and midY<br>setters (they currently only have getters)?<br></p><p>I&#39;m don&#39;t think I like the idea of tying down any CGRect extensions to a<br>&quot;parent&quot; rect, but saying &quot;rect.midX = parent.midX&quot; is pretty simple &amp;<br>clear.<br></p><p>Jacob<br></p><p>On Thu, Dec 10, 2015 at 6:17 AM, D. Felipe Torres via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; One of the task that is performed often is center a frame with respect to<br>&gt; it&#39;s parent.<br>&gt; The code for this is short and simple:<br>&gt;<br>&gt; rect.origin.x = (rect.width-parent.width)/2 // or...<br>&gt; rect.origin.y = (rect.height-parent.height)/2<br>&gt;<br>&gt; ## Current Problems<br>&gt;<br>&gt; - It is very easy to get it wrong and confuse X or Y and their length<br>&gt; associations.<br>&gt; - Because this code is often found in a layout method, several other rect<br>&gt; variables may be defined in the scope which makes it easier to mistake one<br>&gt; variable with another if their names are close (and you are used to<br>&gt; autocomplete)<br>&gt; - And finally but most importantly, while the equation here is simple, one<br>&gt; must parse it and understand it and is not a very swifty approach.<br>&gt;<br>&gt; ##Proposed Additions<br>&gt;<br>&gt; 2 (actually 4) extensions in CGGeometry to CGRect:<br>&gt;<br>&gt; extension CGRect {<br>&gt;       public func centerX(parentRect: CGRect) -&gt; CGRect<br>&gt;       public mutating func centerXInPlace(parentRect: CGRect)<br>&gt;       public fun centerY(parentRect: CGRect) -&gt; CGRect<br>&gt;       public mutating func centerYInPlace(parentRect: CGRect)<br>&gt; }<br>&gt;<br>&gt; This extension allows very easily (and verbally) center a rect in respect<br>&gt; to a parent.<br>&gt;<br>&gt; I&#39;m pretty sure there are other pretty useful extensions that can be added<br>&gt; to CGGeometry as well but this one I think is basic and pretty important.<br>&gt;<br>&gt; --<br>&gt; ++++++++++++++++++++++++++<br>&gt; Diego Torres.<br>&gt; Web: dtorres.me<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/c9422366/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e18859caca1afb014ad58590415b638a?s=50"></div><header><strong>Proposal: Extend CG(Rect)Geometry with center methods</strong> from <string>D. Felipe Torres</string> &lt;warorface at gmail.com&gt;<p>December 11, 2015 at 10:00:00pm</p></header><div class="content"><p>Using the mid properties wouldn&#39;t help much as they are the middle of the<br>bounds (origin + length/2) and because it&#39;s a derived value from two<br>different structures, its not clear which structure you want to modify.<br></p><p>Either way, after thinking more about it, there is too much ambiguity to<br>the details of this. The intent is not always clear and looking into the<br>other functions, they all stand on their own. A CGRect doesn&#39;t have any<br>sense of hierarchy.<br></p><p>It only appears when you have layers/views (and those do have a way of<br>setting the center because the relationship/hierarchy is well defined).<br></p><p>I don&#39;t see any more reason to pursue this proposal.<br></p><p><br>On Fri, Dec 11, 2015 at 7:29 AM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;<br>wrote:<br></p><p>&gt; Would it make sense to achieve the same thing by giving midX and midY<br>&gt; setters (they currently only have getters)?<br>&gt;<br>&gt; I&#39;m don&#39;t think I like the idea of tying down any CGRect extensions to a<br>&gt; &quot;parent&quot; rect, but saying &quot;rect.midX = parent.midX&quot; is pretty simple &amp;<br>&gt; clear.<br>&gt;<br>&gt; Jacob<br>&gt;<br>&gt; On Thu, Dec 10, 2015 at 6:17 AM, D. Felipe Torres via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; One of the task that is performed often is center a frame with respect to<br>&gt;&gt; it&#39;s parent.<br>&gt;&gt; The code for this is short and simple:<br>&gt;&gt;<br>&gt;&gt; rect.origin.x = (rect.width-parent.width)/2 // or...<br>&gt;&gt; rect.origin.y = (rect.height-parent.height)/2<br>&gt;&gt;<br>&gt;&gt; ## Current Problems<br>&gt;&gt;<br>&gt;&gt; - It is very easy to get it wrong and confuse X or Y and their length<br>&gt;&gt; associations.<br>&gt;&gt; - Because this code is often found in a layout method, several other rect<br>&gt;&gt; variables may be defined in the scope which makes it easier to mistake one<br>&gt;&gt; variable with another if their names are close (and you are used to<br>&gt;&gt; autocomplete)<br>&gt;&gt; - And finally but most importantly, while the equation here is simple,<br>&gt;&gt; one must parse it and understand it and is not a very swifty approach.<br>&gt;&gt;<br>&gt;&gt; ##Proposed Additions<br>&gt;&gt;<br>&gt;&gt; 2 (actually 4) extensions in CGGeometry to CGRect:<br>&gt;&gt;<br>&gt;&gt; extension CGRect {<br>&gt;&gt;       public func centerX(parentRect: CGRect) -&gt; CGRect<br>&gt;&gt;       public mutating func centerXInPlace(parentRect: CGRect)<br>&gt;&gt;       public fun centerY(parentRect: CGRect) -&gt; CGRect<br>&gt;&gt;       public mutating func centerYInPlace(parentRect: CGRect)<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; This extension allows very easily (and verbally) center a rect in respect<br>&gt;&gt; to a parent.<br>&gt;&gt;<br>&gt;&gt; I&#39;m pretty sure there are other pretty useful extensions that can be<br>&gt;&gt; added to CGGeometry as well but this one I think is basic and pretty<br>&gt;&gt; important.<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; ++++++++++++++++++++++++++<br>&gt;&gt; Diego Torres.<br>&gt;&gt; Web: dtorres.me<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br></p><p><br>-- <br>++++++++++++++++++++++++++<br>Diego Torres.<br>Phone (Mobile Germany): +49 157 30070985<br>Phone (Landline Chile): +56 2 29790978<br>Web: dtorres.me<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151211/354611f7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Proposal: Extend CG(Rect)Geometry with center methods</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>December 13, 2015 at 01:00:00pm</p></header><div class="content"><p>I still think it might be valuable to pursue setters for all of the<br>currently-read-only convenience properties (minX, midX, maxX, minY, midY,<br>maxY).<br></p><p>Jacob<br></p><p>On Fri, Dec 11, 2015 at 1:17 PM, D. Felipe Torres &lt;warorface at gmail.com&gt;<br>wrote:<br></p><p>&gt; Using the mid properties wouldn&#39;t help much as they are the middle of the<br>&gt; bounds (origin + length/2) and because it&#39;s a derived value from two<br>&gt; different structures, its not clear which structure you want to modify.<br>&gt;<br>&gt; Either way, after thinking more about it, there is too much ambiguity to<br>&gt; the details of this. The intent is not always clear and looking into the<br>&gt; other functions, they all stand on their own. A CGRect doesn&#39;t have any<br>&gt; sense of hierarchy.<br>&gt;<br>&gt; It only appears when you have layers/views (and those do have a way of<br>&gt; setting the center because the relationship/hierarchy is well defined).<br>&gt;<br>&gt; I don&#39;t see any more reason to pursue this proposal.<br>&gt;<br>&gt;<br>&gt; On Fri, Dec 11, 2015 at 7:29 AM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; Would it make sense to achieve the same thing by giving midX and midY<br>&gt;&gt; setters (they currently only have getters)?<br>&gt;&gt;<br>&gt;&gt; I&#39;m don&#39;t think I like the idea of tying down any CGRect extensions to a<br>&gt;&gt; &quot;parent&quot; rect, but saying &quot;rect.midX = parent.midX&quot; is pretty simple &amp;<br>&gt;&gt; clear.<br>&gt;&gt;<br>&gt;&gt; Jacob<br>&gt;&gt;<br>&gt;&gt; On Thu, Dec 10, 2015 at 6:17 AM, D. Felipe Torres via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; One of the task that is performed often is center a frame with respect<br>&gt;&gt;&gt; to it&#39;s parent.<br>&gt;&gt;&gt; The code for this is short and simple:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; rect.origin.x = (rect.width-parent.width)/2 // or...<br>&gt;&gt;&gt; rect.origin.y = (rect.height-parent.height)/2<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; ## Current Problems<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; - It is very easy to get it wrong and confuse X or Y and their length<br>&gt;&gt;&gt; associations.<br>&gt;&gt;&gt; - Because this code is often found in a layout method, several other<br>&gt;&gt;&gt; rect variables may be defined in the scope which makes it easier to mistake<br>&gt;&gt;&gt; one variable with another if their names are close (and you are used to<br>&gt;&gt;&gt; autocomplete)<br>&gt;&gt;&gt; - And finally but most importantly, while the equation here is simple,<br>&gt;&gt;&gt; one must parse it and understand it and is not a very swifty approach.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; ##Proposed Additions<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 2 (actually 4) extensions in CGGeometry to CGRect:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; extension CGRect {<br>&gt;&gt;&gt;       public func centerX(parentRect: CGRect) -&gt; CGRect<br>&gt;&gt;&gt;       public mutating func centerXInPlace(parentRect: CGRect)<br>&gt;&gt;&gt;       public fun centerY(parentRect: CGRect) -&gt; CGRect<br>&gt;&gt;&gt;       public mutating func centerYInPlace(parentRect: CGRect)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; This extension allows very easily (and verbally) center a rect in<br>&gt;&gt;&gt; respect to a parent.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I&#39;m pretty sure there are other pretty useful extensions that can be<br>&gt;&gt;&gt; added to CGGeometry as well but this one I think is basic and pretty<br>&gt;&gt;&gt; important.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; ++++++++++++++++++++++++++<br>&gt;&gt;&gt; Diego Torres.<br>&gt;&gt;&gt; Web: dtorres.me<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; ++++++++++++++++++++++++++<br>&gt; Diego Torres.<br>&gt; Phone (Mobile Germany): +49 157 30070985<br>&gt; Phone (Landline Chile): +56 2 29790978<br>&gt; Web: dtorres.me<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/4194fad4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d47baf3a0f80c9fd13ece9c4b87c7fce?s=50"></div><header><strong>Proposal: Extend CG(Rect)Geometry with center methods</strong> from <string>Marc Knaup</string> &lt;marc at knaup.koeln&gt;<p>December 13, 2015 at 11:00:00pm</p></header><div class="content"><p>I&#39;m fine with them having no setters.<br>I&#39;m not fine with that we cannot add them through extensions.<br></p><p>For example I&#39;d love to add a setter for the properties .width and .height.<br>But for now Swift does not allow adding a setter to an existing read-only<br>property through extension.<br></p><p>We can shadow the whole property be redefining it in an extension.<br>Unfortunately this breaks when using the (public) extension from another<br>module due to ambiguity. Swift doesn&#39;t know what property it should use:<br>the original one or the one from the extension.<br>https://github.com/fluidsonic/JetPack/blob/a3c321770854e35e886f1e06915ae86f782164b9/Sources/extensions/CoreGraphics/CGRect.swift#L215<br></p><p><br></p><p>On Sun, Dec 13, 2015 at 10:55 PM, Jacob Bandes-Storch via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I still think it might be valuable to pursue setters for all of the<br>&gt; currently-read-only convenience properties (minX, midX, maxX, minY, midY,<br>&gt; maxY).<br>&gt;<br>&gt; Jacob<br>&gt;<br>&gt; On Fri, Dec 11, 2015 at 1:17 PM, D. Felipe Torres &lt;warorface at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; Using the mid properties wouldn&#39;t help much as they are the middle of the<br>&gt;&gt; bounds (origin + length/2) and because it&#39;s a derived value from two<br>&gt;&gt; different structures, its not clear which structure you want to modify.<br>&gt;&gt;<br>&gt;&gt; Either way, after thinking more about it, there is too much ambiguity to<br>&gt;&gt; the details of this. The intent is not always clear and looking into the<br>&gt;&gt; other functions, they all stand on their own. A CGRect doesn&#39;t have any<br>&gt;&gt; sense of hierarchy.<br>&gt;&gt;<br>&gt;&gt; It only appears when you have layers/views (and those do have a way of<br>&gt;&gt; setting the center because the relationship/hierarchy is well defined).<br>&gt;&gt;<br>&gt;&gt; I don&#39;t see any more reason to pursue this proposal.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Fri, Dec 11, 2015 at 7:29 AM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Would it make sense to achieve the same thing by giving midX and midY<br>&gt;&gt;&gt; setters (they currently only have getters)?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I&#39;m don&#39;t think I like the idea of tying down any CGRect extensions to a<br>&gt;&gt;&gt; &quot;parent&quot; rect, but saying &quot;rect.midX = parent.midX&quot; is pretty simple &amp;<br>&gt;&gt;&gt; clear.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Jacob<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Thu, Dec 10, 2015 at 6:17 AM, D. Felipe Torres via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; One of the task that is performed often is center a frame with respect<br>&gt;&gt;&gt;&gt; to it&#39;s parent.<br>&gt;&gt;&gt;&gt; The code for this is short and simple:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; rect.origin.x = (rect.width-parent.width)/2 // or...<br>&gt;&gt;&gt;&gt; rect.origin.y = (rect.height-parent.height)/2<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; ## Current Problems<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; - It is very easy to get it wrong and confuse X or Y and their length<br>&gt;&gt;&gt;&gt; associations.<br>&gt;&gt;&gt;&gt; - Because this code is often found in a layout method, several other<br>&gt;&gt;&gt;&gt; rect variables may be defined in the scope which makes it easier to mistake<br>&gt;&gt;&gt;&gt; one variable with another if their names are close (and you are used to<br>&gt;&gt;&gt;&gt; autocomplete)<br>&gt;&gt;&gt;&gt; - And finally but most importantly, while the equation here is simple,<br>&gt;&gt;&gt;&gt; one must parse it and understand it and is not a very swifty approach.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; ##Proposed Additions<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 2 (actually 4) extensions in CGGeometry to CGRect:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; extension CGRect {<br>&gt;&gt;&gt;&gt;       public func centerX(parentRect: CGRect) -&gt; CGRect<br>&gt;&gt;&gt;&gt;       public mutating func centerXInPlace(parentRect: CGRect)<br>&gt;&gt;&gt;&gt;       public fun centerY(parentRect: CGRect) -&gt; CGRect<br>&gt;&gt;&gt;&gt;       public mutating func centerYInPlace(parentRect: CGRect)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; This extension allows very easily (and verbally) center a rect in<br>&gt;&gt;&gt;&gt; respect to a parent.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I&#39;m pretty sure there are other pretty useful extensions that can be<br>&gt;&gt;&gt;&gt; added to CGGeometry as well but this one I think is basic and pretty<br>&gt;&gt;&gt;&gt; important.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt; ++++++++++++++++++++++++++<br>&gt;&gt;&gt;&gt; Diego Torres.<br>&gt;&gt;&gt;&gt; Web: dtorres.me<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; ++++++++++++++++++++++++++<br>&gt;&gt; Diego Torres.<br>&gt;&gt; Phone (Mobile Germany): +49 157 30070985<br>&gt;&gt; Phone (Landline Chile): +56 2 29790978<br>&gt;&gt; Web: dtorres.me<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/a5e02672/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e18859caca1afb014ad58590415b638a?s=50"></div><header><strong>Proposal: Extend CG(Rect)Geometry with center methods</strong> from <string>D. Felipe Torres</string> &lt;warorface at gmail.com&gt;<p>December 15, 2015 at 12:00:00pm</p></header><div class="content"><p>The problem with making those settable is the ambiguity of it.<br></p><p>Say you increase the value at maxY, should the length or origin.y be<br>increased? should they share the modification and increase both buy half?<br></p><p>It is not clear the intention here.<br></p><p>And then, as David said, this is CoreGraphics API which has to be suggested<br>through Radars and we all know how likely our chances are there.<br></p><p>On Sun, Dec 13, 2015 at 10:55 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;<br>wrote:<br></p><p>&gt; I still think it might be valuable to pursue setters for all of the<br>&gt; currently-read-only convenience properties (minX, midX, maxX, minY, midY,<br>&gt; maxY).<br>&gt;<br>&gt; Jacob<br>&gt;<br>&gt; On Fri, Dec 11, 2015 at 1:17 PM, D. Felipe Torres &lt;warorface at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; Using the mid properties wouldn&#39;t help much as they are the middle of the<br>&gt;&gt; bounds (origin + length/2) and because it&#39;s a derived value from two<br>&gt;&gt; different structures, its not clear which structure you want to modify.<br>&gt;&gt;<br>&gt;&gt; Either way, after thinking more about it, there is too much ambiguity to<br>&gt;&gt; the details of this. The intent is not always clear and looking into the<br>&gt;&gt; other functions, they all stand on their own. A CGRect doesn&#39;t have any<br>&gt;&gt; sense of hierarchy.<br>&gt;&gt;<br>&gt;&gt; It only appears when you have layers/views (and those do have a way of<br>&gt;&gt; setting the center because the relationship/hierarchy is well defined).<br>&gt;&gt;<br>&gt;&gt; I don&#39;t see any more reason to pursue this proposal.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Fri, Dec 11, 2015 at 7:29 AM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Would it make sense to achieve the same thing by giving midX and midY<br>&gt;&gt;&gt; setters (they currently only have getters)?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I&#39;m don&#39;t think I like the idea of tying down any CGRect extensions to a<br>&gt;&gt;&gt; &quot;parent&quot; rect, but saying &quot;rect.midX = parent.midX&quot; is pretty simple &amp;<br>&gt;&gt;&gt; clear.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Jacob<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Thu, Dec 10, 2015 at 6:17 AM, D. Felipe Torres via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; One of the task that is performed often is center a frame with respect<br>&gt;&gt;&gt;&gt; to it&#39;s parent.<br>&gt;&gt;&gt;&gt; The code for this is short and simple:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; rect.origin.x = (rect.width-parent.width)/2 // or...<br>&gt;&gt;&gt;&gt; rect.origin.y = (rect.height-parent.height)/2<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; ## Current Problems<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; - It is very easy to get it wrong and confuse X or Y and their length<br>&gt;&gt;&gt;&gt; associations.<br>&gt;&gt;&gt;&gt; - Because this code is often found in a layout method, several other<br>&gt;&gt;&gt;&gt; rect variables may be defined in the scope which makes it easier to mistake<br>&gt;&gt;&gt;&gt; one variable with another if their names are close (and you are used to<br>&gt;&gt;&gt;&gt; autocomplete)<br>&gt;&gt;&gt;&gt; - And finally but most importantly, while the equation here is simple,<br>&gt;&gt;&gt;&gt; one must parse it and understand it and is not a very swifty approach.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; ##Proposed Additions<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 2 (actually 4) extensions in CGGeometry to CGRect:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; extension CGRect {<br>&gt;&gt;&gt;&gt;       public func centerX(parentRect: CGRect) -&gt; CGRect<br>&gt;&gt;&gt;&gt;       public mutating func centerXInPlace(parentRect: CGRect)<br>&gt;&gt;&gt;&gt;       public fun centerY(parentRect: CGRect) -&gt; CGRect<br>&gt;&gt;&gt;&gt;       public mutating func centerYInPlace(parentRect: CGRect)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; This extension allows very easily (and verbally) center a rect in<br>&gt;&gt;&gt;&gt; respect to a parent.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I&#39;m pretty sure there are other pretty useful extensions that can be<br>&gt;&gt;&gt;&gt; added to CGGeometry as well but this one I think is basic and pretty<br>&gt;&gt;&gt;&gt; important.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt; ++++++++++++++++++++++++++<br>&gt;&gt;&gt;&gt; Diego Torres.<br>&gt;&gt;&gt;&gt; Web: dtorres.me<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; ++++++++++++++++++++++++++<br>&gt;&gt; Diego Torres.<br>&gt;&gt; Phone (Mobile Germany): +49 157 30070985<br>&gt;&gt; Phone (Landline Chile): +56 2 29790978<br>&gt;&gt; Web: dtorres.me<br>&gt;&gt;<br>&gt;<br>&gt;<br></p><p><br>-- <br>++++++++++++++++++++++++++<br>Diego Torres.<br>Phone (Mobile Germany): +49 157 30070985<br>Phone (Landline Chile): +56 2 29790978<br>Web: dtorres.me<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/00acef4d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e01e37acbfad671da1b94a61cf819d82?s=50"></div><header><strong>Proposal: Extend CG(Rect)Geometry with center methods</strong> from <string>Kenny Leung</string> &lt;kenny_leung at pobox.com&gt;<p>December 15, 2015 at 08:00:00pm</p></header><div class="content"><p>I also think that keeping with non-mutable versions of these methods is a lot better at keeping you out of trouble. Here’s the set that I’ve been using for a while:<br></p><p>extension CGRect {<br>    public var aspect :CGFloat {get{return width/height}}<br>    public var isPortrait :Bool {get{return aspect &lt; 1}}<br>    public var isLandscape :Bool {get{return aspect &gt; 1}}<br>    public var isSquare :Bool {get{return aspect == 1}}<br>    public var center :CGPoint {get{return CGPointMake(midX,midY)}}<br>    <br>    public init(size s:CGSize) {self=CGRectMake(0,0,s.width,s.height)}<br>    public init(size s:CGSize, centeredOn p:CGPoint) {self=CGRect(size:s).centerOn(p)}<br>    public init(square s:CGFloat, centeredOn p:CGPoint) {self=CGRectMake(p.x-s/2,p.y-s/2,s,s)}<br>    <br>    public func centerOn(p :CGPoint) -&gt; CGRect {return CGRectMake(p.x-width/2,p.y-height/2,width,height)}<br>    public func centerOn(r :CGRect) -&gt; CGRect {return centerOn(r.center)}<br>    public func scale(s :CGFloat) -&gt; CGRect {return CGRectMake(origin.x,origin.y,width*s,height*s)}<br>    public func scaleAround(r :CGRect) -&gt; CGFloat {return r.aspect&lt;=self.aspect ? r.height/height : r.width/width}<br>    public func scaleAndCenterAround(r :CGRect) -&gt; CGRect {return self.scale(self.scaleAround(r)).centerOn(r)}<br>    public func scaleIn(r :CGRect) -&gt; CGFloat {return r.aspect&lt;=self.aspect ? r.width/width : r.height/height}<br>    public func scaleAndCenterIn(r :CGRect) -&gt; CGRect {return self.scale(self.scaleIn(r)).centerOn(r)}<br>}<br></p><p>-Kenny<br></p><p><br>&gt; On Dec 15, 2015, at 3:11 AM, D. Felipe Torres via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The problem with making those settable is the ambiguity of it.<br>&gt; <br>&gt; Say you increase the value at maxY, should the length or origin.y be increased? should they share the modification and increase both buy half?<br>&gt; <br>&gt; It is not clear the intention here.<br>&gt; <br>&gt; And then, as David said, this is CoreGraphics API which has to be suggested through Radars and we all know how likely our chances are there.<br>&gt; <br>&gt; On Sun, Dec 13, 2015 at 10:55 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; I still think it might be valuable to pursue setters for all of the currently-read-only convenience properties (minX, midX, maxX, minY, midY, maxY).<br>&gt; <br>&gt; Jacob<br>&gt; <br>&gt; On Fri, Dec 11, 2015 at 1:17 PM, D. Felipe Torres &lt;warorface at gmail.com&gt; wrote:<br>&gt; Using the mid properties wouldn&#39;t help much as they are the middle of the bounds (origin + length/2) and because it&#39;s a derived value from two different structures, its not clear which structure you want to modify.<br>&gt; <br>&gt; Either way, after thinking more about it, there is too much ambiguity to the details of this. The intent is not always clear and looking into the other functions, they all stand on their own. A CGRect doesn&#39;t have any sense of hierarchy.<br>&gt; <br>&gt; It only appears when you have layers/views (and those do have a way of setting the center because the relationship/hierarchy is well defined).<br>&gt; <br>&gt; I don&#39;t see any more reason to pursue this proposal.<br>&gt;  <br>&gt; <br>&gt; On Fri, Dec 11, 2015 at 7:29 AM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; Would it make sense to achieve the same thing by giving midX and midY setters (they currently only have getters)?<br>&gt; <br>&gt; I&#39;m don&#39;t think I like the idea of tying down any CGRect extensions to a &quot;parent&quot; rect, but saying &quot;rect.midX = parent.midX&quot; is pretty simple &amp; clear.<br>&gt; <br>&gt; Jacob<br>&gt; <br>&gt; On Thu, Dec 10, 2015 at 6:17 AM, D. Felipe Torres via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; One of the task that is performed often is center a frame with respect to it&#39;s parent.<br>&gt; The code for this is short and simple:<br>&gt; <br>&gt; rect.origin.x = (rect.width-parent.width)/2 // or... <br>&gt; rect.origin.y = (rect.height-parent.height)/2<br>&gt; <br>&gt; ## Current Problems<br>&gt; <br>&gt; - It is very easy to get it wrong and confuse X or Y and their length associations.<br>&gt; - Because this code is often found in a layout method, several other rect variables may be defined in the scope which makes it easier to mistake one variable with another if their names are close (and you are used to autocomplete)<br>&gt; - And finally but most importantly, while the equation here is simple, one must parse it and understand it and is not a very swifty approach.<br>&gt; <br>&gt; ##Proposed Additions <br>&gt; <br>&gt; 2 (actually 4) extensions in CGGeometry to CGRect:<br>&gt; <br>&gt; extension CGRect {<br>&gt;       public func centerX(parentRect: CGRect) -&gt; CGRect<br>&gt;       public mutating func centerXInPlace(parentRect: CGRect)<br>&gt;       public fun centerY(parentRect: CGRect) -&gt; CGRect<br>&gt;       public mutating func centerYInPlace(parentRect: CGRect)<br>&gt; }<br>&gt; <br>&gt; This extension allows very easily (and verbally) center a rect in respect to a parent.<br>&gt; <br>&gt; I&#39;m pretty sure there are other pretty useful extensions that can be added to CGGeometry as well but this one I think is basic and pretty important.<br>&gt; <br>&gt; -- <br>&gt; ++++++++++++++++++++++++++<br>&gt; Diego Torres.<br>&gt; Web: dtorres.me<br>&gt;  <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; ++++++++++++++++++++++++++<br>&gt; Diego Torres.<br>&gt; Phone (Mobile Germany): +49 157 30070985<br>&gt; Phone (Landline Chile): +56 2 29790978<br>&gt; Web: dtorres.me<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; ++++++++++++++++++++++++++<br>&gt; Diego Torres.<br>&gt; Phone (Mobile Germany): +49 157 30070985<br>&gt; Phone (Landline Chile): +56 2 29790978<br>&gt; Web: dtorres.me<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2861bfeb71de9de58206bb6ae750bc2f?s=50"></div><header><strong>Proposal: Extend CG(Rect)Geometry with center methods</strong> from <string>ilya</string> &lt;ilya.nikokoshev at gmail.com&gt;<p>December 16, 2015 at 02:00:00pm</p></header><div class="content"><p>-1 on scale. Basic scale() is not clear whether center or origin is a fixed<br>point. Other scale(...) functions presented here seem too complicated.<br></p><p>Ditto centerOn()<br></p><p>aspect is a bad idea as it naturally leads one to comparing floats to each<br>other. Which is very error prone.<br></p><p>How about we define a getter and setter for center and leave it at that?<br></p><p>On Wed, Dec 16, 2015 at 07:28 Kenny Leung via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I also think that keeping with non-mutable versions of these methods is a<br>&gt; lot better at keeping you out of trouble. Here’s the set that I’ve been<br>&gt; using for a while:<br>&gt;<br>&gt; extension CGRect {<br>&gt;     public var aspect :CGFloat {get{return width/height}}<br>&gt;     public var isPortrait :Bool {get{return aspect &lt; 1}}<br>&gt;     public var isLandscape :Bool {get{return aspect &gt; 1}}<br>&gt;     public var isSquare :Bool {get{return aspect == 1}}<br>&gt;     public var center :CGPoint {get{return CGPointMake(midX,midY)}}<br>&gt;<br>&gt;     public init(size s:CGSize) {self=CGRectMake(0,0,s.width,s.height)}<br>&gt;     public init(size s:CGSize, centeredOn p:CGPoint)<br>&gt; {self=CGRect(size:s).centerOn(p)}<br>&gt;     public init(square s:CGFloat, centeredOn p:CGPoint)<br>&gt; {self=CGRectMake(p.x-s/2,p.y-s/2,s,s)}<br>&gt;<br>&gt;     public func centerOn(p :CGPoint) -&gt; CGRect {return<br>&gt; CGRectMake(p.x-width/2,p.y-height/2,width,height)}<br>&gt;     public func centerOn(r :CGRect) -&gt; CGRect {return centerOn(r.center)}<br>&gt;     public func scale(s :CGFloat) -&gt; CGRect {return<br>&gt; CGRectMake(origin.x,origin.y,width*s,height*s)}<br>&gt;     public func scaleAround(r :CGRect) -&gt; CGFloat {return<br>&gt; r.aspect&lt;=self.aspect ? r.height/height : r.width/width}<br>&gt;     public func scaleAndCenterAround(r :CGRect) -&gt; CGRect {return<br>&gt; self.scale(self.scaleAround(r)).centerOn(r)}<br>&gt;     public func scaleIn(r :CGRect) -&gt; CGFloat {return<br>&gt; r.aspect&lt;=self.aspect ? r.width/width : r.height/height}<br>&gt;     public func scaleAndCenterIn(r :CGRect) -&gt; CGRect {return<br>&gt; self.scale(self.scaleIn(r)).centerOn(r)}<br>&gt; }<br>&gt;<br>&gt; -Kenny<br>&gt;<br>&gt;<br>&gt; &gt; On Dec 15, 2015, at 3:11 AM, D. Felipe Torres via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; The problem with making those settable is the ambiguity of it.<br>&gt; &gt;<br>&gt; &gt; Say you increase the value at maxY, should the length or origin.y be<br>&gt; increased? should they share the modification and increase both buy half?<br>&gt; &gt;<br>&gt; &gt; It is not clear the intention here.<br>&gt; &gt;<br>&gt; &gt; And then, as David said, this is CoreGraphics API which has to be<br>&gt; suggested through Radars and we all know how likely our chances are there.<br>&gt; &gt;<br>&gt; &gt; On Sun, Dec 13, 2015 at 10:55 PM, Jacob Bandes-Storch &lt;<br>&gt; jtbandes at gmail.com&gt; wrote:<br>&gt; &gt; I still think it might be valuable to pursue setters for all of the<br>&gt; currently-read-only convenience properties (minX, midX, maxX, minY, midY,<br>&gt; maxY).<br>&gt; &gt;<br>&gt; &gt; Jacob<br>&gt; &gt;<br>&gt; &gt; On Fri, Dec 11, 2015 at 1:17 PM, D. Felipe Torres &lt;warorface at gmail.com&gt;<br>&gt; wrote:<br>&gt; &gt; Using the mid properties wouldn&#39;t help much as they are the middle of<br>&gt; the bounds (origin + length/2) and because it&#39;s a derived value from two<br>&gt; different structures, its not clear which structure you want to modify.<br>&gt; &gt;<br>&gt; &gt; Either way, after thinking more about it, there is too much ambiguity to<br>&gt; the details of this. The intent is not always clear and looking into the<br>&gt; other functions, they all stand on their own. A CGRect doesn&#39;t have any<br>&gt; sense of hierarchy.<br>&gt; &gt;<br>&gt; &gt; It only appears when you have layers/views (and those do have a way of<br>&gt; setting the center because the relationship/hierarchy is well defined).<br>&gt; &gt;<br>&gt; &gt; I don&#39;t see any more reason to pursue this proposal.<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; On Fri, Dec 11, 2015 at 7:29 AM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;<br>&gt; wrote:<br>&gt; &gt; Would it make sense to achieve the same thing by giving midX and midY<br>&gt; setters (they currently only have getters)?<br>&gt; &gt;<br>&gt; &gt; I&#39;m don&#39;t think I like the idea of tying down any CGRect extensions to a<br>&gt; &quot;parent&quot; rect, but saying &quot;rect.midX = parent.midX&quot; is pretty simple &amp;<br>&gt; clear.<br>&gt; &gt;<br>&gt; &gt; Jacob<br>&gt; &gt;<br>&gt; &gt; On Thu, Dec 10, 2015 at 6:17 AM, D. Felipe Torres via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; One of the task that is performed often is center a frame with respect<br>&gt; to it&#39;s parent.<br>&gt; &gt; The code for this is short and simple:<br>&gt; &gt;<br>&gt; &gt; rect.origin.x = (rect.width-parent.width)/2 // or...<br>&gt; &gt; rect.origin.y = (rect.height-parent.height)/2<br>&gt; &gt;<br>&gt; &gt; ## Current Problems<br>&gt; &gt;<br>&gt; &gt; - It is very easy to get it wrong and confuse X or Y and their length<br>&gt; associations.<br>&gt; &gt; - Because this code is often found in a layout method, several other<br>&gt; rect variables may be defined in the scope which makes it easier to mistake<br>&gt; one variable with another if their names are close (and you are used to<br>&gt; autocomplete)<br>&gt; &gt; - And finally but most importantly, while the equation here is simple,<br>&gt; one must parse it and understand it and is not a very swifty approach.<br>&gt; &gt;<br>&gt; &gt; ##Proposed Additions<br>&gt; &gt;<br>&gt; &gt; 2 (actually 4) extensions in CGGeometry to CGRect:<br>&gt; &gt;<br>&gt; &gt; extension CGRect {<br>&gt; &gt;       public func centerX(parentRect: CGRect) -&gt; CGRect<br>&gt; &gt;       public mutating func centerXInPlace(parentRect: CGRect)<br>&gt; &gt;       public fun centerY(parentRect: CGRect) -&gt; CGRect<br>&gt; &gt;       public mutating func centerYInPlace(parentRect: CGRect)<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; This extension allows very easily (and verbally) center a rect in<br>&gt; respect to a parent.<br>&gt; &gt;<br>&gt; &gt; I&#39;m pretty sure there are other pretty useful extensions that can be<br>&gt; added to CGGeometry as well but this one I think is basic and pretty<br>&gt; important.<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; ++++++++++++++++++++++++++<br>&gt; &gt; Diego Torres.<br>&gt; &gt; Web: dtorres.me<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; ++++++++++++++++++++++++++<br>&gt; &gt; Diego Torres.<br>&gt; &gt; Phone (Mobile Germany): +49 157 30070985<br>&gt; &gt; Phone (Landline Chile): +56 2 29790978<br>&gt; &gt; Web: dtorres.me<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; ++++++++++++++++++++++++++<br>&gt; &gt; Diego Torres.<br>&gt; &gt; Phone (Mobile Germany): +49 157 30070985<br>&gt; &gt; Phone (Landline Chile): +56 2 29790978<br>&gt; &gt; Web: dtorres.me<br>&gt; &gt;  _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/a500df7c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Proposal: Extend CG(Rect)Geometry with center methods</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>December 16, 2015 at 09:00:00am</p></header><div class="content"><p>I don&#39;t want to shut down a productive conversation, but since this is all about changing the CoreGraphics framework I think this whole discussion may be out-of-scope for swift-evolution.  What does everybody else think?<br></p><p>&gt; On Dec 16, 2015, at 6:41 AM, ilya via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; -1 on scale. Basic scale() is not clear whether center or origin is a fixed point. Other scale(...) functions presented here seem too complicated. <br>&gt; <br>&gt; Ditto centerOn()<br>&gt; <br>&gt; aspect is a bad idea as it naturally leads one to comparing floats to each other. Which is very error prone. <br>&gt; <br>&gt; How about we define a getter and setter for center and leave it at that? <br>&gt; <br>&gt; On Wed, Dec 16, 2015 at 07:28 Kenny Leung via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; I also think that keeping with non-mutable versions of these methods is a lot better at keeping you out of trouble. Here’s the set that I’ve been using for a while:<br>&gt; <br>&gt; extension CGRect {<br>&gt;     public var aspect :CGFloat {get{return width/height}}<br>&gt;     public var isPortrait :Bool {get{return aspect &lt; 1}}<br>&gt;     public var isLandscape :Bool {get{return aspect &gt; 1}}<br>&gt;     public var isSquare :Bool {get{return aspect == 1}}<br>&gt;     public var center :CGPoint {get{return CGPointMake(midX,midY)}}<br>&gt; <br>&gt;     public init(size s:CGSize) {self=CGRectMake(0,0,s.width,s.height)}<br>&gt;     public init(size s:CGSize, centeredOn p:CGPoint) {self=CGRect(size:s).centerOn(p)}<br>&gt;     public init(square s:CGFloat, centeredOn p:CGPoint) {self=CGRectMake(p.x-s/2,p.y-s/2,s,s)}<br>&gt; <br>&gt;     public func centerOn(p :CGPoint) -&gt; CGRect {return CGRectMake(p.x-width/2,p.y-height/2,width,height)}<br>&gt;     public func centerOn(r :CGRect) -&gt; CGRect {return centerOn(r.center)}<br>&gt;     public func scale(s :CGFloat) -&gt; CGRect {return CGRectMake(origin.x,origin.y,width*s,height*s)}<br>&gt;     public func scaleAround(r :CGRect) -&gt; CGFloat {return r.aspect&lt;=self.aspect ? r.height/height : r.width/width}<br>&gt;     public func scaleAndCenterAround(r :CGRect) -&gt; CGRect {return self.scale(self.scaleAround(r)).centerOn(r)}<br>&gt;     public func scaleIn(r :CGRect) -&gt; CGFloat {return r.aspect&lt;=self.aspect ? r.width/width : r.height/height}<br>&gt;     public func scaleAndCenterIn(r :CGRect) -&gt; CGRect {return self.scale(self.scaleIn(r)).centerOn(r)}<br>&gt; }<br>&gt; <br>&gt; -Kenny<br>&gt; <br>&gt; <br>&gt; &gt; On Dec 15, 2015, at 3:11 AM, D. Felipe Torres via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; The problem with making those settable is the ambiguity of it.<br>&gt; &gt;<br>&gt; &gt; Say you increase the value at maxY, should the length or origin.y be increased? should they share the modification and increase both buy half?<br>&gt; &gt;<br>&gt; &gt; It is not clear the intention here.<br>&gt; &gt;<br>&gt; &gt; And then, as David said, this is CoreGraphics API which has to be suggested through Radars and we all know how likely our chances are there.<br>&gt; &gt;<br>&gt; &gt; On Sun, Dec 13, 2015 at 10:55 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt; wrote:<br>&gt; &gt; I still think it might be valuable to pursue setters for all of the currently-read-only convenience properties (minX, midX, maxX, minY, midY, maxY).<br>&gt; &gt;<br>&gt; &gt; Jacob<br>&gt; &gt;<br>&gt; &gt; On Fri, Dec 11, 2015 at 1:17 PM, D. Felipe Torres &lt;warorface at gmail.com &lt;mailto:warorface at gmail.com&gt;&gt; wrote:<br>&gt; &gt; Using the mid properties wouldn&#39;t help much as they are the middle of the bounds (origin + length/2) and because it&#39;s a derived value from two different structures, its not clear which structure you want to modify.<br>&gt; &gt;<br>&gt; &gt; Either way, after thinking more about it, there is too much ambiguity to the details of this. The intent is not always clear and looking into the other functions, they all stand on their own. A CGRect doesn&#39;t have any sense of hierarchy.<br>&gt; &gt;<br>&gt; &gt; It only appears when you have layers/views (and those do have a way of setting the center because the relationship/hierarchy is well defined).<br>&gt; &gt;<br>&gt; &gt; I don&#39;t see any more reason to pursue this proposal.<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; On Fri, Dec 11, 2015 at 7:29 AM, Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt; wrote:<br>&gt; &gt; Would it make sense to achieve the same thing by giving midX and midY setters (they currently only have getters)?<br>&gt; &gt;<br>&gt; &gt; I&#39;m don&#39;t think I like the idea of tying down any CGRect extensions to a &quot;parent&quot; rect, but saying &quot;rect.midX = parent.midX&quot; is pretty simple &amp; clear.<br>&gt; &gt;<br>&gt; &gt; Jacob<br>&gt; &gt;<br>&gt; &gt; On Thu, Dec 10, 2015 at 6:17 AM, D. Felipe Torres via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt; One of the task that is performed often is center a frame with respect to it&#39;s parent.<br>&gt; &gt; The code for this is short and simple:<br>&gt; &gt;<br>&gt; &gt; rect.origin.x = (rect.width-parent.width)/2 // or...<br>&gt; &gt; rect.origin.y = (rect.height-parent.height)/2<br>&gt; &gt;<br>&gt; &gt; ## Current Problems<br>&gt; &gt;<br>&gt; &gt; - It is very easy to get it wrong and confuse X or Y and their length associations.<br>&gt; &gt; - Because this code is often found in a layout method, several other rect variables may be defined in the scope which makes it easier to mistake one variable with another if their names are close (and you are used to autocomplete)<br>&gt; &gt; - And finally but most importantly, while the equation here is simple, one must parse it and understand it and is not a very swifty approach.<br>&gt; &gt;<br>&gt; &gt; ##Proposed Additions<br>&gt; &gt;<br>&gt; &gt; 2 (actually 4) extensions in CGGeometry to CGRect:<br>&gt; &gt;<br>&gt; &gt; extension CGRect {<br>&gt; &gt;       public func centerX(parentRect: CGRect) -&gt; CGRect<br>&gt; &gt;       public mutating func centerXInPlace(parentRect: CGRect)<br>&gt; &gt;       public fun centerY(parentRect: CGRect) -&gt; CGRect<br>&gt; &gt;       public mutating func centerYInPlace(parentRect: CGRect)<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; This extension allows very easily (and verbally) center a rect in respect to a parent.<br>&gt; &gt;<br>&gt; &gt; I&#39;m pretty sure there are other pretty useful extensions that can be added to CGGeometry as well but this one I think is basic and pretty important.<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; ++++++++++++++++++++++++++<br>&gt; &gt; Diego Torres.<br>&gt; &gt; Web: dtorres.me &lt;http://dtorres.me/&gt;<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; ++++++++++++++++++++++++++<br>&gt; &gt; Diego Torres.<br>&gt; &gt; Phone (Mobile Germany): +49 157 30070985<br>&gt; &gt; Phone (Landline Chile): +56 2 29790978<br>&gt; &gt; Web: dtorres.me &lt;http://dtorres.me/&gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; ++++++++++++++++++++++++++<br>&gt; &gt; Diego Torres.<br>&gt; &gt; Phone (Mobile Germany): +49 157 30070985<br>&gt; &gt; Phone (Landline Chile): +56 2 29790978<br>&gt; &gt; Web: dtorres.me &lt;http://dtorres.me/&gt;<br>&gt; &gt;  _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-Dave<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/aae3c2a8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d47baf3a0f80c9fd13ece9c4b87c7fce?s=50"></div><header><strong>Proposal: Extend CG(Rect)Geometry with center methods</strong> from <string>Marc Knaup</string> &lt;marc at knaup.koeln&gt;<p>December 16, 2015 at 06:00:00pm</p></header><div class="content"><p>I agree.<br></p><p>The limitations of possible workarounds should be discussed instead in<br>separate threads. Like for example that you aren&#39;t able to add a setter to<br>an existing read-only property by extension which would allow to apply the<br>desired changes in your own modules instead of in CoreGraphics directly.<br></p><p>On Wed, Dec 16, 2015 at 6:31 PM, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I don&#39;t want to shut down a productive conversation, but since this is all<br>&gt; about changing the CoreGraphics framework I think this whole discussion may<br>&gt; be out-of-scope for swift-evolution.  What does everybody else think?<br>&gt;<br>&gt; On Dec 16, 2015, at 6:41 AM, ilya via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; -1 on scale. Basic scale() is not clear whether center or origin is a<br>&gt; fixed point. Other scale(...) functions presented here seem too<br>&gt; complicated.<br>&gt;<br>&gt; Ditto centerOn()<br>&gt;<br>&gt; aspect is a bad idea as it naturally leads one to comparing floats to each<br>&gt; other. Which is very error prone.<br>&gt;<br>&gt; How about we define a getter and setter for center and leave it at that?<br>&gt;<br>&gt; On Wed, Dec 16, 2015 at 07:28 Kenny Leung via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; I also think that keeping with non-mutable versions of these methods is a<br>&gt;&gt; lot better at keeping you out of trouble. Here’s the set that I’ve been<br>&gt;&gt; using for a while:<br>&gt;&gt;<br>&gt;&gt; extension CGRect {<br>&gt;&gt;     public var aspect :CGFloat {get{return width/height}}<br>&gt;&gt;     public var isPortrait :Bool {get{return aspect &lt; 1}}<br>&gt;&gt;     public var isLandscape :Bool {get{return aspect &gt; 1}}<br>&gt;&gt;     public var isSquare :Bool {get{return aspect == 1}}<br>&gt;&gt;     public var center :CGPoint {get{return CGPointMake(midX,midY)}}<br>&gt;&gt;<br>&gt;&gt;     public init(size s:CGSize) {self=CGRectMake(0,0,s.width,s.height)}<br>&gt;&gt;     public init(size s:CGSize, centeredOn p:CGPoint)<br>&gt;&gt; {self=CGRect(size:s).centerOn(p)}<br>&gt;&gt;     public init(square s:CGFloat, centeredOn p:CGPoint)<br>&gt;&gt; {self=CGRectMake(p.x-s/2,p.y-s/2,s,s)}<br>&gt;&gt;<br>&gt;&gt;     public func centerOn(p :CGPoint) -&gt; CGRect {return<br>&gt;&gt; CGRectMake(p.x-width/2,p.y-height/2,width,height)}<br>&gt;&gt;     public func centerOn(r :CGRect) -&gt; CGRect {return centerOn(r.center)}<br>&gt;&gt;     public func scale(s :CGFloat) -&gt; CGRect {return<br>&gt;&gt; CGRectMake(origin.x,origin.y,width*s,height*s)}<br>&gt;&gt;     public func scaleAround(r :CGRect) -&gt; CGFloat {return<br>&gt;&gt; r.aspect&lt;=self.aspect ? r.height/height : r.width/width}<br>&gt;&gt;     public func scaleAndCenterAround(r :CGRect) -&gt; CGRect {return<br>&gt;&gt; self.scale(self.scaleAround(r)).centerOn(r)}<br>&gt;&gt;     public func scaleIn(r :CGRect) -&gt; CGFloat {return<br>&gt;&gt; r.aspect&lt;=self.aspect ? r.width/width : r.height/height}<br>&gt;&gt;     public func scaleAndCenterIn(r :CGRect) -&gt; CGRect {return<br>&gt;&gt; self.scale(self.scaleIn(r)).centerOn(r)}<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; -Kenny<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; &gt; On Dec 15, 2015, at 3:11 AM, D. Felipe Torres via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; The problem with making those settable is the ambiguity of it.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Say you increase the value at maxY, should the length or origin.y be<br>&gt;&gt; increased? should they share the modification and increase both buy half?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; It is not clear the intention here.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; And then, as David said, this is CoreGraphics API which has to be<br>&gt;&gt; suggested through Radars and we all know how likely our chances are there.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; On Sun, Dec 13, 2015 at 10:55 PM, Jacob Bandes-Storch &lt;<br>&gt;&gt; jtbandes at gmail.com&gt; wrote:<br>&gt;&gt; &gt; I still think it might be valuable to pursue setters for all of the<br>&gt;&gt; currently-read-only convenience properties (minX, midX, maxX, minY, midY,<br>&gt;&gt; maxY).<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Jacob<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; On Fri, Dec 11, 2015 at 1:17 PM, D. Felipe Torres &lt;warorface at gmail.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; &gt; Using the mid properties wouldn&#39;t help much as they are the middle of<br>&gt;&gt; the bounds (origin + length/2) and because it&#39;s a derived value from two<br>&gt;&gt; different structures, its not clear which structure you want to modify.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Either way, after thinking more about it, there is too much ambiguity<br>&gt;&gt; to the details of this. The intent is not always clear and looking into the<br>&gt;&gt; other functions, they all stand on their own. A CGRect doesn&#39;t have any<br>&gt;&gt; sense of hierarchy.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; It only appears when you have layers/views (and those do have a way of<br>&gt;&gt; setting the center because the relationship/hierarchy is well defined).<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I don&#39;t see any more reason to pursue this proposal.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; On Fri, Dec 11, 2015 at 7:29 AM, Jacob Bandes-Storch &lt;<br>&gt;&gt; jtbandes at gmail.com&gt; wrote:<br>&gt;&gt; &gt; Would it make sense to achieve the same thing by giving midX and midY<br>&gt;&gt; setters (they currently only have getters)?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I&#39;m don&#39;t think I like the idea of tying down any CGRect extensions to<br>&gt;&gt; a &quot;parent&quot; rect, but saying &quot;rect.midX = parent.midX&quot; is pretty simple &amp;<br>&gt;&gt; clear.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Jacob<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; On Thu, Dec 10, 2015 at 6:17 AM, D. Felipe Torres via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt; One of the task that is performed often is center a frame with respect<br>&gt;&gt; to it&#39;s parent.<br>&gt;&gt; &gt; The code for this is short and simple:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; rect.origin.x = (rect.width-parent.width)/2 // or...<br>&gt;&gt; &gt; rect.origin.y = (rect.height-parent.height)/2<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; ## Current Problems<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; - It is very easy to get it wrong and confuse X or Y and their length<br>&gt;&gt; associations.<br>&gt;&gt; &gt; - Because this code is often found in a layout method, several other<br>&gt;&gt; rect variables may be defined in the scope which makes it easier to mistake<br>&gt;&gt; one variable with another if their names are close (and you are used to<br>&gt;&gt; autocomplete)<br>&gt;&gt; &gt; - And finally but most importantly, while the equation here is simple,<br>&gt;&gt; one must parse it and understand it and is not a very swifty approach.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; ##Proposed Additions<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 2 (actually 4) extensions in CGGeometry to CGRect:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; extension CGRect {<br>&gt;&gt; &gt;       public func centerX(parentRect: CGRect) -&gt; CGRect<br>&gt;&gt; &gt;       public mutating func centerXInPlace(parentRect: CGRect)<br>&gt;&gt; &gt;       public fun centerY(parentRect: CGRect) -&gt; CGRect<br>&gt;&gt; &gt;       public mutating func centerYInPlace(parentRect: CGRect)<br>&gt;&gt; &gt; }<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; This extension allows very easily (and verbally) center a rect in<br>&gt;&gt; respect to a parent.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I&#39;m pretty sure there are other pretty useful extensions that can be<br>&gt;&gt; added to CGGeometry as well but this one I think is basic and pretty<br>&gt;&gt; important.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; --<br>&gt;&gt; &gt; ++++++++++++++++++++++++++<br>&gt;&gt; &gt; Diego Torres.<br>&gt;&gt; &gt; Web: dtorres.me<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; --<br>&gt;&gt; &gt; ++++++++++++++++++++++++++<br>&gt;&gt; &gt; Diego Torres.<br>&gt;&gt; &gt; Phone (Mobile Germany): +49 157 30070985<br>&gt;&gt; &gt; Phone (Landline Chile): +56 2 29790978<br>&gt;&gt; &gt; Web: dtorres.me<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; --<br>&gt;&gt; &gt; ++++++++++++++++++++++++++<br>&gt;&gt; &gt; Diego Torres.<br>&gt;&gt; &gt; Phone (Mobile Germany): +49 157 30070985<br>&gt;&gt; &gt; Phone (Landline Chile): +56 2 29790978<br>&gt;&gt; &gt; Web: dtorres.me<br>&gt;&gt; &gt;  _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; -Dave<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/63d52f74/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Proposal: Extend CG(Rect)Geometry with center methods</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>December 13, 2015 at 10:00:00pm</p></header><div class="content"><p>&gt; On Dec 10, 2015, at 6:17 AM, D. Felipe Torres via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; One of the task that is performed often is center a frame with respect to it&#39;s parent.<br>&gt; The code for this is short and simple:<br>&gt; <br>&gt; rect.origin.x = (rect.width-parent.width)/2 // or... <br>&gt; rect.origin.y = (rect.height-parent.height)/2<br>&gt; <br>&gt; ## Current Problems<br>&gt; <br>&gt; - It is very easy to get it wrong and confuse X or Y and their length associations.<br>&gt; - Because this code is often found in a layout method, several other rect variables may be defined in the scope which makes it easier to mistake one variable with another if their names are close (and you are used to autocomplete)<br>&gt; - And finally but most importantly, while the equation here is simple, one must parse it and understand it and is not a very swifty approach.<br>&gt; <br>&gt; ##Proposed Additions <br>&gt; <br>&gt; 2 (actually 4) extensions in CGGeometry to CGRect:<br>&gt; <br>&gt; extension CGRect {<br>&gt;       public func centerX(parentRect: CGRect) -&gt; CGRect<br>&gt;       public mutating func centerXInPlace(parentRect: CGRect)<br>&gt;       public fun centerY(parentRect: CGRect) -&gt; CGRect<br>&gt;       public mutating func centerYInPlace(parentRect: CGRect)<br>&gt; }<br>&gt; <br>&gt; This extension allows very easily (and verbally) center a rect in respect to a parent.<br>&gt; <br>&gt; I&#39;m pretty sure there are other pretty useful extensions that can be added to CGGeometry as well but this one I think is basic and pretty important.<br>&gt; <br>&gt; -- <br>&gt; ++++++++++++++++++++++++++<br>&gt; Diego Torres.<br>&gt; Web: dtorres.me &lt;http://dtorres.me/&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br>Hi Diego,<br></p><p>Although the framework overlays (https://github.com/apple/swift/tree/master/stdlib/public/SDK &lt;https://github.com/apple/swift/tree/master/stdlib/public/SDK&gt;) are currently in the Swift repository, the Swift project doesn&#39;t own these APIs; they belong to the respective framework owners.  Changes to the Swift APIs of the framework, therefore, need to be proposed to the framework owners.  I would do that through bugreport.apple.com &lt;http://bugreport.apple.com/&gt; using component &quot;CoreGraphics / X&quot;.<br></p><p>HTH,<br>Dave<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/4bdfe3eb/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
