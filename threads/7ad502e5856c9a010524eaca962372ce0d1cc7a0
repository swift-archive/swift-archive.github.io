<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0023 API Design Guidelines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February  1, 2016 at 04:00:00pm</p></header><div class="content"><p>Thanks for your review, Michael!<br></p><p>A couple of questions below<br></p><p>on Mon Feb 01 2016, Michael Wells &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; What is your evaluation of the proposal?<br>&gt;<br>&gt; I’m a big fan of guidelines like these so count me as a strong +1.<br>&gt;<br>&gt; In general<br>&gt;<br>&gt; I’m supportive of lowerCamelCase for enumerations. <br>&gt; I’m still not sure about the first argument label<br>&gt; suggestions. Personally, I’d prefer that the first argument always<br>&gt; include a label, but I know that is not a popular opinion.<br></p><p>What would you use for a label here, and why?<br></p><p>  someSet.remove(someElement)<br></p><p>&gt; I continue to believe that property access implies (or at least<br>&gt; strongly hints) at O(1)<br></p><p>+1. For the record, I think the strongest expression of this fact<br>we&#39;re going to be able to get approved is already in the guidelines:<br>&quot;document the complexity of any computed property that is not O(1)&quot;<br></p><p>&gt; WRT translation from ObjC to Swift a few things come to mind:<br></p><p>Would you mind posting these thoughts in the review thread of SE-0005?<br></p><p>&gt; Import things like[UIColor blueColor] to Swift as UIColor.blue instead<br>&gt; of UIColor.blueColor(). That is, things that feel like static<br>&gt; properties on a class should be imported that way.<br>&gt; Are singleton accessors methods or properties? [NSNotificationCenter<br>&gt; defaultCenter]imports as NSNotificationCenter.defaultCenter() or<br>&gt; NSNotificationCenter.defaultCenter?<br>&gt; Group string encoding constants (and other constants like this)<br>&gt; together in an enum or struct. I can never remember<br>&gt; NSUTF8StringEncoding since I’m always looking for StringEncoding<br>&gt; first.<br>&gt; I know this is out of scope for this review, but I’d love for the<br>&gt; guidelines to go even further in defining canonical Swift. What about,<br>&gt; dare I say it, brace locations, tab-vs-spaces, how to wrap func<br>&gt; definitions within some column width max, etc? From the sample code it<br>&gt; appears that Apple has adopted a Swift style and it might be nice to<br>&gt; make that public. This public style guide would not be a decree of<br>&gt; &quot;how one must write&quot; Swift, but more as a &quot;this is how the core team<br>&gt; writes&quot; Swift. I’m one of those developers that has no strong<br>&gt; preference for these issues, but I really do value consistency.<br></p><p>I can imagine we&#39;d address these kinds of things in later review cycles.<br>Regardless, I think we probably need a separate set of guidelines for<br>standard library code, just to cover some of the conventions we use<br>there but don&#39;t expect to impose on everyone else.  That could serve as<br>your guide to the core team&#39;s practices.<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;<br>&gt; Most definitely.<br>&gt;<br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>&gt; Yes these guidelines makes a huge difference in how the language<br>&gt; feels. It fits perfectly with the direction of Swift.<br>&gt;<br>&gt; If you have used other languages or libraries with a similar feature,<br>&gt; how do you feel that this proposal compares to those?<br>&gt;<br>&gt; I&#39;ve been a big proponent of design guides in all of the languages<br>&gt; I’ve used: C, C++, Java, C#, Objective C, and now Swift. I really<br>&gt; appreciate where languages make opinionated decisions on how to write<br>&gt; idiomatic code.<br>&gt;<br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;<br>&gt; I’ve read the proposals many times and I’ve been actively following this discussion.<br>&gt;<br>&gt;&gt; On Jan 31, 2016, at 9:29 PM, Ricardo Parada via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Proposal link:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md<br>&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md&gt;<br>&gt;&gt; <br>&gt;&gt; What is your evaluation of the proposal?<br>&gt;&gt; +1<br>&gt;&gt; <br>&gt;&gt; I read the guidelines and I like them a lot in general. I think they are a very good start. <br>&gt;&gt; <br>&gt;&gt; I have read the alternatives and disagreements in the discussion<br>&gt;&gt; threads.  However, in my opinion the guidelines still stand as the<br>&gt;&gt; winner. I find it better, simpler, more concise and better looking<br>&gt;&gt; than the alternatives discussed.<br>&gt;&gt; <br>&gt;&gt; For example the ed/ ing ending for non-mutable methods. This is a<br>&gt;&gt; convention I have used in java for a long time and I found it very<br>&gt;&gt; natural in general even when the English language may not cooperate<br>&gt;&gt; as it has been discussed by others. I got used to this convention<br>&gt;&gt; very quickly many years ago in libraries I use in java.<br>&gt;&gt; <br>&gt;&gt; There is only one guideline that I think is not aligned with the<br>&gt;&gt; consensus I seem to pick up from the discussions. That is the use of<br>&gt;&gt; camel case for enum cases. After reading different opinions I am now<br>&gt;&gt; leaning towards saying that Enum cases should be lower camel case<br>&gt;&gt; given that they are values.  At first my opinion was the same as the<br>&gt;&gt; guideline. After reading the discussions and seeing examples I<br>&gt;&gt; changed my mind.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; This will bring a lot of changes when applied. I think they are a<br>&gt;&gt; good start. I don&#39;t think it should cover all cases.<br>&gt;&gt; <br>&gt;&gt; I saw the loginWithUserName(_:password:) example and alternatives:<br>&gt;&gt; login(userName:password:), etc. I don&#39;t know if this is addressed in<br>&gt;&gt; the guidelines. I don&#39;t think this example falls under the weak type<br>&gt;&gt; first argument.  It would be nice to have some guidance here. I do<br>&gt;&gt; not know how to state it but I think in this case I would say<br>&gt;&gt; login(userName:password:) is better as it could be part of a family<br>&gt;&gt; of login() methods that take different parameters, i.e. credentials.<br>&gt;&gt; <br>&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; Definitely. I find the guidelines are concise, natural and easy to get used to. <br>&gt;&gt; <br>&gt;&gt; If you have used other languages or libraries with a similar<br>&gt;&gt; feature, how do you feel that this proposal compares to those?<br>&gt;&gt; I have used Java libraries for many years that use the ed ending for<br>&gt;&gt; non-mutable methods for example.<br>&gt;&gt; <br>&gt;&gt; How much effort did you put into your review? A glance, a quick<br>&gt;&gt; reading, or an in-depth study?<br>&gt;&gt; I read the proposal entirely and I have read the majority of responses in the mailing list. <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0023 API Design Guidelines</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>February  2, 2016 at 06:00:00am</p></header><div class="content"><p>&gt; On 02 Feb 2016, at 01:38, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; What is your evaluation of the proposal?<br>&gt;&gt; <br>&gt;&gt; I’m a big fan of guidelines like these so count me as a strong +1.<br>&gt;&gt; <br>&gt;&gt; In general<br>&gt;&gt; <br>&gt;&gt; I’m supportive of lowerCamelCase for enumerations. <br>&gt;&gt; I’m still not sure about the first argument label<br>&gt;&gt; suggestions. Personally, I’d prefer that the first argument always<br>&gt;&gt; include a label, but I know that is not a popular opinion.<br>&gt; <br>&gt; What would you use for a label here, and why?<br>&gt; <br>&gt;  someSet.remove(someElement)<br></p><p>Maybe I am misunderstanding, or maybe I am projecting my opinion, but I believe he meant that the first argument is explicit by default, like all other arguments. your example would just become (keeping the same use-site syntax):<br></p><p>func remove(_ element: Element)<br></p><p>Btw, if it wasn’t clear, that is also my opinion.<br></p><p>David.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160202/cf8e56d0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b660eecceda60138f137d353b8289925?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0023 API Design Guidelines</strong> from <string>Janosch Hildebrand</string> &lt;jnosh at jnosh.com&gt;<p>February  2, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On 02 Feb 2016, at 06:31, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On 02 Feb 2016, at 01:38, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; What is your evaluation of the proposal?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’m a big fan of guidelines like these so count me as a strong +1.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In general<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’m supportive of lowerCamelCase for enumerations. <br>&gt;&gt;&gt; I’m still not sure about the first argument label<br>&gt;&gt;&gt; suggestions. Personally, I’d prefer that the first argument always<br>&gt;&gt;&gt; include a label, but I know that is not a popular opinion.<br>&gt;&gt; <br>&gt;&gt; What would you use for a label here, and why?<br>&gt;&gt; <br>&gt;&gt;  someSet.remove(someElement)<br>&gt; <br>&gt; Maybe I am misunderstanding, or maybe I am projecting my opinion, but I believe he meant that the first argument is explicit by default, like all other arguments. your example would just become (keeping the same use-site syntax):<br>&gt; <br>&gt; func remove(_ element: Element)<br>&gt; <br>&gt; Btw, if it wasn’t clear, that is also my opinion.<br>&gt; <br>&gt; David.<br></p><p>I think it&#39;s important that we separate the discussions about the call site from the discussions about the declaration site.<br>This proposal is ultimately about and only about what the call site should look like and needs to remain focused on that.<br></p><p>There has been a lot of discussion in this thread about the &quot;first argument&quot; but it is often unclear (to me) whether someone is arguing in favor of having the argument be explicit at the call or declaration site... Obviously there seems to be support for making the first argument explicit by default at the declaration site so that should be discussed/proposed separately so that that can be settled as well.<br></p><p>- Janosch<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160202/98914d3e/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0acf75deb034e62d9e8c18c2d3680b54?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0023 API Design Guidelines</strong> from <string>Michael Wells</string> &lt;michael at michaelwells.com&gt;<p>February  2, 2016 at 08:00:00am</p></header><div class="content"><p>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; What is your evaluation of the proposal?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’m a big fan of guidelines like these so count me as a strong +1.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In general<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’m supportive of lowerCamelCase for enumerations. <br>&gt;&gt;&gt; I’m still not sure about the first argument label<br>&gt;&gt;&gt; suggestions. Personally, I’d prefer that the first argument always<br>&gt;&gt;&gt; include a label, but I know that is not a popular opinion.<br>&gt;&gt; <br>&gt;&gt; What would you use for a label here, and why?<br>&gt;&gt; <br>&gt;&gt;  someSet.remove(someElement)<br>&gt; <br>&gt; Maybe I am misunderstanding, or maybe I am projecting my opinion, but I believe he meant that the first argument is explicit by default, like all other arguments. your example would just become (keeping the same use-site syntax):<br>&gt; <br>&gt; func remove(_ element: Element)<br>&gt; <br>&gt; Btw, if it wasn’t clear, that is also my opinion.<br>&gt; <br>&gt; David.<br></p><p>Good point. My brain is almost always thinking of at least two arguments. I’d probably vote for dropping the first argument label for the example you’ve shown, but I wouldn’t argue if it too were made explicit.<br></p><p>someSet.remove(someElement) <br></p><p>vs.<br></p><p>someSet.remove(element: someElement)<br></p><p>When made explicit, the argument label matches the syntax you’d use in an initializer. <br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160202/5c2f61ec/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
