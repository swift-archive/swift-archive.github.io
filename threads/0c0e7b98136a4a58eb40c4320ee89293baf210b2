<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/46520baee6c64b0aa858ccfcec77f131?s=50"></div><header><strong>Using Objective C class in Swift (open source, Linux)</strong> from <string>Iliya Trub</string> &lt;itrub at yandex.ru&gt;<p>February 12, 2016 at 02:00:00pm</p></header><div class="content"><p>As Joe suggested, I try to build swiftc and libSwiftCore on linux with some OpenSource ObjC runtime. Now, I have successfully built swiftc, but when building Swift.o, it generates a lot of homogenous errorsl for example:<br></p><p>home/itrub/swift-root/swift/stdlib/public/core/ObjCMirrors.swift:23:45: error: argument type &#39;_swift_shims_CFStringRef&#39; (aka &#39;UnsafeMutablePointer&lt;objc_object&gt;&#39;) does not conform to expected type &#39;_CocoaStringType&#39; (aka &#39;AnyObject&#39;)<br>  return _cocoaStringToSwiftString_NonASCII(theDescription)<br>                                            ^~~~~~~~~~~~~~<br>/home/itrub/swift-root/swift/stdlib/public/core/StringBridge.swift:27:54: error: cannot convert value of type &#39;_CocoaStringType&#39; (aka &#39;AnyObject&#39;) to expected argument type &#39;_swift_shims_CFStringRef&#39; (aka &#39;UnsafeMutablePointer&lt;objc_object&gt;&#39;)<br>  let result = _swift_stdlib_CFStringCreateCopy(nil, source)<br></p><p>There are also other errors, but all of them concern with mutual convertation of AnyObject and UnsafeMutablePointer&lt;objc_object&gt; or UnsafeMutablePointer&lt;U&gt;. Could somebody hint me direction of further researches? What swift compiler code and existence of which Objc-runtime functions I have to check firstly?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Using Objective C class in Swift (open source, Linux)</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>February 12, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Feb 12, 2016, at 3:13 AM, Труб Илья via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; As Joe suggested, I try to build swiftc and libSwiftCore on linux with some OpenSource ObjC runtime. Now, I have successfully built swiftc, but when building Swift.o, it generates a lot of homogenous errorsl for example:<br>&gt; <br>&gt; home/itrub/swift-root/swift/stdlib/public/core/ObjCMirrors.swift:23:45: error: argument type &#39;_swift_shims_CFStringRef&#39; (aka &#39;UnsafeMutablePointer&lt;objc_object&gt;&#39;) does not conform to expected type &#39;_CocoaStringType&#39; (aka &#39;AnyObject&#39;)<br>&gt;  return _cocoaStringToSwiftString_NonASCII(theDescription)<br>&gt;                                            ^~~~~~~~~~~~~~<br>&gt; /home/itrub/swift-root/swift/stdlib/public/core/StringBridge.swift:27:54: error: cannot convert value of type &#39;_CocoaStringType&#39; (aka &#39;AnyObject&#39;) to expected argument type &#39;_swift_shims_CFStringRef&#39; (aka &#39;UnsafeMutablePointer&lt;objc_object&gt;&#39;)<br>&gt;  let result = _swift_stdlib_CFStringCreateCopy(nil, source)<br>&gt; <br>&gt; There are also other errors, but all of them concern with mutual convertation of AnyObject and UnsafeMutablePointer&lt;objc_object&gt; or UnsafeMutablePointer&lt;U&gt;. Could somebody hint me direction of further researches? What swift compiler code and existence of which Objc-runtime functions I have to check firstly? <br>&gt; <br></p><p>The errors suggest that it isn&#39;t recognizing CFStringRef as a CoreFoundation type, and is just importing it as a plain &#39;struct objc_object*&#39; pointer type. The C importer is tuned toward Apple&#39;s headers so might need a lot of tweaking to properly handle a different CF implementation. The bridging code in the standard library is generally pretty intimately tied to the Apple implementation of NSString/NSArray/NSDictionary, so you might want to disable it altogether in order to make progress on the core interop.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/569ed436467cf145f3bbdd0d53fbe115?s=50"></div><header><strong>Using Objective C class in Swift (open source, Linux)</strong> from <string>Slava Pestov</string> &lt;spestov at apple.com&gt;<p>February 12, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Feb 12, 2016, at 10:11 AM, Joe Groff via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Feb 12, 2016, at 3:13 AM, Труб Илья via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; As Joe suggested, I try to build swiftc and libSwiftCore on linux with some OpenSource ObjC runtime. Now, I have successfully built swiftc, but when building Swift.o, it generates a lot of homogenous errorsl for example:<br>&gt;&gt; <br>&gt;&gt; home/itrub/swift-root/swift/stdlib/public/core/ObjCMirrors.swift:23:45: error: argument type &#39;_swift_shims_CFStringRef&#39; (aka &#39;UnsafeMutablePointer&lt;objc_object&gt;&#39;) does not conform to expected type &#39;_CocoaStringType&#39; (aka &#39;AnyObject&#39;)<br>&gt;&gt; return _cocoaStringToSwiftString_NonASCII(theDescription)<br>&gt;&gt;                                           ^~~~~~~~~~~~~~<br>&gt;&gt; /home/itrub/swift-root/swift/stdlib/public/core/StringBridge.swift:27:54: error: cannot convert value of type &#39;_CocoaStringType&#39; (aka &#39;AnyObject&#39;) to expected argument type &#39;_swift_shims_CFStringRef&#39; (aka &#39;UnsafeMutablePointer&lt;objc_object&gt;&#39;)<br>&gt;&gt; let result = _swift_stdlib_CFStringCreateCopy(nil, source)<br>&gt;&gt; <br>&gt;&gt; There are also other errors, but all of them concern with mutual convertation of AnyObject and UnsafeMutablePointer&lt;objc_object&gt; or UnsafeMutablePointer&lt;U&gt;. Could somebody hint me direction of further researches? What swift compiler code and existence of which Objc-runtime functions I have to check firstly? <br>&gt;&gt; <br>&gt; <br>&gt; The errors suggest that it isn&#39;t recognizing CFStringRef as a CoreFoundation type, and is just importing it as a plain &#39;struct objc_object*&#39; pointer type. The C importer is tuned toward Apple&#39;s headers so might need a lot of tweaking to properly handle a different CF implementation. The bridging code in the standard library is generally pretty intimately tied to the Apple implementation of NSString/NSArray/NSDictionary, so you might want to disable it altogether in order to make progress on the core interop.<br>&gt; <br>&gt; -Joe<br></p><p>The bigger issue would be that IRGen only emits Objective-C metadata in a format compatible with Apple&#39;s runtime, right? Even if you got the headers to import and your code to link, we would need to change code generation to support the GNU runtime.<br></p><p>Slava<br></p><p>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160212/be74e9aa/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Using Objective C class in Swift (open source, Linux)</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>February 12, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Feb 12, 2016, at 1:02 PM, Slava Pestov &lt;spestov at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 12, 2016, at 10:11 AM, Joe Groff via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Feb 12, 2016, at 3:13 AM, Труб Илья via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As Joe suggested, I try to build swiftc and libSwiftCore on linux with some OpenSource ObjC runtime. Now, I have successfully built swiftc, but when building Swift.o, it generates a lot of homogenous errorsl for example:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; home/itrub/swift-root/swift/stdlib/public/core/ObjCMirrors.swift:23:45: error: argument type &#39;_swift_shims_CFStringRef&#39; (aka &#39;UnsafeMutablePointer&lt;objc_object&gt;&#39;) does not conform to expected type &#39;_CocoaStringType&#39; (aka &#39;AnyObject&#39;)<br>&gt;&gt;&gt; return _cocoaStringToSwiftString_NonASCII(theDescription)<br>&gt;&gt;&gt;                                           ^~~~~~~~~~~~~~<br>&gt;&gt;&gt; /home/itrub/swift-root/swift/stdlib/public/core/StringBridge.swift:27:54: error: cannot convert value of type &#39;_CocoaStringType&#39; (aka &#39;AnyObject&#39;) to expected argument type &#39;_swift_shims_CFStringRef&#39; (aka &#39;UnsafeMutablePointer&lt;objc_object&gt;&#39;)<br>&gt;&gt;&gt; let result = _swift_stdlib_CFStringCreateCopy(nil, source)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; There are also other errors, but all of them concern with mutual convertation of AnyObject and UnsafeMutablePointer&lt;objc_object&gt; or UnsafeMutablePointer&lt;U&gt;. Could somebody hint me direction of further researches? What swift compiler code and existence of which Objc-runtime functions I have to check firstly? <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; The errors suggest that it isn&#39;t recognizing CFStringRef as a CoreFoundation type, and is just importing it as a plain &#39;struct objc_object*&#39; pointer type. The C importer is tuned toward Apple&#39;s headers so might need a lot of tweaking to properly handle a different CF implementation. The bridging code in the standard library is generally pretty intimately tied to the Apple implementation of NSString/NSArray/NSDictionary, so you might want to disable it altogether in order to make progress on the core interop.<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt; <br>&gt; The bigger issue would be that IRGen only emits Objective-C metadata in a format compatible with Apple&#39;s runtime, right? Even if you got the headers to import and your code to link, we would need to change code generation to support the GNU runtime.<br></p><p>Definitely, I think you&#39;d want to get the runtime ABI squared away before trying to get the standard library bridging code ported over. It might be a good idea to hack up the stdlib so that its ObjC interop support can be disabled independent of the compiler and runtime.<br></p><p>-Joe<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160212/22f61706/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Using Objective C class in Swift (open source, Linux)</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>February 12, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Feb 12, 2016, at 13:05, Joe Groff via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Feb 12, 2016, at 1:02 PM, Slava Pestov &lt;spestov at apple.com &lt;mailto:spestov at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 12, 2016, at 10:11 AM, Joe Groff via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 12, 2016, at 3:13 AM, Труб Илья via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; As Joe suggested, I try to build swiftc and libSwiftCore on linux with some OpenSource ObjC runtime. Now, I have successfully built swiftc, but when building Swift.o, it generates a lot of homogenous errorsl for example:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; home/itrub/swift-root/swift/stdlib/public/core/ObjCMirrors.swift:23:45: error: argument type &#39;_swift_shims_CFStringRef&#39; (aka &#39;UnsafeMutablePointer&lt;objc_object&gt;&#39;) does not conform to expected type &#39;_CocoaStringType&#39; (aka &#39;AnyObject&#39;)<br>&gt;&gt;&gt;&gt; return _cocoaStringToSwiftString_NonASCII(theDescription)<br>&gt;&gt;&gt;&gt;                                           ^~~~~~~~~~~~~~<br>&gt;&gt;&gt;&gt; /home/itrub/swift-root/swift/stdlib/public/core/StringBridge.swift:27:54: error: cannot convert value of type &#39;_CocoaStringType&#39; (aka &#39;AnyObject&#39;) to expected argument type &#39;_swift_shims_CFStringRef&#39; (aka &#39;UnsafeMutablePointer&lt;objc_object&gt;&#39;)<br>&gt;&gt;&gt;&gt; let result = _swift_stdlib_CFStringCreateCopy(nil, source)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; There are also other errors, but all of them concern with mutual convertation of AnyObject and UnsafeMutablePointer&lt;objc_object&gt; or UnsafeMutablePointer&lt;U&gt;. Could somebody hint me direction of further researches? What swift compiler code and existence of which Objc-runtime functions I have to check firstly? <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The errors suggest that it isn&#39;t recognizing CFStringRef as a CoreFoundation type, and is just importing it as a plain &#39;struct objc_object*&#39; pointer type. The C importer is tuned toward Apple&#39;s headers so might need a lot of tweaking to properly handle a different CF implementation. The bridging code in the standard library is generally pretty intimately tied to the Apple implementation of NSString/NSArray/NSDictionary, so you might want to disable it altogether in order to make progress on the core interop.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Joe<br>&gt;&gt; <br>&gt;&gt; The bigger issue would be that IRGen only emits Objective-C metadata in a format compatible with Apple&#39;s runtime, right? Even if you got the headers to import and your code to link, we would need to change code generation to support the GNU runtime.<br>&gt; <br>&gt; Definitely, I think you&#39;d want to get the runtime ABI squared away before trying to get the standard library bridging code ported over. It might be a good idea to hack up the stdlib so that its ObjC interop support can be disabled independent of the compiler and runtime.<br></p><p>I want to make sure it&#39;s clear that this is (a) a big project, more than just turning on a bunch of flags, and (b) not likely to be something we&#39;d accept into upstream. Improving the notion of &quot;foreign classes&quot;, maybe; specifically supporting an ObjC runtime natively on Linux, probably not.<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160212/bcf8521a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ffe95d2e2584a3b4adda3ca0e19c375d?s=50"></div><header><strong>Using Objective C class in Swift (open source, Linux)</strong> from <string>Luke Howard</string> &lt;lukeh at padl.com&gt;<p>February 13, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; I want to make sure it&#39;s clear that this is (a) a big project, more than just turning on a bunch of flags, and (b) not likely to be something we&#39;d accept into upstream. Improving the notion of &quot;foreign classes&quot;, maybe; specifically supporting an ObjC runtime natively on Linux, probably not.<br></p><p>Depending on what the end-goal is it might be easier to port the Apple runtime to Linux. I had a crack at this a few years ago, I gave up because of the lack of shared library load notifications but doing something that doesn’t support dynamic loading shouldn’t be too hard. The Apportable port might be a good starting point.<br></p><p>— Luke<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160213/b43a8342/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
