<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dd033b3ed46d65c7d7394eab52d53e6b?s=50"></div><header><strong>Can&#39;t declare variable with same name as func called to assign its initial value</strong> from <string>Evan Maloney</string> &lt;emaloney at gilt.com&gt;<p>May 12, 2016 at 03:00:00pm</p></header><div class="content"><p>Adopting the newer Swift style of preferring first parameter labels, I wrote a function:<br></p><p>    func sale(options options: DeepLinkOptions)<br>        throws<br>        -&gt; Sale<br>    {<br>        // ...implementation...<br>    }<br></p><p>I then tried calling it elsewhere, and setting the result to a variable named &#39;sale&#39;, which is coincidentally the same name as the function above:<br></p><p>    let sale = try sale(options: options)<br></p><p>This line won&#39;t compile, failing with the following error and a caret pointing at the second use of &#39;sale&#39;:<br></p><p>    variable used within its own initial value<br></p><p>In the past, I would&#39;ve named the function above according to Objective-C conventions, and it might&#39;ve ended up with a name like &#39;saleWithOptions&#39;; there&#39;d be no clash. However, with the more terse Swift 3.0 style, we&#39;ll probably end up with more situations like mine.<br></p><p>Is this (should this be?) considered a bug or compiler limitation? Should I file a JIRA? There doesn&#39;t seem to be anything for this on bugs.swift.org yet.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Can&#39;t declare variable with same name as func called to assign its initial value</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>May 12, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On May 12, 2016, at 1:07 PM, Evan Maloney via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Adopting the newer Swift style of preferring first parameter labels, I wrote a function:<br>&gt; <br>&gt;    func sale(options options: DeepLinkOptions)<br>&gt;        throws<br>&gt;        -&gt; Sale<br>&gt;    {<br>&gt;        // ...implementation...<br>&gt;    }<br>&gt; <br>&gt; I then tried calling it elsewhere, and setting the result to a variable named &#39;sale&#39;, which is coincidentally the same name as the function above:<br>&gt; <br>&gt;    let sale = try sale(options: options)<br>&gt; <br>&gt; This line won&#39;t compile, failing with the following error and a caret pointing at the second use of &#39;sale&#39;:<br>&gt; <br>&gt;    variable used within its own initial value<br>&gt; <br>&gt; In the past, I would&#39;ve named the function above according to Objective-C conventions, and it might&#39;ve ended up with a name like &#39;saleWithOptions&#39;; there&#39;d be no clash. However, with the more terse Swift 3.0 style, we&#39;ll probably end up with more situations like mine.<br>&gt; <br>&gt; Is this (should this be?) considered a bug or compiler limitation? Should I file a JIRA? There doesn&#39;t seem to be anything for this on bugs.swift.org yet.<br></p><p>I&#39;m going to go with the classic answer: http://www.urbandictionary.com/define.php?term=Henny+Youngman+problem<br></p><p>consider: let sale2 = sale<br>you could then run sale2(options: options)<br></p><p>So why should let sale = sale be any different?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160512/7851f0ec/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dd033b3ed46d65c7d7394eab52d53e6b?s=50"></div><header><strong>Can&#39;t declare variable with same name as func called to assign its initial value</strong> from <string>Evan Maloney</string> &lt;emaloney at gilt.com&gt;<p>May 12, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On May 12, 2016, at 3:12 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; I&#39;m going to go with the classic answer: http://www.urbandictionary.com/define.php?term=Henny+Youngman+problem &lt;http://www.urbandictionary.com/define.php?term=Henny+Youngman+problem&gt;<br>&gt; <br>&gt; consider: let sale2 = sale<br>&gt; you could then run sale2(options: options)<br>&gt; <br>&gt; So why should let sale = sale be any different?<br></p><p>Shouldn&#39;t the use of the &#39;options&#39; parameter label result in the function name not clashing with the generic &#39;sale&#39;?<br></p><p>In the case of the error line itself, I would&#39;ve assumed from the context that the compiler would know that I wanted to invoke the function named &#39;sale&#39; rather than refer to the function in the abstract. The passing of the parameter value should be enough of a tip-off about that, no?<br></p><p>And from that line on within the local scope, I&#39;d understand if a local variable named &#39;sale&#39; shadowed a no-arg function also named &#39;sale&#39;, but given that this function is really named &#39;sale(options:)&#39;, I would&#39;ve thought this&#39;d work.<br></p><p><br>&gt;&gt; On May 12, 2016, at 1:07 PM, Evan Maloney via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Adopting the newer Swift style of preferring first parameter labels, I wrote a function:<br>&gt;&gt; <br>&gt;&gt;    func sale(options options: DeepLinkOptions)<br>&gt;&gt;        throws<br>&gt;&gt;        -&gt; Sale<br>&gt;&gt;    {<br>&gt;&gt;        // ...implementation...<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt; I then tried calling it elsewhere, and setting the result to a variable named &#39;sale&#39;, which is coincidentally the same name as the function above:<br>&gt;&gt; <br>&gt;&gt;    let sale = try sale(options: options)<br>&gt;&gt; <br>&gt;&gt; This line won&#39;t compile, failing with the following error and a caret pointing at the second use of &#39;sale&#39;:<br>&gt;&gt; <br>&gt;&gt;    variable used within its own initial value<br>&gt;&gt; <br>&gt;&gt; In the past, I would&#39;ve named the function above according to Objective-C conventions, and it might&#39;ve ended up with a name like &#39;saleWithOptions&#39;; there&#39;d be no clash. However, with the more terse Swift 3.0 style, we&#39;ll probably end up with more situations like mine.<br>&gt;&gt; <br>&gt;&gt; Is this (should this be?) considered a bug or compiler limitation? Should I file a JIRA? There doesn&#39;t seem to be anything for this on bugs.swift.org &lt;http://bugs.swift.org/&gt; yet.<br>&gt; <br>&gt; I&#39;m going to go with the classic answer: http://www.urbandictionary.com/define.php?term=Henny+Youngman+problem &lt;http://www.urbandictionary.com/define.php?term=Henny+Youngman+problem&gt;<br>&gt; <br>&gt; consider: let sale2 = sale<br>&gt; you could then run sale2(options: options)<br>&gt; <br>&gt; So why should let sale = sale be any different?<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160512/01f2e0b6/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Can&#39;t declare variable with same name as func called to assign its initial value</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>May 12, 2016 at 02:00:00pm</p></header><div class="content"><p>I can&#39;t recall whether functions and variables can have the same name (though I think not), but at the least that error message seems to miss the point.<br></p><p>Sent from my iPhone<br></p><p>&gt; On May 12, 2016, at 14:07, Evan Maloney via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Adopting the newer Swift style of preferring first parameter labels, I wrote a function:<br>&gt; <br>&gt;    func sale(options options: DeepLinkOptions)<br>&gt;        throws<br>&gt;        -&gt; Sale<br>&gt;    {<br>&gt;        // ...implementation...<br>&gt;    }<br>&gt; <br>&gt; I then tried calling it elsewhere, and setting the result to a variable named &#39;sale&#39;, which is coincidentally the same name as the function above:<br>&gt; <br>&gt;    let sale = try sale(options: options)<br>&gt; <br>&gt; This line won&#39;t compile, failing with the following error and a caret pointing at the second use of &#39;sale&#39;:<br>&gt; <br>&gt;    variable used within its own initial value<br>&gt; <br>&gt; In the past, I would&#39;ve named the function above according to Objective-C conventions, and it might&#39;ve ended up with a name like &#39;saleWithOptions&#39;; there&#39;d be no clash. However, with the more terse Swift 3.0 style, we&#39;ll probably end up with more situations like mine.<br>&gt; <br>&gt; Is this (should this be?) considered a bug or compiler limitation? Should I file a JIRA? There doesn&#39;t seem to be anything for this on bugs.swift.org yet.<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
