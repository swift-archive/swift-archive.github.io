<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c354b21edb9ba56fe6b42950e08195fa?s=50"></div><header><strong>[DRAFT] Regularizing Where Grammar</strong> from <string>Jonathan Hull</string> &lt;jhull at gbis.com&gt;<p>June 11, 2016 at 12:00:00am</p></header><div class="content"><p>As a mathematician, for-in-where reads exactly like a set declaration :-)<br></p><p>{ x ∊ ℤ | x is even } -  &quot;For all x in ℤ where x is even”<br></p><p>This makes it feel natural to me (familiar == intuitive).  I could see where it would feel unfamiliar to non-math-geeks though.<br></p><p>My preference would be to leave it as is, but if the syntax change actually allows more functionality somehow (or if the old syntax was actually causing serious confusion) I could be pulled to the other side.  Just please don’t remove where from for-in loops entirely.<br></p><p>Thanks,<br>Jon<br></p><p>&gt; Gist: https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57 &lt;https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57&gt;<br>&gt; <br>&gt; Regularizing Where grammar<br>&gt; <br>&gt; Proposal: TBD<br>&gt; Author: Brent Royal-Gordon &lt;https://github.com/brentdax &lt;https://github.com/brentdax&gt;&gt;, Erica Sadun &lt;http://github.com/erica &lt;http://github.com/erica&gt;&gt;<br>&gt; Status: TBD<br>&gt; Review manager: TBD<br>&gt;  &lt;https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57#introduction &lt;https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57#introduction&gt;&gt;Introduction<br>&gt; <br>&gt; This proposal fixes an inconsistency for where clause grammar in Swift language for-in loops.<br>&gt; <br>&gt; Swift Evolution Discussion: Add a while clause to for loops &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/19772/focus=20143 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/19772/focus=20143&gt;&gt;<br>&gt;  &lt;https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57#motivation &lt;https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57#motivation&gt;&gt;Motivation<br>&gt; <br>&gt; Unlike in switch statements and do loops, a for-in loop&#39;s where-clause is separated from the pattern it modifies.<br>&gt; <br>&gt; for case? pattern in expression where-clause? code-block<br>&gt; <br>&gt; case-item-list → pattern where-clause? | pattern where-clause? , case-item-list<br>&gt; <br>&gt; catch pattern? where-clause? code-block<br>&gt; This separation makes the clause harder to associate with the pattern, can confuse users as to whether it modifies the expression or the pattern, and represents an inconsistency in Swift&#39;s grammar. This proposal regularizes the grammar to match other uses.<br>&gt; <br>&gt; Note where clauses in case conditions and optional bindings have been removed in SE-0099 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0099-conditionclauses.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0099-conditionclauses.md&gt;&gt;.<br>&gt; <br>&gt;  &lt;https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57#detailed-design &lt;https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57#detailed-design&gt;&gt;Detailed Design<br>&gt; <br>&gt; Current:<br>&gt; <br>&gt; for case? pattern in expression where-clause? code-block<br>&gt; Proposed:<br>&gt; <br>&gt; for case? pattern where-clause? in expression code-block<br>&gt;  &lt;https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57#impact-on-existing-code &lt;https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57#impact-on-existing-code&gt;&gt;Impact on Existing Code<br>&gt; <br>&gt; Migration should be easily addressed with a simple fix-it.<br>&gt; <br>&gt;  &lt;https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57#alternatives-considered &lt;https://gist.github.com/erica/86f00c1b8ebf45dcf3507ae6ef642b57#alternatives-considered&gt;&gt;Alternatives Considered<br>&gt; <br>&gt; Not accepting this proposal<br>&gt; <br>&gt; <br>&gt; &gt; On Jun 8, 2016, at 9:23 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt; wrote:<br>&gt; &gt; <br>&gt; &gt;&gt; This reads to me as “repeat the following block until this fails to be true”, the conditional binding in this case fails to be true if someCondition(value) isn’t true, so the loop ends. I think the key thing here is that the where clause is for the conditional binding and not the loop itself, so in this respect it behaves exactly like an if or guard statement. Meanwhile:<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; 	for eachValue in theValues where someCondition(eachValue) { … }<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; Reads as “for everything in theValues do the following if someCondition(eachValue) is also true”, in other words this loop always tries to visit every element of the sequence (a while loop has no implicit awareness of the sequence, it’s really just an if statement that runs over and over). In this case the where clause is part of the loop itself. There may be an argument that where should be renamed on for loops to better distinguish this, but once you consider that there’s no pattern or conditional binding here I think it makes a reasonable amount of sense.<br>&gt; &gt; <br>&gt; &gt; The original sin here was in connecting the `where` clause to the for loop&#39;s sequence expression, rather than its pattern. If `where` were positioned right after the loop variable:<br>&gt; &gt; <br>&gt; &gt; 	for eachValue where someCondition(eachValue) in theValues { … }<br>&gt; &gt; <br>&gt; &gt; It would be much clearer that `where` constrains the values seen by the loop body.<br>&gt; &gt; <br>&gt; &gt; I&#39;m not sure why the `where` clause was placed where it is. I suspect it has something to do with the `where` clause potentially being more complex than the sequence expression, but I was not in the room where it happened, so that&#39;s idle speculation.<br>&gt; &gt; <br>&gt; &gt; -- <br>&gt; &gt; Brent Royal-Gordon<br>&gt; &gt; Architechies<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160611/c48d32e0/attachment.html&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
