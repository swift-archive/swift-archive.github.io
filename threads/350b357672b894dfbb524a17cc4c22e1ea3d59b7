<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d172fa3c47108d84ee35a68e8d675c1?s=50"></div><header><strong>A use for semi-colons: alternating between if and if let</strong> from <string>Ross O&#39;Brien</string> &lt;narrativium+swift at gmail.com&gt;<p>February  3, 2016 at 12:00:00am</p></header><div class="content"><p>Since Swift almost abolished the semi-colon as an end of statement marker,<br>and Swift 3 is abolishing is in C-style for-loops, I thought I&#39;d suggest<br>something else for it to do.<br></p><p>Swift 1.2 allowed developers to pack multiple if let bindings into one if<br>let, using comma separators. This was well received as it removed the<br>disliked &#39;pyramid of doom&#39; - lots of nested indented if statements.<br></p><p>I&#39;d like to propose using the semi-colon to pack if lets and regular ifs<br>into one if. The format would essentially be:<br>if &lt;boolean expression&gt;; let x = x as? Foo; &lt;boolean expression&gt;; let y =<br>x.&lt;property&gt;, z = y.&lt;property&gt; // and so on<br>{<br>  // closure which only happens if both expressions are true and all three<br>bindings happen; note that the last two are comma-separated as they&#39;re both<br>&#39;if let&#39;s.<br>}<br></p><p>There would only be one actual &#39;if&#39;. The semi-colon<br>This would also be applicable to guard and guard let. I&#39;ve had a number of<br>occasions where I&#39;ve written multiple guard statements with identical else<br>closures. I&#39;d like to avoid some of that duplicate code.<br></p><p>I realise that it&#39;s already possible to combine conditions and conditional<br>bindings in one if, using the &#39;where&#39; keyword, but I don&#39;t think it&#39;s clear<br>- certainly not as clear as when where filters for-in ranges or case<br>statements.<br></p><p>For example: getting the first element from an array of optionals. Here&#39;s<br>my sample trivial example:<br></p><p>var array : [Int?] = []<br></p><p>if let x = array[0] where array.count &gt; 0<br></p><p>{<br></p><p>print(x)<br></p><p>}<br>This code doesn&#39;t work. The array index is out of range. But there&#39;s no way<br>I know of to rearrange the &#39;if&#39; to ensure the array isn&#39;t empty before<br>binding to the first element - the developer has to write a nested if<br>statement.<br></p><p>My suggested syntax would present the if like this:<br></p><p>if array.count &gt; 0;<br></p><p>let x = array[0]<br></p><p>{<br></p><p>print(x)<br></p><p>}<br></p><p>The semi-colon would read as &#39;and&#39; in the same way the comma does in a<br>multiple if let or &amp;&amp; does in an if; it allows the developer to alternate<br>between boolean expressions and conditional bindings. (The downside here is<br>that three distinct punctuation symbols are all essentially used to mean<br>the same thing.)<br></p><p>Is this worthy of discussion?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160203/350b59b7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>A use for semi-colons: alternating between if and if let</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>February  2, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Feb 2, 2016, at 16:53, Ross O&#39;Brien via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; For example: getting the first element from an array of optionals. Here&#39;s my sample trivial example:<br>&gt; 	var array : [Int?] = []<br>&gt; 	if let x = array[0] where array.count &gt; 0<br>&gt; 	{<br>&gt; 		print(x)<br>&gt; 	}<br>&gt; This code doesn&#39;t work. The array index is out of range. But there&#39;s no way I know of to rearrange the &#39;if&#39; to ensure the array isn&#39;t empty before binding to the first element - the developer has to write a nested if statement.<br></p><p>We already allow this, with commas:<br></p><p>var array: [Int?] = []<br>if !array.isEmpty, let x = array[0] {<br>  print(x)<br>}<br></p><p>Jordan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160202/6e083617/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>A use for semi-colons: alternating between if and if let</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>February  2, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Feb 2, 2016, at 5:13 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 2, 2016, at 16:53, Ross O&#39;Brien via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; For example: getting the first element from an array of optionals. Here&#39;s my sample trivial example:<br>&gt;&gt; 	var array : [Int?] = []<br>&gt;&gt; 	if let x = array[0] where array.count &gt; 0<br>&gt;&gt; 	{<br>&gt;&gt; 		print(x)<br>&gt;&gt; 	}<br>&gt;&gt; This code doesn&#39;t work. The array index is out of range. But there&#39;s no way I know of to rearrange the &#39;if&#39; to ensure the array isn&#39;t empty before binding to the first element - the developer has to write a nested if statement.<br>&gt; <br>&gt; We already allow this, with commas:<br>&gt; <br>&gt; var array: [Int?] = []<br>&gt; if !array.isEmpty, let x = array[0] {<br>&gt;   print(x)<br>&gt; }<br></p><p>That&#39;s true, but there are some problematic ambiguities with our current syntax, since &#39;let&#39; and &#39;case&#39; conditions both admit multiple sub-conditions also separated by commas, e.g. &#39;if let x = y, y = z { }&#39; or &#39;if case let x = y, let y = z&#39;. Using &#39;;&#39; for this purpose would be less ambiguous.<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160202/9551fc2f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/df65d69ec35e73390ddd0e6a2c335737?s=50"></div><header><strong>A use for semi-colons: alternating between if and if let</strong> from <string>James Hillhouse IV</string> &lt;jimhillhouse at me.com&gt;<p>February  4, 2016 at 06:00:00pm</p></header><div class="content"><p>Hereâ€™s a question that Drew raised as he was educating me on this discussion. Given that the following works, are you proposing to deprecate,<br></p><p>if let a = 2, var b = 3, let c = 4, var d = 5{ } // 1<br></p><p>in favor of?<br></p><p>if let a = 2; var b = 3; let c = 4; var d = 5{ } // 2<br></p><p>If semi-colon is still being considered, can Joe or Jordon clarify?<br></p><p>&gt; On Feb 2, 2016, at 7:40 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Feb 2, 2016, at 5:13 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 2, 2016, at 16:53, Ross O&#39;Brien via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; For example: getting the first element from an array of optionals. Here&#39;s my sample trivial example:<br>&gt;&gt;&gt; 	var array : [Int?] = []<br>&gt;&gt;&gt; 	if let x = array[0] where array.count &gt; 0<br>&gt;&gt;&gt; 	{<br>&gt;&gt;&gt; 		print(x)<br>&gt;&gt;&gt; 	}<br>&gt;&gt;&gt; This code doesn&#39;t work. The array index is out of range. But there&#39;s no way I know of to rearrange the &#39;if&#39; to ensure the array isn&#39;t empty before binding to the first element - the developer has to write a nested if statement.<br>&gt;&gt; <br>&gt;&gt; We already allow this, with commas:<br>&gt;&gt; <br>&gt;&gt; var array: [Int?] = []<br>&gt;&gt; if !array.isEmpty, let x = array[0] {<br>&gt;&gt;   print(x)<br>&gt;&gt; }<br>&gt; <br>&gt; That&#39;s true, but there are some problematic ambiguities with our current syntax, since &#39;let&#39; and &#39;case&#39; conditions both admit multiple sub-conditions also separated by commas, e.g. &#39;if let x = y, y = z { }&#39; or &#39;if case let x = y, let y = z&#39;. Using &#39;;&#39; for this purpose would be less ambiguous.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160204/a7610ece/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fa2575f192bfdb93dd4cb043545a5df4?s=50"></div><header><strong>A use for semi-colons: alternating between if and if let</strong> from <string>Ross O&#39;Brien</string> &lt;narrativium at gmail.com&gt;<p>February  5, 2016 at 12:00:00am</p></header><div class="content"><p>I don&#39;t know if this will help clarify things, so take or leave as you like:<br></p><p>I wasn&#39;t aware before this discussion that the first of the comma-separated<br>expressions of an if let could be just an &#39;if&#39;.<br></p><p>Now I have learned it, it just seems to be an odd construction: the first<br>clause of an if can be a boolean expression, a let binding, a var binding<br>or a case let/var binding, and then after the first comma every boolean<br>expression must be preceded by &#39;where&#39;. There&#39;s no obligation for the<br>boolean expression to relate to the constant or variable just bound.<br></p><p>My original premise was simply to allow boolean expressions and binding<br>expressions to alternate within the if; boolean operators like &amp; and |<br>would separate boolean expressions, commas would separate binding<br>expressions, and semi-colons would allow alternating from one to the other.<br>I hadn&#39;t anticipated that this would deprecate any existing code; a let<br>followed by a var in the if would still be comma-separated binding<br>expressions - but I&#39;m not objecting to deprecating something if it makes<br>the code clearer.<br></p><p>So (and I apologise for the trivialised example) my proposed change would<br>be that this:<br></p><p>if a == 5, let b = c where array.count &gt; 5, let d = c, var e = array[0], f<br>= array[1] where e == f, case .Some(let g) = c where g.characters.count &gt; 2<br>{ }<br></p><p>would become<br></p><p>if a == 5; let b = c; array.count &gt; 5; let d = c, var e = array[0], f =<br>array[1] where e == f; case .Some(let g) = c where g.characters.count &gt; 2 {<br>}<br></p><p>So, mostly the same, but &#39;where&#39; can be used only where it clarifies to the<br>reader that it&#39;s qualifying a binding, rather than being used because it&#39;s<br>the only way to follow a binding expression with a boolean expression.<br></p><p><br>On Fri, Feb 5, 2016 at 12:04 AM, James Hillhouse IV via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hereâ€™s a question that Drew raised as he was educating me on this<br>&gt; discussion. Given that the following works, are you proposing to deprecate,<br>&gt;<br>&gt; if let a = 2, var b = 3, let c = 4, var d = 5{ } // 1<br>&gt;<br>&gt; in favor of?<br>&gt;<br>&gt; if let a = 2; var b = 3; let c = 4; var d = 5{ } // 2<br>&gt;<br>&gt; If semi-colon is still being considered, can Joe or Jordon clarify?<br>&gt;<br>&gt; On Feb 2, 2016, at 7:40 PM, Joe Groff via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Feb 2, 2016, at 5:13 PM, Jordan Rose via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Feb 2, 2016, at 16:53, Ross O&#39;Brien via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; For example: getting the first element from an array of optionals. Here&#39;s<br>&gt; my sample trivial example:<br>&gt; var array : [Int?] = []<br>&gt; if let x = array[0] where array.count &gt; 0<br>&gt; {<br>&gt; print(x)<br>&gt; }<br>&gt; This code doesn&#39;t work. The array index is out of range. But there&#39;s no<br>&gt; way I know of to rearrange the &#39;if&#39; to ensure the array isn&#39;t empty before<br>&gt; binding to the first element - the developer has to write a nested if<br>&gt; statement.<br>&gt;<br>&gt;<br>&gt; We already allow this, with commas:<br>&gt;<br>&gt; var array: [Int?] = []<br>&gt; if !array.isEmpty, let x = array[0] {<br>&gt;   print(x)<br>&gt; }<br>&gt;<br>&gt;<br>&gt; That&#39;s true, but there are some problematic ambiguities with our current<br>&gt; syntax, since &#39;let&#39; and &#39;case&#39; conditions both admit multiple<br>&gt; sub-conditions also separated by commas, e.g. &#39;if let x = y, y = z { }&#39; or<br>&gt; &#39;if case let x = y, let y = z&#39;. Using &#39;;&#39; for this purpose would be less<br>&gt; ambiguous.<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160205/7922dc8e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/df65d69ec35e73390ddd0e6a2c335737?s=50"></div><header><strong>A use for semi-colons: alternating between if and if let</strong> from <string>James Hillhouse IV</string> &lt;jimhillhouse at me.com&gt;<p>February  4, 2016 at 09:00:00pm</p></header><div class="content"><p>Ross,<br></p><p>Thanks for the clarification of what youâ€™re trying to do. <br></p><p>Jim<br></p><p>&gt; On Feb 4, 2016, at 6:58 PM, Ross O&#39;Brien &lt;narrativium at gmail.com&gt; wrote:<br>&gt; <br>&gt; I don&#39;t know if this will help clarify things, so take or leave as you like:<br>&gt; <br>&gt; I wasn&#39;t aware before this discussion that the first of the comma-separated expressions of an if let could be just an &#39;if&#39;.<br>&gt; <br>&gt; Now I have learned it, it just seems to be an odd construction: the first clause of an if can be a boolean expression, a let binding, a var binding or a case let/var binding, and then after the first comma every boolean expression must be preceded by &#39;where&#39;. There&#39;s no obligation for the boolean expression to relate to the constant or variable just bound.<br>&gt; <br>&gt; My original premise was simply to allow boolean expressions and binding expressions to alternate within the if; boolean operators like &amp; and | would separate boolean expressions, commas would separate binding expressions, and semi-colons would allow alternating from one to the other. I hadn&#39;t anticipated that this would deprecate any existing code; a let followed by a var in the if would still be comma-separated binding expressions - but I&#39;m not objecting to deprecating something if it makes the code clearer.<br>&gt; <br>&gt; So (and I apologise for the trivialised example) my proposed change would be that this:<br>&gt; if a == 5, let b = c where array.count &gt; 5, let d = c, var e = array[0], f = array[1] where e == f, case .Some(let g) = c where g.characters.count &gt; 2 { }<br>&gt; would become<br>&gt; if a == 5; let b = c; array.count &gt; 5; let d = c, var e = array[0], f = array[1] where e == f; case .Some(let g) = c where g.characters.count &gt; 2 { }<br>&gt; <br>&gt; So, mostly the same, but &#39;where&#39; can be used only where it clarifies to the reader that it&#39;s qualifying a binding, rather than being used because it&#39;s the only way to follow a binding expression with a boolean expression.<br>&gt; <br>&gt; <br>&gt; On Fri, Feb 5, 2016 at 12:04 AM, James Hillhouse IV via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Hereâ€™s a question that Drew raised as he was educating me on this discussion. Given that the following works, are you proposing to deprecate,<br>&gt; <br>&gt; if let a = 2, var b = 3, let c = 4, var d = 5{ } // 1<br>&gt; <br>&gt; in favor of?<br>&gt; <br>&gt; if let a = 2; var b = 3; let c = 4; var d = 5{ } // 2<br>&gt; <br>&gt; If semi-colon is still being considered, can Joe or Jordon clarify?<br>&gt; <br>&gt;&gt; On Feb 2, 2016, at 7:40 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Feb 2, 2016, at 5:13 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 2, 2016, at 16:53, Ross O&#39;Brien via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; For example: getting the first element from an array of optionals. Here&#39;s my sample trivial example:<br>&gt;&gt;&gt;&gt; 	var array : [Int?] = []<br>&gt;&gt;&gt;&gt; 	if let x = array[0] where array.count &gt; 0<br>&gt;&gt;&gt;&gt; 	{<br>&gt;&gt;&gt;&gt; 		print(x)<br>&gt;&gt;&gt;&gt; 	}<br>&gt;&gt;&gt;&gt; This code doesn&#39;t work. The array index is out of range. But there&#39;s no way I know of to rearrange the &#39;if&#39; to ensure the array isn&#39;t empty before binding to the first element - the developer has to write a nested if statement.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We already allow this, with commas:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; var array: [Int?] = []<br>&gt;&gt;&gt; if !array.isEmpty, let x = array[0] {<br>&gt;&gt;&gt;   print(x)<br>&gt;&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; That&#39;s true, but there are some problematic ambiguities with our current syntax, since &#39;let&#39; and &#39;case&#39; conditions both admit multiple sub-conditions also separated by commas, e.g. &#39;if let x = y, y = z { }&#39; or &#39;if case let x = y, let y = z&#39;. Using &#39;;&#39; for this purpose would be less ambiguous.<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160204/3ed50852/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
