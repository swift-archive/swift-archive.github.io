<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/728c1be08b1a4c91add43688b40592cf?s=50"></div><header><strong>[Proposal] Invert the order of pattern match operator</strong> from <string>David Rodrigues</string> &lt;david.ndh at gmail.com&gt;<p>April  7, 2016 at 12:00:00pm</p></header><div class="content"><p>Hi all,<br></p><p>Swift has a pattern match operator, ~=, which is unknown to many (like me<br>until a few weeks ago), that performs a match between a value and a certain<br>pattern, e.g. checking if an integer value is contained in a range of<br>integers.<br></p><p>This operator may be little known, but it plays a key role in the language<br>since it&#39;s used behind the scenes to support expression patterns in<br>`switch` statement case labels, which we all know are extremely popular.<br></p><p>let point = (2, 4)<br>switch point {<br>case (0, 0):<br>    print(&quot;The point is at the origin&quot;)<br>case (0...4, 0...4):<br>    print(&quot;The point is in the subregion&quot;)<br>default:<br>    break<br>}<br></p><p>Most of the time we don&#39;t use the operator directly but it is available and<br>can be handy in certain conditions.<br></p><p>let point = (2, 4)<br>switch point {<br>case (let x, let y) where 0...4 ~= x &amp;&amp; 0...4 ~= y:<br>    print(&quot;The point is in the subregion&quot;)<br>default:<br>    break<br>}<br></p><p>However the current syntax is not ideal (in my opinion). We&#39;re not really<br>declaring the operation that we want to do, and that has an impact in the<br>expressivity and readability of the code. Currently we&#39;re doing matches<br>like &quot;if blue is the ocean&quot; instead of &quot;if the ocean is blue&quot; or &quot;if the<br>ocean contains the whale&quot; instead of &quot;if the whale is in the ocean&quot;.<br></p><p>For that reason, I would like to suggest inverting the order of the<br>operator to match more closely our logical thought.<br></p><p>case (let x, let y) where x =~ 0...4 &amp;&amp; y =~ 0...4: // Proposed<br>// vs<br>case (let x, let y) where 0...4 ~= x &amp;&amp; 0...4 ~= y: // Current<br></p><p>I have an ongoing proposal to suggest this change and it contains a little<br>more context. It is available here:<br></p><p>https://github.com/dmcrodrigues/swift-evolution/blob/proposal/invert-order-of-pattern-match-operator/proposals/NNNN-invert-order-of-pattern-match-operator.md<br>.<br></p><p>Any feedback is very welcome.<br></p><p>Thank you.<br></p><p>David Rodrigues<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160407/84d236f1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>[Proposal] Invert the order of pattern match operator</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>April  7, 2016 at 10:00:00am</p></header><div class="content"><p>It would be nice to know the rationale behind the choice of the current syntax. I agree that these seem more natural:<br></p><p>@warn_unused_result<br>public func ~=&lt;I : ForwardIndexType where I : Comparable&gt;(value: I, pattern: Range&lt;I&gt;) -&gt; Bool<br></p><p>@warn_unused_result<br>public func ~=&lt;I : IntervalType&gt;(value: I.Bound, pattern: I) -&gt; Bool<br></p><p>I would not change from `~=` to `=~` though.<br></p><p>So you have this:<br></p><p>let x = 4<br></p><p>switch x {<br>case let v where x ~= 0...5: print(&quot;matched: \(v)&quot;)<br>default: print(&quot;nothing!!&quot;)<br>}<br></p><p>-David<br></p><p>&gt; On Apr 7, 2016, at 4:57 AM, David Rodrigues via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; Swift has a pattern match operator, ~=, which is unknown to many (like me until a few weeks ago), that performs a match between a value and a certain pattern, e.g. checking if an integer value is contained in a range of integers.<br>&gt; <br>&gt; This operator may be little known, but it plays a key role in the language since it&#39;s used behind the scenes to support expression patterns in `switch` statement case labels, which we all know are extremely popular.<br>&gt; <br>&gt; let point = (2, 4)<br>&gt; switch point {<br>&gt; case (0, 0):<br>&gt;     print(&quot;The point is at the origin&quot;)<br>&gt; case (0...4, 0...4):<br>&gt;     print(&quot;The point is in the subregion&quot;)<br>&gt; default:<br>&gt;     break<br>&gt; }<br>&gt; <br>&gt; Most of the time we don&#39;t use the operator directly but it is available and can be handy in certain conditions.<br>&gt; <br>&gt; let point = (2, 4)<br>&gt; switch point {<br>&gt; case (let x, let y) where 0...4 ~= x &amp;&amp; 0...4 ~= y:<br>&gt;     print(&quot;The point is in the subregion&quot;)<br>&gt; default:<br>&gt;     break<br>&gt; }<br>&gt; <br>&gt; However the current syntax is not ideal (in my opinion). We&#39;re not really declaring the operation that we want to do, and that has an impact in the expressivity and readability of the code. Currently we&#39;re doing matches like &quot;if blue is the ocean&quot; instead of &quot;if the ocean is blue&quot; or &quot;if the ocean contains the whale&quot; instead of &quot;if the whale is in the ocean&quot;.<br>&gt; <br>&gt; For that reason, I would like to suggest inverting the order of the operator to match more closely our logical thought.<br>&gt; <br>&gt; case (let x, let y) where x =~ 0...4 &amp;&amp; y =~ 0...4: // Proposed<br>&gt; // vs<br>&gt; case (let x, let y) where 0...4 ~= x &amp;&amp; 0...4 ~= y: // Current<br>&gt; <br>&gt; I have an ongoing proposal to suggest this change and it contains a little more context. It is available here: <br>&gt; <br>&gt; https://github.com/dmcrodrigues/swift-evolution/blob/proposal/invert-order-of-pattern-match-operator/proposals/NNNN-invert-order-of-pattern-match-operator.md &lt;https://github.com/dmcrodrigues/swift-evolution/blob/proposal/invert-order-of-pattern-match-operator/proposals/NNNN-invert-order-of-pattern-match-operator.md&gt;.<br>&gt; <br>&gt; Any feedback is very welcome.<br>&gt; <br>&gt; Thank you.<br>&gt; <br>&gt; David Rodrigues<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160407/00ecd334/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Proposal] Invert the order of pattern match operator</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>April  7, 2016 at 11:00:00am</p></header><div class="content"><p>I&#39;d prefer to offer both ~= and =~, allowing the consumer to choose which side the pattern sits on.<br></p><p>-- E<br></p><p><br>&gt; On Apr 7, 2016, at 11:09 AM, David Owens II via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; It would be nice to know the rationale behind the choice of the current syntax. I agree that these seem more natural:<br>&gt; <br>&gt; @warn_unused_result<br>&gt; public func ~=&lt;I : ForwardIndexType where I : Comparable&gt;(value: I, pattern: Range&lt;I&gt;) -&gt; Bool<br>&gt; <br>&gt; @warn_unused_result<br>&gt; public func ~=&lt;I : IntervalType&gt;(value: I.Bound, pattern: I) -&gt; Bool<br>&gt; <br>&gt; I would not change from `~=` to `=~` though.<br>&gt; <br>&gt; So you have this:<br>&gt; <br>&gt; let x = 4<br>&gt; <br>&gt; switch x {<br>&gt; case let v where x ~= 0...5: print(&quot;matched: \(v)&quot;)<br>&gt; default: print(&quot;nothing!!&quot;)<br>&gt; }<br>&gt; <br>&gt; -David<br>&gt; <br>&gt;&gt; On Apr 7, 2016, at 4:57 AM, David Rodrigues via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi all,<br>&gt;&gt; <br>&gt;&gt; Swift has a pattern match operator, ~=, which is unknown to many (like me until a few weeks ago), that performs a match between a value and a certain pattern, e.g. checking if an integer value is contained in a range of integers.<br>&gt;&gt; <br>&gt;&gt; This operator may be little known, but it plays a key role in the language since it&#39;s used behind the scenes to support expression patterns in `switch` statement case labels, which we all know are extremely popular.<br>&gt;&gt; <br>&gt;&gt; let point = (2, 4)<br>&gt;&gt; switch point {<br>&gt;&gt; case (0, 0):<br>&gt;&gt;     print(&quot;The point is at the origin&quot;)<br>&gt;&gt; case (0...4, 0...4):<br>&gt;&gt;     print(&quot;The point is in the subregion&quot;)<br>&gt;&gt; default:<br>&gt;&gt;     break<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Most of the time we don&#39;t use the operator directly but it is available and can be handy in certain conditions.<br>&gt;&gt; <br>&gt;&gt; let point = (2, 4)<br>&gt;&gt; switch point {<br>&gt;&gt; case (let x, let y) where 0...4 ~= x &amp;&amp; 0...4 ~= y:<br>&gt;&gt;     print(&quot;The point is in the subregion&quot;)<br>&gt;&gt; default:<br>&gt;&gt;     break<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; However the current syntax is not ideal (in my opinion). We&#39;re not really declaring the operation that we want to do, and that has an impact in the expressivity and readability of the code. Currently we&#39;re doing matches like &quot;if blue is the ocean&quot; instead of &quot;if the ocean is blue&quot; or &quot;if the ocean contains the whale&quot; instead of &quot;if the whale is in the ocean&quot;.<br>&gt;&gt; <br>&gt;&gt; For that reason, I would like to suggest inverting the order of the operator to match more closely our logical thought.<br>&gt;&gt; <br>&gt;&gt; case (let x, let y) where x =~ 0...4 &amp;&amp; y =~ 0...4: // Proposed<br>&gt;&gt; // vs<br>&gt;&gt; case (let x, let y) where 0...4 ~= x &amp;&amp; 0...4 ~= y: // Current<br>&gt;&gt; <br>&gt;&gt; I have an ongoing proposal to suggest this change and it contains a little more context. It is available here: <br>&gt;&gt; <br>&gt;&gt; https://github.com/dmcrodrigues/swift-evolution/blob/proposal/invert-order-of-pattern-match-operator/proposals/NNNN-invert-order-of-pattern-match-operator.md &lt;https://github.com/dmcrodrigues/swift-evolution/blob/proposal/invert-order-of-pattern-match-operator/proposals/NNNN-invert-order-of-pattern-match-operator.md&gt;.<br>&gt;&gt; <br>&gt;&gt; Any feedback is very welcome.<br>&gt;&gt; <br>&gt;&gt; Thank you.<br>&gt;&gt; <br>&gt;&gt; David Rodrigues<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160407/3e209415/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Proposal] Invert the order of pattern match operator</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>April  8, 2016 at 11:00:00am</p></header><div class="content"><p>Can someone fill me in as to how this differs from (0…4).contains(x)?<br></p><p>Personally I don’t like the choice for the operator, and think it’s not very clear, if we can do the same thing with a method then I’d prefer removing the operator to be honest.<br></p><p>&gt; On 7 Apr 2016, at 12:57, David Rodrigues via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; Swift has a pattern match operator, ~=, which is unknown to many (like me until a few weeks ago), that performs a match between a value and a certain pattern, e.g. checking if an integer value is contained in a range of integers.<br>&gt; <br>&gt; This operator may be little known, but it plays a key role in the language since it&#39;s used behind the scenes to support expression patterns in `switch` statement case labels, which we all know are extremely popular.<br>&gt; <br>&gt; let point = (2, 4)<br>&gt; switch point {<br>&gt; case (0, 0):<br>&gt;     print(&quot;The point is at the origin&quot;)<br>&gt; case (0...4, 0...4):<br>&gt;     print(&quot;The point is in the subregion&quot;)<br>&gt; default:<br>&gt;     break<br>&gt; }<br>&gt; <br>&gt; Most of the time we don&#39;t use the operator directly but it is available and can be handy in certain conditions.<br>&gt; <br>&gt; let point = (2, 4)<br>&gt; switch point {<br>&gt; case (let x, let y) where 0...4 ~= x &amp;&amp; 0...4 ~= y:<br>&gt;     print(&quot;The point is in the subregion&quot;)<br>&gt; default:<br>&gt;     break<br>&gt; }<br>&gt; <br>&gt; However the current syntax is not ideal (in my opinion). We&#39;re not really declaring the operation that we want to do, and that has an impact in the expressivity and readability of the code. Currently we&#39;re doing matches like &quot;if blue is the ocean&quot; instead of &quot;if the ocean is blue&quot; or &quot;if the ocean contains the whale&quot; instead of &quot;if the whale is in the ocean&quot;.<br>&gt; <br>&gt; For that reason, I would like to suggest inverting the order of the operator to match more closely our logical thought.<br>&gt; <br>&gt; case (let x, let y) where x =~ 0...4 &amp;&amp; y =~ 0...4: // Proposed<br>&gt; // vs<br>&gt; case (let x, let y) where 0...4 ~= x &amp;&amp; 0...4 ~= y: // Current<br>&gt; <br>&gt; I have an ongoing proposal to suggest this change and it contains a little more context. It is available here: <br>&gt; <br>&gt; https://github.com/dmcrodrigues/swift-evolution/blob/proposal/invert-order-of-pattern-match-operator/proposals/NNNN-invert-order-of-pattern-match-operator.md &lt;https://github.com/dmcrodrigues/swift-evolution/blob/proposal/invert-order-of-pattern-match-operator/proposals/NNNN-invert-order-of-pattern-match-operator.md&gt;.<br>&gt; <br>&gt; Any feedback is very welcome.<br>&gt; <br>&gt; Thank you.<br>&gt; <br>&gt; David Rodrigues<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160408/0ce00cb0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Proposal] Invert the order of pattern match operator</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>April  8, 2016 at 03:00:00am</p></header><div class="content"><p>&gt; Can someone fill me in as to how this differs from (0…4).contains(x)?<br>&gt; <br>&gt; Personally I don’t like the choice for the operator, and think it’s not very clear, if we can do the same thing with a method then I’d prefer removing the operator to be honest.<br></p><p>~= is the way you customize how a type behaves when it&#39;s a pattern in a switch statement. So ~= (_: Range&lt;T&gt;, _: T) is responsible for making `case 1..&lt;10` work properly. Removing it would be...unwise.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Proposal] Invert the order of pattern match operator</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>April  8, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On 8 Apr 2016, at 11:32, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt; Can someone fill me in as to how this differs from (0…4).contains(x)?<br>&gt;&gt; <br>&gt;&gt; Personally I don’t like the choice for the operator, and think it’s not very clear, if we can do the same thing with a method then I’d prefer removing the operator to be honest.<br>&gt; <br>&gt; ~= is the way you customize how a type behaves when it&#39;s a pattern in a switch statement. So ~= (_: Range&lt;T&gt;, _: T) is responsible for making `case 1..&lt;10` work properly. Removing it would be…unwise.<br></p><p>But why not just (1..&lt;10).contains(x) behind the scenes instead? This could be redefined as a protocol or whatever. It’s just kind of strange as an operator, and as the OP said not especially well known.<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
