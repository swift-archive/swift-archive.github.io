<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>January 18, 2016 at 08:00:00am</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of “Referencing the Objective-C selector of a method” begins now and runs through January 23, 2016. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p><br>	• What is your evaluation of the proposal?<br>	• Is the problem being addressed significant enough to warrant a change to Swift?<br>	• Does this proposal fit well with the feel and direction of Swift?<br>	• If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Joe<br></p><p>Review Manager<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution-announce/attachments/20160118/308b009f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>January 18, 2016 at 01:00:00pm</p></header><div class="content"><p># What is your evaluation of the proposal?<br></p><p>I support it.<br></p><p># Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>One great advantage of being able to name a selector from a method is that tools can tell that some method from some class is being used as a callback. It can&#39;t tell that just from a selector string. This will be useful for refactoring tools.<br></p><p>I think that selectors are going to die a very slow death, so we might as well have decent support for them.<br></p><p># Does this proposal fit well with the feel and direction of Swift?<br></p><p>I guess?<br></p><p># If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Selectors are pretty unique to Objective-C.<br></p><p># How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I read the proposal and was already convinced. I followed a little bit of discussion and everything looked good.<br></p><p>Félix<br></p><p>&gt; Le 18 janv. 2016 à 11:02:27, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of “Referencing the Objective-C selector of a method” begins now and runs through January 23, 2016. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md&gt;<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; <br>&gt; 	• What is your evaluation of the proposal?<br>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	• If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Joe<br>&gt; <br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160118/71a5832d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c0eafab7106ab63b8db4025e57c1a8d2?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>Javier Soto</string> &lt;javier.api at gmail.com&gt;<p>January 18, 2016 at 06:00:00pm</p></header><div class="content"><p>What is your evaluation of the proposal?<br>Strong +1. The syntax is clear and obvious, without looking at<br>documentation, one could almost guess it, and that&#39;s always great.<br></p><p>• Is the problem being addressed significant enough to warrant a change to<br>Swift?<br>Yup! Using objective-c APIs is still the bread and butter in Apple&#39;s<br>platforms, where a lot of Swift code is written. Stringly-typed selectors<br>are incredibly fragile. The target-selector pattern will still feel a bit<br>foreign in Swift, but this will at least make it look like we&#39;re passing a<br>partially-applied function.<br></p><p>• Does this proposal fit well with the feel and direction of Swift?<br>Yes, particularly with the proposed syntax to name any function.<br></p><p>• How much effort did you put into your review? A glance, a quick reading,<br>or an in-depth study?<br>I followed the discussion on the topic prior to the proposal these past<br>weeks, and read the proposal from begging to end.<br>On Mon, Jan 18, 2016 at 10:21 AM Félix Cloutier &lt;swift-evolution at swift.org&gt;<br>wrote:<br></p><p>&gt; # What is your evaluation of the proposal?<br>&gt;<br>&gt; I support it.<br>&gt;<br>&gt; # Is the problem being addressed significant enough to warrant a change to<br>&gt; Swift?<br>&gt;<br>&gt; One great advantage of being able to name a selector from a method is that<br>&gt; tools can tell that some method from some class is being used as a<br>&gt; callback. It can&#39;t tell that just from a selector string. This will be<br>&gt; useful for refactoring tools.<br>&gt;<br>&gt; I think that selectors are going to die a very slow death, so we might as<br>&gt; well have decent support for them.<br>&gt;<br>&gt; # Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>&gt; I guess?<br>&gt;<br>&gt; # If you have you used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;<br>&gt; Selectors are pretty unique to Objective-C.<br>&gt;<br>&gt; # How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt;<br>&gt; I read the proposal and was already convinced. I followed a little bit of<br>&gt; discussion and everything looked good.<br>&gt;<br>&gt;<br>&gt; Félix<br>&gt;<br>&gt; Le 18 janv. 2016 à 11:02:27, Joe Groff via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of “Referencing the Objective-C selector of a method” begins<br>&gt; now and runs through January 23, 2016. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt;<br>&gt; *What goes into a review?*<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt; • What is your evaluation of the proposal?<br>&gt; • Is the problem being addressed significant enough to warrant a change to<br>&gt; Swift?<br>&gt; • Does this proposal fit well with the feel and direction of Swift?<br>&gt; • If you have you used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt; • How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Joe<br>&gt;<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-- <br>Javier Soto<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160118/dec23cc0/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d5ada5f318f38f99b9d0a5d88284743a?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>Nick Shelley</string> &lt;nickmshelley at gmail.com&gt;<p>January 18, 2016 at 11:00:00am</p></header><div class="content"><p>+1<br></p><p>Over the weekend I converted a `canPerformAction` method for<br>UIMenuController actions from Objective-C to Swift and was sad that the<br>compiler was helpful in Objective-C (with @selector syntax) but not in<br>Swift. Anything that makes code less Stringly typed is a good thing in my<br>opinion.<br></p><p>I only did a quick reading of the proposal and didn&#39;t follow any discussion<br>beforehand.<br></p><p>On Mon, Jan 18, 2016 at 9:02 AM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of “Referencing the Objective-C selector of a method” begins<br>&gt; now and runs through January 23, 2016. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt;<br>&gt; *What goes into a review?*<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt; • What is your evaluation of the proposal?<br>&gt; • Is the problem being addressed significant enough to warrant a change to<br>&gt; Swift?<br>&gt; • Does this proposal fit well with the feel and direction of Swift?<br>&gt; • If you have you used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt; • How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Joe<br>&gt;<br>&gt; Review Manager<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160118/77700740/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>January 19, 2016 at 02:00:00pm</p></header><div class="content"><p>We discussed this proposal during our core team review meeting, and concerns were raised about the implementability of the proposed &#39;Selector(Type.method)&#39; syntax. Producing the selector is something that can&#39;t quite be modeled as a real initializer, so the type checker would have to perform heroics to disambiguate a selector literal reference from a proper initializer call. We recommend reconsidering alternative syntactic forms for referencing the selector. Potential options include:<br></p><p>- A unique prefix identifier, such as `objc_selector(Type.method)`, as you had originally proposed, or<br>- Taking advantage of the fact that functions don&#39;t have members to ascribe special behavior to &#39;Type.method.objcSelector&#39;, or something like it.<br></p><p>-Joe<br></p><p>&gt; On Jan 18, 2016, at 8:02 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of “Referencing the Objective-C selector of a method” begins now and runs through January 23, 2016. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md&gt;<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; <br>&gt; 	• What is your evaluation of the proposal?<br>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	• If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Joe<br>&gt; <br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160119/33b22b8c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>January 19, 2016 at 11:00:00pm</p></header><div class="content"><p>What effect would that have? Would the options still return a type (Selector) that is CustomStringConvertible or would it just be compiler magic?<br>David.<br></p><p>&gt; On 19 Jan 2016, at 23:43, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; We discussed this proposal during our core team review meeting, and concerns were raised about the implementability of the proposed &#39;Selector(Type.method)&#39; syntax. Producing the selector is something that can&#39;t quite be modeled as a real initializer, so the type checker would have to perform heroics to disambiguate a selector literal reference from a proper initializer call. We recommend reconsidering alternative syntactic forms for referencing the selector. Potential options include:<br>&gt; <br>&gt; - A unique prefix identifier, such as `objc_selector(Type.method)`, as you had originally proposed, or<br>&gt; - Taking advantage of the fact that functions don&#39;t have members to ascribe special behavior to &#39;Type.method.objcSelector&#39;, or something like it.<br>&gt; <br>&gt; -Joe<br>&gt; <br>&gt;&gt; On Jan 18, 2016, at 8:02 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of “Referencing the Objective-C selector of a method” begins now and runs through January 23, 2016. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md&gt;<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 	• What is your evaluation of the proposal?<br>&gt;&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	• If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt;&gt; <br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160119/5b68a6de/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>January 19, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Jan 19, 2016, at 2:46 PM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt; <br>&gt; What effect would that have? Would the options still return a type (Selector) that is CustomStringConvertible or would it just be compiler magic?<br>&gt; David.<br></p><p>There&#39;s some compiler magic necessary no matter what, since it isn&#39;t otherwise possible to go from a function reference to a name within the language. Selector itself will remain printable AFAIK (however, the way it prints will become somewhat misleading to Swift code, as the Swift mapping of APIs diverges from ObjC). We&#39;ll likely want to phase out its StringLiteralConvertible-ness, though.<br></p><p>-Joe<br></p><p>&gt; <br>&gt;&gt; On 19 Jan 2016, at 23:43, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; We discussed this proposal during our core team review meeting, and concerns were raised about the implementability of the proposed &#39;Selector(Type.method)&#39; syntax. Producing the selector is something that can&#39;t quite be modeled as a real initializer, so the type checker would have to perform heroics to disambiguate a selector literal reference from a proper initializer call. We recommend reconsidering alternative syntactic forms for referencing the selector. Potential options include:<br>&gt;&gt; <br>&gt;&gt; - A unique prefix identifier, such as `objc_selector(Type.method)`, as you had originally proposed, or<br>&gt;&gt; - Taking advantage of the fact that functions don&#39;t have members to ascribe special behavior to &#39;Type.method.objcSelector&#39;, or something like it.<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 18, 2016, at 8:02 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The review of “Referencing the Objective-C selector of a method” begins now and runs through January 23, 2016. The proposal is available here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	• What is your evaluation of the proposal?<br>&gt;&gt;&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; 	• If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160119/44708dc3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>January 19, 2016 at 02:00:00pm</p></header><div class="content"><p>Is it any more feasible to allow<br></p><p>    let sel: Selector = UIView.insertSubview(_:belowSubview:)<br></p><p>than it is to allow<br></p><p>    let sel = Selector(UIView.insertSubview(_:belowSubview:))<br></p><p>?<br></p><p>On Tue, Jan 19, 2016 at 2:50 PM, Joe Groff via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On Jan 19, 2016, at 2:46 PM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt;<br>&gt; What effect would that have? Would the options still return a type<br>&gt; (Selector) that is CustomStringConvertible or would it just be compiler<br>&gt; magic?<br>&gt; David.<br>&gt;<br>&gt;<br>&gt; There&#39;s some compiler magic necessary no matter what, since it isn&#39;t<br>&gt; otherwise possible to go from a function reference to a name within the<br>&gt; language. Selector itself will remain printable AFAIK (however, the way it<br>&gt; prints will become somewhat misleading to Swift code, as the Swift mapping<br>&gt; of APIs diverges from ObjC). We&#39;ll likely want to phase out its<br>&gt; StringLiteralConvertible-ness, though.<br>&gt;<br>&gt; -Joe<br>&gt;<br>&gt;<br>&gt; On 19 Jan 2016, at 23:43, Joe Groff via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; We discussed this proposal during our core team review meeting, and<br>&gt; concerns were raised about the implementability of the proposed<br>&gt; &#39;Selector(Type.method)&#39; syntax. Producing the selector is something that<br>&gt; can&#39;t quite be modeled as a real initializer, so the type checker would<br>&gt; have to perform heroics to disambiguate a selector literal reference from a<br>&gt; proper initializer call. We recommend reconsidering alternative syntactic<br>&gt; forms for referencing the selector. Potential options include:<br>&gt;<br>&gt; - A unique prefix identifier, such as `objc_selector(Type.method)`, as you<br>&gt; had originally proposed, or<br>&gt; - Taking advantage of the fact that functions don&#39;t have members to<br>&gt; ascribe special behavior to &#39;Type.method.objcSelector&#39;, or something like<br>&gt; it.<br>&gt;<br>&gt; -Joe<br>&gt;<br>&gt; On Jan 18, 2016, at 8:02 AM, Joe Groff via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of “Referencing the Objective-C selector of a method” begins<br>&gt; now and runs through January 23, 2016. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt;<br>&gt; *What goes into a review?*<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt; • What is your evaluation of the proposal?<br>&gt; • Is the problem being addressed significant enough to warrant a change to<br>&gt; Swift?<br>&gt; • Does this proposal fit well with the feel and direction of Swift?<br>&gt; • If you have you used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt; • How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Joe<br>&gt;<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160119/9891931f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>January 19, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Jan 19, 2016, at 2:56 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt; Is it any more feasible to allow<br>&gt; <br>&gt;     let sel: Selector = UIView.insertSubview(_:belowSubview:)<br>&gt; <br>&gt; than it is to allow<br>&gt; <br>&gt;     let sel = Selector(UIView.insertSubview(_:belowSubview:))<br>&gt; <br>&gt; ?<br></p><p>It is in fact somewhat easier; we do similar things for things like block and C function pointer conversions, where we allow an implicit conversion but then do a pass to see whether the thing we reference makes sense to reference as a function pointer. However, Doug balked at making this an implicit conversion, due to the ObjC-specificness and relative rarity of selectors. Implicit conversions tend to have hard-to-predict secondary costs.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>January 19, 2016 at 06:00:00pm</p></header><div class="content"><p>What was the discussed design?<br></p><p>It seems to me that if Swift has a CustomSelectorLiteralConvertible protocol that had a required init(selectorLiteral: String) method, it shouldn&#39;t be heroically difficult to disambiguate between a string and a method reference.<br></p><p>Félix<br></p><p>&gt; Le 19 janv. 2016 à 18:01:11, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 19, 2016, at 2:56 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Is it any more feasible to allow<br>&gt;&gt; <br>&gt;&gt;    let sel: Selector = UIView.insertSubview(_:belowSubview:)<br>&gt;&gt; <br>&gt;&gt; than it is to allow<br>&gt;&gt; <br>&gt;&gt;    let sel = Selector(UIView.insertSubview(_:belowSubview:))<br>&gt;&gt; <br>&gt;&gt; ?<br>&gt; <br>&gt; It is in fact somewhat easier; we do similar things for things like block and C function pointer conversions, where we allow an implicit conversion but then do a pass to see whether the thing we reference makes sense to reference as a function pointer. However, Doug balked at making this an implicit conversion, due to the ObjC-specificness and relative rarity of selectors. Implicit conversions tend to have hard-to-predict secondary costs.<br>&gt; <br>&gt; -Joe<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160119/d33b5a80/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>January 19, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Jan 19, 2016, at 2:46 PM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt; <br>&gt; What effect would that have? Would the options still return a type (Selector) that is CustomStringConvertible or would it just be compiler magic?<br></p><p>Either way, we’ll return a Selector. The concern about “Selector(x.foo)” is that we would need special, ad hoc overload-resolution rules to decide between this magic syntax and other initializers of Selector. Making it a separate expression (“objc_selector(x.foo)”) or a special property on values of function type (“x.foo.selector”) eliminate that issue.<br></p><p>We’d love to hear everyone’s thoughts on those approaches.<br></p><p>	- Doug<br></p><p>&gt; David.<br>&gt; <br>&gt;&gt; On 19 Jan 2016, at 23:43, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; We discussed this proposal during our core team review meeting, and concerns were raised about the implementability of the proposed &#39;Selector(Type.method)&#39; syntax. Producing the selector is something that can&#39;t quite be modeled as a real initializer, so the type checker would have to perform heroics to disambiguate a selector literal reference from a proper initializer call. We recommend reconsidering alternative syntactic forms for referencing the selector. Potential options include:<br>&gt;&gt; <br>&gt;&gt; - A unique prefix identifier, such as `objc_selector(Type.method)`, as you had originally proposed, or<br>&gt;&gt; - Taking advantage of the fact that functions don&#39;t have members to ascribe special behavior to &#39;Type.method.objcSelector&#39;, or something like it.<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 18, 2016, at 8:02 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The review of “Referencing the Objective-C selector of a method” begins now and runs through January 23, 2016. The proposal is available here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	• What is your evaluation of the proposal?<br>&gt;&gt;&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; 	• If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160119/8eee9b0f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>January 19, 2016 at 04:00:00pm</p></header><div class="content"><p>I&#39;m fine with objc_selector(x.foo) or @selector(x.foo).  x.foo.selector  is<br>cute, but wouldn&#39;t this clash with property getters/setters?<br></p><p>Jacob<br></p><p>On Tue, Jan 19, 2016 at 4:21 PM, Douglas Gregor via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On Jan 19, 2016, at 2:46 PM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt;<br>&gt; What effect would that have? Would the options still return a type<br>&gt; (Selector) that is CustomStringConvertible or would it just be compiler<br>&gt; magic?<br>&gt;<br>&gt;<br>&gt; Either way, we’ll return a Selector. The concern about “Selector(x.foo)”<br>&gt; is that we would need special, ad hoc overload-resolution rules to decide<br>&gt; between this magic syntax and other initializers of Selector. Making it a<br>&gt; separate expression (“objc_selector(x.foo)”) or a special property on<br>&gt; values of function type (“x.foo.selector”) eliminate that issue.<br>&gt;<br>&gt; We’d love to hear everyone’s thoughts on those approaches.<br>&gt;<br>&gt; - Doug<br>&gt;<br>&gt; David.<br>&gt;<br>&gt; On 19 Jan 2016, at 23:43, Joe Groff via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; We discussed this proposal during our core team review meeting, and<br>&gt; concerns were raised about the implementability of the proposed<br>&gt; &#39;Selector(Type.method)&#39; syntax. Producing the selector is something that<br>&gt; can&#39;t quite be modeled as a real initializer, so the type checker would<br>&gt; have to perform heroics to disambiguate a selector literal reference from a<br>&gt; proper initializer call. We recommend reconsidering alternative syntactic<br>&gt; forms for referencing the selector. Potential options include:<br>&gt;<br>&gt; - A unique prefix identifier, such as `objc_selector(Type.method)`, as you<br>&gt; had originally proposed, or<br>&gt; - Taking advantage of the fact that functions don&#39;t have members to<br>&gt; ascribe special behavior to &#39;Type.method.objcSelector&#39;, or something like<br>&gt; it.<br>&gt;<br>&gt; -Joe<br>&gt;<br>&gt; On Jan 18, 2016, at 8:02 AM, Joe Groff via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of “Referencing the Objective-C selector of a method” begins<br>&gt; now and runs through January 23, 2016. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt;<br>&gt; *What goes into a review?*<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt; • What is your evaluation of the proposal?<br>&gt; • Is the problem being addressed significant enough to warrant a change to<br>&gt; Swift?<br>&gt; • Does this proposal fit well with the feel and direction of Swift?<br>&gt; • If you have you used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt; • How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Joe<br>&gt;<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160119/aad77e97/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>January 19, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Jan 19, 2016, at 4:33 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt; I&#39;m fine with objc_selector(x.foo) or<br></p><p><br>&gt; @selector(x.foo).<br></p><p>@selector is a no-go: @ means “attribute” in Swift.<br></p><p>&gt;  x.foo.selector  is cute, but wouldn&#39;t this clash with property getters/setters?<br></p><p>It would only be available on values of function type that refer to @objc methods or initializers. We would (still) need a different mechanism to get at the selectors of getters or setters; SE-0022 didn’t solve this problem either.<br></p><p>	- Doug<br></p><p>&gt; <br>&gt; Jacob<br>&gt; <br>&gt; On Tue, Jan 19, 2016 at 4:21 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Jan 19, 2016, at 2:46 PM, David Hart &lt;david at hartbit.com &lt;mailto:david at hartbit.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; What effect would that have? Would the options still return a type (Selector) that is CustomStringConvertible or would it just be compiler magic?<br>&gt; <br>&gt; Either way, we’ll return a Selector. The concern about “Selector(x.foo)” is that we would need special, ad hoc overload-resolution rules to decide between this magic syntax and other initializers of Selector. Making it a separate expression (“objc_selector(x.foo)”) or a special property on values of function type (“x.foo.selector”) eliminate that issue.<br>&gt; <br>&gt; We’d love to hear everyone’s thoughts on those approaches.<br>&gt; <br>&gt; 	- Doug<br>&gt; <br>&gt;&gt; David.<br>&gt;&gt; <br>&gt;&gt;&gt; On 19 Jan 2016, at 23:43, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We discussed this proposal during our core team review meeting, and concerns were raised about the implementability of the proposed &#39;Selector(Type.method)&#39; syntax. Producing the selector is something that can&#39;t quite be modeled as a real initializer, so the type checker would have to perform heroics to disambiguate a selector literal reference from a proper initializer call. We recommend reconsidering alternative syntactic forms for referencing the selector. Potential options include:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - A unique prefix identifier, such as `objc_selector(Type.method)`, as you had originally proposed, or<br>&gt;&gt;&gt; - Taking advantage of the fact that functions don&#39;t have members to ascribe special behavior to &#39;Type.method.objcSelector&#39;, or something like it.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 18, 2016, at 8:02 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The review of “Referencing the Objective-C selector of a method” begins now and runs through January 23, 2016. The proposal is available here:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	• What is your evaluation of the proposal?<br>&gt;&gt;&gt;&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt;&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt;&gt; 	• If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt;&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160119/1ebc55d1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>January 19, 2016 at 04:00:00pm</p></header><div class="content"><p>Is there a well-defined meaning for `#` ? What about #selector(x)?<br></p><p>On Tue, Jan 19, 2016 at 4:36 PM, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Jan 19, 2016, at 4:33 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; I&#39;m fine with objc_selector(x.foo) or<br>&gt;<br>&gt;<br>&gt;<br>&gt; @selector(x.foo).<br>&gt;<br>&gt;<br>&gt; @selector is a no-go: @ means “attribute” in Swift.<br>&gt;<br>&gt;  x.foo.selector  is cute, but wouldn&#39;t this clash with property<br>&gt; getters/setters?<br>&gt;<br>&gt;<br>&gt; It would only be available on values of function type that refer to @objc<br>&gt; methods or initializers. We would (still) need a different mechanism to get<br>&gt; at the selectors of getters or setters; SE-0022 didn’t solve this problem<br>&gt; either.<br>&gt;<br>&gt; - Doug<br>&gt;<br>&gt;<br>&gt; Jacob<br>&gt;<br>&gt; On Tue, Jan 19, 2016 at 4:21 PM, Douglas Gregor via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On Jan 19, 2016, at 2:46 PM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; What effect would that have? Would the options still return a type<br>&gt;&gt; (Selector) that is CustomStringConvertible or would it just be compiler<br>&gt;&gt; magic?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Either way, we’ll return a Selector. The concern about “Selector(x.foo)”<br>&gt;&gt; is that we would need special, ad hoc overload-resolution rules to decide<br>&gt;&gt; between this magic syntax and other initializers of Selector. Making it a<br>&gt;&gt; separate expression (“objc_selector(x.foo)”) or a special property on<br>&gt;&gt; values of function type (“x.foo.selector”) eliminate that issue.<br>&gt;&gt;<br>&gt;&gt; We’d love to hear everyone’s thoughts on those approaches.<br>&gt;&gt;<br>&gt;&gt; - Doug<br>&gt;&gt;<br>&gt;&gt; David.<br>&gt;&gt;<br>&gt;&gt; On 19 Jan 2016, at 23:43, Joe Groff via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; We discussed this proposal during our core team review meeting, and<br>&gt;&gt; concerns were raised about the implementability of the proposed<br>&gt;&gt; &#39;Selector(Type.method)&#39; syntax. Producing the selector is something that<br>&gt;&gt; can&#39;t quite be modeled as a real initializer, so the type checker would<br>&gt;&gt; have to perform heroics to disambiguate a selector literal reference from a<br>&gt;&gt; proper initializer call. We recommend reconsidering alternative syntactic<br>&gt;&gt; forms for referencing the selector. Potential options include:<br>&gt;&gt;<br>&gt;&gt; - A unique prefix identifier, such as `objc_selector(Type.method)`, as<br>&gt;&gt; you had originally proposed, or<br>&gt;&gt; - Taking advantage of the fact that functions don&#39;t have members to<br>&gt;&gt; ascribe special behavior to &#39;Type.method.objcSelector&#39;, or something like<br>&gt;&gt; it.<br>&gt;&gt;<br>&gt;&gt; -Joe<br>&gt;&gt;<br>&gt;&gt; On Jan 18, 2016, at 8:02 AM, Joe Groff via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hello Swift community,<br>&gt;&gt;<br>&gt;&gt; The review of “Referencing the Objective-C selector of a method” begins<br>&gt;&gt; now and runs through January 23, 2016. The proposal is available here:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md<br>&gt;&gt;<br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt;&gt; should be sent to the swift-evolution mailing list at<br>&gt;&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; or, if you would like to keep your feedback private, directly to the<br>&gt;&gt; review manager.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; *What goes into a review?*<br>&gt;&gt; The goal of the review process is to improve the proposal under review<br>&gt;&gt; through constructive criticism and, eventually, determine the direction of<br>&gt;&gt; Swift. When writing your review, here are some questions you might want to<br>&gt;&gt; answer in your review:<br>&gt;&gt;<br>&gt;&gt; • What is your evaluation of the proposal?<br>&gt;&gt; • Is the problem being addressed significant enough to warrant a change<br>&gt;&gt; to Swift?<br>&gt;&gt; • Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; • If you have you used other languages or libraries with a similar<br>&gt;&gt; feature, how do you feel that this proposal compares to those?<br>&gt;&gt; • How much effort did you put into your review? A glance, a quick<br>&gt;&gt; reading, or an in-depth study?<br>&gt;&gt;<br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;<br>&gt;&gt; Thank you,<br>&gt;&gt;<br>&gt;&gt; -Joe<br>&gt;&gt;<br>&gt;&gt; Review Manager<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160119/beefe51a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>January 19, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Jan 19, 2016, at 4:40 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt; Is there a well-defined meaning for `#` ?<br></p><p>Not yet.<br></p><p>&gt; What about #selector(x)?<br></p><p>Objective-C selector formation is a *very* narrow feature to consider stealing one of our few underused sigils.<br></p><p>	- Doug<br></p><p>&gt; <br>&gt; On Tue, Jan 19, 2016 at 4:36 PM, Douglas Gregor &lt;dgregor at apple.com &lt;mailto:dgregor at apple.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Jan 19, 2016, at 4:33 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I&#39;m fine with objc_selector(x.foo) or<br>&gt; <br>&gt; <br>&gt;&gt; @selector(x.foo).<br>&gt; <br>&gt; @selector is a no-go: @ means “attribute” in Swift.<br>&gt; <br>&gt;&gt;  x.foo.selector  is cute, but wouldn&#39;t this clash with property getters/setters?<br>&gt; <br>&gt; It would only be available on values of function type that refer to @objc methods or initializers. We would (still) need a different mechanism to get at the selectors of getters or setters; SE-0022 didn’t solve this problem either.<br>&gt; <br>&gt; 	- Doug<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Jacob<br>&gt;&gt; <br>&gt;&gt; On Tue, Jan 19, 2016 at 4:21 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 19, 2016, at 2:46 PM, David Hart &lt;david at hartbit.com &lt;mailto:david at hartbit.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What effect would that have? Would the options still return a type (Selector) that is CustomStringConvertible or would it just be compiler magic?<br>&gt;&gt; <br>&gt;&gt; Either way, we’ll return a Selector. The concern about “Selector(x.foo)” is that we would need special, ad hoc overload-resolution rules to decide between this magic syntax and other initializers of Selector. Making it a separate expression (“objc_selector(x.foo)”) or a special property on values of function type (“x.foo.selector”) eliminate that issue.<br>&gt;&gt; <br>&gt;&gt; We’d love to hear everyone’s thoughts on those approaches.<br>&gt;&gt; <br>&gt;&gt; 	- Doug<br>&gt;&gt; <br>&gt;&gt;&gt; David.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 19 Jan 2016, at 23:43, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; We discussed this proposal during our core team review meeting, and concerns were raised about the implementability of the proposed &#39;Selector(Type.method)&#39; syntax. Producing the selector is something that can&#39;t quite be modeled as a real initializer, so the type checker would have to perform heroics to disambiguate a selector literal reference from a proper initializer call. We recommend reconsidering alternative syntactic forms for referencing the selector. Potential options include:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - A unique prefix identifier, such as `objc_selector(Type.method)`, as you had originally proposed, or<br>&gt;&gt;&gt;&gt; - Taking advantage of the fact that functions don&#39;t have members to ascribe special behavior to &#39;Type.method.objcSelector&#39;, or something like it.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jan 18, 2016, at 8:02 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The review of “Referencing the Objective-C selector of a method” begins now and runs through January 23, 2016. The proposal is available here:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	• What is your evaluation of the proposal?<br>&gt;&gt;&gt;&gt;&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt;&gt;&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt;&gt;&gt; 	• If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt;&gt;&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160119/9934202c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>January 20, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Jan 19, 2016, at 4:52 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 19, 2016, at 4:40 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Is there a well-defined meaning for `#` ?<br>&gt; <br>&gt; Not yet.<br>&gt; <br>&gt;&gt; What about #selector(x)?<br>&gt; <br>&gt; Objective-C selector formation is a *very* narrow feature to consider stealing one of our few underused sigils.<br></p><p>Actually, this isn’t that much different from “#available”, in the sense that it’s a special, compiler-supported expression type for which we don’t want to necessarily steal a keyword. What do others think about “#selector”?<br></p><p>	- Doug<br></p><p><br>&gt; 	- Doug<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Tue, Jan 19, 2016 at 4:36 PM, Douglas Gregor &lt;dgregor at apple.com &lt;mailto:dgregor at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 19, 2016, at 4:33 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m fine with objc_selector(x.foo) or<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; @selector(x.foo).<br>&gt;&gt; <br>&gt;&gt; @selector is a no-go: @ means “attribute” in Swift.<br>&gt;&gt; <br>&gt;&gt;&gt;  x.foo.selector  is cute, but wouldn&#39;t this clash with property getters/setters?<br>&gt;&gt; <br>&gt;&gt; It would only be available on values of function type that refer to @objc methods or initializers. We would (still) need a different mechanism to get at the selectors of getters or setters; SE-0022 didn’t solve this problem either.<br>&gt;&gt; <br>&gt;&gt; 	- Doug<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jacob<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Tue, Jan 19, 2016 at 4:21 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 19, 2016, at 2:46 PM, David Hart &lt;david at hartbit.com &lt;mailto:david at hartbit.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What effect would that have? Would the options still return a type (Selector) that is CustomStringConvertible or would it just be compiler magic?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Either way, we’ll return a Selector. The concern about “Selector(x.foo)” is that we would need special, ad hoc overload-resolution rules to decide between this magic syntax and other initializers of Selector. Making it a separate expression (“objc_selector(x.foo)”) or a special property on values of function type (“x.foo.selector”) eliminate that issue.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We’d love to hear everyone’s thoughts on those approaches.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	- Doug<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; David.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 19 Jan 2016, at 23:43, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; We discussed this proposal during our core team review meeting, and concerns were raised about the implementability of the proposed &#39;Selector(Type.method)&#39; syntax. Producing the selector is something that can&#39;t quite be modeled as a real initializer, so the type checker would have to perform heroics to disambiguate a selector literal reference from a proper initializer call. We recommend reconsidering alternative syntactic forms for referencing the selector. Potential options include:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; - A unique prefix identifier, such as `objc_selector(Type.method)`, as you had originally proposed, or<br>&gt;&gt;&gt;&gt;&gt; - Taking advantage of the fact that functions don&#39;t have members to ascribe special behavior to &#39;Type.method.objcSelector&#39;, or something like it.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jan 18, 2016, at 8:02 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The review of “Referencing the Objective-C selector of a method” begins now and runs through January 23, 2016. The proposal is available here:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 	• What is your evaluation of the proposal?<br>&gt;&gt;&gt;&gt;&gt;&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt;&gt;&gt;&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt;&gt;&gt;&gt; 	• If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt;&gt;&gt;&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt;&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160120/f8e004e5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>January 20, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On Jan 20, 2016, at 3:48 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 19, 2016, at 4:52 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 19, 2016, at 4:40 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is there a well-defined meaning for `#` ?<br>&gt;&gt; <br>&gt;&gt; Not yet.<br>&gt;&gt; <br>&gt;&gt;&gt; What about #selector(x)?<br>&gt;&gt; <br>&gt;&gt; Objective-C selector formation is a *very* narrow feature to consider stealing one of our few underused sigils.<br>&gt; <br>&gt; Actually, this isn’t that much different from “#available”, in the sense that it’s a special, compiler-supported expression type for which we don’t want to necessarily steal a keyword. What do others think about “#selector”?<br></p><p>I think that #selector is workable and fits into the model - it would be simple to implement and not cause unnecessary complexity in the implementation.<br></p><p>That said, I’m in favor of x.selector, or #selector(x).  The former seems more syntactically elegant if it is practical.<br></p><p>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160120/8969275f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>January 20, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On Jan 20, 2016, at 7:39 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 20, 2016, at 3:48 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 19, 2016, at 4:52 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 19, 2016, at 4:40 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Is there a well-defined meaning for `#` ?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Not yet.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What about #selector(x)?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Objective-C selector formation is a *very* narrow feature to consider stealing one of our few underused sigils.<br>&gt;&gt; <br>&gt;&gt; Actually, this isn’t that much different from “#available”, in the sense that it’s a special, compiler-supported expression type for which we don’t want to necessarily steal a keyword. What do others think about “#selector”?<br>&gt; <br>&gt; I think that #selector is workable and fits into the model - it would be simple to implement and not cause unnecessary complexity in the implementation.<br>&gt; <br>&gt; That said, I’m in favor of x.selector, or #selector(x).  The former seems more syntactically elegant if it is practical.<br></p><p>The latter gives us easy extensions like<br></p><p>	#selector(getter: MyType.property)<br>	#selector(setter: MyType.property)<br></p><p>#selector is sorta growing on me.<br></p><p>	- Doug<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160120/9145e32d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>January 21, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Jan 20, 2016, at 19:56, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Jan 20, 2016, at 7:39 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 20, 2016, at 3:48 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 19, 2016, at 4:52 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jan 19, 2016, at 4:40 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Is there a well-defined meaning for `#` ? <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Not yet.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; What about #selector(x)?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Objective-C selector formation is a *very* narrow feature to consider stealing one of our few underused sigils.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Actually, this isn’t that much different from “#available”, in the sense that it’s a special, compiler-supported expression type for which we don’t want to necessarily steal a keyword. What do others think about “#selector”?<br>&gt;&gt; <br>&gt;&gt; I think that #selector is workable and fits into the model - it would be simple to implement and not cause unnecessary complexity in the implementation.<br>&gt;&gt; <br>&gt;&gt; That said, I’m in favor of x.selector, or #selector(x).  The former seems more syntactically elegant if it is practical.<br>&gt; <br>&gt; The latter gives us easy extensions like<br>&gt; <br>&gt; 	#selector(getter: MyType.property)<br>&gt; 	#selector(setter: MyType.property)<br>&gt; <br>&gt; #selector is sorta growing on me.<br></p><p>+1 from me. At this point in Swift&#39;s evolution, the # feels like &quot;invoke compiler substitution logic here&quot;.<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160121/746dc0e7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>January 21, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Jan 21, 2016, at 4:13 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think that #selector is workable and fits into the model - it would be simple to implement and not cause unnecessary complexity in the implementation.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That said, I’m in favor of x.selector, or #selector(x).  The former seems more syntactically elegant if it is practical.<br>&gt;&gt; <br>&gt;&gt; The latter gives us easy extensions like<br>&gt;&gt; <br>&gt;&gt; 	#selector(getter: MyType.property)<br>&gt;&gt; 	#selector(setter: MyType.property)<br>&gt;&gt; <br>&gt;&gt; #selector is sorta growing on me.<br>&gt; <br>&gt; +1 from me. At this point in Swift&#39;s evolution, the # feels like &quot;invoke compiler substitution logic here”.<br></p><p>I agree.  Along those lines, we could consider renaming __LINE__ and friends to #LINE<br></p><p>-Chris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160121/fc3684dd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>January 21, 2016 at 10:00:00pm</p></header><div class="content"><p>+1 to setting __LINE__ (and friends) free of their unsightly upper snake case. They look like boa constrictors trying to digest a fully-swallowed keyword.<br></p><p>-- E<br></p><p>&gt; On Jan 21, 2016, at 10:04 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 21, 2016, at 4:13 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think that #selector is workable and fits into the model - it would be simple to implement and not cause unnecessary complexity in the implementation.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; That said, I’m in favor of x.selector, or #selector(x).  The former seems more syntactically elegant if it is practical.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The latter gives us easy extensions like<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	#selector(getter: MyType.property)<br>&gt;&gt;&gt; 	#selector(setter: MyType.property)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; #selector is sorta growing on me.<br>&gt;&gt; <br>&gt;&gt; +1 from me. At this point in Swift&#39;s evolution, the # feels like &quot;invoke compiler substitution logic here”.<br>&gt; <br>&gt; I agree.  Along those lines, we could consider renaming __LINE__ and friends to #LINE<br>&gt; <br>&gt; -Chris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160121/25147213/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>January 21, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Jan 21, 2016, at 9:17 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; +1 to setting __LINE__ (and friends) free of their unsightly upper snake case. They look like boa constrictors trying to digest a fully-swallowed keyword.<br></p><p>Yeah, I totally agree.  Actually, the proper spelling would simply be #line - after all, there’d be no need to shout any more…<br></p><p>-Chris<br></p><p><br>&gt; <br>&gt; -- E<br>&gt; <br>&gt;&gt; On Jan 21, 2016, at 10:04 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 21, 2016, at 4:13 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I think that #selector is workable and fits into the model - it would be simple to implement and not cause unnecessary complexity in the implementation.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; That said, I’m in favor of x.selector, or #selector(x).  The former seems more syntactically elegant if it is practical.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The latter gives us easy extensions like<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	#selector(getter: MyType.property)<br>&gt;&gt;&gt;&gt; 	#selector(setter: MyType.property)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; #selector is sorta growing on me.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; +1 from me. At this point in Swift&#39;s evolution, the # feels like &quot;invoke compiler substitution logic here”.<br>&gt;&gt; <br>&gt;&gt; I agree.  Along those lines, we could consider renaming __LINE__ and friends to #LINE<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160121/83a8e226/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>January 21, 2016 at 10:00:00pm</p></header><div class="content"><p>Okay, you know this was coming: let&#39;s Groff this thing.<br></p><p>How about #(line) where you can decouple the specific compiler implementation bits from the keyword bits without hardcoding support, enabling implementation of, for example, #(runcible) for future Swift compiler substitution logic.<br></p><p>-- E<br></p><p>&gt; On Jan 21, 2016, at 10:19 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 21, 2016, at 9:17 PM, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; +1 to setting __LINE__ (and friends) free of their unsightly upper snake case. They look like boa constrictors trying to digest a fully-swallowed keyword.<br>&gt; <br>&gt; Yeah, I totally agree.  Actually, the proper spelling would simply be #line - after all, there’d be no need to shout any more…<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; -- E<br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 21, 2016, at 10:04 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 21, 2016, at 4:13 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I think that #selector is workable and fits into the model - it would be simple to implement and not cause unnecessary complexity in the implementation.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; That said, I’m in favor of x.selector, or #selector(x).  The former seems more syntactically elegant if it is practical.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The latter gives us easy extensions like<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	#selector(getter: MyType.property)<br>&gt;&gt;&gt;&gt;&gt; 	#selector(setter: MyType.property)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; #selector is sorta growing on me.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; +1 from me. At this point in Swift&#39;s evolution, the # feels like &quot;invoke compiler substitution logic here”.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I agree.  Along those lines, we could consider renaming __LINE__ and friends to #LINE<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160121/b586d34c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Changing __LINE__ to #line (was Re: [Review] SE-0022: Referencing the Objective-C selector of a method)</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>January 21, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Jan 21, 2016, at 9:25 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Okay, you know this was coming: let&#39;s Groff this thing.<br>&gt; <br>&gt; How about #(line) where you can decouple the specific compiler implementation bits from the keyword bits without hardcoding support, enabling implementation of, for example, #(runcible) for future Swift compiler substitution logic.<br></p><p>If you&#39;re going to bring me into it…I would prefer coalescing all these __FILE__, __LINE__, etc. things into one #sourceLocation structure. If you want one source-location-related thing, you tend to want the others, and you also want to be able to forward the source location info easily through the depths of your assertion/logging framework.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Changing __LINE__ to #line (was Re: [Review] SE-0022: Referencing the Objective-C selector of a method)</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>January 21, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On Jan 21, 2016, at 10:44 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 21, 2016, at 9:25 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Okay, you know this was coming: let&#39;s Groff this thing.<br>&gt;&gt; <br>&gt;&gt; How about #(line) where you can decouple the specific compiler implementation bits from the keyword bits without hardcoding support, enabling implementation of, for example, #(runcible) for future Swift compiler substitution logic.<br>&gt; <br>&gt; If you&#39;re going to bring me into it…I would prefer coalescing all these __FILE__, __LINE__, etc. things into one #sourceLocation structure. If you want one source-location-related thing, you tend to want the others, and you also want to be able to forward the source location info easily through the depths of your assertion/logging framework.<br>&gt; <br>&gt; -Joe<br></p><p><br>https://bugs.swift.org/browse/SR-198 &lt;https://bugs.swift.org/browse/SR-198&gt;<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160121/69c943e4/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Changing __LINE__ to #line (was Re: [Review] SE-0022: Referencing the Objective-C selector of a method)</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>January 22, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Jan 21, 2016, at 21:44, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 21, 2016, at 9:25 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Okay, you know this was coming: let&#39;s Groff this thing.<br>&gt;&gt; <br>&gt;&gt; How about #(line) where you can decouple the specific compiler implementation bits from the keyword bits without hardcoding support, enabling implementation of, for example, #(runcible) for future Swift compiler substitution logic.<br>&gt; <br>&gt; If you&#39;re going to bring me into it…I would prefer coalescing all these __FILE__, __LINE__, etc. things into one #sourceLocation structure. If you want one source-location-related thing, you tend to want the others, and you also want to be able to forward the source location info easily through the depths of your assertion/logging framework.<br></p><p>The downside is that this becomes Yet Another Compiler-Known Type and Yet Another Thing In the Standard Library. All the current fields are string literals and integer literals.<br></p><p>Jordan<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Changing __LINE__ to #line (was Re: [Review] SE-0022: Referencing the Objective-C selector of a method)</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>January 22, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Jan 22, 2016, at 11:42 AM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 21, 2016, at 21:44, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 21, 2016, at 9:25 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Okay, you know this was coming: let&#39;s Groff this thing.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; How about #(line) where you can decouple the specific compiler implementation bits from the keyword bits without hardcoding support, enabling implementation of, for example, #(runcible) for future Swift compiler substitution logic.<br>&gt;&gt; <br>&gt;&gt; If you&#39;re going to bring me into it…I would prefer coalescing all these __FILE__, __LINE__, etc. things into one #sourceLocation structure. If you want one source-location-related thing, you tend to want the others, and you also want to be able to forward the source location info easily through the depths of your assertion/logging framework.<br>&gt; <br>&gt; The downside is that this becomes Yet Another Compiler-Known Type and Yet Another Thing In the Standard Library. All the current fields are string literals and integer literals.<br></p><p>True, though we could make it a tuple or invent a new SourceLocLiteralConvertible protocol. However, Andrew Bennett suggested an interesting approach in https://bugs.swift.org/browse/SR-198:<br></p><p>public struct SourceLocation {<br>    init(file: String = __FILE__, line: Int = __LINE__, column: Int = __COLUMN__, function: String = __FUNCTION__) {<br>        self.file = file<br>        self.line = line<br>        self.column = column<br>        self.function = function<br>    }<br></p><p>    public var file: String<br>    public var line: Int<br>    public var column: Int<br>    public var function: String<br>}<br></p><p>If we apply the default argument rules for #line, #column, etc. at depth, so that if you use &#39;SourceLocation()&#39; as a default parameter you get the caller&#39;s source location as default arguments to SourceLocation(), then you could build aggregate source location structures from the primitives we have today.<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160122/8eec1e13/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Changing __LINE__ to #line (was Re: [Review] SE-0022: Referencing the Objective-C selector of a method)</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>January 22, 2016 at 04:00:00pm</p></header><div class="content"><p>It&#39;s only a &quot;compiler-known type&quot; if it&#39;s defined that way. What&#39;s wrong with just a regular tuple?<br>#location = (path: __FILE__, line: __LINE__, column: __COLUMN__, function: __FUNCTION__)<br></p><p>- Dave Sweeris<br></p><p>&gt; On Jan 22, 2016, at 11:42, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 21, 2016, at 21:44, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 21, 2016, at 9:25 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Okay, you know this was coming: let&#39;s Groff this thing.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; How about #(line) where you can decouple the specific compiler implementation bits from the keyword bits without hardcoding support, enabling implementation of, for example, #(runcible) for future Swift compiler substitution logic.<br>&gt;&gt; <br>&gt;&gt; If you&#39;re going to bring me into it…I would prefer coalescing all these __FILE__, __LINE__, etc. things into one #sourceLocation structure. If you want one source-location-related thing, you tend to want the others, and you also want to be able to forward the source location info easily through the depths of your assertion/logging framework.<br>&gt; <br>&gt; The downside is that this becomes Yet Another Compiler-Known Type and Yet Another Thing In the Standard Library. All the current fields are string literals and integer literals.<br>&gt; <br>&gt; Jordan<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Changing __LINE__ to #line (was Re: [Review] SE-0022: Referencing the Objective-C selector of a method)</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>January 22, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Jan 22, 2016, at 4:21 PM, David Sweeris via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; It&#39;s only a &quot;compiler-known type&quot; if it&#39;s defined that way. What&#39;s wrong with just a regular tuple?<br>&gt; #location = (path: __FILE__, line: __LINE__, column: __COLUMN__, function: __FUNCTION__)<br></p><p>This would make sense to me.  One complexity here is that you’d want to use:<br></p><p>func f(a : Int = #location.line) {}<br></p><p>and our default argument model doesn’t support that.  A default argument is either an expression, or one of these magic __LINE__ indicators.  They aren’t really first-class values.<br></p><p>-Chris<br></p><p>&gt; <br>&gt; - Dave Sweeris<br>&gt; <br>&gt;&gt; On Jan 22, 2016, at 11:42, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 21, 2016, at 21:44, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 21, 2016, at 9:25 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Okay, you know this was coming: let&#39;s Groff this thing.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; How about #(line) where you can decouple the specific compiler implementation bits from the keyword bits without hardcoding support, enabling implementation of, for example, #(runcible) for future Swift compiler substitution logic.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If you&#39;re going to bring me into it…I would prefer coalescing all these __FILE__, __LINE__, etc. things into one #sourceLocation structure. If you want one source-location-related thing, you tend to want the others, and you also want to be able to forward the source location info easily through the depths of your assertion/logging framework.<br>&gt;&gt; <br>&gt;&gt; The downside is that this becomes Yet Another Compiler-Known Type and Yet Another Thing In the Standard Library. All the current fields are string literals and integer literals.<br>&gt;&gt; <br>&gt;&gt; Jordan<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Changing __LINE__ to #line (was Re: [Review] SE-0022: Referencing the Objective-C selector of a method)</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>January 22, 2016 at 04:00:00pm</p></header><div class="content"><p>This might be worse than what you’re describing, but how much compiler overhead is there in having #calledFromLocation and #currentLocation defined? I *think* the compiler could optimize them away of they aren’t used in any given function, but you’d know way more about that than I would.<br></p><p>- Dave Sweeris<br></p><p>&gt; On Jan 22, 2016, at 16:31, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 22, 2016, at 4:21 PM, David Sweeris via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; It&#39;s only a &quot;compiler-known type&quot; if it&#39;s defined that way. What&#39;s wrong with just a regular tuple?<br>&gt;&gt; #location = (path: __FILE__, line: __LINE__, column: __COLUMN__, function: __FUNCTION__)<br>&gt; <br>&gt; This would make sense to me.  One complexity here is that you’d want to use:<br>&gt; <br>&gt; func f(a : Int = #location.line) {}<br>&gt; <br>&gt; and our default argument model doesn’t support that.  A default argument is either an expression, or one of these magic __LINE__ indicators.  They aren’t really first-class values.<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt;&gt; <br>&gt;&gt; - Dave Sweeris<br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 22, 2016, at 11:42, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 21, 2016, at 21:44, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jan 21, 2016, at 9:25 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Okay, you know this was coming: let&#39;s Groff this thing.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; How about #(line) where you can decouple the specific compiler implementation bits from the keyword bits without hardcoding support, enabling implementation of, for example, #(runcible) for future Swift compiler substitution logic.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If you&#39;re going to bring me into it…I would prefer coalescing all these __FILE__, __LINE__, etc. things into one #sourceLocation structure. If you want one source-location-related thing, you tend to want the others, and you also want to be able to forward the source location info easily through the depths of your assertion/logging framework.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The downside is that this becomes Yet Another Compiler-Known Type and Yet Another Thing In the Standard Library. All the current fields are string literals and integer literals.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jordan<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>Changing __LINE__ to #line (was Re: [Review] SE-0022: Referencing the Objective-C selector of a method)</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>January 23, 2016 at 12:00:00pm</p></header><div class="content"><p>I think `#location` (or similar) as a tuple is much nicer than having<br>several `___SOMETHING___`s. I think a solution that doesn&#39;t exploit default<br>arguments is better, especially if it can reduce the number of reserved<br>words (not that I expect anyone to accidentally call something `__LINE__`.<br></p><p>I think Chris&#39; point about accessing fields on the default argument needs<br>to be addressed before a tuple is a workable solution.<br></p><p>Another reason to not use a tuple (yet) is that the labels on the tuple are<br>insufficient to distinguish it, and/or Swift doesn&#39;t yet let you add an<br>extension to a tuple type.<br></p><p>This is a contrived example (I skipped part of the tuple for brevity):<br></p><p>typealias SourceLocation = (line: Int, file: String)<br></p><p>typealias RepeatConfig   = (count: Int, string: String)<br></p><p>func print(location: SourceLocation) {<br></p><p>    print(&quot;\(location.file):\(location.line)&quot;)<br></p><p>}<br></p><p>func print(config: RepeatConfig) {<br></p><p>    for _ in 1 ... config.count { print(config.string) }<br></p><p>}<br></p><p>print((1,&quot;this is ambiguous&quot;))<br></p><p><br>This results in a compile-time error:<br></p><p>extension SourceLocation {<br></p><p>    var stringForError: String {<br></p><p>        return &quot;\(self.file):\(self.line)&quot;<br></p><p>    }<br></p><p>}<br></p><p><br>Error:<br></p><p>*non-nominal type &#39;SourceLocation&#39; (aka &#39;(line: Int, file: String)&#39;) cannot<br>be extended*<br></p><p><br></p><p>On Sat, Jan 23, 2016 at 11:31 AM, Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Jan 22, 2016, at 4:21 PM, David Sweeris via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; It&#39;s only a &quot;compiler-known type&quot; if it&#39;s defined that way. What&#39;s wrong<br>&gt; with just a regular tuple?<br>&gt; &gt; #location = (path: __FILE__, line: __LINE__, column: __COLUMN__,<br>&gt; function: __FUNCTION__)<br>&gt;<br>&gt; This would make sense to me.  One complexity here is that you’d want to<br>&gt; use:<br>&gt;<br>&gt; func f(a : Int = #location.line) {}<br>&gt;<br>&gt; and our default argument model doesn’t support that.  A default argument<br>&gt; is either an expression, or one of these magic __LINE__ indicators.  They<br>&gt; aren’t really first-class values.<br>&gt;<br>&gt; -Chris<br>&gt;<br>&gt; &gt;<br>&gt; &gt; - Dave Sweeris<br>&gt; &gt;<br>&gt; &gt;&gt; On Jan 22, 2016, at 11:42, Jordan Rose via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; On Jan 21, 2016, at 21:44, Joe Groff via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; On Jan 21, 2016, at 9:25 PM, Erica Sadun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; Okay, you know this was coming: let&#39;s Groff this thing.<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; How about #(line) where you can decouple the specific compiler<br>&gt; implementation bits from the keyword bits without hardcoding support,<br>&gt; enabling implementation of, for example, #(runcible) for future Swift<br>&gt; compiler substitution logic.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; If you&#39;re going to bring me into it…I would prefer coalescing all<br>&gt; these __FILE__, __LINE__, etc. things into one #sourceLocation structure.<br>&gt; If you want one source-location-related thing, you tend to want the others,<br>&gt; and you also want to be able to forward the source location info easily<br>&gt; through the depths of your assertion/logging framework.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; The downside is that this becomes Yet Another Compiler-Known Type and<br>&gt; Yet Another Thing In the Standard Library. All the current fields are<br>&gt; string literals and integer literals.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Jordan<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160123/29282562/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>January 21, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Jan 21, 2016, at 9:25 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Okay, you know this was coming: let&#39;s Groff this thing.<br>&gt; <br>&gt; How about #(line) where you can decouple the specific compiler implementation bits from the keyword bits without hardcoding support, enabling implementation of, for example, #(runcible) for future Swift compiler substitution logic.<br></p><p>The compiler can parse <br></p><p>	#identifier<br></p><p>or<br></p><p>	#identifier(balanaced-set-of-tokens)<br></p><p>without knowing what the identifier is going to be. One could imagine that as a way to, say, expand a macro in some as-yet-undesigned macro system. #available, #selector, #line, #column, etc. are merely short-term hacks until such a macro system gets designed.<br></p><p>I’m supportive of sharpening the boa constrictors to #line, #column, etc., but I’m too design-fatigued to write it up. Any takers?<br></p><p>	- Doug<br></p><p>&gt; <br>&gt; -- E<br>&gt; <br>&gt;&gt; On Jan 21, 2016, at 10:19 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 21, 2016, at 9:17 PM, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; +1 to setting __LINE__ (and friends) free of their unsightly upper snake case. They look like boa constrictors trying to digest a fully-swallowed keyword.<br>&gt;&gt; <br>&gt;&gt; Yeah, I totally agree.  Actually, the proper spelling would simply be #line - after all, there’d be no need to shout any more…<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- E<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 21, 2016, at 10:04 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jan 21, 2016, at 4:13 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think that #selector is workable and fits into the model - it would be simple to implement and not cause unnecessary complexity in the implementation.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; That said, I’m in favor of x.selector, or #selector(x).  The former seems more syntactically elegant if it is practical.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The latter gives us easy extensions like<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 	#selector(getter: MyType.property)<br>&gt;&gt;&gt;&gt;&gt;&gt; 	#selector(setter: MyType.property)<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; #selector is sorta growing on me.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; +1 from me. At this point in Swift&#39;s evolution, the # feels like &quot;invoke compiler substitution logic here”.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I agree.  Along those lines, we could consider renaming __LINE__ and friends to #LINE<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160121/31aaebd6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>January 21, 2016 at 10:00:00pm</p></header><div class="content"><p>If no one who is actually qualified jumps in, I can take a stab at starting it.<br></p><p>-- E, heading off to bed, and dreaming of screaming snake-case keywords on small planets with small Swift-powered volcanos for cooking breakfast<br></p><p><br>&gt; On Jan 21, 2016, at 10:47 PM, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 21, 2016, at 9:25 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Okay, you know this was coming: let&#39;s Groff this thing.<br>&gt;&gt; <br>&gt;&gt; How about #(line) where you can decouple the specific compiler implementation bits from the keyword bits without hardcoding support, enabling implementation of, for example, #(runcible) for future Swift compiler substitution logic.<br>&gt; <br>&gt; The compiler can parse <br>&gt; <br>&gt; 	#identifier<br>&gt; <br>&gt; or<br>&gt; <br>&gt; 	#identifier(balanaced-set-of-tokens)<br>&gt; <br>&gt; without knowing what the identifier is going to be. One could imagine that as a way to, say, expand a macro in some as-yet-undesigned macro system. #available, #selector, #line, #column, etc. are merely short-term hacks until such a macro system gets designed.<br>&gt; <br>&gt; I’m supportive of sharpening the boa constrictors to #line, #column, etc., but I’m too design-fatigued to write it up. Any takers?<br>&gt; <br>&gt; 	- Doug<br>&gt; <br>&gt;&gt; <br>&gt;&gt; -- E<br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 21, 2016, at 10:19 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 21, 2016, at 9:17 PM, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; +1 to setting __LINE__ (and friends) free of their unsightly upper snake case. They look like boa constrictors trying to digest a fully-swallowed keyword.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yeah, I totally agree.  Actually, the proper spelling would simply be #line - after all, there’d be no need to shout any more…<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- E<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jan 21, 2016, at 10:04 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jan 21, 2016, at 4:13 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think that #selector is workable and fits into the model - it would be simple to implement and not cause unnecessary complexity in the implementation.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; That said, I’m in favor of x.selector, or #selector(x).  The former seems more syntactically elegant if it is practical.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; The latter gives us easy extensions like<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 	#selector(getter: MyType.property)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 	#selector(setter: MyType.property)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; #selector is sorta growing on me.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; +1 from me. At this point in Swift&#39;s evolution, the # feels like &quot;invoke compiler substitution logic here”.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I agree.  Along those lines, we could consider renaming __LINE__ and friends to #LINE<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160121/8a4a0ee7/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>January 22, 2016 at 08:00:00pm</p></header><div class="content"><p>What about other compiler hacks that begin with @? Like @objc ?<br></p><p>Sent from my iPhone<br></p><p>&gt; On 22 Jan 2016, at 05:19, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 21, 2016, at 9:17 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; +1 to setting __LINE__ (and friends) free of their unsightly upper snake case. They look like boa constrictors trying to digest a fully-swallowed keyword.<br>&gt; <br>&gt; Yeah, I totally agree.  Actually, the proper spelling would simply be #line - after all, there’d be no need to shout any more…<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; -- E<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 21, 2016, at 10:04 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 21, 2016, at 4:13 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I think that #selector is workable and fits into the model - it would be simple to implement and not cause unnecessary complexity in the implementation.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; That said, I’m in favor of x.selector, or #selector(x).  The former seems more syntactically elegant if it is practical.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The latter gives us easy extensions like<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	#selector(getter: MyType.property)<br>&gt;&gt;&gt;&gt;&gt; 	#selector(setter: MyType.property)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; #selector is sorta growing on me.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; +1 from me. At this point in Swift&#39;s evolution, the # feels like &quot;invoke compiler substitution logic here”.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I agree.  Along those lines, we could consider renaming __LINE__ and friends to #LINE<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160122/4e2ec713/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>January 22, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jan 22, 2016, at 12:03 PM, James Campbell &lt;james at supmenow.com&gt; wrote:<br>&gt; <br>&gt; What about other compiler hacks that begin with @? Like @objc ?<br></p><p>@ is for attributes.  This is an expression.<br></p><p>-Chris<br></p><p><br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt; On 22 Jan 2016, at 05:19, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 21, 2016, at 9:17 PM, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; +1 to setting __LINE__ (and friends) free of their unsightly upper snake case. They look like boa constrictors trying to digest a fully-swallowed keyword.<br>&gt;&gt; <br>&gt;&gt; Yeah, I totally agree.  Actually, the proper spelling would simply be #line - after all, there’d be no need to shout any more…<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- E<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 21, 2016, at 10:04 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jan 21, 2016, at 4:13 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think that #selector is workable and fits into the model - it would be simple to implement and not cause unnecessary complexity in the implementation.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; That said, I’m in favor of x.selector, or #selector(x).  The former seems more syntactically elegant if it is practical.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The latter gives us easy extensions like<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 	#selector(getter: MyType.property)<br>&gt;&gt;&gt;&gt;&gt;&gt; 	#selector(setter: MyType.property)<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; #selector is sorta growing on me.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; +1 from me. At this point in Swift&#39;s evolution, the # feels like &quot;invoke compiler substitution logic here”.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I agree.  Along those lines, we could consider renaming __LINE__ and friends to #LINE<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160122/068086de/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>January 22, 2016 at 10:00:00pm</p></header><div class="content"><p>What about property attributes? how come some attributes don&#39;t have a @<br>like dynamic or lazy and others do like @objc.<br></p><p><br></p><p>*___________________________________*<br></p><p>*James⎥Lead Engineer*<br></p><p>*james at supmenow.com &lt;james at supmenow.com&gt;⎥supmenow.com &lt;http://supmenow.com&gt;*<br></p><p>*Sup*<br></p><p>*Runway East *<br></p><p>*10 Finsbury Square*<br></p><p>*London*<br></p><p>* EC2A 1AF *<br></p><p>On Fri, Jan 22, 2016 at 9:36 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Jan 22, 2016, at 12:03 PM, James Campbell &lt;james at supmenow.com&gt; wrote:<br>&gt;<br>&gt; What about other compiler hacks that begin with @? Like @objc ?<br>&gt;<br>&gt;<br>&gt; @ is for attributes.  This is an expression.<br>&gt;<br>&gt; -Chris<br>&gt;<br>&gt;<br>&gt;<br>&gt; Sent from my iPhone<br>&gt;<br>&gt; On 22 Jan 2016, at 05:19, Chris Lattner via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Jan 21, 2016, at 9:17 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;<br>&gt; +1 to setting __LINE__ (and friends) free of their unsightly upper snake<br>&gt; case. They look like boa constrictors trying to digest a fully-swallowed<br>&gt; keyword.<br>&gt;<br>&gt;<br>&gt; Yeah, I totally agree.  Actually, the proper spelling would simply be<br>&gt; #line - after all, there’d be no need to shout any more…<br>&gt;<br>&gt; -Chris<br>&gt;<br>&gt;<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt; On Jan 21, 2016, at 10:04 PM, Chris Lattner via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Jan 21, 2016, at 4:13 PM, Jordan Rose via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; I think that #selector is workable and fits into the model - it would be<br>&gt; simple to implement and not cause unnecessary complexity in the<br>&gt; implementation.<br>&gt;<br>&gt; That said, I’m in favor of x.selector, or #selector(x).  The former seems<br>&gt; more syntactically elegant if it is practical.<br>&gt;<br>&gt;<br>&gt; The latter gives us easy extensions like<br>&gt;<br>&gt; #selector(getter: MyType.property)<br>&gt; #selector(setter: MyType.property)<br>&gt;<br>&gt; #selector is sorta growing on me.<br>&gt;<br>&gt;<br>&gt; +1 from me. At this point in Swift&#39;s evolution, the # feels like &quot;invoke<br>&gt; compiler substitution logic here”.<br>&gt;<br>&gt;<br>&gt; I agree.  Along those lines, we could consider renaming __LINE__ and<br>&gt; friends to #LINE<br>&gt;<br>&gt; -Chris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160122/80ed6ee5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>January 22, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Jan 22, 2016, at 2:03 PM, James Campbell &lt;james at supmenow.com&gt; wrote:<br>&gt; <br>&gt; What about property attributes? how come some attributes don&#39;t have a @ like dynamic or lazy and others do like @objc.<br></p><p>I’m not sure what you’re asking.  We have a syntactic distinction between declaration modifiers and attributes, the later has an @, the former uses a context sensitive keyword.  We decide between the two based on how primal their effect is on the declaration.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>January 22, 2016 at 11:00:00pm</p></header><div class="content"><p>Just wanting to know when swift uses @, when its # and when its just a<br>normal keyword.<br></p><p>*___________________________________*<br></p><p>*James⎥Lead Engineer*<br></p><p>*james at supmenow.com &lt;james at supmenow.com&gt;⎥supmenow.com &lt;http://supmenow.com&gt;*<br></p><p>*Sup*<br></p><p>*Runway East *<br></p><p>*10 Finsbury Square*<br></p><p>*London*<br></p><p>* EC2A 1AF *<br></p><p>On Fri, Jan 22, 2016 at 10:36 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Jan 22, 2016, at 2:03 PM, James Campbell &lt;james at supmenow.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; What about property attributes? how come some attributes don&#39;t have a @<br>&gt; like dynamic or lazy and others do like @objc.<br>&gt;<br>&gt; I’m not sure what you’re asking.  We have a syntactic distinction between<br>&gt; declaration modifiers and attributes, the later has an @, the former uses a<br>&gt; context sensitive keyword.  We decide between the two based on how primal<br>&gt; their effect is on the declaration.<br>&gt;<br>&gt; -Chris<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160122/48813d4a/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>January 20, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On Jan 20, 2016, at 9:39 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Jan 20, 2016, at 3:48 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 19, 2016, at 4:52 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 19, 2016, at 4:40 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Is there a well-defined meaning for `#` ? <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Not yet.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What about #selector(x)?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Objective-C selector formation is a *very* narrow feature to consider stealing one of our few underused sigils.<br>&gt;&gt; <br>&gt;&gt; Actually, this isn’t that much different from “#available”, in the sense that it’s a special, compiler-supported expression type for which we don’t want to necessarily steal a keyword. What do others think about “#selector”?<br>&gt; <br>&gt; I think that #selector is workable and fits into the model - it would be simple to implement and not cause unnecessary complexity in the implementation.<br>&gt; <br>&gt; That said, I’m in favor of x.selector, or #selector(x).  The former seems more syntactically elegant if it is practical.<br></p><p>Why not x.#selector? This would still be more elegant than the second option, but would not cause ambiguity in the case that the type of x happens to have a property named “selector”.<br></p><p>Charles<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160120/74ef9e8d/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5a72880ffed1a30cb9b8e3f372507145?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>Rob Mayoff</string> &lt;mayoff at dqd.com&gt;<p>January 20, 2016 at 10:00:00pm</p></header><div class="content"><p>On Wed, Jan 20, 2016 at 9:39 PM, Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; That said, I’m in favor of x.selector, or #selector(x).  The former seems<br>&gt; more syntactically elegant if it is practical.<br>&gt;<br></p><p>It seems like #selector(x) would make it easier to get good autocompletion<br>(like Xcode&#39;s autocompletion of @selector(x) in ObjC doesn&#39;t insert<br>argument placeholders).<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160120/f7525f53/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>January 21, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Jan 20, 2016, at 8:41 PM, Rob Mayoff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Wed, Jan 20, 2016 at 9:39 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; That said, I’m in favor of x.selector, or #selector(x).  The former seems more syntactically elegant if it is practical.<br>&gt; <br>&gt; It seems like #selector(x) would make it easier to get good autocompletion (like Xcode&#39;s autocompletion of @selector(x) in ObjC doesn&#39;t insert argument placeholders).<br></p><p>I guess we could give more targeted code completions inside #selector(&lt;code complete here&gt;, only providing name completions for @objc entities.<br></p><p>	- Doug<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160121/ac6c4a9f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>January 21, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Jan 21, 2016, at 11:08 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 20, 2016, at 8:41 PM, Rob Mayoff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Wed, Jan 20, 2016 at 9:39 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; That said, I’m in favor of x.selector, or #selector(x).  The former seems more syntactically elegant if it is practical.<br>&gt;&gt; <br>&gt;&gt; It seems like #selector(x) would make it easier to get good autocompletion (like Xcode&#39;s autocompletion of @selector(x) in ObjC doesn&#39;t insert argument placeholders).<br>&gt; <br>&gt; I guess we could give more targeted code completions inside #selector(&lt;code complete here&gt;, only providing name completions for @objc entities.<br></p><p>We don&#39;t necessarily need to limit it to @objc entities; we can theoretically instantiate an ObjC method and selector for any method (or context-free closure, even) with an ObjC-compatible signature on demand.<br></p><p>-Joe<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160121/a3c3b84d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>January 21, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Jan 21, 2016, at 4:14 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 21, 2016, at 11:08 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 20, 2016, at 8:41 PM, Rob Mayoff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Wed, Jan 20, 2016 at 9:39 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; That said, I’m in favor of x.selector, or #selector(x).  The former seems more syntactically elegant if it is practical.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It seems like #selector(x) would make it easier to get good autocompletion (like Xcode&#39;s autocompletion of @selector(x) in ObjC doesn&#39;t insert argument placeholders).<br>&gt;&gt; <br>&gt;&gt; I guess we could give more targeted code completions inside #selector(&lt;code complete here&gt;, only providing name completions for @objc entities.<br>&gt; <br>&gt; We don&#39;t necessarily need to limit it to @objc entities; we can theoretically instantiate an ObjC method and selector for any method (or context-free closure, even) with an ObjC-compatible signature on demand.<br></p><p>Yes, we certainly could.<br></p><p>	- Doug<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160121/5a8648ff/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f7877c384b6a5494c1b0283eb805831c?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>Liam Butler-Lawrence</string> &lt;liamdunn at me.com&gt;<p>January 21, 2016 at 09:00:00pm</p></header><div class="content"><p>+1 for #selector(foo).<br></p><p>It emphasizes that this is primarily an Objective-C compatibility feature, not a first-class Swift feature (which the more visually appealing foo.selector would imply). Not to mention that with even moderately long method names, the postfix .selector gets buried visually. With #selector(), on the other hand, a quick glance would always be enough to determine that we are accessing the selector, not the function itself.<br></p><p>&gt; On Jan 21, 2016, at 7:55 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Jan 21, 2016, at 4:14 PM, Joe Groff &lt;jgroff at apple.com &lt;mailto:jgroff at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 21, 2016, at 11:08 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 20, 2016, at 8:41 PM, Rob Mayoff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Wed, Jan 20, 2016 at 9:39 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; That said, I’m in favor of x.selector, or #selector(x).  The former seems more syntactically elegant if it is practical.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It seems like #selector(x) would make it easier to get good autocompletion (like Xcode&#39;s autocompletion of @selector(x) in ObjC doesn&#39;t insert argument placeholders).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I guess we could give more targeted code completions inside #selector(&lt;code complete here&gt;, only providing name completions for @objc entities.<br>&gt;&gt; <br>&gt;&gt; We don&#39;t necessarily need to limit it to @objc entities; we can theoretically instantiate an ObjC method and selector for any method (or context-free closure, even) with an ObjC-compatible signature on demand.<br>&gt; <br>&gt; Yes, we certainly could.<br>&gt; <br>&gt; 	- Doug<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160121/e0eb0515/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>January 21, 2016 at 01:00:00pm</p></header><div class="content"><p>I like that it &quot;matches&quot; #available and establishes the # prefix as a (to paraphrase) special, compiler-supported expression type that doesn&#39;t steal a keyword.<br>-- E<br></p><p>&gt; On Jan 20, 2016, at 4:48 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Jan 19, 2016, at 4:52 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 19, 2016, at 4:40 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is there a well-defined meaning for `#` ? <br>&gt;&gt; <br>&gt;&gt; Not yet.<br>&gt;&gt; <br>&gt;&gt;&gt; What about #selector(x)?<br>&gt;&gt; <br>&gt;&gt; Objective-C selector formation is a *very* narrow feature to consider stealing one of our few underused sigils.<br>&gt; <br>&gt; Actually, this isn’t that much different from “#available”, in the sense that it’s a special, compiler-supported expression type for which we don’t want to necessarily steal a keyword. What do others think about “#selector”?<br>&gt; <br>&gt; 	- Doug<br>&gt; <br>&gt; <br>&gt;&gt; 	- Doug<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Tue, Jan 19, 2016 at 4:36 PM, Douglas Gregor &lt;dgregor at apple.com &lt;mailto:dgregor at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 19, 2016, at 4:33 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;m fine with objc_selector(x.foo) or <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; @selector(x.foo).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; @selector is a no-go: @ means “attribute” in Swift.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  x.foo.selector  is cute, but wouldn&#39;t this clash with property getters/setters?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It would only be available on values of function type that refer to @objc methods or initializers. We would (still) need a different mechanism to get at the selectors of getters or setters; SE-0022 didn’t solve this problem either.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	- Doug<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Jacob<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Tue, Jan 19, 2016 at 4:21 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jan 19, 2016, at 2:46 PM, David Hart &lt;david at hartbit.com &lt;mailto:david at hartbit.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; What effect would that have? Would the options still return a type (Selector) that is CustomStringConvertible or would it just be compiler magic?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Either way, we’ll return a Selector. The concern about “Selector(x.foo)” is that we would need special, ad hoc overload-resolution rules to decide between this magic syntax and other initializers of Selector. Making it a separate expression (“objc_selector(x.foo)”) or a special property on values of function type (“x.foo.selector”) eliminate that issue.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; We’d love to hear everyone’s thoughts on those approaches.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	- Doug<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; David.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On 19 Jan 2016, at 23:43, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; We discussed this proposal during our core team review meeting, and concerns were raised about the implementability of the proposed &#39;Selector(Type.method)&#39; syntax. Producing the selector is something that can&#39;t quite be modeled as a real initializer, so the type checker would have to perform heroics to disambiguate a selector literal reference from a proper initializer call. We recommend reconsidering alternative syntactic forms for referencing the selector. Potential options include:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; - A unique prefix identifier, such as `objc_selector(Type.method)`, as you had originally proposed, or<br>&gt;&gt;&gt;&gt;&gt;&gt; - Taking advantage of the fact that functions don&#39;t have members to ascribe special behavior to &#39;Type.method.objcSelector&#39;, or something like it.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jan 18, 2016, at 8:02 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; The review of “Referencing the Objective-C selector of a method” begins now and runs through January 23, 2016. The proposal is available here:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 	• What is your evaluation of the proposal?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 	• If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160121/10487f1c/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] SE-0022: Referencing the Objective-C selector of a method</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>January 19, 2016 at 06:00:00pm</p></header><div class="content"><p>The former seems more ObjCbridgish. The latter seems more Swiftish.  While I prefer the aesthetics of the latter, the former seems to better call out the bridging semantics for anyone reading through code.<br></p><p>I guess I&#39;d want to know whether there are or will be similar approaches for example, I dunno, pulling Foundation objects in (like objc_type(Dictionary)) and if so which approach would you use there?<br></p><p>-- E, who is probably rambling but hopes this adds something to weighing between the two<br></p><p>&gt; On Jan 19, 2016, at 3:43 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; We discussed this proposal during our core team review meeting, and concerns were raised about the implementability of the proposed &#39;Selector(Type.method)&#39; syntax. Producing the selector is something that can&#39;t quite be modeled as a real initializer, so the type checker would have to perform heroics to disambiguate a selector literal reference from a proper initializer call. We recommend reconsidering alternative syntactic forms for referencing the selector. Potential options include:<br>&gt; <br>&gt; - A unique prefix identifier, such as `objc_selector(Type.method)`, as you had originally proposed, or<br>&gt; - Taking advantage of the fact that functions don&#39;t have members to ascribe special behavior to &#39;Type.method.objcSelector&#39;, or something like it.<br>&gt; <br>&gt; -Joe<br>&gt; <br>&gt;&gt; On Jan 18, 2016, at 8:02 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of “Referencing the Objective-C selector of a method” begins now and runs through January 23, 2016. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md&gt;<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 	• What is your evaluation of the proposal?<br>&gt;&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	• If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt;&gt; <br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160119/c3ce0170/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
