<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Draft][Proposal] Formalized Ordering</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July 22, 2016 at 10:00:00am</p></header><div class="content"><p>on Fri Jul 22 2016, Haravikk &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Definitely a +1 from me, in fact I&#39;ve implemented essentially this as<br>&gt; an extension for my own convenience, but would definitely prefer it to<br>&gt; be a proper component of the stdlib.<br>&gt;<br>&gt; I have some queries to raise:<br>&gt;<br>&gt; First is the naming, to me Ordering implies the enum itself is used<br>&gt; for ordering collections but that&#39;s not really the case. <br></p><p>I don&#39;t understand why you think that&#39;s implied<br></p><p>&gt; In my own hacked implementation I&#39;m using Order.before, Order.same,<br>&gt; and Order.after. It&#39;s not much of a change, but it seems to clarify<br>&gt; what the enum is, at least in my opinion.<br></p><p>I always thought the name “Order” would be perfect if it weren&#39;t so<br>short and likely to conflict with type names that user code will want.<br>We do have qualification to fall back on, so this is a judgement call.<br></p><p>I pretty strongly believe in the words “ascending” and “descending” for<br>the cases.  The result reflects the order in which the arguments to the<br>function appear in a call.  So if f reflects standard dictionary order, <br></p><p>    f(&quot;a&quot;, &quot;b&quot;) =&gt; ascending<br>    f(&quot;b&quot;, &quot;a&quot;) =&gt; descending<br></p><p>&gt; One thing I was considering, but didn&#39;t do since my extension is just<br>&gt; a bolt-on for convenience, is whether the before/ascending and<br>&gt; after/descending cases should contain a value, allowing<br>&gt; implementations to provide a hint of how far back/forward an element<br>&gt; should be. This is a hint only of course, but could be useful; for<br>&gt; example, when implementing a binary search you could instead use the<br>&gt; hint value to provide a (hopefully) better guess at where to jump to<br>&gt; next, for example if the value is very high you might jump to a<br>&gt; position forward backward/forward rather than always selecting the<br>&gt; middle every time. This is what Java&#39;s Comparable type does, since it<br>&gt; uses a number where negative is before, 0 is same and positive is<br>&gt; after.  <br></p><p>I&#39;m deeply skeptical.  I don&#39;t believe you can use this hint to do<br>binary search without destroying its complexity guarantee.  If you can<br>show me algorithms that take advantage of this hint, with demonstrations<br>of their correctness, I&#39;d consider it.<br></p><p>&gt; Why is Equatable in this case implemented with a static .areSame()<br>&gt; method, but Comparable isn&#39;t implemented by a static .compare()<br>&gt; method? Seems like they should both be the same personally.  <br></p><p>Because we wouldn&#39;t be able to .compare() tuples, which are not nominal<br>types that can be extended.  That&#39;s almost the only reason, IIRC.<br></p><p>&gt; There should be a way to &quot;flip&quot; the operator. One thing that&#39;s great<br>&gt; about the current sorting method is the ability to pass the &lt; or &gt;<br>&gt; operators for ascending/descending respectively, we can do the first<br>&gt; one by passing the &lt;=&gt; operator, but a flip function or something<br>&gt; would be nice to, well, flip it (swap the ascending and descending<br>&gt; cases before returning).<br>&gt;<br>&gt; Just some thoughts, but I definitely want this.<br>&gt;<br>&gt;&gt; On 22 Jul 2016, at 02:11, Robert Widmann via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift Community,<br>&gt;&gt; <br>&gt;&gt; Harlan Haskins, Jaden Geller, and I have been working on a proposal<br>&gt;&gt; to clean up the semantics of ordering relations in the standard<br>&gt;&gt; library.  We have a draft that you can get as a<br>&gt;&gt; gist. &lt;https://gist.github.com/CodaFi/f0347bd37f1c407bf7ea0c429ead380e&gt;<br>&gt;&gt; Any feedback you might have about this proposal helps - though<br>&gt;&gt; please keeps your comments on Swift-Evolution and not on the gist.<br>&gt;&gt; <br>&gt;&gt; Cheers,<br>&gt;&gt; <br>&gt;&gt; ~Robert Widmann<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdd257c9369fb68e1d06923d10ff789e?s=50"></div><header><strong>[Draft][Proposal] Formalized Ordering</strong> from <string>Ben Rimmington</string> &lt;me at benrimmington.com&gt;<p>July 24, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On 22 Jul 2016, at 18:43, Dave Abrahams wrote:<br>&gt; <br>&gt;&gt; on Fri Jul 22 2016, Haravikk &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; In my own hacked implementation I&#39;m using Order.before, Order.same,<br>&gt;&gt; and Order.after. It&#39;s not much of a change, but it seems to clarify<br>&gt;&gt; what the enum is, at least in my opinion.<br>&gt; <br>&gt; I always thought the name “Order” would be perfect if it weren&#39;t so<br>&gt; short and likely to conflict with type names that user code will want.<br>&gt; We do have qualification to fall back on, so this is a judgement call.<br></p><p>enum TotalOrder {<br>  case ascending<br>  case identical<br>  case descending<br>}<br></p><p>-- Ben<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
