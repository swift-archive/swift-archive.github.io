<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c45573c04087ddcfa76a22095bb0877b?s=50"></div><header><strong>Performance critical code in Swift</strong> from <string>Игорь Никитин</string> &lt;devnikor at icloud.com&gt;<p>October  1, 2016 at 11:00:00pm</p></header><div class="content"><p>Hello!<br>Is it possible for Swift to be as fast as C when writing performance critical code? Of course if using C Standard Library for instead of Foundation (and so on) and getting rid of dynamic dispatch and reference types.<br>Or I need just to use C?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Performance critical code in Swift</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>October  1, 2016 at 01:00:00pm</p></header><div class="content"><p>Yes, it is possible. Exactly how much use of Unsafe style idioms and other performance-focused &quot;workarounds&quot; it requires depends a lot on the code in question. Can you say more about your problem area?<br></p><p> - Daniel<br></p><p>&gt; On Oct 1, 2016, at 1:30 PM, Игорь Никитин via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello!<br>&gt; Is it possible for Swift to be as fast as C when writing performance critical code? Of course if using C Standard Library for instead of Foundation (and so on) and getting rid of dynamic dispatch and reference types.<br>&gt; Or I need just to use C?<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c45573c04087ddcfa76a22095bb0877b?s=50"></div><header><strong>Performance critical code in Swift</strong> from <string>Игорь Никитин</string> &lt;devnikor at icloud.com&gt;<p>October  1, 2016 at 11:00:00pm</p></header><div class="content"><p>I need to write a specialized data storage (database) for some types that are never changes. This struct can be used as an example:<br></p><p>struct User {<br>    let id: Int32<br>    let name: UnsafePointer&lt;UInt8&gt;<br>    let type: Int32<br>    let location: UnsafePointer&lt;UInt8&gt;<br>}<br></p><p>SQLite is super slow. I make few millions inserts and sqlite_step is the problem here (this function takes 15 seconds for all job). <br>So I need to save to the disk few million instances of this struct as fast as possible (this is why I need a custom db)<br>For such of tasks C (or maybe C++) is a good choice. But how can Swift do this as fast as C?<br>Of course I need to use low level C I/O api, but there are another things that I need to know?<br></p><p>&gt; 1 окт. 2016 г., в 23:33, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt; написал(а):<br>&gt; <br>&gt; Yes, it is possible. Exactly how much use of Unsafe style idioms and other performance-focused &quot;workarounds&quot; it requires depends a lot on the code in question. Can you say more about your problem area?<br>&gt; <br>&gt; - Daniel<br>&gt; <br>&gt;&gt; On Oct 1, 2016, at 1:30 PM, Игорь Никитин via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello!<br>&gt;&gt; Is it possible for Swift to be as fast as C when writing performance critical code? Of course if using C Standard Library for instead of Foundation (and so on) and getting rid of dynamic dispatch and reference types.<br>&gt;&gt; Or I need just to use C?<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161001/445bfbb2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/72853d2b57e37aab89afe61af4f74c62?s=50"></div><header><strong>Performance critical code in Swift</strong> from <string>Maury Markowitz</string> &lt;maury.markowitz at gmail.com&gt;<p>October  2, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Oct 1, 2016, at 4:50 PM, Игорь Никитин via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; For such of tasks C (or maybe C++) is a good choice. But how can Swift do this as fast as C?<br>&gt; Of course I need to use low level C I/O api, but there are another things that I need to know?<br></p><p>All things considered, the choice of language *should* have minor impact on the outcome here - IO should be orders of magnitude slower than the processing. Of course, we all know examples where this is not the case, especially when you combine it with libraries like Cocoa that may or may not be very well optimized for IO.<br></p><p>That said, it seems like your data is simple enough that I&#39;d suggest &quot;just do it&quot;, and make a program that writes and then reads a million rows to a text file using Cocoa&#39;s primitives. Pure C with prinf/scanf will almost certainly be faster, but I&#39;m also curious to know how much.<br></p><p>On a broader note, I have yet to see a true modern replacement for SQLite on the embedded side. There are any number of lightweight document stores, but they either have performance worse than SQLite, or are not really suitable for embedded use. I&#39;ve seen a number of online solutions, and perhaps that is the right way to go these days. Anyone here used an online document store for largish data in Swift?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc8eae356a7d359691154094ae6d56a7?s=50"></div><header><strong>Performance critical code in Swift</strong> from <string>Marco S Hyman</string> &lt;marc at snafu.org&gt;<p>October  2, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; <br>&gt; On a broader note, I have yet to see a true modern replacement for SQLite on the embedded side. There are any number of lightweight document stores, but they either have performance worse than SQLite, or are not really suitable for embedded use.<br></p><p>Realm ???<br></p><p>It’s faster than sqlite and easy to use.  At least I found it easy in a simple swift test app I wrote a while back.   Haven’t played with it since the switch to swift 3.0.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Performance critical code in Swift</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>October  3, 2016 at 08:00:00am</p></header><div class="content"><p>That fact that Realm has an ORM layer, and that batch inserts are noticeably slower than in SQLite makes it less performant in certain scenarios. The fact that is does not support JOIN queries also causes issues in other performance scenarios.<br></p><p>&gt; On 2 Oct 2016, at 20:26, Marco S Hyman via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On a broader note, I have yet to see a true modern replacement for SQLite on the embedded side. There are any number of lightweight document stores, but they either have performance worse than SQLite, or are not really suitable for embedded use.<br>&gt; <br>&gt; Realm ???<br>&gt; <br>&gt; It’s faster than sqlite and easy to use.  At least I found it easy in a simple swift test app I wrote a while back.   Haven’t played with it since the switch to swift 3.0.<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d042be5dcfe90e649f760303af3e429?s=50"></div><header><strong>Performance critical code in Swift</strong> from <string>Jens Persson</string> &lt;jens at bitcycle.com&gt;<p>October  1, 2016 at 11:00:00pm</p></header><div class="content"><p>You could write some examples in both C and Swift in order to gain<br>experience in how to write your Swift code so that it will (probably) run<br>as fast as (or faster than) your corresponding C code.<br></p><p>I&#39;ve done this for a number of different performance critical things and it<br>is often possible to get the Swift version as fast as the C version.<br></p><p>(If you find something that is not possible (or unnecessarily cumbersome)<br>to write as fast in Swift as in C, you could probably file a<br>bug/improvement on bugs.swift.org. I did this some time ago when I noticed<br>that Swift&#39;s optimizer missed an opportunity to unroll loops in a certain<br>situation and it turned out that a fix/optimizer-improvement was already on<br>its way.)<br></p><p>You must of course profile/microbenchmark your code in some meaningful way,<br>setting all relevant compiler flags for both C and Swift, preventing dead<br>code elimination, measuring average or perhaps median times of lots of<br>tests, making sure what should and shouldn&#39;t be statically knowable, etc.<br></p><p>In Swift you probably want -O -whole-module-optimization, and (rarely) you<br>might want/need to disable safety checks.<br></p><p>/Jens<br></p><p><br></p><p>On Sat, Oct 1, 2016 at 10:33 PM, Daniel Dunbar via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Yes, it is possible. Exactly how much use of Unsafe style idioms and other<br>&gt; performance-focused &quot;workarounds&quot; it requires depends a lot on the code in<br>&gt; question. Can you say more about your problem area?<br>&gt;<br>&gt;  - Daniel<br>&gt;<br>&gt; &gt; On Oct 1, 2016, at 1:30 PM, Игорь Никитин via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Hello!<br>&gt; &gt; Is it possible for Swift to be as fast as C when writing performance<br>&gt; critical code? Of course if using C Standard Library for instead of<br>&gt; Foundation (and so on) and getting rid of dynamic dispatch and reference<br>&gt; types.<br>&gt; &gt; Or I need just to use C?<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-users mailing list<br>&gt; &gt; swift-users at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161001/5be83056/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c45573c04087ddcfa76a22095bb0877b?s=50"></div><header><strong>Performance critical code in Swift</strong> from <string>Игорь Никитин</string> &lt;devnikor at icloud.com&gt;<p>October  2, 2016 at 12:00:00am</p></header><div class="content"><p>I got it. Thanks for your tips!<br></p><p>&gt; 2 окт. 2016 г., в 0:13, Jens Persson &lt;jens at bitcycle.com&gt; написал(а):<br>&gt; <br>&gt; You could write some examples in both C and Swift in order to gain experience in how to write your Swift code so that it will (probably) run as fast as (or faster than) your corresponding C code.<br>&gt; <br>&gt; I&#39;ve done this for a number of different performance critical things and it is often possible to get the Swift version as fast as the C version.<br>&gt; <br>&gt; (If you find something that is not possible (or unnecessarily cumbersome) to write as fast in Swift as in C, you could probably file a bug/improvement on bugs.swift.org. I did this some time ago when I noticed that Swift&#39;s optimizer missed an opportunity to unroll loops in a certain situation and it turned out that a fix/optimizer-improvement was already on its way.)<br>&gt; <br>&gt; You must of course profile/microbenchmark your code in some meaningful way, setting all relevant compiler flags for both C and Swift, preventing dead code elimination, measuring average or perhaps median times of lots of tests, making sure what should and shouldn&#39;t be statically knowable, etc.<br>&gt; <br>&gt; In Swift you probably want -O -whole-module-optimization, and (rarely) you might want/need to disable safety checks.<br>&gt; <br>&gt; /Jens<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Sat, Oct 1, 2016 at 10:33 PM, Daniel Dunbar via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; Yes, it is possible. Exactly how much use of Unsafe style idioms and other performance-focused &quot;workarounds&quot; it requires depends a lot on the code in question. Can you say more about your problem area?<br>&gt;&gt; <br>&gt;&gt;  - Daniel<br>&gt;&gt; <br>&gt;&gt; &gt; On Oct 1, 2016, at 1:30 PM, Игорь Никитин via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Hello!<br>&gt;&gt; &gt; Is it possible for Swift to be as fast as C when writing performance critical code? Of course if using C Standard Library for instead of Foundation (and so on) and getting rid of dynamic dispatch and reference types.<br>&gt;&gt; &gt; Or I need just to use C?<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-users mailing list<br>&gt;&gt; &gt; swift-users at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161002/037f2998/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d042be5dcfe90e649f760303af3e429?s=50"></div><header><strong>Performance critical code in Swift</strong> from <string>Jens Persson</string> &lt;jens at bitcycle.com&gt;<p>October  1, 2016 at 11:00:00pm</p></header><div class="content"><p>There&#39;s no reason why writing data to disk should be slower in Swift than<br>in C/C++.<br></p><p>(For the name and location properties, I assume you want to save Strings, a<br>sequence of characters or something rather than just the value of the<br>UnsafePointer&lt;UInt8&gt;.)<br></p><p>On Sat, Oct 1, 2016 at 11:22 PM, Игорь Никитин &lt;devnikor at icloud.com&gt; wrote:<br></p><p>&gt; I got it. Thanks for your tips!<br>&gt;<br>&gt; 2 окт. 2016 г., в 0:13, Jens Persson &lt;jens at bitcycle.com&gt; написал(а):<br>&gt;<br>&gt; You could write some examples in both C and Swift in order to gain<br>&gt; experience in how to write your Swift code so that it will (probably) run<br>&gt; as fast as (or faster than) your corresponding C code.<br>&gt;<br>&gt; I&#39;ve done this for a number of different performance critical things and<br>&gt; it is often possible to get the Swift version as fast as the C version.<br>&gt;<br>&gt; (If you find something that is not possible (or unnecessarily cumbersome)<br>&gt; to write as fast in Swift as in C, you could probably file a<br>&gt; bug/improvement on bugs.swift.org. I did this some time ago when I<br>&gt; noticed that Swift&#39;s optimizer missed an opportunity to unroll loops in a<br>&gt; certain situation and it turned out that a fix/optimizer-improvement was<br>&gt; already on its way.)<br>&gt;<br>&gt; You must of course profile/microbenchmark your code in some meaningful<br>&gt; way, setting all relevant compiler flags for both C and Swift, preventing<br>&gt; dead code elimination, measuring average or perhaps median times of lots of<br>&gt; tests, making sure what should and shouldn&#39;t be statically knowable, etc.<br>&gt;<br>&gt; In Swift you probably want -O -whole-module-optimization, and (rarely) you<br>&gt; might want/need to disable safety checks.<br>&gt;<br>&gt; /Jens<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Sat, Oct 1, 2016 at 10:33 PM, Daniel Dunbar via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Yes, it is possible. Exactly how much use of Unsafe style idioms and<br>&gt;&gt; other performance-focused &quot;workarounds&quot; it requires depends a lot on the<br>&gt;&gt; code in question. Can you say more about your problem area?<br>&gt;&gt;<br>&gt;&gt;  - Daniel<br>&gt;&gt;<br>&gt;&gt; &gt; On Oct 1, 2016, at 1:30 PM, Игорь Никитин via swift-users &lt;<br>&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Hello!<br>&gt;&gt; &gt; Is it possible for Swift to be as fast as C when writing performance<br>&gt;&gt; critical code? Of course if using C Standard Library for instead of<br>&gt;&gt; Foundation (and so on) and getting rid of dynamic dispatch and reference<br>&gt;&gt; types.<br>&gt;&gt; &gt; Or I need just to use C?<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-users mailing list<br>&gt;&gt; &gt; swift-users at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161001/58efd401/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c45573c04087ddcfa76a22095bb0877b?s=50"></div><header><strong>Performance critical code in Swift</strong> from <string>Игорь Никитин</string> &lt;devnikor at icloud.com&gt;<p>October  2, 2016 at 12:00:00am</p></header><div class="content"><p>It&#39;s isn&#39;t just about storing, but also parsing (I parse big json with yajl, the C json parser) and processing that data. <br>And right, name and location is strings<br></p><p>&gt; 2 окт. 2016 г., в 0:24, Jens Persson &lt;jens at bitcycle.com&gt; написал(а):<br>&gt; <br>&gt; There&#39;s no reason why writing data to disk should be slower in Swift than in C/C++.<br>&gt; <br>&gt; (For the name and location properties, I assume you want to save Strings, a sequence of characters or something rather than just the value of the UnsafePointer&lt;UInt8&gt;.)<br>&gt; <br>&gt;&gt; On Sat, Oct 1, 2016 at 11:22 PM, Игорь Никитин &lt;devnikor at icloud.com&gt; wrote:<br>&gt;&gt; I got it. Thanks for your tips!<br>&gt;&gt; <br>&gt;&gt;&gt; 2 окт. 2016 г., в 0:13, Jens Persson &lt;jens at bitcycle.com&gt; написал(а):<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; You could write some examples in both C and Swift in order to gain experience in how to write your Swift code so that it will (probably) run as fast as (or faster than) your corresponding C code.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;ve done this for a number of different performance critical things and it is often possible to get the Swift version as fast as the C version.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; (If you find something that is not possible (or unnecessarily cumbersome) to write as fast in Swift as in C, you could probably file a bug/improvement on bugs.swift.org. I did this some time ago when I noticed that Swift&#39;s optimizer missed an opportunity to unroll loops in a certain situation and it turned out that a fix/optimizer-improvement was already on its way.)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; You must of course profile/microbenchmark your code in some meaningful way, setting all relevant compiler flags for both C and Swift, preventing dead code elimination, measuring average or perhaps median times of lots of tests, making sure what should and shouldn&#39;t be statically knowable, etc.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In Swift you probably want -O -whole-module-optimization, and (rarely) you might want/need to disable safety checks.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; /Jens<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Sat, Oct 1, 2016 at 10:33 PM, Daniel Dunbar via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; Yes, it is possible. Exactly how much use of Unsafe style idioms and other performance-focused &quot;workarounds&quot; it requires depends a lot on the code in question. Can you say more about your problem area?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  - Daniel<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; &gt; On Oct 1, 2016, at 1:30 PM, Игорь Никитин via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; Hello!<br>&gt;&gt;&gt;&gt; &gt; Is it possible for Swift to be as fast as C when writing performance critical code? Of course if using C Standard Library for instead of Foundation (and so on) and getting rid of dynamic dispatch and reference types.<br>&gt;&gt;&gt;&gt; &gt; Or I need just to use C?<br>&gt;&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt;&gt; &gt; swift-users mailing list<br>&gt;&gt;&gt;&gt; &gt; swift-users at swift.org<br>&gt;&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt; <br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161002/cdb7f9aa/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>Performance critical code in Swift</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>October  3, 2016 at 04:00:00pm</p></header><div class="content"><p>My general advice for performance critical code (especially when it&#39;s about stuff like serialization and parsing):<br>If you just want a working solution without spending much time, stick with C.<br>Swift can be fast, but it&#39;s harder to write slow code in C.<br></p><p>If, on the other hand, coding time is no big concern:<br>Use Swift, try to get it as fast as possible (can take time) — and if this isn&#39;t enough, switch to C (which might end up to be to slow as well ;-)<br></p><p>- Tino<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c45573c04087ddcfa76a22095bb0877b?s=50"></div><header><strong>Performance critical code in Swift</strong> from <string>Игорь Никитин</string> &lt;devnikor at icloud.com&gt;<p>October  3, 2016 at 10:00:00pm</p></header><div class="content"><p>Thanks for advices!<br>I’m switches to C and will write data to file instead of sqlite<br>It will give me 5x-10x performance growth for writing<br>But it will also increase the time for reading, I think (I&#39;ve not measured it)<br></p><p>I’m also looked for some sqlite alternative, but didn’t found<br>Realm is fast for reading, but not for writing<br>And it gives some memory overhead<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
