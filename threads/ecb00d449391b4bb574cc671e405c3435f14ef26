<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4090ad26a70acd97d197ac8b732a520c?s=50"></div><header><strong>[Review] SE-0026 Abstract classes and methods</strong> from <string>David Beck</string> &lt;david at davidbeck.co&gt;<p>February 26, 2016 at 11:00:00am</p></header><div class="content"><p>I’ve been solving this problem in Swift 2 by creating pairs of classes and protocols. For instance in one of my projects I have `ServerObject` and `ServerType`. Subclasses are expected to inherit from BOTH of these properties and `ServerObject` is not meant to be created directly. This works but creates a lot of overhead that this proposal would solve.<br></p><p>Some things that protocols can’t do:<br>- Enforce inheritance from a particular class.<br>- Have stored properties.<br>- Provide an implementation that can be overridden and called with super.<br></p><p>Some things that classes can’t do:<br>- Enforce properties and functions that subclasses must override.<br>- Enforce an instance is not created directly, but only through a subclass.<br></p><p>Using the hybrid approach requires a lot of generics to use properties and functions from both the class and the protocol and in some cases simply can’t be used at the same time since Swift doesn’t support hybrid types like ObjC does (ie ServerObject *&lt;ServerType&gt;).<br></p><p>David Beck<br>http://davidbeck.co<br>http://twitter.com/davbeck<br>http://facebook.com/davbeck<br></p><p>&gt; Cc:swift-evolution&lt;swift-evolution at swift.org&gt;, swift-evolution-announce at swift.org<br>&gt; Subject:[swift-evolution] [Review] SE-0026 Abstract classes and methods<br>&gt; Date:February 26, 2016 at 10:32:43 AM PST<br>&gt; <br>&gt; <br>&gt; What is your evaluation of the proposal?<br>&gt; <br>&gt; I believe it is a well intended and certainly an interesting feature to have.<br>&gt; <br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; No, but not strongly.Sure, there are cases where it would make more sense to use an &quot;interface class&quot; (a la Java) to implement an abstract data type, but I believe those kinds of design patterns are subsumed by protocols and Swift&#39;s general approach to designing data types in the large.Even a language as dedicated to OO as Objective-C didn&#39;t need abstract classes, and where necessary, were simply implemented with macros declaring a one-line stub that throws an exception.Even without macros, I don&#39;t believe the keystroke savings is enough to justify the inclusion of another keyword.<br>&gt; <br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; For the reasons above, I&#39;m afraid not.<br>&gt; <br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; A quick reading.<br>&gt; ~Robert Widmann<br>&gt; <br>&gt; 2016/02/26 13:11、Joe Groff via swift-evolution&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)&gt;のメッセージ:<br>&gt; <br>&gt; &gt; Hello Swift community,<br>&gt; &gt; <br>&gt; &gt; The review of “Abstract classes and methods” begins now and runs through March 4, 2016. The proposal is available here:<br>&gt; &gt; <br>&gt; &gt; &gt; https://github.com/apple/swift-evolution/blob/master/proposals/0026-abstract-classes-and-methods.md<br>&gt; &gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; &gt; <br>&gt; &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at thetop of the message:<br>&gt; &gt; <br>&gt; &gt; &gt; Proposal link:<br>&gt; &gt; &gt; &gt; https://github.com/apple/swift-evolution/blob/master/proposals/0026-abstract-classes-and-methods.md<br>&gt; &gt; &gt; Reply text<br>&gt; &gt; &gt; Other replies<br>&gt; &gt; What goes into a review?<br>&gt; &gt; <br>&gt; &gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the directionof Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; &gt; <br>&gt; &gt; • What is your evaluation of the proposal?<br>&gt; &gt; • Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; &gt; • Does this proposal fit well with the feel and direction of Swift?<br>&gt; &gt; • If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares tothose?<br>&gt; &gt; • How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; &gt; <br>&gt; &gt; More information about the Swift evolution process is available at:<br>&gt; &gt; <br>&gt; &gt; &gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; &gt; Thank you,<br>&gt; &gt; <br>&gt; &gt; -Joe<br>&gt; &gt; Review Manager<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org(mailto:swift-evolution at swift.org)<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt;  <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160226/ecb0ef26/attachment.html&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
