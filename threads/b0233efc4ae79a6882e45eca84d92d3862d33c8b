<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6ca48609af4206259f466bcef16adf80?s=50"></div><header><strong>Measurement Formatters &amp; ICU</strong> from <string>Henry Betts</string> &lt;henry.betts at btconnect.com&gt;<p>August 22, 2016 at 03:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>I am new to the mailing list, and am interested in contributing to the swift project.<br> <br>I’ve been having a play with the ICU library’s unit formatting functions, and have created a simple wrapper that could be used by the various measurement formatters as well as the date component formatter. At the moment, this wrapper is written in swift, but I’m thinking it might make more sense to implement it as a core foundation layer, so as not to expose ICU directly to swift.<br></p><p>The interface for this could look something like:<br></p><p>enum CFUnitFormatterStyle{<br>    <br>    CFUnitFormatterStyleLong,<br>    CFUnitFormatterStyleMedium,<br>    ...<br>    <br>};<br></p><p>enum CFUnitFormatterUnit{<br>    <br>    CFUnitFormatterUnit_Length_Meter,<br>    ...<br>    CFUnitFormatterUnit_Mass_Gram,<br>    ...<br>    <br>};<br></p><p>struct CFUnitFormatterMeasure{<br>    <br>    double value;<br>    CFUnitFormatterUnit unit;<br>    <br>};<br></p><p>CFUnitFormatterRef CFUnitFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFUnitFormatterStyle style, CFNumberFormatterRef numberFormatter);<br></p><p>CFStringRef CFUnitFormatterCreateString(CFAllocatorRef allocator, CFUnitFormatterRef formatter, double value, CFUnitFormatterUnit unit);<br></p><p>CFStringRef CFUnitFormatterCreateStringWithMeasure(CFAllocatorRef allocator, CFUnitFormatterRef formatter, CFUnitFormatterMeasure measure);<br></p><p>CFStringRef CFUnitFormatterCreateStringWithMeasures(CFAllocatorRef allocator, CFUnitFormatterRef formatter, CFArrayRef measures);<br></p><p><br>Looking for any thoughts and suggestions before I begin implementing this.<br></p><p>Henry<br></p><p>---<br>Henry Betts<br>henrybetts.co.uk &lt;http://henrybetts.co.uk/&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160822/b0233c8b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Measurement Formatters &amp; ICU</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>August 22, 2016 at 10:00:00am</p></header><div class="content"><p>Hi Henry,<br></p><p>&gt; On Aug 22, 2016, at 7:00 AM, Henry Betts via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; I am new to the mailing list, and am interested in contributing to the swift project.<br></p><p>Welcome!<br></p><p>&gt;  <br>&gt; I’ve been having a play with the ICU library’s unit formatting functions, and have created a simple wrapper that could be used by the various measurement formatters as well as the date component formatter. At the moment, this wrapper is written in swift, but I’m thinking it might make more sense to implement it as a core foundation layer, so as not to expose ICU directly to swift.<br>&gt; <br>&gt; The interface for this could look something like:<br>&gt; <br>&gt; enum CFUnitFormatterStyle{<br>&gt;     <br>&gt;     CFUnitFormatterStyleLong,<br>&gt;     CFUnitFormatterStyleMedium,<br>&gt;     ...<br>&gt;     <br>&gt; };<br>&gt; <br>&gt; enum CFUnitFormatterUnit{<br>&gt;     <br>&gt;     CFUnitFormatterUnit_Length_Meter,<br>&gt;     ...<br>&gt;     CFUnitFormatterUnit_Mass_Gram,<br>&gt;     ...<br>&gt;     <br>&gt; };<br>&gt; <br>&gt; struct CFUnitFormatterMeasure{<br>&gt;     <br>&gt;     double value;<br>&gt;     CFUnitFormatterUnit unit;<br>&gt;     <br>&gt; };<br>&gt; <br>&gt; CFUnitFormatterRef CFUnitFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFUnitFormatterStyle style, CFNumberFormatterRef numberFormatter);<br>&gt; <br>&gt; CFStringRef CFUnitFormatterCreateString(CFAllocatorRef allocator, CFUnitFormatterRef formatter, double value, CFUnitFormatterUnit unit);<br>&gt; <br>&gt; CFStringRef CFUnitFormatterCreateStringWithMeasure(CFAllocatorRef allocator, CFUnitFormatterRef formatter, CFUnitFormatterMeasure measure);<br>&gt; <br>&gt; CFStringRef CFUnitFormatterCreateStringWithMeasures(CFAllocatorRef allocator, CFUnitFormatterRef formatter, CFArrayRef measures);<br>&gt; <br>&gt; <br>&gt; Looking for any thoughts and suggestions before I begin implementing this.<br>&gt; <br>&gt; Henry<br>&gt; <br></p><p>This approach makes sense - we have been putting stub functions into CF to use ICU, because ICU’s headers are not module-friendly (yet?). Our Darwin implementation also maps to the ICU constants for units (that I’m sure you found).<br></p><p>I would love to be able to use ICU from Swift instead of implementing everything twice, but maybe that’s a tall order.<br></p><p>- Tony<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160822/29550b26/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Measurement Formatters &amp; ICU</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>August 22, 2016 at 10:00:00am</p></header><div class="content"><p>On Aug 22, 2016, at 10:10 AM, Tony Parker via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt; Looking for any thoughts and suggestions before I begin implementing this.<br>&gt;&gt; <br>&gt;&gt; Henry<br>&gt;&gt; <br>&gt; <br>&gt; This approach makes sense - we have been putting stub functions into CF to use ICU, because ICU’s headers are not module-friendly (yet?). Our Darwin implementation also maps to the ICU constants for units (that I’m sure you found).<br>&gt; <br>&gt; I would love to be able to use ICU from Swift instead of implementing everything twice, but maybe that’s a tall order.<br></p><p>It would be great for someone to work with the upstream ICU project to get their headers to be module friendly.<br></p><p>-Chris<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0ca11611f1637938f1d1db967fa4b064?s=50"></div><header><strong>Measurement Formatters &amp; ICU</strong> from <string>Will Stanton</string> &lt;willstanton1 at yahoo.com&gt;<p>August 22, 2016 at 02:00:00pm</p></header><div class="content"><p>I think there is a review related to format APIs ongoing for ICU 58, but there hasn’t been much talk about the C APIs alas:<br>https://sourceforge.net/p/icu/mailman/message/35283778/<br>http://bugs.icu-project.org/trac/ticket/12029<br></p><p><br>Since MeasureFormat ‘and friends’ are C++, for now, I also think the best path would be a C wrapper in CF that can pass things off to Apple’s ICU or on Linux to:<br>http://opensource.apple.com/source/ICU/ICU-551.30/icuSources/i18n/uameasureformat.cpp<br>http://opensource.apple.com/source/ICU/ICU-551.30/icuSources/i18n/uatimeunitformat.cpp<br></p><p>I think the script to handle ninja on Linux also needed to be modified to build C++ successfully (I believe some private/internal includes needed to be set).<br></p><p>Regards,<br>Will Stanton<br></p><p>&gt; On Aug 22, 2016, at 1:10 PM, Tony Parker via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; I would love to be able to use ICU from Swift instead of implementing everything twice, but maybe that’s a tall order.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6ca48609af4206259f466bcef16adf80?s=50"></div><header><strong>Measurement Formatters &amp; ICU</strong> from <string>Henry Betts</string> &lt;henry.betts at btconnect.com&gt;<p>August 22, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On 22 Aug 2016, at 19:07, Will Stanton via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; Since MeasureFormat ‘and friends’ are C++, for now, I also think the best path would be a C wrapper in CF that can pass things off to Apple’s ICU or on Linux to:<br>&gt; http://opensource.apple.com/source/ICU/ICU-551.30/icuSources/i18n/uameasureformat.cpp &lt;http://opensource.apple.com/source/ICU/ICU-551.30/icuSources/i18n/uameasureformat.cpp&gt;<br>&gt; http://opensource.apple.com/source/ICU/ICU-551.30/icuSources/i18n/uatimeunitformat.cpp<br>&gt; <br>Yes - I was planning on including uameasureformat.cpp for the linux build, although I was also unsure whether the build script was setup to compile c++.<br>Noticed a bug in uameasureformat.cpp by the way; DURATION_DAY and DURATION_WEEK are the wrong way around!<br></p><p>I’m a bit confused by uatimeunitformat. I’m probably missing something obvious, but what can it do that uameasureformat can’t do?<br></p><p>Henry<br></p><p><br>---<br>Henry Betts<br>henrybetts.co.uk &lt;http://henrybetts.co.uk/&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160822/813704fb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0ca11611f1637938f1d1db967fa4b064?s=50"></div><header><strong>Measurement Formatters &amp; ICU</strong> from <string>Will Stanton</string> &lt;willstanton1 at yahoo.com&gt;<p>August 22, 2016 at 04:00:00pm</p></header><div class="content"><p>I recall the time formatter being deprecated in favor of measfmt, so you might be right that uatimeunitformat isn&#39;t needed. I think some functions in uatimeunitformat.cpp made combining units easier when calling from (then NS)DateComponentsFormatter, but perhaps that can be put functionality in a (Swift-)CFDateComponentsFormatter wrapper. (Not sure if Apple will come out with its own CFDateComponentsFormatter).<br></p><p><br>I think this was what I had to change to get C++ working:<br>https://github.com/apple/swift-corelibs-foundation/blob/master/lib/phases.py<br>The includes for CompileCxx should be more like CompileC.<br></p><p>Regards,<br>Will Stanton<br></p><p>Sent from my iPhone<br></p><p>&gt; On Aug 22, 2016, at 15:58, Henry Betts via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Yes - I was planning on including uameasureformat.cpp for the linux build, although I was also unsure whether the build script was setup to compile c++.<br>&gt; Noticed a bug in uameasureformat.cpp by the way; DURATION_DAY and DURATION_WEEK are the wrong way around!<br>&gt; <br>&gt; I’m a bit confused by uatimeunitformat. I’m probably missing something obvious, but what can it do that uameasureformat can’t do?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>Measurement Formatters &amp; ICU</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>August 23, 2016 at 08:00:00am</p></header><div class="content"><p>+Daphne since she was the one who implemented the Darwin version of the unit and measurements and I think she has some ideas on how we could perhaps build a uniform version for Linux hosts.<br></p><p>Per the C++; the script for that phase probably needs a bit of love since we haven’t had a need for C++ to be built in CF. <br></p><p>Is there a specific version of ICU that we need to pick that functionality up? As it stands we don’t have a upper version limit on ICU but if we had a portion of the ICU source in CF it would probably mean that we would get symbolic conflicts when linking against versions that already had that.<br></p><p>&gt; On Aug 22, 2016, at 1:36 PM, Will Stanton via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; I recall the time formatter being deprecated in favor of measfmt, so you might be right that uatimeunitformat isn&#39;t needed. I think some functions in uatimeunitformat.cpp made combining units easier when calling from (then NS)DateComponentsFormatter, but perhaps that can be put functionality in a (Swift-)CFDateComponentsFormatter wrapper. (Not sure if Apple will come out with its own CFDateComponentsFormatter).<br>&gt; <br>&gt; <br>&gt; I think this was what I had to change to get C++ working:<br>&gt; https://github.com/apple/swift-corelibs-foundation/blob/master/lib/phases.py<br>&gt; The includes for CompileCxx should be more like CompileC.<br>&gt; <br>&gt; Regards,<br>&gt; Will Stanton<br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt;&gt; On Aug 22, 2016, at 15:58, Henry Betts via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Yes - I was planning on including uameasureformat.cpp for the linux build, although I was also unsure whether the build script was setup to compile c++.<br>&gt;&gt; Noticed a bug in uameasureformat.cpp by the way; DURATION_DAY and DURATION_WEEK are the wrong way around!<br>&gt;&gt; <br>&gt;&gt; I’m a bit confused by uatimeunitformat. I’m probably missing something obvious, but what can it do that uameasureformat can’t do?<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6ca48609af4206259f466bcef16adf80?s=50"></div><header><strong>Measurement Formatters &amp; ICU</strong> from <string>Henry Betts</string> &lt;henry.betts at btconnect.com&gt;<p>August 24, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; On 23 Aug 2016, at 16:58, Philippe Hausler &lt;phausler at apple.com&gt; wrote:<br>&gt; <br>&gt; Is there a specific version of ICU that we need to pick that functionality up? As it stands we don’t have a upper version limit on ICU but if we had a portion of the ICU source in CF it would probably mean that we would get symbolic conflicts when linking against versions that already had that.<br></p><p><br>Looks like the C++ MeasureFormat (and friends) have existed since ICU 3.0, although they have not yet got around to implementing a C interface. I don’t think symbolic conflicts would occur, since, if ICU did eventually introduce the C interface, I assume that it would use just a “u” prefix rather than “ua”. Not sure if that’s what you meant.<br></p><p>Alternatively, I suppose we could just bypass uameasureformat, and interact with the c++ api directly in CF, since it looks like it’s going to have to be setup to compile c++ anyway.<br></p><p>Henry<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>Measurement Formatters &amp; ICU</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>August 23, 2016 at 05:00:00pm</p></header><div class="content"><p>Just because it was super-easy for me to fix:<br></p><p>https://github.com/apple/swift-corelibs-foundation/pull/587<br></p><p>That should allow C++ to be built if desired into CoreFoundation. However round tripping that into the Darwin version of CoreFoundation may be a bit cagey.<br></p><p>&gt; On Aug 23, 2016, at 4:53 PM, Henry Betts &lt;henry.betts at btconnect.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 23 Aug 2016, at 16:58, Philippe Hausler &lt;phausler at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Is there a specific version of ICU that we need to pick that functionality up? As it stands we don’t have a upper version limit on ICU but if we had a portion of the ICU source in CF it would probably mean that we would get symbolic conflicts when linking against versions that already had that.<br>&gt; <br>&gt; <br>&gt; Looks like the C++ MeasureFormat (and friends) have existed since ICU 3.0, although they have not yet got around to implementing a C interface. I don’t think symbolic conflicts would occur, since, if ICU did eventually introduce the C interface, I assume that it would use just a “u” prefix rather than “ua”. Not sure if that’s what you meant.<br>&gt; <br>&gt; Alternatively, I suppose we could just bypass uameasureformat, and interact with the c++ api directly in CF, since it looks like it’s going to have to be setup to compile c++ anyway.<br>&gt; <br>&gt; Henry<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
