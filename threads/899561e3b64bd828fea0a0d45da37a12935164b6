<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/72853d2b57e37aab89afe61af4f74c62?s=50"></div><header><strong>See documentation comment for discussion</strong> from <string>Maury Markowitz</string> &lt;maury.markowitz at gmail.com&gt;<p>June 17, 2016 at 03:00:00pm</p></header><div class="content"><p>I&#39;ve previously used myString[0...1] to get the first character of a string. I assume that is now myString[0..&lt;2]? In any event, the error states:<br></p><p>&#39;subscript&#39; is unavailable: cannot subscript String with a CountableClosedRange&lt;Int&gt;, see the documentation comment for discussion<br></p><p>What documentation is this referring to? There&#39;s no right-click definition available, nothing in Navigator, and Google fails to turn up anything. I suspect its referring to the changelist or maybe github checkin notes?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>See documentation comment for discussion</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>June 17, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; I&#39;ve previously used myString[0...1] to get the first character of a string.<br></p><p>I&#39;m not sure how, because this has never worked in Swift. Strings use opaque indices which specifically prevent you from doing this, so you have never been able to subscript a string with integers or ranges of integers. It&#39;s done this way because indexing into a Unicode string intrinsically requires walking through the data structure and counting characters one at a time; the lack of integer indices is meant to force you to explicitly write `index(after:)` or `index(_:offsetBy:)` (formerly `successor()` or `advancedBy(_:)`) in your code to make this cost obvious.<br></p><p>&gt; What documentation is this referring to? There&#39;s no right-click definition available, nothing in Navigator, and Google fails to turn up anything.<br></p><p>The standard library includes definitions of these subscripts which are meant to direct you to documentation explaining why they&#39;re not supported, but these definitions don&#39;t show up in the generated interfaces. Presumably Xcode is removing all APIs marked &quot;unavailable&quot;. The doc comment it&#39;s trying to direct you to is here &lt;https://github.com/apple/swift/blob/b8401e1fde52d95e5a8ce7b043a3c5a3bcf72181/stdlib/public/core/UnavailableStringAPIs.swift.gyb#L15&gt;:<br></p><p>  /// Subscripting strings with integers is not available.<br>  ///<br>  /// The concept of &quot;the `i`th character in a string&quot; has<br>  /// different interpretations in different libraries and system<br>  /// components.  The correct interpretation should be selected<br>  /// according to the use case and the APIs involved, so `String`<br>  /// cannot be subscripted with an integer.<br>  ///<br>  /// Swift provides several different ways to access the character<br>  /// data stored inside strings.<br>  ///<br>  /// - `String.utf8` is a collection of UTF-8 code units in the<br>  ///   string. Use this API when converting the string to UTF-8.<br>  ///   Most POSIX APIs process strings in terms of UTF-8 code units.<br>  ///<br>  /// - `String.utf16` is a collection of UTF-16 code units in<br>  ///   string.  Most Cocoa and Cocoa touch APIs process strings in<br>  ///   terms of UTF-16 code units.  For example, instances of<br>  ///   `NSRange` used with `NSAttributedString` and<br>  ///   `NSRegularExpression` store substring offsets and lengths in<br>  ///   terms of UTF-16 code units.<br>  ///<br>  /// - `String.unicodeScalars` is a collection of Unicode scalars.<br>  ///   Use this API when you are performing low-level manipulation<br>  ///   of character data.<br>  ///<br>  /// - `String.characters` is a collection of extended grapheme<br>  ///   clusters, which are an approximation of user-perceived<br>  ///   characters.<br>  ///<br>  /// Note that when processing strings that contain human-readable<br>  /// text, character-by-character processing should be avoided to<br>  /// the largest extent possible.  Use high-level locale-sensitive<br>  /// Unicode algorithms instead, for example,<br>  /// `String.localizedStandardCompare()`,<br>  /// `String.localizedLowercaseString`,<br>  /// `String.localizedStandardRangeOfString()` etc.<br></p><p><br>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6cceede6579cba5bf1f48581ea904f1b?s=50"></div><header><strong>See documentation comment for discussion</strong> from <string>Svein Halvor Halvorsen</string> &lt;svein.h at lvor.halvorsen.cc&gt;<p>June 18, 2016 at 08:00:00am</p></header><div class="content"><p>let firstLetter = myString.characters.first<br></p><p>l√∏r. 18. jun. 2016 kl. 04.38 skrev Brent Royal-Gordon via swift-users &lt;<br>swift-users at swift.org&gt;:<br></p><p>&gt; &gt; I&#39;ve previously used myString[0...1] to get the first character of a<br>&gt; string.<br>&gt;<br>&gt; I&#39;m not sure how, because this has never worked in Swift. Strings use<br>&gt; opaque indices which specifically prevent you from doing this, so you have<br>&gt; never been able to subscript a string with integers or ranges of integers.<br>&gt; It&#39;s done this way because indexing into a Unicode string intrinsically<br>&gt; requires walking through the data structure and counting characters one at<br>&gt; a time; the lack of integer indices is meant to force you to explicitly<br>&gt; write `index(after:)` or `index(_:offsetBy:)` (formerly `successor()` or<br>&gt; `advancedBy(_:)`) in your code to make this cost obvious.<br>&gt;<br>&gt; &gt; What documentation is this referring to? There&#39;s no right-click<br>&gt; definition available, nothing in Navigator, and Google fails to turn up<br>&gt; anything.<br>&gt;<br>&gt; The standard library includes definitions of these subscripts which are<br>&gt; meant to direct you to documentation explaining why they&#39;re not supported,<br>&gt; but these definitions don&#39;t show up in the generated interfaces. Presumably<br>&gt; Xcode is removing all APIs marked &quot;unavailable&quot;. The doc comment it&#39;s<br>&gt; trying to direct you to is here &lt;<br>&gt; https://github.com/apple/swift/blob/b8401e1fde52d95e5a8ce7b043a3c5a3bcf72181/stdlib/public/core/UnavailableStringAPIs.swift.gyb#L15<br>&gt; &gt;:<br>&gt;<br>&gt;   /// Subscripting strings with integers is not available.<br>&gt;   ///<br>&gt;   /// The concept of &quot;the `i`th character in a string&quot; has<br>&gt;   /// different interpretations in different libraries and system<br>&gt;   /// components.  The correct interpretation should be selected<br>&gt;   /// according to the use case and the APIs involved, so `String`<br>&gt;   /// cannot be subscripted with an integer.<br>&gt;   ///<br>&gt;   /// Swift provides several different ways to access the character<br>&gt;   /// data stored inside strings.<br>&gt;   ///<br>&gt;   /// - `String.utf8` is a collection of UTF-8 code units in the<br>&gt;   ///   string. Use this API when converting the string to UTF-8.<br>&gt;   ///   Most POSIX APIs process strings in terms of UTF-8 code units.<br>&gt;   ///<br>&gt;   /// - `String.utf16` is a collection of UTF-16 code units in<br>&gt;   ///   string.  Most Cocoa and Cocoa touch APIs process strings in<br>&gt;   ///   terms of UTF-16 code units.  For example, instances of<br>&gt;   ///   `NSRange` used with `NSAttributedString` and<br>&gt;   ///   `NSRegularExpression` store substring offsets and lengths in<br>&gt;   ///   terms of UTF-16 code units.<br>&gt;   ///<br>&gt;   /// - `String.unicodeScalars` is a collection of Unicode scalars.<br>&gt;   ///   Use this API when you are performing low-level manipulation<br>&gt;   ///   of character data.<br>&gt;   ///<br>&gt;   /// - `String.characters` is a collection of extended grapheme<br>&gt;   ///   clusters, which are an approximation of user-perceived<br>&gt;   ///   characters.<br>&gt;   ///<br>&gt;   /// Note that when processing strings that contain human-readable<br>&gt;   /// text, character-by-character processing should be avoided to<br>&gt;   /// the largest extent possible.  Use high-level locale-sensitive<br>&gt;   /// Unicode algorithms instead, for example,<br>&gt;   /// `String.localizedStandardCompare()`,<br>&gt;   /// `String.localizedLowercaseString`,<br>&gt;   /// `String.localizedStandardRangeOfString()` etc.<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160618/08b952c9/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/72853d2b57e37aab89afe61af4f74c62?s=50"></div><header><strong>See documentation comment for discussion</strong> from <string>Maury Markowitz</string> &lt;maury.markowitz at gmail.com&gt;<p>June 19, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Jun 17, 2016, at 10:38 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; The standard library includes definitions of these subscripts<br></p><p>But how would one select those in the Xcode UI? The documentation doesn&#39;t link off the error (AFAIK) itself, only the code. So one could select, say, the var the error is related to, but not the []&#39;s themselves, no?<br></p><p>&gt;  /// components.  The correct interpretation should be selected<br>&gt;  /// according to the use case and the APIs involved, so `String`<br>&gt;  /// cannot be subscripted with an integer.<br></p><p>All true, except, of course, when one is working with strings that really do work perfectly weel qwith 1...2, like the strings I&#39;m processing, which came from 80-column punch cards originally used with LLNL&#39;s CDC 6600 (serial #2 IIRC). I had totally forgotten I had written this:<br></p><p>subscript (r: Range&lt;Int&gt;) -&gt; String {<br>    get {<br>        let subStart = self.characters.index(self.startIndex, offsetBy: r.lowerBound, limitedBy: self.endIndex)<br>	let subEnd = self.characters.index(subStart!, offsetBy: r.upperBound - r.lowerBound, limitedBy: self.endIndex)<br>	return self.substring(with: subStart!..&lt;subEnd!)<br>    }<br>}<br></p><p>Anyone have any ideas why this is suddenly throwing an error, not within this extension, but in the code calling it? It&#39;s as if it doesn&#39;t see the extension.<br></p><p>p.s. Actually that is NOT the code I wrote. The 2.2-&gt;3.0b translator mangled the second let, so I&#39;m not 100% sure what it originally said.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc8eae356a7d359691154094ae6d56a7?s=50"></div><header><strong>See documentation comment for discussion</strong> from <string>Marco S Hyman</string> &lt;marc at snafu.org&gt;<p>June 19, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On Jun 19, 2016, at 6:35 PM, Maury Markowitz via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; All true, except, of course, when one is working with strings that really do work perfectly weel qwith 1...2, like the strings I&#39;m processing, which came from 80-column punch cards originally used with LLNL&#39;s CDC 6600 (serial #2 IIRC). I had totally forgotten I had written this:<br></p><p>I‚Äôd claim those are not strings, they are arrays of Uint8.<br></p><p>As for your subscript... in the code &quot;mystring[0...1]‚Äù [0...1] is not a Range&lt;Int&gt;, it is a CountableClosedRange&lt;Int&gt;.  The error message told you that.  If you change your subscript to use CountableClosedRange&lt;Int&gt; instead of Range&lt;Int&gt; it works -- but it‚Äôs not something I think I‚Äôd do.<br></p><p>Marc<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/72853d2b57e37aab89afe61af4f74c62?s=50"></div><header><strong>See documentation comment for discussion</strong> from <string>Maury Markowitz</string> &lt;maury.markowitz at gmail.com&gt;<p>June 20, 2016 at 09:00:00am</p></header><div class="content"><p>On Jun 19, 2016, at 10:45 PM, Marco S Hyman &lt;marc at snafu.org&gt; wrote:<br>&gt; As for your subscript... in the code &quot;mystring[0...1]‚Äù [0...1] is not a Range&lt;Int&gt;, it is a CountableClosedRange&lt;Int&gt;.<br></p><p>But that doesn&#39;t explain why it works fine under Swift 2.2, which is the basis of the question.<br></p><p>The change does not appear to be to string itself, but to either &#39;subscript&#39; or perhaps the method signatures so Range no longer accepts closed ranges?<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
