<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>What exactly does it mean for a Swift pointer to be initialized?</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>August  5, 2016 at 10:00:00pm</p></header><div class="content"><p>on Fri Aug 05 2016, Andrew Trick &lt;swift-dev-AT-swift.org&gt; wrote:<br></p><p>&gt;&gt; On Aug 5, 2016, at 12:43 PM, Jens Persson &lt;jens at bitcycle.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I&#39;m trying to understand the new Swift 3 (4?) pointer API and Swift&#39;s memory model.<br>&gt;&gt; <br>&gt;&gt; More specifically, I&#39;d like to know more about what exactly it means<br>&gt;<br>&gt;&gt; for a pointer to be initialized or not.<br>&gt;&gt; <br>&gt;&gt; For example, I suppose the following code example doesn&#39;t satisfy<br>&gt;&gt; the precondition in the subscript documentation (ie floatsPtr not<br>&gt;&gt; being initialized when using its subscript):<br>&gt;&gt; <br>&gt;&gt; let numFloats = 123<br>&gt;&gt; let floatsPtr = UnsafeMutablePointer&lt;Float&gt;.allocate(capacity: numFloats)<br>&gt;&gt; for i in 0 ..&lt; numFloats { floatsPtr[i] = Float(i) * 0.1 } // Setting values<br>&gt;&gt; for i in 0 ..&lt; numFloats { print(floatsPtr[i]) } // Getting values<br>&gt;&gt; floatsPtr.deallocate(capacity: numFloats)<br>&gt;&gt; <br>&gt;&gt; I&#39;d like to understand why/how this could lead to undefined<br>&gt;&gt; behavior, and what exactly it means for a pointer to be initialized<br>&gt;&gt; or not.<br>&gt;&gt; <br>&gt;&gt; I&#39;ve read<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md<br>&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md&gt;<br>&gt;&gt; <br>&gt;&gt; But I don&#39;t feel that I fully understand what it means for a pointer<br>&gt;&gt; to be initialized, or bound, and if the preconditions and rules for<br>&gt;&gt; undef behavior are the same no matter if Pointee is a trivial type<br>&gt;&gt; or a class type.<br>&gt;<br>&gt; I think it’s common practice to initialize trivial types via subscript<br>&gt; assignment. Earlier versions of the proposal actually showed examples<br>&gt; of this and claimed that it was valid pattern. However, during review<br>&gt; those examples were removed because it encouraged bad practice and<br>&gt; complicated the issue.<br>&gt;<br>&gt; The fact is, code like this is not going to break anything in the<br>&gt; compiler and it’s common enough that any model model verifier is going<br>&gt; to need to special-case trivial types. I think it would be fine to<br>&gt; rewrite the subscript precondition as follows:<br>&gt;<br>&gt; /// - Precondition: the pointee at `self + i` is initialized.<br>&gt; should read<br>&gt; /// - Precondition: either the pointee at `self + i` is initialized<br>&gt; ///   or `Pointee` is a trivial type.<br></p><p>Depending on where you intend to make this change, you may be implicitly<br>adding the requirement that every possible bit pattern is a valid<br>representation of a trivial type.  It&#39;s fine if you&#39;re just changing the<br>setters for pointee and subscript, but it shouldn&#39;t apply to the<br>getters, IMO.<br></p><p>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md#trivial-types<br>&gt;<br>&gt; -Andy<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6fe87aed0d64cdbc46378bf7596a7553?s=50"></div><header><strong>What exactly does it mean for a Swift pointer to be initialized?</strong> from <string>Andrew Trick</string> &lt;atrick at apple.com&gt;<p>August  6, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On Aug 5, 2016, at 10:42 PM, Dave Abrahams via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Fri Aug 05 2016, Andrew Trick &lt;swift-dev-AT-swift.org &lt;http://swift-dev-at-swift.org/&gt;&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On Aug 5, 2016, at 12:43 PM, Jens Persson &lt;jens at bitcycle.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m trying to understand the new Swift 3 (4?) pointer API and Swift&#39;s memory model.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; More specifically, I&#39;d like to know more about what exactly it means<br>&gt;&gt; <br>&gt;&gt;&gt; for a pointer to be initialized or not.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; For example, I suppose the following code example doesn&#39;t satisfy<br>&gt;&gt;&gt; the precondition in the subscript documentation (ie floatsPtr not<br>&gt;&gt;&gt; being initialized when using its subscript):<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let numFloats = 123<br>&gt;&gt;&gt; let floatsPtr = UnsafeMutablePointer&lt;Float&gt;.allocate(capacity: numFloats)<br>&gt;&gt;&gt; for i in 0 ..&lt; numFloats { floatsPtr[i] = Float(i) * 0.1 } // Setting values<br>&gt;&gt;&gt; for i in 0 ..&lt; numFloats { print(floatsPtr[i]) } // Getting values<br>&gt;&gt;&gt; floatsPtr.deallocate(capacity: numFloats)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;d like to understand why/how this could lead to undefined<br>&gt;&gt;&gt; behavior, and what exactly it means for a pointer to be initialized<br>&gt;&gt;&gt; or not.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;ve read<br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md<br>&gt;&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md&gt;&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But I don&#39;t feel that I fully understand what it means for a pointer<br>&gt;&gt;&gt; to be initialized, or bound, and if the preconditions and rules for<br>&gt;&gt;&gt; undef behavior are the same no matter if Pointee is a trivial type<br>&gt;&gt;&gt; or a class type.<br>&gt;&gt; <br>&gt;&gt; I think it’s common practice to initialize trivial types via subscript<br>&gt;&gt; assignment. Earlier versions of the proposal actually showed examples<br>&gt;&gt; of this and claimed that it was valid pattern. However, during review<br>&gt;&gt; those examples were removed because it encouraged bad practice and<br>&gt;&gt; complicated the issue.<br>&gt;&gt; <br>&gt;&gt; The fact is, code like this is not going to break anything in the<br>&gt;&gt; compiler and it’s common enough that any model model verifier is going<br>&gt;&gt; to need to special-case trivial types. I think it would be fine to<br>&gt;&gt; rewrite the subscript precondition as follows:<br>&gt;&gt; <br>&gt;&gt; /// - Precondition: the pointee at `self + i` is initialized.<br>&gt;&gt; should read<br>&gt;&gt; /// - Precondition: either the pointee at `self + i` is initialized<br>&gt;&gt; ///   or `Pointee` is a trivial type.<br>&gt; <br>&gt; Depending on where you intend to make this change, you may be implicitly<br>&gt; adding the requirement that every possible bit pattern is a valid<br>&gt; representation of a trivial type.  It&#39;s fine if you&#39;re just changing the<br>&gt; setters for pointee and subscript, but it shouldn&#39;t apply to the<br>&gt; getters, IMO.<br></p><p>We do not want to allow reading trivial values from uninitialized memory.<br>I took a crack at the comments:<br>https://github.com/apple/swift/pull/4070 &lt;https://github.com/apple/swift/pull/4070&gt;<br></p><p>-Andy<br></p><p>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md#trivial-types &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md#trivial-types&gt;<br>&gt;&gt; <br>&gt;&gt; -Andy<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-dev mailing list<br>&gt;&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br>&gt;&gt; <br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160806/cc7f0fd5/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
