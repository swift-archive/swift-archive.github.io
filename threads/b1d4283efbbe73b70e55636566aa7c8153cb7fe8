<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5f75e21b92119c078131f94d06deb7de?s=50"></div><header><strong>A unified error handling mechanism?</strong> from <string>Fernando Rodríguez</string> &lt;fernando at agbo.biz&gt;<p>August  5, 2016 at 04:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>I do a lot of training and one of the features of Swift that seems more<br>confusing to students (and myself) is error handling. There are too many<br>ways of doing it, and none seems satisfactory.<br></p><p>Let&#39;s take for example an initializer. There are 2 different ways of<br>handling errors within an init:<br></p><p>a) Old School: return nil. This was very simple in Objective C, because the<br>uncommon case of an error could be easily ignored...until everything<br>crashed.<br></p><p>In Swift it&#39;s not easy (nor advisable IMHO) to completely ignore the<br>possibility of an error. Besides, it has 2 complications.<br></p><p>First of all, you return an Optional, and Optionals have a tendency to go<br>viral. Suddenly, all your code has to deal with optionals.<br></p><p>Secondly, you have no information about the error itself.<br></p><p>b) do/try/catch<br></p><p>This allows you to have information about the error, but also causes the<br>newly created object to be &quot;trapped&quot; inside a do block.<br></p><p>Are there any plans to address this situation? I believe there should be a<br>single, obvious and convenient way of handling errors in the language.<br></p><p>What do you guys think?<br></p><p><br></p><p>-- <br></p><p><br>* &lt;http://keepcoding.io/es/&gt;*<br></p><p><br>*Fernando Rodríguez*<br></p><p>m. +34 610 965 332<br></p><p>t. +34 91 629 57 61<br></p><p>fernando at k &lt;fernando at agbo.biz&gt;eepcoding.io<br></p><p>[image: pastedGraphic.png] [image: pastedGraphic_1.png] [image:<br>pastedGraphic_2.png]<br></p><p>*KeepCoding.io*<br></p><p>2120 University Avenue, Berkeley, CA<br></p><p><br>Avda. Fuencarral, 44, Ed. 8, Loft 30<br></p><p>28108 Alcobendas (Madrid) Spain<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160805/b1d47fe8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/242e18b243022bcb7573443e06444423?s=50"></div><header><strong>A unified error handling mechanism?</strong> from <string>Boris Wang</string> &lt;kona.ming at gmail.com&gt;<p>August  6, 2016 at 01:00:00am</p></header><div class="content"><p>do/try/catch use the error handling mechanism, named exception.<br></p><p>I think we should use it carefully , it will results convoluted code and<br>the risk of exception safe.<br></p><p>Fernando Rodríguez &lt;swift-evolution at swift.org&gt;于2016年8月6日 周六07:50写道：<br></p><p>&gt; Hi,<br>&gt;<br>&gt; I do a lot of training and one of the features of Swift that seems more<br>&gt; confusing to students (and myself) is error handling. There are too many<br>&gt; ways of doing it, and none seems satisfactory.<br>&gt;<br>&gt; Let&#39;s take for example an initializer. There are 2 different ways of<br>&gt; handling errors within an init:<br>&gt;<br>&gt; a) Old School: return nil. This was very simple in Objective C, because<br>&gt; the uncommon case of an error could be easily ignored...until everything<br>&gt; crashed.<br>&gt;<br>&gt; In Swift it&#39;s not easy (nor advisable IMHO) to completely ignore the<br>&gt; possibility of an error. Besides, it has 2 complications.<br>&gt;<br>&gt; First of all, you return an Optional, and Optionals have a tendency to go<br>&gt; viral. Suddenly, all your code has to deal with optionals.<br>&gt;<br>&gt; Secondly, you have no information about the error itself.<br>&gt;<br>&gt; b) do/try/catch<br>&gt;<br>&gt; This allows you to have information about the error, but also causes the<br>&gt; newly created object to be &quot;trapped&quot; inside a do block.<br>&gt;<br>&gt; Are there any plans to address this situation? I believe there should be a<br>&gt; single, obvious and convenient way of handling errors in the language.<br>&gt;<br>&gt; What do you guys think?<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt;<br>&gt;<br>&gt; * &lt;http://keepcoding.io/es/&gt;*<br>&gt;<br>&gt;<br>&gt; *Fernando Rodríguez*<br>&gt;<br>&gt; m. +34 610 965 332<br>&gt;<br>&gt; t. +34 91 629 57 61<br>&gt;<br>&gt; fernando at k &lt;fernando at agbo.biz&gt;eepcoding.io<br>&gt;<br>&gt; [image: pastedGraphic.png] [image: pastedGraphic_1.png] [image:<br>&gt; pastedGraphic_2.png]<br>&gt;<br>&gt; *KeepCoding.io*<br>&gt;<br>&gt; 2120 University Avenue, Berkeley, CA<br>&gt;<br>&gt;<br>&gt; Avda. Fuencarral, 44, Ed. 8, Loft 30<br>&gt;<br>&gt; 28108 Alcobendas (Madrid) Spain<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160806/f1aa4651/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/426fbd3d9b662663dc5647b08c4e3410?s=50"></div><header><strong>A unified error handling mechanism?</strong> from <string>Anders Ha</string> &lt;hello at andersio.co&gt;<p>August  6, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On 6 Aug 2016, at 7:50 AM, Fernando Rodríguez via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; I do a lot of training and one of the features of Swift that seems more confusing to students (and myself) is error handling. There are too many ways of doing it, and none seems satisfactory.<br>&gt; <br>&gt; Let&#39;s take for example an initializer. There are 2 different ways of handling errors within an init:<br>&gt; <br>&gt; a) Old School: return nil. This was very simple in Objective C, because the uncommon case of an error could be easily ignored...until everything crashed.<br>&gt; <br>&gt; In Swift it&#39;s not easy (nor advisable IMHO) to completely ignore the possibility of an error. Besides, it has 2 complications.<br>&gt; <br>&gt; First of all, you return an Optional, and Optionals have a tendency to go viral. Suddenly, all your code has to deal with optionals.<br>&gt; <br>&gt; Secondly, you have no information about the error itself.<br>&gt; <br>&gt; b) do/try/catch<br>&gt; <br>&gt; This allows you to have information about the error, but also causes the newly created object to be &quot;trapped&quot; inside a do block.<br></p><p>You can define an uninitialised variable outside the scope of `do`, and assign to it within the scope of `do`.<br></p><p><br>func test() throws -&gt; Int { return 1 }<br></p><p>let variable: Int<br></p><p>do {<br>	variable = try test()<br>} catch let error {<br>	fatalError(&quot;\(error)&quot;)<br>}<br></p><p>print(variable)<br></p><p>&gt; <br>&gt; Are there any plans to address this situation? I believe there should be a single, obvious and convenient way of handling errors in the language.<br>&gt; <br>&gt; What do you guys think?<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; <br>&gt; <br>&gt; <br>&gt;  &lt;http://keepcoding.io/es/&gt;<br>&gt; <br>&gt; Fernando Rodríguez<br>&gt; m. +34 610 965 332<br>&gt; t. +34 91 629 57 61<br>&gt; fernando at k &lt;mailto:fernando at agbo.biz&gt;eepcoding.io &lt;http://eepcoding.io/&gt;<br>&gt;   <br>&gt; KeepCoding.io<br>&gt; 2120 University Avenue, Berkeley, CA<br>&gt; <br>&gt; Avda. Fuencarral, 44, Ed. 8, Loft 30<br>&gt; 28108 Alcobendas (Madrid) Spain<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160806/39fe621a/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>A unified error handling mechanism?</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>August  6, 2016 at 06:00:00pm</p></header><div class="content"><p>2016-08-06 2:50 GMT+03:00 Fernando Rodríguez &lt;swift-evolution at swift.org&gt;:<br></p><p>b) do/try/catch<br>&gt;<br>&gt; This allows you to have information about the error, but also causes the<br>&gt; newly created object to be &quot;trapped&quot; inside a do block.<br>&gt;<br>&gt; Are there any plans to address this situation? I believe there should be a<br>&gt; single, obvious and convenient way of handling errors in the language.<br>&gt;<br>func attempt&lt;T&gt;(_ expression: @autoclosure () throws -&gt; T, handler:<br>(ErrorProtocol) -&gt; T) -&gt; T {<br>    do {<br>        return try expression()<br>    } catch {<br>        return handler(error)<br>    }<br>}<br>let x = attempt(downloadDataOrThrow()) {<br>    print(&quot;Connection lost&quot;)<br>    return nil<br>}<br></p><p>It mimics guard statement. You can also have versions of attempt with<br>partially defined handlers, like “return nil“ or “print and crash”, or<br>“assert type of error”.<br>​<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160806/9ca55dec/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>A unified error handling mechanism?</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>August  6, 2016 at 12:00:00pm</p></header><div class="content"><p>Fernando, the rationale behind the design of error handling in Swift is<br>detailed here:<br>https://github.com/apple/swift/blob/master/docs/ErrorHandlingRationale.rst<br>Some of that document may now be out-of-date, but you may find it to be<br>helpful nonetheless.<br></p><p><br>On Sat, Aug 6, 2016 at 10:40 AM, Anton Zhilin via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; 2016-08-06 2:50 GMT+03:00 Fernando Rodríguez &lt;swift-evolution at swift.org&gt;:<br>&gt;<br>&gt; b) do/try/catch<br>&gt;&gt;<br>&gt;&gt; This allows you to have information about the error, but also causes the<br>&gt;&gt; newly created object to be &quot;trapped&quot; inside a do block.<br>&gt;&gt;<br>&gt;&gt; Are there any plans to address this situation? I believe there should be<br>&gt;&gt; a single, obvious and convenient way of handling errors in the language.<br>&gt;&gt;<br>&gt; func attempt&lt;T&gt;(_ expression: @autoclosure () throws -&gt; T, handler: (ErrorProtocol) -&gt; T) -&gt; T {<br>&gt;     do {<br>&gt;         return try expression()<br>&gt;     } catch {<br>&gt;         return handler(error)<br>&gt;     }<br>&gt; }<br>&gt; let x = attempt(downloadDataOrThrow()) {<br>&gt;     print(&quot;Connection lost&quot;)<br>&gt;     return nil<br>&gt; }<br>&gt;<br>&gt; It mimics guard statement. You can also have versions of attempt with<br>&gt; partially defined handlers, like “return nil“ or “print and crash”, or<br>&gt; “assert type of error”.<br>&gt; ​<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160806/a457c239/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>A unified error handling mechanism?</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>August  6, 2016 at 12:00:00pm</p></header><div class="content"><p>Hi Fernando, <br></p><p>Some projects use a result type to unify the error handling. https://github.com/antitypical/Result &lt;https://github.com/antitypical/Result&gt;<br></p><p>There has been discussions about this and Chris L thinks that we may get a native (constrained) result type at some point. <br></p><p>https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160125/007858.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160125/007858.html&gt;<br>https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160125/008057.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160125/008057.html&gt;<br></p><p>I can see a future where these get unified but the main issue imo is cocoa compatibility. <br></p><p>Probably swift 5+<br></p><p>Cheers!,<br>J. Cheyo<br></p><p><br></p><p>&gt; On Aug 5, 2016, at 4:50 PM, Fernando Rodríguez via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; I do a lot of training and one of the features of Swift that seems more confusing to students (and myself) is error handling. There are too many ways of doing it, and none seems satisfactory.<br>&gt; <br>&gt; Let&#39;s take for example an initializer. There are 2 different ways of handling errors within an init:<br>&gt; <br>&gt; a) Old School: return nil. This was very simple in Objective C, because the uncommon case of an error could be easily ignored...until everything crashed.<br>&gt; <br>&gt; In Swift it&#39;s not easy (nor advisable IMHO) to completely ignore the possibility of an error. Besides, it has 2 complications.<br>&gt; <br>&gt; First of all, you return an Optional, and Optionals have a tendency to go viral. Suddenly, all your code has to deal with optionals.<br>&gt; <br>&gt; Secondly, you have no information about the error itself.<br>&gt; <br>&gt; b) do/try/catch<br>&gt; <br>&gt; This allows you to have information about the error, but also causes the newly created object to be &quot;trapped&quot; inside a do block.<br>&gt; <br>&gt; Are there any plans to address this situation? I believe there should be a single, obvious and convenient way of handling errors in the language.<br>&gt; <br>&gt; What do you guys think?<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; <br>&gt; <br>&gt; <br>&gt;  &lt;http://keepcoding.io/es/&gt;<br>&gt; <br>&gt; Fernando Rodríguez<br>&gt; m. +34 610 965 332<br>&gt; t. +34 91 629 57 61<br>&gt; fernando at k &lt;mailto:fernando at agbo.biz&gt;eepcoding.io &lt;http://eepcoding.io/&gt;<br>&gt;   <br>&gt; KeepCoding.io<br>&gt; 2120 University Avenue, Berkeley, CA<br>&gt; <br>&gt; Avda. Fuencarral, 44, Ed. 8, Loft 30<br>&gt; 28108 Alcobendas (Madrid) Spain<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160806/96f6a54d/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
