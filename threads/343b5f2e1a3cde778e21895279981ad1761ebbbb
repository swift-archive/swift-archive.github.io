<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d042be5dcfe90e649f760303af3e429?s=50"></div><header><strong>Swift&#39;s handling of function types</strong> from <string>Jens Persson</string> &lt;jens at bitcycle.com&gt;<p>August 27, 2016 at 06:00:00pm</p></header><div class="content"><p>IMHO Swift&#39;s handling of function types violate the principle of least<br>surprise.<br></p><p>In the example program below, are `a` and `b` really of the same function<br>type?<br></p><p>I searched but couldn&#39;t find any proposal or discussion addressing this.<br></p><p><br>// (Xcode 8 beta 6, toolchain: development snapshot 2016-08-26)<br></p><p>let a:  (Int, Int)  -&gt; Int = { (a, b) in a + b }<br>let b: ((Int, Int)) -&gt; Int = a<br>// So `a` can be casted to `b`&#39;s type, OK.<br></p><p>print(type(of:a)) // ((Int, Int)) -&gt; Int<br>print(type(of:b)) // ((Int, Int)) -&gt; Int<br></p><p>// Why are they printed the same?<br>// I would only expect `b`&#39;s type to look like that.<br>// Now it looks like both take a tuple of two Ints.<br></p><p>let c = a( 1, 2 ) // Can only be called this way, as expected.<br>let d = b((1, 2)) // Can only be called this way, as expected.<br>print(c) // 3, as expected.<br>print(d) // 3, as expected.<br></p><p>print(type(of:a) == type(of:b)) // true<br>// What? `a` clearly takes two Ints, while `b` clearly takes a<br>// tuple of two Ints, yet they are the same type?<br>// I am perplexed.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160827/343bbbbb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d042be5dcfe90e649f760303af3e429?s=50"></div><header><strong>Swift&#39;s handling of function types</strong> from <string>Jens Persson</string> &lt;jens at bitcycle.com&gt;<p>August 27, 2016 at 10:00:00pm</p></header><div class="content"><p>Slava Pestov answered this question on Twitter.<br>He says it&#39;s a known bug and: &quot;Right now, function types always have a<br>single parameter internally. Diff between a and b is lost after type check&quot;.<br></p><p><br>On Sat, Aug 27, 2016 at 6:28 PM, Jens Persson &lt;jens at bitcycle.com&gt; wrote:<br></p><p>&gt; IMHO Swift&#39;s handling of function types violate the principle of least<br>&gt; surprise.<br>&gt;<br>&gt; In the example program below, are `a` and `b` really of the same function<br>&gt; type?<br>&gt;<br>&gt; I searched but couldn&#39;t find any proposal or discussion addressing this.<br>&gt;<br>&gt;<br>&gt; // (Xcode 8 beta 6, toolchain: development snapshot 2016-08-26)<br>&gt;<br>&gt; let a:  (Int, Int)  -&gt; Int = { (a, b) in a + b }<br>&gt; let b: ((Int, Int)) -&gt; Int = a<br>&gt; // So `a` can be casted to `b`&#39;s type, OK.<br>&gt;<br>&gt; print(type(of:a)) // ((Int, Int)) -&gt; Int<br>&gt; print(type(of:b)) // ((Int, Int)) -&gt; Int<br>&gt;<br>&gt; // Why are they printed the same?<br>&gt; // I would only expect `b`&#39;s type to look like that.<br>&gt; // Now it looks like both take a tuple of two Ints.<br>&gt;<br>&gt; let c = a( 1, 2 ) // Can only be called this way, as expected.<br>&gt; let d = b((1, 2)) // Can only be called this way, as expected.<br>&gt; print(c) // 3, as expected.<br>&gt; print(d) // 3, as expected.<br>&gt;<br>&gt; print(type(of:a) == type(of:b)) // true<br>&gt; // What? `a` clearly takes two Ints, while `b` clearly takes a<br>&gt; // tuple of two Ints, yet they are the same type?<br>&gt; // I am perplexed.<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160827/4ddb98a9/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Swift&#39;s handling of function types</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>August 29, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Aug 27, 2016, at 9:28 AM, Jens Persson via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; IMHO Swift&#39;s handling of function types violate the principle of least surprise.<br>&gt; <br>&gt; In the example program below, are `a` and `b` really of the same function type?<br>&gt; <br>&gt; I searched but couldn&#39;t find any proposal or discussion addressing this.<br>&gt; <br>&gt; <br>&gt; // (Xcode 8 beta 6, toolchain: development snapshot 2016-08-26)<br>&gt; <br>&gt; let a:  (Int, Int)  -&gt; Int = { (a, b) in a + b }<br>&gt; let b: ((Int, Int)) -&gt; Int = a<br>&gt; // So `a` can be casted to `b`&#39;s type, OK.<br></p><p>This is no longer intended to be the case in Swift 3. The former has two arguments, the latter has one argument. The implementation has not fully caught up with this change, though.<br></p><p>-Joe<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
