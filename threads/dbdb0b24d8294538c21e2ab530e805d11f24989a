<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d2fcdd5a6abf7204973117f37a18671?s=50"></div><header><strong>Type-annotated throws</strong> from <string>Bouke Haarsma</string> &lt;bouke at haarsma.eu&gt;<p>August 28, 2016 at 10:00:00am</p></header><div class="content"><p>On 2016-08-26 15:39:05 +0000, Félix Cloutier via swift-evolution said:<br></p><p>&gt; Hi all,<br>&gt; <br>&gt; Currently, a function that throws is assumed to throw anything. There <br>&gt; was a proposal draft last December to restrict that. The general idea <br>&gt; was that you&#39;d write, for instance:<br>&gt; <br>&gt; <br>&gt; enum Foo: ErrorProtocol {<br>&gt;     case bar<br>&gt;     case baz<br>&gt; }<br>&gt; <br>&gt; func frob() throws Foo {<br>&gt;     throw Foo.bar // throw .bar?<br>&gt; }<br>&gt; <br>&gt; If you `catch Foo` (or every case of Foo), now that the compiler can <br>&gt; verify that your catch is exhaustive, you no longer have to have a <br>&gt; catch-all block at the end of the sequence.<br>&gt; <br>&gt; This impacts the metadata format and has implications on resilience, <br>&gt; which leads me to believe that the discussion could qualify for the <br>&gt; phase 1 of Swift 4. If this is the case, I&#39;d be interested in pulling <br>&gt; out the old discussions and seeing where we left that at.<br>&gt; Félix <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br>Hi,<br></p><p>Shouldn&#39;t the compiler be able to infer the types thrown, and thus <br>whether all types have been thrown? The general idea being that the <br>following would be valid:<br></p><p>enum Foo: Error {<br>    case bar<br>    case baz<br>}<br></p><p>func hello() throws { // inferred to throw only &quot;Foo.bar&quot;<br>    throw Foo.bar<br>}<br></p><p>func world() throws { // inferred to throw only &quot;Foo.baz&quot;<br>    throw Foo.baz<br>}<br></p><p>func galaxy() throws { // inferred to throw only &quot;Foo.baz&quot;<br>    do {<br>        try hello()<br>    } catch Foo.bar {<br>        // ...<br>    }<br>    // catch is exhaustive, no catch-all clause needed<br></p><p>    try world()<br>}<br></p><p>func universe() { // all errors are handled, no &#39;throws&#39; declaration needed<br>    do {<br>        try galaxy()<br>    } catch Foo.baz {<br>        // ..<br>    }<br>    // catch is exhaustive, no catch-all clause needed<br>}<br></p><p>Now for clarity one could add the type information as per your <br>proposal, but wouldn&#39;t be necessary as the compiler would infer it <br>itself.<br></p><p>Either way a +1 from me, as the current model forces one to catch-all <br>errors, even the ones you did not expect to be thrown. Thus potentially <br>hiding programming errors.<br></p><p>- Bouke<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160828/dbdb989a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>Type-annotated throws</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>August 28, 2016 at 08:00:00pm</p></header><div class="content"><p>It would be a breaking change since it modifies the behavior of `throws` without a type parameter. It would also be incompatible with the declaration of methods in protocols.<br></p><p>Félix<br></p><p>&gt; Le 28 août 2016 à 01:44:27, Bouke Haarsma via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; On 2016-08-26 15:39:05 +0000, Félix Cloutier via swift-evolution said:<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; Currently, a function that throws is assumed to throw anything. There was a proposal draft last December to restrict that. The general idea was that you&#39;d write, for instance:<br>&gt; <br>&gt; <br>&gt; enum Foo: ErrorProtocol {<br>&gt;     case bar<br>&gt;     case baz<br>&gt; }<br>&gt; <br>&gt; func frob() throws Foo {<br>&gt;     throw Foo.bar // throw .bar?<br>&gt; }<br>&gt; <br>&gt; If you `catch Foo` (or every case of Foo), now that the compiler can verify that your catch is exhaustive, you no longer have to have a catch-all block at the end of the sequence.<br>&gt; <br>&gt; This impacts the metadata format and has implications on resilience, which leads me to believe that the discussion could qualify for the phase 1 of Swift 4. If this is the case, I&#39;d be interested in pulling out the old discussions and seeing where we left that at.<br>&gt; Félix <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; Shouldn&#39;t the compiler be able to infer the types thrown, and thus whether all types have been thrown? The general idea being that the following would be valid:<br>&gt; <br>&gt; enum Foo: Error {<br>&gt;     case bar<br>&gt;     case baz<br>&gt; }<br>&gt; <br>&gt; func hello() throws { // inferred to throw only &quot;Foo.bar&quot;<br>&gt;     throw Foo.bar<br>&gt; }<br>&gt; <br>&gt; func world() throws { // inferred to throw only &quot;Foo.baz&quot;<br>&gt;     throw Foo.baz<br>&gt; }<br>&gt; <br>&gt; func galaxy() throws { // inferred to throw only &quot;Foo.baz&quot;<br>&gt;     do {<br>&gt;         try hello()<br>&gt;     } catch Foo.bar {<br>&gt;         // ...<br>&gt;     }<br>&gt;     // catch is exhaustive, no catch-all clause needed<br>&gt; <br>&gt;     try world()<br>&gt; }<br>&gt; <br>&gt; func universe() { // all errors are handled, no &#39;throws&#39; declaration needed<br>&gt;     do {<br>&gt;         try galaxy()<br>&gt;     } catch Foo.baz {<br>&gt;         // ..<br>&gt;     }<br>&gt;     // catch is exhaustive, no catch-all clause needed<br>&gt; }<br>&gt; <br>&gt; Now for clarity one could add the type information as per your proposal, but wouldn&#39;t be necessary as the compiler would infer it itself.<br>&gt; <br>&gt; Either way a +1 from me, as the current model forces one to catch-all errors, even the ones you did not expect to be thrown. Thus potentially hiding programming errors.<br>&gt; <br>&gt; - Bouke<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160828/b57674b3/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>Type-annotated throws</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>August 28, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On Aug 28, 2016, at 3:44 AM, Bouke Haarsma via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On 2016-08-26 15:39:05 +0000, Félix Cloutier via swift-evolution said:<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; Currently, a function that throws is assumed to throw anything. There was a proposal draft last December to restrict that. The general idea was that you&#39;d write, for instance:<br>&gt; <br>&gt; <br>&gt; enum Foo: ErrorProtocol {<br>&gt;     case bar<br>&gt;     case baz<br>&gt; }<br>&gt; <br>&gt; func frob() throws Foo {<br>&gt;     throw Foo.bar // throw .bar?<br>&gt; }<br>&gt; <br>&gt; If you `catch Foo` (or every case of Foo), now that the compiler can verify that your catch is exhaustive, you no longer have to have a catch-all block at the end of the sequence.<br>&gt; <br>&gt; This impacts the metadata format and has implications on resilience, which leads me to believe that the discussion could qualify for the phase 1 of Swift 4. If this is the case, I&#39;d be interested in pulling out the old discussions and seeing where we left that at.<br>&gt; Félix <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; Shouldn&#39;t the compiler be able to infer the types thrown, and thus whether all types have been thrown? The general idea being that the following would be valid:<br>&gt; <br>&gt; enum Foo: Error {<br>&gt;     case bar<br>&gt;     case baz<br>&gt; }<br>&gt; <br>&gt; func hello() throws { // inferred to throw only &quot;Foo.bar&quot;<br>&gt;     throw Foo.bar<br>&gt; }<br>&gt; <br>&gt; func world() throws { // inferred to throw only &quot;Foo.baz&quot;<br>&gt;     throw Foo.baz<br>&gt; }<br>&gt; <br>&gt; func galaxy() throws { // inferred to throw only &quot;Foo.baz&quot;<br>&gt;     do {<br>&gt;         try hello()<br>&gt;     } catch Foo.bar {<br>&gt;         // ...<br>&gt;     }<br>&gt;     // catch is exhaustive, no catch-all clause needed<br>&gt; <br>&gt;     try world()<br>&gt; }<br>&gt; <br>&gt; func universe() { // all errors are handled, no &#39;throws&#39; declaration needed<br>&gt;     do {<br>&gt;         try galaxy()<br>&gt;     } catch Foo.baz {<br>&gt;         // ..<br>&gt;     }<br>&gt;     // catch is exhaustive, no catch-all clause needed<br>&gt; }<br>&gt; <br>&gt; Now for clarity one could add the type information as per your proposal, but wouldn&#39;t be necessary as the compiler would infer it itself.<br>&gt; <br>&gt; Either way a +1 from me, as the current model forces one to catch-all errors, even the ones you did not expect to be thrown. Thus potentially hiding programming errors.<br></p><p>I would definitely give a strong -1 to any proposal that tried to have the compiler infer this, because it would break the ability for a future revision of galaxy() to add a new error that could potentially be thrown. If we’re going to add typed throws, they should only be added if deliberately specified by the developer.<br></p><p>Charles<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160828/1ffc15a0/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
