<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>Shorthand unwrap proposal</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>June 23, 2016 at 08:00:00pm</p></header><div class="content"><p>But ! still suggests force unwrapping, while ? suggests safe unwrapping. Why not use a question mark?<br></p><p>&gt; It was in the previous proposal and suggested that you are not trying to shadow the previous variable, but trying to unwrap it - and it acts as unwrapped from there on.<br>&gt; <br>&gt; <br>&gt; &gt; On Jun 23, 2016, at 8:52 PM, Tim Vermeulen&lt;tvermeulen at me.com&gt;wrote:<br>&gt; &gt; <br>&gt; &gt; Why with the exclamation mark? It suggests you’re force unwrapping something.<br>&gt; &gt; <br>&gt; &gt; &gt; &gt; On Jun 23, 2016, at 8:45 PM, Tim Vermeulen via swift-evolution&lt;swift-evolution at swift.org&gt;wrote:<br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; I would love to be able to do something like<br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; doSomething(with: myOptional?)<br>&gt; &gt; &gt; This actually looks good to me, though if I were a newcomer to the language, it would be really cryptic.<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; In case the function returned any value, it could become an optional, just like with try?...<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; I still, however, prefer the original proposal of if let myOptional! { doSomething(myOptional) }...<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; which would be equivalent to<br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; if let myValue = myOptional {<br>&gt; &gt; &gt; &gt; doSomething(with: myValue)<br>&gt; &gt; &gt; &gt; }<br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; But it’s been discussed here before, and I don’t think people were very enthusiastic about it.<br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; &gt; I was wondering if people would be open to adding an unwrap method to the Optional type,I already have a method like this which shortens code for me.<br>&gt; &gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; &gt; So this:<br>&gt; &gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; &gt; let myReallyLongOptionalName: String? = &quot;Hey&quot;<br>&gt; &gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; &gt; if let string = myReallyLongOptionalName {<br>&gt; &gt; &gt; &gt; &gt; doSomethingWith(string)<br>&gt; &gt; &gt; &gt; &gt; }<br>&gt; &gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; &gt; Could become&quot;<br>&gt; &gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; &gt; let myReallyLongOptionalName: String? = &quot;Hey&quot;<br>&gt; &gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; &gt; myReallyLongOptionalName.unwrap {<br>&gt; &gt; &gt; &gt; &gt; doSomethingWith($0)<br>&gt; &gt; &gt; &gt; &gt; }<br>&gt; &gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; &gt; The block would only be fired if myReallyLongOptionalName has a value.<br>&gt; &gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; &gt; ___________________________________<br>&gt; &gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; &gt; James⎥Head of Trolls<br>&gt; &gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; &gt; james at supmenow.com(mailto:james at supmenow.com)⎥supmenow.com(http://supmenow.com)<br>&gt; &gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; &gt; Sup<br>&gt; &gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; &gt; Runway East<br>&gt; &gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; &gt; 10 Finsbury Square<br>&gt; &gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; &gt; London<br>&gt; &gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; &gt; EC2A 1AF<br>&gt; &gt; &gt; &gt; _______________________________________________<br>&gt; &gt; &gt; &gt; swift-evolution mailing list<br>&gt; &gt; &gt; &gt; swift-evolution at swift.org<br>&gt; &gt; &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>Shorthand unwrap proposal</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June 23, 2016 at 09:00:00pm</p></header><div class="content"><p>Sure, the exact syntax is a matter of discussion, I just wasn&#39;t that much of favor of the very short<br></p><p>doSomething(with: myOptional?)<br></p><p>- it looks like a great idea, making the code really short<br>- on the other hand the question mark is next to the variable, but the method&#39;s execution is optional - in that sense something like doSomething(?: myOptional)(with: myOptional) makes more sense, declaring explicitely what optionals does the execution depend on.<br>- nevertheless, in the interest of clarity and readability of the code, I&#39;m still in favor of the original proposal, which requires you to either use if or guard.<br></p><p>&gt; On Jun 23, 2016, at 8:57 PM, Tim Vermeulen &lt;tvermeulen at me.com&gt; wrote:<br>&gt; <br>&gt; But ! still suggests force unwrapping, while ? suggests safe unwrapping. Why not use a question mark?<br>&gt; <br>&gt;&gt; It was in the previous proposal and suggested that you are not trying to shadow the previous variable, but trying to unwrap it - and it acts as unwrapped from there on.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 23, 2016, at 8:52 PM, Tim Vermeulen&lt;tvermeulen at me.com&gt;wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Why with the exclamation mark? It suggests you’re force unwrapping something.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jun 23, 2016, at 8:45 PM, Tim Vermeulen via swift-evolution&lt;swift-evolution at swift.org&gt;wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I would love to be able to do something like<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; doSomething(with: myOptional?)<br>&gt;&gt;&gt;&gt; This actually looks good to me, though if I were a newcomer to the language, it would be really cryptic.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; In case the function returned any value, it could become an optional, just like with try?...<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I still, however, prefer the original proposal of if let myOptional! { doSomething(myOptional) }...<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; which would be equivalent to<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; if let myValue = myOptional {<br>&gt;&gt;&gt;&gt;&gt; doSomething(with: myValue)<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; But it’s been discussed here before, and I don’t think people were very enthusiastic about it.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I was wondering if people would be open to adding an unwrap method to the Optional type,I already have a method like this which shortens code for me.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; So this:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; let myReallyLongOptionalName: String? = &quot;Hey&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; if let string = myReallyLongOptionalName {<br>&gt;&gt;&gt;&gt;&gt;&gt; doSomethingWith(string)<br>&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Could become&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; let myReallyLongOptionalName: String? = &quot;Hey&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; myReallyLongOptionalName.unwrap {<br>&gt;&gt;&gt;&gt;&gt;&gt; doSomethingWith($0)<br>&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The block would only be fired if myReallyLongOptionalName has a value.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; ___________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; James⎥Head of Trolls<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; james at supmenow.com(mailto:james at supmenow.com)⎥supmenow.com(http://supmenow.com)<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Sup<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Runway East<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 10 Finsbury Square<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; London<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; EC2A 1AF<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Shorthand unwrap proposal</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>June 23, 2016 at 02:00:00pm</p></header><div class="content"><p>Dmitri pointed out a few posts ago that Swift already has this.<br>let opInt: Int? = nil<br>opInt.map {$0.toIntMax()} //Evaluates to nil<br></p><p>Are you talking about something different?<br></p><p>- Dave Sweeris<br></p><p>&gt; On Jun 23, 2016, at 2:04 PM, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Sure, the exact syntax is a matter of discussion, I just wasn&#39;t that much of favor of the very short<br>&gt; <br>&gt; doSomething(with: myOptional?)<br>&gt; <br>&gt; - it looks like a great idea, making the code really short<br>&gt; - on the other hand the question mark is next to the variable, but the method&#39;s execution is optional - in that sense something like doSomething(?: myOptional)(with: myOptional) makes more sense, declaring explicitely what optionals does the execution depend on.<br>&gt; - nevertheless, in the interest of clarity and readability of the code, I&#39;m still in favor of the original proposal, which requires you to either use if or guard.<br>&gt; <br>&gt;&gt; On Jun 23, 2016, at 8:57 PM, Tim Vermeulen &lt;tvermeulen at me.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; But ! still suggests force unwrapping, while ? suggests safe unwrapping. Why not use a question mark?<br>&gt;&gt; <br>&gt;&gt;&gt; It was in the previous proposal and suggested that you are not trying to shadow the previous variable, but trying to unwrap it - and it acts as unwrapped from there on.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 23, 2016, at 8:52 PM, Tim Vermeulen&lt;tvermeulen at me.com&gt;wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Why with the exclamation mark? It suggests you’re force unwrapping something.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jun 23, 2016, at 8:45 PM, Tim Vermeulen via swift-evolution&lt;swift-evolution at swift.org&gt;wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I would love to be able to do something like<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; doSomething(with: myOptional?)<br>&gt;&gt;&gt;&gt;&gt; This actually looks good to me, though if I were a newcomer to the language, it would be really cryptic.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; In case the function returned any value, it could become an optional, just like with try?...<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I still, however, prefer the original proposal of if let myOptional! { doSomething(myOptional) }...<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; which would be equivalent to<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; if let myValue = myOptional {<br>&gt;&gt;&gt;&gt;&gt;&gt; doSomething(with: myValue)<br>&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; But it’s been discussed here before, and I don’t think people were very enthusiastic about it.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I was wondering if people would be open to adding an unwrap method to the Optional type,I already have a method like this which shortens code for me.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; So this:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; let myReallyLongOptionalName: String? = &quot;Hey&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; if let string = myReallyLongOptionalName {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; doSomethingWith(string)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Could become&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; let myReallyLongOptionalName: String? = &quot;Hey&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; myReallyLongOptionalName.unwrap {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; doSomethingWith($0)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; The block would only be fired if myReallyLongOptionalName has a value.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; ___________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; James⎥Head of Trolls<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; james at supmenow.com(mailto:james at supmenow.com)⎥supmenow.com(http://supmenow.com)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sup<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Runway East<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 10 Finsbury Square<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; London<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; EC2A 1AF<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/1e8ccbfb/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>Shorthand unwrap proposal</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June 24, 2016 at 02:00:00pm</p></header><div class="content"><p>Yes, this is a bit different. There was a discussion about a month ago (http://thread.gmane.org/gmane.comp.lang.swift.evolution/17142 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/17142&gt;) which had a few good ideas how to deal with the following pattern:<br></p><p>if let x = x { // do something with x }<br>guard let x = x { return }<br></p><p>which is shadowing the original optional value. The suggestion was:<br></p><p>if let x! { // within this block, x is no longer optional }<br></p><p>guard let x! { return }<br>// Now x is no longer an optional.<br></p><p>Generally, it re-used the same variable name to safe-unwrap the optional. In your particular example:<br></p><p>let i: Int? = nil<br>if let i! {<br>	let y = i.toIntMax()<br>	/// ...<br>}<br></p><p>I am aware of the .map (or flatMap) on the optional, however, the guard statement in particular seems like an improvement.<br></p><p>There are many language constructs in Swift that can be expressed using other constructs - you can go all the way down and say that you really don&#39;t need anything other than if and goto.<br></p><p>The question is whether such a syntax sugar is something that would be help one write safer code and if it&#39;s something people would use.<br></p><p><br>&gt; On Jun 23, 2016, at 9:32 PM, David Sweeris &lt;davesweeris at mac.com&gt; wrote:<br>&gt; <br>&gt; Dmitri pointed out a few posts ago that Swift already has this.<br>&gt; let opInt: Int? = nil<br>&gt; opInt.map {$0.toIntMax()} //Evaluates to nil<br>&gt; <br>&gt; Are you talking about something different?<br>&gt; <br>&gt; - Dave Sweeris<br>&gt; <br>&gt;&gt; On Jun 23, 2016, at 2:04 PM, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Sure, the exact syntax is a matter of discussion, I just wasn&#39;t that much of favor of the very short<br>&gt;&gt; <br>&gt;&gt; doSomething(with: myOptional?)<br>&gt;&gt; <br>&gt;&gt; - it looks like a great idea, making the code really short<br>&gt;&gt; - on the other hand the question mark is next to the variable, but the method&#39;s execution is optional - in that sense something like doSomething(?: myOptional)(with: myOptional) makes more sense, declaring explicitely what optionals does the execution depend on.<br>&gt;&gt; - nevertheless, in the interest of clarity and readability of the code, I&#39;m still in favor of the original proposal, which requires you to either use if or guard.<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 23, 2016, at 8:57 PM, Tim Vermeulen &lt;tvermeulen at me.com &lt;mailto:tvermeulen at me.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But ! still suggests force unwrapping, while ? suggests safe unwrapping. Why not use a question mark?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It was in the previous proposal and suggested that you are not trying to shadow the previous variable, but trying to unwrap it - and it acts as unwrapped from there on.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jun 23, 2016, at 8:52 PM, Tim Vermeulen&lt;tvermeulen at me.com &lt;mailto:tvermeulen at me.com&gt;&gt;wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Why with the exclamation mark? It suggests you’re force unwrapping something.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 23, 2016, at 8:45 PM, Tim Vermeulen via swift-evolution&lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I would love to be able to do something like<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; doSomething(with: myOptional?)<br>&gt;&gt;&gt;&gt;&gt;&gt; This actually looks good to me, though if I were a newcomer to the language, it would be really cryptic.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; In case the function returned any value, it could become an optional, just like with try?...<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I still, however, prefer the original proposal of if let myOptional! { doSomething(myOptional) }...<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; which would be equivalent to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; if let myValue = myOptional {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; doSomething(with: myValue)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; But it’s been discussed here before, and I don’t think people were very enthusiastic about it.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I was wondering if people would be open to adding an unwrap method to the Optional type,I already have a method like this which shortens code for me.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; So this:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; let myReallyLongOptionalName: String? = &quot;Hey&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; if let string = myReallyLongOptionalName {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; doSomethingWith(string)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Could become&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; let myReallyLongOptionalName: String? = &quot;Hey&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; myReallyLongOptionalName.unwrap {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; doSomethingWith($0)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; The block would only be fired if myReallyLongOptionalName has a value.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ___________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; James⎥Head of Trolls<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; james at supmenow.com &lt;mailto:james at supmenow.com&gt;(mailto:james at supmenow.com &lt;mailto:james at supmenow.com&gt;)⎥supmenow.com &lt;http://supmenow.com/&gt;(http://supmenow.com &lt;http://supmenow.com/&gt;)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sup<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Runway East<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 10 Finsbury Square<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; London<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; EC2A 1AF<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/c657fd32/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>Shorthand unwrap proposal</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June 24, 2016 at 03:00:00pm</p></header><div class="content"><p>Regards<br>LM<br>(From mobile)<br></p><p>&gt; On Jun 24, 2016, at 2:50 PM, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Yes, this is a bit different. There was a discussion about a month ago (http://thread.gmane.org/gmane.comp.lang.swift.evolution/17142) which had a few good ideas how to deal with the following pattern:<br>&gt; <br>&gt; if let x = x { // do something with x }<br>&gt; guard let x = x { return }<br>&gt; <br></p><p>For my own education i built<br></p><p>if let! x {<br>// x is shadowed<br>}<br></p><p><br>&gt; which is shadowing the original optional value. The suggestion was:<br>&gt; <br>&gt; if let x! { // within this block, x is no longer optional }<br>&gt; <br>&gt; guard let x! { return }<br>&gt; // Now x is no longer an optional.<br>&gt; <br>&gt; Generally, it re-used the same variable name to safe-unwrap the optional. In your particular example:<br>&gt; <br>&gt; let i: Int? = nil<br>&gt; if let i! {<br>&gt; 	let y = i.toIntMax()<br>&gt; 	/// ...<br>&gt; }<br>&gt; <br>&gt; I am aware of the .map (or flatMap) on the optional, however, the guard statement in particular seems like an improvement.<br>&gt; <br>&gt; There are many language constructs in Swift that can be expressed using other constructs - you can go all the way down and say that you really don&#39;t need anything other than if and goto.<br>&gt; <br>&gt; The question is whether such a syntax sugar is something that would be help one write safer code and if it&#39;s something people would use.<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 23, 2016, at 9:32 PM, David Sweeris &lt;davesweeris at mac.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Dmitri pointed out a few posts ago that Swift already has this.<br>&gt;&gt; let opInt: Int? = nil<br>&gt;&gt; opInt.map {$0.toIntMax()} //Evaluates to nil<br>&gt;&gt; <br>&gt;&gt; Are you talking about something different?<br>&gt;&gt; <br>&gt;&gt; - Dave Sweeris<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 23, 2016, at 2:04 PM, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sure, the exact syntax is a matter of discussion, I just wasn&#39;t that much of favor of the very short<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; doSomething(with: myOptional?)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - it looks like a great idea, making the code really short<br>&gt;&gt;&gt; - on the other hand the question mark is next to the variable, but the method&#39;s execution is optional - in that sense something like doSomething(?: myOptional)(with: myOptional) makes more sense, declaring explicitely what optionals does the execution depend on.<br>&gt;&gt;&gt; - nevertheless, in the interest of clarity and readability of the code, I&#39;m still in favor of the original proposal, which requires you to either use if or guard.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 23, 2016, at 8:57 PM, Tim Vermeulen &lt;tvermeulen at me.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; But ! still suggests force unwrapping, while ? suggests safe unwrapping. Why not use a question mark?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; It was in the previous proposal and suggested that you are not trying to shadow the previous variable, but trying to unwrap it - and it acts as unwrapped from there on.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jun 23, 2016, at 8:52 PM, Tim Vermeulen&lt;tvermeulen at me.com&gt;wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Why with the exclamation mark? It suggests you’re force unwrapping something.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 23, 2016, at 8:45 PM, Tim Vermeulen via swift-evolution&lt;swift-evolution at swift.org&gt;wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I would love to be able to do something like<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; doSomething(with: myOptional?)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; This actually looks good to me, though if I were a newcomer to the language, it would be really cryptic.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; In case the function returned any value, it could become an optional, just like with try?...<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I still, however, prefer the original proposal of if let myOptional! { doSomething(myOptional) }...<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; which would be equivalent to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; if let myValue = myOptional {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; doSomething(with: myValue)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; But it’s been discussed here before, and I don’t think people were very enthusiastic about it.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I was wondering if people would be open to adding an unwrap method to the Optional type,I already have a method like this which shortens code for me.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; So this:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; let myReallyLongOptionalName: String? = &quot;Hey&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; if let string = myReallyLongOptionalName {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; doSomethingWith(string)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Could become&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; let myReallyLongOptionalName: String? = &quot;Hey&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; myReallyLongOptionalName.unwrap {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; doSomethingWith($0)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; The block would only be fired if myReallyLongOptionalName has a value.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ___________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; James⎥Head of Trolls<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; james at supmenow.com(mailto:james at supmenow.com)⎥supmenow.com(http://supmenow.com)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sup<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Runway East<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 10 Finsbury Square<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; London<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; EC2A 1AF<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/324c0cc4/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
