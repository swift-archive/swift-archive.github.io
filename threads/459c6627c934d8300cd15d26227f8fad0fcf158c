<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Pitch] Simpler interpretation of a reference to a generic type with no arguments</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>October 11, 2016 at 11:00:00pm</p></header><div class="content"><p>on Tue Oct 11 2016, Slava Pestov &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I could if there’s interest. Since we intend on maintaining source<br>&gt; compatibility, it will not result in a simpler implementation, though,<br>&gt; since we’ll need to keep the old code path around for Swift 3<br>&gt; mode. Still worth it?<br></p><p>IIUC it especially makes sense in light of<br>https://github.com/apple/swift-evolution/blob/master/proposals/0068-universal-self.md<br>Doesn&#39;t that make Self a perfect substitute for the use-case your<br>proposal eliminates?<br></p><p>&gt; Slava<br>&gt;<br>&gt;&gt; On Oct 11, 2016, at 1:58 PM, Pyry Jahkola &lt;pyry.jahkola at iki.fi&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I was reminded of this proposal which seems like an obvious win in clarity. Still planning to<br>&gt; submit it, Slava?<br>&gt;&gt; <br>&gt;&gt; — Pyry<br>&gt;&gt; <br>&gt;&gt;&gt; On 28 Jun 2016, at 21:13, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Thu Jun 23 2016, Slava Pestov &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Simpler interpretation of a reference to a generic type with no<br>&gt;&gt;&gt;&gt; arguments<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Proposal: SE-9999<br>&gt;&gt;&gt;&gt; &lt;https://github.com/slavapestov/swift-evolution/blob/silly-proposals/proposals/9999-simplify-unbound-generic-type.md&gt;<br>&gt;&gt;&gt;&gt; Author: Slava Pestov &lt;https://github.com/slavapestov&gt;<br>&gt;&gt;&gt;&gt; Status: Awaiting review<br>&gt;&gt;&gt;&gt; Review manager: TBD<br>&gt;&gt;&gt;&gt; &lt;https://github.com/slavapestov/swift-evolution/tree/silly-proposals/proposals#introduction&gt;Introduction<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This proposal cleans up the semantics of a reference to a generic type<br>&gt;&gt;&gt;&gt; when no generic arguments are applied.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Swift-evolution thread: Discussion thread topic for that proposal<br>&gt;&gt;&gt;&gt; &lt;http://news.gmane.org/gmane.comp.lang.swift.evolution&gt;<br>&gt;&gt;&gt;&gt; &lt;https://github.com/slavapestov/swift-evolution/tree/silly-proposals/proposals#motivation&gt;Motivation<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Right now, we allow a generic type to be referenced with no generic<br>&gt;&gt;&gt;&gt; arguments applied in a handful of special cases. The two primary rules<br>&gt;&gt;&gt;&gt; here are the following:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If the scope from which the reference is made is nested inside the<br>&gt;&gt;&gt;&gt; definition of the type or an extension thereof, omitting generic<br>&gt;&gt;&gt;&gt; arguments just means to implicitly apply the arguments from context.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; For example,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; struct GenericBox&lt;Contents&gt; {<br>&gt;&gt;&gt;&gt; let contents: Contents<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; // Equivalent to: func clone() -&gt; GenericBox&lt;Contents&gt;<br>&gt;&gt;&gt;&gt; func clone() -&gt; GenericBox {<br>&gt;&gt;&gt;&gt;   return GenericBox(contents: contents)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; extension GenericBox {<br>&gt;&gt;&gt;&gt; func print() {<br>&gt;&gt;&gt;&gt;   // Equivalent to: let cloned: GenericBox&lt;Contents&gt;<br>&gt;&gt;&gt;&gt;   let cloned: GenericBox = clone()<br>&gt;&gt;&gt;&gt;   print(cloned.contents)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; If the type is referenced from an unrelated scope, we attempt to infer<br>&gt;&gt;&gt;&gt; the generic parameters.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; For example,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func makeABox() -&gt; GenericBox&lt;Int&gt; {<br>&gt;&gt;&gt;&gt; // Equivalent to: GenericBox&lt;Int&gt;(contents: 123)<br>&gt;&gt;&gt;&gt; return GenericBox(contents: 123)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; The problem appears when the user expects the second behavior, but<br>&gt;&gt;&gt;&gt; instead encounters the first. For example, the following does not type<br>&gt;&gt;&gt;&gt; check:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; extension GenericBox {<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func transform&lt;T&gt;(f: Contents -&gt; T) -&gt; GenericBox&lt;T&gt; {<br>&gt;&gt;&gt;&gt;   // We resolve &#39;GenericBox&#39; as &#39;GenericBox&lt;Contents&gt;&#39;, rather than<br>&gt;&gt;&gt;&gt;   // inferring the type parameter<br>&gt;&gt;&gt;&gt;   return GenericBox(contents: f(contents))<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; &lt;https://github.com/slavapestov/swift-evolution/tree/silly-proposals/proposals#proposed-solution&gt;Proposed<br>&gt;&gt;&gt;&gt; solution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The proposed solution is to remove the first rule altogether. If the<br>&gt;&gt;&gt;&gt; generic parameters cannot be inferred from context, they must be<br>&gt;&gt;&gt;&gt; specified explicitly with the usual Type&lt;Args...&gt; syntax.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; SGTM.  I&#39;ve always found this shorthand to be somewhat surprising,<br>&gt;&gt;&gt; including in C++ where (IIUC) it originated.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Dave<br>&gt;&gt; <br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d30e546d655d1c7ece0464791a9a90d5?s=50"></div><header><strong>[Pitch] Simpler interpretation of a reference to a generic type with no arguments</strong> from <string>Adrian Kashivskyy</string> &lt;adrian.kashivskyy at me.com&gt;<p>October 26, 2016 at 10:00:00am</p></header><div class="content"><p>I vote to incorporate it somehow into the “Universal Self &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0068-universal-self.md&gt;” proposal.<br></p><p>– Adrian<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161026/5d22c310/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
