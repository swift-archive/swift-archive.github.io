<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0065 A New Model for Collections and Indices</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April 13, 2016 at 04:00:00pm</p></header><div class="content"><p>on Wed Apr 13 2016, plx &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Apr 13, 2016, at 4:26 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Tue Apr 12 2016, Brent Royal-Gordon &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;<br>&gt;&gt;&gt; In these cases, it would be better if the `successor(of:)` method was<br>&gt;&gt;&gt; designed in a way that acknowledged and encapsulated the bounds check<br>&gt;&gt;&gt; that is usually required when it is used:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	while let nextIndex = collection.successor(of: index) {<br>&gt;&gt;&gt; 		…<br>&gt;&gt;&gt; 		index = nextIndex<br>&gt;&gt;&gt; 	}<br>&gt;&gt; <br>&gt;&gt; I disagree; it doesn&#39;t make sense that I should have to check for nil<br>&gt;&gt; when I&#39;m not really interested in the end of the collection as in my<br>&gt;&gt; example above.  Many other nontrivial algorithms will have the same<br>&gt;&gt; characteristic.  If all you need is to loop through indices to the end,<br>&gt;&gt; there are lots of ways to do it.  <br>&gt;&gt; <br>&gt;&gt; Looking closer, what you&#39;ve got here is actually a *highly* unusual<br>&gt;&gt; case, where you want a pair of indices that you want to always point to<br>&gt;&gt; successive elements.  I do not know of any algorithm that would use this<br>&gt;&gt; except maybe bubblesort, and frankly I cannot see any reason to change<br>&gt;&gt; the standard library to support it.  Am I missing something?<br>&gt;<br>&gt; Enumerating adjacent pairs from a sequence has its uses; when it’s a<br>&gt; collection you can make the &quot;adjacent pairs” thing itself a<br>&gt; collection, and a pair of adjacent indices from the source collection<br>&gt; makes a natural choice for the non-end-index indices.<br>&gt;<br>&gt; In this case I agree the language doesn’t need to change; just write<br>&gt; the generic “adjacent pairs” thingy and then use it like so:<br>&gt;<br>&gt;   // if you *really* wanted values:<br>&gt;   for (left,right) in collection.adjacentPairs() { …<br>&gt;<br>&gt;   // if you *did* actually want indices;<br>&gt;   for (leftIndex,rightIndex) in collection.indices.adjacentPairs() {<br>&gt;<br>&gt; …but all the uses I make of it for higher-level things than<br>&gt; e.g. “algorithms” in the STL sense.<br></p><p>At that level, I think you shouldn&#39;t be using low-level index<br>manipulation anyway, which is to say I agree that your adjacentPairs<br>adapter is the right way to go.<br></p><p>-- <br>Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
