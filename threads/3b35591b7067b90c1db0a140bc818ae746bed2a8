<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>[Pitch] Add `mapValues` method to Dictionary</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>May 23, 2016 at 02:00:00pm</p></header><div class="content"><p>I really like this idea, because indeed this wasn’t possible functionally before. I have a small remark though, wouldn’t it be better to let transform be of type (Key, Value) throws -&gt; T instead of (Value) throws -&gt; T? You can just ignore the key (with _) if you don’t need it, but I think it might come in handy in some cases.<br></p><p>&gt; Hello everyone,<br>&gt; <br>&gt; I have added a very simple, but powerful method into a Dictionary extension on multiple projects in the last weeks, so I&#39;d like to bring up the idea of adding it into the standard library, in case other people can see its benefits as well.<br>&gt; <br>&gt; Currently, Dictionary conforms to Collection with its Element being the tuple of Key and Value. Thus transforming the Dictionary with regular map results in [T], whereas I&#39;d find it more useful to also have a method which results in [Key:T].<br>&gt; <br>&gt; Let me present an example of where this makes sense.<br>&gt; <br>&gt; I recently used the GitHub API to crawl some information about repositories. I started with just names (e.g. &quot;/apple/swift&quot;, &quot;/apple/llvm&quot;) and fetched a JSON response for each of the repos, each returning a dictionary, which got saved into one large dictionary as the end of the full operation, keyed by its name, so the structure was something like<br>&gt; <br>&gt; {<br>&gt; &quot;/apple/swift&quot;: { &quot;url&quot;:..., &quot;size&quot;:...., &quot;homepage&quot;:... },<br>&gt; &quot;/apple/llvm&quot;: { &quot;url&quot;:..., &quot;size&quot;:...., &quot;homepage&quot;:... },<br>&gt; ...<br>&gt; }<br>&gt; <br>&gt; To perform analysis, I just needed a dictionary mapping the name of the repository to its size, freeing me to discard the rest of the results.<br>&gt; This is where things get interesting, because you can&#39;t keep this action nicely functional anymore. I had to do the following:<br>&gt; <br>&gt; let repos: [String: JSON] = ...<br>&gt; var sizes: [String: Int] = [:]<br>&gt; for (key, value) in repos {<br>&gt; sizes[key] = value[&quot;size&quot;].int<br>&gt; }<br>&gt; // use sizes...<br>&gt; <br>&gt; Which isn&#39;t a huge amount of work, but it creates unnecessary mutable state in your transformation pipeline (and your current scope). And I had to write it enough times to justify bringing it up on this list.<br>&gt; <br>&gt; I suggest we add the following method to Dictionary:<br>&gt; <br>&gt; extension Dictionary {<br>&gt; public func mapValues&lt;T&gt;(_ transform: @noescape (Value) throws -&gt;T) rethrows -&gt;[Key: T] {<br>&gt; var transformed: [Key: T] = [:]<br>&gt; for (key, value) in self {<br>&gt; transformed[key] = try transform(value)<br>&gt; }<br>&gt; return transformed<br>&gt; }<br>&gt; }<br>&gt; <br>&gt; It is modeled after Collection&#39;s `map` function, with the difference that<br>&gt; a) only values are transformed, instead of the Key,Value tuple and<br>&gt; b) the returned structure is a transformed Dictionary [Key:T], instead of [T]<br>&gt; <br>&gt; This now allows a much nicer workflow:<br>&gt; <br>&gt; let repos: [String: JSON] = ...<br>&gt; var sizes = repos.mapValues { $0[&quot;size&quot;].int }<br>&gt; // use sizes...<br>&gt; <br>&gt; and even multi-step transformations on Dictionaries, previously only possible on Arrays, e.g.<br>&gt; var descriptionTextLengths = repos.mapValues { $0[&quot;description&quot;].string }.mapValues { $0.characters.count }<br>&gt; <br>&gt; You get the idea.<br>&gt; <br>&gt; What do you think? I welcome all feedback, I&#39;d like to see if people would support it before I write a proper proposal.<br>&gt; <br>&gt; Thanks! :)<br>&gt; Honza Dvorsky<br>&gt; <br>&gt; <br>&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Pitch] Add `mapValues` method to Dictionary</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>May 23, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; I have a small remark though, wouldn’t it be better to let transform be of type (Key, Value) throws -&gt; T instead of (Value) throws -&gt; T? You can just ignore the key (with _) if you don’t need it, but I think it might come in handy in some cases.<br></p><p>The problem is, that closes the door to writing many simple maps in functional style. For instance, this:<br></p><p>	dictionaryOfNumbers.mapValues(abs)<br></p><p>Would have to become this:<br></p><p>	dictionaryOfNumbers.mapValues { _, v in abs(v) }<br></p><p>(It *might* be possible to do it with `$1`, but I&#39;m not sure; there are some limitations around that.)<br></p><p>A value-value map is just simpler and cleaner, while almost always giving you what you need.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c8f823910f180809a2420a8be5460be3?s=50"></div><header><strong>[Pitch] Add `mapValues` method to Dictionary</strong> from <string>Dan Appel</string> &lt;dan.appel00 at gmail.com&gt;<p>May 24, 2016 at 06:00:00am</p></header><div class="content"><p>&gt;A value-value map is just simpler and cleaner, while almost always giving<br>you what you need.<br>+1<br></p><p>On Mon, May 23, 2016 at 10:59 PM Brent Royal-Gordon via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; &gt; I have a small remark though, wouldn’t it be better to let transform be<br>&gt; of type (Key, Value) throws -&gt; T instead of (Value) throws -&gt; T? You can<br>&gt; just ignore the key (with _) if you don’t need it, but I think it might<br>&gt; come in handy in some cases.<br>&gt;<br>&gt; The problem is, that closes the door to writing many simple maps in<br>&gt; functional style. For instance, this:<br>&gt;<br>&gt;         dictionaryOfNumbers.mapValues(abs)<br>&gt;<br>&gt; Would have to become this:<br>&gt;<br>&gt;         dictionaryOfNumbers.mapValues { _, v in abs(v) }<br>&gt;<br>&gt; (It *might* be possible to do it with `$1`, but I&#39;m not sure; there are<br>&gt; some limitations around that.)<br>&gt;<br>&gt; A value-value map is just simpler and cleaner, while almost always giving<br>&gt; you what you need.<br>&gt;<br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-- <br>Dan Appel<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160524/38f157b1/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Pitch] Add `mapValues` method to Dictionary</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 24, 2016 at 07:00:00am</p></header><div class="content"><p>Sent from my iPad<br></p><p>On May 24, 2016, at 12:59 AM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; I have a small remark though, wouldn’t it be better to let transform be of type (Key, Value) throws -&gt; T instead of (Value) throws -&gt; T? You can just ignore the key (with _) if you don’t need it, but I think it might come in handy in some cases.<br>&gt; <br>&gt; The problem is, that closes the door to writing many simple maps in functional style. For instance, this:<br>&gt; <br>&gt;    dictionaryOfNumbers.mapValues(abs)<br>&gt; <br>&gt; Would have to become this:<br>&gt; <br>&gt;    dictionaryOfNumbers.mapValues { _, v in abs(v) }<br>&gt; <br>&gt; (It *might* be possible to do it with `$1`, but I&#39;m not sure; there are some limitations around that.)<br>&gt; <br>&gt; A value-value map is just simpler and cleaner, while almost always giving you what you need.<br></p><p>+1.  <br></p><p>I don&#39;t think I have ever mapped keys.  Incidentally, that doesn&#39;t have the usual semantics of a map operation as you can produce duplicate keys.<br></p><p>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/67a361b77f5c6cba256d06ba641f2af8?s=50"></div><header><strong>[Pitch] Add `mapValues` method to Dictionary</strong> from <string>Nate Cook</string> &lt;nate at natecook.com&gt;<p>May 24, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On May 24, 2016, at 7:43 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Sent from my iPad<br>&gt; <br>&gt; On May 24, 2016, at 12:59 AM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; I have a small remark though, wouldn’t it be better to let transform be of type (Key, Value) throws -&gt; T instead of (Value) throws -&gt; T? You can just ignore the key (with _) if you don’t need it, but I think it might come in handy in some cases.<br>&gt;&gt; <br>&gt;&gt; The problem is, that closes the door to writing many simple maps in functional style. For instance, this:<br>&gt;&gt; <br>&gt;&gt;   dictionaryOfNumbers.mapValues(abs)<br>&gt;&gt; <br>&gt;&gt; Would have to become this:<br>&gt;&gt; <br>&gt;&gt;   dictionaryOfNumbers.mapValues { _, v in abs(v) }<br>&gt;&gt; <br>&gt;&gt; (It *might* be possible to do it with `$1`, but I&#39;m not sure; there are some limitations around that.)<br>&gt;&gt; <br>&gt;&gt; A value-value map is just simpler and cleaner, while almost always giving you what you need.<br>&gt; <br>&gt; +1.  <br>&gt; <br>&gt; I don&#39;t think I have ever mapped keys.  Incidentally, that doesn&#39;t have the usual semantics of a map operation as you can produce duplicate keys.<br></p><p>I think this conversation suffers from not knowing whether Dictionary is going to receive a sequence-based initializer. There&#39;s been a proposal for that in the PR queue for quite a while. Could someone in the core team please either merge or close that proposal?<br></p><p>https://github.com/apple/swift-evolution/pull/125<br></p><p>If there&#39;s no sequence-based init, mapValues should probably produce a new Dictionary. If there is, having mapValues produce a dictionary would be redundant. I&#39;d rather see a MapDictionary type that wraps a dictionary and only evaluates the transformation on access, rather than eagerly allocating storage and performing all the transformations.<br></p><p>You can take a look at a rudimentary MapDictionary in this gist: https://gist.github.com/natecook1000/7cfc5c04f18237066f7aca6e9658f276<br></p><p>Best,<br>Nate<br></p><p>&gt;&gt; -- <br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Pitch] Add `mapValues` method to Dictionary</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 24, 2016 at 01:00:00pm</p></header><div class="content"><p>Sent from my iPad<br></p><p>&gt; On May 24, 2016, at 11:34 AM, Nate Cook &lt;nate at natecook.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On May 24, 2016, at 7:43 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Sent from my iPad<br>&gt;&gt; <br>&gt;&gt; On May 24, 2016, at 12:59 AM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; I have a small remark though, wouldn’t it be better to let transform be of type (Key, Value) throws -&gt; T instead of (Value) throws -&gt; T? You can just ignore the key (with _) if you don’t need it, but I think it might come in handy in some cases.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The problem is, that closes the door to writing many simple maps in functional style. For instance, this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  dictionaryOfNumbers.mapValues(abs)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Would have to become this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  dictionaryOfNumbers.mapValues { _, v in abs(v) }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; (It *might* be possible to do it with `$1`, but I&#39;m not sure; there are some limitations around that.)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; A value-value map is just simpler and cleaner, while almost always giving you what you need.<br>&gt;&gt; <br>&gt;&gt; +1.  <br>&gt;&gt; <br>&gt;&gt; I don&#39;t think I have ever mapped keys.  Incidentally, that doesn&#39;t have the usual semantics of a map operation as you can produce duplicate keys.<br>&gt; <br>&gt; I think this conversation suffers from not knowing whether Dictionary is going to receive a sequence-based initializer. There&#39;s been a proposal for that in the PR queue for quite a while. Could someone in the core team please either merge or close that proposal?<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/pull/125<br>&gt; <br>&gt; If there&#39;s no sequence-based init, mapValues should probably produce a new Dictionary. If there is, having mapValues produce a dictionary would be redundant. I&#39;d rather see a MapDictionary type that wraps a dictionary and only evaluates the transformation on access, rather than eagerly allocating storage and performing all the transformations.<br></p><p>The eager vs lazy issue has already been discussed.  Why not support both and let the user decide?<br></p><p>The best approach to laziness is to introduce a Map protocol that allows us to have lazy maps of various kinds, as we do with sequences and protocols.  That seems out of scope for Swift 3.  But there is no reason it should delay an eager method.<br></p><p>&gt; <br>&gt; You can take a look at a rudimentary MapDictionary in this gist: https://gist.github.com/natecook1000/7cfc5c04f18237066f7aca6e9658f276<br>&gt; <br>&gt; Best,<br>&gt; Nate<br>&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>[Pitch] Add `mapValues` method to Dictionary</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>May 25, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; I don&#39;t think I have ever mapped keys.  Incidentally, that doesn&#39;t have the usual semantics of a map operation as you can produce duplicate keys.<br></p><p>As has been pointed out in other messages here, the slight change I suggested would let you see the key when mapping the value, but it wouldn’t let you transform the key. Either way, if Swift 3 gives us a dictionary initialiser from a sequence, then this change won’t be necessary. If it won’t, I still think seeing the key could come in handy at times (although I can’t think of an example).<br></p><p>&gt; On 24 May 2016, at 14:43, Matthew Johnson &lt;matthew at anandabits.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; Sent from my iPad<br>&gt; <br>&gt; On May 24, 2016, at 12:59 AM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; I have a small remark though, wouldn’t it be better to let transform be of type (Key, Value) throws -&gt; T instead of (Value) throws -&gt; T? You can just ignore the key (with _) if you don’t need it, but I think it might come in handy in some cases.<br>&gt;&gt; <br>&gt;&gt; The problem is, that closes the door to writing many simple maps in functional style. For instance, this:<br>&gt;&gt; <br>&gt;&gt;   dictionaryOfNumbers.mapValues(abs)<br>&gt;&gt; <br>&gt;&gt; Would have to become this:<br>&gt;&gt; <br>&gt;&gt;   dictionaryOfNumbers.mapValues { _, v in abs(v) }<br>&gt;&gt; <br>&gt;&gt; (It *might* be possible to do it with `$1`, but I&#39;m not sure; there are some limitations around that.)<br>&gt;&gt; <br>&gt;&gt; A value-value map is just simpler and cleaner, while almost always giving you what you need.<br>&gt; <br>&gt; +1.  <br>&gt; <br>&gt; I don&#39;t think I have ever mapped keys.  Incidentally, that doesn&#39;t have the usual semantics of a map operation as you can produce duplicate keys.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Pitch] Add `mapValues` method to Dictionary</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>May 24, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On 23 May 2016, at 13:03, Tim Vermeulen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I really like this idea, because indeed this wasn’t possible functionally before. I have a small remark though, wouldn’t it be better to let transform be of type (Key, Value) throws -&gt; T instead of (Value) throws -&gt; T? You can just ignore the key (with _) if you don’t need it, but I think it might come in handy in some cases.<br></p><p>For this the key/value pair constructor for Dictionary would be the better option, since the .map() method essentially already lets you do this. Adding key transformation to .mapValues() would only make it less specialised (it’s called .mapValues after all ;), plus it would be incompatible with any simultaneous/future lazy implementation since you can’t just transform the keys lazily (you also need a way to transform them back if you intend to use them for lookups).<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Pitch] Add `mapValues` method to Dictionary</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>May 24, 2016 at 03:00:00am</p></header><div class="content"><p>&gt; For this the key/value pair constructor for Dictionary would be the better option, since the .map() method essentially already lets you do this. Adding key transformation to .mapValues() would only make it less specialised (it’s called .mapValues after all ;), plus it would be incompatible with any simultaneous/future lazy implementation since you can’t just transform the keys lazily (you also need a way to transform them back if you intend to use them for lookups).<br></p><p>He was suggesting the transform be of type (Key, Value) -&gt; NewValue; that is, it would be able to see what the key was, but it wouldn&#39;t be able to transform the key.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Pitch] Add `mapValues` method to Dictionary</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>May 24, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On 24 May 2016, at 11:50, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt; For this the key/value pair constructor for Dictionary would be the better option, since the .map() method essentially already lets you do this. Adding key transformation to .mapValues() would only make it less specialised (it’s called .mapValues after all ;), plus it would be incompatible with any simultaneous/future lazy implementation since you can’t just transform the keys lazily (you also need a way to transform them back if you intend to use them for lookups).<br>&gt; <br>&gt; He was suggesting the transform be of type (Key, Value) -&gt; NewValue; that is, it would be able to see what the key was, but it wouldn&#39;t be able to transform the key.<br></p><p>Whoops right you are, sorry! Hmm, in that case, any examples that need the key for the transformation? I usually view keys as arbitrary, so needing them for this seems a little strange (hence my misunderstanding, at least that’s the reason I’m going to stand by in favour of “I can’t read” ;)<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
