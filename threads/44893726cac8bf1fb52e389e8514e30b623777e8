<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/30e005ba88923a7eab4e90df86ae548a?s=50"></div><header><strong>Swift LLDB Feature Support</strong> from <string>Jessie Serrino</string> &lt;jessie at remind.com&gt;<p>October  5, 2016 at 05:00:00pm</p></header><div class="content"><p>Hi Swift LLDB,<br></p><p>First of all, thanks to some of you for being so responsive!<br></p><p>After playing around a bit with the LLDB build, we had some feature<br>requests for the next version of LLDB.<br></p><p>First and foremost, we‚Äôd like to be able to execute multi-line expressions<br>through *expression*, and create variables in a global context without a *$*.<br>This is incredibly important, and would enable us (and other developers) to<br>make deeper, more valuable investigations into code while debugging.<br></p><p>In a similar vein, we would like to be able to revert these definitions of<br>expressions in Swift. This would allow us to set the state for certain<br>variables, but also revert our code if anything were to go awry.<br></p><p>Would it be possible to have some help with this? We&#39;re relatively new to<br>the codebase, so we&#39;ve been having trouble getting things kickstarted on<br>our end.<br></p><p>Thanks again,<br>Jessie (and Rex)<br></p><p>-- <br>Jessie Serrino<br>iOS Engineer, Remind<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-lldb-dev/attachments/20161005/448977e8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/52cd4e8dbbba27ff1ea5fa122af8bd56?s=50"></div><header><strong>Swift LLDB Feature Support</strong> from <string>Jim Ingham</string> &lt;jingham at apple.com&gt;<p>October  6, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Oct 5, 2016, at 5:01 PM, Jessie Serrino via swift-lldb-dev &lt;swift-lldb-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Swift LLDB,<br>&gt; <br>&gt; First of all, thanks to some of you for being so responsive!<br>&gt; <br>&gt; After playing around a bit with the LLDB build, we had some feature requests for the next version of LLDB.<br>&gt; <br>&gt; First and foremost, we‚Äôd like to be able to execute multi-line expressions through expression, and create variables in a global context without a $. This is incredibly important, and would enable us (and other developers) to make deeper, more valuable investigations into code while debugging.<br></p><p>Not sure what you mean by this.  If you mean read a multi-line expression from a file, then that&#39;s a long-standing request, and should be pretty straight-forward to add.  But you can just do:<br></p><p>(lldb) expr<br>Enter expressions, then terminate with an empty line to evaluate:<br>  1:  //Start writing code<br>  2:  //Some more code<br>  3:<br>(lldb)<br></p><p>Also, both SBFrame.EvaluateExpression and SBTarget.EvaluateExpression take in a python string, which can certainly have newlines.<br></p><p>So there are already ways to do this.  <br></p><p>For the C family of languages, using the --top-level will allow you to create variables in the global context w/o $, that can be used in other expressions:<br></p><p>(lldb) expr --top-level -- int NoSuchVariable = 10;<br>(lldb) expr printf(&quot;%d\n&quot;, NoSuchVariable)<br>10<br>(int) $0 = 3<br></p><p>so you can already do that.<br></p><p>Similarly in Swift, you can do:<br></p><p>(lldb) repl <br>  1&gt; var NoSuchVariable : Int = 10<br>NoSuchVariable: Int = 10<br>  2&gt; ^D<br>(lldb) expr print(&quot;Value: \(NoSuchVariable)&quot;)<br>Value: 10<br></p><p>The bug to fix here is that --top-level isn&#39;t currently wired up for Swift.  That should get wired up to do exactly what the REPL does, but just not require the interactive part.<br></p><p>It seems to me worthwhile to make an explicit statement that you are adding global definitions that will take their place in lookups at the global scope.  And having --top-level be the one that can introduce those definitions seems a perfectly clear way to do this to me.<br></p><p>OTOH, if I were writing a bunch of expression code that could be injected into the target process and then run for investigation purposes from the expr command, and that code relied on some global variable state, I would personally never use variables w/o $&#39;s in front.  That way I&#39;d never find myself in the case where some user tries to run your investigation code who has a local variable with the same name as your variables, and they&#39;ll get some weird error they won&#39;t understand because of the shadowing.<br></p><p>&gt; <br>&gt; In a similar vein, we would like to be able to revert these definitions of expressions in Swift. This would allow us to set the state for certain variables, but also revert our code if anything were to go awry.<br></p><p>It would be pretty straight-forward to dump the whole state that you&#39;ve built up in expressions.  All that information is stored in the &quot;ScratchTypeSystem&quot; for a given language.  See lldb_private::Target::GetScratchTypeSystem*.  So you could just jettison that.  You&#39;d have to be careful because the ScratchTypeSystem also stores utility functions that lldb uses internally.  So you&#39;d probably need to make an internal scratch space, and use that where we make UtilityFunctions and the like.  But this shouldn&#39;t be all that hard.<br></p><p>It would be much trickier to try to throw away individual expressions.  I&#39;m not sure the benefits of this would really be worth the trouble.<br></p><p>&gt; <br>&gt; Would it be possible to have some help with this? We&#39;re relatively new to the codebase, so we&#39;ve been having trouble getting things kickstarted on our end.<br>&gt; <br></p><p>We are certainly available to answer questions and help you get started.<br></p><p>Jim<br></p><p><br>&gt; Thanks again,<br>&gt; Jessie (and Rex)<br>&gt; <br>&gt; -- <br>&gt; Jessie Serrino<br>&gt; iOS Engineer, Remind<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-lldb-dev mailing list<br>&gt; swift-lldb-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-lldb-dev<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/150165bdd736d49ea3773df671eb3829?s=50"></div><header><strong>Swift LLDB Feature Support</strong> from <string>Enrico Granata</string> &lt;egranata at apple.com&gt;<p>October  6, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Oct 5, 2016, at 5:01 PM, Jessie Serrino via swift-lldb-dev &lt;swift-lldb-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Swift LLDB,<br>&gt; <br>&gt; First of all, thanks to some of you for being so responsive!<br>&gt; <br>&gt; After playing around a bit with the LLDB build, we had some feature requests for the next version of LLDB.<br>&gt; <br>&gt; First and foremost, we‚Äôd like to be able to execute multi-line expressions through expression,<br>&gt; <br>Good news! This is already possible:<br></p><p><br></p><p>As for the other features you suggest, I&#39;ll let someone who is more in depth with the expression evaluator go into details<br></p><p>&gt; and create variables in a global context without a $. This is incredibly important, and would enable us (and other developers) to make deeper, more valuable investigations into code while debugging.<br>&gt; <br>&gt; In a similar vein, we would like to be able to revert these definitions of expressions in Swift. This would allow us to set the state for certain variables, but also revert our code if anything were to go awry. <br>&gt; <br>&gt; Would it be possible to have some help with this? We&#39;re relatively new to the codebase, so we&#39;ve been having trouble getting things kickstarted on our end.<br>&gt; <br>&gt; Thanks again,<br>&gt; Jessie (and Rex)<br>&gt; <br>&gt; -- <br>&gt; Jessie Serrino<br>&gt; iOS Engineer, Remind<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-lldb-dev mailing list<br>&gt; swift-lldb-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-lldb-dev<br></p><p><br>Thanks,<br>- Enrico<br>üì© egranata@Ô£ø.com ‚òéÔ∏è 27683<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-lldb-dev/attachments/20161006/5f8410e4/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: PastedGraphic-1.png<br>Type: image/png<br>Size: 46038 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-lldb-dev/attachments/20161006/5f8410e4/attachment.png&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/30e005ba88923a7eab4e90df86ae548a?s=50"></div><header><strong>Swift LLDB Feature Support</strong> from <string>Jessie Serrino</string> &lt;jessie at remind.com&gt;<p>October 19, 2016 at 06:00:00pm</p></header><div class="content"><p>Hi Swift-LLDB,<br></p><p>I had something I wanted to follow up on.<br></p><p>I&#39;m currently working in a mixed development environment (Obj-C &amp; Swift),<br>and we&#39;re slowly migrating to Swift. I&#39;ve managed to connect lldb to a<br>Swift only environment and use REPL to successfully inspect objects without<br>issue. That said, when I connect to my mixed project, it doesn&#39;t allow me<br>to import UIKit (see errors below):<br></p><p>(lldb) repl<br>3&gt; import UIKit<br>error: Couldn&#39;t lookup symbols:<br>  _globalinit_33_FD9A49A256BEB6AF7C48013347ADC3BA_func4<br>  _globalinit_33_FD9A49A256BEB6AF7C48013347ADC3BA_token4<br>  __TZvOs11CommandLine11_unsafeArgvGSpGSqGSpVs4Int8___<br>  __TZvOs11CommandLine5_argcVs5Int32<br></p><p>I&#39;ve appropriately set the language to Swift as follows: (lldb) settings<br>set target.language swift<br></p><p>My suspicion is that there are two UIKits (one in Objective-C and one in<br>Swift). Would you be able to offer me some clarity to resolve this issue?<br></p><p>Thank you,<br>Jessie<br></p><p>On Thu, Oct 6, 2016 at 10:43 AM, Enrico Granata &lt;egranata at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Oct 5, 2016, at 5:01 PM, Jessie Serrino via swift-lldb-dev &lt;<br>&gt; swift-lldb-dev at swift.org&gt; wrote:<br>&gt;<br>&gt; Hi Swift LLDB,<br>&gt;<br>&gt; First of all, thanks to some of you for being so responsive!<br>&gt;<br>&gt; After playing around a bit with the LLDB build, we had some feature<br>&gt; requests for the next version of LLDB.<br>&gt;<br>&gt; First and foremost, we‚Äôd like to be able to execute multi-line expressions<br>&gt; through *expression*,<br>&gt;<br>&gt; Good news! This is already possible:<br>&gt;<br>&gt;<br>&gt; As for the other features you suggest, I&#39;ll let someone who is more in<br>&gt; depth with the expression evaluator go into details<br>&gt;<br>&gt; and create variables in a global context without a *$*. This is<br>&gt; incredibly important, and would enable us (and other developers) to make<br>&gt; deeper, more valuable investigations into code while debugging.<br>&gt;<br>&gt; In a similar vein, we would like to be able to revert these definitions of<br>&gt; expressions in Swift. This would allow us to set the state for certain<br>&gt; variables, but also revert our code if anything were to go awry.<br>&gt;<br>&gt; Would it be possible to have some help with this? We&#39;re relatively new to<br>&gt; the codebase, so we&#39;ve been having trouble getting things kickstarted on<br>&gt; our end.<br>&gt;<br>&gt; Thanks again,<br>&gt; Jessie (and Rex)<br>&gt;<br>&gt; --<br>&gt; Jessie Serrino<br>&gt; iOS Engineer, Remind<br>&gt; _______________________________________________<br>&gt; swift-lldb-dev mailing list<br>&gt; swift-lldb-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-lldb-dev<br>&gt;<br>&gt;<br>&gt;<br>&gt; Thanks,<br>&gt; *- Enrico*<br>&gt; üì© egranata@Ô£ø.com ‚òéÔ∏è 27683<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-lldb-dev/attachments/20161019/d1df8515/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: PastedGraphic-1.png<br>Type: image/png<br>Size: 46038 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-lldb-dev/attachments/20161019/d1df8515/attachment.png&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d7a1a861cc623f3b4616902e71b9ec40?s=50"></div><header><strong>Swift LLDB Feature Support</strong> from <string>Todd Fiala</string> &lt;tfiala at apple.com&gt;<p>October 20, 2016 at 07:00:00am</p></header><div class="content"><p>Hi Jessie!<br></p><p>&gt; On Oct 19, 2016, at 6:12 PM, Jessie Serrino via swift-lldb-dev &lt;swift-lldb-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Swift-LLDB,<br>&gt; <br>&gt; I had something I wanted to follow up on.<br>&gt; <br>&gt; I&#39;m currently working in a mixed development environment (Obj-C &amp; Swift), and we&#39;re slowly migrating to Swift. I&#39;ve managed to connect lldb to a Swift only environment and use REPL to successfully inspect objects without issue. That said, when I connect to my mixed project, it doesn&#39;t allow me to import UIKit (see errors below):<br>&gt; <br>&gt; (lldb) repl<br>&gt; 3&gt; import UIKit<br>&gt; error: Couldn&#39;t lookup symbols:<br>&gt;   _globalinit_33_FD9A49A256BEB6AF7C48013347ADC3BA_func4<br>&gt;   _globalinit_33_FD9A49A256BEB6AF7C48013347ADC3BA_token4<br>&gt;   __TZvOs11CommandLine11_unsafeArgvGSpGSqGSpVs4Int8___<br>&gt;   __TZvOs11CommandLine5_argcVs5Int32<br>&gt; <br>&gt; I&#39;ve appropriately set the language to Swift as follows: (lldb) settings set target.language swift<br>&gt; <br>&gt; My suspicion is that there are two UIKits (one in Objective-C and one in Swift). Would you be able to offer me some clarity to resolve this issue?<br>&gt; <br></p><p>I have a few bits of info I‚Äôd like to gather:<br></p><p>* Which version of Xcode are you using?<br></p><p>* Are you using a custom-built or downloaded toolchain for Swift?  How about LLDB?<br></p><p>* What‚Äôs the output when you type ‚Äúlldb --version‚Äù and ‚Äúswiftc --version‚Äù?<br></p><p>* Can you reproduce it in a small project, and send us steps to follow?<br></p><p>Thanks!<br></p><p>-Todd<br></p><p>&gt; Thank you,<br>&gt; Jessie<br>&gt; <br>&gt; On Thu, Oct 6, 2016 at 10:43 AM, Enrico Granata &lt;egranata at apple.com &lt;mailto:egranata at apple.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Oct 5, 2016, at 5:01 PM, Jessie Serrino via swift-lldb-dev &lt;swift-lldb-dev at swift.org &lt;mailto:swift-lldb-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi Swift LLDB,<br>&gt;&gt; <br>&gt;&gt; First of all, thanks to some of you for being so responsive!<br>&gt;&gt; <br>&gt;&gt; After playing around a bit with the LLDB build, we had some feature requests for the next version of LLDB.<br>&gt;&gt; <br>&gt;&gt; First and foremost, we‚Äôd like to be able to execute multi-line expressions through expression,<br>&gt;&gt; <br>&gt; Good news! This is already possible:<br>&gt; <br>&gt; &lt;PastedGraphic-1.png&gt;<br>&gt; <br>&gt; As for the other features you suggest, I&#39;ll let someone who is more in depth with the expression evaluator go into details<br>&gt; <br>&gt;&gt; and create variables in a global context without a $. This is incredibly important, and would enable us (and other developers) to make deeper, more valuable investigations into code while debugging.<br>&gt;&gt; <br>&gt;&gt; In a similar vein, we would like to be able to revert these definitions of expressions in Swift. This would allow us to set the state for certain variables, but also revert our code if anything were to go awry. <br>&gt;&gt; <br>&gt;&gt; Would it be possible to have some help with this? We&#39;re relatively new to the codebase, so we&#39;ve been having trouble getting things kickstarted on our end.<br>&gt;&gt; <br>&gt;&gt; Thanks again,<br>&gt;&gt; Jessie (and Rex)<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Jessie Serrino<br>&gt;&gt; iOS Engineer, Remind<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-lldb-dev mailing list<br>&gt;&gt; swift-lldb-dev at swift.org &lt;mailto:swift-lldb-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-lldb-dev &lt;https://lists.swift.org/mailman/listinfo/swift-lldb-dev&gt;<br>&gt; <br>&gt; <br>&gt; Thanks,<br>&gt; - Enrico<br>&gt; üì© egranata@Ô£ø.com ‚òéÔ∏è 27683<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-lldb-dev mailing list<br>&gt; swift-lldb-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-lldb-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-lldb-dev/attachments/20161020/f98e1a30/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d7a1a861cc623f3b4616902e71b9ec40?s=50"></div><header><strong>Swift LLDB Feature Support</strong> from <string>Todd Fiala</string> &lt;tfiala at apple.com&gt;<p>October 20, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; On Oct 20, 2016, at 7:53 AM, Todd Fiala &lt;tfiala at apple.com&gt; wrote:<br>&gt; <br>&gt; Hi Jessie!<br>&gt; <br>&gt;&gt; On Oct 19, 2016, at 6:12 PM, Jessie Serrino via swift-lldb-dev &lt;swift-lldb-dev at swift.org &lt;mailto:swift-lldb-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi Swift-LLDB,<br>&gt;&gt; <br>&gt;&gt; I had something I wanted to follow up on.<br>&gt;&gt; <br>&gt;&gt; I&#39;m currently working in a mixed development environment (Obj-C &amp; Swift), and we&#39;re slowly migrating to Swift. I&#39;ve managed to connect lldb to a Swift only environment and use REPL to successfully inspect objects without issue. That said, when I connect to my mixed project, it doesn&#39;t allow me to import UIKit (see errors below):<br>&gt;&gt; <br>&gt;&gt; (lldb) repl<br>&gt;&gt; 3&gt; import UIKit<br>&gt;&gt; error: Couldn&#39;t lookup symbols:<br>&gt;&gt;   _globalinit_33_FD9A49A256BEB6AF7C48013347ADC3BA_func4<br>&gt;&gt;   _globalinit_33_FD9A49A256BEB6AF7C48013347ADC3BA_token4<br>&gt;&gt;   __TZvOs11CommandLine11_unsafeArgvGSpGSqGSpVs4Int8___<br>&gt;&gt;   __TZvOs11CommandLine5_argcVs5Int32<br>&gt;&gt; <br>&gt;&gt; I&#39;ve appropriately set the language to Swift as follows: (lldb) settings set target.language swift<br>&gt;&gt; <br>&gt;&gt; My suspicion is that there are two UIKits (one in Objective-C and one in Swift). Would you be able to offer me some clarity to resolve this issue?<br>&gt;&gt; <br>&gt; <br>&gt; I have a few bits of info I‚Äôd like to gather:<br>&gt; <br>&gt; * Which version of Xcode are you using?<br>&gt; <br>&gt; * Are you using a custom-built or downloaded toolchain for Swift?  How about LLDB?<br>&gt; <br>&gt; * What‚Äôs the output when you type ‚Äúlldb --version‚Äù and ‚Äúswiftc --version‚Äù?<br>&gt; <br>&gt; * Can you reproduce it in a small project, and send us steps to follow?<br>&gt; <br></p><p>Another question:<br></p><p>* When you ran the repl and import command above, what language was the top (0th) stack frame in the attached process?  Was it Swift or Objective-C?<br></p><p>&gt; Thanks!<br>&gt; <br>&gt; -Todd<br>&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; Jessie<br>&gt;&gt; <br>&gt;&gt; On Thu, Oct 6, 2016 at 10:43 AM, Enrico Granata &lt;egranata at apple.com &lt;mailto:egranata at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Oct 5, 2016, at 5:01 PM, Jessie Serrino via swift-lldb-dev &lt;swift-lldb-dev at swift.org &lt;mailto:swift-lldb-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi Swift LLDB,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; First of all, thanks to some of you for being so responsive!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; After playing around a bit with the LLDB build, we had some feature requests for the next version of LLDB.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; First and foremost, we‚Äôd like to be able to execute multi-line expressions through expression,<br>&gt;&gt;&gt; <br>&gt;&gt; Good news! This is already possible:<br>&gt;&gt; <br>&gt;&gt; &lt;PastedGraphic-1.png&gt;<br>&gt;&gt; <br>&gt;&gt; As for the other features you suggest, I&#39;ll let someone who is more in depth with the expression evaluator go into details<br>&gt;&gt; <br>&gt;&gt;&gt; and create variables in a global context without a $. This is incredibly important, and would enable us (and other developers) to make deeper, more valuable investigations into code while debugging.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In a similar vein, we would like to be able to revert these definitions of expressions in Swift. This would allow us to set the state for certain variables, but also revert our code if anything were to go awry. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Would it be possible to have some help with this? We&#39;re relatively new to the codebase, so we&#39;ve been having trouble getting things kickstarted on our end.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks again,<br>&gt;&gt;&gt; Jessie (and Rex)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Jessie Serrino<br>&gt;&gt;&gt; iOS Engineer, Remind<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-lldb-dev mailing list<br>&gt;&gt;&gt; swift-lldb-dev at swift.org &lt;mailto:swift-lldb-dev at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-lldb-dev &lt;https://lists.swift.org/mailman/listinfo/swift-lldb-dev&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; - Enrico<br>&gt;&gt; üì© egranata@Ô£ø.com ‚òéÔ∏è 27683<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-lldb-dev mailing list<br>&gt;&gt; swift-lldb-dev at swift.org &lt;mailto:swift-lldb-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-lldb-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-lldb-dev/attachments/20161020/a77439e5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d7a1a861cc623f3b4616902e71b9ec40?s=50"></div><header><strong>Swift LLDB Feature Support</strong> from <string>Todd Fiala</string> &lt;tfiala at apple.com&gt;<p>October 20, 2016 at 07:00:00am</p></header><div class="content"><p>So we don‚Äôt lose track of all this info, can you create a JIRA ticket on bugs.swift.org &lt;http://bugs.swift.org/&gt; to track this?<br></p><p>Thanks!<br></p><p>-Todd<br></p><p>&gt; On Oct 20, 2016, at 7:54 AM, Todd Fiala &lt;tfiala at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Oct 20, 2016, at 7:53 AM, Todd Fiala &lt;tfiala at apple.com &lt;mailto:tfiala at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi Jessie!<br>&gt;&gt; <br>&gt;&gt;&gt; On Oct 19, 2016, at 6:12 PM, Jessie Serrino via swift-lldb-dev &lt;swift-lldb-dev at swift.org &lt;mailto:swift-lldb-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi Swift-LLDB,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I had something I wanted to follow up on.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m currently working in a mixed development environment (Obj-C &amp; Swift), and we&#39;re slowly migrating to Swift. I&#39;ve managed to connect lldb to a Swift only environment and use REPL to successfully inspect objects without issue. That said, when I connect to my mixed project, it doesn&#39;t allow me to import UIKit (see errors below):<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; (lldb) repl<br>&gt;&gt;&gt; 3&gt; import UIKit<br>&gt;&gt;&gt; error: Couldn&#39;t lookup symbols:<br>&gt;&gt;&gt;   _globalinit_33_FD9A49A256BEB6AF7C48013347ADC3BA_func4<br>&gt;&gt;&gt;   _globalinit_33_FD9A49A256BEB6AF7C48013347ADC3BA_token4<br>&gt;&gt;&gt;   __TZvOs11CommandLine11_unsafeArgvGSpGSqGSpVs4Int8___<br>&gt;&gt;&gt;   __TZvOs11CommandLine5_argcVs5Int32<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;ve appropriately set the language to Swift as follows: (lldb) settings set target.language swift<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; My suspicion is that there are two UIKits (one in Objective-C and one in Swift). Would you be able to offer me some clarity to resolve this issue?<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I have a few bits of info I‚Äôd like to gather:<br>&gt;&gt; <br>&gt;&gt; * Which version of Xcode are you using?<br>&gt;&gt; <br>&gt;&gt; * Are you using a custom-built or downloaded toolchain for Swift?  How about LLDB?<br>&gt;&gt; <br>&gt;&gt; * What‚Äôs the output when you type ‚Äúlldb --version‚Äù and ‚Äúswiftc --version‚Äù?<br>&gt;&gt; <br>&gt;&gt; * Can you reproduce it in a small project, and send us steps to follow?<br>&gt;&gt; <br>&gt; <br>&gt; Another question:<br>&gt; <br>&gt; * When you ran the repl and import command above, what language was the top (0th) stack frame in the attached process?  Was it Swift or Objective-C?<br>&gt; <br>&gt;&gt; Thanks!<br>&gt;&gt; <br>&gt;&gt; -Todd<br>&gt;&gt; <br>&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt; Jessie<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Thu, Oct 6, 2016 at 10:43 AM, Enrico Granata &lt;egranata at apple.com &lt;mailto:egranata at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Oct 5, 2016, at 5:01 PM, Jessie Serrino via swift-lldb-dev &lt;swift-lldb-dev at swift.org &lt;mailto:swift-lldb-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hi Swift LLDB,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; First of all, thanks to some of you for being so responsive!<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; After playing around a bit with the LLDB build, we had some feature requests for the next version of LLDB.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; First and foremost, we‚Äôd like to be able to execute multi-line expressions through expression,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; Good news! This is already possible:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &lt;PastedGraphic-1.png&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As for the other features you suggest, I&#39;ll let someone who is more in depth with the expression evaluator go into details<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; and create variables in a global context without a $. This is incredibly important, and would enable us (and other developers) to make deeper, more valuable investigations into code while debugging.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; In a similar vein, we would like to be able to revert these definitions of expressions in Swift. This would allow us to set the state for certain variables, but also revert our code if anything were to go awry. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Would it be possible to have some help with this? We&#39;re relatively new to the codebase, so we&#39;ve been having trouble getting things kickstarted on our end.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks again,<br>&gt;&gt;&gt;&gt; Jessie (and Rex)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; Jessie Serrino<br>&gt;&gt;&gt;&gt; iOS Engineer, Remind<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-lldb-dev mailing list<br>&gt;&gt;&gt;&gt; swift-lldb-dev at swift.org &lt;mailto:swift-lldb-dev at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-lldb-dev &lt;https://lists.swift.org/mailman/listinfo/swift-lldb-dev&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt; - Enrico<br>&gt;&gt;&gt; üì© egranata@Ô£ø.com ‚òéÔ∏è 27683<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-lldb-dev mailing list<br>&gt;&gt;&gt; swift-lldb-dev at swift.org &lt;mailto:swift-lldb-dev at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-lldb-dev &lt;https://lists.swift.org/mailman/listinfo/swift-lldb-dev&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-lldb-dev/attachments/20161020/1b56d884/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
