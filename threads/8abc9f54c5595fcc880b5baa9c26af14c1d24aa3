<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ccbc60826cca6a6f9c527b671cdad531?s=50"></div><header><strong>[Pitch] Changing the behavior of Subsequences of String Views</strong> from <string>LoÃ¯c Lecrenier</string> &lt;loiclecrenier at icloud.com&gt;<p>June 28, 2016 at 06:00:00pm</p></header><div class="content"><p>Hi swift-evolution ðŸ˜Š<br></p><p>Stringâ€™s Views have a few odd properties that have bothered me for a while. I initially did not bring it up because I thought a String redesign was coming. But since Swift 3 will be released very soonâ€”and with the recent focus on breaking changesâ€”I thought now might be a good time to talk about it. <br></p><p>## Subsequences of UTF16View and CharacterView donâ€™t use the same indices as the original collection<br></p><p>One requirement of the Collection protocol is <br></p><p>public subscript(bounds: Range&lt;Self.Index&gt;) -&gt; Self.SubSequence { get }<br></p><p>whose documentation says:<br></p><p>/// Accesses a contiguous subrange of the collection&#39;s elements.<br>///<br>/// The accessed slice uses the same indices for the same elements as the<br>/// original collection uses.<br></p><p>However, it appears that UTF16View and CharacterView donâ€™t follow the documentation. For example:<br></p><p>let str = &quot;Hello World!&quot;.utf16<br>let (start, end) = (str.index(str.startIndex, offsetBy: 2), str.index(str.startIndex, offsetBy: 9))<br></p><p>let sub1 = str[start ..&lt; end]<br>print(sub1) // llo Wor<br></p><p>let sub2 = str[sub1.startIndex ..&lt; sub1.endIndex]<br>print(sub2) // Hello W<br></p><p>Here, using `sub1`â€™s indices on the original collection `str` returns a completely different subsequence.<br>I think that, ideally, `sub2` should be equal to `sub1`, just like when using UTF8View and UnicodeScalarView.<br></p><p>## Accessing elements past the end of the subsequence<br></p><p>Consider this piece of code:<br></p><p>let str = &quot;Hello World!&quot;.utf8<br>let (start, end) = (str.index(str.startIndex, offsetBy: 2), str.index(str.startIndex, offsetBy: 9))<br></p><p>let sub1 = str[start ..&lt; end]<br>print(sub1) // llo Wor<br></p><p>let pastEnd = sub1.index(sub1.endIndex, offsetBy: 2)<br></p><p>let sub2 = sub1[sub1.startIndex ..&lt; pastEnd]<br>print(sub2) // llo World<br></p><p>I was able to access elements of the original string that should be beyond the reach of `sub1`.<br>Using a UnicodeScalarView gives an odd result too: indices past the end are seemingly ignored, and `sub2` is equal to `sub1`.<br></p><p>## Conclusion<br></p><p>I think Stringâ€™s Views should<br>1. Follow Collectionâ€™s documentation by using the same indices for their subsequences<br>2. Provide safe, consistent behavior when using a subscript operation with a past-the-end index  <br></p><p>However, this means more breaking changes that wonâ€™t be easy to detect.<br></p><p>Thoughts?<br></p><p>LoÃ¯c<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160628/8abc4aa3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>[Pitch] Changing the behavior of Subsequences of String Views</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>June 28, 2016 at 10:00:00am</p></header><div class="content"><p>On Tue, Jun 28, 2016 at 9:46 AM, LoÃ¯c Lecrenier<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt; I think Stringâ€™s Views should<br>&gt; 1. Follow Collectionâ€™s documentation by using the same indices for their subsequences<br>&gt; 2. Provide safe, consistent behavior when using a subscript operation with a past-the-end index<br></p><p>Hi LoÃ¯c,<br></p><p>These are bugs.  Fixes for these bugs don&#39;t need to be approved by<br>swift-evolution.  We would appreciate patches for these issues.<br></p><p>I believe though that the fixes might be non-trivial.  I&#39;d be happy to<br>discuss ideas how to fix this and will help review the patches.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ccbc60826cca6a6f9c527b671cdad531?s=50"></div><header><strong>[Pitch] Changing the behavior of Subsequences of String Views</strong> from <string>LoÃ¯c Lecrenier</string> &lt;loiclecrenier at icloud.com&gt;<p>June 28, 2016 at 09:00:00pm</p></header><div class="content"><p>Hi Dmitri,<br></p><p>Thanks for the quick answer,  I filed a bug here: https://bugs.swift.org/browse/SR-1927<br></p><p>(Unfortunately, I donâ€™t think I could write a patch myself)<br></p><p>LoÃ¯c<br></p><p>&gt; On Jun 28, 2016, at 7:25 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Tue, Jun 28, 2016 at 9:46 AM, LoÃ¯c Lecrenier<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; I think Stringâ€™s Views should<br>&gt;&gt; 1. Follow Collectionâ€™s documentation by using the same indices for their subsequences<br>&gt;&gt; 2. Provide safe, consistent behavior when using a subscript operation with a past-the-end index<br>&gt; <br>&gt; Hi LoÃ¯c,<br>&gt; <br>&gt; These are bugs.  Fixes for these bugs don&#39;t need to be approved by<br>&gt; swift-evolution.  We would appreciate patches for these issues.<br>&gt; <br>&gt; I believe though that the fixes might be non-trivial.  I&#39;d be happy to<br>&gt; discuss ideas how to fix this and will help review the patches.<br>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
