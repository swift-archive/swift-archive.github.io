<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Late Pitch] Deprecations, Moves, and Renames</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>August  9, 2016 at 12:00:00pm</p></header><div class="content"><p>Hi Everybody,<br></p><p>With another round of apologies for taking late action, we propose to<br>make some deprecations, moves, and renames.  The background for these<br>moves is as follows:<br></p><p>We&#39;ve always known that when Swift reached ABI stability (now slated for<br>Swift 4), we would be committed to supporting many of the standard<br>library&#39;s design decisions for years to come.  What we only realized<br>very recently is that, although Swift 3.0 is *not* shipping with a<br>stable ABI, the promise that Swift 3.0 code will work with Swift 4.0<br>code creates similar implications when it comes to certain protocols,<br>today.  Especially where these protocols show up in refinement<br>hierarchies, we can&#39;t keep Swift 3 code working in the future without<br>carrying them forward into future libraries.<br></p><p>The proposed changes are as follows:<br></p><p>* Move `CustomPlaygroundQuickLookable` to the PlaygroundSupport module.<br>  This component is really only useful for playgrounds, and doesn&#39;t<br>  belong in the standard library.<br></p><p>* Deprecate the Indexable protocols with a message indicating that they<br>  will be gone in Swift 4.  These protocols are implementation details<br>  of the standard library designed to work around language limitations<br>  that we expect to be gone in Swift 4.  There&#39;s no reason for anyone to<br>  ever touch these; users should always use a corresponding Collection<br>  protocol (e.g. instead of MutableIndexable, use MutableCollection).<br></p><p>* Deprecate the ExpressibleByStringInterpolation protocol with a<br>  message indicating that its design is expected to change.  We know<br>  this protocol to be mis-designed<br>  (https://bugs.swift.org/browse/SR-1260) and limited<br>  (https://bugs.swift.org/browse/SR-2303), but there&#39;s no time to fix it<br>  for Swift 3.  If we knew what the new design should look like, we<br>  might be able to calculate that the current API is supportable in a<br>  forward-compatible way (as we do for Comparable).  Unfortunately, we<br>  do not.<br></p><p>* Rename Streamable to TextOutputStreamable and add a deprecated<br>  Streamable typealias for it.  Now that OutputStream been renamed to<br>  TextOutputStream, we should also move Streamable out of the way.<br></p><p>Deprecation is being proposed instead of underscoring or renaming<br>because it allows existing code to keep working (with warnings).  At<br>this late stage, it would be bad to actually break anything.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Late Pitch] Deprecations, Moves, and Renames</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>August  9, 2016 at 07:00:00pm</p></header><div class="content"><p>+1. All seems reasonable to me.<br>On Tue, Aug 9, 2016 at 14:16 Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; Hi Everybody,<br>&gt;<br>&gt; With another round of apologies for taking late action, we propose to<br>&gt; make some deprecations, moves, and renames.  The background for these<br>&gt; moves is as follows:<br>&gt;<br>&gt; We&#39;ve always known that when Swift reached ABI stability (now slated for<br>&gt; Swift 4), we would be committed to supporting many of the standard<br>&gt; library&#39;s design decisions for years to come.  What we only realized<br>&gt; very recently is that, although Swift 3.0 is *not* shipping with a<br>&gt; stable ABI, the promise that Swift 3.0 code will work with Swift 4.0<br>&gt; code creates similar implications when it comes to certain protocols,<br>&gt; today.  Especially where these protocols show up in refinement<br>&gt; hierarchies, we can&#39;t keep Swift 3 code working in the future without<br>&gt; carrying them forward into future libraries.<br>&gt;<br>&gt; The proposed changes are as follows:<br>&gt;<br>&gt; * Move `CustomPlaygroundQuickLookable` to the PlaygroundSupport module.<br>&gt;   This component is really only useful for playgrounds, and doesn&#39;t<br>&gt;   belong in the standard library.<br>&gt;<br>&gt; * Deprecate the Indexable protocols with a message indicating that they<br>&gt;   will be gone in Swift 4.  These protocols are implementation details<br>&gt;   of the standard library designed to work around language limitations<br>&gt;   that we expect to be gone in Swift 4.  There&#39;s no reason for anyone to<br>&gt;   ever touch these; users should always use a corresponding Collection<br>&gt;   protocol (e.g. instead of MutableIndexable, use MutableCollection).<br>&gt;<br>&gt; * Deprecate the ExpressibleByStringInterpolation protocol with a<br>&gt;   message indicating that its design is expected to change.  We know<br>&gt;   this protocol to be mis-designed<br>&gt;   (https://bugs.swift.org/browse/SR-1260) and limited<br>&gt;   (https://bugs.swift.org/browse/SR-2303), but there&#39;s no time to fix it<br>&gt;   for Swift 3.  If we knew what the new design should look like, we<br>&gt;   might be able to calculate that the current API is supportable in a<br>&gt;   forward-compatible way (as we do for Comparable).  Unfortunately, we<br>&gt;   do not.<br>&gt;<br>&gt; * Rename Streamable to TextOutputStreamable and add a deprecated<br>&gt;   Streamable typealias for it.  Now that OutputStream been renamed to<br>&gt;   TextOutputStream, we should also move Streamable out of the way.<br>&gt;<br>&gt; Deprecation is being proposed instead of underscoring or renaming<br>&gt; because it allows existing code to keep working (with warnings).  At<br>&gt; this late stage, it would be bad to actually break anything.<br>&gt;<br>&gt; --<br>&gt; -Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160809/67f63273/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>[Late Pitch] Deprecations, Moves, and Renames</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>August  9, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Aug 9, 2016, at 2:09 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Hi Everybody,<br>&gt; <br>&gt; With another round of apologies for taking late action, we propose to<br>&gt; make some deprecations, moves, and renames.  The background for these<br>&gt; moves is as follows:<br>&gt; <br>&gt; We&#39;ve always known that when Swift reached ABI stability (now slated for<br>&gt; Swift 4), we would be committed to supporting many of the standard<br>&gt; library&#39;s design decisions for years to come.  What we only realized<br>&gt; very recently is that, although Swift 3.0 is *not* shipping with a<br>&gt; stable ABI, the promise that Swift 3.0 code will work with Swift 4.0<br>&gt; code creates similar implications when it comes to certain protocols,<br>&gt; today.  Especially where these protocols show up in refinement<br>&gt; hierarchies, we can&#39;t keep Swift 3 code working in the future without<br>&gt; carrying them forward into future libraries.<br>&gt; <br>&gt; The proposed changes are as follows:<br>&gt; <br>&gt; * Move `CustomPlaygroundQuickLookable` to the PlaygroundSupport module.<br>&gt;  This component is really only useful for playgrounds, and doesn&#39;t<br>&gt;  belong in the standard library.<br>&gt; <br>&gt; * Deprecate the Indexable protocols with a message indicating that they<br>&gt;  will be gone in Swift 4.  These protocols are implementation details<br>&gt;  of the standard library designed to work around language limitations<br>&gt;  that we expect to be gone in Swift 4.  There&#39;s no reason for anyone to<br>&gt;  ever touch these; users should always use a corresponding Collection<br>&gt;  protocol (e.g. instead of MutableIndexable, use MutableCollection).<br>&gt; <br>&gt; * Deprecate the ExpressibleByStringInterpolation protocol with a<br>&gt;  message indicating that its design is expected to change.  We know<br>&gt;  this protocol to be mis-designed<br>&gt;  (https://bugs.swift.org/browse/SR-1260) and limited<br>&gt;  (https://bugs.swift.org/browse/SR-2303), but there&#39;s no time to fix it<br>&gt;  for Swift 3.  If we knew what the new design should look like, we<br>&gt;  might be able to calculate that the current API is supportable in a<br>&gt;  forward-compatible way (as we do for Comparable).  Unfortunately, we<br>&gt;  do not.<br>&gt; <br>&gt; * Rename Streamable to TextOutputStreamable and add a deprecated<br>&gt;  Streamable typealias for it.  Now that OutputStream been renamed to<br>&gt;  TextOutputStream, we should also move Streamable out of the way.<br>&gt; <br>&gt; Deprecation is being proposed instead of underscoring or renaming<br>&gt; because it allows existing code to keep working (with warnings).  At<br>&gt; this late stage, it would be bad to actually break anything.<br></p><p>Is the team taking suggestions on APIs to be deprecated, renamed and/or modified? I’ve been noticing quite a few translated ObjC APIs that don’t quite seem to fit the Swift paradigm lately.<br></p><p>Charles<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8dfc6932943f38e7a7de48be3194f13c?s=50"></div><header><strong>[Late Pitch] Deprecations, Moves, and Renames</strong> from <string>Michael Ilseman</string> &lt;milseman at apple.com&gt;<p>August  9, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Aug 9, 2016, at 1:01 PM, Charles Srstka via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Aug 9, 2016, at 2:09 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Hi Everybody,<br>&gt;&gt; <br>&gt;&gt; With another round of apologies for taking late action, we propose to<br>&gt;&gt; make some deprecations, moves, and renames.  The background for these<br>&gt;&gt; moves is as follows:<br>&gt;&gt; <br>&gt;&gt; We&#39;ve always known that when Swift reached ABI stability (now slated for<br>&gt;&gt; Swift 4), we would be committed to supporting many of the standard<br>&gt;&gt; library&#39;s design decisions for years to come.  What we only realized<br>&gt;&gt; very recently is that, although Swift 3.0 is *not* shipping with a<br>&gt;&gt; stable ABI, the promise that Swift 3.0 code will work with Swift 4.0<br>&gt;&gt; code creates similar implications when it comes to certain protocols,<br>&gt;&gt; today.  Especially where these protocols show up in refinement<br>&gt;&gt; hierarchies, we can&#39;t keep Swift 3 code working in the future without<br>&gt;&gt; carrying them forward into future libraries.<br>&gt;&gt; <br>&gt;&gt; The proposed changes are as follows:<br>&gt;&gt; <br>&gt;&gt; * Move `CustomPlaygroundQuickLookable` to the PlaygroundSupport module.<br>&gt;&gt; This component is really only useful for playgrounds, and doesn&#39;t<br>&gt;&gt; belong in the standard library.<br>&gt;&gt; <br>&gt;&gt; * Deprecate the Indexable protocols with a message indicating that they<br>&gt;&gt; will be gone in Swift 4.  These protocols are implementation details<br>&gt;&gt; of the standard library designed to work around language limitations<br>&gt;&gt; that we expect to be gone in Swift 4.  There&#39;s no reason for anyone to<br>&gt;&gt; ever touch these; users should always use a corresponding Collection<br>&gt;&gt; protocol (e.g. instead of MutableIndexable, use MutableCollection).<br>&gt;&gt; <br>&gt;&gt; * Deprecate the ExpressibleByStringInterpolation protocol with a<br>&gt;&gt; message indicating that its design is expected to change.  We know<br>&gt;&gt; this protocol to be mis-designed<br>&gt;&gt; (https://bugs.swift.org/browse/SR-1260) and limited<br>&gt;&gt; (https://bugs.swift.org/browse/SR-2303), but there&#39;s no time to fix it<br>&gt;&gt; for Swift 3.  If we knew what the new design should look like, we<br>&gt;&gt; might be able to calculate that the current API is supportable in a<br>&gt;&gt; forward-compatible way (as we do for Comparable).  Unfortunately, we<br>&gt;&gt; do not.<br>&gt;&gt; <br>&gt;&gt; * Rename Streamable to TextOutputStreamable and add a deprecated<br>&gt;&gt; Streamable typealias for it.  Now that OutputStream been renamed to<br>&gt;&gt; TextOutputStream, we should also move Streamable out of the way.<br>&gt;&gt; <br>&gt;&gt; Deprecation is being proposed instead of underscoring or renaming<br>&gt;&gt; because it allows existing code to keep working (with warnings).  At<br>&gt;&gt; this late stage, it would be bad to actually break anything.<br>&gt; <br>&gt; Is the team taking suggestions on APIs to be deprecated, renamed and/or modified? I’ve been noticing quite a few translated ObjC APIs that don’t quite seem to fit the Swift paradigm lately.<br>&gt; <br></p><p>Please file radars for these against the offending frameworks. You can additionally discuss them on swift-dev or swift-users, but definitely file those radars!<br></p><p>&gt; Charles<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>[Late Pitch] Deprecations, Moves, and Renames</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>August  9, 2016 at 08:00:00pm</p></header><div class="content"><p>On Aug 9, 2016, at 7:21 PM, Michael Ilseman &lt;milseman at apple.com&gt; wrote:<br>&gt; <br>&gt; Please file radars for these against the offending frameworks. You can additionally discuss them on swift-dev or swift-users, but definitely file those radars!<br></p><p>Will do. I just fired off about five of them, before the Radar server abruptly went “Oh God, not that guy again” and decided to stop responding. ;-)<br></p><p>Will probably file a few more as I think of them, when I can get into the server again.<br></p><p>Charles<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160809/849bbe71/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[Late Pitch] Deprecations, Moves, and Renames</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>August  9, 2016 at 03:00:00pm</p></header><div class="content"><p>+1<br></p><p>Sent from my iPhone<br></p><p>&gt; On Aug 9, 2016, at 14:09, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Hi Everybody,<br>&gt; <br>&gt; With another round of apologies for taking late action, we propose to<br>&gt; make some deprecations, moves, and renames.  The background for these<br>&gt; moves is as follows:<br>&gt; <br>&gt; We&#39;ve always known that when Swift reached ABI stability (now slated for<br>&gt; Swift 4), we would be committed to supporting many of the standard<br>&gt; library&#39;s design decisions for years to come.  What we only realized<br>&gt; very recently is that, although Swift 3.0 is *not* shipping with a<br>&gt; stable ABI, the promise that Swift 3.0 code will work with Swift 4.0<br>&gt; code creates similar implications when it comes to certain protocols,<br>&gt; today.  Especially where these protocols show up in refinement<br>&gt; hierarchies, we can&#39;t keep Swift 3 code working in the future without<br>&gt; carrying them forward into future libraries.<br>&gt; <br>&gt; The proposed changes are as follows:<br>&gt; <br>&gt; * Move `CustomPlaygroundQuickLookable` to the PlaygroundSupport module.<br>&gt;  This component is really only useful for playgrounds, and doesn&#39;t<br>&gt;  belong in the standard library.<br>&gt; <br>&gt; * Deprecate the Indexable protocols with a message indicating that they<br>&gt;  will be gone in Swift 4.  These protocols are implementation details<br>&gt;  of the standard library designed to work around language limitations<br>&gt;  that we expect to be gone in Swift 4.  There&#39;s no reason for anyone to<br>&gt;  ever touch these; users should always use a corresponding Collection<br>&gt;  protocol (e.g. instead of MutableIndexable, use MutableCollection).<br>&gt; <br>&gt; * Deprecate the ExpressibleByStringInterpolation protocol with a<br>&gt;  message indicating that its design is expected to change.  We know<br>&gt;  this protocol to be mis-designed<br>&gt;  (https://bugs.swift.org/browse/SR-1260) and limited<br>&gt;  (https://bugs.swift.org/browse/SR-2303), but there&#39;s no time to fix it<br>&gt;  for Swift 3.  If we knew what the new design should look like, we<br>&gt;  might be able to calculate that the current API is supportable in a<br>&gt;  forward-compatible way (as we do for Comparable).  Unfortunately, we<br>&gt;  do not.<br>&gt; <br>&gt; * Rename Streamable to TextOutputStreamable and add a deprecated<br>&gt;  Streamable typealias for it.  Now that OutputStream been renamed to<br>&gt;  TextOutputStream, we should also move Streamable out of the way.<br>&gt; <br>&gt; Deprecation is being proposed instead of underscoring or renaming<br>&gt; because it allows existing code to keep working (with warnings).  At<br>&gt; this late stage, it would be bad to actually break anything.<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdd257c9369fb68e1d06923d10ff789e?s=50"></div><header><strong>[Late Pitch] Deprecations, Moves, and Renames</strong> from <string>Ben Rimmington</string> &lt;me at benrimmington.com&gt;<p>August  9, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On 9 Aug 2016, at 20:09, Dave Abrahams wrote:<br>&gt; <br>&gt; Hi Everybody,<br>&gt; <br>&gt; With another round of apologies for taking late action, we propose to<br>&gt; make some deprecations, moves, and renames.  The background for these<br>&gt; moves is as follows:<br>&gt; <br>&gt; We&#39;ve always known that when Swift reached ABI stability (now slated for<br>&gt; Swift 4), we would be committed to supporting many of the standard<br>&gt; library&#39;s design decisions for years to come.  What we only realized<br>&gt; very recently is that, although Swift 3.0 is *not* shipping with a<br>&gt; stable ABI, the promise that Swift 3.0 code will work with Swift 4.0<br>&gt; code creates similar implications when it comes to certain protocols,<br>&gt; today.  Especially where these protocols show up in refinement<br>&gt; hierarchies, we can&#39;t keep Swift 3 code working in the future without<br>&gt; carrying them forward into future libraries.<br>&gt; <br>&gt; The proposed changes are as follows:<br>&gt; <br>&gt; * Move `CustomPlaygroundQuickLookable` to the PlaygroundSupport module.<br>&gt;  This component is really only useful for playgrounds, and doesn&#39;t<br>&gt;  belong in the standard library.<br></p><p>I didn&#39;t think it was possible to `import PlaygroundSupport` unless the <br>current file is within a playground. If so, how can corelibs-foundation <br>or third-party modules add `CustomPlaygroundQuickLookable` conformance?<br></p><p>&gt; * Deprecate the Indexable protocols with a message indicating that they<br>&gt;  will be gone in Swift 4.  These protocols are implementation details<br>&gt;  of the standard library designed to work around language limitations<br>&gt;  that we expect to be gone in Swift 4.  There&#39;s no reason for anyone to<br>&gt;  ever touch these; users should always use a corresponding Collection<br>&gt;  protocol (e.g. instead of MutableIndexable, use MutableCollection).<br>&gt; <br>&gt; * Deprecate the ExpressibleByStringInterpolation protocol with a<br>&gt;  message indicating that its design is expected to change.  We know<br>&gt;  this protocol to be mis-designed<br>&gt;  (https://bugs.swift.org/browse/SR-1260) and limited<br>&gt;  (https://bugs.swift.org/browse/SR-2303), but there&#39;s no time to fix it<br>&gt;  for Swift 3.  If we knew what the new design should look like, we<br>&gt;  might be able to calculate that the current API is supportable in a<br>&gt;  forward-compatible way (as we do for Comparable).  Unfortunately, we<br>&gt;  do not.<br>&gt; <br>&gt; * Rename Streamable to TextOutputStreamable and add a deprecated<br>&gt;  Streamable typealias for it.  Now that OutputStream been renamed to<br>&gt;  TextOutputStream, we should also move Streamable out of the way.<br>&gt; <br>&gt; Deprecation is being proposed instead of underscoring or renaming<br>&gt; because it allows existing code to keep working (with warnings).  At<br>&gt; this late stage, it would be bad to actually break anything.<br></p><p>If the SE-0104 (protocol-oriented integers) proposal has been deferred, <br>should any protocols (e.g. SignedNumber) be deprecated?<br></p><p>-- Ben<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>[Late Pitch] Deprecations, Moves, and Renames</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>August  9, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On 9 Aug 2016, at 21:09, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Hi Everybody,<br>&gt; <br>&gt; With another round of apologies for taking late action, we propose to<br>&gt; make some deprecations, moves, and renames.  The background for these<br>&gt; moves is as follows:<br>&gt; <br>&gt; We&#39;ve always known that when Swift reached ABI stability (now slated for<br>&gt; Swift 4), we would be committed to supporting many of the standard<br>&gt; library&#39;s design decisions for years to come.  What we only realized<br>&gt; very recently is that, although Swift 3.0 is *not* shipping with a<br>&gt; stable ABI, the promise that Swift 3.0 code will work with Swift 4.0<br>&gt; code creates similar implications when it comes to certain protocols,<br>&gt; today.  Especially where these protocols show up in refinement<br>&gt; hierarchies, we can&#39;t keep Swift 3 code working in the future without<br>&gt; carrying them forward into future libraries.<br>&gt; <br>&gt; The proposed changes are as follows:<br>&gt; <br>&gt; * Move `CustomPlaygroundQuickLookable` to the PlaygroundSupport module.<br>&gt;  This component is really only useful for playgrounds, and doesn&#39;t<br>&gt;  belong in the standard library.<br>&gt; <br>&gt; * Deprecate the Indexable protocols with a message indicating that they<br>&gt;  will be gone in Swift 4.  These protocols are implementation details<br>&gt;  of the standard library designed to work around language limitations<br>&gt;  that we expect to be gone in Swift 4.  There&#39;s no reason for anyone to<br>&gt;  ever touch these; users should always use a corresponding Collection<br>&gt;  protocol (e.g. instead of MutableIndexable, use MutableCollection).<br>&gt; <br>&gt; * Deprecate the ExpressibleByStringInterpolation protocol with a<br>&gt;  message indicating that its design is expected to change.  We know<br>&gt;  this protocol to be mis-designed<br>&gt;  (https://bugs.swift.org/browse/SR-1260) and limited<br>&gt;  (https://bugs.swift.org/browse/SR-2303), but there&#39;s no time to fix it<br>&gt;  for Swift 3.  If we knew what the new design should look like, we<br>&gt;  might be able to calculate that the current API is supportable in a<br>&gt;  forward-compatible way (as we do for Comparable).  Unfortunately, we<br>&gt;  do not.<br>&gt; <br>&gt; * Rename Streamable to TextOutputStreamable and add a deprecated<br>&gt;  Streamable typealias for it.  Now that OutputStream been renamed to<br>&gt;  TextOutputStream, we should also move Streamable out of the way.<br>&gt; <br>&gt; Deprecation is being proposed instead of underscoring or renaming<br>&gt; because it allows existing code to keep working (with warnings).  At<br>&gt; this late stage, it would be bad to actually break anything.<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br>Does this include the ContiguousArray deprecation? I’m still seeing performance issues with regular Array (will update bug soon).<br></p><p>I don’t mind if it gets deprecated, so long as it isn’t removed before we sort those issues out.<br></p><p>Otherwise +1<br></p><p>Karl<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Late Pitch] Deprecations, Moves, and Renames</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>August 10, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Aug 9, 2016, at 1:09 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Hi Everybody,<br>&gt; <br>&gt; With another round of apologies for taking late action, we propose to<br>&gt; make some deprecations, moves, and renames.  The background for these<br>&gt; moves is as follows:<br>&gt; <br>&gt; We&#39;ve always known that when Swift reached ABI stability (now slated for<br>&gt; Swift 4), we would be committed to supporting many of the standard<br>&gt; library&#39;s design decisions for years to come.  What we only realized<br>&gt; very recently is that, although Swift 3.0 is *not* shipping with a<br>&gt; stable ABI, the promise that Swift 3.0 code will work with Swift 4.0<br>&gt; code creates similar implications when it comes to certain protocols,<br>&gt; today.  Especially where these protocols show up in refinement<br>&gt; hierarchies, we can&#39;t keep Swift 3 code working in the future without<br>&gt; carrying them forward into future libraries.<br>&gt; <br>&gt; The proposed changes are as follows:<br>&gt; <br>&gt; * Move `CustomPlaygroundQuickLookable` to the PlaygroundSupport module.<br>&gt;  This component is really only useful for playgrounds, and doesn&#39;t<br>&gt;  belong in the standard library.<br></p><p>This seems like an obvious win. I *strongly* support this. (Didn&#39;t we discuss this<br>several weeks ago?)<br></p><p>Since you&#39;ve opened the doors to last minute discussions, I also feel quite strongly<br>that image/color/file literals are misplaced and do not belong as part of the <br>standard library. The image one is the best example of the misfit. Images will probably <br>never be a core component of stdlib but they don&#39;t fit in PlaygroundSupport either as they <br>are essentially EditorSupport-ive. They have value across multiple platforms (currently<br>OS X and the UIKit family, but primarily act in an Xcode-support role) but could be extended<br>to other editors and other platforms. (And yes, I have list of other items but they fall well<br>outside the scope of the current Swift Ev discussion so I&#39;m sitting on them.)<br></p><p>&gt; * Deprecate the Indexable protocols with a message indicating that they<br>&gt;  will be gone in Swift 4.  These protocols are implementation details<br>&gt;  of the standard library designed to work around language limitations<br>&gt;  that we expect to be gone in Swift 4.  There&#39;s no reason for anyone to<br>&gt;  ever touch these; users should always use a corresponding Collection<br>&gt;  protocol (e.g. instead of MutableIndexable, use MutableCollection).<br></p><p>It&#39;s time to for indices to evolve. <br></p><p>&gt; * Deprecate the ExpressibleByStringInterpolation protocol with a<br>&gt;  message indicating that its design is expected to change.  We know<br>&gt;  this protocol to be mis-designed<br>&gt;  (https://bugs.swift.org/browse/SR-1260) and limited<br>&gt;  (https://bugs.swift.org/browse/SR-2303), but there&#39;s no time to fix it<br>&gt;  for Swift 3.  If we knew what the new design should look like, we<br>&gt;  might be able to calculate that the current API is supportable in a<br>&gt;  forward-compatible way (as we do for Comparable).  Unfortunately, we<br>&gt;  do not.<br></p><p>I&#39;m glad you&#39;re thinking forward about this.<br></p><p>&gt; * Rename Streamable to TextOutputStreamable and add a deprecated<br>&gt;  Streamable typealias for it.  Now that OutputStream been renamed to<br>&gt;  TextOutputStream, we should also move Streamable out of the way.<br></p><p>Fine. Now if only I could figure out how to get this working. Been<br>banging my head against the new streaming stuff. Also it shouldn&#39;t be<br>this hard to print(....toStream: CustomCustomCustomBlah.stderr)<br></p><p>&gt; Deprecation is being proposed instead of underscoring or renaming<br>&gt; because it allows existing code to keep working (with warnings).  At<br>&gt; this late stage, it would be bad to actually break anything.<br></p><p>Sensible.<br></p><p>-- E<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdd257c9369fb68e1d06923d10ff789e?s=50"></div><header><strong>[Late Pitch] Deprecations, Moves, and Renames</strong> from <string>Ben Rimmington</string> &lt;me at benrimmington.com&gt;<p>August 10, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On 10 Aug 2016, at 22:44, Erica Sadun wrote:<br>&gt; <br>&gt;&gt; On Aug 9, 2016, at 1:09 PM, Dave Abrahams wrote:<br>&gt;&gt; <br>&gt;&gt; Hi Everybody,<br>&gt;&gt; <br>&gt;&gt; With another round of apologies for taking late action, we propose to<br>&gt;&gt; make some deprecations, moves, and renames.  The background for these<br>&gt;&gt; moves is as follows:<br>&gt;&gt; <br>&gt;&gt; We&#39;ve always known that when Swift reached ABI stability (now slated for<br>&gt;&gt; Swift 4), we would be committed to supporting many of the standard<br>&gt;&gt; library&#39;s design decisions for years to come.  What we only realized<br>&gt;&gt; very recently is that, although Swift 3.0 is *not* shipping with a<br>&gt;&gt; stable ABI, the promise that Swift 3.0 code will work with Swift 4.0<br>&gt;&gt; code creates similar implications when it comes to certain protocols,<br>&gt;&gt; today.  Especially where these protocols show up in refinement<br>&gt;&gt; hierarchies, we can&#39;t keep Swift 3 code working in the future without<br>&gt;&gt; carrying them forward into future libraries.<br>&gt;&gt; <br>&gt;&gt; The proposed changes are as follows:<br>&gt;&gt; <br>&gt;&gt; * Move `CustomPlaygroundQuickLookable` to the PlaygroundSupport module.<br>&gt;&gt; This component is really only useful for playgrounds, and doesn&#39;t<br>&gt;&gt; belong in the standard library.<br>&gt; <br>&gt; This seems like an obvious win. I *strongly* support this. (Didn&#39;t we discuss this<br>&gt; several weeks ago?)<br></p><p>Yes, we did:<br></p><p>&lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160718/025242.html&gt;<br></p><p>But that part of the proposal has been withdrawn:<br></p><p>&lt;https://github.com/apple/swift-evolution/commit/e2610e3fa91b437e06e768aaef6820d755489717&gt;<br></p><p>&gt; Since you&#39;ve opened the doors to last minute discussions, I also feel quite strongly<br>&gt; that image/color/file literals are misplaced and do not belong as part of the <br>&gt; standard library. The image one is the best example of the misfit. Images will probably <br>&gt; never be a core component of stdlib but they don&#39;t fit in PlaygroundSupport either as they <br>&gt; are essentially EditorSupport-ive. They have value across multiple platforms (currently<br>&gt; OS X and the UIKit family, but primarily act in an Xcode-support role) but could be extended<br>&gt; to other editors and other platforms. (And yes, I have list of other items but they fall well<br>&gt; outside the scope of the current Swift Ev discussion so I&#39;m sitting on them.)<br>&gt; <br>&gt;&gt; * Deprecate the Indexable protocols with a message indicating that they<br>&gt;&gt; will be gone in Swift 4.  These protocols are implementation details<br>&gt;&gt; of the standard library designed to work around language limitations<br>&gt;&gt; that we expect to be gone in Swift 4.  There&#39;s no reason for anyone to<br>&gt;&gt; ever touch these; users should always use a corresponding Collection<br>&gt;&gt; protocol (e.g. instead of MutableIndexable, use MutableCollection).<br>&gt; <br>&gt; It&#39;s time to for indices to evolve. <br>&gt; <br>&gt;&gt; * Deprecate the ExpressibleByStringInterpolation protocol with a<br>&gt;&gt; message indicating that its design is expected to change.  We know<br>&gt;&gt; this protocol to be mis-designed<br>&gt;&gt; (https://bugs.swift.org/browse/SR-1260) and limited<br>&gt;&gt; (https://bugs.swift.org/browse/SR-2303), but there&#39;s no time to fix it<br>&gt;&gt; for Swift 3.  If we knew what the new design should look like, we<br>&gt;&gt; might be able to calculate that the current API is supportable in a<br>&gt;&gt; forward-compatible way (as we do for Comparable).  Unfortunately, we<br>&gt;&gt; do not.<br>&gt; <br>&gt; I&#39;m glad you&#39;re thinking forward about this.<br>&gt; <br>&gt;&gt; * Rename Streamable to TextOutputStreamable and add a deprecated<br>&gt;&gt; Streamable typealias for it.  Now that OutputStream been renamed to<br>&gt;&gt; TextOutputStream, we should also move Streamable out of the way.<br>&gt; <br>&gt; Fine. Now if only I could figure out how to get this working. Been<br>&gt; banging my head against the new streaming stuff. Also it shouldn&#39;t be<br>&gt; this hard to print(....toStream: CustomCustomCustomBlah.stderr)<br></p><p>See the LocalFileOutputByteStream class and the `&lt;&lt;&lt;` operator in:<br></p><p>&lt;https://github.com/apple/swift-package-manager/blob/master/Sources/Basic/OutputByteStream.swift&gt;<br></p><p>&gt;&gt; Deprecation is being proposed instead of underscoring or renaming<br>&gt;&gt; because it allows existing code to keep working (with warnings).  At<br>&gt;&gt; this late stage, it would be bad to actually break anything.<br>&gt; <br>&gt; Sensible.<br>&gt; <br>&gt; -- E<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Late Pitch] Deprecations, Moves, and Renames</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>August 10, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Aug 9, 2016, at 12:09 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Deprecate the Indexable protocols with a message indicating that they<br>&gt;  will be gone in Swift 4.<br></p><p>Should IndexableBase get the same treatment? Or is that hidden anyway?<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdd257c9369fb68e1d06923d10ff789e?s=50"></div><header><strong>[Late Pitch] Deprecations, Moves, and Renames</strong> from <string>Ben Rimmington</string> &lt;me at benrimmington.com&gt;<p>August 11, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On 11 Aug 2016, at 00:24, Brent Royal-Gordon wrote:<br>&gt; <br>&gt;&gt; On Aug 9, 2016, at 12:09 PM, Dave Abrahams wrote:<br>&gt;&gt; <br>&gt;&gt; Deprecate the Indexable protocols with a message indicating that they<br>&gt;&gt; will be gone in Swift 4.<br>&gt; <br>&gt; Should IndexableBase get the same treatment?<br></p><p>Yes, see &lt;https://github.com/apple/swift/pull/4091&gt; from the SE-0137 proposal.<br></p><p>&lt;https://github.com/apple/swift/blob/8a73f0b/stdlib/public/core/Collection.swift#L18-L19&gt;<br></p><p>-- Ben<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Late Pitch] Deprecations, Moves, and Renames</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>August 11, 2016 at 07:00:00am</p></header><div class="content"><p>Sent from my moss-covered three-handled family gradunza<br></p><p>&gt; On Aug 11, 2016, at 7:14 AM, Ben Rimmington &lt;me at benrimmington.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt;&gt; On 11 Aug 2016, at 00:24, Brent Royal-Gordon wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Aug 9, 2016, at 12:09 PM, Dave Abrahams wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Deprecate the Indexable protocols with a message indicating that they<br>&gt;&gt;&gt; will be gone in Swift 4.<br>&gt;&gt; <br>&gt;&gt; Should IndexableBase get the same treatment?<br>&gt; <br>&gt; Yes, see &lt;https://github.com/apple/swift/pull/4091&gt; from the SE-0137 proposal.<br>&gt; <br>&gt; &lt;https://github.com/apple/swift/blob/8a73f0b/stdlib/public/core/Collection.swift#L18-L19&gt;<br></p><p>What he said!<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdd257c9369fb68e1d06923d10ff789e?s=50"></div><header><strong>[Late Pitch] Deprecations, Moves, and Renames</strong> from <string>Ben Rimmington</string> &lt;me at benrimmington.com&gt;<p>August 12, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On 9 Aug 2016, at 20:09, Dave Abrahams wrote:<br>&gt; <br>&gt; Deprecate the ExpressibleByStringInterpolation protocol with a<br>&gt; message indicating that its design is expected to change.  We know<br>&gt; this protocol to be mis-designed<br>&gt; (https://bugs.swift.org/browse/SR-1260) and limited<br>&gt; (https://bugs.swift.org/browse/SR-2303), but there&#39;s no time to fix it<br>&gt; for Swift 3.  If we knew what the new design should look like, we<br>&gt; might be able to calculate that the current API is supportable in a<br>&gt; forward-compatible way (as we do for Comparable).  Unfortunately, we<br>&gt; do not.<br></p><p>Can the deprecation of ExpressibleByStringInterpolation be reverted next year,<br>if a backwards-compatible design is proposed for Swift 4.0?<br></p><p>-- Ben<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
