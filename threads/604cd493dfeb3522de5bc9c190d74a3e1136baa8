<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c354b21edb9ba56fe6b42950e08195fa?s=50"></div><header><strong>API Guidelines: dropFirst?</strong> from <string>Jonathan Hull</string> &lt;jhull at gbis.com&gt;<p>June 16, 2016 at 04:00:00am</p></header><div class="content"><p>I actually think we should use ‘mapped’, ‘filtered’, and ‘reduced’ instead of the “Terms of Art”.  They start with the same words, so anyone looking for ‘map’, ‘filter’, and ‘reduce’ will see them in the autocomplete.<br></p><p>The signatures are also different, so:<br></p><p>let newList = list.map(…)<br></p><p>would throw an error because I have the signature wrong.  Given the consistent naming rules, ‘mapped’ will be tried fairly quickly (especially with auto-complete).  If we are extra worried, we could put in a diagnostic/fixit to teach the ‘mapped’, etc… version.<br></p><p>Seems like needless (and confusing) inconsistency otherwise...<br></p><p>Thanks,<br>Jon<br></p><p>&gt; &gt; What is the rationale behind the name dropFirst()? Being a non-mutating method it should clearly be e.g. droppingFirst() according to the API Naming Guidelines.<br>&gt; <br>&gt; Like many `Sequence` and `Collection` operations, `dropFirst()` is a result of the &quot;term of art&quot; exception, which is implied by the &quot;Use Terminology Well&quot; section of the API Guidelines: &lt;https://swift.org/documentation/api-design-guidelines/#use-terminology-well &lt;https://swift.org/documentation/api-design-guidelines/#use-terminology-well&gt;&gt;<br>&gt; <br>&gt; Many languages use `dropWhatever` or `drop_whatever` for operations which return some sort of list with some of its leading or trailing elements removed. For instance:<br>&gt; <br>&gt; * Ruby (which I happen to have in Dash) has `drop(n)` and `drop_while` methods.<br>&gt; * Haskell has `drop n`, `dropWhile`, and `dropWhileEnd` functions.<br>&gt; * Scala has a `drop(n)` method.<br>&gt; * R has a `dropFirst` function.<br>&gt; <br>&gt; The standard library has chosen to break its usual patterns in order to maintain consistency with languages like these.<br>&gt; <br>&gt; Personally, I believe the term of art exception has been misapplied in this area of the language; the precedents are not very strong, and the resulting APIs form a patchwork of inconsistent names rather than a coherent family. The term of art exception increases the clarity of calls like `map` and `filter` where the names are truly universal, but it impedes the clarity of the whole family of `first`/`prefix`/`suffix`/`last` calls, and the names should be revisited and rationalized. But that hasn&#39;t happened yet.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160616/604cbaa8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>API Guidelines: dropFirst?</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>June 16, 2016 at 04:00:00am</p></header><div class="content"><p>&gt; The signatures are also different, so:<br>&gt; <br>&gt; let newList = list.map(…)<br>&gt; <br>&gt; would throw an error because I have the signature wrong.<br></p><p>I&#39;m not sure what you mean by this. What is the error? Why? Does it have something to do with the code you imagine is elided by the ellipses?<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c354b21edb9ba56fe6b42950e08195fa?s=50"></div><header><strong>API Guidelines: dropFirst?</strong> from <string>Jonathan Hull</string> &lt;jhull at gbis.com&gt;<p>June 16, 2016 at 05:00:00am</p></header><div class="content"><p>I mean that *IF* we were to rename ‘map’ to ‘mapped’, the compiler would catch this and could recommend the new name.  Even if we add a mutating version called ‘map’, it would still catch this case because the mutating version would have a void return.<br></p><p>Thanks,<br>Jon<br></p><p>&gt; On Jun 16, 2016, at 4:57 AM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt; The signatures are also different, so:<br>&gt;&gt; <br>&gt;&gt; let newList = list.map(…)<br>&gt;&gt; <br>&gt;&gt; would throw an error because I have the signature wrong.<br>&gt; <br>&gt; I&#39;m not sure what you mean by this. What is the error? Why? Does it have something to do with the code you imagine is elided by the ellipses?<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c354b21edb9ba56fe6b42950e08195fa?s=50"></div><header><strong>API Guidelines: dropFirst?</strong> from <string>Jonathan Hull</string> &lt;jhull at gbis.com&gt;<p>June 16, 2016 at 05:00:00am</p></header><div class="content"><p>…Thus, I don’t really see the harm in renaming these to match the rest of Swift.  It won’t cause any confusion that can’t be easily recovered from.  I was outvoted on that though…<br></p><p>Thanks,<br>Jon<br> <br>&gt; On Jun 16, 2016, at 5:01 AM, Jonathan Hull &lt;jhull at gbis.com&gt; wrote:<br>&gt; <br>&gt; I mean that *IF* we were to rename ‘map’ to ‘mapped’, the compiler would catch this and could recommend the new name.  Even if we add a mutating version called ‘map’, it would still catch this case because the mutating version would have a void return.<br>&gt; <br>&gt; Thanks,<br>&gt; Jon<br>&gt; <br>&gt;&gt; On Jun 16, 2016, at 4:57 AM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; The signatures are also different, so:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let newList = list.map(…)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; would throw an error because I have the signature wrong.<br>&gt;&gt; <br>&gt;&gt; I&#39;m not sure what you mean by this. What is the error? Why? Does it have something to do with the code you imagine is elided by the ellipses?<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt; <br>&gt;&gt; <br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
