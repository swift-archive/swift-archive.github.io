<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5285b11ee7c127e1fe0158d864919e06?s=50"></div><header><strong>Git history</strong> from <string>Tom Jowett</string> &lt;tom at tomjowett.com&gt;<p>December 17, 2015 at 01:00:00am</p></header><div class="content"><p>Hi everyone,<br></p><p>I&#39;m wondering if there&#39;s a way I can help to keep the commit structure of<br>the repo a bit tidier?  I can see the guideline being provided<br>on CONTRIBUTING.md however the current commit history could be a little<br>easier to follow for the average viewer (eb06d19 and b4f6e2b were duplicate<br>commits, e.g) and it seems the rebase before PR element of that guideline<br>could be better followed.<br></p><p>Perhaps a link in CONTRIBUTING.md to a walkthrough on how to squash and<br>rebase commits (including adding tests appropriately for bisect) could be<br>helpful?  Happy to put one together in the context of this project if you<br>think so.  Also interested in any other suggestions you might have for how<br>this could be remedied.<br></p><p>Cheers,<br>Tom<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151217/a3110d3b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>Git history</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>December 17, 2015 at 10:00:00am</p></header><div class="content"><p>Help on rebasing would be great. I use git all the time but I still<br>struggle to squash my commits as I usually don&#39;t do it.<br></p><p>On Thu, Dec 17, 2015 at 9:25 AM, Tom Jowett via swift-corelibs-dev &lt;<br>swift-corelibs-dev at swift.org&gt; wrote:<br></p><p>&gt; Hi everyone,<br>&gt;<br>&gt; I&#39;m wondering if there&#39;s a way I can help to keep the commit structure of<br>&gt; the repo a bit tidier?  I can see the guideline being provided<br>&gt; on CONTRIBUTING.md however the current commit history could be a little<br>&gt; easier to follow for the average viewer (eb06d19 and b4f6e2b were duplicate<br>&gt; commits, e.g) and it seems the rebase before PR element of that guideline<br>&gt; could be better followed.<br>&gt;<br>&gt; Perhaps a link in CONTRIBUTING.md to a walkthrough on how to squash and<br>&gt; rebase commits (including adding tests appropriately for bisect) could be<br>&gt; helpful?  Happy to put one together in the context of this project if you<br>&gt; think so.  Also interested in any other suggestions you might have for how<br>&gt; this could be remedied.<br>&gt;<br>&gt; Cheers,<br>&gt; Tom<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt;<br>&gt;<br></p><p><br>-- <br> Wizard<br>james at supmenow.com<br>+44 7523 279 698<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151217/d0ea9463/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0db24e79de1d6e82cf6327b091903b1b?s=50"></div><header><strong>Git history</strong> from <string>Pierre Habouzit</string> &lt;phabouzit at apple.com&gt;<p>December 17, 2015 at 08:00:00am</p></header><div class="content"><p>git rebase -i is great and very well documented, with tons of blogs post about it all over the web.<br></p><p>if you pick `s` as a memonic it will squash and let you edit the merged commit message. If the base commit message is already good, use `f` and it will “fixup” it which is a squash where the original commit message is kept and the other one discarded.<br></p><p>-Pierre<br></p><p>&gt; On Dec 17, 2015, at 2:07 AM, James Campbell via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Help on rebasing would be great. I use git all the time but I still struggle to squash my commits as I usually don&#39;t do it. <br>&gt; <br>&gt; On Thu, Dec 17, 2015 at 9:25 AM, Tom Jowett via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt; Hi everyone,<br>&gt; <br>&gt; I&#39;m wondering if there&#39;s a way I can help to keep the commit structure of the repo a bit tidier?  I can see the guideline being provided on CONTRIBUTING.md however the current commit history could be a little easier to follow for the average viewer (eb06d19 and b4f6e2b were duplicate commits, e.g) and it seems the rebase before PR element of that guideline could be better followed.<br>&gt; <br>&gt; Perhaps a link in CONTRIBUTING.md to a walkthrough on how to squash and rebase commits (including adding tests appropriately for bisect) could be helpful?  Happy to put one together in the context of this project if you think so.  Also interested in any other suggestions you might have for how this could be remedied.<br>&gt; <br>&gt; Cheers,<br>&gt; Tom<br>&gt; <br>&gt; <br>&gt;  <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt;  Wizard<br>&gt; james at supmenow.com &lt;mailto:james at supmenow.com&gt;<br>&gt; +44 7523 279 698<br>&gt;  _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151217/ca9acb2a/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Git history</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>December 17, 2015 at 08:00:00am</p></header><div class="content"><p>Hi Tom,<br></p><p>I’ve actually been thinking about this a lot over the past few days, but haven’t come to any real conclusion yet.<br></p><p>The way I’ve traditionally worked on Foundation is that each commit has more content, and each commit is (almost) always associated with a bug. This is basically the process I had in mind when I wrote the CONTRIBUTING document.<br></p><p>However, we’re at such an early stage in this project now that I don’t want to add a lot of overhead to PRs that contain basic functionality. I’m also grateful for all of the work that everyone is putting in, and don’t want to put off potential contributors with an overly pedantic policy. We’re trying as hard as we can to keep up with everything, but some PRs are sitting for some time before we can fully review them, which means they are inevitably out of date and have to be rebased.<br></p><p>I think that as more projects start to depend upon the library we will have to be much more cautious about how we accept changes, how they are tested, and how they are structured (e.g., for easier reverting).<br></p><p>I welcome additional thoughts on this topic.<br></p><p>Thanks,<br>- Tony<br></p><p>&gt; On Dec 17, 2015, at 1:25 AM, Tom Jowett via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi everyone,<br>&gt; <br>&gt; I&#39;m wondering if there&#39;s a way I can help to keep the commit structure of the repo a bit tidier?  I can see the guideline being provided on CONTRIBUTING.md however the current commit history could be a little easier to follow for the average viewer (eb06d19 and b4f6e2b were duplicate commits, e.g) and it seems the rebase before PR element of that guideline could be better followed.<br>&gt; <br>&gt; Perhaps a link in CONTRIBUTING.md to a walkthrough on how to squash and rebase commits (including adding tests appropriately for bisect) could be helpful?  Happy to put one together in the context of this project if you think so.  Also interested in any other suggestions you might have for how this could be remedied.<br>&gt; <br>&gt; Cheers,<br>&gt; Tom<br>&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151217/69fdf6f6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5285b11ee7c127e1fe0158d864919e06?s=50"></div><header><strong>Git history</strong> from <string>Tom Jowett</string> &lt;tom at tomjowett.com&gt;<p>December 18, 2015 at 12:00:00am</p></header><div class="content"><p>Completely agree re: not wishing to be pedantic and I know this represents<br>such a tiny part of the overall scope of the project (ie it&#39;s much more<br>important that we have a full library vs a perfect commit history).<br></p><p>I&#39;ll try and put together a couple of scenarios based on the current<br>history and how they could be rebased to follow your guidelines. I&#39;ll shoot<br>these back to the list for everyone to look over. I&#39;ll also try cleaning up<br>a couple of PR&#39;s in the backlog and pushing them up to my own fork just to<br>walk people through they could be a bit cleaner.<br></p><p>All of this aside, it&#39;s really quite amazing how well this project is<br>coming along. Thanks for all your involvement.<br></p><p>Cheers,<br>Tom<br>On Thu, 17 Dec 2015 at 8:58 AM, Tony Parker &lt;anthony.parker at apple.com&gt;<br>wrote:<br></p><p>&gt; Hi Tom,<br>&gt;<br>&gt; I’ve actually been thinking about this a lot over the past few days, but<br>&gt; haven’t come to any real conclusion yet.<br>&gt;<br>&gt; The way I’ve traditionally worked on Foundation is that each commit has<br>&gt; more content, and each commit is (almost) always associated with a bug.<br>&gt; This is basically the process I had in mind when I wrote the CONTRIBUTING<br>&gt; document.<br>&gt;<br>&gt; However, we’re at such an early stage in this project now that I don’t<br>&gt; want to add a lot of overhead to PRs that contain basic functionality. I’m<br>&gt; also grateful for all of the work that everyone is putting in, and don’t<br>&gt; want to put off potential contributors with an overly pedantic policy.<br>&gt; We’re trying as hard as we can to keep up with everything, but some PRs are<br>&gt; sitting for some time before we can fully review them, which means they are<br>&gt; inevitably out of date and have to be rebased.<br>&gt;<br>&gt; I think that as more projects start to depend upon the library we will<br>&gt; have to be much more cautious about how we accept changes, how they are<br>&gt; tested, and how they are structured (e.g., for easier reverting).<br>&gt;<br>&gt; I welcome additional thoughts on this topic.<br>&gt;<br>&gt; Thanks,<br>&gt; - Tony<br>&gt;<br>&gt; On Dec 17, 2015, at 1:25 AM, Tom Jowett via swift-corelibs-dev &lt;<br>&gt; swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;<br>&gt; Hi everyone,<br>&gt;<br>&gt; I&#39;m wondering if there&#39;s a way I can help to keep the commit structure of<br>&gt; the repo a bit tidier?  I can see the guideline being provided<br>&gt; on CONTRIBUTING.md however the current commit history could be a little<br>&gt; easier to follow for the average viewer (eb06d19 and b4f6e2b were duplicate<br>&gt; commits, e.g) and it seems the rebase before PR element of that guideline<br>&gt; could be better followed.<br>&gt;<br>&gt; Perhaps a link in CONTRIBUTING.md to a walkthrough on how to squash and<br>&gt; rebase commits (including adding tests appropriately for bisect) could be<br>&gt; helpful?  Happy to put one together in the context of this project if you<br>&gt; think so.  Also interested in any other suggestions you might have for how<br>&gt; this could be remedied.<br>&gt;<br>&gt; Cheers,<br>&gt; Tom<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151218/0614d372/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
