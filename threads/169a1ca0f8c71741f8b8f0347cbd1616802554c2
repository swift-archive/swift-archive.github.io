<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9602f8ce97a17c61c3577ce1a953d9f2?s=50"></div><header><strong>Proof-of-concept port of Swift for Android</strong> from <string>Zhuowei Z</string> &lt;zhuowei_swift at outlook.com&gt;<p>December  8, 2015 at 11:00:00pm</p></header><div class="content"><p>Hello,<br>I&#39;m currently working on adding support to the Swift compiler to allow it to target Android. Currently I&#39;ve managed to get the stdlib to compile after hacking around/disabling a bunch of stuff (the custom linker script, the dl_iterate_phdr stuff, and the posix_spawn support), and managed to compile and run the simplest proof-of-concept  (import Glibc; exit(42)).<br>My fork is located at https://github.com/SwiftAndroid/swift and I would really appreciate any comments and suggestions.<br>In particular, I would like some help on the following issues:<br>- The current build system assumes that the host and the target has the same version of libicu. Android doesn&#39;t ship with libicu, so I had to point the build script to a copy of libicu manually. However, the same ICU include path is used to compile all target stdlibs,including the host one, so I had to make sure that my libicu headers matches the host one. Is there a way for me to specify in the build system to use a different libicu for one of the targets?<br>- The current stdlib build system also assumes that the host and the target are of the same OS family, so currently only Linux hosts can target Android. Is there anything I can do to allow Mac hosts to also target Android?<br>- What&#39;s the role of the special linker script, and what&#39;s the purpose of the conformance tables in shared libraries? I&#39;ve commented the conformance table loading code out on Android; is that why &#39;print(&quot;Hello world&quot;)&#39; prints out &quot;String(&quot; infinity?<br>- How should Swift integrate with the Android NDK?<br>- The version of Clang shipped with Ubuntu 15.10 can&#39;t seem to find the arm-linux-androideabi-ld linker even though I&#39;ve pointed it to the Android NDK&#39;s copy via -gcc-toolchain. It only seems to check /usr/bin/armv7-none-linux-androideabi-ld before falling back to /usr/bin/ld. The Clang from the Android NDK can find the NDK ld fine. Is there a particular command line option I need to pass into the Ubuntu clang to make it look for the arm-linux-androideabi-ld in the gcc-toolchain folder?<br>Thank you for your help and for your work on Swift.<br>Zhuowei Zhang 		 	   		  <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151208/169a54c2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Proof-of-concept port of Swift for Android</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December  8, 2015 at 08:00:00pm</p></header><div class="content"><p>On Dec 8, 2015, at 8:50 PM, Zhuowei Z via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; I&#39;m currently working on adding support to the Swift compiler to allow it to target Android.<br></p><p>Cool.  Responding to one specific issue:<br></p><p>&gt; - What&#39;s the role of the special linker script, and what&#39;s the purpose of the conformance tables in shared libraries? I&#39;ve commented the conformance table loading code out on Android; is that why &#39;print(&quot;Hello world&quot;)&#39; prints out &quot;String(&quot; infinity?<br></p><p>The linker script allows the compiler to be able to enumerate conformance tables, which are part of reflection information.  I’m not an expert in this area (Joe Groff or John McCall could better respond) but I would completely believe the are the reason for your print failure.  print is defined as taking an Any, and does a downcast to a protocol, and that is probably failing.<br></p><p>-Chris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151208/e669243c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Proof-of-concept port of Swift for Android</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December  9, 2015 at 11:00:00am</p></header><div class="content"><p>&gt; On Dec 8, 2015, at 8:57 PM, Chris Lattner via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; On Dec 8, 2015, at 8:50 PM, Zhuowei Z via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; I&#39;m currently working on adding support to the Swift compiler to allow it to target Android.<br>&gt; <br>&gt; Cool.  Responding to one specific issue:<br>&gt; <br>&gt;&gt; - What&#39;s the role of the special linker script, and what&#39;s the purpose of the conformance tables in shared libraries? I&#39;ve commented the conformance table loading code out on Android; is that why &#39;print(&quot;Hello world&quot;)&#39; prints out &quot;String(&quot; infinity?<br>&gt; <br>&gt; The linker script allows the compiler to be able to enumerate conformance tables, which are part of reflection information.  I’m not an expert in this area (Joe Groff or John McCall could better respond) but I would completely believe the are the reason for your print failure.  print is defined as taking an Any, and does a downcast to a protocol, and that is probably failing.<br></p><p>Yes, this is exactly the problem. You&#39;ll need some way for the conformance sections from every .o file to be collected into a section of the final binary that the runtime can consult at runtime in swift_conformsToProtocol. Can the existing swift.ld script be adapted to work on Android?<br></p><p>-Joe<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151209/b1bf4a17/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
