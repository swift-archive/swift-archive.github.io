<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>Pitch: (Almost) std libs</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>January 27, 2016 at 12:00:00am</p></header><div class="content"><p>There have been several threads to add specific functions or types to the stdlib:<br>- Either in the Swift Standard Library<br>- Proposal: Add scan, takeWhile, dropWhile, and iterate to the stdlib<br>- Higher Kinded Types (Monads, Functors, etc.)<br>- Adding a new filter method which returns 2 arrays<br>- Add replace(_:with:) function to the stdlib<br>- map-like operation that returns a dictionary<br>- Rectangles and other common structures.<br>- Add zip2WithNilPadding function<br>- Add types BufferedSequence, BufferedGenerator<br>- … (guess there are some that I missed — I didn&#39;t look at last years threads at all).<br></p><p>Afair, none of those ideas turned into real proposals, and I think that keeping stdlib small is a good goal.<br></p><p>Nonetheless, there are plenty of data structures and algorithms that will be used in many places by many different teams, and each of them might write its own implementation. That&#39;s imho no big problem for algorithms, but for types, it will most likely lead to real annoyance.<br></p><p>I hope that we will soon have a great package manager for Swift, but I don&#39;t think that will solve this issue completely:<br>I wouldn&#39;t import a big third-party framework just because a tiny function like &quot;dropWhile&quot; could make my code more elegant...<br></p><p>Of course, some widely accepted libs might rise and improve interoperability, but it is hard to predict how our ecosystem will evolve, and you don&#39;t have to wait for the future to see the what could happen when there is no common base:<br>Just take a look at SCNQuaternion, GLQuaternion and CMQuaternion.<br></p><p>Instead of asking to pollute stdlib with stuff like 3d transformations, I&#39;d prefer a set of general purpose libraries under supervision by the Swift team:<br>It could be a great way for &quot;outsiders&quot; to get into Swift development, and most likely wouldn&#39;t put to much stress and responsibility on the shoulders of each &quot;manager&quot;.<br>It also could take pressure from the stdlib (and this mailinglist :)<br></p><p>Beside fields of application (graphics, images, music, algebra, statistics, pattern matching, machine learning, graph theorie... whatever raises enough interest), there could also be libraries to support concepts like functional programming.<br></p><p>Best regards,<br>Tino<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160127/0fa202fa/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c40db4457ab2c91a0d8006da31b177c6?s=50"></div><header><strong>Pitch: (Almost) std libs</strong> from <string>Trent Nadeau</string> &lt;tanadeau at gmail.com&gt;<p>January 26, 2016 at 06:00:00pm</p></header><div class="content"><p>This is similar to Rust&#39;s nursery (https://github.com/rust-lang-nursery)<br>that contains commonly used libraries (logging, UUIDs, etc). These are<br>under Rust&#39;s umbrella but aren&#39;t part of the standard library and can be<br>versioned separately but still go through a similar stdlib process. If<br>libraries in the nursery become very widely used, then an RFC can come in<br>requesting for it to be added to the stdlib, and most libraries need to be<br>in the nursery before they can be added to the stdlib.<br></p><p>I think an approach like that would work well for Swift.<br></p><p>On Tue, Jan 26, 2016 at 6:32 PM, Tino Heth via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; There have been several threads to add specific functions or types to the<br>&gt; stdlib:<br>&gt; - Either in the Swift Standard Library<br>&gt; - Proposal: Add scan, takeWhile, dropWhile, and iterate to the stdlib<br>&gt; - Higher Kinded Types (Monads, Functors, etc.)<br>&gt; - Adding a new filter method which returns 2 arrays<br>&gt; - Add replace(_:with:) function to the stdlib<br>&gt; - map-like operation that returns a dictionary<br>&gt; - Rectangles and other common structures.<br>&gt; - Add zip2WithNilPadding function<br>&gt; - Add types BufferedSequence, BufferedGenerator<br>&gt; - … (guess there are some that I missed — I didn&#39;t look at last years<br>&gt; threads at all).<br>&gt;<br>&gt; Afair, none of those ideas turned into real proposals, and I think that<br>&gt; keeping stdlib small is a good goal.<br>&gt;<br>&gt; Nonetheless, there are plenty of data structures and algorithms that will<br>&gt; be used in many places by many different teams, and each of them might<br>&gt; write its own implementation. That&#39;s imho no big problem for algorithms,<br>&gt; but for types, it will most likely lead to real annoyance.<br>&gt;<br>&gt; I hope that we will soon have a great package manager for Swift, but I<br>&gt; don&#39;t think that will solve this issue completely:<br>&gt; I wouldn&#39;t import a big third-party framework just because a tiny function<br>&gt; like &quot;dropWhile&quot; could make my code more elegant...<br>&gt;<br>&gt; Of course, some widely accepted libs might rise and improve<br>&gt; interoperability, but it is hard to predict how our ecosystem will evolve,<br>&gt; and you don&#39;t have to wait for the future to see the what could happen when<br>&gt; there is no common base:<br>&gt; Just take a look at SCNQuaternion, GLQuaternion and CMQuaternion.<br>&gt;<br>&gt; Instead of asking to pollute stdlib with stuff like 3d transformations,<br>&gt; I&#39;d prefer a set of general purpose libraries under supervision by the<br>&gt; Swift team:<br>&gt; It could be a great way for &quot;outsiders&quot; to get into Swift development, and<br>&gt; most likely wouldn&#39;t put to much stress and responsibility on the shoulders<br>&gt; of each &quot;manager&quot;.<br>&gt; It also could take pressure from the stdlib (and this mailinglist :)<br>&gt;<br>&gt; Beside fields of application (graphics, images, music, algebra,<br>&gt; statistics, pattern matching, machine learning, graph theorie... whatever<br>&gt; raises enough interest), there could also be libraries to support concepts<br>&gt; like functional programming.<br>&gt;<br>&gt; Best regards,<br>&gt; Tino<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p><p><br>-- <br>Trent Nadeau<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160126/7c867ba1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>Pitch: (Almost) std libs</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>January 27, 2016 at 10:00:00am</p></header><div class="content"><p>This is a good idea. It will be a lot easier with the module system,<br>particularly if that system is searchable so that you have a chance of<br>finding that someone has already written what you want.<br></p><p>On Wednesday, 27 January 2016, Trent Nadeau via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; This is similar to Rust&#39;s nursery (https://github.com/rust-lang-nursery)<br>&gt; that contains commonly used libraries (logging, UUIDs, etc). These are<br>&gt; under Rust&#39;s umbrella but aren&#39;t part of the standard library and can be<br>&gt; versioned separately but still go through a similar stdlib process. If<br>&gt; libraries in the nursery become very widely used, then an RFC can come in<br>&gt; requesting for it to be added to the stdlib, and most libraries need to be<br>&gt; in the nursery before they can be added to the stdlib.<br>&gt;<br>&gt; I think an approach like that would work well for Swift.<br>&gt;<br>&gt; On Tue, Jan 26, 2016 at 6:32 PM, Tino Heth via swift-evolution &lt;<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt;&gt; There have been several threads to add specific functions or types to the<br>&gt;&gt; stdlib:<br>&gt;&gt; - Either in the Swift Standard Library<br>&gt;&gt; - Proposal: Add scan, takeWhile, dropWhile, and iterate to the stdlib<br>&gt;&gt; - Higher Kinded Types (Monads, Functors, etc.)<br>&gt;&gt; - Adding a new filter method which returns 2 arrays<br>&gt;&gt; - Add replace(_:with:) function to the stdlib<br>&gt;&gt; - map-like operation that returns a dictionary<br>&gt;&gt; - Rectangles and other common structures.<br>&gt;&gt; - Add zip2WithNilPadding function<br>&gt;&gt; - Add types BufferedSequence, BufferedGenerator<br>&gt;&gt; - … (guess there are some that I missed — I didn&#39;t look at last years<br>&gt;&gt; threads at all).<br>&gt;&gt;<br>&gt;&gt; Afair, none of those ideas turned into real proposals, and I think that<br>&gt;&gt; keeping stdlib small is a good goal.<br>&gt;&gt;<br>&gt;&gt; Nonetheless, there are plenty of data structures and algorithms that will<br>&gt;&gt; be used in many places by many different teams, and each of them might<br>&gt;&gt; write its own implementation. That&#39;s imho no big problem for algorithms,<br>&gt;&gt; but for types, it will most likely lead to real annoyance.<br>&gt;&gt;<br>&gt;&gt; I hope that we will soon have a great package manager for Swift, but I<br>&gt;&gt; don&#39;t think that will solve this issue completely:<br>&gt;&gt; I wouldn&#39;t import a big third-party framework just because a tiny<br>&gt;&gt; function like &quot;dropWhile&quot; could make my code more elegant...<br>&gt;&gt;<br>&gt;&gt; Of course, some widely accepted libs might rise and improve<br>&gt;&gt; interoperability, but it is hard to predict how our ecosystem will evolve,<br>&gt;&gt; and you don&#39;t have to wait for the future to see the what could happen when<br>&gt;&gt; there is no common base:<br>&gt;&gt; Just take a look at SCNQuaternion, GLQuaternion and CMQuaternion.<br>&gt;&gt;<br>&gt;&gt; Instead of asking to pollute stdlib with stuff like 3d transformations,<br>&gt;&gt; I&#39;d prefer a set of general purpose libraries under supervision by the<br>&gt;&gt; Swift team:<br>&gt;&gt; It could be a great way for &quot;outsiders&quot; to get into Swift development,<br>&gt;&gt; and most likely wouldn&#39;t put to much stress and responsibility on the<br>&gt;&gt; shoulders of each &quot;manager&quot;.<br>&gt;&gt; It also could take pressure from the stdlib (and this mailinglist :)<br>&gt;&gt;<br>&gt;&gt; Beside fields of application (graphics, images, music, algebra,<br>&gt;&gt; statistics, pattern matching, machine learning, graph theorie... whatever<br>&gt;&gt; raises enough interest), there could also be libraries to support concepts<br>&gt;&gt; like functional programming.<br>&gt;&gt;<br>&gt;&gt; Best regards,<br>&gt;&gt; Tino<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Trent Nadeau<br>&gt;<br></p><p><br>-- <br>  -- Howard.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160127/93e915dc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Pitch: (Almost) std libs</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>January 26, 2016 at 05:00:00pm</p></header><div class="content"><p>+1.  I have already suggested that we have a space for libraries that get reviewed by the community but are distributed by SPM rather than being part of stdlib and corelibs.<br></p><p><br>&gt; On Jan 26, 2016, at 5:48 PM, Howard Lovatt via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; This is a good idea. It will be a lot easier with the module system, particularly if that system is searchable so that you have a chance of finding that someone has already written what you want.<br>&gt; <br>&gt; On Wednesday, 27 January 2016, Trent Nadeau via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; This is similar to Rust&#39;s nursery (https://github.com/rust-lang-nursery &lt;https://github.com/rust-lang-nursery&gt;) that contains commonly used libraries (logging, UUIDs, etc). These are under Rust&#39;s umbrella but aren&#39;t part of the standard library and can be versioned separately but still go through a similar stdlib process. If libraries in the nursery become very widely used, then an RFC can come in requesting for it to be added to the stdlib, and most libraries need to be in the nursery before they can be added to the stdlib.<br>&gt; <br>&gt; I think an approach like that would work well for Swift.<br>&gt; <br>&gt; On Tue, Jan 26, 2016 at 6:32 PM, Tino Heth via swift-evolution &lt;swift-evolution at swift.org &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt; There have been several threads to add specific functions or types to the stdlib:<br>&gt; - Either in the Swift Standard Library<br>&gt; - Proposal: Add scan, takeWhile, dropWhile, and iterate to the stdlib<br>&gt; - Higher Kinded Types (Monads, Functors, etc.)<br>&gt; - Adding a new filter method which returns 2 arrays<br>&gt; - Add replace(_:with:) function to the stdlib<br>&gt; - map-like operation that returns a dictionary<br>&gt; - Rectangles and other common structures.<br>&gt; - Add zip2WithNilPadding function<br>&gt; - Add types BufferedSequence, BufferedGenerator<br>&gt; - … (guess there are some that I missed — I didn&#39;t look at last years threads at all).<br>&gt; <br>&gt; Afair, none of those ideas turned into real proposals, and I think that keeping stdlib small is a good goal.<br>&gt; <br>&gt; Nonetheless, there are plenty of data structures and algorithms that will be used in many places by many different teams, and each of them might write its own implementation. That&#39;s imho no big problem for algorithms, but for types, it will most likely lead to real annoyance.<br>&gt; <br>&gt; I hope that we will soon have a great package manager for Swift, but I don&#39;t think that will solve this issue completely:<br>&gt; I wouldn&#39;t import a big third-party framework just because a tiny function like &quot;dropWhile&quot; could make my code more elegant...<br>&gt; <br>&gt; Of course, some widely accepted libs might rise and improve interoperability, but it is hard to predict how our ecosystem will evolve, and you don&#39;t have to wait for the future to see the what could happen when there is no common base:<br>&gt; Just take a look at SCNQuaternion, GLQuaternion and CMQuaternion.<br>&gt; <br>&gt; Instead of asking to pollute stdlib with stuff like 3d transformations, I&#39;d prefer a set of general purpose libraries under supervision by the Swift team:<br>&gt; It could be a great way for &quot;outsiders&quot; to get into Swift development, and most likely wouldn&#39;t put to much stress and responsibility on the shoulders of each &quot;manager&quot;.<br>&gt; It also could take pressure from the stdlib (and this mailinglist :)<br>&gt; <br>&gt; Beside fields of application (graphics, images, music, algebra, statistics, pattern matching, machine learning, graph theorie... whatever raises enough interest), there could also be libraries to support concepts like functional programming.<br>&gt; <br>&gt; Best regards,<br>&gt; Tino<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Trent Nadeau<br>&gt; <br>&gt; <br>&gt; -- <br>&gt;   -- Howard.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160126/9b4fefb4/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7321934b88ca8da079d7b89926501a9c?s=50"></div><header><strong>Pitch: (Almost) std libs</strong> from <string>David Turnbull</string> &lt;dturnbull at gmail.com&gt;<p>January 26, 2016 at 04:00:00pm</p></header><div class="content"><p>Rust has a Nursery. C++ gets a Boost. Swift is a Breeze? The only problem<br>is that a lot of stdlib-like things aren&#39;t suitable for modules.<br></p><p>For example, it would be unfortunate if a blogger was comparing languages<br>and benchmarked FFT using complex numbers from a module in the breeze.<br>Dynamic dispatch is going to devastate the benchmarks.<br></p><p>Still, it&#39;s worth pursuing this. There&#39;s a lot of things which Apple<br>supports on Apples and won&#39;t be a priority for stdlib. The quaternions you<br>mentioned are a good example. Complex numbers are another because of<br>Accelerate.<br></p><p>-david  https://github.com/AE9RB/SwiftGL<br></p><p><br>On Tue, Jan 26, 2016 at 3:32 PM, Tino Heth via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; There have been several threads to add specific functions or types to the<br>&gt; stdlib:<br>&gt; - Either in the Swift Standard Library<br>&gt; - Proposal: Add scan, takeWhile, dropWhile, and iterate to the stdlib<br>&gt; - Higher Kinded Types (Monads, Functors, etc.)<br>&gt; - Adding a new filter method which returns 2 arrays<br>&gt; - Add replace(_:with:) function to the stdlib<br>&gt; - map-like operation that returns a dictionary<br>&gt; - Rectangles and other common structures.<br>&gt; - Add zip2WithNilPadding function<br>&gt; - Add types BufferedSequence, BufferedGenerator<br>&gt; - … (guess there are some that I missed — I didn&#39;t look at last years<br>&gt; threads at all).<br>&gt;<br>&gt; Afair, none of those ideas turned into real proposals, and I think that<br>&gt; keeping stdlib small is a good goal.<br>&gt;<br>&gt; Nonetheless, there are plenty of data structures and algorithms that will<br>&gt; be used in many places by many different teams, and each of them might<br>&gt; write its own implementation. That&#39;s imho no big problem for algorithms,<br>&gt; but for types, it will most likely lead to real annoyance.<br>&gt;<br>&gt; I hope that we will soon have a great package manager for Swift, but I<br>&gt; don&#39;t think that will solve this issue completely:<br>&gt; I wouldn&#39;t import a big third-party framework just because a tiny function<br>&gt; like &quot;dropWhile&quot; could make my code more elegant...<br>&gt;<br>&gt; Of course, some widely accepted libs might rise and improve<br>&gt; interoperability, but it is hard to predict how our ecosystem will evolve,<br>&gt; and you don&#39;t have to wait for the future to see the what could happen when<br>&gt; there is no common base:<br>&gt; Just take a look at SCNQuaternion, GLQuaternion and CMQuaternion.<br>&gt;<br>&gt; Instead of asking to pollute stdlib with stuff like 3d transformations,<br>&gt; I&#39;d prefer a set of general purpose libraries under supervision by the<br>&gt; Swift team:<br>&gt; It could be a great way for &quot;outsiders&quot; to get into Swift development, and<br>&gt; most likely wouldn&#39;t put to much stress and responsibility on the shoulders<br>&gt; of each &quot;manager&quot;.<br>&gt; It also could take pressure from the stdlib (and this mailinglist :)<br>&gt;<br>&gt; Beside fields of application (graphics, images, music, algebra,<br>&gt; statistics, pattern matching, machine learning, graph theorie... whatever<br>&gt; raises enough interest), there could also be libraries to support concepts<br>&gt; like functional programming.<br>&gt;<br>&gt; Best regards,<br>&gt; Tino<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160126/a2303c89/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c40db4457ab2c91a0d8006da31b177c6?s=50"></div><header><strong>Pitch: (Almost) std libs</strong> from <string>Trent Nadeau</string> &lt;tanadeau at gmail.com&gt;<p>January 26, 2016 at 09:00:00pm</p></header><div class="content"><p>I&#39;m confused. Why would you get dynamic dispatch for a complex number just<br>because it&#39;s in another module? I think a complex number would always be a<br>struct so everything would be inline to the storage on the stack, and<br>there&#39;s no inheritance so no vtable.<br></p><p>On Tue, Jan 26, 2016 at 7:46 PM, David Turnbull via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Rust has a Nursery. C++ gets a Boost. Swift is a Breeze? The only problem<br>&gt; is that a lot of stdlib-like things aren&#39;t suitable for modules.<br>&gt;<br>&gt; For example, it would be unfortunate if a blogger was comparing languages<br>&gt; and benchmarked FFT using complex numbers from a module in the breeze.<br>&gt; Dynamic dispatch is going to devastate the benchmarks.<br>&gt;<br>&gt; Still, it&#39;s worth pursuing this. There&#39;s a lot of things which Apple<br>&gt; supports on Apples and won&#39;t be a priority for stdlib. The quaternions you<br>&gt; mentioned are a good example. Complex numbers are another because of<br>&gt; Accelerate.<br>&gt;<br>&gt; -david  https://github.com/AE9RB/SwiftGL<br>&gt;<br>&gt;<br>&gt; On Tue, Jan 26, 2016 at 3:32 PM, Tino Heth via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; There have been several threads to add specific functions or types to the<br>&gt;&gt; stdlib:<br>&gt;&gt; - Either in the Swift Standard Library<br>&gt;&gt; - Proposal: Add scan, takeWhile, dropWhile, and iterate to the stdlib<br>&gt;&gt; - Higher Kinded Types (Monads, Functors, etc.)<br>&gt;&gt; - Adding a new filter method which returns 2 arrays<br>&gt;&gt; - Add replace(_:with:) function to the stdlib<br>&gt;&gt; - map-like operation that returns a dictionary<br>&gt;&gt; - Rectangles and other common structures.<br>&gt;&gt; - Add zip2WithNilPadding function<br>&gt;&gt; - Add types BufferedSequence, BufferedGenerator<br>&gt;&gt; - … (guess there are some that I missed — I didn&#39;t look at last years<br>&gt;&gt; threads at all).<br>&gt;&gt;<br>&gt;&gt; Afair, none of those ideas turned into real proposals, and I think that<br>&gt;&gt; keeping stdlib small is a good goal.<br>&gt;&gt;<br>&gt;&gt; Nonetheless, there are plenty of data structures and algorithms that will<br>&gt;&gt; be used in many places by many different teams, and each of them might<br>&gt;&gt; write its own implementation. That&#39;s imho no big problem for algorithms,<br>&gt;&gt; but for types, it will most likely lead to real annoyance.<br>&gt;&gt;<br>&gt;&gt; I hope that we will soon have a great package manager for Swift, but I<br>&gt;&gt; don&#39;t think that will solve this issue completely:<br>&gt;&gt; I wouldn&#39;t import a big third-party framework just because a tiny<br>&gt;&gt; function like &quot;dropWhile&quot; could make my code more elegant...<br>&gt;&gt;<br>&gt;&gt; Of course, some widely accepted libs might rise and improve<br>&gt;&gt; interoperability, but it is hard to predict how our ecosystem will evolve,<br>&gt;&gt; and you don&#39;t have to wait for the future to see the what could happen when<br>&gt;&gt; there is no common base:<br>&gt;&gt; Just take a look at SCNQuaternion, GLQuaternion and CMQuaternion.<br>&gt;&gt;<br>&gt;&gt; Instead of asking to pollute stdlib with stuff like 3d transformations,<br>&gt;&gt; I&#39;d prefer a set of general purpose libraries under supervision by the<br>&gt;&gt; Swift team:<br>&gt;&gt; It could be a great way for &quot;outsiders&quot; to get into Swift development,<br>&gt;&gt; and most likely wouldn&#39;t put to much stress and responsibility on the<br>&gt;&gt; shoulders of each &quot;manager&quot;.<br>&gt;&gt; It also could take pressure from the stdlib (and this mailinglist :)<br>&gt;&gt;<br>&gt;&gt; Beside fields of application (graphics, images, music, algebra,<br>&gt;&gt; statistics, pattern matching, machine learning, graph theorie... whatever<br>&gt;&gt; raises enough interest), there could also be libraries to support concepts<br>&gt;&gt; like functional programming.<br>&gt;&gt;<br>&gt;&gt; Best regards,<br>&gt;&gt; Tino<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p><p><br>-- <br>Trent Nadeau<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160126/a04bffb9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7321934b88ca8da079d7b89926501a9c?s=50"></div><header><strong>Pitch: (Almost) std libs</strong> from <string>David Turnbull</string> &lt;dturnbull at gmail.com&gt;<p>January 26, 2016 at 06:00:00pm</p></header><div class="content"><p>Functions in a module go through dynamic dispatch. Operators are functions.<br>So multiplying two complex numbers won&#39;t get inlined. The stdlib uses<br>internal tricks so what appears as a module you import is available to be<br>specialized and inlined.<br></p><p>To see this in action, try the CubeWorld demo from here:<br>https://github.com/AE9RB/SwiftGL<br>Then change it so the math libraries aren&#39;t modules (move the files, delete<br>the import statements). On my system, CPU drops from 60% to 6%. It&#39;s also<br>the difference between 150 cubes and 1200 cubes at 60 fps. Make sure you<br>turn on WMO.<br></p><p>I&#39;m told it won&#39;t always be this way. But it is today.<br></p><p>-david<br></p><p>On Tue, Jan 26, 2016 at 6:18 PM, Trent Nadeau &lt;tanadeau at gmail.com&gt; wrote:<br></p><p>&gt; I&#39;m confused. Why would you get dynamic dispatch for a complex number just<br>&gt; because it&#39;s in another module? I think a complex number would always be a<br>&gt; struct so everything would be inline to the storage on the stack, and<br>&gt; there&#39;s no inheritance so no vtable.<br>&gt;<br>&gt; On Tue, Jan 26, 2016 at 7:46 PM, David Turnbull via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Rust has a Nursery. C++ gets a Boost. Swift is a Breeze? The only problem<br>&gt;&gt; is that a lot of stdlib-like things aren&#39;t suitable for modules.<br>&gt;&gt;<br>&gt;&gt; For example, it would be unfortunate if a blogger was comparing languages<br>&gt;&gt; and benchmarked FFT using complex numbers from a module in the breeze.<br>&gt;&gt; Dynamic dispatch is going to devastate the benchmarks.<br>&gt;&gt;<br>&gt;&gt; Still, it&#39;s worth pursuing this. There&#39;s a lot of things which Apple<br>&gt;&gt; supports on Apples and won&#39;t be a priority for stdlib. The quaternions you<br>&gt;&gt; mentioned are a good example. Complex numbers are another because of<br>&gt;&gt; Accelerate.<br>&gt;&gt;<br>&gt;&gt; -david  https://github.com/AE9RB/SwiftGL<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Tue, Jan 26, 2016 at 3:32 PM, Tino Heth via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; There have been several threads to add specific functions or types to<br>&gt;&gt;&gt; the stdlib:<br>&gt;&gt;&gt; - Either in the Swift Standard Library<br>&gt;&gt;&gt; - Proposal: Add scan, takeWhile, dropWhile, and iterate to the stdlib<br>&gt;&gt;&gt; - Higher Kinded Types (Monads, Functors, etc.)<br>&gt;&gt;&gt; - Adding a new filter method which returns 2 arrays<br>&gt;&gt;&gt; - Add replace(_:with:) function to the stdlib<br>&gt;&gt;&gt; - map-like operation that returns a dictionary<br>&gt;&gt;&gt; - Rectangles and other common structures.<br>&gt;&gt;&gt; - Add zip2WithNilPadding function<br>&gt;&gt;&gt; - Add types BufferedSequence, BufferedGenerator<br>&gt;&gt;&gt; - … (guess there are some that I missed — I didn&#39;t look at last years<br>&gt;&gt;&gt; threads at all).<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Afair, none of those ideas turned into real proposals, and I think that<br>&gt;&gt;&gt; keeping stdlib small is a good goal.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Nonetheless, there are plenty of data structures and algorithms that<br>&gt;&gt;&gt; will be used in many places by many different teams, and each of them might<br>&gt;&gt;&gt; write its own implementation. That&#39;s imho no big problem for algorithms,<br>&gt;&gt;&gt; but for types, it will most likely lead to real annoyance.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I hope that we will soon have a great package manager for Swift, but I<br>&gt;&gt;&gt; don&#39;t think that will solve this issue completely:<br>&gt;&gt;&gt; I wouldn&#39;t import a big third-party framework just because a tiny<br>&gt;&gt;&gt; function like &quot;dropWhile&quot; could make my code more elegant...<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Of course, some widely accepted libs might rise and improve<br>&gt;&gt;&gt; interoperability, but it is hard to predict how our ecosystem will evolve,<br>&gt;&gt;&gt; and you don&#39;t have to wait for the future to see the what could happen when<br>&gt;&gt;&gt; there is no common base:<br>&gt;&gt;&gt; Just take a look at SCNQuaternion, GLQuaternion and CMQuaternion.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Instead of asking to pollute stdlib with stuff like 3d transformations,<br>&gt;&gt;&gt; I&#39;d prefer a set of general purpose libraries under supervision by the<br>&gt;&gt;&gt; Swift team:<br>&gt;&gt;&gt; It could be a great way for &quot;outsiders&quot; to get into Swift development,<br>&gt;&gt;&gt; and most likely wouldn&#39;t put to much stress and responsibility on the<br>&gt;&gt;&gt; shoulders of each &quot;manager&quot;.<br>&gt;&gt;&gt; It also could take pressure from the stdlib (and this mailinglist :)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Beside fields of application (graphics, images, music, algebra,<br>&gt;&gt;&gt; statistics, pattern matching, machine learning, graph theorie... whatever<br>&gt;&gt;&gt; raises enough interest), there could also be libraries to support concepts<br>&gt;&gt;&gt; like functional programming.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Best regards,<br>&gt;&gt;&gt; Tino<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Trent Nadeau<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160126/93264d97/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Pitch: (Almost) std libs</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>January 26, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On Jan 26, 2016, at 18:49 , David Turnbull via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Functions in a module go through dynamic dispatch. Operators are functions. So multiplying two complex numbers won&#39;t get inlined. The stdlib uses internal tricks so what appears as a module you import is available to be specialized and inlined.<br>&gt; <br>&gt; To see this in action, try the CubeWorld demo from here: https://github.com/AE9RB/SwiftGL &lt;https://github.com/AE9RB/SwiftGL&gt;<br>&gt; Then change it so the math libraries aren&#39;t modules (move the files, delete the import statements). On my system, CPU drops from 60% to 6%. It&#39;s also the difference between 150 cubes and 1200 cubes at 60 fps. Make sure you turn on WMO.<br>&gt; <br>&gt; I&#39;m told it won&#39;t always be this way. But it is today.<br></p><p>Yep. We&#39;re planning to improve this but right now it&#39;s true: inlining and generic specialization does not happen across framework boundaries.<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160126/46ba5eb9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Pitch: (Almost) std libs</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>January 26, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On Jan 26, 2016, at 19:45 , Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 26, 2016, at 18:49 , David Turnbull via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Functions in a module go through dynamic dispatch. Operators are functions. So multiplying two complex numbers won&#39;t get inlined. The stdlib uses internal tricks so what appears as a module you import is available to be specialized and inlined.<br>&gt;&gt; <br>&gt;&gt; To see this in action, try the CubeWorld demo from here: https://github.com/AE9RB/SwiftGL &lt;https://github.com/AE9RB/SwiftGL&gt;<br>&gt;&gt; Then change it so the math libraries aren&#39;t modules (move the files, delete the import statements). On my system, CPU drops from 60% to 6%. It&#39;s also the difference between 150 cubes and 1200 cubes at 60 fps. Make sure you turn on WMO.<br>&gt;&gt; <br>&gt;&gt; I&#39;m told it won&#39;t always be this way. But it is today.<br>&gt; <br>&gt; Yep. We&#39;re planning to improve this but right now it&#39;s true: inlining and generic specialization does not happen across framework boundaries.<br></p><p>Only the generics are really &quot;dynamic dispatch&quot;, though. Non-generic code is just &quot;function calls that aren&#39;t inlined&quot;.<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160126/301a930a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c40db4457ab2c91a0d8006da31b177c6?s=50"></div><header><strong>Pitch: (Almost) std libs</strong> from <string>Trent Nadeau</string> &lt;tanadeau at gmail.com&gt;<p>January 26, 2016 at 10:00:00pm</p></header><div class="content"><p>Okay. That makes more sense. I was wondering where you would even have<br>dynamic dispatch to a normal function.<br></p><p>On Tue, Jan 26, 2016 at 10:46 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Jan 26, 2016, at 19:45 , Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Jan 26, 2016, at 18:49 , David Turnbull via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Functions in a module go through dynamic dispatch. Operators are<br>&gt; functions. So multiplying two complex numbers won&#39;t get inlined. The stdlib<br>&gt; uses internal tricks so what appears as a module you import is available to<br>&gt; be specialized and inlined.<br>&gt;<br>&gt; To see this in action, try the CubeWorld demo from here:<br>&gt; https://github.com/AE9RB/SwiftGL<br>&gt; Then change it so the math libraries aren&#39;t modules (move the files,<br>&gt; delete the import statements). On my system, CPU drops from 60% to 6%. It&#39;s<br>&gt; also the difference between 150 cubes and 1200 cubes at 60 fps. Make sure<br>&gt; you turn on WMO.<br>&gt;<br>&gt; I&#39;m told it won&#39;t always be this way. But it is today.<br>&gt;<br>&gt;<br>&gt; Yep. We&#39;re planning to improve this but right now it&#39;s true: inlining and<br>&gt; generic specialization does not happen across framework boundaries.<br>&gt;<br>&gt;<br>&gt; Only the generics are really &quot;dynamic dispatch&quot;, though. Non-generic code<br>&gt; is just &quot;function calls that aren&#39;t inlined&quot;.<br>&gt;<br>&gt; Jordan<br>&gt;<br>&gt;<br></p><p><br>-- <br>Trent Nadeau<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160126/520d0da8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>Pitch: (Almost) std libs</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>January 27, 2016 at 01:00:00am</p></header><div class="content"><p>Do note that any function that is dynamically linked to your program is reached through an indirect jump. This is probably what David means when he says that it uses dynamic dispatch.<br></p><p>Félix<br></p><p>&gt; Le 26 janv. 2016 à 22:48:49, Trent Nadeau via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Okay. That makes more sense. I was wondering where you would even have dynamic dispatch to a normal function.<br>&gt; <br>&gt; On Tue, Jan 26, 2016 at 10:46 PM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Jan 26, 2016, at 19:45 , Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 26, 2016, at 18:49 , David Turnbull via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Functions in a module go through dynamic dispatch. Operators are functions. So multiplying two complex numbers won&#39;t get inlined. The stdlib uses internal tricks so what appears as a module you import is available to be specialized and inlined.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; To see this in action, try the CubeWorld demo from here: https://github.com/AE9RB/SwiftGL &lt;https://github.com/AE9RB/SwiftGL&gt;<br>&gt;&gt;&gt; Then change it so the math libraries aren&#39;t modules (move the files, delete the import statements). On my system, CPU drops from 60% to 6%. It&#39;s also the difference between 150 cubes and 1200 cubes at 60 fps. Make sure you turn on WMO.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m told it won&#39;t always be this way. But it is today.<br>&gt;&gt; <br>&gt;&gt; Yep. We&#39;re planning to improve this but right now it&#39;s true: inlining and generic specialization does not happen across framework boundaries.<br>&gt; <br>&gt; Only the generics are really &quot;dynamic dispatch&quot;, though. Non-generic code is just &quot;function calls that aren&#39;t inlined&quot;.<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Trent Nadeau<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160127/fff6b078/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7321934b88ca8da079d7b89926501a9c?s=50"></div><header><strong>Pitch: (Almost) std libs</strong> from <string>David Turnbull</string> &lt;dturnbull at gmail.com&gt;<p>January 26, 2016 at 11:00:00pm</p></header><div class="content"><p>On Tue, Jan 26, 2016 at 10:44 PM, Félix Cloutier &lt;swift-evolution at swift.org&gt;<br>wrote:<br></p><p>&gt; This is probably what David means when he says that it uses dynamic<br>&gt; dispatch.<br>&gt;<br></p><p>I was a bit imprecise because 100% of my math libraries are generic. So<br>it&#39;s stuck in my head that everything gets a dynamic dispatch. But yeah,<br>concrete functions crossing modules are simply not-inlined. Which is still<br>a very big deal for simple math operations.<br></p><p>Regardless of the technical details, there&#39;s significant advantages to<br>being &quot;stdlib&quot; instead of &quot;module&quot;. That&#39;s what I wanted to bring to the<br>discussion. It&#39;s not something you&#39;ll find in the docs but I think it&#39;s<br>important to know about for anyone working on this idea.<br></p><p>-david<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160126/27cbfe7d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Pitch: (Almost) std libs</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>January 27, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Jan 26, 2016, at 23:32 , David Turnbull via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Tue, Jan 26, 2016 at 10:44 PM, Félix Cloutier &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; This is probably what David means when he says that it uses dynamic dispatch.<br>&gt; <br>&gt; I was a bit imprecise because 100% of my math libraries are generic. So it&#39;s stuck in my head that everything gets a dynamic dispatch. But yeah, concrete functions crossing modules are simply not-inlined. Which is still a very big deal for simple math operations.<br>&gt; <br>&gt; Regardless of the technical details, there&#39;s significant advantages to being &quot;stdlib&quot; instead of &quot;module&quot;. That&#39;s what I wanted to bring to the discussion. It&#39;s not something you&#39;ll find in the docs but I think it&#39;s important to know about for anyone working on this idea.<br></p><p>It isn&#39;t a &quot;stdlib&quot; vs. &quot;module&quot; distinction. The core standard library is compiled in an incredibly hacky mode that has pretty much broken something every time we try to extend it to something else; there are a number of bugs across the compiler that we need to fix so that we can do this reliably for arbitrary modules (without any customization). Some of the issues are listed at the bottom of the TransparentAttr.rst &lt;https://github.com/apple/swift/blob/master/docs/TransparentAttr.rst&gt; document, for lack of a better place to put them.<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160127/4ec9bf1e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7321934b88ca8da079d7b89926501a9c?s=50"></div><header><strong>Pitch: (Almost) std libs</strong> from <string>David Turnbull</string> &lt;dturnbull at gmail.com&gt;<p>January 28, 2016 at 08:00:00pm</p></header><div class="content"><p>I was thinking about the requirements to make this happen. It only needs<br>someone to do the initial organization. So I created a GitHub organization<br>and put up a couple projects. The Matrix4 project is feature-complete. The<br>Complex project is just a foothold.<br></p><p>Now we need more projects. The readme in the contrib project has<br>information about getting your project added.<br></p><p>https://github.com/swift-breeze<br></p><p>-david<br></p><p>On Tue, Jan 26, 2016 at 3:51 PM, Matthew Johnson via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; +1.  I have already suggested that we have a space for libraries that get<br>&gt; reviewed by the community but are distributed by SPM rather than being part<br>&gt; of stdlib and corelibs.<br>&gt;<br>&gt;<br>&gt; On Jan 26, 2016, at 5:48 PM, Howard Lovatt via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; This is a good idea. It will be a lot easier with the module system,<br>&gt; particularly if that system is searchable so that you have a chance of<br>&gt; finding that someone has already written what you want.<br>&gt;<br>&gt; On Wednesday, 27 January 2016, Trent Nadeau via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; This is similar to Rust&#39;s nursery (https://github.com/rust-lang-nursery)<br>&gt;&gt; that contains commonly used libraries (logging, UUIDs, etc). These are<br>&gt;&gt; under Rust&#39;s umbrella but aren&#39;t part of the standard library and can be<br>&gt;&gt; versioned separately but still go through a similar stdlib process. If<br>&gt;&gt; libraries in the nursery become very widely used, then an RFC can come in<br>&gt;&gt; requesting for it to be added to the stdlib, and most libraries need to be<br>&gt;&gt; in the nursery before they can be added to the stdlib.<br>&gt;&gt;<br>&gt;&gt; I think an approach like that would work well for Swift.<br>&gt;&gt;<br>&gt;&gt; On Tue, Jan 26, 2016 at 6:32 PM, Tino Heth via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; There have been several threads to add specific functions or types to<br>&gt;&gt;&gt; the stdlib:<br>&gt;&gt;&gt; - Either in the Swift Standard Library<br>&gt;&gt;&gt; - Proposal: Add scan, takeWhile, dropWhile, and iterate to the stdlib<br>&gt;&gt;&gt; - Higher Kinded Types (Monads, Functors, etc.)<br>&gt;&gt;&gt; - Adding a new filter method which returns 2 arrays<br>&gt;&gt;&gt; - Add replace(_:with:) function to the stdlib<br>&gt;&gt;&gt; - map-like operation that returns a dictionary<br>&gt;&gt;&gt; - Rectangles and other common structures.<br>&gt;&gt;&gt; - Add zip2WithNilPadding function<br>&gt;&gt;&gt; - Add types BufferedSequence, BufferedGenerator<br>&gt;&gt;&gt; - … (guess there are some that I missed — I didn&#39;t look at last years<br>&gt;&gt;&gt; threads at all).<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Afair, none of those ideas turned into real proposals, and I think that<br>&gt;&gt;&gt; keeping stdlib small is a good goal.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Nonetheless, there are plenty of data structures and algorithms that<br>&gt;&gt;&gt; will be used in many places by many different teams, and each of them might<br>&gt;&gt;&gt; write its own implementation. That&#39;s imho no big problem for algorithms,<br>&gt;&gt;&gt; but for types, it will most likely lead to real annoyance.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I hope that we will soon have a great package manager for Swift, but I<br>&gt;&gt;&gt; don&#39;t think that will solve this issue completely:<br>&gt;&gt;&gt; I wouldn&#39;t import a big third-party framework just because a tiny<br>&gt;&gt;&gt; function like &quot;dropWhile&quot; could make my code more elegant...<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Of course, some widely accepted libs might rise and improve<br>&gt;&gt;&gt; interoperability, but it is hard to predict how our ecosystem will evolve,<br>&gt;&gt;&gt; and you don&#39;t have to wait for the future to see the what could happen when<br>&gt;&gt;&gt; there is no common base:<br>&gt;&gt;&gt; Just take a look at SCNQuaternion, GLQuaternion and CMQuaternion.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Instead of asking to pollute stdlib with stuff like 3d transformations,<br>&gt;&gt;&gt; I&#39;d prefer a set of general purpose libraries under supervision by the<br>&gt;&gt;&gt; Swift team:<br>&gt;&gt;&gt; It could be a great way for &quot;outsiders&quot; to get into Swift development,<br>&gt;&gt;&gt; and most likely wouldn&#39;t put to much stress and responsibility on the<br>&gt;&gt;&gt; shoulders of each &quot;manager&quot;.<br>&gt;&gt;&gt; It also could take pressure from the stdlib (and this mailinglist :)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Beside fields of application (graphics, images, music, algebra,<br>&gt;&gt;&gt; statistics, pattern matching, machine learning, graph theorie... whatever<br>&gt;&gt;&gt; raises enough interest), there could also be libraries to support concepts<br>&gt;&gt;&gt; like functional programming.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Best regards,<br>&gt;&gt;&gt; Tino<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Trent Nadeau<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt;   -- Howard.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160128/645b6a82/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0089229ece6e648767cff4dc6c6d38ab?s=50"></div><header><strong>Pitch: (Almost) std libs</strong> from <string>Charles Kissinger</string> &lt;crk at akkyra.com&gt;<p>January 28, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On Jan 28, 2016, at 8:54 PM, David Turnbull via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I was thinking about the requirements to make this happen. It only needs someone to do the initial organization. So I created a GitHub organization and put up a couple projects. The Matrix4 project is feature-complete. The Complex project is just a foothold.<br>&gt; <br>&gt; Now we need more projects. The readme in the contrib project has information about getting your project added.<br></p><p>In your readme, you mention random number generation as a potential project. It’s worth mentioning that Apple has a really nice set of RNG classes for Swift already, but it’s hidden away in GameplayKit. It may be a little off-topic for this list, but I would love to see that moved from GameplayKit to Foundation and become a part of cross-platform Swift.<br></p><p>—CK<br></p><p>&gt; https://github.com/swift-breeze &lt;https://github.com/swift-breeze&gt;<br>&gt; <br>&gt; -david<br>&gt; <br>&gt; On Tue, Jan 26, 2016 at 3:51 PM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; +1.  I have already suggested that we have a space for libraries that get reviewed by the community but are distributed by SPM rather than being part of stdlib and corelibs.<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 26, 2016, at 5:48 PM, Howard Lovatt via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; This is a good idea. It will be a lot easier with the module system, particularly if that system is searchable so that you have a chance of finding that someone has already written what you want.<br>&gt;&gt; <br>&gt;&gt; On Wednesday, 27 January 2016, Trent Nadeau via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; This is similar to Rust&#39;s nursery (https://github.com/rust-lang-nursery &lt;https://github.com/rust-lang-nursery&gt;) that contains commonly used libraries (logging, UUIDs, etc). These are under Rust&#39;s umbrella but aren&#39;t part of the standard library and can be versioned separately but still go through a similar stdlib process. If libraries in the nursery become very widely used, then an RFC can come in requesting for it to be added to the stdlib, and most libraries need to be in the nursery before they can be added to the stdlib.<br>&gt;&gt; <br>&gt;&gt; I think an approach like that would work well for Swift.<br>&gt;&gt; <br>&gt;&gt; On Tue, Jan 26, 2016 at 6:32 PM, Tino Heth via swift-evolution &lt;swift-evolution at swift.org &lt;&gt;&gt; wrote:<br>&gt;&gt; There have been several threads to add specific functions or types to the stdlib:<br>&gt;&gt; - Either in the Swift Standard Library<br>&gt;&gt; - Proposal: Add scan, takeWhile, dropWhile, and iterate to the stdlib<br>&gt;&gt; - Higher Kinded Types (Monads, Functors, etc.)<br>&gt;&gt; - Adding a new filter method which returns 2 arrays<br>&gt;&gt; - Add replace(_:with:) function to the stdlib<br>&gt;&gt; - map-like operation that returns a dictionary<br>&gt;&gt; - Rectangles and other common structures.<br>&gt;&gt; - Add zip2WithNilPadding function<br>&gt;&gt; - Add types BufferedSequence, BufferedGenerator<br>&gt;&gt; - … (guess there are some that I missed — I didn&#39;t look at last years threads at all).<br>&gt;&gt; <br>&gt;&gt; Afair, none of those ideas turned into real proposals, and I think that keeping stdlib small is a good goal.<br>&gt;&gt; <br>&gt;&gt; Nonetheless, there are plenty of data structures and algorithms that will be used in many places by many different teams, and each of them might write its own implementation. That&#39;s imho no big problem for algorithms, but for types, it will most likely lead to real annoyance.<br>&gt;&gt; <br>&gt;&gt; I hope that we will soon have a great package manager for Swift, but I don&#39;t think that will solve this issue completely:<br>&gt;&gt; I wouldn&#39;t import a big third-party framework just because a tiny function like &quot;dropWhile&quot; could make my code more elegant...<br>&gt;&gt; <br>&gt;&gt; Of course, some widely accepted libs might rise and improve interoperability, but it is hard to predict how our ecosystem will evolve, and you don&#39;t have to wait for the future to see the what could happen when there is no common base:<br>&gt;&gt; Just take a look at SCNQuaternion, GLQuaternion and CMQuaternion.<br>&gt;&gt; <br>&gt;&gt; Instead of asking to pollute stdlib with stuff like 3d transformations, I&#39;d prefer a set of general purpose libraries under supervision by the Swift team:<br>&gt;&gt; It could be a great way for &quot;outsiders&quot; to get into Swift development, and most likely wouldn&#39;t put to much stress and responsibility on the shoulders of each &quot;manager&quot;.<br>&gt;&gt; It also could take pressure from the stdlib (and this mailinglist :)<br>&gt;&gt; <br>&gt;&gt; Beside fields of application (graphics, images, music, algebra, statistics, pattern matching, machine learning, graph theorie... whatever raises enough interest), there could also be libraries to support concepts like functional programming.<br>&gt;&gt; <br>&gt;&gt; Best regards,<br>&gt;&gt; Tino<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Trent Nadeau<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt;   -- Howard.<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160128/eac75830/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7321934b88ca8da079d7b89926501a9c?s=50"></div><header><strong>Pitch: (Almost) std libs</strong> from <string>David Turnbull</string> &lt;dturnbull at gmail.com&gt;<p>January 29, 2016 at 12:00:00am</p></header><div class="content"><p>On Thu, Jan 28, 2016 at 10:18 PM, Charles Kissinger &lt;crk at akkyra.com&gt; wrote:<br></p><p>&gt; In your readme, you mention random number generation as a potential<br>&gt; project. It’s worth mentioning that Apple has a really nice set of RNG<br>&gt; classes for Swift already, but it’s hidden away in GameplayKit. It may be a<br>&gt; little off-topic for this list, but I would love to see that moved from<br>&gt; GameplayKit to Foundation and become a part of cross-platform Swift.<br>&gt;<br></p><p>The Objective-C runtime is not part of the Swift open source project. So<br>moving anything from GameplayKit isn&#39;t possible. You&#39;d just be rewriting<br>everything in Swift.<br></p><p>I think the C++11 or Boost model for PRNG would be well received.<br></p><p>-david  https://github.com/swift-breeze<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/a8889787/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0089229ece6e648767cff4dc6c6d38ab?s=50"></div><header><strong>Pitch: (Almost) std libs</strong> from <string>Charles Kissinger</string> &lt;crk at akkyra.com&gt;<p>January 29, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; On Jan 29, 2016, at 12:24 AM, David Turnbull &lt;dturnbull at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Thu, Jan 28, 2016 at 10:18 PM, Charles Kissinger &lt;crk at akkyra.com &lt;mailto:crk at akkyra.com&gt;&gt; wrote:<br>&gt; In your readme, you mention random number generation as a potential project. It’s worth mentioning that Apple has a really nice set of RNG classes for Swift already, but it’s hidden away in GameplayKit. It may be a little off-topic for this list, but I would love to see that moved from GameplayKit to Foundation and become a part of cross-platform Swift.<br>&gt; <br>&gt; The Objective-C runtime is not part of the Swift open source project. So moving anything from GameplayKit isn&#39;t possible. You&#39;d just be rewriting everything in Swift.<br></p><p>Understood, but rewriting the Foundation classes in Swift *is* part of the Swift open source project. I was suggesting two things: moving the classes to Foundation because they are broadly useful for much more than games; then doing the open source implementation (translation to Swift) as part of the Core Libraries subproject. But as I said above, probably off-topic for this list.<br></p><p>—CK<br></p><p>&gt; I think the C++11 or Boost model for PRNG would be well received.<br>&gt; <br>&gt; -david  https://github.com/swift-breeze &lt;https://github.com/swift-breeze&gt;<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/9526fb5c/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>Pitch: (Almost) std libs</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>January 29, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; I was thinking about the requirements to make this happen. It only needs someone to do the initial organization. So I created a GitHub organization and put up a couple projects. The Matrix4 project is feature-complete. The Complex project is just a foothold.<br>&gt; <br>&gt; Now we need more projects. The readme in the contrib project has information about getting your project added.<br>&gt; <br>&gt; https://github.com/swift-breeze &lt;https://github.com/swift-breeze&gt;<br>I fear it won&#39;t be that simple…<br></p><p>First problem: &quot;Hey github, where can I request team membership??&quot;<br>I just starred the contrib repo, and I guess you can use this information to bring me into that team… but it should be more straightforward to join.<br>Or wait, maybe I&#39;m to quick here: Should it be easy to join at all?<br></p><p>The second problem is most likely the real showstopper:<br>Establishing a real standard requires influence, and that is hard to earn…<br>It is possible someone else starts a project with the same goal next week, and maybe someone already did it last year, and I just don&#39;t know about that &quot;standard&quot;.<br></p><p>Although no absolute requirement, chances for success would be significantly better if the project was managed (or at least supported) by an accepted authority — and taking into account that it is desirable that ultimately its results are shipped with Swift itself, the preferred choice for a manager is someone working in the Core Team (or, more general: At Apple).<br></p><p>I don&#39;t know how successful ResearchKit is right now, but I guess it could act as a prototype.<br></p><p>Tino<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/1c40cb28/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7321934b88ca8da079d7b89926501a9c?s=50"></div><header><strong>Pitch: (Almost) std libs</strong> from <string>David Turnbull</string> &lt;dturnbull at gmail.com&gt;<p>January 29, 2016 at 04:00:00pm</p></header><div class="content"><p>The org isn&#39;t private so I&#39;m not sure what you&#39;re trying to join on GitHub<br>but you can contact me off-list to figure it out.<br></p><p>The core team is very small and super busy. You&#39;re asking them to take on<br>more administrative work and responsibility. If they were interested in<br>doing so at this time I&#39;m sure someone would have joined the conversation.<br></p><p>I&#39;m trying a different approach. Maybe it won&#39;t get very far because I&#39;m<br>not influential enough. But if I can herd enough code to demonstrate the<br>potential of this idea, it&#39;s a lot easier to ask Apple to take on extra<br>work.<br></p><p>Ideas like this are substantially different from language changes. They can<br>alter the evolution of Swift but you can&#39;t put it in a typical proposal.<br>Think of my GitHub experiment as a proposal, not an implementation.<br></p><p>-david<br></p><p>On Fri, Jan 29, 2016 at 9:31 AM, Tino Heth &lt;2th at gmx.de&gt; wrote:<br></p><p>&gt;<br>&gt; I was thinking about the requirements to make this happen. It only needs<br>&gt; someone to do the initial organization. So I created a GitHub organization<br>&gt; and put up a couple projects. The Matrix4 project is feature-complete. The<br>&gt; Complex project is just a foothold.<br>&gt;<br>&gt; Now we need more projects. The readme in the contrib project has<br>&gt; information about getting your project added.<br>&gt;<br>&gt; https://github.com/swift-breeze<br>&gt;<br>&gt;<br>&gt; I fear it won&#39;t be that simple…<br>&gt;<br>&gt; First problem: &quot;Hey github, where can I request team membership??&quot;<br>&gt; I just starred the contrib repo, and I guess you can use this information<br>&gt; to bring me into that team… but it should be more straightforward to join.<br>&gt; Or wait, maybe I&#39;m to quick here: Should it be easy to join at all?<br>&gt;<br>&gt; The second problem is most likely the real showstopper:<br>&gt; Establishing a real standard requires influence, and that is hard to earn…<br>&gt; It is possible someone else starts a project with the same goal next week,<br>&gt; and maybe someone already did it last year, and I just don&#39;t know about<br>&gt; that &quot;standard&quot;.<br>&gt;<br>&gt; Although no absolute requirement, chances for success would be<br>&gt; significantly better if the project was managed (or at least supported) by<br>&gt; an accepted authority — and taking into account that it is desirable that<br>&gt; ultimately its results are shipped with Swift itself, the preferred choice<br>&gt; for a manager is someone working in the Core Team (or, more general: At<br>&gt; Apple).<br>&gt;<br>&gt; I don&#39;t know how successful ResearchKit is right now, but I guess it could<br>&gt; act as a prototype.<br>&gt;<br>&gt; Tino<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/cce858af/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d118cdf2fe31053bc7032466c4da282?s=50"></div><header><strong>Pitch: (Almost) std libs</strong> from <string>Craig Cruden</string> &lt;ccruden at novafore.com&gt;<p>January 27, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; - Higher Kinded Types (Monads, Functors, etc.)<br></p><p>I don’t think HKT would really work completely as a separate library since some of the functions which are implemented already in the standard library should be identified with a common protocol (i.e. Optional monad and collections monads).  Which would act as a foundation for “for-comprehension” implementations (for yield) which in the end translate into map/flatMap/filter [on demand].<br></p><p><br>&gt; On 2016-01-27, at 6:32:45, Tino Heth via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; There have been several threads to add specific functions or types to the stdlib:<br>&gt; - Either in the Swift Standard Library<br>&gt; - Proposal: Add scan, takeWhile, dropWhile, and iterate to the stdlib<br>&gt; - Higher Kinded Types (Monads, Functors, etc.)<br>&gt; - Adding a new filter method which returns 2 arrays<br>&gt; - Add replace(_:with:) function to the stdlib<br>&gt; - map-like operation that returns a dictionary<br>&gt; - Rectangles and other common structures.<br>&gt; - Add zip2WithNilPadding function<br>&gt; - Add types BufferedSequence, BufferedGenerator<br>&gt; - … (guess there are some that I missed — I didn&#39;t look at last years threads at all).<br>&gt; <br>&gt; Afair, none of those ideas turned into real proposals, and I think that keeping stdlib small is a good goal.<br>&gt; <br>&gt; Nonetheless, there are plenty of data structures and algorithms that will be used in many places by many different teams, and each of them might write its own implementation. That&#39;s imho no big problem for algorithms, but for types, it will most likely lead to real annoyance.<br>&gt; <br>&gt; I hope that we will soon have a great package manager for Swift, but I don&#39;t think that will solve this issue completely:<br>&gt; I wouldn&#39;t import a big third-party framework just because a tiny function like &quot;dropWhile&quot; could make my code more elegant...<br>&gt; <br>&gt; Of course, some widely accepted libs might rise and improve interoperability, but it is hard to predict how our ecosystem will evolve, and you don&#39;t have to wait for the future to see the what could happen when there is no common base:<br>&gt; Just take a look at SCNQuaternion, GLQuaternion and CMQuaternion.<br>&gt; <br>&gt; Instead of asking to pollute stdlib with stuff like 3d transformations, I&#39;d prefer a set of general purpose libraries under supervision by the Swift team:<br>&gt; It could be a great way for &quot;outsiders&quot; to get into Swift development, and most likely wouldn&#39;t put to much stress and responsibility on the shoulders of each &quot;manager&quot;.<br>&gt; It also could take pressure from the stdlib (and this mailinglist :)<br>&gt; <br>&gt; Beside fields of application (graphics, images, music, algebra, statistics, pattern matching, machine learning, graph theorie... whatever raises enough interest), there could also be libraries to support concepts like functional programming.<br>&gt; <br>&gt; Best regards,<br>&gt; Tino<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160127/7919bc3c/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
