<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4c60436f08b7b107f0bb0848c31297fa?s=50"></div><header><strong>Proposal for a standard Darwin/Glibc module</strong> from <string>Alex Blewitt</string> &lt;alblue at apple.com&gt;<p>November  3, 2016 at 05:00:00pm</p></header><div class="content"><p>In the near future it&#39;s likely that this project will need to have types that use C based functionality for representing sockets or other low-layer functionality. This has typically been implemented using a conditional include based on whether the code is on Linux or not to import Darwin or Glibc:<br></p><p>  #if os(Linux)<br>  import Glibc<br>  #else<br>  import Darwin<br>  #endif<br></p><p>This pattern exists in a number of different open source projects already, and it&#39;s a problem as new operating systems are added.<br></p><p>To that end, I&#39;ve drafted a proposal that I intend to post to swift-evolution this weekend. If anyone would like to comment on this before I do, or add their names to the proposal as well, please let me know. I would like to send the draft off on Saturday, to give time for people to look over it before SwiftSummit convenes on Monday.<br></p><p>Arguably this is out of scope for Swift 3 phase 1, but I think it would be of benefit to this community to have a module that performs this functionality and we may be able to drive the requirements to include it in Swift 3 phase 2.<br></p><p>Comments welcome.<br></p><p>--- 8&lt; ---<br></p><p># Libc module for Swift<br></p><p>* Proposal: [SE-NNNN](NNNN-filename.md)<br>* Authors: [Alex Blewitt](https://github.com/alblue)<br>* Review Manager: TBD<br>* Status: **Under discussion**<br></p><p>## Introduction<br></p><p>When running on Darwin, the base module is called `Darwin`. When running<br>on Linux or other operating systems, it&#39;s called `GlibC`. <br></p><p>This repeatedly leads to code such as:<br></p><p>    ````<br>    #if os(Linux)<br>      import Glibc<br>    #else<br>      import Darwin<br>    #endif<br>    ```<br></p><p>As the set of operating systems evolve, one of these conditional imports<br>needs to be updated. Instead of repeating this, make it available via a<br>standard `Libc` module in the base Swift library.<br></p><p>Swift-evolution thread: [Discussion thread topic for that proposal](https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20161003/027621.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20161003/027621.html&gt;)<br></p><p>## Motivation<br></p><p>The [set of platforms](https://github.com/apple/swift/blob/fdf6ee20e4ca1fd32482f4b7b88a97ebdda52cd2/lib/Basic/LangOptions.cpp#L26-L36 &lt;https://github.com/apple/swift/blob/fdf6ee20e4ca1fd32482f4b7b88a97ebdda52cd2/lib/Basic/LangOptions.cpp#L26-L36&gt;)<br>that Swift currently runs on can be divided into two; Darwin and XNU based systems<br>(macOS, iOS, watchOS, tvOS), Windows, and Unix based systems<br>(Linux, FreeBSD, Android, PS4). <br></p><p>The base module on Darwin is called `Darwin`, while on Linux and<br>other Unix systems the base module is called `Glibc`. The base<br>module is typically conditionally included when working at a lower layer<br>than Foundation (which has the same detail involved in importing the<br>base module).<br></p><p>As a result, conditionally importing the right version typically uses<br>a conditional test based on the operating system, and the same code is<br>seen in a number of different modules, both internal to Swift and external:<br></p><p>* [Test for mmap in stdlib](https://github.com/apple/swift/blob/07b196d2f9a5facc490b35e3649e18937796239b/test/stdlib/mmap.swift#L4-L9 &lt;https://github.com/apple/swift/blob/07b196d2f9a5facc490b35e3649e18937796239b/test/stdlib/mmap.swift#L4-L9&gt;)<br>* [Validation test for PassIfChildCrashedDuringTestExecution](https://github.com/apple/swift/blob/c3b7709a7c4789f1ad7249d357f69509fb8be731/validation-test/StdlibUnittest/ChildProcessShutdown/PassIfChildCrashedDuringTestExecution.swift#L4-L9 &lt;https://github.com/apple/swift/blob/c3b7709a7c4789f1ad7249d357f69509fb8be731/validation-test/StdlibUnittest/ChildProcessShutdown/PassIfChildCrashedDuringTestExecution.swift#L4-L9&gt;)<br>* [Kitura&#39;s Socket definitions](https://github.com/IBM-Swift/BlueSocket/blob/49c5af8b6953cecc8674a7fcf746fa27a72c056a/Sources/Socket.swift#L21-L25 &lt;https://github.com/IBM-Swift/BlueSocket/blob/49c5af8b6953cecc8674a7fcf746fa27a72c056a/Sources/Socket.swift#L21-L25&gt;)<br>* [Vapor&#39;s HTTP Server](https://github.com/vapor/engine/blob/1f95094ee470408309e98dd56b2251210d6a2a3d/Sources/HTTP/Models/Server/HTTP%2BServer.swift#L1-L5 &lt;https://github.com/vapor/engine/blob/1f95094ee470408309e98dd56b2251210d6a2a3d/Sources/HTTP/Models/Server/HTTP+Server.swift#L1-L5&gt;)<br></p><p>Some have already created a `Libc` module that effectively does what this<br>proposal suggests, such as [Vapor&#39;s Core Libc](https://github.com/vapor/core/blob/master/Sources/libc/libc.swift &lt;https://github.com/vapor/core/blob/master/Sources/libc/libc.swift&gt;)<br></p><p>    ```<br>    #if os(Linux)<br>      @_exported import Glibc<br>    #else<br>      @_exported import Darwin.C<br>    #endif<br>    ```<br></p><p>Each of these examples has subtly different behaviour; for example,<br>whether or not the os tests only include Linux (and then fail over to<br>Darwin), or whether they contain other Unices such as FreeBSD and Android.<br></p><p>## Proposed solution<br></p><p>The solution is to formalise these patterns in the base Swift library<br>and present a `Libc` module that conditionally imports `Glibc` or `Darwin`<br>based on the correct platform. Additional operating systems can be added<br>and kept up to date with the list of supported operating system conditionals<br>and including a failure message when an unknown operating system is detected.<br></p><p>## Detailed design<br></p><p>This will add a `Libc` module for the standard library that re-exports<br>the correct import depending on the operating system:<br></p><p>    ```<br>    #if os(macOS) || os(iOS) || os(tvOS) || os(watchOS)<br>      @_exported import Darwin<br>    #elseif os(Linux) || os(FreeBSD) || os(Android) || os(PS4)<br>      @_exported import Glibc<br>    #else<br>      fatalError(&quot;Libc not supported on operating system&quot;)<br>    #endif<br>    ```<br></p><p>As new operating systems are added or become supported (such as Windows)<br>the standard imports can be added appropriately to this module.<br></p><p>## Source compatibility<br></p><p>There is no impact to source compatibility, since this proposal is additive.<br>Existing source code will work regardless of if this module is used or not.<br>However it improves source compatibility going forwards, since as new<br>operating systems are added this file will be updated, instead of the change<br>having to be made in multiple open-source projects.<br></p><p>## Effect on ABI stability<br></p><p>There is no impact to ABI compatibility, since this proposal is additive.<br>Existing source code will work regardless of if this module is used or not.<br></p><p>## Effect on API resilience<br></p><p>There is no impact to ABI resilience, since this proposal is additive.<br>Existing source code will work regardless of if this module is used or not.<br></p><p>## Alternatives considered<br></p><p>The first alternative is to do nothing. Existing Swift projects already<br>conditionally import these modules, or import a higher-level module (such<br>as `Foundation`) that performs the conditional import.<br></p><p>The second alternative is to export sub-modules of the modules. Clang<br>permits imports of sub-modules, so it could be possible to import only<br>`Darwin.POSIX` and `GlibC.POSIX`. However, in Swift, importing a sub-module<br>makes the whole module available anyway, so the difference between importing<br>a whole module versus a submodule is irrelevant.<br></p><p>The third alternative is to explore creating standard functions (in Swift)<br>corresponding to POSIX functionality, but where the format of the return<br>results are known. This would require a per-operating system binding to<br>expose operating-system details such as the byte ordering of structures<br>as used in the various `getaddrinfo` calls. These may evolve out of future<br>evolution proposals and this does not conflict with those goals at this<br>stage. There are additional clean-ups that this could address, such as the<br>use of the (thread-local) `errno` which may not be reliably read from within<br>Swift. However, the (swift-evolution thread)[https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20161003/027602.html]<br>calls this &quot;the perfect being the enemy of the good&quot;. Instead of trying to<br>solve all of these problems, they should be handled by subsequent<br>proposals (such as (Johannes&#39; proposal)[https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20161031/028627.html]<br>regarding errno handling sent to swift-evolution previously).<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-server-dev/attachments/20161103/7c04e429/attachment.html&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
