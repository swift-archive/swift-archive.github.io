<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9d5d2fc7ebac788a7eca7acd89a96485?s=50"></div><header><strong>Decimal imported as NSDecimal not NSDecimalNumber in Swift 3 to Objective C</strong> from <string>Chris Anderson</string> &lt;christopher.anderson at gmail.com&gt;<p>November 11, 2016 at 04:00:00pm</p></header><div class="content"><p>I&#39;m having problems with the type conversion between a Swift `Decimal` and<br>an Objective C `NSDecimalNumber`.<br></p><p>If I have the Swift class:<br></p><p>    @objc class Exam: NSObject {<br>        var grade: Decimal = 90.0<br>    }<br></p><p>And try to use that Swift class in Objective C,<br></p><p>    Exam *exam = [[Exam alloc] init];<br>    NSDecimalNumber *result = [[NSDecimalNumber zero]<br>decimalNumberByAdding:grade.value];<br></p><p>I get the error:<br></p><p>Sending &#39;NSDecimal&#39; to parameter of incompatible type &#39;NSDecimalNumber *<br>_Nonnull&#39;<br></p><p>as it seems like `grade` is being treated as an `NSDecimal` not an<br>`NSDecimalNumber`. This seems incorrect as per<br>https://developer.apple.com/reference/foundation/nsdecimalnumber it says<br></p><p>&quot;The Swift overlay to the Foundation framework provides the Decimal<br>structure, which bridges to the NSDecimalNumber class. The Decimal value<br>type offers the same functionality as the NSDecimalNumber reference type,<br>and the two can be used interchangeably in Swift code that interacts with<br>Objective-C APIs. This behavior is similar to how Swift bridges standard<br>string, numeric, and collection types to their corresponding Foundation<br>classes.&quot;<br></p><p>So I&#39;m not sure if 1) I&#39;m doing something wrong. 2) there&#39;s an error in the<br>documentation or 3) this is a Swift bug. Number 1 on that list is<br>definitely the most likely, but I wanted to see what I’m missing here.<br></p><p>I don&#39;t want to explicitly make the values in my Swift class<br>`NSDecimalNumber` because then I cannot do simple arithmetic operations<br>such as `+` without doing the whole ugly `decimalNumberByAdding` dance.<br></p><p>Thanks for the help!<br></p><p>Best,<br>Chris Anderson<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161111/bdfd0cdd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Decimal imported as NSDecimal not NSDecimalNumber in Swift 3 to Objective C</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>November 11, 2016 at 02:00:00pm</p></header><div class="content"><p>Hi Chris,<br></p><p>Can you file a radar or JIRA for us on this? It looks like something should be fixed in the documentation at least, or perhaps in the bridging.<br></p><p>- Tony<br></p><p>&gt; On Nov 11, 2016, at 1:46 PM, Chris Anderson via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;m having problems with the type conversion between a Swift `Decimal` and an Objective C `NSDecimalNumber`.<br>&gt; <br>&gt; If I have the Swift class:<br>&gt; <br>&gt;     @objc class Exam: NSObject {<br>&gt;         var grade: Decimal = 90.0<br>&gt;     }<br>&gt; <br>&gt; And try to use that Swift class in Objective C, <br>&gt; <br>&gt;     Exam *exam = [[Exam alloc] init];<br>&gt;     NSDecimalNumber *result = [[NSDecimalNumber zero] decimalNumberByAdding:grade.value];<br>&gt; <br>&gt; I get the error:<br>&gt; <br>&gt; Sending &#39;NSDecimal&#39; to parameter of incompatible type &#39;NSDecimalNumber * _Nonnull&#39;<br>&gt; <br>&gt; as it seems like `grade` is being treated as an `NSDecimal` not an `NSDecimalNumber`. This seems incorrect as per https://developer.apple.com/reference/foundation/nsdecimalnumber &lt;https://developer.apple.com/reference/foundation/nsdecimalnumber&gt; it says <br>&gt; <br>&gt; &quot;The Swift overlay to the Foundation framework provides the Decimal structure, which bridges to the NSDecimalNumber class. The Decimal value type offers the same functionality as the NSDecimalNumber reference type, and the two can be used interchangeably in Swift code that interacts with Objective-C APIs. This behavior is similar to how Swift bridges standard string, numeric, and collection types to their corresponding Foundation classes.&quot;<br>&gt; <br>&gt; So I&#39;m not sure if 1) I&#39;m doing something wrong. 2) there&#39;s an error in the documentation or 3) this is a Swift bug. Number 1 on that list is definitely the most likely, but I wanted to see what I’m missing here.<br>&gt; <br>&gt; I don&#39;t want to explicitly make the values in my Swift class `NSDecimalNumber` because then I cannot do simple arithmetic operations such as `+` without doing the whole ugly `decimalNumberByAdding` dance.<br>&gt; <br>&gt; Thanks for the help!<br>&gt; <br>&gt; Best,<br>&gt; Chris Anderson<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161111/c2af554d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9d5d2fc7ebac788a7eca7acd89a96485?s=50"></div><header><strong>Decimal imported as NSDecimal not NSDecimalNumber in Swift 3 to Objective C</strong> from <string>Chris Anderson</string> &lt;christopher.anderson at gmail.com&gt;<p>November 11, 2016 at 05:00:00pm</p></header><div class="content"><p>Sure thing. Yeah, ideally the bridging would be fixed, but at the least, correcting the documentation will be a good start. Will file, thanks.<br></p><p>Best,<br>Chris Anderson<br></p><p>&gt; On Nov 11, 2016, at 5:55 PM, Tony Parker &lt;anthony.parker at apple.com&gt; wrote:<br>&gt; <br>&gt; Hi Chris,<br>&gt; <br>&gt; Can you file a radar or JIRA for us on this? It looks like something should be fixed in the documentation at least, or perhaps in the bridging.<br>&gt; <br>&gt; - Tony<br>&gt; <br>&gt;&gt; On Nov 11, 2016, at 1:46 PM, Chris Anderson via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I&#39;m having problems with the type conversion between a Swift `Decimal` and an Objective C `NSDecimalNumber`.<br>&gt;&gt; <br>&gt;&gt; If I have the Swift class:<br>&gt;&gt; <br>&gt;&gt;     @objc class Exam: NSObject {<br>&gt;&gt;         var grade: Decimal = 90.0<br>&gt;&gt;     }<br>&gt;&gt; <br>&gt;&gt; And try to use that Swift class in Objective C, <br>&gt;&gt; <br>&gt;&gt;     Exam *exam = [[Exam alloc] init];<br>&gt;&gt;     NSDecimalNumber *result = [[NSDecimalNumber zero] decimalNumberByAdding:grade.value];<br>&gt;&gt; <br>&gt;&gt; I get the error:<br>&gt;&gt; <br>&gt;&gt; Sending &#39;NSDecimal&#39; to parameter of incompatible type &#39;NSDecimalNumber * _Nonnull&#39;<br>&gt;&gt; <br>&gt;&gt; as it seems like `grade` is being treated as an `NSDecimal` not an `NSDecimalNumber`. This seems incorrect as per https://developer.apple.com/reference/foundation/nsdecimalnumber &lt;https://developer.apple.com/reference/foundation/nsdecimalnumber&gt; it says <br>&gt;&gt; <br>&gt;&gt; &quot;The Swift overlay to the Foundation framework provides the Decimal structure, which bridges to the NSDecimalNumber class. The Decimal value type offers the same functionality as the NSDecimalNumber reference type, and the two can be used interchangeably in Swift code that interacts with Objective-C APIs. This behavior is similar to how Swift bridges standard string, numeric, and collection types to their corresponding Foundation classes.&quot;<br>&gt;&gt; <br>&gt;&gt; So I&#39;m not sure if 1) I&#39;m doing something wrong. 2) there&#39;s an error in the documentation or 3) this is a Swift bug. Number 1 on that list is definitely the most likely, but I wanted to see what I’m missing here.<br>&gt;&gt; <br>&gt;&gt; I don&#39;t want to explicitly make the values in my Swift class `NSDecimalNumber` because then I cannot do simple arithmetic operations such as `+` without doing the whole ugly `decimalNumberByAdding` dance.<br>&gt;&gt; <br>&gt;&gt; Thanks for the help!<br>&gt;&gt; <br>&gt;&gt; Best,<br>&gt;&gt; Chris Anderson<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161111/d429ba48/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e7b8a49b110a1d384ee92092b99bd8b5?s=50"></div><header><strong>Decimal imported as NSDecimal not NSDecimalNumber in Swift 3 to Objective C</strong> from <string>Adam C. Lickel</string> &lt;adam at lickel.com&gt;<p>November 11, 2016 at 02:00:00pm</p></header><div class="content"><p>NSDecimal has toll-free bridging with NSDecimalNumber so you can still do as casting when talking to an Objective-C API.<br></p><p>&gt; On Nov 11, 2016, at 2:56 PM, Chris Anderson via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Sure thing. Yeah, ideally the bridging would be fixed, but at the least, correcting the documentation will be a good start. Will file, thanks.<br>&gt; <br>&gt; Best,<br>&gt; Chris Anderson<br>&gt; <br>&gt;&gt; On Nov 11, 2016, at 5:55 PM, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi Chris,<br>&gt;&gt; <br>&gt;&gt; Can you file a radar or JIRA for us on this? It looks like something should be fixed in the documentation at least, or perhaps in the bridging.<br>&gt;&gt; <br>&gt;&gt; - Tony<br>&gt;&gt; <br>&gt;&gt;&gt; On Nov 11, 2016, at 1:46 PM, Chris Anderson via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m having problems with the type conversion between a Swift `Decimal` and an Objective C `NSDecimalNumber`.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If I have the Swift class:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     @objc class Exam: NSObject {<br>&gt;&gt;&gt;         var grade: Decimal = 90.0<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; And try to use that Swift class in Objective C, <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     Exam *exam = [[Exam alloc] init];<br>&gt;&gt;&gt;     NSDecimalNumber *result = [[NSDecimalNumber zero] decimalNumberByAdding:grade.value];<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I get the error:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sending &#39;NSDecimal&#39; to parameter of incompatible type &#39;NSDecimalNumber * _Nonnull&#39;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; as it seems like `grade` is being treated as an `NSDecimal` not an `NSDecimalNumber`. This seems incorrect as per https://developer.apple.com/reference/foundation/nsdecimalnumber &lt;https://developer.apple.com/reference/foundation/nsdecimalnumber&gt; it says <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &quot;The Swift overlay to the Foundation framework provides the Decimal structure, which bridges to the NSDecimalNumber class. The Decimal value type offers the same functionality as the NSDecimalNumber reference type, and the two can be used interchangeably in Swift code that interacts with Objective-C APIs. This behavior is similar to how Swift bridges standard string, numeric, and collection types to their corresponding Foundation classes.&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; So I&#39;m not sure if 1) I&#39;m doing something wrong. 2) there&#39;s an error in the documentation or 3) this is a Swift bug. Number 1 on that list is definitely the most likely, but I wanted to see what I’m missing here.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t want to explicitly make the values in my Swift class `NSDecimalNumber` because then I cannot do simple arithmetic operations such as `+` without doing the whole ugly `decimalNumberByAdding` dance.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks for the help!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Best,<br>&gt;&gt;&gt; Chris Anderson<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161111/4ebe89dd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>Decimal imported as NSDecimal not NSDecimalNumber in Swift 3 to Objective C</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>November 11, 2016 at 03:00:00pm</p></header><div class="content"><p>NSDecimal is not toll free bridged, but it does have a bridge to NSDecimalNumber.<br></p><p>So take this for example:<br></p><p>@objc class Exam: NSObject {<br>        var grade: Double = 90.0<br>}<br></p><p>It would be reasonable to expect that is exposed in objc as:<br></p><p>@interface Exam : NSObject<br>@property double grade;<br>@end<br></p><p>and not:<br></p><p>@interface Exam : NSObject<br>@property NSNumber *grade;<br>@end<br></p><p>As it stands this is exposing as the structural type since that structural type comes from objective-c. Unlike String or Dictionary that have direct counterparts - NSDecimal and NSDecimalNumber both are sourced from the objective-c headers. That being said an API exposed in objc as returning a NSDecimalNumber should be exposed into swift as returning a Decimal (the struct NSDecimal). So if Exam was implemented in objc as such:<br></p><p>@interface Exam : NSObject<br>@property NSDecimalNumber *grade;<br>@end<br></p><p>that should be imported into swift as:<br></p><p>class Exam : NSObject {<br>	var grade : Decimal<br>}<br></p><p>&gt; On Nov 11, 2016, at 2:58 PM, Adam C. Lickel via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; NSDecimal has toll-free bridging with NSDecimalNumber so you can still do as casting when talking to an Objective-C API.<br>&gt; <br>&gt;&gt; On Nov 11, 2016, at 2:56 PM, Chris Anderson via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Sure thing. Yeah, ideally the bridging would be fixed, but at the least, correcting the documentation will be a good start. Will file, thanks.<br>&gt;&gt; <br>&gt;&gt; Best,<br>&gt;&gt; Chris Anderson<br>&gt;&gt; <br>&gt;&gt;&gt; On Nov 11, 2016, at 5:55 PM, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi Chris,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Can you file a radar or JIRA for us on this? It looks like something should be fixed in the documentation at least, or perhaps in the bridging.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Nov 11, 2016, at 1:46 PM, Chris Anderson via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;m having problems with the type conversion between a Swift `Decimal` and an Objective C `NSDecimalNumber`.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If I have the Swift class:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     @objc class Exam: NSObject {<br>&gt;&gt;&gt;&gt;         var grade: Decimal = 90.0<br>&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; And try to use that Swift class in Objective C, <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     Exam *exam = [[Exam alloc] init];<br>&gt;&gt;&gt;&gt;     NSDecimalNumber *result = [[NSDecimalNumber zero] decimalNumberByAdding:grade.value];<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I get the error:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sending &#39;NSDecimal&#39; to parameter of incompatible type &#39;NSDecimalNumber * _Nonnull&#39;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; as it seems like `grade` is being treated as an `NSDecimal` not an `NSDecimalNumber`. This seems incorrect as per https://developer.apple.com/reference/foundation/nsdecimalnumber &lt;https://developer.apple.com/reference/foundation/nsdecimalnumber&gt; it says <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; &quot;The Swift overlay to the Foundation framework provides the Decimal structure, which bridges to the NSDecimalNumber class. The Decimal value type offers the same functionality as the NSDecimalNumber reference type, and the two can be used interchangeably in Swift code that interacts with Objective-C APIs. This behavior is similar to how Swift bridges standard string, numeric, and collection types to their corresponding Foundation classes.&quot;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; So I&#39;m not sure if 1) I&#39;m doing something wrong. 2) there&#39;s an error in the documentation or 3) this is a Swift bug. Number 1 on that list is definitely the most likely, but I wanted to see what I’m missing here.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I don&#39;t want to explicitly make the values in my Swift class `NSDecimalNumber` because then I cannot do simple arithmetic operations such as `+` without doing the whole ugly `decimalNumberByAdding` dance.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks for the help!<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Best,<br>&gt;&gt;&gt;&gt; Chris Anderson<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161111/4cd362b4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9d5d2fc7ebac788a7eca7acd89a96485?s=50"></div><header><strong>Decimal imported as NSDecimal not NSDecimalNumber in Swift 3 to Objective C</strong> from <string>Chris Anderson</string> &lt;christopher.anderson at gmail.com&gt;<p>November 14, 2016 at 04:00:00pm</p></header><div class="content"><p>Thanks for that follow up, I’m still a little confused at why one direction works and the other does not, but I’m getting there.<br></p><p>I’ve found another issue I’ll bug report, but it’s along the same lines and wanted to run it by this thread. If I have an NSDecimalNumber, in Swift, and perform math on a literal value, (product) the code compiles. If I assign that value to a variable, or use any of the other Decimal/Double types, I cannot compile. I would expect a Double to not work, but I would expect ‘Decimal’ to work, in this case, as I’m not crossing the Objective C border. And, I’m confused how using the literal ‘2.0’ is interpreted as an NSDecimalNumber, and works in the ‘product’ stop, but I would expect the compiler to try and make it into a Double, as it does on the ‘test’ variable. <br></p><p>        let value = NSDecimalNumber(value: 2)<br>        let test = 2.0                                               // double<br>        let product = value.multiplying(by: 2.0)      // compiles<br>        let x = value.multiplying(by: Decimal(2.0)) // does not compile<br>        let y = value.multiplying(by: Double(2.0))   // does not compile<br>        let z = value.multiplying(by: test)                // does not compile<br></p><p>Best,<br>Chris Anderson<br></p><p>&gt; On Nov 11, 2016, at 6:07 PM, Philippe Hausler &lt;phausler at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; NSDecimal is not toll free bridged, but it does have a bridge to NSDecimalNumber.<br>&gt; <br>&gt; So take this for example:<br>&gt; <br>&gt; @objc class Exam: NSObject {<br>&gt;         var grade: Double = 90.0<br>&gt; }<br>&gt; <br>&gt; It would be reasonable to expect that is exposed in objc as:<br>&gt; <br>&gt; @interface Exam : NSObject<br>&gt; @property double grade;<br>&gt; @end<br>&gt; <br>&gt; and not:<br>&gt; <br>&gt; @interface Exam : NSObject<br>&gt; @property NSNumber *grade;<br>&gt; @end<br>&gt; <br>&gt; As it stands this is exposing as the structural type since that structural type comes from objective-c. Unlike String or Dictionary that have direct counterparts - NSDecimal and NSDecimalNumber both are sourced from the objective-c headers. That being said an API exposed in objc as returning a NSDecimalNumber should be exposed into swift as returning a Decimal (the struct NSDecimal). So if Exam was implemented in objc as such:<br>&gt; <br>&gt; @interface Exam : NSObject<br>&gt; @property NSDecimalNumber *grade;<br>&gt; @end<br>&gt; <br>&gt; that should be imported into swift as:<br>&gt; <br>&gt; class Exam : NSObject {<br>&gt; 	var grade : Decimal<br>&gt; }<br>&gt; <br>&gt;&gt; On Nov 11, 2016, at 2:58 PM, Adam C. Lickel via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; NSDecimal has toll-free bridging with NSDecimalNumber so you can still do as casting when talking to an Objective-C API.<br>&gt;&gt; <br>&gt;&gt;&gt; On Nov 11, 2016, at 2:56 PM, Chris Anderson via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sure thing. Yeah, ideally the bridging would be fixed, but at the least, correcting the documentation will be a good start. Will file, thanks.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Best,<br>&gt;&gt;&gt; Chris Anderson<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Nov 11, 2016, at 5:55 PM, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hi Chris,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Can you file a radar or JIRA for us on this? It looks like something should be fixed in the documentation at least, or perhaps in the bridging.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Nov 11, 2016, at 1:46 PM, Chris Anderson via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I&#39;m having problems with the type conversion between a Swift `Decimal` and an Objective C `NSDecimalNumber`.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; If I have the Swift class:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;     @objc class Exam: NSObject {<br>&gt;&gt;&gt;&gt;&gt;         var grade: Decimal = 90.0<br>&gt;&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; And try to use that Swift class in Objective C, <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;     Exam *exam = [[Exam alloc] init];<br>&gt;&gt;&gt;&gt;&gt;     NSDecimalNumber *result = [[NSDecimalNumber zero] decimalNumberByAdding:grade.value];<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I get the error:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Sending &#39;NSDecimal&#39; to parameter of incompatible type &#39;NSDecimalNumber * _Nonnull&#39;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; as it seems like `grade` is being treated as an `NSDecimal` not an `NSDecimalNumber`. This seems incorrect as per https://developer.apple.com/reference/foundation/nsdecimalnumber &lt;https://developer.apple.com/reference/foundation/nsdecimalnumber&gt; it says <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; &quot;The Swift overlay to the Foundation framework provides the Decimal structure, which bridges to the NSDecimalNumber class. The Decimal value type offers the same functionality as the NSDecimalNumber reference type, and the two can be used interchangeably in Swift code that interacts with Objective-C APIs. This behavior is similar to how Swift bridges standard string, numeric, and collection types to their corresponding Foundation classes.&quot;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; So I&#39;m not sure if 1) I&#39;m doing something wrong. 2) there&#39;s an error in the documentation or 3) this is a Swift bug. Number 1 on that list is definitely the most likely, but I wanted to see what I’m missing here.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I don&#39;t want to explicitly make the values in my Swift class `NSDecimalNumber` because then I cannot do simple arithmetic operations such as `+` without doing the whole ugly `decimalNumberByAdding` dance.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Thanks for the help!<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Best,<br>&gt;&gt;&gt;&gt;&gt; Chris Anderson<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161114/f1a6b213/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8149b5bd66abbc94babfda2995153481?s=50"></div><header><strong>Decimal imported as NSDecimal not NSDecimalNumber in Swift 3 to Objective C</strong> from <string>Nevin Brackett-Rozinsky</string> &lt;nevin.brackettrozinsky at gmail.com&gt;<p>November 14, 2016 at 06:00:00pm</p></header><div class="content"><p>Literals in Swift do not inherently have a type (at least conceptually).<br>They are simply literals.<br></p><p>The compiler will interpret them as whatever ExpressibleBy_____Literal type<br>is required to make the expression sensible.<br></p><p>There are default types which literals will become if no type information<br>is available: a string literal becomes String, a floating point literal<br>becomes Double, and so forth. But the literals themselves do not have a<br>type, and will become whatever type makes sense in context.<br></p><p>Nevin<br></p><p><br>On Mon, Nov 14, 2016 at 4:59 PM, Chris Anderson via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Thanks for that follow up, I’m still a little confused at why one<br>&gt; direction works and the other does not, but I’m getting there.<br>&gt;<br>&gt; I’ve found another issue I’ll bug report, but it’s along the same lines<br>&gt; and wanted to run it by this thread. If I have an NSDecimalNumber, in<br>&gt; Swift, and perform math on a literal value, (product) the code compiles. If<br>&gt; I assign that value to a variable, or use any of the other Decimal/Double<br>&gt; types, I cannot compile. I would expect a Double to not work, but I would<br>&gt; expect ‘Decimal’ to work, in this case, as I’m not crossing the Objective C<br>&gt; border. And, I’m confused how using the literal ‘2.0’ is interpreted as an<br>&gt; NSDecimalNumber, and works in the ‘product’ stop, but I would expect the<br>&gt; compiler to try and make it into a Double, as it does on the ‘test’<br>&gt; variable.<br>&gt;<br>&gt;         let value = NSDecimalNumber(value: 2)<br>&gt;         let test = 2.0                                               //<br>&gt; double<br>&gt;         let product = value.multiplying(by: 2.0)      // compiles<br>&gt;         let x = value.multiplying(by: Decimal(2.0)) // does not compile<br>&gt;         let y = value.multiplying(by: Double(2.0))   // does not compile<br>&gt;         let z = value.multiplying(by: test)                // does not<br>&gt; compile<br>&gt;<br>&gt; Best,<br>&gt; Chris Anderson<br>&gt;<br>&gt; On Nov 11, 2016, at 6:07 PM, Philippe Hausler &lt;phausler at apple.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt; NSDecimal is not toll free bridged, but it does have a bridge to<br>&gt; NSDecimalNumber.<br>&gt;<br>&gt; So take this for example:<br>&gt;<br>&gt; @objc class Exam: NSObject {<br>&gt;         var grade: Double = 90.0<br>&gt; }<br>&gt;<br>&gt; It would be reasonable to expect that is exposed in objc as:<br>&gt;<br>&gt; @interface Exam : NSObject<br>&gt; @property double grade;<br>&gt; @end<br>&gt;<br>&gt; and not:<br>&gt;<br>&gt; @interface Exam : NSObject<br>&gt; @property NSNumber *grade;<br>&gt; @end<br>&gt;<br>&gt; As it stands this is exposing as the structural type since that structural<br>&gt; type comes from objective-c. Unlike String or Dictionary that have direct<br>&gt; counterparts - NSDecimal and NSDecimalNumber both are sourced from the<br>&gt; objective-c headers. That being said an API exposed in objc as returning a<br>&gt; NSDecimalNumber should be exposed into swift as returning a Decimal (the<br>&gt; struct NSDecimal). So if Exam was implemented in objc as such:<br>&gt;<br>&gt; @interface Exam : NSObject<br>&gt; @property NSDecimalNumber *grade;<br>&gt; @end<br>&gt;<br>&gt; that should be imported into swift as:<br>&gt;<br>&gt; class Exam : NSObject {<br>&gt; var grade : Decimal<br>&gt; }<br>&gt;<br>&gt; On Nov 11, 2016, at 2:58 PM, Adam C. Lickel via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; NSDecimal has toll-free bridging with NSDecimalNumber so you can still do<br>&gt; as casting when talking to an Objective-C API.<br>&gt;<br>&gt; On Nov 11, 2016, at 2:56 PM, Chris Anderson via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; Sure thing. Yeah, ideally the bridging would be fixed, but at the least,<br>&gt; correcting the documentation will be a good start. Will file, thanks.<br>&gt;<br>&gt; Best,<br>&gt; Chris Anderson<br>&gt;<br>&gt; On Nov 11, 2016, at 5:55 PM, Tony Parker &lt;anthony.parker at apple.com&gt; wrote:<br>&gt;<br>&gt; Hi Chris,<br>&gt;<br>&gt; Can you file a radar or JIRA for us on this? It looks like something<br>&gt; should be fixed in the documentation at least, or perhaps in the bridging.<br>&gt;<br>&gt; - Tony<br>&gt;<br>&gt; On Nov 11, 2016, at 1:46 PM, Chris Anderson via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; I&#39;m having problems with the type conversion between a Swift `Decimal` and<br>&gt; an Objective C `NSDecimalNumber`.<br>&gt;<br>&gt; If I have the Swift class:<br>&gt;<br>&gt;     @objc class Exam: NSObject {<br>&gt;         var grade: Decimal = 90.0<br>&gt;     }<br>&gt;<br>&gt; And try to use that Swift class in Objective C,<br>&gt;<br>&gt;     Exam *exam = [[Exam alloc] init];<br>&gt;     NSDecimalNumber *result = [[NSDecimalNumber zero]<br>&gt; decimalNumberByAdding:grade.value];<br>&gt;<br>&gt; I get the error:<br>&gt;<br>&gt; Sending &#39;NSDecimal&#39; to parameter of incompatible type &#39;NSDecimalNumber *<br>&gt; _Nonnull&#39;<br>&gt;<br>&gt; as it seems like `grade` is being treated as an `NSDecimal` not an<br>&gt; `NSDecimalNumber`. This seems incorrect as per<br>&gt; https://developer.apple.com/reference/foundation/nsdecimalnumber it says<br>&gt;<br>&gt; &quot;The Swift overlay to the Foundation framework provides the Decimal<br>&gt; structure, which bridges to the NSDecimalNumber class. The Decimal value<br>&gt; type offers the same functionality as the NSDecimalNumber reference type,<br>&gt; and the two can be used interchangeably in Swift code that interacts with<br>&gt; Objective-C APIs. This behavior is similar to how Swift bridges standard<br>&gt; string, numeric, and collection types to their corresponding Foundation<br>&gt; classes.&quot;<br>&gt;<br>&gt; So I&#39;m not sure if 1) I&#39;m doing something wrong. 2) there&#39;s an error in<br>&gt; the documentation or 3) this is a Swift bug. Number 1 on that list is<br>&gt; definitely the most likely, but I wanted to see what I’m missing here.<br>&gt;<br>&gt; I don&#39;t want to explicitly make the values in my Swift class<br>&gt; `NSDecimalNumber` because then I cannot do simple arithmetic operations<br>&gt; such as `+` without doing the whole ugly `decimalNumberByAdding` dance.<br>&gt;<br>&gt; Thanks for the help!<br>&gt;<br>&gt; Best,<br>&gt; Chris Anderson<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161114/dbf21d68/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>Decimal imported as NSDecimal not NSDecimalNumber in Swift 3 to Objective C</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>November 14, 2016 at 03:00:00pm</p></header><div class="content"><p>Seems like you are missing some bridges here since NSDecimalNumber’s signature takes an object<br></p><p>let value = NSDecimalNumber(value: 2)<br>let test = 2.0                                               // double<br>let product = value.multiplying(by: 2.0)      // compiles<br>let x = value.multiplying(by: Decimal(2.0) as NSDecimalNumber) // compiles<br>let y = value.multiplying(by: NSDecimalNumber(value: Double(2.0)))   // compiles<br>let z = value.multiplying(by: NSDecimalNumber(value: test))                // compiles<br></p><p>Those methods perhaps should have been imported as their bridged types but again it is an ambiguity since we should really distinguish between NSDecimalNumber and NSDecimal interfaces in objc and so consequently they have to be distinguished in Swift as NSDecimalNumber and Decimal.<br></p><p>&gt; On Nov 14, 2016, at 1:59 PM, Chris Anderson &lt;christopher.anderson at gmail.com&gt; wrote:<br>&gt; <br>&gt; Thanks for that follow up, I’m still a little confused at why one direction works and the other does not, but I’m getting there.<br>&gt; <br>&gt; I’ve found another issue I’ll bug report, but it’s along the same lines and wanted to run it by this thread. If I have an NSDecimalNumber, in Swift, and perform math on a literal value, (product) the code compiles. If I assign that value to a variable, or use any of the other Decimal/Double types, I cannot compile. I would expect a Double to not work, but I would expect ‘Decimal’ to work, in this case, as I’m not crossing the Objective C border. And, I’m confused how using the literal ‘2.0’ is interpreted as an NSDecimalNumber, and works in the ‘product’ stop, but I would expect the compiler to try and make it into a Double, as it does on the ‘test’ variable. <br>&gt; <br>&gt;         let value = NSDecimalNumber(value: 2)<br>&gt;         let test = 2.0                                               // double<br>&gt;         let product = value.multiplying(by: 2.0)      // compiles<br>&gt;         let x = value.multiplying(by: Decimal(2.0)) // does not compile<br>&gt;         let y = value.multiplying(by: Double(2.0))   // does not compile<br>&gt;         let z = value.multiplying(by: test)                // does not compile<br>&gt; <br>&gt; Best,<br>&gt; Chris Anderson<br>&gt; <br>&gt;&gt; On Nov 11, 2016, at 6:07 PM, Philippe Hausler &lt;phausler at apple.com &lt;mailto:phausler at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; NSDecimal is not toll free bridged, but it does have a bridge to NSDecimalNumber.<br>&gt;&gt; <br>&gt;&gt; So take this for example:<br>&gt;&gt; <br>&gt;&gt; @objc class Exam: NSObject {<br>&gt;&gt;         var grade: Double = 90.0<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; It would be reasonable to expect that is exposed in objc as:<br>&gt;&gt; <br>&gt;&gt; @interface Exam : NSObject<br>&gt;&gt; @property double grade;<br>&gt;&gt; @end<br>&gt;&gt; <br>&gt;&gt; and not:<br>&gt;&gt; <br>&gt;&gt; @interface Exam : NSObject<br>&gt;&gt; @property NSNumber *grade;<br>&gt;&gt; @end<br>&gt;&gt; <br>&gt;&gt; As it stands this is exposing as the structural type since that structural type comes from objective-c. Unlike String or Dictionary that have direct counterparts - NSDecimal and NSDecimalNumber both are sourced from the objective-c headers. That being said an API exposed in objc as returning a NSDecimalNumber should be exposed into swift as returning a Decimal (the struct NSDecimal). So if Exam was implemented in objc as such:<br>&gt;&gt; <br>&gt;&gt; @interface Exam : NSObject<br>&gt;&gt; @property NSDecimalNumber *grade;<br>&gt;&gt; @end<br>&gt;&gt; <br>&gt;&gt; that should be imported into swift as:<br>&gt;&gt; <br>&gt;&gt; class Exam : NSObject {<br>&gt;&gt; 	var grade : Decimal<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt;&gt; On Nov 11, 2016, at 2:58 PM, Adam C. Lickel via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; NSDecimal has toll-free bridging with NSDecimalNumber so you can still do as casting when talking to an Objective-C API.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Nov 11, 2016, at 2:56 PM, Chris Anderson via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sure thing. Yeah, ideally the bridging would be fixed, but at the least, correcting the documentation will be a good start. Will file, thanks.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Best,<br>&gt;&gt;&gt;&gt; Chris Anderson<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Nov 11, 2016, at 5:55 PM, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Hi Chris,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Can you file a radar or JIRA for us on this? It looks like something should be fixed in the documentation at least, or perhaps in the bridging.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Nov 11, 2016, at 1:46 PM, Chris Anderson via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I&#39;m having problems with the type conversion between a Swift `Decimal` and an Objective C `NSDecimalNumber`.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; If I have the Swift class:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;     @objc class Exam: NSObject {<br>&gt;&gt;&gt;&gt;&gt;&gt;         var grade: Decimal = 90.0<br>&gt;&gt;&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; And try to use that Swift class in Objective C, <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;     Exam *exam = [[Exam alloc] init];<br>&gt;&gt;&gt;&gt;&gt;&gt;     NSDecimalNumber *result = [[NSDecimalNumber zero] decimalNumberByAdding:grade.value];<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I get the error:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Sending &#39;NSDecimal&#39; to parameter of incompatible type &#39;NSDecimalNumber * _Nonnull&#39;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; as it seems like `grade` is being treated as an `NSDecimal` not an `NSDecimalNumber`. This seems incorrect as per https://developer.apple.com/reference/foundation/nsdecimalnumber &lt;https://developer.apple.com/reference/foundation/nsdecimalnumber&gt; it says <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; &quot;The Swift overlay to the Foundation framework provides the Decimal structure, which bridges to the NSDecimalNumber class. The Decimal value type offers the same functionality as the NSDecimalNumber reference type, and the two can be used interchangeably in Swift code that interacts with Objective-C APIs. This behavior is similar to how Swift bridges standard string, numeric, and collection types to their corresponding Foundation classes.&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; So I&#39;m not sure if 1) I&#39;m doing something wrong. 2) there&#39;s an error in the documentation or 3) this is a Swift bug. Number 1 on that list is definitely the most likely, but I wanted to see what I’m missing here.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t want to explicitly make the values in my Swift class `NSDecimalNumber` because then I cannot do simple arithmetic operations such as `+` without doing the whole ugly `decimalNumberByAdding` dance.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Thanks for the help!<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Best,<br>&gt;&gt;&gt;&gt;&gt;&gt; Chris Anderson<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161114/da1e7f53/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
