<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>zip3, zip4, ...</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>December  6, 2015 at 03:00:00pm</p></header><div class="content"><p>zip2 (aka &quot;zip&quot;) is present in Swift. zip3 is often useful, but not<br>built-in.<br></p><p>It can be achieved by using multiple copies of zip2:<br></p><p>  for (one, (two, three)) in zip(list1, zip(list2, list3)) ...<br></p><p>It seems like either of these could make sense:<br></p><p>- Put some reasonable number of implementations, like zip2...zip10, in the<br>standard library, using gyb.<br></p><p>- Have the compiler generate them on the fly as requested by the user.<br></p><p>Or, some alternate approaches:<br></p><p>- Don&#39;t do this right now, but count it as motivation for a macro system.<br></p><p>- Consider making Swift&#39;s pattern-matching system extensible, which might<br>allow custom array-based patterns, like &quot;for [one, two, three] in<br>zip(list1, list2, list3)&quot;.  (I&#39;ve been thinking of writing a proposal for<br>this anyway.)<br></p><p><br>Does anyone else care about zip3-and-higher? How do these options sound?<br></p><p>Jacob Bandes-Storch<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/3955d001/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>zip3, zip4, ...</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>December  6, 2015 at 04:00:00pm</p></header><div class="content"><p>It&#39;s pretty easy to build your own Zips. Not sure the language really needs this. For example, I recently built a zip that produces (T?, T?) which fills one of the two with nil until both lists are consumed:<br></p><p>func longZip&lt;S0: SequenceType, S1: SequenceType&gt;(seq0: S0, _ seq1: S1) -&gt;<br>    AnyGenerator&lt;(S0.Generator.Element?, S1.Generator.Element?)&gt; {<br>        var generators = (seq0.generate(), seq1.generate())<br>        return anyGenerator {<br>            let items = (generators.0.next(), generators.1.next())<br>            if case (.None, .None) = items {return nil}<br>            return items<br>        }<br>}<br></p><p>I&#39;m rather fond of this variant although I don&#39;t know if it&#39;s generally useful enough to be worth even considering for the language<br></p><p>-- E<br></p><p><br>&gt; On Dec 6, 2015, at 4:01 PM, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; zip2 (aka &quot;zip&quot;) is present in Swift. zip3 is often useful, but not built-in.<br>&gt; <br>&gt; It can be achieved by using multiple copies of zip2:<br>&gt; <br>&gt;   for (one, (two, three)) in zip(list1, zip(list2, list3)) ...<br>&gt; <br>&gt; It seems like either of these could make sense:<br>&gt; <br>&gt; - Put some reasonable number of implementations, like zip2...zip10, in the standard library, using gyb.<br>&gt; <br>&gt; - Have the compiler generate them on the fly as requested by the user.<br>&gt; <br>&gt; Or, some alternate approaches:<br>&gt; <br>&gt; - Don&#39;t do this right now, but count it as motivation for a macro system.<br>&gt; <br>&gt; - Consider making Swift&#39;s pattern-matching system extensible, which might allow custom array-based patterns, like &quot;for [one, two, three] in zip(list1, list2, list3)&quot;.  (I&#39;ve been thinking of writing a proposal for this anyway.)<br>&gt; <br>&gt; <br>&gt; Does anyone else care about zip3-and-higher? How do these options sound?<br>&gt; <br>&gt; Jacob Bandes-Storch<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/a9a9edd4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>zip3, zip4, ...</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December  6, 2015 at 03:00:00pm</p></header><div class="content"><p>On Sun, Dec 6, 2015 at 3:34 PM, Erica Sadun via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; It&#39;s pretty easy to build your own Zips. Not sure the language really<br>&gt; needs this. For example, I recently built a zip that produces (T?, T?)<br>&gt; which fills one of the two with nil until both lists are consumed:<br>&gt;<br>&gt; func longZip&lt;S0: SequenceType, S1: SequenceType&gt;(seq0: S0, _ seq1: S1) -&gt;<br>&gt;     AnyGenerator&lt;(S0.Generator.Element?, S1.Generator.Element?)&gt; {<br>&gt;<br></p><p><br>Just wanted to point out that AnyGenerator has an inherent cost from the<br>type erasure.  The implementation in the standard library uses generics and<br>is fully optimizable.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/ce69d57f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>zip3, zip4, ...</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>December  6, 2015 at 04:00:00pm</p></header><div class="content"><p>Is there an implementation in the stdlib for (T?, T?) like this?<br></p><p>&gt; On Dec 6, 2015, at 4:37 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Sun, Dec 6, 2015 at 3:34 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; It&#39;s pretty easy to build your own Zips. Not sure the language really needs this. For example, I recently built a zip that produces (T?, T?) which fills one of the two with nil until both lists are consumed:<br>&gt; <br>&gt; func longZip&lt;S0: SequenceType, S1: SequenceType&gt;(seq0: S0, _ seq1: S1) -&gt;<br>&gt;     AnyGenerator&lt;(S0.Generator.Element?, S1.Generator.Element?)&gt; {<br>&gt; <br>&gt; <br>&gt; Just wanted to point out that AnyGenerator has an inherent cost from the type erasure.  The implementation in the standard library uses generics and is fully optimizable.<br>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com &lt;mailto:gribozavr at gmail.com&gt;&gt;*/<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/4d7bcfae/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>zip3, zip4, ...</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December  6, 2015 at 03:00:00pm</p></header><div class="content"><p>On Sun, Dec 6, 2015 at 3:44 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; Is there an implementation in the stdlib for (T?, T?) like this?<br></p><p>No.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f5228ad4a1fad94f1a7d3d05b0c0ff6a?s=50"></div><header><strong>zip3, zip4, ...</strong> from <string>Donnacha Oisín Kidney</string> &lt;oisin.kidney at gmail.com&gt;<p>December  6, 2015 at 11:00:00pm</p></header><div class="content"><p>An implementation of this is actually pretty complicated, since you aren’t supposed to call a generator once it’s returned nil.<br></p><p>public struct NilPaddedZipGenerator&lt;G0: GeneratorType, G1: GeneratorType&gt; : GeneratorType {<br>  <br>  private var (g0, g1): (G0?, G1?)<br>  <br>  public mutating func next() -&gt; (G0.Element?, G1.Element?)? {<br>    let (e0,e1) = (g0?.next(),g1?.next())<br>    switch (e0,e1) {<br>    case (nil,nil): return nil<br>    case (  _,nil): g1 = nil<br>    case (nil,  _): g0 = nil<br>    default: break<br>    }<br>    return (e0,e1)<br>  }<br>}<br></p><p>public struct NilPaddedZip&lt;S0: SequenceType, S1: SequenceType&gt; : LazySequenceType {<br>  <br>  private let (s0, s1): (S0, S1)<br>  public func generate() -&gt; NilPaddedZipGenerator&lt;S0.Generator, S1.Generator&gt; {<br>    return NilPaddedZipGenerator(g0: s0.generate(), g1: s1.generate())<br>  }<br>}<br></p><p>@warn_unused_result<br>public func zipWithPadding&lt;S0: SequenceType, S1: SequenceType&gt;(s0: S0, _ s1: S1)<br>  -&gt; NilPaddedZip&lt;S0, S1&gt; {<br>    return NilPaddedZip(s0: s0, s1: s1)<br>}<br></p><p>&gt; On 6 Dec 2015, at 23:44, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Is there an implementation in the stdlib for (T?, T?) like this?<br>&gt; <br>&gt;&gt; On Dec 6, 2015, at 4:37 PM, Dmitri Gribenko &lt;gribozavr at gmail.com &lt;mailto:gribozavr at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Sun, Dec 6, 2015 at 3:34 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; It&#39;s pretty easy to build your own Zips. Not sure the language really needs this. For example, I recently built a zip that produces (T?, T?) which fills one of the two with nil until both lists are consumed:<br>&gt;&gt; <br>&gt;&gt; func longZip&lt;S0: SequenceType, S1: SequenceType&gt;(seq0: S0, _ seq1: S1) -&gt;<br>&gt;&gt;     AnyGenerator&lt;(S0.Generator.Element?, S1.Generator.Element?)&gt; {<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Just wanted to point out that AnyGenerator has an inherent cost from the type erasure.  The implementation in the standard library uses generics and is fully optimizable.<br>&gt;&gt; <br>&gt;&gt; Dmitri<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com &lt;mailto:gribozavr at gmail.com&gt;&gt;*/<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/49d9a866/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/706baf09e574d70814e4af2d54a315e0?s=50"></div><header><strong>zip3, zip4, ...</strong> from <string>Vinicius Vendramini</string> &lt;vinivendra at gmail.com&gt;<p>December  7, 2015 at 08:00:00am</p></header><div class="content"><p>I wouldn&#39;t really know how to do this, but a better approach than implementing zip2 through zip10 might be making it a variadic function, no?<br></p><p>&gt; On Dec 6, 2015, at 6:49 PM, Donnacha Oisín Kidney via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; An implementation of this is actually pretty complicated, since you aren’t supposed to call a generator once it’s returned nil.<br>&gt; <br>&gt; public struct NilPaddedZipGenerator&lt;G0: GeneratorType, G1: GeneratorType&gt; : GeneratorType {<br>&gt;   <br>&gt;   private var (g0, g1): (G0?, G1?)<br>&gt;   <br>&gt;   public mutating func next() -&gt; (G0.Element?, G1.Element?)? {<br>&gt;     let (e0,e1) = (g0?.next(),g1?.next())<br>&gt;     switch (e0,e1) {<br>&gt;     case (nil,nil): return nil<br>&gt;     case (  _,nil): g1 = nil<br>&gt;     case (nil,  _): g0 = nil<br>&gt;     default: break<br>&gt;     }<br>&gt;     return (e0,e1)<br>&gt;   }<br>&gt; }<br>&gt; <br>&gt; public struct NilPaddedZip&lt;S0: SequenceType, S1: SequenceType&gt; : LazySequenceType {<br>&gt;   <br>&gt;   private let (s0, s1): (S0, S1)<br>&gt;   public func generate() -&gt; NilPaddedZipGenerator&lt;S0.Generator, S1.Generator&gt; {<br>&gt;     return NilPaddedZipGenerator(g0: s0.generate(), g1: s1.generate())<br>&gt;   }<br>&gt; }<br>&gt; <br>&gt; @warn_unused_result<br>&gt; public func zipWithPadding&lt;S0: SequenceType, S1: SequenceType&gt;(s0: S0, _ s1: S1)<br>&gt;   -&gt; NilPaddedZip&lt;S0, S1&gt; {<br>&gt;     return NilPaddedZip(s0: s0, s1: s1)<br>&gt; }<br>&gt; <br>&gt;&gt;&gt; On 6 Dec 2015, at 23:44, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is there an implementation in the stdlib for (T?, T?) like this?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Dec 6, 2015, at 4:37 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Sun, Dec 6, 2015 at 3:34 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; It&#39;s pretty easy to build your own Zips. Not sure the language really needs this. For example, I recently built a zip that produces (T?, T?) which fills one of the two with nil until both lists are consumed:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func longZip&lt;S0: SequenceType, S1: SequenceType&gt;(seq0: S0, _ seq1: S1) -&gt;<br>&gt;&gt;&gt;&gt;     AnyGenerator&lt;(S0.Generator.Element?, S1.Generator.Element?)&gt; {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Just wanted to point out that AnyGenerator has an inherent cost from the type erasure.  The implementation in the standard library uses generics and is fully optimizable.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Dmitri<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/e6c0de3a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0f5e460daedc625457bc16580ecdbc04?s=50"></div><header><strong>zip3, zip4, ...</strong> from <string>Davide De Franceschi</string> &lt;defrenz98 at hotmail.com&gt;<p>December  7, 2015 at 01:00:00pm</p></header><div class="content"><p>Yes, it would, but you also need the ZipSequence to be able to support that, which would actually need variadic generics. Which aren&#39;t supported :)<br></p><p>&gt; On 7 Dec 2015, at 13:12, Vinicius Vendramini via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I wouldn&#39;t really know how to do this, but a better approach than implementing zip2 through zip10 might be making it a variadic function, no?<br>&gt; <br>&gt; On Dec 6, 2015, at 6:49 PM, Donnacha Oisín Kidney via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; An implementation of this is actually pretty complicated, since you aren’t supposed to call a generator once it’s returned nil.<br>&gt;&gt; <br>&gt;&gt; public struct NilPaddedZipGenerator&lt;G0: GeneratorType, G1: GeneratorType&gt; : GeneratorType {<br>&gt;&gt;   <br>&gt;&gt;   private var (g0, g1): (G0?, G1?)<br>&gt;&gt;   <br>&gt;&gt;   public mutating func next() -&gt; (G0.Element?, G1.Element?)? {<br>&gt;&gt;     let (e0,e1) = (g0?.next(),g1?.next())<br>&gt;&gt;     switch (e0,e1) {<br>&gt;&gt;     case (nil,nil): return nil<br>&gt;&gt;     case (  _,nil): g1 = nil<br>&gt;&gt;     case (nil,  _): g0 = nil<br>&gt;&gt;     default: break<br>&gt;&gt;     }<br>&gt;&gt;     return (e0,e1)<br>&gt;&gt;   }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; public struct NilPaddedZip&lt;S0: SequenceType, S1: SequenceType&gt; : LazySequenceType {<br>&gt;&gt;   <br>&gt;&gt;   private let (s0, s1): (S0, S1)<br>&gt;&gt;   public func generate() -&gt; NilPaddedZipGenerator&lt;S0.Generator, S1.Generator&gt; {<br>&gt;&gt;     return NilPaddedZipGenerator(g0: s0.generate(), g1: s1.generate())<br>&gt;&gt;   }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; @warn_unused_result<br>&gt;&gt; public func zipWithPadding&lt;S0: SequenceType, S1: SequenceType&gt;(s0: S0, _ s1: S1)<br>&gt;&gt;   -&gt; NilPaddedZip&lt;S0, S1&gt; {<br>&gt;&gt;     return NilPaddedZip(s0: s0, s1: s1)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt;&gt; On 6 Dec 2015, at 23:44, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is there an implementation in the stdlib for (T?, T?) like this?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 6, 2015, at 4:37 PM, Dmitri Gribenko &lt;gribozavr at gmail.com &lt;mailto:gribozavr at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Sun, Dec 6, 2015 at 3:34 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; It&#39;s pretty easy to build your own Zips. Not sure the language really needs this. For example, I recently built a zip that produces (T?, T?) which fills one of the two with nil until both lists are consumed:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func longZip&lt;S0: SequenceType, S1: SequenceType&gt;(seq0: S0, _ seq1: S1) -&gt;<br>&gt;&gt;&gt;&gt;     AnyGenerator&lt;(S0.Generator.Element?, S1.Generator.Element?)&gt; {<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Just wanted to point out that AnyGenerator has an inherent cost from the type erasure.  The implementation in the standard library uses generics and is fully optimizable.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Dmitri<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt;&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com &lt;mailto:gribozavr at gmail.com&gt;&gt;*/<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/128d404d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>zip3, zip4, ...</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>December  7, 2015 at 08:00:00am</p></header><div class="content"><p>&gt; Yes, it would, but you also need the ZipSequence to be able to support that, which would actually need variadic generics. Which aren&#39;t supported :)<br></p><p>Aren&#39;t supported *yet*.  I am hoping somebody writes a proposal to add them.  This isn&#39;t the first use case that has been discussed here in the first few days.  The TupleConvertible proposal would also require them to be implemented in a general fashion.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/da96b66a/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
