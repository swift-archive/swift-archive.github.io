<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>Proposal: Change Obj-C name for nested types to include enclosing types</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>December  9, 2015 at 03:00:00pm</p></header><div class="content"><p>When exposing some type to Obj-C, if the type is nested within another type, the Obj-C name should include the enclosing types.<br></p><p>For example:<br></p><p>class Foo: NSObject {<br>    @objc enum Bar: Int {<br>        case One, Two<br>    }<br>    @objc class Baz: NSObject {}<br>}<br></p><p>is currently exported to Swift as<br></p><p>SWIFT_CLASS(&quot;_TtC7unnamed3Foo&quot;)<br>@interface Foo : NSObject<br>- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;<br>@end<br></p><p>typedef SWIFT_ENUM(NSInteger, Bar) {<br>  BarOne = 0,<br>  BarTwo = 1,<br>};<br></p><p>SWIFT_CLASS(&quot;_TtCC7unnamed3Foo3Baz&quot;)<br>@interface Baz : NSObject<br>- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;<br>@end<br></p><p>I think it should be exported instead as<br></p><p>SWIFT_CLASS(&quot;_TtC7unnamed3Foo&quot;)<br>@interface Foo : NSObject<br>- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;<br>@end<br></p><p>typedef SWIFT_ENUM(NSInteger, FooBar) {<br>  FooBarOne = 0,<br>  FooBarTwo = 1,<br>};<br></p><p>SWIFT_CLASS(&quot;_TtCC7unnamed3Foo3Baz&quot;)<br>@interface FooBaz : NSObject<br>- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;<br>@end<br></p><p>This is because the Obj-C declarations are all at the top level (as Obj-C does not have nested types), so a type that is clearly unambiguous in Swift may become ambiguous in Obj-C. As a trivial example, the following Swift code:<br></p><p>class Foo: NSObject {<br>    @objc enum Bar: Int {<br>        case One, Two<br>    }<br>}<br></p><p>class Baz: NSObject {<br>    @objc enum Bar: Int {<br>        case Apple, Orange<br>    }<br>}<br></p><p>is currently exported to Obj-C as:<br></p><p>SWIFT_CLASS(&quot;_TtC7unnamed3Baz&quot;)<br>@interface Baz : NSObject<br>- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;<br>@end<br></p><p>typedef SWIFT_ENUM(NSInteger, Bar) {<br>  BarApple = 0,<br>  BarOrange = 1,<br>};<br></p><p>SWIFT_CLASS(&quot;_TtC7unnamed3Foo&quot;)<br>@interface Foo : NSObject<br>- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;<br>@end<br></p><p>typedef SWIFT_ENUM(NSInteger, Bar) {<br>  BarOne = 0,<br>  BarTwo = 1,<br>};<br></p><p>This is attempting to redefine the type Bar, which is of course problematic.<br></p><p>-Kevin Ballard<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Proposal: Change Obj-C name for nested types to include enclosing types</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>December  9, 2015 at 06:00:00pm</p></header><div class="content"><p>I would rather just not print nested types in the generated header. We already don&#39;t do so if the enclosing type is not Objective-C-compatible.<br></p><p>Jordan<br></p><p><br>&gt; On Dec 9, 2015, at 15:24, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; When exposing some type to Obj-C, if the type is nested within another type, the Obj-C name should include the enclosing types.<br>&gt; <br>&gt; For example:<br>&gt; <br>&gt; class Foo: NSObject {<br>&gt;    @objc enum Bar: Int {<br>&gt;        case One, Two<br>&gt;    }<br>&gt;    @objc class Baz: NSObject {}<br>&gt; }<br>&gt; <br>&gt; is currently exported to Swift as<br>&gt; <br>&gt; SWIFT_CLASS(&quot;_TtC7unnamed3Foo&quot;)<br>&gt; @interface Foo : NSObject<br>&gt; - (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;<br>&gt; @end<br>&gt; <br>&gt; typedef SWIFT_ENUM(NSInteger, Bar) {<br>&gt;  BarOne = 0,<br>&gt;  BarTwo = 1,<br>&gt; };<br>&gt; <br>&gt; SWIFT_CLASS(&quot;_TtCC7unnamed3Foo3Baz&quot;)<br>&gt; @interface Baz : NSObject<br>&gt; - (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;<br>&gt; @end<br>&gt; <br>&gt; I think it should be exported instead as<br>&gt; <br>&gt; SWIFT_CLASS(&quot;_TtC7unnamed3Foo&quot;)<br>&gt; @interface Foo : NSObject<br>&gt; - (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;<br>&gt; @end<br>&gt; <br>&gt; typedef SWIFT_ENUM(NSInteger, FooBar) {<br>&gt;  FooBarOne = 0,<br>&gt;  FooBarTwo = 1,<br>&gt; };<br>&gt; <br>&gt; SWIFT_CLASS(&quot;_TtCC7unnamed3Foo3Baz&quot;)<br>&gt; @interface FooBaz : NSObject<br>&gt; - (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;<br>&gt; @end<br>&gt; <br>&gt; This is because the Obj-C declarations are all at the top level (as Obj-C does not have nested types), so a type that is clearly unambiguous in Swift may become ambiguous in Obj-C. As a trivial example, the following Swift code:<br>&gt; <br>&gt; class Foo: NSObject {<br>&gt;    @objc enum Bar: Int {<br>&gt;        case One, Two<br>&gt;    }<br>&gt; }<br>&gt; <br>&gt; class Baz: NSObject {<br>&gt;    @objc enum Bar: Int {<br>&gt;        case Apple, Orange<br>&gt;    }<br>&gt; }<br>&gt; <br>&gt; is currently exported to Obj-C as:<br>&gt; <br>&gt; SWIFT_CLASS(&quot;_TtC7unnamed3Baz&quot;)<br>&gt; @interface Baz : NSObject<br>&gt; - (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;<br>&gt; @end<br>&gt; <br>&gt; typedef SWIFT_ENUM(NSInteger, Bar) {<br>&gt;  BarApple = 0,<br>&gt;  BarOrange = 1,<br>&gt; };<br>&gt; <br>&gt; SWIFT_CLASS(&quot;_TtC7unnamed3Foo&quot;)<br>&gt; @interface Foo : NSObject<br>&gt; - (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;<br>&gt; @end<br>&gt; <br>&gt; typedef SWIFT_ENUM(NSInteger, Bar) {<br>&gt;  BarOne = 0,<br>&gt;  BarTwo = 1,<br>&gt; };<br>&gt; <br>&gt; This is attempting to redefine the type Bar, which is of course problematic.<br>&gt; <br>&gt; -Kevin Ballard<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>Proposal: Change Obj-C name for nested types to include enclosing types</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>December  9, 2015 at 09:00:00pm</p></header><div class="content"><p>We already default nested types to @nonobjc (hence the explicit @objc in my sample). I like that Swift supports using @objc on nested types, because that way I can avoid having to uglify my Swift API just for the sake of Obj-C compatibility (I know I can use a typealias inside the outer type to provide a convenient shorthand for the formerly-nested type, but I still consider that ugly).<br></p><p>-Kevin<br></p><p>On Wed, Dec 9, 2015, at 06:03 PM, Jordan Rose wrote:<br>&gt; I would rather just not print nested types in the generated header. We already don&#39;t do so if the enclosing type is not Objective-C-compatible.<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; <br>&gt; &gt; On Dec 9, 2015, at 15:24, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; <br>&gt; &gt; When exposing some type to Obj-C, if the type is nested within another type, the Obj-C name should include the enclosing types.<br>&gt; &gt; <br>&gt; &gt; For example:<br>&gt; &gt; <br>&gt; &gt; class Foo: NSObject {<br>&gt; &gt;    @objc enum Bar: Int {<br>&gt; &gt;        case One, Two<br>&gt; &gt;    }<br>&gt; &gt;    @objc class Baz: NSObject {}<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; is currently exported to Swift as<br>&gt; &gt; <br>&gt; &gt; SWIFT_CLASS(&quot;_TtC7unnamed3Foo&quot;)<br>&gt; &gt; @interface Foo : NSObject<br>&gt; &gt; - (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;<br>&gt; &gt; @end<br>&gt; &gt; <br>&gt; &gt; typedef SWIFT_ENUM(NSInteger, Bar) {<br>&gt; &gt;  BarOne = 0,<br>&gt; &gt;  BarTwo = 1,<br>&gt; &gt; };<br>&gt; &gt; <br>&gt; &gt; SWIFT_CLASS(&quot;_TtCC7unnamed3Foo3Baz&quot;)<br>&gt; &gt; @interface Baz : NSObject<br>&gt; &gt; - (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;<br>&gt; &gt; @end<br>&gt; &gt; <br>&gt; &gt; I think it should be exported instead as<br>&gt; &gt; <br>&gt; &gt; SWIFT_CLASS(&quot;_TtC7unnamed3Foo&quot;)<br>&gt; &gt; @interface Foo : NSObject<br>&gt; &gt; - (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;<br>&gt; &gt; @end<br>&gt; &gt; <br>&gt; &gt; typedef SWIFT_ENUM(NSInteger, FooBar) {<br>&gt; &gt;  FooBarOne = 0,<br>&gt; &gt;  FooBarTwo = 1,<br>&gt; &gt; };<br>&gt; &gt; <br>&gt; &gt; SWIFT_CLASS(&quot;_TtCC7unnamed3Foo3Baz&quot;)<br>&gt; &gt; @interface FooBaz : NSObject<br>&gt; &gt; - (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;<br>&gt; &gt; @end<br>&gt; &gt; <br>&gt; &gt; This is because the Obj-C declarations are all at the top level (as Obj-C does not have nested types), so a type that is clearly unambiguous in Swift may become ambiguous in Obj-C. As a trivial example, the following Swift code:<br>&gt; &gt; <br>&gt; &gt; class Foo: NSObject {<br>&gt; &gt;    @objc enum Bar: Int {<br>&gt; &gt;        case One, Two<br>&gt; &gt;    }<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; class Baz: NSObject {<br>&gt; &gt;    @objc enum Bar: Int {<br>&gt; &gt;        case Apple, Orange<br>&gt; &gt;    }<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; is currently exported to Obj-C as:<br>&gt; &gt; <br>&gt; &gt; SWIFT_CLASS(&quot;_TtC7unnamed3Baz&quot;)<br>&gt; &gt; @interface Baz : NSObject<br>&gt; &gt; - (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;<br>&gt; &gt; @end<br>&gt; &gt; <br>&gt; &gt; typedef SWIFT_ENUM(NSInteger, Bar) {<br>&gt; &gt;  BarApple = 0,<br>&gt; &gt;  BarOrange = 1,<br>&gt; &gt; };<br>&gt; &gt; <br>&gt; &gt; SWIFT_CLASS(&quot;_TtC7unnamed3Foo&quot;)<br>&gt; &gt; @interface Foo : NSObject<br>&gt; &gt; - (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;<br>&gt; &gt; @end<br>&gt; &gt; <br>&gt; &gt; typedef SWIFT_ENUM(NSInteger, Bar) {<br>&gt; &gt;  BarOne = 0,<br>&gt; &gt;  BarTwo = 1,<br>&gt; &gt; };<br>&gt; &gt; <br>&gt; &gt; This is attempting to redefine the type Bar, which is of course problematic.<br>&gt; &gt; <br>&gt; &gt; -Kevin Ballard<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Proposal: Change Obj-C name for nested types to include enclosing types</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>December 10, 2015 at 04:00:00pm</p></header><div class="content"><p>My point is that Swift currently treats @objc on nested types differently based on whether the outer type is @objc—if the outer type is @objc, the inner types end up in the generated header; otherwise they don&#39;t. And what about @objc on local types?<br></p><p>(Right now we have a hole: an API using an @objc type will show up in the generated header, but the type may not, leading to errors in the header. We should resolve that somehow.)<br></p><p>Jordan<br></p><p><br>&gt; On Dec 9, 2015, at 21:36, Kevin Ballard &lt;kevin at sb.org&gt; wrote:<br>&gt; <br>&gt; We already default nested types to @nonobjc (hence the explicit @objc in my sample). I like that Swift supports using @objc on nested types, because that way I can avoid having to uglify my Swift API just for the sake of Obj-C compatibility (I know I can use a typealias inside the outer type to provide a convenient shorthand for the formerly-nested type, but I still consider that ugly).<br>&gt; <br>&gt; -Kevin<br>&gt; <br>&gt; On Wed, Dec 9, 2015, at 06:03 PM, Jordan Rose wrote:<br>&gt;&gt; I would rather just not print nested types in the generated header. We already don&#39;t do so if the enclosing type is not Objective-C-compatible.<br>&gt;&gt; <br>&gt;&gt; Jordan<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 9, 2015, at 15:24, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; When exposing some type to Obj-C, if the type is nested within another type, the Obj-C name should include the enclosing types.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; For example:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; class Foo: NSObject {<br>&gt;&gt;&gt;   @objc enum Bar: Int {<br>&gt;&gt;&gt;       case One, Two<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt;   @objc class Baz: NSObject {}<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; is currently exported to Swift as<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; SWIFT_CLASS(&quot;_TtC7unnamed3Foo&quot;)<br>&gt;&gt;&gt; @interface Foo : NSObject<br>&gt;&gt;&gt; - (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;<br>&gt;&gt;&gt; @end<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; typedef SWIFT_ENUM(NSInteger, Bar) {<br>&gt;&gt;&gt; BarOne = 0,<br>&gt;&gt;&gt; BarTwo = 1,<br>&gt;&gt;&gt; };<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; SWIFT_CLASS(&quot;_TtCC7unnamed3Foo3Baz&quot;)<br>&gt;&gt;&gt; @interface Baz : NSObject<br>&gt;&gt;&gt; - (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;<br>&gt;&gt;&gt; @end<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think it should be exported instead as<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; SWIFT_CLASS(&quot;_TtC7unnamed3Foo&quot;)<br>&gt;&gt;&gt; @interface Foo : NSObject<br>&gt;&gt;&gt; - (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;<br>&gt;&gt;&gt; @end<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; typedef SWIFT_ENUM(NSInteger, FooBar) {<br>&gt;&gt;&gt; FooBarOne = 0,<br>&gt;&gt;&gt; FooBarTwo = 1,<br>&gt;&gt;&gt; };<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; SWIFT_CLASS(&quot;_TtCC7unnamed3Foo3Baz&quot;)<br>&gt;&gt;&gt; @interface FooBaz : NSObject<br>&gt;&gt;&gt; - (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;<br>&gt;&gt;&gt; @end<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is because the Obj-C declarations are all at the top level (as Obj-C does not have nested types), so a type that is clearly unambiguous in Swift may become ambiguous in Obj-C. As a trivial example, the following Swift code:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; class Foo: NSObject {<br>&gt;&gt;&gt;   @objc enum Bar: Int {<br>&gt;&gt;&gt;       case One, Two<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; class Baz: NSObject {<br>&gt;&gt;&gt;   @objc enum Bar: Int {<br>&gt;&gt;&gt;       case Apple, Orange<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; is currently exported to Obj-C as:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; SWIFT_CLASS(&quot;_TtC7unnamed3Baz&quot;)<br>&gt;&gt;&gt; @interface Baz : NSObject<br>&gt;&gt;&gt; - (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;<br>&gt;&gt;&gt; @end<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; typedef SWIFT_ENUM(NSInteger, Bar) {<br>&gt;&gt;&gt; BarApple = 0,<br>&gt;&gt;&gt; BarOrange = 1,<br>&gt;&gt;&gt; };<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; SWIFT_CLASS(&quot;_TtC7unnamed3Foo&quot;)<br>&gt;&gt;&gt; @interface Foo : NSObject<br>&gt;&gt;&gt; - (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;<br>&gt;&gt;&gt; @end<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; typedef SWIFT_ENUM(NSInteger, Bar) {<br>&gt;&gt;&gt; BarOne = 0,<br>&gt;&gt;&gt; BarTwo = 1,<br>&gt;&gt;&gt; };<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is attempting to redefine the type Bar, which is of course problematic.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Kevin Ballard<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/b6c171e5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>Proposal: Change Obj-C name for nested types to include enclosing types</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>December 10, 2015 at 08:00:00pm</p></header><div class="content"><p>Ah, I see what you mean.<br></p><p>My preference would be to print @objc types wherever they are, but<br>include enclosing types in the Obj-C name. This means that<br>something like<br></p><p>class Foo: NSObject {    class Bar: NSObject {} }<br></p><p>would actually generate<br></p><p>@interface Foo : NSObject @end @interface FooBar : NSObject @end<br></p><p>In other words, the Obj-C name would default to the fully-qualified<br>Swift name, with the periods removed (e.g. Foo.Bar -&gt; FooBar).<br></p><p>Furthermore, I think it should do this even if an enclosing type is<br>not @objc.<br></p><p>That said, I also wonder if we should have a way to explicitly hide<br>an @objc type from the generated header. If I&#39;m making something<br>Obj-C-compatible because I need to use the Obj-C runtime, that<br>doesn&#39;t necessarily mean the type is actually appropriate to expose<br>to Obj-C code.<br></p><p>-Kevin Ballard<br></p><p>On Thu, Dec 10, 2015, at 04:48 PM, Jordan Rose wrote:<br>&gt; My point is that Swift currently treats @objc on nested types<br>&gt; differently based on whether the *outer* type is @objc—if the outer<br>&gt; type is @objc, the inner types end up in the generated header;<br>&gt; otherwise they don&#39;t. And what about @objc on local types?<br>&gt;<br>&gt; (Right now we have a hole: an API using an @objc type will show up in<br>&gt; the generated header, but the type may not, leading to errors in the<br>&gt; header. We should resolve that somehow.)<br>&gt;<br>&gt; Jordan<br>&gt;<br>&gt;<br>&gt;&gt; On Dec 9, 2015, at 21:36, Kevin Ballard &lt;kevin at sb.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; We already default nested types to @nonobjc (hence the explicit @objc<br>&gt;&gt; in my sample). I like that Swift supports using @objc on nested<br>&gt;&gt; types, because that way I can avoid having to uglify my Swift API<br>&gt;&gt; just for the sake of Obj-C compatibility (I know I can use a<br>&gt;&gt; typealias inside the outer type to provide a convenient shorthand for<br>&gt;&gt; the formerly-nested type, but I still consider that ugly).<br>&gt;&gt;<br>&gt;&gt; -Kevin<br>&gt;&gt;<br>&gt;&gt; On Wed, Dec 9, 2015, at 06:03 PM, Jordan Rose wrote:<br>&gt;&gt;&gt; I would rather just not print nested types in the generated header.<br>&gt;&gt;&gt; We already don&#39;t do so if the enclosing type is not Objective-C-<br>&gt;&gt;&gt; compatible.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Jordan<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Dec 9, 2015, at 15:24, Kevin Ballard via swift-evolution &lt;swift-<br>&gt;&gt;&gt;&gt; evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; When exposing some type to Obj-C, if the type is nested within<br>&gt;&gt;&gt;&gt; another type, the Obj-C name should include the enclosing types.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; For example:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; class Foo: NSObject {   @objc enum Bar: Int {       case One, Two<br>&gt;&gt;&gt;&gt; }   @objc class Baz: NSObject {} }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; is currently exported to Swift as<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; SWIFT_CLASS(&quot;_TtC7unnamed3Foo&quot;) @interface Foo : NSObject<br>&gt;&gt;&gt;&gt; - (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER; @end<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; typedef SWIFT_ENUM(NSInteger, Bar) { BarOne = 0, BarTwo = 1, };<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; SWIFT_CLASS(&quot;_TtCC7unnamed3Foo3Baz&quot;) @interface Baz : NSObject<br>&gt;&gt;&gt;&gt; - (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER; @end<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I think it should be exported instead as<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; SWIFT_CLASS(&quot;_TtC7unnamed3Foo&quot;) @interface Foo : NSObject<br>&gt;&gt;&gt;&gt; - (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER; @end<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; typedef SWIFT_ENUM(NSInteger, FooBar) { FooBarOne = 0, FooBarTwo =<br>&gt;&gt;&gt;&gt; 1, };<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; SWIFT_CLASS(&quot;_TtCC7unnamed3Foo3Baz&quot;) @interface FooBaz : NSObject<br>&gt;&gt;&gt;&gt; - (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER; @end<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; This is because the Obj-C declarations are all at the top level (as<br>&gt;&gt;&gt;&gt; Obj-C does not have nested types), so a type that is clearly<br>&gt;&gt;&gt;&gt; unambiguous in Swift may become ambiguous in Obj-C. As a trivial<br>&gt;&gt;&gt;&gt; example, the following Swift code:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; class Foo: NSObject {   @objc enum Bar: Int {       case One,<br>&gt;&gt;&gt;&gt; Two   } }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; class Baz: NSObject {   @objc enum Bar: Int {       case Apple,<br>&gt;&gt;&gt;&gt; Orange   } }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; is currently exported to Obj-C as:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; SWIFT_CLASS(&quot;_TtC7unnamed3Baz&quot;) @interface Baz : NSObject<br>&gt;&gt;&gt;&gt; - (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER; @end<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; typedef SWIFT_ENUM(NSInteger, Bar) { BarApple = 0, BarOrange =<br>&gt;&gt;&gt;&gt; 1, };<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; SWIFT_CLASS(&quot;_TtC7unnamed3Foo&quot;) @interface Foo : NSObject<br>&gt;&gt;&gt;&gt; - (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER; @end<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; typedef SWIFT_ENUM(NSInteger, Bar) { BarOne = 0, BarTwo = 1, };<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; This is attempting to redefine the type Bar, which is of course<br>&gt;&gt;&gt;&gt; problematic.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; -Kevin Ballard<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/1c2120a9/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
