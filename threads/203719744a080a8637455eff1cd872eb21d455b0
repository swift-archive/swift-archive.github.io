<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>Checking whether an object is uniquely referenced, using a weak reference to it</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>June 28, 2016 at 02:00:00am</p></header><div class="content"><p>class EmptyClass {}<br></p><p>var strongReference = EmptyClass()<br>weak var weakReference = strongReference<br></p><p>print(isUniquelyReferencedNonObjC(&amp;strongReference)) // true<br>print(isUniquelyReferencedNonObjC(&amp;weakReference))   // false<br></p><p>I expected both print statements to print true.<br></p><p>I realise that this is probably a known limitation of this function. After all, if it worked with weak references too, there’s no point for the parameter to be inout:<br></p><p>func wrappedIsUniquelyReferencedNonObjC&lt;T: AnyObject&gt;(_ object: T) -&gt; Bool {<br>    weak var weakObject = object<br>    return isUniquelyReferencedNonObjC(&amp;weakObject)<br>}<br></p><p>So the fact that this function takes an inout parameter hints at the fact that it doesn’t work with weak references. If my reasoning is correct, it would be nice if the docs stated that it only works with strong references to objects. :)<br></p><p>My question is, is it possible at all to use a weak reference to check whether an object is uniquely referenced or not? Since this approach doesn’t seem to work, I guess it is impossible?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160628/203755b0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Checking whether an object is uniquely referenced, using a weak reference to it</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>June 27, 2016 at 06:00:00pm</p></header><div class="content"><p>Hi, Tim. The purpose of the isUniquelyReferenced checks is to see whether any changes to the properties of the object can be observed from elsewhere in this program. Therefore, I would expect it to return ‘false’ when there are weak (or unowned) references present, i.e. I think the bug is that we don’t consider weak or unowned references to count for this check.<br></p><p>If my understanding of the intended behavior is correct, then it doesn’t make sense to check for a uniquely-referenced object through a weak (or unowned) reference, because if that were the only reference, then the object would have already been deallocated.<br></p><p>The particular technical reason for the check failing is related to the inout, as you say: in order to pass the reference to the function inout, it has to be loaded into a strong reference first. The reason the inout is there at all is because otherwise the check would fail: there would be a reference from outside the function in addition to the one for the argument.<br></p><p>Hope that clears things up, and if you agree with my interpretation about weak and unowned references, please file a bug at bugs.swift.org &lt;http://bugs.swift.org/&gt;!<br>Jordan<br></p><p><br>&gt; On Jun 27, 2016, at 17:14, Tim Vermeulen via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; class EmptyClass {}<br>&gt; <br>&gt; var strongReference = EmptyClass()<br>&gt; weak var weakReference = strongReference<br>&gt; <br>&gt; print(isUniquelyReferencedNonObjC(&amp;strongReference)) // true<br>&gt; print(isUniquelyReferencedNonObjC(&amp;weakReference))   // false<br>&gt; <br>&gt; I expected both print statements to print true.<br>&gt; <br>&gt; I realise that this is probably a known limitation of this function. After all, if it worked with weak references too, there’s no point for the parameter to be inout:<br>&gt; <br>&gt; func wrappedIsUniquelyReferencedNonObjC&lt;T: AnyObject&gt;(_ object: T) -&gt; Bool {<br>&gt;     weak var weakObject = object<br>&gt;     return isUniquelyReferencedNonObjC(&amp;weakObject)<br>&gt; }<br>&gt; <br>&gt; So the fact that this function takes an inout parameter hints at the fact that it doesn’t work with weak references. If my reasoning is correct, it would be nice if the docs stated that it only works with strong references to objects. :)<br>&gt; <br>&gt; My question is, is it possible at all to use a weak reference to check whether an object is uniquely referenced or not? Since this approach doesn’t seem to work, I guess it is impossible?<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160627/2dc93e6f/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
