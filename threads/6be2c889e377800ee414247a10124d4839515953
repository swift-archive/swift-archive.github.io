<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/87ffc00d215b6e1eed1596cdea76ea6c?s=50"></div><header><strong>Proposal: Auto-implemented computed properties</strong> from <string>Nathan Yee</string> &lt;ny.nathan.yee at gmail.com&gt;<p>December 11, 2015 at 11:00:00am</p></header><div class="content"><p>Certain languages allow the programmer to avoid creating backing variables<br>for getters and setters by using this syntax:<br></p><p>class Foo {<br>    init(x: Double) {<br>        self.x = x<br>    }<br>    var x: Double {<br>        get<br>        set<br>    }<br>    // alternatively var x: Double { get; set }<br>}<br></p><p>and generating code equivalent to this:<br></p><p>class Foo {<br>    init(x: Double) {<br>        _x = x<br>    }<br>    var _x: Double<br>    var x: Double {<br>        get {<br>            return _x<br>        }<br>        set {<br>            _x = newValue<br>        }<br>    }<br>}<br></p><p>This notation decreases verbosity and reduces the chance of incorrectly<br>implementing the pattern.<br></p><p>In the following case, the computed property &#39;x&#39; can only be set in the<br>initializer.<br></p><p>class Foo {<br>    init(x: Double) {<br>        self.x = x<br>    }<br>    var x: Double { get }<br>}<br></p><p>Alternatively, the following syntax can be used to avoid using an<br>initializer:<br></p><p>class Foo {<br>    var x: Double { get } = 1.0<br>}<br></p><p>Before looking into the nuances of this syntax (regarding struct/enum<br>properties, access control, attributes, etc.) I would like to ask the<br>community if this feature would be a good fit for Swift.<br></p><p>-- <br>Nathan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151211/6be25953/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/265868676ac8f12472cc3cc0fc59d827?s=50"></div><header><strong>Proposal: Auto-implemented computed properties</strong> from <string>Nicky Gerritsen</string> &lt;nickygerritsen at me.com&gt;<p>December 11, 2015 at 08:00:00pm</p></header><div class="content"><p>I’m wondering what the actual use of this is. Why not just write:<br></p><p>class Foo {<br>	init(x: Double) {<br>		self.x = x<br>	}<br></p><p>	var x: Double<br>}<br></p><p><br>Regards,<br></p><p>Nicky<br></p><p>&gt; On 11 dec. 2015, at 20:20, Nathan Yee via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Certain languages allow the programmer to avoid creating backing variables for getters and setters by using this syntax:<br>&gt; <br>&gt; class Foo {<br>&gt;     init(x: Double) {<br>&gt;         self.x = x<br>&gt;     }<br>&gt;     var x: Double {<br>&gt;         get<br>&gt;         set<br>&gt;     }<br>&gt;     // alternatively var x: Double { get; set }<br>&gt; }<br>&gt; <br>&gt; and generating code equivalent to this:<br>&gt; <br>&gt; class Foo {<br>&gt;     init(x: Double) {<br>&gt;         _x = x<br>&gt;     }<br>&gt;     var _x: Double<br>&gt;     var x: Double {<br>&gt;         get {<br>&gt;             return _x<br>&gt;         }<br>&gt;         set {<br>&gt;             _x = newValue<br>&gt;         }<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; This notation decreases verbosity and reduces the chance of incorrectly implementing the pattern.<br>&gt; <br>&gt; In the following case, the computed property &#39;x&#39; can only be set in the initializer.<br>&gt; <br>&gt; class Foo {<br>&gt;     init(x: Double) {<br>&gt;         self.x = x<br>&gt;     }<br>&gt;     var x: Double { get }<br>&gt; }<br>&gt; <br>&gt; Alternatively, the following syntax can be used to avoid using an initializer:<br>&gt; <br>&gt; class Foo {<br>&gt;     var x: Double { get } = 1.0<br>&gt; }<br>&gt; <br>&gt; Before looking into the nuances of this syntax (regarding struct/enum properties, access control, attributes, etc.) I would like to ask the community if this feature would be a good fit for Swift.<br>&gt; <br>&gt; -- <br>&gt; Nathan<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151211/421b017b/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Proposal: Auto-implemented computed properties</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December 11, 2015 at 11:00:00am</p></header><div class="content"><p>&gt; On Dec 11, 2015, at 11:20 AM, Nathan Yee via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Certain languages allow the programmer to avoid creating backing variables for getters and setters by using this syntax:<br>&gt; <br>&gt; class Foo {<br>&gt;     init(x: Double) {<br>&gt;         self.x = x<br>&gt;     }<br>&gt;     var x: Double {<br>&gt;         get<br>&gt;         set<br>&gt;     }<br>&gt;     // alternatively var x: Double { get; set }<br>&gt; }<br>&gt; <br>&gt; and generating code equivalent to this:<br>&gt; <br>&gt; class Foo {<br>&gt;     init(x: Double) {<br>&gt;         _x = x<br>&gt;     }<br>&gt;     var _x: Double<br>&gt;     var x: Double {<br>&gt;         get {<br>&gt;             return _x<br>&gt;         }<br>&gt;         set {<br>&gt;             _x = newValue<br>&gt;         }<br>&gt;     }<br>&gt; }<br></p><p>Hi Nathan,<br></p><p>How is this different than just declaring “var x : Double”?  It is an important part of swift’s design that stored and computed properties are equivalent to external uses of an API.<br></p><p>-Chris<br></p><p><br>&gt; <br>&gt; This notation decreases verbosity and reduces the chance of incorrectly implementing the pattern.<br>&gt; <br>&gt; In the following case, the computed property &#39;x&#39; can only be set in the initializer.<br>&gt; <br>&gt; class Foo {<br>&gt;     init(x: Double) {<br>&gt;         self.x = x<br>&gt;     }<br>&gt;     var x: Double { get }<br>&gt; }<br>&gt; <br>&gt; Alternatively, the following syntax can be used to avoid using an initializer:<br>&gt; <br>&gt; class Foo {<br>&gt;     var x: Double { get } = 1.0<br>&gt; }<br>&gt; <br>&gt; Before looking into the nuances of this syntax (regarding struct/enum properties, access control, attributes, etc.) I would like to ask the community if this feature would be a good fit for Swift.<br>&gt; <br>&gt; -- <br>&gt; Nathan<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151211/db4d8f28/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d68c97e8e2f1653b54c24493caf236ae?s=50"></div><header><strong>Proposal: Auto-implemented computed properties</strong> from <string>Stephen Celis</string> &lt;stephen.celis at gmail.com&gt;<p>December 11, 2015 at 03:00:00pm</p></header><div class="content"><p>On Fri, Dec 11, 2015 at 2:20 PM, Nathan Yee via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; In the following case, the computed property &#39;x&#39; can only be set in the<br>&gt; initializer.<br>&gt;<br>&gt; class Foo {<br>&gt;     init(x: Double) {<br>&gt;         self.x = x<br>&gt;     }<br>&gt;     var x: Double { get }<br>&gt; }<br>&gt;<br></p><p>Why not just use `let`?<br></p><p>Stephen<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151211/257f3751/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
