<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>ed/ing, InPlace, Set/SetAlgebra naming resolution</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 12, 2016 at 04:00:00pm</p></header><div class="content"><p>on Fri Feb 12 2016, Craig Cruden &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; An algorithm (as far as I know) is not inherently mutable.  <br></p><p>Of course not; anything you can do with mutation, you can also do with<br>recursion and an infinite amount of memory.  But people don&#39;t have an<br>infinite amount of memory so they end up thinking in terms of mutation.<br></p><p>&gt; It is a process of apply a certain process (or a certain function)<br>&gt; over and over again until you have a result.<br></p><p>This quickly maps into replacing the argument values with new ones for<br>each application.<br></p><p>&gt; If you processed it in writing (the common form of computing at the<br>&gt; time) - you would write line after line of the results until you could<br>&gt; break it down no farther (GCD).<br>&gt;<br>&gt; Each step clearly documented, clearly written down (not erasing a value and inserting a new value).  <br>&gt;<br>&gt; Basically you are applying a function on smaller and smaller bits<br>&gt; (recursion) and recursion is not a mutable concept.<br>&gt;<br>&gt; But I think that is more than enough digression :p<br></p><p>Quite.<br></p><p>&gt;<br>&gt;<br>&gt;&gt; On 2016-02-13, at 5:21:46, Dave Abrahams via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Fri Feb 12 2016, Craig Cruden<br>&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Not to mention - mutating (in my limited and aged math knowledge) is<br>&gt;&gt;&gt; NOT mathematical (computer simulations might use math in simulations<br>&gt;&gt;&gt; which simulating something that mutates)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Mathematicians (typically) don’t mutate - they might be mutants….  but<br>&gt;&gt;&gt; they don’t mutate their equations.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; When was the last time you saw a mutating equation?  If equations<br>&gt;&gt;&gt; mutate then it makes it much more difficult to prove correctness.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Probably why even OO programming languages don’t allow you to mutate<br>&gt;&gt;&gt; an Integer or Decimal ….. bad things can happen.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Union and intersection have more in common with operations like + and<br>&gt;&gt;&gt; - which also do not mutate the values.<br>&gt;&gt; <br>&gt;&gt; Let&#39;s not go too far with this.  Euclid invented the GCD algorithm,<br>&gt;&gt; which was originally expressed iteratively and therefore can be seen to<br>&gt;&gt; be mutating variables.  The whole concept of “algorithm” was named after<br>&gt;&gt; an arabic mathematician.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; :p<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Reasoning:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; * I think the -ing endings sound unnatural, stilted, and unmathematical. They make me wince.<br>&gt;&gt;&gt;&gt;&gt; * I think you have the nature of the words mis-assigned. In my<br>&gt;&gt;&gt;&gt;&gt; opinion in this rare case, union, intersection, and exclusiveOr act<br>&gt;&gt;&gt;&gt;&gt; as verbs as they are mathematical set operations. For example,<br>&gt;&gt;&gt;&gt;&gt; &quot;what is the result of A union B?&quot; is a reasonable thing to say to<br>&gt;&gt;&gt;&gt;&gt; a math person or put on an exam question, etc.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 2016-02-12, at 22:20:01, Thorsten Seitz via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I beg to disagree with your reasoning.<br>&gt;&gt;&gt;&gt; I think &quot;union&quot; is more commonly used as a noun and &quot;intersection&quot;<br>&gt;&gt;&gt;&gt; certainly is not a verb. Your example sounded weird for me (but<br>&gt;&gt;&gt;&gt; maybe that&#39;s because I&#39;m not a native speaker) and I would rather<br>&gt;&gt;&gt;&gt; expect the question to be &quot;What is the union of A and B?&quot;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Thorsten <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Am 11.02.2016 um 20:09 schrieb Erica Sadun via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; My expectations is that the standard operators act upon a set, changing the set. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; set1.union(with: set2) tells set1 to perform the union. <br>&gt;&gt;&gt;&gt;&gt; set1.unioned(with: set2) creates a new instance where set1 has been unioned with set 2.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Naming: intersected, unioned, and exclusiveOred over intersecting,<br>&gt;&gt;&gt;&gt;&gt; unioning, exclusiveOring.<br>&gt;&gt;&gt;&gt;&gt; Mutating: union, intersection, exclusiveOr. <br>&gt;&gt;&gt;&gt;&gt; Non-Mutating, returning new value: unioned(with), intersected(with), exclusiveOred(with)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Reasoning:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; * I think the -ing endings sound unnatural, stilted, and unmathematical. They make me wince.<br>&gt;&gt;&gt;&gt;&gt; * I think you have the nature of the words mis-assigned. In my<br>&gt;&gt;&gt;&gt;&gt; opinion in this rare case, union, intersection, and exclusiveOr act<br>&gt;&gt;&gt;&gt;&gt; as verbs as they are mathematical set operations. For example,<br>&gt;&gt;&gt;&gt;&gt; &quot;what is the result of A union B?&quot; is a reasonable thing to say to<br>&gt;&gt;&gt;&gt;&gt; a math person or put on an exam question, etc.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Importantly, they produce significant side effects, and should be<br>&gt;&gt;&gt;&gt;&gt; treated as verbs that operate upon the receiver, updating the<br>&gt;&gt;&gt;&gt;&gt; receiver, establishing their use for mutating ops.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Dave wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; - use nouns for methods with no side effects (or only incidental ones,  like logging)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; - use verbs for methods with significant side-effects<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -- E<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Feb 11, 2016, at 9:52 AM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Hi All,<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The API guidelines working group took up the issue of the InPlace suffix<br>&gt;&gt;&gt;&gt;&gt;&gt; yesterday, and decided that it was not to be used anywhere in the<br>&gt;&gt;&gt;&gt;&gt;&gt; standard library.  We are planning to apply the changes shown here<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://gist.github.com/dabrahams/d872556291a3cb797bd5<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://gist.github.com/dabrahams/d872556291a3cb797bd5&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://gist.github.com/dabrahams/d872556291a3cb797bd5<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://gist.github.com/dabrahams/d872556291a3cb797bd5&gt;&gt;&gt; to<br>&gt;&gt;&gt;&gt;&gt;&gt; the<br>&gt;&gt;&gt;&gt;&gt;&gt; API of<br>&gt;&gt;&gt;&gt;&gt;&gt; SetAlgebra (and consequently Set) to make it conform to the guidelines<br>&gt;&gt;&gt;&gt;&gt;&gt; under development.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Comments welcome as usual,<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; -Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
