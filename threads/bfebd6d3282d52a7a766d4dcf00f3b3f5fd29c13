<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>[Late Pitch] Deprecations, Moves, and Renames</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>August 10, 2016 at 09:00:00pm</p></header><div class="content"><p>Some protocols of SE-0104 seem to be part of the latest Swift 3 snapshots (Arithmetic, FixedWidthInteger, etc) - was this a mistake then, if they wonâ€™t be in Swift 3.0?<br></p><p>&gt; on Wed Aug 10 2016, Ben Rimmington&lt;me-AT-benrimmington.com&gt;wrote:<br>&gt; <br>&gt; &gt; &gt; On 10 Aug 2016, at 00:36, Dave Abrahams wrote:<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; on Tue Aug 09 2016, Ben Rimmington wrote:<br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; &gt; On 9 Aug 2016, at 20:09, Dave Abrahams wrote:<br>&gt; &gt; <br>&gt; &gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; &gt; Hi Everybody,<br>&gt; &gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; &gt; With another round of apologies for taking late action, we propose to<br>&gt; &gt; &gt; &gt; &gt; make some deprecations, moves, and renames. The background for these<br>&gt; &gt; &gt; &gt; &gt; moves is as follows:<br>&gt; &gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; &gt; We&#39;ve always known that when Swift reached ABI stability (now slated for<br>&gt; &gt; &gt; &gt; &gt; Swift 4), we would be committed to supporting many of the standard<br>&gt; &gt; &gt; &gt; &gt; library&#39;s design decisions for years to come. What we only realized<br>&gt; &gt; &gt; &gt; &gt; very recently is that, although Swift 3.0 is *not* shipping with a<br>&gt; &gt; &gt; &gt; &gt; stable ABI, the promise that Swift 3.0 code will work with Swift 4.0<br>&gt; &gt; &gt; &gt; &gt; code creates similar implications when it comes to certain protocols,<br>&gt; &gt; &gt; &gt; &gt; today. Especially where these protocols show up in refinement<br>&gt; &gt; &gt; &gt; &gt; hierarchies, we can&#39;t keep Swift 3 code working in the future without<br>&gt; &gt; &gt; &gt; &gt; carrying them forward into future libraries.<br>&gt; &gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; &gt; The proposed changes are as follows:<br>&gt; &gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; &gt; * Move `CustomPlaygroundQuickLookable` to the PlaygroundSupport module.<br>&gt; &gt; &gt; &gt; &gt; This component is really only useful for playgrounds, and doesn&#39;t<br>&gt; &gt; &gt; &gt; &gt; belong in the standard library.<br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; I didn&#39;t think it was possible to `import PlaygroundSupport` unless the<br>&gt; &gt; &gt; &gt; current file is within a playground. If so, how can corelibs-foundation<br>&gt; &gt; &gt; &gt; or third-party modules add `CustomPlaygroundQuickLookable`<br>&gt; &gt; &gt; &gt; conformance?<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; Ahhh... yeah, I didn&#39;t realize that, and we don&#39;t have time to change<br>&gt; &gt; &gt; that restriction for Swift 3. It&#39;s not a problem for<br>&gt; &gt; &gt; corelibs-foundation but it would be for 3rd-party libraries.<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; OK, Dmitri and I just figured out how we can change the home of these<br>&gt; &gt; &gt; types for Swift 4 without breaking Swift 3 code (mirrors to the rescue!)<br>&gt; &gt; &gt; So I&#39;m going to withdraw this part of the proposal.<br>&gt; &gt; <br>&gt; &gt; Will the following need to be reverted?<br>&gt; &gt; <br>&gt; &gt; &lt;https://github.com/apple/swift/pull/4089&gt;<br>&gt; &gt; <br>&gt; &gt; &lt;https://github.com/apple/swift-xcode-playground-support/commit/aab7af4&gt;<br>&gt; &gt; &lt;https://github.com/apple/swift-xcode-playground-support/commit/865fd0c&gt;<br>&gt; &gt; &lt;https://github.com/apple/swift-xcode-playground-support/commit/ab605ef&gt;<br>&gt; &gt; &lt;https://github.com/apple/swift-xcode-playground-support/commit/4bd6575&gt;<br>&gt; &gt; &lt;https://github.com/apple/swift-xcode-playground-support/commit/acee2e1&gt;<br>&gt; Technically, no, because typealiases make it unnecessary, but yes, we<br>&gt; plan to do that.<br>&gt; <br>&gt; &gt; &gt; &gt; &gt; * Deprecate the Indexable protocols with a message indicating that they<br>&gt; &gt; &gt; &gt; &gt; will be gone in Swift 4. These protocols are implementation details<br>&gt; &gt; &gt; &gt; &gt; of the standard library designed to work around language limitations<br>&gt; &gt; &gt; &gt; &gt; that we expect to be gone in Swift 4. There&#39;s no reason for anyone to<br>&gt; &gt; &gt; &gt; &gt; ever touch these; users should always use a corresponding Collection<br>&gt; &gt; &gt; &gt; &gt; protocol (e.g. instead of MutableIndexable, use MutableCollection).<br>&gt; &gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; &gt; * Deprecate the ExpressibleByStringInterpolation protocol with a<br>&gt; &gt; &gt; &gt; &gt; message indicating that its design is expected to change. We know<br>&gt; &gt; &gt; &gt; &gt; this protocol to be mis-designed<br>&gt; &gt; &gt; &gt; &gt; (https://bugs.swift.org/browse/SR-1260) and limited<br>&gt; &gt; &gt; &gt; &gt; (https://bugs.swift.org/browse/SR-2303), but there&#39;s no time to fix it<br>&gt; &gt; &gt; &gt; &gt; for Swift 3. If we knew what the new design should look like, we<br>&gt; &gt; &gt; &gt; &gt; might be able to calculate that the current API is supportable in a<br>&gt; &gt; &gt; &gt; &gt; forward-compatible way (as we do for Comparable). Unfortunately, we<br>&gt; &gt; &gt; &gt; &gt; do not.<br>&gt; &gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; &gt; * Rename Streamable to TextOutputStreamable and add a deprecated<br>&gt; &gt; &gt; &gt; &gt; Streamable typealias for it. Now that OutputStream been renamed to<br>&gt; &gt; &gt; &gt; &gt; TextOutputStream, we should also move Streamable out of the way.<br>&gt; &gt; <br>&gt; &gt; In apple/swift#4131, these lines have overrun the 80 column limit:<br>&gt; &gt; <br>&gt; &gt; &lt;https://github.com/apple/swift/blob/f2443f4/stdlib/public/core/Mirror.swift#L843&gt;<br>&gt; &gt; &lt;https://github.com/apple/swift/blob/f2443f4/stdlib/public/core/Mirror.swift#L893&gt;<br>&gt; &gt; <br>&gt; &gt; &lt;https://github.com/apple/swift/blob/f2443f4/stdlib/public/core/Print.swift#L177&gt;<br>&gt; &gt; &lt;https://github.com/apple/swift/blob/f2443f4/stdlib/public/core/Print.swift#L228&gt;<br>&gt; &gt; <br>&gt; &gt; TextFormatting.rst also needs `Streamable` =&gt;`TextOutputStreamable`:<br>&gt; &gt; <br>&gt; &gt; &lt;https://github.com/apple/swift/blob/master/docs/TextFormatting.rst&gt;<br>&gt; Pull requests gratefully accepted for all of these corrections<br>&gt; <br>&gt; &gt; &gt; &gt; &gt; Deprecation is being proposed instead of underscoring or renaming<br>&gt; &gt; &gt; &gt; &gt; because it allows existing code to keep working (with warnings). At<br>&gt; &gt; &gt; &gt; &gt; this late stage, it would be bad to actually break anything.<br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; If the SE-0104 (protocol-oriented integers) proposal has been deferred,<br>&gt; &gt; &gt; &gt; should any protocols (e.g. SignedNumber) be deprecated?<br>&gt; &gt; <br>&gt; &gt; Will the SE-0104 proposal be accepted for Swift 4.0?<br>&gt; It is expected to be. We may even be able to get it into a Swift 3<br>&gt; point-release (e.g. 3.1)<br>&gt; <br>&gt; --<br>&gt; Dave<br>&gt; <br>&gt; <br>&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
