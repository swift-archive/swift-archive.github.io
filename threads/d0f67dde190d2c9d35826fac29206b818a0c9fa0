<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/79cd2bdc2074f4e69eac60743fe785fc?s=50"></div><header><strong>error: value of type &#39;Self.SubSequence&#39; has no member &#39;Distance&#39;</strong> from <string>Daniel Eggert</string> &lt;danieleggert at me.com&gt;<p>December 24, 2015 at 12:00:00am</p></header><div class="content"><p>I have an array of String and need to call withCString on each one and then pass the resulting array of UnsafePointer&lt;Int8&gt; to a C api. The unsafe pointer is only valid within the scope of withCString.<br></p><p>So I built the following, but the compiler doesn’t like it:<br></p><p>% swift scopedReduceAndApply.swift <br>scopedReduceAndApply.swift:18:16: error: value of type &#39;Self.SubSequence&#39; has no member &#39;Distance&#39;<br>        return tail.scopedReduceAndApply(f, g: g, list: ll)<br>               ^~~~ ~~~~~~~~~~~~~~~~~~~~<br></p><p>What is ‘Distance’ and why doesn’t SubSequence of CollectionType have it?<br></p><p>/Daniel<br></p><p><br></p><p><br>extension CollectionType where SubSequence : CollectionType {<br>  /// Calls `f` for each Element to (scoped) generate a value of type `A`<br>  /// and pass it to the given function (3rd argument to `f`).<br>  /// The array of all generated `A` values will then be passed to the function<br>  /// `g`. Its return value will be returned by `scopedReduce`.<br>  ///<br>  /// This is similar to `reduce` but the function `g` is called while all calls<br>  /// to `f` are on the stack, i.e. are in scope. This allows `f` to call a<br>  /// function such as `String.withCString` and ensure that we&#39;re in its scope.<br>  private func scopedApply&lt;A,B&gt;(f: (Generator.Element, (A) -&gt; B) -&gt; B, g: [A] -&gt; B) -&gt; B {<br>    return scopedReduceAndApply(f, g: g, list: [])<br>  }<br>  private func scopedReduceAndApply&lt;A,B&gt;(f: (Generator.Element, (A) -&gt; B) -&gt; B, g: [A] -&gt; B, list: [A]) -&gt; B {<br>    if let (head, tail) = decompose {<br>      return f(head) { (a: A) -&gt; B in<br>        var ll = list<br>        ll.append(a)<br>        return tail.scopedReduceAndApply(f, g: g, list: ll)<br>      }<br>    } else {<br>      return g(list)<br>    }<br>  }<br>}<br></p><p><br>extension CollectionType {<br>  var decompose: (head: Generator.Element, tail: SubSequence)? {<br>    if self.isEmpty {<br>      return nil<br>    } else {<br>      return (self[startIndex], self[startIndex.successor()..&lt;endIndex])<br>    }<br>  }<br>}<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>error: value of type &#39;Self.SubSequence&#39; has no member &#39;Distance&#39;</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December 23, 2015 at 06:00:00pm</p></header><div class="content"><p>On Wed, Dec 23, 2015 at 3:24 PM, Daniel Eggert via swift-users<br>&lt;swift-users at swift.org&gt; wrote:<br>&gt; I have an array of String and need to call withCString on each one and then pass the resulting array of UnsafePointer&lt;Int8&gt; to a C api. The unsafe pointer is only valid within the scope of withCString.<br>&gt;<br>&gt; So I built the following, but the compiler doesn’t like it:<br>&gt;<br>&gt; % swift scopedReduceAndApply.swift<br>&gt; scopedReduceAndApply.swift:18:16: error: value of type &#39;Self.SubSequence&#39; has no member &#39;Distance&#39;<br>&gt;         return tail.scopedReduceAndApply(f, g: g, list: ll)<br>&gt;                ^~~~ ~~~~~~~~~~~~~~~~~~~~<br>&gt;<br>&gt; What is ‘Distance’ and why doesn’t SubSequence of CollectionType have it?<br></p><p>That&#39;s just a bad error message.<br></p><p>&gt; extension CollectionType where SubSequence : CollectionType {<br></p><p>I think you need this constraint to be propagated all the way down,<br>for recursive calls, so you need:<br></p><p>extension CollectionType where SubSequence == Self<br></p><p>Or, if you want to allow the toplevel type to differ:<br></p><p>extension CollectionType<br>  where<br>  SubSequence : CollectionType,<br>  SubSequence.SubSequence == SubSequence<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/79cd2bdc2074f4e69eac60743fe785fc?s=50"></div><header><strong>error: value of type &#39;Self.SubSequence&#39; has no member &#39;Distance&#39;</strong> from <string>Daniel Eggert</string> &lt;danieleggert at me.com&gt;<p>December 26, 2015 at 07:00:00pm</p></header><div class="content"><p>&gt; On 24 Dec 2015, at 03:11, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Wed, Dec 23, 2015 at 3:24 PM, Daniel Eggert via swift-users<br>&gt; &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; I have an array of String and need to call withCString on each one and then pass the resulting array of UnsafePointer&lt;Int8&gt; to a C api. The unsafe pointer is only valid within the scope of withCString.<br>&gt;&gt; <br>&gt;&gt; So I built the following, but the compiler doesn’t like it:<br>&gt;&gt; <br>&gt;&gt; % swift scopedReduceAndApply.swift<br>&gt;&gt; scopedReduceAndApply.swift:18:16: error: value of type &#39;Self.SubSequence&#39; has no member &#39;Distance&#39;<br>&gt;&gt;        return tail.scopedReduceAndApply(f, g: g, list: ll)<br>&gt;&gt;               ^~~~ ~~~~~~~~~~~~~~~~~~~~<br>&gt;&gt; <br>&gt;&gt; What is ‘Distance’ and why doesn’t SubSequence of CollectionType have it?<br>&gt; <br>&gt; That&#39;s just a bad error message.<br>&gt; <br>&gt;&gt; extension CollectionType where SubSequence : CollectionType {<br>&gt; <br>&gt; I think you need this constraint to be propagated all the way down,<br>&gt; for recursive calls, so you need:<br>&gt; <br>&gt; extension CollectionType where SubSequence == Self<br>&gt; <br>&gt; Or, if you want to allow the toplevel type to differ:<br>&gt; <br>&gt; extension CollectionType<br>&gt;  where<br>&gt;  SubSequence : CollectionType,<br>&gt;  SubSequence.SubSequence == SubSequence<br></p><p>Thanks. That did the trick.<br></p><p>/Daniel<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
