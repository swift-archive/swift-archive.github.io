<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b19d1257fae05de4b13bc88b478b95ff?s=50"></div><header><strong>Isolated and failable green threads?</strong> from <string>Niklas Saers</string> &lt;niklas at saers.com&gt;<p>January 28, 2016 at 09:00:00am</p></header><div class="content"><p>Hi all,<br>thank you all soo much for taking the time to make Swift such a great language, so that I get to use it smiling for all my work.<br></p><p>There are two concepts from Erlang that I really like:<br>- threads are very light-weight ([green threads][0]), and memory cannot be accessed accross threads (isolated threads)<br>- when a thread dies, the entire app doesn&#39;t crash, but the nearest [supervisor][1] cleans up and can re-launch a new thread<br></p><p>Applying this to apps written in Swift, I would expect would lead to<br>- fewer app crashes<br>- developers become more likely to architecture their app by using the [actor model][2]<br></p><p>I am sure these ideas are not new here, but I couldn&#39;t find a discussion on it by searching the archive. What are your thoughts on bringing isolated green threads that are allowed to crash to Swift?<br></p><p>Cheers<br></p><p>    Nik<br></p><p><br>[0]: https://en.wikipedia.org/wiki/Green_threads<br>[1]: http://erlang.org/doc/design_principles/sup_princ.html<br>[2]: https://en.wikipedia.org/wiki/Actor_model<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Isolated and failable green threads?</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>January 28, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; There are two concepts from Erlang that I really like:<br>&gt; - threads are very light-weight ([green threads][0]), and memory cannot be accessed accross threads (isolated threads)<br>&gt; - when a thread dies, the entire app doesn&#39;t crash, but the nearest [supervisor][1] cleans up and can re-launch a new thread<br>&gt; <br>&gt; Applying this to apps written in Swift, I would expect would lead to<br>&gt; - fewer app crashes<br>&gt; - developers become more likely to architecture their app by using the [actor model][2]<br>&gt; <br>&gt; I am sure these ideas are not new here, but I couldn&#39;t find a discussion on it by searching the archive. What are your thoughts on bringing isolated green threads that are allowed to crash to Swift?<br></p><p>Mainly, that concurrency is out of scope for Swift 3 (https://github.com/apple/swift-evolution/blob/master/README.md#out-of-scope). Hang in there, though. :^)<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>Isolated and failable green threads?</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>January 28, 2016 at 12:00:00am</p></header><div class="content"><p>No idea what validity this has now, if any, but there&#39;s an elegant model described in this document: https://github.com/apple/swift/blob/master/docs/proposals/Concurrency.rst &lt;https://github.com/apple/swift/blob/master/docs/proposals/Concurrency.rst&gt;.<br></p><p>Austin<br></p><p>&gt; On Jan 28, 2016, at 12:31 AM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; There are two concepts from Erlang that I really like:<br>&gt;&gt; - threads are very light-weight ([green threads][0]), and memory cannot be accessed accross threads (isolated threads)<br>&gt;&gt; - when a thread dies, the entire app doesn&#39;t crash, but the nearest [supervisor][1] cleans up and can re-launch a new thread<br>&gt;&gt; <br>&gt;&gt; Applying this to apps written in Swift, I would expect would lead to<br>&gt;&gt; - fewer app crashes<br>&gt;&gt; - developers become more likely to architecture their app by using the [actor model][2]<br>&gt;&gt; <br>&gt;&gt; I am sure these ideas are not new here, but I couldn&#39;t find a discussion on it by searching the archive. What are your thoughts on bringing isolated green threads that are allowed to crash to Swift?<br>&gt; <br>&gt; Mainly, that concurrency is out of scope for Swift 3 (https://github.com/apple/swift-evolution/blob/master/README.md#out-of-scope). Hang in there, though. :^)<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160128/13bfc963/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Isolated and failable green threads?</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>January 28, 2016 at 10:00:00am</p></header><div class="content"><p>On Jan 28, 2016, at 12:36 AM, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; No idea what validity this has now, if any, but there&#39;s an elegant model described in this document: https://github.com/apple/swift/blob/master/docs/proposals/Concurrency.rst &lt;https://github.com/apple/swift/blob/master/docs/proposals/Concurrency.rst&gt;.<br></p><p>Yep: it is a well thought out approach, but it is also certainly not plan of record - it is just an idea - just like the other stuff in docs/proposals.<br></p><p>I expect concurrency to be a major focus for Swift 4, but we need to get Swift 3 done first. :-)<br></p><p>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160128/24d130e9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/59a815479a1db44b6520d86839cfa4a1?s=50"></div><header><strong>Isolated and failable green threads?</strong> from <string>Fabian Balslev Saers</string> &lt;fabian at saers.com&gt;<p>January 29, 2016 at 08:00:00am</p></header><div class="content"><p>Hi Brent, Austin and Chris, thank you very much for your quick response,<br></p><p>&gt; On 28 Jan 2016, at 09:31, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; Mainly, that concurrency is out of scope for Swift 3 (https://github.com/apple/swift-evolution/blob/master/README.md#out-of-scope). Hang in there, though. :^)<br></p><p><br>Thanks for clarifying, Brent.<br></p><p>&gt; On 28 Jan 2016, at 09:36, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt; No idea what validity this has now, if any, but there&#39;s an elegant model described in this document: https://github.com/apple/swift/blob/master/docs/proposals/Concurrency.rst &lt;https://github.com/apple/swift/blob/master/docs/proposals/Concurrency.rst&gt;.<br></p><p>Thank you soo much for the link, I had not seen this. I really like what I’m reading here. :-)<br></p><p>&gt; On 28 Jan 2016, at 19:04, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; Yep: it is a well thought out approach, but it is also certainly not plan of record - it is just an idea - just like the other stuff in docs/proposals.<br>&gt; I expect concurrency to be a major focus for Swift 4, but we need to get Swift 3 done first. :-)<br></p><p>Absolutely<br></p><p>One part I didn’t understand from the proposal was this:<br>“Notice that due to rdar://17144340 we still can&#39;t mark Arrays and Optionals as copyable”<br>Could someone explain that to me (I don’t think I have access to that radar)<br></p><p>This document deals with how to make the threads isolated, which I think lays the groundwork for making threads able to be cleaned up if they crash, without taking the system with it. But I didn’t see a proposal of how to deal with this situation. Is there a similar document you could refer me to that deals with this?<br></p><p>Cheers<br></p><p>	Nik<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/59ac2ed2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Isolated and failable green threads?</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>January 29, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jan 28, 2016, at 11:51 PM, Fabian Balslev Saers via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Brent, Austin and Chris, thank you very much for your quick response,<br>&gt; <br>&gt;&gt; On 28 Jan 2016, at 09:31, Brent Royal-Gordon &lt;brent at architechies.com &lt;mailto:brent at architechies.com&gt;&gt; wrote:<br>&gt;&gt; Mainly, that concurrency is out of scope for Swift 3 (https://github.com/apple/swift-evolution/blob/master/README.md#out-of-scope &lt;https://github.com/apple/swift-evolution/blob/master/README.md#out-of-scope&gt;). Hang in there, though. :^)<br>&gt; <br>&gt; <br>&gt; Thanks for clarifying, Brent.<br>&gt; <br>&gt;&gt; On 28 Jan 2016, at 09:36, Austin Zheng &lt;austinzheng at gmail.com &lt;mailto:austinzheng at gmail.com&gt;&gt; wrote:<br>&gt;&gt; No idea what validity this has now, if any, but there&#39;s an elegant model described in this document: https://github.com/apple/swift/blob/master/docs/proposals/Concurrency.rst &lt;https://github.com/apple/swift/blob/master/docs/proposals/Concurrency.rst&gt;.<br>&gt; <br>&gt; Thank you soo much for the link, I had not seen this. I really like what I’m reading here. :-)<br>&gt; <br>&gt;&gt; On 28 Jan 2016, at 19:04, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; Yep: it is a well thought out approach, but it is also certainly not plan of record - it is just an idea - just like the other stuff in docs/proposals.<br>&gt;&gt; I expect concurrency to be a major focus for Swift 4, but we need to get Swift 3 done first. :-)<br>&gt; <br>&gt; Absolutely<br>&gt; <br>&gt; One part I didn’t understand from the proposal was this:<br>&gt; “Notice that due to rdar://17144340 &lt;rdar://17144340&gt; we still can&#39;t mark Arrays and Optionals as copyable”<br>&gt; Could someone explain that to me (I don’t think I have access to that radar)<br></p><p>This is a limitation in the generics system &quot;Conditional conformances via constrained extensions”.  The goal is to get this implemented in Swift 3.<br></p><p>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/5ac4eab0/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
