<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a7309b94c3f2e629f39de3b2fe2a070b?s=50"></div><header><strong>Proposal: typealias support protocol constraint</strong> from <string>QQ Mail</string> &lt;286224043 at qq.com&gt;<p>December  6, 2015 at 04:00:00pm</p></header><div class="content"><p>If typealias support protocol constraint, I think we can reuse a lot of code, also more readable<br></p><p>For Example: <br></p><p>typealias PointCollection = protocol&lt;T:CollectionType where T.Generator.Element == CGPoint&gt;<br></p><p>public extension PointCollection {<br>    <br>    <br>    <br>}<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/bb03e781/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d30e546d655d1c7ece0464791a9a90d5?s=50"></div><header><strong>Proposal: typealias support protocol constraint</strong> from <string>Adrian Kashivskyy</string> &lt;adrian.kashivskyy at me.com&gt;<p>December  6, 2015 at 11:00:00am</p></header><div class="content"><p>I believe this could be achieved using generic typealiases, proposed here: https://lists.swift.org/pipermail/swift-evolution/2015-December/000132.html<br></p><p>Pozdrawiam – Regards,<br>Adrian Kashivskyy<br></p><p>&gt; Wiadomość napisana przez QQ Mail via swift-evolution &lt;swift-evolution at swift.org&gt; w dniu 06.12.2015, o godz. 08:17:<br>&gt; <br>&gt; If typealias support protocol constraint, I think we can reuse a lot of code, also more readable<br>&gt; <br>&gt; For Example: <br>&gt; <br>&gt; typealias PointCollection = protocol&lt;T:CollectionType where T.Generator.Element == CGPoint&gt;<br>&gt; <br>&gt; public extension PointCollection {<br>&gt;     <br>&gt;     <br>&gt;     <br>&gt; }<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/15b6664b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Proposal: typealias support protocol constraint</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>December  6, 2015 at 09:00:00am</p></header><div class="content"><p>This request isn’t really about typealias at all.  It has two elements.<br></p><p>First, it’s about the ability to bind Self and / or associated types in a protocol and use the result as a type.  This is highly desirable and is similar to features in the ML module system.<br></p><p>First is the ability to use a protocol with self or associated types as a type, not just a generic constraint:<br></p><p>protocol&lt;CollectionType where CollectionType.Generator.Element == CGPoint&gt;<br></p><p>I don’t think the `T:` label is necessary here as the protocol name serves as a good identifier in this context.  Although the protocol name could probably be omitted when there is only one protocol here as it is implicit:<br></p><p>protocol&lt;CollectionType where Generator.Element == CGPoint&gt;<br></p><p>The general form of this would look like:<br></p><p>protocol&lt;P1, P2, P3 where *list of constraints*&gt;<br></p><p>In this case the protocol name would be required, at least when more than one protocol in the list have an associated type with the same name (and possibly in all cases).  The list of constraints could identify associated types, bind them to concrete types, constrain Self to a specific superclass, etc.  The Self constraint might look like this:<br></p><p>protocol&lt;P1, P2, P3 where Self: UIViewController&gt;<br></p><p>Ideally we would not need to bind all associated types in the protocol in order to use it at a type, but would only be allowed to use members that do not mention the unbound associated type in their signature.<br></p><p>Once we have the ability to bind associated types and use the result as a type, the typealias use falls out automatically.<br></p><p>Second, it’s about the ability to extend a typealias where some generic constraints are specified in the typealias.  This would allow us to re-use the binding of generic constraints, but could be confusing if the extension is far removed in source from the typealias.  I’m not sure how I feel about this part of the proposal.<br></p><p>Matthew<br></p><p>&gt; On Dec 6, 2015, at 4:28 AM, Adrian Kashivskyy via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I believe this could be achieved using generic typealiases, proposed here: https://lists.swift.org/pipermail/swift-evolution/2015-December/000132.html &lt;https://lists.swift.org/pipermail/swift-evolution/2015-December/000132.html&gt;<br>&gt; <br>&gt; Pozdrawiam – Regards,<br>&gt; Adrian Kashivskyy<br>&gt; <br>&gt;&gt; Wiadomość napisana przez QQ Mail via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; w dniu 06.12.2015, o godz. 08:17:<br>&gt;&gt; <br>&gt;&gt; If typealias support protocol constraint, I think we can reuse a lot of code, also more readable<br>&gt;&gt; <br>&gt;&gt; For Example: <br>&gt;&gt; <br>&gt;&gt; typealias PointCollection = protocol&lt;T:CollectionType where T.Generator.Element == CGPoint&gt;<br>&gt;&gt; <br>&gt;&gt; public extension PointCollection {<br>&gt;&gt;     <br>&gt;&gt;     <br>&gt;&gt;     <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/09c0f92a/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
