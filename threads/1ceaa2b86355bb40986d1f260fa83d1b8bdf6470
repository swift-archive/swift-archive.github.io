<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>[Swift 3?] Add ContiguousArray -&gt; Array non-copying initialiser</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>July 28, 2016 at 08:00:00am</p></header><div class="content"><p>https://github.com/apple/swift/pull/3819 &lt;https://github.com/apple/swift/pull/3819&gt;<br></p><p>&gt; As I understand it, Array may be backed by contiguous storage (if native) or it may be backed by some exotic NSArray subclass. We provide a related type with stronger backing guarantees: ContiguousArray (and indeed, in my algorithmic code, I can see a total execution time halve by switching from one to the other -- which may be a bug, but in any case there are differences which is why we have the type in the first place).<br>&gt; <br>&gt; Unfortunately, there is no way to vend a ContiguousArray as a regular Array. If you wish to make use of the stronger guarantees of ContiguousArray in your algorithm, everybody who uses those results must also use ContiguousArray or else you will have to copy the data.<br>&gt; <br>&gt; I know it&#39;s late for Swift 3. I literally only noticed this today, otherwise I would have mentioned it earlier.<br>&gt; <br>&gt; It seems like a reasonably large hole with a simple fix. Going from ContiguousArray to Array is a kind-of upcasting conversion and should be allowed -- it seems like that&#39;s almost the whole point of the type.<br>&gt; <br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160728/1cea6470/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>[Swift 3?] Add ContiguousArray -&gt; Array non-copying initialiser</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>July 28, 2016 at 01:00:00am</p></header><div class="content"><p>On Wed, Jul 27, 2016 at 11:08 PM, Karl via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt; It seems like a reasonably large hole with a simple fix. Going from<br>&gt; ContiguousArray to Array is a kind-of upcasting conversion and should be<br>&gt; allowed -- it seems like that&#39;s almost the whole point of the type.<br></p><p>Hi Karl,<br></p><p>Converting a ContiguousArray to Array using Array&#39;s initializer is<br>O(1).  Are you seeing something different?<br></p><p>Array.init:<br></p><p>https://github.com/apple/swift/blob/f8f6d61d195185f54aeba425dd0db8be4c5d163f/stdlib/public/core/Arrays.swift.gyb#L1037<br></p><p>ContiguousArray._copyToContiguousArray():<br></p><p>https://github.com/apple/swift/blob/f8f6d61d195185f54aeba425dd0db8be4c5d163f/stdlib/public/core/Arrays.swift.gyb#L1430<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>[Swift 3?] Add ContiguousArray -&gt; Array non-copying initialiser</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>July 28, 2016 at 08:00:00pm</p></header><div class="content"><p>I didn&#39;t know that normally-copying initialiser was non-copying for ContiguousArray. That&#39;s the kind of thing we should really document somewhere (or it should be it&#39;s own function because it guarantees non-copying behaviour).<br> <br></p><p> <br>If you&#39;re using CA explicitly, it&#39;s because you want those subtle performance guarantees.<br> <br></p><p> <br>Karl<br> <br> <br> Sent from my new   Email (https://itunes.apple.com/app/apple-store/id922793622?pt=814382&amp;mt=8&amp;ct=my_new_email)<br> <br> <br> <br> <br></p><p> <br> <br>&gt;  <br>&gt; On Jul 28, 2016 at 10:32 AM,  &lt;Dmitri Gribenko (mailto:gribozavr at gmail.com)&gt;  wrote:<br>&gt;  <br>&gt;  <br>&gt;  <br>&gt;  On Wed, Jul 27, 2016 at 11:08 PM, Karl via swift-evolution <br>&gt; &lt;swift-evolution at swift.org (mailto:swift-evolution at swift.org)&gt;  wrote: <br>&gt; &gt;  It seems like a reasonably large hole with a simple fix. Going from <br>&gt; &gt;  ContiguousArray to Array is a kind-of upcasting conversion and should be <br>&gt; &gt;  allowed -- it seems like that&#39;s almost the whole point of the type. <br>&gt;<br>&gt; Hi Karl, <br>&gt;<br>&gt; Converting a ContiguousArray to Array using Array&#39;s initializer is <br>&gt; O(1). Are you seeing something different? <br>&gt;<br>&gt; Array.init: <br>&gt;<br>&gt; https://github.com/apple/swift/blob/f8f6d61d195185f54aeba425dd0db8be4c5d163f/stdlib/public/core/Arrays.swift.gyb#L1037  <br>&gt;<br>&gt; ContiguousArray._copyToContiguousArray(): <br>&gt;<br>&gt; https://github.com/apple/swift/blob/f8f6d61d195185f54aeba425dd0db8be4c5d163f/stdlib/public/core/Arrays.swift.gyb#L1430  <br>&gt;<br>&gt; Dmitri <br>&gt;<br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if <br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko  &lt;gribozavr at gmail.com (mailto:gribozavr at gmail.com)&gt;*/ <br>&gt;          <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160728/cfdbd8b8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>[Swift 3?] Add ContiguousArray -&gt; Array non-copying initialiser</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>July 28, 2016 at 11:00:00am</p></header><div class="content"><p>On Thu, Jul 28, 2016 at 11:01 AM, Karl Wagner &lt;razielim at gmail.com&gt; wrote:<br>&gt; I didn&#39;t know that normally-copying initialiser was non-copying for<br>&gt; ContiguousArray. That&#39;s the kind of thing we should really document<br>&gt; somewhere<br></p><p>We would welcome a patch for the docs!<br></p><p>&gt; (or it should be it&#39;s own function because it guarantees<br>&gt; non-copying behaviour).<br></p><p>It should be the same function, so that you get this optimization even<br>when working from generic code, when the type of the initializer&#39;s<br>argument is erased to Sequence.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
