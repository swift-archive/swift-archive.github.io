<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0023 API Design Guidelines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 23, 2016 at 01:00:00pm</p></header><div class="content"><p>on Sat Jan 23 2016, Thorsten Seitz &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I never liked the convention of distinguishing between interfaces and<br>&gt; classes by prepending an „I“ for interfaces in other languages and I’m<br>&gt; not overly fond fond of the suffix „Type“ currently used in Swift<br>&gt; protocols.<br>&gt; This is the same as prefixing (or suffixing) variable names with<br>&gt; something to express their type, e.g. `String sName` or `int iLength`.<br>&gt; That’s what we have type information for. <br>&gt;<br>&gt; And because of the substitution principle it should make no difference<br>&gt; whether I have a protocol or a struct or class. What is a<br>&gt; `CollectionType` vs. a `Collection`? Is it the type of a `Collection`,<br>&gt; i.e. a meta type? <br></p><p>Yes, that was the original rationale, FWIW.<br></p><p>&gt; Why not simply `Collection` if it describes what a collection is?  I<br>&gt; guess its often more the problem of finding a suitable different name<br>&gt; for the implementation <br></p><p>Yeah, often we&#39;d have a collision with an associated type.<br></p><p>&gt; and that’s why I sometimes wonder whether it<br>&gt; might make sense to give protocols their own namespace…<br></p><p>Can&#39;t do that as long as we have protocols that can function as concrete<br>types (existentials).<br></p><p>&gt; In short, I am not fond of the suffix „Type“ (but I would dislike the<br>&gt; suffix „Protocol“ or prefixes like „I“ or „P“ even more).<br>&gt;<br>&gt; I’m open to debate, though :-)<br>&gt;<br>&gt; -Thorsten<br>&gt;<br>&gt;&gt; Am 23.01.2016 um 06:25 schrieb Kevin Lundberg via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt; <br>&gt;&gt; &gt; Protocols that describe what something is should read as nouns<br>&gt;&gt; &gt; (e.g. Collection). Protocols that describe a capability should be<br>&gt;&gt; &gt; named using the suffixes able, ible, or ing (e.g. Equatable,<br>&gt;&gt; &gt; ProgressReporting).<br>&gt;&gt; <br>&gt;&gt; I personally like the idea behind the current convention for<br>&gt;&gt; protocols that describe a thing (IntegerType, CollectionType, etc)<br>&gt;&gt; where there is a suffix of Type appended to the end, so I give this<br>&gt;&gt; specific part of the proposal a -1. The specific wording of the<br>&gt;&gt; protocol&#39;s name is not so important as the recognition at a glance<br>&gt;&gt; that this is a protocol vs a concrete type. I like being able to<br>&gt;&gt; infer at a glance how I&#39;m expected to use a specific type reference<br>&gt;&gt; based on its name alone; otherwise I may have to refer back to the<br>&gt;&gt; type definition to refresh my memory of whether or not it is in fact<br>&gt;&gt; a protocol or is something else.<br>&gt;&gt; <br>&gt;&gt; This change could also lead to confusion among some developers. For<br>&gt;&gt; someone who is new to Swift, would they know they should use Bool<br>&gt;&gt; over Boolean if they&#39;ve seen both types before? Both names look<br>&gt;&gt; reasonable to store a boolean value, but the semantics of each type<br>&gt;&gt; differ significantly. Someone may try to have a type conform to Bool<br>&gt;&gt; instead of Boolean, which would obviously not work, but could cause<br>&gt;&gt; some consternation for developers who don&#39;t know the difference by<br>&gt;&gt; heart. Naming the protocol BooleanType at least calls out that this<br>&gt;&gt; may not be conceptually the same as a plain boolean value, which<br>&gt;&gt; could make a developer think twice before trying to use that over<br>&gt;&gt; Bool.<br>&gt;&gt; <br>&gt;&gt; Removing some common prefix from these kinds of protocols could also<br>&gt;&gt; run the risk of unintentionally shadowing type names, if someone<br>&gt;&gt; wanted to write their own Collection or Error struct or class for<br>&gt;&gt; instance, or if a pre-existing concrete type in their code turned<br>&gt;&gt; out to unexpectedly shadow a protocol in a new dependency that they<br>&gt;&gt; want to add. These situations would not cause any technical hiccups<br>&gt;&gt; due to module namespacing, but it could lead to confusion when a<br>&gt;&gt; developer forgets to qualify the name and tries to use one type<br>&gt;&gt; where the other is expected.<br>&gt;&gt; <br>&gt;&gt; In short, appending Type (or something like it) i think is a<br>&gt;&gt; reasonable convention to keep around for non-behavioral protocols.<br>&gt;&gt; <br>&gt;&gt; As far as alternatives to &#39;Type&#39;, I personally don&#39;t like the suffix<br>&gt;&gt; &#39;Protocol&#39; as much (which is suggested as a disambiguation option in<br>&gt;&gt; the related standard library review), since &#39;Type&#39; is shorter, feels<br>&gt;&gt; nicer to read, and describes the purpose of the protocol well to<br>&gt;&gt; me. C#&#39;s approach of prefixing all interfaces with a capital I would<br>&gt;&gt; be even more succinct, but I personally don&#39;t think that approach<br>&gt;&gt; would look nice to read either. (PCollection, PBoolean? Ick.)<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Review] SE-0023 API Design Guidelines</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>January 23, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Jan 23, 2016, at 1:23 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Sat Jan 23 2016, Thorsten Seitz &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; I never liked the convention of distinguishing between interfaces and<br>&gt;&gt; classes by prepending an „I“ for interfaces in other languages and I’m<br>&gt;&gt; not overly fond fond of the suffix „Type“ currently used in Swift<br>&gt;&gt; protocols.<br>&gt;&gt; This is the same as prefixing (or suffixing) variable names with<br>&gt;&gt; something to express their type, e.g. `String sName` or `int iLength`.<br>&gt;&gt; That’s what we have type information for. <br>&gt;&gt; <br>&gt;&gt; And because of the substitution principle it should make no difference<br>&gt;&gt; whether I have a protocol or a struct or class. What is a<br>&gt;&gt; `CollectionType` vs. a `Collection`? Is it the type of a `Collection`,<br>&gt;&gt; i.e. a meta type? <br>&gt; <br>&gt; Yes, that was the original rationale, FWIW.<br>&gt; <br>&gt;&gt; Why not simply `Collection` if it describes what a collection is?  I<br>&gt;&gt; guess its often more the problem of finding a suitable different name<br>&gt;&gt; for the implementation <br>&gt; <br>&gt; Yeah, often we&#39;d have a collision with an associated type.<br>&gt; <br>&gt;&gt; and that’s why I sometimes wonder whether it<br>&gt;&gt; might make sense to give protocols their own namespace…<br>&gt; <br>&gt; Can&#39;t do that as long as we have protocols that can function as concrete<br>&gt; types (existentials).<br></p><p>You&#39;ve noted before that this is a recipe for confusion, especially if/when we ever extend existentials to cover protocols with Self and/or associated type constraints. It&#39;s probably a better long-term direction for the protocol type to be something you ask for (as &quot;any&lt;Protocol&gt;&quot;, maybe), and for protocols to live in a separate namespace.<br></p><p>-Joe<br></p><p>&gt; <br>&gt;&gt; In short, I am not fond of the suffix „Type“ (but I would dislike the<br>&gt;&gt; suffix „Protocol“ or prefixes like „I“ or „P“ even more).<br>&gt;&gt; <br>&gt;&gt; I’m open to debate, though :-)<br>&gt;&gt; <br>&gt;&gt; -Thorsten<br>&gt;&gt; <br>&gt;&gt;&gt; Am 23.01.2016 um 06:25 schrieb Kevin Lundberg via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Protocols that describe what something is should read as nouns<br>&gt;&gt;&gt;&gt; (e.g. Collection). Protocols that describe a capability should be<br>&gt;&gt;&gt;&gt; named using the suffixes able, ible, or ing (e.g. Equatable,<br>&gt;&gt;&gt;&gt; ProgressReporting).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I personally like the idea behind the current convention for<br>&gt;&gt;&gt; protocols that describe a thing (IntegerType, CollectionType, etc)<br>&gt;&gt;&gt; where there is a suffix of Type appended to the end, so I give this<br>&gt;&gt;&gt; specific part of the proposal a -1. The specific wording of the<br>&gt;&gt;&gt; protocol&#39;s name is not so important as the recognition at a glance<br>&gt;&gt;&gt; that this is a protocol vs a concrete type. I like being able to<br>&gt;&gt;&gt; infer at a glance how I&#39;m expected to use a specific type reference<br>&gt;&gt;&gt; based on its name alone; otherwise I may have to refer back to the<br>&gt;&gt;&gt; type definition to refresh my memory of whether or not it is in fact<br>&gt;&gt;&gt; a protocol or is something else.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This change could also lead to confusion among some developers. For<br>&gt;&gt;&gt; someone who is new to Swift, would they know they should use Bool<br>&gt;&gt;&gt; over Boolean if they&#39;ve seen both types before? Both names look<br>&gt;&gt;&gt; reasonable to store a boolean value, but the semantics of each type<br>&gt;&gt;&gt; differ significantly. Someone may try to have a type conform to Bool<br>&gt;&gt;&gt; instead of Boolean, which would obviously not work, but could cause<br>&gt;&gt;&gt; some consternation for developers who don&#39;t know the difference by<br>&gt;&gt;&gt; heart. Naming the protocol BooleanType at least calls out that this<br>&gt;&gt;&gt; may not be conceptually the same as a plain boolean value, which<br>&gt;&gt;&gt; could make a developer think twice before trying to use that over<br>&gt;&gt;&gt; Bool.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Removing some common prefix from these kinds of protocols could also<br>&gt;&gt;&gt; run the risk of unintentionally shadowing type names, if someone<br>&gt;&gt;&gt; wanted to write their own Collection or Error struct or class for<br>&gt;&gt;&gt; instance, or if a pre-existing concrete type in their code turned<br>&gt;&gt;&gt; out to unexpectedly shadow a protocol in a new dependency that they<br>&gt;&gt;&gt; want to add. These situations would not cause any technical hiccups<br>&gt;&gt;&gt; due to module namespacing, but it could lead to confusion when a<br>&gt;&gt;&gt; developer forgets to qualify the name and tries to use one type<br>&gt;&gt;&gt; where the other is expected.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In short, appending Type (or something like it) i think is a<br>&gt;&gt;&gt; reasonable convention to keep around for non-behavioral protocols.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As far as alternatives to &#39;Type&#39;, I personally don&#39;t like the suffix<br>&gt;&gt;&gt; &#39;Protocol&#39; as much (which is suggested as a disambiguation option in<br>&gt;&gt;&gt; the related standard library review), since &#39;Type&#39; is shorter, feels<br>&gt;&gt;&gt; nicer to read, and describes the purpose of the protocol well to<br>&gt;&gt;&gt; me. C#&#39;s approach of prefixing all interfaces with a capital I would<br>&gt;&gt;&gt; be even more succinct, but I personally don&#39;t think that approach<br>&gt;&gt;&gt; would look nice to read either. (PCollection, PBoolean? Ick.)<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160123/8ce5bb38/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Review] SE-0023 API Design Guidelines</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>January 25, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On 24 Jan 2016, at 00:49, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; It&#39;s probably a better long-term direction for the protocol type to be something you ask for (as &quot;any&lt;Protocol&gt;&quot;, maybe), and for protocols to live in a separate namespace.<br></p><p>Ils vote for that! The alternative is to distinguish them with naming conventions like in C# where they are all prefixed with I. But I prefer any&lt;&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2b19ddab2d7de4523412c875c258e278?s=50"></div><header><strong>[Review] SE-0023 API Design Guidelines</strong> from <string>Matt Whiteside</string> &lt;mwhiteside.dev at gmail.com&gt;<p>February  2, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; On Jan 23, 2016, at 13:23, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Sat Jan 23 2016, Thorsten Seitz &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; I never liked the convention of distinguishing between interfaces and<br>&gt;&gt; classes by prepending an „I“ for interfaces in other languages and I’m<br>&gt;&gt; not overly fond fond of the suffix „Type“ currently used in Swift<br>&gt;&gt; protocols.<br>&gt;&gt; This is the same as prefixing (or suffixing) variable names with<br>&gt;&gt; something to express their type, e.g. `String sName` or `int iLength`.<br>&gt;&gt; That’s what we have type information for.<br></p><p>I agree.  I think these things should be handled by the tools/IDE, not by naming conventions.<br></p><p>Matt<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160202/0f8e3297/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
