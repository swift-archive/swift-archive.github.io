<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Accepted] SE-0067: Enhanced Floating Point Protocols</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May  2, 2016 at 08:00:00pm</p></header><div class="content"><p>Proposal link: https://github.com/apple/swift-evolution/blob/master/proposals/0067-floating-point-protocols.md<br></p><p>Hello Swift Community,<br></p><p>The review of SE-0067: &quot;Enhanced Floating Point Protocols” ran from April 19…April 29, 2016. The proposal is *accepted* for Swift 3.  Overall, the feedback on the proposal was very positive, particularly for revision 2 of the proposal.<br></p><p>The most significant feedback was around the naming issues for the various protocol requirements that map onto operators (e.g. “isLessThanOrEqualTo”).  The core team agrees that these are unfortunate - their naming is awkward and they will end up polluting code completion for instances of these numeric types.  That said, we are accepting the proposal as written, because the rest of the proposal is great progress in the direction we want to go, accepting it will allow us to get experience living on it, and we can improve this issue with a follow-on proposal.<br></p><p>To address the naming issues, we’d like to explore Tony Allevato’s ideas in the “Improve operator requirements in protocols” thread on swift-evolution.  If that doesn’t work out, we request that these members be reworked to be named static members in the protocol, which will address the code completion issue.<br></p><p>Thank you to Stephen Canon for driving the design and implementation of this, and to Max Moiseev (and several others) who have been contributing to the implementation.  This is a fundamental step to moving Swift numerics forward!<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Accepted] SE-0067: Enhanced Floating Point Protocols</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>May  2, 2016 at 11:00:00pm</p></header><div class="content"><p>Bravo. This is a welcome improvement to the language.<br></p><p><br>On Mon, May 2, 2016 at 10:56 PM, Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Proposal link:<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0067-floating-point-protocols.md<br>&gt;<br>&gt; Hello Swift Community,<br>&gt;<br>&gt; The review of SE-0067: &quot;Enhanced Floating Point Protocols” ran from April<br>&gt; 19…April 29, 2016. The proposal is *accepted* for Swift 3.  Overall, the<br>&gt; feedback on the proposal was very positive, particularly for revision 2 of<br>&gt; the proposal.<br>&gt;<br>&gt; The most significant feedback was around the naming issues for the various<br>&gt; protocol requirements that map onto operators (e.g.<br>&gt; “isLessThanOrEqualTo”).  The core team agrees that these are unfortunate -<br>&gt; their naming is awkward and they will end up polluting code completion for<br>&gt; instances of these numeric types.  That said, we are accepting the proposal<br>&gt; as written, because the rest of the proposal is great progress in the<br>&gt; direction we want to go, accepting it will allow us to get experience<br>&gt; living on it, and we can improve this issue with a follow-on proposal.<br>&gt;<br>&gt; To address the naming issues, we’d like to explore Tony Allevato’s ideas<br>&gt; in the “Improve operator requirements in protocols” thread on<br>&gt; swift-evolution.  If that doesn’t work out, we request that these members<br>&gt; be reworked to be named static members in the protocol, which will address<br>&gt; the code completion issue.<br>&gt;<br>&gt; Thank you to Stephen Canon for driving the design and implementation of<br>&gt; this, and to Max Moiseev (and several others) who have been contributing to<br>&gt; the implementation.  This is a fundamental step to moving Swift numerics<br>&gt; forward!<br>&gt;<br>&gt; -Chris<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/fc8eeab2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Accepted] SE-0067: Enhanced Floating Point Protocols</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>May  2, 2016 at 11:00:00pm</p></header><div class="content"><p>Last nit (sorry!)--<br>The enum Sign should have lowercase names for the cases (i.e. `plus` and<br>`minus` instead of `Plus` and `Minus`).<br></p><p><br>On Mon, May 2, 2016 at 11:05 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br></p><p>&gt; Bravo. This is a welcome improvement to the language.<br>&gt;<br>&gt;<br>&gt; On Mon, May 2, 2016 at 10:56 PM, Chris Lattner via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Proposal link:<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0067-floating-point-protocols.md<br>&gt;&gt;<br>&gt;&gt; Hello Swift Community,<br>&gt;&gt;<br>&gt;&gt; The review of SE-0067: &quot;Enhanced Floating Point Protocols” ran from April<br>&gt;&gt; 19…April 29, 2016. The proposal is *accepted* for Swift 3.  Overall, the<br>&gt;&gt; feedback on the proposal was very positive, particularly for revision 2 of<br>&gt;&gt; the proposal.<br>&gt;&gt;<br>&gt;&gt; The most significant feedback was around the naming issues for the<br>&gt;&gt; various protocol requirements that map onto operators (e.g.<br>&gt;&gt; “isLessThanOrEqualTo”).  The core team agrees that these are unfortunate -<br>&gt;&gt; their naming is awkward and they will end up polluting code completion for<br>&gt;&gt; instances of these numeric types.  That said, we are accepting the proposal<br>&gt;&gt; as written, because the rest of the proposal is great progress in the<br>&gt;&gt; direction we want to go, accepting it will allow us to get experience<br>&gt;&gt; living on it, and we can improve this issue with a follow-on proposal.<br>&gt;&gt;<br>&gt;&gt; To address the naming issues, we’d like to explore Tony Allevato’s ideas<br>&gt;&gt; in the “Improve operator requirements in protocols” thread on<br>&gt;&gt; swift-evolution.  If that doesn’t work out, we request that these members<br>&gt;&gt; be reworked to be named static members in the protocol, which will address<br>&gt;&gt; the code completion issue.<br>&gt;&gt;<br>&gt;&gt; Thank you to Stephen Canon for driving the design and implementation of<br>&gt;&gt; this, and to Max Moiseev (and several others) who have been contributing to<br>&gt;&gt; the implementation.  This is a fundamental step to moving Swift numerics<br>&gt;&gt; forward!<br>&gt;&gt;<br>&gt;&gt; -Chris<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/15fa1487/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
