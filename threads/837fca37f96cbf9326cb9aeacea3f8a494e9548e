<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Trial balloon: conforming sizeof, sizeofValue, etc. to naming guidelines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>May  2, 2016 at 01:00:00pm</p></header><div class="content"><p>on Mon May 02 2016, Xiaodi Wu &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I like it, but how do you accommodate sizeofValue, etc?<br></p><p>IMO you don&#39;t.  I added those years ago on a whim, when whims were what<br>we had to guide development.  I&#39;m unconvinced they add value to Swift.<br></p><p>&gt;<br>&gt;<br>&gt; On Mon, May 2, 2016 at 11:46 Dave Abrahams<br>&gt; &lt;dabrahams at apple.com&gt; wrote:<br>&gt;<br>&gt;     on Sun May 01 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br>&gt;<br>&gt;     &gt; It&#39;s a bad habit of mine, I guess, to err on the side of suggesting<br>&gt;     conservative<br>&gt;     &gt; changes on the assumption that it&#39;ll be maximally acceptable. If there&#39;s<br>&gt;     &gt; appetite for a more serious renaming, and as you say these are considered<br>&gt;     &gt; relatively rarely used, then it&#39;s a world of possibility!<br>&gt;     &gt;<br>&gt;     &gt; We could do as Shawn suggested and follow precedent in some other<br>&gt;     languages by<br>&gt;     &gt; moving these functions out of the global scope. Perhaps these will meet<br>&gt;     with<br>&gt;     &gt; some satisfaction:<br>&gt;     &gt;<br>&gt;     &gt; ```<br>&gt;     &gt; Memory.footprint(of:)<br>&gt;     &gt; Memory.alignment(of:)<br>&gt;     &gt; Memory.spacing(of:)<br>&gt;     &gt; ```<br>&gt;<br>&gt;     I&#39;d rather have<br>&gt;<br>&gt;     MemoryLayout&lt;T&gt;.size<br>&gt;     MemoryLayout&lt;T&gt;.alignment<br>&gt;     MemoryLayout&lt;T&gt;.spacing<br>&gt;<br>&gt;     -Dave<br>&gt;<br>&gt;     &gt; On Sun, May 1, 2016 at 21:41 Dave Abrahams via swift-evolution<br>&gt;     &gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;     &gt;<br>&gt;     &gt; on Sun May 01 2016, Xiaodi Wu<br>&gt;     &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;     &gt;<br>&gt;     &gt; &gt; On Sun, May 1, 2016 at 7:00 PM, Dave Abrahams via swift-evolution<br>&gt;     &gt; &gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; on Thu Apr 28 2016, Xiaodi Wu<br>&gt;     &gt; &gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; &gt; We all know and love sizeof(), but given that it&#39;s different from its<br>&gt;     C<br>&gt;     &gt; &gt; &gt; counterpart anyway, shouldn&#39;t these conform to Swift naming<br>&gt;     guidelines?<br>&gt;     &gt; In<br>&gt;     &gt; &gt; other<br>&gt;     &gt; &gt; &gt; words, after SE-0006, shouldn&#39;t these names be as follows?<br>&gt;     &gt; &gt; &gt;<br>&gt;     &gt; &gt; &gt; ```<br>&gt;     &gt; &gt; &gt; size&lt;T&gt;(of: T.Type)<br>&gt;     &gt; &gt; &gt; size&lt;T&gt;(ofValue: T)<br>&gt;     &gt; &gt; &gt; stride&lt;T&gt;(of: T.Type)<br>&gt;     &gt; &gt; &gt; stride&lt;T&gt;(ofValue: T)<br>&gt;     &gt; &gt; &gt; align&lt;T&gt;(of: T.Type)<br>&gt;     &gt; &gt; &gt; align&lt;T&gt;(ofValue: T)<br>&gt;     &gt; &gt; &gt; ```<br>&gt;     &gt; &gt; &gt;<br>&gt;     &gt; &gt; &gt; There are obvious issues with two different things named `stride`, but<br>&gt;     &gt; IMO<br>&gt;     &gt; &gt; &gt; that&#39;s best addressed by renaming one of them; the real problem is<br>&gt;     that<br>&gt;     &gt; &gt; the word<br>&gt;     &gt; &gt; &gt; stride is used in two different ways already. Thoughts?<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; These functions correspond to C and LLVM primitives and we consciously<br>&gt;     &gt; &gt; kept those names because they are terms of art.<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; I recognize that this was the intention behind preserving the names<br>&gt;     as-is.<br>&gt;     &gt; The<br>&gt;     &gt; &gt; thought process behind proposing a renaming was as follows:<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; * The Swift counterpart to C `sizeof()` is `strideof(_:)`. Thus,<br>&gt;     although<br>&gt;     &gt; the<br>&gt;     &gt; &gt; *names* are treated as terms of art, not all of them are used to mean<br>&gt;     the<br>&gt;     &gt; art<br>&gt;     &gt; &gt; for which they are terms (if you will).<br>&gt;     &gt;<br>&gt;     &gt; The specific meaning of sizeof in Swift comes from either LLVM or from<br>&gt;     &gt; SIL, IIRC. It predates me, but it&#39;s supposed to correspond to what the<br>&gt;     &gt; IRGen level of the compiler calls “sizeof.”<br>&gt;     &gt;<br>&gt;     &gt; &gt; To reinforce the separation between C primitives and these Swift<br>&gt;     &gt; &gt; functions, C `offsetof()` has no Swift counterpart.<br>&gt;     &gt;<br>&gt;     &gt; Yes, that&#39;s part of the reason I&#39;d very much like to choose more<br>&gt;     &gt; descriptive names if we are going to move away from the current<br>&gt;     &gt; spellings. moving the parenthesis is a pretty weak cue that this thing<br>&gt;     &gt; might be slightly different.<br>&gt;     &gt;<br>&gt;     &gt; &gt; * A survey of other languages suggests that, as terms of art, these<br>&gt;     names<br>&gt;     &gt; are<br>&gt;     &gt; &gt; not always treated as a single word but as a phrase, by which I mean<br>&gt;     that<br>&gt;     &gt; the<br>&gt;     &gt; &gt; preposition &quot;of&quot; can be subject to language-specific naming conventions.<br>&gt;     &gt; For<br>&gt;     &gt; &gt; example, in Rust you have `size_of()`, `size_of_val()`, etc.; in the .<br>&gt;     NET<br>&gt;     &gt; &gt; Framework, you have the `Marshal.SizeOf()` method; and even in LLVM you<br>&gt;     &gt; &gt; apparently have (and this is based just on googling--my level of<br>&gt;     &gt; familiarity<br>&gt;     &gt; &gt; with LLVM is low to nonexistent) struct `AlignOf&lt;T&gt;`.<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; I don&#39;t know that<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; size(of: T.self)<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; is particularly descriptive usage, and if we were going to change them<br>&gt;     &gt; &gt; so they didn&#39;t look like sizeof, strideof, alignof I&#39;d want to make them<br>&gt;     &gt; &gt; far more descriptive. E.g.<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; memoryFootprint(Int.self)<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; or<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; bytesRequiredForStorage(Int.self)<br>&gt;     &gt; &gt; standardByteAlignment(Int.self)<br>&gt;     &gt; &gt; bytesBetweenArrayElements(Int.self)<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; etc.<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; To my mind, `size(of:)` is not moving away from using a term of art but<br>&gt;     &gt; rather<br>&gt;     &gt; &gt; following existing precedent in conforming use of the preposition to<br>&gt;     &gt; &gt; language-specific conventions.<br>&gt;     &gt;<br>&gt;     &gt; The same argument could be made for “mapped” and “reduced.”<br>&gt;     &gt;<br>&gt;     &gt; &gt; Like you, I would be hesitant to suggest moving away from these terms<br>&gt;     &gt; &gt; of art altogether.<br>&gt;     &gt;<br>&gt;     &gt; You misunderstand me. I&#39;m not hesitant about that at all. What I<br>&gt;     &gt; dislike is the idea of being close-to-but-not-quite-the-same as the<br>&gt;     &gt; source terms to which they correspond. The original terms are not<br>&gt;     &gt; great, and these facilities are seldom used. They can afford to be<br>&gt;     &gt; longer and more descriptive.<br>&gt;     &gt;<br>&gt;     &gt; &gt; I do think, though, that moving the preposition has the bonus of<br>&gt;     &gt; &gt; visually suggesting however subtly that `size(of:) ` might have a<br>&gt;     &gt; &gt; Swift-specific twist that makes it not a drop-in equivalent for C<br>&gt;     &gt; &gt; `sizeof()`.<br>&gt;     &gt;<br>&gt;     &gt; I don&#39;t think subtlety is a virtue in this case.<br>&gt;     &gt;<br>&gt;     &gt; --<br>&gt;     &gt; Dave<br>&gt;     &gt;<br>&gt;     &gt; _______________________________________________<br>&gt;     &gt; swift-evolution mailing list<br>&gt;     &gt; swift-evolution at swift.org<br>&gt;     &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;     &gt;<br>&gt;<br>&gt;     --<br>&gt;     Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Trial balloon: conforming sizeof, sizeofValue, etc. to naming guidelines</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>May  2, 2016 at 03:00:00pm</p></header><div class="content"><p>Well, I mean, it&#39;s not as though you invented them just for Swift. It&#39;s<br>possible to evaluate sizeof an instance in C, C++, C#, D, Python, Rust...<br>Removing this facility from Swift is a whole nother discussion from<br>renaming.<br></p><p><br>On Mon, May 2, 2016 at 3:11 PM, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; on Mon May 02 2016, Xiaodi Wu &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt; I like it, but how do you accommodate sizeofValue, etc?<br>&gt;<br>&gt; IMO you don&#39;t.  I added those years ago on a whim, when whims were what<br>&gt; we had to guide development.  I&#39;m unconvinced they add value to Swift.<br>&gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; On Mon, May 2, 2016 at 11:46 Dave Abrahams<br>&gt; &gt; &lt;dabrahams at apple.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;     on Sun May 01 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;     &gt; It&#39;s a bad habit of mine, I guess, to err on the side of suggesting<br>&gt; &gt;     conservative<br>&gt; &gt;     &gt; changes on the assumption that it&#39;ll be maximally acceptable. If<br>&gt; there&#39;s<br>&gt; &gt;     &gt; appetite for a more serious renaming, and as you say these are<br>&gt; considered<br>&gt; &gt;     &gt; relatively rarely used, then it&#39;s a world of possibility!<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; We could do as Shawn suggested and follow precedent in some other<br>&gt; &gt;     languages by<br>&gt; &gt;     &gt; moving these functions out of the global scope. Perhaps these will<br>&gt; meet<br>&gt; &gt;     with<br>&gt; &gt;     &gt; some satisfaction:<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; ```<br>&gt; &gt;     &gt; Memory.footprint(of:)<br>&gt; &gt;     &gt; Memory.alignment(of:)<br>&gt; &gt;     &gt; Memory.spacing(of:)<br>&gt; &gt;     &gt; ```<br>&gt; &gt;<br>&gt; &gt;     I&#39;d rather have<br>&gt; &gt;<br>&gt; &gt;     MemoryLayout&lt;T&gt;.size<br>&gt; &gt;     MemoryLayout&lt;T&gt;.alignment<br>&gt; &gt;     MemoryLayout&lt;T&gt;.spacing<br>&gt; &gt;<br>&gt; &gt;     -Dave<br>&gt; &gt;<br>&gt; &gt;     &gt; On Sun, May 1, 2016 at 21:41 Dave Abrahams via swift-evolution<br>&gt; &gt;     &gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; on Sun May 01 2016, Xiaodi Wu<br>&gt; &gt;     &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; &gt; On Sun, May 1, 2016 at 7:00 PM, Dave Abrahams via swift-evolution<br>&gt; &gt;     &gt; &gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;     &gt; &gt;<br>&gt; &gt;     &gt; &gt; on Thu Apr 28 2016, Xiaodi Wu<br>&gt; &gt;     &gt; &gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;     &gt; &gt;<br>&gt; &gt;     &gt; &gt; &gt; We all know and love sizeof(), but given that it&#39;s different<br>&gt; from its<br>&gt; &gt;     C<br>&gt; &gt;     &gt; &gt; &gt; counterpart anyway, shouldn&#39;t these conform to Swift naming<br>&gt; &gt;     guidelines?<br>&gt; &gt;     &gt; In<br>&gt; &gt;     &gt; &gt; other<br>&gt; &gt;     &gt; &gt; &gt; words, after SE-0006, shouldn&#39;t these names be as follows?<br>&gt; &gt;     &gt; &gt; &gt;<br>&gt; &gt;     &gt; &gt; &gt; ```<br>&gt; &gt;     &gt; &gt; &gt; size&lt;T&gt;(of: T.Type)<br>&gt; &gt;     &gt; &gt; &gt; size&lt;T&gt;(ofValue: T)<br>&gt; &gt;     &gt; &gt; &gt; stride&lt;T&gt;(of: T.Type)<br>&gt; &gt;     &gt; &gt; &gt; stride&lt;T&gt;(ofValue: T)<br>&gt; &gt;     &gt; &gt; &gt; align&lt;T&gt;(of: T.Type)<br>&gt; &gt;     &gt; &gt; &gt; align&lt;T&gt;(ofValue: T)<br>&gt; &gt;     &gt; &gt; &gt; ```<br>&gt; &gt;     &gt; &gt; &gt;<br>&gt; &gt;     &gt; &gt; &gt; There are obvious issues with two different things named<br>&gt; `stride`, but<br>&gt; &gt;     &gt; IMO<br>&gt; &gt;     &gt; &gt; &gt; that&#39;s best addressed by renaming one of them; the real<br>&gt; problem is<br>&gt; &gt;     that<br>&gt; &gt;     &gt; &gt; the word<br>&gt; &gt;     &gt; &gt; &gt; stride is used in two different ways already. Thoughts?<br>&gt; &gt;     &gt; &gt;<br>&gt; &gt;     &gt; &gt; These functions correspond to C and LLVM primitives and we<br>&gt; consciously<br>&gt; &gt;     &gt; &gt; kept those names because they are terms of art.<br>&gt; &gt;     &gt; &gt;<br>&gt; &gt;     &gt; &gt; I recognize that this was the intention behind preserving the<br>&gt; names<br>&gt; &gt;     as-is.<br>&gt; &gt;     &gt; The<br>&gt; &gt;     &gt; &gt; thought process behind proposing a renaming was as follows:<br>&gt; &gt;     &gt; &gt;<br>&gt; &gt;     &gt; &gt; * The Swift counterpart to C `sizeof()` is `strideof(_:)`. Thus,<br>&gt; &gt;     although<br>&gt; &gt;     &gt; the<br>&gt; &gt;     &gt; &gt; *names* are treated as terms of art, not all of them are used to<br>&gt; mean<br>&gt; &gt;     the<br>&gt; &gt;     &gt; art<br>&gt; &gt;     &gt; &gt; for which they are terms (if you will).<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; The specific meaning of sizeof in Swift comes from either LLVM or<br>&gt; from<br>&gt; &gt;     &gt; SIL, IIRC. It predates me, but it&#39;s supposed to correspond to what<br>&gt; the<br>&gt; &gt;     &gt; IRGen level of the compiler calls “sizeof.”<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; &gt; To reinforce the separation between C primitives and these Swift<br>&gt; &gt;     &gt; &gt; functions, C `offsetof()` has no Swift counterpart.<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; Yes, that&#39;s part of the reason I&#39;d very much like to choose more<br>&gt; &gt;     &gt; descriptive names if we are going to move away from the current<br>&gt; &gt;     &gt; spellings. moving the parenthesis is a pretty weak cue that this<br>&gt; thing<br>&gt; &gt;     &gt; might be slightly different.<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; &gt; * A survey of other languages suggests that, as terms of art,<br>&gt; these<br>&gt; &gt;     names<br>&gt; &gt;     &gt; are<br>&gt; &gt;     &gt; &gt; not always treated as a single word but as a phrase, by which I<br>&gt; mean<br>&gt; &gt;     that<br>&gt; &gt;     &gt; the<br>&gt; &gt;     &gt; &gt; preposition &quot;of&quot; can be subject to language-specific naming<br>&gt; conventions.<br>&gt; &gt;     &gt; For<br>&gt; &gt;     &gt; &gt; example, in Rust you have `size_of()`, `size_of_val()`, etc.; in<br>&gt; the .<br>&gt; &gt;     NET<br>&gt; &gt;     &gt; &gt; Framework, you have the `Marshal.SizeOf()` method; and even in<br>&gt; LLVM you<br>&gt; &gt;     &gt; &gt; apparently have (and this is based just on googling--my level of<br>&gt; &gt;     &gt; familiarity<br>&gt; &gt;     &gt; &gt; with LLVM is low to nonexistent) struct `AlignOf&lt;T&gt;`.<br>&gt; &gt;     &gt; &gt;<br>&gt; &gt;     &gt; &gt; I don&#39;t know that<br>&gt; &gt;     &gt; &gt;<br>&gt; &gt;     &gt; &gt; size(of: T.self)<br>&gt; &gt;     &gt; &gt;<br>&gt; &gt;     &gt; &gt; is particularly descriptive usage, and if we were going to<br>&gt; change them<br>&gt; &gt;     &gt; &gt; so they didn&#39;t look like sizeof, strideof, alignof I&#39;d want to<br>&gt; make them<br>&gt; &gt;     &gt; &gt; far more descriptive. E.g.<br>&gt; &gt;     &gt; &gt;<br>&gt; &gt;     &gt; &gt; memoryFootprint(Int.self)<br>&gt; &gt;     &gt; &gt;<br>&gt; &gt;     &gt; &gt; or<br>&gt; &gt;     &gt; &gt;<br>&gt; &gt;     &gt; &gt; bytesRequiredForStorage(Int.self)<br>&gt; &gt;     &gt; &gt; standardByteAlignment(Int.self)<br>&gt; &gt;     &gt; &gt; bytesBetweenArrayElements(Int.self)<br>&gt; &gt;     &gt; &gt;<br>&gt; &gt;     &gt; &gt; etc.<br>&gt; &gt;     &gt; &gt;<br>&gt; &gt;     &gt; &gt; To my mind, `size(of:)` is not moving away from using a term of<br>&gt; art but<br>&gt; &gt;     &gt; rather<br>&gt; &gt;     &gt; &gt; following existing precedent in conforming use of the<br>&gt; preposition to<br>&gt; &gt;     &gt; &gt; language-specific conventions.<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; The same argument could be made for “mapped” and “reduced.”<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; &gt; Like you, I would be hesitant to suggest moving away from these<br>&gt; terms<br>&gt; &gt;     &gt; &gt; of art altogether.<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; You misunderstand me. I&#39;m not hesitant about that at all. What I<br>&gt; &gt;     &gt; dislike is the idea of being close-to-but-not-quite-the-same as the<br>&gt; &gt;     &gt; source terms to which they correspond. The original terms are not<br>&gt; &gt;     &gt; great, and these facilities are seldom used. They can afford to be<br>&gt; &gt;     &gt; longer and more descriptive.<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; &gt; I do think, though, that moving the preposition has the bonus of<br>&gt; &gt;     &gt; &gt; visually suggesting however subtly that `size(of:) ` might have a<br>&gt; &gt;     &gt; &gt; Swift-specific twist that makes it not a drop-in equivalent for C<br>&gt; &gt;     &gt; &gt; `sizeof()`.<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; I don&#39;t think subtlety is a virtue in this case.<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; --<br>&gt; &gt;     &gt; Dave<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; _______________________________________________<br>&gt; &gt;     &gt; swift-evolution mailing list<br>&gt; &gt;     &gt; swift-evolution at swift.org<br>&gt; &gt;     &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;     &gt;<br>&gt; &gt;<br>&gt; &gt;     --<br>&gt; &gt;     Dave<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; --<br>&gt; Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/3718269b/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
