<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>[Discussion] Updating Struct Values While Looping</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>March  7, 2016 at 12:00:00am</p></header><div class="content"><p>So I have some code that utilizes structs, I would like to go through and update some of the values. While I could use map, it seems I should be able to do it using a for in loop without utilizing indexes. The mutate2 method uses enumerate, and the index to write back the copy to the array, but I would prefer to update the struct value itself and avoid having to use indexes as I try to avoid them, if possible.. It seems the structs kind of force you to go back to indexes. I was thinking that it would be useful to be able to apply the &amp; (reference) operator here to allow direct access to the array element struct, an example of this is shown in mutate3. With a class this is not necessary. I know a little like C++ but just want to explore this idea unless there is some other way I missed. <br></p><p>struct Codon {<br>    var val = Float(0.0)<br>    var mask = false<br>}<br></p><p>class Geno {<br>    var codons : [Codon]<br></p><p>    // pure index based approach<br>    func mutate() {<br>        for i in 0..&lt;codons.count {<br>            if !codons[i].mask {<br>                codons[i].val += r.gauss() * vari<br>            }<br>        }<br>    }<br></p><p>    // index to write back, less efficient? <br>    func mutate2() {<br>        for (index, var codon) in codons.enumerate() {<br>            if !codon.mask {<br>                codon.val += r.gauss()<br>                codons[index] = codon<br>            }<br>        }<br>    }  <br></p><p>    // suggested reference approach  <br>    func mutate3() {<br>        for var &amp;codon in codons {<br>            if !codon.mask {<br>                codon.val += r.gauss()<br>            }<br>        }<br>    }<br>}<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160307/3eab75bd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>[Discussion] Updating Struct Values While Looping</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>March  7, 2016 at 02:00:00am</p></header><div class="content"><p>On Mon, Mar 7, 2016 at 12:57 AM, Paul Ossenbruggen via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt;     func mutate3() {<br>&gt;         for var &amp;codon in codons {<br>&gt;             if !codon.mask {<br>&gt;                 codon.val += r.gauss()<br>&gt;             }<br>&gt;         }<br>&gt;     }<br>&gt; }<br></p><p>This would be a useful extension to the language (but it is not clear<br>how to define it -- do we need to hardcode the knowledge about the<br>MutableCollection protocol into the compiler?)<br></p><p>There&#39;s something you can do today, though:<br></p><p>extension MutableCollectionType {<br>  public mutating func mutatingEach(mutate: (inout Generator.Element) -&gt; Void) {<br>    for i in self.indices {<br>      mutate(&amp;self[i])<br>    }<br>  }<br>}<br></p><p>var a = [1,2,3]<br>a.mutatingEach { (x: inout Int) -&gt; Void in x += 1 }<br>//a.mutatingEach { $0 += 1 } // does not work, probably due to a compiler bug.<br>print(a)<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>[Discussion] Updating Struct Values While Looping</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>March  7, 2016 at 02:00:00am</p></header><div class="content"><p>On Mon, Mar 7, 2016 at 2:24 AM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; On Mon, Mar 7, 2016 at 12:57 AM, Paul Ossenbruggen via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;     func mutate3() {<br>&gt;&gt;         for var &amp;codon in codons {<br>&gt;&gt;             if !codon.mask {<br>&gt;&gt;                 codon.val += r.gauss()<br>&gt;&gt;             }<br>&gt;&gt;         }<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;<br>&gt; This would be a useful extension to the language (but it is not clear<br>&gt; how to define it -- do we need to hardcode the knowledge about the<br>&gt; MutableCollection protocol into the compiler?)<br>&gt;<br>&gt; There&#39;s something you can do today, though:<br>&gt;<br>&gt; extension MutableCollectionType {<br>&gt;   public mutating func mutatingEach(mutate: (inout Generator.Element) -&gt; Void) {<br></p><p>This method should be called &#39;mutateEach&#39; to conform to the guidelines, though.<br></p><p>Dmitri<br></p><p>&gt;     for i in self.indices {<br>&gt;       mutate(&amp;self[i])<br>&gt;     }<br>&gt;   }<br>&gt; }<br>&gt;<br>&gt; var a = [1,2,3]<br>&gt; a.mutatingEach { (x: inout Int) -&gt; Void in x += 1 }<br>&gt; //a.mutatingEach { $0 += 1 } // does not work, probably due to a compiler bug.<br>&gt; print(a)<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p><p><br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Discussion] Updating Struct Values While Looping</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>March  7, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Mar 7, 2016, at 2:24 AM, Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; var a = [1,2,3]<br>&gt; a.mutatingEach { (x: inout Int) -&gt; Void in x += 1 }<br>&gt; //a.mutatingEach { $0 += 1 } // does not work, probably due to a compiler bug.<br>&gt; print(a)<br></p><p>This should be fixed in 7.3, for what it&#39;s worth.<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160307/a5d37c43/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>[Discussion] Updating Struct Values While Looping</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>March  7, 2016 at 09:00:00am</p></header><div class="content"><p>On Mon, Mar 7, 2016 at 8:59 AM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;<br>&gt; On Mar 7, 2016, at 2:24 AM, Dmitri Gribenko via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; var a = [1,2,3]<br>&gt; a.mutatingEach { (x: inout Int) -&gt; Void in x += 1 }<br>&gt; //a.mutatingEach { $0 += 1 } // does not work, probably due to a compiler<br>&gt; bug.<br>&gt; print(a)<br>&gt;<br>&gt;<br>&gt; This should be fixed in 7.3, for what it&#39;s worth.<br></p><p>I was testing on master.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Discussion] Updating Struct Values While Looping</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>March  7, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Mar 7, 2016, at 9:00 AM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Mon, Mar 7, 2016 at 8:59 AM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Mar 7, 2016, at 2:24 AM, Dmitri Gribenko via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; var a = [1,2,3]<br>&gt;&gt; a.mutatingEach { (x: inout Int) -&gt; Void in x += 1 }<br>&gt;&gt; //a.mutatingEach { $0 += 1 } // does not work, probably due to a compiler<br>&gt;&gt; bug.<br>&gt;&gt; print(a)<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; This should be fixed in 7.3, for what it&#39;s worth.<br>&gt; <br>&gt; I was testing on master.<br></p><p>Sounds like we have a regression in master, then. It worked for me in a 7.3 beta playground.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>[Discussion] Updating Struct Values While Looping</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>March  7, 2016 at 09:00:00am</p></header><div class="content"><p>On Mon, Mar 7, 2016 at 9:02 AM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;<br>&gt;&gt; On Mar 7, 2016, at 9:00 AM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On Mon, Mar 7, 2016 at 8:59 AM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Mar 7, 2016, at 2:24 AM, Dmitri Gribenko via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; var a = [1,2,3]<br>&gt;&gt;&gt; a.mutatingEach { (x: inout Int) -&gt; Void in x += 1 }<br>&gt;&gt;&gt; //a.mutatingEach { $0 += 1 } // does not work, probably due to a compiler<br>&gt;&gt;&gt; bug.<br>&gt;&gt;&gt; print(a)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; This should be fixed in 7.3, for what it&#39;s worth.<br>&gt;&gt;<br>&gt;&gt; I was testing on master.<br>&gt;<br>&gt; Sounds like we have a regression in master, then. It worked for me in a 7.3 beta playground.<br></p><p>https://bugs.swift.org/browse/SR-892<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e0a5152b275c43b493a94b5a6a868905?s=50"></div><header><strong>[Discussion] Updating Struct Values While Looping</strong> from <string>Pyry Jahkola</string> &lt;pyry.jahkola at iki.fi&gt;<p>March  7, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On 07 Mar 2016, at 10:57, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; for i in 0..&lt;codons.count { codons[i] = ... }<br></p><p>I don&#39;t disagree, but quick reminder: you might want to use `indices` instead of `..&lt;`:<br></p><p>for i in codons.indices { codons[i] = ... }<br></p><p>— Pyry<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160307/838ff927/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>[Discussion] Updating Struct Values While Looping</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>March  7, 2016 at 10:00:00am</p></header><div class="content"><p>Thanks for pointing this out!<br></p><p>Sent from my iPhone<br></p><p>&gt; On Mar 7, 2016, at 10:11 AM, Pyry Jahkola &lt;pyry.jahkola at iki.fi&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 07 Mar 2016, at 10:57, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; for i in 0..&lt;codons.count { codons[i] = ... }<br>&gt; <br>&gt; I don&#39;t disagree, but quick reminder: you might want to use `indices` instead of `..&lt;`:<br>&gt; <br>&gt; for i in codons.indices { codons[i] = ... }<br>&gt; <br>&gt; — Pyry<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160307/da4f292f/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
