<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0fa74cc7b10064b73bc97cf98f6ca492?s=50"></div><header><strong>[Pitch] Add Null struct to Foundation</strong> from <string>Alsey Miller</string> &lt;colemancda at me.com&gt;<p>June 22, 2016 at 11:00:00pm</p></header><div class="content"><p>Add a struct Null to the Swift 3.0 Foundation value types. As a struct, Null is more performant (no ARC or memory allocation) than NSNull, and will be needed for Swift JSON decoders and libraries that want to use struct value types, and be free from classes for their model layer.<br></p><p><br>	Coleman,<br></p><p><br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/256466c2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>[Pitch] Add Null struct to Foundation</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>June 22, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On Jun 22, 2016, at 10:14 PM, Alsey Miller via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Add a struct Null to the Swift 3.0 Foundation value types. As a struct, Null is more performant (no ARC or memory allocation) than NSNull, and will be needed for Swift JSON decoders and libraries that want to use struct value types, and be free from classes for their model layer.<br>&gt; <br>I assume you are thinking of [String:SomeRootJSONProtocol] as the Object type? However, once you reference the data as a protocol however, it will be promoted and stored as a reference type.<br></p><p>I’ve preferred a similar approach to the following for JSON (although this isn’t my code): https://gist.github.com/dorentus/1e2132edfb174028bf11#file-json-swift-L30-L38<br></p><p>-DW<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/8d0c7951/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0fa74cc7b10064b73bc97cf98f6ca492?s=50"></div><header><strong>[Pitch] Add Null struct to Foundation</strong> from <string>Alsey Miller</string> &lt;colemancda at me.com&gt;<p>June 23, 2016 at 12:00:00am</p></header><div class="content"><p>Please see<br></p><p>https://github.com/PureSwift/SwiftFoundation/blob/develop/Sources/SwiftFoundation/Null.swift &lt;https://github.com/PureSwift/SwiftFoundation/blob/develop/Sources/SwiftFoundation/Null.swift&gt;<br></p><p>https://github.com/PureSwift/SwiftFoundation/blob/develop/Sources/SwiftFoundation/JSON.swift &lt;https://github.com/PureSwift/SwiftFoundation/blob/develop/Sources/SwiftFoundation/JSON.swift&gt;<br></p><p>Specifically, line 77 in JSON.swift<br></p><p>	Coleman,<br></p><p><br></p><p><br></p><p>&gt; On Jun 23, 2016, at 12:54 AM, David Waite &lt;david at alkaline-solutions.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 22, 2016, at 10:14 PM, Alsey Miller via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Add a struct Null to the Swift 3.0 Foundation value types. As a struct, Null is more performant (no ARC or memory allocation) than NSNull, and will be needed for Swift JSON decoders and libraries that want to use struct value types, and be free from classes for their model layer.<br>&gt;&gt; <br>&gt; I assume you are thinking of [String:SomeRootJSONProtocol] as the Object type? However, once you reference the data as a protocol however, it will be promoted and stored as a reference type.<br>&gt; <br>&gt; I’ve preferred a similar approach to the following for JSON (although this isn’t my code): https://gist.github.com/dorentus/1e2132edfb174028bf11#file-json-swift-L30-L38 &lt;https://gist.github.com/dorentus/1e2132edfb174028bf11#file-json-swift-L30-L38&gt;<br>&gt; <br>&gt; -DW<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/423ebaae/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7559ac465b184ec777f29d37c0e4b374?s=50"></div><header><strong>[Pitch] Add Null struct to Foundation</strong> from <string>Michael Peternell</string> &lt;michael.peternell at gmx.at&gt;<p>June 24, 2016 at 12:00:00am</p></header><div class="content"><p>I think NSNull() should be used, not a struct. I don&#39;t think that a struct would be more performant. Or maybe the performance doesn&#39;t matter at all in any real-world usage scenario. But you may write a benchmark of a realistic (!) use-case (!) if you think otherwise... would be interesting to see the results.<br></p><p>Keeping with NSNull() also simplifies objc-interoperability.<br></p><p>-Michael<br></p><p>&gt; Am 23.06.2016 um 06:14 schrieb Alsey Miller via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; Add a struct Null to the Swift 3.0 Foundation value types. As a struct, Null is more performant (no ARC or memory allocation) than NSNull, and will be needed for Swift JSON decoders and libraries that want to use struct value types, and be free from classes for their model layer.<br>&gt; <br>&gt; <br>&gt; 	Coleman,<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f64d9558601ff253a2faf75455059df6?s=50"></div><header><strong>[Pitch] Add Null struct to Foundation</strong> from <string>J. Charles M. N.</string> &lt;jcharles.nmbiada at me.com&gt;<p>June 24, 2016 at 07:00:00am</p></header><div class="content"><p>Doesn&#39;t Optional.None allready a placeholder for null values in swift?<br></p><p>I read some where that nil was the new way to represent null pointer in swift. <br></p><p>--<br>J. Charles <br></p><p>&gt; Le 24 juin 2016 à 00:59, Michael Peternell via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; I think NSNull() should be used, not a struct. I don&#39;t think that a struct would be more performant. Or maybe the performance doesn&#39;t matter at all in any real-world usage scenario. But you may write a benchmark of a realistic (!) use-case (!) if you think otherwise... would be interesting to see the results.<br>&gt; <br>&gt; Keeping with NSNull() also simplifies objc-interoperability.<br>&gt; <br>&gt; -Michael<br>&gt; <br>&gt;&gt; Am 23.06.2016 um 06:14 schrieb Alsey Miller via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt; <br>&gt;&gt; Add a struct Null to the Swift 3.0 Foundation value types. As a struct, Null is more performant (no ARC or memory allocation) than NSNull, and will be needed for Swift JSON decoders and libraries that want to use struct value types, and be free from classes for their model layer.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;    Coleman,<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7559ac465b184ec777f29d37c0e4b374?s=50"></div><header><strong>[Pitch] Add Null struct to Foundation</strong> from <string>Michael Peternell</string> &lt;michael.peternell at gmx.at&gt;<p>June 24, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; Am 24.06.2016 um 07:59 schrieb J. Charles M. N. via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; Doesn&#39;t Optional.None allready a placeholder for null values in swift?<br></p><p>Not really. What is the type of Optional.none? `let empty = Optional.none` does not compile, it says &quot;Generic parameter &#39;Wrapped&#39; could not be inferred&quot;. NSNull() is a unique concrete value, and it&#39;s compatible with Objective C, NSObject and AnyObject. We could of course use `Optional&lt;Int16&gt;.none`, but someone else may use `Optional&lt;AnyObject&gt;.none` instead. The extra type information is just misleading in this case.<br></p><p>&gt; <br>&gt; I read some where that nil was the new way to represent null pointer in swift. <br></p><p>It is, usually. But does it work in this case?<br></p><p>-Michael<br></p><p>&gt; <br>&gt; --<br>&gt; J. Charles <br>&gt; <br>&gt;&gt; Le 24 juin 2016 à 00:59, Michael Peternell via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; I think NSNull() should be used, not a struct. I don&#39;t think that a struct would be more performant. Or maybe the performance doesn&#39;t matter at all in any real-world usage scenario. But you may write a benchmark of a realistic (!) use-case (!) if you think otherwise... would be interesting to see the results.<br>&gt;&gt; <br>&gt;&gt; Keeping with NSNull() also simplifies objc-interoperability.<br>&gt;&gt; <br>&gt;&gt; -Michael<br>&gt;&gt; <br>&gt;&gt;&gt; Am 23.06.2016 um 06:14 schrieb Alsey Miller via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Add a struct Null to the Swift 3.0 Foundation value types. As a struct, Null is more performant (no ARC or memory allocation) than NSNull, and will be needed for Swift JSON decoders and libraries that want to use struct value types, and be free from classes for their model layer.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   Coleman,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Pitch] Add Null struct to Foundation</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>June 24, 2016 at 02:00:00am</p></header><div class="content"><p>&gt; Not really. What is the type of Optional.none? `let empty = Optional.none` does not compile, it says &quot;Generic parameter &#39;Wrapped&#39; could not be inferred&quot;. NSNull() is a unique concrete value, and it&#39;s compatible with Objective C, NSObject and AnyObject. We could of course use `Optional&lt;Int16&gt;.none`, but someone else may use `Optional&lt;AnyObject&gt;.none` instead. The extra type information is just misleading in this case.<br></p><p>If you want a single, unique value, use `()`.<br></p><p>But I&#39;m not sure why you wouldn&#39;t just make this member an Optional&lt;Any&gt; in the first place. Is there some reason that wouldn&#39;t be suitable?<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/15ed660cd9d971062f9dd5084932a698?s=50"></div><header><strong>[Pitch] Add Null struct to Foundation</strong> from <string>David Rönnqvist</string> &lt;david.ronnqvist at gmail.com&gt;<p>June 26, 2016 at 07:00:00pm</p></header><div class="content"><p>I&#39;m not convinced that Swift needs more than on way of representing the lack of a value. As far as I&#39;ve understood (and remember), NSNull main reason to exist is that it&#39;s an actual object and won&#39;t for example terminate array literals. From what I&#39;ve observed of people who are new to Objective-C, NSNull is a big surprise, both its general existence but also when to expect it (read check for NSNull to make sure one doesn&#39;t crash) and when not to.<br></p><p>The way I&#39;ve imagined that the same problem would be solved in Swift is with an optional, optional value. That is: if a field in a response can either be set or not, that&#39;s an optional. If that field can either contain a value or the explicit lack of a value that&#39;s another optional:<br></p><p>let nickname: String?? = &quot;Little Bobby Tables&quot;<br></p><p>As I see it, this is both safer (requiring that the inner nil value is dealt with), serves as a documentation of when an explicit missing value is expected and when it&#39;s not, and is more consistent. <br></p><p>I would still expect a newcomer to wonder why there is two question marks in some places, but I&#39;d imagine that that explanation would feel more logical.<br></p><p>And it&#39;s (still) possible (at least in the latest Swift Playground) to safely unwrap both levels:<br></p><p>if case let name?? = nickname { }<br></p><p>- David<br></p><p>Sent from my iPad<br></p><p>On 24 Jun 2016, at 11:32, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; Not really. What is the type of Optional.none? `let empty = Optional.none` does not compile, it says &quot;Generic parameter &#39;Wrapped&#39; could not be inferred&quot;. NSNull() is a unique concrete value, and it&#39;s compatible with Objective C, NSObject and AnyObject. We could of course use `Optional&lt;Int16&gt;.none`, but someone else may use `Optional&lt;AnyObject&gt;.none` instead. The extra type information is just misleading in this case.<br>&gt; <br>&gt; If you want a single, unique value, use `()`.<br>&gt; <br>&gt; But I&#39;m not sure why you wouldn&#39;t just make this member an Optional&lt;Any&gt; in the first place. Is there some reason that wouldn&#39;t be suitable?<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7559ac465b184ec777f29d37c0e4b374?s=50"></div><header><strong>[Pitch] Add Null struct to Foundation</strong> from <string>Michael Peternell</string> &lt;michael.peternell at gmx.at&gt;<p>June 26, 2016 at 10:00:00pm</p></header><div class="content"><p>Just one question: If I have functions<br></p><p>json_encode(j: JSON) -&gt; String<br>and<br>json_decode(j: String) -&gt; JSON throws<br></p><p>what should be the type of JSON? What should &#39;{&quot;a&quot;:2,&quot;b&quot;:null}&#39; decode to? What should the type of the JSON null value be in Swift? I think String and String? and String??? are wrong in this case.<br></p><p>I&#39;m not saying that I&#39;m convinced that NSNull() is the best way to represent null in this case. I just want to explain the use case that I was thinking of.<br></p><p>-Michael<br></p><p>&gt; Am 26.06.2016 um 19:53 schrieb David Rönnqvist via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; I&#39;m not convinced that Swift needs more than on way of representing the lack of a value. As far as I&#39;ve understood (and remember), NSNull main reason to exist is that it&#39;s an actual object and won&#39;t for example terminate array literals. From what I&#39;ve observed of people who are new to Objective-C, NSNull is a big surprise, both its general existence but also when to expect it (read check for NSNull to make sure one doesn&#39;t crash) and when not to.<br>&gt; <br>&gt; The way I&#39;ve imagined that the same problem would be solved in Swift is with an optional, optional value. That is: if a field in a response can either be set or not, that&#39;s an optional. If that field can either contain a value or the explicit lack of a value that&#39;s another optional:<br>&gt; <br>&gt; let nickname: String?? = &quot;Little Bobby Tables&quot;<br>&gt; <br>&gt; As I see it, this is both safer (requiring that the inner nil value is dealt with), serves as a documentation of when an explicit missing value is expected and when it&#39;s not, and is more consistent. <br>&gt; <br>&gt; I would still expect a newcomer to wonder why there is two question marks in some places, but I&#39;d imagine that that explanation would feel more logical.<br>&gt; <br>&gt; And it&#39;s (still) possible (at least in the latest Swift Playground) to safely unwrap both levels:<br>&gt; <br>&gt; if case let name?? = nickname { }<br>&gt; <br>&gt; - David<br>&gt; <br>&gt; Sent from my iPad<br>&gt; <br>&gt; On 24 Jun 2016, at 11:32, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; Not really. What is the type of Optional.none? `let empty = Optional.none` does not compile, it says &quot;Generic parameter &#39;Wrapped&#39; could not be inferred&quot;. NSNull() is a unique concrete value, and it&#39;s compatible with Objective C, NSObject and AnyObject. We could of course use `Optional&lt;Int16&gt;.none`, but someone else may use `Optional&lt;AnyObject&gt;.none` instead. The extra type information is just misleading in this case.<br>&gt;&gt; <br>&gt;&gt; If you want a single, unique value, use `()`.<br>&gt;&gt; <br>&gt;&gt; But I&#39;m not sure why you wouldn&#39;t just make this member an Optional&lt;Any&gt; in the first place. Is there some reason that wouldn&#39;t be suitable?<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/73a38bb7bc9528e31098defe30e68ea4?s=50"></div><header><strong>[Pitch] Add Null struct to Foundation</strong> from <string>Jean-Daniel Dupas</string> &lt;mailing at xenonium.com&gt;<p>June 26, 2016 at 11:00:00pm</p></header><div class="content"><p>Optional are definitely the best way to represent null when parsing JSON.<br></p><p>&gt; Le 26 juin 2016 à 22:35, Michael Peternell via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Just one question: If I have functions<br>&gt; <br>&gt; json_encode(j: JSON) -&gt; String<br>&gt; and<br>&gt; json_decode(j: String) -&gt; JSON throws<br></p><p>If the string is valid JSON, it return .some() optional, if ti is empty, it returns .none() optional, and if it is invalid, it throws.<br></p><p>&gt; what should be the type of JSON? What should &#39;{&quot;a&quot;:2,&quot;b&quot;:null}&#39; decode to?<br></p><p>Dictionary&lt;String, Any?&gt;<br></p><p>&gt; What should the type of the JSON null value be in Swift?<br></p><p>Optional&lt;Any&gt;.none() <br></p><p>&gt; I think String and String? and String??? are wrong in this case.<br>&gt; <br>&gt; I&#39;m not saying that I&#39;m convinced that NSNull() is the best way to represent null in this case. I just want to explain the use case that I was thinking of.<br></p><p>I hardly can think of a better use case than parsing JSON to demonstrate than Optional are a far better solution to represent a null value than NSNull.<br></p><p>&gt; -Michael<br>&gt; <br>&gt;&gt; Am 26.06.2016 um 19:53 schrieb David Rönnqvist via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt; <br>&gt;&gt; I&#39;m not convinced that Swift needs more than on way of representing the lack of a value. As far as I&#39;ve understood (and remember), NSNull main reason to exist is that it&#39;s an actual object and won&#39;t for example terminate array literals. From what I&#39;ve observed of people who are new to Objective-C, NSNull is a big surprise, both its general existence but also when to expect it (read check for NSNull to make sure one doesn&#39;t crash) and when not to.<br>&gt;&gt; <br>&gt;&gt; The way I&#39;ve imagined that the same problem would be solved in Swift is with an optional, optional value. That is: if a field in a response can either be set or not, that&#39;s an optional. If that field can either contain a value or the explicit lack of a value that&#39;s another optional:<br>&gt;&gt; <br>&gt;&gt; let nickname: String?? = &quot;Little Bobby Tables&quot;<br>&gt;&gt; <br>&gt;&gt; As I see it, this is both safer (requiring that the inner nil value is dealt with), serves as a documentation of when an explicit missing value is expected and when it&#39;s not, and is more consistent. <br>&gt;&gt; <br>&gt;&gt; I would still expect a newcomer to wonder why there is two question marks in some places, but I&#39;d imagine that that explanation would feel more logical.<br>&gt;&gt; <br>&gt;&gt; And it&#39;s (still) possible (at least in the latest Swift Playground) to safely unwrap both levels:<br>&gt;&gt; <br>&gt;&gt; if case let name?? = nickname { }<br>&gt;&gt; <br>&gt;&gt; - David<br>&gt;&gt; <br>&gt;&gt; Sent from my iPad<br>&gt;&gt; <br>&gt;&gt; On 24 Jun 2016, at 11:32, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; Not really. What is the type of Optional.none? `let empty = Optional.none` does not compile, it says &quot;Generic parameter &#39;Wrapped&#39; could not be inferred&quot;. NSNull() is a unique concrete value, and it&#39;s compatible with Objective C, NSObject and AnyObject. We could of course use `Optional&lt;Int16&gt;.none`, but someone else may use `Optional&lt;AnyObject&gt;.none` instead. The extra type information is just misleading in this case.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If you want a single, unique value, use `()`.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But I&#39;m not sure why you wouldn&#39;t just make this member an Optional&lt;Any&gt; in the first place. Is there some reason that wouldn&#39;t be suitable?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7559ac465b184ec777f29d37c0e4b374?s=50"></div><header><strong>[Pitch] Add Null struct to Foundation</strong> from <string>Michael Peternell</string> &lt;michael.peternell at gmx.at&gt;<p>June 27, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; Am 26.06.2016 um 23:03 schrieb Jean-Daniel Dupas via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; Optional are definitely the best way to represent null when parsing JSON.<br>&gt; <br>&gt;&gt; Le 26 juin 2016 à 22:35, Michael Peternell via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; Just one question: If I have functions<br>&gt;&gt; <br>&gt;&gt; json_encode(j: JSON) -&gt; String<br>&gt;&gt; and<br>&gt;&gt; json_decode(j: String) -&gt; JSON throws<br>&gt; <br>&gt; If the string is valid JSON, it return .some() optional, if ti is empty, it returns .none() optional, and if it is invalid, it throws.<br></p><p>again, `.none()` is not fully specified. So your answer isn&#39;t really an answer to my question. There is<br></p><p>let null1: String? = nil<br>let null2: Int? = nil<br>let null3: Any? = nil<br></p><p>and null1, null2 and null3 are three different concrete values. You are making it too easy for yourself when you just say `.none()`, without specifying the type you are referring to.<br></p><p>Also, `let x = nil` does not even compile, for exactly this reason. So again, how do you want to represent a JSON null in Swift?<br></p><p>let json_null: ... = ... // ???<br>let myJSONdict = [&quot;a&quot;:2, &quot;b&quot;:json_null]<br></p><p>-Michael<br></p><p>&gt; <br>&gt;&gt; what should be the type of JSON? What should &#39;{&quot;a&quot;:2,&quot;b&quot;:null}&#39; decode to?<br>&gt; <br>&gt; Dictionary&lt;String, Any?&gt;<br>&gt; <br>&gt;&gt; What should the type of the JSON null value be in Swift?<br>&gt; <br>&gt; Optional&lt;Any&gt;.none() <br>&gt; <br>&gt;&gt; I think String and String? and String??? are wrong in this case.<br>&gt;&gt; <br>&gt;&gt; I&#39;m not saying that I&#39;m convinced that NSNull() is the best way to represent null in this case. I just want to explain the use case that I was thinking of.<br>&gt; <br>&gt; I hardly can think of a better use case than parsing JSON to demonstrate than Optional are a far better solution to represent a null value than NSNull.<br>&gt; <br>&gt;&gt; -Michael<br>&gt;&gt; <br>&gt;&gt;&gt; Am 26.06.2016 um 19:53 schrieb David Rönnqvist via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m not convinced that Swift needs more than on way of representing the lack of a value. As far as I&#39;ve understood (and remember), NSNull main reason to exist is that it&#39;s an actual object and won&#39;t for example terminate array literals. From what I&#39;ve observed of people who are new to Objective-C, NSNull is a big surprise, both its general existence but also when to expect it (read check for NSNull to make sure one doesn&#39;t crash) and when not to.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The way I&#39;ve imagined that the same problem would be solved in Swift is with an optional, optional value. That is: if a field in a response can either be set or not, that&#39;s an optional. If that field can either contain a value or the explicit lack of a value that&#39;s another optional:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let nickname: String?? = &quot;Little Bobby Tables&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As I see it, this is both safer (requiring that the inner nil value is dealt with), serves as a documentation of when an explicit missing value is expected and when it&#39;s not, and is more consistent. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I would still expect a newcomer to wonder why there is two question marks in some places, but I&#39;d imagine that that explanation would feel more logical.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; And it&#39;s (still) possible (at least in the latest Swift Playground) to safely unwrap both levels:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if case let name?? = nickname { }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - David<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On 24 Jun 2016, at 11:32, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Not really. What is the type of Optional.none? `let empty = Optional.none` does not compile, it says &quot;Generic parameter &#39;Wrapped&#39; could not be inferred&quot;. NSNull() is a unique concrete value, and it&#39;s compatible with Objective C, NSObject and AnyObject. We could of course use `Optional&lt;Int16&gt;.none`, but someone else may use `Optional&lt;AnyObject&gt;.none` instead. The extra type information is just misleading in this case.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If you want a single, unique value, use `()`.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; But I&#39;m not sure why you wouldn&#39;t just make this member an Optional&lt;Any&gt; in the first place. Is there some reason that wouldn&#39;t be suitable?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2024f9524b1e51a54c4251abf0c34f50?s=50"></div><header><strong>[Pitch] Add Null struct to Foundation</strong> from <string>Saagar Jha</string> &lt;saagarjha28 at gmail.com&gt;<p>June 27, 2016 at 03:00:00am</p></header><div class="content"><p>Any? or AnyObject?; have your dictionary be something like [String:<br>AnyObject?].<br></p><p>On Sun, Jun 26, 2016 at 3:00 PM Michael Peternell via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; Am 26.06.2016 um 23:03 schrieb Jean-Daniel Dupas via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt;:<br>&gt; &gt;<br>&gt; &gt; Optional are definitely the best way to represent null when parsing JSON.<br>&gt; &gt;<br>&gt; &gt;&gt; Le 26 juin 2016 à 22:35, Michael Peternell via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Just one question: If I have functions<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; json_encode(j: JSON) -&gt; String<br>&gt; &gt;&gt; and<br>&gt; &gt;&gt; json_decode(j: String) -&gt; JSON throws<br>&gt; &gt;<br>&gt; &gt; If the string is valid JSON, it return .some() optional, if ti is empty,<br>&gt; it returns .none() optional, and if it is invalid, it throws.<br>&gt;<br>&gt; again, `.none()` is not fully specified. So your answer isn&#39;t really an<br>&gt; answer to my question. There is<br>&gt;<br>&gt; let null1: String? = nil<br>&gt; let null2: Int? = nil<br>&gt; let null3: Any? = nil<br>&gt;<br>&gt; and null1, null2 and null3 are three different concrete values. You are<br>&gt; making it too easy for yourself when you just say `.none()`, without<br>&gt; specifying the type you are referring to.<br>&gt;<br>&gt; Also, `let x = nil` does not even compile, for exactly this reason. So<br>&gt; again, how do you want to represent a JSON null in Swift?<br>&gt;<br>&gt; let json_null: ... = ... // ???<br>&gt; let myJSONdict = [&quot;a&quot;:2, &quot;b&quot;:json_null]<br>&gt;<br>&gt; -Michael<br>&gt;<br>&gt; &gt;<br>&gt; &gt;&gt; what should be the type of JSON? What should &#39;{&quot;a&quot;:2,&quot;b&quot;:null}&#39; decode<br>&gt; to?<br>&gt; &gt;<br>&gt; &gt; Dictionary&lt;String, Any?&gt;<br>&gt; &gt;<br>&gt; &gt;&gt; What should the type of the JSON null value be in Swift?<br>&gt; &gt;<br>&gt; &gt; Optional&lt;Any&gt;.none()<br>&gt; &gt;<br>&gt; &gt;&gt; I think String and String? and String??? are wrong in this case.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I&#39;m not saying that I&#39;m convinced that NSNull() is the best way to<br>&gt; represent null in this case. I just want to explain the use case that I was<br>&gt; thinking of.<br>&gt; &gt;<br>&gt; &gt; I hardly can think of a better use case than parsing JSON to demonstrate<br>&gt; than Optional are a far better solution to represent a null value than<br>&gt; NSNull.<br>&gt; &gt;<br>&gt; &gt;&gt; -Michael<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; Am 26.06.2016 um 19:53 schrieb David Rönnqvist via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt;:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; I&#39;m not convinced that Swift needs more than on way of representing<br>&gt; the lack of a value. As far as I&#39;ve understood (and remember), NSNull main<br>&gt; reason to exist is that it&#39;s an actual object and won&#39;t for example<br>&gt; terminate array literals. From what I&#39;ve observed of people who are new to<br>&gt; Objective-C, NSNull is a big surprise, both its general existence but also<br>&gt; when to expect it (read check for NSNull to make sure one doesn&#39;t crash)<br>&gt; and when not to.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; The way I&#39;ve imagined that the same problem would be solved in Swift<br>&gt; is with an optional, optional value. That is: if a field in a response can<br>&gt; either be set or not, that&#39;s an optional. If that field can either contain<br>&gt; a value or the explicit lack of a value that&#39;s another optional:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; let nickname: String?? = &quot;Little Bobby Tables&quot;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; As I see it, this is both safer (requiring that the inner nil value is<br>&gt; dealt with), serves as a documentation of when an explicit missing value is<br>&gt; expected and when it&#39;s not, and is more consistent.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; I would still expect a newcomer to wonder why there is two question<br>&gt; marks in some places, but I&#39;d imagine that that explanation would feel more<br>&gt; logical.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; And it&#39;s (still) possible (at least in the latest Swift Playground) to<br>&gt; safely unwrap both levels:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; if case let name?? = nickname { }<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; - David<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Sent from my iPad<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; On 24 Jun 2016, at 11:32, Brent Royal-Gordon via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; Not really. What is the type of Optional.none? `let empty =<br>&gt; Optional.none` does not compile, it says &quot;Generic parameter &#39;Wrapped&#39; could<br>&gt; not be inferred&quot;. NSNull() is a unique concrete value, and it&#39;s compatible<br>&gt; with Objective C, NSObject and AnyObject. We could of course use<br>&gt; `Optional&lt;Int16&gt;.none`, but someone else may use `Optional&lt;AnyObject&gt;.none`<br>&gt; instead. The extra type information is just misleading in this case.<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; If you want a single, unique value, use `()`.<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; But I&#39;m not sure why you wouldn&#39;t just make this member an<br>&gt; Optional&lt;Any&gt; in the first place. Is there some reason that wouldn&#39;t be<br>&gt; suitable?<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; --<br>&gt; &gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt; &gt;&gt;&gt;&gt; Architechies<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-- <br>-Saagar Jha<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160627/ed162bf1/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/73a38bb7bc9528e31098defe30e68ea4?s=50"></div><header><strong>[Pitch] Add Null struct to Foundation</strong> from <string>Jean-Daniel Dupas</string> &lt;mailing at xenonium.com&gt;<p>June 27, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; Le 27 juin 2016 à 00:00, Michael Peternell via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Am 26.06.2016 um 23:03 schrieb Jean-Daniel Dupas via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt; <br>&gt;&gt; Optional are definitely the best way to represent null when parsing JSON.<br>&gt;&gt; <br>&gt;&gt;&gt; Le 26 juin 2016 à 22:35, Michael Peternell via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Just one question: If I have functions<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; json_encode(j: JSON) -&gt; String<br>&gt;&gt;&gt; and<br>&gt;&gt;&gt; json_decode(j: String) -&gt; JSON throws<br>&gt;&gt; <br>&gt;&gt; If the string is valid JSON, it return .some() optional, if ti is empty, it returns .none() optional, and if it is invalid, it throws.<br>&gt; <br>&gt; again, `.none()` is not fully specified. So your answer isn&#39;t really an answer to my question. There is<br></p><p>Optional&lt;Any&gt; (aka Any?) is a fully defined type.<br></p><p>&gt; let null1: String? = nil<br>&gt; let null2: Int? = nil<br>&gt; let null3: Any? = nil<br>&gt; <br>&gt; and null1, null2 and null3 are three different concrete values. You are making it too easy for yourself when you just say `.none()`, without specifying the type you are referring to.<br>&gt; <br>&gt; Also, `let x = nil` does not even compile, for exactly this reason. So again, how do you want to represent a JSON null in Swift?<br>&gt; <br>&gt; let json_null: ... = ... // ???<br>&gt; let myJSONdict = [&quot;a&quot;:2, &quot;b&quot;:json_null]<br></p><p>As I said, myJSONdict can perfectly be represented as a [String:Any?] dictionary.<br></p><p>&gt; -Michael<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; what should be the type of JSON? What should &#39;{&quot;a&quot;:2,&quot;b&quot;:null}&#39; decode to?<br>&gt;&gt; <br>&gt;&gt; Dictionary&lt;String, Any?&gt;<br>&gt;&gt; <br>&gt;&gt;&gt; What should the type of the JSON null value be in Swift?<br>&gt;&gt; <br>&gt;&gt; Optional&lt;Any&gt;.none() <br>&gt;&gt; <br>&gt;&gt;&gt; I think String and String? and String??? are wrong in this case.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m not saying that I&#39;m convinced that NSNull() is the best way to represent null in this case. I just want to explain the use case that I was thinking of.<br>&gt;&gt; <br>&gt;&gt; I hardly can think of a better use case than parsing JSON to demonstrate than Optional are a far better solution to represent a null value than NSNull.<br>&gt;&gt; <br>&gt;&gt;&gt; -Michael<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Am 26.06.2016 um 19:53 schrieb David Rönnqvist via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;m not convinced that Swift needs more than on way of representing the lack of a value. As far as I&#39;ve understood (and remember), NSNull main reason to exist is that it&#39;s an actual object and won&#39;t for example terminate array literals. From what I&#39;ve observed of people who are new to Objective-C, NSNull is a big surprise, both its general existence but also when to expect it (read check for NSNull to make sure one doesn&#39;t crash) and when not to.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The way I&#39;ve imagined that the same problem would be solved in Swift is with an optional, optional value. That is: if a field in a response can either be set or not, that&#39;s an optional. If that field can either contain a value or the explicit lack of a value that&#39;s another optional:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let nickname: String?? = &quot;Little Bobby Tables&quot;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; As I see it, this is both safer (requiring that the inner nil value is dealt with), serves as a documentation of when an explicit missing value is expected and when it&#39;s not, and is more consistent. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I would still expect a newcomer to wonder why there is two question marks in some places, but I&#39;d imagine that that explanation would feel more logical.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; And it&#39;s (still) possible (at least in the latest Swift Playground) to safely unwrap both levels:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; if case let name?? = nickname { }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - David<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 24 Jun 2016, at 11:32, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Not really. What is the type of Optional.none? `let empty = Optional.none` does not compile, it says &quot;Generic parameter &#39;Wrapped&#39; could not be inferred&quot;. NSNull() is a unique concrete value, and it&#39;s compatible with Objective C, NSObject and AnyObject. We could of course use `Optional&lt;Int16&gt;.none`, but someone else may use `Optional&lt;AnyObject&gt;.none` instead. The extra type information is just misleading in this case.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; If you want a single, unique value, use `()`.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; But I&#39;m not sure why you wouldn&#39;t just make this member an Optional&lt;Any&gt; in the first place. Is there some reason that wouldn&#39;t be suitable?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7559ac465b184ec777f29d37c0e4b374?s=50"></div><header><strong>[Pitch] Add Null struct to Foundation</strong> from <string>Michael Peternell</string> &lt;michael.peternell at gmx.at&gt;<p>June 27, 2016 at 06:00:00pm</p></header><div class="content"><p>well, JSONSerialization uses NSNull() as the null value currently. I think this is right, because a JSON null is conceptually a different thing than `nil as Any?` - Representing null as &quot;not any value&quot; a.k.a. `nil as Any?` would be a pun in my opinion.<br></p><p>-Michael<br></p><p>&gt; Am 27.06.2016 um 08:32 schrieb Jean-Daniel Dupas via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; <br>&gt;&gt; Le 27 juin 2016 à 00:00, Michael Peternell via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Am 26.06.2016 um 23:03 schrieb Jean-Daniel Dupas via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Optional are definitely the best way to represent null when parsing JSON.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Le 26 juin 2016 à 22:35, Michael Peternell via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Just one question: If I have functions<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; json_encode(j: JSON) -&gt; String<br>&gt;&gt;&gt;&gt; and<br>&gt;&gt;&gt;&gt; json_decode(j: String) -&gt; JSON throws<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If the string is valid JSON, it return .some() optional, if ti is empty, it returns .none() optional, and if it is invalid, it throws.<br>&gt;&gt; <br>&gt;&gt; again, `.none()` is not fully specified. So your answer isn&#39;t really an answer to my question. There is<br>&gt; <br>&gt; Optional&lt;Any&gt; (aka Any?) is a fully defined type.<br>&gt; <br>&gt;&gt; let null1: String? = nil<br>&gt;&gt; let null2: Int? = nil<br>&gt;&gt; let null3: Any? = nil<br>&gt;&gt; <br>&gt;&gt; and null1, null2 and null3 are three different concrete values. You are making it too easy for yourself when you just say `.none()`, without specifying the type you are referring to.<br>&gt;&gt; <br>&gt;&gt; Also, `let x = nil` does not even compile, for exactly this reason. So again, how do you want to represent a JSON null in Swift?<br>&gt;&gt; <br>&gt;&gt; let json_null: ... = ... // ???<br>&gt;&gt; let myJSONdict = [&quot;a&quot;:2, &quot;b&quot;:json_null]<br>&gt; <br>&gt; As I said, myJSONdict can perfectly be represented as a [String:Any?] dictionary.<br>&gt; <br>&gt;&gt; -Michael<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; what should be the type of JSON? What should &#39;{&quot;a&quot;:2,&quot;b&quot;:null}&#39; decode to?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Dictionary&lt;String, Any?&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What should the type of the JSON null value be in Swift?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Optional&lt;Any&gt;.none() <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think String and String? and String??? are wrong in this case.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;m not saying that I&#39;m convinced that NSNull() is the best way to represent null in this case. I just want to explain the use case that I was thinking of.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I hardly can think of a better use case than parsing JSON to demonstrate than Optional are a far better solution to represent a null value than NSNull.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Michael<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Am 26.06.2016 um 19:53 schrieb David Rönnqvist via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I&#39;m not convinced that Swift needs more than on way of representing the lack of a value. As far as I&#39;ve understood (and remember), NSNull main reason to exist is that it&#39;s an actual object and won&#39;t for example terminate array literals. From what I&#39;ve observed of people who are new to Objective-C, NSNull is a big surprise, both its general existence but also when to expect it (read check for NSNull to make sure one doesn&#39;t crash) and when not to.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The way I&#39;ve imagined that the same problem would be solved in Swift is with an optional, optional value. That is: if a field in a response can either be set or not, that&#39;s an optional. If that field can either contain a value or the explicit lack of a value that&#39;s another optional:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; let nickname: String?? = &quot;Little Bobby Tables&quot;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; As I see it, this is both safer (requiring that the inner nil value is dealt with), serves as a documentation of when an explicit missing value is expected and when it&#39;s not, and is more consistent. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I would still expect a newcomer to wonder why there is two question marks in some places, but I&#39;d imagine that that explanation would feel more logical.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; And it&#39;s (still) possible (at least in the latest Swift Playground) to safely unwrap both levels:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; if case let name?? = nickname { }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; - David<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 24 Jun 2016, at 11:32, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Not really. What is the type of Optional.none? `let empty = Optional.none` does not compile, it says &quot;Generic parameter &#39;Wrapped&#39; could not be inferred&quot;. NSNull() is a unique concrete value, and it&#39;s compatible with Objective C, NSObject and AnyObject. We could of course use `Optional&lt;Int16&gt;.none`, but someone else may use `Optional&lt;AnyObject&gt;.none` instead. The extra type information is just misleading in this case.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; If you want a single, unique value, use `()`.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; But I&#39;m not sure why you wouldn&#39;t just make this member an Optional&lt;Any&gt; in the first place. Is there some reason that wouldn&#39;t be suitable?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/73a38bb7bc9528e31098defe30e68ea4?s=50"></div><header><strong>[Pitch] Add Null struct to Foundation</strong> from <string>Jean-Daniel Dupas</string> &lt;mailing at xenonium.com&gt;<p>June 27, 2016 at 08:00:00pm</p></header><div class="content"><p>JSONSerializer uses NSNull to workaround limitation of the Cocoa collections that do not support to insert nil value.<br></p><p>Moreover, without a null token, it would not be possible to know if the value is present but nil or absent when trying to access it without an additional key lookup.<br></p><p>Swift Optional provides a clean and better way to represent nil in a collection, and so don’t need NSNull at all.<br></p><p>To my point of view, considering JSON null as something different than nil is a misconception. They both are the same thing.<br></p><p>&gt; Le 27 juin 2016 à 18:50, Michael Peternell via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; well, JSONSerialization uses NSNull() as the null value currently. I think this is right, because a JSON null is conceptually a different thing than `nil as Any?` - Representing null as &quot;not any value&quot; a.k.a. `nil as Any?` would be a pun in my opinion.<br>&gt; <br>&gt; -Michael<br>&gt; <br>&gt;&gt; Am 27.06.2016 um 08:32 schrieb Jean-Daniel Dupas via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; Le 27 juin 2016 à 00:00, Michael Peternell via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Am 26.06.2016 um 23:03 schrieb Jean-Daniel Dupas via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Optional are definitely the best way to represent null when parsing JSON.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Le 26 juin 2016 à 22:35, Michael Peternell via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Just one question: If I have functions<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; json_encode(j: JSON) -&gt; String<br>&gt;&gt;&gt;&gt;&gt; and<br>&gt;&gt;&gt;&gt;&gt; json_decode(j: String) -&gt; JSON throws<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If the string is valid JSON, it return .some() optional, if ti is empty, it returns .none() optional, and if it is invalid, it throws.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; again, `.none()` is not fully specified. So your answer isn&#39;t really an answer to my question. There is<br>&gt;&gt; <br>&gt;&gt; Optional&lt;Any&gt; (aka Any?) is a fully defined type.<br>&gt;&gt; <br>&gt;&gt;&gt; let null1: String? = nil<br>&gt;&gt;&gt; let null2: Int? = nil<br>&gt;&gt;&gt; let null3: Any? = nil<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; and null1, null2 and null3 are three different concrete values. You are making it too easy for yourself when you just say `.none()`, without specifying the type you are referring to.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Also, `let x = nil` does not even compile, for exactly this reason. So again, how do you want to represent a JSON null in Swift?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let json_null: ... = ... // ???<br>&gt;&gt;&gt; let myJSONdict = [&quot;a&quot;:2, &quot;b&quot;:json_null]<br>&gt;&gt; <br>&gt;&gt; As I said, myJSONdict can perfectly be represented as a [String:Any?] dictionary.<br>&gt;&gt; <br>&gt;&gt;&gt; -Michael<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; what should be the type of JSON? What should &#39;{&quot;a&quot;:2,&quot;b&quot;:null}&#39; decode to?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Dictionary&lt;String, Any?&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; What should the type of the JSON null value be in Swift?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Optional&lt;Any&gt;.none() <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I think String and String? and String??? are wrong in this case.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I&#39;m not saying that I&#39;m convinced that NSNull() is the best way to represent null in this case. I just want to explain the use case that I was thinking of.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I hardly can think of a better use case than parsing JSON to demonstrate than Optional are a far better solution to represent a null value than NSNull.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -Michael<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Am 26.06.2016 um 19:53 schrieb David Rönnqvist via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I&#39;m not convinced that Swift needs more than on way of representing the lack of a value. As far as I&#39;ve understood (and remember), NSNull main reason to exist is that it&#39;s an actual object and won&#39;t for example terminate array literals. From what I&#39;ve observed of people who are new to Objective-C, NSNull is a big surprise, both its general existence but also when to expect it (read check for NSNull to make sure one doesn&#39;t crash) and when not to.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The way I&#39;ve imagined that the same problem would be solved in Swift is with an optional, optional value. That is: if a field in a response can either be set or not, that&#39;s an optional. If that field can either contain a value or the explicit lack of a value that&#39;s another optional:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; let nickname: String?? = &quot;Little Bobby Tables&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; As I see it, this is both safer (requiring that the inner nil value is dealt with), serves as a documentation of when an explicit missing value is expected and when it&#39;s not, and is more consistent. <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I would still expect a newcomer to wonder why there is two question marks in some places, but I&#39;d imagine that that explanation would feel more logical.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; And it&#39;s (still) possible (at least in the latest Swift Playground) to safely unwrap both levels:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; if case let name?? = nickname { }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; - David<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On 24 Jun 2016, at 11:32, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Not really. What is the type of Optional.none? `let empty = Optional.none` does not compile, it says &quot;Generic parameter &#39;Wrapped&#39; could not be inferred&quot;. NSNull() is a unique concrete value, and it&#39;s compatible with Objective C, NSObject and AnyObject. We could of course use `Optional&lt;Int16&gt;.none`, but someone else may use `Optional&lt;AnyObject&gt;.none` instead. The extra type information is just misleading in this case.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; If you want a single, unique value, use `()`.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; But I&#39;m not sure why you wouldn&#39;t just make this member an Optional&lt;Any&gt; in the first place. Is there some reason that wouldn&#39;t be suitable?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
