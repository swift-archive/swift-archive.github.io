<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bd4126f4ba4ae7f00a2b1e605797a326?s=50"></div><header><strong>Customized Inline Init Closure</strong> from <string>Weston Catron</string> &lt;wcatron at catrondevelopment.com&gt;<p>January  3, 2016 at 01:00:00am</p></header><div class="content"><p>Ability to write an initializer while initializing an object.<br></p><p>Example<br></p><p>let name = “John Apple”;<br>let person = Person {<br>    self.name = nameInput.first() + &quot; &quot; + nameInput.last()<br>    self.dob = dateInput.datetime()<br>    If (self.age() &gt; 18) {<br>        self.taxableStatus = INDEPENDANT<br>    } else {<br>        self.taxableStatus = DEPENDANT<br>    }<br>};<br></p><p>Helpful examples: Objects with many required parameters that are defaulted in the initializers. <br></p><p>SKLabelNode<br></p><p>let label = SKLabelNode(text: &quot;Example&quot;) <br>label.position = CGPoint(x: 0, y: 250); <br>label.fontSize = 34; <br>label.fontColor = UIColor.blackColor() <br>self.addChild(label);<br></p><p>Can become:<br></p><p>let label = SKLabelNode(text: self.package!.title) {<br>    self.position = CGPoint(x: 0, y: 250)<br>    self.fontSize = 34<br>    self.fontColor = UIColor.blackColor() <br>}<br>self.addChild(label)<br></p><p>Readability Instead of a large amount of code setting up temporary variables to pass into an initializer, all initializing code could be wrapped in a closure.<br></p><p>Flexibility Instead of exhaustive initializers covering many use cases. Simpler initializers can be extended as needed. This can also encourage required properties over optional ones that are immediately defined. <br></p><p>Compiler Warnings Closures react the same as initializers within classes, warning users of incomplete implementation of required properties.<br></p><p>Possible disadvantages:<br></p><p>Sloppy Coding Instead of writing complete initializers programmers can just rely on in-line initializers.  <br></p><p>Tried Before I found this feature is also available in C# (https://msdn.microsoft.com/en-us/library/bb397680.aspx &lt;https://msdn.microsoft.com/en-us/library/bb397680.aspx&gt;). Not sure if it was helpful then but many languages since don&#39;t appear to use it. <br></p><p>-Weston<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160103/793387e7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>Customized Inline Init Closure</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>January  3, 2016 at 01:00:00pm</p></header><div class="content"><p>Something similar has been discussed (&quot;method cascading&quot;), and I hope the feature will be considered for Swift 4(?).<br>It is a little bit different, though:<br>&quot;self&quot; would not change its meaning (which imho is a plus), and the syntax is different.<br></p><p>Tino<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bd4126f4ba4ae7f00a2b1e605797a326?s=50"></div><header><strong>Customized Inline Init Closure</strong> from <string>Weston Catron</string> &lt;wcatron at catrondevelopment.com&gt;<p>January  4, 2016 at 01:00:00am</p></header><div class="content"><p>I believe you’re referring to this https://gist.github.com/erica/eb32feb22ba99629285a &lt;https://gist.github.com/erica/eb32feb22ba99629285a&gt; currently being developed. I was initially limiting this proposal to initializers, specifically overriding them verses immediately following them. This is an important distinction because it would require required properties, verses the initializers still taking care of this. This doesn’t make it in opposition to method cascading, it might possibly be a nice addition. It also appears like self is not maintained (in that method cascading proposal anyhow), self is just not required unless variables names overlap. Below is my exercise in keeping self.<br></p><p>Perhaps this alternative would work: <br></p><p>class Foo {<br>    var name:String<br>    <br>    init (name:String) {<br>        self.name = name<br>    }<br>}<br></p><p>class Fee {<br>    var name:String = &quot;Fee-fi&quot;<br>    static func createFoo (name:String) -&gt; Foo {<br>        let foo = Foo {<br>            foo.name = self.name + &quot;-&quot; + name<br>        }<br>        return foo;<br>    }<br>}<br></p><p>let name = &quot;fo-fum&quot;<br></p><p>let other = Fee.createFoo(name);<br>print(other.name) // &quot;Fee-fi-fo-fum&quot;<br></p><p>let another = Foo {<br>    // name = self.name // Ambiguous, self isn&#39;t defined.<br>    // self.name = name // Simplist, but isn&#39;t clear within scopes that contain self (like class functions) It would require a common javascript work around for this, saving a `that = this;` before the closure.<br>    another.name = name // Clear, another is only required when names overlap in scope.<br>    // print((self == nil)) // true<br>}<br></p><p>This has restrictions. An initializer can’t be used directly within a return for example:<br></p><p>class Fee {<br>    var name:String = &quot;Fee-fi&quot;<br>    static func createFoo (name:String) -&gt; Foo {<br>        return Foo {<br>            return.name = self.name + &quot;-&quot; + name<br>        }<br>    }<br>}<br></p><p>That is admittedly awkward, bad form, but not technically wrong.<br></p><p>Unless there is a better alternative, keeping self the same inside the closure as outside seems difficult to do, but not impossible.<br></p><p>-Weston<br></p><p>&gt; On Jan 3, 2016, at 7:39 AM, Tino Heth &lt;2th at gmx.de&gt; wrote:<br>&gt; <br>&gt; Something similar has been discussed (&quot;method cascading&quot;), and I hope the feature will be considered for Swift 4(?).<br>&gt; It is a little bit different, though:<br>&gt; &quot;self&quot; would not change its meaning (which imho is a plus), and the syntax is different.<br>&gt; <br>&gt; Tino<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160104/fbefa7cd/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9f3e3f9871fd088e42df4509aa724367?s=50"></div><header><strong>Customized Inline Init Closure</strong> from <string>Adriano Ferreira</string> &lt;adriano.ferreira at me.com&gt;<p>January  3, 2016 at 09:00:00pm</p></header><div class="content"><p>Hey there!<br></p><p>As a suggestion, check out this simple yet very interesting project called Then &lt;https://github.com/devxoul/Then&gt; by @devxoul.<br></p><p>Best,<br></p><p>— A<br></p><p>&gt; On Jan 3, 2016, at 1:37 AM, Weston Catron via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Ability to write an initializer while initializing an object.<br>&gt; <br>&gt; Example<br>&gt; <br>&gt; let name = “John Apple”;<br>&gt; let person = Person {<br>&gt;     self.name = nameInput.first() + &quot; &quot; + nameInput.last()<br>&gt;     self.dob = dateInput.datetime()<br>&gt;     If (self.age() &gt; 18) {<br>&gt;         self.taxableStatus = INDEPENDANT<br>&gt;     } else {<br>&gt;         self.taxableStatus = DEPENDANT<br>&gt;     }<br>&gt; };<br>&gt; <br>&gt; Helpful examples: Objects with many required parameters that are defaulted in the initializers. <br>&gt; <br>&gt; SKLabelNode<br>&gt; <br>&gt; let label = SKLabelNode(text: &quot;Example&quot;) <br>&gt; label.position = CGPoint(x: 0, y: 250); <br>&gt; label.fontSize = 34; <br>&gt; label.fontColor = UIColor.blackColor() <br>&gt; self.addChild(label);<br>&gt; <br>&gt; Can become:<br>&gt; <br>&gt; let label = SKLabelNode(text: self.package!.title) {<br>&gt;     self.position = CGPoint(x: 0, y: 250)<br>&gt;     self.fontSize = 34<br>&gt;     self.fontColor = UIColor.blackColor() <br>&gt; }<br>&gt; self.addChild(label)<br>&gt; <br>&gt; Readability Instead of a large amount of code setting up temporary variables to pass into an initializer, all initializing code could be wrapped in a closure.<br>&gt; <br>&gt; Flexibility Instead of exhaustive initializers covering many use cases. Simpler initializers can be extended as needed. This can also encourage required properties over optional ones that are immediately defined. <br>&gt; <br>&gt; Compiler Warnings Closures react the same as initializers within classes, warning users of incomplete implementation of required properties.<br>&gt; <br>&gt; Possible disadvantages:<br>&gt; <br>&gt; Sloppy Coding Instead of writing complete initializers programmers can just rely on in-line initializers.  <br>&gt; <br>&gt; Tried Before I found this feature is also available in C# (https://msdn.microsoft.com/en-us/library/bb397680.aspx &lt;https://msdn.microsoft.com/en-us/library/bb397680.aspx&gt;). Not sure if it was helpful then but many languages since don&#39;t appear to use it. <br>&gt; <br>&gt; -Weston<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160103/4e013165/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bd4126f4ba4ae7f00a2b1e605797a326?s=50"></div><header><strong>Customized Inline Init Closure</strong> from <string>Weston Catron</string> &lt;wcatron at catrondevelopment.com&gt;<p>January  4, 2016 at 02:00:00am</p></header><div class="content"><p>Thanks! Then looks very interesting and I’ll reach out to the lead there and see if they’re interested in working together. It definitely highlights similar readability issues I had outlined. I’m curious if there are compiler or other advantages to initializing more properties before continuing in the scope. For example race conditions, mulitthread support, concurrency... If you want to initialize more of an object than any single initializer allows being able to create it and set all desired properties before the system denotes it as officially initialized might be helpful. This would make a distinction between the init then { // do something} model verses init with { // do this to create it }.<br></p><p>-Weston<br></p><p>&gt; On Jan 3, 2016, at 9:09 PM, Adriano Ferreira &lt;adriano.ferreira at me.com&gt; wrote:<br>&gt; <br>&gt; Hey there!<br>&gt; <br>&gt; As a suggestion, check out this simple yet very interesting project called Then &lt;https://github.com/devxoul/Then&gt; by @devxoul.<br>&gt; <br>&gt; Best,<br>&gt; <br>&gt; — A<br>&gt; <br>&gt;&gt; On Jan 3, 2016, at 1:37 AM, Weston Catron via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Ability to write an initializer while initializing an object.<br>&gt;&gt; <br>&gt;&gt; Example<br>&gt;&gt; <br>&gt;&gt; let name = “John Apple”;<br>&gt;&gt; let person = Person {<br>&gt;&gt;     self.name = nameInput.first() + &quot; &quot; + nameInput.last()<br>&gt;&gt;     self.dob = dateInput.datetime()<br>&gt;&gt;     If (self.age() &gt; 18) {<br>&gt;&gt;         self.taxableStatus = INDEPENDANT<br>&gt;&gt;     } else {<br>&gt;&gt;         self.taxableStatus = DEPENDANT<br>&gt;&gt;     }<br>&gt;&gt; };<br>&gt;&gt; <br>&gt;&gt; Helpful examples: Objects with many required parameters that are defaulted in the initializers. <br>&gt;&gt; <br>&gt;&gt; SKLabelNode<br>&gt;&gt; <br>&gt;&gt; let label = SKLabelNode(text: &quot;Example&quot;) <br>&gt;&gt; label.position = CGPoint(x: 0, y: 250); <br>&gt;&gt; label.fontSize = 34; <br>&gt;&gt; label.fontColor = UIColor.blackColor() <br>&gt;&gt; self.addChild(label);<br>&gt;&gt; <br>&gt;&gt; Can become:<br>&gt;&gt; <br>&gt;&gt; let label = SKLabelNode(text: self.package!.title) {<br>&gt;&gt;     self.position = CGPoint(x: 0, y: 250)<br>&gt;&gt;     self.fontSize = 34<br>&gt;&gt;     self.fontColor = UIColor.blackColor() <br>&gt;&gt; }<br>&gt;&gt; self.addChild(label)<br>&gt;&gt; <br>&gt;&gt; Readability Instead of a large amount of code setting up temporary variables to pass into an initializer, all initializing code could be wrapped in a closure.<br>&gt;&gt; <br>&gt;&gt; Flexibility Instead of exhaustive initializers covering many use cases. Simpler initializers can be extended as needed. This can also encourage required properties over optional ones that are immediately defined. <br>&gt;&gt; <br>&gt;&gt; Compiler Warnings Closures react the same as initializers within classes, warning users of incomplete implementation of required properties.<br>&gt;&gt; <br>&gt;&gt; Possible disadvantages:<br>&gt;&gt; <br>&gt;&gt; Sloppy Coding Instead of writing complete initializers programmers can just rely on in-line initializers.  <br>&gt;&gt; <br>&gt;&gt; Tried Before I found this feature is also available in C# (https://msdn.microsoft.com/en-us/library/bb397680.aspx &lt;https://msdn.microsoft.com/en-us/library/bb397680.aspx&gt;). Not sure if it was helpful then but many languages since don&#39;t appear to use it. <br>&gt;&gt; <br>&gt;&gt; -Weston<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160104/996f7bcc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/07fd59204e51d141632898356a6c1d00?s=50"></div><header><strong>Customized Inline Init Closure</strong> from <string>Jo Albright</string> &lt;me at jo2.co&gt;<p>January  4, 2016 at 12:00:00pm</p></header><div class="content"><p>Here is another option. Attached is a playground I was messing around with. There are some weird bugs I was noticing, but don’t quite know if they are important enough to submit (comment out line 54 to see).<br></p><p>I actually like using the $0 so as to allow access to self if using within another type (ex: view controller code below).<br></p><p>Please respond with any potential issues with the code I have written.<br></p><p>- Jo<br></p><p><br></p><p>protocol ClosureInit { init() }<br></p><p>extension ClosureInit {<br></p><p>    init(@noescape b: inout Self -&gt; Void) { self.init(); b(&amp;self) }<br>    <br>}<br></p><p>struct Person: ClosureInit {<br>    <br>    enum GenderType: String { case Male, Female }<br>    <br>    var age: Int = 0<br>    var gender: GenderType?<br>    var name: String?<br>    <br>}<br></p><p>let me = Person {<br>    <br>    $0.name = &quot;Jo&quot;<br>    $0.age = 32<br>    $0.gender = .Male<br>    <br>}<br></p><p>me.age // 32<br></p><p>extension Array: ClosureInit { }<br></p><p>let randomIntArray = [Int] {<br>    <br>    for _ in 0...10 {<br>        <br>        $0.append(Int(arc4random_uniform(100)))<br>        <br>    }<br>    <br>}<br></p><p>randomIntArray<br></p><p>let personArray = [Person] {<br></p><p>    for _ in 0...8 {<br>        <br>        $0.append(Person {<br>            <br>            $0.age = Int(arc4random_uniform(100))<br>            $0.gender = Int(arc4random_uniform(100)) % 2 == 0 ? .Male : .Female // comment this line out to see error<br>            <br>            <br>        })<br>        <br>    }<br></p><p>}<br></p><p>personArray<br></p><p>extension UIView: ClosureInit { }<br></p><p>class ViewController: UIViewController {<br>    <br>    override func viewDidLoad() {<br>        super.viewDidLoad()<br>        <br>        UILabel {<br>            <br>            $0.text = &quot;This is Awesome!&quot;<br>            $0.textColor = UIColor.cyanColor()<br>            $0.frame = CGRect(x: 20, y: 20, width: view.frame.width - 40, height: 40)<br>            view.addSubview($0)<br>            <br>        }<br>        <br>        view.addSubview(UIButton {<br>            <br>            $0.setTitle(&quot;Submit&quot;, forState: .Normal)<br>            $0.frame = CGRect(x: 20, y: 60, width: view.frame.width - 40, height: 40)<br>            <br>        })<br>        <br>        <br>    }<br>    <br>}<br></p><p>let vc = ViewController()<br></p><p>vc.loadViewIfNeeded()<br></p><p>vc.view.subviews<br></p><p><br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160104/5204d231/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: ClosureInit.playground.zip<br>Type: application/zip<br>Size: 11767 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160104/5204d231/attachment.zip&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160104/5204d231/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>Customized Inline Init Closure</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>January  5, 2016 at 03:00:00pm</p></header><div class="content"><p>Very nice! <br>I also think that using $0 is fine as it avoids all the problems with shadowing the outer self and thereby avoids erros and increases readability.<br></p><p>-Thorsten <br></p><p>&gt; Am 04.01.2016 um 18:51 schrieb Jo Albright via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; Here is another option. Attached is a playground I was messing around with. There are some weird bugs I was noticing, but don’t quite know if they are important enough to submit (comment out line 54 to see).<br>&gt; <br>&gt; I actually like using the $0 so as to allow access to self if using within another type (ex: view controller code below).<br>&gt; <br>&gt; Please respond with any potential issues with the code I have written.<br>&gt; <br>&gt; - Jo<br>&gt; <br>&gt; <br>&gt; <br>&gt; protocol ClosureInit { init() }<br>&gt; <br>&gt; extension ClosureInit {<br>&gt; <br>&gt;     init(@noescape b: inout Self -&gt; Void) { self.init(); b(&amp;self) }<br>&gt;     <br>&gt; }<br>&gt; <br>&gt; struct Person: ClosureInit {<br>&gt;     <br>&gt;     enum GenderType: String { case Male, Female }<br>&gt;     <br>&gt;     var age: Int = 0<br>&gt;     var gender: GenderType?<br>&gt;     var name: String?<br>&gt;     <br>&gt; }<br>&gt; <br>&gt; let me = Person {<br>&gt;     <br>&gt;     $0.name = &quot;Jo&quot;<br>&gt;     $0.age = 32<br>&gt;     $0.gender = .Male<br>&gt;     <br>&gt; }<br>&gt; <br>&gt; me.age // 32<br>&gt; <br>&gt; extension Array: ClosureInit { }<br>&gt; <br>&gt; let randomIntArray = [Int] {<br>&gt;     <br>&gt;     for _ in 0...10 {<br>&gt;         <br>&gt;         $0.append(Int(arc4random_uniform(100)))<br>&gt;         <br>&gt;     }<br>&gt;     <br>&gt; }<br>&gt; <br>&gt; randomIntArray<br>&gt; <br>&gt; let personArray = [Person] {<br>&gt; <br>&gt;     for _ in 0...8 {<br>&gt;         <br>&gt;         $0.append(Person {<br>&gt;             <br>&gt;             $0.age = Int(arc4random_uniform(100))<br>&gt;             $0.gender = Int(arc4random_uniform(100)) % 2 == 0 ? .Male : .Female // comment this line out to see error<br>&gt;             <br>&gt;             <br>&gt;         })<br>&gt;         <br>&gt;     }<br>&gt; <br>&gt; }<br>&gt; <br>&gt; personArray<br>&gt; <br>&gt; extension UIView: ClosureInit { }<br>&gt; <br>&gt; class ViewController: UIViewController {<br>&gt;     <br>&gt;     override func viewDidLoad() {<br>&gt;         super.viewDidLoad()<br>&gt;         <br>&gt;         UILabel {<br>&gt;             <br>&gt;             $0.text = &quot;This is Awesome!&quot;<br>&gt;             $0.textColor = UIColor.cyanColor()<br>&gt;             $0.frame = CGRect(x: 20, y: 20, width: view.frame.width - 40, height: 40)<br>&gt;             view.addSubview($0)<br>&gt;             <br>&gt;         }<br>&gt;         <br>&gt;         view.addSubview(UIButton {<br>&gt;             <br>&gt;             $0.setTitle(&quot;Submit&quot;, forState: .Normal)<br>&gt;             $0.frame = CGRect(x: 20, y: 60, width: view.frame.width - 40, height: 40)<br>&gt;             <br>&gt;         })<br>&gt;         <br>&gt;         <br>&gt;     }<br>&gt;     <br>&gt; }<br>&gt; <br>&gt; let vc = ViewController()<br>&gt; <br>&gt; vc.loadViewIfNeeded()<br>&gt; <br>&gt; vc.view.subviews<br>&gt; <br>&gt; <br>&gt; &lt;ClosureInit.playground.zip&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160105/c7735c40/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
