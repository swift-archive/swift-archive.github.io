<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4eebe2ce86d5fff312ce7e66d9a2a652?s=50"></div><header><strong>More flexible guard statement</strong> from <string>Jakob Egger</string> &lt;jakob at eggerapps.at&gt;<p>December 12, 2015 at 06:00:00pm</p></header><div class="content"><p>At the moment &quot;guard let&quot; can only be used for unwrapping optionals. It<br>would be really nice if it could also be used with non-optional values.<br>For example, I&#39;d like to write code like the following<br></p><p>guard <br>    let tableView = self.tableView,<br>    let col = tableView.columnWithIdentifier(&quot;MyColumn&quot;) where col != -1<br>else {<br>    NSBeep()<br>    print(&quot;an error occurred&quot;)<br>    return<br>}<br></p><p>This is not possible, because the second let assignment is non-optional,<br>so I have to write it like this:<br></p><p>guard let tableView = self.tableView else {<br>    NSBeep()<br>    print(&quot;an error occurred&quot;)<br>    return<br>}<br>let col = tableView.columnWithIdentifier(&quot;MyColumn&quot;)<br>guard col != -1 else {<br>    NSBeep()<br>    print(&quot;an error occurred&quot;)<br>    return<br>}<br></p><p>This leads to a lot of duplicated error handling code.<br></p><p>Ideally, I&#39;d also like to mix let &amp; where clauses in a single guard<br>statement, like this:<br></p><p>guard <br>    let tableView = self.tableView,<br>    let col = tableView.columnWithIdentifier(&quot;MyColumn&quot;) where col !=<br>    -1,<br>    let headerCell = tableView.tableColumns[col].headerCell as?<br>    MyTableHeaderCell<br>else {<br>    NSBeep()<br>    print(&quot;an error occurred&quot;)<br>    return<br>}<br></p><p>What do you think? Right now I always end up writing a lot of separate<br>guard statement, and I have a lot of repeated error handling code.<br></p><p><br>Best regards,<br>Jakob<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/27cba2e668c6c6fb1f1d4669b1474397?s=50"></div><header><strong>More flexible guard statement</strong> from <string>Arthur Ariel Sabintsev</string> &lt;arthur at sabintsev.com&gt;<p>December 12, 2015 at 01:00:00pm</p></header><div class="content"><p>Not 100% a fan of this idea. <br></p><p>There’s a parallel thread going on right now about adding unless/until into the stdlib. I think that’s what you may want.<br></p><p>As for mixing guard and where, you can do that already.<br></p><p>Here’s a contrived example:<br></p><p>import UIKit<br></p><p>var a: UIView?<br>var b: UIView?<br></p><p>func contrivedExampleFunc() {<br></p><p>    guard let a = a as? UILabel where a.backgroundColor == .blackColor(),<br>        let b = b as? UIButton where b.backgroundColor == .whiteColor() else {<br>            return<br>    }<br></p><p>}<br></p><p><br>Best,<br></p><p>Arthur / Sabintsev.com<br></p><p>On December 12, 2015 at 12:43:20 PM, Jakob Egger via swift-evolution (swift-evolution at swift.org) wrote:<br></p><p>At the moment &quot;guard let&quot; can only be used for unwrapping optionals. It<br>would be really nice if it could also be used with non-optional values.<br>For example, I&#39;d like to write code like the following<br></p><p>guard  <br>let tableView = self.tableView,<br>let col = tableView.columnWithIdentifier(&quot;MyColumn&quot;) where col != -1<br>else {<br>NSBeep()<br>print(&quot;an error occurred&quot;)<br>return<br>}<br></p><p>This is not possible, because the second let assignment is non-optional,<br>so I have to write it like this:<br></p><p>guard let tableView = self.tableView else {<br>NSBeep()<br>print(&quot;an error occurred&quot;)<br>return<br>}<br>let col = tableView.columnWithIdentifier(&quot;MyColumn&quot;)<br>guard col != -1 else {<br>NSBeep()<br>print(&quot;an error occurred&quot;)<br>return<br>}<br></p><p>This leads to a lot of duplicated error handling code.<br></p><p>Ideally, I&#39;d also like to mix let &amp; where clauses in a single guard<br>statement, like this:<br></p><p>guard  <br>let tableView = self.tableView,<br>let col = tableView.columnWithIdentifier(&quot;MyColumn&quot;) where col !=<br>-1,<br>let headerCell = tableView.tableColumns[col].headerCell as?<br>MyTableHeaderCell<br>else {<br>NSBeep()<br>print(&quot;an error occurred&quot;)<br>return<br>}<br></p><p>What do you think? Right now I always end up writing a lot of separate<br>guard statement, and I have a lot of repeated error handling code.<br></p><p><br>Best regards,<br>Jakob<br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151212/422671a7/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/abf891ba571d5a819ddf547917abe1e1?s=50"></div><header><strong>More flexible guard statement</strong> from <string>Al Skipp</string> &lt;al_skipp at fastmail.fm&gt;<p>December 12, 2015 at 06:00:00pm</p></header><div class="content"><p>How about extending ‘NSTableView’ with a subscript?<br></p><p>extension NSTableView {<br>  subscript(columnID columnID: String) -&gt; Int? {<br>    get {<br>      let c = columnWithIdentifier(columnID)<br>      return c &gt;= 0 ? c : .None<br>    }<br>  }<br>}<br></p><p>tableView[columnID: &quot;MyColumn&quot;]<br></p><p><br>It doesn’t address the general case, but it does introduce a more Swifty way of dealing with non-existent return values in this use case and would enable you to use it with guard.<br></p><p>Al<br></p><p>&gt; On 12 Dec 2015, at 17:43, Jakob Egger via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; At the moment &quot;guard let&quot; can only be used for unwrapping optionals. It<br>&gt; would be really nice if it could also be used with non-optional values.<br>&gt; For example, I&#39;d like to write code like the following<br>&gt; <br>&gt; guard <br>&gt;    let tableView = self.tableView,<br>&gt;    let col = tableView.columnWithIdentifier(&quot;MyColumn&quot;) where col != -1<br>&gt; else {<br>&gt;    NSBeep()<br>&gt;    print(&quot;an error occurred&quot;)<br>&gt;    return<br>&gt; }<br>&gt; <br>&gt; This is not possible, because the second let assignment is non-optional,<br>&gt; so I have to write it like this:<br>&gt; <br>&gt; guard let tableView = self.tableView else {<br>&gt;    NSBeep()<br>&gt;    print(&quot;an error occurred&quot;)<br>&gt;    return<br>&gt; }<br>&gt; let col = tableView.columnWithIdentifier(&quot;MyColumn&quot;)<br>&gt; guard col != -1 else {<br>&gt;    NSBeep()<br>&gt;    print(&quot;an error occurred&quot;)<br>&gt;    return<br>&gt; }<br>&gt; <br>&gt; This leads to a lot of duplicated error handling code.<br>&gt; <br>&gt; Ideally, I&#39;d also like to mix let &amp; where clauses in a single guard<br>&gt; statement, like this:<br>&gt; <br>&gt; guard <br>&gt;    let tableView = self.tableView,<br>&gt;    let col = tableView.columnWithIdentifier(&quot;MyColumn&quot;) where col !=<br>&gt;    -1,<br>&gt;    let headerCell = tableView.tableColumns[col].headerCell as?<br>&gt;    MyTableHeaderCell<br>&gt; else {<br>&gt;    NSBeep()<br>&gt;    print(&quot;an error occurred&quot;)<br>&gt;    return<br>&gt; }<br>&gt; <br>&gt; What do you think? Right now I always end up writing a lot of separate<br>&gt; guard statement, and I have a lot of repeated error handling code.<br>&gt; <br>&gt; <br>&gt; Best regards,<br>&gt; Jakob<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/289e63405066acfc02feee3b7abf39bb?s=50"></div><header><strong>More flexible guard statement</strong> from <string>Zef Houssney</string> &lt;zefmail at gmail.com&gt;<p>December 12, 2015 at 01:00:00pm</p></header><div class="content"><p>Jacob, you actually don’t need to have the redundant guard statement. If you want to assign something to a constant or variable, you just do that before the `guard let`, and you can still use it in the `where`:<br></p><p>let col = tableView.columnWithIdentifier(&quot;MyColumn&quot;)<br>guard let tableView = self.tableView where col != -1 else {<br>  NSBeep()<br>  print(&quot;an error occurred&quot;)<br>  return<br>}<br></p><p>Zef<br></p><p><br></p><p>&gt; On Dec 12, 2015, at 11:23 AM, Al Skipp via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; How about extending ‘NSTableView’ with a subscript?<br>&gt; <br>&gt; extension NSTableView {<br>&gt;  subscript(columnID columnID: String) -&gt; Int? {<br>&gt;    get {<br>&gt;      let c = columnWithIdentifier(columnID)<br>&gt;      return c &gt;= 0 ? c : .None<br>&gt;    }<br>&gt;  }<br>&gt; }<br>&gt; <br>&gt; tableView[columnID: &quot;MyColumn&quot;]<br>&gt; <br>&gt; <br>&gt; It doesn’t address the general case, but it does introduce a more Swifty way of dealing with non-existent return values in this use case and would enable you to use it with guard.<br>&gt; <br>&gt; Al<br>&gt; <br>&gt;&gt; On 12 Dec 2015, at 17:43, Jakob Egger via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; At the moment &quot;guard let&quot; can only be used for unwrapping optionals. It<br>&gt;&gt; would be really nice if it could also be used with non-optional values.<br>&gt;&gt; For example, I&#39;d like to write code like the following<br>&gt;&gt; <br>&gt;&gt; guard <br>&gt;&gt;   let tableView = self.tableView,<br>&gt;&gt;   let col = tableView.columnWithIdentifier(&quot;MyColumn&quot;) where col != -1<br>&gt;&gt; else {<br>&gt;&gt;   NSBeep()<br>&gt;&gt;   print(&quot;an error occurred&quot;)<br>&gt;&gt;   return<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; This is not possible, because the second let assignment is non-optional,<br>&gt;&gt; so I have to write it like this:<br>&gt;&gt; <br>&gt;&gt; guard let tableView = self.tableView else {<br>&gt;&gt;   NSBeep()<br>&gt;&gt;   print(&quot;an error occurred&quot;)<br>&gt;&gt;   return<br>&gt;&gt; }<br>&gt;&gt; let col = tableView.columnWithIdentifier(&quot;MyColumn&quot;)<br>&gt;&gt; guard col != -1 else {<br>&gt;&gt;   NSBeep()<br>&gt;&gt;   print(&quot;an error occurred&quot;)<br>&gt;&gt;   return<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; This leads to a lot of duplicated error handling code.<br>&gt;&gt; <br>&gt;&gt; Ideally, I&#39;d also like to mix let &amp; where clauses in a single guard<br>&gt;&gt; statement, like this:<br>&gt;&gt; <br>&gt;&gt; guard <br>&gt;&gt;   let tableView = self.tableView,<br>&gt;&gt;   let col = tableView.columnWithIdentifier(&quot;MyColumn&quot;) where col !=<br>&gt;&gt;   -1,<br>&gt;&gt;   let headerCell = tableView.tableColumns[col].headerCell as?<br>&gt;&gt;   MyTableHeaderCell<br>&gt;&gt; else {<br>&gt;&gt;   NSBeep()<br>&gt;&gt;   print(&quot;an error occurred&quot;)<br>&gt;&gt;   return<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; What do you think? Right now I always end up writing a lot of separate<br>&gt;&gt; guard statement, and I have a lot of repeated error handling code.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Best regards,<br>&gt;&gt; Jakob<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d92e9730c561c120200f34e7e50ed46?s=50"></div><header><strong>More flexible guard statement</strong> from <string>Jeff Kelley</string> &lt;slaunchaman at gmail.com&gt;<p>December 13, 2015 at 09:00:00pm</p></header><div class="content"><p>The first line of your example would need to use self.tableView, which is optional, so col would be optional as well. The assignment happens after the unwrap.<br></p><p>I find this a lot in my code where I need to chain together a string of optional unwrapping and assignment from those optionals, like so:<br></p><p>&gt; if let foo = foo, bar = foo.bar, baz =foo.baz {<br>&gt; <br>&gt; }<br></p><p>In that case, if bar is a non-optional property of foo, I need to rewrite it like this:<br></p><p>&gt; if let foo = foo, baz = foo.baz {<br>&gt; 	let bar = foo.bar<br>&gt; <br>&gt; }<br></p><p>These examples aren’t too bad, but as you add more layers of unwrapping, it gets more difficult to do without multiple levels of indentation—though this is probably more a code smell than anything else.<br></p><p><br>Jeff Kelley<br></p><p>SlaunchaMan at gmail.com | @SlaunchaMan &lt;https://twitter.com/SlaunchaMan&gt; | jeffkelley.org &lt;http://jeffkelley.org/&gt;<br>&gt; On Dec 12, 2015, at 3:58 PM, Zef Houssney via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Jacob, you actually don’t need to have the redundant guard statement. If you want to assign something to a constant or variable, you just do that before the `guard let`, and you can still use it in the `where`:<br>&gt; <br>&gt; let col = tableView.columnWithIdentifier(&quot;MyColumn&quot;)<br>&gt; guard let tableView = self.tableView where col != -1 else {<br>&gt;  NSBeep()<br>&gt;  print(&quot;an error occurred&quot;)<br>&gt;  return<br>&gt; }<br>&gt; <br>&gt; Zef<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Dec 12, 2015, at 11:23 AM, Al Skipp via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; How about extending ‘NSTableView’ with a subscript?<br>&gt;&gt; <br>&gt;&gt; extension NSTableView {<br>&gt;&gt; subscript(columnID columnID: String) -&gt; Int? {<br>&gt;&gt;   get {<br>&gt;&gt;     let c = columnWithIdentifier(columnID)<br>&gt;&gt;     return c &gt;= 0 ? c : .None<br>&gt;&gt;   }<br>&gt;&gt; }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; tableView[columnID: &quot;MyColumn&quot;]<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; It doesn’t address the general case, but it does introduce a more Swifty way of dealing with non-existent return values in this use case and would enable you to use it with guard.<br>&gt;&gt; <br>&gt;&gt; Al<br>&gt;&gt; <br>&gt;&gt;&gt; On 12 Dec 2015, at 17:43, Jakob Egger via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; At the moment &quot;guard let&quot; can only be used for unwrapping optionals. It<br>&gt;&gt;&gt; would be really nice if it could also be used with non-optional values.<br>&gt;&gt;&gt; For example, I&#39;d like to write code like the following<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; guard <br>&gt;&gt;&gt;  let tableView = self.tableView,<br>&gt;&gt;&gt;  let col = tableView.columnWithIdentifier(&quot;MyColumn&quot;) where col != -1<br>&gt;&gt;&gt; else {<br>&gt;&gt;&gt;  NSBeep()<br>&gt;&gt;&gt;  print(&quot;an error occurred&quot;)<br>&gt;&gt;&gt;  return<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is not possible, because the second let assignment is non-optional,<br>&gt;&gt;&gt; so I have to write it like this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; guard let tableView = self.tableView else {<br>&gt;&gt;&gt;  NSBeep()<br>&gt;&gt;&gt;  print(&quot;an error occurred&quot;)<br>&gt;&gt;&gt;  return<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; let col = tableView.columnWithIdentifier(&quot;MyColumn&quot;)<br>&gt;&gt;&gt; guard col != -1 else {<br>&gt;&gt;&gt;  NSBeep()<br>&gt;&gt;&gt;  print(&quot;an error occurred&quot;)<br>&gt;&gt;&gt;  return<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This leads to a lot of duplicated error handling code.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Ideally, I&#39;d also like to mix let &amp; where clauses in a single guard<br>&gt;&gt;&gt; statement, like this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; guard <br>&gt;&gt;&gt;  let tableView = self.tableView,<br>&gt;&gt;&gt;  let col = tableView.columnWithIdentifier(&quot;MyColumn&quot;) where col !=<br>&gt;&gt;&gt;  -1,<br>&gt;&gt;&gt;  let headerCell = tableView.tableColumns[col].headerCell as?<br>&gt;&gt;&gt;  MyTableHeaderCell<br>&gt;&gt;&gt; else {<br>&gt;&gt;&gt;  NSBeep()<br>&gt;&gt;&gt;  print(&quot;an error occurred&quot;)<br>&gt;&gt;&gt;  return<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What do you think? Right now I always end up writing a lot of separate<br>&gt;&gt;&gt; guard statement, and I have a lot of repeated error handling code.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Best regards,<br>&gt;&gt;&gt; Jakob<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/b9ce3278/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d30e546d655d1c7ece0464791a9a90d5?s=50"></div><header><strong>More flexible guard statement</strong> from <string>Adrian Kashivskyy</string> &lt;adrian.kashivskyy at me.com&gt;<p>December 16, 2015 at 09:00:00am</p></header><div class="content"><p>Arthur,<br></p><p>&gt; There’s a parallel thread going on right now about adding unless/until into the stdlib. I think that’s what you may want.<br></p><p>`guard` cannot be compared to `if` or `unless` because it&#39;s used as an assertion with an early exit, not a condition. Consider the following:<br></p><p>&gt; let x: Int? = 5<br>&gt; <br>&gt; guard let x = x where 1...10 ~= x else {<br>&gt; 	return<br>&gt; }<br>&gt; <br>&gt; // x is unwrapped and between 1 and 10<br>&gt; print(x)<br></p><p>Compare this to `unless`:<br></p><p>&gt; unless let x = x where 1...10 ~= x {<br>&gt; 	// x is unwrapped and between 1 and 10<br>&gt; 	print(x)<br>&gt; } else {<br>&gt; 	return<br>&gt; }<br></p><p>As you can see, `unless` introduces two new scopes and leads to creation of an indentation, which can result in a pyramid of doom. In addition, `guard` requires you to early exit the scope using `return` or `break`, which is not the case when using `unless`.<br></p><p>That being said, I don&#39;t fully understand the original problem, because this is possible:<br></p><p>&gt; guard<br>&gt; 	let col = tableView?.columnWithIdentifier(&quot;MyColumn&quot;),<br>&gt; 	let headerCell = tableView?.tableColumns[0].headerCell as? MyTableHeaderCell<br>&gt; 	where col != -1<br>&gt; else {<br>&gt; 	NSBeep()<br>&gt; 	print(&quot;an error occurred&quot;)<br>&gt; 	return<br>&gt; }<br></p><p><br>Pozdrawiam – Regards,<br>Adrian Kashivskyy<br></p><p>&gt; Wiadomość napisana przez Jeff Kelley via swift-evolution &lt;swift-evolution at swift.org&gt; w dniu 14.12.2015, o godz. 03:45:<br>&gt; <br>&gt; The first line of your example would need to use self.tableView, which is optional, so col would be optional as well. The assignment happens after the unwrap.<br>&gt; <br>&gt; I find this a lot in my code where I need to chain together a string of optional unwrapping and assignment from those optionals, like so:<br>&gt; <br>&gt;&gt; if let foo = foo, bar = foo.bar, baz =foo.baz {<br>&gt;&gt; <br>&gt;&gt; }<br>&gt; <br>&gt; In that case, if bar is a non-optional property of foo, I need to rewrite it like this:<br>&gt; <br>&gt;&gt; if let foo = foo, baz = foo.baz {<br>&gt;&gt; 	let bar = foo.bar<br>&gt;&gt; <br>&gt;&gt; }<br>&gt; <br>&gt; These examples aren’t too bad, but as you add more layers of unwrapping, it gets more difficult to do without multiple levels of indentation—though this is probably more a code smell than anything else.<br>&gt; <br>&gt; <br>&gt; Jeff Kelley<br>&gt; <br>&gt; SlaunchaMan at gmail.com &lt;mailto:SlaunchaMan at gmail.com&gt; | @SlaunchaMan &lt;https://twitter.com/SlaunchaMan&gt; | jeffkelley.org &lt;http://jeffkelley.org/&gt;<br>&gt;&gt; On Dec 12, 2015, at 3:58 PM, Zef Houssney via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Jacob, you actually don’t need to have the redundant guard statement. If you want to assign something to a constant or variable, you just do that before the `guard let`, and you can still use it in the `where`:<br>&gt;&gt; <br>&gt;&gt; let col = tableView.columnWithIdentifier(&quot;MyColumn&quot;)<br>&gt;&gt; guard let tableView = self.tableView where col != -1 else {<br>&gt;&gt;  NSBeep()<br>&gt;&gt;  print(&quot;an error occurred&quot;)<br>&gt;&gt;  return<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Zef<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 12, 2015, at 11:23 AM, Al Skipp via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; How about extending ‘NSTableView’ with a subscript?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; extension NSTableView {<br>&gt;&gt;&gt; subscript(columnID columnID: String) -&gt; Int? {<br>&gt;&gt;&gt;   get {<br>&gt;&gt;&gt;     let c = columnWithIdentifier(columnID)<br>&gt;&gt;&gt;     return c &gt;= 0 ? c : .None<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; tableView[columnID: &quot;MyColumn&quot;]<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It doesn’t address the general case, but it does introduce a more Swifty way of dealing with non-existent return values in this use case and would enable you to use it with guard.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Al<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 12 Dec 2015, at 17:43, Jakob Egger via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; At the moment &quot;guard let&quot; can only be used for unwrapping optionals. It<br>&gt;&gt;&gt;&gt; would be really nice if it could also be used with non-optional values.<br>&gt;&gt;&gt;&gt; For example, I&#39;d like to write code like the following<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; guard <br>&gt;&gt;&gt;&gt;  let tableView = self.tableView,<br>&gt;&gt;&gt;&gt;  let col = tableView.columnWithIdentifier(&quot;MyColumn&quot;) where col != -1<br>&gt;&gt;&gt;&gt; else {<br>&gt;&gt;&gt;&gt;  NSBeep()<br>&gt;&gt;&gt;&gt;  print(&quot;an error occurred&quot;)<br>&gt;&gt;&gt;&gt;  return<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This is not possible, because the second let assignment is non-optional,<br>&gt;&gt;&gt;&gt; so I have to write it like this:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; guard let tableView = self.tableView else {<br>&gt;&gt;&gt;&gt;  NSBeep()<br>&gt;&gt;&gt;&gt;  print(&quot;an error occurred&quot;)<br>&gt;&gt;&gt;&gt;  return<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; let col = tableView.columnWithIdentifier(&quot;MyColumn&quot;)<br>&gt;&gt;&gt;&gt; guard col != -1 else {<br>&gt;&gt;&gt;&gt;  NSBeep()<br>&gt;&gt;&gt;&gt;  print(&quot;an error occurred&quot;)<br>&gt;&gt;&gt;&gt;  return<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This leads to a lot of duplicated error handling code.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Ideally, I&#39;d also like to mix let &amp; where clauses in a single guard<br>&gt;&gt;&gt;&gt; statement, like this:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; guard <br>&gt;&gt;&gt;&gt;  let tableView = self.tableView,<br>&gt;&gt;&gt;&gt;  let col = tableView.columnWithIdentifier(&quot;MyColumn&quot;) where col !=<br>&gt;&gt;&gt;&gt;  -1,<br>&gt;&gt;&gt;&gt;  let headerCell = tableView.tableColumns[col].headerCell as?<br>&gt;&gt;&gt;&gt;  MyTableHeaderCell<br>&gt;&gt;&gt;&gt; else {<br>&gt;&gt;&gt;&gt;  NSBeep()<br>&gt;&gt;&gt;&gt;  print(&quot;an error occurred&quot;)<br>&gt;&gt;&gt;&gt;  return<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What do you think? Right now I always end up writing a lot of separate<br>&gt;&gt;&gt;&gt; guard statement, and I have a lot of repeated error handling code.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Best regards,<br>&gt;&gt;&gt;&gt; Jakob<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/eb43c8f3/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/27cba2e668c6c6fb1f1d4669b1474397?s=50"></div><header><strong>More flexible guard statement</strong> from <string>Arthur Ariel Sabintsev</string> &lt;arthur at sabintsev.com&gt;<p>December 17, 2015 at 04:00:00am</p></header><div class="content"><p>Hi Adrian,<br></p><p>Yes, as noted by others in a separate response, I misunderstood the<br>question. Like you, I still don&#39;t see a problem, as the OP is trying to<br>achieve something that can already be done (see one of my previous posts in<br>this thread).<br></p><p>On Wed, Dec 16, 2015 at 4:07 AM Adrian Kashivskyy via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Arthur,<br>&gt;<br>&gt; There’s a parallel thread going on right now about adding unless/until<br>&gt; into the stdlib. I think that’s what you may want.<br>&gt;<br>&gt;<br>&gt; `guard` cannot be compared to `if` or `unless` because it&#39;s used as an<br>&gt; assertion with an early exit, not a condition. Consider the following:<br>&gt;<br>&gt; let x: Int? = 5<br>&gt;<br>&gt; guard let x = x where 1...10 ~= x else {<br>&gt; return<br>&gt; }<br>&gt;<br>&gt; // x is unwrapped and between 1 and 10<br>&gt;<br>&gt; print(x)<br>&gt;<br>&gt;<br>&gt; Compare this to `unless`:<br>&gt;<br>&gt; unless let x = x where 1...10 ~= x {<br>&gt; // x is unwrapped and between 1 and 10<br>&gt; print(x)<br>&gt; } else {<br>&gt; return<br>&gt; }<br>&gt;<br>&gt;<br>&gt; As you can see, `unless` introduces two new scopes and leads to creation<br>&gt; of an indentation, which can result in a pyramid of doom. In addition,<br>&gt; `guard` requires you to early exit the scope using `return` or `break`,<br>&gt; which is not the case when using `unless`.<br>&gt;<br>&gt; That being said, I don&#39;t fully understand the original problem, because<br>&gt; this is possible:<br>&gt;<br>&gt; guard<br>&gt; let col = tableView?.columnWithIdentifier(&quot;MyColumn&quot;),<br>&gt; let headerCell<br>&gt; = tableView?.tableColumns[0].headerCell as? MyTableHeaderCell<br>&gt;<br>&gt;<br>&gt; where col != -1<br>&gt; else {<br>&gt; NSBeep()<br>&gt;<br>&gt; print(&quot;an error occurred&quot;)<br>&gt;<br>&gt; return<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt;<br>&gt; Pozdrawiam – Regards,<br>&gt; Adrian Kashivskyy<br>&gt;<br>&gt; Wiadomość napisana przez Jeff Kelley via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; w dniu 14.12.2015, o godz. 03:45:<br>&gt;<br>&gt;<br>&gt; The first line of your example would need to use self.tableView, which is<br>&gt; optional, so col would be optional as well. The assignment happens after<br>&gt; the unwrap.<br>&gt;<br>&gt; I find this a lot in my code where I need to chain together a string of<br>&gt; optional unwrapping and assignment from those optionals, like so:<br>&gt;<br>&gt; if let foo = foo, bar = foo.bar, baz =foo.baz {<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt; In that case, if bar is a non-optional property of foo, I need to rewrite<br>&gt; it like this:<br>&gt;<br>&gt; if let foo = foo, baz = foo.baz {<br>&gt; let bar = foo.bar<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt; These examples aren’t too bad, but as you add more layers of unwrapping,<br>&gt; it gets more difficult to do without multiple levels of indentation—though<br>&gt; this is probably more a code smell than anything else.<br>&gt;<br>&gt;<br>&gt; Jeff Kelley<br>&gt;<br>&gt; SlaunchaMan at gmail.com | @SlaunchaMan &lt;https://twitter.com/SlaunchaMan&gt; |<br>&gt; jeffkelley.org<br>&gt;<br>&gt; On Dec 12, 2015, at 3:58 PM, Zef Houssney via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Jacob, you actually don’t need to have the redundant guard statement. If<br>&gt; you want to assign something to a constant or variable, you just do that<br>&gt; before the `guard let`, and you can still use it in the `where`:<br>&gt;<br>&gt; let col = tableView.columnWithIdentifier(&quot;MyColumn&quot;)<br>&gt; guard let tableView = self.tableView where col != -1 else {<br>&gt;  NSBeep()<br>&gt;  print(&quot;an error occurred&quot;)<br>&gt;  return<br>&gt; }<br>&gt;<br>&gt; Zef<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Dec 12, 2015, at 11:23 AM, Al Skipp via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; How about extending ‘NSTableView’ with a subscript?<br>&gt;<br>&gt; extension NSTableView {<br>&gt; subscript(columnID columnID: String) -&gt; Int? {<br>&gt;   get {<br>&gt;     let c = columnWithIdentifier(columnID)<br>&gt;     return c &gt;= 0 ? c : .None<br>&gt;   }<br>&gt; }<br>&gt; }<br>&gt;<br>&gt; tableView[columnID: &quot;MyColumn&quot;]<br>&gt;<br>&gt;<br>&gt; It doesn’t address the general case, but it does introduce a more Swifty<br>&gt; way of dealing with non-existent return values in this use case and would<br>&gt; enable you to use it with guard.<br>&gt;<br>&gt; Al<br>&gt;<br>&gt; On 12 Dec 2015, at 17:43, Jakob Egger via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; At the moment &quot;guard let&quot; can only be used for unwrapping optionals. It<br>&gt; would be really nice if it could also be used with non-optional values.<br>&gt; For example, I&#39;d like to write code like the following<br>&gt;<br>&gt; guard<br>&gt;  let tableView = self.tableView,<br>&gt;  let col = tableView.columnWithIdentifier(&quot;MyColumn&quot;) where col != -1<br>&gt; else {<br>&gt;  NSBeep()<br>&gt;  print(&quot;an error occurred&quot;)<br>&gt;  return<br>&gt; }<br>&gt;<br>&gt; This is not possible, because the second let assignment is non-optional,<br>&gt; so I have to write it like this:<br>&gt;<br>&gt; guard let tableView = self.tableView else {<br>&gt;  NSBeep()<br>&gt;  print(&quot;an error occurred&quot;)<br>&gt;  return<br>&gt; }<br>&gt; let col = tableView.columnWithIdentifier(&quot;MyColumn&quot;)<br>&gt; guard col != -1 else {<br>&gt;  NSBeep()<br>&gt;  print(&quot;an error occurred&quot;)<br>&gt;  return<br>&gt; }<br>&gt;<br>&gt; This leads to a lot of duplicated error handling code.<br>&gt;<br>&gt; Ideally, I&#39;d also like to mix let &amp; where clauses in a single guard<br>&gt; statement, like this:<br>&gt;<br>&gt; guard<br>&gt;  let tableView = self.tableView,<br>&gt;  let col = tableView.columnWithIdentifier(&quot;MyColumn&quot;) where col !=<br>&gt;  -1,<br>&gt;  let headerCell = tableView.tableColumns[col].headerCell as?<br>&gt;  MyTableHeaderCell<br>&gt; else {<br>&gt;  NSBeep()<br>&gt;  print(&quot;an error occurred&quot;)<br>&gt;  return<br>&gt; }<br>&gt;<br>&gt; What do you think? Right now I always end up writing a lot of separate<br>&gt; guard statement, and I have a lot of repeated error handling code.<br>&gt;<br>&gt;<br>&gt; Best regards,<br>&gt; Jakob<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-- <br>Best,<br></p><p>Arthur / Sabintsev.com<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151217/a6c7befa/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
