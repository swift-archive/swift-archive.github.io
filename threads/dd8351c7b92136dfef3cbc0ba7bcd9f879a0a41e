<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Review] SE-0115: Rename Literal	Syntax	Protocols</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>July  2, 2016 at 02:00:00pm</p></header><div class="content"><p>Matthew Johnson via swift-evolution &lt;swift-evolution at ...&gt; writes:<br></p><p>&gt; &gt;&gt;&gt; protocol From&lt;T&gt; {<br>&gt; &gt;&gt;&gt;   init(_ from: T)<br>&gt; &gt;&gt;&gt; }<br>&gt; &gt;&gt; <br>&gt; &gt; With From definition given above, I would define <br>IntLiteralConvertible === <br>&gt; &gt; From&lt;Int&gt;, BoolLiteralConvertible === From&lt;Bool&gt;, etc. That means, <br>if you <br>&gt; &gt; conform to From&lt;T&gt; where T is one of Int, Bool, ... then the type <br>becomes <br>&gt; &gt; &quot;literal convertible&quot;.<br>&gt; <br>&gt; But that doesn&#39;t capture the semantics of these protocols.  See the <br>observations made by the library team<br>&gt; quoted in the motivation section as well as Dave Abrahams&#39; comments <br>quoted in the alternatives section. <br>&gt; None of this changes if we get generic protocols.  <br>&gt; <br>&gt; Protocols aren&#39;t just about the syntax, they are also about semantics.  <br>These protocols encode specific<br>&gt; and important semantics.<br></p><p>But as some of them noted in the discussion, low-level protocols that <br>interact with language syntax can focus on syntax entirely. I&#39;ve not <br>seen this point supported by other team members, though.<br></p><p>Personally, I don&#39;t see any semantics in LiteralConvertible protocols. <br>If a type can be initialized with another type, then we can call it a <br>conversion. And I can&#39;t imagine any case where e.g. Bool that came from <br>a literal should be treated differently from any other Bool.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Review] SE-0115: Rename Literal Syntax Protocols</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>July  2, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jul 2, 2016, at 9:39 AM, Anton Zhilin via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Matthew Johnson via swift-evolution &lt;swift-evolution at ...&gt; writes:<br>&gt; <br>&gt;&gt;&gt;&gt;&gt; protocol From&lt;T&gt; {<br>&gt;&gt;&gt;&gt;&gt;  init(_ from: T)<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; With From definition given above, I would define <br>&gt; IntLiteralConvertible === <br>&gt;&gt;&gt; From&lt;Int&gt;, BoolLiteralConvertible === From&lt;Bool&gt;, etc. That means, <br>&gt; if you <br>&gt;&gt;&gt; conform to From&lt;T&gt; where T is one of Int, Bool, ... then the type <br>&gt; becomes <br>&gt;&gt;&gt; &quot;literal convertible&quot;.<br>&gt;&gt; <br>&gt;&gt; But that doesn&#39;t capture the semantics of these protocols.  See the <br>&gt; observations made by the library team<br>&gt;&gt; quoted in the motivation section as well as Dave Abrahams&#39; comments <br>&gt; quoted in the alternatives section. <br>&gt;&gt; None of this changes if we get generic protocols.  <br>&gt;&gt; <br>&gt;&gt; Protocols aren&#39;t just about the syntax, they are also about semantics.  <br>&gt; These protocols encode specific<br>&gt;&gt; and important semantics.<br>&gt; <br>&gt; But as some of them noted in the discussion, low-level protocols that <br>&gt; interact with language syntax can focus on syntax entirely. I&#39;ve not <br>&gt; seen this point supported by other team members, though.<br></p><p>Yes, but they need to be precise about the syntax they are supporting.  Dave Abrahams has pointed out very clearly why “initialize with an x” is not the correct semantics for the syntax represented by these protocols.<br></p><p>&gt; <br>&gt; Personally, I don&#39;t see any semantics in LiteralConvertible protocols. <br>&gt; If a type can be initialized with another type, then we can call it a <br>&gt; conversion. And I can&#39;t imagine any case where e.g. Bool that came from <br>&gt; a literal should be treated differently from any other Bool.<br></p><p>You might want to take a look at John McCall’s thread about cleaning up the semantics of `MyIntegerLiteralConvertibleType(42)` if you haven’t already.  http://thread.gmane.org/gmane.comp.lang.swift.evolution/19525/focus=19644<br></p><p>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
