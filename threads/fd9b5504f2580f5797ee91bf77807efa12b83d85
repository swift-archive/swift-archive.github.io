<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Should we rename &quot;class&quot; when referring to protocol conformance?</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>May  2, 2016 at 08:00:00am</p></header><div class="content"><p>I was just thinking that:<br>protocol Foo : reference {}<br>might be more to the point than:<br>protocol Foo : class {}<br></p><p>I know that it’s currently a moot point because classes are the only* reference-semantics type of type in Swift, but it’s conceivable that there might some day be others. Anyway, I’m not saying it’s a big deal or anything, I’m just trying to think of any source-breaking changes we might want to make before Swift 3 drops, and this seems like an easy one.<br></p><p>- Dave Sweeris<br></p><p>* I’m not actually sure this is true. I have a very vague recollection about some protocols getting reference semantics in certain circumstances, but the memory is so hazy I’m not sure I trust it. Also I can’t remember if the “indirect” keyword in enums affects the semantics.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/fd9b3d85/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>Should we rename &quot;class&quot; when referring to protocol conformance?</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>May  2, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On May 2, 2016, at 6:55 AM, David Sweeris via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; I was just thinking that:<br>&gt; protocol Foo : reference {}<br>&gt; might be more to the point than:<br>&gt; protocol Foo : class {}<br>&gt; <br>&gt; I know that it’s currently a moot point because classes are the only* reference-semantics type of type in Swift, but it’s conceivable that there might some day be others.<br></p><p>Functions/closures have reference semantics, but they can&#39;t conform to protocols.  Anyway, that&#39;s not the important question; the important question is why we would add a new kind of first-class reference type to the language — that can implement class protocols, no less — instead of, at most, calling it a new kind of class.<br></p><p>&gt; Anyway, I’m not saying it’s a big deal or anything, I’m just trying to think of any source-breaking changes we might want to make before Swift 3 drops, and this seems like an easy one.<br>&gt; <br>&gt; - Dave Sweeris<br>&gt; <br>&gt; * I’m not actually sure this is true. I have a very vague recollection about some protocols getting reference semantics in certain circumstances, but the memory is so hazy I’m not sure I trust it. Also I can’t remember if the “indirect” keyword in enums affects the semantics.<br></p><p>Other than permitting otherwise-infinite types, no.<br></p><p>John.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/c64a94cc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Should we rename &quot;class&quot; when referring to protocol conformance?</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>May  2, 2016 at 01:00:00pm</p></header><div class="content"><p>On May 2, 2016, at 13:10, John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt; wrote:<br></p><p>&gt;&gt; On May 2, 2016, at 6:55 AM, David Sweeris via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; I was just thinking that:<br>&gt;&gt; protocol Foo : reference {}<br>&gt;&gt; might be more to the point than:<br>&gt;&gt; protocol Foo : class {}<br>&gt;&gt; <br>&gt;&gt; I know that it’s currently a moot point because classes are the only* reference-semantics type of type in Swift, but it’s conceivable that there might some day be others.<br>&gt; <br>&gt; Functions/closures have reference semantics, but they can&#39;t conform to protocols.  Anyway, that&#39;s not the important question; the important question is why we would add a new kind of first-class reference type to the language — that can implement class protocols, no less — instead of, at most, calling it a new kind of class.<br></p><p>Dunno, I wasn’t thinking about anything in particular... If there&#39;s one thing I&#39;ve learned on this mailing list, it&#39;s that the state of the art WRT to programming languages has changed a lot since I was in school, and, at least to me, it seems like the pace at which it’s changing is increasing as well. This was just an off-the-cuff idea for making the language as future-proof as possible. I don’t have an concrete examples, other than maybe “mixins”. I don’t know anything about them, other than their name seems misspelled to me. Would they even be a separate type of type, or would they get glued onto structs, enums, and classes?<br></p><p>Anyway, I just wanted to raise the issue before Swift 3 comes out, since with v3 we&#39;re aiming for source-compatibility going forward.<br></p><p>- Dave Sweeris (who is apparently trying to get the day’s quota for whacky ideas out of the way early :-) )<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/288b2f42/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>Should we rename &quot;class&quot; when referring to protocol conformance?</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>May  3, 2016 at 06:00:00pm</p></header><div class="content"><p>+1 Yes please, get rid of the `class` keyword from protocols already and replace it with better implicit protocols.  <br></p><p>I posted the idea two weeks ago, but no one answered to it: https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160418/015568.html  <br></p><p>Replacing `class` with something like `protocol AnyReference` is the first step to add a few more implicit protocols like `AnyValue` to Swift. We could build value or reference type specific libraries and overload correctly.<br></p><p>--  <br>Adrian Zubarev  <br></p><p>Am 2. Mai 2016 um 15:55:15, David Sweeris via swift-evolution (swift-evolution at swift.org(mailto:swift-evolution at swift.org)) schrieb:<br></p><p>&gt;  <br>&gt; I was just thinking that:  <br>&gt; &gt; protocol Foo : reference {}<br>&gt; &gt;  <br>&gt;  <br>&gt; might be more to the point than:<br>&gt;  <br>&gt; &gt; protocol Foo : class {}<br>&gt; &gt;  <br>&gt;  <br>&gt;  <br>&gt; I know that it’s currently a moot point because classes are the only* reference-semantics type of type in Swift, but it’s conceivable that there might some day be others. Anyway, I’m not saying it’s a big deal or anything, I’m just trying to think of any source-breaking changes we might want to make before Swift 3 drops, and this seems like an easy one.  <br>&gt;  <br>&gt; - Dave Sweeris  <br>&gt;  <br>&gt; * I’m not actually sure this is true. I have a very vague recollection about some protocols getting reference semantics in certain circumstances, but the memory is so hazy I’m not sure I trust it. Also I can’t remember if the “indirect” keyword in enums affects the semantics. _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160503/00c9b14b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>Should we rename &quot;class&quot; when referring to protocol conformance?</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>May  3, 2016 at 08:00:00pm</p></header><div class="content"><p>I’d love to see Swift go in this direction with protocols:<br></p><p>                   +-------+<br>                   |  Any  |<br>                   +---+---+<br>                       |<br>         +-------------+-------------+<br>         |                           |<br>  +------+-------+             +-----+----+<br>  | AnyReference |             | AnyValue |<br>  +------+-------+             +-----+----+<br>         |                           |<br>+--------+---------+  ....................................<br>| AnyObject (ObjC) |  : Optionally Swift could also have :<br>+------------------+  :              |                   :<br>                      :      +-------+--------+          :<br>                      :      |                |          :<br>                      : +----+----+     +-----+-----+    :<br>                      : | AnyEnum |     | AnyStruct |    :<br>                      : +----+----+     +-----+-----+    :<br>                      ....................................<br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 3. Mai 2016 bei 18:42:15, Adrian Zubarev via swift-evolution (swift-evolution at swift.org) schrieb:<br></p><p>+1 Yes please, get rid of the `class` keyword from protocols already and replace it with better implicit  protocols.<br></p><p>I posted the idea two weeks ago, but no one answered to it: https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160418/015568.html<br></p><p>Replacing `class` with something like `protocol AnyReference` is the first step to add a few more implicit protocols like `AnyValue` to Swift. We could build value or reference type specific libraries and overload correctly.<br></p><p>-- <br>Adrian Zubarev<br>Am 2. Mai 2016 um 15:55:15, David Sweeris via swift-evolution (swift-evolution at swift.org) schrieb:<br></p><p>I was just thinking that:<br>protocol Foo : reference {}<br>might be more to the point than:<br>protocol Foo : class {}<br></p><p>I know that it’s currently a moot point because classes are the only* reference-semantics type of type in Swift, but it’s conceivable that there might some day be others. Anyway, I’m not saying it’s a big deal or anything, I’m just trying to think of any source-breaking changes we might want to make before Swift 3 drops, and this seems like an easy one.<br></p><p>- Dave Sweeris<br></p><p>* I’m not actually sure this is true. I have a very vague recollection about some protocols getting reference semantics in certain circumstances, but the memory is so hazy I’m not sure I trust it. Also I can’t remember if the “indirect” keyword in enums affects the semantics.<br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160503/52114793/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>Should we rename &quot;class&quot; when referring to protocol conformance?</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>May  5, 2016 at 09:00:00am</p></header><div class="content"><p>I&#39;ve been thinking of a different name as well — but I was concerned by the fact that &quot;class&quot; is lowercase, while all &quot;regular&quot; types start uppercase…<br>I&#39;d prefer &quot;Class&quot; or &quot;Reference&quot; over &quot;reference&quot;.<br></p><p>Tino<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
