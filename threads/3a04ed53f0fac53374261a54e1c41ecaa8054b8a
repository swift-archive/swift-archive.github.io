<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfa18de3b61b01a87722ae70843478d?s=50"></div><header><strong>Draft Proposal: Declare variables in &#39;case&#39; labels with multiple patterns</strong> from <string>Andrii Chernenko</string> &lt;mail at andrii.ch&gt;<p>March 15, 2016 at 09:00:00pm</p></header><div class="content"><p>Hello everyone,<br></p><p>This is a great proposal and indeed it would be nice to have this feature<br>in Swift.<br></p><p>However, there is another use case I have in mind. It would be nice to<br>match multiple cases with associated values of different types which<br>conform to a certain protocol.<br></p><p>I&#39;ll illustrate with an example. Suppose I am implementing REST API<br>requests using enums.<br></p><p>protocol Serializable {<br>  func serialize() -&gt; NSData<br>}<br></p><p>struct CreateFooRequest: Serializable {<br>  let title: String<br>  let date: NSDate<br>}<br></p><p>struct UpdateFooRequest: Serializable {}<br></p><p>...<br></p><p>enum APIRequest {<br>    case .CreateFoo(request: CreateFooRequest),<br>    case .UpdateFoo(request: UpdateFooRequest)<br>    ...<br></p><p>    var HTTPRequest: NSHTTPRequest { ... }<br></p><p>    var URL: NSURL { ... }<br></p><p>    var headers: [String: String] { ... }<br></p><p>    var HTTPBody: NSData? {<br>        switch self {<br>          case let .CreateFoo(request):<br>            return request.serialize()<br>          case let .UpdateFoo(request):<br>            return request.serialize()<br>          ...<br>        }<br>    }<br>}<br></p><p>Current proposal aims to eliminate repetitiveness such as in the HTTPBody<br>property of the APIRequest enum, but does it cover the case where<br>associated value types are different, but conform to the same protocol? It<br>is not clear to me.<br></p><p>Just in case, here&#39;s the link to the proposal:<br>https://github.com/apple/swift-evolution/pull/119<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160315/3a044b8a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Draft Proposal: Declare variables in &#39;case&#39; labels with multiple patterns</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>March 16, 2016 at 09:00:00am</p></header><div class="content"><p>You should be able to do this today using &quot;let x as Y&quot;:<br></p><p>protocol Serializable {<br>  func serialize() -&gt; String?<br>}<br></p><p>struct CreateFooRequest: Serializable {<br>  let title: String<br>  func serialize() -&gt; String? { return nil }<br>}<br></p><p>struct UpdateFooRequest: Serializable {<br>  func serialize() -&gt; String? { return nil}<br>}<br></p><p>enum APIRequest {<br>    case CreateFoo(request: CreateFooRequest)<br>    case UpdateFoo(request: UpdateFooRequest)<br>    //...<br></p><p>    var HTTPBody: String? {<br>        switch self {<br>        case let .CreateFoo(request as Serializable),<br>            let .UpdateFoo(request as Serializable): <br>          return request.serialize()<br>        }<br>    }<br>}<br></p><p>I don&#39;t think we want to automatically try to infer a common type—it&#39;s too easy for the compiler to pick a surprising type that way—but it&#39;s there when you need it.<br></p><p>Jordan<br></p><p><br>&gt; On Mar 15, 2016, at 14:17 , Andrii Chernenko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello everyone,<br>&gt; <br>&gt; This is a great proposal and indeed it would be nice to have this feature in Swift.<br>&gt; <br>&gt; However, there is another use case I have in mind. It would be nice to match multiple cases with associated values of different types which conform to a certain protocol.<br>&gt; <br>&gt; I&#39;ll illustrate with an example. Suppose I am implementing REST API requests using enums.<br>&gt; <br>&gt; protocol Serializable {<br>&gt;   func serialize() -&gt; NSData<br>&gt; }<br>&gt; <br>&gt; struct CreateFooRequest: Serializable {<br>&gt;   let title: String<br>&gt;   let date: NSDate<br>&gt; }<br>&gt; <br>&gt; struct UpdateFooRequest: Serializable {}<br>&gt; <br>&gt; ...<br>&gt; <br>&gt; enum APIRequest {<br>&gt;     case .CreateFoo(request: CreateFooRequest),<br>&gt;     case .UpdateFoo(request: UpdateFooRequest)<br>&gt;     ...<br>&gt; <br>&gt;     var HTTPRequest: NSHTTPRequest { ... }<br>&gt; <br>&gt;     var URL: NSURL { ... }<br>&gt; <br>&gt;     var headers: [String: String] { ... }<br>&gt; <br>&gt;     var HTTPBody: NSData? {<br>&gt;         switch self {<br>&gt;           case let .CreateFoo(request): <br>&gt;             return request.serialize()<br>&gt;           case let .UpdateFoo(request): <br>&gt;             return request.serialize()<br>&gt;           ...<br>&gt;         }<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; Current proposal aims to eliminate repetitiveness such as in the HTTPBody property of the APIRequest enum, but does it cover the case where associated value types are different, but conform to the same protocol? It is not clear to me.<br>&gt; <br>&gt; Just in case, here&#39;s the link to the proposal: https://github.com/apple/swift-evolution/pull/119 &lt;https://github.com/apple/swift-evolution/pull/119&gt;_______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160316/66c5dd41/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
