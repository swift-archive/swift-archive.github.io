<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/abab8a25de5c943e3481fd3f95f3d89a?s=50"></div><header><strong>Initializing constant object graph with cycles</strong> from <string>Антон Миронов</string> &lt;antonvmironov at gmail.com&gt;<p>November  4, 2016 at 11:00:00am</p></header><div class="content"><p>Hi all,<br></p><p>I want to initialize constant object graph with cycles. I&#39;ve considered two workarounds, but this is not a way I want it to be.<br></p><p>Here is an example:<br>```<br>// I have a context<br>protocol Context : class {<br>  /* some */<br>}<br></p><p>// I have an object that has sense only in context<br>class ObjectInContext {<br>  private weak var context: Context?<br>  <br>  init(context: Context) {<br>    self.context = context<br>  }<br>}<br></p><p>// This is what I want to do<br>// The object graph has a cycle, but there is no a retain cycle<br>class ContextA : Context {<br>  let object: ObjectInContext<br>  <br>  init() {<br>    self.object = ObjectInContext(context: self) // this code will not compile for many good reasons<br>  }<br>}<br></p><p>// This is workaround #1<br>// It looks bad for 2 reasons: implicitly unwrapped optional, it is easy to forget to initialize object<br>class ContextB : Context {<br>  var object: ObjectInContext!<br>  <br>  init() {<br>    self.object = ObjectInContext(context: self)<br>  }<br>}<br></p><p>// This is workaround #2<br>// It looks bad because it is even easier to forget to initialize object in init<br>class ContextC : Context {<br>  lazy var object: ObjectInContext = ObjectInContext(context: self)<br>  <br>  init() {<br>    let _ = self.object // lazy is not atomic so I rather initialize it here<br>  }<br>}<br>```<br></p><p>Does anyone have any ideas how can I do this without workarounds?<br></p><p>Thanks,<br>Anton Mironov<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f38cb038c3d9ae705c4db3b5b5272906?s=50"></div><header><strong>Initializing constant object graph with cycles</strong> from <string>Greg Parker</string> &lt;gparker at apple.com&gt;<p>November  7, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Nov 4, 2016, at 2:57 AM, Anton Mironov via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; I want to initialize constant object graph with cycles. I&#39;ve considered two workarounds, but this is not a way I want it to be.<br>&gt; <br>&gt; Here is an example:<br>&gt; ```<br>&gt; // I have a context<br>&gt; protocol Context : class {<br>&gt;  /* some */<br>&gt; }<br>&gt; <br>&gt; // I have an object that has sense only in context<br>&gt; class ObjectInContext {<br>&gt;  private weak var context: Context?<br>&gt; <br>&gt;  init(context: Context) {<br>&gt;    self.context = context<br>&gt;  }<br>&gt; }<br>&gt; <br>&gt; // This is what I want to do<br>&gt; // The object graph has a cycle, but there is no a retain cycle<br>&gt; class ContextA : Context {<br>&gt;  let object: ObjectInContext<br>&gt; <br>&gt;  init() {<br>&gt;    self.object = ObjectInContext(context: self) // this code will not compile for many good reasons<br>&gt;  }<br>&gt; }<br>&gt; <br>&gt; // This is workaround #1<br>&gt; // It looks bad for 2 reasons: implicitly unwrapped optional, it is easy to forget to initialize object<br>&gt; class ContextB : Context {<br>&gt;  var object: ObjectInContext!<br>&gt; <br>&gt;  init() {<br>&gt;    self.object = ObjectInContext(context: self)<br>&gt;  }<br>&gt; }<br></p><p>The IUO is the typical pattern here. <br></p><p>Forgetting to initialize an IUO is less of a problem than it would be in C or ObjC. Access to an IUO is checked at runtime. If you forget to initialize self.object then the process will deliberately halt the first time you try to use it.<br></p><p><br>-- <br>Greg Parker     gparker at apple.com &lt;mailto:gparker at apple.com&gt;     Runtime Wrangler<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20161107/22a5096e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/abab8a25de5c943e3481fd3f95f3d89a?s=50"></div><header><strong>Initializing constant object graph with cycles</strong> from <string>Антон Миронов</string> &lt;antonvmironov at gmail.com&gt;<p>November  8, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Nov 8, 2016, at 4:17 AM, Greg Parker &lt;gparker at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Nov 4, 2016, at 2:57 AM, Anton Mironov via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi all,<br>&gt;&gt; <br>&gt;&gt; I want to initialize constant object graph with cycles. I&#39;ve considered two workarounds, but this is not a way I want it to be.<br>&gt;&gt; <br>&gt;&gt; Here is an example:<br>&gt;&gt; ```<br>&gt;&gt; // I have a context<br>&gt;&gt; protocol Context : class {<br>&gt;&gt;  /* some */<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; // I have an object that has sense only in context<br>&gt;&gt; class ObjectInContext {<br>&gt;&gt;  private weak var context: Context?<br>&gt;&gt; <br>&gt;&gt;  init(context: Context) {<br>&gt;&gt;    self.context = context<br>&gt;&gt;  }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; // This is what I want to do<br>&gt;&gt; // The object graph has a cycle, but there is no a retain cycle<br>&gt;&gt; class ContextA : Context {<br>&gt;&gt;  let object: ObjectInContext<br>&gt;&gt; <br>&gt;&gt;  init() {<br>&gt;&gt;    self.object = ObjectInContext(context: self) // this code will not compile for many good reasons<br>&gt;&gt;  }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; // This is workaround #1<br>&gt;&gt; // It looks bad for 2 reasons: implicitly unwrapped optional, it is easy to forget to initialize object<br>&gt;&gt; class ContextB : Context {<br>&gt;&gt;  var object: ObjectInContext!<br>&gt;&gt; <br>&gt;&gt;  init() {<br>&gt;&gt;    self.object = ObjectInContext(context: self)<br>&gt;&gt;  }<br>&gt;&gt; }<br>&gt; <br>&gt; The IUO is the typical pattern here. <br>&gt; <br>&gt; Forgetting to initialize an IUO is less of a problem than it would be in C or ObjC. Access to an IUO is checked at runtime. If you forget to initialize self.object then the process will deliberately halt the first time you try to use it.<br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Greg Parker     gparker at apple.com &lt;mailto:gparker at apple.com&gt;     Runtime Wrangler<br></p><p>I agree that IUO is the best solution for now.<br>Sometimes I search though Scala to find the best way of doing things. They&#39;ve came up with lazy as the best practice for such cases.<br></p><p>I’ve found (SR-1042 Make &quot;lazy var&quot; threadsafe)[https://bugs.swift.org/browse/SR-1042]. Implementing this will help. But I am not sure if it will be implemented any time soon.<br></p><p>Thanks,<br>Anton Mironov<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20161108/8718f8d7/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[swift-dev] Initializing constant object graph with cycles</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>November  4, 2016 at 04:00:00am</p></header><div class="content"><p>(Crossposted to swift-users; swift-dev is for development of the Swift compiler and standard library, not discussions about how to use Swift.)<br></p><p>&gt; On Nov 4, 2016, at 2:57 AM, Anton Mironov via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; // This is workaround #1<br>&gt; // It looks bad for 2 reasons: implicitly unwrapped optional, it is easy to forget to initialize object<br>&gt; class ContextB : Context {<br>&gt;  var object: ObjectInContext!<br>&gt; <br>&gt;  init() {<br>&gt;    self.object = ObjectInContext(context: self)<br>&gt;  }<br>&gt; }<br></p><p>Try this:<br></p><p>	class ContextB: Context {<br>		private var _object: ObjectInContext?<br>		var object: ObjectInContext { return _object! }<br>		<br>		init() {<br>			_object = nil<br>			// Note that self is now fully initialized<br>			_object = ObjectInContext(context: self)<br>		}<br>	}<br></p><p>As long as you can trust yourself not to forget to initialize `_object` within `init()` or mutate `_object` within private scope, this is about as safe as anything you could hope for.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/abab8a25de5c943e3481fd3f95f3d89a?s=50"></div><header><strong>[swift-dev] Initializing constant object graph with cycles</strong> from <string>Антон Миронов</string> &lt;antonvmironov at gmail.com&gt;<p>November  4, 2016 at 03:00:00pm</p></header><div class="content"><p>This workaround looks better, but it is still workaround.<br>I can trust myself this month and month after that. But I will look at this code after a while (or someone else will look at it) and will not remember/know that there has to be some initializations.<br>I am building tools that handle some common cases of synchronization and etc. These tools must be robust and beautiful so I can advice anyone to use them. None will adopt these tools if they introduce some new points of failure.<br></p><p><br>&gt; On Nov 4, 2016, at 1:35 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt; (Crossposted to swift-users; swift-dev is for development of the Swift compiler and standard library, not discussions about how to use Swift.)<br>&gt; <br>&gt;&gt; On Nov 4, 2016, at 2:57 AM, Anton Mironov via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; // This is workaround #1<br>&gt;&gt; // It looks bad for 2 reasons: implicitly unwrapped optional, it is easy to forget to initialize object<br>&gt;&gt; class ContextB : Context {<br>&gt;&gt; var object: ObjectInContext!<br>&gt;&gt; <br>&gt;&gt; init() {<br>&gt;&gt;   self.object = ObjectInContext(context: self)<br>&gt;&gt; }<br>&gt;&gt; }<br>&gt; <br>&gt; Try this:<br>&gt; <br>&gt; 	class ContextB: Context {<br>&gt; 		private var _object: ObjectInContext?<br>&gt; 		var object: ObjectInContext { return _object! }<br>&gt; 		<br>&gt; 		init() {<br>&gt; 			_object = nil<br>&gt; 			// Note that self is now fully initialized<br>&gt; 			_object = ObjectInContext(context: self)<br>&gt; 		}<br>&gt; 	}<br>&gt; <br>&gt; As long as you can trust yourself not to forget to initialize `_object` within `init()` or mutate `_object` within private scope, this is about as safe as anything you could hope for.<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
