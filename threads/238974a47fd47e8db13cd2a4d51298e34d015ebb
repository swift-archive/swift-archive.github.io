<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c40db4457ab2c91a0d8006da31b177c6?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Trent Nadeau</string> &lt;tanadeau at gmail.com&gt;<p>January 29, 2016 at 05:00:00pm</p></header><div class="content"><p>https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md<br></p><p># Use `inout` at Function Call Sites<br></p><p>* Proposal: TBD<br>* Author(s): [Trent Nadeau](http://github.com/tanadeau)<br>* Status: TBD<br>* Review manager: TBD<br></p><p>## Introduction<br></p><p>Currently when a function has `inout` parameters, the arguments are<br>passed with the `&amp;` prefix operator. For example:<br></p><p>```swift<br>func add1(inout num: Int) {<br>    num += 1<br>}<br></p><p>var n = 5<br>add1(&amp;n) // n is now 6<br>```<br></p><p>This operator does not fit with the rest of the language nor how the<br>parameter is written at the function declaration. It should be<br>replaced so that `inout` is used in both locations so that the call<br>site above would instead be written as:<br></p><p>```swift<br>add1(inout n) // symmetric and now obvious that n can change<br>```<br></p><p>*Discussion thread TBD*<br></p><p>## Motivation<br></p><p>The `&amp;` prefix operator is a holdover from C where it is usually read<br>as &quot;address of&quot; and creates a pointer. While very useful in C due to<br>its pervasive use of pointers, its meaning is not the same and<br>introduces an unnecessary syntactic stumbling block from users coming<br>from C. Removing this operator and using `inout` removes this<br>stumbling block due to the semantic change.<br></p><p>This operator is also disconnected from how the function declaration<br>is written and does not imply that the argument may (and likely will)<br>change. Using `inout` stands out, making it clear on first read that<br>the variable may change.<br></p><p>It is also possible that Swift may add Rust-like borrowing in the<br>future. In that case, the `&amp;` symbol would be better used for a<br>borrowed reference. Note that Rust uses the same symbol for declaring<br>a borrowed reference and creating one, creating a nice symmetry in<br>that respect of the language. I think Swift would want to have such<br>symmetry as well.<br></p><p>## Detailed design<br></p><p>```<br>in-out-expression → inout identifier<br>```<br></p><p>## Alternatives Considered<br></p><p>Keeping the syntax as it currently is.<br></p><p><br>-- <br>Trent Nadeau<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/23895ebb/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>January 29, 2016 at 03:00:00pm</p></header><div class="content"><p>+1.<br></p><p>-- E<br></p><p>&gt; On Jan 29, 2016, at 3:44 PM, Trent Nadeau via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md &lt;https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md&gt;<br>&gt; <br>&gt; # Use `inout` at Function Call Sites<br>&gt; <br>&gt; * Proposal: TBD<br>&gt; * Author(s): [Trent Nadeau](http://github.com/tanadeau &lt;http://github.com/tanadeau&gt;)<br>&gt; * Status: TBD<br>&gt; * Review manager: TBD<br>&gt; <br>&gt; ## Introduction<br>&gt; <br>&gt; Currently when a function has `inout` parameters, the arguments are passed with the `&amp;` prefix operator. For example:<br>&gt; <br>&gt; ```swift<br>&gt; func add1(inout num: Int) {<br>&gt;     num += 1<br>&gt; }<br>&gt; <br>&gt; var n = 5<br>&gt; add1(&amp;n) // n is now 6<br>&gt; ```<br>&gt; <br>&gt; This operator does not fit with the rest of the language nor how the parameter is written at the function declaration. It should be replaced so that `inout` is used in both locations so that the call site above would instead be written as:<br>&gt; <br>&gt; ```swift<br>&gt; add1(inout n) // symmetric and now obvious that n can change<br>&gt; ```<br>&gt; <br>&gt; *Discussion thread TBD*<br>&gt; <br>&gt; ## Motivation<br>&gt; <br>&gt; The `&amp;` prefix operator is a holdover from C where it is usually read as &quot;address of&quot; and creates a pointer. While very useful in C due to its pervasive use of pointers, its meaning is not the same and introduces an unnecessary syntactic stumbling block from users coming from C. Removing this operator and using `inout` removes this stumbling block due to the semantic change.<br>&gt; <br>&gt; This operator is also disconnected from how the function declaration is written and does not imply that the argument may (and likely will) change. Using `inout` stands out, making it clear on first read that the variable may change.<br>&gt; <br>&gt; It is also possible that Swift may add Rust-like borrowing in the future. In that case, the `&amp;` symbol would be better used for a borrowed reference. Note that Rust uses the same symbol for declaring a borrowed reference and creating one, creating a nice symmetry in that respect of the language. I think Swift would want to have such symmetry as well.<br>&gt; <br>&gt; ## Detailed design<br>&gt; <br>&gt; ```<br>&gt; in-out-expression → inout identifier<br>&gt; ```<br>&gt; <br>&gt; ## Alternatives Considered<br>&gt; <br>&gt; Keeping the syntax as it currently is.<br>&gt; <br>&gt; -- <br>&gt; Trent Nadeau<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/b16522c2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>January 29, 2016 at 04:00:00pm</p></header><div class="content"><p>+1.  Really like the declaration and use symmetry.<br></p><p>&gt; On Jan 29, 2016, at 4:48 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1.<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt;&gt; On Jan 29, 2016, at 3:44 PM, Trent Nadeau via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md &lt;https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md&gt;<br>&gt;&gt; <br>&gt;&gt; # Use `inout` at Function Call Sites<br>&gt;&gt; <br>&gt;&gt; * Proposal: TBD<br>&gt;&gt; * Author(s): [Trent Nadeau](http://github.com/tanadeau &lt;http://github.com/tanadeau&gt;)<br>&gt;&gt; * Status: TBD<br>&gt;&gt; * Review manager: TBD<br>&gt;&gt; <br>&gt;&gt; ## Introduction<br>&gt;&gt; <br>&gt;&gt; Currently when a function has `inout` parameters, the arguments are passed with the `&amp;` prefix operator. For example:<br>&gt;&gt; <br>&gt;&gt; ```swift<br>&gt;&gt; func add1(inout num: Int) {<br>&gt;&gt;     num += 1<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; var n = 5<br>&gt;&gt; add1(&amp;n) // n is now 6<br>&gt;&gt; ```<br>&gt;&gt; <br>&gt;&gt; This operator does not fit with the rest of the language nor how the parameter is written at the function declaration. It should be replaced so that `inout` is used in both locations so that the call site above would instead be written as:<br>&gt;&gt; <br>&gt;&gt; ```swift<br>&gt;&gt; add1(inout n) // symmetric and now obvious that n can change<br>&gt;&gt; ```<br>&gt;&gt; <br>&gt;&gt; *Discussion thread TBD*<br>&gt;&gt; <br>&gt;&gt; ## Motivation<br>&gt;&gt; <br>&gt;&gt; The `&amp;` prefix operator is a holdover from C where it is usually read as &quot;address of&quot; and creates a pointer. While very useful in C due to its pervasive use of pointers, its meaning is not the same and introduces an unnecessary syntactic stumbling block from users coming from C. Removing this operator and using `inout` removes this stumbling block due to the semantic change.<br>&gt;&gt; <br>&gt;&gt; This operator is also disconnected from how the function declaration is written and does not imply that the argument may (and likely will) change. Using `inout` stands out, making it clear on first read that the variable may change.<br>&gt;&gt; <br>&gt;&gt; It is also possible that Swift may add Rust-like borrowing in the future. In that case, the `&amp;` symbol would be better used for a borrowed reference. Note that Rust uses the same symbol for declaring a borrowed reference and creating one, creating a nice symmetry in that respect of the language. I think Swift would want to have such symmetry as well.<br>&gt;&gt; <br>&gt;&gt; ## Detailed design<br>&gt;&gt; <br>&gt;&gt; ```<br>&gt;&gt; in-out-expression → inout identifier<br>&gt;&gt; ```<br>&gt;&gt; <br>&gt;&gt; ## Alternatives Considered<br>&gt;&gt; <br>&gt;&gt; Keeping the syntax as it currently is.<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Trent Nadeau<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/95e23300/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d1bff9080a4237cc9b79c5751afb6f7?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Jarod Long</string> &lt;swift at lng.la&gt;<p>January 29, 2016 at 03:00:00pm</p></header><div class="content"><p>+1 for the same reason.<br></p><p>Jarod<br></p><p>&gt; On Jan 29, 2016, at 14:50, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1.  Really like the declaration and use symmetry.<br>&gt; <br>&gt;&gt; On Jan 29, 2016, at 4:48 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; +1.<br>&gt;&gt; <br>&gt;&gt; -- E<br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 29, 2016, at 3:44 PM, Trent Nadeau via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md &lt;https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; # Use `inout` at Function Call Sites<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * Proposal: TBD<br>&gt;&gt;&gt; * Author(s): [Trent Nadeau](http://github.com/tanadeau &lt;http://github.com/tanadeau&gt;)<br>&gt;&gt;&gt; * Status: TBD<br>&gt;&gt;&gt; * Review manager: TBD<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ## Introduction<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Currently when a function has `inout` parameters, the arguments are passed with the `&amp;` prefix operator. For example:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ```swift<br>&gt;&gt;&gt; func add1(inout num: Int) {<br>&gt;&gt;&gt;     num += 1<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; var n = 5<br>&gt;&gt;&gt; add1(&amp;n) // n is now 6<br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This operator does not fit with the rest of the language nor how the parameter is written at the function declaration. It should be replaced so that `inout` is used in both locations so that the call site above would instead be written as:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ```swift<br>&gt;&gt;&gt; add1(inout n) // symmetric and now obvious that n can change<br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; *Discussion thread TBD*<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ## Motivation<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The `&amp;` prefix operator is a holdover from C where it is usually read as &quot;address of&quot; and creates a pointer. While very useful in C due to its pervasive use of pointers, its meaning is not the same and introduces an unnecessary syntactic stumbling block from users coming from C. Removing this operator and using `inout` removes this stumbling block due to the semantic change.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This operator is also disconnected from how the function declaration is written and does not imply that the argument may (and likely will) change. Using `inout` stands out, making it clear on first read that the variable may change.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It is also possible that Swift may add Rust-like borrowing in the future. In that case, the `&amp;` symbol would be better used for a borrowed reference. Note that Rust uses the same symbol for declaring a borrowed reference and creating one, creating a nice symmetry in that respect of the language. I think Swift would want to have such symmetry as well.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ## Detailed design<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; in-out-expression → inout identifier<br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ## Alternatives Considered<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Keeping the syntax as it currently is.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Trent Nadeau<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/cc192ce7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4a300fb6ff17dc07df9be5e863e0c98a?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Nate Birkholz</string> &lt;nbirkholz at gmail.com&gt;<p>January 29, 2016 at 03:00:00pm</p></header><div class="content"><p>+1<br></p><p>Sent from my iPhone, please excuse brevity and errors<br></p><p>&gt; On Jan 29, 2016, at 3:05 PM, Jarod Long via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1 for the same reason.<br>&gt; <br>&gt; Jarod<br>&gt; <br>&gt;&gt; On Jan 29, 2016, at 14:50, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; +1.  Really like the declaration and use symmetry.<br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 29, 2016, at 4:48 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; +1.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- E<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 29, 2016, at 3:44 PM, Trent Nadeau via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; # Use `inout` at Function Call Sites<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; * Proposal: TBD<br>&gt;&gt;&gt;&gt; * Author(s): [Trent Nadeau](http://github.com/tanadeau)<br>&gt;&gt;&gt;&gt; * Status: TBD<br>&gt;&gt;&gt;&gt; * Review manager: TBD<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ## Introduction<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Currently when a function has `inout` parameters, the arguments are passed with the `&amp;` prefix operator. For example:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ```swift<br>&gt;&gt;&gt;&gt; func add1(inout num: Int) {<br>&gt;&gt;&gt;&gt;     num += 1<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; var n = 5<br>&gt;&gt;&gt;&gt; add1(&amp;n) // n is now 6<br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This operator does not fit with the rest of the language nor how the parameter is written at the function declaration. It should be replaced so that `inout` is used in both locations so that the call site above would instead be written as:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ```swift<br>&gt;&gt;&gt;&gt; add1(inout n) // symmetric and now obvious that n can change<br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; *Discussion thread TBD*<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ## Motivation<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The `&amp;` prefix operator is a holdover from C where it is usually read as &quot;address of&quot; and creates a pointer. While very useful in C due to its pervasive use of pointers, its meaning is not the same and introduces an unnecessary syntactic stumbling block from users coming from C. Removing this operator and using `inout` removes this stumbling block due to the semantic change.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This operator is also disconnected from how the function declaration is written and does not imply that the argument may (and likely will) change. Using `inout` stands out, making it clear on first read that the variable may change.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It is also possible that Swift may add Rust-like borrowing in the future. In that case, the `&amp;` symbol would be better used for a borrowed reference. Note that Rust uses the same symbol for declaring a borrowed reference and creating one, creating a nice symmetry in that respect of the language. I think Swift would want to have such symmetry as well.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ## Detailed design<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt; in-out-expression → inout identifier<br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ## Alternatives Considered<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Keeping the syntax as it currently is.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; Trent Nadeau<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/08364ddd/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>January 29, 2016 at 02:00:00pm</p></header><div class="content"><p>On Fri, Jan 29, 2016 at 2:44 PM, Trent Nadeau via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt; The `&amp;` prefix operator is a holdover from C where it is usually read as<br>&gt; &quot;address of&quot; and creates a pointer. While very useful in C due to its<br>&gt; pervasive use of pointers, its meaning is not the same<br></p><p>Since there is an implicit conversion from &amp;x expression to<br>UnsafePointer (for C interop), I have seen so many times people write<br>buggy code with the &amp; operator, assuming that it is returning a stable<br>inner pointer to the data structure, like in C.  I don&#39;t have a<br>preference for the replacement, but I strongly believe that &amp; is the<br>wrong way to spell this operation, because of the strong (and wrong!)<br>connection with C syntax that people tend to make.  &#39;inout&#39; keyword at<br>the call site sounds like a fine replacement to me.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>January 29, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Jan 29, 2016, at 2:49 PM, Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Fri, Jan 29, 2016 at 2:44 PM, Trent Nadeau via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; The `&amp;` prefix operator is a holdover from C where it is usually read as<br>&gt;&gt; &quot;address of&quot; and creates a pointer. While very useful in C due to its<br>&gt;&gt; pervasive use of pointers, its meaning is not the same<br>&gt; <br>&gt; Since there is an implicit conversion from &amp;x expression to<br>&gt; UnsafePointer (for C interop), I have seen so many times people write<br>&gt; buggy code with the &amp; operator, assuming that it is returning a stable<br>&gt; inner pointer to the data structure, like in C.  I don&#39;t have a<br>&gt; preference for the replacement, but I strongly believe that &amp; is the<br>&gt; wrong way to spell this operation, because of the strong (and wrong!)<br>&gt; connection with C syntax that people tend to make.  &#39;inout&#39; keyword at<br>&gt; the call site sounds like a fine replacement to me.<br></p><p>Yeah, I like getting away from the baggage of the &#39;&amp;x&#39; notation too. Implicit C pointer interop assumes that the C function has Swift-like by-value (for const) or inout-like (for non-const) semantics, and I like the idea of making that more explicit in the call site.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6fe87aed0d64cdbc46378bf7596a7553?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Andrew Trick</string> &lt;atrick at apple.com&gt;<p>January 30, 2016 at 01:00:00am</p></header><div class="content"><p>&gt; On Jan 29, 2016, at 3:39 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 29, 2016, at 2:49 PM, Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Fri, Jan 29, 2016 at 2:44 PM, Trent Nadeau via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; The `&amp;` prefix operator is a holdover from C where it is usually read as<br>&gt;&gt;&gt; &quot;address of&quot; and creates a pointer. While very useful in C due to its<br>&gt;&gt;&gt; pervasive use of pointers, its meaning is not the same<br>&gt;&gt; <br>&gt;&gt; Since there is an implicit conversion from &amp;x expression to<br>&gt;&gt; UnsafePointer (for C interop), I have seen so many times people write<br>&gt;&gt; buggy code with the &amp; operator, assuming that it is returning a stable<br>&gt;&gt; inner pointer to the data structure, like in C.  I don&#39;t have a<br>&gt;&gt; preference for the replacement, but I strongly believe that &amp; is the<br>&gt;&gt; wrong way to spell this operation, because of the strong (and wrong!)<br>&gt;&gt; connection with C syntax that people tend to make.  &#39;inout&#39; keyword at<br>&gt;&gt; the call site sounds like a fine replacement to me.<br>&gt; <br>&gt; Yeah, I like getting away from the baggage of the &#39;&amp;x&#39; notation too. Implicit C pointer interop assumes that the C function has Swift-like by-value (for const) or inout-like (for non-const) semantics, and I like the idea of making that more explicit in the call site.<br></p><p>There&#39;s no arguing with the logic that &amp; is inappropriate, and no arguing with Chris’ point that this is a bad place for a keyword or attribute.<br></p><p>Since no one has mentioned the obvious on this thread (although it must have been considered) I’ll just say it...<br></p><p>copy out or inout:<br>swap(x=, y=)<br></p><p>copy in:<br>sync(=x, =y)<br></p><p>Alternatively: &amp;= as a kind of move operator.<br></p><p>I would even be ok eliminating inout in favor of move semantics, but I don’t think that will fly and doesn’t handle interop.<br></p><p>Andy<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>January 30, 2016 at 01:00:00am</p></header><div class="content"><p>-1 to this proposal. I don’t think the symmetry is big enough of a win. We just need some way of indicating that the param is different at the call site, most of the suggestions are less concise, or different without much benefit in clarity. <br></p><p>It might be nice to free up &amp; for other purposes than just a marker for an inout parameter is the only reason I might think it a change here might be good because it is underutilized, this is the only place &amp; is used that I am aware of, unlike C where it is used in many places for taking the address of something.<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76eb9711d45c1c9a71c0f24004072a22?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Zach Waldowski</string> &lt;zach at waldowski.me&gt;<p>January 29, 2016 at 06:00:00pm</p></header><div class="content"><p>-1. I understand the semantic reasons, but I find it really hard to read<br>at the call-site. I don&#39;t see &quot;&amp;&quot; as exclusively a holdover from C; if<br>we didn&#39;t have it, it&#39;d be an unused sigil that&#39;d probably be used by<br>something like addressing due to its prevalence in other languages.<br></p><p>Cheers. Zachary Waldowski zach at waldowski.me<br></p><p><br>On Fri, Jan 29, 2016, at 05:44 PM, Trent Nadeau via swift-evolution wrote:<br>&gt; https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md<br>&gt;<br>&gt; # Use `inout` at Function Call Sites<br></p><p>* Proposal: TBD<br>* Author(s): [Trent Nadeau](http://github.com/tanadeau)<br>* Status: TBD<br>* Review manager: TBD<br></p><p>## Introduction<br></p><p>Currently when a function has `inout` parameters, the arguments are<br>passed with the `&amp;` prefix operator. For example:<br></p><p>```swift func add1(inout num: Int) {    num += 1 }<br></p><p>var n = 5 add1(&amp;n) // n is now 6 ```<br></p><p>This operator does not fit with the rest of the language nor how the<br>parameter is written at the function declaration. It should be replaced<br>so that `inout` is used in both locations so that the call site above<br>would instead be written as:<br></p><p>```swift add1(inout n) // symmetric and now obvious that n can<br>change ```<br></p><p>*Discussion thread TBD*<br></p><p>## Motivation<br></p><p>The `&amp;` prefix operator is a holdover from C where it is usually read as<br>&quot;address of&quot; and creates a pointer. While very useful in C due to its<br>pervasive use of pointers, its meaning is not the same and introduces an<br>unnecessary syntactic stumbling block from users coming from C. Removing<br>this operator and using `inout` removes this stumbling block due to the<br>semantic change.<br></p><p>This operator is also disconnected from how the function declaration is<br>written and does not imply that the argument may (and likely will)<br>change. Using `inout` stands out, making it clear on first read that the<br>variable may change.<br></p><p>It is also possible that Swift may add Rust-like borrowing in the<br>future. In that case, the `&amp;` symbol would be better used for a borrowed<br>reference. Note that Rust uses the same symbol for declaring a borrowed<br>reference and creating one, creating a nice symmetry in that respect of<br>the language. I think Swift would want to have such symmetry as well.<br></p><p>## Detailed design<br></p><p>``` in-out-expression → inout identifier ```<br></p><p>## Alternatives Considered<br></p><p>Keeping the syntax as it currently is.<br>&gt;<br>&gt; --<br>&gt; Trent Nadeau<br>&gt; _________________________________________________<br>&gt; swift-evolution mailing list swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/71b20be4/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>January 29, 2016 at 03:00:00pm</p></header><div class="content"><p>+1 from me, but I suggest finding some real-world examples of inout (and UnsafePointer) and showing those, rather than a made-up add1. The fact that we currently require &#39;&amp;&#39; for Unsafe-(immutable)-Pointer might make this a bit less nice than it otherwise would be.<br></p><p>(We&#39;ve talked about allowing pass-by-value for UnsafePointer, but that has its own pros and cons, and should be discussed separately.)<br></p><p>Jordan<br></p><p><br>&gt; On Jan 29, 2016, at 14:44, Trent Nadeau via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md &lt;https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md&gt;<br>&gt; <br>&gt; # Use `inout` at Function Call Sites<br>&gt; <br>&gt; * Proposal: TBD<br>&gt; * Author(s): [Trent Nadeau](http://github.com/tanadeau &lt;http://github.com/tanadeau&gt;)<br>&gt; * Status: TBD<br>&gt; * Review manager: TBD<br>&gt; <br>&gt; ## Introduction<br>&gt; <br>&gt; Currently when a function has `inout` parameters, the arguments are passed with the `&amp;` prefix operator. For example:<br>&gt; <br>&gt; ```swift<br>&gt; func add1(inout num: Int) {<br>&gt;     num += 1<br>&gt; }<br>&gt; <br>&gt; var n = 5<br>&gt; add1(&amp;n) // n is now 6<br>&gt; ```<br>&gt; <br>&gt; This operator does not fit with the rest of the language nor how the parameter is written at the function declaration. It should be replaced so that `inout` is used in both locations so that the call site above would instead be written as:<br>&gt; <br>&gt; ```swift<br>&gt; add1(inout n) // symmetric and now obvious that n can change<br>&gt; ```<br>&gt; <br>&gt; *Discussion thread TBD*<br>&gt; <br>&gt; ## Motivation<br>&gt; <br>&gt; The `&amp;` prefix operator is a holdover from C where it is usually read as &quot;address of&quot; and creates a pointer. While very useful in C due to its pervasive use of pointers, its meaning is not the same and introduces an unnecessary syntactic stumbling block from users coming from C. Removing this operator and using `inout` removes this stumbling block due to the semantic change.<br>&gt; <br>&gt; This operator is also disconnected from how the function declaration is written and does not imply that the argument may (and likely will) change. Using `inout` stands out, making it clear on first read that the variable may change.<br>&gt; <br>&gt; It is also possible that Swift may add Rust-like borrowing in the future. In that case, the `&amp;` symbol would be better used for a borrowed reference. Note that Rust uses the same symbol for declaring a borrowed reference and creating one, creating a nice symmetry in that respect of the language. I think Swift would want to have such symmetry as well.<br>&gt; <br>&gt; ## Detailed design<br>&gt; <br>&gt; ```<br>&gt; in-out-expression → inout identifier<br>&gt; ```<br>&gt; <br>&gt; ## Alternatives Considered<br>&gt; <br>&gt; Keeping the syntax as it currently is.<br>&gt; <br>&gt; -- <br>&gt; Trent Nadeau<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/13962510/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>January 29, 2016 at 04:00:00pm</p></header><div class="content"><p>I started poking around. It looks like the rules for calls with functions are different from those with operators. At least in the following example, the operator version doesn&#39;t need the &amp;. Any idea why?<br></p><p>-- Erica<br></p><p><br>//--------------------------------------------------------------<br>// Stream Printing<br>//--------------------------------------------------------------<br>import Darwin<br>import Foundation<br></p><p>public struct StdErrStream: OutputStreamType {<br>    public mutating func write(string: String) {<br>        puts(string.cStringUsingEncoding(NSUTF8StringEncoding)!)<br>    }<br>}<br></p><p>var stdStream = StdErrStream()<br>print(&quot;hello world&quot;, toStream: &amp;stdStream)<br></p><p>vs<br></p><p>//--------------------------------------------------------------<br>// MARK: Conditional Assignment<br>//--------------------------------------------------------------<br></p><p>infix operator =? {}<br></p><p>/// Conditionally assign optional value to target via unwrapping<br>/// Thanks, Mike Ash<br>func =?&lt;T&gt;(inout target: T, newValue: T?) {<br>    if let unwrapped = newValue { target = unwrapped }<br>}<br></p><p>import UIKit<br>var image = UIImage()<br>var replacement = [#Image(imageLiteral: &quot;Screen Shot 2016-01-29 at 4.35.48 PM.png&quot;)#]<br>image =? UIImage(named: &quot;DoesNotExist&quot;)<br></p><p><br>-- E<br></p><p><br>&gt; On Jan 29, 2016, at 4:23 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1 from me, but I suggest finding some real-world examples of inout (and UnsafePointer) and showing those, rather than a made-up add1. The fact that we currently require &#39;&amp;&#39; for Unsafe-(immutable)-Pointer might make this a bit less nice than it otherwise would be.<br>&gt; <br>&gt; (We&#39;ve talked about allowing pass-by-value for UnsafePointer, but that has its own pros and cons, and should be discussed separately.)<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 29, 2016, at 14:44, Trent Nadeau via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md &lt;https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md&gt;<br>&gt;&gt; <br>&gt;&gt; # Use `inout` at Function Call Sites<br>&gt;&gt; <br>&gt;&gt; * Proposal: TBD<br>&gt;&gt; * Author(s): [Trent Nadeau](http://github.com/tanadeau &lt;http://github.com/tanadeau&gt;)<br>&gt;&gt; * Status: TBD<br>&gt;&gt; * Review manager: TBD<br>&gt;&gt; <br>&gt;&gt; ## Introduction<br>&gt;&gt; <br>&gt;&gt; Currently when a function has `inout` parameters, the arguments are passed with the `&amp;` prefix operator. For example:<br>&gt;&gt; <br>&gt;&gt; ```swift<br>&gt;&gt; func add1(inout num: Int) {<br>&gt;&gt;     num += 1<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; var n = 5<br>&gt;&gt; add1(&amp;n) // n is now 6<br>&gt;&gt; ```<br>&gt;&gt; <br>&gt;&gt; This operator does not fit with the rest of the language nor how the parameter is written at the function declaration. It should be replaced so that `inout` is used in both locations so that the call site above would instead be written as:<br>&gt;&gt; <br>&gt;&gt; ```swift<br>&gt;&gt; add1(inout n) // symmetric and now obvious that n can change<br>&gt;&gt; ```<br>&gt;&gt; <br>&gt;&gt; *Discussion thread TBD*<br>&gt;&gt; <br>&gt;&gt; ## Motivation<br>&gt;&gt; <br>&gt;&gt; The `&amp;` prefix operator is a holdover from C where it is usually read as &quot;address of&quot; and creates a pointer. While very useful in C due to its pervasive use of pointers, its meaning is not the same and introduces an unnecessary syntactic stumbling block from users coming from C. Removing this operator and using `inout` removes this stumbling block due to the semantic change.<br>&gt;&gt; <br>&gt;&gt; This operator is also disconnected from how the function declaration is written and does not imply that the argument may (and likely will) change. Using `inout` stands out, making it clear on first read that the variable may change.<br>&gt;&gt; <br>&gt;&gt; It is also possible that Swift may add Rust-like borrowing in the future. In that case, the `&amp;` symbol would be better used for a borrowed reference. Note that Rust uses the same symbol for declaring a borrowed reference and creating one, creating a nice symmetry in that respect of the language. I think Swift would want to have such symmetry as well.<br>&gt;&gt; <br>&gt;&gt; ## Detailed design<br>&gt;&gt; <br>&gt;&gt; ```<br>&gt;&gt; in-out-expression → inout identifier<br>&gt;&gt; ```<br>&gt;&gt; <br>&gt;&gt; ## Alternatives Considered<br>&gt;&gt; <br>&gt;&gt; Keeping the syntax as it currently is.<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Trent Nadeau<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/7b2fb660/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>January 29, 2016 at 07:00:00pm</p></header><div class="content"><p>The reasoning here was that the operator itself would be enough signal to tell you that it&#39;s mutating one of its arguments. &quot;&amp;count += 1&quot; would be a little too much.<br></p><p>Similarly, mutating methods take &#39;self&#39; inout, but as noted before you aren&#39;t required to write &#39;mutating&#39; at the call site, because it&#39;s assumed the name will be signal enough. This doesn&#39;t scale to arbitrary numbers of arguments, though, especially when you normally don&#39;t even think about some of your arguments being changed by a function call.<br></p><p>Mutating functions and assignment operators are fairly common (at least when not eschewing imperative programming). General inout parameters are not.<br></p><p>Jordan<br></p><p>P.S. At one point we thought about requiring you to declare &quot;assignment&quot; in your operator declaration, and disallowing inout parameters from arbitrary other operators, but that didn&#39;t actually turn into a proposal. It&#39;s not a bad idea, though—just a bit of compiler-enforced consistency.<br></p><p>&gt; On Jan 29, 2016, at 15:48 , Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; I started poking around. It looks like the rules for calls with functions are different from those with operators. At least in the following example, the operator version doesn&#39;t need the &amp;. Any idea why?<br>&gt; <br>&gt; -- Erica<br>&gt; <br>&gt; <br>&gt; //--------------------------------------------------------------<br>&gt; // Stream Printing<br>&gt; //--------------------------------------------------------------<br>&gt; import Darwin<br>&gt; import Foundation<br>&gt; <br>&gt; public struct StdErrStream: OutputStreamType {<br>&gt;     public mutating func write(string: String) {<br>&gt;         puts(string.cStringUsingEncoding(NSUTF8StringEncoding)!)<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; var stdStream = StdErrStream()<br>&gt; print(&quot;hello world&quot;, toStream: &amp;stdStream)<br>&gt; <br>&gt; vs<br>&gt; <br>&gt; //--------------------------------------------------------------<br>&gt; // MARK: Conditional Assignment<br>&gt; //--------------------------------------------------------------<br>&gt; <br>&gt; infix operator =? {}<br>&gt; <br>&gt; /// Conditionally assign optional value to target via unwrapping<br>&gt; /// Thanks, Mike Ash<br>&gt; func =?&lt;T&gt;(inout target: T, newValue: T?) {<br>&gt;     if let unwrapped = newValue { target = unwrapped }<br>&gt; }<br>&gt; <br>&gt; import UIKit<br>&gt; var image = UIImage()<br>&gt; var replacement = [#Image(imageLiteral: &quot;Screen Shot 2016-01-29 at 4.35.48 PM.png&quot;)#]<br>&gt; image =? UIImage(named: &quot;DoesNotExist&quot;)<br>&gt; <br>&gt; <br>&gt; -- E<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 29, 2016, at 4:23 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; +1 from me, but I suggest finding some real-world examples of inout (and UnsafePointer) and showing those, rather than a made-up add1. The fact that we currently require &#39;&amp;&#39; for Unsafe-(immutable)-Pointer might make this a bit less nice than it otherwise would be.<br>&gt;&gt; <br>&gt;&gt; (We&#39;ve talked about allowing pass-by-value for UnsafePointer, but that has its own pros and cons, and should be discussed separately.)<br>&gt;&gt; <br>&gt;&gt; Jordan<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 29, 2016, at 14:44, Trent Nadeau via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md &lt;https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; # Use `inout` at Function Call Sites<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * Proposal: TBD<br>&gt;&gt;&gt; * Author(s): [Trent Nadeau](http://github.com/tanadeau &lt;http://github.com/tanadeau&gt;)<br>&gt;&gt;&gt; * Status: TBD<br>&gt;&gt;&gt; * Review manager: TBD<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ## Introduction<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Currently when a function has `inout` parameters, the arguments are passed with the `&amp;` prefix operator. For example:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ```swift<br>&gt;&gt;&gt; func add1(inout num: Int) {<br>&gt;&gt;&gt;     num += 1<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; var n = 5<br>&gt;&gt;&gt; add1(&amp;n) // n is now 6<br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This operator does not fit with the rest of the language nor how the parameter is written at the function declaration. It should be replaced so that `inout` is used in both locations so that the call site above would instead be written as:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ```swift<br>&gt;&gt;&gt; add1(inout n) // symmetric and now obvious that n can change<br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; *Discussion thread TBD*<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ## Motivation<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The `&amp;` prefix operator is a holdover from C where it is usually read as &quot;address of&quot; and creates a pointer. While very useful in C due to its pervasive use of pointers, its meaning is not the same and introduces an unnecessary syntactic stumbling block from users coming from C. Removing this operator and using `inout` removes this stumbling block due to the semantic change.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This operator is also disconnected from how the function declaration is written and does not imply that the argument may (and likely will) change. Using `inout` stands out, making it clear on first read that the variable may change.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It is also possible that Swift may add Rust-like borrowing in the future. In that case, the `&amp;` symbol would be better used for a borrowed reference. Note that Rust uses the same symbol for declaring a borrowed reference and creating one, creating a nice symmetry in that respect of the language. I think Swift would want to have such symmetry as well.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ## Detailed design<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; in-out-expression → inout identifier<br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ## Alternatives Considered<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Keeping the syntax as it currently is.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Trent Nadeau<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/aa2e716a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>January 29, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; P.S. At one point we thought about requiring you to declare &quot;assignment&quot; in your operator declaration, and disallowing inout parameters from arbitrary other operators, but that didn&#39;t actually turn into a proposal. It&#39;s not a bad idea, though—just a bit of compiler-enforced consistency.<br></p><p>Are there any `inout` operators which don&#39;t have `=` at the end of their name?<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>January 29, 2016 at 07:00:00pm</p></header><div class="content"><p>On Fri, Jan 29, 2016, at 07:16 PM, Brent Royal-Gordon via swift-evolution wrote:<br>&gt; &gt; P.S. At one point we thought about requiring you to declare &quot;assignment&quot; in your operator declaration, and disallowing inout parameters from arbitrary other operators, but that didn&#39;t actually turn into a proposal. It&#39;s not a bad idea, though—just a bit of compiler-enforced consistency.<br>&gt; <br>&gt; Are there any `inout` operators which don&#39;t have `=` at the end of their name?<br></p><p>++ and -- come to mind, although they&#39;re being deprecated.<br></p><p>-Kevin Ballard<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>January 29, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On Jan 29, 2016, at 19:16 , Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt; P.S. At one point we thought about requiring you to declare &quot;assignment&quot; in your operator declaration, and disallowing inout parameters from arbitrary other operators, but that didn&#39;t actually turn into a proposal. It&#39;s not a bad idea, though—just a bit of compiler-enforced consistency.<br>&gt; <br>&gt; Are there any `inout` operators which don&#39;t have `=` at the end of their name?<br></p><p>Now that ++ and -- are gone, there are not any in the standard library. We do still have &#39;!=&#39; as an exception to the converse, though. :-) (And I&#39;ve seen some operators in other libraries that don&#39;t have &quot;=&quot; but do mutate an argument.)<br></p><p>Jordan<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>January 30, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; I started poking around. It looks like the rules for calls with functions are different from those with operators. At least in the following example, the operator version doesn&#39;t need the &amp;. Any idea why?<br>Seems I&#39;m to late with the answer — but at least my theory was right:<br>Assignment-operators would look ugly (imagine all those &quot;inout x = y&quot; ;-)<br></p><p>For me, it would be ok if inout parameters had no special syntax at all — afaik, &quot;&amp;&quot; is just a hint for the possible mutation which could be highlighted typographically (but I&#39;m rather fearless and trust in methods I&#39;m calling :)<br></p><p>Summary:<br>-1<br></p><p>Tino<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160130/1d1bb21f/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c40db4457ab2c91a0d8006da31b177c6?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Trent Nadeau</string> &lt;tanadeau at gmail.com&gt;<p>January 29, 2016 at 11:00:00pm</p></header><div class="content"><p>That fact that the &amp; operator is required for immutable pointers definitely<br>makes this change not-so-great unless we add the pass by value for<br>immutable.<br></p><p>For instance for C&#39;s memcpy which is defined in C as:<br></p><p>void *memcpy(void *dest, const void *src, size_t n)<br></p><p>is imported into Swift as:<br></p><p>public func memcpy(_: UnsafeMutablePointer&lt;Void&gt;, _: UnsafePointer&lt;Void&gt;,<br>_: Int) -&gt; UnsafeMutablePointer&lt;Void&gt;<br></p><p>It would currently be called like:<br></p><p>var src: Float = 5.3<br>var dest: Float = 0.0<br>memcpy(&amp;dest, &amp;src, sizeof(Float))<br></p><p>If we don&#39;t change how UnsafePointer is called and just replace &quot;&amp;&quot; with<br>&quot;inout &quot;, then it becomes:<br></p><p>memcpy(inout dest, inout src, sizeof(Float))<br></p><p>And now the &quot;src&quot; part of the call in now basically lying.<br></p><p>If we can just pass src directly (assuming that&#39;s what you meant by<br>pass-by-value), then it would be:<br></p><p>memcpy(inout dest, src, sizeof(Float))<br></p><p>which seems nicer than both the previous versions.<br></p><p>Would the UnsafePointer change need to be a proposal that is a predecessor<br>to this one?<br></p><p>P.S. It would be nice to be able to pass constants to UnsafePointer and not<br>using &quot;&amp;&quot; for inout and UnsafePointer would allow that I think.<br></p><p>On Fri, Jan 29, 2016 at 6:23 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br></p><p>&gt; +1 from me, but I suggest finding some real-world examples of inout (and<br>&gt; UnsafePointer) and showing those, rather than a made-up add1. The fact that<br>&gt; we currently require &#39;&amp;&#39; for Unsafe-(immutable)-Pointer might make this a<br>&gt; bit less nice than it otherwise would be.<br>&gt;<br>&gt; (We&#39;ve talked about allowing pass-by-value for UnsafePointer, but that has<br>&gt; its own pros and cons, and should be discussed separately.)<br>&gt;<br>&gt; Jordan<br>&gt;<br>&gt;<br>&gt; On Jan 29, 2016, at 14:44, Trent Nadeau via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md<br>&gt;<br>&gt; # Use `inout` at Function Call Sites<br>&gt;<br>&gt; * Proposal: TBD<br>&gt; * Author(s): [Trent Nadeau](http://github.com/tanadeau)<br>&gt; * Status: TBD<br>&gt; * Review manager: TBD<br>&gt;<br>&gt; ## Introduction<br>&gt;<br>&gt; Currently when a function has `inout` parameters, the arguments are passed with the `&amp;` prefix operator. For example:<br>&gt;<br>&gt; ```swift<br>&gt; func add1(inout num: Int) {<br>&gt;     num += 1<br>&gt; }<br>&gt;<br>&gt; var n = 5<br>&gt; add1(&amp;n) // n is now 6<br>&gt; ```<br>&gt;<br>&gt; This operator does not fit with the rest of the language nor how the parameter is written at the function declaration. It should be replaced so that `inout` is used in both locations so that the call site above would instead be written as:<br>&gt;<br>&gt; ```swift<br>&gt; add1(inout n) // symmetric and now obvious that n can change<br>&gt; ```<br>&gt;<br>&gt; *Discussion thread TBD*<br>&gt;<br>&gt; ## Motivation<br>&gt;<br>&gt; The `&amp;` prefix operator is a holdover from C where it is usually read as &quot;address of&quot; and creates a pointer. While very useful in C due to its pervasive use of pointers, its meaning is not the same and introduces an unnecessary syntactic stumbling block from users coming from C. Removing this operator and using `inout` removes this stumbling block due to the semantic change.<br>&gt;<br>&gt; This operator is also disconnected from how the function declaration is written and does not imply that the argument may (and likely will) change. Using `inout` stands out, making it clear on first read that the variable may change.<br>&gt;<br>&gt; It is also possible that Swift may add Rust-like borrowing in the future. In that case, the `&amp;` symbol would be better used for a borrowed reference. Note that Rust uses the same symbol for declaring a borrowed reference and creating one, creating a nice symmetry in that respect of the language. I think Swift would want to have such symmetry as well.<br>&gt;<br>&gt; ## Detailed design<br>&gt;<br>&gt; ```<br>&gt; in-out-expression → inout identifier<br>&gt; ```<br>&gt;<br>&gt; ## Alternatives Considered<br>&gt;<br>&gt; Keeping the syntax as it currently is.<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Trent Nadeau<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br></p><p><br>-- <br>Trent Nadeau<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/f72b12b5/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5059668772aad67a346ad23a786be31b?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Allen Ding</string> &lt;allen at snappymob.com&gt;<p>January 30, 2016 at 08:00:00am</p></header><div class="content"><p>My 2 cents.<br></p><p>1. At the use site (and in actual usage in my code), func(&amp;value) is a<br>visually recognizable enough pattern that it is &quot;obvious&quot; when I read it.<br></p><p>2. At the call use, func(inout value) would also be obvious, but feels<br>clunkier and may even be less immediately recognizable. Just my opinion. I<br>find symbols easier to pick out when reading.<br></p><p>3. I really need to be convinced that symmetry of usage at call site (for<br>any language feature) and declaration is a desirable thing. In my opinion,<br>declaration and use are orthogonal things and a lot of Swift already<br>exhibits this asymmetry. e.g. parameter labels vs argument names, why<br>doesn&#39;t calling a mutating func require mutating somewhere in the call to<br>make it obvious the call might mutate the receiver.<br></p><p>4. The possibility of Swift becoming more Rust-like and letting this<br>possibility drive this discussion does not seem like it should factor into<br>the discussion of whether this proposal is a win.<br></p><p><br>On Sat, Jan 30, 2016 at 6:44 AM, Trent Nadeau via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md<br>&gt;<br>&gt; # Use `inout` at Function Call Sites<br>&gt;<br>&gt; * Proposal: TBD<br>&gt; * Author(s): [Trent Nadeau](http://github.com/tanadeau)<br>&gt; * Status: TBD<br>&gt; * Review manager: TBD<br>&gt;<br>&gt; ## Introduction<br>&gt;<br>&gt; Currently when a function has `inout` parameters, the arguments are passed with the `&amp;` prefix operator. For example:<br>&gt;<br>&gt; ```swift<br>&gt; func add1(inout num: Int) {<br>&gt;     num += 1<br>&gt; }<br>&gt;<br>&gt; var n = 5<br>&gt; add1(&amp;n) // n is now 6<br>&gt; ```<br>&gt;<br>&gt; This operator does not fit with the rest of the language nor how the parameter is written at the function declaration. It should be replaced so that `inout` is used in both locations so that the call site above would instead be written as:<br>&gt;<br>&gt; ```swift<br>&gt; add1(inout n) // symmetric and now obvious that n can change<br>&gt; ```<br>&gt;<br>&gt; *Discussion thread TBD*<br>&gt;<br>&gt; ## Motivation<br>&gt;<br>&gt; The `&amp;` prefix operator is a holdover from C where it is usually read as &quot;address of&quot; and creates a pointer. While very useful in C due to its pervasive use of pointers, its meaning is not the same and introduces an unnecessary syntactic stumbling block from users coming from C. Removing this operator and using `inout` removes this stumbling block due to the semantic change.<br>&gt;<br>&gt; This operator is also disconnected from how the function declaration is written and does not imply that the argument may (and likely will) change. Using `inout` stands out, making it clear on first read that the variable may change.<br>&gt;<br>&gt; It is also possible that Swift may add Rust-like borrowing in the future. In that case, the `&amp;` symbol would be better used for a borrowed reference. Note that Rust uses the same symbol for declaring a borrowed reference and creating one, creating a nice symmetry in that respect of the language. I think Swift would want to have such symmetry as well.<br>&gt;<br>&gt; ## Detailed design<br>&gt;<br>&gt; ```<br>&gt; in-out-expression → inout identifier<br>&gt; ```<br>&gt;<br>&gt; ## Alternatives Considered<br>&gt;<br>&gt; Keeping the syntax as it currently is.<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Trent Nadeau<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160130/4ad16fb5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c40db4457ab2c91a0d8006da31b177c6?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Trent Nadeau</string> &lt;tanadeau at gmail.com&gt;<p>January 29, 2016 at 07:00:00pm</p></header><div class="content"><p>1. This is an opinion where people may disagree. However, the confusion<br>   with C semantics and how they do actually interact with Swift is important<br>   here, as Dmitri, Jordan, and Joe mentioned above.<br>   2. See above. Given the semantics confusion, I and others think we<br>   should have something different. If we need a different way to express<br>   that, having symmetry between the declaration and use seems like it could<br>   be a good pick.<br>   3. It&#39;s true there is already asymmetry in this area. However, I don&#39;t<br>   think we should have such if we can avoid it. Mutating functions, at least,<br>   have compiler errors to find out where you&#39;re misusing them such as calling<br>   one on a constant value type. Parameter labels vs. argument names require,<br>   I think, an unavoidable divergence in grammar due to have 1-2 names in one<br>   place and 0-1 names in the other.<br>   4. Allowing Rust-like borrowing is not the main reason for this<br>   proposal, the symmetry and avoidance of confusing semantics are. However,<br>   freeing up the &amp; symbol would more easily allow for a feature that I and<br>   others (including Chris Lattner) think would be very useful, especially in<br>   constrained environments. One of the promises of future Swift is to stretch<br>   from systems programming to scripting.<br></p><p><br>On Fri, Jan 29, 2016 at 7:35 PM, Allen Ding &lt;allen at snappymob.com&gt; wrote:<br></p><p>&gt; My 2 cents.<br>&gt;<br>&gt; 1. At the use site (and in actual usage in my code), func(&amp;value) is a<br>&gt; visually recognizable enough pattern that it is &quot;obvious&quot; when I read it.<br>&gt;<br>&gt; 2. At the call use, func(inout value) would also be obvious, but feels<br>&gt; clunkier and may even be less immediately recognizable. Just my opinion. I<br>&gt; find symbols easier to pick out when reading.<br>&gt;<br>&gt; 3. I really need to be convinced that symmetry of usage at call site (for<br>&gt; any language feature) and declaration is a desirable thing. In my opinion,<br>&gt; declaration and use are orthogonal things and a lot of Swift already<br>&gt; exhibits this asymmetry. e.g. parameter labels vs argument names, why<br>&gt; doesn&#39;t calling a mutating func require mutating somewhere in the call to<br>&gt; make it obvious the call might mutate the receiver.<br>&gt;<br>&gt; 4. The possibility of Swift becoming more Rust-like and letting this<br>&gt; possibility drive this discussion does not seem like it should factor into<br>&gt; the discussion of whether this proposal is a win.<br>&gt;<br>&gt;<br>&gt; On Sat, Jan 30, 2016 at 6:44 AM, Trent Nadeau via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md<br>&gt;&gt;<br>&gt;&gt; # Use `inout` at Function Call Sites<br>&gt;&gt;<br>&gt;&gt; * Proposal: TBD<br>&gt;&gt; * Author(s): [Trent Nadeau](http://github.com/tanadeau)<br>&gt;&gt; * Status: TBD<br>&gt;&gt; * Review manager: TBD<br>&gt;&gt;<br>&gt;&gt; ## Introduction<br>&gt;&gt;<br>&gt;&gt; Currently when a function has `inout` parameters, the arguments are passed with the `&amp;` prefix operator. For example:<br>&gt;&gt;<br>&gt;&gt; ```swift<br>&gt;&gt; func add1(inout num: Int) {<br>&gt;&gt;     num += 1<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; var n = 5<br>&gt;&gt; add1(&amp;n) // n is now 6<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt; This operator does not fit with the rest of the language nor how the parameter is written at the function declaration. It should be replaced so that `inout` is used in both locations so that the call site above would instead be written as:<br>&gt;&gt;<br>&gt;&gt; ```swift<br>&gt;&gt; add1(inout n) // symmetric and now obvious that n can change<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt; *Discussion thread TBD*<br>&gt;&gt;<br>&gt;&gt; ## Motivation<br>&gt;&gt;<br>&gt;&gt; The `&amp;` prefix operator is a holdover from C where it is usually read as &quot;address of&quot; and creates a pointer. While very useful in C due to its pervasive use of pointers, its meaning is not the same and introduces an unnecessary syntactic stumbling block from users coming from C. Removing this operator and using `inout` removes this stumbling block due to the semantic change.<br>&gt;&gt;<br>&gt;&gt; This operator is also disconnected from how the function declaration is written and does not imply that the argument may (and likely will) change. Using `inout` stands out, making it clear on first read that the variable may change.<br>&gt;&gt;<br>&gt;&gt; It is also possible that Swift may add Rust-like borrowing in the future. In that case, the `&amp;` symbol would be better used for a borrowed reference. Note that Rust uses the same symbol for declaring a borrowed reference and creating one, creating a nice symmetry in that respect of the language. I think Swift would want to have such symmetry as well.<br>&gt;&gt;<br>&gt;&gt; ## Detailed design<br>&gt;&gt;<br>&gt;&gt; ```<br>&gt;&gt; in-out-expression → inout identifier<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt; ## Alternatives Considered<br>&gt;&gt;<br>&gt;&gt; Keeping the syntax as it currently is.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Trent Nadeau<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br></p><p><br>-- <br>Trent Nadeau<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/80351092/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>January 29, 2016 at 06:00:00pm</p></header><div class="content"><p>[ Proposal link: https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md &lt;https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md&gt; ]<br></p><p>My issue is that &#39;&amp;&#39; and &#39;inout&#39; really don&#39;t have anything to do with each other, and that &#39;&amp;&#39; doesn&#39;t inherently mean anything related to what&#39;s going on here unless you&#39;ve used C. (Or C++, or Objective-C, or C#…or Go, or Rust. But not Python, Java, JavaScript, or Ruby &lt;http://www.skorks.com/2013/04/ruby-ampersand-parameter-demystified/&gt;.) And &amp; doesn&#39;t actually do the same thing as it does in any of those languages; it does something that already has a name in Swift, which is &#39;inout&#39;.<br></p><p>This thing only needs one name, and of the two it has, &#39;inout&#39; is the better one. +1 from me.<br>Jordan<br></p><p><br>&gt; On Jan 29, 2016, at 16:35 , Allen Ding via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; My 2 cents.<br>&gt; <br>&gt; 1. At the use site (and in actual usage in my code), func(&amp;value) is a visually recognizable enough pattern that it is &quot;obvious&quot; when I read it.<br>&gt; <br>&gt; 2. At the call use, func(inout value) would also be obvious, but feels clunkier and may even be less immediately recognizable. Just my opinion. I find symbols easier to pick out when reading.<br>&gt; <br>&gt; 3. I really need to be convinced that symmetry of usage at call site (for any language feature) and declaration is a desirable thing. In my opinion, declaration and use are orthogonal things and a lot of Swift already exhibits this asymmetry. e.g. parameter labels vs argument names, why doesn&#39;t calling a mutating func require mutating somewhere in the call to make it obvious the call might mutate the receiver.<br>&gt; <br>&gt; 4. The possibility of Swift becoming more Rust-like and letting this possibility drive this discussion does not seem like it should factor into the discussion of whether this proposal is a win.<br>&gt; <br>&gt; <br>&gt; On Sat, Jan 30, 2016 at 6:44 AM, Trent Nadeau via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md &lt;https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md&gt;<br>&gt; <br>&gt; # Use `inout` at Function Call Sites<br>&gt; <br>&gt; * Proposal: TBD<br>&gt; * Author(s): [Trent Nadeau](http://github.com/tanadeau &lt;http://github.com/tanadeau&gt;)<br>&gt; * Status: TBD<br>&gt; * Review manager: TBD<br>&gt; <br>&gt; ## Introduction<br>&gt; <br>&gt; Currently when a function has `inout` parameters, the arguments are passed with the `&amp;` prefix operator. For example:<br>&gt; <br>&gt; ```swift<br>&gt; func add1(inout num: Int) {<br>&gt;     num += 1<br>&gt; }<br>&gt; <br>&gt; var n = 5<br>&gt; add1(&amp;n) // n is now 6<br>&gt; ```<br>&gt; <br>&gt; This operator does not fit with the rest of the language nor how the parameter is written at the function declaration. It should be replaced so that `inout` is used in both locations so that the call site above would instead be written as:<br>&gt; <br>&gt; ```swift<br>&gt; add1(inout n) // symmetric and now obvious that n can change<br>&gt; ```<br>&gt; <br>&gt; *Discussion thread TBD*<br>&gt; <br>&gt; ## Motivation<br>&gt; <br>&gt; The `&amp;` prefix operator is a holdover from C where it is usually read as &quot;address of&quot; and creates a pointer. While very useful in C due to its pervasive use of pointers, its meaning is not the same and introduces an unnecessary syntactic stumbling block from users coming from C. Removing this operator and using `inout` removes this stumbling block due to the semantic change.<br>&gt; <br>&gt; This operator is also disconnected from how the function declaration is written and does not imply that the argument may (and likely will) change. Using `inout` stands out, making it clear on first read that the variable may change.<br>&gt; <br>&gt; It is also possible that Swift may add Rust-like borrowing in the future. In that case, the `&amp;` symbol would be better used for a borrowed reference. Note that Rust uses the same symbol for declaring a borrowed reference and creating one, creating a nice symmetry in that respect of the language. I think Swift would want to have such symmetry as well.<br>&gt; <br>&gt; ## Detailed design<br>&gt; <br>&gt; ```<br>&gt; in-out-expression → inout identifier<br>&gt; ```<br>&gt; <br>&gt; ## Alternatives Considered<br>&gt; <br>&gt; Keeping the syntax as it currently is.<br>&gt; <br>&gt; -- <br>&gt; Trent Nadeau<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/a8a244f3/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>January 29, 2016 at 08:00:00pm</p></header><div class="content"><p>On Jan 29, 2016, at 4:35 PM, Allen Ding via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; My 2 cents.<br>&gt; <br>&gt; 1. At the use site (and in actual usage in my code), func(&amp;value) is a visually recognizable enough pattern that it is &quot;obvious&quot; when I read it.<br></p><p>I agree.<br></p><p>&gt; 2. At the call use, func(inout value) would also be obvious, but feels clunkier and may even be less immediately recognizable. Just my opinion. I find symbols easier to pick out when reading.<br></p><p>I agree, we actually evaluated this sometime between Swift 1 and Swift 2 and converted actual code using &amp; to using inout on the call site, it looked worse.  Clarity suffered, particularly when a parameter had an argument label.<br></p><p>Keep in mind that we’re forcing this syntax on the caller side of things *only* to make it clear that something indirect is happening.  There is no implementation reason to need this, it is to increase clarity.  I am very concerned that making that “high pain” of such a sentinel would make defeat the purpose of this design decision in the first place.<br></p><p>&gt; 3. I really need to be convinced that symmetry of usage at call site (for any language feature) and declaration is a desirable thing. In my opinion, declaration and use are orthogonal things and a lot of Swift already exhibits this asymmetry. e.g. parameter labels vs argument names, why doesn&#39;t calling a mutating func require mutating somewhere in the call to make it obvious the call might mutate the receiver.<br></p><p>Agreed.<br></p><p>&gt; 4. The possibility of Swift becoming more Rust-like and letting this possibility drive this discussion does not seem like it should factor into the discussion of whether this proposal is a win.<br></p><p>Agreed.  As a concrete example of this, people frequently ask for “in” and “out” parameters.  With the current design, the call site would both use &amp; for inout, in, and out.  If we went with this proposal, we’d have to use in and out on the call side as well, which forces taking “out” as a keyword.<br></p><p>Another problem with this is that this would break imported UnsafePointer’s, because it wouldn’t make sense to pass a “const char*” as “inout”.  We’d be forced to design “in” parameters as a prerequisite for this feature.<br></p><p>Another problem with this proposal is that it gets *unbearably* ugly if we end up with inout (and its future friends) being turned into attributes.  Do you really want to see:<br></p><p>swap(@inout x, @inout y)<br></p><p>?  Is that making code better somehow?<br></p><p>Overall, I am very -1 on this proposal, for many of the reasons that Allen cites.  This is a “seemingly obvious” proposal (which has come up many times before) which is pretty bad in practice.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c40db4457ab2c91a0d8006da31b177c6?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Trent Nadeau</string> &lt;tanadeau at gmail.com&gt;<p>January 30, 2016 at 10:00:00am</p></header><div class="content"><p>Chris, thanks for your feedback. If Apple tried this idea internally and it<br>didn&#39;t work out, then that&#39;s probably reason enough to abandon my proposal.<br></p><p>Do you think this (along with `in` and `out` params) should be added to the<br>rejected list? If so, I can add it based on your and others&#39; comments.<br></p><p>On Fri, Jan 29, 2016 at 11:38 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br></p><p>&gt; On Jan 29, 2016, at 4:35 PM, Allen Ding via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; My 2 cents.<br>&gt; &gt;<br>&gt; &gt; 1. At the use site (and in actual usage in my code), func(&amp;value) is a<br>&gt; visually recognizable enough pattern that it is &quot;obvious&quot; when I read it.<br>&gt;<br>&gt; I agree.<br>&gt;<br>&gt; &gt; 2. At the call use, func(inout value) would also be obvious, but feels<br>&gt; clunkier and may even be less immediately recognizable. Just my opinion. I<br>&gt; find symbols easier to pick out when reading.<br>&gt;<br>&gt; I agree, we actually evaluated this sometime between Swift 1 and Swift 2<br>&gt; and converted actual code using &amp; to using inout on the call site, it<br>&gt; looked worse.  Clarity suffered, particularly when a parameter had an<br>&gt; argument label.<br>&gt;<br>&gt; Keep in mind that we’re forcing this syntax on the caller side of things<br>&gt; *only* to make it clear that something indirect is happening.  There is no<br>&gt; implementation reason to need this, it is to increase clarity.  I am very<br>&gt; concerned that making that “high pain” of such a sentinel would make defeat<br>&gt; the purpose of this design decision in the first place.<br>&gt;<br>&gt; &gt; 3. I really need to be convinced that symmetry of usage at call site<br>&gt; (for any language feature) and declaration is a desirable thing. In my<br>&gt; opinion, declaration and use are orthogonal things and a lot of Swift<br>&gt; already exhibits this asymmetry. e.g. parameter labels vs argument names,<br>&gt; why doesn&#39;t calling a mutating func require mutating somewhere in the call<br>&gt; to make it obvious the call might mutate the receiver.<br>&gt;<br>&gt; Agreed.<br>&gt;<br>&gt; &gt; 4. The possibility of Swift becoming more Rust-like and letting this<br>&gt; possibility drive this discussion does not seem like it should factor into<br>&gt; the discussion of whether this proposal is a win.<br>&gt;<br>&gt; Agreed.  As a concrete example of this, people frequently ask for “in” and<br>&gt; “out” parameters.  With the current design, the call site would both use &amp;<br>&gt; for inout, in, and out.  If we went with this proposal, we’d have to use in<br>&gt; and out on the call side as well, which forces taking “out” as a keyword.<br>&gt;<br>&gt; Another problem with this is that this would break imported<br>&gt; UnsafePointer’s, because it wouldn’t make sense to pass a “const char*” as<br>&gt; “inout”.  We’d be forced to design “in” parameters as a prerequisite for<br>&gt; this feature.<br>&gt;<br>&gt; Another problem with this proposal is that it gets *unbearably* ugly if we<br>&gt; end up with inout (and its future friends) being turned into attributes.<br>&gt; Do you really want to see:<br>&gt;<br>&gt; swap(@inout x, @inout y)<br>&gt;<br>&gt; ?  Is that making code better somehow?<br>&gt;<br>&gt; Overall, I am very -1 on this proposal, for many of the reasons that Allen<br>&gt; cites.  This is a “seemingly obvious” proposal (which has come up many<br>&gt; times before) which is pretty bad in practice.<br>&gt;<br>&gt; -Chris<br>&gt;<br>&gt;<br></p><p><br>-- <br>Trent Nadeau<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160130/a97090c5/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/caa7226ca750e974668243476ffbafd5?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Greg Titus</string> &lt;greg at omnigroup.com&gt;<p>January 30, 2016 at 07:00:00am</p></header><div class="content"><p>Big -1 from me.<br></p><p>&gt; On Jan 29, 2016, at 4:35 PM, Allen Ding via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; 3. I really need to be convinced that symmetry of usage at call site (for any language feature) and declaration is a desirable thing. In my opinion, declaration and use are orthogonal things and a lot of Swift already exhibits this asymmetry. e.g. parameter labels vs argument names, why doesn&#39;t calling a mutating func require mutating somewhere in the call to make it obvious the call might mutate the receiver.<br></p><p>I would go even farther than this. An important part of reading through code is determining: is this a declaration or a statement/expression? I.e. am I defining terminology or actually doing things right now? Having call site and declaration look too much like the other is positively a bad thing.<br></p><p>In this case, “inout” looks okay in normal declaration syntax, but ```add1(inout n)``` doesn’t look like a statement because ```inout n``` doesn’t look like an expression, because inout doesn’t look like either a prefix operator or a function application. This proposal adds an entirely new class of stuff (an extra identifier — a word) that can be thrown into a place that usually looks like and follows the syntactic rules for expressions, and I think that that adds FAR more confusion than it removes.<br></p><p>	- Greg<br></p><p>&gt; On Sat, Jan 30, 2016 at 6:44 AM, Trent Nadeau via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md &lt;https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md&gt;<br>&gt; <br>&gt; # Use `inout` at Function Call Sites<br>&gt; <br>&gt; * Proposal: TBD<br>&gt; * Author(s): [Trent Nadeau](http://github.com/tanadeau &lt;http://github.com/tanadeau&gt;)<br>&gt; * Status: TBD<br>&gt; * Review manager: TBD<br>&gt; <br>&gt; ## Introduction<br>&gt; <br>&gt; Currently when a function has `inout` parameters, the arguments are passed with the `&amp;` prefix operator. For example:<br>&gt; <br>&gt; ```swift<br>&gt; func add1(inout num: Int) {<br>&gt;     num += 1<br>&gt; }<br>&gt; <br>&gt; var n = 5<br>&gt; add1(&amp;n) // n is now 6<br>&gt; ```<br>&gt; <br>&gt; This operator does not fit with the rest of the language nor how the parameter is written at the function declaration. It should be replaced so that `inout` is used in both locations so that the call site above would instead be written as:<br>&gt; <br>&gt; ```swift<br>&gt; add1(inout n) // symmetric and now obvious that n can change<br>&gt; ```<br>&gt; <br>&gt; *Discussion thread TBD*<br>&gt; <br>&gt; ## Motivation<br>&gt; <br>&gt; The `&amp;` prefix operator is a holdover from C where it is usually read as &quot;address of&quot; and creates a pointer. While very useful in C due to its pervasive use of pointers, its meaning is not the same and introduces an unnecessary syntactic stumbling block from users coming from C. Removing this operator and using `inout` removes this stumbling block due to the semantic change.<br>&gt; <br>&gt; This operator is also disconnected from how the function declaration is written and does not imply that the argument may (and likely will) change. Using `inout` stands out, making it clear on first read that the variable may change.<br>&gt; <br>&gt; It is also possible that Swift may add Rust-like borrowing in the future. In that case, the `&amp;` symbol would be better used for a borrowed reference. Note that Rust uses the same symbol for declaring a borrowed reference and creating one, creating a nice symmetry in that respect of the language. I think Swift would want to have such symmetry as well.<br>&gt; <br>&gt; ## Detailed design<br>&gt; <br>&gt; ```<br>&gt; in-out-expression → inout identifier<br>&gt; ```<br>&gt; <br>&gt; ## Alternatives Considered<br>&gt; <br>&gt; Keeping the syntax as it currently is.<br>&gt; <br>&gt; -- <br>&gt; Trent Nadeau<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160130/18468ab0/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f4360e950005211c6d1d92cd7d8c92ad?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Jeremy Kates</string> &lt;jeremy.kates at charter.net&gt;<p>January 29, 2016 at 06:00:00pm</p></header><div class="content"><p>Not having the deep C background, the current syntax has never bothered me, but if it causes confusion for those that do, I think clarity makes logical sense.<br>+1<br></p><p>Sent from my iPhone<br></p><p>&gt; On Jan 29, 2016, at 4:44 PM, Trent Nadeau via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md<br>&gt; <br>&gt; # Use `inout` at Function Call Sites<br>&gt; <br>&gt; * Proposal: TBD<br>&gt; * Author(s): [Trent Nadeau](http://github.com/tanadeau)<br>&gt; * Status: TBD<br>&gt; * Review manager: TBD<br>&gt; <br>&gt; ## Introduction<br>&gt; <br>&gt; Currently when a function has `inout` parameters, the arguments are passed with the `&amp;` prefix operator. For example:<br>&gt; <br>&gt; ```swift<br>&gt; func add1(inout num: Int) {<br>&gt;     num += 1<br>&gt; }<br>&gt; <br>&gt; var n = 5<br>&gt; add1(&amp;n) // n is now 6<br>&gt; ```<br>&gt; <br>&gt; This operator does not fit with the rest of the language nor how the parameter is written at the function declaration. It should be replaced so that `inout` is used in both locations so that the call site above would instead be written as:<br>&gt; <br>&gt; ```swift<br>&gt; add1(inout n) // symmetric and now obvious that n can change<br>&gt; ```<br>&gt; <br>&gt; *Discussion thread TBD*<br>&gt; <br>&gt; ## Motivation<br>&gt; <br>&gt; The `&amp;` prefix operator is a holdover from C where it is usually read as &quot;address of&quot; and creates a pointer. While very useful in C due to its pervasive use of pointers, its meaning is not the same and introduces an unnecessary syntactic stumbling block from users coming from C. Removing this operator and using `inout` removes this stumbling block due to the semantic change.<br>&gt; <br>&gt; This operator is also disconnected from how the function declaration is written and does not imply that the argument may (and likely will) change. Using `inout` stands out, making it clear on first read that the variable may change.<br>&gt; <br>&gt; It is also possible that Swift may add Rust-like borrowing in the future. In that case, the `&amp;` symbol would be better used for a borrowed reference. Note that Rust uses the same symbol for declaring a borrowed reference and creating one, creating a nice symmetry in that respect of the language. I think Swift would want to have such symmetry as well.<br>&gt; <br>&gt; ## Detailed design<br>&gt; <br>&gt; ```<br>&gt; in-out-expression → inout identifier<br>&gt; ```<br>&gt; <br>&gt; ## Alternatives Considered<br>&gt; <br>&gt; Keeping the syntax as it currently is.<br>&gt; <br>&gt; -- <br>&gt; Trent Nadeau<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/1f3807b4/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>January 29, 2016 at 05:00:00pm</p></header><div class="content"><p>-1<br></p><p>I feel like the people who are voting +1 probably don&#39;t actually *use*<br>inout parameters very often, because it seems very obvious that<br>requiring the label &quot;inout&quot; at the function call site is extremely<br>unwieldy. inout parameters aren&#39;t some weird edge case that we want to<br>penalize, they&#39;re a perfectly legitimate feature of the language, and<br>they should be relatively easy to call.<br></p><p>-Kevin Ballard<br></p><p>On Fri, Jan 29, 2016, at 02:44 PM, Trent Nadeau via swift-evolution wrote:<br>&gt; https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md<br>&gt;<br>&gt; # Use `inout` at Function Call Sites<br></p><p>* Proposal: TBD<br>* Author(s): [Trent Nadeau](http://github.com/tanadeau)<br>* Status: TBD<br>* Review manager: TBD<br></p><p>## Introduction<br></p><p>Currently when a function has `inout` parameters, the arguments are<br>passed with the `&amp;` prefix operator. For example:<br></p><p>```swift func add1(inout num: Int) {    num += 1 }<br></p><p>var n = 5 add1(&amp;n) // n is now 6 ```<br></p><p>This operator does not fit with the rest of the language nor how the<br>parameter is written at the function declaration. It should be replaced<br>so that `inout` is used in both locations so that the call site above<br>would instead be written as:<br></p><p>```swift add1(inout n) // symmetric and now obvious that n can<br>change ```<br></p><p>*Discussion thread TBD*<br></p><p>## Motivation<br></p><p>The `&amp;` prefix operator is a holdover from C where it is usually read as<br>&quot;address of&quot; and creates a pointer. While very useful in C due to its<br>pervasive use of pointers, its meaning is not the same and introduces an<br>unnecessary syntactic stumbling block from users coming from C. Removing<br>this operator and using `inout` removes this stumbling block due to the<br>semantic change.<br></p><p>This operator is also disconnected from how the function declaration is<br>written and does not imply that the argument may (and likely will)<br>change. Using `inout` stands out, making it clear on first read that the<br>variable may change.<br></p><p>It is also possible that Swift may add Rust-like borrowing in the<br>future. In that case, the `&amp;` symbol would be better used for a borrowed<br>reference. Note that Rust uses the same symbol for declaring a borrowed<br>reference and creating one, creating a nice symmetry in that respect of<br>the language. I think Swift would want to have such symmetry as well.<br></p><p>## Detailed design<br></p><p>``` in-out-expression → inout identifier ```<br></p><p>## Alternatives Considered<br></p><p>Keeping the syntax as it currently is.<br>&gt;<br>&gt; --<br>&gt; Trent Nadeau<br>&gt; _________________________________________________<br>&gt; swift-evolution mailing list swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/831c34b3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c40db4457ab2c91a0d8006da31b177c6?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Trent Nadeau</string> &lt;tanadeau at gmail.com&gt;<p>January 29, 2016 at 08:00:00pm</p></header><div class="content"><p>C# uses its `ref` keyword in both function declarations and call sites (see<br>https://msdn.microsoft.com/en-us/library/14akc2c7.aspx), and I don&#39;t think<br>people consider that syntax to be penalized or an edge case.<br></p><p>On Fri, Jan 29, 2016 at 8:32 PM, Kevin Ballard via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; -1<br>&gt;<br>&gt; I feel like the people who are voting +1 probably don&#39;t actually *use*<br>&gt; inout parameters very often, because it seems very obvious that requiring<br>&gt; the label &quot;inout&quot; at the function call site is extremely unwieldy. inout<br>&gt; parameters aren&#39;t some weird edge case that we want to penalize, they&#39;re a<br>&gt; perfectly legitimate feature of the language, and they should be relatively<br>&gt; easy to call.<br>&gt;<br>&gt; -Kevin Ballard<br>&gt;<br>&gt; On Fri, Jan 29, 2016, at 02:44 PM, Trent Nadeau via swift-evolution wrote:<br>&gt;<br>&gt;<br>&gt; https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md<br>&gt;<br>&gt;<br>&gt; # Use `inout` at Function Call Sites<br>&gt;<br>&gt; * Proposal: TBD<br>&gt; * Author(s): [Trent Nadeau](http://github.com/tanadeau)<br>&gt; * Status: TBD<br>&gt; * Review manager: TBD<br>&gt;<br>&gt; ## Introduction<br>&gt;<br>&gt; Currently when a function has `inout` parameters, the arguments are passed with the `&amp;` prefix operator. For example:<br>&gt;<br>&gt; ```swift<br>&gt; func add1(inout num: Int) {<br>&gt;     num += 1<br>&gt; }<br>&gt;<br>&gt; var n = 5<br>&gt; add1(&amp;n) // n is now 6<br>&gt; ```<br>&gt;<br>&gt; This operator does not fit with the rest of the language nor how the parameter is written at the function declaration. It should be replaced so that `inout` is used in both locations so that the call site above would instead be written as:<br>&gt;<br>&gt; ```swift<br>&gt; add1(inout n) // symmetric and now obvious that n can change<br>&gt; ```<br>&gt;<br>&gt; *Discussion thread TBD*<br>&gt;<br>&gt; ## Motivation<br>&gt;<br>&gt; The `&amp;` prefix operator is a holdover from C where it is usually read as &quot;address of&quot; and creates a pointer. While very useful in C due to its pervasive use of pointers, its meaning is not the same and introduces an unnecessary syntactic stumbling block from users coming from C. Removing this operator and using `inout` removes this stumbling block due to the semantic change.<br>&gt;<br>&gt; This operator is also disconnected from how the function declaration is written and does not imply that the argument may (and likely will) change. Using `inout` stands out, making it clear on first read that the variable may change.<br>&gt;<br>&gt; It is also possible that Swift may add Rust-like borrowing in the future. In that case, the `&amp;` symbol would be better used for a borrowed reference. Note that Rust uses the same symbol for declaring a borrowed reference and creating one, creating a nice symmetry in that respect of the language. I think Swift would want to have such symmetry as well.<br>&gt;<br>&gt; ## Detailed design<br>&gt;<br>&gt; ```<br>&gt; in-out-expression → inout identifier<br>&gt; ```<br>&gt;<br>&gt; ## Alternatives Considered<br>&gt;<br>&gt; Keeping the syntax as it currently is.<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Trent Nadeau<br>&gt; *_______________________________________________*<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p><p><br>-- <br>Trent Nadeau<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/b50b28a6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>January 29, 2016 at 05:00:00pm</p></header><div class="content"><p>Personal opinion: +1 to the proposal. Would rather &#39;&amp;&#39; be available for<br>other language features. `inout` is a legitimate language feature, but not<br>in my opinion one important enough to consume that sigil. It serves two<br>purposes:<br></p><p>- C-style multiple return, in which case it *should* be discouraged in the<br>common case in favor of actual multiple return + tuple unpacking.<br>- Interoperability with C APIs, but some degree of cumbersomeness is<br>already to be expected given how C features map to Swift features. Plus,<br>this use case makes the semantic mismatch problem more pronounced since one<br>would naturally be tempted to ascribe C semantics to a superficially C-like<br>feature being used to interop with C APIs.<br></p><p>Best,<br>Austin<br></p><p><br></p><p>On Fri, Jan 29, 2016 at 5:40 PM, Trent Nadeau via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; C# uses its `ref` keyword in both function declarations and call sites<br>&gt; (see https://msdn.microsoft.com/en-us/library/14akc2c7.aspx), and I don&#39;t<br>&gt; think people consider that syntax to be penalized or an edge case.<br>&gt;<br>&gt; On Fri, Jan 29, 2016 at 8:32 PM, Kevin Ballard via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; -1<br>&gt;&gt;<br>&gt;&gt; I feel like the people who are voting +1 probably don&#39;t actually *use*<br>&gt;&gt; inout parameters very often, because it seems very obvious that requiring<br>&gt;&gt; the label &quot;inout&quot; at the function call site is extremely unwieldy. inout<br>&gt;&gt; parameters aren&#39;t some weird edge case that we want to penalize, they&#39;re a<br>&gt;&gt; perfectly legitimate feature of the language, and they should be relatively<br>&gt;&gt; easy to call.<br>&gt;&gt;<br>&gt;&gt; -Kevin Ballard<br>&gt;&gt;<br>&gt;&gt; On Fri, Jan 29, 2016, at 02:44 PM, Trent Nadeau via swift-evolution wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; # Use `inout` at Function Call Sites<br>&gt;&gt;<br>&gt;&gt; * Proposal: TBD<br>&gt;&gt; * Author(s): [Trent Nadeau](http://github.com/tanadeau)<br>&gt;&gt; * Status: TBD<br>&gt;&gt; * Review manager: TBD<br>&gt;&gt;<br>&gt;&gt; ## Introduction<br>&gt;&gt;<br>&gt;&gt; Currently when a function has `inout` parameters, the arguments are passed with the `&amp;` prefix operator. For example:<br>&gt;&gt;<br>&gt;&gt; ```swift<br>&gt;&gt; func add1(inout num: Int) {<br>&gt;&gt;     num += 1<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; var n = 5<br>&gt;&gt; add1(&amp;n) // n is now 6<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt; This operator does not fit with the rest of the language nor how the parameter is written at the function declaration. It should be replaced so that `inout` is used in both locations so that the call site above would instead be written as:<br>&gt;&gt;<br>&gt;&gt; ```swift<br>&gt;&gt; add1(inout n) // symmetric and now obvious that n can change<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt; *Discussion thread TBD*<br>&gt;&gt;<br>&gt;&gt; ## Motivation<br>&gt;&gt;<br>&gt;&gt; The `&amp;` prefix operator is a holdover from C where it is usually read as &quot;address of&quot; and creates a pointer. While very useful in C due to its pervasive use of pointers, its meaning is not the same and introduces an unnecessary syntactic stumbling block from users coming from C. Removing this operator and using `inout` removes this stumbling block due to the semantic change.<br>&gt;&gt;<br>&gt;&gt; This operator is also disconnected from how the function declaration is written and does not imply that the argument may (and likely will) change. Using `inout` stands out, making it clear on first read that the variable may change.<br>&gt;&gt;<br>&gt;&gt; It is also possible that Swift may add Rust-like borrowing in the future. In that case, the `&amp;` symbol would be better used for a borrowed reference. Note that Rust uses the same symbol for declaring a borrowed reference and creating one, creating a nice symmetry in that respect of the language. I think Swift would want to have such symmetry as well.<br>&gt;&gt;<br>&gt;&gt; ## Detailed design<br>&gt;&gt;<br>&gt;&gt; ```<br>&gt;&gt; in-out-expression → inout identifier<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt; ## Alternatives Considered<br>&gt;&gt;<br>&gt;&gt; Keeping the syntax as it currently is.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Trent Nadeau<br>&gt;&gt; *_______________________________________________*<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Trent Nadeau<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/b9ac6076/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0089229ece6e648767cff4dc6c6d38ab?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Charles Kissinger</string> &lt;crk at akkyra.com&gt;<p>January 29, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On Jan 29, 2016, at 5:57 PM, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Personal opinion: +1 to the proposal. Would rather &#39;&amp;&#39; be available for other language features. `inout` is a legitimate language feature, but not in my opinion one important enough to consume that sigil. It serves two purposes:<br>&gt; <br>&gt; - C-style multiple return, in which case it *should* be discouraged in the common case in favor of actual multiple return + tuple unpacking.<br>&gt; - Interoperability with C APIs, but some degree of cumbersomeness is already to be expected given how C features map to Swift features. Plus, this use case makes the semantic mismatch problem more pronounced since one would naturally be tempted to ascribe C semantics to a superficially C-like feature being used to interop with C APIs.<br></p><p>I’ve actually never used ‘inout’ for either of the purposes you mention. I do use it for modifying large copy-on-write data structures in situations where it will allow the compiler to minimizing copying. I think that’s a common, mainstream use.<br></p><p>—CK<br></p><p>&gt; <br>&gt; Best,<br>&gt; Austin<br>&gt; <br>&gt; <br>&gt; <br>&gt; On Fri, Jan 29, 2016 at 5:40 PM, Trent Nadeau via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; C# uses its `ref` keyword in both function declarations and call sites (see https://msdn.microsoft.com/en-us/library/14akc2c7.aspx &lt;https://msdn.microsoft.com/en-us/library/14akc2c7.aspx&gt;), and I don&#39;t think people consider that syntax to be penalized or an edge case.<br>&gt; <br>&gt; On Fri, Jan 29, 2016 at 8:32 PM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; -1<br>&gt;  <br>&gt; I feel like the people who are voting +1 probably don&#39;t actually use inout parameters very often, because it seems very obvious that requiring the label &quot;inout&quot; at the function call site is extremely unwieldy. inout parameters aren&#39;t some weird edge case that we want to penalize, they&#39;re a perfectly legitimate feature of the language, and they should be relatively easy to call.<br>&gt;  <br>&gt; -Kevin Ballard<br>&gt;  <br>&gt; On Fri, Jan 29, 2016, at 02:44 PM, Trent Nadeau via swift-evolution wrote:<br>&gt;&gt; https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md &lt;https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md&gt;<br>&gt;&gt;  <br>&gt;&gt; # Use `inout` at Function Call Sites<br>&gt;&gt; <br>&gt;&gt; * Proposal: TBD<br>&gt;&gt; * Author(s): [Trent Nadeau](http://github.com/tanadeau &lt;http://github.com/tanadeau&gt;)<br>&gt;&gt; * Status: TBD<br>&gt;&gt; * Review manager: TBD<br>&gt;&gt; <br>&gt;&gt; ## Introduction<br>&gt;&gt; <br>&gt;&gt; Currently when a function has `inout` parameters, the arguments are passed with the `&amp;` prefix operator. For example:<br>&gt;&gt; <br>&gt;&gt; ```swift<br>&gt;&gt; func add1(inout num: Int) {<br>&gt;&gt;     num += 1<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; var n = 5<br>&gt;&gt; add1(&amp;n) // n is now 6<br>&gt;&gt; ```<br>&gt;&gt; <br>&gt;&gt; This operator does not fit with the rest of the language nor how the parameter is written at the function declaration. It should be replaced so that `inout` is used in both locations so that the call site above would instead be written as:<br>&gt;&gt; <br>&gt;&gt; ```swift<br>&gt;&gt; add1(inout n) // symmetric and now obvious that n can change<br>&gt;&gt; ```<br>&gt;&gt; <br>&gt;&gt; *Discussion thread TBD*<br>&gt;&gt; <br>&gt;&gt; ## Motivation<br>&gt;&gt; <br>&gt;&gt; The `&amp;` prefix operator is a holdover from C where it is usually read as &quot;address of&quot; and creates a pointer. While very useful in C due to its pervasive use of pointers, its meaning is not the same and introduces an unnecessary syntactic stumbling block from users coming from C. Removing this operator and using `inout` removes this stumbling block due to the semantic change.<br>&gt;&gt; <br>&gt;&gt; This operator is also disconnected from how the function declaration is written and does not imply that the argument may (and likely will) change. Using `inout` stands out, making it clear on first read that the variable may change.<br>&gt;&gt; <br>&gt;&gt; It is also possible that Swift may add Rust-like borrowing in the future. In that case, the `&amp;` symbol would be better used for a borrowed reference. Note that Rust uses the same symbol for declaring a borrowed reference and creating one, creating a nice symmetry in that respect of the language. I think Swift would want to have such symmetry as well.<br>&gt;&gt; <br>&gt;&gt; ## Detailed design<br>&gt;&gt; <br>&gt;&gt; ```<br>&gt;&gt; in-out-expression → inout identifier<br>&gt;&gt; ```<br>&gt;&gt; <br>&gt;&gt; ## Alternatives Considered<br>&gt;&gt; <br>&gt;&gt; Keeping the syntax as it currently is.<br>&gt;&gt;  <br>&gt;&gt; -- <br>&gt;&gt; Trent Nadeau<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Trent Nadeau<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/9854d3e8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>January 29, 2016 at 08:00:00pm</p></header><div class="content"><p>If I understand you correctly, I suspect inout&#39;s semantics may not line up with your use case. <br></p><p>https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/doc/uid/TP40014097-CH34-ID545<br></p><p>Sent from my iPhone<br></p><p>&gt; On Jan 29, 2016, at 7:57 PM, Charles Kissinger &lt;crk at akkyra.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 29, 2016, at 5:57 PM, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Personal opinion: +1 to the proposal. Would rather &#39;&amp;&#39; be available for other language features. `inout` is a legitimate language feature, but not in my opinion one important enough to consume that sigil. It serves two purposes:<br>&gt;&gt; <br>&gt;&gt; - C-style multiple return, in which case it *should* be discouraged in the common case in favor of actual multiple return + tuple unpacking.<br>&gt;&gt; - Interoperability with C APIs, but some degree of cumbersomeness is already to be expected given how C features map to Swift features. Plus, this use case makes the semantic mismatch problem more pronounced since one would naturally be tempted to ascribe C semantics to a superficially C-like feature being used to interop with C APIs.<br>&gt; <br>&gt; I’ve actually never used ‘inout’ for either of the purposes you mention. I do use it for modifying large copy-on-write data structures in situations where it will allow the compiler to minimizing copying. I think that’s a common, mainstream use.<br>&gt; <br>&gt; —CK<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Best,<br>&gt;&gt; Austin<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Fri, Jan 29, 2016 at 5:40 PM, Trent Nadeau via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; C# uses its `ref` keyword in both function declarations and call sites (see https://msdn.microsoft.com/en-us/library/14akc2c7.aspx), and I don&#39;t think people consider that syntax to be penalized or an edge case.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Fri, Jan 29, 2016 at 8:32 PM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; -1<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; I feel like the people who are voting +1 probably don&#39;t actually use inout parameters very often, because it seems very obvious that requiring the label &quot;inout&quot; at the function call site is extremely unwieldy. inout parameters aren&#39;t some weird edge case that we want to penalize, they&#39;re a perfectly legitimate feature of the language, and they should be relatively easy to call.<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; -Kevin Ballard<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; On Fri, Jan 29, 2016, at 02:44 PM, Trent Nadeau via swift-evolution wrote:<br>&gt;&gt;&gt;&gt;&gt; https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; # Use `inout` at Function Call Sites<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; * Proposal: TBD<br>&gt;&gt;&gt;&gt;&gt; * Author(s): [Trent Nadeau](http://github.com/tanadeau)<br>&gt;&gt;&gt;&gt;&gt; * Status: TBD<br>&gt;&gt;&gt;&gt;&gt; * Review manager: TBD<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; ## Introduction<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Currently when a function has `inout` parameters, the arguments are passed with the `&amp;` prefix operator. For example:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; ```swift<br>&gt;&gt;&gt;&gt;&gt; func add1(inout num: Int) {<br>&gt;&gt;&gt;&gt;&gt;     num += 1<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; var n = 5<br>&gt;&gt;&gt;&gt;&gt; add1(&amp;n) // n is now 6<br>&gt;&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; This operator does not fit with the rest of the language nor how the parameter is written at the function declaration. It should be replaced so that `inout` is used in both locations so that the call site above would instead be written as:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; ```swift<br>&gt;&gt;&gt;&gt;&gt; add1(inout n) // symmetric and now obvious that n can change<br>&gt;&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; *Discussion thread TBD*<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; ## Motivation<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The `&amp;` prefix operator is a holdover from C where it is usually read as &quot;address of&quot; and creates a pointer. While very useful in C due to its pervasive use of pointers, its meaning is not the same and introduces an unnecessary syntactic stumbling block from users coming from C. Removing this operator and using `inout` removes this stumbling block due to the semantic change.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; This operator is also disconnected from how the function declaration is written and does not imply that the argument may (and likely will) change. Using `inout` stands out, making it clear on first read that the variable may change.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; It is also possible that Swift may add Rust-like borrowing in the future. In that case, the `&amp;` symbol would be better used for a borrowed reference. Note that Rust uses the same symbol for declaring a borrowed reference and creating one, creating a nice symmetry in that respect of the language. I think Swift would want to have such symmetry as well.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; ## Detailed design<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt;&gt; in-out-expression → inout identifier<br>&gt;&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; ## Alternatives Considered<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Keeping the syntax as it currently is.<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt; Trent Nadeau<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Trent Nadeau<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/ff70884c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0089229ece6e648767cff4dc6c6d38ab?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Charles Kissinger</string> &lt;crk at akkyra.com&gt;<p>January 29, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Jan 29, 2016, at 8:36 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt; <br>&gt; If I understand you correctly, I suspect inout&#39;s semantics may not line up with your use case. <br>&gt; <br>&gt; https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/doc/uid/TP40014097-CH34-ID545 &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/doc/uid/TP40014097-CH34-ID545&gt;<br></p><p>The “As an optimization …” paragraph in the link explains why it works. I don’t see a problem with the semantics since it conceptually still makes a copy and passes back a modified one. It just fulfills the concept in a very efficient way. :-)<br></p><p>It may be unwise to depend on particular compiler optimizations, of course, but the Swift team has been pushing value semantics and copy-on-write, so it seems essential that those be supported efficiently. The alternative often is just to put a lot of code inline, which isn’t very appealing.<br></p><p>—CK<br></p><p>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt; On Jan 29, 2016, at 7:57 PM, Charles Kissinger &lt;crk at akkyra.com &lt;mailto:crk at akkyra.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 29, 2016, at 5:57 PM, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Personal opinion: +1 to the proposal. Would rather &#39;&amp;&#39; be available for other language features. `inout` is a legitimate language feature, but not in my opinion one important enough to consume that sigil. It serves two purposes:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - C-style multiple return, in which case it *should* be discouraged in the common case in favor of actual multiple return + tuple unpacking.<br>&gt;&gt;&gt; - Interoperability with C APIs, but some degree of cumbersomeness is already to be expected given how C features map to Swift features. Plus, this use case makes the semantic mismatch problem more pronounced since one would naturally be tempted to ascribe C semantics to a superficially C-like feature being used to interop with C APIs.<br>&gt;&gt; <br>&gt;&gt; I’ve actually never used ‘inout’ for either of the purposes you mention. I do use it for modifying large copy-on-write data structures in situations where it will allow the compiler to minimizing copying. I think that’s a common, mainstream use.<br>&gt;&gt; <br>&gt;&gt; —CK<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Best,<br>&gt;&gt;&gt; Austin<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Fri, Jan 29, 2016 at 5:40 PM, Trent Nadeau via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; C# uses its `ref` keyword in both function declarations and call sites (see https://msdn.microsoft.com/en-us/library/14akc2c7.aspx &lt;https://msdn.microsoft.com/en-us/library/14akc2c7.aspx&gt;), and I don&#39;t think people consider that syntax to be penalized or an edge case.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Fri, Jan 29, 2016 at 8:32 PM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; -1<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; I feel like the people who are voting +1 probably don&#39;t actually use inout parameters very often, because it seems very obvious that requiring the label &quot;inout&quot; at the function call site is extremely unwieldy. inout parameters aren&#39;t some weird edge case that we want to penalize, they&#39;re a perfectly legitimate feature of the language, and they should be relatively easy to call.<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; -Kevin Ballard<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; On Fri, Jan 29, 2016, at 02:44 PM, Trent Nadeau via swift-evolution wrote:<br>&gt;&gt;&gt;&gt; https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md &lt;https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md&gt;<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; # Use `inout` at Function Call Sites<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; * Proposal: TBD<br>&gt;&gt;&gt;&gt; * Author(s): [Trent Nadeau](http://github.com/tanadeau &lt;http://github.com/tanadeau&gt;)<br>&gt;&gt;&gt;&gt; * Status: TBD<br>&gt;&gt;&gt;&gt; * Review manager: TBD<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ## Introduction<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Currently when a function has `inout` parameters, the arguments are passed with the `&amp;` prefix operator. For example:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ```swift<br>&gt;&gt;&gt;&gt; func add1(inout num: Int) {<br>&gt;&gt;&gt;&gt;     num += 1<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; var n = 5<br>&gt;&gt;&gt;&gt; add1(&amp;n) // n is now 6<br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This operator does not fit with the rest of the language nor how the parameter is written at the function declaration. It should be replaced so that `inout` is used in both locations so that the call site above would instead be written as:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ```swift<br>&gt;&gt;&gt;&gt; add1(inout n) // symmetric and now obvious that n can change<br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; *Discussion thread TBD*<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ## Motivation<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The `&amp;` prefix operator is a holdover from C where it is usually read as &quot;address of&quot; and creates a pointer. While very useful in C due to its pervasive use of pointers, its meaning is not the same and introduces an unnecessary syntactic stumbling block from users coming from C. Removing this operator and using `inout` removes this stumbling block due to the semantic change.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This operator is also disconnected from how the function declaration is written and does not imply that the argument may (and likely will) change. Using `inout` stands out, making it clear on first read that the variable may change.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It is also possible that Swift may add Rust-like borrowing in the future. In that case, the `&amp;` symbol would be better used for a borrowed reference. Note that Rust uses the same symbol for declaring a borrowed reference and creating one, creating a nice symmetry in that respect of the language. I think Swift would want to have such symmetry as well.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ## Detailed design<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt; in-out-expression → inout identifier<br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ## Alternatives Considered<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Keeping the syntax as it currently is.<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; Trent Nadeau<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Trent Nadeau<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/c85434d3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>January 29, 2016 at 09:00:00pm</p></header><div class="content"><p>I&#39;m not comfortable depending on implementation details for this sort of thing, but whatever floats your boat :).<br></p><p>I&#39;d argue that replacing &#39;&amp;&#39; with some other single-character sigil would preserve the conciseness benefit while reminding users that inout != pass-by-reference, but I have no idea which one to use and it seems like this proposal is close to DOA anyways.<br></p><p>Austin<br></p><p>&gt; On Jan 29, 2016, at 9:28 PM, Charles Kissinger &lt;crk at akkyra.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 29, 2016, at 8:36 PM, Austin Zheng &lt;austinzheng at gmail.com &lt;mailto:austinzheng at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; If I understand you correctly, I suspect inout&#39;s semantics may not line up with your use case. <br>&gt;&gt; <br>&gt;&gt; https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/doc/uid/TP40014097-CH34-ID545 &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/doc/uid/TP40014097-CH34-ID545&gt;<br>&gt; <br>&gt; The “As an optimization …” paragraph in the link explains why it works. I don’t see a problem with the semantics since it conceptually still makes a copy and passes back a modified one. It just fulfills the concept in a very efficient way. :-)<br>&gt; <br>&gt; It may be unwise to depend on particular compiler optimizations, of course, but the Swift team has been pushing value semantics and copy-on-write, so it seems essential that those be supported efficiently. The alternative often is just to put a lot of code inline, which isn’t very appealing.<br>&gt; <br>&gt; —CK<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt; On Jan 29, 2016, at 7:57 PM, Charles Kissinger &lt;crk at akkyra.com &lt;mailto:crk at akkyra.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 29, 2016, at 5:57 PM, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Personal opinion: +1 to the proposal. Would rather &#39;&amp;&#39; be available for other language features. `inout` is a legitimate language feature, but not in my opinion one important enough to consume that sigil. It serves two purposes:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - C-style multiple return, in which case it *should* be discouraged in the common case in favor of actual multiple return + tuple unpacking.<br>&gt;&gt;&gt;&gt; - Interoperability with C APIs, but some degree of cumbersomeness is already to be expected given how C features map to Swift features. Plus, this use case makes the semantic mismatch problem more pronounced since one would naturally be tempted to ascribe C semantics to a superficially C-like feature being used to interop with C APIs.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’ve actually never used ‘inout’ for either of the purposes you mention. I do use it for modifying large copy-on-write data structures in situations where it will allow the compiler to minimizing copying. I think that’s a common, mainstream use.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; —CK<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Best,<br>&gt;&gt;&gt;&gt; Austin<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Fri, Jan 29, 2016 at 5:40 PM, Trent Nadeau via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; C# uses its `ref` keyword in both function declarations and call sites (see https://msdn.microsoft.com/en-us/library/14akc2c7.aspx &lt;https://msdn.microsoft.com/en-us/library/14akc2c7.aspx&gt;), and I don&#39;t think people consider that syntax to be penalized or an edge case.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Fri, Jan 29, 2016 at 8:32 PM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; -1<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; I feel like the people who are voting +1 probably don&#39;t actually use inout parameters very often, because it seems very obvious that requiring the label &quot;inout&quot; at the function call site is extremely unwieldy. inout parameters aren&#39;t some weird edge case that we want to penalize, they&#39;re a perfectly legitimate feature of the language, and they should be relatively easy to call.<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; -Kevin Ballard<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; On Fri, Jan 29, 2016, at 02:44 PM, Trent Nadeau via swift-evolution wrote:<br>&gt;&gt;&gt;&gt;&gt; https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md &lt;https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md&gt;<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; # Use `inout` at Function Call Sites<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; * Proposal: TBD<br>&gt;&gt;&gt;&gt;&gt; * Author(s): [Trent Nadeau](http://github.com/tanadeau &lt;http://github.com/tanadeau&gt;)<br>&gt;&gt;&gt;&gt;&gt; * Status: TBD<br>&gt;&gt;&gt;&gt;&gt; * Review manager: TBD<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; ## Introduction<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Currently when a function has `inout` parameters, the arguments are passed with the `&amp;` prefix operator. For example:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; ```swift<br>&gt;&gt;&gt;&gt;&gt; func add1(inout num: Int) {<br>&gt;&gt;&gt;&gt;&gt;     num += 1<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; var n = 5<br>&gt;&gt;&gt;&gt;&gt; add1(&amp;n) // n is now 6<br>&gt;&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; This operator does not fit with the rest of the language nor how the parameter is written at the function declaration. It should be replaced so that `inout` is used in both locations so that the call site above would instead be written as:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; ```swift<br>&gt;&gt;&gt;&gt;&gt; add1(inout n) // symmetric and now obvious that n can change<br>&gt;&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; *Discussion thread TBD*<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; ## Motivation<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The `&amp;` prefix operator is a holdover from C where it is usually read as &quot;address of&quot; and creates a pointer. While very useful in C due to its pervasive use of pointers, its meaning is not the same and introduces an unnecessary syntactic stumbling block from users coming from C. Removing this operator and using `inout` removes this stumbling block due to the semantic change.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; This operator is also disconnected from how the function declaration is written and does not imply that the argument may (and likely will) change. Using `inout` stands out, making it clear on first read that the variable may change.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; It is also possible that Swift may add Rust-like borrowing in the future. In that case, the `&amp;` symbol would be better used for a borrowed reference. Note that Rust uses the same symbol for declaring a borrowed reference and creating one, creating a nice symmetry in that respect of the language. I think Swift would want to have such symmetry as well.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; ## Detailed design<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt;&gt; in-out-expression → inout identifier<br>&gt;&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; ## Alternatives Considered<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Keeping the syntax as it currently is.<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt; Trent Nadeau<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; Trent Nadeau<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/66ab1c5c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0089229ece6e648767cff4dc6c6d38ab?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Charles Kissinger</string> &lt;crk at akkyra.com&gt;<p>January 29, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On Jan 29, 2016, at 9:33 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt; <br>&gt; I&#39;m not comfortable depending on implementation details for this sort of thing, but whatever floats your boat :).<br></p><p>Yes, I wouldn’t rely on it either if I knew of an alternative. <br></p><p>I was only trying to make the point that there are more use cases for functions with inout parameters than those you mentioned. It would be interesting to know how often inout *is* used by the community as a whole.<br></p><p>—CK<br></p><p>&gt; <br>&gt; I&#39;d argue that replacing &#39;&amp;&#39; with some other single-character sigil would preserve the conciseness benefit while reminding users that inout != pass-by-reference, but I have no idea which one to use and it seems like this proposal is close to DOA anyways.<br>&gt; <br>&gt; Austin<br>&gt; <br>&gt;&gt; On Jan 29, 2016, at 9:28 PM, Charles Kissinger &lt;crk at akkyra.com &lt;mailto:crk at akkyra.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 29, 2016, at 8:36 PM, Austin Zheng &lt;austinzheng at gmail.com &lt;mailto:austinzheng at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If I understand you correctly, I suspect inout&#39;s semantics may not line up with your use case. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/doc/uid/TP40014097-CH34-ID545 &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/doc/uid/TP40014097-CH34-ID545&gt;<br>&gt;&gt; <br>&gt;&gt; The “As an optimization …” paragraph in the link explains why it works. I don’t see a problem with the semantics since it conceptually still makes a copy and passes back a modified one. It just fulfills the concept in a very efficient way. :-)<br>&gt;&gt; <br>&gt;&gt; It may be unwise to depend on particular compiler optimizations, of course, but the Swift team has been pushing value semantics and copy-on-write, so it seems essential that those be supported efficiently. The alternative often is just to put a lot of code inline, which isn’t very appealing.<br>&gt;&gt; <br>&gt;&gt; —CK<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Jan 29, 2016, at 7:57 PM, Charles Kissinger &lt;crk at akkyra.com &lt;mailto:crk at akkyra.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jan 29, 2016, at 5:57 PM, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Personal opinion: +1 to the proposal. Would rather &#39;&amp;&#39; be available for other language features. `inout` is a legitimate language feature, but not in my opinion one important enough to consume that sigil. It serves two purposes:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; - C-style multiple return, in which case it *should* be discouraged in the common case in favor of actual multiple return + tuple unpacking.<br>&gt;&gt;&gt;&gt;&gt; - Interoperability with C APIs, but some degree of cumbersomeness is already to be expected given how C features map to Swift features. Plus, this use case makes the semantic mismatch problem more pronounced since one would naturally be tempted to ascribe C semantics to a superficially C-like feature being used to interop with C APIs.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’ve actually never used ‘inout’ for either of the purposes you mention. I do use it for modifying large copy-on-write data structures in situations where it will allow the compiler to minimizing copying. I think that’s a common, mainstream use.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; —CK<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Best,<br>&gt;&gt;&gt;&gt;&gt; Austin<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Fri, Jan 29, 2016 at 5:40 PM, Trent Nadeau via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; C# uses its `ref` keyword in both function declarations and call sites (see https://msdn.microsoft.com/en-us/library/14akc2c7.aspx &lt;https://msdn.microsoft.com/en-us/library/14akc2c7.aspx&gt;), and I don&#39;t think people consider that syntax to be penalized or an edge case.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Fri, Jan 29, 2016 at 8:32 PM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; -1<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; I feel like the people who are voting +1 probably don&#39;t actually use inout parameters very often, because it seems very obvious that requiring the label &quot;inout&quot; at the function call site is extremely unwieldy. inout parameters aren&#39;t some weird edge case that we want to penalize, they&#39;re a perfectly legitimate feature of the language, and they should be relatively easy to call.<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; -Kevin Ballard<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; On Fri, Jan 29, 2016, at 02:44 PM, Trent Nadeau via swift-evolution wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md &lt;https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt; # Use `inout` at Function Call Sites<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; * Proposal: TBD<br>&gt;&gt;&gt;&gt;&gt;&gt; * Author(s): [Trent Nadeau](http://github.com/tanadeau &lt;http://github.com/tanadeau&gt;)<br>&gt;&gt;&gt;&gt;&gt;&gt; * Status: TBD<br>&gt;&gt;&gt;&gt;&gt;&gt; * Review manager: TBD<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; ## Introduction<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Currently when a function has `inout` parameters, the arguments are passed with the `&amp;` prefix operator. For example:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; ```swift<br>&gt;&gt;&gt;&gt;&gt;&gt; func add1(inout num: Int) {<br>&gt;&gt;&gt;&gt;&gt;&gt;     num += 1<br>&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; var n = 5<br>&gt;&gt;&gt;&gt;&gt;&gt; add1(&amp;n) // n is now 6<br>&gt;&gt;&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; This operator does not fit with the rest of the language nor how the parameter is written at the function declaration. It should be replaced so that `inout` is used in both locations so that the call site above would instead be written as:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; ```swift<br>&gt;&gt;&gt;&gt;&gt;&gt; add1(inout n) // symmetric and now obvious that n can change<br>&gt;&gt;&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; *Discussion thread TBD*<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; ## Motivation<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The `&amp;` prefix operator is a holdover from C where it is usually read as &quot;address of&quot; and creates a pointer. While very useful in C due to its pervasive use of pointers, its meaning is not the same and introduces an unnecessary syntactic stumbling block from users coming from C. Removing this operator and using `inout` removes this stumbling block due to the semantic change.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; This operator is also disconnected from how the function declaration is written and does not imply that the argument may (and likely will) change. Using `inout` stands out, making it clear on first read that the variable may change.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; It is also possible that Swift may add Rust-like borrowing in the future. In that case, the `&amp;` symbol would be better used for a borrowed reference. Note that Rust uses the same symbol for declaring a borrowed reference and creating one, creating a nice symmetry in that respect of the language. I think Swift would want to have such symmetry as well.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; ## Detailed design<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt;&gt;&gt; in-out-expression → inout identifier<br>&gt;&gt;&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; ## Alternatives Considered<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Keeping the syntax as it currently is.<br>&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt;&gt; Trent Nadeau<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt; Trent Nadeau<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/e99850e2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>January 29, 2016 at 10:00:00pm</p></header><div class="content"><p>Maybe that one use case should be turned into part of the &#39;formal specification&#39;, since it seems both useful and like something people would be inclined to assume anyways. Not sure what the ramifications would be. Maybe I&#39;ll start a pre-proposal thread.<br></p><p>Austin<br></p><p>&gt; On Jan 29, 2016, at 10:03 PM, Charles Kissinger &lt;crk at akkyra.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 29, 2016, at 9:33 PM, Austin Zheng &lt;austinzheng at gmail.com &lt;mailto:austinzheng at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I&#39;m not comfortable depending on implementation details for this sort of thing, but whatever floats your boat :).<br>&gt; <br>&gt; Yes, I wouldn’t rely on it either if I knew of an alternative. <br>&gt; <br>&gt; I was only trying to make the point that there are more use cases for functions with inout parameters than those you mentioned. It would be interesting to know how often inout *is* used by the community as a whole.<br>&gt; <br>&gt; —CK<br>&gt; <br>&gt;&gt; <br>&gt;&gt; I&#39;d argue that replacing &#39;&amp;&#39; with some other single-character sigil would preserve the conciseness benefit while reminding users that inout != pass-by-reference, but I have no idea which one to use and it seems like this proposal is close to DOA anyways.<br>&gt;&gt; <br>&gt;&gt; Austin<br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 29, 2016, at 9:28 PM, Charles Kissinger &lt;crk at akkyra.com &lt;mailto:crk at akkyra.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 29, 2016, at 8:36 PM, Austin Zheng &lt;austinzheng at gmail.com &lt;mailto:austinzheng at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If I understand you correctly, I suspect inout&#39;s semantics may not line up with your use case. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/doc/uid/TP40014097-CH34-ID545 &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/doc/uid/TP40014097-CH34-ID545&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The “As an optimization …” paragraph in the link explains why it works. I don’t see a problem with the semantics since it conceptually still makes a copy and passes back a modified one. It just fulfills the concept in a very efficient way. :-)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It may be unwise to depend on particular compiler optimizations, of course, but the Swift team has been pushing value semantics and copy-on-write, so it seems essential that those be supported efficiently. The alternative often is just to put a lot of code inline, which isn’t very appealing.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; —CK<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 29, 2016, at 7:57 PM, Charles Kissinger &lt;crk at akkyra.com &lt;mailto:crk at akkyra.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jan 29, 2016, at 5:57 PM, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Personal opinion: +1 to the proposal. Would rather &#39;&amp;&#39; be available for other language features. `inout` is a legitimate language feature, but not in my opinion one important enough to consume that sigil. It serves two purposes:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; - C-style multiple return, in which case it *should* be discouraged in the common case in favor of actual multiple return + tuple unpacking.<br>&gt;&gt;&gt;&gt;&gt;&gt; - Interoperability with C APIs, but some degree of cumbersomeness is already to be expected given how C features map to Swift features. Plus, this use case makes the semantic mismatch problem more pronounced since one would naturally be tempted to ascribe C semantics to a superficially C-like feature being used to interop with C APIs.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I’ve actually never used ‘inout’ for either of the purposes you mention. I do use it for modifying large copy-on-write data structures in situations where it will allow the compiler to minimizing copying. I think that’s a common, mainstream use.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; —CK<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Best,<br>&gt;&gt;&gt;&gt;&gt;&gt; Austin<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jan 29, 2016 at 5:40 PM, Trent Nadeau via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; C# uses its `ref` keyword in both function declarations and call sites (see https://msdn.microsoft.com/en-us/library/14akc2c7.aspx &lt;https://msdn.microsoft.com/en-us/library/14akc2c7.aspx&gt;), and I don&#39;t think people consider that syntax to be penalized or an edge case.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jan 29, 2016 at 8:32 PM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; -1<br>&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt; I feel like the people who are voting +1 probably don&#39;t actually use inout parameters very often, because it seems very obvious that requiring the label &quot;inout&quot; at the function call site is extremely unwieldy. inout parameters aren&#39;t some weird edge case that we want to penalize, they&#39;re a perfectly legitimate feature of the language, and they should be relatively easy to call.<br>&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt; -Kevin Ballard<br>&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jan 29, 2016, at 02:44 PM, Trent Nadeau via swift-evolution wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md &lt;https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; # Use `inout` at Function Call Sites<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; * Proposal: TBD<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; * Author(s): [Trent Nadeau](http://github.com/tanadeau &lt;http://github.com/tanadeau&gt;)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; * Status: TBD<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; * Review manager: TBD<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; ## Introduction<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Currently when a function has `inout` parameters, the arguments are passed with the `&amp;` prefix operator. For example:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; ```swift<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; func add1(inout num: Int) {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     num += 1<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; var n = 5<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; add1(&amp;n) // n is now 6<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; This operator does not fit with the rest of the language nor how the parameter is written at the function declaration. It should be replaced so that `inout` is used in both locations so that the call site above would instead be written as:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; ```swift<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; add1(inout n) // symmetric and now obvious that n can change<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; *Discussion thread TBD*<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; ## Motivation<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; The `&amp;` prefix operator is a holdover from C where it is usually read as &quot;address of&quot; and creates a pointer. While very useful in C due to its pervasive use of pointers, its meaning is not the same and introduces an unnecessary syntactic stumbling block from users coming from C. Removing this operator and using `inout` removes this stumbling block due to the semantic change.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; This operator is also disconnected from how the function declaration is written and does not imply that the argument may (and likely will) change. Using `inout` stands out, making it clear on first read that the variable may change.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; It is also possible that Swift may add Rust-like borrowing in the future. In that case, the `&amp;` symbol would be better used for a borrowed reference. Note that Rust uses the same symbol for declaring a borrowed reference and creating one, creating a nice symmetry in that respect of the language. I think Swift would want to have such symmetry as well.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; ## Detailed design<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; in-out-expression → inout identifier<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; ## Alternatives Considered<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Keeping the syntax as it currently is.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Trent Nadeau<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt;&gt; Trent Nadeau<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/cec60abe/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>January 29, 2016 at 06:00:00pm</p></header><div class="content"><p>Can you show us some examples? I remember your replace(_:with:); what else do you use?<br></p><p>Jordan<br></p><p>&gt; On Jan 29, 2016, at 17:32 , Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; -1<br>&gt;  <br>&gt; I feel like the people who are voting +1 probably don&#39;t actually use inout parameters very often, because it seems very obvious that requiring the label &quot;inout&quot; at the function call site is extremely unwieldy. inout parameters aren&#39;t some weird edge case that we want to penalize, they&#39;re a perfectly legitimate feature of the language, and they should be relatively easy to call.<br>&gt;  <br>&gt; -Kevin Ballard<br>&gt;  <br>&gt; On Fri, Jan 29, 2016, at 02:44 PM, Trent Nadeau via swift-evolution wrote:<br>&gt;&gt; https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md &lt;https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md&gt;<br>&gt;&gt;  <br>&gt;&gt; # Use `inout` at Function Call Sites<br>&gt;&gt; <br>&gt;&gt; * Proposal: TBD<br>&gt;&gt; * Author(s): [Trent Nadeau](http://github.com/tanadeau &lt;http://github.com/tanadeau&gt;)<br>&gt;&gt; * Status: TBD<br>&gt;&gt; * Review manager: TBD<br>&gt;&gt; <br>&gt;&gt; ## Introduction<br>&gt;&gt; <br>&gt;&gt; Currently when a function has `inout` parameters, the arguments are passed with the `&amp;` prefix operator. For example:<br>&gt;&gt; <br>&gt;&gt; ```swift<br>&gt;&gt; func add1(inout num: Int) {<br>&gt;&gt;     num += 1<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; var n = 5<br>&gt;&gt; add1(&amp;n) // n is now 6<br>&gt;&gt; ```<br>&gt;&gt; <br>&gt;&gt; This operator does not fit with the rest of the language nor how the parameter is written at the function declaration. It should be replaced so that `inout` is used in both locations so that the call site above would instead be written as:<br>&gt;&gt; <br>&gt;&gt; ```swift<br>&gt;&gt; add1(inout n) // symmetric and now obvious that n can change<br>&gt;&gt; ```<br>&gt;&gt; <br>&gt;&gt; *Discussion thread TBD*<br>&gt;&gt; <br>&gt;&gt; ## Motivation<br>&gt;&gt; <br>&gt;&gt; The `&amp;` prefix operator is a holdover from C where it is usually read as &quot;address of&quot; and creates a pointer. While very useful in C due to its pervasive use of pointers, its meaning is not the same and introduces an unnecessary syntactic stumbling block from users coming from C. Removing this operator and using `inout` removes this stumbling block due to the semantic change.<br>&gt;&gt; <br>&gt;&gt; This operator is also disconnected from how the function declaration is written and does not imply that the argument may (and likely will) change. Using `inout` stands out, making it clear on first read that the variable may change.<br>&gt;&gt; <br>&gt;&gt; It is also possible that Swift may add Rust-like borrowing in the future. In that case, the `&amp;` symbol would be better used for a borrowed reference. Note that Rust uses the same symbol for declaring a borrowed reference and creating one, creating a nice symmetry in that respect of the language. I think Swift would want to have such symmetry as well.<br>&gt;&gt; <br>&gt;&gt; ## Detailed design<br>&gt;&gt; <br>&gt;&gt; ```<br>&gt;&gt; in-out-expression → inout identifier<br>&gt;&gt; ```<br>&gt;&gt; <br>&gt;&gt; ## Alternatives Considered<br>&gt;&gt; <br>&gt;&gt; Keeping the syntax as it currently is.<br>&gt;&gt;  <br>&gt;&gt; -- <br>&gt;&gt; Trent Nadeau<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/0e2f778a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>January 29, 2016 at 07:00:00pm</p></header><div class="content"><p>replace(_:with:) is probably where I use inout the most often (and I think requiring the keyword `inout` instead of &amp; makes that much more cumbersome). Other examples of uses of stdlib APIs are calling decode() on any of the UnicodeCodecType types (I have multiple different pieces of code that does this with UTF8), passing a target stream to print(), invoking isUniquelyReferenced() or isUniquelyReferencedNonObjC() (where taking an inout parameter already is just an implementation detail, and having to write `inout` when calling it makes it even weirder), or calling swap(). And every now and then I do write other once-off functions/methods that use inout (for example, I have an implementation of SipHash, and it uses a helper function called u8to64_le() that takes an inout parameter).<br></p><p>The basic point I&#39;m trying to make, though, is that requiring the use of<br>`inout` at the call site only serves to discourage people from writing<br>new functions that take inout parameters, because it makes calling them<br>more awkward, but inout is a perfectly legitimate feature that doesn&#39;t<br>deserve to be discouraged. It may not be used all that often, but by the<br>same argument people don&#39;t run into &amp; very often.<br></p><p>And FWIW, if we do ever add Rust-like borrowing, then `inout` would<br>presumably be replaced entirely with the equivalent of `&amp;mut`, which<br>means that argument isn&#39;t compelling because we&#39;d just end up switching<br>all those calls that pass `inout x` right back to `&amp;x` or `&amp;mut x`.<br></p><p>-Kevin Ballard<br></p><p>On Fri, Jan 29, 2016, at 06:39 PM, Jordan Rose wrote:<br>&gt; Can you show us some examples? I remember your replace(_:with:); what<br>&gt; else do you use?<br>&gt;<br>&gt; Jordan<br>&gt;<br>&gt;&gt; On Jan 29, 2016, at 17:32 , Kevin Ballard via swift-evolution &lt;swift-<br>&gt;&gt; evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; -1<br>&gt;&gt;<br>&gt;&gt; I feel like the people who are voting +1 probably don&#39;t actually<br>&gt;&gt; *use* inout parameters very often, because it seems very obvious that<br>&gt;&gt; requiring the label &quot;inout&quot; at the function call site is extremely<br>&gt;&gt; unwieldy. inout parameters aren&#39;t some weird edge case that we want<br>&gt;&gt; to penalize, they&#39;re a perfectly legitimate feature of the language,<br>&gt;&gt; and they should be relatively easy to call.<br>&gt;&gt;<br>&gt;&gt; -Kevin Ballard<br>&gt;&gt;<br>&gt;&gt; On Fri, Jan 29, 2016, at 02:44 PM, Trent Nadeau via swift-<br>&gt;&gt; evolution wrote:<br>&gt;&gt;&gt; https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; # Use `inout` at Function Call Sites<br></p><p>* Proposal: TBD<br>* Author(s): [Trent Nadeau](http://github.com/tanadeau)<br>* Status: TBD<br>* Review manager: TBD<br></p><p>## Introduction<br></p><p>Currently when a function has `inout` parameters, the arguments are<br>passed with the `&amp;` prefix operator. For example:<br></p><p>```swift func add1(inout num: Int) {    num += 1 }<br></p><p>var n = 5 add1(&amp;n) // n is now 6 ```<br></p><p>This operator does not fit with the rest of the language nor how the<br>parameter is written at the function declaration. It should be replaced<br>so that `inout` is used in both locations so that the call site above<br>would instead be written as:<br></p><p>```swift add1(inout n) // symmetric and now obvious that n can<br>change ```<br></p><p>*Discussion thread TBD*<br></p><p>## Motivation<br></p><p>The `&amp;` prefix operator is a holdover from C where it is usually read as<br>&quot;address of&quot; and creates a pointer. While very useful in C due to its<br>pervasive use of pointers, its meaning is not the same and introduces an<br>unnecessary syntactic stumbling block from users coming from C. Removing<br>this operator and using `inout` removes this stumbling block due to the<br>semantic change.<br></p><p>This operator is also disconnected from how the function declaration is<br>written and does not imply that the argument may (and likely will)<br>change. Using `inout` stands out, making it clear on first read that the<br>variable may change.<br></p><p>It is also possible that Swift may add Rust-like borrowing in the<br>future. In that case, the `&amp;` symbol would be better used for a borrowed<br>reference. Note that Rust uses the same symbol for declaring a borrowed<br>reference and creating one, creating a nice symmetry in that respect of<br>the language. I think Swift would want to have such symmetry as well.<br></p><p>## Detailed design<br></p><p>``` in-out-expression → inout identifier ```<br></p><p>## Alternatives Considered<br></p><p>Keeping the syntax as it currently is.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; Trent Nadeau<br>&gt;&gt;&gt; _________________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/9222b251/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>January 29, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; add1(&amp;n) // n is now 6<br>&gt; add1(inout n) // symmetric and now obvious that n can change<br></p><p>I&#39;m not a really big fan of this change; despite being longer, `inout n` is less visible to me than `&amp;n`. But this is a relatively weak preference—I could certainly live with it.<br></p><p>More important than changing the symbol might be restricting its use. I don&#39;t see any particularly good reason to permit you to say `let x = &amp;y`. Far better to use `withUnsafePointer()` to control the scope of the pointer, or at least say something like `let x = unsafeInoutPointer(&amp;y)` to acknowledge that you&#39;re circumventing memory safety and possibly taking a pointer to a temporary. Basically, I think `&amp;` or `inout` or however we spell it should only be allowed as a parameter, not just anywhere in any expression.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>January 30, 2016 at 04:00:00am</p></header><div class="content"><p>+1 for the added symmetry and searchability<br></p><p>On Sat, Jan 30, 2016 at 4:45 AM, Brent Royal-Gordon via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; &gt; add1(&amp;n) // n is now 6<br>&gt; &gt; add1(inout n) // symmetric and now obvious that n can change<br>&gt;<br>&gt; I&#39;m not a really big fan of this change; despite being longer, `inout n`<br>&gt; is less visible to me than `&amp;n`. But this is a relatively weak preference—I<br>&gt; could certainly live with it.<br>&gt;<br>&gt; More important than changing the symbol might be restricting its use. I<br>&gt; don&#39;t see any particularly good reason to permit you to say `let x = &amp;y`.<br>&gt; Far better to use `withUnsafePointer()` to control the scope of the<br>&gt; pointer, or at least say something like `let x = unsafeInoutPointer(&amp;y)` to<br>&gt; acknowledge that you&#39;re circumventing memory safety and possibly taking a<br>&gt; pointer to a temporary. Basically, I think `&amp;` or `inout` or however we<br>&gt; spell it should only be allowed as a parameter, not just anywhere in any<br>&gt; expression.<br>&gt;<br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160130/48defaea/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>January 29, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On Jan 29, 2016, at 19:45 , Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; add1(&amp;n) // n is now 6<br>&gt;&gt; add1(inout n) // symmetric and now obvious that n can change<br>&gt; <br>&gt; I&#39;m not a really big fan of this change; despite being longer, `inout n` is less visible to me than `&amp;n`. But this is a relatively weak preference—I could certainly live with it.<br>&gt; <br>&gt; More important than changing the symbol might be restricting its use. I don&#39;t see any particularly good reason to permit you to say `let x = &amp;y`. Far better to use `withUnsafePointer()` to control the scope of the pointer, or at least say something like `let x = unsafeInoutPointer(&amp;y)` to acknowledge that you&#39;re circumventing memory safety and possibly taking a pointer to a temporary. Basically, I think `&amp;` or `inout` or however we spell it should only be allowed as a parameter, not just anywhere in any expression.<br></p><p>This is already true. Are you thinking of something else?<br></p><p>Jordan<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4ab486d7597af4cfe0be33a762150848?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Dany St-Amant</string> &lt;dsa.mls at icloud.com&gt;<p>January 29, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; Le 29 janv. 2016 à 17:44, Trent Nadeau via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md &lt;https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md&gt;<br>&gt; <br>&gt; # Use `inout` at Function Call Sites<br>&gt; <br>&gt; * Proposal: TBD<br>&gt; * Author(s): [Trent Nadeau](http://github.com/tanadeau &lt;http://github.com/tanadeau&gt;)<br>&gt; * Status: TBD<br>&gt; * Review manager: TBD<br>&gt; <br>&gt; ## Introduction<br>&gt; <br>&gt; Currently when a function has `inout` parameters, the arguments are passed with the `&amp;` prefix operator. For example:<br>&gt; <br>&gt; ```swift<br>&gt; func add1(inout num: Int) {<br>&gt;     num += 1<br>&gt; }<br>&gt; <br>&gt; var n = 5<br>&gt; add1(&amp;n) // n is now 6<br>&gt; ```<br>&gt; <br>&gt; This operator does not fit with the rest of the language nor how the parameter is written at the function declaration. It should be replaced so that `inout` is used in both locations so that the call site above would instead be written as:<br>&gt; <br>&gt; ```swift<br>&gt; add1(inout n) // symmetric and now obvious that n can change<br></p><p><br>inout vs &amp; doesn’t look that ugly in a simple single argument function, but what if you have many:<br></p><p>getUserData(userid, &amp;username, &amp;groupid, &amp;shell) // Current syntax<br>getUserData(userid, inout username, inout groupid, inout shell) // Proposal<br></p><p>Yes, for the above one should use something better ( userData=getUserData(userid) ). But, I’m sure there are valid scenario where one wants multiple inout parameters. And such an example must be provided to visualize the impact of moving from &amp; to inout.<br></p><p>Just realizing that the above syntax is without label, even the proposal doesn’t show the use of the inout with labels…<br>So the current proposal changes:<br>add(number: &amp;n)<br>to<br>add(inout number: n) // Perfect symmetry<br>add(number: inout n) // Matching token location<br></p><p>So with my bad example from above changing:<br>getUserData(id: userid, name: &amp;username, gid: &amp;groupid, shell: &amp;shell)<br>to:<br>getUserData(id: userid, inout name: username, inout gid: groupid, inout shell: shell)<br>getUserData(id: userid, name: inout username, gid: inout groupid, shell: inout shell)<br></p><p>That’s a lot of word, syntax highlighting does help a bit but I do not want to rely on it.<br></p><p>Dany<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/6ff8eb59/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c40db4457ab2c91a0d8006da31b177c6?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Trent Nadeau</string> &lt;tanadeau at gmail.com&gt;<p>January 29, 2016 at 11:00:00pm</p></header><div class="content"><p>Note that I got this idea while thinking about Erica&#39;s proposal to move the<br>inout keyword to the type position in declarations. If that is accepted,<br>the difference between the inout locations would be eliminated. So you<br>examples would then be:<br></p><p>func add(number n: inout Int)<br>add(number: inout n)<br></p><p>func getUserData(id id: Int, name: inout String, gid: inout Int, shell:<br>inout String)<br>getUserData(id: userid, name: inout username, gid: inout groupid, shell:<br>inout shell)<br></p><p>On Fri, Jan 29, 2016 at 10:57 PM, Dany St-Amant via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; Le 29 janv. 2016 à 17:44, Trent Nadeau via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;<br>&gt;<br>&gt; https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md<br>&gt;<br>&gt; # Use `inout` at Function Call Sites<br>&gt;<br>&gt; * Proposal: TBD<br>&gt; * Author(s): [Trent Nadeau](http://github.com/tanadeau)<br>&gt; * Status: TBD<br>&gt; * Review manager: TBD<br>&gt;<br>&gt; ## Introduction<br>&gt;<br>&gt; Currently when a function has `inout` parameters, the arguments are passed with the `&amp;` prefix operator. For example:<br>&gt;<br>&gt; ```swift<br>&gt; func add1(inout num: Int) {<br>&gt;     num += 1<br>&gt; }<br>&gt;<br>&gt; var n = 5<br>&gt; add1(&amp;n) // n is now 6<br>&gt; ```<br>&gt;<br>&gt; This operator does not fit with the rest of the language nor how the parameter is written at the function declaration. It should be replaced so that `inout` is used in both locations so that the call site above would instead be written as:<br>&gt;<br>&gt; ```swift<br>&gt; add1(inout n) // symmetric and now obvious that n can change<br>&gt;<br>&gt;<br>&gt; inout vs &amp; doesn’t look that ugly in a simple single argument function,<br>&gt; but what if you have many:<br>&gt;<br>&gt; getUserData(userid, &amp;username, &amp;groupid, &amp;shell) // Current syntax<br>&gt; getUserData(userid, inout username, inout groupid, inout shell) //<br>&gt; Proposal<br>&gt;<br>&gt; Yes, for the above one should use something better (<br>&gt; userData=getUserData(userid) ). But, I’m sure there are valid scenario<br>&gt; where one wants multiple inout parameters. And such an example must be<br>&gt; provided to visualize the impact of moving from &amp; to inout.<br>&gt;<br>&gt; Just realizing that the above syntax is without label, even the proposal<br>&gt; doesn’t show the use of the inout with labels…<br>&gt; So the current proposal changes:<br>&gt; add(number: &amp;n)<br>&gt; to<br>&gt; add(inout number: n) // Perfect symmetry<br>&gt; add(number: inout n) // Matching token location<br>&gt;<br>&gt; So with my bad example from above changing:<br>&gt; getUserData(id: userid, name: &amp;username, gid: &amp;groupid, shell: &amp;shell)<br>&gt; to:<br>&gt; getUserData(id: userid, inout name: username, inout gid: groupid, inout<br>&gt; shell: shell)<br>&gt; getUserData(id: userid, name: inout username, gid: inout groupid, shell:<br>&gt; inout shell)<br>&gt;<br>&gt; That’s a lot of word, syntax highlighting does help a bit but I do not<br>&gt; want to rely on it.<br>&gt;<br>&gt; Dany<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p><p><br>-- <br>Trent Nadeau<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/f7935f43/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>January 30, 2016 at 05:00:00pm</p></header><div class="content"><p>+1 for me. Move inout to the type (Erica proposal) and use inout in the<br>same place at the call site. IE:<br></p><p>  func add(number n: inout Int)<br>   add(number: inout n)<br></p><p>On Saturday, 30 January 2016, Trent Nadeau via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Note that I got this idea while thinking about Erica&#39;s proposal to move<br>&gt; the inout keyword to the type position in declarations. If that is<br>&gt; accepted, the difference between the inout locations would be eliminated.<br>&gt; So you examples would then be:<br>&gt;<br>&gt; func add(number n: inout Int)<br>&gt; add(number: inout n)<br>&gt;<br>&gt; func getUserData(id id: Int, name: inout String, gid: inout Int, shell:<br>&gt; inout String)<br>&gt; getUserData(id: userid, name: inout username, gid: inout groupid, shell:<br>&gt; inout shell)<br>&gt;<br>&gt; On Fri, Jan 29, 2016 at 10:57 PM, Dany St-Amant via swift-evolution &lt;<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; Le 29 janv. 2016 à 17:44, Trent Nadeau via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; a écrit :<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md<br>&gt;&gt;<br>&gt;&gt; # Use `inout` at Function Call Sites<br>&gt;&gt;<br>&gt;&gt; * Proposal: TBD<br>&gt;&gt; * Author(s): [Trent Nadeau](http://github.com/tanadeau)<br>&gt;&gt; * Status: TBD<br>&gt;&gt; * Review manager: TBD<br>&gt;&gt;<br>&gt;&gt; ## Introduction<br>&gt;&gt;<br>&gt;&gt; Currently when a function has `inout` parameters, the arguments are passed with the `&amp;` prefix operator. For example:<br>&gt;&gt;<br>&gt;&gt; ```swift<br>&gt;&gt; func add1(inout num: Int) {<br>&gt;&gt;     num += 1<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; var n = 5<br>&gt;&gt; add1(&amp;n) // n is now 6<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt; This operator does not fit with the rest of the language nor how the parameter is written at the function declaration. It should be replaced so that `inout` is used in both locations so that the call site above would instead be written as:<br>&gt;&gt;<br>&gt;&gt; ```swift<br>&gt;&gt; add1(inout n) // symmetric and now obvious that n can change<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; inout vs &amp; doesn’t look that ugly in a simple single argument function,<br>&gt;&gt; but what if you have many:<br>&gt;&gt;<br>&gt;&gt; getUserData(userid, &amp;username, &amp;groupid, &amp;shell) // Current syntax<br>&gt;&gt; getUserData(userid, inout username, inout groupid, inout shell) //<br>&gt;&gt; Proposal<br>&gt;&gt;<br>&gt;&gt; Yes, for the above one should use something better (<br>&gt;&gt; userData=getUserData(userid) ). But, I’m sure there are valid scenario<br>&gt;&gt; where one wants multiple inout parameters. And such an example must be<br>&gt;&gt; provided to visualize the impact of moving from &amp; to inout.<br>&gt;&gt;<br>&gt;&gt; Just realizing that the above syntax is without label, even the proposal<br>&gt;&gt; doesn’t show the use of the inout with labels…<br>&gt;&gt; So the current proposal changes:<br>&gt;&gt; add(number: &amp;n)<br>&gt;&gt; to<br>&gt;&gt; add(inout number: n) // Perfect symmetry<br>&gt;&gt; add(number: inout n) // Matching token location<br>&gt;&gt;<br>&gt;&gt; So with my bad example from above changing:<br>&gt;&gt; getUserData(id: userid, name: &amp;username, gid: &amp;groupid, shell: &amp;shell)<br>&gt;&gt; to:<br>&gt;&gt; getUserData(id: userid, inout name: username, inout gid: groupid, inout<br>&gt;&gt; shell: shell)<br>&gt;&gt; getUserData(id: userid, name: inout username, gid: inout groupid, shell:<br>&gt;&gt; inout shell)<br>&gt;&gt;<br>&gt;&gt; That’s a lot of word, syntax highlighting does help a bit but I do not<br>&gt;&gt; want to rely on it.<br>&gt;&gt;<br>&gt;&gt; Dany<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Trent Nadeau<br>&gt;<br></p><p><br>-- <br>  -- Howard.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160130/1df53d80/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6c95cd06f79f91eaf9f58e4f1c50a25a?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Ondrej Barina</string> &lt;obarina at gmail.com&gt;<p>January 30, 2016 at 08:00:00am</p></header><div class="content"><p>-1<br>&amp; works perfectly fine.<br>Ondra<br></p><p>On Sat, Jan 30, 2016 at 7:28 AM, Howard Lovatt via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; +1 for me. Move inout to the type (Erica proposal) and use inout in the<br>&gt; same place at the call site. IE:<br>&gt;<br>&gt;   func add(number n: inout Int)<br>&gt;    add(number: inout n)<br>&gt;<br>&gt; On Saturday, 30 January 2016, Trent Nadeau via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Note that I got this idea while thinking about Erica&#39;s proposal to move<br>&gt;&gt; the inout keyword to the type position in declarations. If that is<br>&gt;&gt; accepted, the difference between the inout locations would be eliminated.<br>&gt;&gt; So you examples would then be:<br>&gt;&gt;<br>&gt;&gt; func add(number n: inout Int)<br>&gt;&gt; add(number: inout n)<br>&gt;&gt;<br>&gt;&gt; func getUserData(id id: Int, name: inout String, gid: inout Int, shell:<br>&gt;&gt; inout String)<br>&gt;&gt; getUserData(id: userid, name: inout username, gid: inout groupid, shell:<br>&gt;&gt; inout shell)<br>&gt;&gt;<br>&gt;&gt; On Fri, Jan 29, 2016 at 10:57 PM, Dany St-Amant via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Le 29 janv. 2016 à 17:44, Trent Nadeau via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; # Use `inout` at Function Call Sites<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; * Proposal: TBD<br>&gt;&gt;&gt; * Author(s): [Trent Nadeau](http://github.com/tanadeau)<br>&gt;&gt;&gt; * Status: TBD<br>&gt;&gt;&gt; * Review manager: TBD<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; ## Introduction<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Currently when a function has `inout` parameters, the arguments are passed with the `&amp;` prefix operator. For example:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; ```swift<br>&gt;&gt;&gt; func add1(inout num: Int) {<br>&gt;&gt;&gt;     num += 1<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; var n = 5<br>&gt;&gt;&gt; add1(&amp;n) // n is now 6<br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; This operator does not fit with the rest of the language nor how the parameter is written at the function declaration. It should be replaced so that `inout` is used in both locations so that the call site above would instead be written as:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; ```swift<br>&gt;&gt;&gt; add1(inout n) // symmetric and now obvious that n can change<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; inout vs &amp; doesn’t look that ugly in a simple single argument function,<br>&gt;&gt;&gt; but what if you have many:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; getUserData(userid, &amp;username, &amp;groupid, &amp;shell) // Current syntax<br>&gt;&gt;&gt; getUserData(userid, inout username, inout groupid, inout shell) //<br>&gt;&gt;&gt; Proposal<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Yes, for the above one should use something better (<br>&gt;&gt;&gt; userData=getUserData(userid) ). But, I’m sure there are valid scenario<br>&gt;&gt;&gt; where one wants multiple inout parameters. And such an example must be<br>&gt;&gt;&gt; provided to visualize the impact of moving from &amp; to inout.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Just realizing that the above syntax is without label, even the proposal<br>&gt;&gt;&gt; doesn’t show the use of the inout with labels…<br>&gt;&gt;&gt; So the current proposal changes:<br>&gt;&gt;&gt; add(number: &amp;n)<br>&gt;&gt;&gt; to<br>&gt;&gt;&gt; add(inout number: n) // Perfect symmetry<br>&gt;&gt;&gt; add(number: inout n) // Matching token location<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; So with my bad example from above changing:<br>&gt;&gt;&gt; getUserData(id: userid, name: &amp;username, gid: &amp;groupid, shell: &amp;shell)<br>&gt;&gt;&gt; to:<br>&gt;&gt;&gt; getUserData(id: userid, inout name: username, inout gid: groupid, inout<br>&gt;&gt;&gt; shell: shell)<br>&gt;&gt;&gt; getUserData(id: userid, name: inout username, gid: inout groupid,<br>&gt;&gt;&gt; shell: inout shell)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; That’s a lot of word, syntax highlighting does help a bit but I do not<br>&gt;&gt;&gt; want to rely on it.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Dany<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Trent Nadeau<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt;   -- Howard.<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160130/60492a26/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Proposal] Use inout at function call sites</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>January 30, 2016 at 04:00:00pm</p></header><div class="content"><p>I see the appeal of this, but I’m still against.<br></p><p>I like that:<br>- it’s symmetric between definition and use site<br>- it avoids ambiguity with C’s semantics of &amp;<br>- it conveys the opinion that this isn’t a fundamental feature of Swift you should use all the time, only when needed.<br></p><p>Still, `inout n` at call site is ugly and kind of unreadable in my opinion. “&amp;” stands out immediately, telling you “hey, this isn’t a normal call — this can change n’s contents!”. It’s a warning hard to miss while skimming code. “inout”, being a word, just gets drowned in between all the other words. This is compounded by the fact there isn’t any precedent (unless I’m missing something) of using a keyword as a modifier in function call syntax like that, and that this isn’t a particularly common one.<br></p><p>So an prefix operator-like syntax is just clearer. Unless it really is confusing because of what it means in C. But I don’t find this argument compelling. Perhaps if I spent a lot more time using C and developed a very strong mental model of how it works, I would. But from my limited experience with C, and  only using it sparingly in ObjC, it doesn’t confuse me at all. Having the same symbol suggests there is some similarity (and there is!), but I had no problem “getting” the Swift meaning. Perhaps what helps is that Ruby also has a prefix &amp; operator, also meaning something else.<br></p><p>And, while I like the idea of making it look like a second-class citizen because it’s not _that_ common on some level, I also tend to agree with Kevin that this is a perfectly useful feature and we shouldn’t penalize it this much.<br></p><p>— Radek<br></p><p>&gt; On 29 Jan 2016, at 23:44, Trent Nadeau via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md &lt;https://github.com/tanadeau/swift-evolution/blob/master/proposals/00xx-use-inout-at-func-call-site.md&gt;<br>&gt; <br>&gt; # Use `inout` at Function Call Sites<br>&gt; <br>&gt; * Proposal: TBD<br>&gt; * Author(s): [Trent Nadeau](http://github.com/tanadeau &lt;http://github.com/tanadeau&gt;)<br>&gt; * Status: TBD<br>&gt; * Review manager: TBD<br>&gt; <br>&gt; ## Introduction<br>&gt; <br>&gt; Currently when a function has `inout` parameters, the arguments are passed with the `&amp;` prefix operator. For example:<br>&gt; <br>&gt; ```swift<br>&gt; func add1(inout num: Int) {<br>&gt;     num += 1<br>&gt; }<br>&gt; <br>&gt; var n = 5<br>&gt; add1(&amp;n) // n is now 6<br>&gt; ```<br>&gt; <br>&gt; This operator does not fit with the rest of the language nor how the parameter is written at the function declaration. It should be replaced so that `inout` is used in both locations so that the call site above would instead be written as:<br>&gt; <br>&gt; ```swift<br>&gt; add1(inout n) // symmetric and now obvious that n can change<br>&gt; ```<br>&gt; <br>&gt; *Discussion thread TBD*<br>&gt; <br>&gt; ## Motivation<br>&gt; <br>&gt; The `&amp;` prefix operator is a holdover from C where it is usually read as &quot;address of&quot; and creates a pointer. While very useful in C due to its pervasive use of pointers, its meaning is not the same and introduces an unnecessary syntactic stumbling block from users coming from C. Removing this operator and using `inout` removes this stumbling block due to the semantic change.<br>&gt; <br>&gt; This operator is also disconnected from how the function declaration is written and does not imply that the argument may (and likely will) change. Using `inout` stands out, making it clear on first read that the variable may change.<br>&gt; <br>&gt; It is also possible that Swift may add Rust-like borrowing in the future. In that case, the `&amp;` symbol would be better used for a borrowed reference. Note that Rust uses the same symbol for declaring a borrowed reference and creating one, creating a nice symmetry in that respect of the language. I think Swift would want to have such symmetry as well.<br>&gt; <br>&gt; ## Detailed design<br>&gt; <br>&gt; ```<br>&gt; in-out-expression → inout identifier<br>&gt; ```<br>&gt; <br>&gt; ## Alternatives Considered<br>&gt; <br>&gt; Keeping the syntax as it currently is.<br>&gt; <br>&gt; -- <br>&gt; Trent Nadeau<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160130/f95c513e/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
