<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Pitch] Remove destructive consumption from Sequence</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>June 27, 2016 at 08:00:00pm</p></header><div class="content"><p>Dave Abrahams via swift-evolution &lt;swift-evolution at ...&gt; writes:<br></p><p>&gt; I should be clear up-front about the main problem I&#39;m trying to solve:<br>&gt; <br>&gt; Today, people see a beautiful, simple protocol (Sequence) to which <br>many<br>&gt; things conform. They don&#39;t recognize that there&#39;s a semantic <br>restriction<br>&gt; (assume you can make only a single-pass!) on it, so they write <br>libraries<br>&gt; of functions that may make multiple passes over Sequences.  They test<br>&gt; their libraries with the most commonly-available Sequences, e.g. <br>Arrays<br>&gt; and Ranges, which happen to be multi-pass.  Their tests pass!  But <br>their<br>&gt; constraints are wrong, their whole model of how to write generic code<br>&gt; over sequences is wrong, and some of their code is wrong.<br></p><p>This is a mistake that I see more often than I want to: designers of <br>development tools underestimate abilities of developers, and end up <br>restricting many of them.<br></p><p>My point is that we should impose minimal requirements on custom data <br>types. Quoting yourself:<br></p><p>&gt; In this case, protocols used to interface with the language<br>&gt; at the lowest levels may be purely about syntax.<br></p><p>So there should be a protocol for building into for-in loops that <br>requires only that the sequence should be iterable once. Currently, we <br>have Sequence for that. If we remove destructive consumption from <br>Sequence, then there should be a super-protocol SinglePassSequence or <br>Forinable (excuse the pun).<br></p><p>But even if we do this, I still don&#39;t understand the intentions. If a <br>Sequence is multi-pass, then we can satisfy requirements of Collection, <br>as already noted in the discussion. Why should we keep Sequence at all, <br>then? Then let&#39;s remove it and rename SinglePassSequence to Sequence???<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
