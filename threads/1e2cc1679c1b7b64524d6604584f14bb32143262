<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Draft] Change @noreturn to unconstructible return type</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>June  8, 2016 at 11:00:00am</p></header><div class="content"><p>I&#39;ll talk about how &quot;bottom&quot; mechanic works there. (I&#39;m not a Haskell<br>expert, but I&#39;ll at least try ;) )<br></p><p>Firstly, there is a Void type in standard library, which is exactly what<br> enum Never {}  in Swift is.<br>Pretty trivial: it is useful as a parameter of higher kinded types, e.g.<br>Either.<br></p><p>Then, there is bottom. Long story short, each type in Haskell includes an<br>undefined (bottom, _|_) value. That corresponds to partially defined<br>functions in set theory.<br></p><p>Example 1: Integer -&gt; Integer  function can either return a Z number, or be<br>undefined at that input (return bottom)<br>Example 2: ()  type actually contains two elements: () and _|_<br>Example 3: Void  contains one element: _|_<br></p><p>Bottom value results in an error on most occasions.<br></p><p>What does returning Void mean? In set theory, set of  Integer -&gt; Void  is<br>an empty set. In type theory,  Integer -&gt; Void  can contain a single<br>element that returns bottom.<br></p><p>Applying that to Swift, we express bottom value by not returning on a<br>particular input (due to a crash or an infinite loop). We are going to<br>express bottom type by Never (or aliases). The only way to return bottom<br>type is as well going to be returning bottom value (in Swift meaning).<br></p><p>There is also such a function in Haskell:  absurd :: forall a. Void -&gt; a<br>Of course, it just returns bottom value of type a. The philosophy of this<br>is &quot;from false follows anything&quot; or like, &quot;if we are going to crash, then<br>we can do anything&quot;.<br>Based on this, we can implement conversions from Void to any type in Swift.<br>It would look like:<br></p><p>func implementContract() -&gt; Int {<br>    return fatalError(&quot;unimplemented&quot;)<br>}<br></p><p>`return` is crucial here.<br>This is what I suggest to change in the proposal.<br></p><p>- Anton<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160608/1e2c3262/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Draft] Change @noreturn to unconstructible return type</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June  8, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jun 8, 2016, at 10:28 AM, Антон Жилин via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;ll talk about how &quot;bottom&quot; mechanic works there. (I&#39;m not a Haskell expert, but I&#39;ll at least try ;) )<br>&gt; <br>&gt; Firstly, there is a Void type in standard library, which is exactly what  enum Never {}  in Swift is.<br>&gt; Pretty trivial: it is useful as a parameter of higher kinded types, e.g. Either.<br></p><p>Not really. Void is a &quot;Unit&quot; type - it&#39;s not an empty enum, it&#39;s an enum with exactly one value. The set of values for the Void type contains exactly one possible value.<br></p><p>&gt; <br>&gt; Then, there is bottom. Long story short, each type in Haskell includes an undefined (bottom, _|_) value. That corresponds to partially defined functions in set theory.<br>&gt; <br>&gt; Example 1: Integer -&gt; Integer  function can either return a Z number, or be undefined at that input (return bottom)<br>&gt; Example 2: ()  type actually contains two elements: () and _|_<br>&gt; Example 3: Void  contains one element: _|_<br>&gt; <br>&gt; Bottom value results in an error on most occasions.<br>&gt; <br>&gt; What does returning Void mean? In set theory, set of  Integer -&gt; Void  is an empty set. In type theory,  Integer -&gt; Void  can contain a single element that returns bottom.<br>&gt; <br>&gt; Applying that to Swift, we express bottom value by not returning on a particular input (due to a crash or an infinite loop). We are going to express bottom type by Never (or aliases). The only way to return bottom type is as well going to be returning bottom value (in Swift meaning).<br>&gt; <br>&gt; There is also such a function in Haskell:  absurd :: forall a. Void -&gt; a<br>&gt; Of course, it just returns bottom value of type a. The philosophy of this is &quot;from false follows anything&quot; or like, &quot;if we are going to crash, then we can do anything&quot;.<br>&gt; Based on this, we can implement conversions from Void to any type in Swift. It would look like:<br>&gt; <br>&gt; func implementContract() -&gt; Int {<br>&gt;     return fatalError(&quot;unimplemented&quot;)<br>&gt; }<br>&gt; <br>&gt; `return` is crucial here.<br>&gt; This is what I suggest to change in the proposal.<br>&gt; <br>&gt; - Anton<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Draft] Change @noreturn to unconstructible return type</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>June  8, 2016 at 11:00:00am</p></header><div class="content"><p>By Void I meant Haskell&#39;s Void, or Swift&#39;s Never type. Swift&#39;s Void is<br>Haskell&#39;s ().<br></p><p>And I had an error there. Integer -&gt; Void  contains two elements: a<br>function that always returns _|_, and an _|_. In Swift, the first case<br>corresponds to crash while executing function, and second case corresponds<br>to crash while computing a result of function type.<br></p><p>- Anton<br></p><p>2016-06-08 11:28 GMT+03:00 Антон Жилин &lt;antonyzhilin at gmail.com&gt;:<br></p><p>&gt; I&#39;ll talk about how &quot;bottom&quot; mechanic works there. (I&#39;m not a Haskell<br>&gt; expert, but I&#39;ll at least try ;) )<br>&gt;<br>&gt; Firstly, there is a Void type in standard library, which is exactly what<br>&gt;  enum Never {}  in Swift is.<br>&gt; Pretty trivial: it is useful as a parameter of higher kinded types, e.g.<br>&gt; Either.<br>&gt;<br>&gt; Then, there is bottom. Long story short, each type in Haskell includes an<br>&gt; undefined (bottom, _|_) value. That corresponds to partially defined<br>&gt; functions in set theory.<br>&gt;<br>&gt; Example 1: Integer -&gt; Integer  function can either return a Z number, or<br>&gt; be undefined at that input (return bottom)<br>&gt; Example 2: ()  type actually contains two elements: () and _|_<br>&gt; Example 3: Void  contains one element: _|_<br>&gt;<br>&gt; Bottom value results in an error on most occasions.<br>&gt;<br>&gt; What does returning Void mean? In set theory, set of  Integer -&gt; Void  is<br>&gt; an empty set. In type theory,  Integer -&gt; Void  can contain a single<br>&gt; element that returns bottom.<br>&gt;<br>&gt; Applying that to Swift, we express bottom value by not returning on a<br>&gt; particular input (due to a crash or an infinite loop). We are going to<br>&gt; express bottom type by Never (or aliases). The only way to return bottom<br>&gt; type is as well going to be returning bottom value (in Swift meaning).<br>&gt;<br>&gt; There is also such a function in Haskell:  absurd :: forall a. Void -&gt; a<br>&gt; Of course, it just returns bottom value of type a. The philosophy of this<br>&gt; is &quot;from false follows anything&quot; or like, &quot;if we are going to crash, then<br>&gt; we can do anything&quot;.<br>&gt; Based on this, we can implement conversions from Void to any type in<br>&gt; Swift. It would look like:<br>&gt;<br>&gt; func implementContract() -&gt; Int {<br>&gt;     return fatalError(&quot;unimplemented&quot;)<br>&gt; }<br>&gt;<br>&gt; `return` is crucial here.<br>&gt; This is what I suggest to change in the proposal.<br>&gt;<br>&gt; - Anton<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160608/c6cbc936/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
