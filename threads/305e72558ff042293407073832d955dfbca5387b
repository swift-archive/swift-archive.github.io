<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Idea] Continue to abolish IUO</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>April 10, 2016 at 02:00:00pm</p></header><div class="content"><p>First of all, I tried to change the original proposal to add actual<br>@autounwrapped attribute to Swift.<br>Because &quot;explicit is better than implicit&quot; and consistency and so on.<br></p><p>Its authors did not pay much attention, and so I&#39;m going to create a<br>separate proposal for that purpose.<br></p><p>Next, implicitly unwrapped optional was designed purely for bridging to<br>Objective-C (and now C).<br>Notation T! that is still used in Swift code, is misleading, because it&#39;s<br>not an actual type.<br></p><p>So I also propose that T! notation is reserved for entities imported from<br>Objective-C.<br>Swift code, which needs that behaviour, such as delayed initialization,<br>will use @autounwrapped.<br>It&#39;s more clear and explicit about this being a property behaviour and not<br>a type, with all consequences.<br></p><p>What do you think?<br></p><p>- Anton<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160410/305e387b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Idea] Continue to abolish IUO</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>April 10, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; On Apr 10, 2016, at 4:45 AM, Антон Жилин via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; First of all, I tried to change the original proposal to add actual @autounwrapped attribute to Swift.<br>&gt; Because &quot;explicit is better than implicit&quot; and consistency and so on.<br>&gt; <br>&gt; Its authors did not pay much attention, and so I&#39;m going to create a separate proposal for that purpose.<br>&gt; <br>&gt; Next, implicitly unwrapped optional was designed purely for bridging to Objective-C (and now C).<br>&gt; Notation T! that is still used in Swift code, is misleading, because it&#39;s not an actual type.<br>&gt; <br>&gt; So I also propose that T! notation is reserved for entities imported from Objective-C.<br>&gt; Swift code, which needs that behaviour, such as delayed initialization, will use @autounwrapped.<br>&gt; It&#39;s more clear and explicit about this being a property behaviour and not a type, with all consequences.<br>&gt; <br>&gt; What do you think?<br></p><p>Hi Anton,<br></p><p>I agree with you in theory, and this is definitely important to discuss.  My main concern is about the readability impact that this will have on the readability of unaudited APIs.  Here are two random unaudited examples, with the rules we have today:<br></p><p>JSValue / Darwin:<br>	func defineProperty(property: String!, descriptor: AnyObject!)<br>	func strcat(_: UnsafeMutablePointer&lt;Int8&gt;!, _: UnsafePointer&lt;Int8&gt;!) -&gt; UnsafeMutablePointer&lt;Int8&gt;!<br></p><p>If we got rid of !, we’d end up with:<br></p><p>	func defineProperty(property: @autounwrapped String?, descriptor: @autounwrapped AnyObject?)<br>	func strcat(_: @autounwrapped UnsafeMutablePointer&lt;Int8&gt;?, _: @autounwrapped UnsafePointer&lt;Int8&gt;?) -&gt; @autounwrapped UnsafeMutablePointer&lt;Int8&gt;?<br></p><p>Here are some problems:<br>a) @autounwrapped ends up dominating the signature, since it is longer than many type names.<br></p><p>b) While it is appropriate for return values and properties, it isn’t the right attribute name for parameters.  There, a better name would be “@unaudited”.  When passing a parameter, there is no behavioral difference between T! and T? after all. <br></p><p>I suppose that you could argue that we should just drop annotations completely for parameters.  My concern with doing that is that it would lose the distinction between audited APIs that accept nil and do something meaningful with it, and those that have been unaudited.<br></p><p>-Chris<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160410/f8503356/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Idea] Continue to abolish IUO</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>April 10, 2016 at 06:00:00pm</p></header><div class="content"><p>I agree and I&#39;m keeping that in mind. So when I wrote:<br>&gt; So I also propose that T! notation is reserved for entities imported from<br>Objective-C.<br>I meant that T! will still be used for unaudited imported APIs, not to<br>cause the bloat of function signatures you mentioned.<br>No, I&#39;m not going to argue for complete removal of IUO.<br></p><p>- Anton<br></p><p>2016-04-10 17:59 GMT+03:00 Chris Lattner &lt;clattner at apple.com&gt;:<br></p><p>&gt;<br>&gt; On Apr 10, 2016, at 4:45 AM, Антон Жилин via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; First of all, I tried to change the original proposal to add actual<br>&gt; @autounwrapped attribute to Swift.<br>&gt; Because &quot;explicit is better than implicit&quot; and consistency and so on.<br>&gt;<br>&gt; Its authors did not pay much attention, and so I&#39;m going to create a<br>&gt; separate proposal for that purpose.<br>&gt;<br>&gt; Next, implicitly unwrapped optional was designed purely for bridging to<br>&gt; Objective-C (and now C).<br>&gt; Notation T! that is still used in Swift code, is misleading, because it&#39;s<br>&gt; not an actual type.<br>&gt;<br>&gt; So I also propose that T! notation is reserved for entities imported from<br>&gt; Objective-C.<br>&gt; Swift code, which needs that behaviour, such as delayed initialization,<br>&gt; will use @autounwrapped.<br>&gt; It&#39;s more clear and explicit about this being a property behaviour and not<br>&gt; a type, with all consequences.<br>&gt;<br>&gt; What do you think?<br>&gt;<br>&gt;<br>&gt; Hi Anton,<br>&gt;<br>&gt; I agree with you in theory, and this is definitely important to discuss.<br>&gt; My main concern is about the readability impact that this will have on the<br>&gt; readability of unaudited APIs.  Here are two random unaudited examples,<br>&gt; with the rules we have today:<br>&gt;<br>&gt; JSValue / Darwin:<br>&gt; func defineProperty(property: String!, descriptor: AnyObject!)<br>&gt; func strcat(_: UnsafeMutablePointer&lt;Int8&gt;!, _: UnsafePointer&lt;Int8&gt;!)<br>&gt; -&gt; UnsafeMutablePointer&lt;Int8&gt;!<br>&gt;<br>&gt; If we got rid of !, we’d end up with:<br>&gt;<br>&gt; func defineProperty(property: @autounwrapped String?, descriptor:<br>&gt;  @autounwrapped AnyObject?)<br>&gt; func strcat(_: @autounwrapped<br>&gt; UnsafeMutablePointer&lt;Int8&gt;?, _: @autounwrapped UnsafePointer&lt;Int8&gt;?)<br>&gt; -&gt; @autounwrapped UnsafeMutablePointer&lt;Int8&gt;?<br>&gt;<br>&gt; Here are some problems:<br>&gt; a) @autounwrapped ends up dominating the signature, since it is longer<br>&gt; than many type names.<br>&gt;<br>&gt; b) While it is appropriate for return values and properties, it isn’t the<br>&gt; right attribute name for parameters.  There, a better name would be<br>&gt; “@unaudited”.  When passing a parameter, there is no behavioral difference<br>&gt; between T! and T? after all.<br>&gt;<br>&gt; I suppose that you could argue that we should just drop annotations<br>&gt; completely for parameters.  My concern with doing that is that it would<br>&gt; lose the distinction between audited APIs that accept nil and do something<br>&gt; meaningful with it, and those that have been unaudited.<br>&gt;<br>&gt; -Chris<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160410/a5d912d6/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
