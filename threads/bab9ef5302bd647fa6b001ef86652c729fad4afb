<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9c61fdd31ed63a709a1a39f7fcc4a63e?s=50"></div><header><strong>Very strange automatic behavior between StringLiteralConvertible and pattern matching</strong> from <string>David Hart</string> &lt;david at atipik.ch&gt;<p>January  5, 2016 at 06:00:00pm</p></header><div class="content"><p>How is it that Swift allows code like this:<br></p><p>struct Sneaky: StringLiteralConvertible {<br>	init(stringLiteral value: String) {}<br>	init(extendedGraphemeClusterLiteral value: String) {}<br>	init(unicodeScalarLiteral value: String) {}<br>}<br></p><p>func ~=(sneaky: Sneaky, string: String) -&gt; Bool {<br>	return false<br>}<br></p><p>enum NormalEnum: String {<br>	case Super = &quot;super&quot;<br>	case Mario = &quot;mario&quot;<br>}<br></p><p>let value = NormalEnum(rawValue: &quot;super”) // return nil!!!!<br></p><p>It hit completely by surprise today because of of a Regex library:<br></p><p>struct Regex: StringLiteralConvertible {<br>	init(stringLiteral value: String) {}<br>	init(extendedGraphemeClusterLiteral value: String) {}<br>	init(unicodeScalarLiteral value: String) {}<br></p><p>	//...<br>}<br></p><p>func ~=(regex: Regex, string: String) -&gt; Bool {<br>	return regex.matches(string)<br>}<br></p><p>If I was not already a Swift enthusiast, this behaviour would have left me completely dumbfounded.<br>What can we do about it?<br></p><p>David.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160105/bab94afb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Very strange automatic behavior between StringLiteralConvertible and pattern matching</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>January  5, 2016 at 06:00:00pm</p></header><div class="content"><p>Sorry about the double post.<br></p><p>&gt; On 05 Jan 2016, at 18:26, David Hart via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; How is it that Swift allows code like this:<br>&gt; <br>&gt; struct Sneaky: StringLiteralConvertible {<br>&gt; 	init(stringLiteral value: String) {}<br>&gt; 	init(extendedGraphemeClusterLiteral value: String) {}<br>&gt; 	init(unicodeScalarLiteral value: String) {}<br>&gt; }<br>&gt; <br>&gt; func ~=(sneaky: Sneaky, string: String) -&gt; Bool {<br>&gt; 	return false<br>&gt; }<br>&gt; <br>&gt; enum NormalEnum: String {<br>&gt; 	case Super = &quot;super&quot;<br>&gt; 	case Mario = &quot;mario&quot;<br>&gt; }<br>&gt; <br>&gt; let value = NormalEnum(rawValue: &quot;super”) // return nil!!!!<br>&gt; <br>&gt; It hit completely by surprise today because of of a Regex library:<br>&gt; <br>&gt; struct Regex: StringLiteralConvertible {<br>&gt; 	init(stringLiteral value: String) {}<br>&gt; 	init(extendedGraphemeClusterLiteral value: String) {}<br>&gt; 	init(unicodeScalarLiteral value: String) {}<br>&gt; <br>&gt; 	//...<br>&gt; }<br>&gt; <br>&gt; func ~=(regex: Regex, string: String) -&gt; Bool {<br>&gt; 	return regex.matches(string)<br>&gt; }<br>&gt; <br>&gt; If I was not already a Swift enthusiast, this behaviour would have left me completely dumbfounded.<br>&gt; What can we do about it?<br>&gt; <br>&gt; David.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160105/a549144e/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Very strange automatic behavior between StringLiteralConvertible and pattern matching</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>January  6, 2016 at 10:00:00am</p></header><div class="content"><p>To bring a little bit more context: I copied this Regex library in my project which had StringLiteralConvertible and implemented the pattern matching operator and all of a sudden, ALL init(rawValue: String) calls of completely unrelated enums started returning unexpected values. If I did not have unit tests, I probably would not have found out about it for a while.<br></p><p>I understand the mechanism which calls StringLiteralConvertible&#39;s init(stringLiteral) under the hood:<br></p><p>let a: SomeStringLiteralConvertibleType = &quot;hello&quot;<br></p><p>I also understand the magic in the pattern matching operator. But I don&#39;t understand why when associating them together:<br></p><p>func ~=(lhs: SomeStringLiteralConvertibleType, rhs: String) -&gt; Bool {<br>    return false<br>}<br></p><p>Then creates his behaviour in all Enums with String raw values:<br></p><p>enum MyEnum: String {<br>    case Super = &quot;super&quot;<br>}<br></p><p>let a = MyEnum(rawValue: &quot;super&quot;) // nil<br></p><p>I can&#39;t figure out if this is just a confusing behaviour of Swift, in which case I want to write a proposal to make it less confusing, or if it is a big with Swift, in which case I should open a bug report.<br></p><p>David<br></p><p>&gt; On 05 Jan 2016, at 18:26, David Hart via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; How is it that Swift allows code like this:<br>&gt; <br>&gt; struct Sneaky: StringLiteralConvertible {<br>&gt; 	init(stringLiteral value: String) {}<br>&gt; 	init(extendedGraphemeClusterLiteral value: String) {}<br>&gt; 	init(unicodeScalarLiteral value: String) {}<br>&gt; }<br>&gt; <br>&gt; func ~=(sneaky: Sneaky, string: String) -&gt; Bool {<br>&gt; 	return false<br>&gt; }<br>&gt; <br>&gt; enum NormalEnum: String {<br>&gt; 	case Super = &quot;super&quot;<br>&gt; 	case Mario = &quot;mario&quot;<br>&gt; }<br>&gt; <br>&gt; let value = NormalEnum(rawValue: &quot;super”) // return nil!!!!<br>&gt; <br>&gt; It hit completely by surprise today because of of a Regex library:<br>&gt; <br>&gt; struct Regex: StringLiteralConvertible {<br>&gt; 	init(stringLiteral value: String) {}<br>&gt; 	init(extendedGraphemeClusterLiteral value: String) {}<br>&gt; 	init(unicodeScalarLiteral value: String) {}<br>&gt; <br>&gt; 	//...<br>&gt; }<br>&gt; <br>&gt; func ~=(regex: Regex, string: String) -&gt; Bool {<br>&gt; 	return regex.matches(string)<br>&gt; }<br>&gt; <br>&gt; If I was not already a Swift enthusiast, this behaviour would have left me completely dumbfounded.<br>&gt; What can we do about it?<br>&gt; <br>&gt; David.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160106/8e381aab/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[swift-evolution] Very strange automatic behavior between StringLiteralConvertible and pattern matching</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>January  6, 2016 at 01:00:00pm</p></header><div class="content"><p>I&#39;m starting to understand. The implementation of RawRepresentable&#39;s probably looks like this:<br></p><p>init?(rawValue: String) {<br>    switch rawValue {<br>    case &quot;firstValue&quot;: self = .FirstCase<br>    case &quot;secondValue&quot;: self = .SecondCase<br>    default: return nil<br>    }<br>}<br></p><p>In that case (no pun intended), the switch cases are converted to SomeStringLiteralConvertibleType and then pattern matched.<br></p><p>But shouldn&#39;t the implementation of switch refrain from any complicated casting when the types correspond?<br></p><p>David.<br></p><p>&gt; On 06 Jan 2016, at 10:20, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; To bring a little bit more context: I copied this Regex library in my project which had StringLiteralConvertible and implemented the pattern matching operator and all of a sudden, ALL init(rawValue: String) calls of completely unrelated enums started returning unexpected values. If I did not have unit tests, I probably would not have found out about it for a while.<br>&gt; <br>&gt; I understand the mechanism which calls StringLiteralConvertible&#39;s init(stringLiteral) under the hood:<br>&gt; <br>&gt; let a: SomeStringLiteralConvertibleType = &quot;hello&quot;<br>&gt; <br>&gt; I also understand the magic in the pattern matching operator. But I don&#39;t understand why when associating them together:<br>&gt; <br>&gt; func ~=(lhs: SomeStringLiteralConvertibleType, rhs: String) -&gt; Bool {<br>&gt;     return false<br>&gt; }<br>&gt; <br>&gt; Then creates his behaviour in all Enums with String raw values:<br>&gt; <br>&gt; enum MyEnum: String {<br>&gt;     case Super = &quot;super&quot;<br>&gt; }<br>&gt; <br>&gt; let a = MyEnum(rawValue: &quot;super&quot;) // nil<br>&gt; <br>&gt; I can&#39;t figure out if this is just a confusing behaviour of Swift, in which case I want to write a proposal to make it less confusing, or if it is a big with Swift, in which case I should open a bug report.<br>&gt; <br>&gt; David<br>&gt; <br>&gt;&gt; On 05 Jan 2016, at 18:26, David Hart via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; How is it that Swift allows code like this:<br>&gt;&gt; <br>&gt;&gt; struct Sneaky: StringLiteralConvertible {<br>&gt;&gt; 	init(stringLiteral value: String) {}<br>&gt;&gt; 	init(extendedGraphemeClusterLiteral value: String) {}<br>&gt;&gt; 	init(unicodeScalarLiteral value: String) {}<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; func ~=(sneaky: Sneaky, string: String) -&gt; Bool {<br>&gt;&gt; 	return false<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; enum NormalEnum: String {<br>&gt;&gt; 	case Super = &quot;super&quot;<br>&gt;&gt; 	case Mario = &quot;mario&quot;<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; let value = NormalEnum(rawValue: &quot;super”) // return nil!!!!<br>&gt;&gt; <br>&gt;&gt; It hit completely by surprise today because of of a Regex library:<br>&gt;&gt; <br>&gt;&gt; struct Regex: StringLiteralConvertible {<br>&gt;&gt; 	init(stringLiteral value: String) {}<br>&gt;&gt; 	init(extendedGraphemeClusterLiteral value: String) {}<br>&gt;&gt; 	init(unicodeScalarLiteral value: String) {}<br>&gt;&gt; <br>&gt;&gt; 	//...<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; func ~=(regex: Regex, string: String) -&gt; Bool {<br>&gt;&gt; 	return regex.matches(string)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; If I was not already a Swift enthusiast, this behaviour would have left me completely dumbfounded.<br>&gt;&gt; What can we do about it?<br>&gt;&gt; <br>&gt;&gt; David.<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160106/529bce48/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/44fe7c93c07e30efe1de26f850cf9669?s=50"></div><header><strong>[swift-evolution] Very strange automatic behavior between StringLiteralConvertible and pattern matching</strong> from <string>Bruno Berisso</string> &lt;gojan.wan at gmail.com&gt;<p>January  6, 2016 at 05:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>Could you point to what Regex code are you using? You mention you copy some<br>library but don&#39;t provide the original source.<br></p><p>On Wed, Jan 6, 2016 at 9:12 AM David Hart via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I&#39;m starting to understand. The implementation of RawRepresentable&#39;s<br>&gt; probably looks like this:<br>&gt;<br>&gt; init?(rawValue: String) {<br>&gt;     switch rawValue {<br>&gt;     case &quot;firstValue&quot;: self = .FirstCase<br>&gt;     case &quot;secondValue&quot;: self = .SecondCase<br>&gt;     default: return nil<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; In that case (no pun intended), the switch cases are converted to SomeStringLiteralConvertibleType<br>&gt; and then pattern matched.<br>&gt;<br>&gt; But shouldn&#39;t the implementation of switch refrain from any complicated<br>&gt; casting when the types correspond?<br>&gt;<br>&gt; David.<br>&gt;<br>&gt; On 06 Jan 2016, at 10:20, David Hart via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; To bring a little bit more context: I copied this Regex library in my<br>&gt; project which had StringLiteralConvertible and implemented the pattern<br>&gt; matching operator and all of a sudden, ALL init(rawValue: String) calls of<br>&gt; completely unrelated enums started returning unexpected values. If I did<br>&gt; not have unit tests, I probably would not have found out about it for a<br>&gt; while.<br>&gt;<br>&gt; I understand the mechanism which calls StringLiteralConvertible&#39;s<br>&gt; init(stringLiteral) under the hood:<br>&gt;<br>&gt; let a: SomeStringLiteralConvertibleType = &quot;hello&quot;<br>&gt;<br>&gt; I also understand the magic in the pattern matching operator. But I don&#39;t<br>&gt; understand why when associating them together:<br>&gt;<br>&gt; func ~=(lhs: SomeStringLiteralConvertibleType, rhs: String) -&gt; Bool {<br>&gt;     return false<br>&gt; }<br>&gt;<br>&gt; Then creates his behaviour in all Enums with String raw values:<br>&gt;<br>&gt; enum MyEnum: String {<br>&gt;     case Super = &quot;super&quot;<br>&gt; }<br>&gt;<br>&gt; let a = MyEnum(rawValue: &quot;super&quot;) // nil<br>&gt;<br>&gt; I can&#39;t figure out if this is just a confusing behaviour of Swift, in<br>&gt; which case I want to write a proposal to make it less confusing, or if it<br>&gt; is a big with Swift, in which case I should open a bug report.<br>&gt;<br>&gt; David<br>&gt;<br>&gt; On 05 Jan 2016, at 18:26, David Hart via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; How is it that Swift allows code like this:<br>&gt;<br>&gt; struct Sneaky: StringLiteralConvertible {<br>&gt; init(stringLiteral value: String) {}<br>&gt; init(extendedGraphemeClusterLiteral value: String) {}<br>&gt; init(unicodeScalarLiteral value: String) {}<br>&gt; }<br>&gt;<br>&gt; func ~=(sneaky: Sneaky, string: String) -&gt; Bool {<br>&gt; return false<br>&gt; }<br>&gt;<br>&gt; enum NormalEnum: String {<br>&gt; case Super = &quot;super&quot;<br>&gt; case Mario = &quot;mario&quot;<br>&gt; }<br>&gt;<br>&gt; let value = NormalEnum(rawValue: &quot;super”) // return nil!!!!<br>&gt;<br>&gt; It hit completely by surprise today because of of a Regex library:<br>&gt;<br>&gt; struct Regex: StringLiteralConvertible {<br>&gt; init(stringLiteral value: String) {}<br>&gt; init(extendedGraphemeClusterLiteral value: String) {}<br>&gt; init(unicodeScalarLiteral value: String) {}<br>&gt;<br>&gt; //...<br>&gt; }<br>&gt;<br>&gt; func ~=(regex: Regex, string: String) -&gt; Bool {<br>&gt; return regex.matches(string)<br>&gt; }<br>&gt;<br>&gt; If I was not already a Swift enthusiast, this behaviour would have left me<br>&gt; completely dumbfounded.<br>&gt; What can we do about it?<br>&gt;<br>&gt; David.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160106/cab861b2/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
