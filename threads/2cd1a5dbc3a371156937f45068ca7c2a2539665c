<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bce64da43e291f2ce30987a83780502c?s=50"></div><header><strong>undefined</strong> from <string>Patrick Pijnappel</string> &lt;patrickpijnappel at gmail.com&gt;<p>January 28, 2016 at 03:00:00pm</p></header><div class="content"><p>It seems IntegerArithmeticType should have a conversion from IntMax, in<br>analogy with Signed/UnsignedIntegerType. It already has toIntMax(), but not<br>the reverse conversion. This is important to be able to write generic<br>algorithms on IntegerArithmeticType. Are there any reasons it shouldn&#39;t?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160128/2cd1665c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>undefined</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>January 28, 2016 at 11:00:00am</p></header><div class="content"><p>I agree, I think this would require all integer types to have mandatory init(_:IntMax), init(_:UIntMax), init(truncatingBitPattern:IntMax) and init(truncatingBitPattern:UIntMax) constructors? Would make working with arbitrary sized integers in a generic way a lot easier.<br></p><p>&gt; On 28 Jan 2016, at 04:02, Patrick Pijnappel via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; It seems IntegerArithmeticType should have a conversion from IntMax, in analogy with Signed/UnsignedIntegerType. It already has toIntMax(), but not the reverse conversion. This is important to be able to write generic algorithms on IntegerArithmeticType. Are there any reasons it shouldn&#39;t?<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160128/26e520a2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>undefined</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>January 28, 2016 at 11:00:00am</p></header><div class="content"><p>I think there is some sort of documentation or work being done on Number<br>Types in Swift to make it a more robust solution rather than the bunch of<br>lop-sided classes we have right now.<br></p><p>*___________________________________*<br></p><p>*James⎥Lead Engineer*<br></p><p>*james at supmenow.com &lt;james at supmenow.com&gt;⎥supmenow.com &lt;http://supmenow.com&gt;*<br></p><p>*Sup*<br></p><p>*Runway East *<br></p><p>*10 Finsbury Square*<br></p><p>*London*<br></p><p>* EC2A 1AF *<br></p><p>On Thu, Jan 28, 2016 at 11:24 AM, Haravikk via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I agree, I think this would require all integer types to have mandatory<br>&gt; init(_:IntMax), init(_:UIntMax), init(truncatingBitPattern:IntMax) and<br>&gt; init(truncatingBitPattern:UIntMax) constructors? Would make working with<br>&gt; arbitrary sized integers in a generic way a lot easier.<br>&gt;<br>&gt; On 28 Jan 2016, at 04:02, Patrick Pijnappel via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; It seems IntegerArithmeticType should have a conversion from IntMax, in<br>&gt; analogy with Signed/UnsignedIntegerType. It already has toIntMax(), but<br>&gt; not the reverse conversion. This is important to be able to write generic<br>&gt; algorithms on IntegerArithmeticType. Are there any reasons it shouldn&#39;t?<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160128/f0a1785f/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
