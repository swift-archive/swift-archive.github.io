<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/79cd2bdc2074f4e69eac60743fe785fc?s=50"></div><header><strong>NSURL getResourceValue</strong> from <string>Daniel Eggert</string> &lt;danieleggert at me.com&gt;<p>March 31, 2016 at 01:00:00pm</p></header><div class="content"><p>What&#39;s the reason for the &quot;resource value&quot; API on NSURL not being present in SwiftFoundation?<br></p><p>/Daniel<br></p><p><br>func getResourceValue(_ value: AutoreleasingUnsafeMutablePointer&lt;AnyObject?&gt;, forKey key: String) throws<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76eb9711d45c1c9a71c0f24004072a22?s=50"></div><header><strong>NSURL getResourceValue</strong> from <string>Zach Waldowski</string> &lt;zach at waldowski.me&gt;<p>March 31, 2016 at 09:00:00am</p></header><div class="content"><p>You can&#39;t have AutoreleasingUnsafeMutablePointer without Objective-C<br>interop.<br></p><p>Zach<br></p><p>On Thu, Mar 31, 2016, at 07:17 AM, Daniel Eggert via swift-corelibs-dev<br>wrote:<br>&gt; What&#39;s the reason for the &quot;resource value&quot; API on NSURL not being present<br>&gt; in SwiftFoundation?<br>&gt; <br>&gt; /Daniel<br>&gt; <br>&gt; <br>&gt; func getResourceValue(_ value:<br>&gt; AutoreleasingUnsafeMutablePointer&lt;AnyObject?&gt;, forKey key: String) throws<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/79cd2bdc2074f4e69eac60743fe785fc?s=50"></div><header><strong>NSURL getResourceValue</strong> from <string>Daniel Eggert</string> &lt;danieleggert at me.com&gt;<p>March 31, 2016 at 06:00:00pm</p></header><div class="content"><p>Well, there&#39;s<br></p><p>func resourceValuesForKeys(_ keys: [String]) throws -&gt; [String : AnyObject]<br></p><p>which doesn&#39;t use AutoreleasingUnsafeMutablePointer, but that doesn&#39;t exist in Swift, either.<br></p><p>And the other one could have a replacement like so:<br></p><p>func resourceValue(forKey key: String) -&gt; AnyObject throws<br></p><p>The &quot;NSURL resource value&quot; API has 7 methods of which none exist in SwiftFoundation.<br></p><p>/Daniel<br></p><p><br></p><p>&gt; On 31 Mar 2016, at 15:37, Zach Waldowski via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; You can&#39;t have AutoreleasingUnsafeMutablePointer without Objective-C<br>&gt; interop.<br>&gt; <br>&gt; Zach<br>&gt; <br>&gt; On Thu, Mar 31, 2016, at 07:17 AM, Daniel Eggert via swift-corelibs-dev<br>&gt; wrote:<br>&gt;&gt; What&#39;s the reason for the &quot;resource value&quot; API on NSURL not being present<br>&gt;&gt; in SwiftFoundation?<br>&gt;&gt; <br>&gt;&gt; /Daniel<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; func getResourceValue(_ value:<br>&gt;&gt; AutoreleasingUnsafeMutablePointer&lt;AnyObject?&gt;, forKey key: String) throws<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76eb9711d45c1c9a71c0f24004072a22?s=50"></div><header><strong>NSURL getResourceValue</strong> from <string>Zach Waldowski</string> &lt;zach at waldowski.me&gt;<p>March 31, 2016 at 02:00:00pm</p></header><div class="content"><p>The semantics of the methods are fairly nuanced in ObjC.<br></p><p>You can have a resource value that fails to be fetched, or one that<br>succeeded to fetch but had no value. A Swift version would model this as<br>`throws -&gt; AnyObject?`.<br></p><p>For the dictionary version, you may ask for a resource value, it<br>succeeds, but isn&#39;t included in the dictionary because it was `nil`.<br>This version is modeled &quot;fine&quot; in Swift, but like you mentioned it also<br>isn&#39;t available.<br></p><p>Sorry for not being clear — the point was that it is desired for<br>corelibs-Foundation to have the same API as Darwin-Foundation, as has<br>been mentioned on this mailing list. Anything outside that has to be<br>approved (internally to Apple, I think?), and this just hasn&#39;t been<br>worked through yet.<br></p><p>Unrelated, it also appears that the underlying versions<br>(CFURLCopyResourcePropertyForKey and CFURLCopyResourcePropertiesForKeys)<br>aren&#39;t included in corelibs-CoreFoundation. I have to imagine those are<br>pretty platform-specific, but I can&#39;t comment on their conspicuous<br>disappearance because I have no more knowledge than you do. ;)<br></p><p>Zach<br></p><p>On Thu, Mar 31, 2016, at 12:23 PM, Daniel Eggert wrote:<br>&gt; Well, there&#39;s<br>&gt; <br>&gt; func resourceValuesForKeys(_ keys: [String]) throws -&gt; [String :<br>&gt; AnyObject]<br>&gt; <br>&gt; which doesn&#39;t use AutoreleasingUnsafeMutablePointer, but that doesn&#39;t<br>&gt; exist in Swift, either.<br>&gt; <br>&gt; And the other one could have a replacement like so:<br>&gt; <br>&gt; func resourceValue(forKey key: String) -&gt; AnyObject throws<br>&gt; <br>&gt; The &quot;NSURL resource value&quot; API has 7 methods of which none exist in<br>&gt; SwiftFoundation.<br>&gt; <br>&gt; /Daniel<br>&gt; <br>&gt; <br>&gt; <br>&gt; &gt; On 31 Mar 2016, at 15:37, Zach Waldowski via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; &gt; <br>&gt; &gt; You can&#39;t have AutoreleasingUnsafeMutablePointer without Objective-C<br>&gt; &gt; interop.<br>&gt; &gt; <br>&gt; &gt; Zach<br>&gt; &gt; <br>&gt; &gt; On Thu, Mar 31, 2016, at 07:17 AM, Daniel Eggert via swift-corelibs-dev<br>&gt; &gt; wrote:<br>&gt; &gt;&gt; What&#39;s the reason for the &quot;resource value&quot; API on NSURL not being present<br>&gt; &gt;&gt; in SwiftFoundation?<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; /Daniel<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; <br>&gt; &gt;&gt; func getResourceValue(_ value:<br>&gt; &gt;&gt; AutoreleasingUnsafeMutablePointer&lt;AnyObject?&gt;, forKey key: String) throws<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-corelibs-dev mailing list<br>&gt; &gt;&gt; swift-corelibs-dev at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-corelibs-dev mailing list<br>&gt; &gt; swift-corelibs-dev at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>NSURL getResourceValue</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>March 31, 2016 at 12:00:00pm</p></header><div class="content"><p>Hi Zach, Daniel,<br></p><p>&gt; On Mar 31, 2016, at 11:03 AM, Zach Waldowski via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; The semantics of the methods are fairly nuanced in ObjC.<br>&gt; <br>&gt; You can have a resource value that fails to be fetched, or one that<br>&gt; succeeded to fetch but had no value. A Swift version would model this as<br>&gt; `throws -&gt; AnyObject?`.<br>&gt; <br>&gt; For the dictionary version, you may ask for a resource value, it<br>&gt; succeeds, but isn&#39;t included in the dictionary because it was `nil`.<br>&gt; This version is modeled &quot;fine&quot; in Swift, but like you mentioned it also<br>&gt; isn&#39;t available.<br>&gt; <br>&gt; Sorry for not being clear — the point was that it is desired for<br>&gt; corelibs-Foundation to have the same API as Darwin-Foundation, as has<br>&gt; been mentioned on this mailing list. Anything outside that has to be<br>&gt; approved (internally to Apple, I think?), and this just hasn&#39;t been<br>&gt; worked through yet.<br>&gt; <br>&gt; Unrelated, it also appears that the underlying versions<br>&gt; (CFURLCopyResourcePropertyForKey and CFURLCopyResourcePropertiesForKeys)<br>&gt; aren&#39;t included in corelibs-CoreFoundation. I have to imagine those are<br>&gt; pretty platform-specific, but I can&#39;t comment on their conspicuous<br>&gt; disappearance because I have no more knowledge than you do. ;)<br>&gt; <br>&gt; Zach<br>&gt; <br></p><p>Yes, the reason we left these out is that they are very platform specific.<br></p><p>I could potentially see some kind of solution here where a dramatically reduced set of keys are available on all platforms. Things like file name and file size are probably able to be implemented in a cross-platform way. For now, I just left the whole thing out because sorting through what would be portable or not would be a pretty large task.<br></p><p>- Tony<br></p><p>&gt; On Thu, Mar 31, 2016, at 12:23 PM, Daniel Eggert wrote:<br>&gt;&gt; Well, there&#39;s<br>&gt;&gt; <br>&gt;&gt; func resourceValuesForKeys(_ keys: [String]) throws -&gt; [String :<br>&gt;&gt; AnyObject]<br>&gt;&gt; <br>&gt;&gt; which doesn&#39;t use AutoreleasingUnsafeMutablePointer, but that doesn&#39;t<br>&gt;&gt; exist in Swift, either.<br>&gt;&gt; <br>&gt;&gt; And the other one could have a replacement like so:<br>&gt;&gt; <br>&gt;&gt; func resourceValue(forKey key: String) -&gt; AnyObject throws<br>&gt;&gt; <br>&gt;&gt; The &quot;NSURL resource value&quot; API has 7 methods of which none exist in<br>&gt;&gt; SwiftFoundation.<br>&gt;&gt; <br>&gt;&gt; /Daniel<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 31 Mar 2016, at 15:37, Zach Waldowski via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; You can&#39;t have AutoreleasingUnsafeMutablePointer without Objective-C<br>&gt;&gt;&gt; interop.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Zach<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Thu, Mar 31, 2016, at 07:17 AM, Daniel Eggert via swift-corelibs-dev<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; What&#39;s the reason for the &quot;resource value&quot; API on NSURL not being present<br>&gt;&gt;&gt;&gt; in SwiftFoundation?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; /Daniel<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func getResourceValue(_ value:<br>&gt;&gt;&gt;&gt; AutoreleasingUnsafeMutablePointer&lt;AnyObject?&gt;, forKey key: String) throws<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt;&gt;&gt; swift-corelibs-dev at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt;&gt; swift-corelibs-dev at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/79cd2bdc2074f4e69eac60743fe785fc?s=50"></div><header><strong>NSURL getResourceValue</strong> from <string>Daniel Eggert</string> &lt;danieleggert at me.com&gt;<p>April  1, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On 31 Mar 2016, at 21:44, Tony Parker &lt;anthony.parker at apple.com&gt; wrote:<br>&gt; <br>&gt; Hi Zach, Daniel,<br>&gt; <br>&gt;&gt; On Mar 31, 2016, at 11:03 AM, Zach Waldowski via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The semantics of the methods are fairly nuanced in ObjC.<br>&gt;&gt; <br>&gt;&gt; You can have a resource value that fails to be fetched, or one that<br>&gt;&gt; succeeded to fetch but had no value. A Swift version would model this as<br>&gt;&gt; `throws -&gt; AnyObject?`.<br>&gt;&gt; <br>&gt;&gt; For the dictionary version, you may ask for a resource value, it<br>&gt;&gt; succeeds, but isn&#39;t included in the dictionary because it was `nil`.<br>&gt;&gt; This version is modeled &quot;fine&quot; in Swift, but like you mentioned it also<br>&gt;&gt; isn&#39;t available.<br>&gt;&gt; <br>&gt;&gt; Sorry for not being clear — the point was that it is desired for<br>&gt;&gt; corelibs-Foundation to have the same API as Darwin-Foundation, as has<br>&gt;&gt; been mentioned on this mailing list. Anything outside that has to be<br>&gt;&gt; approved (internally to Apple, I think?), and this just hasn&#39;t been<br>&gt;&gt; worked through yet.<br>&gt;&gt; <br>&gt;&gt; Unrelated, it also appears that the underlying versions<br>&gt;&gt; (CFURLCopyResourcePropertyForKey and CFURLCopyResourcePropertiesForKeys)<br>&gt;&gt; aren&#39;t included in corelibs-CoreFoundation. I have to imagine those are<br>&gt;&gt; pretty platform-specific, but I can&#39;t comment on their conspicuous<br>&gt;&gt; disappearance because I have no more knowledge than you do. ;)<br>&gt;&gt; <br>&gt;&gt; Zach<br>&gt;&gt; <br>&gt; <br>&gt; Yes, the reason we left these out is that they are very platform specific.<br>&gt; <br>&gt; I could potentially see some kind of solution here where a dramatically reduced set of keys are available on all platforms. Things like file name and file size are probably able to be implemented in a cross-platform way. For now, I just left the whole thing out because sorting through what would be portable or not would be a pretty large task.<br>&gt; <br>&gt; - Tony<br></p><p><br>Thanks for the info. I agree that a Swift overlay for Darwin Foundation would be great, and adding those versions to SwiftFoundation would be most excellent. I remember that when these APIs were added to OS X once of the reasons was that it provides a unified API for all these kinds of things, and it allows the library to cache these, dramatically reducing the calls to stat(2) and friends.<br></p><p>I think the fact that these are so platform specific is a good reason to include them: Foundation’s goal is to “Provide a level of OS independence, to enhance portability”.<br></p><p>/Daniel<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
