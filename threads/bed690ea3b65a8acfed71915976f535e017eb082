<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3283e69dac603660e4abad5fef6f538?s=50"></div><header><strong>[Proposal] Remove force unwrapping in function signature.</strong> from <string>Spromicky</string> &lt;spromicky at gmail.com&gt;<p>June  9, 2016 at 11:00:00am</p></header><div class="content"><p>Yep, but no one stop you if you pass optional value. And in runtime it crash in case if it really will be `nil`. But from other side non-optional params make the same, and does not let you pass an optional value, and show error on compile time. This make your code more safety.<br>Now force unwrapped params in function used only if you use old Obj-C code without nullability modifiers, so no sense, i think, for clear swift code.<br></p><p>&gt; This confused me at the beginning.<br>&gt; <br>&gt; But doesn&#39;t Int! In parameter type means the function is awaiting an unwrapped value so the user should ensure that it data parameter is available, valid, and unwrapped?<br>&gt; <br>&gt; --<br>&gt; J. Charles<br>&gt; <br>&gt; &gt; Le 8 juin 2016 à 13:30, Spromicky via swift-evolution&lt;swift-evolution at swift.org&gt;a écrit :<br>&gt; &gt; <br>&gt; &gt; Hello, everyone!<br>&gt; &gt; <br>&gt; &gt; I wanna propose to you to remove force unwrapping in fuction signature for swift code. That no sense in clear swift code. If we wanna use some optional value as function param, that is not optional, we must unwrap it before function call.<br>&gt; &gt; People who new in swift look at how they old Obj-C code (without nullability modifiers) translate in to swift:<br>&gt; &gt; <br>&gt; &gt; Obj-C:<br>&gt; &gt; - (void)foo:(NSInteger)bar {<br>&gt; &gt; //...<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; Swift transaliton:<br>&gt; &gt; func foo(bar: Int!) {<br>&gt; &gt; //...<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; And think that force unwrapping in signature is good practice. And start write functions in clear swift code like this:<br>&gt; &gt; <br>&gt; &gt; func newFoo(bar: Int!) {<br>&gt; &gt; //...<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; and use it like this:<br>&gt; &gt; <br>&gt; &gt; let bar: Int? = 1<br>&gt; &gt; newFoo(bar)<br>&gt; &gt; <br>&gt; &gt; And it really work, and they does not think that this can crash in case if `bar` will be `nil`.<br>&gt; &gt; But in clear swift we wanna work with parametrs in function that clearly or optional, or not.<br>&gt; &gt; <br>&gt; &gt; func newFoo(bar: Int) {<br>&gt; &gt; //...<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; or<br>&gt; &gt; <br>&gt; &gt; func newFoo(bar: Int?) {<br>&gt; &gt; //...<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; When we write a new function we know what we need in this case and use optional params or not.<br>&gt; &gt; <br>&gt; &gt; So my proposal is remove force unwrapping(`!`) from function signatures, cause it have no sense, and that confuse new users.<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Proposal] Remove force unwrapping in function signature.</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June  9, 2016 at 03:00:00pm</p></header><div class="content"><p>Just to clarify : it will crash not because `nil` passed, but because there <br>is no check for `nil` in the function itself. I.e. nobody prevents you to <br>make a function that *will* check the nil and at the same time use all the <br>bonuses from implicitly unwrapped optional parameter:<br></p><p>func foo(_ i: Int!) {<br>     guard i != nil else {return}<br></p><p>     print(i) // use IUO parameter<br>}<br></p><p>foo(nil) // no errors<br>foo(1) // 1<br></p><p><br>On 09.06.2016 11:04, Spromicky via swift-evolution wrote:<br>&gt; Yep, but no one stop you if you pass optional value. And in runtime it crash in case if it really will be `nil`. But from other side non-optional params make the same, and does not let you pass an optional value, and show error on compile time. This make your code more safety.<br>&gt; Now force unwrapped params in function used only if you use old Obj-C code without nullability modifiers, so no sense, i think, for clear swift code.<br>&gt;<br>&gt;&gt; This confused me at the beginning.<br>&gt;&gt;<br>&gt;&gt; But doesn&#39;t Int! In parameter type means the function is awaiting an unwrapped value so the user should ensure that it data parameter is available, valid, and unwrapped?<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; J. Charles<br>&gt;&gt;<br>&gt;&gt;&gt; Le 8 juin 2016 à 13:30, Spromicky via swift-evolution&lt;swift-evolution at swift.org&gt;a écrit :<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Hello, everyone!<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I wanna propose to you to remove force unwrapping in fuction signature for swift code. That no sense in clear swift code. If we wanna use some optional value as function param, that is not optional, we must unwrap it before function call.<br>&gt;&gt;&gt; People who new in swift look at how they old Obj-C code (without nullability modifiers) translate in to swift:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Obj-C:<br>&gt;&gt;&gt; - (void)foo:(NSInteger)bar {<br>&gt;&gt;&gt; //...<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Swift transaliton:<br>&gt;&gt;&gt; func foo(bar: Int!) {<br>&gt;&gt;&gt; //...<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; And think that force unwrapping in signature is good practice. And start write functions in clear swift code like this:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; func newFoo(bar: Int!) {<br>&gt;&gt;&gt; //...<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; and use it like this:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; let bar: Int? = 1<br>&gt;&gt;&gt; newFoo(bar)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; And it really work, and they does not think that this can crash in case if `bar` will be `nil`.<br>&gt;&gt;&gt; But in clear swift we wanna work with parametrs in function that clearly or optional, or not.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; func newFoo(bar: Int) {<br>&gt;&gt;&gt; //...<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; or<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; func newFoo(bar: Int?) {<br>&gt;&gt;&gt; //...<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; When we write a new function we know what we need in this case and use optional params or not.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; So my proposal is remove force unwrapping(`!`) from function signatures, cause it have no sense, and that confuse new users.<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
