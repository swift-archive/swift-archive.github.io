<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Need better name, want to hide generator</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>December 18, 2015 at 02:00:00pm</p></header><div class="content"><p>Source: http://swiftstub.com/788132715 &lt;http://swiftstub.com/788132715&gt;<br></p><p>Two questions:<br></p><p>1. Can anyone recommended a better name than Cartesian? 2D doesn&#39;t work for the compiler and I&#39;m looking for something that doesn&#39;t seem &quot;floating-point&quot;-y<br>2. Is there a way to internalize the generator and not make it public? I&#39;d ideally like to hide all details except the fact that this is a sequence of (Int, Int)<br></p><p>Thanks<br></p><p>-- Erica<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151218/0f5c0459/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Need better name, want to hide generator</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>December 18, 2015 at 01:00:00pm</p></header><div class="content"><p>1. Maybe ProductGenerator?<br>2. Use AnyGenerator&lt;(T, U)&gt;?<br></p><p>I&#39;d love to see something like this in stdlib:<br></p><p>func product&lt;S1, S2&gt;(s1: S1, s2: S2) -&gt;<br>ProductSequence&lt;S1.Generator.Element, S2.Generator.Element&gt; {<br>    ...<br>}<br></p><p>where ProductSequence&lt;T,U&gt;.Generator.Element is (T, U).<br></p><p>So your example could be &quot;for (x,y) in product(0..&lt;4, 0..&lt;2)&quot;.<br></p><p>Jacob Bandes-Storch<br></p><p>On Fri, Dec 18, 2015 at 1:22 PM, Erica Sadun via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Source: http://swiftstub.com/788132715<br>&gt;<br>&gt; Two questions:<br>&gt;<br>&gt; 1. Can anyone recommended a better name than Cartesian? 2D doesn&#39;t work<br>&gt; for the compiler and I&#39;m looking for something that doesn&#39;t seem<br>&gt; &quot;floating-point&quot;-y<br>&gt; 2. Is there a way to internalize the generator and not make it public? I&#39;d<br>&gt; ideally like to hide all details except the fact that this is a sequence of<br>&gt; (Int, Int)<br>&gt;<br>&gt; Thanks<br>&gt;<br>&gt; -- Erica<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151218/9ff4a3f8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Need better name, want to hide generator</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>December 18, 2015 at 01:00:00pm</p></header><div class="content"><p>Oops, of course I meant product&lt;S1: SequenceType, S2: SequenceType&gt;(...) !<br></p><p>Jacob<br></p><p>On Fri, Dec 18, 2015 at 1:45 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;<br>wrote:<br></p><p>&gt; 1. Maybe ProductGenerator?<br>&gt; 2. Use AnyGenerator&lt;(T, U)&gt;?<br>&gt;<br>&gt; I&#39;d love to see something like this in stdlib:<br>&gt;<br>&gt; func product&lt;S1, S2&gt;(s1: S1, s2: S2) -&gt;<br>&gt; ProductSequence&lt;S1.Generator.Element, S2.Generator.Element&gt; {<br>&gt;     ...<br>&gt; }<br>&gt;<br>&gt; where ProductSequence&lt;T,U&gt;.Generator.Element is (T, U).<br>&gt;<br>&gt; So your example could be &quot;for (x,y) in product(0..&lt;4, 0..&lt;2)&quot;.<br>&gt;<br>&gt; Jacob Bandes-Storch<br>&gt;<br>&gt; On Fri, Dec 18, 2015 at 1:22 PM, Erica Sadun via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Source: http://swiftstub.com/788132715<br>&gt;&gt;<br>&gt;&gt; Two questions:<br>&gt;&gt;<br>&gt;&gt; 1. Can anyone recommended a better name than Cartesian? 2D doesn&#39;t work<br>&gt;&gt; for the compiler and I&#39;m looking for something that doesn&#39;t seem<br>&gt;&gt; &quot;floating-point&quot;-y<br>&gt;&gt; 2. Is there a way to internalize the generator and not make it public?<br>&gt;&gt; I&#39;d ideally like to hide all details except the fact that this is a<br>&gt;&gt; sequence of (Int, Int)<br>&gt;&gt;<br>&gt;&gt; Thanks<br>&gt;&gt;<br>&gt;&gt; -- Erica<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151218/ca1b172d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Need better name, want to hide generator</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>December 18, 2015 at 03:00:00pm</p></header><div class="content"><p>At a minimum, this gives me http://swiftstub.com/60017598 &lt;http://swiftstub.com/60017598&gt;<br></p><p>But I remember reading *somewhere* (can&#39;t remember) that we were supposed to avoid AnyGenerator/AnySequence and they were on the way out. Am I out of my mind?<br></p><p>-- E<br></p><p><br>&gt; On Dec 18, 2015, at 2:47 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt; Oops, of course I meant product&lt;S1: SequenceType, S2: SequenceType&gt;(...) !<br>&gt; <br>&gt; Jacob<br>&gt; <br>&gt; On Fri, Dec 18, 2015 at 1:45 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt; wrote:<br>&gt; 1. Maybe ProductGenerator?<br>&gt; 2. Use AnyGenerator&lt;(T, U)&gt;?<br>&gt; <br>&gt; I&#39;d love to see something like this in stdlib:<br>&gt; <br>&gt; func product&lt;S1, S2&gt;(s1: S1, s2: S2) -&gt; ProductSequence&lt;S1.Generator.Element, S2.Generator.Element&gt; {<br>&gt;     ...<br>&gt; }<br>&gt; <br>&gt; where ProductSequence&lt;T,U&gt;.Generator.Element is (T, U).<br>&gt; <br>&gt; So your example could be &quot;for (x,y) in product(0..&lt;4, 0..&lt;2)&quot;.<br>&gt; <br>&gt; Jacob Bandes-Storch<br>&gt; <br>&gt; On Fri, Dec 18, 2015 at 1:22 PM, Erica Sadun via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt; Source: http://swiftstub.com/788132715 &lt;http://swiftstub.com/788132715&gt;<br>&gt; <br>&gt; Two questions:<br>&gt; <br>&gt; 1. Can anyone recommended a better name than Cartesian? 2D doesn&#39;t work for the compiler and I&#39;m looking for something that doesn&#39;t seem &quot;floating-point&quot;-y<br>&gt; 2. Is there a way to internalize the generator and not make it public? I&#39;d ideally like to hide all details except the fact that this is a sequence of (Int, Int)<br>&gt; <br>&gt; Thanks<br>&gt; <br>&gt; -- Erica<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt; <br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151218/d3a9d0e8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Need better name, want to hide generator</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December 18, 2015 at 03:00:00pm</p></header><div class="content"><p>&gt; On Dec 18, 2015, at 2:25 PM, Erica Sadun via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; At a minimum, this gives me http://swiftstub.com/60017598 &lt;http://swiftstub.com/60017598&gt;<br>&gt; <br>&gt; But I remember reading *somewhere* (can&#39;t remember) that we were supposed to avoid AnyGenerator/AnySequence and they were on the way out. Am I out of my mind?<br></p><p>They aren&#39;t on the way out. We&#39;d like to migrate them with first-class language support for protocol types with associated type constraints, but we wouldn&#39;t eliminate the functionality.<br></p><p>-Joe<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151218/45a1bf4d/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Need better name, want to hide generator</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>December 18, 2015 at 03:00:00pm</p></header><div class="content"><p>p.s. http://swiftstub.com/195460039 &lt;http://swiftstub.com/195460039&gt;<br></p><p>(I&#39;m sure this could be done more lazily and well)<br></p><p><br>&gt; On Dec 18, 2015, at 2:47 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt; Oops, of course I meant product&lt;S1: SequenceType, S2: SequenceType&gt;(...) !<br>&gt; <br>&gt; Jacob<br>&gt; <br>&gt; On Fri, Dec 18, 2015 at 1:45 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt; wrote:<br>&gt; 1. Maybe ProductGenerator?<br>&gt; 2. Use AnyGenerator&lt;(T, U)&gt;?<br>&gt; <br>&gt; I&#39;d love to see something like this in stdlib:<br>&gt; <br>&gt; func product&lt;S1, S2&gt;(s1: S1, s2: S2) -&gt; ProductSequence&lt;S1.Generator.Element, S2.Generator.Element&gt; {<br>&gt;     ...<br>&gt; }<br>&gt; <br>&gt; where ProductSequence&lt;T,U&gt;.Generator.Element is (T, U).<br>&gt; <br>&gt; So your example could be &quot;for (x,y) in product(0..&lt;4, 0..&lt;2)&quot;.<br>&gt; <br>&gt; Jacob Bandes-Storch<br>&gt; <br>&gt; On Fri, Dec 18, 2015 at 1:22 PM, Erica Sadun via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt; Source: http://swiftstub.com/788132715 &lt;http://swiftstub.com/788132715&gt;<br>&gt; <br>&gt; Two questions:<br>&gt; <br>&gt; 1. Can anyone recommended a better name than Cartesian? 2D doesn&#39;t work for the compiler and I&#39;m looking for something that doesn&#39;t seem &quot;floating-point&quot;-y<br>&gt; 2. Is there a way to internalize the generator and not make it public? I&#39;d ideally like to hide all details except the fact that this is a sequence of (Int, Int)<br>&gt; <br>&gt; Thanks<br>&gt; <br>&gt; -- Erica<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt; <br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151218/60c9cd8f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Need better name, want to hide generator</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>December 18, 2015 at 03:00:00pm</p></header><div class="content"><p>Lazier.<br></p><p>http://swiftstub.com/596982131 &lt;http://swiftstub.com/596982131&gt;<br></p><p><br>&gt; On Dec 18, 2015, at 3:32 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; p.s. http://swiftstub.com/195460039 &lt;http://swiftstub.com/195460039&gt;<br>&gt; <br>&gt; (I&#39;m sure this could be done more lazily and well)<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 18, 2015, at 2:47 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Oops, of course I meant product&lt;S1: SequenceType, S2: SequenceType&gt;(...) !<br>&gt;&gt; <br>&gt;&gt; Jacob<br>&gt;&gt; <br>&gt;&gt; On Fri, Dec 18, 2015 at 1:45 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt; wrote:<br>&gt;&gt; 1. Maybe ProductGenerator?<br>&gt;&gt; 2. Use AnyGenerator&lt;(T, U)&gt;?<br>&gt;&gt; <br>&gt;&gt; I&#39;d love to see something like this in stdlib:<br>&gt;&gt; <br>&gt;&gt; func product&lt;S1, S2&gt;(s1: S1, s2: S2) -&gt; ProductSequence&lt;S1.Generator.Element, S2.Generator.Element&gt; {<br>&gt;&gt;     ...<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; where ProductSequence&lt;T,U&gt;.Generator.Element is (T, U).<br>&gt;&gt; <br>&gt;&gt; So your example could be &quot;for (x,y) in product(0..&lt;4, 0..&lt;2)&quot;.<br>&gt;&gt; <br>&gt;&gt; Jacob Bandes-Storch<br>&gt;&gt; <br>&gt;&gt; On Fri, Dec 18, 2015 at 1:22 PM, Erica Sadun via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; Source: http://swiftstub.com/788132715 &lt;http://swiftstub.com/788132715&gt;<br>&gt;&gt; <br>&gt;&gt; Two questions:<br>&gt;&gt; <br>&gt;&gt; 1. Can anyone recommended a better name than Cartesian? 2D doesn&#39;t work for the compiler and I&#39;m looking for something that doesn&#39;t seem &quot;floating-point&quot;-y<br>&gt;&gt; 2. Is there a way to internalize the generator and not make it public? I&#39;d ideally like to hide all details except the fact that this is a sequence of (Int, Int)<br>&gt;&gt; <br>&gt;&gt; Thanks<br>&gt;&gt; <br>&gt;&gt; -- Erica<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151218/d4871109/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Need better name, want to hide generator</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>December 18, 2015 at 03:00:00pm</p></header><div class="content"><p>Here&#39;s a more from-scratch approach, but I like yours better for obvious<br>reasons.<br></p><p>http://swiftstub.com/732424572<br></p><p>Jacob Bandes-Storch<br></p><p>On Fri, Dec 18, 2015 at 2:43 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br></p><p>&gt; Lazier.<br>&gt;<br>&gt; http://swiftstub.com/596982131<br>&gt;<br>&gt;<br>&gt; On Dec 18, 2015, at 3:32 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;<br>&gt; p.s. http://swiftstub.com/195460039<br>&gt;<br>&gt; (I&#39;m sure this could be done more lazily and well)<br>&gt;<br>&gt;<br>&gt; On Dec 18, 2015, at 2:47 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; Oops, of course I meant product&lt;S1: SequenceType, S2: SequenceType&gt;(...) !<br>&gt;<br>&gt; Jacob<br>&gt;<br>&gt; On Fri, Dec 18, 2015 at 1:45 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; 1. Maybe ProductGenerator?<br>&gt;&gt; 2. Use AnyGenerator&lt;(T, U)&gt;?<br>&gt;&gt;<br>&gt;&gt; I&#39;d love to see something like this in stdlib:<br>&gt;&gt;<br>&gt;&gt; func product&lt;S1, S2&gt;(s1: S1, s2: S2) -&gt;<br>&gt;&gt; ProductSequence&lt;S1.Generator.Element, S2.Generator.Element&gt; {<br>&gt;&gt;     ...<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; where ProductSequence&lt;T,U&gt;.Generator.Element is (T, U).<br>&gt;&gt;<br>&gt;&gt; So your example could be &quot;for (x,y) in product(0..&lt;4, 0..&lt;2)&quot;.<br>&gt;&gt;<br>&gt;&gt; Jacob Bandes-Storch<br>&gt;&gt;<br>&gt;&gt; On Fri, Dec 18, 2015 at 1:22 PM, Erica Sadun via swift-users &lt;<br>&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Source: http://swiftstub.com/788132715<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Two questions:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 1. Can anyone recommended a better name than Cartesian? 2D doesn&#39;t work<br>&gt;&gt;&gt; for the compiler and I&#39;m looking for something that doesn&#39;t seem<br>&gt;&gt;&gt; &quot;floating-point&quot;-y<br>&gt;&gt;&gt; 2. Is there a way to internalize the generator and not make it public?<br>&gt;&gt;&gt; I&#39;d ideally like to hide all details except the fact that this is a<br>&gt;&gt;&gt; sequence of (Int, Int)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Thanks<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; -- Erica<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151218/597ae1f7/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5a72880ffed1a30cb9b8e3f372507145?s=50"></div><header><strong>Need better name, want to hide generator</strong> from <string>Rob Mayoff</string> &lt;mayoff at dqd.com&gt;<p>December 19, 2015 at 12:00:00am</p></header><div class="content"><p>&gt;<br>&gt; 1. Can anyone recommended a better name than Cartesian? 2D doesn&#39;t work<br>&gt; for the compiler and I&#39;m looking for something that doesn&#39;t seem<br>&gt; &quot;floating-point&quot;-y<br>&gt;<br></p><p>&quot;AllPairs&quot; seems self-explanatory.<br></p><p>&quot;CrossJoin&quot; should be intuitive to anyone familiar with relational<br>databases.<br></p><p>&quot;product&quot; sounds like it might be multiplying elements with each other.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151219/56b7ca1a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Need better name, want to hide generator</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>December 19, 2015 at 05:00:00pm</p></header><div class="content"><p>Here&#39;s what I ended up with. (The use-case for this ended up being light-weight game tile placement, not image processing or anything. )<br></p><p>func cartesianProduct&lt;S1: SequenceType, S2: SequenceType&gt;(s1: S1, _ s2: S2) -&gt; AnySequence&lt;(S1.Generator.Element, S2.Generator.Element)&gt; {<br>    let items = s1.lazy.flatMap({<br>        item1 in s2.lazy.map({<br>            item2 in (item1, item2)})})<br>    return AnySequence {items.generate()}<br>}<br></p><p>func cartesianProduct&lt;S1: SequenceType, S2: SequenceType, S3: SequenceType&gt;(s1: S1, _ s2: S2, _ s3: S3) -&gt; AnySequence&lt;(S1.Generator.Element, S2.Generator.Element, S3.Generator.Element)&gt; {<br>    let items = s1.lazy.flatMap({<br>        item1 in s2.lazy.flatMap({<br>            item2 in s3.lazy.map({<br>                item3 in (item1, item2, item3)})})})<br>    return AnySequence {items.generate()}<br>}<br></p><p>I initially suggested to the person I was helping:<br></p><p>for y in (...) {<br>    for x in (...) {<br>      ...<br>    }<br>}<br></p><p>But I&#39;m glad I got to explore several alternative approaches. Thanks all. A few extra notes, to summarize everything into a single post:<br></p><p>Joe writes: &quot;[AnySeq/Gen] aren&#39;t on the way out. We&#39;d like to migrate them with first-class language support for protocol types with associated type constraints, but we wouldn&#39;t eliminate the functionality.&quot;<br></p><p>Dmitri adds: &quot;You can use AnySequence and AnyGenerator, but they come at a cost of dynamic dispatch for every call.  In this case, if you want this component to be suitable for performance-critical code, I would suggest to avoid them for now.&quot;<br></p><p><br>-- E<br></p><p>&gt; On Dec 18, 2015, at 11:08 PM, Rob Mayoff via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; 1. Can anyone recommended a better name than Cartesian? 2D doesn&#39;t work for the compiler and I&#39;m looking for something that doesn&#39;t seem &quot;floating-point&quot;-y<br>&gt; <br>&gt; &quot;AllPairs&quot; seems self-explanatory.<br>&gt; <br>&gt; &quot;CrossJoin&quot; should be intuitive to anyone familiar with relational databases.<br>&gt; <br>&gt; &quot;product&quot; sounds like it might be multiplying elements with each other.<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151219/7cc8a7cf/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b660eecceda60138f137d353b8289925?s=50"></div><header><strong>Need better name, want to hide generator</strong> from <string>Janosch Hildebrand</string> &lt;jnosh at jnosh.com&gt;<p>December 20, 2015 at 05:00:00pm</p></header><div class="content"><p>Hi Erica,<br></p><p>Just a quick side note with regards to:<br></p><p>&gt; Dmitri adds: &quot;You can use AnySequence and AnyGenerator, but they come at a cost of dynamic dispatch for every call.  In this case, if you want this component to be suitable for performance-critical code, I would suggest to avoid them for now.&quot;<br></p><p>This is very much true. But since Swift 2.0, that overhead can actually be avoided for AnyGenerator given enough context.<br></p><p>Basically, if the producer and consumer of the sequence are in the same module and with whole module optimization enabled (or putting all the relevant parts in the same file), AnyGenerator can be as fast as a native generator.<br></p><p>It&#39;s of limited usefulness and a bit weird to use AnyGenerator instead of AnySequence but it can be handy when:<br>	* performance is critical,<br>	* you want to use more than one sequence type (with different generators)<br>	* and can&#39;t use generic functions to solve your problem...<br></p><p>- Janosch<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151220/11681711/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f5228ad4a1fad94f1a7d3d05b0c0ff6a?s=50"></div><header><strong>Need better name, want to hide generator</strong> from <string>Donnacha Oisín Kidney</string> &lt;oisin.kidney at gmail.com&gt;<p>December 20, 2015 at 05:00:00pm</p></header><div class="content"><p>I was under the impression that the biggest speed bump for AnyGenerator was that it was a class, rather than a struct? All of the generators on the standard library non-“Any” sequences are structs, for instance.<br></p><p>&gt; On 20 Dec 2015, at 16:07, Janosch Hildebrand via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; 	* and can&#39;t use generic functions to solve your problem...<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151220/246847c9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b660eecceda60138f137d353b8289925?s=50"></div><header><strong>Need better name, want to hide generator</strong> from <string>Janosch Hildebrand</string> &lt;jnosh at jnosh.com&gt;<p>December 20, 2015 at 08:00:00pm</p></header><div class="content"><p>Oh, absolutely. It&#39;s just that the compiler is able to optimize through that under the right circumstances.<br></p><p>When the generator is constructed, wrapped with anyGenerator() and used in the same module, the compiler can in theory inline everything and get rid of any boxes and dynamic dispatch, basically reducing it back to the actual generator.<br></p><p>Basically, if the compiler can inline the AnyGenerator construction into the function where it&#39;s iterated over, this will work.<br>(But not if you construct the AnyGenerator with a closure. The compiler can&#39;t optimize that case (yet).)<br></p><p>This might have been one of the reasons the AnyGenerator implementation was changed from Swift 1.2 &gt; 2.0. IIRC it always used a closure for the type erasure before 2.0...<br></p><p>Conceptually the same could also work for AnySequence I think. It&#39;s just that that is currently too complex for the optimizer to resolve even under ideal circumstances.<br></p><p><br>But this is more of a side-note about the current capabilities and limitations of the compiler. It&#39;s much simpler and more reliable to simply avoid AnyGenerator &amp; AnySequence in most cases if their performance is an issue.<br></p><p>&gt; On 20 Dec 2015, at 18:11, Donnacha Oisín Kidney &lt;oisin.kidney at gmail.com&gt; wrote:<br>&gt; <br>&gt; I was under the impression that the biggest speed bump for AnyGenerator was that it was a class, rather than a struct? All of the generators on the standard library non-“Any” sequences are structs, for instance.<br>&gt; <br>&gt;&gt; On 20 Dec 2015, at 16:07, Janosch Hildebrand via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; 	* and can&#39;t use generic functions to solve your problem...<br>&gt; <br></p><p>- Janosch<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151220/7b02d22a/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Need better name, want to hide generator</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December 18, 2015 at 10:00:00pm</p></header><div class="content"><p>On Fri, Dec 18, 2015 at 1:22 PM, Erica Sadun via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; 2. Is there a way to internalize the generator and not make it public? I&#39;d<br>&gt; ideally like to hide all details except the fact that this is a sequence of<br>&gt; (Int, Int)<br>&gt;<br></p><p>You can use AnySequence and AnyGenerator, but they come at a cost of<br>dynamic dispatch for every call.  In this case, if you want this component<br>to be suitable for performance-critical code, I would suggest to avoid them<br>for now.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151218/2decd539/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
