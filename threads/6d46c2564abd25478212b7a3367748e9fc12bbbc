<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/07c147e6770f1e43d129f52aafd44138?s=50"></div><header><strong>Hidden initiallizations ...</strong> from <string>Biala</string> &lt;bialata at yahoo.com&gt;<p>March 28, 2016 at 02:00:00pm</p></header><div class="content"><p>Look at that code:<br>var i:Int = 0<br>for i in (0..100){        ///...        if (i == 50)<br>        {<br>               break        } <br>}<br></p><p>print(&quot;i=\(i)&quot;)<br></p><p>What is the value of i ?? Please remove this nonsense from the language unless you are happy to see it job interview questions in future :) My suggestion is to use the variable i in the loop instead of making hidden init of another &quot;i&quot; for the loop. <br></p><p>Everything that is hidden = evil. It is not saving time but creating bugs. Code should be clear and understandable from first view...<br> <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160328/6d46bbbc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Hidden initiallizations ...</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>March 28, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; What is the value of i ??<br></p><p>0, because `for i` implicitly declares a new variable `i`. You could perhaps argue that you should have to explicitly say `for let i`, but that seems pointless because the `let` would always be necessary. (Well, unless you did a `for case` or `for _`, but those are rare constructs.)<br></p><p>&gt; My suggestion is to use the variable i in the loop instead of making hidden init of another &quot;i&quot; for the loop. <br></p><p>That seems like an extremely bad idea. What if the loop variable is a property or global and you accidentally end up using it implicitly? That&#39;s *way* worse than shadowing the outer variable.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/07c147e6770f1e43d129f52aafd44138?s=50"></div><header><strong>Hidden initiallizations ...</strong> from <string>Biala</string> &lt;bialata at yahoo.com&gt;<p>March 29, 2016 at 05:00:00am</p></header><div class="content"><p>I strongly disagree with you. You can not &quot;accidentally&quot; do any thing as the name of the variable used will be written. Now it is written &quot;i&quot; and is not cleat what i is...<br>Adding &quot;let&quot; may help but only in case that it is not allowed to use the name &quot;i&quot; in the same method. Having more that one variable with the same name in one method is stupid and the language should prevent that at least. <br></p><p><br></p><p> <br></p><p>    On Tuesday, March 29, 2016 4:16 AM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br> <br></p><p> &gt; What is the value of i ??<br></p><p>0, because `for i` implicitly declares a new variable `i`. You could perhaps argue that you should have to explicitly say `for let i`, but that seems pointless because the `let` would always be necessary. (Well, unless you did a `for case` or `for _`, but those are rare constructs.)<br></p><p>&gt; My suggestion is to use the variable i in the loop instead of making hidden init of another &quot;i&quot; for the loop. <br></p><p>That seems like an extremely bad idea. What if the loop variable is a property or global and you accidentally end up using it implicitly? That&#39;s *way* worse than shadowing the outer variable.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p><p><br>  <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160329/3f20f28e/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f822334c2f6ebeafd3a41cd44c82a62b?s=50"></div><header><strong>Hidden initiallizations ...</strong> from <string>Andrey Tarantsov</string> &lt;andrey at tarantsov.com&gt;<p>March 29, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; Having more that one variable with the same name in one method is stupid and the language should prevent that at least. <br></p><p>Actually, we&#39;re doing it all the time:<br></p><p>if let foo = foo {<br>  ...<br>}<br></p><p>var foo = foo<br></p><p>You can do this in a subscope, you can do this to the arguments, and you can do this to fields.<br></p><p>A.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160329/233ac232/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/07c147e6770f1e43d129f52aafd44138?s=50"></div><header><strong>Hidden initiallizations ...</strong> from <string>Biala</string> &lt;bialata at yahoo.com&gt;<p>March 29, 2016 at 11:00:00am</p></header><div class="content"><p>And you are OK with that ????I can not imagine my team writing such code and me looking to 5 code reviews per day having to find out what the variable actually is every time :)<br>For me it is OK for student projects but not for big code that have to be supported for years ... <br></p><p>    On Tuesday, March 29, 2016 2:02 PM, Andrey Tarantsov &lt;andrey at tarantsov.com&gt; wrote:<br> <br></p><p> <br>Having more that one variable with the same name in one method is stupid and the language should prevent that at least. <br></p><p>Actually, we&#39;re doing it all the time:<br>if let foo = foo {  ...}<br>var foo = foo<br>You can do this in a subscope, you can do this to the arguments, and you can do this to fields.<br>A.<br></p><p><br>  <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160329/aa20428f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f822334c2f6ebeafd3a41cd44c82a62b?s=50"></div><header><strong>Hidden initiallizations ...</strong> from <string>Andrey Tarantsov</string> &lt;andrey at tarantsov.com&gt;<p>March 29, 2016 at 05:00:00pm</p></header><div class="content"><p>This is idiomatic Swift. I see no readability issues with that.<br></p><p>Of course, shadowing a local var with a for loop counter is another case. I&#39;d say a warning is warranted there.<br></p><p>A.<br></p><p><br>&gt; On Mar 29, 2016, at 5:30 PM, Biala &lt;bialata at yahoo.com&gt; wrote:<br>&gt; <br>&gt; And you are OK with that ????<br>&gt; I can not imagine my team writing such code and me looking to 5 code reviews per day having to find out what the variable actually is every time :)<br>&gt; <br>&gt; For me it is OK for student projects but not for big code that have to be supported for years ...<br>&gt; <br>&gt; <br>&gt; On Tuesday, March 29, 2016 2:02 PM, Andrey Tarantsov &lt;andrey at tarantsov.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; Having more that one variable with the same name in one method is stupid and the language should prevent that at least. <br>&gt; <br>&gt; Actually, we&#39;re doing it all the time:<br>&gt; <br>&gt; if let foo = foo {<br>&gt;   ...<br>&gt; }<br>&gt; <br>&gt; var foo = foo<br>&gt; <br>&gt; You can do this in a subscope, you can do this to the arguments, and you can do this to fields.<br>&gt; <br>&gt; A.<br>&gt; <br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160329/74742f49/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>Hidden initiallizations ...</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>March 29, 2016 at 01:00:00pm</p></header><div class="content"><p>I’m a +1 for warning in cases like that, if let foo = foo is probably fine, though personally I use different names anyway.<br></p><p>Actually I use a lot of Applescript style naming, though admittedly I can be a bit inconsistent about it. For example, I like using eachFoo as a name for a loop variable like so:<br></p><p>	for eachIndex in 1 ..&lt; 100 { … }<br></p><p>Which can read nicely as natural language, but since I don’t use eachFoo anywhere else, helps to avoid name collisions. If eachFoo is optional, then I might unwrap the value into theFoo instead like-so:<br></p><p>	let theValues:[Int?] = []<br>	for eachValue in theValues {<br>		if let theValue = eachValue { /* Do some stuff */ }<br>		else { /* Do some other stuff */ }<br>	}<br></p><p>I actually see a surprising number of examples like:<br></p><p>	for i in 1 ..&lt; 100 { … }<br></p><p>But does anyone actually use these? Since I learned to stop using c-style loops in Swift I haven’t used single letter variables at all, so this seems like partly an issue of choosing bad variable names; not saying mine are better, but I find that they work well for me, even if they’re a bit longer overall. Unless I’m implementing some kind of formula with well understood letters for variables I wouldn’t use such short names anywhere, and even then I’d probably try to find out what each variable is and find a full name for it, for my own sake.<br></p><p>&gt; On 29 Mar 2016, at 12:39, Andrey Tarantsov via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; This is idiomatic Swift. I see no readability issues with that.<br>&gt; <br>&gt; Of course, shadowing a local var with a for loop counter is another case. I&#39;d say a warning is warranted there.<br>&gt; <br>&gt; A.<br>&gt; <br>&gt; <br>&gt;&gt; On Mar 29, 2016, at 5:30 PM, Biala &lt;bialata at yahoo.com &lt;mailto:bialata at yahoo.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; And you are OK with that ????<br>&gt;&gt; I can not imagine my team writing such code and me looking to 5 code reviews per day having to find out what the variable actually is every time :)<br>&gt;&gt; <br>&gt;&gt; For me it is OK for student projects but not for big code that have to be supported for years ...<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Tuesday, March 29, 2016 2:02 PM, Andrey Tarantsov &lt;andrey at tarantsov.com &lt;mailto:andrey at tarantsov.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; Having more that one variable with the same name in one method is stupid and the language should prevent that at least. <br>&gt;&gt; <br>&gt;&gt; Actually, we&#39;re doing it all the time:<br>&gt;&gt; <br>&gt;&gt; if let foo = foo {<br>&gt;&gt;   ...<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; var foo = foo<br>&gt;&gt; <br>&gt;&gt; You can do this in a subscope, you can do this to the arguments, and you can do this to fields.<br>&gt;&gt; <br>&gt;&gt; A.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160329/dba57404/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f822334c2f6ebeafd3a41cd44c82a62b?s=50"></div><header><strong>Hidden initiallizations ...</strong> from <string>Andrey Tarantsov</string> &lt;andrey at tarantsov.com&gt;<p>March 29, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; Actually I use a lot of Applescript style naming, though admittedly I can be a bit inconsistent about it. For example, I like using eachFoo as a name for a loop variable like so:<br>&gt; <br>&gt; 	for eachIndex in 1 ..&lt; 100 { … }<br>&gt; <br>&gt; Which can read nicely as natural language, but since I don’t use eachFoo anywhere else, helps to avoid name collisions. If eachFoo is optional, then I might unwrap the value into theFoo instead like-so:<br>&gt; <br>&gt; 	let theValues:[Int?] = []<br>&gt; 	for eachValue in theValues {<br>&gt; 		if let theValue = eachValue { /* Do some stuff */ }<br>&gt; 		else { /* Do some other stuff */ }<br>&gt; 	}<br></p><p>Interesting! :-) I should explore this, sounds fun in some cases.<br></p><p>I typically just use the bare word:<br></p><p>for value in values {<br>  if let value = value {<br>    foo(value)<br>  }<br>}<br></p><p>...but sometimes that clashes with an argument or field, and yours could be a good convention to resolve those cases.<br></p><p>A.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160329/10dffb39/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
