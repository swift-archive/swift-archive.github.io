<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d042be5dcfe90e649f760303af3e429?s=50"></div><header><strong>Fix or remove Swift.min and Swift.max?</strong> from <string>Jens Persson</string> &lt;jens at bitcycle.com&gt;<p>June 28, 2016 at 11:00:00pm</p></header><div class="content"><p>Hi all!<br></p><p>Swift.min (and Swift.max) propagates nan or not depending on the order of<br>its args:<br></p><p>Swift.min(1.0, .nan) // 1.0<br>Swift.min(.nan, 1.0) // nan (!)<br></p><p>Double.minimum(1.0, .nan) // 1.0<br>Double.minimum(.nan, 1.0) // 1.0<br></p><p>fmin(1.0, .nan) // 1.0<br>fmin(.nan, 1.0) // 1.0<br></p><p>The new static minimum and maximum funcs on FloatingPoint in Swift 3 shows<br>the expected behaviour (ie the same as fmin, fmax and IEEE-754), so what<br>should happen with Swift.min and Swift.max?<br></p><p>Fix, remove or perhaps something else?<br></p><p>https://bugs.swift.org/browse/SR-1011<br></p><p>/Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160628/b8491080/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e0a5152b275c43b493a94b5a6a868905?s=50"></div><header><strong>Fix or remove Swift.min and Swift.max?</strong> from <string>Pyry Jahkola</string> &lt;pyry.jahkola at iki.fi&gt;<p>July  4, 2016 at 12:00:00am</p></header><div class="content"><p>+1, and bumping this topic.<br></p><p>The background — which I&#39;m sure Jens is aware of — is that IEEE-754 floating point numbers can&#39;t truly conform to Comparable. (The problematic case being that neither of `x &lt; .nan`, `x == .nan`, or `x &gt; .nan` can be `true`.)<br></p><p>But given that the NaN-abolishing semantics of `fmin` is quite useful, and since we also want that Double and Float remain conforming to Comparable (albeit brokenly), could we consider fixing this issue by moving `min(_:_:)` and `max(_:_:)` into Comparable?<br></p><p>The Comparable protocol would become:<br></p><p>    public protocol Comparable : Equatable {<br>      func &lt; (lhs: Self, rhs: Self) -&gt; Bool<br>      func &lt;= (lhs: Self, rhs: Self) -&gt; Bool<br>      func &gt;= (lhs: Self, rhs: Self) -&gt; Bool<br>      func &gt; (lhs: Self, rhs: Self) -&gt; Bool<br>      static func minimum(lhs: Self, rhs: Self) -&gt; Self<br>      static func maximum(lhs: Self, rhs: Self) -&gt; Self<br>    }<br></p><p>with default implementations added for the new static functions, and custom implementations for FloatingPoint types. The `Swift.min` and `Swift.max` functions would then forward their logic to `Comparable.minimum` and `Comparable.maximum`.<br></p><p>— Pyry<br></p><p>&gt; On 29 Jun 2016, Jens Persson wrote:<br>&gt; <br>&gt; Hi all!<br>&gt; <br>&gt; Swift.min (and Swift.max) propagates nan or not depending on the order of its args:<br>&gt; <br>&gt; Swift.min(1.0, .nan) // 1.0<br>&gt; Swift.min(.nan, 1.0) // nan (!)<br>&gt; <br>&gt; Double.minimum(1.0, .nan) // 1.0<br>&gt; Double.minimum(.nan, 1.0) // 1.0<br>&gt; <br>&gt; fmin(1.0, .nan) // 1.0<br>&gt; fmin(.nan, 1.0) // 1.0<br>&gt; <br>&gt; The new static minimum and maximum funcs on FloatingPoint in Swift 3 shows the expected behaviour (ie the same as fmin, fmax and IEEE-754), so what should happen with Swift.min and Swift.max?<br>&gt; <br>&gt; Fix, remove or perhaps something else?<br>&gt; <br>&gt; https://bugs.swift.org/browse/SR-1011 &lt;https://bugs.swift.org/browse/SR-1011&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160704/69a0a881/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>Fix or remove Swift.min and Swift.max?</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>July  4, 2016 at 01:00:00am</p></header><div class="content"><p>There was a proposal a little while ago to change Comparable to have an operator producing an enum (with ordered before, same and ordered after cases) which provides strict ordering requirements (unlike the current comparable methods). I think this would serve as a better basis for replacing Swift.min(), and was intended specifically to solve the floating point problem.<br></p><p>It doesn&#39;t look like it has a proposal though, maybe I&#39;m not searching for the right terms?<br></p><p>&gt; On 3 Jul 2016, at 22:28, Pyry Jahkola via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1, and bumping this topic.<br>&gt; <br>&gt; The background — which I&#39;m sure Jens is aware of — is that IEEE-754 floating point numbers can&#39;t truly conform to Comparable. (The problematic case being that neither of `x &lt; .nan`, `x == .nan`, or `x &gt; .nan` can be `true`.)<br>&gt; <br>&gt; But given that the NaN-abolishing semantics of `fmin` is quite useful, and since we also want that Double and Float remain conforming to Comparable (albeit brokenly), could we consider fixing this issue by moving `min(_:_:)` and `max(_:_:)` into Comparable?<br>&gt; <br>&gt; The Comparable protocol would become:<br>&gt; <br>&gt;     public protocol Comparable : Equatable {<br>&gt;       func &lt; (lhs: Self, rhs: Self) -&gt; Bool<br>&gt;       func &lt;= (lhs: Self, rhs: Self) -&gt; Bool<br>&gt;       func &gt;= (lhs: Self, rhs: Self) -&gt; Bool<br>&gt;       func &gt; (lhs: Self, rhs: Self) -&gt; Bool<br>&gt;       static func minimum(lhs: Self, rhs: Self) -&gt; Self<br>&gt;       static func maximum(lhs: Self, rhs: Self) -&gt; Self<br>&gt;     }<br>&gt; <br>&gt; with default implementations added for the new static functions, and custom implementations for FloatingPoint types. The `Swift.min` and `Swift.max` functions would then forward their logic to `Comparable.minimum` and `Comparable.maximum`.<br>&gt; <br>&gt; — Pyry<br>&gt; <br>&gt;&gt; On 29 Jun 2016, Jens Persson wrote:<br>&gt;&gt; <br>&gt;&gt; Hi all!<br>&gt;&gt; <br>&gt;&gt; Swift.min (and Swift.max) propagates nan or not depending on the order of its args:<br>&gt;&gt; <br>&gt;&gt; Swift.min(1.0, .nan) // 1.0<br>&gt;&gt; Swift.min(.nan, 1.0) // nan (!)<br>&gt;&gt; <br>&gt;&gt; Double.minimum(1.0, .nan) // 1.0<br>&gt;&gt; Double.minimum(.nan, 1.0) // 1.0<br>&gt;&gt; <br>&gt;&gt; fmin(1.0, .nan) // 1.0<br>&gt;&gt; fmin(.nan, 1.0) // 1.0<br>&gt;&gt; <br>&gt;&gt; The new static minimum and maximum funcs on FloatingPoint in Swift 3 shows the expected behaviour (ie the same as fmin, fmax and IEEE-754), so what should happen with Swift.min and Swift.max?<br>&gt;&gt; <br>&gt;&gt; Fix, remove or perhaps something else?<br>&gt;&gt; <br>&gt;&gt; https://bugs.swift.org/browse/SR-1011 &lt;https://bugs.swift.org/browse/SR-1011&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160704/9b0df837/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
