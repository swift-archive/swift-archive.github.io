<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/71af439a5f648e2e9adb0261d37d9118?s=50"></div><header><strong>Build failure for Linux: &quot;No such module: SwiftGlibc&quot;</strong> from <string>Karl Wagner</string> &lt;springsupport at me.com&gt;<p>April 19, 2016 at 10:00:00am</p></header><div class="content"><p>I’m trying to cross-compile Swift for the Raspberry Pi. I’ve got the tools and most of the standard library compiling, but I’m getting stuck trying to build the platform components for Glibc. Swift is just complaining that the “SwiftGlibc” module doesn’t exist. I’d appreciate it if anybody could help trying to find out why.<br></p><p>I’ve been whittling down at the compile command, trying to figure out why it isn’t finding/building the module.<br></p><p>==============<br>&lt;sourceroot&gt;/build/Ninja-ReleaseAssert/swift-macosx-x86_64/bin/swiftc -c <br>-target armv7-unknown-linux-gnueabihf <br>-O -D INTERNAL_CHECKS_ENABLED <br>-no-link-objc-runtime -autolink-force-load -emit-module -module-link-name swiftGlibc -force-single-frontend-invocation -parse-as-library <br>-I &lt;sourceroot&gt;/build/Ninja-ReleaseAssert/swift-linux-armv7/./lib/swift/linux/armv7<br>-module-cache-path &lt;sourceroot&gt;/build/Ninja-ReleaseAssert/swift-linux-armv7/./module-cache<br>-emit-module-path &lt;sourceroot&gt;/build/Ninja-ReleaseAssert/swift-linux-armv7/./lib/swift/linux/armv7/Glibc.swiftmodule<br>-o &lt;sourceroot&gt;/build/Ninja-ReleaseAssert/swift-linux-armv7/stdlib/public/Platform/linux/armv7/Glibc.o<br>&lt;sourceroot&gt;/swift/stdlib/public/Platform/Glibc.swift<br></p><p>&lt;sourceroot&gt;/swift/stdlib/public/Platform/Glibc.swift:13:19: error: no such module &#39;SwiftGlibc&#39;<br>@_exported import SwiftGlibc // Clang module<br>===============<br></p><p>glibc.modulemap gets generated and copied in to the /lib/swift/linux/armv7 build dir, and Glibc.swift looks like it just exports that out, so I’m guessing that Swift can’t find my modulemap - or what else does it need to build the SwiftGlibc module?<br></p><p>Many thanks<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9d9d4c769b20cd12b15f4e5b991b4ca5?s=50"></div><header><strong>Build failure for Linux: &quot;No such module: SwiftGlibc&quot;</strong> from <string>Timothy J. Wood</string> &lt;tjw at omnigroup.com&gt;<p>April 21, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Apr 19, 2016, at 1:57 AM, Karl Wagner via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; I’m trying to cross-compile Swift for the Raspberry Pi. I’ve got the tools and most of the standard library compiling, but I’m getting stuck trying to build the platform components for Glibc. Swift is just complaining that the “SwiftGlibc” module doesn’t exist. I’d appreciate it if anybody could help trying to find out why.<br>&gt; <br>&gt; I’ve been whittling down at the compile command, trying to figure out why it isn’t finding/building the module.<br></p><p>In this message &lt;http://article.gmane.org/gmane.comp.lang.swift.devel/1710 &lt;http://article.gmane.org/gmane.comp.lang.swift.devel/1710&gt;&gt; there was a suggestion to make a symlink to work around this issue (but when building on Ubuntu x86_64, I think). Perhaps something similar would work?<br></p><p>What steps are you using to get as far as you have? I’m not having a lot of luck so far…<br></p><p>-tim<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160421/f9904513/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/71af439a5f648e2e9adb0261d37d9118?s=50"></div><header><strong>Build failure for Linux: &quot;No such module: SwiftGlibc&quot;</strong> from <string>Karl Wagner</string> &lt;springsupport at me.com&gt;<p>April 30, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On 22 Apr 2016, at 06:46, Timothy Wood &lt;tjw at omnigroup.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Apr 19, 2016, at 1:57 AM, Karl Wagner via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I’m trying to cross-compile Swift for the Raspberry Pi. I’ve got the tools and most of the standard library compiling, but I’m getting stuck trying to build the platform components for Glibc. Swift is just complaining that the “SwiftGlibc” module doesn’t exist. I’d appreciate it if anybody could help trying to find out why.<br>&gt;&gt; <br>&gt;&gt; I’ve been whittling down at the compile command, trying to figure out why it isn’t finding/building the module.<br>&gt; <br>&gt; In this message &lt;http://article.gmane.org/gmane.comp.lang.swift.devel/1710 &lt;http://article.gmane.org/gmane.comp.lang.swift.devel/1710&gt;&gt; there was a suggestion to make a symlink to work around this issue (but when building on Ubuntu x86_64, I think). Perhaps something similar would work?<br>&gt; <br>&gt; What steps are you using to get as far as you have? I’m not having a lot of luck so far…<br>&gt; <br>&gt; -tim<br>&gt; <br></p><p><br>Well that seems to be trying to resolve the runtime issue; I’m still trying to compile the standard library.<br></p><p>My changes are here: https://github.com/karwa/swift<br></p><p>Then I’m building with:<br></p><p>../swift/utils/build-script -d \<br>	--install-prefix=&quot;/usr&quot; \<br>	--install-symroot=&quot;${cc_files}/out/symroot&quot; \<br>	-- \<br>	--cross-compile-tools-deployment-targets=linux-armv7 \<br>	--cross-compile-sysroot=&quot;${sysroot}&quot; \<br>	--cross-compile-toolchain-bin=&quot;${toolchain}&quot;<br>	--stdlib-deployment-targets=&quot;macosx-x86_64;linux-armv7=linux-armv7”<br></p><p>(I’m not sure about the install arguments; I’ve only been building for OSX, so I’ve never ‘installed’ a built swift besides Xcode toolchains.)<br></p><p>This builds for the host first, then uses the freshly baked clang and swift compilers to cross-compile to the target. I can compile the tools and what I believe is most of the standard library; it just flops at SwiftGlibc and I can’t understand it because glibc.modulemap exists where it should and looks good (headers pointing inside the cross-compiled sysroot). It’s not even complaining about the modulemap itself (like missing headers or whatever); it just appears unable to find it even though it’s in the swift compiler’s include path.<br></p><p>Is there some kind of extra flag to tell it to look inside that particular modulemap file, that perhaps isn’t being generated for me? I don’t know how that magic works, how Swift knows what to look for when it sees:<br></p><p>@_exported import SwiftGlibc<br></p><p>inside public/Platform/Glibc.swift<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160430/49c5128a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Build failure for Linux: &quot;No such module: SwiftGlibc&quot;</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>May  2, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Apr 29, 2016, at 23:46, Karl Wagner via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On 22 Apr 2016, at 06:46, Timothy Wood &lt;tjw at omnigroup.com &lt;mailto:tjw at omnigroup.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Apr 19, 2016, at 1:57 AM, Karl Wagner via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’m trying to cross-compile Swift for the Raspberry Pi. I’ve got the tools and most of the standard library compiling, but I’m getting stuck trying to build the platform components for Glibc. Swift is just complaining that the “SwiftGlibc” module doesn’t exist. I’d appreciate it if anybody could help trying to find out why.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’ve been whittling down at the compile command, trying to figure out why it isn’t finding/building the module.<br>&gt;&gt; <br>&gt;&gt; In this message &lt;http://article.gmane.org/gmane.comp.lang.swift.devel/1710 &lt;http://article.gmane.org/gmane.comp.lang.swift.devel/1710&gt;&gt; there was a suggestion to make a symlink to work around this issue (but when building on Ubuntu x86_64, I think). Perhaps something similar would work?<br>&gt;&gt; <br>&gt;&gt; What steps are you using to get as far as you have? I’m not having a lot of luck so far…<br>&gt;&gt; <br>&gt;&gt; -tim<br>&gt;&gt; <br>&gt; <br>&gt; <br>&gt; Well that seems to be trying to resolve the runtime issue; I’m still trying to compile the standard library.<br>&gt; <br>&gt; My changes are here: https://github.com/karwa/swift &lt;https://github.com/karwa/swift&gt;<br>&gt; <br>&gt; Then I’m building with:<br>&gt; <br>&gt; ../swift/utils/build-script -d \<br>&gt; 	--install-prefix=&quot;/usr&quot; \<br>&gt; 	--install-symroot=&quot;${cc_files}/out/symroot&quot; \<br>&gt; 	-- \<br>&gt; 	--cross-compile-tools-deployment-targets=linux-armv7 \<br>&gt; 	--cross-compile-sysroot=&quot;${sysroot}&quot; \<br>&gt; 	--cross-compile-toolchain-bin=&quot;${toolchain}&quot;<br>&gt; 	--stdlib-deployment-targets=&quot;macosx-x86_64;linux-armv7=linux-armv7”<br>&gt; <br>&gt; (I’m not sure about the install arguments; I’ve only been building for OSX, so I’ve never ‘installed’ a built swift besides Xcode toolchains.)<br>&gt; <br>&gt; This builds for the host first, then uses the freshly baked clang and swift compilers to cross-compile to the target. I can compile the tools and what I believe is most of the standard library; it just flops at SwiftGlibc and I can’t understand it because glibc.modulemap exists where it should and looks good (headers pointing inside the cross-compiled sysroot). It’s not even complaining about the modulemap itself (like missing headers or whatever); it just appears unable to find it even though it’s in the swift compiler’s include path.<br>&gt; <br>&gt; Is there some kind of extra flag to tell it to look inside that particular modulemap file, that perhaps isn’t being generated for me? I don’t know how that magic works, how Swift knows what to look for when it sees:<br>&gt; <br>&gt; @_exported import SwiftGlibc<br>&gt; <br>&gt; inside public/Platform/Glibc.swift<br></p><p>The logic to go look for that file is hardcoded in the compiler; it’s not picked up via include paths. It has to specifically be inside the lib/swift/ directory. (I think it’s at lib/swift/linux/, but I’m not 100% sure.)<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160502/809f1ea1/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14477c366d6ee4e41adf14837bc4f2f9?s=50"></div><header><strong>Build failure for Linux: &quot;No such module: SwiftGlibc&quot;</strong> from <string>Ryan Lovelett</string> &lt;swift-dev at ryan.lovelett.me&gt;<p>May  2, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; ../swift/utils/build-script -d \<br>&gt; --install-prefix=&quot;/usr&quot; \<br>&gt; --install-symroot=&quot;${cc_files}/out/symroot&quot; \<br>&gt; -- \<br>&gt; --cross-compile-tools-deployment-targets=linux-armv7 \<br>&gt; --cross-compile-sysroot=&quot;${sysroot}&quot; \<br>&gt; --cross-compile-toolchain-bin=&quot;${toolchain}&quot;<br>&gt; --stdlib-deployment-targets=&quot;macosx-x86_64;linux-armv7=linux-armv7”<br> <br>Karl I&#39;m interested in helping you getting this working. Could you<br>explain to me your variables (i.e., `cc_files`, `sysroot` and<br>`toolchain`) and possibly provide examples of what you populate<br>them with?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160502/9b18b0aa/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
