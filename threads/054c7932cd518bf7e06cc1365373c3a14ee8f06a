<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dd033b3ed46d65c7d7394eab52d53e6b?s=50"></div><header><strong>[Pitch] Allow use of the name &quot;default&quot; for enum cases and function names</strong> from <string>Evan Maloney</string> &lt;emaloney at gilt.com&gt;<p>June 17, 2016 at 01:00:00pm</p></header><div class="content"><p>While upgrading to Swift 3, I noticed that I had a few enums with cases named .Default that, after being converted to lowercase, now need to be rendered using the ugly .`default` notation.<br></p><p>I also noticed something similar while reading the docs for NotificationCenter (the NSNotificationCenter replacement, that is, not the NotificationCenter that governs the notification center UI); “default” can’t be used as a function name without escaping, so the declaration is:<br></p><p>class func `default`()<br></p><p>It seems to me that in the case of function names and enum cases, the parser should be able to unambiguously distinguish between the Swift keyword “default” and a user-defined name “default”, since IIRC the keyword “default” can only be used in parameter lists for generated headers and as the last item in a switch statement.<br></p><p>(Perhaps this is also another argument in favor of using “case _:” in place of “default:” in a switch statement.)<br></p><p>What do you think? Is there any reason this *wouldn’t* be feasible?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Pitch] Allow use of the name &quot;default&quot; for enum cases and function names</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>June 17, 2016 at 08:00:00pm</p></header><div class="content"><p>Isn&#39;t this already done, at least for enum cases? I&#39;m pretty sure I&#39;ve seen<br>discussion of this before, and I thought it might&#39;ve gotten implemented.<br>On Fri, Jun 17, 2016 at 1:45 PM E. Maloney via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; While upgrading to Swift 3, I noticed that I had a few enums with cases<br>&gt; named .Default that, after being converted to lowercase, now need to be<br>&gt; rendered using the ugly .`default` notation.<br>&gt;<br>&gt; I also noticed something similar while reading the docs for<br>&gt; NotificationCenter (the NSNotificationCenter replacement, that is, not the<br>&gt; NotificationCenter that governs the notification center UI); “default”<br>&gt; can’t be used as a function name without escaping, so the declaration is:<br>&gt;<br>&gt; class func `default`()<br>&gt;<br>&gt; It seems to me that in the case of function names and enum cases, the<br>&gt; parser should be able to unambiguously distinguish between the Swift<br>&gt; keyword “default” and a user-defined name “default”, since IIRC the keyword<br>&gt; “default” can only be used in parameter lists for generated headers and as<br>&gt; the last item in a switch statement.<br>&gt;<br>&gt; (Perhaps this is also another argument in favor of using “case _:” in<br>&gt; place of “default:” in a switch statement.)<br>&gt;<br>&gt; What do you think? Is there any reason this *wouldn’t* be feasible?<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160617/57c3fb02/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dd033b3ed46d65c7d7394eab52d53e6b?s=50"></div><header><strong>[Pitch] Allow use of the name &quot;default&quot; for enum cases and function names</strong> from <string>Evan Maloney</string> &lt;emaloney at gilt.com&gt;<p>June 17, 2016 at 02:00:00pm</p></header><div class="content"><p>It looks like it’s not-quite-done for enum cases in Xcode 8: You can’t declare an enum with a case named “default” without escaping the name. However, it looks like you can refer to an enum case named “default” using simply “.default”, which I didn’t realize. (I had mistakenly assumed the escaping rule would be consistent between the enum declaration and the use-site. Silly me.)<br></p><p>Either way, it would be great if you could use “default” as a name universally, especially since it’s a pretty common name to want to use.<br></p><p><br>&gt; On Jun 17, 2016, at 1:50 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt; Isn&#39;t this already done, at least for enum cases? I&#39;m pretty sure I&#39;ve seen discussion of this before, and I thought it might&#39;ve gotten implemented.<br>&gt; On Fri, Jun 17, 2016 at 1:45 PM E. Maloney via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; While upgrading to Swift 3, I noticed that I had a few enums with cases named .Default that, after being converted to lowercase, now need to be rendered using the ugly .`default` notation.<br>&gt; <br>&gt; I also noticed something similar while reading the docs for NotificationCenter (the NSNotificationCenter replacement, that is, not the NotificationCenter that governs the notification center UI); “default” can’t be used as a function name without escaping, so the declaration is:<br>&gt; <br>&gt; class func `default`()<br>&gt; <br>&gt; It seems to me that in the case of function names and enum cases, the parser should be able to unambiguously distinguish between the Swift keyword “default” and a user-defined name “default”, since IIRC the keyword “default” can only be used in parameter lists for generated headers and as the last item in a switch statement.<br>&gt; <br>&gt; (Perhaps this is also another argument in favor of using “case _:” in place of “default:” in a switch statement.)<br>&gt; <br>&gt; What do you think? Is there any reason this *wouldn’t* be feasible?<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Allow use of the name &quot;default&quot; for enum cases and function names</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 17, 2016 at 10:00:00pm</p></header><div class="content"><p>Right. I don&#39;t think there&#39;s any plan currently to allow enum case<br>declarations of reserved keywords without backticks. The reasoning, IIUC,<br>was that use sites were far more common and in that context cases could be<br>distinguished by the leading dot. By contrast, declarations are made only<br>once.<br></p><p>FWIW, this is implemented for all keywords and not just `default`, so<br>`.class` or even `.case` should work right now too. It seemed like the core<br>team wanted general solutions that can be implemented for all keywords, and<br>a general solution for declaring enum cases without backticks is probably<br>not possible, I think?<br>On Fri, Jun 17, 2016 at 16:57 E. Maloney via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; It looks like it’s not-quite-done for enum cases in Xcode 8: You can’t<br>&gt; declare an enum with a case named “default” without escaping the name.<br>&gt; However, it looks like you can refer to an enum case named “default” using<br>&gt; simply “.default”, which I didn’t realize. (I had mistakenly assumed the<br>&gt; escaping rule would be consistent between the enum declaration and the<br>&gt; use-site. Silly me.)<br>&gt;<br>&gt; Either way, it would be great if you could use “default” as a name<br>&gt; universally, especially since it’s a pretty common name to want to use.<br>&gt;<br>&gt;<br>&gt; &gt; On Jun 17, 2016, at 1:50 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;<br>&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Isn&#39;t this already done, at least for enum cases? I&#39;m pretty sure I&#39;ve<br>&gt; seen discussion of this before, and I thought it might&#39;ve gotten<br>&gt; implemented.<br>&gt; &gt; On Fri, Jun 17, 2016 at 1:45 PM E. Maloney via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; While upgrading to Swift 3, I noticed that I had a few enums with cases<br>&gt; named .Default that, after being converted to lowercase, now need to be<br>&gt; rendered using the ugly .`default` notation.<br>&gt; &gt;<br>&gt; &gt; I also noticed something similar while reading the docs for<br>&gt; NotificationCenter (the NSNotificationCenter replacement, that is, not the<br>&gt; NotificationCenter that governs the notification center UI); “default”<br>&gt; can’t be used as a function name without escaping, so the declaration is:<br>&gt; &gt;<br>&gt; &gt; class func `default`()<br>&gt; &gt;<br>&gt; &gt; It seems to me that in the case of function names and enum cases, the<br>&gt; parser should be able to unambiguously distinguish between the Swift<br>&gt; keyword “default” and a user-defined name “default”, since IIRC the keyword<br>&gt; “default” can only be used in parameter lists for generated headers and as<br>&gt; the last item in a switch statement.<br>&gt; &gt;<br>&gt; &gt; (Perhaps this is also another argument in favor of using “case _:” in<br>&gt; place of “default:” in a switch statement.)<br>&gt; &gt;<br>&gt; &gt; What do you think? Is there any reason this *wouldn’t* be feasible?<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160617/d0a91cfa/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dd033b3ed46d65c7d7394eab52d53e6b?s=50"></div><header><strong>[Pitch] Allow use of the name &quot;default&quot; for enum cases and function names</strong> from <string>Evan Maloney</string> &lt;emaloney at gilt.com&gt;<p>June 17, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Jun 17, 2016, at 3:07 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; Right. I don&#39;t think there&#39;s any plan currently to allow enum case declarations of reserved keywords without backticks. The reasoning, IIUC, was that use sites were far more common and in that context cases could be distinguished by the leading dot. By contrast, declarations are made only once.<br>&gt; <br>&gt; FWIW, this is implemented for all keywords and not just `default`, so `.class` or even `.case` should work right now too. It seemed like the core team wanted general solutions that can be implemented for all keywords, and a general solution for declaring enum cases without backticks is probably not possible, I think?<br></p><p>I still don’t see why not. What could possibly come after the ‘case’ in an enum declaration other than the name of the enum case itself?<br></p><p>To my knowledge, the only modifier of an enum case is the “indirect” modifier, but that always comes *before* the “case” keyword, so there’s no ambiguity there.<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e910871dda004717de19e83626308b5a?s=50"></div><header><strong>[Pitch] Allow use of the name &quot;default&quot; for enum cases and function names</strong> from <string>Tony Allevato</string> &lt;allevato at google.com&gt;<p>June 17, 2016 at 08:00:00pm</p></header><div class="content"><p>Agreed, it sounds like default should be treated as a contextual keyword in<br>this case.<br></p><p>It never even occurred to me that &quot;case _:&quot; would work as a replacement for<br>default, but it does even today—and now that I&#39;ve seen it, it makes total<br>sense. I could definitely get behind a proposal to remove &quot;default&quot; as a<br>keyword from the language entirely in favor of that. It blends well with<br>other pattern matching. The only concern I would have would be about<br>discoverability, but it would be easy to have the compiler emit an error<br>when it sees default in a switch: &quot;default is unsupported; use case _<br>instead.&quot;<br></p><p><br>On Fri, Jun 17, 2016 at 1:45 PM E. Maloney via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; While upgrading to Swift 3, I noticed that I had a few enums with cases<br>&gt; named .Default that, after being converted to lowercase, now need to be<br>&gt; rendered using the ugly .`default` notation.<br>&gt;<br>&gt; I also noticed something similar while reading the docs for<br>&gt; NotificationCenter (the NSNotificationCenter replacement, that is, not the<br>&gt; NotificationCenter that governs the notification center UI); “default”<br>&gt; can’t be used as a function name without escaping, so the declaration is:<br>&gt;<br>&gt; class func `default`()<br>&gt;<br>&gt; It seems to me that in the case of function names and enum cases, the<br>&gt; parser should be able to unambiguously distinguish between the Swift<br>&gt; keyword “default” and a user-defined name “default”, since IIRC the keyword<br>&gt; “default” can only be used in parameter lists for generated headers and as<br>&gt; the last item in a switch statement.<br>&gt;<br>&gt; (Perhaps this is also another argument in favor of using “case _:” in<br>&gt; place of “default:” in a switch statement.)<br>&gt;<br>&gt; What do you think? Is there any reason this *wouldn’t* be feasible?<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160617/5f20e18b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Allow use of the name &quot;default&quot; for enum cases and function names</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 17, 2016 at 09:00:00pm</p></header><div class="content"><p>Replacing default with case _ is a commonly rejected proposal, and I do<br>believe it&#39;s been discussed since the lowercasing of enum cases.<br></p><p>On Fri, Jun 17, 2016 at 15:55 Tony Allevato via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Agreed, it sounds like default should be treated as a contextual keyword<br>&gt; in this case.<br>&gt;<br>&gt; It never even occurred to me that &quot;case _:&quot; would work as a replacement<br>&gt; for default, but it does even today—and now that I&#39;ve seen it, it makes<br>&gt; total sense. I could definitely get behind a proposal to remove &quot;default&quot;<br>&gt; as a keyword from the language entirely in favor of that. It blends well<br>&gt; with other pattern matching. The only concern I would have would be about<br>&gt; discoverability, but it would be easy to have the compiler emit an error<br>&gt; when it sees default in a switch: &quot;default is unsupported; use case _<br>&gt; instead.&quot;<br>&gt;<br>&gt;<br>&gt; On Fri, Jun 17, 2016 at 1:45 PM E. Maloney via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; While upgrading to Swift 3, I noticed that I had a few enums with cases<br>&gt;&gt; named .Default that, after being converted to lowercase, now need to be<br>&gt;&gt; rendered using the ugly .`default` notation.<br>&gt;&gt;<br>&gt;&gt; I also noticed something similar while reading the docs for<br>&gt;&gt; NotificationCenter (the NSNotificationCenter replacement, that is, not the<br>&gt;&gt; NotificationCenter that governs the notification center UI); “default”<br>&gt;&gt; can’t be used as a function name without escaping, so the declaration is:<br>&gt;&gt;<br>&gt;&gt; class func `default`()<br>&gt;&gt;<br>&gt;&gt; It seems to me that in the case of function names and enum cases, the<br>&gt;&gt; parser should be able to unambiguously distinguish between the Swift<br>&gt;&gt; keyword “default” and a user-defined name “default”, since IIRC the keyword<br>&gt;&gt; “default” can only be used in parameter lists for generated headers and as<br>&gt;&gt; the last item in a switch statement.<br>&gt;&gt;<br>&gt;&gt; (Perhaps this is also another argument in favor of using “case _:” in<br>&gt;&gt; place of “default:” in a switch statement.)<br>&gt;&gt;<br>&gt;&gt; What do you think? Is there any reason this *wouldn’t* be feasible?<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160617/03d33ae1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e910871dda004717de19e83626308b5a?s=50"></div><header><strong>[Pitch] Allow use of the name &quot;default&quot; for enum cases and function names</strong> from <string>Tony Allevato</string> &lt;allevato at google.com&gt;<p>June 17, 2016 at 09:00:00pm</p></header><div class="content"><p>Thanks to you (and Ben Remmington on another thread) for pointing that<br>out—it&#39;s been a while since I read that doc so I&#39;ve forgotten specific<br>cases :)<br></p><p>I&#39;m lukewarm about C family precedent necessarily constraining us in a<br>world where one compiler diagnostic can teach developers the Swift way of<br>doing it, but I don&#39;t want to rehash long-settled debates in the face of<br>more important changes.<br></p><p>On Fri, Jun 17, 2016 at 2:31 PM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br></p><p>&gt; Replacing default with case _ is a commonly rejected proposal, and I do<br>&gt; believe it&#39;s been discussed since the lowercasing of enum cases.<br>&gt;<br>&gt; On Fri, Jun 17, 2016 at 15:55 Tony Allevato via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Agreed, it sounds like default should be treated as a contextual keyword<br>&gt;&gt; in this case.<br>&gt;&gt;<br>&gt;&gt; It never even occurred to me that &quot;case _:&quot; would work as a replacement<br>&gt;&gt; for default, but it does even today—and now that I&#39;ve seen it, it makes<br>&gt;&gt; total sense. I could definitely get behind a proposal to remove &quot;default&quot;<br>&gt;&gt; as a keyword from the language entirely in favor of that. It blends well<br>&gt;&gt; with other pattern matching. The only concern I would have would be about<br>&gt;&gt; discoverability, but it would be easy to have the compiler emit an error<br>&gt;&gt; when it sees default in a switch: &quot;default is unsupported; use case _<br>&gt;&gt; instead.&quot;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Fri, Jun 17, 2016 at 1:45 PM E. Maloney via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; While upgrading to Swift 3, I noticed that I had a few enums with cases<br>&gt;&gt;&gt; named .Default that, after being converted to lowercase, now need to be<br>&gt;&gt;&gt; rendered using the ugly .`default` notation.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I also noticed something similar while reading the docs for<br>&gt;&gt;&gt; NotificationCenter (the NSNotificationCenter replacement, that is, not the<br>&gt;&gt;&gt; NotificationCenter that governs the notification center UI); “default”<br>&gt;&gt;&gt; can’t be used as a function name without escaping, so the declaration is:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; class func `default`()<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; It seems to me that in the case of function names and enum cases, the<br>&gt;&gt;&gt; parser should be able to unambiguously distinguish between the Swift<br>&gt;&gt;&gt; keyword “default” and a user-defined name “default”, since IIRC the keyword<br>&gt;&gt;&gt; “default” can only be used in parameter lists for generated headers and as<br>&gt;&gt;&gt; the last item in a switch statement.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; (Perhaps this is also another argument in favor of using “case _:” in<br>&gt;&gt;&gt; place of “default:” in a switch statement.)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; What do you think? Is there any reason this *wouldn’t* be feasible?<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160617/03269475/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Pitch] Allow use of the name &quot;default&quot; for enum cases and function names</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June 20, 2016 at 04:00:00pm</p></header><div class="content"><p>Also didn&#39;t know `case _: ` works as `default`. So we have 2 things that do <br>exactly the same. Agree, that leaving `case _:` and removing &#39;default&#39; will <br>increase the consistency of the language. I even think `case _:` is better <br>than `default` in any way. Don&#39;t agree that this case confuse anybody : <br>each language has its own special syntax features. If one will teach Swift <br>as first language - no problems at all, `case _: ` construction is very <br>simple and understandable. If one will teach Swift as next language, so <br>this person is professional enough to use `case _:` in Swift instead of <br>`default`, don&#39;t see any tragedy here.<br>But yes, I see that this is &quot;commonly rejected proposal&quot;, so OK.<br></p><p>On 17.06.2016 23:54, Tony Allevato via swift-evolution wrote:<br>&gt; Agreed, it sounds like default should be treated as a contextual keyword in<br>&gt; this case.<br>&gt;<br>&gt; It never even occurred to me that &quot;case _:&quot; would work as a replacement for<br>&gt; default, but it does even today—and now that I&#39;ve seen it, it makes total<br>&gt; sense. I could definitely get behind a proposal to remove &quot;default&quot; as a<br>&gt; keyword from the language entirely in favor of that. It blends well with<br>&gt; other pattern matching. The only concern I would have would be about<br>&gt; discoverability, but it would be easy to have the compiler emit an error<br>&gt; when it sees default in a switch: &quot;default is unsupported; use case _ instead.&quot;<br>&gt;<br>&gt;<br>&gt; On Fri, Jun 17, 2016 at 1:45 PM E. Maloney via swift-evolution<br>&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;<br>&gt;     While upgrading to Swift 3, I noticed that I had a few enums with cases<br>&gt;     named .Default that, after being converted to lowercase, now need to be<br>&gt;     rendered using the ugly .`default` notation.<br>&gt;<br>&gt;     I also noticed something similar while reading the docs for<br>&gt;     NotificationCenter (the NSNotificationCenter replacement, that is, not<br>&gt;     the NotificationCenter that governs the notification center UI);<br>&gt;     “default” can’t be used as a function name without escaping, so the<br>&gt;     declaration is:<br>&gt;<br>&gt;     class func `default`()<br>&gt;<br>&gt;     It seems to me that in the case of function names and enum cases, the<br>&gt;     parser should be able to unambiguously distinguish between the Swift<br>&gt;     keyword “default” and a user-defined name “default”, since IIRC the<br>&gt;     keyword “default” can only be used in parameter lists for generated<br>&gt;     headers and as the last item in a switch statement.<br>&gt;<br>&gt;     (Perhaps this is also another argument in favor of using “case _:” in<br>&gt;     place of “default:” in a switch statement.)<br>&gt;<br>&gt;     What do you think? Is there any reason this *wouldn’t* be feasible?<br>&gt;     _______________________________________________<br>&gt;     swift-evolution mailing list<br>&gt;     swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
