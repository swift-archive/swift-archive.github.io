<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7321934b88ca8da079d7b89926501a9c?s=50"></div><header><strong>An OpenGL math library in pure Swift</strong> from <string>David Turnbull</string> &lt;dturnbull at gmail.com&gt;<p>January  4, 2016 at 07:00:00pm</p></header><div class="content"><p>I&#39;ve been working on a math library for SwiftGL. It&#39;s looking good.<br>Vector2, Vector3, Vector4, Matrix2x2, Matrix3x3, Matrix4x4 are implemented<br>with all arithmetic. You can even swizzle just like GLSL.<br></p><p>var myVec = vec4(1, 2, 3, 4)<br></p><p>myVec.ab = vec2(99, 98)<br></p><p>print(myVec) //=&gt; (1, 2, 98, 99)<br></p><p>There&#39;s still a lot to do. I hope to have feature parity with GLSL done<br>this week. But it&#39;s ready to set free and get feedback.<br></p><p>https://github.com/AE9RB/SwiftGL<br></p><p>And a couple questions. Is there any way to make import SwiftGL.Math work?<br>Note the dot. Also, is there anything reasonable I can do to improve the<br>compile time? 3.5 minutes for 2000 lines of code can&#39;t be right.<br></p><p>-David &quot;Expression was too complex to be solved&quot; Turnbull<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160104/38f04c8b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8dfc6932943f38e7a7de48be3194f13c?s=50"></div><header><strong>An OpenGL math library in pure Swift</strong> from <string>Michael Ilseman</string> &lt;milseman at apple.com&gt;<p>January  5, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Jan 4, 2016, at 7:11 PM, David Turnbull via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;ve been working on a math library for SwiftGL. It&#39;s looking good. Vector2, Vector3, Vector4, Matrix2x2, Matrix3x3, Matrix4x4 are implemented with all arithmetic. You can even swizzle just like GLSL.<br>&gt; <br>&gt; var myVec = vec4(1, 2, 3, 4)<br>&gt; myVec.ab = vec2(99, 98)<br>&gt; print(myVec) //=&gt; (1, 2, 98, 99)<br>&gt; <br></p><p>This is pretty cool!<br></p><p>&gt; There&#39;s still a lot to do. I hope to have feature parity with GLSL done this week. But it&#39;s ready to set free and get feedback.<br>&gt; <br></p><p>What all is mean by “feature parity” with GLSL, given that GLSL is for authoring shaders intended to be ran on device (texture units, interpolation, fuzzy floating point math semantics, etc) and your library presumably is running on host? Do you plan on synthesizing shaders (warning: this may be a little bit tricker than it seems)?<br></p><p>&gt; https://github.com/AE9RB/SwiftGL &lt;https://github.com/AE9RB/SwiftGL&gt;<br>&gt; <br>&gt; And a couple questions. Is there any way to make import SwiftGL.Math work? Note the dot. Also, is there anything reasonable I can do to improve the compile time? 3.5 minutes for 2000 lines of code can&#39;t be right.<br>&gt; <br>&gt; -David &quot;Expression was too complex to be solved&quot; Turnbull<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160105/18d41dad/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7321934b88ca8da079d7b89926501a9c?s=50"></div><header><strong>An OpenGL math library in pure Swift</strong> from <string>David Turnbull</string> &lt;dturnbull at gmail.com&gt;<p>January  5, 2016 at 01:00:00pm</p></header><div class="content"><p>On Tue, Jan 5, 2016 at 8:27 AM, Michael Ilseman &lt;milseman at apple.com&gt; wrote:<br></p><p>&gt; What all is mean by “feature parity” with GLSL<br>&gt;<br></p><p>The functions in GLSL like normalize(), cross(), dot(), distance(). The<br>idea is that you shouldn&#39;t have to remember two APIs to be productive. Like<br>what glm does for C++.<br></p><p>-david<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160105/fc07afe6/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9b7c9b023237138ccb67df539f11b50?s=50"></div><header><strong>An OpenGL math library in pure Swift</strong> from <string>Stephen Canon</string> &lt;scanon at apple.com&gt;<p>January  5, 2016 at 11:00:00am</p></header><div class="content"><p>Hey David —<br></p><p>FYI essentially all of this stuff is already present in the simd module (stdlib/public/SDK/simd/simd.swift.gyb or ‘import simd&#39;), albeit without nice generics, and with some different stylistic choices because simd is at present a straight Swift port of a subset of the simd C/Obj-C/C++ library on OS X and iOS (the most important distinction is that the vector types are compatible with clang extended vectors in C languages).<br></p><p>Making the simd module more “swifty” is something that will need to happen eventually, and there’s a lot of other opportunities for other improvements, but you should be aware that it’s available.<br></p><p>– Steve<br></p><p>&gt; On Jan 4, 2016, at 10:11 PM, David Turnbull via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;ve been working on a math library for SwiftGL. It&#39;s looking good. Vector2, Vector3, Vector4, Matrix2x2, Matrix3x3, Matrix4x4 are implemented with all arithmetic. You can even swizzle just like GLSL.<br>&gt; <br>&gt; var myVec = vec4(1, 2, 3, 4)<br>&gt; myVec.ab = vec2(99, 98)<br>&gt; print(myVec) //=&gt; (1, 2, 98, 99)<br>&gt; <br>&gt; There&#39;s still a lot to do. I hope to have feature parity with GLSL done this week. But it&#39;s ready to set free and get feedback.<br>&gt; <br>&gt; https://github.com/AE9RB/SwiftGL &lt;https://github.com/AE9RB/SwiftGL&gt;<br>&gt; <br>&gt; And a couple questions. Is there any way to make import SwiftGL.Math work? Note the dot. Also, is there anything reasonable I can do to improve the compile time? 3.5 minutes for 2000 lines of code can&#39;t be right.<br>&gt; <br>&gt; -David &quot;Expression was too complex to be solved&quot; Turnbull<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160105/e7c237e7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06edc9bfd03c4e42da4e6b2704492487?s=50"></div><header><strong>An OpenGL math library in pure Swift</strong> from <string>Volodymyr Boichentsov</string> &lt;sakristx at gmail.com&gt;<p>January  5, 2016 at 07:00:00pm</p></header><div class="content"><p>Any plans to make simd open-source? or available for Linux?<br></p><p>Best Regards,<br>Volodymyr Boichentsov<br></p><p><br></p><p><br></p><p>&gt; On 5 Jan 2016, at 16:59, Stephen Canon via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hey David —<br>&gt; <br>&gt; FYI essentially all of this stuff is already present in the simd module (stdlib/public/SDK/simd/simd.swift.gyb or ‘import simd&#39;), albeit without nice generics, and with some different stylistic choices because simd is at present a straight Swift port of a subset of the simd C/Obj-C/C++ library on OS X and iOS (the most important distinction is that the vector types are compatible with clang extended vectors in C languages).<br>&gt; <br>&gt; Making the simd module more “swifty” is something that will need to happen eventually, and there’s a lot of other opportunities for other improvements, but you should be aware that it’s available.<br>&gt; <br>&gt; – Steve<br>&gt; <br>&gt;&gt; On Jan 4, 2016, at 10:11 PM, David Turnbull via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I&#39;ve been working on a math library for SwiftGL. It&#39;s looking good. Vector2, Vector3, Vector4, Matrix2x2, Matrix3x3, Matrix4x4 are implemented with all arithmetic. You can even swizzle just like GLSL.<br>&gt;&gt; <br>&gt;&gt; var myVec = vec4(1, 2, 3, 4)<br>&gt;&gt; myVec.ab = vec2(99, 98)<br>&gt;&gt; print(myVec) //=&gt; (1, 2, 98, 99)<br>&gt;&gt; <br>&gt;&gt; There&#39;s still a lot to do. I hope to have feature parity with GLSL done this week. But it&#39;s ready to set free and get feedback.<br>&gt;&gt; <br>&gt;&gt; https://github.com/AE9RB/SwiftGL &lt;https://github.com/AE9RB/SwiftGL&gt;<br>&gt;&gt; <br>&gt;&gt; And a couple questions. Is there any way to make import SwiftGL.Math work? Note the dot. Also, is there anything reasonable I can do to improve the compile time? 3.5 minutes for 2000 lines of code can&#39;t be right.<br>&gt;&gt; <br>&gt;&gt; -David &quot;Expression was too complex to be solved&quot; Turnbull<br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160105/74572cf4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9b7c9b023237138ccb67df539f11b50?s=50"></div><header><strong>An OpenGL math library in pure Swift</strong> from <string>Stephen Canon</string> &lt;scanon at apple.com&gt;<p>January  5, 2016 at 04:00:00pm</p></header><div class="content"><p>There are three pieces of the simd module on OS X / iOS.<br></p><p>- There’s the SDK overlay, which is part of Swift.<br>- There are C/C++ headers /usr/include/simd/*.h, which comprise the bulk of the C implementation.<br>- A small number of routines require external calls, whose implementations are part of libSystem (to clarify for Linux folks, libSystem is a dynamic library that contains all the low-level runtime stuff: libc, libm, compiler-rt, etc).<br></p><p>The first is part of the Swift open-source project; the other two are not, so the simd interfaces are not available in open-source Swift.  However, only a small subset of the Swift operations depend on the C/C++ headers and library for their implementation; most of the implementations for Swift are in the SDK overlay itself.  It would be easy for someone to provide implementations for the remaining operations (inverse and determinant, IIRC) if they were so inclined.  With that done, I don’t believe there would be any other obstacles to the use of the SDK overlay as a native Swift module.<br></p><p>– Steve<br></p><p>If you’re asking if the C library that Apple ships will be open-sourced, that’s an Apple product-planning question that’s out of scope for this list.  We (Apple) will definitely take such a request into account, but please file a formal request (Radar) at bugreporter.apple.com.  Thanks!<br></p><p>&gt; On Jan 5, 2016, at 2:45 PM, Volodymyr Boichentsov &lt;sakristx at gmail.com&gt; wrote:<br>&gt; <br>&gt; Any plans to make simd open-source? or available for Linux?<br>&gt; <br>&gt; Best Regards,<br>&gt; Volodymyr Boichentsov<br>&gt; <br>&gt;&gt; On 5 Jan 2016, at 16:59, Stephen Canon via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hey David —<br>&gt;&gt; <br>&gt;&gt; FYI essentially all of this stuff is already present in the simd module (stdlib/public/SDK/simd/simd.swift.gyb or ‘import simd&#39;), albeit without nice generics, and with some different stylistic choices because simd is at present a straight Swift port of a subset of the simd C/Obj-C/C++ library on OS X and iOS (the most important distinction is that the vector types are compatible with clang extended vectors in C languages).<br>&gt;&gt; <br>&gt;&gt; Making the simd module more “swifty” is something that will need to happen eventually, and there’s a lot of other opportunities for other improvements, but you should be aware that it’s available.<br>&gt;&gt; <br>&gt;&gt; – Steve<br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 4, 2016, at 10:11 PM, David Turnbull via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;ve been working on a math library for SwiftGL. It&#39;s looking good. Vector2, Vector3, Vector4, Matrix2x2, Matrix3x3, Matrix4x4 are implemented with all arithmetic. You can even swizzle just like GLSL.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; var myVec = vec4(1, 2, 3, 4)<br>&gt;&gt;&gt; myVec.ab = vec2(99, 98)<br>&gt;&gt;&gt; print(myVec) //=&gt; (1, 2, 98, 99)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; There&#39;s still a lot to do. I hope to have feature parity with GLSL done this week. But it&#39;s ready to set free and get feedback.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/AE9RB/SwiftGL &lt;https://github.com/AE9RB/SwiftGL&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; And a couple questions. Is there any way to make import SwiftGL.Math work? Note the dot. Also, is there anything reasonable I can do to improve the compile time? 3.5 minutes for 2000 lines of code can&#39;t be right.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -David &quot;Expression was too complex to be solved&quot; Turnbull<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160105/b294641d/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7321934b88ca8da079d7b89926501a9c?s=50"></div><header><strong>An OpenGL math library in pure Swift</strong> from <string>David Turnbull</string> &lt;dturnbull at gmail.com&gt;<p>January  5, 2016 at 12:00:00pm</p></header><div class="content"><p>On Tue, Jan 5, 2016 at 8:59 AM, Stephen Canon wrote:<br></p><p>&gt;<br>&gt; FYI essentially all of this stuff is already present in the simd module<br>&gt;<br></p><p>Yeah, but...<br></p><p>  1&gt; import simd<br>repl.swift:1:8: error: no such module &#39;simd&#39;<br></p><p>SwiftGLmath works today for everyone. It&#39;s not as fast as packed SIMD but<br>it&#39;s still really fast. As fast as C.<br></p><p>Finishing features is my priority right now. But perhaps someone else wants<br>to &quot;ifdef&quot; the simd module for Apple platforms.<br></p><p>-david<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160105/c7b1bdef/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b660eecceda60138f137d353b8289925?s=50"></div><header><strong>An OpenGL math library in pure Swift</strong> from <string>Janosch Hildebrand</string> &lt;jnosh at jnosh.com&gt;<p>January  6, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; On 05 Jan 2016, at 04:11, David Turnbull via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;ve been working on a math library for SwiftGL. It&#39;s looking good. Vector2, Vector3, Vector4, Matrix2x2, Matrix3x3, Matrix4x4 are implemented with all arithmetic. You can even swizzle just like GLSL.<br>&gt; <br>&gt; var myVec = vec4(1, 2, 3, 4)<br>&gt; myVec.ab = vec2(99, 98)<br>&gt; print(myVec) //=&gt; (1, 2, 98, 99)<br>&gt; <br>&gt; There&#39;s still a lot to do. I hope to have feature parity with GLSL done this week. But it&#39;s ready to set free and get feedback.<br>&gt; <br>&gt; https://github.com/AE9RB/SwiftGL &lt;https://github.com/AE9RB/SwiftGL&gt;<br>&gt; <br>&gt; And a couple questions. Is there any way to make import SwiftGL.Math work? Note the dot. Also, is there anything reasonable I can do to improve the compile time? 3.5 minutes for 2000 lines of code can&#39;t be right.<br></p><p>To find out which parts of your code are causing issues add `-Xfrontend -debug-time-function-bodies` in &quot;Other Swift Flags&quot;.<br>When building Xcode will print the compile times of functions in the build log.<br></p><p>The main culprits seem to be the `*`, `inverse` and `determinant` functions of `Matrix3x3` and `Matrix4x4` where type inference probably runs amok. Breaking these calculation up into smaller statements should drastically reduce the compile times.<br></p><p>&gt; -David &quot;Expression was too complex to be solved&quot; Turnbull<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>- Janosch<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160106/b7b0dfa3/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
