<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c8f823910f180809a2420a8be5460be3?s=50"></div><header><strong>[Review] SE-0088: Modernize libdispatch for Swift 3 naming conventions</strong> from <string>Dan Appel</string> &lt;dan.appel00 at gmail.com&gt;<p>May 12, 2016 at 01:00:00am</p></header><div class="content"><p>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0088: Modernize libdispatch for Swift 3 naming conventions&quot; begins now and runs through May 17. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0088-libdispatch-for-swift3.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; * What is your evaluation of the proposal?<br>&gt; * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt; * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; <br></p><p><br>Ok, I have mixed feeling about this proposal.<br></p><p>First, this is a huge breaking change, and it doesn’t really have to be one. The current SPM convention is to prefix C libraries with Lib. Following this convention, Dispatch (which is the C version) would be renamed to LibDispatch, and this new wrapper library would be called just Dispatch. With this setup, the old C api would still be there (under the module LibDispatch), which makes migration much easier. In the proposal, this issue is not addressed at all and it even says that all code using libdispatch would be affected. As it stands, that is not ok.<br></p><p>On a different issue in this proposal: I think that translating the C api into Swift ‘automagically’ is the wrong approach. There are many libraries right now that wrap the current libdispatch functions and provide a similar api, and I don’t think there’s any reason why this shouldn’t be done the same way. I would also argue that doing this links the Swift language to libdispatch in a way that isn’t necessary. For example, there is a library called Venice &lt;https://github.com/VeniceX/Venice&gt; which provides CSP (go-style concurrency) for Swift by wrapping a fork of the C library libmill, and it doesn’t do any magic importing of any sort. I don’t see a reason why libdispatch shouldn’t take the same approach.<br></p><p>Overall, I think the idea is good but some of the details are really lacking. As it stands, I would vote to reject this proposal and request revision, or reject it outright and suggest to use third-party wrappers around libdispatch (like the community is already doing).<br></p><p>Dan Appel<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160512/c346deef/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f98dc2a5a610100f8528eeeb2ff3c282?s=50"></div><header><strong>[Review] SE-0088: Modernize libdispatch for Swift 3 naming conventions</strong> from <string>Andrew Brown</string> &lt;a.br at me.com&gt;<p>May 12, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On First, this is a huge breaking change, and it doesn’t really have to be one. The current SPM convention is to prefix C libraries with Lib. Following this convention, Dispatch (which is the C version) would be renamed to LibDispatch, and this new wrapper library would be called just Dispatch. With this setup, the old C api would still be there (under the module LibDispatch), which makes migration much easier. In the proposal, this issue is not addressed at all and it even says that all code using libdispatch would be affected. As it stands, that is not ok.<br></p><p>Separating existing dispatch from a new SwiftDispatch is a great idea.  It would give the opportunity to really spend time working on the right approach for concurrency in swift without affecting existing production code and the hundreds of dispatch wrappers out there.<br></p><p>While we&#39;re on the subject: Dispatch Queues are &#39;queues&#39; ... Isn&#39;t the right verb append (for asynchronous dispatch)?<br></p><p>DispatchQueue.main.append {<br>  print(&quot;Hello Swift&quot;)<br>}<br></p><p>After all, asyncDispatch or dispatchAsync imply you are dispatching a synchronously - which you are not.  The dispatch (sending for execution) is always synchronous, it&#39;s the execution which is asynchronous.<br></p><p>DispatchQueue.main.dispatchForAsynchronousExecution {<br>  print(&quot;Help, I have repetitive strain injury&quot;)<br>}<br></p><p>Just my 2¢<br>Andrew.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160512/8ff22a02/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f98dc2a5a610100f8528eeeb2ff3c282?s=50"></div><header><strong>[Review] SE-0088: Modernize libdispatch for Swift 3 naming conventions</strong> from <string>Andrew Brown</string> &lt;a.br at me.com&gt;<p>May 12, 2016 at 04:00:00pm</p></header><div class="content"><p>Apologies all, my iPad and I are not getting on today !<br></p><p>&gt; On 12 May 2016, at 16:33, Andrew Brown via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; On First, this is a huge breaking change, and it doesn’t really have to be one. The current SPM convention is to prefix C libraries with Lib. Following this convention, Dispatch (which is the C version) would be renamed to LibDispatch, and this new wrapper library would be called just Dispatch. With this setup, the old C api would still be there (under the module LibDispatch), which makes migration much easier. In the proposal, this issue is not addressed at all and it even says that all code using libdispatch would be affected. As it stands, that is not ok.<br></p><p><br>&gt; Separating existing dispatch from a new SwiftDispatch is a great idea.  It would give the opportunity to really spend time working on the right approach for concurrency in swift without affecting existing production code and the hundreds of dispatch wrappers out there.<br>&gt; <br>&gt; While we&#39;re on the subject: Dispatch Queues are &#39;queues&#39; ... Isn&#39;t the right verb append (for asynchronous dispatch)?<br>&gt; <br>&gt; DispatchQueue.main.append {<br>&gt;   print(&quot;Hello Swift&quot;)<br>&gt; }<br>&gt; <br>&gt; After all, asyncDispatch or dispatchAsync imply you are dispatching a synchronously - which you are not.  The dispatch (sending for execution) is always synchronous, it&#39;s the execution which is asynchronous.<br>&gt; <br>&gt; DispatchQueue.main.dispatchForAsynchronousExecution {<br>&gt;   print(&quot;Help, I have repetitive strain injury&quot;)<br>&gt; }<br>&gt; <br>&gt; Just my 2¢<br>&gt; Andrew.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160512/78720f24/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
