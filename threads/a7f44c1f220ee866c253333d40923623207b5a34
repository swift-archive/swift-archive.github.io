<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Pitch] Unify joined(separator:) and flatten()</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>July 21, 2016 at 06:00:00pm</p></header><div class="content"><p>In the swift-lang Slack channel, a few of us were discussing<br>joined(separator:) and realized that flatten() does almost exactly the same<br>thing.<br></p><p>Is there interest in renaming flatten() to joined()?  Since joined takes a<br>separator that&#39;s any Sequence, we can&#39;t have a default value for the<br>separator parameter, but we can have a variant of joined() with no<br>arguments.<br></p><p>Jacob<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160721/a7f45a34/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdd257c9369fb68e1d06923d10ff789e?s=50"></div><header><strong>[Pitch] Unify joined(separator:) and flatten()</strong> from <string>Ben Rimmington</string> &lt;me at benrimmington.com&gt;<p>July 22, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On 22 Jul 2016, at 02:46, Jacob Bandes-Storch wrote:<br>&gt; <br>&gt; In the swift-lang Slack channel, a few of us were discussing joined(separator:) and realized that flatten() does almost exactly the same thing.<br>&gt; <br>&gt; Is there interest in renaming flatten() to joined()?  Since joined takes a separator that&#39;s any Sequence, we can&#39;t have a default value for the separator parameter, but we can have a variant of joined() with no arguments.<br></p><p>I&#39;d like default separators for the joined() methods.<br></p><p>&lt;https://bugs.swift.org/browse/SR-1428&gt;<br></p><p>But renaming flatten() to joined() seems complicated.<br></p><p>&lt;https://github.com/apple/swift/blob/master/stdlib/public/core/Flatten.swift.gyb&gt;<br>&lt;https://github.com/apple/swift/blob/master/stdlib/public/core/Join.swift&gt;<br></p><p>And what would happen to the flatMap() methods? Is flatten() a term of art?<br></p><p>&lt;https://github.com/apple/swift/blob/master/stdlib/public/core/FlatMap.swift&gt;<br></p><p>-- Ben<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Pitch] Unify joined(separator:) and flatten()</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>July 22, 2016 at 12:00:00pm</p></header><div class="content"><p>On Fri, Jul 22, 2016 at 8:35 AM, Ben Rimmington &lt;me at benrimmington.com&gt;<br>wrote:<br></p><p>&gt;<br>&gt; &gt; On 22 Jul 2016, at 02:46, Jacob Bandes-Storch wrote:<br>&gt; &gt;<br>&gt; &gt; In the swift-lang Slack channel, a few of us were discussing<br>&gt; joined(separator:) and realized that flatten() does almost exactly the same<br>&gt; thing.<br>&gt; &gt;<br>&gt; &gt; Is there interest in renaming flatten() to joined()?  Since joined takes<br>&gt; a separator that&#39;s any Sequence, we can&#39;t have a default value for the<br>&gt; separator parameter, but we can have a variant of joined() with no<br>&gt; arguments.<br>&gt;<br>&gt; I&#39;d like default separators for the joined() methods.<br>&gt;<br>&gt; &lt;https://bugs.swift.org/browse/SR-1428&gt;<br>&gt;<br>&gt; But renaming flatten() to joined() seems complicated.<br>&gt;<br>&gt; &lt;<br>&gt; https://github.com/apple/swift/blob/master/stdlib/public/core/Flatten.swift.gyb<br>&gt; &gt;<br>&gt; &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/Join.swift&gt;<br>&gt;<br></p><p>What makes it seem complicated? At the very least, one could just rename<br>the flatten() function. There might also be an opportunity to combine the<br>two files and delete some code from stdlib.<br></p><p>&gt;<br>&gt; And what would happen to the flatMap() methods? Is flatten() a term of art?<br>&gt;<br>&gt; &lt;<br>&gt; https://github.com/apple/swift/blob/master/stdlib/public/core/FlatMap.swift<br>&gt; &gt;<br>&gt;<br></p><p>I&#39;d say flatMap is more a &quot;term of art&quot; than flatten. &quot;flatten&quot; just<br>describes literally what is being done. Frankly I&#39;m surprised it was never<br>named flattened(). Anyway, flatMap should stay.<br></p><p><br>&gt;<br>&gt; -- Ben<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/15eb97e0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdd257c9369fb68e1d06923d10ff789e?s=50"></div><header><strong>[Pitch] Unify joined(separator:) and flatten()</strong> from <string>Ben Rimmington</string> &lt;me at benrimmington.com&gt;<p>July 22, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On 22 Jul 2016, at 20:43, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; On Fri, Jul 22, 2016 at 8:35 AM, Ben Rimmington &lt;me at benrimmington.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On 22 Jul 2016, at 02:46, Jacob Bandes-Storch wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In the swift-lang Slack channel, a few of us were discussing joined(separator:) and realized that flatten() does almost exactly the same thing.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is there interest in renaming flatten() to joined()?  Since joined takes a separator that&#39;s any Sequence, we can&#39;t have a default value for the separator parameter, but we can have a variant of joined() with no arguments.<br>&gt;&gt; <br>&gt;&gt; I&#39;d like default separators for the joined() methods.<br>&gt;&gt; <br>&gt;&gt; &lt;https://bugs.swift.org/browse/SR-1428&gt;<br>&gt;&gt; <br>&gt;&gt; But renaming flatten() to joined() seems complicated.<br>&gt;&gt; <br>&gt;&gt; &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/Flatten.swift.gyb&gt;<br>&gt;&gt; &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/Join.swift&gt;<br>&gt; <br>&gt; What makes it seem complicated? At the very least, one could just rename the flatten() function. There might also be an opportunity to combine the two files and delete some code from stdlib.<br></p><p>There&#39;s only one joined() method (for a sequence of sequences):<br></p><p>	extension Sequence {<br>	  func joined&lt;Separator: Sequence&gt;(separator: Separator) -&gt; JoinedSequence&lt;Self&gt;<br>	}<br></p><p>There are many flatten() methods (`where` clauses omitted for brevity):<br></p><p>	extension Sequence {<br>	  func flatten() -&gt; FlattenSequence&lt;Self&gt;<br>	}<br></p><p>	extension LazySequenceProtocol {<br>	  func flatten() -&gt; LazySequence&lt;FlattenSequence&lt;Self.Elements&gt;&gt;<br>	}<br></p><p>	extension LazyCollectionProtocol {<br>	  func flatten() -&gt; LazyCollection&lt;FlattenCollection&lt;Self.Elements&gt;&gt;<br>	}<br></p><p>	extension Collection {<br>	  func flatten() -&gt; FlattenCollection&lt;Self&gt;<br>	}<br></p><p>	extension BidirectionalCollection {<br>	  func flatten() -&gt; FlattenBidirectionalCollection&lt;Self&gt;<br>	}<br></p><p>So it&#39;s not a simple one-to-one rename.<br></p><p>When there&#39;s no `separator` argument, will FlattenIterator perform better than JoinedIterator?<br></p><p>&gt;&gt; And what would happen to the flatMap() methods? Is flatten() a term of art?<br>&gt;&gt; <br>&gt;&gt; &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/FlatMap.swift&gt;<br>&gt; <br>&gt; I&#39;d say flatMap is more a &quot;term of art&quot; than flatten. &quot;flatten&quot; just describes literally what is being done. Frankly I&#39;m surprised it was never named flattened(). Anyway, flatMap should stay.<br></p><p>## Future directions<br></p><p>Will the flatMap(_:) methods also have flatMap(separator:_:) variants?<br></p><p>-- Ben<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Pitch] Unify joined(separator:) and flatten()</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>July 22, 2016 at 03:00:00pm</p></header><div class="content"><p>Here&#39;s a proposal draft. Comments welcome:<br></p><p>https://gist.github.com/jtbandes/7978dc1848f7c37eeaa8e9aba27c7325<br></p><p>On Fri, Jul 22, 2016 at 2:51 PM, Ben Rimmington &lt;me at benrimmington.com&gt;<br>wrote:<br></p><p>&gt;<br>&gt; &gt; On 22 Jul 2016, at 20:43, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;<br>&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt; On Fri, Jul 22, 2016 at 8:35 AM, Ben Rimmington &lt;me at benrimmington.com&gt;<br>&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; On 22 Jul 2016, at 02:46, Jacob Bandes-Storch wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; In the swift-lang Slack channel, a few of us were discussing<br>&gt; joined(separator:) and realized that flatten() does almost exactly the same<br>&gt; thing.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Is there interest in renaming flatten() to joined()?  Since joined<br>&gt; takes a separator that&#39;s any Sequence, we can&#39;t have a default value for<br>&gt; the separator parameter, but we can have a variant of joined() with no<br>&gt; arguments.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I&#39;d like default separators for the joined() methods.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; &lt;https://bugs.swift.org/browse/SR-1428&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; But renaming flatten() to joined() seems complicated.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; &lt;<br>&gt; https://github.com/apple/swift/blob/master/stdlib/public/core/Flatten.swift.gyb<br>&gt; &gt;<br>&gt; &gt;&gt; &lt;<br>&gt; https://github.com/apple/swift/blob/master/stdlib/public/core/Join.swift&gt;<br>&gt; &gt;<br>&gt; &gt; What makes it seem complicated? At the very least, one could just rename<br>&gt; the flatten() function. There might also be an opportunity to combine the<br>&gt; two files and delete some code from stdlib.<br>&gt;<br>&gt; There&#39;s only one joined() method (for a sequence of sequences):<br>&gt;<br>&gt;         extension Sequence {<br>&gt;           func joined&lt;Separator: Sequence&gt;(separator: Separator) -&gt;<br>&gt; JoinedSequence&lt;Self&gt;<br>&gt;         }<br>&gt;<br>&gt; There are many flatten() methods (`where` clauses omitted for brevity):<br>&gt;<br>&gt;         extension Sequence {<br>&gt;           func flatten() -&gt; FlattenSequence&lt;Self&gt;<br>&gt;         }<br>&gt;<br>&gt;         extension LazySequenceProtocol {<br>&gt;           func flatten() -&gt; LazySequence&lt;FlattenSequence&lt;Self.Elements&gt;&gt;<br>&gt;         }<br>&gt;<br>&gt;         extension LazyCollectionProtocol {<br>&gt;           func flatten() -&gt;<br>&gt; LazyCollection&lt;FlattenCollection&lt;Self.Elements&gt;&gt;<br>&gt;         }<br>&gt;<br>&gt;         extension Collection {<br>&gt;           func flatten() -&gt; FlattenCollection&lt;Self&gt;<br>&gt;         }<br>&gt;<br>&gt;         extension BidirectionalCollection {<br>&gt;           func flatten() -&gt; FlattenBidirectionalCollection&lt;Self&gt;<br>&gt;         }<br>&gt;<br>&gt; So it&#39;s not a simple one-to-one rename.<br>&gt;<br>&gt; When there&#39;s no `separator` argument, will FlattenIterator perform better<br>&gt; than JoinedIterator?<br>&gt;<br>&gt; &gt;&gt; And what would happen to the flatMap() methods? Is flatten() a term of<br>&gt; art?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; &lt;<br>&gt; https://github.com/apple/swift/blob/master/stdlib/public/core/FlatMap.swift<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; I&#39;d say flatMap is more a &quot;term of art&quot; than flatten. &quot;flatten&quot; just<br>&gt; describes literally what is being done. Frankly I&#39;m surprised it was never<br>&gt; named flattened(). Anyway, flatMap should stay.<br>&gt;<br>&gt; ## Future directions<br>&gt;<br>&gt; Will the flatMap(_:) methods also have flatMap(separator:_:) variants?<br>&gt;<br></p><p>That&#39;s an interesting idea. It seems to be purely additive, however, so I<br>imagine it wouldn&#39;t happen until after Swift 3.<br></p><p><br>&gt; -- Ben<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/5f3c58ae/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>[Pitch] Unify joined(separator:) and flatten()</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>July 24, 2016 at 05:00:00pm</p></header><div class="content"><p>-1 for this. To me there needs to be a difference between String (which is not a normal collection) and other regular collections. <br></p><p>In addition, I really don’t think this proposal has the needed strong support for the change. <br></p><p><br></p><p><br>&gt; On Jul 22, 2016, at 3:41 PM, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Here&#39;s a proposal draft. Comments welcome:<br>&gt; <br>&gt; https://gist.github.com/jtbandes/7978dc1848f7c37eeaa8e9aba27c7325 &lt;https://gist.github.com/jtbandes/7978dc1848f7c37eeaa8e9aba27c7325&gt;<br>&gt; <br>&gt; On Fri, Jul 22, 2016 at 2:51 PM, Ben Rimmington &lt;me at benrimmington.com &lt;mailto:me at benrimmington.com&gt;&gt; wrote:<br>&gt; <br>&gt; &gt; On 22 Jul 2016, at 20:43, Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt; On Fri, Jul 22, 2016 at 8:35 AM, Ben Rimmington &lt;me at benrimmington.com &lt;mailto:me at benrimmington.com&gt;&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; On 22 Jul 2016, at 02:46, Jacob Bandes-Storch wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; In the swift-lang Slack channel, a few of us were discussing joined(separator:) and realized that flatten() does almost exactly the same thing.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Is there interest in renaming flatten() to joined()?  Since joined takes a separator that&#39;s any Sequence, we can&#39;t have a default value for the separator parameter, but we can have a variant of joined() with no arguments.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I&#39;d like default separators for the joined() methods.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; &lt;https://bugs.swift.org/browse/SR-1428 &lt;https://bugs.swift.org/browse/SR-1428&gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; But renaming flatten() to joined() seems complicated.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/Flatten.swift.gyb &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/Flatten.swift.gyb&gt;&gt;<br>&gt; &gt;&gt; &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/Join.swift &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/Join.swift&gt;&gt;<br>&gt; &gt;<br>&gt; &gt; What makes it seem complicated? At the very least, one could just rename the flatten() function. There might also be an opportunity to combine the two files and delete some code from stdlib.<br>&gt; <br>&gt; There&#39;s only one joined() method (for a sequence of sequences):<br>&gt; <br>&gt;         extension Sequence {<br>&gt;           func joined&lt;Separator: Sequence&gt;(separator: Separator) -&gt; JoinedSequence&lt;Self&gt;<br>&gt;         }<br>&gt; <br>&gt; There are many flatten() methods (`where` clauses omitted for brevity):<br>&gt; <br>&gt;         extension Sequence {<br>&gt;           func flatten() -&gt; FlattenSequence&lt;Self&gt;<br>&gt;         }<br>&gt; <br>&gt;         extension LazySequenceProtocol {<br>&gt;           func flatten() -&gt; LazySequence&lt;FlattenSequence&lt;Self.Elements&gt;&gt;<br>&gt;         }<br>&gt; <br>&gt;         extension LazyCollectionProtocol {<br>&gt;           func flatten() -&gt; LazyCollection&lt;FlattenCollection&lt;Self.Elements&gt;&gt;<br>&gt;         }<br>&gt; <br>&gt;         extension Collection {<br>&gt;           func flatten() -&gt; FlattenCollection&lt;Self&gt;<br>&gt;         }<br>&gt; <br>&gt;         extension BidirectionalCollection {<br>&gt;           func flatten() -&gt; FlattenBidirectionalCollection&lt;Self&gt;<br>&gt;         }<br>&gt; <br>&gt; So it&#39;s not a simple one-to-one rename.<br>&gt; <br>&gt; When there&#39;s no `separator` argument, will FlattenIterator perform better than JoinedIterator?<br>&gt; <br>&gt; &gt;&gt; And what would happen to the flatMap() methods? Is flatten() a term of art?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/FlatMap.swift &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/FlatMap.swift&gt;&gt;<br>&gt; &gt;<br>&gt; &gt; I&#39;d say flatMap is more a &quot;term of art&quot; than flatten. &quot;flatten&quot; just describes literally what is being done. Frankly I&#39;m surprised it was never named flattened(). Anyway, flatMap should stay.<br>&gt; <br>&gt; ## Future directions<br>&gt; <br>&gt; Will the flatMap(_:) methods also have flatMap(separator:_:) variants?<br>&gt; <br>&gt; That&#39;s an interesting idea. It seems to be purely additive, however, so I imagine it wouldn&#39;t happen until after Swift 3.<br>&gt; <br>&gt; <br>&gt; -- Ben<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160724/19ef35d5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>[Pitch] Unify joined(separator:) and flatten()</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>July 24, 2016 at 05:00:00pm</p></header><div class="content"><p>Here is a quick example that we would loose.<br></p><p>[[&quot;hey&quot;], [&quot;what&quot;]].flatten().joined(separator: “&quot;)<br></p><p>[[&quot;hey&quot;], [&quot;what&quot;]].flatten() //  [&quot;hey&quot;, &quot;what”]<br></p><p>The way I think of it is flatten works on array of arrays while joined works on arrays of strings. <br></p><p>I guess we could do this too<br></p><p>[[&quot;hey&quot;], [&quot;what&quot;]].joined(separator: []).joined(separator: &quot;&quot;)<br></p><p><br></p><p>&gt; On Jul 24, 2016, at 5:29 PM, Jose Cheyo Jimenez &lt;cheyo at masters3d.com&gt; wrote:<br>&gt; <br>&gt; -1 for this. To me there needs to be a difference between String (which is not a normal collection) and other regular collections. <br>&gt; <br>&gt; In addition, I really don’t think this proposal has the needed strong support for the change. <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Jul 22, 2016, at 3:41 PM, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Here&#39;s a proposal draft. Comments welcome:<br>&gt;&gt; <br>&gt;&gt; https://gist.github.com/jtbandes/7978dc1848f7c37eeaa8e9aba27c7325 &lt;https://gist.github.com/jtbandes/7978dc1848f7c37eeaa8e9aba27c7325&gt;<br>&gt;&gt; <br>&gt;&gt; On Fri, Jul 22, 2016 at 2:51 PM, Ben Rimmington &lt;me at benrimmington.com &lt;mailto:me at benrimmington.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &gt; On 22 Jul 2016, at 20:43, Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; On Fri, Jul 22, 2016 at 8:35 AM, Ben Rimmington &lt;me at benrimmington.com &lt;mailto:me at benrimmington.com&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; On 22 Jul 2016, at 02:46, Jacob Bandes-Storch wrote:<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; In the swift-lang Slack channel, a few of us were discussing joined(separator:) and realized that flatten() does almost exactly the same thing.<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; Is there interest in renaming flatten() to joined()?  Since joined takes a separator that&#39;s any Sequence, we can&#39;t have a default value for the separator parameter, but we can have a variant of joined() with no arguments.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; I&#39;d like default separators for the joined() methods.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; &lt;https://bugs.swift.org/browse/SR-1428 &lt;https://bugs.swift.org/browse/SR-1428&gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; But renaming flatten() to joined() seems complicated.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/Flatten.swift.gyb &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/Flatten.swift.gyb&gt;&gt;<br>&gt;&gt; &gt;&gt; &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/Join.swift &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/Join.swift&gt;&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; What makes it seem complicated? At the very least, one could just rename the flatten() function. There might also be an opportunity to combine the two files and delete some code from stdlib.<br>&gt;&gt; <br>&gt;&gt; There&#39;s only one joined() method (for a sequence of sequences):<br>&gt;&gt; <br>&gt;&gt;         extension Sequence {<br>&gt;&gt;           func joined&lt;Separator: Sequence&gt;(separator: Separator) -&gt; JoinedSequence&lt;Self&gt;<br>&gt;&gt;         }<br>&gt;&gt; <br>&gt;&gt; There are many flatten() methods (`where` clauses omitted for brevity):<br>&gt;&gt; <br>&gt;&gt;         extension Sequence {<br>&gt;&gt;           func flatten() -&gt; FlattenSequence&lt;Self&gt;<br>&gt;&gt;         }<br>&gt;&gt; <br>&gt;&gt;         extension LazySequenceProtocol {<br>&gt;&gt;           func flatten() -&gt; LazySequence&lt;FlattenSequence&lt;Self.Elements&gt;&gt;<br>&gt;&gt;         }<br>&gt;&gt; <br>&gt;&gt;         extension LazyCollectionProtocol {<br>&gt;&gt;           func flatten() -&gt; LazyCollection&lt;FlattenCollection&lt;Self.Elements&gt;&gt;<br>&gt;&gt;         }<br>&gt;&gt; <br>&gt;&gt;         extension Collection {<br>&gt;&gt;           func flatten() -&gt; FlattenCollection&lt;Self&gt;<br>&gt;&gt;         }<br>&gt;&gt; <br>&gt;&gt;         extension BidirectionalCollection {<br>&gt;&gt;           func flatten() -&gt; FlattenBidirectionalCollection&lt;Self&gt;<br>&gt;&gt;         }<br>&gt;&gt; <br>&gt;&gt; So it&#39;s not a simple one-to-one rename.<br>&gt;&gt; <br>&gt;&gt; When there&#39;s no `separator` argument, will FlattenIterator perform better than JoinedIterator?<br>&gt;&gt; <br>&gt;&gt; &gt;&gt; And what would happen to the flatMap() methods? Is flatten() a term of art?<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/FlatMap.swift &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/FlatMap.swift&gt;&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I&#39;d say flatMap is more a &quot;term of art&quot; than flatten. &quot;flatten&quot; just describes literally what is being done. Frankly I&#39;m surprised it was never named flattened(). Anyway, flatMap should stay.<br>&gt;&gt; <br>&gt;&gt; ## Future directions<br>&gt;&gt; <br>&gt;&gt; Will the flatMap(_:) methods also have flatMap(separator:_:) variants?<br>&gt;&gt; <br>&gt;&gt; That&#39;s an interesting idea. It seems to be purely additive, however, so I imagine it wouldn&#39;t happen until after Swift 3.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- Ben<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160724/362594fe/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Pitch] Unify joined(separator:) and flatten()</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>July 25, 2016 at 12:00:00am</p></header><div class="content"><p>The thing is, joined also works on arrays-of-arrays today. The only<br>difference is that flatten doesn&#39;t have a separator.<br></p><p>We wouldn&#39;t lose what your example shows — you could do this:<br></p><p>[[&quot;hey&quot;], [&quot;what&quot;]].joined().joined(separator: “&quot;)<br>On Sun, Jul 24, 2016 at 5:45 PM Jose Cheyo Jimenez &lt;cheyo at masters3d.com&gt;<br>wrote:<br></p><p>&gt; Here is a quick example that we would loose.<br>&gt;<br>&gt; [[&quot;hey&quot;], [&quot;what&quot;]].flatten().joined(separator: “&quot;)<br>&gt;<br>&gt; [[&quot;hey&quot;], [&quot;what&quot;]].flatten() //  [&quot;hey&quot;, &quot;what”]<br>&gt;<br>&gt; The way I think of it is flatten works on array of arrays while joined<br>&gt; works on arrays of strings.<br>&gt;<br>&gt; I guess we could do this too<br>&gt;<br>&gt; [[&quot;hey&quot;], [&quot;what&quot;]].joined(separator: []).joined(separator: &quot;&quot;)<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Jul 24, 2016, at 5:29 PM, Jose Cheyo Jimenez &lt;cheyo at masters3d.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; -1 for this. To me there needs to be a difference between String (which is<br>&gt; not a normal collection) and other regular collections.<br>&gt;<br>&gt; In addition, I really don’t think this proposal has the needed strong<br>&gt; support for the change.<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Jul 22, 2016, at 3:41 PM, Jacob Bandes-Storch via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Here&#39;s a proposal draft. Comments welcome:<br>&gt;<br>&gt; https://gist.github.com/jtbandes/7978dc1848f7c37eeaa8e9aba27c7325<br>&gt;<br>&gt; On Fri, Jul 22, 2016 at 2:51 PM, Ben Rimmington &lt;me at benrimmington.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; &gt; On 22 Jul 2016, at 20:43, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; On Fri, Jul 22, 2016 at 8:35 AM, Ben Rimmington &lt;me at benrimmington.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; On 22 Jul 2016, at 02:46, Jacob Bandes-Storch wrote:<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; In the swift-lang Slack channel, a few of us were discussing<br>&gt;&gt; joined(separator:) and realized that flatten() does almost exactly the same<br>&gt;&gt; thing.<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; Is there interest in renaming flatten() to joined()?  Since joined<br>&gt;&gt; takes a separator that&#39;s any Sequence, we can&#39;t have a default value for<br>&gt;&gt; the separator parameter, but we can have a variant of joined() with no<br>&gt;&gt; arguments.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; I&#39;d like default separators for the joined() methods.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; &lt;https://bugs.swift.org/browse/SR-1428&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; But renaming flatten() to joined() seems complicated.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; &lt;<br>&gt;&gt; https://github.com/apple/swift/blob/master/stdlib/public/core/Flatten.swift.gyb<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; &lt;<br>&gt;&gt; https://github.com/apple/swift/blob/master/stdlib/public/core/Join.swift&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; What makes it seem complicated? At the very least, one could just<br>&gt;&gt; rename the flatten() function. There might also be an opportunity to<br>&gt;&gt; combine the two files and delete some code from stdlib.<br>&gt;&gt;<br>&gt;&gt; There&#39;s only one joined() method (for a sequence of sequences):<br>&gt;&gt;<br>&gt;&gt;         extension Sequence {<br>&gt;&gt;           func joined&lt;Separator: Sequence&gt;(separator: Separator) -&gt;<br>&gt;&gt; JoinedSequence&lt;Self&gt;<br>&gt;&gt;         }<br>&gt;&gt;<br>&gt;&gt; There are many flatten() methods (`where` clauses omitted for brevity):<br>&gt;&gt;<br>&gt;&gt;         extension Sequence {<br>&gt;&gt;           func flatten() -&gt; FlattenSequence&lt;Self&gt;<br>&gt;&gt;         }<br>&gt;&gt;<br>&gt;&gt;         extension LazySequenceProtocol {<br>&gt;&gt;           func flatten() -&gt; LazySequence&lt;FlattenSequence&lt;Self.Elements&gt;&gt;<br>&gt;&gt;         }<br>&gt;&gt;<br>&gt;&gt;         extension LazyCollectionProtocol {<br>&gt;&gt;           func flatten() -&gt;<br>&gt;&gt; LazyCollection&lt;FlattenCollection&lt;Self.Elements&gt;&gt;<br>&gt;&gt;         }<br>&gt;&gt;<br>&gt;&gt;         extension Collection {<br>&gt;&gt;           func flatten() -&gt; FlattenCollection&lt;Self&gt;<br>&gt;&gt;         }<br>&gt;&gt;<br>&gt;&gt;         extension BidirectionalCollection {<br>&gt;&gt;           func flatten() -&gt; FlattenBidirectionalCollection&lt;Self&gt;<br>&gt;&gt;         }<br>&gt;&gt;<br>&gt;&gt; So it&#39;s not a simple one-to-one rename.<br>&gt;&gt;<br>&gt;&gt; When there&#39;s no `separator` argument, will FlattenIterator perform better<br>&gt;&gt; than JoinedIterator?<br>&gt;&gt;<br>&gt;&gt; &gt;&gt; And what would happen to the flatMap() methods? Is flatten() a term of<br>&gt;&gt; art?<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; &lt;<br>&gt;&gt; https://github.com/apple/swift/blob/master/stdlib/public/core/FlatMap.swift<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I&#39;d say flatMap is more a &quot;term of art&quot; than flatten. &quot;flatten&quot; just<br>&gt;&gt; describes literally what is being done. Frankly I&#39;m surprised it was never<br>&gt;&gt; named flattened(). Anyway, flatMap should stay.<br>&gt;&gt;<br>&gt;&gt; ## Future directions<br>&gt;&gt;<br>&gt;&gt; Will the flatMap(_:) methods also have flatMap(separator:_:) variants?<br>&gt;&gt;<br>&gt;<br>&gt; That&#39;s an interesting idea. It seems to be purely additive, however, so I<br>&gt; imagine it wouldn&#39;t happen until after Swift 3.<br>&gt;<br>&gt;<br>&gt;&gt; -- Ben<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160725/35f3b097/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>[Pitch] Unify joined(separator:) and flatten()</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>July 24, 2016 at 06:00:00pm</p></header><div class="content"><p>[[&quot;hey&quot;], [&quot;what&quot;]].joined().joined() // proposed<br></p><p>vs<br></p><p>[[&quot;hey&quot;], [&quot;what&quot;]].flatten().joined(separator: “”) // now<br></p><p>I do agree that having two way of doing it now seems odd. <br></p><p>[[&quot;hey&quot;], [&quot;what&quot;]].joined(separator: []).joined(separator: “”)  // now<br></p><p><br></p><p><br>&gt; On Jul 24, 2016, at 5:47 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt; The thing is, joined also works on arrays-of-arrays today. The only difference is that flatten doesn&#39;t have a separator.<br>&gt; <br>&gt; We wouldn&#39;t lose what your example shows — you could do this:<br>&gt; <br>&gt; [[&quot;hey&quot;], [&quot;what&quot;]].joined().joined(separator: “&quot;)<br>&gt; On Sun, Jul 24, 2016 at 5:45 PM Jose Cheyo Jimenez &lt;cheyo at masters3d.com &lt;mailto:cheyo at masters3d.com&gt;&gt; wrote:<br>&gt; Here is a quick example that we would loose.<br>&gt; <br>&gt; [[&quot;hey&quot;], [&quot;what&quot;]].flatten().joined(separator: “&quot;)<br>&gt; <br>&gt; [[&quot;hey&quot;], [&quot;what&quot;]].flatten() //  [&quot;hey&quot;, &quot;what”]<br>&gt; <br>&gt; The way I think of it is flatten works on array of arrays while joined works on arrays of strings. <br>&gt; <br>&gt; I guess we could do this too<br>&gt; <br>&gt; [[&quot;hey&quot;], [&quot;what&quot;]].joined(separator: []).joined(separator: &quot;&quot;)<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Jul 24, 2016, at 5:29 PM, Jose Cheyo Jimenez &lt;cheyo at masters3d.com &lt;mailto:cheyo at masters3d.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; -1 for this. To me there needs to be a difference between String (which is not a normal collection) and other regular collections. <br>&gt;&gt; <br>&gt;&gt; In addition, I really don’t think this proposal has the needed strong support for the change. <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 22, 2016, at 3:41 PM, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Here&#39;s a proposal draft. Comments welcome:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://gist.github.com/jtbandes/7978dc1848f7c37eeaa8e9aba27c7325 &lt;https://gist.github.com/jtbandes/7978dc1848f7c37eeaa8e9aba27c7325&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Fri, Jul 22, 2016 at 2:51 PM, Ben Rimmington &lt;me at benrimmington.com &lt;mailto:me at benrimmington.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt; On 22 Jul 2016, at 20:43, Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;&gt; On Fri, Jul 22, 2016 at 8:35 AM, Ben Rimmington &lt;me at benrimmington.com &lt;mailto:me at benrimmington.com&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; On 22 Jul 2016, at 02:46, Jacob Bandes-Storch wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; In the swift-lang Slack channel, a few of us were discussing joined(separator:) and realized that flatten() does almost exactly the same thing.<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; Is there interest in renaming flatten() to joined()?  Since joined takes a separator that&#39;s any Sequence, we can&#39;t have a default value for the separator parameter, but we can have a variant of joined() with no arguments.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; I&#39;d like default separators for the joined() methods.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &lt;https://bugs.swift.org/browse/SR-1428 &lt;https://bugs.swift.org/browse/SR-1428&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; But renaming flatten() to joined() seems complicated.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/Flatten.swift.gyb &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/Flatten.swift.gyb&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/Join.swift &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/Join.swift&gt;&gt;<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; What makes it seem complicated? At the very least, one could just rename the flatten() function. There might also be an opportunity to combine the two files and delete some code from stdlib.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; There&#39;s only one joined() method (for a sequence of sequences):<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;         extension Sequence {<br>&gt;&gt;&gt;           func joined&lt;Separator: Sequence&gt;(separator: Separator) -&gt; JoinedSequence&lt;Self&gt;<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; There are many flatten() methods (`where` clauses omitted for brevity):<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;         extension Sequence {<br>&gt;&gt;&gt;           func flatten() -&gt; FlattenSequence&lt;Self&gt;<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;         extension LazySequenceProtocol {<br>&gt;&gt;&gt;           func flatten() -&gt; LazySequence&lt;FlattenSequence&lt;Self.Elements&gt;&gt;<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;         extension LazyCollectionProtocol {<br>&gt;&gt;&gt;           func flatten() -&gt; LazyCollection&lt;FlattenCollection&lt;Self.Elements&gt;&gt;<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;         extension Collection {<br>&gt;&gt;&gt;           func flatten() -&gt; FlattenCollection&lt;Self&gt;<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;         extension BidirectionalCollection {<br>&gt;&gt;&gt;           func flatten() -&gt; FlattenBidirectionalCollection&lt;Self&gt;<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; So it&#39;s not a simple one-to-one rename.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; When there&#39;s no `separator` argument, will FlattenIterator perform better than JoinedIterator?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt;&gt; And what would happen to the flatMap() methods? Is flatten() a term of art?<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/FlatMap.swift &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/FlatMap.swift&gt;&gt;<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; I&#39;d say flatMap is more a &quot;term of art&quot; than flatten. &quot;flatten&quot; just describes literally what is being done. Frankly I&#39;m surprised it was never named flattened(). Anyway, flatMap should stay.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ## Future directions<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Will the flatMap(_:) methods also have flatMap(separator:_:) variants?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That&#39;s an interesting idea. It seems to be purely additive, however, so I imagine it wouldn&#39;t happen until after Swift 3.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- Ben<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160724/dd174dff/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Pitch] Unify joined(separator:) and flatten()</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>July 24, 2016 at 09:00:00pm</p></header><div class="content"><p>Yep. With my proposed renaming this would work:<br></p><p>[[&quot;hey&quot;], [&quot;what&quot;]].joined().joined(separator: “”)<br></p><p>But so would this, if you prefer it:<br></p><p>[[&quot;hey&quot;], [&quot;what&quot;]].joined().joined()<br></p><p>On Sun, Jul 24, 2016 at 6:06 PM, Jose Cheyo Jimenez &lt;cheyo at masters3d.com&gt;<br>wrote:<br></p><p>&gt; [[&quot;hey&quot;], [&quot;what&quot;]].joined().joined() // proposed<br>&gt;<br>&gt; vs<br>&gt;<br>&gt; [[&quot;hey&quot;], [&quot;what&quot;]].flatten().joined(separator: “”) // now<br>&gt;<br>&gt; I do agree that having two way of doing it now seems odd.<br>&gt;<br>&gt; [[&quot;hey&quot;], [&quot;what&quot;]].joined(separator: []).joined(separator: “”)  // now<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Jul 24, 2016, at 5:47 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; The thing is, joined also works on arrays-of-arrays today. The only<br>&gt; difference is that flatten doesn&#39;t have a separator.<br>&gt;<br>&gt; We wouldn&#39;t lose what your example shows — you could do this:<br>&gt;<br>&gt; [[&quot;hey&quot;], [&quot;what&quot;]].joined().joined(separator: “&quot;)<br>&gt; On Sun, Jul 24, 2016 at 5:45 PM Jose Cheyo Jimenez &lt;cheyo at masters3d.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; Here is a quick example that we would loose.<br>&gt;&gt;<br>&gt;&gt; [[&quot;hey&quot;], [&quot;what&quot;]].flatten().joined(separator: “&quot;)<br>&gt;&gt;<br>&gt;&gt; [[&quot;hey&quot;], [&quot;what&quot;]].flatten() //  [&quot;hey&quot;, &quot;what”]<br>&gt;&gt;<br>&gt;&gt; The way I think of it is flatten works on array of arrays while joined<br>&gt;&gt; works on arrays of strings.<br>&gt;&gt;<br>&gt;&gt; I guess we could do this too<br>&gt;&gt;<br>&gt;&gt; [[&quot;hey&quot;], [&quot;what&quot;]].joined(separator: []).joined(separator: &quot;&quot;)<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Jul 24, 2016, at 5:29 PM, Jose Cheyo Jimenez &lt;cheyo at masters3d.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; -1 for this. To me there needs to be a difference between String (which<br>&gt;&gt; is not a normal collection) and other regular collections.<br>&gt;&gt;<br>&gt;&gt; In addition, I really don’t think this proposal has the needed strong<br>&gt;&gt; support for the change.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Jul 22, 2016, at 3:41 PM, Jacob Bandes-Storch via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Here&#39;s a proposal draft. Comments welcome:<br>&gt;&gt;<br>&gt;&gt; https://gist.github.com/jtbandes/7978dc1848f7c37eeaa8e9aba27c7325<br>&gt;&gt;<br>&gt;&gt; On Fri, Jul 22, 2016 at 2:51 PM, Ben Rimmington &lt;me at benrimmington.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt; On 22 Jul 2016, at 20:43, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;&gt; On Fri, Jul 22, 2016 at 8:35 AM, Ben Rimmington &lt;me at benrimmington.com&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; On 22 Jul 2016, at 02:46, Jacob Bandes-Storch wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; In the swift-lang Slack channel, a few of us were discussing<br>&gt;&gt;&gt; joined(separator:) and realized that flatten() does almost exactly the same<br>&gt;&gt;&gt; thing.<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; Is there interest in renaming flatten() to joined()?  Since joined<br>&gt;&gt;&gt; takes a separator that&#39;s any Sequence, we can&#39;t have a default value for<br>&gt;&gt;&gt; the separator parameter, but we can have a variant of joined() with no<br>&gt;&gt;&gt; arguments.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; I&#39;d like default separators for the joined() methods.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &lt;https://bugs.swift.org/browse/SR-1428&gt;<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; But renaming flatten() to joined() seems complicated.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &lt;<br>&gt;&gt;&gt; https://github.com/apple/swift/blob/master/stdlib/public/core/Flatten.swift.gyb<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;&gt; &lt;<br>&gt;&gt;&gt; https://github.com/apple/swift/blob/master/stdlib/public/core/Join.swift<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; What makes it seem complicated? At the very least, one could just<br>&gt;&gt;&gt; rename the flatten() function. There might also be an opportunity to<br>&gt;&gt;&gt; combine the two files and delete some code from stdlib.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; There&#39;s only one joined() method (for a sequence of sequences):<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         extension Sequence {<br>&gt;&gt;&gt;           func joined&lt;Separator: Sequence&gt;(separator: Separator) -&gt;<br>&gt;&gt;&gt; JoinedSequence&lt;Self&gt;<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; There are many flatten() methods (`where` clauses omitted for brevity):<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         extension Sequence {<br>&gt;&gt;&gt;           func flatten() -&gt; FlattenSequence&lt;Self&gt;<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         extension LazySequenceProtocol {<br>&gt;&gt;&gt;           func flatten() -&gt; LazySequence&lt;FlattenSequence&lt;Self.Elements&gt;&gt;<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         extension LazyCollectionProtocol {<br>&gt;&gt;&gt;           func flatten() -&gt;<br>&gt;&gt;&gt; LazyCollection&lt;FlattenCollection&lt;Self.Elements&gt;&gt;<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         extension Collection {<br>&gt;&gt;&gt;           func flatten() -&gt; FlattenCollection&lt;Self&gt;<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         extension BidirectionalCollection {<br>&gt;&gt;&gt;           func flatten() -&gt; FlattenBidirectionalCollection&lt;Self&gt;<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; So it&#39;s not a simple one-to-one rename.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; When there&#39;s no `separator` argument, will FlattenIterator perform<br>&gt;&gt;&gt; better than JoinedIterator?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; And what would happen to the flatMap() methods? Is flatten() a term<br>&gt;&gt;&gt; of art?<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; &lt;<br>&gt;&gt;&gt; https://github.com/apple/swift/blob/master/stdlib/public/core/FlatMap.swift<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; I&#39;d say flatMap is more a &quot;term of art&quot; than flatten. &quot;flatten&quot; just<br>&gt;&gt;&gt; describes literally what is being done. Frankly I&#39;m surprised it was never<br>&gt;&gt;&gt; named flattened(). Anyway, flatMap should stay.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; ## Future directions<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Will the flatMap(_:) methods also have flatMap(separator:_:) variants?<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; That&#39;s an interesting idea. It seems to be purely additive, however, so I<br>&gt;&gt; imagine it wouldn&#39;t happen until after Swift 3.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; -- Ben<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160724/c0dfc156/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
