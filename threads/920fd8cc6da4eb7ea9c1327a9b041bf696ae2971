<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14477c366d6ee4e41adf14837bc4f2f9?s=50"></div><header><strong>IUO from C Library Interface</strong> from <string>Ryan Lovelett</string> &lt;swift-dev at ryan.lovelett.me&gt;<p>October 24, 2016 at 05:00:00pm</p></header><div class="content"><p>import CommonCrypto<br></p><p>protocol Foo {<br>  associatedtype Context<br>  var context: Context { get set }<br>  var bar: (UnsafeMutablePointer&lt;Context&gt;!, UnsafeRawPointer!, CC_LONG)<br>  -&gt; Int32 { get }<br>}<br></p><p>struct SHA1: Foo {<br>  var context: CC_SHA1_CTX<br>  var bar: (UnsafeMutablePointer&lt;CC_SHA1_CTX&gt;!, UnsafeRawPointer!,<br>  CC_LONG) -&gt; Int32 = CC_SHA1_Update<br>}<br></p><p>Unfortunately this will not compile any longer with Swift 3.0. The error<br>is: Implicitly unwrapped optionals are only allowed at top level and as<br>function results.<br></p><p>I can try modifying `bar` definition to be `?` instead of `!` but then<br>`CC_SHA1_Update`) can no longer be assigned to `bar`.<br></p><p>Suggestions?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>IUO from C Library Interface</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>October 24, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Oct 24, 2016, at 2:24 PM, Ryan Lovelett via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; import CommonCrypto<br>&gt; <br>&gt; protocol Foo {<br>&gt;  associatedtype Context<br>&gt;  var context: Context { get set }<br>&gt;  var bar: (UnsafeMutablePointer&lt;Context&gt;!, UnsafeRawPointer!, CC_LONG)<br>&gt;  -&gt; Int32 { get }<br>&gt; }<br>&gt; <br>&gt; struct SHA1: Foo {<br>&gt;  var context: CC_SHA1_CTX<br>&gt;  var bar: (UnsafeMutablePointer&lt;CC_SHA1_CTX&gt;!, UnsafeRawPointer!,<br>&gt;  CC_LONG) -&gt; Int32 = CC_SHA1_Update<br>&gt; }<br>&gt; <br>&gt; Unfortunately this will not compile any longer with Swift 3.0. The error<br>&gt; is: Implicitly unwrapped optionals are only allowed at top level and as<br>&gt; function results.<br>&gt; <br>&gt; I can try modifying `bar` definition to be `?` instead of `!` but then<br>&gt; `CC_SHA1_Update`) can no longer be assigned to `bar`.<br>&gt; <br>&gt; Suggestions?<br></p><p>Not being able to assign the function reference is a bug. As a workaround, you should be able to unsafeBitCast CC_SHA1_Update to the appropriate type.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14477c366d6ee4e41adf14837bc4f2f9?s=50"></div><header><strong>IUO from C Library Interface</strong> from <string>Ryan Lovelett</string> &lt;swift-dev at ryan.lovelett.me&gt;<p>October 24, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; Not being able to assign the function reference is a bug. As a<br>&gt; workaround, you should be able to unsafeBitCast CC_SHA1_Update to the<br>&gt; appropriate type.<br>&gt; <br>&gt; -Joe<br></p><p>Two questions:<br></p><p>1. Is this an already reported bug? If so, would you happen to know what<br>it is so I can track it for resolution (to remove the work-around when<br>it is resolved)?<br></p><p>I made the protocol def this:<br>var bar: (UnsafeMutablePointer&lt;Context&gt;?, UnsafeRawPointer?, CC_LONG) -&gt;<br>Int32 { get }<br></p><p>Then the imp this:<br>let bar = unsafeBitCast(CC_SHA1_Update, to:<br>((UnsafeMutablePointer&lt;CC_SHA1_CTX&gt;?, UnsafeRawPointer?, CC_LONG) -&gt;<br>Int32).self)<br></p><p>2. Perhaps I&#39;m doing something wrong here but I feel like this just make<br>the code less safe. It seems now I can send in an optional, read: nil,<br>pointer to this `bar` method. On face, this seems dangerous. The<br>`CC_SHA1_Update` method seems explicit in that it will not deal with<br>`nil`. So it seems that this thing is now reporting a safer API than<br>what is actually there. Or did I misunderstand? Should I be dropping the<br>IUO all together and just make it `UnsafeMutablePointer&lt;Context&gt;` and<br>`UnsafeRawPointer`?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>IUO from C Library Interface</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>October 24, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Oct 24, 2016, at 3:09 PM, Ryan Lovelett &lt;swift-dev at ryan.lovelett.me&gt; wrote:<br>&gt; <br>&gt;&gt; Not being able to assign the function reference is a bug. As a<br>&gt;&gt; workaround, you should be able to unsafeBitCast CC_SHA1_Update to the<br>&gt;&gt; appropriate type.<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt; <br>&gt; Two questions:<br>&gt; <br>&gt; 1. Is this an already reported bug? If so, would you happen to know what<br>&gt; it is so I can track it for resolution (to remove the work-around when<br>&gt; it is resolved)?<br>&gt; <br>&gt; I made the protocol def this:<br>&gt; var bar: (UnsafeMutablePointer&lt;Context&gt;?, UnsafeRawPointer?, CC_LONG) -&gt;<br>&gt; Int32 { get }<br>&gt; <br>&gt; Then the imp this:<br>&gt; let bar = unsafeBitCast(CC_SHA1_Update, to:<br>&gt; ((UnsafeMutablePointer&lt;CC_SHA1_CTX&gt;?, UnsafeRawPointer?, CC_LONG) -&gt;<br>&gt; Int32).self)<br></p><p>I don&#39;t believe we have a bug for this issue yet. The intent for IUO in Swift 3 is that it acts only as a modifier for declarations; as parts of types, it&#39;s equivalent to Optional. A function reference like CC_SHA1_Update should formally have Optional typed parameters.<br></p><p>&gt; 2. Perhaps I&#39;m doing something wrong here but I feel like this just make<br>&gt; the code less safe. It seems now I can send in an optional, read: nil,<br>&gt; pointer to this `bar` method. On face, this seems dangerous. The<br>&gt; `CC_SHA1_Update` method seems explicit in that it will not deal with<br>&gt; `nil`. So it seems that this thing is now reporting a safer API than<br>&gt; what is actually there. Or did I misunderstand? Should I be dropping the<br>&gt; IUO all together and just make it `UnsafeMutablePointer&lt;Context&gt;` and<br>&gt; `UnsafeRawPointer`?<br></p><p>We imported the function as IUO because we don&#39;t have any information one way or the other from the original C code about whether it takes nil or not. It&#39;s up to you not to pass in &#39;nil&#39; if it doesn&#39;t accept &#39;nil&#39;.<br></p><p>-Joe<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
