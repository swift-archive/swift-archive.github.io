<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Pitch] Ban the top value in Int/UInt</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>October 19, 2016 at 10:00:00am</p></header><div class="content"><p>on Wed Oct 19 2016, Joe Groff &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Oct 19, 2016, at 9:16 AM, Guoye Zhang via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 在 2016年10月19日，11:43，Kevin Nattinger &lt;swift at nattinger.net&gt; 写道：<br>&gt;&gt;&gt; <br>&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Oct 19, 2016, at 8:13 AM, Guoye Zhang via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 在 2016年10月19日，07:10，Jeremy Pereira &lt;jeremy.j.pereira at googlemail.com&gt; 写道：<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On 18 Oct 2016, at 19:17, Guoye Zhang via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Currently, Swift Int family and UInt family have compact<br>&gt;&gt;&gt;&gt;&gt;&gt; representations that utilize all available values, which is<br>&gt;&gt;&gt;&gt;&gt;&gt; inherited from C. However, it is horribly inefficient to<br>&gt;&gt;&gt;&gt;&gt;&gt; implement optional integers. It takes double the space to store<br>&gt;&gt;&gt;&gt;&gt;&gt; [Int?] than to store [Int] because of alignment.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Is this a general problem with Swift? Are lots of people complaining that they are running out of space for their Optional&lt;Int&gt; arrays?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It&#39;s just that a common data type wasting almost half the space<br>&gt;&gt;&gt;&gt; seems inefficient. I guess this is also the reason why they didn&#39;t<br>&gt;&gt;&gt;&gt; adopt optional integers widely in stdlib.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’ve only needed an array of optionals once, maybe twice. I don’t<br>&gt;&gt;&gt; think arrays of optionals are widely used to begin with, and the<br>&gt;&gt;&gt; reason there are few optional integers in the stdlib is because the<br>&gt;&gt;&gt; interface is from objc, which doesn’t have optionals. I doubt any<br>&gt;&gt;&gt; thought at all was given in designing the standard library to the<br>&gt;&gt;&gt; extra space for an optional.<br>&gt;&gt;&gt; <br>&gt;&gt; Swift stdlib is independent from objc. Currently, &quot;Int?&quot; storage has<br>&gt;&gt; a tradeoff between less space (n + 1 bytes) and unaligned access,<br>&gt;&gt; and more space (n * 2 bytes) and fast access. Neither of them is<br>&gt;&gt; optimal.<br>&gt;<br>&gt; Something worth considering at a higher level is whether Array ought<br>&gt; to align storage at all. Modern Intel and Apple CPUs pay much less of<br>&gt; a penalty for unaligned access than older microarchitectures, and the<br>&gt; memory savings of packing arrays of Int? and similar types would be<br>&gt; significant. <br></p><p>The only way to do that without breaking language rules would be to<br>redefine the alignment of those types to be 1.  It would require no<br>changes to the standard library.<br></p><p>&gt; (There are C compatibility issues here too, since C&#39;s semantic model<br>&gt; requires pointers to be well-aligned for their type, and we want<br>&gt; Swift.Arrays of C types to be cheaply interoperable with pointer-based<br>&gt; C APIs. This could perhaps be dealt with by guaranteeing that C basic<br>&gt; types and structs always have sizeof(T) % alignof(T) == 0, and<br>&gt; well-aligning the beginning of arrays.)<br>&gt;<br>&gt;<br>&gt; -Joe<br>&gt;<br>&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I propose to ban the top value in Int/UInt which is 0xFFFF... in<br>&gt;&gt;&gt;&gt;&gt;&gt; hex. Int family would lose its smallest value, and UInt family<br>&gt;&gt;&gt;&gt;&gt;&gt; would lose its largest value. Top value is reserved for nil in<br>&gt;&gt;&gt;&gt;&gt;&gt; optionals. An additional benefit is that negating an Int would<br>&gt;&gt;&gt;&gt;&gt;&gt; never crash.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Well the “top value” for signed ints would have to be<br>&gt;&gt;&gt;&gt;&gt; 0x8000... not 0xffff... which is the representation of -1. The<br>&gt;&gt;&gt;&gt;&gt; top value for unsigned ints cannot be banned because unsigned<br>&gt;&gt;&gt;&gt;&gt; integers are often used as bit fields either directly or in<br>&gt;&gt;&gt;&gt;&gt; OptionSets.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Furthermore, how would the semantics of &amp;+ and &amp;- be affected? What about the performance of those two operators?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I was originally going for the symmetry between Int and UInt as in<br>&gt;&gt;&gt;&gt; compatible bit patterns. Now that I think of it, UInt is commonly<br>&gt;&gt;&gt;&gt; used for bitwise operations, and it doesn&#39;t make sense to optimize<br>&gt;&gt;&gt;&gt; for &quot;UInt?&quot; which is uncommon. So I agree that 0x80... is better.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Int performance would surely suffer because of current instruction sets, but Int? would improve.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In my experience, ints are used orders of magnitude more often than optional int?s. Why optimize for the rare case?<br>&gt;&gt;&gt; <br>&gt;&gt; If we were to have safe arithmetic that produces optionals, or<br>&gt;&gt; lenient subscript, it is important to have efficient optional<br>&gt;&gt; integers. I do agree that Int slowing down is unacceptable.<br>&gt;&gt; <br>&gt;&gt; - Guoye<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
