<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5f8978dbb959b069613e2d027420615f?s=50"></div><header><strong>[Pitch] Eliminate `ManagedProtoBuffer`</strong> from <string>Erik Eckstein</string> &lt;eeckstein at apple.com&gt;<p>July 18, 2016 at 04:00:00pm</p></header><div class="content"><p>The reason why `ManagedProtoBuffer` (the base class of `ManagedBuffer`) exists is to give the users an extra bit of type safety inside of the closure `initialHeader` passed to `ManagedBuffer.create()`.<br></p><p>public class ManagedBuffer&lt;Header, Element&gt;<br>  : ManagedProtoBuffer&lt;Header, Element&gt; {<br></p><p>  /// Create a new instance of the most-derived class, calling<br>  /// `initialHeader` on the partially-constructed object to<br>  /// generate an initial `Header`.<br>  public final class func create(<br>    minimumCapacity: Int,<br>    initialHeader: @noescape (ManagedProtoBuffer&lt;Header, Element&gt;) throws -&gt; Header<br>  ) rethrows -&gt; ManagedBuffer&lt;Header, Element&gt; {<br>    // ...<br>  }<br>}<br></p><p>This closure receives the `ManagedBuffer` instance and returns the initial value that is stored in the buffer (the header part of the buffer).  We are passing the `ManagedBuffer` as `ManagedProtoBuffer` to prevent the closure from reading the uninitialized `value` property. This property is defined in `ManagedBuffer` but not in `ManagedProtoBuffer`.<br></p><p>  public final var header: Header {<br>    // ...<br>  }<br></p><p>This extra bit of safety requires the existence of `ManagedProtoBuffer`, which complicates the API.<br>The name may also lead to some confusion with Google&#39;s Protocol Buffers project.<br></p><p>This proposal suggests removing `ManagedProtoBuffer` in order to simplify the API.<br>It means that  `ManagedBuffer` would not be derived from `ManagedProtoBuffer` and all methods from `ManagedProtoBuffer` would be moved to `ManagedBuffer`.<br>The closure `initialHeader` would receive a  `ManagedBuffer` instead of a `ManagedProtoBuffer`.<br></p><p>public class ManagedBuffer&lt;Header, Element&gt; {<br></p><p>  /// Create a new instance of the most-derived class, calling<br>  /// `initialHeader` on the partially-constructed object to<br>  /// generate an initial `Header`.<br>  public final class func create(<br>    minimumCapacity: Int,<br>    initialHeader: @noescape (ManagedBuffer&lt;Header, Element&gt;) throws -&gt; Header<br>  ) rethrows -&gt; ManagedBuffer&lt;Header, Element&gt; {<br>    // ...<br>  }<br>}<br></p><p>Also `ManagedBufferPointer`&#39;s init function (the second occurrence of  `ManagedProtoBuffer`) would receive a  `ManagedBuffer` instead of a `ManagedProtoBuffer`:<br></p><p>  /// Manage the given `buffer`.<br>  ///<br>  /// - Note: It is an error to use the `header` property of the resulting<br>  ///   instance unless it has been initialized.<br>  internal init(_ buffer: ManagedBuffer&lt;Header, Element&gt;) {<br>    _nativeBuffer = Builtin.castToNativeObject(buffer)<br>  }<br></p><p><br>Motivation<br>==========<br>The removal of `ManagedProtoBuffer` would simplify the API and avoids confusion with Google&#39;s Protocol Buffers.<br></p><p>Alternatives<br>============<br>*) Leave as is.<br>*) Rename the class to avoid the &quot;confusion&quot;-problem.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160718/0dc19fb7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Pitch] Eliminate `ManagedProtoBuffer`</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>July 18, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On Jul 18, 2016, at 4:13 PM, Erik Eckstein via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The reason why `ManagedProtoBuffer` (the base class of `ManagedBuffer`) exists is to give the users an extra bit of type safety inside of the closure `initialHeader` passed to `ManagedBuffer.create()`.<br>...<br>&gt; This closure receives the `ManagedBuffer` instance and returns the initial value that is stored in the buffer (the header part of the buffer).  We are passing the `ManagedBuffer` as `ManagedProtoBuffer` to prevent the closure from reading the uninitialized `value` property. This property is defined in `ManagedBuffer` but not in `ManagedProtoBuffer`.<br>...<br>&gt; This proposal suggests removing `ManagedProtoBuffer` in order to simplify the API.<br>&gt; It means that  `ManagedBuffer` would not be derived from `ManagedProtoBuffer` and all methods from `ManagedProtoBuffer` would be moved to `ManagedBuffer`.<br>&gt; The closure `initialHeader` would receive a  `ManagedBuffer` instead of a `ManagedProtoBuffer`.<br></p><p>I haven&#39;t used `ManagedBuffer`, but would it make sense to change the signature of `initialHeader` to `@noescape (elements: UnsafeMutablePointer&lt;Element&gt;, capacity: Int) -&gt; Header` and then effectively run it inside a `withUnsafeMutablePointerToElements()` call? That would prevent access to the uninitialized `header` field while also allowing us to eliminate the `ManagedProtoBuffer` type.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Pitch] Eliminate `ManagedProtoBuffer`</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>July 19, 2016 at 06:00:00am</p></header><div class="content"><p>This is now part of a pull - https://github.com/apple/swift-evolution/pull/437<br></p><p>The discussion for the four items in the pull ran here (http://thread.gmane.org/gmane.comp.lang.swift.evolution/23093), though there was not enough feedback. But given the deadline for breaking changes, I decided to put the proposal together anyway.<br></p><p><br></p><p>&gt; On Jul 19, 2016, at 4:03 AM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Jul 18, 2016, at 4:13 PM, Erik Eckstein via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The reason why `ManagedProtoBuffer` (the base class of `ManagedBuffer`) exists is to give the users an extra bit of type safety inside of the closure `initialHeader` passed to `ManagedBuffer.create()`.<br>&gt; ...<br>&gt;&gt; This closure receives the `ManagedBuffer` instance and returns the initial value that is stored in the buffer (the header part of the buffer).  We are passing the `ManagedBuffer` as `ManagedProtoBuffer` to prevent the closure from reading the uninitialized `value` property. This property is defined in `ManagedBuffer` but not in `ManagedProtoBuffer`.<br>&gt; ...<br>&gt;&gt; This proposal suggests removing `ManagedProtoBuffer` in order to simplify the API.<br>&gt;&gt; It means that  `ManagedBuffer` would not be derived from `ManagedProtoBuffer` and all methods from `ManagedProtoBuffer` would be moved to `ManagedBuffer`.<br>&gt;&gt; The closure `initialHeader` would receive a  `ManagedBuffer` instead of a `ManagedProtoBuffer`.<br>&gt; <br>&gt; I haven&#39;t used `ManagedBuffer`, but would it make sense to change the signature of `initialHeader` to `@noescape (elements: UnsafeMutablePointer&lt;Element&gt;, capacity: Int) -&gt; Header` and then effectively run it inside a `withUnsafeMutablePointerToElements()` call? That would prevent access to the uninitialized `header` field while also allowing us to eliminate the `ManagedProtoBuffer` type.<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Pitch] Eliminate `ManagedProtoBuffer`</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>July 19, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; On Jul 19, 2016, at 4:03 AM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Jul 18, 2016, at 4:13 PM, Erik Eckstein via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The reason why `ManagedProtoBuffer` (the base class of `ManagedBuffer`) exists is to give the users an extra bit of type safety inside of the closure `initialHeader` passed to `ManagedBuffer.create()`.<br>&gt; ...<br>&gt;&gt; This closure receives the `ManagedBuffer` instance and returns the initial value that is stored in the buffer (the header part of the buffer).  We are passing the `ManagedBuffer` as `ManagedProtoBuffer` to prevent the closure from reading the uninitialized `value` property. This property is defined in `ManagedBuffer` but not in `ManagedProtoBuffer`.<br>&gt; ...<br>&gt;&gt; This proposal suggests removing `ManagedProtoBuffer` in order to simplify the API.<br>&gt;&gt; It means that  `ManagedBuffer` would not be derived from `ManagedProtoBuffer` and all methods from `ManagedProtoBuffer` would be moved to `ManagedBuffer`.<br>&gt;&gt; The closure `initialHeader` would receive a  `ManagedBuffer` instead of a `ManagedProtoBuffer`.<br>&gt; <br>&gt; I haven&#39;t used `ManagedBuffer`, but would it make sense to change the signature of `initialHeader` to `@noescape (elements: UnsafeMutablePointer&lt;Element&gt;, capacity: Int) -&gt; Header` and then effectively run it inside a `withUnsafeMutablePointerToElements()` call? That would prevent access to the uninitialized `header` field while also allowing us to eliminate the `ManagedProtoBuffer` type.<br></p><p>Wouldn&#39;t this disallow access to the capacity field? That&#39;s as well defined on ManagedProtoBuffer and AFAIK can be accessed during the initialization.<br></p><p><br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Pitch] Eliminate `ManagedProtoBuffer`</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>July 18, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On Jul 18, 2016, at 10:05 PM, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt; <br>&gt;&gt; I haven&#39;t used `ManagedBuffer`, but would it make sense to change the signature of `initialHeader` to `@noescape (elements: UnsafeMutablePointer&lt;Element&gt;, capacity: Int) -&gt; Header` and then effectively run it inside a `withUnsafeMutablePointerToElements()` call? That would prevent access to the uninitialized `header` field while also allowing us to eliminate the `ManagedProtoBuffer` type.<br>&gt; <br>&gt; Wouldn&#39;t this disallow access to the capacity field? That&#39;s as well defined on ManagedProtoBuffer and AFAIK can be accessed during the initialization.<br></p><p>Yes, which is why I suggested it should be passed in to the `initialHeader` closure too. (It&#39;s read-only anyway, so there&#39;s no loss of capability.) What it *does* prevent access to is `withUnsafeMutablePointerToHeader`, but I&#39;m not sure how that method is supposed to work before the header&#39;s been initialized anyway.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Pitch] Eliminate `ManagedProtoBuffer`</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>July 19, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jul 19, 2016, at 8:49 AM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt; On Jul 18, 2016, at 10:05 PM, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; I haven&#39;t used `ManagedBuffer`, but would it make sense to change the signature of `initialHeader` to `@noescape (elements: UnsafeMutablePointer&lt;Element&gt;, capacity: Int) -&gt; Header` and then effectively run it inside a `withUnsafeMutablePointerToElements()` call? That would prevent access to the uninitialized `header` field while also allowing us to eliminate the `ManagedProtoBuffer` type.<br>&gt;&gt; <br>&gt;&gt; Wouldn&#39;t this disallow access to the capacity field? That&#39;s as well defined on ManagedProtoBuffer and AFAIK can be accessed during the initialization.<br>&gt; <br>&gt; Yes, which is why I suggested it should be passed in to the `initialHeader` closure too. (It&#39;s read-only anyway, so there&#39;s no loss of capability.) What it *does* prevent access to is `withUnsafeMutablePointerToHeader`, but I&#39;m not sure how that method is supposed to work before the header&#39;s been initialized anyway.<br></p><p>I&#39;d personally just remove the ManagedProtoBuffer and note in the documentation of ManagedBuffer.create that you should not read the header from within the block. I think it&#39;s a similar programming error as indexing out of bounds which is also documented to be a programming error.<br></p><p>I&#39;m not sure whether we could simply eliminate ManagedBuffer altogether since looking at https://github.com/search?l=swift&amp;q=ManagedBuffer&amp;type=Code the only places this is used are generally just forks of apple/swift and I haven&#39;t found a single use ManagedBuffer.create in the entire stdlib, all of the Array code uses ManagedBufferPointer directly and initializes it with the unsafeBufferObject, which is some subclass of _ContiguousArrayStorageBase...<br></p><p>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5f8978dbb959b069613e2d027420615f?s=50"></div><header><strong>[Pitch] Eliminate `ManagedProtoBuffer`</strong> from <string>Erik Eckstein</string> &lt;eeckstein at apple.com&gt;<p>July 19, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; This is now part of a pull - https://github.com/apple/swift-evolution/pull/437<br>&gt; <br>&gt; The discussion for the four items in the pull ran here (http://thread.gmane.org/gmane.comp.lang.swift.evolution/23093), though there was not enough feedback. But given the deadline for breaking changes, I decided to put the proposal together anyway.<br></p><p>OK. How do you like to proceed with that? I&#39;m fine to handle this as part of #437 as long as it goes through quickly. If it&#39;s accepted, do you want to do the implementation? Otherwise I can do it (the removal of ManagedProtoBuffer). Roman could help with the `unsafeAddressOf` part.<br></p><p><br>&gt; On Jul 19, 2016, at 12:17 AM, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jul 19, 2016, at 8:49 AM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 18, 2016, at 10:05 PM, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I haven&#39;t used `ManagedBuffer`, but would it make sense to change the signature of `initialHeader` to `@noescape (elements: UnsafeMutablePointer&lt;Element&gt;, capacity: Int) -&gt; Header` and then effectively run it inside a `withUnsafeMutablePointerToElements()` call? That would prevent access to the uninitialized `header` field while also allowing us to eliminate the `ManagedProtoBuffer` type.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Wouldn&#39;t this disallow access to the capacity field? That&#39;s as well defined on ManagedProtoBuffer and AFAIK can be accessed during the initialization.<br>&gt;&gt; <br>&gt;&gt; Yes, which is why I suggested it should be passed in to the `initialHeader` closure too. (It&#39;s read-only anyway, so there&#39;s no loss of capability.) What it *does* prevent access to is `withUnsafeMutablePointerToHeader`, but I&#39;m not sure how that method is supposed to work before the header&#39;s been initialized anyway.<br>&gt; <br>&gt; I&#39;d personally just remove the ManagedProtoBuffer and note in the documentation of ManagedBuffer.create that you should not read the header from within the block. I think it&#39;s a similar programming error as indexing out of bounds which is also documented to be a programming error.<br></p><p>I agree.<br></p><p><br>&gt; <br>&gt; I&#39;m not sure whether we could simply eliminate ManagedBuffer altogether since looking at https://github.com/search?l=swift&amp;q=ManagedBuffer&amp;type=Code the only places this is used are generally just forks of apple/swift and I haven&#39;t found a single use ManagedBuffer.create in the entire stdlib, all of the Array code uses ManagedBufferPointer directly and initializes it with the unsafeBufferObject, which is some subclass of _ContiguousArrayStorageBase...<br>&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt; <br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
