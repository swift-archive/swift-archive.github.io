<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c65faa002b79348ac10e1fb9c1a9ad83?s=50"></div><header><strong>access control proposal</strong> from <string>Colin Cornaby</string> &lt;colin.cornaby at mac.com&gt;<p>December 14, 2015 at 07:00:00pm</p></header><div class="content"><p>(I&#39;m reading the upstream discussion but I&#39;ll reply here.)<br></p><p>I don&#39;t know if I really like the pattern this is trying to support. I like that Swift makes it cleaner to include multiple types in a single Swift file. But I feel like this proposal is trying to take things too far the other way. Types that should should only see each other from a non &quot;friends&quot; role should be in separate files.<br></p><p>What&#39;s proposed doesn&#39;t really harm someone who likes the &quot;multiple file&quot; style directly, but I don&#39;t want to see projects where everything gets jammed into one file. I think keeping the scope of private (with no new keywords) to the same file encourages good coding practices.<br></p><p>I&#39;ve really liked the balance Swift strikes in this case. I feel like this discussion is going to come down to opinion, but projects that I&#39;ve worked in that have tried to over compact have always run into issues. I don&#39;t know if it&#39;s the role of the language to push an ideology either way, but personally I like the direction Swift is pushing. Files make for good scope boundaries.<br></p><p>On Dec 05, 2015, at 08:40 PM, Ilya via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>I think the it would help a great deal to have an access level modifier that is really private and visible only inside the class itself. Right now, the only way to hide implementation details for a class is to hide the class code in a separate file, which is very inconvenient for several reasons:<br></p><p>1) the meaning of the code changes depending on which file the class is in. It&#39;s very easy to accidentally expose class internal details and then call class elements that are meant to be used only inside the class. Having a keyword for class internals will allow the compiler to ensure that only the public API for the class is used from the outside world. The user can check types on his own, but it&#39;s better that the compiler does it automatically. Similarly, the user can check that only the proper APIs are called, but it&#39;s better that the compiler does it automatically.<br></p><p>2) accessibility by file structure may cause some really short files.Â <br></p><p>3) It&#39;s impossible to group related classes in one file but still hide implementation details inside each class<br></p><p>I think that it the best solution is to make private keyword do what it states -- keep the class element private to the class. But if it&#39;s really important to have a separate keyword for backward compatibility, it would be the next best thing.<br></p><p>--<br>Ilya Belenkiy<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151214/e0334a3b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/72cc28f12d423d7d87c5e20e8de0966c?s=50"></div><header><strong>access control proposal</strong> from <string>Ilya Belenkiy</string> &lt;ilya.belenkiy at gmail.com&gt;<p>December 14, 2015 at 07:00:00pm</p></header><div class="content"><p>Please take a look at the other posts today. I addressed this concern<br>earlier. In one sentence, just like you wouldn&#39;t want to put every<br>paragraph of a book or every section of an article in an encyclopedia in a<br>separate file, you wouldn&#39;t want to end up with a gazillion files just to<br>ensure that implementation details of an API stay hidden in a way that is<br>enforced by the compiler.<br></p><p>--<br>Ilya Belenkiy<br></p><p>On Mon, Dec 14, 2015 at 2:19 PM Colin Cornaby via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; (I&#39;m reading the upstream discussion but I&#39;ll reply here.)<br>&gt;<br>&gt; I don&#39;t know if I really like the pattern this is trying to support. I<br>&gt; like that Swift makes it cleaner to include multiple types in a single<br>&gt; Swift file. But I feel like this proposal is trying to take things too far<br>&gt; the other way. Types that should should only see each other from a non<br>&gt; &quot;friends&quot; role should be in separate files.<br>&gt;<br>&gt; What&#39;s proposed doesn&#39;t really harm someone who likes the &quot;multiple file&quot;<br>&gt; style directly, but I don&#39;t want to see projects where everything gets<br>&gt; jammed into one file. I think keeping the scope of private (with no new<br>&gt; keywords) to the same file encourages good coding practices.<br>&gt;<br>&gt; I&#39;ve really liked the balance Swift strikes in this case. I feel like this<br>&gt; discussion is going to come down to opinion, but projects that I&#39;ve worked<br>&gt; in that have tried to over compact have always run into issues. I don&#39;t<br>&gt; know if it&#39;s the role of the language to push an ideology either way, but<br>&gt; personally I like the direction Swift is pushing. Files make for good scope<br>&gt; boundaries.<br>&gt;<br>&gt; On Dec 05, 2015, at 08:40 PM, Ilya via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I think the it would help a great deal to have an access level modifier<br>&gt; that is really private and visible only inside the class itself. Right now,<br>&gt; the only way to hide implementation details for a class is to hide the<br>&gt; class code in a separate file, which is very inconvenient for several<br>&gt; reasons:<br>&gt;<br>&gt; 1) the meaning of the code changes depending on which file the class is<br>&gt; in. It&#39;s very easy to accidentally expose class internal details and then<br>&gt; call class elements that are meant to be used only inside the class. Having<br>&gt; a keyword for class internals will allow the compiler to ensure that only<br>&gt; the public API for the class is used from the outside world. The user can<br>&gt; check types on his own, but it&#39;s better that the compiler does it<br>&gt; automatically. Similarly, the user can check that only the proper APIs are<br>&gt; called, but it&#39;s better that the compiler does it automatically.<br>&gt;<br>&gt; 2) accessibility by file structure may cause some really short files.<br>&gt;<br>&gt; 3) It&#39;s impossible to group related classes in one file but still hide<br>&gt; implementation details inside each class<br>&gt;<br>&gt; I think that it the best solution is to make private keyword do what it<br>&gt; states -- keep the class element private to the class. But if it&#39;s really<br>&gt; important to have a separate keyword for backward compatibility, it would<br>&gt; be the next best thing.<br>&gt;<br>&gt; --<br>&gt; Ilya Belenkiy<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151214/60aa1a2a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/01a270432134e1f55562a20519ece2a5?s=50"></div><header><strong>access control proposal</strong> from <string>joe</string> &lt;joe at polka.cat&gt;<p>December 14, 2015 at 02:00:00pm</p></header><div class="content"><p>I&#39;ve only cursorily followed this thread, but with the introduction of the Swift Package Manager, I&#39;m guessing it will have a role to play in reducing the number of files one needs to be concerned with at any one time. If one has such an overwhelming number of files, it&#39;s probably likely that they could be split up into separate packages/modules. I&#39;m not sure how much that has been considered in regards to worry of ending up with too many separate files.<br></p><p>And even assuming one runs into cases where there are loads of .swift files, at least it&#39;s still basically half of what there would be in Objective-C :)<br></p><p>&gt; On Dec 14, 2015, at 1:42 PM, Ilya Belenkiy via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Please take a look at the other posts today. I addressed this concern earlier. In one sentence, just like you wouldn&#39;t want to put every paragraph of a book or every section of an article in an encyclopedia in a separate file, you wouldn&#39;t want to end up with a gazillion files just to ensure that implementation details of an API stay hidden in a way that is enforced by the compiler.<br>&gt; <br>&gt; --<br>&gt; Ilya Belenkiy<br>&gt; <br>&gt; On Mon, Dec 14, 2015 at 2:19 PM Colin Cornaby via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; (I&#39;m reading the upstream discussion but I&#39;ll reply here.)<br>&gt; <br>&gt; I don&#39;t know if I really like the pattern this is trying to support. I like that Swift makes it cleaner to include multiple types in a single Swift file. But I feel like this proposal is trying to take things too far the other way. Types that should should only see each other from a non &quot;friends&quot; role should be in separate files.<br>&gt; <br>&gt; What&#39;s proposed doesn&#39;t really harm someone who likes the &quot;multiple file&quot; style directly, but I don&#39;t want to see projects where everything gets jammed into one file. I think keeping the scope of private (with no new keywords) to the same file encourages good coding practices.<br>&gt; <br>&gt; I&#39;ve really liked the balance Swift strikes in this case. I feel like this discussion is going to come down to opinion, but projects that I&#39;ve worked in that have tried to over compact have always run into issues. I don&#39;t know if it&#39;s the role of the language to push an ideology either way, but personally I like the direction Swift is pushing. Files make for good scope boundaries.<br>&gt; <br>&gt; On Dec 05, 2015, at 08:40 PM, Ilya via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; I think the it would help a great deal to have an access level modifier that is really private and visible only inside the class itself. Right now, the only way to hide implementation details for a class is to hide the class code in a separate file, which is very inconvenient for several reasons:<br>&gt;&gt; <br>&gt;&gt; 1) the meaning of the code changes depending on which file the class is in. It&#39;s very easy to accidentally expose class internal details and then call class elements that are meant to be used only inside the class. Having a keyword for class internals will allow the compiler to ensure that only the public API for the class is used from the outside world. The user can check types on his own, but it&#39;s better that the compiler does it automatically. Similarly, the user can check that only the proper APIs are called, but it&#39;s better that the compiler does it automatically.<br>&gt;&gt; <br>&gt;&gt; 2) accessibility by file structure may cause some really short files. <br>&gt;&gt; <br>&gt;&gt; 3) It&#39;s impossible to group related classes in one file but still hide implementation details inside each class<br>&gt;&gt; <br>&gt;&gt; I think that it the best solution is to make private keyword do what it states -- keep the class element private to the class. But if it&#39;s really important to have a separate keyword for backward compatibility, it would be the next best thing.<br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; Ilya Belenkiy<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/72cc28f12d423d7d87c5e20e8de0966c?s=50"></div><header><strong>access control proposal</strong> from <string>Ilya Belenkiy</string> &lt;ilya.belenkiy at gmail.com&gt;<p>December 14, 2015 at 08:00:00pm</p></header><div class="content"><p>The number of files Is not the only or the biggest concern. Grouping<br>related APIs and / or related implementations makes it much easier to keep<br>everything consistent and easy to find. It&#39;s the same benefit as having<br>multiple paragraphs of text in one file. Only with paragraphs this seems<br>obvious, but for some reason causes a lot of debate when it comes to code.<br></p><p>--<br>Ilya Belenkiy<br>On Mon, Dec 14, 2015 at 3:16 PM joe &lt;joe at polka.cat&gt; wrote:<br></p><p>&gt; I&#39;ve only cursorily followed this thread, but with the introduction of the<br>&gt; Swift Package Manager, I&#39;m guessing it will have a role to play in reducing<br>&gt; the number of files one needs to be concerned with at any one time. If one<br>&gt; has such an overwhelming number of files, it&#39;s probably likely that they<br>&gt; could be split up into separate packages/modules. I&#39;m not sure how much<br>&gt; that has been considered in regards to worry of ending up with too many<br>&gt; separate files.<br>&gt;<br>&gt; And even assuming one runs into cases where there are loads of .swift<br>&gt; files, at least it&#39;s still basically half of what there would be in<br>&gt; Objective-C :)<br>&gt;<br>&gt; &gt; On Dec 14, 2015, at 1:42 PM, Ilya Belenkiy via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Please take a look at the other posts today. I addressed this concern<br>&gt; earlier. In one sentence, just like you wouldn&#39;t want to put every<br>&gt; paragraph of a book or every section of an article in an encyclopedia in a<br>&gt; separate file, you wouldn&#39;t want to end up with a gazillion files just to<br>&gt; ensure that implementation details of an API stay hidden in a way that is<br>&gt; enforced by the compiler.<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; Ilya Belenkiy<br>&gt; &gt;<br>&gt; &gt; On Mon, Dec 14, 2015 at 2:19 PM Colin Cornaby via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; (I&#39;m reading the upstream discussion but I&#39;ll reply here.)<br>&gt; &gt;<br>&gt; &gt; I don&#39;t know if I really like the pattern this is trying to support. I<br>&gt; like that Swift makes it cleaner to include multiple types in a single<br>&gt; Swift file. But I feel like this proposal is trying to take things too far<br>&gt; the other way. Types that should should only see each other from a non<br>&gt; &quot;friends&quot; role should be in separate files.<br>&gt; &gt;<br>&gt; &gt; What&#39;s proposed doesn&#39;t really harm someone who likes the &quot;multiple<br>&gt; file&quot; style directly, but I don&#39;t want to see projects where everything<br>&gt; gets jammed into one file. I think keeping the scope of private (with no<br>&gt; new keywords) to the same file encourages good coding practices.<br>&gt; &gt;<br>&gt; &gt; I&#39;ve really liked the balance Swift strikes in this case. I feel like<br>&gt; this discussion is going to come down to opinion, but projects that I&#39;ve<br>&gt; worked in that have tried to over compact have always run into issues. I<br>&gt; don&#39;t know if it&#39;s the role of the language to push an ideology either way,<br>&gt; but personally I like the direction Swift is pushing. Files make for good<br>&gt; scope boundaries.<br>&gt; &gt;<br>&gt; &gt; On Dec 05, 2015, at 08:40 PM, Ilya via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt; I think the it would help a great deal to have an access level modifier<br>&gt; that is really private and visible only inside the class itself. Right now,<br>&gt; the only way to hide implementation details for a class is to hide the<br>&gt; class code in a separate file, which is very inconvenient for several<br>&gt; reasons:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; 1) the meaning of the code changes depending on which file the class is<br>&gt; in. It&#39;s very easy to accidentally expose class internal details and then<br>&gt; call class elements that are meant to be used only inside the class. Having<br>&gt; a keyword for class internals will allow the compiler to ensure that only<br>&gt; the public API for the class is used from the outside world. The user can<br>&gt; check types on his own, but it&#39;s better that the compiler does it<br>&gt; automatically. Similarly, the user can check that only the proper APIs are<br>&gt; called, but it&#39;s better that the compiler does it automatically.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; 2) accessibility by file structure may cause some really short files.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; 3) It&#39;s impossible to group related classes in one file but still hide<br>&gt; implementation details inside each class<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I think that it the best solution is to make private keyword do what it<br>&gt; states -- keep the class element private to the class. But if it&#39;s really<br>&gt; important to have a separate keyword for backward compatibility, it would<br>&gt; be the next best thing.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; --<br>&gt; &gt;&gt; Ilya Belenkiy<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;  _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151214/6278f8ad/attachment-0001.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
