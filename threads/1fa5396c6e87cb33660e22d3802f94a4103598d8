<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>API Guidelines: dropFirst?</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>June 16, 2016 at 07:00:00am</p></header><div class="content"><p>on Thu Jun 16 2016, Brent Royal-Gordon &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; What is the rationale behind the name dropFirst()? Being a<br>&gt; non-mutating method it should clearly be e.g. droppingFirst()<br>&gt; according to the API Naming Guidelines.<br>&gt;<br>&gt; Like many `Sequence` and `Collection` operations, `dropFirst()` is a<br>&gt; result of the &quot;term of art&quot; exception, which is implied by the &quot;Use<br>&gt; Terminology Well&quot; section of the API Guidelines:<br>&gt; &lt;https://swift.org/documentation/api-design-guidelines/#use-terminology-well&gt;<br>&gt;<br>&gt; Many languages use `dropWhatever` or `drop_whatever` for operations<br>&gt; which return some sort of list with some of its leading or trailing<br>&gt; elements removed. For instance:<br>&gt;<br>&gt; * Ruby (which I happen to have in Dash) has `drop(n)` and `drop_while` methods.<br>&gt; * Haskell has `drop n`, `dropWhile`, and `dropWhileEnd` functions.<br>&gt; * Scala has a `drop(n)` method.<br>&gt; * R has a `dropFirst` function.<br>&gt;<br>&gt; The standard library has chosen to break its usual patterns in order to maintain consistency with languages like these.<br>&gt;<br>&gt; Personally, I believe the term of art exception has been misapplied in<br>&gt; this area of the language; the precedents are not very strong, and the<br>&gt; resulting APIs form a patchwork of inconsistent names rather than a<br>&gt; coherent family. The term of art exception increases the clarity of<br>&gt; calls like `map` and `filter` where the names are truly universal, but<br>&gt; it impedes the clarity of the whole family of<br>&gt; `first`/`prefix`/`suffix`/`last` calls, and the names should be<br>&gt; revisited and rationalized. But that hasn&#39;t happened yet.<br></p><p>I agree that we need to revisit this area. Even filter can potentially<br>be improved upon.  The polarity of its closure is far from obvious even<br>if you know the terms of art.<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
