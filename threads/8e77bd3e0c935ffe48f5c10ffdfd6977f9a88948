<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ea51ad6add02ee57585fdfdc9fbc6f42?s=50"></div><header><strong>Optional chaining and String properties</strong> from <string>Stephen Schaub</string> &lt;sschaub at gmail.com&gt;<p>August  1, 2016 at 01:00:00pm</p></header><div class="content"><p>With optional chaining, if I have a Swift variable<br></p><p>    var s: String?<br></p><p>s might contain nil, or a String wrapped in an Optional. So, I tried this<br>to get its length:<br></p><p>    let count = s?.characters?.count ?? 0<br></p><p>However, the compiler wants this:<br></p><p>    let count = s?.characters.count ?? 0<br></p><p>or this:<br></p><p>    let count = (s?.characters)?.count ?? 0<br></p><p>My understanding of optional chaining is that, once you start using &#39;?.&#39; in<br>a dotted expression, the rest of the properties evaluate as optional and<br>are typically accessed by &#39;?.&#39;, not &#39;.&#39;.<br></p><p>So, I dug a little further and tried this in the playground:<br></p><p>var s: String? = &quot;Foo&quot;<br>print(s?.characters)<br></p><p>The result indicates that s?.characters is indeed an Optional instance,<br>indicating that s?.characters.count should be illegal.<br></p><p>Why is s?.characters.count a legal expression?<br></p><p><br>--<br>Stephen Schaub<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160801/8e778948/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ec5a599777854c540fd102ef4691fe10?s=50"></div><header><strong>Optional chaining and String properties</strong> from <string>Rimantas Liubertas</string> &lt;rimantas at gmail.com&gt;<p>August  1, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt;  <br>&gt; var s: String? = &quot;Foo&quot;<br>&gt; print(s?.characters)<br>&gt;  <br>&gt; The result indicates that s?.characters is indeed an Optional instance, indicating that s?.characters.count should be illegal.<br>&gt;  <br>&gt; Why is s?.characters.count a legal expression?<br></p><p>See print(s?.characters.count) — you get the optional despite count not being defined as optional<br>  <br>Also, try this:<br></p><p>struct Foo {  <br>    let bar: Int<br>}<br></p><p>var foo: Foo? = Foo(bar: 42)  <br>print(foo?.bar)<br></p><p>Then try this:<br></p><p>struct Foo {<br>    let bar: Int<br>    let baz: Int?<br>}<br></p><p>var foo: Foo? = Foo(bar: 42, baz: 69)<br>print(foo?.bar)<br></p><p>print(foo?.baz?)<br></p><p><br></p><p>This may give you some ideas.<br></p><p>Best regards,<br>Rimantas<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160801/c5b975e5/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/02645fccf0e885c607f3d07a4abf4f95?s=50"></div><header><strong>Optional chaining and String properties</strong> from <string>Saagar Jha</string> &lt;saagar at saagarjha.com&gt;<p>August  1, 2016 at 11:00:00am</p></header><div class="content"><p>Saagar Jha<br></p><p>This isn’t quite how optional chaining in Swift works; see the Swift Programming Guide &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/OptionalChaining.html&gt;, specifically “Linking Multiple Levels of Chaining&quot;. Basically, `s?.characters.count` works because `s.characters` isn’t Optional. You only use ? on properties that are Optional.<br></p><p>&gt; On Aug 1, 2016, at 10:26, Stephen Schaub via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; With optional chaining, if I have a Swift variable<br>&gt; <br>&gt;     var s: String?<br>&gt; <br>&gt; s might contain nil, or a String wrapped in an Optional. So, I tried this to get its length:<br>&gt; <br>&gt;     let count = s?.characters?.count ?? 0<br>&gt; <br>&gt; However, the compiler wants this:<br>&gt; <br>&gt;     let count = s?.characters.count ?? 0<br>&gt; <br>&gt; or this:<br>&gt; <br>&gt;     let count = (s?.characters)?.count ?? 0<br>&gt; <br>&gt; My understanding of optional chaining is that, once you start using &#39;?.&#39; in a dotted expression, the rest of the properties evaluate as optional and are typically accessed by &#39;?.&#39;, not &#39;.&#39;.<br>&gt; <br>&gt; So, I dug a little further and tried this in the playground:<br>&gt; <br>&gt; var s: String? = &quot;Foo&quot;<br>&gt; print(s?.characters)<br>&gt; <br>&gt; The result indicates that s?.characters is indeed an Optional instance, indicating that s?.characters.count should be illegal.<br>&gt; <br>&gt; Why is s?.characters.count a legal expression?<br>&gt; <br>&gt; <br>&gt; --<br>&gt; Stephen Schaub<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160801/e2a20861/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ea51ad6add02ee57585fdfdc9fbc6f42?s=50"></div><header><strong>Optional chaining and String properties</strong> from <string>Stephen Schaub</string> &lt;sschaub at gmail.com&gt;<p>August  1, 2016 at 02:00:00pm</p></header><div class="content"><p>I understand that the String.characters property is not optional. However,<br>I am puzzled as to why<br></p><p>s?.characters.count<br></p><p>is legal, but<br></p><p>(s?.characters).count<br></p><p>is not. This seems counterintuitive. Can someone explain the logic or rules<br>being used here?<br></p><p>Stephen<br></p><p><br></p><p><br>On Mon, Aug 1, 2016 at 2:09 PM, Saagar Jha &lt;saagar at saagarjha.com&gt; wrote:<br></p><p>&gt;<br>&gt; Saagar Jha<br>&gt;<br>&gt; This isn’t quite how optional chaining in Swift works; see the Swift<br>&gt; Programming Guide<br>&gt; &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/OptionalChaining.html&gt;,<br>&gt; specifically “Linking Multiple Levels of Chaining&quot;. Basically,<br>&gt; `s?.characters.count` works because `s.characters` isn’t Optional. You only<br>&gt; use ? on properties that are Optional.<br>&gt;<br>&gt; On Aug 1, 2016, at 10:26, Stephen Schaub via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; With optional chaining, if I have a Swift variable<br>&gt;<br>&gt;     var s: String?<br>&gt;<br>&gt; s might contain nil, or a String wrapped in an Optional. So, I tried this<br>&gt; to get its length:<br>&gt;<br>&gt;     let count = s?.characters?.count ?? 0<br>&gt;<br>&gt; However, the compiler wants this:<br>&gt;<br>&gt;     let count = s?.characters.count ?? 0<br>&gt;<br>&gt; or this:<br>&gt;<br>&gt;     let count = (s?.characters)?.count ?? 0<br>&gt;<br>&gt; My understanding of optional chaining is that, once you start using &#39;?.&#39;<br>&gt; in a dotted expression, the rest of the properties evaluate as optional and<br>&gt; are typically accessed by &#39;?.&#39;, not &#39;.&#39;.<br>&gt;<br>&gt; So, I dug a little further and tried this in the playground:<br>&gt;<br>&gt; var s: String? = &quot;Foo&quot;<br>&gt; print(s?.characters)<br>&gt;<br>&gt; The result indicates that s?.characters is indeed an Optional instance,<br>&gt; indicating that s?.characters.count should be illegal.<br>&gt;<br>&gt; Why is s?.characters.count a legal expression?<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Stephen Schaub<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>&gt;<br></p><p><br>-- <br>Stephen Schaub<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160801/ce37f21b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/02645fccf0e885c607f3d07a4abf4f95?s=50"></div><header><strong>Optional chaining and String properties</strong> from <string>Saagar Jha</string> &lt;saagar at saagarjha.com&gt;<p>August  1, 2016 at 11:00:00am</p></header><div class="content"><p>When you write `(s?.characters).count`, the parentheses are evaluated first; `(s?.characters)` gives an `String.CharacterView?`. Accessing the `String.CharacterView?`’s `count` property requires a `?`: `(s?.characters)?.count`. `s?.characters.count`, on the other hand, is applying chaining, which only gives an Optional at the end, intermediate properties don’t require a `?` unless they’re Optional themselves.<br></p><p>Saagar Jha<br></p><p><br></p><p>&gt; On Aug 1, 2016, at 11:17, Stephen Schaub &lt;sschaub at gmail.com&gt; wrote:<br>&gt; <br>&gt; I understand that the String.characters property is not optional. However, I am puzzled as to why<br>&gt; <br>&gt; s?.characters.count<br>&gt; <br>&gt; is legal, but<br>&gt; <br>&gt; (s?.characters).count<br>&gt; <br>&gt; is not. This seems counterintuitive. Can someone explain the logic or rules being used here?<br>&gt; <br>&gt; Stephen<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; On Mon, Aug 1, 2016 at 2:09 PM, Saagar Jha &lt;saagar at saagarjha.com &lt;mailto:saagar at saagarjha.com&gt;&gt; wrote:<br>&gt; <br>&gt; Saagar Jha<br>&gt; <br>&gt; This isn’t quite how optional chaining in Swift works; see the Swift Programming Guide &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/OptionalChaining.html&gt;, specifically “Linking Multiple Levels of Chaining&quot;. Basically, `s?.characters.count` works because `s.characters` isn’t Optional. You only use ? on properties that are Optional.<br>&gt; <br>&gt;&gt; On Aug 1, 2016, at 10:26, Stephen Schaub via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; With optional chaining, if I have a Swift variable<br>&gt;&gt; <br>&gt;&gt;     var s: String?<br>&gt;&gt; <br>&gt;&gt; s might contain nil, or a String wrapped in an Optional. So, I tried this to get its length:<br>&gt;&gt; <br>&gt;&gt;     let count = s?.characters?.count ?? 0<br>&gt;&gt; <br>&gt;&gt; However, the compiler wants this:<br>&gt;&gt; <br>&gt;&gt;     let count = s?.characters.count ?? 0<br>&gt;&gt; <br>&gt;&gt; or this:<br>&gt;&gt; <br>&gt;&gt;     let count = (s?.characters)?.count ?? 0<br>&gt;&gt; <br>&gt;&gt; My understanding of optional chaining is that, once you start using &#39;?.&#39; in a dotted expression, the rest of the properties evaluate as optional and are typically accessed by &#39;?.&#39;, not &#39;.&#39;.<br>&gt;&gt; <br>&gt;&gt; So, I dug a little further and tried this in the playground:<br>&gt;&gt; <br>&gt;&gt; var s: String? = &quot;Foo&quot;<br>&gt;&gt; print(s?.characters)<br>&gt;&gt; <br>&gt;&gt; The result indicates that s?.characters is indeed an Optional instance, indicating that s?.characters.count should be illegal.<br>&gt;&gt; <br>&gt;&gt; Why is s?.characters.count a legal expression?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; Stephen Schaub<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Stephen Schaub<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160801/34ecd782/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ea51ad6add02ee57585fdfdc9fbc6f42?s=50"></div><header><strong>Optional chaining and String properties</strong> from <string>Stephen Schaub</string> &lt;sschaub at gmail.com&gt;<p>August  1, 2016 at 02:00:00pm</p></header><div class="content"><p>Got it, I think! I didn&#39;t understand that the chaining of intermediate<br>properties worked that way.<br></p><p>Thanks very much for the explanation.<br></p><p>Stephen<br></p><p>On Mon, Aug 1, 2016 at 2:25 PM, Saagar Jha &lt;saagar at saagarjha.com&gt; wrote:<br></p><p>&gt; When you write `(s?.characters).count`, the parentheses are evaluated<br>&gt; first; `(s?.characters)` gives an `String.CharacterView?`. Accessing<br>&gt; the `String.CharacterView?`’s `count` property requires a<br>&gt; `?`: `(s?.characters)?.count`. `s?.characters.count`, on the other hand, is<br>&gt; applying chaining, which only gives an Optional at the end, intermediate<br>&gt; properties don’t require a `?` unless they’re Optional themselves.<br>&gt;<br>&gt; Saagar Jha<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Aug 1, 2016, at 11:17, Stephen Schaub &lt;sschaub at gmail.com&gt; wrote:<br>&gt;<br>&gt; I understand that the String.characters property is not optional. However,<br>&gt; I am puzzled as to why<br>&gt;<br>&gt; s?.characters.count<br>&gt;<br>&gt; is legal, but<br>&gt;<br>&gt; (s?.characters).count<br>&gt;<br>&gt; is not. This seems counterintuitive. Can someone explain the logic or<br>&gt; rules being used here?<br>&gt;<br>&gt; Stephen<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Mon, Aug 1, 2016 at 2:09 PM, Saagar Jha &lt;saagar at saagarjha.com&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; Saagar Jha<br>&gt;&gt;<br>&gt;&gt; This isn’t quite how optional chaining in Swift works; see the Swift<br>&gt;&gt; Programming Guide<br>&gt;&gt; &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/OptionalChaining.html&gt;,<br>&gt;&gt; specifically “Linking Multiple Levels of Chaining&quot;. Basically,<br>&gt;&gt; `s?.characters.count` works because `s.characters` isn’t Optional. You only<br>&gt;&gt; use ? on properties that are Optional.<br>&gt;&gt;<br>&gt;&gt; On Aug 1, 2016, at 10:26, Stephen Schaub via swift-users &lt;<br>&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; With optional chaining, if I have a Swift variable<br>&gt;&gt;<br>&gt;&gt;     var s: String?<br>&gt;&gt;<br>&gt;&gt; s might contain nil, or a String wrapped in an Optional. So, I tried this<br>&gt;&gt; to get its length:<br>&gt;&gt;<br>&gt;&gt;     let count = s?.characters?.count ?? 0<br>&gt;&gt;<br>&gt;&gt; However, the compiler wants this:<br>&gt;&gt;<br>&gt;&gt;     let count = s?.characters.count ?? 0<br>&gt;&gt;<br>&gt;&gt; or this:<br>&gt;&gt;<br>&gt;&gt;     let count = (s?.characters)?.count ?? 0<br>&gt;&gt;<br>&gt;&gt; My understanding of optional chaining is that, once you start using &#39;?.&#39;<br>&gt;&gt; in a dotted expression, the rest of the properties evaluate as optional and<br>&gt;&gt; are typically accessed by &#39;?.&#39;, not &#39;.&#39;.<br>&gt;&gt;<br>&gt;&gt; So, I dug a little further and tried this in the playground:<br>&gt;&gt;<br>&gt;&gt; var s: String? = &quot;Foo&quot;<br>&gt;&gt; print(s?.characters)<br>&gt;&gt;<br>&gt;&gt; The result indicates that s?.characters is indeed an Optional instance,<br>&gt;&gt; indicating that s?.characters.count should be illegal.<br>&gt;&gt;<br>&gt;&gt; Why is s?.characters.count a legal expression?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Stephen Schaub<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Stephen Schaub<br>&gt;<br>&gt;<br>&gt;<br></p><p><br>-- <br>Stephen Schaub<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160801/c17b8341/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a4348d92b278534efd6ec8b9cff4054d?s=50"></div><header><strong>Optional chaining and String properties</strong> from <string>Ingo Maier</string> &lt;ingoem at gmail.com&gt;<p>August  1, 2016 at 09:00:00pm</p></header><div class="content"><p>If you are looking for the actual rules, they are defined in the<br>language reference, in the section on optional chaining expressions<br>[1]. It states that if you have an optional chaining expression of the<br>form `expression?` then<br></p><p>&quot;If the value of the optional-chaining expression is nil, all of the<br>other operations in the postfix expression are ignored and the entire<br>postfix expression evaluates to nil. If the value of the<br>optional-chaining expression is not nil, the value of the<br>optional-chaining expression is unwrapped and used to evaluate the<br>rest of the postfix expression. [...]. If a postfix expression that<br>contains an optional-chaining expression is nested inside other<br>postfix expressions, only the outermost expression returns an optional<br>type.&quot;<br></p><p>However, it seems to me that this is not quite a correct description<br>of what swiftc does. Note the last sentence in particular. According<br>to the grammar, given a postfix expression &lt;e&gt; and two identifiers x<br>and y, the following are both postfix expressions:<br></p><p>&lt;e&gt;?.x.y<br>(&lt;e&gt;?.x).y<br></p><p>Without further specification, I would consider &quot;the outermost<br>expression&quot; to be `(&lt;e&gt;?.x).y` for the last case, when swiftc clearly<br>stops at parentheses. The spec should distinguish between<br>parenthesized-expressions and other postfix expressions or am I<br>missing that part?<br></p><p>[1] https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Expressions.html#//apple_ref/swift/grammar/optional-chaining-expression<br></p><p>On Mon, Aug 1, 2016 at 8:17 PM, Stephen Schaub via swift-users<br>&lt;swift-users at swift.org&gt; wrote:<br>&gt; I understand that the String.characters property is not optional. However, I<br>&gt; am puzzled as to why<br>&gt;<br>&gt; s?.characters.count<br>&gt;<br>&gt; is legal, but<br>&gt;<br>&gt; (s?.characters).count<br>&gt;<br>&gt; is not. This seems counterintuitive. Can someone explain the logic or rules<br>&gt; being used here?<br>&gt;<br>&gt; Stephen<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Mon, Aug 1, 2016 at 2:09 PM, Saagar Jha &lt;saagar at saagarjha.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Saagar Jha<br>&gt;&gt;<br>&gt;&gt; This isn’t quite how optional chaining in Swift works; see the Swift<br>&gt;&gt; Programming Guide, specifically “Linking Multiple Levels of Chaining&quot;.<br>&gt;&gt; Basically, `s?.characters.count` works because `s.characters` isn’t<br>&gt;&gt; Optional. You only use ? on properties that are Optional.<br>&gt;&gt;<br>&gt;&gt; On Aug 1, 2016, at 10:26, Stephen Schaub via swift-users<br>&gt;&gt; &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; With optional chaining, if I have a Swift variable<br>&gt;&gt;<br>&gt;&gt;     var s: String?<br>&gt;&gt;<br>&gt;&gt; s might contain nil, or a String wrapped in an Optional. So, I tried this<br>&gt;&gt; to get its length:<br>&gt;&gt;<br>&gt;&gt;     let count = s?.characters?.count ?? 0<br>&gt;&gt;<br>&gt;&gt; However, the compiler wants this:<br>&gt;&gt;<br>&gt;&gt;     let count = s?.characters.count ?? 0<br>&gt;&gt;<br>&gt;&gt; or this:<br>&gt;&gt;<br>&gt;&gt;     let count = (s?.characters)?.count ?? 0<br>&gt;&gt;<br>&gt;&gt; My understanding of optional chaining is that, once you start using &#39;?.&#39;<br>&gt;&gt; in a dotted expression, the rest of the properties evaluate as optional and<br>&gt;&gt; are typically accessed by &#39;?.&#39;, not &#39;.&#39;.<br>&gt;&gt;<br>&gt;&gt; So, I dug a little further and tried this in the playground:<br>&gt;&gt;<br>&gt;&gt; var s: String? = &quot;Foo&quot;<br>&gt;&gt; print(s?.characters)<br>&gt;&gt;<br>&gt;&gt; The result indicates that s?.characters is indeed an Optional instance,<br>&gt;&gt; indicating that s?.characters.count should be illegal.<br>&gt;&gt;<br>&gt;&gt; Why is s?.characters.count a legal expression?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Stephen Schaub<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Stephen Schaub<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ea51ad6add02ee57585fdfdc9fbc6f42?s=50"></div><header><strong>Optional chaining and String properties</strong> from <string>Stephen Schaub</string> &lt;sschaub at gmail.com&gt;<p>August  1, 2016 at 03:00:00pm</p></header><div class="content"><p>Ingo,<br></p><p>Thanks for pointing me to the specification. The example given in that<br>section is helpful.<br></p><p>You make a good point about what constitutes &quot;the outermost expression.&quot;<br>Parenthesized expressions, according to the spec, are primary expressions,<br>not postfix expressions, but the spec also states that &quot;Syntactically,<br>every primary expression is also a postfix expression.&quot; So, either I&#39;m not<br>understanding the spec correctly, or the compiler is handling this case<br>differently for some reason.<br></p><p>Stephen<br></p><p><br></p><p><br>On Mon, Aug 1, 2016 at 3:05 PM, Ingo Maier &lt;ingoem at gmail.com&gt; wrote:<br></p><p>&gt; If you are looking for the actual rules, they are defined in the<br>&gt; language reference, in the section on optional chaining expressions<br>&gt; [1]. It states that if you have an optional chaining expression of the<br>&gt; form `expression?` then<br>&gt;<br>&gt; &quot;If the value of the optional-chaining expression is nil, all of the<br>&gt; other operations in the postfix expression are ignored and the entire<br>&gt; postfix expression evaluates to nil. If the value of the<br>&gt; optional-chaining expression is not nil, the value of the<br>&gt; optional-chaining expression is unwrapped and used to evaluate the<br>&gt; rest of the postfix expression. [...]. If a postfix expression that<br>&gt; contains an optional-chaining expression is nested inside other<br>&gt; postfix expressions, only the outermost expression returns an optional<br>&gt; type.&quot;<br>&gt;<br>&gt; However, it seems to me that this is not quite a correct description<br>&gt; of what swiftc does. Note the last sentence in particular. According<br>&gt; to the grammar, given a postfix expression &lt;e&gt; and two identifiers x<br>&gt; and y, the following are both postfix expressions:<br>&gt;<br>&gt; &lt;e&gt;?.x.y<br>&gt; (&lt;e&gt;?.x).y<br>&gt;<br>&gt; Without further specification, I would consider &quot;the outermost<br>&gt; expression&quot; to be `(&lt;e&gt;?.x).y` for the last case, when swiftc clearly<br>&gt; stops at parentheses. The spec should distinguish between<br>&gt; parenthesized-expressions and other postfix expressions or am I<br>&gt; missing that part?<br>&gt;<br>&gt; [1]<br>&gt; https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Expressions.html#//apple_ref/swift/grammar/optional-chaining-expression<br>&gt;<br>&gt; On Mon, Aug 1, 2016 at 8:17 PM, Stephen Schaub via swift-users<br>&gt; &lt;swift-users at swift.org&gt; wrote:<br>&gt; &gt; I understand that the String.characters property is not optional.<br>&gt; However, I<br>&gt; &gt; am puzzled as to why<br>&gt; &gt;<br>&gt; &gt; s?.characters.count<br>&gt; &gt;<br>&gt; &gt; is legal, but<br>&gt; &gt;<br>&gt; &gt; (s?.characters).count<br>&gt; &gt;<br>&gt; &gt; is not. This seems counterintuitive. Can someone explain the logic or<br>&gt; rules<br>&gt; &gt; being used here?<br>&gt; &gt;<br>&gt; &gt; Stephen<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; On Mon, Aug 1, 2016 at 2:09 PM, Saagar Jha &lt;saagar at saagarjha.com&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Saagar Jha<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; This isn’t quite how optional chaining in Swift works; see the Swift<br>&gt; &gt;&gt; Programming Guide, specifically “Linking Multiple Levels of Chaining&quot;.<br>&gt; &gt;&gt; Basically, `s?.characters.count` works because `s.characters` isn’t<br>&gt; &gt;&gt; Optional. You only use ? on properties that are Optional.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; On Aug 1, 2016, at 10:26, Stephen Schaub via swift-users<br>&gt; &gt;&gt; &lt;swift-users at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; With optional chaining, if I have a Swift variable<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;     var s: String?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; s might contain nil, or a String wrapped in an Optional. So, I tried<br>&gt; this<br>&gt; &gt;&gt; to get its length:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;     let count = s?.characters?.count ?? 0<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; However, the compiler wants this:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;     let count = s?.characters.count ?? 0<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; or this:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;     let count = (s?.characters)?.count ?? 0<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; My understanding of optional chaining is that, once you start using &#39;?.&#39;<br>&gt; &gt;&gt; in a dotted expression, the rest of the properties evaluate as optional<br>&gt; and<br>&gt; &gt;&gt; are typically accessed by &#39;?.&#39;, not &#39;.&#39;.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; So, I dug a little further and tried this in the playground:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; var s: String? = &quot;Foo&quot;<br>&gt; &gt;&gt; print(s?.characters)<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; The result indicates that s?.characters is indeed an Optional instance,<br>&gt; &gt;&gt; indicating that s?.characters.count should be illegal.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Why is s?.characters.count a legal expression?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; --<br>&gt; &gt;&gt; Stephen Schaub<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-users mailing list<br>&gt; &gt;&gt; swift-users at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; Stephen Schaub<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-users mailing list<br>&gt; &gt; swift-users at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; &gt;<br>&gt;<br></p><p><br></p><p>-- <br>Stephen Schaub<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160801/975f0fd9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a4348d92b278534efd6ec8b9cff4054d?s=50"></div><header><strong>Optional chaining and String properties</strong> from <string>Ingo Maier</string> &lt;ingoem at gmail.com&gt;<p>August  1, 2016 at 09:00:00pm</p></header><div class="content"><p>Yes, parenthesized expressions are primary expressions, which in turn<br>are all postfix expressions as specified by the first grammar rule for<br>postfix expressions and also the note you mentioned. I do think that<br>swiftc&#39;s behavior is the most intuitive. I just think the spec needs<br>to be clarified in that regard, that&#39;s all.<br></p><p>Cheers,<br>Ingo<br></p><p>On Mon, Aug 1, 2016 at 9:24 PM, Stephen Schaub &lt;sschaub at gmail.com&gt; wrote:<br>&gt; Ingo,<br>&gt;<br>&gt; Thanks for pointing me to the specification. The example given in that<br>&gt; section is helpful.<br>&gt;<br>&gt; You make a good point about what constitutes &quot;the outermost expression.&quot;<br>&gt; Parenthesized expressions, according to the spec, are primary expressions,<br>&gt; not postfix expressions, but the spec also states that &quot;Syntactically, every<br>&gt; primary expression is also a postfix expression.&quot; So, either I&#39;m not<br>&gt; understanding the spec correctly, or the compiler is handling this case<br>&gt; differently for some reason.<br>&gt;<br>&gt; Stephen<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Mon, Aug 1, 2016 at 3:05 PM, Ingo Maier &lt;ingoem at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; If you are looking for the actual rules, they are defined in the<br>&gt;&gt; language reference, in the section on optional chaining expressions<br>&gt;&gt; [1]. It states that if you have an optional chaining expression of the<br>&gt;&gt; form `expression?` then<br>&gt;&gt;<br>&gt;&gt; &quot;If the value of the optional-chaining expression is nil, all of the<br>&gt;&gt; other operations in the postfix expression are ignored and the entire<br>&gt;&gt; postfix expression evaluates to nil. If the value of the<br>&gt;&gt; optional-chaining expression is not nil, the value of the<br>&gt;&gt; optional-chaining expression is unwrapped and used to evaluate the<br>&gt;&gt; rest of the postfix expression. [...]. If a postfix expression that<br>&gt;&gt; contains an optional-chaining expression is nested inside other<br>&gt;&gt; postfix expressions, only the outermost expression returns an optional<br>&gt;&gt; type.&quot;<br>&gt;&gt;<br>&gt;&gt; However, it seems to me that this is not quite a correct description<br>&gt;&gt; of what swiftc does. Note the last sentence in particular. According<br>&gt;&gt; to the grammar, given a postfix expression &lt;e&gt; and two identifiers x<br>&gt;&gt; and y, the following are both postfix expressions:<br>&gt;&gt;<br>&gt;&gt; &lt;e&gt;?.x.y<br>&gt;&gt; (&lt;e&gt;?.x).y<br>&gt;&gt;<br>&gt;&gt; Without further specification, I would consider &quot;the outermost<br>&gt;&gt; expression&quot; to be `(&lt;e&gt;?.x).y` for the last case, when swiftc clearly<br>&gt;&gt; stops at parentheses. The spec should distinguish between<br>&gt;&gt; parenthesized-expressions and other postfix expressions or am I<br>&gt;&gt; missing that part?<br>&gt;&gt;<br>&gt;&gt; [1]<br>&gt;&gt; https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Expressions.html#//apple_ref/swift/grammar/optional-chaining-expression<br>&gt;&gt;<br>&gt;&gt; On Mon, Aug 1, 2016 at 8:17 PM, Stephen Schaub via swift-users<br>&gt;&gt; &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; &gt; I understand that the String.characters property is not optional.<br>&gt;&gt; &gt; However, I<br>&gt;&gt; &gt; am puzzled as to why<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; s?.characters.count<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; is legal, but<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; (s?.characters).count<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; is not. This seems counterintuitive. Can someone explain the logic or<br>&gt;&gt; &gt; rules<br>&gt;&gt; &gt; being used here?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Stephen<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; On Mon, Aug 1, 2016 at 2:09 PM, Saagar Jha &lt;saagar at saagarjha.com&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Saagar Jha<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; This isn’t quite how optional chaining in Swift works; see the Swift<br>&gt;&gt; &gt;&gt; Programming Guide, specifically “Linking Multiple Levels of Chaining&quot;.<br>&gt;&gt; &gt;&gt; Basically, `s?.characters.count` works because `s.characters` isn’t<br>&gt;&gt; &gt;&gt; Optional. You only use ? on properties that are Optional.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; On Aug 1, 2016, at 10:26, Stephen Schaub via swift-users<br>&gt;&gt; &gt;&gt; &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; With optional chaining, if I have a Swift variable<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;     var s: String?<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; s might contain nil, or a String wrapped in an Optional. So, I tried<br>&gt;&gt; &gt;&gt; this<br>&gt;&gt; &gt;&gt; to get its length:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;     let count = s?.characters?.count ?? 0<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; However, the compiler wants this:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;     let count = s?.characters.count ?? 0<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; or this:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;     let count = (s?.characters)?.count ?? 0<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; My understanding of optional chaining is that, once you start using<br>&gt;&gt; &gt;&gt; &#39;?.&#39;<br>&gt;&gt; &gt;&gt; in a dotted expression, the rest of the properties evaluate as optional<br>&gt;&gt; &gt;&gt; and<br>&gt;&gt; &gt;&gt; are typically accessed by &#39;?.&#39;, not &#39;.&#39;.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; So, I dug a little further and tried this in the playground:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; var s: String? = &quot;Foo&quot;<br>&gt;&gt; &gt;&gt; print(s?.characters)<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; The result indicates that s?.characters is indeed an Optional instance,<br>&gt;&gt; &gt;&gt; indicating that s?.characters.count should be illegal.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Why is s?.characters.count a legal expression?<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; --<br>&gt;&gt; &gt;&gt; Stephen Schaub<br>&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt; swift-users mailing list<br>&gt;&gt; &gt;&gt; swift-users at swift.org<br>&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; --<br>&gt;&gt; &gt; Stephen Schaub<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-users mailing list<br>&gt;&gt; &gt; swift-users at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt; &gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Stephen Schaub<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Optional chaining and String properties</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>August  1, 2016 at 08:00:00pm</p></header><div class="content"><p>You can think of this like flatMap:<br></p><p>    let count = s.flatMap { $0.characters.count } ?? 0    // like<br>s?.characters.count ?? 0<br>    let count = s.flatMap { $0.characters }.flatMap { $0.count } ?? 0   //<br>like (s?.characters)?.count ?? 0<br></p><p>Jacob<br></p><p>On Mon, Aug 1, 2016 at 10:26 AM, Stephen Schaub via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; With optional chaining, if I have a Swift variable<br>&gt;<br>&gt;     var s: String?<br>&gt;<br>&gt; s might contain nil, or a String wrapped in an Optional. So, I tried this<br>&gt; to get its length:<br>&gt;<br>&gt;     let count = s?.characters?.count ?? 0<br>&gt;<br>&gt; However, the compiler wants this:<br>&gt;<br>&gt;     let count = s?.characters.count ?? 0<br>&gt;<br>&gt; or this:<br>&gt;<br>&gt;     let count = (s?.characters)?.count ?? 0<br>&gt;<br>&gt; My understanding of optional chaining is that, once you start using &#39;?.&#39;<br>&gt; in a dotted expression, the rest of the properties evaluate as optional and<br>&gt; are typically accessed by &#39;?.&#39;, not &#39;.&#39;.<br>&gt;<br>&gt; So, I dug a little further and tried this in the playground:<br>&gt;<br>&gt; var s: String? = &quot;Foo&quot;<br>&gt; print(s?.characters)<br>&gt;<br>&gt; The result indicates that s?.characters is indeed an Optional instance,<br>&gt; indicating that s?.characters.count should be illegal.<br>&gt;<br>&gt; Why is s?.characters.count a legal expression?<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Stephen Schaub<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160801/25472a90/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Optional chaining and String properties</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>August  1, 2016 at 08:00:00pm</p></header><div class="content"><p>er, I guess it&#39;s probably plain ol&#39; map, rather than flatMap.<br></p><p>On Mon, Aug 1, 2016 at 8:28 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;<br>wrote:<br></p><p>&gt; You can think of this like flatMap:<br>&gt;<br>&gt;     let count = s.flatMap { $0.characters.count } ?? 0    // like<br>&gt; s?.characters.count ?? 0<br>&gt;     let count = s.flatMap { $0.characters }.flatMap { $0.count } ?? 0   //<br>&gt; like (s?.characters)?.count ?? 0<br>&gt;<br>&gt; Jacob<br>&gt;<br>&gt; On Mon, Aug 1, 2016 at 10:26 AM, Stephen Schaub via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; With optional chaining, if I have a Swift variable<br>&gt;&gt;<br>&gt;&gt;     var s: String?<br>&gt;&gt;<br>&gt;&gt; s might contain nil, or a String wrapped in an Optional. So, I tried this<br>&gt;&gt; to get its length:<br>&gt;&gt;<br>&gt;&gt;     let count = s?.characters?.count ?? 0<br>&gt;&gt;<br>&gt;&gt; However, the compiler wants this:<br>&gt;&gt;<br>&gt;&gt;     let count = s?.characters.count ?? 0<br>&gt;&gt;<br>&gt;&gt; or this:<br>&gt;&gt;<br>&gt;&gt;     let count = (s?.characters)?.count ?? 0<br>&gt;&gt;<br>&gt;&gt; My understanding of optional chaining is that, once you start using &#39;?.&#39;<br>&gt;&gt; in a dotted expression, the rest of the properties evaluate as optional and<br>&gt;&gt; are typically accessed by &#39;?.&#39;, not &#39;.&#39;.<br>&gt;&gt;<br>&gt;&gt; So, I dug a little further and tried this in the playground:<br>&gt;&gt;<br>&gt;&gt; var s: String? = &quot;Foo&quot;<br>&gt;&gt; print(s?.characters)<br>&gt;&gt;<br>&gt;&gt; The result indicates that s?.characters is indeed an Optional instance,<br>&gt;&gt; indicating that s?.characters.count should be illegal.<br>&gt;&gt;<br>&gt;&gt; Why is s?.characters.count a legal expression?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Stephen Schaub<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160801/f4554adf/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
