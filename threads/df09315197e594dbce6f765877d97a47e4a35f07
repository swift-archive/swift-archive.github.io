<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Swift 3 vs &quot;additive&quot; proposals</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>June 21, 2016 at 10:00:00pm</p></header><div class="content"><p>Hi Everyone,<br></p><p>As I mentioned before, the Swift 3 release is winding down.  There is still time left to make changes, but it is very short.  As such, we - as a community - need to stay focused on the goals for this release, principally the goal to get to source stability.  It is very important for users of Swift that Swift 3 and the Swift 4 compiler be as compatible as possible.  This is important for the continued growth of Swift into new places, like new platforms (which don’t get the benefit of Xcode migration) and Swift Playgrounds.<br></p><p>As such, “additive&quot; proposals will need very strong rationale explaining why they are critical for the Swift 3 release, and we won’t be merging these proposals into the swift-evolution repository unless they have that.  We should stay focused on proposals that perfect the features we have, rather than adding new ones.<br></p><p>Similarly, general discussions on this mailing list about blue sky additions to the language are distracting from our important goals, and the core team generally isn’t paying attention to these anyway.  I would really appreciate it if we could stay focused on what is important, until the time is right to look beyond Swift 3.  This time is in August (which will be here way too soon :-), at which point we can look to the future.  I outlined this here earlier:<br></p><p>https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160516/017701.html<br></p><p>Sorry to be a “downer”, but Swift 3 really is a very important release for the Swift developer community as a whole.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Swift 3 vs &quot;additive&quot; proposals</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June 22, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Jun 21, 2016, at 11:55 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Everyone,<br>&gt; <br>&gt; As I mentioned before, the Swift 3 release is winding down.  There is still time left to make changes, but it is very short.  As such, we - as a community - need to stay focused on the goals for this release, principally the goal to get to source stability.  It is very important for users of Swift that Swift 3 and the Swift 4 compiler be as compatible as possible.  <br></p><p>A few things on my radar.<br></p><p>Fully breaking that won&#39;t be possible post Swift 3:<br>Rationalizing the first/last/prefix/suffix/drop/etc. methods.   Brent R-G said he&#39;d run with this. Discussion: http://article.gmane.org/gmane.comp.lang.swift.evolution/16334/ &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/16334/&gt;<br>Rationalizing base conversion protocol names. I personally don&#39;t have the heart to try to re-address the &quot;LiteralConvertible&quot; protocol naming thing again but this would be the last chance to do anything about getting this issue addressed.<br>Potentially code breaking:<br>Rationalizing for loops-in either by removing `where` (breaking) or completing the filter/break operations (additive but wordy). Discussion here (primarily during WWDC week): http://thread.gmane.org/gmane.comp.lang.swift.evolution/20142 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/20142&gt; My draft proposal &lt;https://github.com/erica/swift-evolution/blob/5703c94450dcf4a3bc941333d3fadd90a7bd4ad8/proposals/XXXX-whereloops.md&gt; also addresses `where` in switch and catch statements, which could be breaking if changed to `if`.<br>Redesigning de-init to allow you to declare cleanup operations at points where the dangerous operations are first invoked. Introduced by Graham Perks but ran into WWDC disruption of  discussion. Discussion here: http://thread.gmane.org/gmane.comp.lang.swift.evolution/20019 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/20019&gt; <br>Ending the strong-weak dance once and for all by allowing {self in} and [weak self] / guard let self = self, which would impact a lot of code more than be breaking in and of itself.<br>-- E<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/bd74125b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Swift 3 vs &quot;additive&quot; proposals</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>June 22, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; Rationalizing base conversion protocol names. I personally don&#39;t have the heart to try to re-address the &quot;LiteralConvertible&quot; protocol naming thing again but this would be the last chance to do anything about getting this issue addressed.<br>Given the vast amount of bike shedding that has already happened around this topic, I don’t think there is a solution that everyone will be happy with.  It is also unclear (to me at least) what solution might be acceptable to the core team.  <br></p><p>At the same time, it continues to bother me that `Convertible` is used by standard library protocols with two completely different meanings.  This is a problem that deserves to be solved and as it involves a breaking change Swift 3 is the right timeframe in which to do so.<br></p><p>If the core team is able to indicate an approach they favor I would be willing to revise and resubmit the proposal.  But I don’t want to spend any further time speculating about what solution might be considered acceptable.<br></p><p>Matthew<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/3005dded/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>Swift 3 vs &quot;additive&quot; proposals</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>June 22, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Jun 22, 2016, at 8:17 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; Rationalizing base conversion protocol names. I personally don&#39;t have the heart to try to re-address the &quot;LiteralConvertible&quot; protocol naming thing again but this would be the last chance to do anything about getting this issue addressed.<br>&gt; Given the vast amount of bike shedding that has already happened around this topic, I don’t think there is a solution that everyone will be happy with.  It is also unclear (to me at least) what solution might be acceptable to the core team.  <br></p><p>To be clear, I don&#39;t care about the name.  If you want to rename IntegerLiteralConvertible to IntegerLiteral or whatever, I won&#39;t drag the conversation into the muck again. :)  It&#39;s the design of the requirements that I&#39;m pretty opposed to revisiting.<br></p><p>John.<br></p><p>&gt; <br>&gt; At the same time, it continues to bother me that `Convertible` is used by standard library protocols with two completely different meanings.  This is a problem that deserves to be solved and as it involves a breaking change Swift 3 is the right timeframe in which to do so.<br>&gt; <br>&gt; If the core team is able to indicate an approach they favor I would be willing to revise and resubmit the proposal.  But I don’t want to spend any further time speculating about what solution might be considered acceptable.<br>&gt; <br>&gt; Matthew<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/a331d04a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Swift 3 vs &quot;additive&quot; proposals</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>June 22, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Jun 22, 2016, at 10:59 AM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 22, 2016, at 8:17 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Rationalizing base conversion protocol names. I personally don&#39;t have the heart to try to re-address the &quot;LiteralConvertible&quot; protocol naming thing again but this would be the last chance to do anything about getting this issue addressed.<br>&gt;&gt; Given the vast amount of bike shedding that has already happened around this topic, I don’t think there is a solution that everyone will be happy with.  It is also unclear (to me at least) what solution might be acceptable to the core team.  <br>&gt; <br>&gt; To be clear, I don&#39;t care about the name.  If you want to rename IntegerLiteralConvertible to IntegerLiteral or whatever, I won&#39;t drag the conversation into the muck again. :)  It&#39;s the design of the requirements that I&#39;m pretty opposed to revisiting.<br></p><p>This is orthogonal to the discussion that happened in your thread, definitely no discussion of any changes to the requirements. :)<br></p><p>We are discussing this proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0041-conversion-protocol-conventions.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0041-conversion-protocol-conventions.md&gt; and specifically the use of the `Convertible` suffix for both the `*LiteralConvertible` protocols and the `Custom(Debug)StringConvertible` protocols where the conversion runs in opposite directions.<br></p><p>The core team decision was:<br></p><p>&quot;The feedback on the proposal was generally positive about the idea of renaming these protocols, but the specific names in the proposal are not well received, and there is no apparent confluence in the community on better names.  The core team prefers discussion to continue -- if/when there is a strong proposal for a better naming approach, we can reconsider renaming these.&quot;<br></p><p>&gt; <br>&gt; John.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; At the same time, it continues to bother me that `Convertible` is used by standard library protocols with two completely different meanings.  This is a problem that deserves to be solved and as it involves a breaking change Swift 3 is the right timeframe in which to do so.<br>&gt;&gt; <br>&gt;&gt; If the core team is able to indicate an approach they favor I would be willing to revise and resubmit the proposal.  But I don’t want to spend any further time speculating about what solution might be considered acceptable.<br>&gt;&gt; <br>&gt;&gt; Matthew<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/5850d8e2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c0eafab7106ab63b8db4025e57c1a8d2?s=50"></div><header><strong>Swift 3 vs &quot;additive&quot; proposals</strong> from <string>Javier Soto</string> &lt;javier.api at gmail.com&gt;<p>June 22, 2016 at 04:00:00pm</p></header><div class="content"><p>How would we evaluate the proposal to introduce the &quot;sealed&quot; specifier for<br>classes (open within module, final outside of module) and default to that,<br>in terms of source-code compatibility?<br>&gt;From my point of view it might be easier to do before Swift 3, but if<br>delayed until Swift 4 it wouldn&#39;t be the most time-consuming breakage for<br>developers.<br>On Wed, Jun 22, 2016 at 9:09 AM Matthew Johnson via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Jun 22, 2016, at 10:59 AM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Jun 22, 2016, at 8:17 AM, Matthew Johnson via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt;    - Rationalizing base conversion protocol names. I personally don&#39;t<br>&gt;    have the heart to try to re-address the &quot;LiteralConvertible&quot; protocol<br>&gt;    naming thing again but this would be the last chance to do anything about<br>&gt;    getting this issue addressed.<br>&gt;<br>&gt; Given the vast amount of bike shedding that has already happened around<br>&gt; this topic, I don’t think there is a solution that everyone will be happy<br>&gt; with.  It is also unclear (to me at least) what solution might be<br>&gt; acceptable to the core team.<br>&gt;<br>&gt;<br>&gt; To be clear, I don&#39;t care about the name.  If you want to rename<br>&gt; IntegerLiteralConvertible to IntegerLiteral or whatever, I won&#39;t drag the<br>&gt; conversation into the muck again. :)  It&#39;s the design of the requirements<br>&gt; that I&#39;m pretty opposed to revisiting.<br>&gt;<br>&gt;<br>&gt; This is orthogonal to the discussion that happened in your thread,<br>&gt; definitely no discussion of any changes to the requirements. :)<br>&gt;<br>&gt; We are discussing this proposal:<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0041-conversion-protocol-conventions.md and<br>&gt; specifically the use of the `Convertible` suffix for both the<br>&gt; `*LiteralConvertible` protocols and the `Custom(Debug)StringConvertible`<br>&gt; protocols where the conversion runs in opposite directions.<br>&gt;<br>&gt; The core team decision was:<br>&gt;<br>&gt; &quot;The feedback on the proposal was generally positive about the idea of<br>&gt; renaming these protocols, but the specific names in the proposal are not<br>&gt; well received, and there is no apparent confluence in the community on<br>&gt; better names.  The core team prefers discussion to continue -- if/when<br>&gt; there is a strong proposal for a better naming approach, we can reconsider<br>&gt; renaming these.&quot;<br>&gt;<br>&gt;<br>&gt; John.<br>&gt;<br>&gt;<br>&gt; At the same time, it continues to bother me that `Convertible` is used by<br>&gt; standard library protocols with two completely different meanings.  This is<br>&gt; a problem that deserves to be solved and as it involves a breaking change<br>&gt; Swift 3 is the right timeframe in which to do so.<br>&gt;<br>&gt; If the core team is able to indicate an approach they favor I would be<br>&gt; willing to revise and resubmit the proposal.  But I don’t want to spend any<br>&gt; further time speculating about what solution might be considered acceptable.<br>&gt;<br>&gt; Matthew<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-- <br>Javier Soto<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/28285781/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>Swift 3 vs &quot;additive&quot; proposals</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>June 22, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jun 22, 2016, at 9:15 AM, Javier Soto &lt;javier.api at gmail.com&gt; wrote:<br>&gt; How would we evaluate the proposal to introduce the &quot;sealed&quot; specifier for classes (open within module, final outside of module) and default to that, in terms of source-code compatibility? <br>&gt; From my point of view it might be easier to do before Swift 3, but if delayed until Swift 4 it wouldn&#39;t be the most time-consuming breakage for developers. <br></p><p>I believe we consider this plan of record, actually, other than the spelling of the modifier.  It&#39;s something we probably ought to commit to in Swift 3, though.<br></p><p>John.<br></p><p>&gt; On Wed, Jun 22, 2016 at 9:09 AM Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; On Jun 22, 2016, at 10:59 AM, John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 22, 2016, at 8:17 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Rationalizing base conversion protocol names. I personally don&#39;t have the heart to try to re-address the &quot;LiteralConvertible&quot; protocol naming thing again but this would be the last chance to do anything about getting this issue addressed.<br>&gt;&gt;&gt; Given the vast amount of bike shedding that has already happened around this topic, I don’t think there is a solution that everyone will be happy with.  It is also unclear (to me at least) what solution might be acceptable to the core team.  <br>&gt;&gt; <br>&gt;&gt; To be clear, I don&#39;t care about the name.  If you want to rename IntegerLiteralConvertible to IntegerLiteral or whatever, I won&#39;t drag the conversation into the muck again. :)  It&#39;s the design of the requirements that I&#39;m pretty opposed to revisiting.<br>&gt; <br>&gt; This is orthogonal to the discussion that happened in your thread, definitely no discussion of any changes to the requirements. :)<br>&gt; <br>&gt; We are discussing this proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0041-conversion-protocol-conventions.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0041-conversion-protocol-conventions.md&gt; and specifically the use of the `Convertible` suffix for both the `*LiteralConvertible` protocols and the `Custom(Debug)StringConvertible` protocols where the conversion runs in opposite directions.<br>&gt; <br>&gt; The core team decision was:<br>&gt; <br>&gt; &quot;The feedback on the proposal was generally positive about the idea of renaming these protocols, but the specific names in the proposal are not well received, and there is no apparent confluence in the community on better names.  The core team prefers discussion to continue -- if/when there is a strong proposal for a better naming approach, we can reconsider renaming these.&quot;<br>&gt; <br>&gt;&gt; <br>&gt;&gt; John.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; At the same time, it continues to bother me that `Convertible` is used by standard library protocols with two completely different meanings.  This is a problem that deserves to be solved and as it involves a breaking change Swift 3 is the right timeframe in which to do so.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If the core team is able to indicate an approach they favor I would be willing to revise and resubmit the proposal.  But I don’t want to spend any further time speculating about what solution might be considered acceptable.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Matthew<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; -- <br>&gt; Javier Soto<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/8dcf2ace/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>Swift 3 vs &quot;additive&quot; proposals</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>June 22, 2016 at 06:00:00pm</p></header><div class="content"><p>You might consider the topic I started about access modifier on extensions. LINK<br></p><p>Fixing this would be a breaking change, because:<br></p><p>if you never explicitly set public modifier the visibility would break<br>fixing implicit public modifier on extensions would mean fixing the problems with protocols + extensions, because right now its not possible to use access modifier when there are protocols attached to the extension.<br>There is no proposal yet, but there is almost no feedback on that topic as well.<br></p><p><br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 22. Juni 2016 um 18:48:45, John McCall via swift-evolution (swift-evolution at swift.org) schrieb:<br></p><p>On Jun 22, 2016, at 9:15 AM, Javier Soto &lt;javier.api at gmail.com&gt; wrote:<br>How would we evaluate the proposal to introduce the &quot;sealed&quot; specifier for classes (open within module, final outside of module) and default to that, in terms of source-code compatibility?<br>From my point of view it might be easier to do before Swift 3, but if delayed until Swift 4 it wouldn&#39;t be the most time-consuming breakage for developers.<br></p><p>I believe we consider this plan of record, actually, other than the spelling of the modifier.  It&#39;s something we probably ought to commit to in Swift 3, though.<br></p><p>John.<br></p><p>On Wed, Jun 22, 2016 at 9:09 AM Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>On Jun 22, 2016, at 10:59 AM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br></p><p><br>On Jun 22, 2016, at 8:17 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>Rationalizing base conversion protocol names. I personally don&#39;t have the heart to try to re-address the &quot;LiteralConvertible&quot; protocol naming thing again but this would be the last chance to do anything about getting this issue addressed.<br>Given the vast amount of bike shedding that has already happened around this topic, I don’t think there is a solution that everyone will be happy with.  It is also unclear (to me at least) what solution might be acceptable to the core team.  <br></p><p>To be clear, I don&#39;t care about the name.  If you want to rename IntegerLiteralConvertible to IntegerLiteral or whatever, I won&#39;t drag the conversation into the muck again. :)  It&#39;s the design of the requirements that I&#39;m pretty opposed to revisiting.<br></p><p>This is orthogonal to the discussion that happened in your thread, definitely no discussion of any changes to the requirements. :)<br></p><p>We are discussing this proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0041-conversion-protocol-conventions.md and specifically the use of the `Convertible` suffix for both the `*LiteralConvertible` protocols and the `Custom(Debug)StringConvertible` protocols where the conversion runs in opposite directions.<br></p><p>The core team decision was:<br></p><p>&quot;The feedback on the proposal was generally positive about the idea of renaming these protocols, but the specific names in the proposal are not well received, and there is no apparent confluence in the community on better names.  The core team prefers discussion to continue -- if/when there is a strong proposal for a better naming approach, we can reconsider renaming these.&quot;<br></p><p><br>John.<br></p><p><br>At the same time, it continues to bother me that `Convertible` is used by standard library protocols with two completely different meanings.  This is a problem that deserves to be solved and as it involves a breaking change Swift 3 is the right timeframe in which to do so.<br></p><p>If the core team is able to indicate an approach they favor I would be willing to revise and resubmit the proposal.  But I don’t want to spend any further time speculating about what solution might be considered acceptable.<br></p><p>Matthew<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>--<br>Javier Soto<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/967ec5fb/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>Swift 3 vs &quot;additive&quot; proposals</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>June 22, 2016 at 11:00:00am</p></header><div class="content"><p>Would sealed classes be able to be (unsafely) casted as non sealed classes?<br></p><p>&gt; On Jun 22, 2016, at 9:48 AM, John McCall via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Jun 22, 2016, at 9:15 AM, Javier Soto &lt;javier.api at gmail.com &lt;mailto:javier.api at gmail.com&gt;&gt; wrote:<br>&gt;&gt; How would we evaluate the proposal to introduce the &quot;sealed&quot; specifier for classes (open within module, final outside of module) and default to that, in terms of source-code compatibility? <br>&gt;&gt; From my point of view it might be easier to do before Swift 3, but if delayed until Swift 4 it wouldn&#39;t be the most time-consuming breakage for developers. <br>&gt; <br>&gt; I believe we consider this plan of record, actually, other than the spelling of the modifier.  It&#39;s something we probably ought to commit to in Swift 3, though.<br>&gt; <br>&gt; John.<br>&gt; <br>&gt;&gt; On Wed, Jun 22, 2016 at 9:09 AM Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; On Jun 22, 2016, at 10:59 AM, John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 22, 2016, at 8:17 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Rationalizing base conversion protocol names. I personally don&#39;t have the heart to try to re-address the &quot;LiteralConvertible&quot; protocol naming thing again but this would be the last chance to do anything about getting this issue addressed.<br>&gt;&gt;&gt;&gt; Given the vast amount of bike shedding that has already happened around this topic, I don’t think there is a solution that everyone will be happy with.  It is also unclear (to me at least) what solution might be acceptable to the core team.  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; To be clear, I don&#39;t care about the name.  If you want to rename IntegerLiteralConvertible to IntegerLiteral or whatever, I won&#39;t drag the conversation into the muck again. :)  It&#39;s the design of the requirements that I&#39;m pretty opposed to revisiting.<br>&gt;&gt; <br>&gt;&gt; This is orthogonal to the discussion that happened in your thread, definitely no discussion of any changes to the requirements. :)<br>&gt;&gt; <br>&gt;&gt; We are discussing this proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0041-conversion-protocol-conventions.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0041-conversion-protocol-conventions.md&gt; and specifically the use of the `Convertible` suffix for both the `*LiteralConvertible` protocols and the `Custom(Debug)StringConvertible` protocols where the conversion runs in opposite directions.<br>&gt;&gt; <br>&gt;&gt; The core team decision was:<br>&gt;&gt; <br>&gt;&gt; &quot;The feedback on the proposal was generally positive about the idea of renaming these protocols, but the specific names in the proposal are not well received, and there is no apparent confluence in the community on better names.  The core team prefers discussion to continue -- if/when there is a strong proposal for a better naming approach, we can reconsider renaming these.&quot;<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; John.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; At the same time, it continues to bother me that `Convertible` is used by standard library protocols with two completely different meanings.  This is a problem that deserves to be solved and as it involves a breaking change Swift 3 is the right timeframe in which to do so.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If the core team is able to indicate an approach they favor I would be willing to revise and resubmit the proposal.  But I don’t want to spend any further time speculating about what solution might be considered acceptable.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Matthew<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; -- <br>&gt;&gt; Javier Soto<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/a340e5b3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>Swift 3 vs &quot;additive&quot; proposals</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>June 22, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Jun 22, 2016, at 11:47 AM, Jose Cheyo Jimenez &lt;cheyo at masters3d.com&gt; wrote:<br>&gt; Would sealed classes be able to be (unsafely) casted as non sealed classes?<br></p><p>Sealed-ness doesn&#39;t change the type.  Casting doesn&#39;t come into it.<br></p><p>If you&#39;re asking if there would be a way to unsafely add subclasses, no, there would not.<br></p><p>John.<br></p><p>&gt; <br>&gt;&gt; On Jun 22, 2016, at 9:48 AM, John McCall via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 22, 2016, at 9:15 AM, Javier Soto &lt;javier.api at gmail.com &lt;mailto:javier.api at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; How would we evaluate the proposal to introduce the &quot;sealed&quot; specifier for classes (open within module, final outside of module) and default to that, in terms of source-code compatibility? <br>&gt;&gt;&gt; From my point of view it might be easier to do before Swift 3, but if delayed until Swift 4 it wouldn&#39;t be the most time-consuming breakage for developers. <br>&gt;&gt; <br>&gt;&gt; I believe we consider this plan of record, actually, other than the spelling of the modifier.  It&#39;s something we probably ought to commit to in Swift 3, though.<br>&gt;&gt; <br>&gt;&gt; John.<br>&gt;&gt; <br>&gt;&gt;&gt; On Wed, Jun 22, 2016 at 9:09 AM Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; On Jun 22, 2016, at 10:59 AM, John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jun 22, 2016, at 8:17 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Rationalizing base conversion protocol names. I personally don&#39;t have the heart to try to re-address the &quot;LiteralConvertible&quot; protocol naming thing again but this would be the last chance to do anything about getting this issue addressed.<br>&gt;&gt;&gt;&gt;&gt; Given the vast amount of bike shedding that has already happened around this topic, I don’t think there is a solution that everyone will be happy with.  It is also unclear (to me at least) what solution might be acceptable to the core team.  <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; To be clear, I don&#39;t care about the name.  If you want to rename IntegerLiteralConvertible to IntegerLiteral or whatever, I won&#39;t drag the conversation into the muck again. :)  It&#39;s the design of the requirements that I&#39;m pretty opposed to revisiting.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is orthogonal to the discussion that happened in your thread, definitely no discussion of any changes to the requirements. :)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We are discussing this proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0041-conversion-protocol-conventions.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0041-conversion-protocol-conventions.md&gt; and specifically the use of the `Convertible` suffix for both the `*LiteralConvertible` protocols and the `Custom(Debug)StringConvertible` protocols where the conversion runs in opposite directions.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The core team decision was:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &quot;The feedback on the proposal was generally positive about the idea of renaming these protocols, but the specific names in the proposal are not well received, and there is no apparent confluence in the community on better names.  The core team prefers discussion to continue -- if/when there is a strong proposal for a better naming approach, we can reconsider renaming these.&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; John.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; At the same time, it continues to bother me that `Convertible` is used by standard library protocols with two completely different meanings.  This is a problem that deserves to be solved and as it involves a breaking change Swift 3 is the right timeframe in which to do so.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; If the core team is able to indicate an approach they favor I would be willing to revise and resubmit the proposal.  But I don’t want to spend any further time speculating about what solution might be considered acceptable.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Matthew<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Javier Soto<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/36b5634d/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Swift 3 vs &quot;additive&quot; proposals</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>June 22, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Jun 22, 2016, at 11:48 AM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; On Jun 22, 2016, at 9:15 AM, Javier Soto &lt;javier.api at gmail.com &lt;mailto:javier.api at gmail.com&gt;&gt; wrote:<br>&gt;&gt; How would we evaluate the proposal to introduce the &quot;sealed&quot; specifier for classes (open within module, final outside of module) and default to that, in terms of source-code compatibility? <br>&gt;&gt; From my point of view it might be easier to do before Swift 3, but if delayed until Swift 4 it wouldn&#39;t be the most time-consuming breakage for developers. <br>&gt; <br>&gt; I believe we consider this plan of record, actually, other than the spelling of the modifier.  It&#39;s something we probably ought to commit to in Swift 3, though.<br></p><p>By “commit to in Swift 3” do you mean that it is likely the core team would introduce a proposal for this in Swift 3?<br></p><p>&gt; <br>&gt; John.<br>&gt; <br>&gt;&gt; On Wed, Jun 22, 2016 at 9:09 AM Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; On Jun 22, 2016, at 10:59 AM, John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 22, 2016, at 8:17 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Rationalizing base conversion protocol names. I personally don&#39;t have the heart to try to re-address the &quot;LiteralConvertible&quot; protocol naming thing again but this would be the last chance to do anything about getting this issue addressed.<br>&gt;&gt;&gt;&gt; Given the vast amount of bike shedding that has already happened around this topic, I don’t think there is a solution that everyone will be happy with.  It is also unclear (to me at least) what solution might be acceptable to the core team.  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; To be clear, I don&#39;t care about the name.  If you want to rename IntegerLiteralConvertible to IntegerLiteral or whatever, I won&#39;t drag the conversation into the muck again. :)  It&#39;s the design of the requirements that I&#39;m pretty opposed to revisiting.<br>&gt;&gt; <br>&gt;&gt; This is orthogonal to the discussion that happened in your thread, definitely no discussion of any changes to the requirements. :)<br>&gt;&gt; <br>&gt;&gt; We are discussing this proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0041-conversion-protocol-conventions.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0041-conversion-protocol-conventions.md&gt; and specifically the use of the `Convertible` suffix for both the `*LiteralConvertible` protocols and the `Custom(Debug)StringConvertible` protocols where the conversion runs in opposite directions.<br>&gt;&gt; <br>&gt;&gt; The core team decision was:<br>&gt;&gt; <br>&gt;&gt; &quot;The feedback on the proposal was generally positive about the idea of renaming these protocols, but the specific names in the proposal are not well received, and there is no apparent confluence in the community on better names.  The core team prefers discussion to continue -- if/when there is a strong proposal for a better naming approach, we can reconsider renaming these.&quot;<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; John.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; At the same time, it continues to bother me that `Convertible` is used by standard library protocols with two completely different meanings.  This is a problem that deserves to be solved and as it involves a breaking change Swift 3 is the right timeframe in which to do so.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If the core team is able to indicate an approach they favor I would be willing to revise and resubmit the proposal.  But I don’t want to spend any further time speculating about what solution might be considered acceptable.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Matthew<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; -- <br>&gt;&gt; Javier Soto<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/6229fbee/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>Swift 3 vs &quot;additive&quot; proposals</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>June 22, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jun 22, 2016, at 1:38 PM, Matthew Johnson &lt;matthew at anandabits.com&gt; wrote:<br>&gt;&gt; On Jun 22, 2016, at 11:48 AM, John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 22, 2016, at 9:15 AM, Javier Soto &lt;javier.api at gmail.com &lt;mailto:javier.api at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; How would we evaluate the proposal to introduce the &quot;sealed&quot; specifier for classes (open within module, final outside of module) and default to that, in terms of source-code compatibility? <br>&gt;&gt;&gt; From my point of view it might be easier to do before Swift 3, but if delayed until Swift 4 it wouldn&#39;t be the most time-consuming breakage for developers. <br>&gt;&gt; <br>&gt;&gt; I believe we consider this plan of record, actually, other than the spelling of the modifier.  It&#39;s something we probably ought to commit to in Swift 3, though.<br>&gt; <br>&gt; By “commit to in Swift 3” do you mean that it is likely the core team would introduce a proposal for this in Swift 3?<br></p><p>We might be able to put the decision off as part of the larger resilience feature, but I think it would be better to settle this in 3 if we can.  Who, exactly, authors the proposal is not settled; a community proposal would be welcome.<br></p><p>John.<br></p><p>&gt; <br>&gt;&gt; <br>&gt;&gt; John.<br>&gt;&gt; <br>&gt;&gt;&gt; On Wed, Jun 22, 2016 at 9:09 AM Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; On Jun 22, 2016, at 10:59 AM, John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jun 22, 2016, at 8:17 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Rationalizing base conversion protocol names. I personally don&#39;t have the heart to try to re-address the &quot;LiteralConvertible&quot; protocol naming thing again but this would be the last chance to do anything about getting this issue addressed.<br>&gt;&gt;&gt;&gt;&gt; Given the vast amount of bike shedding that has already happened around this topic, I don’t think there is a solution that everyone will be happy with.  It is also unclear (to me at least) what solution might be acceptable to the core team.  <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; To be clear, I don&#39;t care about the name.  If you want to rename IntegerLiteralConvertible to IntegerLiteral or whatever, I won&#39;t drag the conversation into the muck again. :)  It&#39;s the design of the requirements that I&#39;m pretty opposed to revisiting.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is orthogonal to the discussion that happened in your thread, definitely no discussion of any changes to the requirements. :)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We are discussing this proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0041-conversion-protocol-conventions.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0041-conversion-protocol-conventions.md&gt; and specifically the use of the `Convertible` suffix for both the `*LiteralConvertible` protocols and the `Custom(Debug)StringConvertible` protocols where the conversion runs in opposite directions.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The core team decision was:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &quot;The feedback on the proposal was generally positive about the idea of renaming these protocols, but the specific names in the proposal are not well received, and there is no apparent confluence in the community on better names.  The core team prefers discussion to continue -- if/when there is a strong proposal for a better naming approach, we can reconsider renaming these.&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; John.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; At the same time, it continues to bother me that `Convertible` is used by standard library protocols with two completely different meanings.  This is a problem that deserves to be solved and as it involves a breaking change Swift 3 is the right timeframe in which to do so.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; If the core team is able to indicate an approach they favor I would be willing to revise and resubmit the proposal.  But I don’t want to spend any further time speculating about what solution might be considered acceptable.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Matthew<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Javier Soto<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/7c0ee7ff/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c0eafab7106ab63b8db4025e57c1a8d2?s=50"></div><header><strong>Swift 3 vs &quot;additive&quot; proposals</strong> from <string>Javier Soto</string> &lt;javier.api at gmail.com&gt;<p>June 22, 2016 at 09:00:00pm</p></header><div class="content"><p>I&#39;ll work on a formal proposal for sealed by default :)<br></p><p>On Wed, Jun 22, 2016 at 1:43 PM John McCall &lt;rjmccall at apple.com&gt; wrote:<br></p><p>&gt; On Jun 22, 2016, at 1:38 PM, Matthew Johnson &lt;matthew at anandabits.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; On Jun 22, 2016, at 11:48 AM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt;<br>&gt; On Jun 22, 2016, at 9:15 AM, Javier Soto &lt;javier.api at gmail.com&gt; wrote:<br>&gt; How would we evaluate the proposal to introduce the &quot;sealed&quot; specifier for<br>&gt; classes (open within module, final outside of module) and default to that,<br>&gt; in terms of source-code compatibility?<br>&gt; From my point of view it might be easier to do before Swift 3, but if<br>&gt; delayed until Swift 4 it wouldn&#39;t be the most time-consuming breakage for<br>&gt; developers.<br>&gt;<br>&gt;<br>&gt; I believe we consider this plan of record, actually, other than the<br>&gt; spelling of the modifier.  It&#39;s something we probably ought to commit to in<br>&gt; Swift 3, though.<br>&gt;<br>&gt;<br>&gt; By “commit to in Swift 3” do you mean that it is likely the core team<br>&gt; would introduce a proposal for this in Swift 3?<br>&gt;<br>&gt;<br>&gt; We might be able to put the decision off as part of the larger resilience<br>&gt; feature, but I think it would be better to settle this in 3 if we can.<br>&gt; Who, exactly, authors the proposal is not settled; a community proposal<br>&gt; would be welcome.<br>&gt;<br>&gt; John.<br>&gt;<br>&gt;<br>&gt;<br>&gt; John.<br>&gt;<br>&gt; On Wed, Jun 22, 2016 at 9:09 AM Matthew Johnson via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; On Jun 22, 2016, at 10:59 AM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Jun 22, 2016, at 8:17 AM, Matthew Johnson via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;    - Rationalizing base conversion protocol names. I personally don&#39;t<br>&gt;&gt;    have the heart to try to re-address the &quot;LiteralConvertible&quot; protocol<br>&gt;&gt;    naming thing again but this would be the last chance to do anything about<br>&gt;&gt;    getting this issue addressed.<br>&gt;&gt;<br>&gt;&gt; Given the vast amount of bike shedding that has already happened around<br>&gt;&gt; this topic, I don’t think there is a solution that everyone will be happy<br>&gt;&gt; with.  It is also unclear (to me at least) what solution might be<br>&gt;&gt; acceptable to the core team.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; To be clear, I don&#39;t care about the name.  If you want to rename<br>&gt;&gt; IntegerLiteralConvertible to IntegerLiteral or whatever, I won&#39;t drag the<br>&gt;&gt; conversation into the muck again. :)  It&#39;s the design of the requirements<br>&gt;&gt; that I&#39;m pretty opposed to revisiting.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; This is orthogonal to the discussion that happened in your thread,<br>&gt;&gt; definitely no discussion of any changes to the requirements. :)<br>&gt;&gt;<br>&gt;&gt; We are discussing this proposal:<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0041-conversion-protocol-conventions.md and<br>&gt;&gt; specifically the use of the `Convertible` suffix for both the<br>&gt;&gt; `*LiteralConvertible` protocols and the `Custom(Debug)StringConvertible`<br>&gt;&gt; protocols where the conversion runs in opposite directions.<br>&gt;&gt;<br>&gt;&gt; The core team decision was:<br>&gt;&gt;<br>&gt;&gt; &quot;The feedback on the proposal was generally positive about the idea of<br>&gt;&gt; renaming these protocols, but the specific names in the proposal are not<br>&gt;&gt; well received, and there is no apparent confluence in the community on<br>&gt;&gt; better names.  The core team prefers discussion to continue -- if/when<br>&gt;&gt; there is a strong proposal for a better naming approach, we can reconsider<br>&gt;&gt; renaming these.&quot;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; John.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; At the same time, it continues to bother me that `Convertible` is used by<br>&gt;&gt; standard library protocols with two completely different meanings.  This is<br>&gt;&gt; a problem that deserves to be solved and as it involves a breaking change<br>&gt;&gt; Swift 3 is the right timeframe in which to do so.<br>&gt;&gt;<br>&gt;&gt; If the core team is able to indicate an approach they favor I would be<br>&gt;&gt; willing to revise and resubmit the proposal.  But I don’t want to spend any<br>&gt;&gt; further time speculating about what solution might be considered acceptable.<br>&gt;&gt;<br>&gt;&gt; Matthew<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt; --<br>&gt; Javier Soto<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>Javier Soto<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/c357c3be/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Swift 3 vs &quot;additive&quot; proposals</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>June 22, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Jun 22, 2016, at 4:29 PM, Javier Soto &lt;javier.api at gmail.com&gt; wrote:<br>&gt; <br>&gt; I&#39;ll work on a formal proposal for sealed by default :)<br></p><p>I have already been planning a proposal for sealed (in general) but didn’t think it fit with the goals of Swift 3 anymore (I had forgotten about the plan to make sealed the default).  <br></p><p>John, the modifier you allude to would be to allow inheritance outside the module, correct?  Would it also be appropriate to introduce `sealed`-like behavior for protocols (no protocol inheritance and / or conformance outside the module) along side sealed by default or should that still wait as it is purely additive?<br></p><p>The proposal(s) I am planning is intended to achieve exhaustive pattern matching for classes and protocols.<br></p><p>&gt; <br>&gt; On Wed, Jun 22, 2016 at 1:43 PM John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt; wrote:<br>&gt;&gt; On Jun 22, 2016, at 1:38 PM, Matthew Johnson &lt;matthew at anandabits.com &lt;mailto:matthew at anandabits.com&gt;&gt; wrote:<br>&gt;&gt;&gt; On Jun 22, 2016, at 11:48 AM, John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 22, 2016, at 9:15 AM, Javier Soto &lt;javier.api at gmail.com &lt;mailto:javier.api at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; How would we evaluate the proposal to introduce the &quot;sealed&quot; specifier for classes (open within module, final outside of module) and default to that, in terms of source-code compatibility? <br>&gt;&gt;&gt;&gt; From my point of view it might be easier to do before Swift 3, but if delayed until Swift 4 it wouldn&#39;t be the most time-consuming breakage for developers. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I believe we consider this plan of record, actually, other than the spelling of the modifier.  It&#39;s something we probably ought to commit to in Swift 3, though.<br>&gt;&gt; <br>&gt;&gt; By “commit to in Swift 3” do you mean that it is likely the core team would introduce a proposal for this in Swift 3?<br>&gt; <br>&gt; We might be able to put the decision off as part of the larger resilience feature, but I think it would be better to settle this in 3 if we can.  Who, exactly, authors the proposal is not settled; a community proposal would be welcome.<br>&gt; <br>&gt; John.<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; John.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Wed, Jun 22, 2016 at 9:09 AM Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; On Jun 22, 2016, at 10:59 AM, John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jun 22, 2016, at 8:17 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Rationalizing base conversion protocol names. I personally don&#39;t have the heart to try to re-address the &quot;LiteralConvertible&quot; protocol naming thing again but this would be the last chance to do anything about getting this issue addressed.<br>&gt;&gt;&gt;&gt;&gt;&gt; Given the vast amount of bike shedding that has already happened around this topic, I don’t think there is a solution that everyone will be happy with.  It is also unclear (to me at least) what solution might be acceptable to the core team.  <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; To be clear, I don&#39;t care about the name.  If you want to rename IntegerLiteralConvertible to IntegerLiteral or whatever, I won&#39;t drag the conversation into the muck again. :)  It&#39;s the design of the requirements that I&#39;m pretty opposed to revisiting.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This is orthogonal to the discussion that happened in your thread, definitely no discussion of any changes to the requirements. :)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; We are discussing this proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0041-conversion-protocol-conventions.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0041-conversion-protocol-conventions.md&gt; and specifically the use of the `Convertible` suffix for both the `*LiteralConvertible` protocols and the `Custom(Debug)StringConvertible` protocols where the conversion runs in opposite directions.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The core team decision was:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; &quot;The feedback on the proposal was generally positive about the idea of renaming these protocols, but the specific names in the proposal are not well received, and there is no apparent confluence in the community on better names.  The core team prefers discussion to continue -- if/when there is a strong proposal for a better naming approach, we can reconsider renaming these.&quot;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; John.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; At the same time, it continues to bother me that `Convertible` is used by standard library protocols with two completely different meanings.  This is a problem that deserves to be solved and as it involves a breaking change Swift 3 is the right timeframe in which to do so.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; If the core team is able to indicate an approach they favor I would be willing to revise and resubmit the proposal.  But I don’t want to spend any further time speculating about what solution might be considered acceptable.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Matthew<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; Javier Soto<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; -- <br>&gt; Javier Soto<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/85ad721e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c0eafab7106ab63b8db4025e57c1a8d2?s=50"></div><header><strong>Swift 3 vs &quot;additive&quot; proposals</strong> from <string>Javier Soto</string> &lt;javier.api at gmail.com&gt;<p>June 22, 2016 at 10:00:00pm</p></header><div class="content"><p>Hi Matthew. Sorry about that! I just saw your reply. I opened a PR with the<br>proposal already: https://github.com/apple/swift-<br>evolution/pull/376<br>I would be happy to work with you on improving the proposal. I think your<br>mention to sealed protocols is super interesting, but I think that could be<br>additive. It might be easier to discuss each of them separately.<br></p><p>On Wed, Jun 22, 2016 at 2:42 PM Matthew Johnson &lt;matthew at anandabits.com&gt;<br>wrote:<br></p><p>&gt; On Jun 22, 2016, at 4:29 PM, Javier Soto &lt;javier.api at gmail.com&gt; wrote:<br>&gt;<br>&gt; I&#39;ll work on a formal proposal for sealed by default :)<br>&gt;<br>&gt;<br>&gt; I have already been planning a proposal for sealed (in general) but didn’t<br>&gt; think it fit with the goals of Swift 3 anymore (I had forgotten about the<br>&gt; plan to make sealed the default).<br>&gt;<br>&gt; John, the modifier you allude to would be to allow inheritance outside the<br>&gt; module, correct?  Would it also be appropriate to introduce `sealed`-like<br>&gt; behavior for protocols (no protocol inheritance and / or conformance<br>&gt; outside the module) along side sealed by default or should that still wait<br>&gt; as it is purely additive?<br>&gt;<br>&gt; The proposal(s) I am planning is intended to achieve exhaustive pattern<br>&gt; matching for classes and protocols.<br>&gt;<br>&gt;<br>&gt; On Wed, Jun 22, 2016 at 1:43 PM John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt;<br>&gt;&gt; On Jun 22, 2016, at 1:38 PM, Matthew Johnson &lt;matthew at anandabits.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On Jun 22, 2016, at 11:48 AM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On Jun 22, 2016, at 9:15 AM, Javier Soto &lt;javier.api at gmail.com&gt; wrote:<br>&gt;&gt; How would we evaluate the proposal to introduce the &quot;sealed&quot; specifier<br>&gt;&gt; for classes (open within module, final outside of module) and default to<br>&gt;&gt; that, in terms of source-code compatibility?<br>&gt;&gt; From my point of view it might be easier to do before Swift 3, but if<br>&gt;&gt; delayed until Swift 4 it wouldn&#39;t be the most time-consuming breakage for<br>&gt;&gt; developers.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I believe we consider this plan of record, actually, other than the<br>&gt;&gt; spelling of the modifier.  It&#39;s something we probably ought to commit to in<br>&gt;&gt; Swift 3, though.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; By “commit to in Swift 3” do you mean that it is likely the core team<br>&gt;&gt; would introduce a proposal for this in Swift 3?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; We might be able to put the decision off as part of the larger resilience<br>&gt;&gt; feature, but I think it would be better to settle this in 3 if we can.<br>&gt;&gt; Who, exactly, authors the proposal is not settled; a community proposal<br>&gt;&gt; would be welcome.<br>&gt;&gt;<br>&gt;&gt; John.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; John.<br>&gt;&gt;<br>&gt;&gt; On Wed, Jun 22, 2016 at 9:09 AM Matthew Johnson via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; On Jun 22, 2016, at 10:59 AM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Jun 22, 2016, at 8:17 AM, Matthew Johnson via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;    - Rationalizing base conversion protocol names. I personally don&#39;t<br>&gt;&gt;&gt;    have the heart to try to re-address the &quot;LiteralConvertible&quot; protocol<br>&gt;&gt;&gt;    naming thing again but this would be the last chance to do anything about<br>&gt;&gt;&gt;    getting this issue addressed.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Given the vast amount of bike shedding that has already happened around<br>&gt;&gt;&gt; this topic, I don’t think there is a solution that everyone will be happy<br>&gt;&gt;&gt; with.  It is also unclear (to me at least) what solution might be<br>&gt;&gt;&gt; acceptable to the core team.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; To be clear, I don&#39;t care about the name.  If you want to rename<br>&gt;&gt;&gt; IntegerLiteralConvertible to IntegerLiteral or whatever, I won&#39;t drag the<br>&gt;&gt;&gt; conversation into the muck again. :)  It&#39;s the design of the requirements<br>&gt;&gt;&gt; that I&#39;m pretty opposed to revisiting.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; This is orthogonal to the discussion that happened in your thread,<br>&gt;&gt;&gt; definitely no discussion of any changes to the requirements. :)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; We are discussing this proposal:<br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0041-conversion-protocol-conventions.md and<br>&gt;&gt;&gt; specifically the use of the `Convertible` suffix for both the<br>&gt;&gt;&gt; `*LiteralConvertible` protocols and the `Custom(Debug)StringConvertible`<br>&gt;&gt;&gt; protocols where the conversion runs in opposite directions.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The core team decision was:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; &quot;The feedback on the proposal was generally positive about the idea of<br>&gt;&gt;&gt; renaming these protocols, but the specific names in the proposal are not<br>&gt;&gt;&gt; well received, and there is no apparent confluence in the community on<br>&gt;&gt;&gt; better names.  The core team prefers discussion to continue -- if/when<br>&gt;&gt;&gt; there is a strong proposal for a better naming approach, we can reconsider<br>&gt;&gt;&gt; renaming these.&quot;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; John.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; At the same time, it continues to bother me that `Convertible` is used<br>&gt;&gt;&gt; by standard library protocols with two completely different meanings.  This<br>&gt;&gt;&gt; is a problem that deserves to be solved and as it involves a breaking<br>&gt;&gt;&gt; change Swift 3 is the right timeframe in which to do so.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; If the core team is able to indicate an approach they favor I would be<br>&gt;&gt;&gt; willing to revise and resubmit the proposal.  But I don’t want to spend any<br>&gt;&gt;&gt; further time speculating about what solution might be considered acceptable.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Matthew<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Javier Soto<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt; Javier Soto<br>&gt;<br>&gt; --<br>Javier Soto<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/1637ff1b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Swift 3 vs &quot;additive&quot; proposals</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>June 22, 2016 at 06:00:00pm</p></header><div class="content"><p>Sent from my iPad<br></p><p>&gt; On Jun 22, 2016, at 5:01 PM, Javier Soto &lt;javier.api at gmail.com&gt; wrote:<br>&gt; <br>&gt; Hi Matthew. Sorry about that! I just saw your reply. I opened a PR with the proposal already: https://github.com/apple/swift-<br>&gt; evolution/pull/376<br>&gt; I would be happy to work with you on improving the proposal. I think your mention to sealed protocols is super interesting, but I think that could be additive. It might be easier to discuss each of them separately.<br></p><p>No problem!  The &quot;by default&quot; aspect is the most important part of your proposal and isn&#39;t something I was planning.  <br></p><p>I mentioned the proposal(s) I have in mind for a couple reasons.  Of course I wouldn&#39;t mind slipping something extra in if the core team thinks it makes sense.  <br></p><p>But more importantly, I mentioned this so future aspects of &#39;sealed&#39; can be considered in the design.  Specifically, in the case of protocols there are two avenues for sealing them - refinements by other protocols and conformances by types.  I haven&#39;t figured out the best way to make that distinction yet (if you have any ideas please chime in).  Ideally the path forward would be clear before your proposal is reviewed even if the addition for protocols happens after Swift 3.<br></p><p>-Matthew<br></p><p>&gt; <br>&gt; On Wed, Jun 22, 2016 at 2:42 PM Matthew Johnson &lt;matthew at anandabits.com&gt; wrote:<br>&gt;&gt;&gt; On Jun 22, 2016, at 4:29 PM, Javier Soto &lt;javier.api at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;ll work on a formal proposal for sealed by default :)<br>&gt;&gt; <br>&gt;&gt; I have already been planning a proposal for sealed (in general) but didn’t think it fit with the goals of Swift 3 anymore (I had forgotten about the plan to make sealed the default).  <br>&gt;&gt; <br>&gt;&gt; John, the modifier you allude to would be to allow inheritance outside the module, correct?  Would it also be appropriate to introduce `sealed`-like behavior for protocols (no protocol inheritance and / or conformance outside the module) along side sealed by default or should that still wait as it is purely additive?<br>&gt;&gt; <br>&gt;&gt; The proposal(s) I am planning is intended to achieve exhaustive pattern matching for classes and protocols.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Wed, Jun 22, 2016 at 1:43 PM John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; On Jun 22, 2016, at 1:38 PM, Matthew Johnson &lt;matthew at anandabits.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 22, 2016, at 11:48 AM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 22, 2016, at 9:15 AM, Javier Soto &lt;javier.api at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; How would we evaluate the proposal to introduce the &quot;sealed&quot; specifier for classes (open within module, final outside of module) and default to that, in terms of source-code compatibility? <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; From my point of view it might be easier to do before Swift 3, but if delayed until Swift 4 it wouldn&#39;t be the most time-consuming breakage for developers. <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I believe we consider this plan of record, actually, other than the spelling of the modifier.  It&#39;s something we probably ought to commit to in Swift 3, though.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; By “commit to in Swift 3” do you mean that it is likely the core team would introduce a proposal for this in Swift 3?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; We might be able to put the decision off as part of the larger resilience feature, but I think it would be better to settle this in 3 if we can.  Who, exactly, authors the proposal is not settled; a community proposal would be welcome.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; John.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; John.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Wed, Jun 22, 2016 at 9:09 AM Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 22, 2016, at 10:59 AM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 22, 2016, at 8:17 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Rationalizing base conversion protocol names. I personally don&#39;t have the heart to try to re-address the &quot;LiteralConvertible&quot; protocol naming thing again but this would be the last chance to do anything about getting this issue addressed.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Given the vast amount of bike shedding that has already happened around this topic, I don’t think there is a solution that everyone will be happy with.  It is also unclear (to me at least) what solution might be acceptable to the core team.  <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; To be clear, I don&#39;t care about the name.  If you want to rename IntegerLiteralConvertible to IntegerLiteral or whatever, I won&#39;t drag the conversation into the muck again. :)  It&#39;s the design of the requirements that I&#39;m pretty opposed to revisiting.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This is orthogonal to the discussion that happened in your thread, definitely no discussion of any changes to the requirements. :)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; We are discussing this proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0041-conversion-protocol-conventions.md and specifically the use of the `Convertible` suffix for both the `*LiteralConvertible` protocols and the `Custom(Debug)StringConvertible` protocols where the conversion runs in opposite directions.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; The core team decision was:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;The feedback on the proposal was generally positive about the idea of renaming these protocols, but the specific names in the proposal are not well received, and there is no apparent confluence in the community on better names.  The core team prefers discussion to continue -- if/when there is a strong proposal for a better naming approach, we can reconsider renaming these.&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; John.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; At the same time, it continues to bother me that `Convertible` is used by standard library protocols with two completely different meanings.  This is a problem that deserves to be solved and as it involves a breaking change Swift 3 is the right timeframe in which to do so.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If the core team is able to indicate an approach they favor I would be willing to revise and resubmit the proposal.  But I don’t want to spend any further time speculating about what solution might be considered acceptable.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Matthew<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Javier Soto<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Javier Soto<br>&gt; <br>&gt; -- <br>&gt; Javier Soto<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/7da61d96/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>Swift 3 vs &quot;additive&quot; proposals</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>June 22, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Jun 22, 2016, at 2:42 PM, Matthew Johnson &lt;matthew at anandabits.com&gt; wrote:<br>&gt;&gt; On Jun 22, 2016, at 4:29 PM, Javier Soto &lt;javier.api at gmail.com &lt;mailto:javier.api at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I&#39;ll work on a formal proposal for sealed by default :)<br>&gt; <br>&gt; I have already been planning a proposal for sealed (in general) but didn’t think it fit with the goals of Swift 3 anymore (I had forgotten about the plan to make sealed the default).  <br>&gt; <br>&gt; John, the modifier you allude to would be to allow inheritance outside the module, correct?  Would it also be appropriate to introduce `sealed`-like behavior for protocols (no protocol inheritance and / or conformance outside the module) along side sealed by default or should that still wait as it is purely additive?<br></p><p>That&#39;s additive.  &#39;sealed&#39; would be additive if it weren&#39;t primarily a proposal to change the default rule, but we clearly aren&#39;t going to default protocols that way.<br></p><p>&gt; The proposal(s) I am planning is intended to achieve exhaustive pattern matching for classes and protocols.<br></p><p>Subclass matching can never be exhaustive in Swift as it stands because the object can be an instance of the superclass.  You need to formalize abstract classes before you can define that case away.<br></p><p>That aside, I agree that this proposal should provide sufficient information for class/protocol exhaustiveness.  However, actually adding the language rule for that should be a separate proposal and is very unlikely to land in Swift 3.<br></p><p>John.<br></p><p>&gt; <br>&gt;&gt; <br>&gt;&gt; On Wed, Jun 22, 2016 at 1:43 PM John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; On Jun 22, 2016, at 1:38 PM, Matthew Johnson &lt;matthew at anandabits.com &lt;mailto:matthew at anandabits.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; On Jun 22, 2016, at 11:48 AM, John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jun 22, 2016, at 9:15 AM, Javier Soto &lt;javier.api at gmail.com &lt;mailto:javier.api at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; How would we evaluate the proposal to introduce the &quot;sealed&quot; specifier for classes (open within module, final outside of module) and default to that, in terms of source-code compatibility? <br>&gt;&gt;&gt;&gt;&gt; From my point of view it might be easier to do before Swift 3, but if delayed until Swift 4 it wouldn&#39;t be the most time-consuming breakage for developers. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I believe we consider this plan of record, actually, other than the spelling of the modifier.  It&#39;s something we probably ought to commit to in Swift 3, though.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; By “commit to in Swift 3” do you mean that it is likely the core team would introduce a proposal for this in Swift 3?<br>&gt;&gt; <br>&gt;&gt; We might be able to put the decision off as part of the larger resilience feature, but I think it would be better to settle this in 3 if we can.  Who, exactly, authors the proposal is not settled; a community proposal would be welcome.<br>&gt;&gt; <br>&gt;&gt; John.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; John.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Wed, Jun 22, 2016 at 9:09 AM Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; On Jun 22, 2016, at 10:59 AM, John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 22, 2016, at 8:17 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Rationalizing base conversion protocol names. I personally don&#39;t have the heart to try to re-address the &quot;LiteralConvertible&quot; protocol naming thing again but this would be the last chance to do anything about getting this issue addressed.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Given the vast amount of bike shedding that has already happened around this topic, I don’t think there is a solution that everyone will be happy with.  It is also unclear (to me at least) what solution might be acceptable to the core team.  <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; To be clear, I don&#39;t care about the name.  If you want to rename IntegerLiteralConvertible to IntegerLiteral or whatever, I won&#39;t drag the conversation into the muck again. :)  It&#39;s the design of the requirements that I&#39;m pretty opposed to revisiting.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; This is orthogonal to the discussion that happened in your thread, definitely no discussion of any changes to the requirements. :)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; We are discussing this proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0041-conversion-protocol-conventions.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0041-conversion-protocol-conventions.md&gt; and specifically the use of the `Convertible` suffix for both the `*LiteralConvertible` protocols and the `Custom(Debug)StringConvertible` protocols where the conversion runs in opposite directions.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The core team decision was:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; &quot;The feedback on the proposal was generally positive about the idea of renaming these protocols, but the specific names in the proposal are not well received, and there is no apparent confluence in the community on better names.  The core team prefers discussion to continue -- if/when there is a strong proposal for a better naming approach, we can reconsider renaming these.&quot;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; John.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; At the same time, it continues to bother me that `Convertible` is used by standard library protocols with two completely different meanings.  This is a problem that deserves to be solved and as it involves a breaking change Swift 3 is the right timeframe in which to do so.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; If the core team is able to indicate an approach they favor I would be willing to revise and resubmit the proposal.  But I don’t want to spend any further time speculating about what solution might be considered acceptable.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Matthew<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt; Javier Soto<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Javier Soto<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/ce387ed1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Swift 3 vs &quot;additive&quot; proposals</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>June 22, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Jun 22, 2016, at 6:12 PM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; On Jun 22, 2016, at 2:42 PM, Matthew Johnson &lt;matthew at anandabits.com &lt;mailto:matthew at anandabits.com&gt;&gt; wrote:<br>&gt;&gt;&gt; On Jun 22, 2016, at 4:29 PM, Javier Soto &lt;javier.api at gmail.com &lt;mailto:javier.api at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;ll work on a formal proposal for sealed by default :)<br>&gt;&gt; <br>&gt;&gt; I have already been planning a proposal for sealed (in general) but didn’t think it fit with the goals of Swift 3 anymore (I had forgotten about the plan to make sealed the default).  <br>&gt;&gt; <br>&gt;&gt; John, the modifier you allude to would be to allow inheritance outside the module, correct?  Would it also be appropriate to introduce `sealed`-like behavior for protocols (no protocol inheritance and / or conformance outside the module) along side sealed by default or should that still wait as it is purely additive?<br>&gt; <br>&gt; That&#39;s additive.  &#39;sealed&#39; would be additive if it weren&#39;t primarily a proposal to change the default rule, but we clearly aren&#39;t going to default protocols that way.<br></p><p>That’s what I thought, just making sure. :)<br></p><p>&gt; <br>&gt;&gt; The proposal(s) I am planning is intended to achieve exhaustive pattern matching for classes and protocols.<br>&gt; <br>&gt; Subclass matching can never be exhaustive in Swift as it stands because the object can be an instance of the superclass.  You need to formalize abstract classes before you can define that case away.<br></p><p>Actually my plan is to propose an “exact match” cast operator that allows for exhaustive pattern matching.  If we do get abstract classes that would allow an additional way for the compiler to prove exhaustiveness.<br></p><p>&gt; <br>&gt; That aside, I agree that this proposal should provide sufficient information for class/protocol exhaustiveness.  However, actually adding the language rule for that should be a separate proposal and is very unlikely to land in Swift 3.<br></p><p>That’s what I figured.  I’ll continue to sit on my ideas until we get past Swift 3.  <br></p><p>I would like to continue discussing what sealed protocols might look like so we can make sure this proposal aligns well with what we might want to do there.  The tricky part is how we distinguish a sealing conformances from sealing refinements (if we need to be able to do that).  For example, are there cases where we would want to prevent protocols from inheriting a protocol while still allowing new conformances?  And conversely, are there cases where we would want to allow new protocols to refine the protocol and existing conformances to be “upgraded” to the new refined protocol?  If we want to support those use cases how might we make the necessary distinction syntactically?<br></p><p>It seems like the right thing to do for classes is pretty obvious (aside from the exact name for the “unsealed” modifier).  But I will feel more confident that we are doing the right thing if we also have a reasonably good idea of what we might do for protocols as well.<br></p><p>-Matthew<br></p><p>&gt; <br>&gt; John.<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Wed, Jun 22, 2016 at 1:43 PM John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; On Jun 22, 2016, at 1:38 PM, Matthew Johnson &lt;matthew at anandabits.com &lt;mailto:matthew at anandabits.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; On Jun 22, 2016, at 11:48 AM, John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jun 22, 2016, at 9:15 AM, Javier Soto &lt;javier.api at gmail.com &lt;mailto:javier.api at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; How would we evaluate the proposal to introduce the &quot;sealed&quot; specifier for classes (open within module, final outside of module) and default to that, in terms of source-code compatibility? <br>&gt;&gt;&gt;&gt;&gt;&gt; From my point of view it might be easier to do before Swift 3, but if delayed until Swift 4 it wouldn&#39;t be the most time-consuming breakage for developers. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I believe we consider this plan of record, actually, other than the spelling of the modifier.  It&#39;s something we probably ought to commit to in Swift 3, though.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; By “commit to in Swift 3” do you mean that it is likely the core team would introduce a proposal for this in Swift 3?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We might be able to put the decision off as part of the larger resilience feature, but I think it would be better to settle this in 3 if we can.  Who, exactly, authors the proposal is not settled; a community proposal would be welcome.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; John.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; John.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Wed, Jun 22, 2016 at 9:09 AM Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 22, 2016, at 10:59 AM, John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 22, 2016, at 8:17 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Rationalizing base conversion protocol names. I personally don&#39;t have the heart to try to re-address the &quot;LiteralConvertible&quot; protocol naming thing again but this would be the last chance to do anything about getting this issue addressed.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Given the vast amount of bike shedding that has already happened around this topic, I don’t think there is a solution that everyone will be happy with.  It is also unclear (to me at least) what solution might be acceptable to the core team.  <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; To be clear, I don&#39;t care about the name.  If you want to rename IntegerLiteralConvertible to IntegerLiteral or whatever, I won&#39;t drag the conversation into the muck again. :)  It&#39;s the design of the requirements that I&#39;m pretty opposed to revisiting.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; This is orthogonal to the discussion that happened in your thread, definitely no discussion of any changes to the requirements. :)<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; We are discussing this proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0041-conversion-protocol-conventions.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0041-conversion-protocol-conventions.md&gt; and specifically the use of the `Convertible` suffix for both the `*LiteralConvertible` protocols and the `Custom(Debug)StringConvertible` protocols where the conversion runs in opposite directions.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The core team decision was:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; &quot;The feedback on the proposal was generally positive about the idea of renaming these protocols, but the specific names in the proposal are not well received, and there is no apparent confluence in the community on better names.  The core team prefers discussion to continue -- if/when there is a strong proposal for a better naming approach, we can reconsider renaming these.&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; John.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; At the same time, it continues to bother me that `Convertible` is used by standard library protocols with two completely different meanings.  This is a problem that deserves to be solved and as it involves a breaking change Swift 3 is the right timeframe in which to do so.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If the core team is able to indicate an approach they favor I would be willing to revise and resubmit the proposal.  But I don’t want to spend any further time speculating about what solution might be considered acceptable.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Matthew<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt;&gt; Javier Soto<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Javier Soto<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/110f91d6/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>Swift 3 vs &quot;additive&quot; proposals</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June 23, 2016 at 07:00:00pm</p></header><div class="content"><p>Regards<br>LM<br>(From mobile)<br></p><p>&gt; On Jun 22, 2016, at 11:29 PM, Javier Soto via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;ll work on a formal proposal for sealed by default :)<br>&gt; <br>&gt; On Wed, Jun 22, 2016 at 1:43 PM John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt; On Jun 22, 2016, at 1:38 PM, Matthew Johnson &lt;matthew at anandabits.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; On Jun 22, 2016, at 11:48 AM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jun 22, 2016, at 9:15 AM, Javier Soto &lt;javier.api at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; How would we evaluate the proposal to introduce the &quot;sealed&quot; specifier for classes (open within module, final outside of module) and default to that, in terms of source-code compatibility? <br></p><p>My limited (20y) exposure to software is that if most developers can make things work, few can do it cleanly... making &#39;sealed&#39; the default behavior across module boundary leaves me wandering... <br></p><p>&gt;&gt;&gt;&gt;&gt; From my point of view it might be easier to do before Swift 3, but if delayed until Swift 4 it wouldn&#39;t be the most time-consuming breakage for developers.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I believe we consider this plan of record, actually, other than the spelling of the modifier.  It&#39;s something we probably ought to commit to in Swift 3, though.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; By “commit to in Swift 3” do you mean that it is likely the core team would introduce a proposal for this in Swift 3?<br>&gt;&gt; <br>&gt;&gt; We might be able to put the decision off as part of the larger resilience feature, but I think it would be better to settle this in 3 if we can.  Who, exactly, authors the proposal is not settled; a community proposal would be welcome.<br>&gt;&gt; <br>&gt;&gt; John.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; John.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Wed, Jun 22, 2016 at 9:09 AM Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 22, 2016, at 10:59 AM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 22, 2016, at 8:17 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Rationalizing base conversion protocol names. I personally don&#39;t have the heart to try to re-address the &quot;LiteralConvertible&quot; protocol naming thing again but this would be the last chance to do anything about getting this issue addressed.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Given the vast amount of bike shedding that has already happened around this topic, I don’t think there is a solution that everyone will be happy with.  It is also unclear (to me at least) what solution might be acceptable to the core team.  <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; To be clear, I don&#39;t care about the name.  If you want to rename IntegerLiteralConvertible to IntegerLiteral or whatever, I won&#39;t drag the conversation into the muck again. :)  It&#39;s the design of the requirements that I&#39;m pretty opposed to revisiting.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; This is orthogonal to the discussion that happened in your thread, definitely no discussion of any changes to the requirements. :)<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; We are discussing this proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0041-conversion-protocol-conventions.md and specifically the use of the `Convertible` suffix for both the `*LiteralConvertible` protocols and the `Custom(Debug)StringConvertible` protocols where the conversion runs in opposite directions.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The core team decision was:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; &quot;The feedback on the proposal was generally positive about the idea of renaming these protocols, but the specific names in the proposal are not well received, and there is no apparent confluence in the community on better names.  The core team prefers discussion to continue -- if/when there is a strong proposal for a better naming approach, we can reconsider renaming these.&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; John.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; At the same time, it continues to bother me that `Convertible` is used by standard library protocols with two completely different meanings.  This is a problem that deserves to be solved and as it involves a breaking change Swift 3 is the right timeframe in which to do so.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If the core team is able to indicate an approach they favor I would be willing to revise and resubmit the proposal.  But I don’t want to spend any further time speculating about what solution might be considered acceptable.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Matthew<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt; Javier Soto<br>&gt; <br>&gt; -- <br>&gt; Javier Soto<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/78db9494/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>Swift 3 vs &quot;additive&quot; proposals</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>June 22, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jun 22, 2016, at 9:09 AM, Matthew Johnson &lt;matthew at anandabits.com&gt; wrote:<br>&gt;&gt; On Jun 22, 2016, at 10:59 AM, John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 22, 2016, at 8:17 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Rationalizing base conversion protocol names. I personally don&#39;t have the heart to try to re-address the &quot;LiteralConvertible&quot; protocol naming thing again but this would be the last chance to do anything about getting this issue addressed.<br>&gt;&gt;&gt; Given the vast amount of bike shedding that has already happened around this topic, I don’t think there is a solution that everyone will be happy with.  It is also unclear (to me at least) what solution might be acceptable to the core team.  <br>&gt;&gt; <br>&gt;&gt; To be clear, I don&#39;t care about the name.  If you want to rename IntegerLiteralConvertible to IntegerLiteral or whatever, I won&#39;t drag the conversation into the muck again. :)  It&#39;s the design of the requirements that I&#39;m pretty opposed to revisiting.<br>&gt; <br>&gt; This is orthogonal to the discussion that happened in your thread, definitely no discussion of any changes to the requirements. :)<br></p><p>Thank goodness. :)<br></p><p>&gt; We are discussing this proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0041-conversion-protocol-conventions.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0041-conversion-protocol-conventions.md&gt; and specifically the use of the `Convertible` suffix for both the `*LiteralConvertible` protocols and the `Custom(Debug)StringConvertible` protocols where the conversion runs in opposite directions.<br>&gt; <br>&gt; The core team decision was:<br>&gt; <br>&gt; &quot;The feedback on the proposal was generally positive about the idea of renaming these protocols, but the specific names in the proposal are not well received, and there is no apparent confluence in the community on better names.  The core team prefers discussion to continue -- if/when there is a strong proposal for a better naming approach, we can reconsider renaming these.&quot;<br></p><p>Yeah, I think we&#39;d love to see better names; there&#39;s just no consensus yet.<br></p><p>John.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/4ddef77a/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Swift 3 vs &quot;additive&quot; proposals</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June 22, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Jun 22, 2016, at 10:09 AM, Matthew Johnson &lt;matthew at anandabits.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Jun 22, 2016, at 10:59 AM, John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 22, 2016, at 8:17 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Rationalizing base conversion protocol names. I personally don&#39;t have the heart to try to re-address the &quot;LiteralConvertible&quot; protocol naming thing again but this would be the last chance to do anything about getting this issue addressed.<br>&gt;&gt;&gt; Given the vast amount of bike shedding that has already happened around this topic, I don’t think there is a solution that everyone will be happy with.  It is also unclear (to me at least) what solution might be acceptable to the core team.  <br>&gt;&gt; <br>&gt;&gt; To be clear, I don&#39;t care about the name.  If you want to rename IntegerLiteralConvertible to IntegerLiteral or whatever, I won&#39;t drag the conversation into the muck again. :)  It&#39;s the design of the requirements that I&#39;m pretty opposed to revisiting.<br>&gt; <br>&gt; This is orthogonal to the discussion that happened in your thread, definitely no discussion of any changes to the requirements. :)<br>&gt; <br>&gt; We are discussing this proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0041-conversion-protocol-conventions.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0041-conversion-protocol-conventions.md&gt; and specifically the use of the `Convertible` suffix for both the `*LiteralConvertible` protocols and the `Custom(Debug)StringConvertible` protocols where the conversion runs in opposite directions.<br>&gt; <br>&gt; The core team decision was:<br>&gt; <br>&gt; &quot;The feedback on the proposal was generally positive about the idea of renaming these protocols, but the specific names in the proposal are not well received, and there is no apparent confluence in the community on better names.  The core team prefers discussion to continue -- if/when there is a strong proposal for a better naming approach, we can reconsider renaming these.&quot;<br></p><p><br>We identified three categories:<br></p><p>* A protocol for types that can be initialized from specific types or protocols, e.g. created/initialized with strings (a specific type) or created/initialized with floating point numbers (conforming to a protocol). Current examples include &quot;IntegerLiteralConvertible&quot;.<br>* A protocol for types that can form a representation which may or may not provide a complete projection (the original may not be recoverable from that representation), e.g. &quot;CustomStringConvertible&quot; and &quot;CustomPlaygroundQuickLookable&quot; both fall into this. <br>* A protocol for isomorphism: can be converted to and from a type, e.g. &quot;RawRepresentable&quot;<br></p><p>This is really the last chance to rationalize this across the language and to evaluate whether other protocol groups should have a core scheme for naming.<br></p><p>-- E<br></p><p>p.s. AbsoluteValuable, AnyCollectionProtocol, AnyObject, ArrayLiteralConvertible, BidirectionalCollection, Collection, BidirectionalIndexable, BinaryFloatingPoint, FloatLiteralConvertible, BitwiseOperations, Boolean, BooleanLiteralConvertible, CVarArg, Collection, Sequence, Comparable, CustomDebugStringConvertible, CustomLeafReflectable, CustomPlaygroundQuickLookable, CustomReflectable, CustomStringConvertible, DictionaryLiteralConvertible, Equatable, ErrorProtocol, ExtendedGraphemeClusterLiteralConvertible, FloatLiteralConvertible, FloatingPoint, IntegerLiteralConvertible, SignedNumber, AbsoluteValuable, Strideable, Hashable, Indexable, IndexableBase, Integer : _Integer, Strideable, IntegerArithmetic : _IntegerArithmetic, Comparable, IntegerLiteralConvertible, IteratorProtocol, LazyCollectionProtocol, LazySequenceProtocol, LazySequenceProtocol, MirrorPath, MutableCollection, Collection, MutableIndexable, NilLiteralConvertible, OptionSet, RawRepresentable, OutputStream, RandomAccessCollection, BidirectionalCollection, RandomAccessIndexable, RangeReplaceableCollection, Collection, RangeReplaceableIndexable, RawRepresentable, Sequence, SetAlgebra, ArrayLiteralConvertible, SignedInteger : _SignedInteger, Integer, SignedNumber, IntegerLiteralConvertible, Streamable, Strideable, StringInterpolationConvertible, StringLiteralConvertible, UnicodeCodec, UnicodeScalarLiteralConvertible, UnsignedInteger : _DisallowMixedSignArithmetic, Integer, _DisallowMixedSignArithmetic : _Integer, _Incrementable, _Integer, CustomStringConvertible, Hashable, IntegerArithmetic, BitwiseOperations, _Incrementable, _IntegerArithmetic, _SequenceWrapper, _SignedInteger : _Integer, SignedNumber<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/d8ce0983/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>Swift 3 vs &quot;additive&quot; proposals</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>June 22, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Jun 22, 2016, at 7:59 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; On Jun 21, 2016, at 11:55 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi Everyone,<br>&gt;&gt; <br>&gt;&gt; As I mentioned before, the Swift 3 release is winding down.  There is still time left to make changes, but it is very short.  As such, we - as a community - need to stay focused on the goals for this release, principally the goal to get to source stability.  It is very important for users of Swift that Swift 3 and the Swift 4 compiler be as compatible as possible.  <br>&gt; <br>&gt; A few things on my radar.<br>&gt; <br>&gt; Fully breaking that won&#39;t be possible post Swift 3:<br>&gt; Rationalizing the first/last/prefix/suffix/drop/etc. methods.   Brent R-G said he&#39;d run with this. Discussion: http://article.gmane.org/gmane.comp.lang.swift.evolution/16334/ &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/16334/&gt;<br>&gt; Rationalizing base conversion protocol names. I personally don&#39;t have the heart to try to re-address the &quot;LiteralConvertible&quot; protocol naming thing again but this would be the last chance to do anything about getting this issue addressed.<br>&gt; Potentially code breaking:<br>&gt; Rationalizing for loops-in either by removing `where` (breaking) or completing the filter/break operations (additive but wordy). Discussion here (primarily during WWDC week): http://thread.gmane.org/gmane.comp.lang.swift.evolution/20142 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/20142&gt; My draft proposal &lt;https://github.com/erica/swift-evolution/blob/5703c94450dcf4a3bc941333d3fadd90a7bd4ad8/proposals/XXXX-whereloops.md&gt; also addresses `where` in switch and catch statements, which could be breaking if changed to `if`.<br>I agree that these would be breaking.<br>&gt; Redesigning de-init to allow you to declare cleanup operations at points where the dangerous operations are first invoked. Introduced by Graham Perks but ran into WWDC disruption of  discussion. Discussion here: http://thread.gmane.org/gmane.comp.lang.swift.evolution/20019 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/20019&gt; <br>&gt; Ending the strong-weak dance once and for all by allowing {self in} and [weak self] / guard let self = self, which would impact a lot of code more than be breaking in and of itself.<br>These two are additive.  We would not remove explicit captures or deinits.<br></p><p>John.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/a8f4b4a4/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5f463dd4e7af28b64ad8f0e032ee82dc?s=50"></div><header><strong>Swift 3 vs &quot;additive&quot; proposals</strong> from <string>Nate Cook</string> &lt;natecook at gmail.com&gt;<p>June 22, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Jun 22, 2016, at 9:59 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Jun 21, 2016, at 11:55 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi Everyone,<br>&gt;&gt; <br>&gt;&gt; As I mentioned before, the Swift 3 release is winding down.  There is still time left to make changes, but it is very short.  As such, we - as a community - need to stay focused on the goals for this release, principally the goal to get to source stability.  It is very important for users of Swift that Swift 3 and the Swift 4 compiler be as compatible as possible.  <br>&gt; <br>&gt; A few things on my radar.<br>&gt; <br>&gt; Fully breaking that won&#39;t be possible post Swift 3:<br>&gt; Rationalizing the first/last/prefix/suffix/drop/etc. methods.   Brent R-G said he&#39;d run with this. Discussion: http://article.gmane.org/gmane.comp.lang.swift.evolution/16334/ &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/16334/&gt;<br>&gt; Rationalizing base conversion protocol names. I personally don&#39;t have the heart to try to re-address the &quot;LiteralConvertible&quot; protocol naming thing again but this would be the last chance to do anything about getting this issue addressed.<br>&gt; Potentially code breaking:<br>&gt; Rationalizing for loops-in either by removing `where` (breaking) or completing the filter/break operations (additive but wordy). Discussion here (primarily during WWDC week): http://thread.gmane.org/gmane.comp.lang.swift.evolution/20142 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/20142&gt; My draft proposal &lt;https://github.com/erica/swift-evolution/blob/5703c94450dcf4a3bc941333d3fadd90a7bd4ad8/proposals/XXXX-whereloops.md&gt; also addresses `where` in switch and catch statements, which could be breaking if changed to `if`.<br>&gt; Redesigning de-init to allow you to declare cleanup operations at points where the dangerous operations are first invoked. Introduced by Graham Perks but ran into WWDC disruption of  discussion. Discussion here: http://thread.gmane.org/gmane.comp.lang.swift.evolution/20019 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/20019&gt; <br>&gt; Ending the strong-weak dance once and for all by allowing {self in} and [weak self] / guard let self = self, which would impact a lot of code more than be breaking in and of itself.<br>That&#39;s a great list, Erica—I&#39;d also add:<br>	- Closure parameter / argument label revisions from Dave Abrahams (upcoming)<br>	- Functional algorithm renaming from Patrick Pijnappel (upcoming)<br></p><p>I did a quick look through the proposals listed in schedule.md and the yet-to-be-merged proposals to see what might be source breaking. Without passing judgement on whether these should be scheduled, included, or accepted, this is what I came up with:<br></p><p>Merged Proposals<br></p><p>The merged proposals that are / have been in review are by some coincidence all source breaking. The two remaining unscheduled proposals are additive.<br></p><p>Breaking<br>SE-0086: Drop NS Prefix in Swift Foundation<br>SE-0103: Make non-escaping closures the default<br>SE-0077: Improved operator declarations<br>SE-0091: Improving operator requirements in protocols<br>SE-0089: Renaming String.init&lt;T&gt;(_: T)<br>SE-0101: Rename sizeof and related functions to comply with API Guidelines<br>SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type<br>SE-0103: Make non-escaping closures the default<br></p><p>Additive<br>SE-0079: Allow using optional binding to upgrade self from a weak to strong reference<br>SE-0100: Add sequence-based initializers and merge methods to Dictionary<br></p><p>Pull Requests<br></p><p>Of the proposals waiting to be merged, I counted six source-breaking changes plus another that would almost certainly have breaking follow-on effects in the standard library.<br></p><p>Breaking<br>#374 [WIP] Protocol oriented integers: Lots of big changes to the numerics system<br>#218 Throwing Properties and Subscripts proposal: Includes breaking changes to the C/ObjC importer<br>#365 Shorthand Argument Renaming: Would require changing $0, $1,... to #0, #1,...<br>#362 Removing Where Clauses from For-In Loops: Requires refactoring for-in loops that include where clauses<br>#354 Proposal: Allow Single Dollar Sign as Valid Identified: This would codify existing behavior that has been filed as a bug<br>#329 Proposal: Add last(where:) and lastIndex(where:) Methods to Collections: Renames existing index(of:) and index(where:) collection methods<br></p><p>In-between<br>#284 More Powerful Constraints for Associated Types: Additive, but has major ramifications for the stdlib that could be source-breaking<br>    <br>Additive<br>#372 [Proposal] Generic and Throwing Subscripts<br>#371 Enum case stored properties proposal	<br>#369 Conditional Compilation Blocks proposal 		<br>#367 Create NNNN-directional-index-methods.md<br>#366 Create NNNN-unboxing-anyindex.md<br>#353 #warning<br>#346 Introducing with to the Standard Library		<br>#328 Proposal: more lenient subscript methods over Collections	<br>#322 Multi-line string literal proposals<br>#247 Proposal: Factory Initializers<br>#211 Create 0052-enforcing_calling_super.md<br>#114 Deriving collections of enum cases<br>#103 Tail Call Optimization attribute and modifier<br>#140 Implementing `Comparable` On `NSOperatingSystemVersion`<br></p><p>Other<br>#370 Renaming the OS X Platform Conditional Compilation Test: Doug Gregor suggested this could just be implemented as a bug fix<br></p><p>-Nate<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/56f779d6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Swift 3 vs &quot;additive&quot; proposals</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June 22, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Jun 22, 2016, at 10:05 AM, Nate Cook &lt;natecook at gmail.com&gt; wrote:<br>&gt; Pull Requests<br>&gt; <br>&gt; Additive<br>&gt; #346 Introducing with to the Standard Library		<br></p><p>Yeah, mea culpa -- but mea culpa with a reason. Method cascades are not going to be in 3. This is intentionally a stop-gap additive feature specifically for 3, since it&#39;s so widely used in the dev community for both Swift constructs and Cocoa(touch) initialization. It&#39;s super easy-to-implement/add. If considered, it makes a lot of sense in the 3 timeframe. It makes less sense (although it&#39;s still useful) after 3.<br></p><p>&gt; Additive<br>&gt; #369 Conditional Compilation Blocks proposal 		<br></p><p>Definitely additive but it&#39;s stuff again that&#39;s extremely practical and has a big demand, all the way back to the first moments of open source, and it&#39;s pretty much all implemented as private methods now. <br></p><p>&gt; Other<br>&gt; #370 Renaming the OS X Platform Conditional Compilation Test: Doug Gregor suggested this could just be implemented as a bug fix<br></p><p>I&#39;ve put in the bug report. I tried implementing it myself, but apparently my compiler fu is not as strong as I hoped (although the errors in my patch seem to come from code I have absolutely nothing to do with -- I was thinking of throwing myself on Dmitri&#39;s mercy for that).<br></p><p>-- E<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/daa39932/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
