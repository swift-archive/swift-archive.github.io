<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e3efd2865da9728ccc523ac1e9a119f9?s=50"></div><header><strong>Equivalent of NS_SWIFT_UNAVAILABLE for non-methods?</strong> from <string>Matteo</string> &lt;matteo at mimecastercentral.com&gt;<p>July  6, 2016 at 10:00:00am</p></header><div class="content"><p>Suppose I have an existing enum in Obj-C such as:<br></p><p>typedef NS_OPTIONS(NSInteger, FoodType)<br>{<br>    dairyFood   = 1 &lt;&lt; 0,<br>    meatFood    = 1 &lt;&lt; 1,<br>    mushroomFood = 1 &lt;&lt; 2<br>};<br></p><p>I want to rename all the values so that swift code can use the shorter names. i.e<br></p><p>typedef NS_OPTIONS(NSInteger, FoodType)<br>{<br>    FoodDairy = 1 &lt;&lt; 0,<br>    FoodMeat = 1 &lt;&lt; 1,<br>    FoodMushroom = 1 &lt;&lt; 2<br>};<br></p><p>generates:<br></p><p>public struct FoodType : OptionSetType {<br>    public init(rawValue: Int)<br> <br>    public static var Dairy: FoodType { get }<br>    public static var Meat: FoodType { get }<br>    public static var Mushroom: FoodType { get }<br>}<br></p><p><br>But I still want the old names so as not to have to update all of the existing Obj-C code and mess up my SVN history.<br></p><p>At first I thought this would suffice:<br></p><p>typedef NS_OPTIONS(NSInteger, FoodType)<br>{<br>    FoodDairy = 1 &lt;&lt; 0,<br>    FoodMeat = 1 &lt;&lt; 1,<br>    FoodMushroom = 1 &lt;&lt; 2,<br></p><p>// Old names<br>dairyFood = FoodDairy,<br>meatFood = FoodMeat,<br>mushroomFood = FoodMushroom <br>};<br></p><p>but that prevents the generated interface using the shortened names since all the values don’t follow the same pattern:<br></p><p>public struct FoodType : OptionSetType {<br>    public init(rawValue: Int)<br>    <br>    public static var FoodDairy: FoodType { get }<br>    public static var FoodMeat: FoodType { get }<br>    public static var FoodMushroom: FoodType { get }<br>    <br>    public static var dairyFood: FoodType { get }<br>    public static var meatFood: FoodType { get }<br>    public static var mushroomFood: FoodType { get }<br>}<br></p><p>I was looking for something similar to NS_SWIFT_UNAVAILABLE such that I could do:<br></p><p>typedef NS_OPTIONS(NSInteger, FoodType)<br>{<br>    FoodDairy = 1 &lt;&lt; 0,<br>    FoodMeat = 1 &lt;&lt; 1,<br>  FoodMushroom = 1 &lt;&lt; 2,<br>  <br>  // Old names<br>  dairyFood = FoodDairy NS_SWIFT_UNAVAILABLE,<br>  meatFood = FoodMeat NS_SWIFT_UNAVALIBLE,<br>  mushroomFood = FoodMushroom NS_SWIFT_UNAVAILABLE<br>};<br></p><p>but NS_SWIFT_UNAVAILABLE can’t be used in this case.<br></p><p>So the only thing I seem to be able to do is #define the old names to the new names:<br>#define dairyFood   FoodDairy<br>etc etc<br></p><p>which hides them from the generated interface, but exposes those defines to the rest of the code and in a few cases caused unwanted substitutions to happen.<br></p><p>Is a non-#define way of doing this possible?<br></p><p>Cheers<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdfaf235f8338d6b577138a55817d3d9?s=50"></div><header><strong>Equivalent of NS_SWIFT_UNAVAILABLE for non-methods?</strong> from <string>Mark Dalrymple</string> &lt;markd at borkware.com&gt;<p>July  6, 2016 at 11:00:00am</p></header><div class="content"><p>It&#39;d be nice if there was a predefined macro to let you know if you&#39;re<br>inside of the header generation machinery.  Last time I grazed the compiler<br>it didn&#39;t set up any custom symbols in the preprocessor it uses for the<br>first stage of processing the generated header.  (rdar://27195567 - would<br>like a preprocessor symbol when building a generated interface)<br></p><p>If you want to get gross, the bridging header is just another header and<br>you can put your own defines in there - then look for it in your Food<br>Header: (not actually tested, Xcode8b2 is throwing a fit before I even<br>tried adding the #define. (rdar://27195434 - Some header files hang when<br>generating interface)<br></p><p>Project-Bridging-Header.h<br></p><p>...<br>#define SUPPRESS_OLD_FOOD 1<br>#import &quot;Foodies.h&quot;<br></p><p><br>Foodies.h<br></p><p>typedef NS_OPTIONS(NSInteger, FoodType)<br>{<br>    FoodDairy = 1 &lt;&lt; 0,<br>    FoodMeat = 1 &lt;&lt; 1,<br>    FoodMushroom = 1 &lt;&lt; 2,<br></p><p>#if !SUPPRESS_OLD_FOOD<br>// Old names<br>dairyFood = FoodDairy,<br>meatFood = FoodMeat,<br>mushroomFood = FoodMushroom<br>#endif<br>};<br></p><p>This has the unfortunate side effect (beyond making your bridging header<br>complicated) that Xcode&#39;s generated header preview won&#39;t take your macro<br>into account when previewing the generated interface.  (rdar://27195567 -<br>would like a preprocessor symbol, again)<br></p><p>Cheers,<br>++md<br></p><p><br></p><p>On Wed, Jul 6, 2016 at 6:03 AM, Matteo via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Suppose I have an existing enum in Obj-C such as:<br>&gt;<br>&gt; typedef NS_OPTIONS(NSInteger, FoodType)<br>&gt; {<br>&gt;     dairyFood   = 1 &lt;&lt; 0,<br>&gt;     meatFood    = 1 &lt;&lt; 1,<br>&gt;     mushroomFood = 1 &lt;&lt; 2<br>&gt; };<br>&gt;<br>&gt; I want to rename all the values so that swift code can use the shorter<br>&gt; names. i.e<br>&gt;<br>&gt; typedef NS_OPTIONS(NSInteger, FoodType)<br>&gt; {<br>&gt;     FoodDairy = 1 &lt;&lt; 0,<br>&gt;     FoodMeat = 1 &lt;&lt; 1,<br>&gt;     FoodMushroom = 1 &lt;&lt; 2<br>&gt; };<br>&gt;<br>&gt; generates:<br>&gt;<br>&gt; public struct FoodType : OptionSetType {<br>&gt;     public init(rawValue: Int)<br>&gt;<br>&gt;     public static var Dairy: FoodType { get }<br>&gt;     public static var Meat: FoodType { get }<br>&gt;     public static var Mushroom: FoodType { get }<br>&gt; }<br>&gt;<br>&gt;<br>&gt; But I still want the old names so as not to have to update all of the<br>&gt; existing Obj-C code and mess up my SVN history.<br>&gt;<br>&gt; At first I thought this would suffice:<br>&gt;<br>&gt; typedef NS_OPTIONS(NSInteger, FoodType)<br>&gt; {<br>&gt;     FoodDairy = 1 &lt;&lt; 0,<br>&gt;     FoodMeat = 1 &lt;&lt; 1,<br>&gt;     FoodMushroom = 1 &lt;&lt; 2,<br>&gt;<br>&gt; // Old names<br>&gt; dairyFood = FoodDairy,<br>&gt; meatFood = FoodMeat,<br>&gt; mushroomFood = FoodMushroom<br>&gt; };<br>&gt;<br>&gt; but that prevents the generated interface using the shortened names since<br>&gt; all the values don’t follow the same pattern:<br>&gt;<br>&gt; public struct FoodType : OptionSetType {<br>&gt;     public init(rawValue: Int)<br>&gt;<br>&gt;     public static var FoodDairy: FoodType { get }<br>&gt;     public static var FoodMeat: FoodType { get }<br>&gt;     public static var FoodMushroom: FoodType { get }<br>&gt;<br>&gt;     public static var dairyFood: FoodType { get }<br>&gt;     public static var meatFood: FoodType { get }<br>&gt;     public static var mushroomFood: FoodType { get }<br>&gt; }<br>&gt;<br>&gt; I was looking for something similar to NS_SWIFT_UNAVAILABLE such that I<br>&gt; could do:<br>&gt;<br>&gt; typedef NS_OPTIONS(NSInteger, FoodType)<br>&gt; {<br>&gt;     FoodDairy = 1 &lt;&lt; 0,<br>&gt;     FoodMeat = 1 &lt;&lt; 1,<br>&gt;   FoodMushroom = 1 &lt;&lt; 2,<br>&gt;<br>&gt;   // Old names<br>&gt;   dairyFood = FoodDairy NS_SWIFT_UNAVAILABLE,<br>&gt;   meatFood = FoodMeat NS_SWIFT_UNAVALIBLE,<br>&gt;   mushroomFood = FoodMushroom NS_SWIFT_UNAVAILABLE<br>&gt; };<br>&gt;<br>&gt; but NS_SWIFT_UNAVAILABLE can’t be used in this case.<br>&gt;<br>&gt; So the only thing I seem to be able to do is #define the old names to the<br>&gt; new names:<br>&gt; #define dairyFood   FoodDairy<br>&gt; etc etc<br>&gt;<br>&gt; which hides them from the generated interface, but exposes those defines<br>&gt; to the rest of the code and in a few cases caused unwanted substitutions to<br>&gt; happen.<br>&gt;<br>&gt; Is a non-#define way of doing this possible?<br>&gt;<br>&gt; Cheers<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160706/a2cb66a1/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdfaf235f8338d6b577138a55817d3d9?s=50"></div><header><strong>Equivalent of NS_SWIFT_UNAVAILABLE for non-methods?</strong> from <string>Mark Dalrymple</string> &lt;markd at borkware.com&gt;<p>July  6, 2016 at 11:00:00am</p></header><div class="content"><p>Another option is to rename them manually:<br></p><p><br>typedef NS_OPTIONS(NSInteger, FoodType)<br>{<br>    dairyFood NS_SWIFT_NAME(dairy)  = 1 &lt;&lt; 0 ,<br>    meatFood NS_SWIFT_NAME(meat)   = 1 &lt;&lt; 1 ,<br>    mushroomFood NS_SWIFT_NAME(mushroomMushroom) = 1 &lt;&lt; 2<br>};<br></p><p><br>On Wed, Jul 6, 2016 at 6:03 AM, Matteo via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Suppose I have an existing enum in Obj-C such as:<br>&gt;<br>&gt; typedef NS_OPTIONS(NSInteger, FoodType)<br>&gt; {<br>&gt;     dairyFood   = 1 &lt;&lt; 0,<br>&gt;     meatFood    = 1 &lt;&lt; 1,<br>&gt;     mushroomFood = 1 &lt;&lt; 2<br>&gt; };<br>&gt;<br>&gt; I want to rename all the values so that swift code can use the shorter<br>&gt; names. i.e<br>&gt;<br>&gt; typedef NS_OPTIONS(NSInteger, FoodType)<br>&gt; {<br>&gt;     FoodDairy = 1 &lt;&lt; 0,<br>&gt;     FoodMeat = 1 &lt;&lt; 1,<br>&gt;     FoodMushroom = 1 &lt;&lt; 2<br>&gt; };<br>&gt;<br>&gt; generates:<br>&gt;<br>&gt; public struct FoodType : OptionSetType {<br>&gt;     public init(rawValue: Int)<br>&gt;<br>&gt;     public static var Dairy: FoodType { get }<br>&gt;     public static var Meat: FoodType { get }<br>&gt;     public static var Mushroom: FoodType { get }<br>&gt; }<br>&gt;<br>&gt;<br>&gt; But I still want the old names so as not to have to update all of the<br>&gt; existing Obj-C code and mess up my SVN history.<br>&gt;<br>&gt; At first I thought this would suffice:<br>&gt;<br>&gt; typedef NS_OPTIONS(NSInteger, FoodType)<br>&gt; {<br>&gt;     FoodDairy = 1 &lt;&lt; 0,<br>&gt;     FoodMeat = 1 &lt;&lt; 1,<br>&gt;     FoodMushroom = 1 &lt;&lt; 2,<br>&gt;<br>&gt; // Old names<br>&gt; dairyFood = FoodDairy,<br>&gt; meatFood = FoodMeat,<br>&gt; mushroomFood = FoodMushroom<br>&gt; };<br>&gt;<br>&gt; but that prevents the generated interface using the shortened names since<br>&gt; all the values don’t follow the same pattern:<br>&gt;<br>&gt; public struct FoodType : OptionSetType {<br>&gt;     public init(rawValue: Int)<br>&gt;<br>&gt;     public static var FoodDairy: FoodType { get }<br>&gt;     public static var FoodMeat: FoodType { get }<br>&gt;     public static var FoodMushroom: FoodType { get }<br>&gt;<br>&gt;     public static var dairyFood: FoodType { get }<br>&gt;     public static var meatFood: FoodType { get }<br>&gt;     public static var mushroomFood: FoodType { get }<br>&gt; }<br>&gt;<br>&gt; I was looking for something similar to NS_SWIFT_UNAVAILABLE such that I<br>&gt; could do:<br>&gt;<br>&gt; typedef NS_OPTIONS(NSInteger, FoodType)<br>&gt; {<br>&gt;     FoodDairy = 1 &lt;&lt; 0,<br>&gt;     FoodMeat = 1 &lt;&lt; 1,<br>&gt;   FoodMushroom = 1 &lt;&lt; 2,<br>&gt;<br>&gt;   // Old names<br>&gt;   dairyFood = FoodDairy NS_SWIFT_UNAVAILABLE,<br>&gt;   meatFood = FoodMeat NS_SWIFT_UNAVALIBLE,<br>&gt;   mushroomFood = FoodMushroom NS_SWIFT_UNAVAILABLE<br>&gt; };<br>&gt;<br>&gt; but NS_SWIFT_UNAVAILABLE can’t be used in this case.<br>&gt;<br>&gt; So the only thing I seem to be able to do is #define the old names to the<br>&gt; new names:<br>&gt; #define dairyFood   FoodDairy<br>&gt; etc etc<br>&gt;<br>&gt; which hides them from the generated interface, but exposes those defines<br>&gt; to the rest of the code and in a few cases caused unwanted substitutions to<br>&gt; happen.<br>&gt;<br>&gt; Is a non-#define way of doing this possible?<br>&gt;<br>&gt; Cheers<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160706/618dfb47/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
