<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2ddf7419fbdd69635522af227c08327c?s=50"></div><header><strong>feedback on alternatives for importing libdispatch types into Swift on Liunx</strong> from <string>David P Grove</string> &lt;groved at us.ibm.com&gt;<p>February 25, 2016 at 06:00:00pm</p></header><div class="content"><p>Currently on Linux, the various libdispatch types (dispatch_object_t,<br>dispatch_queue_t, etc.) are imported into Swift as COpaquePointer on Linux.<br>This causes a number of problems including:<br>	(a) The intended subtyping relationships are lost, resulting in some<br>of the dispatch APIs not being usable (https://bugs.swift.org/browse/SR-737<br>)<br>	(b) The libdispatch types can&#39;t be used in Swift where AnyObject is<br>expected (https://bugs.swift.org/browse/SR-740)<br>	(c) In Swift code that manipulates values coming from libdispatch,<br>the expected retain/release operations are not generated by the compiler on<br>Linux.<br></p><p>I can see two obvious ways to tackle these issues (and perhaps other<br>problems with the same root cause I haven&#39;t encountered yet).<br>	(1) Stay with the current C-level code of libdispatch where<br>dispatch_object_t et al. simulate enough of the Objective-C object model<br>that they can masquerade as Objective-C objects. Convince the Swift<br>compiler to import them as Objective-C types on Linux even though there is<br>not an Objective-C runtime (just the stubbed out bits of it that are in<br>libdispatch).<br>	(2) Change the current C-level code of libdispatch so that on Linux<br>dispatch_object_t et al. simulate/implement enough of the Swift object<br>model that they can masquerade as Swift objects.  Convince the Swift<br>compiler to import them as Swift types.<br></p><p>My gut is that (2) is the more desirable path to pursue.  The main downside<br>I see is that it will likely make libdispatch.so dependent on<br>libswiftCore.so (to avoid replicating object model implementation<br>functions).<br></p><p>Before seriously starting down either path, I&#39;d like to get some guidance<br>on what experts think the desired outcome should be and if I&#39;ve overlooked<br>a better option.<br></p><p>thanks,<br></p><p>--dave<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160225/77b0888c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>feedback on alternatives for importing libdispatch types into Swift on Liunx</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>February 26, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Feb 25, 2016, at 3:34 PM, David P Grove via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Currently on Linux, the various libdispatch types (dispatch_object_t, dispatch_queue_t, etc.) are imported into Swift as COpaquePointer on Linux. This causes a number of problems including:<br>&gt; (a) The intended subtyping relationships are lost, resulting in some of the dispatch APIs not being usable (https://bugs.swift.org/browse/SR-737 &lt;https://bugs.swift.org/browse/SR-737&gt;)<br>&gt; (b) The libdispatch types can&#39;t be used in Swift where AnyObject is expected (https://bugs.swift.org/browse/SR-740 &lt;https://bugs.swift.org/browse/SR-740&gt;)<br>&gt; (c) In Swift code that manipulates values coming from libdispatch, the expected retain/release operations are not generated by the compiler on Linux.<br>&gt; <br>&gt; I can see two obvious ways to tackle these issues (and perhaps other problems with the same root cause I haven&#39;t encountered yet). <br>&gt; (1) Stay with the current C-level code of libdispatch where dispatch_object_t et al. simulate enough of the Objective-C object model that they can masquerade as Objective-C objects. Convince the Swift compiler to import them as Objective-C types on Linux even though there is not an Objective-C runtime (just the stubbed out bits of it that are in libdispatch).<br>&gt; (2) Change the current C-level code of libdispatch so that on Linux dispatch_object_t et al. simulate/implement enough of the Swift object model that they can masquerade as Swift objects. Convince the Swift compiler to import them as Swift types.<br>&gt; <br>&gt; My gut is that (2) is the more desirable path to pursue. The main downside I see is that it will likely make libdispatch.so dependent on libswiftCore.so (to avoid replicating object model implementation functions). <br>&gt; <br>&gt; Before seriously starting down either path, I&#39;d like to get some guidance on what experts think the desired outcome should be and if I&#39;ve overlooked a better option.<br>&gt; <br></p><p>I agree that (2) is preferable; it&#39;d be great if the entire corelibs platform could avoid needing to support multiple object models. You&#39;ll probably also have problems with blocks, which also aren&#39;t Swift-refcountable. We might be able to also customize the blocks runtime to use Swift refcounting as well. There&#39;s some trickiness there since global and stack blocks are ABI emitted by Clang, so swift-clang would need changes to match.<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160226/7edfa7cf/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2ddf7419fbdd69635522af227c08327c?s=50"></div><header><strong>feedback on alternatives for importing libdispatch types into Swift on Liunx</strong> from <string>David P Grove</string> &lt;groved at us.ibm.com&gt;<p>March  9, 2016 at 06:00:00pm</p></header><div class="content"><p>I&#39;ve made some progress on getting libdispatch types like dispatch_queue_t<br>to implement the Swift object model and be imported as Swift classes.  As<br>Joe suggested last week, I am attempting to implement the Swift object<br>model in libdispatch (and get the importer to realize that).<br></p><p>To simplify things, I created a tiny simulation of libdispatch [1] and used<br>it to explore options.   I think I&#39;ve ended up in a reasonable point, but<br>before actually making the changes for real in libdispatch and submitting<br>pull requests I want to get a sanity check on the approach.<br></p><p>Summary of the changes:<br>	1. In the ClangImporter, I added more Dispatch types to<br>MappedTypes.def and a new value, MappedCTypeKind::SwiftClass.<br></p><p>	2. In the simulated libdispatch, I define DISPATCH_RETURNS_RETAINED<br>to be __attribute__((cf_returns_retained)) instead of<br>__attribute__((__ns_returns_retained__))<br></p><p>	3. In the simulated libdispatch, I wired<br>dispatch_retain/dispatch_release to swift_retain/release.  I used<br>swift_allocObject to create instances of dispatch_queue_t, etc.<br></p><p>	4. In Dispatch.swift I define stub classes DispatchObject,<br>DispatchQueue, etc. in a class hierarchy.   I use the compiler-generated<br>metadata for these classes when calling swift_allocObject for the isa<br>pointer.<br></p><p><br>The changes to ClangImporter can be browsed at [2].<br></p><p>thanks for any feedback,<br></p><p>--dave<br></p><p>[1] https://github.com/dgrove-oss/swift-object-model-experiments<br>[2] https://github.com/dgrove-oss/swift/tree/dispatch-import-exploration<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160309/21530bb9/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
