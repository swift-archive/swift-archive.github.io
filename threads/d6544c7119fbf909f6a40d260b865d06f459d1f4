<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>Strider with &#39;from&#39;, &#39;to&#39;, &#39;by &#39;and &#39;tolerance&#39; parameters .</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>March  4, 2016 at 12:00:00am</p></header><div class="content"><p>Hello. <br>P R E L I M I N A R Y<br>I have made a strider as described here:<br>it has been built in playground. <br></p><p>// Implementation of a strider function<br>// with *from* *to* *by* and *tolerance* values<br></p><p>/// StriderGenerator<br>/// constructor parms:<br>///     from:   start value.<br>///     to:     end value.<br>///     by:     stepping value.<br>///     tolerance:  this should be a value that makes sense in relation to the range magnitude.<br></p><p>///  Functional description:<br>///     Strides through a range, bounded by &#39;from&#39; and &#39;to&#39;, moving with the amount in &#39;by&#39;.<br>///     A tolerance value is applied with bounds-testing because floating point numbers have a finite<br>///     precision, due to storage limitations of today&#39;s computers.<br>///     Note that it is also possibe to move backwards e.g.<br>///     for val in 10.0.strider(to: -10 , by: 0.5, tolerance: 0.0001)<br>///<br>///  made by Ted van Gaalen, based upon previously existing examples of strider variants<br>///  as found in swift-evolution.org<br>///  3.3.2016<br>///<br>///  This code runs OK in Xcode Playground, however:<br>///  WARNING! This code has yet to be tested more thoroughly before applying/installing it!<br>///<br></p><p><br>public struct StriderGenerator : GeneratorType<br>{<br>    private let low: Double<br>    private let high: Double<br>    private var step : Double<br>    private var tol  : Double<br></p><p>    private var iterator  = 0<br></p><p>    private let moveForward: Bool<br>    <br>    private var done  = false<br>        <br>    <br>    public init(from: Double, to: Double, by: Double, tolerance: Double)<br>    {<br>        step = by<br>        if from &lt; to<br>        {<br>            low  = from<br>            high = to<br>            moveForward = true<br>        }<br>        else<br>        {<br>            low  = to<br>            high = from<br>            moveForward = false<br>        }<br>        self.tol   = tolerance * 0.5  // center it.<br>    }<br>    <br>    /// return next value or nil, if no next<br>    /// element exists.<br>    <br>    public mutating func next() -&gt; Double?<br>    {<br>        let current:Double<br>        if done<br>        {<br>            return nil<br>        }<br>        <br>        if moveForward<br>        {<br>            current = low + Double(iterator) * step<br>        }<br>        else<br>        {<br>            current = high - Double(iterator) * step<br>        }<br>        iterator += 1<br>        <br>        <br>        // done if exceeding low or highlimits + tolerance<br>        <br>        done = current &gt; high   + tol  ||<br>               current &lt; low    - tol<br>        <br>        if done<br>        {<br>            return nil<br>        }<br>        else<br>        {<br>            return current<br>        }<br>    }<br>}<br></p><p><br>public struct Strider : SequenceType   // Aragorn<br>{<br>    private let start:  Double<br>    private let end:    Double<br>    private let step:   Double<br>    private let tol:    Double<br></p><p>    init(from: Double, to: Double, by: Double, tolerance : Double)<br>    {<br>        _precondition(by &gt; 0.0 ,<br>            &quot;Init of struct Strider: &#39;by:...&#39; value must be &gt; 0.0.&quot;)<br>        _precondition(abs(by) &gt; tolerance,<br>            &quot;Init of struct Strider: &#39;by:...&#39; value must be &gt; tolerance.&quot;)<br>        _precondition(tolerance &gt;= 0.0,<br>            &quot;Init of struct Strider: tolerance:... value must be &gt;= 0.0&quot;)<br>        <br>        start = from<br>        end   = to;<br>        step  = by<br>        tol   = tolerance<br>    }<br>    <br>    /// Return a *generator* over the elements of this *sequence*.<br>    <br>    public func generate() -&gt; StriderGenerator<br>    {<br>        return StriderGenerator(from: start, to: end, by: step, tolerance:  tol)<br>    }<br>}<br></p><p>public extension Double<br>{<br>    <br>    public func strider(to to: Double, by: Double, tolerance: Double ) -&gt; Strider<br>    {<br>        return Strider( from: self, to: to, by: by, tolerance: tolerance)<br>    }<br>}<br></p><p>print(&quot;Testing the new .strider extension&quot;)<br></p><p>let testvalues =<br>[<br>    // fr:     to:     by:   tolerance:<br>    [ 0.0,     5.0,    1.0,    0.0 ],<br>    [-3.0,     4.0,    0.12,   0.1 ],<br>    [ 2.0,    -1.0,    0.34,   0.1  ],<br>    [ 0.001,  -0.002,  0.0001, 0.00001 ]<br>]<br></p><p>for parm in testvalues<br>{<br>    <br>    print(&quot;==============Stride from: \(parm[0]) to: \(parm[1]) by: \(parm[2]) tolerance: \(parm[3])\n&quot;)<br>    <br>    for val in parm[0].strider(to: parm[1], by: parm[2], tolerance: parm[3])<br>    {<br>        print(&quot;\(val) &quot;, terminator:&quot;&quot;)<br>    }<br>    print(&quot;\n\n&quot;)<br>}<br></p><p>Hereunder are a few test results from the above code running in Xcode Playground, <br>More testing is needed (anyone ?),<br>just fill up the 2d array â€˜testvalues&#39;<br>Of course suggestions for improvements are welcome.<br></p><p>Kind Regards from a Dutch programmer who lives in southern Germany<br></p><p>TedvG<br></p><p><br></p><p> <br></p><p>==============Stride from: 0.0 to: 5.0 by: 1.0 tolerance: 0.0<br></p><p>0.0 1.0 2.0 3.0 4.0 5.0 <br></p><p><br>==============Stride from: -3.0 to: 4.0 by: 0.12 tolerance: 0.1<br></p><p>-3.0 -2.88 -2.76 -2.64 -2.52 -2.4 -2.28 -2.16 -2.04 -1.92 -1.8 -1.68 -1.56 -1.44 -1.32 -1.2 -1.08 -0.96 -0.84 -0.72 -0.6 -0.48 -0.36 -0.24 -0.12 0.0 0.12 0.24 0.36 0.48 0.6 0.72 0.84 0.96 1.08 1.2 1.32 1.44 1.56 1.68 1.8 1.92 2.04 2.16 2.28 2.4 2.52 2.64 2.76 2.88 3.0 3.12 3.24 3.36 3.48 3.6 3.72 3.84 3.96 <br></p><p><br>==============Stride from: 2.0 to: -1.0 by: 0.34 tolerance: 0.1<br></p><p>2.0 1.66 1.32 0.98 0.64 0.3 -0.04 -0.38 -0.72 <br></p><p><br>==============Stride from: 0.001 to: -0.002 by: 0.0001 tolerance: 1e-05<br></p><p>0.001 0.0009 0.0008 0.0007 0.0006 0.0005 0.0004 0.0003 0.0002 9.99999999999999e-05 0.0 -0.0001 -0.0002 -0.0003 -0.0004 -0.0005 -0.0006 -0.0007 -0.0008 -0.0009 -0.001 -0.0011 -0.0012 -0.0013 -0.0014 -0.0015 -0.0016 -0.0017 -0.0018 -0.0019 -0.002 <br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160304/d654d1f4/attachment-0001.html&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
