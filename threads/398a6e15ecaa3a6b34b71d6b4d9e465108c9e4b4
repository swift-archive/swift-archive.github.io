<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/268e1090c88890a4ed2387a4d22c661c?s=50"></div><header><strong>lazy initialisation</strong> from <string>J.E. Schotsman</string> &lt;jeschot at xs4all.nl&gt;<p>July  4, 2016 at 07:00:00pm</p></header><div class="content"><p>Hello,<br></p><p>I need to initialize a variable of a class with a closure using the value of some variables of the class.<br>Since this is not permitted I thought I might solve the problem by declaring it lazy. But this is still rejected by the compiler.<br>If there are no circular dependencies in initialization of lazy variables this could be allowed, couldn’t it?<br>Or is this a very big if?<br></p><p>My workaround is ugly: a calculated property + a private variable + an initialized:Bool variable.<br></p><p>Jan E.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>lazy initialisation</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>July  5, 2016 at 01:00:00am</p></header><div class="content"><p>You&#39;d better sharing some of you code here first.<br></p><p>Zhaoxin<br></p><p>On Tue, Jul 5, 2016 at 1:04 AM, J.E. Schotsman via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Hello,<br>&gt;<br>&gt; I need to initialize a variable of a class with a closure using the value<br>&gt; of some variables of the class.<br>&gt; Since this is not permitted I thought I might solve the problem by<br>&gt; declaring it lazy. But this is still rejected by the compiler.<br>&gt; If there are no circular dependencies in initialization of lazy variables<br>&gt; this could be allowed, couldn’t it?<br>&gt; Or is this a very big if?<br>&gt;<br>&gt; My workaround is ugly: a calculated property + a private variable + an<br>&gt; initialized:Bool variable.<br>&gt;<br>&gt; Jan E.<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160705/e599429e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/268e1090c88890a4ed2387a4d22c661c?s=50"></div><header><strong>lazy initialisation</strong> from <string>J.E. Schotsman</string> &lt;jeschot at xs4all.nl&gt;<p>July  4, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On 04 Jul 2016, at 19:21, Zhao Xin &lt;owenzx at gmail.com&gt; wrote:<br>&gt; <br>&gt; You&#39;d better sharing some of you code here first. <br></p><p>For example, consider this:<br></p><p>class TestStruct1<br>	{<br>	let a = 10<br>	let b = 20<br>	let c:Int = {return self.a*self.b}()<br>	}<br></p><p>Of course this is a trivial example. In reality the calculation of c from a and b might take longer.<br></p><p>Since this is not allowed I try<br></p><p>struct TestStruct2<br>	{<br>	let a = 10<br>	let b = 20<br>	lazy var c:Int = {return a*b}()<br>	}<br></p><p>Not allowed either even though neither a nor b is lazy.<br>I have to do<br></p><p>struct TestStruct3<br>	{<br>	let a = 10<br>	let b = 20<br></p><p>	private var cInitialized = false<br>	private var _c = 0<br>	var c:Int<br>	 {<br>	 mutating get {<br>	if !cInitialized<br>		{<br>		_c = a*b<br>		cInitialized = true<br>		}<br>	 return _c }<br>	 }<br>	}<br></p><p>BTW I pasted Mark’s code in a playground and it compiles indeed.<br>What’s the difference?<br></p><p>Jan E.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdfaf235f8338d6b577138a55817d3d9?s=50"></div><header><strong>lazy initialisation</strong> from <string>Mark Dalrymple</string> &lt;markd at borkware.com&gt;<p>July  4, 2016 at 03:00:00pm</p></header><div class="content"><p>Here&#39;s the one I started with:<br></p><p>   lazy var c:Int = {return a*b}()<br></p><p>and ended up with:<br></p><p>    lazy var c:Int = {return self.a * self.b}()<br></p><p>It&#39;s in a closure, so need to explicitly reference self.<br></p><p>Cheers,<br>++md<br></p><p><br></p><p>On Mon, Jul 4, 2016 at 3:04 PM, J.E. Schotsman via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On 04 Jul 2016, at 19:21, Zhao Xin &lt;owenzx at gmail.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; You&#39;d better sharing some of you code here first.<br>&gt;<br>&gt; For example, consider this:<br>&gt;<br>&gt; class TestStruct1<br>&gt;         {<br>&gt;         let a = 10<br>&gt;         let b = 20<br>&gt;         let c:Int = {return self.a*self.b}()<br>&gt;         }<br>&gt;<br>&gt; Of course this is a trivial example. In reality the calculation of c from<br>&gt; a and b might take longer.<br>&gt;<br>&gt; Since this is not allowed I try<br>&gt;<br>&gt; struct TestStruct2<br>&gt;         {<br>&gt;         let a = 10<br>&gt;         let b = 20<br>&gt;         lazy var c:Int = {return a*b}()<br>&gt;         }<br>&gt;<br>&gt; Not allowed either even though neither a nor b is lazy.<br>&gt; I have to do<br>&gt;<br>&gt; struct TestStruct3<br>&gt;         {<br>&gt;         let a = 10<br>&gt;         let b = 20<br>&gt;<br>&gt;         private var cInitialized = false<br>&gt;         private var _c = 0<br>&gt;         var c:Int<br>&gt;          {<br>&gt;          mutating get {<br>&gt;         if !cInitialized<br>&gt;                 {<br>&gt;                 _c = a*b<br>&gt;                 cInitialized = true<br>&gt;                 }<br>&gt;          return _c }<br>&gt;          }<br>&gt;         }<br>&gt;<br>&gt; BTW I pasted Mark’s code in a playground and it compiles indeed.<br>&gt; What’s the difference?<br>&gt;<br>&gt; Jan E.<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160704/a2369d44/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/268e1090c88890a4ed2387a4d22c661c?s=50"></div><header><strong>lazy initialisation</strong> from <string>J.E. Schotsman</string> &lt;jeschot at xs4all.nl&gt;<p>July  4, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On 04 Jul 2016, at 21:12, Mark Dalrymple &lt;markd at borkware.com&gt; wrote:<br>&gt; <br>&gt; lazy var c:Int = {return self.a * self.b}()<br>&gt; <br>&gt; It&#39;s in a closure, so need to explicitly reference self.<br></p><p>Oh of course, I got tripped up by the similarity of TestStruct1 and TestStruct2.<br>Problem solved.<br></p><p>BTW this compiles:<br></p><p><br>			struct TestStruct2<br>				{<br>				lazy var c:Int = {return self.d}()<br>				lazy var d:Int = {return self.c}()<br>				}<br></p><p>and causes a stack overflow:<br></p><p>var x = TestStruct2()<br>let y = x.c<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>lazy initialisation</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>July  4, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On 4 Jul 2016, at 21:12, Mark Dalrymple via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Here&#39;s the one I started with:<br>&gt; <br>&gt;    lazy var c:Int = {return a*b}()<br>&gt; <br>&gt; and ended up with:<br>&gt; <br>&gt;     lazy var c:Int = {return self.a * self.b}()<br>&gt; <br>&gt; It&#39;s in a closure, so need to explicitly reference self.<br>&gt; <br>&gt; Cheers,<br>&gt; ++md<br>&gt; <br></p><p><br>I’ve been hitting this myself. I think it’s a bug -- yes, you are technically in a closure, but the closure does not capture ‘self’ beyond the lifetime of ‘self’. In this context, ’self’ should automatically be ‘unowned’.<br></p><p>Karl<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160704/b073024a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>lazy initialisation</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>July  5, 2016 at 09:00:00am</p></header><div class="content"><p>No, it is not a bug.<br></p><p>For a closure, you have to call self explicitly unless the closure is mark<br>as @noescape. Also, in this situation, self is not unowned, as the closure<br>is not stored, it ran and released. Below, is a situation that you need use<br>unowned self. Here the closure is stored in variable d instead of running<br>and releasing.<br></p><p>    lazy var d:()-&gt;Int = { [unowned self] in<br>        return self.a*self.b<br>    }<br></p><p>Zhaoxin<br></p><p>On Tue, Jul 5, 2016 at 3:42 AM, Karl via swift-users &lt;swift-users at swift.org&gt;<br>wrote:<br></p><p>&gt;<br>&gt; On 4 Jul 2016, at 21:12, Mark Dalrymple via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; Here&#39;s the one I started with:<br>&gt;<br>&gt;    lazy var c:Int = {return a*b}()<br>&gt;<br>&gt; and ended up with:<br>&gt;<br>&gt;     lazy var c:Int = {return self.a * self.b}()<br>&gt;<br>&gt; It&#39;s in a closure, so need to explicitly reference self.<br>&gt;<br>&gt; Cheers,<br>&gt; ++md<br>&gt;<br>&gt;<br>&gt;<br>&gt; I’ve been hitting this myself. I think it’s a bug -- yes, you are<br>&gt; technically in a closure, but the closure does not capture ‘self’ beyond<br>&gt; the lifetime of ‘self’. In this context, ’self’ should automatically be<br>&gt; ‘unowned’.<br>&gt;<br>&gt; Karl<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160705/754e199f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>lazy initialisation</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>July  9, 2016 at 01:00:00am</p></header><div class="content"><p>&gt; On 5 Jul 2016, at 03:47, Zhao Xin &lt;owenzx at gmail.com&gt; wrote:<br>&gt; <br>&gt; No, it is not a bug.<br>&gt; <br>&gt; For a closure, you have to call self explicitly unless the closure is mark as @noescape. Also, in this situation, self is not unowned, as the closure is not stored, it ran and released. Below, is a situation that you need use unowned self. Here the closure is stored in variable d instead of running and releasing.<br>&gt; <br>&gt;     lazy var d:()-&gt;Int = { [unowned self] in<br>&gt;         return self.a*self.b<br>&gt;     }<br>&gt; <br>&gt; Zhaoxin<br></p><p>In this specific case, when you are initialising from a closure, there is no need to make the capture of ‘self’ explicit and it’s totally safe for it to be unowned. You can’t invoke the closure without going through a valid instance, and that instance always owns the closure and never the other way around.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160709/3f48f805/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>lazy initialisation</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>July  9, 2016 at 12:00:00pm</p></header><div class="content"><p>The compiler is not smart enough to treat this as you think, nor it will be<br>designed to. According to the documents, it is the developer‘s burden ​to<br>add @noescape or weak or unowned. So I disagree it is a bug.<br></p><p>Zhaoxin<br></p><p>On Sat, Jul 9, 2016 at 7:30 AM, Karl &lt;razielim at gmail.com&gt; wrote:<br></p><p>&gt;<br>&gt; On 5 Jul 2016, at 03:47, Zhao Xin &lt;owenzx at gmail.com&gt; wrote:<br>&gt;<br>&gt; No, it is not a bug.<br>&gt;<br>&gt; For a closure, you have to call self explicitly unless the closure is mark<br>&gt; as @noescape. Also, in this situation, self is not unowned, as the closure<br>&gt; is not stored, it ran and released. Below, is a situation that you need use<br>&gt; unowned self. Here the closure is stored in variable d instead of running<br>&gt; and releasing.<br>&gt;<br>&gt;     lazy var d:()-&gt;Int = { [unowned self] in<br>&gt;         return self.a*self.b<br>&gt;     }<br>&gt;<br>&gt; Zhaoxin<br>&gt;<br>&gt;<br>&gt; In this specific case, when you are initialising from a closure, there is<br>&gt; no need to make the capture of ‘self’ explicit and it’s totally safe for it<br>&gt; to be unowned. You can’t invoke the closure without going through a valid<br>&gt; instance, and that instance always owns the closure and never the other way<br>&gt; around.<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160709/b68e004a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>lazy initialisation</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>July 10, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On 9 Jul 2016, at 06:34, Zhao Xin &lt;owenzx at gmail.com&gt; wrote:<br>&gt; <br>&gt; The compiler is not smart enough to treat this as you think, nor it will be designed to. According to the documents, it is the developer‘s burden ​to add @noescape or weak or unowned. So I disagree it is a bug.<br>&gt; <br>&gt; Zhaoxin<br>&gt; <br>&gt; On Sat, Jul 9, 2016 at 7:30 AM, Karl &lt;razielim at gmail.com &lt;mailto:razielim at gmail.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On 5 Jul 2016, at 03:47, Zhao Xin &lt;owenzx at gmail.com &lt;mailto:owenzx at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; No, it is not a bug.<br>&gt;&gt; <br>&gt;&gt; For a closure, you have to call self explicitly unless the closure is mark as @noescape. Also, in this situation, self is not unowned, as the closure is not stored, it ran and released. Below, is a situation that you need use unowned self. Here the closure is stored in variable d instead of running and releasing.<br>&gt;&gt; <br>&gt;&gt;     lazy var d:()-&gt;Int = { [unowned self] in<br>&gt;&gt;         return self.a*self.b<br>&gt;&gt;     }<br>&gt;&gt; <br>&gt;&gt; Zhaoxin<br>&gt; <br>&gt; In this specific case, when you are initialising from a closure, there is no need to make the capture of ‘self’ explicit and it’s totally safe for it to be unowned. You can’t invoke the closure without going through a valid instance, and that instance always owns the closure and never the other way around.<br>&gt; <br></p><p><br>I know that the compiler doesn’t do this today, but I disagree that it will never have enough information to make inferences like this. It would simply be an adaptation of ARC to Swift - you don’t have these kind of attached lazy closures in Obj-C, so there was never any need for it. They run in the context of the instance just like a getter would, so they should have the same properties as a getter (including implicit ‘self’).<br></p><p>In general though, I think we are moving to “property behaviours”, which may need something like this in general. You would want to use unowned references in a stored property behaviour object; any retains/releases would be unnecessary. I’m sure we’ll talk about it more when that gets further along.<br></p><p>Karl<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160710/7b07dedd/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdfaf235f8338d6b577138a55817d3d9?s=50"></div><header><strong>lazy initialisation</strong> from <string>Mark Dalrymple</string> &lt;markd at borkware.com&gt;<p>July  4, 2016 at 01:00:00pm</p></header><div class="content"><p>This works for me<br></p><p><br>class Blorg: NSObject, URLSessionDelegate {<br></p><p>    var config: URLSessionConfiguration<br></p><p><br></p><p>    lazy var session: URLSession = {<br></p><p>        print(&quot;howdy&quot;)<br></p><p>        return URLSession(configuration: self.config, delegate: self,<br>delegateQueue: nil)<br></p><p>    }()<br></p><p><br></p><p>    override init() {<br></p><p>        config = URLSessionConfiguration.default()<br></p><p>    }<br></p><p>}<br></p><p>Cheers,<br>++md<br></p><p><br>On Mon, Jul 4, 2016 at 1:04 PM, J.E. Schotsman via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Hello,<br>&gt;<br>&gt; I need to initialize a variable of a class with a closure using the value<br>&gt; of some variables of the class.<br>&gt; Since this is not permitted I thought I might solve the problem by<br>&gt; declaring it lazy. But this is still rejected by the compiler.<br>&gt; If there are no circular dependencies in initialization of lazy variables<br>&gt; this could be allowed, couldn’t it?<br>&gt; Or is this a very big if?<br>&gt;<br>&gt; My workaround is ugly: a calculated property + a private variable + an<br>&gt; initialized:Bool variable.<br>&gt;<br>&gt; Jan E.<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160704/ba315580/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
