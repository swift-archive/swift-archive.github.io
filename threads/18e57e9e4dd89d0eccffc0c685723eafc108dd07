<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/46520baee6c64b0aa858ccfcec77f131?s=50"></div><header><strong>Cross compilation for linux failed on Mac</strong> from <string>Iliya Trub</string> &lt;itrub at yandex.ru&gt;<p>March 17, 2016 at 10:00:00pm</p></header><div class="content"><p>Dear colleagues,<br>It seems to me, something was happened with cross-compilation on MacOS. I have successfully built all libraries for 32-bit ARM architecture and then built applications and libraries on Ubuntu 15 with x86_64 Swift compiler, pointing out --target=armv7-unknown-linux-gnueabi and placing arm-libraries at convenient places.<br>Then I built from the same sources swift-compiler on Macintosh and tried to do the same, but swiftc wrote, that target armv7-unknown-linux-gnueabi (or arm-linux-gnueabi)<br>is unknown for it! I exactly remember, that two months ago cross-compilation on Mac worked with target=arm-linux-gnueabi, but now does not.<br>I continued experiments and found, that swiftc recognizes target=armv7-apple-macosx10.11<br>I pointed out this target and placed libraries and modules, but I received:<br></p><p>module file was created by a newer version of the compiler:    &lt;path to arm Swift.swiftmodule&gt;<br></p><p>I was wondered, because sources are absolutely the same.<br>Output of swiftc --version  on Mac:<br>Swift version 3.0-dev (LLVM 0d07a5d3d5, Clang 11493b0f62, Swift c6a0f51611)<br>Target: x86_64-apple-macosx10.9<br></p><p>Output of swiftc --version on ARM-emulator:<br>Swift version 3.0-dev (LLVM , Clang , Swift )<br>Target: armv7l-unknown-linux-gnueabi<br></p><p>How you can explain all these things? May be, cross-compilation on Mac is now prohibited for linux platforms? I can not imagine other reasons.<br>Thanks in advance for answer.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/46520baee6c64b0aa858ccfcec77f131?s=50"></div><header><strong>Cross compilation for linux failed on Mac</strong> from <string>Iliya Trub</string> &lt;itrub at yandex.ru&gt;<p>March 20, 2016 at 10:00:00pm</p></header><div class="content"><p>So, I cancel my question since it was incorrect. I pointed out arm-linux target with &quot;xcrun -sdk macosx&quot; before swiftc, so all targets unless native were rejected. But I have once more interesting question about compiler behaviour.<br>All below written actions are done on Mac. I invoke swiftc:<br>1) without xcrun<br>2) with native target x86_64-apple-macosx10.9<br>3) with -c option and one short-length source .swift-file, that create simple custom ObjC instance<br>4) with -import-objc-header option and name of .h-file, that contains one line #import &quot;C.h&quot;, where my simple custom interface is declared<br>5) with Xcc -I options, which contain paths to ObjC open source frameworks and ObjC open source runtime (not native)<br>The result is bridging header is successfully imported, so open source frameworks, pointed out at XCcc -I, are found and used.<br></p><p>Then let us do another experiment. Write --target=arm-linux-gnueabi and add -I&lt;path to armv7-linux-gnueabi swift.swiftmodule&gt;, where arm-linux module was build within native environment on linux host. In that case, bridging header import is failed, code failed within CLangImporter::importHeader() since many, many errors in clang diagnostics: cland does not understand any ObjC expression or classname in my headers and can not build AST. I think, this phenomena is explained by some differences in swift.swiftmodule, built on mac and on linux. So, my question is: what just exactly this difference is? What part of swift.swiftmodule is reponsible for such behaviour and where this part is analyzed in compiler source code? Thanks in advance for answer this interesting question.<br></p><p><br>17.03.2016, 22:32, &quot;Труб Илья via swift-dev&quot; &lt;swift-dev at swift.org&gt;:<br>&gt; Dear colleagues,<br>&gt; It seems to me, something was happened with cross-compilation on MacOS. I have successfully built all libraries for 32-bit ARM architecture and then built applications and libraries on Ubuntu 15 with x86_64 Swift compiler, pointing out --target=armv7-unknown-linux-gnueabi and placing arm-libraries at convenient places.<br>&gt; Then I built from the same sources swift-compiler on Macintosh and tried to do the same, but swiftc wrote, that target armv7-unknown-linux-gnueabi (or arm-linux-gnueabi)<br>&gt; is unknown for it! I exactly remember, that two months ago cross-compilation on Mac worked with target=arm-linux-gnueabi, but now does not.<br>&gt; I continued experiments and found, that swiftc recognizes target=armv7-apple-macosx10.11<br>&gt; I pointed out this target and placed libraries and modules, but I received:<br>&gt;<br>&gt; module file was created by a newer version of the compiler: &lt;path to arm Swift.swiftmodule&gt;<br>&gt;<br>&gt; I was wondered, because sources are absolutely the same.<br>&gt; Output of swiftc --version on Mac:<br>&gt; Swift version 3.0-dev (LLVM 0d07a5d3d5, Clang 11493b0f62, Swift c6a0f51611)<br>&gt; Target: x86_64-apple-macosx10.9<br>&gt;<br>&gt; Output of swiftc --version on ARM-emulator:<br>&gt; Swift version 3.0-dev (LLVM , Clang , Swift )<br>&gt; Target: armv7l-unknown-linux-gnueabi<br>&gt;<br>&gt; How you can explain all these things? May be, cross-compilation on Mac is now prohibited for linux platforms? I can not imagine other reasons.<br>&gt; Thanks in advance for answer.<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
