<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c65faa002b79348ac10e1fb9c1a9ad83?s=50"></div><header><strong>Proposal: Re-instate mandatory self for accessing	instance properties and functions</strong> from <string>Colin Cornaby</string> &lt;colin.cornaby at mac.com&gt;<p>December  4, 2015 at 11:00:00pm</p></header><div class="content"><p>+1<br></p><p>I&#39;ve had a lot of weird things happen that I&#39;ve traced to mistakes in properties having the same name as function arguments. I&#39;ve hardly ever had this issue in modern Obj-C.<br></p><p>I&#39;m a little more ok with functions not needing self as it&#39;s less likely for those to shadow something like an argument, but I guess the consistency would be nice too.<br></p><p>On Dec 04, 2015, at 01:20 PM, David Hart &lt;david at hartbit.com&gt; wrote:<br></p><p>I don&#39;t understand the reasoning behind removing the need to access instance properties and functions using self. Swift has always seemed to prefer readability to brevity and the feature makes the distinction between local and instance variables/functions crystal clear. Any good reason I shouldn&#39;t go on with the proposition?<br></p><p>Just as example, my proposition makes the following piece of code illegal:<br></p><p>```<br>struct FooBar {<br>var foo: String = &quot;foobar&quot;<br></p><p>func bar() {<br>print(foo) // compiler error<br>print(self.foo) // compiler happy<br>}<br></p><p>func bar2() {<br>bar() // compiler error<br>self.bar() // compiler happy<br>}<br>}<br>```<br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/d4b8d3e8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>Proposal: Re-instate mandatory self for accessing instance properties and functions</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>December  4, 2015 at 03:00:00pm</p></header><div class="content"><p>Do you use Xcode to edit Swift? Xcode gives a color to<br>properties/methods and doesn&#39;t color local variables/arguments. Is that<br>not sufficient to distinguish this? In my experience the color is<br>actually better than seeing the explicit `self.` because the color can<br>be recognized faster than reading a word, and is visible in a high-level<br>&quot;squint&quot; view of the function.<br></p><p>If you&#39;re using another editor, well, my best suggestion there is to<br>look into what it would take to integrate SourceKit functionality into<br>that editor for more intelligent coloring :)<br></p><p>-Kevin<br></p><p>On Fri, Dec 4, 2015, at 03:29 PM, Colin Cornaby wrote:<br>&gt; +1<br>&gt;<br>&gt; I&#39;ve had a lot of weird things happen that I&#39;ve traced to mistakes in<br>&gt; properties having the same name as function arguments. I&#39;ve hardly<br>&gt; ever had this issue in modern Obj-C.<br>&gt;<br>&gt; I&#39;m a little more ok with functions not needing self as it&#39;s less<br>&gt; likely for those to shadow something like an argument, but I guess the<br>&gt; consistency would be nice too.<br>&gt;<br>&gt; On Dec 04, 2015, at 01:20 PM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt;&gt; I don&#39;t understand the reasoning behind removing the need to access<br>&gt;&gt; instance properties and functions using self. Swift has always seemed<br>&gt;&gt; to prefer readability to brevity and the feature makes the<br>&gt;&gt; distinction between local and instance variables/functions crystal<br>&gt;&gt; clear. Any good reason I shouldn&#39;t go on with the proposition?<br>&gt;&gt;<br>&gt;&gt; Just as example, my proposition makes the following piece of code<br>&gt;&gt; illegal:<br>&gt;&gt;<br>&gt;&gt; ``` struct FooBar { var foo: String = &quot;foobar&quot;<br>&gt;&gt;<br>&gt;&gt;  func bar() { print(foo) // compiler error print(self.foo) //<br>&gt;&gt;  compiler happy }<br>&gt;&gt;<br>&gt;&gt;  func bar2() { bar() // compiler error self.bar() // compiler happy<br>&gt;&gt;  } } ```<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _________________________________________________<br>&gt; swift-evolution mailing list swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/8dfd0be3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/44b9c3e92a40313850fdbc2cb0abdef7?s=50"></div><header><strong>Proposal: Re-instate mandatory self for accessing instance properties and functions</strong> from <string>Jon Shier</string> &lt;jon at jonshier.com&gt;<p>December  4, 2015 at 07:00:00pm</p></header><div class="content"><p>Relying on syntax highlighting to convey rather important diagnostic issues is a bad idea for a variety of reason, not least of which is the fact that the highlighting can be customized in such a way as to render the distinction between scopes invisible. Not to mention the fact that Xcode’s syntax highlighting is especially poor by modern IDE standards, often failing to properly highlight code and susceptible to SourceKit crashes at swiftc’s whim. But even if Xcode’s highlighting had been updated in the last 5 years, it still wouldn’t be a good idea.<br>	I love the removal of the self requirement, but the aliasing mentioned by Colin Cornaby is a real issue. Rather than requiring self in all instances, perhaps some additional diagnostics would be in line where the compiler detects aliasing against self properties. Of course, there are still contexts in which aliasing is perfectly fine, like an if let, but most of the time it seems like swiftc is rather lax about pointing out shadowing in the name of safety.<br></p><p><br>Jon Shier<br></p><p><br>&gt; On Dec 4, 2015, at 6:37 PM, Kevin Ballard &lt;kevin at sb.org&gt; wrote:<br>&gt; <br>&gt; Do you use Xcode to edit Swift? Xcode gives a color to properties/methods and doesn&#39;t color local variables/arguments. Is that not sufficient to distinguish this? In my experience the color is actually better than seeing the explicit `self.` because the color can be recognized faster than reading a word, and is visible in a high-level &quot;squint&quot; view of the function.<br>&gt;  <br>&gt; If you&#39;re using another editor, well, my best suggestion there is to look into what it would take to integrate SourceKit functionality into that editor for more intelligent coloring :)<br>&gt;  <br>&gt; -Kevin<br>&gt;  <br>&gt; On Fri, Dec 4, 2015, at 03:29 PM, Colin Cornaby wrote:<br>&gt;&gt; +1<br>&gt;&gt;  <br>&gt;&gt; I&#39;ve had a lot of weird things happen that I&#39;ve traced to mistakes in properties having the same name as function arguments. I&#39;ve hardly ever had this issue in modern Obj-C.<br>&gt;&gt;  <br>&gt;&gt; I&#39;m a little more ok with functions not needing self as it&#39;s less likely for those to shadow something like an argument, but I guess the consistency would be nice too.<br>&gt;&gt;  <br>&gt;&gt; On Dec 04, 2015, at 01:20 PM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt;&gt;&gt; I don&#39;t understand the reasoning behind removing the need to access instance properties and functions using self. Swift has always seemed to prefer readability to brevity and the feature makes the distinction between local and instance variables/functions crystal clear. Any good reason I shouldn&#39;t go on with the proposition?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Just as example, my proposition makes the following piece of code illegal:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; struct FooBar {<br>&gt;&gt;&gt; var foo: String = &quot;foobar&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func bar() {<br>&gt;&gt;&gt; print(foo) // compiler error<br>&gt;&gt;&gt; print(self.foo) // compiler happy<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func bar2() {<br>&gt;&gt;&gt; bar() // compiler error<br>&gt;&gt;&gt; self.bar() // compiler happy<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/d3445b84/attachment-0001.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>Proposal: Re-instate mandatory self for accessing instance properties and functions</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>December  4, 2015 at 11:00:00pm</p></header><div class="content"><p>I&#39;m not sure how many Swift users this effects, but I&#39;m colorblind and I really struggle with the local vs properties syntax coloring.<br></p><p>Tyler<br></p><p><br></p><p>&gt; On Dec 4, 2015, at 3:37 PM, Kevin Ballard &lt;kevin at sb.org&gt; wrote:<br>&gt; <br>&gt; Do you use Xcode to edit Swift? Xcode gives a color to properties/methods and doesn&#39;t color local variables/arguments. Is that not sufficient to distinguish this? In my experience the color is actually better than seeing the explicit `self.` because the color can be recognized faster than reading a word, and is visible in a high-level &quot;squint&quot; view of the function.<br>&gt;  <br>&gt; If you&#39;re using another editor, well, my best suggestion there is to look into what it would take to integrate SourceKit functionality into that editor for more intelligent coloring :)<br>&gt;  <br>&gt; -Kevin<br>&gt;  <br>&gt;&gt; On Fri, Dec 4, 2015, at 03:29 PM, Colin Cornaby wrote:<br>&gt;&gt; +1<br>&gt;&gt;  <br>&gt;&gt; I&#39;ve had a lot of weird things happen that I&#39;ve traced to mistakes in properties having the same name as function arguments. I&#39;ve hardly ever had this issue in modern Obj-C.<br>&gt;&gt;  <br>&gt;&gt; I&#39;m a little more ok with functions not needing self as it&#39;s less likely for those to shadow something like an argument, but I guess the consistency would be nice too.<br>&gt;&gt;  <br>&gt;&gt;&gt; On Dec 04, 2015, at 01:20 PM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt;&gt;&gt; I don&#39;t understand the reasoning behind removing the need to access instance properties and functions using self. Swift has always seemed to prefer readability to brevity and the feature makes the distinction between local and instance variables/functions crystal clear. Any good reason I shouldn&#39;t go on with the proposition?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Just as example, my proposition makes the following piece of code illegal:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; struct FooBar {<br>&gt;&gt;&gt; var foo: String = &quot;foobar&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func bar() {<br>&gt;&gt;&gt; print(foo) // compiler error<br>&gt;&gt;&gt; print(self.foo) // compiler happy<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func bar2() {<br>&gt;&gt;&gt; bar() // compiler error<br>&gt;&gt;&gt; self.bar() // compiler happy<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;  <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/320afa16/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Proposal: Re-instate mandatory self for accessing instance properties and functions</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>December  5, 2015 at 10:00:00am</p></header><div class="content"><p>As I said previously, same for me. But even if that weren&#39;t the case; I find it difficult to defend the readability of a language&#39;s feature uniquely by an editor&#39;s syntax highlighting.<br></p><p>The proposal here had the same objectives (but is more elegant) to what created conventions like Hungarian notation where m_ prefixes member variables.<br></p><p><br></p><p>Sent from my iPhone<br>&gt; On 05 Dec 2015, at 08:49, Tyler Cloutier &lt;cloutiertyler at aol.com&gt; wrote:<br>&gt; <br>&gt; I&#39;m not sure how many Swift users this effects, but I&#39;m colorblind and I really struggle with the local vs properties syntax coloring.<br>&gt; <br>&gt; Tyler<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Dec 4, 2015, at 3:37 PM, Kevin Ballard &lt;kevin at sb.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Do you use Xcode to edit Swift? Xcode gives a color to properties/methods and doesn&#39;t color local variables/arguments. Is that not sufficient to distinguish this? In my experience the color is actually better than seeing the explicit `self.` because the color can be recognized faster than reading a word, and is visible in a high-level &quot;squint&quot; view of the function.<br>&gt;&gt;  <br>&gt;&gt; If you&#39;re using another editor, well, my best suggestion there is to look into what it would take to integrate SourceKit functionality into that editor for more intelligent coloring :)<br>&gt;&gt;  <br>&gt;&gt; -Kevin<br>&gt;&gt;  <br>&gt;&gt;&gt; On Fri, Dec 4, 2015, at 03:29 PM, Colin Cornaby wrote:<br>&gt;&gt;&gt; +1<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; I&#39;ve had a lot of weird things happen that I&#39;ve traced to mistakes in properties having the same name as function arguments. I&#39;ve hardly ever had this issue in modern Obj-C.<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; I&#39;m a little more ok with functions not needing self as it&#39;s less likely for those to shadow something like an argument, but I guess the consistency would be nice too.<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; On Dec 04, 2015, at 01:20 PM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt;&gt;&gt;&gt; I don&#39;t understand the reasoning behind removing the need to access instance properties and functions using self. Swift has always seemed to prefer readability to brevity and the feature makes the distinction between local and instance variables/functions crystal clear. Any good reason I shouldn&#39;t go on with the proposition?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Just as example, my proposition makes the following piece of code illegal:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt; struct FooBar {<br>&gt;&gt;&gt;&gt; var foo: String = &quot;foobar&quot;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func bar() {<br>&gt;&gt;&gt;&gt; print(foo) // compiler error<br>&gt;&gt;&gt;&gt; print(self.foo) // compiler happy<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func bar2() {<br>&gt;&gt;&gt;&gt; bar() // compiler error<br>&gt;&gt;&gt;&gt; self.bar() // compiler happy<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;  <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/50153819/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
