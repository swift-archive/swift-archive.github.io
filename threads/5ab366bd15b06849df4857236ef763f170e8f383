<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Discussion] Rename BitwiseOperations protocol</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July  1, 2016 at 05:00:00pm</p></header><div class="content"><p>on Fri Jul 01 2016, Riley Testut &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hi all,<br>&gt;<br>&gt; This is probably very minor, but I’m not sure the protocol name<br>&gt; “BitwiseOperations” fits the Swift API Design Guidelines. Here’s what<br>&gt; the guidelines have to say about protocol names:<br>&gt;<br>&gt; Protocols that describe what something is should read as nouns (e.g. Collection).<br>&gt;<br>&gt; Protocols that describe a capability should be named using the<br>&gt; suffixes able, ible, or ing (e.g. Equatable, ProgressReporting).<br>&gt;<br>&gt; From these two, BitwiseOperations appears to be (attempting) to follow<br>&gt; the first rule, yet “BitwiseOperations” doesn’t really describe what<br>&gt; the type is, but rather that it can do bitwise operations. The<br>&gt; documentation itself even describes the protocol as “a type that<br>&gt; supports standard bitwise arithmetic operators.&quot;<br>&gt;<br>&gt; I propose we rename it to “BitwiseOperable”, or something<br>&gt; similar. Again, a small change, but if this were to ever happen, I<br>&gt; think Swift 3 is the time.<br></p><p>BitwiseOperations should really be retired after<br>https://github.com/apple/swift-evolution/blob/master/proposals/0104-improved-integers.md<br>is implemented, and its uses replaced by FixedWidthInteger.<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8149b5bd66abbc94babfda2995153481?s=50"></div><header><strong>[Discussion] Rename BitwiseOperations protocol</strong> from <string>Nevin Brackett-Rozinsky</string> &lt;nevin.brackettrozinsky at gmail.com&gt;<p>July  3, 2016 at 12:00:00pm</p></header><div class="content"><p>I am still curious why the SE-0104 FixedWidthInteger protocol uses member<br>functions like “.xor” rather than operators for bitwise manipulation.<br></p><p>Nevin<br></p><p>On Fri, Jul 1, 2016 at 8:19 PM, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; on Fri Jul 01 2016, Riley Testut &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt; Hi all,<br>&gt; &gt;<br>&gt; &gt; This is probably very minor, but I’m not sure the protocol name<br>&gt; &gt; “BitwiseOperations” fits the Swift API Design Guidelines. Here’s what<br>&gt; &gt; the guidelines have to say about protocol names:<br>&gt; &gt;<br>&gt; &gt; Protocols that describe what something is should read as nouns (e.g.<br>&gt; Collection).<br>&gt; &gt;<br>&gt; &gt; Protocols that describe a capability should be named using the<br>&gt; &gt; suffixes able, ible, or ing (e.g. Equatable, ProgressReporting).<br>&gt; &gt;<br>&gt; &gt; From these two, BitwiseOperations appears to be (attempting) to follow<br>&gt; &gt; the first rule, yet “BitwiseOperations” doesn’t really describe what<br>&gt; &gt; the type is, but rather that it can do bitwise operations. The<br>&gt; &gt; documentation itself even describes the protocol as “a type that<br>&gt; &gt; supports standard bitwise arithmetic operators.&quot;<br>&gt; &gt;<br>&gt; &gt; I propose we rename it to “BitwiseOperable”, or something<br>&gt; &gt; similar. Again, a small change, but if this were to ever happen, I<br>&gt; &gt; think Swift 3 is the time.<br>&gt;<br>&gt; BitwiseOperations should really be retired after<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0104-improved-integers.md<br>&gt; is implemented, and its uses replaced by FixedWidthInteger.<br>&gt;<br>&gt; --<br>&gt; Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160703/091790fd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Discussion] Rename BitwiseOperations protocol</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July  3, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jul 3, 2016, at 9:41 AM, Nevin Brackett-Rozinsky via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I am still curious why the SE-0104 FixedWidthInteger protocol uses member functions like “.xor” rather than operators for bitwise manipulation.<br></p><p>The global operators are implemented in terms of those methods in the protocol.<br></p><p>-Chris<br></p><p>&gt; <br>&gt; Nevin<br>&gt; <br>&gt; On Fri, Jul 1, 2016 at 8:19 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; on Fri Jul 01 2016, Riley Testut &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; &gt; Hi all,<br>&gt; &gt;<br>&gt; &gt; This is probably very minor, but I’m not sure the protocol name<br>&gt; &gt; “BitwiseOperations” fits the Swift API Design Guidelines. Here’s what<br>&gt; &gt; the guidelines have to say about protocol names:<br>&gt; &gt;<br>&gt; &gt; Protocols that describe what something is should read as nouns (e.g. Collection).<br>&gt; &gt;<br>&gt; &gt; Protocols that describe a capability should be named using the<br>&gt; &gt; suffixes able, ible, or ing (e.g. Equatable, ProgressReporting).<br>&gt; &gt;<br>&gt; &gt; From these two, BitwiseOperations appears to be (attempting) to follow<br>&gt; &gt; the first rule, yet “BitwiseOperations” doesn’t really describe what<br>&gt; &gt; the type is, but rather that it can do bitwise operations. The<br>&gt; &gt; documentation itself even describes the protocol as “a type that<br>&gt; &gt; supports standard bitwise arithmetic operators.&quot;<br>&gt; &gt;<br>&gt; &gt; I propose we rename it to “BitwiseOperable”, or something<br>&gt; &gt; similar. Again, a small change, but if this were to ever happen, I<br>&gt; &gt; think Swift 3 is the time.<br>&gt; <br>&gt; BitwiseOperations should really be retired after<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0104-improved-integers.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0104-improved-integers.md&gt;<br>&gt; is implemented, and its uses replaced by FixedWidthInteger.<br>&gt; <br>&gt; --<br>&gt; Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160703/1af3ed05/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/009173d589176cfd9c8146cc49849ff6?s=50"></div><header><strong>[Discussion] Rename BitwiseOperations protocol</strong> from <string>Riley Testut</string> &lt;rileytestut at gmail.com&gt;<p>July  3, 2016 at 03:00:00pm</p></header><div class="content"><p>Wasn&#39;t there a proposal to stop defining methods in addition to global operators? I would very much support that, doesn&#39;t make sense to me to have two ways to do the same thing IMO.<br></p><p>&gt; On Jul 3, 2016, at 3:40 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jul 3, 2016, at 9:41 AM, Nevin Brackett-Rozinsky via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I am still curious why the SE-0104 FixedWidthInteger protocol uses member functions like “.xor” rather than operators for bitwise manipulation.<br>&gt; <br>&gt; The global operators are implemented in terms of those methods in the protocol.<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Nevin<br>&gt;&gt; <br>&gt;&gt;&gt; On Fri, Jul 1, 2016 at 8:19 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Fri Jul 01 2016, Riley Testut &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt; Hi all,<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; This is probably very minor, but I’m not sure the protocol name<br>&gt;&gt;&gt; &gt; “BitwiseOperations” fits the Swift API Design Guidelines. Here’s what<br>&gt;&gt;&gt; &gt; the guidelines have to say about protocol names:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; Protocols that describe what something is should read as nouns (e.g. Collection).<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; Protocols that describe a capability should be named using the<br>&gt;&gt;&gt; &gt; suffixes able, ible, or ing (e.g. Equatable, ProgressReporting).<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; From these two, BitwiseOperations appears to be (attempting) to follow<br>&gt;&gt;&gt; &gt; the first rule, yet “BitwiseOperations” doesn’t really describe what<br>&gt;&gt;&gt; &gt; the type is, but rather that it can do bitwise operations. The<br>&gt;&gt;&gt; &gt; documentation itself even describes the protocol as “a type that<br>&gt;&gt;&gt; &gt; supports standard bitwise arithmetic operators.&quot;<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; I propose we rename it to “BitwiseOperable”, or something<br>&gt;&gt;&gt; &gt; similar. Again, a small change, but if this were to ever happen, I<br>&gt;&gt;&gt; &gt; think Swift 3 is the time.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; BitwiseOperations should really be retired after<br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0104-improved-integers.md<br>&gt;&gt;&gt; is implemented, and its uses replaced by FixedWidthInteger.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; Dave<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160703/4a83e86d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Discussion] Rename BitwiseOperations protocol</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July  3, 2016 at 01:00:00pm</p></header><div class="content"><p>Yes, it will hopefully be coming back for discussion in the next week:<br>https://github.com/apple/swift-evolution/blob/master/proposals/0091-improving-operators-in-protocols.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0091-improving-operators-in-protocols.md&gt;<br></p><p>-Chris<br></p><p>&gt; On Jul 3, 2016, at 1:53 PM, Riley Testut &lt;rileytestut at gmail.com&gt; wrote:<br>&gt; <br>&gt; Wasn&#39;t there a proposal to stop defining methods in addition to global operators? I would very much support that, doesn&#39;t make sense to me to have two ways to do the same thing IMO.<br>&gt; <br>&gt; On Jul 3, 2016, at 3:40 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 3, 2016, at 9:41 AM, Nevin Brackett-Rozinsky via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I am still curious why the SE-0104 FixedWidthInteger protocol uses member functions like “.xor” rather than operators for bitwise manipulation.<br>&gt;&gt; <br>&gt;&gt; The global operators are implemented in terms of those methods in the protocol.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Nevin<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Fri, Jul 1, 2016 at 8:19 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Fri Jul 01 2016, Riley Testut &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt; Hi all,<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; This is probably very minor, but I’m not sure the protocol name<br>&gt;&gt;&gt; &gt; “BitwiseOperations” fits the Swift API Design Guidelines. Here’s what<br>&gt;&gt;&gt; &gt; the guidelines have to say about protocol names:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; Protocols that describe what something is should read as nouns (e.g. Collection).<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; Protocols that describe a capability should be named using the<br>&gt;&gt;&gt; &gt; suffixes able, ible, or ing (e.g. Equatable, ProgressReporting).<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; From these two, BitwiseOperations appears to be (attempting) to follow<br>&gt;&gt;&gt; &gt; the first rule, yet “BitwiseOperations” doesn’t really describe what<br>&gt;&gt;&gt; &gt; the type is, but rather that it can do bitwise operations. The<br>&gt;&gt;&gt; &gt; documentation itself even describes the protocol as “a type that<br>&gt;&gt;&gt; &gt; supports standard bitwise arithmetic operators.&quot;<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; I propose we rename it to “BitwiseOperable”, or something<br>&gt;&gt;&gt; &gt; similar. Again, a small change, but if this were to ever happen, I<br>&gt;&gt;&gt; &gt; think Swift 3 is the time.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; BitwiseOperations should really be retired after<br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0104-improved-integers.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0104-improved-integers.md&gt;<br>&gt;&gt;&gt; is implemented, and its uses replaced by FixedWidthInteger.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; Dave<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160703/17e64651/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c53218a6524f4d644b6a75a4441ea631?s=50"></div><header><strong>[Discussion] Rename BitwiseOperations protocol</strong> from <string>Max Moiseev</string> &lt;moiseev at apple.com&gt;<p>July  6, 2016 at 01:00:00pm</p></header><div class="content"><p>FixedWidthInteger only handles the implementation for the numbers, we should also consider OptionSet.<br></p><p>I think we should keep the protocol in case someone wants to implement their own type other than an integer to be used as a raw value type in the OptionSet.<br></p><p>As for renaming it, how about BitwiseOperand?<br></p><p>protocol BitwiseOperand {<br>  func bitwiseOr(_ rhs: Self) -&gt; Self<br>  func bitwiseAnd(_ rhs: Self) -&gt; Self<br>  // etc ...<br>}<br></p><p>Max<br></p><p>&gt; On Jul 1, 2016, at 5:19 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Fri Jul 01 2016, Riley Testut &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; Hi all,<br>&gt;&gt; <br>&gt;&gt; This is probably very minor, but I’m not sure the protocol name<br>&gt;&gt; “BitwiseOperations” fits the Swift API Design Guidelines. Here’s what<br>&gt;&gt; the guidelines have to say about protocol names:<br>&gt;&gt; <br>&gt;&gt; Protocols that describe what something is should read as nouns (e.g. Collection).<br>&gt;&gt; <br>&gt;&gt; Protocols that describe a capability should be named using the<br>&gt;&gt; suffixes able, ible, or ing (e.g. Equatable, ProgressReporting).<br>&gt;&gt; <br>&gt;&gt; From these two, BitwiseOperations appears to be (attempting) to follow<br>&gt;&gt; the first rule, yet “BitwiseOperations” doesn’t really describe what<br>&gt;&gt; the type is, but rather that it can do bitwise operations. The<br>&gt;&gt; documentation itself even describes the protocol as “a type that<br>&gt;&gt; supports standard bitwise arithmetic operators.&quot;<br>&gt;&gt; <br>&gt;&gt; I propose we rename it to “BitwiseOperable”, or something<br>&gt;&gt; similar. Again, a small change, but if this were to ever happen, I<br>&gt;&gt; think Swift 3 is the time.<br>&gt; <br>&gt; BitwiseOperations should really be retired after<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0104-improved-integers.md<br>&gt; is implemented, and its uses replaced by FixedWidthInteger.<br>&gt; <br>&gt; -- <br>&gt; Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Discussion] Rename BitwiseOperations protocol</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>July  6, 2016 at 03:00:00pm</p></header><div class="content"><p>Option sets use set notation, not bitwise notation, no?<br></p><p>Jordan<br></p><p>&gt; On Jul 6, 2016, at 13:28, Max Moiseev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; FixedWidthInteger only handles the implementation for the numbers, we should also consider OptionSet.<br>&gt; <br>&gt; I think we should keep the protocol in case someone wants to implement their own type other than an integer to be used as a raw value type in the OptionSet.<br>&gt; <br>&gt; As for renaming it, how about BitwiseOperand?<br>&gt; <br>&gt; protocol BitwiseOperand {<br>&gt;  func bitwiseOr(_ rhs: Self) -&gt; Self<br>&gt;  func bitwiseAnd(_ rhs: Self) -&gt; Self<br>&gt;  // etc ...<br>&gt; }<br>&gt; <br>&gt; Max<br>&gt; <br>&gt;&gt; On Jul 1, 2016, at 5:19 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Fri Jul 01 2016, Riley Testut &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Hi all,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is probably very minor, but I’m not sure the protocol name<br>&gt;&gt;&gt; “BitwiseOperations” fits the Swift API Design Guidelines. Here’s what<br>&gt;&gt;&gt; the guidelines have to say about protocol names:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Protocols that describe what something is should read as nouns (e.g. Collection).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Protocols that describe a capability should be named using the<br>&gt;&gt;&gt; suffixes able, ible, or ing (e.g. Equatable, ProgressReporting).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; From these two, BitwiseOperations appears to be (attempting) to follow<br>&gt;&gt;&gt; the first rule, yet “BitwiseOperations” doesn’t really describe what<br>&gt;&gt;&gt; the type is, but rather that it can do bitwise operations. The<br>&gt;&gt;&gt; documentation itself even describes the protocol as “a type that<br>&gt;&gt;&gt; supports standard bitwise arithmetic operators.&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I propose we rename it to “BitwiseOperable”, or something<br>&gt;&gt;&gt; similar. Again, a small change, but if this were to ever happen, I<br>&gt;&gt;&gt; think Swift 3 is the time.<br>&gt;&gt; <br>&gt;&gt; BitwiseOperations should really be retired after<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0104-improved-integers.md<br>&gt;&gt; is implemented, and its uses replaced by FixedWidthInteger.<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c53218a6524f4d644b6a75a4441ea631?s=50"></div><header><strong>[Discussion] Rename BitwiseOperations protocol</strong> from <string>Max Moiseev</string> &lt;moiseev at apple.com&gt;<p>July  6, 2016 at 03:00:00pm</p></header><div class="content"><p>OptionSets do conform to AlgebraSet but they require raw value type to conform to BitwiseOperations.<br></p><p>Max<br></p><p>&gt; On Jul 6, 2016, at 3:44 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; Option sets use set notation, not bitwise notation, no?<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt;&gt; On Jul 6, 2016, at 13:28, Max Moiseev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; FixedWidthInteger only handles the implementation for the numbers, we should also consider OptionSet.<br>&gt;&gt; <br>&gt;&gt; I think we should keep the protocol in case someone wants to implement their own type other than an integer to be used as a raw value type in the OptionSet.<br>&gt;&gt; <br>&gt;&gt; As for renaming it, how about BitwiseOperand?<br>&gt;&gt; <br>&gt;&gt; protocol BitwiseOperand {<br>&gt;&gt; func bitwiseOr(_ rhs: Self) -&gt; Self<br>&gt;&gt; func bitwiseAnd(_ rhs: Self) -&gt; Self<br>&gt;&gt; // etc ...<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Max<br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 1, 2016, at 5:19 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Fri Jul 01 2016, Riley Testut &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hi all,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This is probably very minor, but I’m not sure the protocol name<br>&gt;&gt;&gt;&gt; “BitwiseOperations” fits the Swift API Design Guidelines. Here’s what<br>&gt;&gt;&gt;&gt; the guidelines have to say about protocol names:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Protocols that describe what something is should read as nouns (e.g. Collection).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Protocols that describe a capability should be named using the<br>&gt;&gt;&gt;&gt; suffixes able, ible, or ing (e.g. Equatable, ProgressReporting).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; From these two, BitwiseOperations appears to be (attempting) to follow<br>&gt;&gt;&gt;&gt; the first rule, yet “BitwiseOperations” doesn’t really describe what<br>&gt;&gt;&gt;&gt; the type is, but rather that it can do bitwise operations. The<br>&gt;&gt;&gt;&gt; documentation itself even describes the protocol as “a type that<br>&gt;&gt;&gt;&gt; supports standard bitwise arithmetic operators.&quot;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I propose we rename it to “BitwiseOperable”, or something<br>&gt;&gt;&gt;&gt; similar. Again, a small change, but if this were to ever happen, I<br>&gt;&gt;&gt;&gt; think Swift 3 is the time.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; BitwiseOperations should really be retired after<br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0104-improved-integers.md<br>&gt;&gt;&gt; is implemented, and its uses replaced by FixedWidthInteger.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Dave<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Discussion] Rename BitwiseOperations protocol</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July  6, 2016 at 11:00:00pm</p></header><div class="content"><p>Another use case: I&#39;ve got a BitArray that makes sense to conform to<br>BitwiseOperations, but it definitely isn&#39;t a FixedWidthInteger.<br></p><p><br>On Wed, Jul 6, 2016 at 17:56 Max Moiseev via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; OptionSets do conform to AlgebraSet but they require raw value type to<br>&gt; conform to BitwiseOperations.<br>&gt;<br>&gt; Max<br>&gt;<br>&gt; &gt; On Jul 6, 2016, at 3:44 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Option sets use set notation, not bitwise notation, no?<br>&gt; &gt;<br>&gt; &gt; Jordan<br>&gt; &gt;<br>&gt; &gt;&gt; On Jul 6, 2016, at 13:28, Max Moiseev via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; FixedWidthInteger only handles the implementation for the numbers, we<br>&gt; should also consider OptionSet.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I think we should keep the protocol in case someone wants to implement<br>&gt; their own type other than an integer to be used as a raw value type in the<br>&gt; OptionSet.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; As for renaming it, how about BitwiseOperand?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; protocol BitwiseOperand {<br>&gt; &gt;&gt; func bitwiseOr(_ rhs: Self) -&gt; Self<br>&gt; &gt;&gt; func bitwiseAnd(_ rhs: Self) -&gt; Self<br>&gt; &gt;&gt; // etc ...<br>&gt; &gt;&gt; }<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Max<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; On Jul 1, 2016, at 5:19 PM, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; on Fri Jul 01 2016, Riley Testut &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; Hi all,<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; This is probably very minor, but I’m not sure the protocol name<br>&gt; &gt;&gt;&gt;&gt; “BitwiseOperations” fits the Swift API Design Guidelines. Here’s what<br>&gt; &gt;&gt;&gt;&gt; the guidelines have to say about protocol names:<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; Protocols that describe what something is should read as nouns (e.g.<br>&gt; Collection).<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; Protocols that describe a capability should be named using the<br>&gt; &gt;&gt;&gt;&gt; suffixes able, ible, or ing (e.g. Equatable, ProgressReporting).<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; From these two, BitwiseOperations appears to be (attempting) to follow<br>&gt; &gt;&gt;&gt;&gt; the first rule, yet “BitwiseOperations” doesn’t really describe what<br>&gt; &gt;&gt;&gt;&gt; the type is, but rather that it can do bitwise operations. The<br>&gt; &gt;&gt;&gt;&gt; documentation itself even describes the protocol as “a type that<br>&gt; &gt;&gt;&gt;&gt; supports standard bitwise arithmetic operators.&quot;<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; I propose we rename it to “BitwiseOperable”, or something<br>&gt; &gt;&gt;&gt;&gt; similar. Again, a small change, but if this were to ever happen, I<br>&gt; &gt;&gt;&gt;&gt; think Swift 3 is the time.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; BitwiseOperations should really be retired after<br>&gt; &gt;&gt;&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0104-improved-integers.md<br>&gt; &gt;&gt;&gt; is implemented, and its uses replaced by FixedWidthInteger.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; --<br>&gt; &gt;&gt;&gt; Dave<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160706/d1f7fc7a/attachment-0001.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
