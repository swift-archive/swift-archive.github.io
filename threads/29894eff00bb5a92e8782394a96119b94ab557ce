<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Proposal] Fix lazy filter</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>June 19, 2016 at 06:00:00am</p></header><div class="content"><p>on Sun Jun 19 2016, Kevin Lundberg &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; this seems more like a bug fix to me than a language change. Does it<br>&gt; need to go through evolution?<br></p><p>It&#39;s not a bug.  Measuring the length of the source before allocating<br>the destination array is usually a big win when compared to repeatedly<br>growing the array&#39;s memory and copying all its elements.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Proposal] Fix lazy filter</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>June 19, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On 19 Jun 2016, at 14:50, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Sun Jun 19 2016, Kevin Lundberg &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; this seems more like a bug fix to me than a language change. Does it<br>&gt;&gt; need to go through evolution?<br>&gt; <br>&gt; It&#39;s not a bug.  Measuring the length of the source before allocating<br>&gt; the destination array is usually a big win when compared to repeatedly<br>&gt; growing the array&#39;s memory and copying all its elements.<br></p><p>I think I agree that it’s a bug; as stated in the proposal the current behaviour allows .underestimatedCount to consume the entire sequence because sequences are potentially destructive (so its only possible to guarantee access to each element once). Actually, the fact that this hasn’t been discovered sooner suggests the current tests don’t include the use of destructive sequences, which may need to be considered too, as all Sequence methods should work correctly with both destructive and non-destructive sequences.<br></p><p>So yeah, I think having lazy sequences of this type return 0 for underestimateCount is the right solution for the time being.<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
