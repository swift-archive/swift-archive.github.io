<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0006 Apply API Guidelines to the Standard Library</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 29, 2016 at 08:00:00am</p></header><div class="content"><p>on Thu Jan 28 2016, Erica Sadun &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Jan 27, 2016, at 11:42 PM, Dave Abrahams via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Wed Jan 27 2016, Dave &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; <br>&gt;&gt;&gt; Huh… Yeah, you’re right. I guess I saw “CollectionType” and<br>&gt;&gt;&gt; “CustomStringConvertible” or something and made a connection that<br>&gt;&gt;&gt; wasn’t there.<br>&gt;&gt;&gt; Well, FWIW, that convention (plus the occasional “HasNoun”, and<br>&gt;&gt;&gt; -ableType for constraining the element of custom collections) tends to<br>&gt;&gt;&gt; work well for me.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What’s been the deciding factor between -Type and -able so far?<br>&gt;&gt; <br>&gt;&gt; When there&#39;s no reasonable -able or -ible name, use -Type.<br>&gt;<br>&gt; This is where I never know whether to keep my nose out of things or<br>&gt; just jump in. <br></p><p>Seems like you *do* know; you jumped :-)<br></p><p>&gt; I find there are generally two kinds of protocols: verby-ones (&quot;this<br>&gt; is how this thing works&quot;) and nouny-ones (&quot;this is what this thing<br>&gt; is&quot;). Here&#39;s the guidance I&#39;ve been giving:<br>&gt;<br>&gt; Swift protocols describe the surface that connect a feature provider<br>&gt; API with its consumer. Protocols establish a communication<br>&gt; contract. They ensure a fit between each required member and the<br>&gt; provider’s implementation. It’s like whether a virus can attach to a<br>&gt; host cell’s receptors, or whatever the actual biological equivalent<br>&gt; is. <br></p><p>This description misses (or at least fails to emphasize) an aspect I<br>consider extremely important: protocols are not just bags of syntax.<br>It&#39;s crucial that they have well-defined, testable semantics.<br></p><p>&gt; The standard library describes protocols using nouns (typically ending<br>&gt; in Type, e.g. MirrorPathType, MutableCollectionType, ErrorType) and<br>&gt; adjectives (typically ending in ble, like Streamable, Strideable,<br>&gt; ArrayLiteralConvertible). The former more commonly discuss what a<br>&gt; conforming type is and the latter what it does.<br>&gt;<br>&gt; When naming a protocol, you’re not limited to Type and ble<br>&gt; endings. Your protocol can be, for example, a DataProvider or a<br>&gt; FloatConsumer. A protocol can describe a relationship<br>&gt; DownloadProcessingDelegate or ListViewDataSource. You may implement an<br>&gt; OutputDestination or an IntegerSink. The current API Design guidelines<br>&gt; say &quot;omit needless words&quot;, so you might prefer to go with DataProvider<br>&gt; over DataProviderType or MirrorPath over MirrorPathType, but I<br>&gt; wouldn&#39;t give much more constraint to naming beyond that.<br></p><p>As part of following the new guidelines, the proposal is that the<br>standard library drops the &quot;Type&quot; suffix altogether.<br></p><p>&gt; For example, for &quot;HasNoun&quot;, I&#39;d go with something more like<br>&gt; NounContainingType or NounSupplier.<br>&gt;<br>&gt; Non-Abrahams Dave writes: &quot;I like -Type for protocols that can only be<br>&gt; used a generic constraint, and -able/-ible for protocols that can be<br>&gt; “concrete” types.<br>&gt;<br>&gt; And Canonical Dave replies: &quot;But that&#39;s not how they&#39;re used.  I&#39;d<br>&gt; have to rename Equatable and Comparable to follow that convention.&quot;<br>&gt;<br>&gt; I agree in that I&#39;m not convinced it&#39;s the role of a protocol to<br>&gt; describe implementation details. (I&#39;d say the same for method names,<br>&gt; but that&#39;s different thread about mutability and side effects,<br>&gt; etc). Going that way leads you to over-designated hungarian-esque<br>&gt; guidelines that I&#39;d rather keep loose, friendly, and sensible.<br>&gt;<br>&gt; -- Erica<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] SE-0006 Apply API Guidelines to the Standard Library</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>January 29, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jan 29, 2016, at 9:29 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Thu Jan 28 2016, Erica Sadun &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On Jan 27, 2016, at 11:42 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Wed Jan 27 2016, Dave &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Huh… Yeah, you’re right. I guess I saw “CollectionType” and<br>&gt;&gt;&gt;&gt; “CustomStringConvertible” or something and made a connection that<br>&gt;&gt;&gt;&gt; wasn’t there.<br>&gt;&gt;&gt;&gt; Well, FWIW, that convention (plus the occasional “HasNoun”, and<br>&gt;&gt;&gt;&gt; -ableType for constraining the element of custom collections) tends to<br>&gt;&gt;&gt;&gt; work well for me.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What’s been the deciding factor between -Type and -able so far?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; When there&#39;s no reasonable -able or -ible name, use -Type.<br>&gt;&gt; <br>&gt;&gt; This is where I never know whether to keep my nose out of things or<br>&gt;&gt; just jump in. <br>&gt; <br>&gt; Seems like you *do* know; you jumped :-)<br>&gt; <br>&gt;&gt; I find there are generally two kinds of protocols: verby-ones (&quot;this<br>&gt;&gt; is how this thing works&quot;) and nouny-ones (&quot;this is what this thing<br>&gt;&gt; is&quot;). Here&#39;s the guidance I&#39;ve been giving:<br>&gt;&gt; <br>&gt;&gt; Swift protocols describe the surface that connect a feature provider<br>&gt;&gt; API with its consumer. Protocols establish a communication<br>&gt;&gt; contract. They ensure a fit between each required member and the<br>&gt;&gt; provider’s implementation. It’s like whether a virus can attach to a<br>&gt;&gt; host cell’s receptors, or whatever the actual biological equivalent<br>&gt;&gt; is. <br>&gt; <br>&gt; This description misses (or at least fails to emphasize) an aspect I<br>&gt; consider extremely important: protocols are not just bags of syntax.<br>&gt; It&#39;s crucial that they have well-defined, testable semantics.<br></p><p>Good point and I&#39;ll adjust my notes!<br></p><p>&gt; <br>&gt;&gt; The standard library describes protocols using nouns (typically ending<br>&gt;&gt; in Type, e.g. MirrorPathType, MutableCollectionType, ErrorType) and<br>&gt;&gt; adjectives (typically ending in ble, like Streamable, Strideable,<br>&gt;&gt; ArrayLiteralConvertible). The former more commonly discuss what a<br>&gt;&gt; conforming type is and the latter what it does.<br>&gt;&gt; <br>&gt;&gt; When naming a protocol, you’re not limited to Type and ble<br>&gt;&gt; endings. Your protocol can be, for example, a DataProvider or a<br>&gt;&gt; FloatConsumer. A protocol can describe a relationship<br>&gt;&gt; DownloadProcessingDelegate or ListViewDataSource. You may implement an<br>&gt;&gt; OutputDestination or an IntegerSink. The current API Design guidelines<br>&gt;&gt; say &quot;omit needless words&quot;, so you might prefer to go with DataProvider<br>&gt;&gt; over DataProviderType or MirrorPath over MirrorPathType, but I<br>&gt;&gt; wouldn&#39;t give much more constraint to naming beyond that.<br>&gt; <br>&gt; As part of following the new guidelines, the proposal is that the<br>&gt; standard library drops the &quot;Type&quot; suffix altogether.<br></p><p>Fair enough.<br></p><p>So far we&#39;re still agreeing though.<br></p><p>&gt; <br>&gt;&gt; For example, for &quot;HasNoun&quot;, I&#39;d go with something more like<br>&gt;&gt; NounContainingType or NounSupplier.<br>&gt;&gt; <br>&gt;&gt; Non-Abrahams Dave writes: &quot;I like -Type for protocols that can only be<br>&gt;&gt; used a generic constraint, and -able/-ible for protocols that can be<br>&gt;&gt; “concrete” types.<br>&gt;&gt; <br>&gt;&gt; And Canonical Dave replies: &quot;But that&#39;s not how they&#39;re used.  I&#39;d<br>&gt;&gt; have to rename Equatable and Comparable to follow that convention.&quot;<br>&gt;&gt; <br></p><p><br>This is the big bit though and you didn&#39;t respond here, although it&#39;s mostly that I&#39;m agreeing with you but<br>what do you think about just cutting out things that get too specific? (I say the same more or less in the<br>longer review email)<br></p><p>&gt;&gt; I agree in that I&#39;m not convinced it&#39;s the role of a protocol to<br>&gt;&gt; describe implementation details. (I&#39;d say the same for method names,<br>&gt;&gt; but that&#39;s different thread about mutability and side effects,<br>&gt;&gt; etc). Going that way leads you to over-designated hungarian-esque<br>&gt;&gt; guidelines that I&#39;d rather keep loose, friendly, and sensible.<br>&gt;&gt; <br>&gt;&gt; -- Erica<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/6f82a8e2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0006 Apply API Guidelines to the Standard Library</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 29, 2016 at 12:00:00pm</p></header><div class="content"><p>on Fri Jan 29 2016, Erica Sadun &lt;erica-AT-ericasadun.com&gt; wrote:<br></p><p>&gt;&gt;&gt; For example, for &quot;HasNoun&quot;, I&#39;d go with something more like<br>&gt;&gt;&gt; NounContainingType or NounSupplier.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Non-Abrahams Dave writes: &quot;I like -Type for protocols that can only be<br>&gt;&gt;&gt; used a generic constraint, and -able/-ible for protocols that can be<br>&gt;&gt;&gt; “concrete” types.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; And Canonical Dave replies: &quot;But that&#39;s not how they&#39;re used.  I&#39;d<br>&gt;&gt;&gt; have to rename Equatable and Comparable to follow that convention.&quot;<br>&gt;&gt;&gt; <br>&gt;<br>&gt; This is the big bit though and you didn&#39;t respond here, although it&#39;s<br>&gt; mostly that I&#39;m agreeing with you but what do you think about just<br>&gt; cutting out things that get too specific? (I say the same more or less<br>&gt; in the longer review email)<br></p><p>I don&#39;t think that&#39;s going to fly.  One of the main purposes of these<br>API guidelines is to remove the overhead of having to figure out how to<br>name things, at least as much as possible.  Programmers and designers<br>have enough to think about.  Teams that accept strong and specific<br>coding guidelines can spend more time effectively applying their domain<br>expertise and less time bike-shedding trivial details.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] SE-0006 Apply API Guidelines to the Standard Library</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>January 29, 2016 at 01:00:00pm</p></header><div class="content"><p>The &quot;too specific&quot; I&#39;m railing against is that naming guidance should not depend on implementation details to<br>the point it creates Hungarian Swiftisms.<br></p><p>-- E<br></p><p>&gt; On Jan 29, 2016, at 1:20 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Fri Jan 29 2016, Erica Sadun &lt;erica-AT-ericasadun.com&gt; wrote:<br>&gt; <br>&gt;&gt;&gt;&gt; For example, for &quot;HasNoun&quot;, I&#39;d go with something more like<br>&gt;&gt;&gt;&gt; NounContainingType or NounSupplier.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Non-Abrahams Dave writes: &quot;I like -Type for protocols that can only be<br>&gt;&gt;&gt;&gt; used a generic constraint, and -able/-ible for protocols that can be<br>&gt;&gt;&gt;&gt; “concrete” types.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; And Canonical Dave replies: &quot;But that&#39;s not how they&#39;re used.  I&#39;d<br>&gt;&gt;&gt;&gt; have to rename Equatable and Comparable to follow that convention.&quot;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; This is the big bit though and you didn&#39;t respond here, although it&#39;s<br>&gt;&gt; mostly that I&#39;m agreeing with you but what do you think about just<br>&gt;&gt; cutting out things that get too specific? (I say the same more or less<br>&gt;&gt; in the longer review email)<br>&gt; <br>&gt; I don&#39;t think that&#39;s going to fly.  One of the main purposes of these<br>&gt; API guidelines is to remove the overhead of having to figure out how to<br>&gt; name things, at least as much as possible.  Programmers and designers<br>&gt; have enough to think about.  Teams that accept strong and specific<br>&gt; coding guidelines can spend more time effectively applying their domain<br>&gt; expertise and less time bike-shedding trivial details.<br>&gt; <br>&gt; -- <br>&gt; -Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0006 Apply API Guidelines to the Standard Library</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 29, 2016 at 01:00:00pm</p></header><div class="content"><p>on Fri Jan 29 2016, Erica Sadun &lt;erica-AT-ericasadun.com&gt; wrote:<br></p><p>&gt; The &quot;too specific&quot; I&#39;m railing against is that naming guidance should not depend on implementation details to<br>&gt; the point it creates Hungarian Swiftisms.<br></p><p>I understand the overall concern, but I don&#39;t think these guidelines do<br>that.  Whether something has side effects is hardly an implementation<br>detail.  <br></p><p>&gt;<br>&gt; -- E<br>&gt;<br>&gt;&gt; On Jan 29, 2016, at 1:20 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Fri Jan 29 2016, Erica Sadun &lt;erica-AT-ericasadun.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; For example, for &quot;HasNoun&quot;, I&#39;d go with something more like<br>&gt;&gt;&gt;&gt;&gt; NounContainingType or NounSupplier.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Non-Abrahams Dave writes: &quot;I like -Type for protocols that can only be<br>&gt;&gt;&gt;&gt;&gt; used a generic constraint, and -able/-ible for protocols that can be<br>&gt;&gt;&gt;&gt;&gt; “concrete” types.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; And Canonical Dave replies: &quot;But that&#39;s not how they&#39;re used.  I&#39;d<br>&gt;&gt;&gt;&gt;&gt; have to rename Equatable and Comparable to follow that convention.&quot;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is the big bit though and you didn&#39;t respond here, although it&#39;s<br>&gt;&gt;&gt; mostly that I&#39;m agreeing with you but what do you think about just<br>&gt;&gt;&gt; cutting out things that get too specific? (I say the same more or less<br>&gt;&gt;&gt; in the longer review email)<br>&gt;&gt; <br>&gt;&gt; I don&#39;t think that&#39;s going to fly.  One of the main purposes of these<br>&gt;&gt; API guidelines is to remove the overhead of having to figure out how to<br>&gt;&gt; name things, at least as much as possible.  Programmers and designers<br>&gt;&gt; have enough to think about.  Teams that accept strong and specific<br>&gt;&gt; coding guidelines can spend more time effectively applying their domain<br>&gt;&gt; expertise and less time bike-shedding trivial details.<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; -Dave<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] SE-0006 Apply API Guidelines to the Standard Library</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>January 29, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Jan 29, 2016, at 2:14 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Fri Jan 29 2016, Erica Sadun &lt;erica-AT-ericasadun.com &lt;http://erica-at-ericasadun.com/&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; The &quot;too specific&quot; I&#39;m railing against is that naming guidance should not depend on implementation details to<br>&gt;&gt; the point it creates Hungarian Swiftisms.<br>&gt; <br>&gt; I understand the overall concern, but I don&#39;t think these guidelines do<br>&gt; that.  Whether something has side effects is hardly an implementation<br>&gt; detail.  <br></p><p><br>I&#39;ve been spending a ridiculous amount of time trying to hash out exactly what I&#39;d prefer because this overlaps with another project I&#39;m currently working on:<br></p><p>  - use nouns for unambiguously functional items without side effects (distanceTo(), successor)<br>  - use verbs for unambiguously procedural items<br>  - prefer verbs for items with side effects, whether there&#39;s mutation or other real-world effects<br>  - Otherwise decide what the most relevant description of the member&#39;s purpose is: to return a value or to perform an action. In such cases, name nouny-things with nouns and verby-things with verbs.<br></p><p>Under the current system, you could have:<br></p><p>// This is a mutating version<br>mutating func login(credential: SomeCredentialType) <br>-&gt; LoginTokenType? {<br>    ...<br>    // store login time, etc in self<br>    ...<br>    return successToken<br>}<br>// This is a non-mutating version with side effects<br>func login(credential: SomeCredentialType) <br>-&gt; LoginTokenType? {<br>    ...<br>    // store login time, etc in a file on disk<br>    ...<br>    return successToken<br>}<br></p><p>// This is a non-mutating version<br>func login(credential: SomeCredentialType) <br>-&gt; LoginTokenType? {<br>    ...<br>    return successToken<br>}<br></p><p>All three versions are verb named as their primary purpose is to log in. But what if they&#39;re recast as tokenForCredential, with their primary purpose<br>being to fetch a token?<br></p><p>For the first example, you could refactor with a purely functional tokenForCredential and a mutating login function that updates self.<br></p><p>But what about the second example, that does not mutate, whose primary purpose is to return a token, but that introduces side effects by writing to disk? Should this be verb named and re-factored? (probably) If so, using &quot;mutating&quot;/&quot;non-mutating&quot; is not sufficient to offer guidance and overly specific as to implementation details. In other words, &quot;hungarian&quot;.<br></p><p>One final point: I think the -ed/-ing advice is wrong. Adding &quot;ed&quot; isn&#39;t really creating a past tense verb (reversed). It&#39;s creating an adjective with an implied noun. Same rule for -ing. Like &quot;ed&quot;, applying &quot;ing&quot; can create an adjective form with an implied subject. (Words ending with &quot;ing&quot; are not always gerunds. It might sound daring and frightning but it&#39;s true.)<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/5a551665/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4030f7e8f6b6d3c09d10ec12691773c1?s=50"></div><header><strong>[Review] SE-0006 Apply API Guidelines to the Standard Library</strong> from <string>John Randolph</string> &lt;jcr at mac.com&gt;<p>January 31, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On Jan 29, 2016, at 12:29 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The &quot;too specific&quot; I&#39;m railing against is that naming guidance should not depend on implementation details to<br>&gt; the point it creates Hungarian Swiftisms.<br></p><p>Hear, hear!<br></p><p><br>-jcr<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
