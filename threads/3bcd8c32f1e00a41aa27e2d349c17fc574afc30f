<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Idea] Replace enumerate() with something more explicit</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April 19, 2016 at 03:00:00pm</p></header><div class="content"><p>on Fri Apr 15 2016, Brent Royal-Gordon &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; I would suggest an alternative; changing Range so that it is indexed<br>&gt; like an array, an Int from 0 to count - 1. Such that aRange[index] is<br>&gt; defined as start + index * stride. This will eliminate the problems<br>&gt; with enumerate. A Range&#39;s generic type would be constrained to be an<br>&gt; Arithmetic type, see extended floating point proposal.<br>&gt;<br>&gt; That papers over the problem for Slice/Range specifically, but it<br>&gt; doesn&#39;t fix it for types with non-integer indices, like Dictionary and<br>&gt; Set. enumerate() is not meant to be used for the purpose to which it<br>&gt; is usually put.<br></p><p>It also breaks an important “law of slicing,” that there is an index<br>correspondence between the slice and the outer collection.  That makes<br>it possible, e.g, to do<br></p><p>   let firstOne = c.index(of: something)<br>   let secondOne = c[firstOne..&lt;c.endIndex].index(of: somethingElse)<br>   doSomethingWith(c[firstOne..&lt;secondOne])<br></p><p>-- <br>Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
