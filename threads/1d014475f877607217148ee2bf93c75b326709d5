<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4649cb942e15c02803f7ed3ac089f239?s=50"></div><header><strong>[Proposal] Make `didSet` also available for `let` property, or something new such as `didInit`</strong> from <string>shengjia wang</string> &lt;wangshengjia01 at gmail.com&gt;<p>December 23, 2015 at 04:00:00pm</p></header><div class="content"><p>Since swift v1.2, we can initialize `let` property in `init()` instead of<br>being forced to give a value when declare it. This is great !<br></p><p>But every time I run into the case such as the example below:<br></p><p>let view: UIView {<br>  didSet {<br>    /**<br>     * This time, `view` did set ( a.k.a initialized in case of `let`<br>property), so I want to bind some other actions just after, such as<br>`setBackgroundColor`. But actually I can&#39;t, compiler will complain that<br>`let` declaration can not be observing properties. So I have to either move<br>all these &quot;actions&quot; to `init()` or change `view` to a `var` property which<br>is not necessary at all.<br>     */<br>  }<br>}<br></p><p>Actually in swift, I think it&#39;s quite commun issue that people run into a<br>large `init()` method. This approach could make it way better in most cases.<br></p><p>So, I&#39;m wondering why not make `didSet` also available for `let` property,<br>or maybe even better to add new keyword such as &quot;didInit&quot; which only get<br>called for first set.<br></p><p>- Victor Wang<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151223/1d0109d5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>[Proposal] Make `didSet` also available for `let` property, or something new such as `didInit`</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>December 23, 2015 at 11:00:00am</p></header><div class="content"><p>willSet and didSet are currently not even called from the init method. This also goes counter to the current property behaviors proposal (didGet and didSet would become part of that) because behaviors aren&#39;t planned for let properties.<br></p><p>You&#39;re saying you want it to happen as soon as it was set, but do you really need it &quot;as soon as that&quot; or can you afford to wait a little bit? Because you can probably just put most of that code at the end of your initializer, where it&#39;s guaranteed that the property has been set.<br></p><p>Félix<br></p><p>&gt; Le 23 déc. 2015 à 10:22:46, shengjia wang via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; <br>&gt; Since swift v1.2, we can initialize `let` property in `init()` instead of being forced to give a value when declare it. This is great ! <br>&gt; <br>&gt; But every time I run into the case such as the example below:<br>&gt; <br>&gt; let view: UIView {<br>&gt;   didSet {<br>&gt;     /** <br>&gt;      * This time, `view` did set ( a.k.a initialized in case of `let` property), so I want to bind some other actions just after, such as `setBackgroundColor`. But actually I can&#39;t, compiler will complain that `let` declaration can not be observing properties. So I have to either move all these &quot;actions&quot; to `init()` or change `view` to a `var` property which is not necessary at all.<br>&gt;      */<br>&gt;   }<br>&gt; }<br>&gt; <br>&gt; Actually in swift, I think it&#39;s quite commun issue that people run into a large `init()` method. This approach could make it way better in most cases.<br>&gt; <br>&gt; So, I&#39;m wondering why not make `didSet` also available for `let` property, or maybe even better to add new keyword such as &quot;didInit&quot; which only get called for first set.<br>&gt; <br>&gt; - Victor Wang<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151223/dfad472c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4649cb942e15c02803f7ed3ac089f239?s=50"></div><header><strong>[Proposal] Make `didSet` also available for `let` property, or something new such as `didInit`</strong> from <string>shengjia wang</string> &lt;wangshengjia01 at gmail.com&gt;<p>December 23, 2015 at 06:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>You are saying: *&quot;Because you can probably just put most of that code at<br>the end of your initialiser&quot;*. I see.. and this proposal is exactly about<br>how to avoid this situation.<br></p><p>I&#39;m saying it would be neat if we can band some side effects once we set a<br>`let` property. Example:<br></p><p>    let view: UIView {<br></p><p>        didSet {<br></p><p>            view.background = UIColor.blackColor()<br></p><p>            view.translatesAutoresizingMaskIntoConstraints<br></p><p>        }<br></p><p>    }<br></p><p>    let scrollView: UIScrollView {<br></p><p>        willSet {<br></p><p>            scrollView.removeObserver(self, forKeyPath: &quot;contentOffset&quot;)<br></p><p>        }<br></p><p>        didSet {<br></p><p>            scrollView.addObserver(self, forKeyPath: &quot;contentOffset&quot;,<br>options: .New, context: nil)<br></p><p>        }<br></p><p>    }<br></p><p>    init(targetScrollView: UIScrollView) {<br></p><p>        view = UIView()<br></p><p>        scrollView = targetScrollView<br></p><p>        super.init()<br></p><p><br></p><p>        // if we could put them into property observing ...<br></p><p>        // view.background = UIColor.blackColor()<br></p><p>        // view.translatesAutoresizingMaskIntoConstraints<br></p><p>        // scrollView.addObserver(self, forKeyPath: &quot;contentOffset&quot;,<br>options:.New, context: nil)<br></p><p>        // ...<br></p><p>    }<br></p><p><br>We can extract the &quot;setup property&quot; step from init method and separate them<br>for all different properties just after the property be initialised.<br>Otherwise, we have to either mix them into the init method or change `let`<br>to `var`. Both are doable but not ideal in my opinion.<br></p><p><br>By the way, the principal of this idea is similar to another approach for<br>IBOutlet property<br>&lt;https://twitter.com/jesse_squires/status/626264940450480128&gt; :<br></p><p><br>Use *didSet* on your IBOutlets to configure views instead of cramming code<br>&gt; into viewDidLoad. Much cleaner. Still called only once.<br></p><p><br>- Victor Wang<br></p><p>On Wed, Dec 23, 2015 at 5:07 PM, Félix Cloutier &lt;felixcca at yahoo.ca&gt; wrote:<br></p><p>&gt; willSet and didSet are currently not even called from the init method.<br>&gt; This also goes counter to the current property behaviors proposal (didGet<br>&gt; and didSet would become part of that) because behaviors aren&#39;t planned for<br>&gt; let properties.<br>&gt;<br>&gt; You&#39;re saying you want it to happen as soon as it was set, but do you<br>&gt; really need it &quot;as soon as that&quot; or can you afford to wait a little bit?<br>&gt; Because you can probably just put most of that code at the end of your<br>&gt; initializer, where it&#39;s guaranteed that the property has been set.<br>&gt;<br>&gt; Félix<br>&gt;<br>&gt; Le 23 déc. 2015 à 10:22:46, shengjia wang via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;<br>&gt;<br>&gt; Since swift v1.2, we can initialize `let` property in `init()` instead of<br>&gt; being forced to give a value when declare it. This is great !<br>&gt;<br>&gt; But every time I run into the case such as the example below:<br>&gt;<br>&gt; let view: UIView {<br>&gt;   didSet {<br>&gt;     /**<br>&gt;      * This time, `view` did set ( a.k.a initialized in case of `let`<br>&gt; property), so I want to bind some other actions just after, such as<br>&gt; `setBackgroundColor`. But actually I can&#39;t, compiler will complain that<br>&gt; `let` declaration can not be observing properties. So I have to either move<br>&gt; all these &quot;actions&quot; to `init()` or change `view` to a `var` property which<br>&gt; is not necessary at all.<br>&gt;      */<br>&gt;   }<br>&gt; }<br>&gt;<br>&gt; Actually in swift, I think it&#39;s quite commun issue that people run into a<br>&gt; large `init()` method. This approach could make it way better in most cases.<br>&gt;<br>&gt; So, I&#39;m wondering why not make `didSet` also available for `let` property,<br>&gt; or maybe even better to add new keyword such as &quot;didInit&quot; which only get<br>&gt; called for first set.<br>&gt;<br>&gt; - Victor Wang<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151223/33fef72b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>[Proposal] Make `didSet` also available for `let` property, or something new such as `didInit`</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>December 23, 2015 at 01:00:00pm</p></header><div class="content"><p>I&#39;m just one person out of many on this list that you can convince. However, it&#39;s gonna be an uphill battle to get my vote. I see the small clarity benefit that this brings but I also see big problems that you didn&#39;t mention.<br></p><p>First, property observers are currently not fired from initializers. This is because it is unreasonably constraining that observers should be able to run even though your object has not been fully initialized. What if they need another variable that has not been initialized? It is not possible to create a migration tool that would automatically fix these issues, as you can have multiple initializers that initialize members in a different order. Is it worth it to potentially break every existing Swift code base to be able to move initialization code a few lines up?<br></p><p>This also does not address the case where let properties are initialized in a different order in different initializers. You could easily end up with observers that simply cannot run at the time that they should.<br></p><p>Second, let properties cannot have observers attached to it for reasons that are obvious in the current model (observers don&#39;t fire in init methods and let properties cannot be modified outside the init method). Your proposal would add them for the sole purpose of using them in the init method, since they cannot fire from anywhere else. There is also a very interesting proposal to generalize property behaviors &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003148.html&gt;, which may structurally transform how willSet and didSet are implemented, and this proposal currently excludes behaviors on let properties.<br></p><p>It&#39;s not necessarily a bad idea to move the code elsewhere, but I don&#39;t think that this is an appropriate solution.<br></p><p>Félix<br></p><p>&gt; Le 23 déc. 2015 à 12:39:10, shengjia wang &lt;wangshengjia01 at gmail.com&gt; a écrit :<br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; You are saying: &quot;Because you can probably just put most of that code at the end of your initialiser&quot;. I see.. and this proposal is exactly about how to avoid this situation.<br>&gt; <br>&gt; I&#39;m saying it would be neat if we can band some side effects once we set a `let` property. Example:<br>&gt; <br>&gt;     let view: UIView {<br>&gt;         didSet {<br>&gt;             view.background = UIColor.blackColor()<br>&gt;             view.translatesAutoresizingMaskIntoConstraints<br>&gt;         }<br>&gt;     }<br>&gt;     let scrollView: UIScrollView {<br>&gt;         willSet {<br>&gt;             scrollView.removeObserver(self, forKeyPath: &quot;contentOffset&quot;)<br>&gt;         }<br>&gt;         didSet {<br>&gt;             scrollView.addObserver(self, forKeyPath: &quot;contentOffset&quot;, options: .New, context: nil)<br>&gt;         }<br>&gt;     }<br>&gt;     init(targetScrollView: UIScrollView) {<br>&gt;         view = UIView()<br>&gt;         scrollView = targetScrollView<br>&gt;         super.init()<br>&gt;         <br>&gt;         // if we could put them into property observing ...<br>&gt;         // view.background = UIColor.blackColor()<br>&gt;         // view.translatesAutoresizingMaskIntoConstraints<br>&gt;         // scrollView.addObserver(self, forKeyPath: &quot;contentOffset&quot;, options:.New, context: nil)<br>&gt;         // ...<br>&gt;     }<br>&gt; <br>&gt; We can extract the &quot;setup property&quot; step from init method and separate them for all different properties just after the property be initialised. Otherwise, we have to either mix them into the init method or change `let` to `var`. Both are doable but not ideal in my opinion.<br>&gt; <br>&gt; By the way, the principal of this idea is similar to another approach for IBOutlet property &lt;https://twitter.com/jesse_squires/status/626264940450480128&gt; :<br>&gt; <br>&gt; Use didSet on your IBOutlets to configure views instead of cramming code into viewDidLoad. Much cleaner. Still called only once.<br>&gt; <br>&gt; - Victor Wang <br>&gt; <br>&gt; On Wed, Dec 23, 2015 at 5:07 PM, Félix Cloutier &lt;felixcca at yahoo.ca &lt;mailto:felixcca at yahoo.ca&gt;&gt; wrote:<br>&gt; willSet and didSet are currently not even called from the init method. This also goes counter to the current property behaviors proposal (didGet and didSet would become part of that) because behaviors aren&#39;t planned for let properties.<br>&gt; <br>&gt; You&#39;re saying you want it to happen as soon as it was set, but do you really need it &quot;as soon as that&quot; or can you afford to wait a little bit? Because you can probably just put most of that code at the end of your initializer, where it&#39;s guaranteed that the property has been set.<br>&gt; <br>&gt; Félix<br>&gt; <br>&gt;&gt; Le 23 déc. 2015 à 10:22:46, shengjia wang via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Since swift v1.2, we can initialize `let` property in `init()` instead of being forced to give a value when declare it. This is great ! <br>&gt;&gt; <br>&gt;&gt; But every time I run into the case such as the example below:<br>&gt;&gt; <br>&gt;&gt; let view: UIView {<br>&gt;&gt;   didSet {<br>&gt;&gt;     /** <br>&gt;&gt;      * This time, `view` did set ( a.k.a initialized in case of `let` property), so I want to bind some other actions just after, such as `setBackgroundColor`. But actually I can&#39;t, compiler will complain that `let` declaration can not be observing properties. So I have to either move all these &quot;actions&quot; to `init()` or change `view` to a `var` property which is not necessary at all.<br>&gt;&gt;      */<br>&gt;&gt;   }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Actually in swift, I think it&#39;s quite commun issue that people run into a large `init()` method. This approach could make it way better in most cases.<br>&gt;&gt; <br>&gt;&gt; So, I&#39;m wondering why not make `didSet` also available for `let` property, or maybe even better to add new keyword such as &quot;didInit&quot; which only get called for first set.<br>&gt;&gt; <br>&gt;&gt; - Victor Wang<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151223/7c667532/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c0ccf04bbf19f7cda026e8fcfcc0111a?s=50"></div><header><strong>[Proposal] Make `didSet` also available for `let` property, or something new such as `didInit`</strong> from <string>Michal Pearse</string> &lt;mikethegirl at gmail.com&gt;<p>December 24, 2015 at 09:00:00am</p></header><div class="content"><p>I feel like this would be an unexpected way of doing things.<br></p><p>Why would I want to separate my set-up code from my init() without any<br>immediately obvious link between the two?<br></p><p>If your init() is getting unwieldy, perhaps a cleaner solution is to simply<br>decompose some of the setting up into smaller (private) methods that are<br>then called by the init()? At least when it is done this way, you can<br>immediately see that other stuff happens from within the init() method<br>without having to think about whether a will/didSet might have been called<br>on a property.<br></p><p><br>On Thu, Dec 24, 2015 at 6:39 AM, shengjia wang via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hi,<br>&gt;<br>&gt; You are saying: *&quot;Because you can probably just put most of that code at<br>&gt; the end of your initialiser&quot;*. I see.. and this proposal is exactly about<br>&gt; how to avoid this situation.<br>&gt;<br>&gt; I&#39;m saying it would be neat if we can band some side effects once we set a<br>&gt; `let` property. Example:<br>&gt;<br>&gt;     let view: UIView {<br>&gt;<br>&gt;         didSet {<br>&gt;<br>&gt;             view.background = UIColor.blackColor()<br>&gt;<br>&gt;             view.translatesAutoresizingMaskIntoConstraints<br>&gt;<br>&gt;         }<br>&gt;<br>&gt;     }<br>&gt;<br>&gt;     let scrollView: UIScrollView {<br>&gt;<br>&gt;         willSet {<br>&gt;<br>&gt;             scrollView.removeObserver(self, forKeyPath: &quot;contentOffset&quot;)<br>&gt;<br>&gt;         }<br>&gt;<br>&gt;         didSet {<br>&gt;<br>&gt;             scrollView.addObserver(self, forKeyPath: &quot;contentOffset&quot;,<br>&gt; options: .New, context: nil)<br>&gt;<br>&gt;         }<br>&gt;<br>&gt;     }<br>&gt;<br>&gt;     init(targetScrollView: UIScrollView) {<br>&gt;<br>&gt;         view = UIView()<br>&gt;<br>&gt;         scrollView = targetScrollView<br>&gt;<br>&gt;         super.init()<br>&gt;<br>&gt;<br>&gt;<br>&gt;         // if we could put them into property observing ...<br>&gt;<br>&gt;         // view.background = UIColor.blackColor()<br>&gt;<br>&gt;         // view.translatesAutoresizingMaskIntoConstraints<br>&gt;<br>&gt;         // scrollView.addObserver(self, forKeyPath: &quot;contentOffset&quot;,<br>&gt; options:.New, context: nil)<br>&gt;<br>&gt;         // ...<br>&gt;<br>&gt;     }<br>&gt;<br>&gt;<br>&gt; We can extract the &quot;setup property&quot; step from init method and separate<br>&gt; them for all different properties just after the property be initialised.<br>&gt; Otherwise, we have to either mix them into the init method or change `let`<br>&gt; to `var`. Both are doable but not ideal in my opinion.<br>&gt;<br>&gt;<br>&gt; By the way, the principal of this idea is similar to another approach for<br>&gt; IBOutlet property<br>&gt; &lt;https://twitter.com/jesse_squires/status/626264940450480128&gt; :<br>&gt;<br>&gt;<br>&gt; Use *didSet* on your IBOutlets to configure views instead of cramming<br>&gt;&gt; code into viewDidLoad. Much cleaner. Still called only once.<br>&gt;<br>&gt;<br>&gt; - Victor Wang<br>&gt;<br>&gt; On Wed, Dec 23, 2015 at 5:07 PM, Félix Cloutier &lt;felixcca at yahoo.ca&gt; wrote:<br>&gt;<br>&gt;&gt; willSet and didSet are currently not even called from the init method.<br>&gt;&gt; This also goes counter to the current property behaviors proposal (didGet<br>&gt;&gt; and didSet would become part of that) because behaviors aren&#39;t planned for<br>&gt;&gt; let properties.<br>&gt;&gt;<br>&gt;&gt; You&#39;re saying you want it to happen as soon as it was set, but do you<br>&gt;&gt; really need it &quot;as soon as that&quot; or can you afford to wait a little bit?<br>&gt;&gt; Because you can probably just put most of that code at the end of your<br>&gt;&gt; initializer, where it&#39;s guaranteed that the property has been set.<br>&gt;&gt;<br>&gt;&gt; Félix<br>&gt;&gt;<br>&gt;&gt; Le 23 déc. 2015 à 10:22:46, shengjia wang via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Since swift v1.2, we can initialize `let` property in `init()` instead of<br>&gt;&gt; being forced to give a value when declare it. This is great !<br>&gt;&gt;<br>&gt;&gt; But every time I run into the case such as the example below:<br>&gt;&gt;<br>&gt;&gt; let view: UIView {<br>&gt;&gt;   didSet {<br>&gt;&gt;     /**<br>&gt;&gt;      * This time, `view` did set ( a.k.a initialized in case of `let`<br>&gt;&gt; property), so I want to bind some other actions just after, such as<br>&gt;&gt; `setBackgroundColor`. But actually I can&#39;t, compiler will complain that<br>&gt;&gt; `let` declaration can not be observing properties. So I have to either move<br>&gt;&gt; all these &quot;actions&quot; to `init()` or change `view` to a `var` property which<br>&gt;&gt; is not necessary at all.<br>&gt;&gt;      */<br>&gt;&gt;   }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; Actually in swift, I think it&#39;s quite commun issue that people run into a<br>&gt;&gt; large `init()` method. This approach could make it way better in most cases.<br>&gt;&gt;<br>&gt;&gt; So, I&#39;m wondering why not make `didSet` also available for `let`<br>&gt;&gt; property, or maybe even better to add new keyword such as &quot;didInit&quot; which<br>&gt;&gt; only get called for first set.<br>&gt;&gt;<br>&gt;&gt; - Victor Wang<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151224/45f51343/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/283bdc6ec76dd4d16b7a8234222e55d4?s=50"></div><header><strong>[Proposal] Make `didSet` also available for `let` property, or something new such as `didInit`</strong> from <string>Michel Fortin</string> &lt;michel.fortin at michelf.ca&gt;<p>December 23, 2015 at 01:00:00pm</p></header><div class="content"><p>Le 23 déc. 2015 à 11:07, Félix Cloutier via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br></p><p>&gt; willSet and didSet are currently not even called from the init method.<br></p><p>And they can&#39;t, because in those two blocks you have access to the old value as well as the new value. How would that work when you&#39;re setting the initial value?<br></p><p>	var value: Int {<br>		willSet { print(&quot;willSet \(value) -&gt; \(newValue)&quot;) }<br>		didSet { print(&quot;didSet \(oldValue) -&gt; \(value)&quot;) }<br>	}<br></p><p><br>-- <br>Michel Fortin<br>https://michelf.ca<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4649cb942e15c02803f7ed3ac089f239?s=50"></div><header><strong>[Proposal] Make `didSet` also available for `let` property, or something new such as `didInit`</strong> from <string>shengjia wang</string> &lt;wangshengjia01 at gmail.com&gt;<p>December 23, 2015 at 11:00:00pm</p></header><div class="content"><p>@Félix,<br></p><p>For the first point, the issue you talked about isn&#39;t new. We can enter<br>into that mess easily right now just by changing `let` to `var`.<br></p><p>For the second point, well.. I agree with you and @Michel, thank you guys.<br>It do make sense, I should&#39;ve noticed it earlier. This is not an<br>appropriate solution to make the current &quot;didSet&quot; keyword available for<br>`let` property.<br></p><p>But I&#39;m still thinking it should not be a problem at all if we add<br>something new, such as &quot;didInit&quot;, which only get called for the very first<br>time when property is assigned a value.<br></p><p>What do you think?<br></p><p><br></p><p>On Wed, Dec 23, 2015 at 7:39 PM, Michel Fortin &lt;michel.fortin at michelf.ca&gt;<br>wrote:<br></p><p>&gt; Le 23 déc. 2015 à 11:07, Félix Cloutier via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;<br>&gt; &gt; willSet and didSet are currently not even called from the init method.<br>&gt;<br>&gt; And they can&#39;t, because in those two blocks you have access to the old<br>&gt; value as well as the new value. How would that work when you&#39;re setting the<br>&gt; initial value?<br>&gt;<br>&gt;         var value: Int {<br>&gt;                 willSet { print(&quot;willSet \(value) -&gt; \(newValue)&quot;) }<br>&gt;                 didSet { print(&quot;didSet \(oldValue) -&gt; \(value)&quot;) }<br>&gt;         }<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Michel Fortin<br>&gt; https://michelf.ca<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151223/415754bb/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
