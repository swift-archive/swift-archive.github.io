<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0032: Add find method to SequenceType</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April 29, 2016 at 05:00:00pm</p></header><div class="content"><p>on Fri Apr 29 2016, Kevin Ballard &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Fri, Apr 29, 2016, at 05:12 PM, Max Moiseev via swift-evolution wrote:<br>&gt;&gt; HI all,<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; After having discussed this proposal with the members of the standard<br>&gt;&gt; library team, we would like to propose the following updates:<br>&gt;&gt;<br>&gt;&gt; - Since both the language and the standard library have evolved since<br>&gt;&gt;   it was written, the proposal should reflect these changes (things<br>&gt;&gt;   like renaming `Generator` to `Iterator`, adjusting for first<br>&gt;&gt;   argument label rules etc.)<br>&gt;&gt;&gt; (Actually, while writing this, I discovered<br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/pull/276)<br>&gt;&gt; - We believe that renaming `find(_:)` to `first(where:)` would make<br>&gt;&gt;   call sites more clear<br>&gt;&gt;<br>&gt;&gt;&gt; // original proposal<br>&gt;&gt;&gt; numbers.find { isPrime($0) }<br>&gt;&gt;&gt; numbers.find(isPrime)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; // suggested update<br>&gt;&gt;&gt; numbers.first { isPrime($0) }<br>&gt;&gt;&gt; numbers.first(where: isPrime)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; In the examples above, when the predicate is passed as a trailing<br>&gt;&gt;&gt; closure, there is no big difference in the invocation, but it changes<br>&gt;&gt;&gt; when we have a named function that we would like to use as a<br>&gt;&gt;&gt; predicate.<br>&gt;&gt;&gt; The Collection protocol already has a property called `first`, that<br>&gt;&gt;&gt; returns an optional element, it also has a method `index(where:)`. In<br>&gt;&gt;&gt; this sense `first(where:)` does not introduce new words to the<br>&gt;&gt;&gt; library vocabulary.<br>&gt;<br>&gt; first(where:) is a neat idea, but I&#39;m a little concerned about ambiguity<br>&gt; with the property in the presence of type errors. Experimentally, if I<br>&gt; try to call first(where:) with a block with the wrong signature, Swift 3<br>&gt; produces an unhelpful error about how I cannot call value of a non-<br>&gt; function type (i.e. the property) instead of recognizing that I&#39;m trying<br>&gt; to call the function.<br>&gt;<br>&gt; Example:<br>&gt;<br>&gt; struct Foo {<br>&gt; var first: Int = 42<br>&gt;<br>&gt; func first(where: @noescape Int -&gt; Bool) -&gt; Int {<br>&gt; return 42<br>&gt; }<br>&gt; }<br>&gt;<br>&gt; If I try and call `print(Foo().find(where: { true }))`, you&#39;ll note that<br>&gt; the closure has the wrong type signature (it types as `() -&gt; Bool`), and<br>&gt; the compiler gives me the error:<br>&gt;<br>&gt; &lt;REPL Input&gt;:1:12: error: cannot call value of non-function type &#39;Int&#39;<br>&gt; Foo().first(where: { true })<br>&gt; ~~~~~~~~~~~^<br>&gt;<br>&gt; Calling it with a block of the correct type works, but having useful<br>&gt; errors is very important.<br></p><p>That&#39;s a QOI bug in the compiler that can be fixed.  IMO we should avoid<br>designing APIs around temporary limitations of the compiler<br>implementation.<br></p><p>-- <br>Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
