<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f6b7154fd1d6a470d0b521a2e484bffc?s=50"></div><header><strong>rename dropFirst() and dropLast()</strong> from <string>Daniel Duan</string> &lt;daniel at duan.org&gt;<p>December 28, 2015 at 02:00:00pm</p></header><div class="content"><p>Hi all,<br></p><p>Today I made a mistake trying to use .dropFirst() to remove an array element in-place. I have the feeling that I will second-guess myself the next time.<br></p><p>IHMO, now that dorpFirst() is no-longer a free function, it&#39;s name is hardly distinguishable from .removeFirst(). When compared side-by-side, .dropFirst()  does seem to suggest “return the rest&quot;. But this subtlety is easily lost for users who don’t use both on regular bases. It’s worse for non-native English speakers.<br></p><p>Looking at a few other languages that provides a .dropFirst() for their list/array/sequence:<br></p><p>* Haskell’s “tail&quot; only makes sense when paired with “head&quot; (and not that self-explanatory). <br>* Rust doesn’t have a direct counterpart, but split_first() return both head and tail in a tuple.<br>* Scala and Ruby has a .drop(), but there’s no equivalent of .removeFirst() to cause confusion.<br></p><p><br>There must be a better name for this important method. I came up with:<br></p><p>.dropFirst() =&gt; .excludeFirst()<br></p><p>What do y’all think?<br></p><p>(Everything above applies to .dropLast())<br></p><p>- Daniel<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/283bdc6ec76dd4d16b7a8234222e55d4?s=50"></div><header><strong>rename dropFirst() and dropLast()</strong> from <string>Michel Fortin</string> &lt;michel.fortin at michelf.ca&gt;<p>December 28, 2015 at 06:00:00pm</p></header><div class="content"><p>Le 28 déc. 2015 à 17:27, Daniel Duan via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br></p><p>&gt; .dropFirst() =&gt; .excludeFirst()<br>&gt; <br>&gt; What do y’all think?<br></p><p>Following the new API guidelines, shouldn&#39;t the name be either `droppingFirst` or `excludingFirst`? That would solve your problem, right? Many things still need to be adapted to the new conventions.<br></p><p>https://swift.org/documentation/api-design-guidelines.html#be-grammatical<br></p><p>-- <br>Michel Fortin<br>https://michelf.ca<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>rename dropFirst() and dropLast()</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>December 28, 2015 at 04:00:00pm</p></header><div class="content"><p>On Mon, Dec 28, 2015, at 03:53 PM, Michel Fortin via swift-evolution wrote:<br>&gt; Le 28 déc. 2015 à 17:27, Daniel Duan via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; &gt; .dropFirst() =&gt; .excludeFirst()<br>&gt; &gt; <br>&gt; &gt; What do y’all think?<br>&gt; <br>&gt; Following the new API guidelines, shouldn&#39;t the name be either `droppingFirst` or `excludingFirst`? That would solve your problem, right? Many things still need to be adapted to the new conventions.<br>&gt; <br>&gt; https://swift.org/documentation/api-design-guidelines.html#be-grammatical<br></p><p>That&#39;s not what the conventions say. They say non-mutating phrases should read as noun phrases when possible. But `droppingFirst` isn&#39;t a noun phrase. This means things like `index.successor()`. It also says that if there is no good noun phrase to use then imperative verbs are acceptable, which means it will stay as `dropFirst`.<br></p><p>-Kevin Ballard<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/283bdc6ec76dd4d16b7a8234222e55d4?s=50"></div><header><strong>rename dropFirst() and dropLast()</strong> from <string>Michel Fortin</string> &lt;michel.fortin at michelf.ca&gt;<p>December 28, 2015 at 07:00:00pm</p></header><div class="content"><p>Le 28 déc. 2015 à 19:02, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; On Mon, Dec 28, 2015, at 03:53 PM, Michel Fortin via swift-evolution wrote:<br>&gt;&gt; Following the new API guidelines, shouldn&#39;t the name be either `droppingFirst` or `excludingFirst`? That would solve your problem, right? Many things still need to be adapted to the new conventions.<br>&gt;&gt; <br>&gt;&gt; https://swift.org/documentation/api-design-guidelines.html#be-grammatical<br>&gt; <br>&gt; That&#39;s not what the conventions say. They say non-mutating phrases should read as noun phrases when possible. But `droppingFirst` isn&#39;t a noun phrase. This means things like `index.successor()`. It also says that if there is no good noun phrase to use then imperative verbs are acceptable, which means it will stay as `dropFirst`.<br></p><p>Really? The convention says: &quot;When a mutating method is described by a verb, name its non-mutating counterpart according to the “ed/ing” rule, e.g. the non-mutating versions of x.sort() and x.append(y) are x.sorted() and x.appending(y).&quot;<br></p><p>Are you telling me that because no one bothered *yet* writing a mutating version of this method the &quot;ing&quot; rule does not apply? That it will apply only the day someone will write mutating method called `dropFirst`? This interpretation of the guidelines does not make much sense.<br></p><p>-- <br>Michel Fortin<br>https://michelf.ca<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>rename dropFirst() and dropLast()</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>December 28, 2015 at 04:00:00pm</p></header><div class="content"><p>On Mon, Dec 28, 2015, at 04:19 PM, Michel Fortin wrote:<br>&gt; Le 28 déc. 2015 à 19:02, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; &gt; On Mon, Dec 28, 2015, at 03:53 PM, Michel Fortin via swift-evolution wrote:<br>&gt; &gt;&gt; Following the new API guidelines, shouldn&#39;t the name be either `droppingFirst` or `excludingFirst`? That would solve your problem, right? Many things still need to be adapted to the new conventions.<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; https://swift.org/documentation/api-design-guidelines.html#be-grammatical<br>&gt; &gt; <br>&gt; &gt; That&#39;s not what the conventions say. They say non-mutating phrases should read as noun phrases when possible. But `droppingFirst` isn&#39;t a noun phrase. This means things like `index.successor()`. It also says that if there is no good noun phrase to use then imperative verbs are acceptable, which means it will stay as `dropFirst`.<br>&gt; <br>&gt; Really? The convention says: &quot;When a mutating method is described by a verb, name its non-mutating counterpart according to the “ed/ing” rule, e.g. the non-mutating versions of x.sort() and x.append(y) are x.sorted() and x.appending(y).&quot;<br>&gt; <br>&gt; Are you telling me that because no one bothered *yet* writing a mutating version of this method the &quot;ing&quot; rule does not apply? That it will apply only the day someone will write mutating method called `dropFirst`? This interpretation of the guidelines does not make much sense.<br></p><p>Oh my bad, you&#39;re right. I read the first two rules, glanced ahead and saw it talking about other specialized variants (e.g. boolean methods/properties) and managed to not notice what the third rule said.<br></p><p>That said, `droppingFirst` sounds pretty weird to me. &quot;drop&quot; (and the related verb &quot;take&quot; that we&#39;re not using) has precedent in multiple languages (Rust and Haskell come to mind) to mean &quot;return a new sequence that skips the first N elements&quot;. And I&#39;m not aware of any language that sets precedent for the verb &quot;drop&quot; to mean &quot;mutate the receiver&quot;.<br></p><p>-Kevin Ballard<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>rename dropFirst() and dropLast()</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>December 28, 2015 at 04:00:00pm</p></header><div class="content"><p>On Mon, Dec 28, 2015, at 04:23 PM, Kevin Ballard wrote:<br>&gt; On Mon, Dec 28, 2015, at 04:19 PM, Michel Fortin wrote:<br>&gt; &gt; Le 28 déc. 2015 à 19:02, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; &gt; &gt; On Mon, Dec 28, 2015, at 03:53 PM, Michel Fortin via swift-evolution wrote:<br>&gt; &gt; &gt;&gt; Following the new API guidelines, shouldn&#39;t the name be either `droppingFirst` or `excludingFirst`? That would solve your problem, right? Many things still need to be adapted to the new conventions.<br>&gt; &gt; &gt;&gt; <br>&gt; &gt; &gt;&gt; https://swift.org/documentation/api-design-guidelines.html#be-grammatical<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; That&#39;s not what the conventions say. They say non-mutating phrases should read as noun phrases when possible. But `droppingFirst` isn&#39;t a noun phrase. This means things like `index.successor()`. It also says that if there is no good noun phrase to use then imperative verbs are acceptable, which means it will stay as `dropFirst`.<br>&gt; &gt; <br>&gt; &gt; Really? The convention says: &quot;When a mutating method is described by a verb, name its non-mutating counterpart according to the “ed/ing” rule, e.g. the non-mutating versions of x.sort() and x.append(y) are x.sorted() and x.appending(y).&quot;<br>&gt; &gt; <br>&gt; &gt; Are you telling me that because no one bothered *yet* writing a mutating version of this method the &quot;ing&quot; rule does not apply? That it will apply only the day someone will write mutating method called `dropFirst`? This interpretation of the guidelines does not make much sense.<br>&gt; <br>&gt; Oh my bad, you&#39;re right. I read the first two rules, glanced ahead and saw it talking about other specialized variants (e.g. boolean methods/properties) and managed to not notice what the third rule said.<br>&gt; <br>&gt; That said, `droppingFirst` sounds pretty weird to me. &quot;drop&quot; (and the related verb &quot;take&quot; that we&#39;re not using) has precedent in multiple languages (Rust and Haskell come to mind) to mean &quot;return a new sequence that skips the first N elements&quot;. And I&#39;m not aware of any language that sets precedent for the verb &quot;drop&quot; to mean &quot;mutate the receiver&quot;.<br></p><p>To add to this, existing Swift and Obj-C precedent says the mutating method will be named with &quot;remove&quot; (e.g. `removeFirst`). So the logical name for this based on the grammar rule is `removingFirst`, but that also sounds weird to me.<br></p><p>-Kevin Ballard<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/283bdc6ec76dd4d16b7a8234222e55d4?s=50"></div><header><strong>rename dropFirst() and dropLast()</strong> from <string>Michel Fortin</string> &lt;michel.fortin at michelf.ca&gt;<p>December 28, 2015 at 07:00:00pm</p></header><div class="content"><p>Le 28 déc. 2015 à 19:25, Kevin Ballard &lt;kevin at sb.org&gt; a écrit :<br></p><p>&gt; To add to this, existing Swift and Obj-C precedent says the mutating method will be named with &quot;remove&quot; (e.g. `removeFirst`). So the logical name for this based on the grammar rule is `removingFirst`, but that also sounds weird to me.<br></p><p>Sounds fine to me, but I&#39;ll admit not being a native English speaker. I know I would never have thought looking for `drop` when looking for the non-mutating version. Seems I&#39;m not familiar enough with Rust and Haskell. It&#39;s a certainly a nice thing that if I began by writing `remove`, autocompletion would have suggested `removing`: no guesswork with synonyms to find the non-mutating variant.<br></p><p>-- <br>Michel Fortin<br>https://michelf.ca<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>rename dropFirst() and dropLast()</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>December 28, 2015 at 06:00:00pm</p></header><div class="content"><p>If one were to rename dropFirst/dropLast, I’d love for prefix and suffix to be renamed also to better pair with the methods.<br></p><p>Something like:<br>- absorbingFirst<br>- discardingFirst<br>- disregardingFirst<br>- droppingFirst<br>- eliminatingFirst<br>- excludingFirst<br>- filteringFirst<br>- ignoringFirst<br>- refusingFirst<br>- removingFirst<br></p><p>paired with an alternate name for “prefix”:<br>- acceptingFirst<br>- choosingFirst<br>- harvestingFirst<br>- includingFirst<br>- outputtingFirst<br>- pickingFirst<br>- selectingFirst<br>- takingFirst<br></p><p>Alternatively (and perhaps clearer) once could take “prefix” and pair it with a prefix-dropping method:<br>- absorbingPrefix<br>- discardingPrefix<br>- disregardingPrefix<br>- droppingPrefix<br>- eliminatingPrefix<br>- excludingPrefix<br>- filteringPrefix<br>- ignoringPrefix<br>- refusingPrefix<br>- removingPrefix<br></p><p>My vote? “prefix” and “ignoringPrefix” paired with “suffix” and “ignoringSuffix”. Words like ‘absorb’, ‘disregard’ and ‘ignore’ seem to better indicate what the default algorithm is going to do.<br></p><p>(Of course with that logic, “suffix” is a terribly misleading name w.r.t. complexity and memory usage, when you consider what the generator-backed implementation has to do)<br></p><p>-DW<br></p><p>&gt; On Dec 28, 2015, at 5:49 PM, Michel Fortin via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Le 28 déc. 2015 à 19:25, Kevin Ballard &lt;kevin at sb.org&gt; a écrit :<br>&gt; <br>&gt;&gt; To add to this, existing Swift and Obj-C precedent says the mutating method will be named with &quot;remove&quot; (e.g. `removeFirst`). So the logical name for this based on the grammar rule is `removingFirst`, but that also sounds weird to me.<br>&gt; <br>&gt; Sounds fine to me, but I&#39;ll admit not being a native English speaker. I know I would never have thought looking for `drop` when looking for the non-mutating version. Seems I&#39;m not familiar enough with Rust and Haskell. It&#39;s a certainly a nice thing that if I began by writing `remove`, autocompletion would have suggested `removing`: no guesswork with synonyms to find the non-mutating variant.<br>&gt; <br>&gt; -- <br>&gt; Michel Fortin<br>&gt; https://michelf.ca<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>rename dropFirst() and dropLast()</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>December 29, 2015 at 04:00:00pm</p></header><div class="content"><p>&gt; On Dec 28, 2015, at 5:35 PM, David Waite via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; If one were to rename dropFirst/dropLast, I’d love for prefix and suffix to be renamed also to better pair with the methods.<br></p><p>I prefer to address this by creating a unified EDSL for describing all of these operations as discussed in this thread: Re: Proposal: Python&#39;s indexing and slicing &lt;http://news.gmane.org/find-root.php?message_id=ED492767%2dE1ED%2d41D6%2d90A8%2dBCA9AC6D0F34%40apple.com&gt;<br></p><p>-Dave<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151229/540b64a4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>rename dropFirst() and dropLast()</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>December 29, 2015 at 11:00:00pm</p></header><div class="content"><p>I do rather like that, although the thread stalled a week ago which is equivalent to 1 swift-evolution year :-)<br></p><p>Is the current thinking that “$ + 3” and its ilk be a literal or computation returning some sort of Offset or Slice value, and SequenceType would define a subscript operation taking a Slice and returning an Element or SubSequence respectively?<br></p><p>-DW<br></p><p>&gt; On Dec 29, 2015, at 5:53 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 28, 2015, at 5:35 PM, David Waite via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; If one were to rename dropFirst/dropLast, I’d love for prefix and suffix to be renamed also to better pair with the methods.<br>&gt; <br>&gt; I prefer to address this by creating a unified EDSL for describing all of these operations as discussed in this thread: Re: Proposal: Python&#39;s indexing and slicing &lt;http://news.gmane.org/find-root.php?message_id=ED492767%2dE1ED%2d41D6%2d90A8%2dBCA9AC6D0F34%40apple.com&gt;<br>&gt; <br>&gt; -Dave<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151229/82599fbe/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>rename dropFirst() and dropLast()</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>December 31, 2015 at 08:00:00am</p></header><div class="content"><p>&gt; On Dec 29, 2015, at 10:23 PM, David Waite &lt;david at alkaline-solutions.com&gt; wrote:<br>&gt; <br>&gt; I do rather like that, although the thread stalled a week ago which is equivalent to 1 swift-evolution year :-)<br>&gt; <br>&gt; Is the current thinking that “$ + 3” and its ilk be a literal or computation returning some sort of Offset or Slice value, and SequenceType would define a subscript operation taking a Slice and returning an Element or SubSequence respectively?<br></p><p>Yes, something like that.<br></p><p>&gt; <br>&gt; -DW<br>&gt; <br>&gt;&gt; On Dec 29, 2015, at 5:53 PM, Dave Abrahams &lt;dabrahams at apple.com &lt;mailto:dabrahams at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 28, 2015, at 5:35 PM, David Waite via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If one were to rename dropFirst/dropLast, I’d love for prefix and suffix to be renamed also to better pair with the methods.<br>&gt;&gt; <br>&gt;&gt; I prefer to address this by creating a unified EDSL for describing all of these operations as discussed in this thread: Re: Proposal: Python&#39;s indexing and slicing &lt;http://news.gmane.org/find-root.php?message_id=ED492767%2dE1ED%2d41D6%2d90A8%2dBCA9AC6D0F34%40apple.com&gt;<br>&gt;&gt; <br>&gt;&gt; -Dave<br>&gt;&gt; <br>&gt; <br></p><p>-Dave<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151231/c962cd5f/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>rename dropFirst() and dropLast()</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>December 29, 2015 at 11:00:00am</p></header><div class="content"><p>On Mon, Dec 28, 2015, at 04:23 PM, Kevin Ballard wrote:<br>&gt; That said, `droppingFirst` sounds pretty weird to me. &quot;drop&quot; (and the related verb &quot;take&quot; that we&#39;re not using) has precedent in multiple languages (Rust and Haskell come to mind) to mean &quot;return a new sequence that skips the first N elements&quot;. And I&#39;m not aware of any language that sets precedent for the verb &quot;drop&quot; to mean &quot;mutate the receiver&quot;.<br></p><p>Hmm, I just took a look, and while Rust does use &quot;take&quot;, it actually doesn&#39;t use &quot;drop&quot; (but Haskell does). Instead it uses &quot;skip&quot;, which seems like a good candidate if we&#39;re going to rename this. I&#39;m tempted to say we should use &quot;take&quot; instead of &quot;prefix&quot; as well, because `seq.prefix(3)` isn&#39;t actually immediately obvious what it does (as the verb &quot;prefix&quot; usually means to add onto the front, not to take the front). And we can use &quot;takeLast&quot; for &quot;suffix&quot; (neither Rust nor Haskell appears to have an equivalent of takeLast; I believe Rust doesn&#39;t because none of its iterator adaptors use dynamically-allocated memory, and I think Haskell expects you to just do `reverse . take n . reverse`). Although I do notice Haskell has a function dropWhileEnd that drops the suffix, which suggests &quot;takeEnd&quot; and &quot;dropEnd&quot; here.<br></p><p>Which is to say, if we&#39;re going to rename these methods, my vote is:<br></p><p>prefix -&gt; take<br>suffix -&gt; takeEnd or takeLast<br>dropFirst -&gt; skip<br>dropLast -&gt; skipEnd or skipLast<br></p><p>-Kevin Ballard<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f6b7154fd1d6a470d0b521a2e484bffc?s=50"></div><header><strong>rename dropFirst() and dropLast()</strong> from <string>Daniel Duan</string> &lt;daniel at duan.org&gt;<p>December 29, 2015 at 11:00:00am</p></header><div class="content"><p>Hi Kevin,<br></p><p>“take&quot; and “skip” are fine as free function names. As method names, they are a step back from following the API Guidelines (“non-mutating methods should read as noun phrases”).<br></p><p>- Daniel<br></p><p>&gt; On Dec 29, 2015, at 11:40 AM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Mon, Dec 28, 2015, at 04:23 PM, Kevin Ballard wrote:<br>&gt;&gt; That said, `droppingFirst` sounds pretty weird to me. &quot;drop&quot; (and the related verb &quot;take&quot; that we&#39;re not using) has precedent in multiple languages (Rust and Haskell come to mind) to mean &quot;return a new sequence that skips the first N elements&quot;. And I&#39;m not aware of any language that sets precedent for the verb &quot;drop&quot; to mean &quot;mutate the receiver&quot;.<br>&gt; <br>&gt; Hmm, I just took a look, and while Rust does use &quot;take&quot;, it actually doesn&#39;t use &quot;drop&quot; (but Haskell does). Instead it uses &quot;skip&quot;, which seems like a good candidate if we&#39;re going to rename this. I&#39;m tempted to say we should use &quot;take&quot; instead of &quot;prefix&quot; as well, because `seq.prefix(3)` isn&#39;t actually immediately obvious what it does (as the verb &quot;prefix&quot; usually means to add onto the front, not to take the front). And we can use &quot;takeLast&quot; for &quot;suffix&quot; (neither Rust nor Haskell appears to have an equivalent of takeLast; I believe Rust doesn&#39;t because none of its iterator adaptors use dynamically-allocated memory, and I think Haskell expects you to just do `reverse . take n . reverse`). Although I do notice Haskell has a function dropWhileEnd that drops the suffix, which suggests &quot;takeEnd&quot; and &quot;dropEnd&quot; here.<br>&gt; <br>&gt; Which is to say, if we&#39;re going to rename these methods, my vote is:<br>&gt; <br>&gt; prefix -&gt; take<br>&gt; suffix -&gt; takeEnd or takeLast<br>&gt; dropFirst -&gt; skip<br>&gt; dropLast -&gt; skipEnd or skipLast<br>&gt; <br>&gt; -Kevin Ballard<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>rename dropFirst() and dropLast()</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>December 29, 2015 at 12:00:00pm</p></header><div class="content"><p>I guess that&#39;s a good argument for keeping &quot;prefix&quot; and &quot;suffix&quot; instead of &quot;take&quot; and &quot;takeEnd&quot;. But there is no good noun phrase to use for dropFirst/dropLast (Haskell&#39;s &quot;init&quot; and &quot;tail&quot; are nouns but they&#39;re very confusing and don&#39;t really make sense once you add in an integral argument anyway). The guidelines do say it&#39;s acceptable to use an imperative verb if there is no good noun phrase, so &quot;skip&quot; and &quot;skipEnd&quot; (or &quot;skipLast&quot;, or maybe &quot;skipSuffix&quot; if we&#39;re keeping &quot;suffix&quot;) are still reasonable.<br></p><p>Incidentally, it occurs to me that &quot;removingFirst&quot; is actually not an appropriate name here, because dropFirst is a method of SequenceType, and SequenceType does not have mutating methods. removeFirst is actually defined by RangeReplaceableCollectionType (and by Set, and also by CollectionType if SubSequence == Self).<br></p><p>-Kevin Ballard<br></p><p>On Tue, Dec 29, 2015, at 11:55 AM, Daniel Duan wrote:<br>&gt; Hi Kevin,<br>&gt; <br>&gt; “take&quot; and “skip” are fine as free function names. As method names, they are a step back from following the API Guidelines (“non-mutating methods should read as noun phrases”).<br>&gt; <br>&gt; - Daniel<br>&gt; <br>&gt; &gt; On Dec 29, 2015, at 11:40 AM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; <br>&gt; &gt; On Mon, Dec 28, 2015, at 04:23 PM, Kevin Ballard wrote:<br>&gt; &gt;&gt; That said, `droppingFirst` sounds pretty weird to me. &quot;drop&quot; (and the related verb &quot;take&quot; that we&#39;re not using) has precedent in multiple languages (Rust and Haskell come to mind) to mean &quot;return a new sequence that skips the first N elements&quot;. And I&#39;m not aware of any language that sets precedent for the verb &quot;drop&quot; to mean &quot;mutate the receiver&quot;.<br>&gt; &gt; <br>&gt; &gt; Hmm, I just took a look, and while Rust does use &quot;take&quot;, it actually doesn&#39;t use &quot;drop&quot; (but Haskell does). Instead it uses &quot;skip&quot;, which seems like a good candidate if we&#39;re going to rename this. I&#39;m tempted to say we should use &quot;take&quot; instead of &quot;prefix&quot; as well, because `seq.prefix(3)` isn&#39;t actually immediately obvious what it does (as the verb &quot;prefix&quot; usually means to add onto the front, not to take the front). And we can use &quot;takeLast&quot; for &quot;suffix&quot; (neither Rust nor Haskell appears to have an equivalent of takeLast; I believe Rust doesn&#39;t because none of its iterator adaptors use dynamically-allocated memory, and I think Haskell expects you to just do `reverse . take n . reverse`). Although I do notice Haskell has a function dropWhileEnd that drops the suffix, which suggests &quot;takeEnd&quot; and &quot;dropEnd&quot; here.<br>&gt; &gt; <br>&gt; &gt; Which is to say, if we&#39;re going to rename these methods, my vote is:<br>&gt; &gt; <br>&gt; &gt; prefix -&gt; take<br>&gt; &gt; suffix -&gt; takeEnd or takeLast<br>&gt; &gt; dropFirst -&gt; skip<br>&gt; &gt; dropLast -&gt; skipEnd or skipLast<br>&gt; &gt; <br>&gt; &gt; -Kevin Ballard<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>rename dropFirst() and dropLast()</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>December 29, 2015 at 12:00:00pm</p></header><div class="content"><p>&gt; I guess that&#39;s a good argument for keeping &quot;prefix&quot; and &quot;suffix&quot; instead of &quot;take&quot; and &quot;takeEnd&quot;. But there is no good noun phrase to use for dropFirst/dropLast (Haskell&#39;s &quot;init&quot; and &quot;tail&quot; are nouns but they&#39;re very confusing and don&#39;t really make sense once you add in an integral argument anyway). The guidelines do say it&#39;s acceptable to use an imperative verb if there is no good noun phrase, so &quot;skip&quot; and &quot;skipEnd&quot; (or &quot;skipLast&quot;, or maybe &quot;skipSuffix&quot; if we&#39;re keeping &quot;suffix&quot;) are still reasonable.<br></p><p>I&#39;m thinking:<br></p><p>	collection.onlyFirst(5)<br>	collection.exceptFirst(5)<br>	collection.onlyLast(5)<br>	collection.exceptLast(5)<br></p><p>Perfectly parallel, don&#39;t sound like mutating operations, and very clear about which part you keep and which part you toss.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>rename dropFirst() and dropLast()</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>December 29, 2015 at 08:00:00pm</p></header><div class="content"><p>What about shift and pop?<br></p><p>They both could take an argument of a number of items to shift or pop ? <br></p><p><br></p><p>Sent from my iPhone<br></p><p>On 29 Dec 2015, at 20:25, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; I guess that&#39;s a good argument for keeping &quot;prefix&quot; and &quot;suffix&quot; instead of &quot;take&quot; and &quot;takeEnd&quot;. But there is no good noun phrase to use for dropFirst/dropLast (Haskell&#39;s &quot;init&quot; and &quot;tail&quot; are nouns but they&#39;re very confusing and don&#39;t really make sense once you add in an integral argument anyway). The guidelines do say it&#39;s acceptable to use an imperative verb if there is no good noun phrase, so &quot;skip&quot; and &quot;skipEnd&quot; (or &quot;skipLast&quot;, or maybe &quot;skipSuffix&quot; if we&#39;re keeping &quot;suffix&quot;) are still reasonable.<br>&gt; <br>&gt; I&#39;m thinking:<br>&gt; <br>&gt;    collection.onlyFirst(5)<br>&gt;    collection.exceptFirst(5)<br>&gt;    collection.onlyLast(5)<br>&gt;    collection.exceptLast(5)<br>&gt; <br>&gt; Perfectly parallel, don&#39;t sound like mutating operations, and very clear about which part you keep and which part you toss.<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f6b7154fd1d6a470d0b521a2e484bffc?s=50"></div><header><strong>rename dropFirst() and dropLast()</strong> from <string>Daniel Duan</string> &lt;daniel at duan.org&gt;<p>December 29, 2015 at 12:00:00pm</p></header><div class="content"><p>I made the same observation on Haskell in the original post :)<br></p><p>“removeFirst()” is also defined in CollectionType. So “dropFirst()” is removeFirst()’s – in the Guidelines’ term – &quot;non-mutating counterpart&quot; for all CollectionTypes. Therefore, “removingFirst()” would be the winner.<br></p><p>(My personal preference notwithstanding, that is).<br></p><p>&gt; On Dec 29, 2015, at 12:15 PM, Kevin Ballard &lt;kevin at sb.org&gt; wrote:<br>&gt; <br>&gt; I guess that&#39;s a good argument for keeping &quot;prefix&quot; and &quot;suffix&quot; instead of &quot;take&quot; and &quot;takeEnd&quot;. But there is no good noun phrase to use for dropFirst/dropLast (Haskell&#39;s &quot;init&quot; and &quot;tail&quot; are nouns but they&#39;re very confusing and don&#39;t really make sense once you add in an integral argument anyway). The guidelines do say it&#39;s acceptable to use an imperative verb if there is no good noun phrase, so &quot;skip&quot; and &quot;skipEnd&quot; (or &quot;skipLast&quot;, or maybe &quot;skipSuffix&quot; if we&#39;re keeping &quot;suffix&quot;) are still reasonable.<br>&gt; <br>&gt; Incidentally, it occurs to me that &quot;removingFirst&quot; is actually not an appropriate name here, because dropFirst is a method of SequenceType, and SequenceType does not have mutating methods. removeFirst is actually defined by RangeReplaceableCollectionType (and by Set, and also by CollectionType if SubSequence == Self).<br>&gt; <br>&gt; -Kevin Ballard<br>&gt; <br>&gt; On Tue, Dec 29, 2015, at 11:55 AM, Daniel Duan wrote:<br>&gt;&gt; Hi Kevin,<br>&gt;&gt; <br>&gt;&gt; “take&quot; and “skip” are fine as free function names. As method names, they are a step back from following the API Guidelines (“non-mutating methods should read as noun phrases”).<br>&gt;&gt; <br>&gt;&gt; - Daniel<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 29, 2015, at 11:40 AM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Mon, Dec 28, 2015, at 04:23 PM, Kevin Ballard wrote:<br>&gt;&gt;&gt;&gt; That said, `droppingFirst` sounds pretty weird to me. &quot;drop&quot; (and the related verb &quot;take&quot; that we&#39;re not using) has precedent in multiple languages (Rust and Haskell come to mind) to mean &quot;return a new sequence that skips the first N elements&quot;. And I&#39;m not aware of any language that sets precedent for the verb &quot;drop&quot; to mean &quot;mutate the receiver&quot;.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hmm, I just took a look, and while Rust does use &quot;take&quot;, it actually doesn&#39;t use &quot;drop&quot; (but Haskell does). Instead it uses &quot;skip&quot;, which seems like a good candidate if we&#39;re going to rename this. I&#39;m tempted to say we should use &quot;take&quot; instead of &quot;prefix&quot; as well, because `seq.prefix(3)` isn&#39;t actually immediately obvious what it does (as the verb &quot;prefix&quot; usually means to add onto the front, not to take the front). And we can use &quot;takeLast&quot; for &quot;suffix&quot; (neither Rust nor Haskell appears to have an equivalent of takeLast; I believe Rust doesn&#39;t because none of its iterator adaptors use dynamically-allocated memory, and I think Haskell expects you to just do `reverse . take n . reverse`). Although I do notice Haskell has a function dropWhileEnd that drops the suffix, which suggests &quot;takeEnd&quot; and &quot;dropEnd&quot; here.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Which is to say, if we&#39;re going to rename these methods, my vote is:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; prefix -&gt; take<br>&gt;&gt;&gt; suffix -&gt; takeEnd or takeLast<br>&gt;&gt;&gt; dropFirst -&gt; skip<br>&gt;&gt;&gt; dropLast -&gt; skipEnd or skipLast<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Kevin Ballard<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>rename dropFirst() and dropLast()</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>December 29, 2015 at 12:00:00pm</p></header><div class="content"><p>Actually that&#39;s not true, CollectionType does not define dropFirst(). It merely provides a default implementation. dropFirst() is only actually defined in SequenceType, which does not have any mutating methods. Renaming it to &quot;removingFirst()&quot; would be against the guidelines for all sequences that are not also RangeReplaceableCollectionTypes.<br></p><p>-Kevin Ballard<br></p><p>On Tue, Dec 29, 2015, at 12:39 PM, Daniel Duan wrote:<br>&gt; I made the same observation on Haskell in the original post :)<br>&gt; <br>&gt; “removeFirst()” is also defined in CollectionType. So “dropFirst()” is removeFirst()’s – in the Guidelines’ term – &quot;non-mutating counterpart&quot; for all CollectionTypes. Therefore, “removingFirst()” would be the winner.<br>&gt; <br>&gt; (My personal preference notwithstanding, that is).<br>&gt; <br>&gt; &gt; On Dec 29, 2015, at 12:15 PM, Kevin Ballard &lt;kevin at sb.org&gt; wrote:<br>&gt; &gt; <br>&gt; &gt; I guess that&#39;s a good argument for keeping &quot;prefix&quot; and &quot;suffix&quot; instead of &quot;take&quot; and &quot;takeEnd&quot;. But there is no good noun phrase to use for dropFirst/dropLast (Haskell&#39;s &quot;init&quot; and &quot;tail&quot; are nouns but they&#39;re very confusing and don&#39;t really make sense once you add in an integral argument anyway). The guidelines do say it&#39;s acceptable to use an imperative verb if there is no good noun phrase, so &quot;skip&quot; and &quot;skipEnd&quot; (or &quot;skipLast&quot;, or maybe &quot;skipSuffix&quot; if we&#39;re keeping &quot;suffix&quot;) are still reasonable.<br>&gt; &gt; <br>&gt; &gt; Incidentally, it occurs to me that &quot;removingFirst&quot; is actually not an appropriate name here, because dropFirst is a method of SequenceType, and SequenceType does not have mutating methods. removeFirst is actually defined by RangeReplaceableCollectionType (and by Set, and also by CollectionType if SubSequence == Self).<br>&gt; &gt; <br>&gt; &gt; -Kevin Ballard<br>&gt; &gt; <br>&gt; &gt; On Tue, Dec 29, 2015, at 11:55 AM, Daniel Duan wrote:<br>&gt; &gt;&gt; Hi Kevin,<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; “take&quot; and “skip” are fine as free function names. As method names, they are a step back from following the API Guidelines (“non-mutating methods should read as noun phrases”).<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; - Daniel<br>&gt; &gt;&gt; <br>&gt; &gt;&gt;&gt; On Dec 29, 2015, at 11:40 AM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; On Mon, Dec 28, 2015, at 04:23 PM, Kevin Ballard wrote:<br>&gt; &gt;&gt;&gt;&gt; That said, `droppingFirst` sounds pretty weird to me. &quot;drop&quot; (and the related verb &quot;take&quot; that we&#39;re not using) has precedent in multiple languages (Rust and Haskell come to mind) to mean &quot;return a new sequence that skips the first N elements&quot;. And I&#39;m not aware of any language that sets precedent for the verb &quot;drop&quot; to mean &quot;mutate the receiver&quot;.<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; Hmm, I just took a look, and while Rust does use &quot;take&quot;, it actually doesn&#39;t use &quot;drop&quot; (but Haskell does). Instead it uses &quot;skip&quot;, which seems like a good candidate if we&#39;re going to rename this. I&#39;m tempted to say we should use &quot;take&quot; instead of &quot;prefix&quot; as well, because `seq.prefix(3)` isn&#39;t actually immediately obvious what it does (as the verb &quot;prefix&quot; usually means to add onto the front, not to take the front). And we can use &quot;takeLast&quot; for &quot;suffix&quot; (neither Rust nor Haskell appears to have an equivalent of takeLast; I believe Rust doesn&#39;t because none of its iterator adaptors use dynamically-allocated memory, and I think Haskell expects you to just do `reverse . take n . reverse`). Although I do notice Haskell has a function dropWhileEnd that drops the suffix, which suggests &quot;takeEnd&quot; and &quot;dropEnd&quot; here.<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; Which is to say, if we&#39;re going to rename these methods, my vote is:<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; prefix -&gt; take<br>&gt; &gt;&gt;&gt; suffix -&gt; takeEnd or takeLast<br>&gt; &gt;&gt;&gt; dropFirst -&gt; skip<br>&gt; &gt;&gt;&gt; dropLast -&gt; skipEnd or skipLast<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; -Kevin Ballard<br>&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>rename dropFirst() and dropLast()</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>December 29, 2015 at 10:00:00pm</p></header><div class="content"><p>withoutFirst()<br>withoutLast()<br></p><p>-Thorsten<br></p><p>&gt; Am 29.12.2015 um 21:43 schrieb Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; Actually that&#39;s not true, CollectionType does not define dropFirst(). It merely provides a default implementation. dropFirst() is only actually defined in SequenceType, which does not have any mutating methods. Renaming it to &quot;removingFirst()&quot; would be against the guidelines for all sequences that are not also RangeReplaceableCollectionTypes.<br>&gt; <br>&gt; -Kevin Ballard<br>&gt; <br>&gt; On Tue, Dec 29, 2015, at 12:39 PM, Daniel Duan wrote:<br>&gt;&gt; I made the same observation on Haskell in the original post :)<br>&gt;&gt; <br>&gt;&gt; “removeFirst()” is also defined in CollectionType. So “dropFirst()” is removeFirst()’s – in the Guidelines’ term – &quot;non-mutating counterpart&quot; for all CollectionTypes. Therefore, “removingFirst()” would be the winner.<br>&gt;&gt; <br>&gt;&gt; (My personal preference notwithstanding, that is).<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 29, 2015, at 12:15 PM, Kevin Ballard &lt;kevin at sb.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I guess that&#39;s a good argument for keeping &quot;prefix&quot; and &quot;suffix&quot; instead of &quot;take&quot; and &quot;takeEnd&quot;. But there is no good noun phrase to use for dropFirst/dropLast (Haskell&#39;s &quot;init&quot; and &quot;tail&quot; are nouns but they&#39;re very confusing and don&#39;t really make sense once you add in an integral argument anyway). The guidelines do say it&#39;s acceptable to use an imperative verb if there is no good noun phrase, so &quot;skip&quot; and &quot;skipEnd&quot; (or &quot;skipLast&quot;, or maybe &quot;skipSuffix&quot; if we&#39;re keeping &quot;suffix&quot;) are still reasonable.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Incidentally, it occurs to me that &quot;removingFirst&quot; is actually not an appropriate name here, because dropFirst is a method of SequenceType, and SequenceType does not have mutating methods. removeFirst is actually defined by RangeReplaceableCollectionType (and by Set, and also by CollectionType if SubSequence == Self).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Kevin Ballard<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Tue, Dec 29, 2015, at 11:55 AM, Daniel Duan wrote:<br>&gt;&gt;&gt;&gt; Hi Kevin,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; “take&quot; and “skip” are fine as free function names. As method names, they are a step back from following the API Guidelines (“non-mutating methods should read as noun phrases”).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - Daniel<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 29, 2015, at 11:40 AM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Mon, Dec 28, 2015, at 04:23 PM, Kevin Ballard wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; That said, `droppingFirst` sounds pretty weird to me. &quot;drop&quot; (and the related verb &quot;take&quot; that we&#39;re not using) has precedent in multiple languages (Rust and Haskell come to mind) to mean &quot;return a new sequence that skips the first N elements&quot;. And I&#39;m not aware of any language that sets precedent for the verb &quot;drop&quot; to mean &quot;mutate the receiver&quot;.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Hmm, I just took a look, and while Rust does use &quot;take&quot;, it actually doesn&#39;t use &quot;drop&quot; (but Haskell does). Instead it uses &quot;skip&quot;, which seems like a good candidate if we&#39;re going to rename this. I&#39;m tempted to say we should use &quot;take&quot; instead of &quot;prefix&quot; as well, because `seq.prefix(3)` isn&#39;t actually immediately obvious what it does (as the verb &quot;prefix&quot; usually means to add onto the front, not to take the front). And we can use &quot;takeLast&quot; for &quot;suffix&quot; (neither Rust nor Haskell appears to have an equivalent of takeLast; I believe Rust doesn&#39;t because none of its iterator adaptors use dynamically-allocated memory, and I think Haskell expects you to just do `reverse . take n . reverse`). Although I do notice Haskell has a function dropWhileEnd that drops the suffix, which suggests &quot;takeEnd&quot; and &quot;dropEnd&quot; here.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Which is to say, if we&#39;re going to rename these methods, my vote is:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; prefix -&gt; take<br>&gt;&gt;&gt;&gt;&gt; suffix -&gt; takeEnd or takeLast<br>&gt;&gt;&gt;&gt;&gt; dropFirst -&gt; skip<br>&gt;&gt;&gt;&gt;&gt; dropLast -&gt; skipEnd or skipLast<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -Kevin Ballard<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f6b7154fd1d6a470d0b521a2e484bffc?s=50"></div><header><strong>rename dropFirst() and dropLast()</strong> from <string>Daniel Duan</string> &lt;daniel at duan.org&gt;<p>December 29, 2015 at 01:00:00pm</p></header><div class="content"><p>For concrete types that conform to CollectionType:<br></p><p>[2, 1, 3].removeFirst()    // =&gt; 2<br>[2, 1, 3].removingFirst() // =&gt; [1, 3]<br></p><p>seems like what the “non-mutating counterpart” guideline is aiming for. As another example, the guideline includes “stripNewlines()” and “strippingNewlines()”.<br></p><p>For SequenceType conforming types that aren’t CollectionTypes, they would be stuck with “removingFirst()”, which, technically, is a noun phrase (again, not my personal favorite). I don’t this result is against anything in the guidelines.<br></p><p><br></p><p>&gt; On Dec 29, 2015, at 12:43 PM, Kevin Ballard &lt;kevin at sb.org&gt; wrote:<br>&gt; <br>&gt; Actually that&#39;s not true, CollectionType does not define dropFirst(). It merely provides a default implementation. dropFirst() is only actually defined in SequenceType, which does not have any mutating methods. Renaming it to &quot;removingFirst()&quot; would be against the guidelines for all sequences that are not also RangeReplaceableCollectionTypes.<br>&gt; <br>&gt; -Kevin Ballard<br>&gt; <br>&gt; On Tue, Dec 29, 2015, at 12:39 PM, Daniel Duan wrote:<br>&gt;&gt; I made the same observation on Haskell in the original post :)<br>&gt;&gt; <br>&gt;&gt; “removeFirst()” is also defined in CollectionType. So “dropFirst()” is removeFirst()’s – in the Guidelines’ term – &quot;non-mutating counterpart&quot; for all CollectionTypes. Therefore, “removingFirst()” would be the winner.<br>&gt;&gt; <br>&gt;&gt; (My personal preference notwithstanding, that is).<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 29, 2015, at 12:15 PM, Kevin Ballard &lt;kevin at sb.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I guess that&#39;s a good argument for keeping &quot;prefix&quot; and &quot;suffix&quot; instead of &quot;take&quot; and &quot;takeEnd&quot;. But there is no good noun phrase to use for dropFirst/dropLast (Haskell&#39;s &quot;init&quot; and &quot;tail&quot; are nouns but they&#39;re very confusing and don&#39;t really make sense once you add in an integral argument anyway). The guidelines do say it&#39;s acceptable to use an imperative verb if there is no good noun phrase, so &quot;skip&quot; and &quot;skipEnd&quot; (or &quot;skipLast&quot;, or maybe &quot;skipSuffix&quot; if we&#39;re keeping &quot;suffix&quot;) are still reasonable.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Incidentally, it occurs to me that &quot;removingFirst&quot; is actually not an appropriate name here, because dropFirst is a method of SequenceType, and SequenceType does not have mutating methods. removeFirst is actually defined by RangeReplaceableCollectionType (and by Set, and also by CollectionType if SubSequence == Self).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Kevin Ballard<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Tue, Dec 29, 2015, at 11:55 AM, Daniel Duan wrote:<br>&gt;&gt;&gt;&gt; Hi Kevin,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; “take&quot; and “skip” are fine as free function names. As method names, they are a step back from following the API Guidelines (“non-mutating methods should read as noun phrases”).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - Daniel<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 29, 2015, at 11:40 AM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Mon, Dec 28, 2015, at 04:23 PM, Kevin Ballard wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; That said, `droppingFirst` sounds pretty weird to me. &quot;drop&quot; (and the related verb &quot;take&quot; that we&#39;re not using) has precedent in multiple languages (Rust and Haskell come to mind) to mean &quot;return a new sequence that skips the first N elements&quot;. And I&#39;m not aware of any language that sets precedent for the verb &quot;drop&quot; to mean &quot;mutate the receiver&quot;.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Hmm, I just took a look, and while Rust does use &quot;take&quot;, it actually doesn&#39;t use &quot;drop&quot; (but Haskell does). Instead it uses &quot;skip&quot;, which seems like a good candidate if we&#39;re going to rename this. I&#39;m tempted to say we should use &quot;take&quot; instead of &quot;prefix&quot; as well, because `seq.prefix(3)` isn&#39;t actually immediately obvious what it does (as the verb &quot;prefix&quot; usually means to add onto the front, not to take the front). And we can use &quot;takeLast&quot; for &quot;suffix&quot; (neither Rust nor Haskell appears to have an equivalent of takeLast; I believe Rust doesn&#39;t because none of its iterator adaptors use dynamically-allocated memory, and I think Haskell expects you to just do `reverse . take n . reverse`). Although I do notice Haskell has a function dropWhileEnd that drops the suffix, which suggests &quot;takeEnd&quot; and &quot;dropEnd&quot; here.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Which is to say, if we&#39;re going to rename these methods, my vote is:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; prefix -&gt; take<br>&gt;&gt;&gt;&gt;&gt; suffix -&gt; takeEnd or takeLast<br>&gt;&gt;&gt;&gt;&gt; dropFirst -&gt; skip<br>&gt;&gt;&gt;&gt;&gt; dropLast -&gt; skipEnd or skipLast<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -Kevin Ballard<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>rename dropFirst() and dropLast()</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>December 29, 2015 at 02:00:00pm</p></header><div class="content"><p>On Tue, Dec 29, 2015, at 01:33 PM, Daniel Duan wrote:<br>&gt; For concrete types that conform to CollectionType:<br>&gt; <br>&gt; [2, 1, 3].removeFirst()    // =&gt; 2<br>&gt; [2, 1, 3].removingFirst() // =&gt; [1, 3]<br>&gt; <br>&gt; seems like what the “non-mutating counterpart” guideline is aiming for. As another example, the guideline includes “stripNewlines()” and “strippingNewlines()”.<br>&gt; <br>&gt; For SequenceType conforming types that aren’t CollectionTypes, they would be stuck with “removingFirst()”, which, technically, is a noun phrase (again, not my personal favorite). I don’t this result is against anything in the guidelines.<br></p><p>It&#39;s technically not a noun phrase at all. I believe you&#39;re thinking of gerunds, where a verb with an -ing ending is used as a noun. But &quot;removing&quot; in &quot;removingFirst()&quot; is not being used as a noun; the method does not represent the act of removing, but instead it returns a new value constructed &quot;by removing first&quot;. I believe this is called the Present Participle.<br></p><p>-Kevin Ballard<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f6b7154fd1d6a470d0b521a2e484bffc?s=50"></div><header><strong>rename dropFirst() and dropLast()</strong> from <string>Daniel Duan</string> &lt;daniel at duan.org&gt;<p>December 29, 2015 at 03:00:00pm</p></header><div class="content"><p>I suppose it’s appropriate to go into grammars since we are in a language mailing list :)<br></p><p>Present Participle is just an official name for “verb in present tense”, as in “I am *writing* an email”. Let’s put the example from API Guideline to test. I hope you agree that “someText.strippingNewlines()” as a non-mutating method name is grammatical *somehow*. So, does it read as<br></p><p>	self is *stripping newlines*, here’s X.<br></p><p>…or does this make more sense…<br></p><p>	*stripping newlines* from self gives X.<br></p><p>?<br></p><p>I tend to think the latter. There’s a fancy name for it as well: gerund phrase.<br></p><p><br>&gt; On Dec 29, 2015, at 2:55 PM, Kevin Ballard &lt;kevin at sb.org&gt; wrote:<br>&gt; <br>&gt; On Tue, Dec 29, 2015, at 01:33 PM, Daniel Duan wrote:<br>&gt;&gt; For concrete types that conform to CollectionType:<br>&gt;&gt; <br>&gt;&gt; [2, 1, 3].removeFirst()    // =&gt; 2<br>&gt;&gt; [2, 1, 3].removingFirst() // =&gt; [1, 3]<br>&gt;&gt; <br>&gt;&gt; seems like what the “non-mutating counterpart” guideline is aiming for. As another example, the guideline includes “stripNewlines()” and “strippingNewlines()”.<br>&gt;&gt; <br>&gt;&gt; For SequenceType conforming types that aren’t CollectionTypes, they would be stuck with “removingFirst()”, which, technically, is a noun phrase (again, not my personal favorite). I don’t this result is against anything in the guidelines.<br>&gt; <br>&gt; It&#39;s technically not a noun phrase at all. I believe you&#39;re thinking of gerunds, where a verb with an -ing ending is used as a noun. But &quot;removing&quot; in &quot;removingFirst()&quot; is not being used as a noun; the method does not represent the act of removing, but instead it returns a new value constructed &quot;by removing first&quot;. I believe this is called the Present Participle.<br>&gt; <br>&gt; -Kevin Ballard<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>rename dropFirst() and dropLast()</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>December 29, 2015 at 04:00:00pm</p></header><div class="content"><p>On Tue, Dec 29, 2015, at 03:39 PM, Daniel Duan wrote:<br>&gt; I suppose it’s appropriate to go into grammars since we are in a language mailing list :)<br>&gt; <br>&gt; Present Participle is just an official name for “verb in present tense”, as in “I am *writing* an email”. Let’s put the example from API Guideline to test. I hope you agree that “someText.strippingNewlines()” as a non-mutating method name is grammatical *somehow*. So, does it read as<br>&gt; <br>&gt; 	self is *stripping newlines*, here’s X.<br>&gt; <br>&gt; …or does this make more sense…<br>&gt; <br>&gt; 	*stripping newlines* from self gives X.<br>&gt; <br>&gt; ?<br>&gt; <br>&gt; I tend to think the latter. There’s a fancy name for it as well: gerund phrase.<br></p><p>I don&#39;t read it either way. As suggested in my previous email, I&#39;d read this as &quot;transforms someText by *splitting newlines* (and returns the result)&quot;. It&#39;s not entirely clear how to classify this usage (since grammar is confusing), but it&#39;s kind of a moot point because Wikipedia says:<br></p><p>&gt; The distinction between gerund and present participles is not recognised in modern reference grammars, since many uses are ambiguous.<br></p><p>And it doesn&#39;t really matter anyway because the guidelines don&#39;t say that the non-mutating variant has to read as a noun phrase, it just says to name it using the appropriate -ed/-ing ending. And in the case of strippingNewlines(), this makes sense, as it&#39;s the non-mutating counterpart to stripNewlines().<br></p><p>But in the case of dropFirst(), this is not a non-mutating counterpart to removeFirst(). dropFirst() is defined on SequenceType, which has no removeFirst(). If anything, removeFirst() is a mutating version that&#39;s derived from dropFirst() (although not really, since removeFirst() is named after removeAtIndex() and the only naming relation it has to dropFirst() is re-using the same &quot;First&quot; suffix).<br></p><p>-Kevin<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f6b7154fd1d6a470d0b521a2e484bffc?s=50"></div><header><strong>rename dropFirst() and dropLast()</strong> from <string>Daniel Duan</string> &lt;daniel at duan.org&gt;<p>December 29, 2015 at 05:00:00pm</p></header><div class="content"><p>The fact that SequenceType is non-mutable and does not have the remove* method has been clear from the start. In *effect*, however,  concrete CollectionTypes do have both .removeFirst() and dropFirst().<br></p><p>Replacing .dropFirst() with a “better” verb phrase such as .skipFirst() raises a new concern:<br></p><p>The API Guidelines *could* make Swift 3 users to expect consistency when it comes to mutating/non-mutating pair APIs *wherever applicable*. This is a great goal for a programming language. Taking this away from Array just because it happens to be a SequenceType? That’s Robbery. <br></p><p>- Daniel<br></p><p>&gt; On Dec 29, 2015, at 4:29 PM, Kevin Ballard &lt;kevin at sb.org&gt; wrote:<br>&gt; <br>&gt; On Tue, Dec 29, 2015, at 03:39 PM, Daniel Duan wrote:<br>&gt;&gt; I suppose it’s appropriate to go into grammars since we are in a language mailing list :)<br>&gt;&gt; <br>&gt;&gt; Present Participle is just an official name for “verb in present tense”, as in “I am *writing* an email”. Let’s put the example from API Guideline to test. I hope you agree that “someText.strippingNewlines()” as a non-mutating method name is grammatical *somehow*. So, does it read as<br>&gt;&gt; <br>&gt;&gt; 	self is *stripping newlines*, here’s X.<br>&gt;&gt; <br>&gt;&gt; …or does this make more sense…<br>&gt;&gt; <br>&gt;&gt; 	*stripping newlines* from self gives X.<br>&gt;&gt; <br>&gt;&gt; ?<br>&gt;&gt; <br>&gt;&gt; I tend to think the latter. There’s a fancy name for it as well: gerund phrase.<br>&gt; <br>&gt; I don&#39;t read it either way. As suggested in my previous email, I&#39;d read this as &quot;transforms someText by *splitting newlines* (and returns the result)&quot;. It&#39;s not entirely clear how to classify this usage (since grammar is confusing), but it&#39;s kind of a moot point because Wikipedia says:<br>&gt; <br>&gt;&gt; The distinction between gerund and present participles is not recognised in modern reference grammars, since many uses are ambiguous.<br>&gt; <br>&gt; And it doesn&#39;t really matter anyway because the guidelines don&#39;t say that the non-mutating variant has to read as a noun phrase, it just says to name it using the appropriate -ed/-ing ending. And in the case of strippingNewlines(), this makes sense, as it&#39;s the non-mutating counterpart to stripNewlines().<br>&gt; <br>&gt; But in the case of dropFirst(), this is not a non-mutating counterpart to removeFirst(). dropFirst() is defined on SequenceType, which has no removeFirst(). If anything, removeFirst() is a mutating version that&#39;s derived from dropFirst() (although not really, since removeFirst() is named after removeAtIndex() and the only naming relation it has to dropFirst() is re-using the same &quot;First&quot; suffix).<br>&gt; <br>&gt; -Kevin<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>rename dropFirst() and dropLast()</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>December 29, 2015 at 06:00:00pm</p></header><div class="content"><p>&gt; On Dec 29, 2015, at 2:55 PM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Tue, Dec 29, 2015, at 01:33 PM, Daniel Duan wrote:<br>&gt;&gt; For concrete types that conform to CollectionType:<br>&gt;&gt; <br>&gt;&gt; [2, 1, 3].removeFirst()    // =&gt; 2<br>&gt;&gt; [2, 1, 3].removingFirst() // =&gt; [1, 3]<br>&gt;&gt; <br>&gt;&gt; seems like what the “non-mutating counterpart” guideline is aiming for. As another example, the guideline includes “stripNewlines()” and “strippingNewlines()”.<br>&gt;&gt; <br>&gt;&gt; For SequenceType conforming types that aren’t CollectionTypes, they would be stuck with “removingFirst()”, which, technically, is a noun phrase (again, not my personal favorite). I don’t this result is against anything in the guidelines.<br>&gt; <br>&gt; It&#39;s technically not a noun phrase at all. I believe you&#39;re thinking of gerunds, where a verb with an -ing ending is used as a noun. But &quot;removing&quot; in &quot;removingFirst()&quot; is not being used as a noun; the method does not represent the act of removing, but instead it returns a new value constructed &quot;by removing first&quot;. I believe this is called the Present Participle.<br></p><p>Yes, we got a wad of technical corrections from an Apple linguist that have yet to be applied to the guidelines document.   That was one of them. <br></p><p>Sent from my moss-covered three-handled family gradunza<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>rename dropFirst() and dropLast()</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>December 28, 2015 at 07:00:00pm</p></header><div class="content"><p>&gt; On Dec 28, 2015, at 6:19 PM, Michel Fortin via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Really? The convention says: &quot;When a mutating method is described by a verb, name its non-mutating counterpart according to the “ed/ing” rule, e.g. the non-mutating versions of x.sort() and x.append(y) are x.sorted() and x.appending(y).&quot;<br></p><p>That’s really ironic, given that sort() on Array in the standard library is the non-mutating version (the mutating version is called sortInPlace).<br></p><p>Charles<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151228/dcad518b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c53218a6524f4d644b6a75a4441ea631?s=50"></div><header><strong>rename dropFirst() and dropLast()</strong> from <string>Max Moiseev</string> &lt;moiseev at apple.com&gt;<p>January  1, 2016 at 01:00:00pm</p></header><div class="content"><p>Charles,<br> <br>Guidelines are being applied to the Standard Library as part of Swift 3 effort. You can track progress in `swift-3-api-guidelines` branch.<br>Addressing your example: non-mutating `sort()` has become `sorted()` here &lt;https://github.com/apple/swift/blob/swift-3-api-guidelines/stdlib/public/core/CollectionAlgorithms.swift.gyb#L213&gt;.<br> <br>max<br></p><p>&gt; On Dec 28, 2015, at 5:33 PM, Charles Srstka via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Dec 28, 2015, at 6:19 PM, Michel Fortin via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Really? The convention says: &quot;When a mutating method is described by a verb, name its non-mutating counterpart according to the “ed/ing” rule, e.g. the non-mutating versions of x.sort() and x.append(y) are x.sorted() and x.appending(y).&quot;<br>&gt; <br>&gt; That’s really ironic, given that sort() on Array in the standard library is the non-mutating version (the mutating version is called sortInPlace).<br>&gt; <br>&gt; Charles<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160101/998f91e2/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f6b7154fd1d6a470d0b521a2e484bffc?s=50"></div><header><strong>rename dropFirst() and dropLast()</strong> from <string>Daniel Duan</string> &lt;daniel at duan.org&gt;<p>December 28, 2015 at 04:00:00pm</p></header><div class="content"><p>Hi Michel,<br></p><p>Indeed, the guideline clarifies! .excludingFirst() is better :)<br></p><p>- Daniel<br></p><p>&gt; On Dec 28, 2015, at 3:53 PM, Michel Fortin &lt;michel.fortin at michelf.ca&gt; wrote:<br>&gt; <br>&gt; Le 28 déc. 2015 à 17:27, Daniel Duan via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt;&gt; .dropFirst() =&gt; .excludeFirst()<br>&gt;&gt; <br>&gt;&gt; What do y’all think?<br>&gt; <br>&gt; Following the new API guidelines, shouldn&#39;t the name be either `droppingFirst` or `excludingFirst`? That would solve your problem, right? Many things still need to be adapted to the new conventions.<br>&gt; <br>&gt; https://swift.org/documentation/api-design-guidelines.html#be-grammatical<br>&gt; <br>&gt; -- <br>&gt; Michel Fortin<br>&gt; https://michelf.ca<br>&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
