<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/07c147e6770f1e43d129f52aafd44138?s=50"></div><header><strong>Base types casting and hidden function calls in SWIFT</strong> from <string>Biala</string> &lt;bialata at yahoo.com&gt;<p>March 28, 2016 at 02:00:00pm</p></header><div class="content"><p>After few days playing with the profiler I have noticed some shocking swift behaviour.When casting basic types from one type to another, for example from Int to Double swift is actually creating and then deallocating something :( That leads to another performance problem - imagine many casts in loops. <br>As a type strict language swift is forcing one to cast Int to Double to when you multiply double by Int variables for example but as the cast is so expensive what should developers do to get better performance for some bit of code. As a sound processing developer I see most of the real time sound processing moved to C++ code, but I don,t see the reason for that as it is most basic operations in loops. Swift needs to be faster to become serious language ...<br>After profiling here is what I see:<br>1. slow arrays - may be partly improved using UnsafeMuttablePointers<br>2. expensive cast - this is not possible to avoid at this point. I will suggest making the language not so type strict when there is no need (like adding int to double and so on)<br></p><p><br>array[i] = value Double(1)<br>These problems come from hidden function calls so please avoid adding more of them in future like the syntax Erica suggested for the if:<br>if v in (0...127)<br>I suppose that the range will be also created and then deallocated in background.  <br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160328/50c30b68/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>Base types casting and hidden function calls in SWIFT</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>March 28, 2016 at 09:00:00pm</p></header><div class="content"><p>How did you come to that conclusion? In Swift 2.1 (I&#39;m late to update), with optimizations on, this function:<br></p><p>&gt; func test() -&gt; Double {<br>&gt; 	return Double(arc4random())<br>&gt; }<br></p><p>compiles to this IR:<br></p><p>&gt; define hidden double @_TF4test4testFT_Sd() #0 {<br>&gt; entry:<br>&gt;  %0 = tail call i32 @arc4random()<br>&gt;  %1 = uitofp i32 %0 to double<br>&gt;  ret double %1<br>&gt; }<br></p><p>which has no allocation at all.<br></p><p>Félix<br></p><p>&gt; Le 28 mars 2016 à 07:05:48, Biala via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; After few days playing with the profiler I have noticed some shocking swift behaviour.<br>&gt; When casting basic types from one type to another, for example from Int to Double swift is actually creating and then deallocating something :( That leads to another performance problem - imagine many casts in loops. <br>&gt; <br>&gt; As a type strict language swift is forcing one to cast Int to Double to when you multiply double by Int variables for example but as the cast is so expensive what should developers do to get better performance for some bit of code. As a sound processing developer I see most of the real time sound processing moved to C++ code, but I don,t see the reason for that as it is most basic operations in loops. Swift needs to be faster to become serious language ...<br>&gt; <br>&gt; After profiling here is what I see:<br>&gt; <br>&gt; 1. slow arrays - may be partly improved using UnsafeMuttablePointers<br>&gt; <br>&gt; 2. expensive cast - this is not possible to avoid at this point. I will suggest making the language not so type strict when there is no need (like adding int to double and so on)<br>&gt; <br>&gt; <br>&gt; <br>&gt; array[i] = value <br>&gt; Double(1)<br>&gt; <br>&gt; These problems come from hidden function calls so please avoid adding more of them in future like the syntax Erica suggested for the if:<br>&gt; <br>&gt; if v in (0...127)<br>&gt; <br>&gt; I suppose that the range will be also created and then deallocated in background.  <br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160328/9d82bff2/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a5942ce89a1d09816517080730cf5a10?s=50"></div><header><strong>Base types casting and hidden function calls in SWIFT</strong> from <string>Félix Cloutier</string> &lt;felixcca at gmail.com&gt;<p>March 28, 2016 at 09:00:00pm</p></header><div class="content"><p>How did you come to that conclusion? In Swift 2.1 (I&#39;m late to update), with optimizations on, this function:<br></p><p>&gt; func test() -&gt; Double {<br>&gt; 	return Double(arc4random())<br>&gt; }<br></p><p><br>compiles to:<br></p><p>&gt; define hidden double @_TF4test4testFT_Sd() #0 {<br>&gt; entry:<br>&gt;   %0 = tail call i32 @arc4random()<br>&gt;   %1 = uitofp i32 %0 to double<br>&gt;   ret double %1<br>&gt; }<br></p><p>which has no allocation at all.<br></p><p>Félix<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
