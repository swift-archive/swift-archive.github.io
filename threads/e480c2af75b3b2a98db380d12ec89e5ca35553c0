<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Proposal: x == 2 should not be a valid statement</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>February 11, 2016 at 06:00:00pm</p></header><div class="content"><p>It’s too easy to accidentally write “x==2” instead of “x=2”.<br></p><p>I don’t think something like “x==2” should be a valid statement.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/34b9659227ea084bb09a8ba4a450a162?s=50"></div><header><strong>Proposal: x == 2 should not be a valid statement</strong> from <string>Jessy Catterwaul</string> &lt;mr.jessy at gmail.com&gt;<p>February 11, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; I don’t think something like “x==2” should be a valid statement.<br></p><p>I agree, but I think that is best dealt with by removing == from Swift entirely. == is only useful in languages where a value is returned from an assignment operation.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4030f7e8f6b6d3c09d10ec12691773c1?s=50"></div><header><strong>Proposal: x == 2 should not be a valid statement</strong> from <string>John Randolph</string> &lt;jcr at mac.com&gt;<p>February 11, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Feb 11, 2016, at 3:37 PM, Jessy Catterwaul via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; I don’t think something like “x==2” should be a valid statement.<br>&gt; <br>&gt; I agree, but I think that is best dealt with by removing == from Swift entirely. == is only useful in languages where a value is returned from an assignment operation.<br></p><p>What do you propose as an alternative operator for testing equivalence?<br></p><p>-jcr<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/34b9659227ea084bb09a8ba4a450a162?s=50"></div><header><strong>Proposal: x == 2 should not be a valid statement</strong> from <string>Jessy Catterwaul</string> &lt;mr.jessy at gmail.com&gt;<p>February 11, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; What do you propose as an alternative operator for testing equivalence?<br></p><p>=<br></p><p>http://catterwaul.com/equality-operator/<br></p><p>Jonathan Tang’s brings this up: <br>{x == 2}<br></p><p>You’d need to use the return keyword. Oh well; I think it reads better.<br>{return x = 2}<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>Proposal: x == 2 should not be a valid statement</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February 12, 2016 at 12:00:00am</p></header><div class="content"><p>I definitely don’t like the idea of = meaning two very different things, whether or not it’s unambiguous to the compiler.<br></p><p>Why break decades-long programming convention for this?<br></p><p>— Radek<br></p><p>&gt; On 12 Feb 2016, at 00:50, Jessy Catterwaul via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; What do you propose as an alternative operator for testing equivalence?<br>&gt; <br>&gt; =<br>&gt; <br>&gt; http://catterwaul.com/equality-operator/<br>&gt; <br>&gt; Jonathan Tang’s brings this up: <br>&gt; {x == 2}<br>&gt; <br>&gt; You’d need to use the return keyword. Oh well; I think it reads better.<br>&gt; {return x = 2}<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/34b9659227ea084bb09a8ba4a450a162?s=50"></div><header><strong>Proposal: x == 2 should not be a valid statement</strong> from <string>Jessy Catterwaul</string> &lt;mr.jessy at gmail.com&gt;<p>February 11, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; Why break decades-long programming convention for this?<br></p><p>Some people using Swift aren&#39;t even a decade long.<br></p><p>== exists because old languages returned a value from assignment. Not because it is good.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4030f7e8f6b6d3c09d10ec12691773c1?s=50"></div><header><strong>Proposal: x == 2 should not be a valid statement</strong> from <string>John Randolph</string> &lt;jcr at mac.com&gt;<p>February 11, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Feb 11, 2016, at 3:54 PM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>&gt; <br>&gt; Why break decades-long programming convention for this?<br></p><p>Besides the fact that it’s a decades-long convention, there’s also the reason that it was adopted in the first place:  it’s short, and easy to remember.<br></p><p>-jcr<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4030f7e8f6b6d3c09d10ec12691773c1?s=50"></div><header><strong>Proposal: x == 2 should not be a valid statement</strong> from <string>John Randolph</string> &lt;jcr at mac.com&gt;<p>February 11, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Feb 11, 2016, at 3:50 PM, Jessy Catterwaul via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; What do you propose as an alternative operator for testing equivalence?<br>&gt; <br>&gt; =<br>&gt; <br>&gt; http://catterwaul.com/equality-operator/<br>&gt; <br>&gt; Jonathan Tang’s brings this up: <br>&gt; {x == 2}<br>&gt; <br>&gt; You’d need to use the return keyword. Oh well; I think it reads better.<br>&gt; {return x = 2}<br></p><p>So, == gets replaced with six characters, plus a special case of “=“?<br></p><p>-1 from me.  Don’t like this idea at all.<br></p><p>-jcr<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/34b9659227ea084bb09a8ba4a450a162?s=50"></div><header><strong>Proposal: x == 2 should not be a valid statement</strong> from <string>Jessy Catterwaul</string> &lt;mr.jessy at gmail.com&gt;<p>February 11, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; So, == gets replaced with six characters, plus a special case of “=“?<br>&gt; <br>&gt; -1 from me.  Don’t like this idea at all.<br></p><p>Fair enough. How about “is”?<br></p><p>{x is 2}<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4030f7e8f6b6d3c09d10ec12691773c1?s=50"></div><header><strong>Proposal: x == 2 should not be a valid statement</strong> from <string>John Randolph</string> &lt;jcr at mac.com&gt;<p>February 11, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Feb 11, 2016, at 3:59 PM, Jessy Catterwaul &lt;mr.jessy at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; So, == gets replaced with six characters, plus a special case of “=“?<br>&gt;&gt; <br>&gt;&gt; -1 from me.  Don’t like this idea at all.<br>&gt; <br>&gt; Fair enough. How about “is”?<br>&gt; <br>&gt; {x is 2}<br></p><p>I’d say that “is” is more appropriate for replacing the identity operator “===“.   If we did that though, we’d have to also have “isn’t” or “!is” in our code.<br></p><p>“==“ for equivalence isn’t broken.   It doesn’t need fixing.<br></p><p>-jcr<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/34b9659227ea084bb09a8ba4a450a162?s=50"></div><header><strong>Proposal: x == 2 should not be a valid statement</strong> from <string>Jessy Catterwaul</string> &lt;mr.jessy at gmail.com&gt;<p>February 11, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; “==“ for equivalence isn’t broken.   It doesn’t need fixing.<br>&gt; <br>&gt; -jcr<br></p><p>It’s two equals signs. Or three equals signs. People can do better than this.<br></p><p>https://en.wikipedia.org/wiki/Assignment_(computer_science)#Assignment_versus_equality<br></p><p>&gt; The assignment operator (=) does not return a value, to prevent it from being mistakenly used when the equal to operator (==) is intended.<br>https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/BasicOperators.html<br></p><p>The history of this badness is crumbling.<br></p><p><br>Perhaps the solution is to first do a better job of assignment, freeing up the operator for comparison without semantic overload?<br></p><p>let string = &quot;&quot;<br>var int = 2<br>int = 3<br></p><p>string, be &quot;&quot;<br>var int, be 2<br>int, be 3<br></p><p>string be &quot;&quot;<br>var int be 2<br>int be 3<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/9018ba76/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4030f7e8f6b6d3c09d10ec12691773c1?s=50"></div><header><strong>Proposal: x == 2 should not be a valid statement</strong> from <string>John Randolph</string> &lt;jcr at mac.com&gt;<p>February 11, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Feb 11, 2016, at 4:22 PM, Jessy Catterwaul via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; The history of this badness is crumbling.<br></p><p><br>You haven’t convinced me that == is bad.<br></p><p>-jcr<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/34b9659227ea084bb09a8ba4a450a162?s=50"></div><header><strong>Proposal: x == 2 should not be a valid statement</strong> from <string>Jessy Catterwaul</string> &lt;mr.jessy at gmail.com&gt;<p>February 11, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; You haven’t convinced me that == is bad.<br>&gt; <br>&gt; -jcr<br></p><p>I don’t need to. As I showed you, enough other people already know that it’s not good, that Swift or its successor will do better. You’re not the target audience for caring about an improvement.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4030f7e8f6b6d3c09d10ec12691773c1?s=50"></div><header><strong>Proposal: x == 2 should not be a valid statement</strong> from <string>John Randolph</string> &lt;jcr at mac.com&gt;<p>February 11, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Feb 11, 2016, at 4:37 PM, Jessy Catterwaul &lt;mr.jessy at gmail.com&gt; wrote:<br>&gt; <br>&gt;  You’re not the target audience for caring about an improvement.<br></p><p>This isn’t an improvement.<br></p><p>-jcr<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>Proposal: x == 2 should not be a valid statement</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>February 11, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Feb 11, 2016, at 6:37 PM, Jessy Catterwaul via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; You haven’t convinced me that == is bad.<br>&gt;&gt; <br>&gt;&gt; -jcr<br>&gt; <br>&gt; I don’t need to. As I showed you, enough other people already know that it’s not good, that Swift or its successor will do better. You’re not the target audience for caring about an improvement.<br></p><p>This is not a convincing argument for changing something so fundamental to the language.<br></p><p>Charles<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/9e46dbec/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>Proposal: x == 2 should not be a valid statement</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>February 11, 2016 at 11:00:00pm</p></header><div class="content"><p>Won’t that conflict with the existing use of “is” as a keyword for type tests?<br></p><p>You know, if we proposed changing ‘ == ‘ to ‘ = ‘ and ‘ = ‘ to ‘ := ‘ it would break all existing code, plus *really* stir up the “Colon vs Equals” thread.<br></p><p>I’m of course  -1 on changing around equality, equivalence and assignment syntax without strong justification.<br></p><p>-DW<br></p><p>&gt; On Feb 11, 2016, at 4:59 PM, Jessy Catterwaul via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; So, == gets replaced with six characters, plus a special case of “=“?<br>&gt;&gt; <br>&gt;&gt; -1 from me.  Don’t like this idea at all.<br>&gt; <br>&gt; Fair enough. How about “is”?<br>&gt; <br>&gt; {x is 2}<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a1faea18be9eb2d50c4edcd223f2d685?s=50"></div><header><strong>Proposal: x == 2 should not be a valid statement</strong> from <string>Seth Friedman</string> &lt;sethfri at gmail.com&gt;<p>February 12, 2016 at 06:00:00am</p></header><div class="content"><p>-1.<br></p><p>I&#39;m honestly a little confused about how a two sentence email complaining<br>about a typo with no proposal for a better replacement could spawn a 25<br>message thread.<br></p><p>IMO, emails to swift-evolution should be well thought out ideas (even if<br>they&#39;re not full formed proposals) so as to not waste people&#39;s time. This<br>list is high traffic enough as it is, which makes it harder to participate<br>than I would like.<br></p><p>Thanks,<br>Seth<br>On Thu, Feb 11, 2016 at 10:15 PM David Waite via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Won’t that conflict with the existing use of “is” as a keyword for type<br>&gt; tests?<br>&gt;<br>&gt; You know, if we proposed changing ‘ == ‘ to ‘ = ‘ and ‘ = ‘ to ‘ := ‘ it<br>&gt; would break all existing code, plus *really* stir up the “Colon vs Equals”<br>&gt; thread.<br>&gt;<br>&gt; I’m of course  -1 on changing around equality, equivalence and assignment<br>&gt; syntax without strong justification.<br>&gt;<br>&gt; -DW<br>&gt;<br>&gt; &gt; On Feb 11, 2016, at 4:59 PM, Jessy Catterwaul via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt; So, == gets replaced with six characters, plus a special case of “=“?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; -1 from me.  Don’t like this idea at all.<br>&gt; &gt;<br>&gt; &gt; Fair enough. How about “is”?<br>&gt; &gt;<br>&gt; &gt; {x is 2}<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160212/075afb09/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/46439321e8b5b5ba0944eef50e18c3a3?s=50"></div><header><strong>Proposal: x == 2 should not be a valid statement</strong> from <string>Jean-Denis Muys</string> &lt;jdmuys at gmail.com&gt;<p>February 12, 2016 at 09:00:00am</p></header><div class="content"><p>Strong -1<br></p><p>Swift is in the C-family of languages, syntax-wise. == as the comparison operator is as much rooted there as are braces.<br></p><p>All these are questionable on similar grounds: ==, += -= and so on, braces as block delimiters, even the single = sign<br></p><p>&gt; It’s too easy to accidentally write “x==2” instead of “x=2”.<br></p><p><br>And I can also argue that +, - *, / are also bad, because &#39;It’s too easy to accidentally write “x+2” instead of “x-2”.’  and therefore we should replace them  with ADD, SUBTRACT, MULTIPLY, DIVIDE<br></p><p>or something<br></p><p>What is the reason for Swift to use C-like syntactic constructs? I suppose it’s familiarity. Granted, familiarity might not be the strongest argument. Yet it counts.<br></p><p>== is familiar, unambiguous, and the compiler can catch most cases of mistyping.<br></p><p>JD<br></p><p><br>&gt; On 12 Feb 2016, at 00:50, Jessy Catterwaul via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; What do you propose as an alternative operator for testing equivalence?<br>&gt; <br>&gt; =<br>&gt; <br>&gt; http://catterwaul.com/equality-operator/<br>&gt; <br>&gt; Jonathan Tang’s brings this up: <br>&gt; {x == 2}<br>&gt; <br>&gt; You’d need to use the return keyword. Oh well; I think it reads better.<br>&gt; {return x = 2}<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc045f9bdc3bd1885767f2a2ba8af458?s=50"></div><header><strong>Proposal: x == 2 should not be a valid statement</strong> from <string>Jonathan Tang</string> &lt;jonathan.d.tang at gmail.com&gt;<p>February 11, 2016 at 03:00:00pm</p></header><div class="content"><p>On Thu, Feb 11, 2016 at 3:32 PM, Amir Michail via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; It’s too easy to accidentally write “x==2” instead of “x=2”.<br>&gt;<br>&gt; I don’t think something like “x==2” should be a valid statement.<br>&gt;<br></p><p>I&#39;d love to see this become a compiler warning.  Unsure about making it an<br>error; how would it affect implicit return from lambdas?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/3383bd03/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>Proposal: x == 2 should not be a valid statement</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February 12, 2016 at 12:00:00am</p></header><div class="content"><p>I agree an expression like `x==2`, not being passed on or assigned to anything, should generate a warning and a helpful fixit. No reason to make it an error.<br></p><p>Implicit return doesn’t change this AFAICT.<br></p><p>— Radek<br></p><p>&gt; On 12 Feb 2016, at 00:41, Jonathan Tang via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Thu, Feb 11, 2016 at 3:32 PM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; It’s too easy to accidentally write “x==2” instead of “x=2”.<br>&gt; <br>&gt; I don’t think something like “x==2” should be a valid statement.<br>&gt; <br>&gt; I&#39;d love to see this become a compiler warning.  Unsure about making it an error; how would it affect implicit return from lambdas? <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160212/e5f7271f/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Proposal: x == 2 should not be a valid statement</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>February 11, 2016 at 03:00:00pm</p></header><div class="content"><p>This should be covered by the standard library making `==` @warn_unused_result and/or the language making @warn_unused_result the default behavior for all declarations.<br></p><p>-Joe<br></p><p>&gt; On Feb 11, 2016, at 3:32 PM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; It’s too easy to accidentally write “x==2” instead of “x=2”.<br>&gt; <br>&gt; I don’t think something like “x==2” should be a valid statement.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>Proposal: x == 2 should not be a valid statement</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>February 11, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On 11 Feb 2016, at 23:52, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; This should be covered by the standard library making `==` @warn_unused_result and/or the language making @warn_unused_result the default behavior for all declarations.<br></p><p>I agree with this. I have kind of wondered why @warn_unused_result isn’t actually the default, as I forget to add it nine times out of ten, when in reality almost all of my methods that return something should have it. Is there an existing discussion for switching the behaviour?<br></p><p>But yeah, I think warning of unused comparison results should solve this issue well enough, just like misusing a function/method call.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4ab486d7597af4cfe0be33a762150848?s=50"></div><header><strong>Proposal: x == 2 should not be a valid statement</strong> from <string>Dany St-Amant</string> &lt;dsa.mls at icloud.com&gt;<p>February 11, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; Le 11 févr. 2016 à 18:57, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; <br>&gt;&gt; On 11 Feb 2016, at 23:52, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; This should be covered by the standard library making `==` @warn_unused_result and/or the language making @warn_unused_result the default behavior for all declarations.<br>&gt; <br>&gt; I agree with this. I have kind of wondered why @warn_unused_result isn’t actually the default, as I forget to add it nine times out of ten, when in reality almost all of my methods that return something should have it. Is there an existing discussion for switching the behaviour?<br>&gt; <br>&gt; But yeah, I think warning of unused comparison results should solve this issue well enough, just like misusing a function/method call.<br></p><p>A quick test shows that == is already @warn_unused_result<br>This is a inside vs outside playground issue,<br>playground hides all these @warn_unused_result (after all the result is display thus used)<br></p><p>Dany<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Proposal: x == 2 should not be a valid statement</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>February 11, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Feb 11, 2016, at 3:57 PM, Haravikk &lt;swift-evolution at haravikk.me&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 11 Feb 2016, at 23:52, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; This should be covered by the standard library making `==` @warn_unused_result and/or the language making @warn_unused_result the default behavior for all declarations.<br>&gt; <br>&gt; I agree with this. I have kind of wondered why @warn_unused_result isn’t actually the default, as I forget to add it nine times out of ten, when in reality almost all of my methods that return something should have it. Is there an existing discussion for switching the behaviour?<br></p><p>Yeah, this is being discussed: https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151221/003879.html<br></p><p>-Joe<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5059668772aad67a346ad23a786be31b?s=50"></div><header><strong>Proposal: x == 2 should not be a valid statement</strong> from <string>Allen Ding</string> &lt;allen at snappymob.com&gt;<p>February 12, 2016 at 09:00:00am</p></header><div class="content"><p>-1 from me.<br></p><p>This is a fundamental change to an operator that is one of the most<br>frequently used in the language. IMO, any alternative has to offer the same<br>ease of use in addition to any theorized benefits.<br></p><p>FWIW, I understand the potential for confusion and accidental typos, but<br>with warnings from tooling (including in various other languages), I can&#39;t<br>recall an instance of having made this particular in the past few years, so<br>it isn&#39;t that big of a deal to me.<br></p><p>- Allen<br></p><p><br>On Fri, Feb 12, 2016 at 7:32 AM, Amir Michail via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; It’s too easy to accidentally write “x==2” instead of “x=2”.<br>&gt;<br>&gt; I don’t think something like “x==2” should be a valid statement.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160212/25ab0472/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3e4acc351c34224514f9d58b08389390?s=50"></div><header><strong>Proposal: x == 2 should not be a valid statement</strong> from <string>Myles Schultz</string> &lt;myleslschultz at icloud.com&gt;<p>February 11, 2016 at 09:00:00pm</p></header><div class="content"><p>Agreed, -1, ‘==‘ is a very common idiom in Swift.<br>&gt; On Feb 11, 2016, at 8:54 PM, Allen Ding via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; -1 from me.<br>&gt; <br>&gt; This is a fundamental change to an operator that is one of the most frequently used in the language. IMO, any alternative has to offer the same ease of use in addition to any theorized benefits.<br>&gt; <br>&gt; FWIW, I understand the potential for confusion and accidental typos, but with warnings from tooling (including in various other languages), I can&#39;t recall an instance of having made this particular in the past few years, so it isn&#39;t that big of a deal to me.<br>&gt; <br>&gt; - Allen<br>&gt; <br>&gt; <br>&gt; On Fri, Feb 12, 2016 at 7:32 AM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; It’s too easy to accidentally write “x==2” instead of “x=2”.<br>&gt; <br>&gt; I don’t think something like “x==2” should be a valid statement.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/95d18713/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d0659d0725d0f35fa2b7d2cd23631502?s=50"></div><header><strong>Proposal: x == 2 should not be a valid statement</strong> from <string>Vanderlei Martinelli</string> &lt;vmartinelli at alecrim.com&gt;<p>February 12, 2016 at 04:00:00am</p></header><div class="content"><p>Strong -1 for removing or change `==`.<br></p><p>I warned about something like this when talking about remotion of `++` and<br>`--` before.<br></p><p>It seems that the whole concern is going toward preventing all the ways<br>that a developer, well ... Develop.<br></p><p>We are not talking about the future of the Pages app, but now imagine that<br>it prevents you from writing the text the way you want, because it is safer<br>or modern and this is &quot;better for you&quot;.<br></p><p>Maybe I&#39;m wrong understanding, but the future of the Swift language<br>involves it be used by programmers, is not it? I imagine that programmers<br>know what `==` and `=` are and do not confuse them with each other or<br>something else.<br></p><p>Good programmers make a good language, but there is no good language in the<br>world that can make someone become a good programmer if he/she is not.<br></p><p><br>-Van<br></p><p><br>On Fri, Feb 12, 2016 at 12:12 AM, Myles La Verne Schultz via<br>swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Agreed, -1, ‘==‘ is a very common idiom in Swift.<br>&gt;<br>&gt; On Feb 11, 2016, at 8:54 PM, Allen Ding via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; -1 from me.<br>&gt;<br>&gt; This is a fundamental change to an operator that is one of the most<br>&gt; frequently used in the language. IMO, any alternative has to offer the same<br>&gt; ease of use in addition to any theorized benefits.<br>&gt;<br>&gt; FWIW, I understand the potential for confusion and accidental typos, but<br>&gt; with warnings from tooling (including in various other languages), I can&#39;t<br>&gt; recall an instance of having made this particular in the past few years, so<br>&gt; it isn&#39;t that big of a deal to me.<br>&gt;<br>&gt; - Allen<br>&gt;<br>&gt;<br>&gt; On Fri, Feb 12, 2016 at 7:32 AM, Amir Michail via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; It’s too easy to accidentally write “x==2” instead of “x=2”.<br>&gt;&gt;<br>&gt;&gt; I don’t think something like “x==2” should be a valid statement.<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160212/dbc34c0e/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
