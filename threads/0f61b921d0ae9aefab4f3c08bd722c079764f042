<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/389ea0cf26e2a2d4646bf580da2fb6b5?s=50"></div><header><strong>Cannot invoke &#39;stride&#39; with an argument list of type &#39;(from: Int, to: Int, by: Int)&#39;</strong> from <string>Martin R</string> &lt;martinr448 at gmail.com&gt;<p>July  5, 2016 at 07:00:00pm</p></header><div class="content"><p>It seems that the extension method<br></p><p>    extension Strideable {<br>        public func stride(to end: Self, by stride: Self.Stride) -&gt; StrideTo&lt;Self&gt;<br>    }<br></p><p>from Swift 2.2 is still known to the compiler and only marked as unavailable in Swift 3, as this code example demonstrates:<br></p><p>    extension Int {<br>        func test() {<br>            for _ in stride(to: 10, by: 2) { }<br>            // error: &#39;stride(to:by:)&#39; is unavailable: Use stride(from:to:by:) free function instead<br>        }<br>    }<br></p><p>so that in your code<br></p><p>    extension Int {<br>        func up(to upper: Int, by step: Int = 1, _ closure: @noescape () -&gt; Void) {<br>            for _ in stride(from: self, to: upper, by: step) {<br>                closure()<br>            }<br>        }<br>    }<br></p><p>the compiler tries to match the stride() invocation against this (unavailable) extension method. This is also confirmed by the compiler messages:<br></p><p>    error: cannot invoke &#39;stride&#39; with an argument list of type &#39;(from: Int, to: Int, by: Int)&#39;<br>    note: overloads for &#39;stride&#39; exist with these partially matching parameter lists: (to: Self, by: Self.Stride), (through: Self, by: Self.Stride)<br></p><p>This would also explain why it fails to compile in an extension to Int or Float, but compiles without errors in an extension to String or other non-Strideable types.<br></p><p>As a workaround, you can call the global function by explicitly prefixing it with the module name &quot;Swift&quot;:<br></p><p>    extension Int {<br>        func up(to upper: Int, by step: Int = 1, _ closure: @noescape () -&gt; Void) {<br>            for _ in Swift.stride(from: self, to: upper, by: step) {<br>                closure()<br>            }<br>        }<br>    }<br></p><p>Regards, Martin<br></p><p>&gt; You are right. Int conforms to Strideable.<br>&gt; <br>&gt; Now it seams like a bug. As in a playground. below are code works and<br>&gt; doesn&#39;t work<br>&gt; <br>&gt; extension Int {<br>&gt; <br>&gt;     func test() {<br>&gt; <br>&gt;         let temp = stride(from:1, to:10, by:2) // error<br>&gt; <br>&gt;     }<br>&gt; <br>&gt; }<br>&gt; <br>&gt; <br>&gt; extension Float {<br>&gt; <br>&gt;     func test() {<br>&gt; <br>&gt;         let temp = stride(from:1, to:10, by:2) // error<br>&gt; <br>&gt;     }<br>&gt; <br>&gt; }<br>&gt; <br>&gt; <br>&gt; extension String {<br>&gt; <br>&gt;     func test() {<br>&gt; <br>&gt;         let temp = stride(from:1, to:10, by:2) // works<br>&gt; <br>&gt;     }<br>&gt; <br>&gt; }<br>&gt; <br>&gt; <br>&gt; class A {<br>&gt; <br>&gt; <br>&gt; <br>&gt; }<br>&gt; <br>&gt; <br>&gt; extension A {<br>&gt; <br>&gt;     func test() {<br>&gt; <br>&gt;         let temp = stride(from:1, to:10, by:2) // works<br>&gt; <br>&gt;     }<br>&gt; <br>&gt; }<br>&gt; <br>&gt; <br>&gt; struct B {<br>&gt; <br>&gt; <br>&gt; <br>&gt; }<br>&gt; <br>&gt; <br>&gt; extension B {<br>&gt; <br>&gt;     func test() {<br>&gt; <br>&gt;         let temp = stride(from:1, to:10, by:2) // works<br>&gt; <br>&gt;     }<br>&gt; <br>&gt; }<br>&gt; <br>&gt; <br>&gt; func test() {<br>&gt; <br>&gt;     let temp = stride(from:1, to:10, by:2) //works<br>&gt; <br>&gt; }<br>&gt; <br>&gt; <br>&gt; let temp = stride(from:1, to:10, by:2) // works<br>&gt; <br>&gt; <br>&gt; ​It is nothing bug a bug?​<br>&gt; <br>&gt; <br>&gt; ​Zhaoxin​<br>&gt; <br>&gt; <br>&gt; <br>&gt; On Tue, Jul 5, 2016 at 10:16 PM, Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br>&gt; <br>&gt; &gt; Int conforms to Strideable byway of Integer &lt;- SignedInteger &lt;- Int (not<br>&gt; &gt; exactly sure how it will be once the integer proposal is implemented but it<br>&gt; &gt; will still be strideable).<br>&gt; &gt;<br>&gt; &gt; -Shawn<br>&gt; &gt;<br>&gt; &gt; On Mon, Jul 4, 2016 at 10:38 PM Zhao Xin via swift-users &lt;<br>&gt; &gt; swift-users at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt; In Swift 3,<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; func stride&lt;T : Strideable&gt;(from start: T, to end: T, by stride:<br>&gt; &gt;&gt; T.Stride) -&gt; StrideTo&lt;T&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Int does not conform to Strideable.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Adopted By<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; CGFloat<br>&gt; &gt;&gt; Decimal<br>&gt; &gt;&gt; Double<br>&gt; &gt;&gt; Float<br>&gt; &gt;&gt; Float80<br>&gt; &gt;&gt; String.UTF16View.Index<br>&gt; &gt;&gt; UnsafeMutablePointer<br>&gt; &gt;&gt; UnsafePointer<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; ​In Swift 2.2,<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; @warn_unused_result func stride(to *end*: Self, by *stride*: Self.Stride)<br>&gt; &gt;&gt; -&gt; StrideTo&lt;Self&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; It uses Self, which means the type of the variable, instead of T.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Zhaoxin<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; On Tue, Jul 5, 2016 at 11:41 AM, Adriano Ferreira via swift-users &lt;<br>&gt; &gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; Hi everyone!<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; I’m converting some code to Swift 3 and got this issue?<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Does anybody know what’s going on?<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Here’s the code, before and after conversion:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; // Swift 2.2<br>&gt; &gt;&gt;&gt; extension Int {<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;     // Repeat a block of code from `self` up to a limit<br>&gt; &gt;&gt;&gt;     func up(to upper: Int, by step: Int = 1, @noescape closure: () -&gt;<br>&gt; &gt;&gt;&gt; Void) {<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;         for _ in self.stride(to: upper, by: step) {<br>&gt; &gt;&gt;&gt;             closure()<br>&gt; &gt;&gt;&gt;         }<br>&gt; &gt;&gt;&gt;     }<br>&gt; &gt;&gt;&gt; }<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; // Swift 3<br>&gt; &gt;&gt;&gt; extension Int {<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;     // Repeat a block of code from `self` up to a limit<br>&gt; &gt;&gt;&gt;     func up(to upper: Int, by step: Int = 1, _ closure: @noescape () -&gt;<br>&gt; &gt;&gt;&gt; Void) {<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;         for _ in stride(from: self, to: upper, by: step) {<br>&gt; &gt;&gt;&gt;             closure()<br>&gt; &gt;&gt;&gt;         }<br>&gt; &gt;&gt;&gt;     }<br>&gt; &gt;&gt;&gt; }<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; // Usage<br>&gt; &gt;&gt;&gt; 1.up(to: 10, by: 2) {<br>&gt; &gt;&gt;&gt;     print(&quot;Hi!&quot;)<br>&gt; &gt;&gt;&gt; }<br>&gt; &gt;&gt;&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9f3e3f9871fd088e42df4509aa724367?s=50"></div><header><strong>Cannot invoke &#39;stride&#39; with an argument list of type &#39;(from: Int, to: Int, by: Int)&#39;</strong> from <string>Adriano Ferreira</string> &lt;adriano.ferreira at me.com&gt;<p>July  5, 2016 at 02:00:00pm</p></header><div class="content"><p>Thanks Martin, now it works!<br></p><p>Do you think this should be filed as a bug or just wait until the Swift team removes the old stride method?<br></p><p>Best,<br></p><p>— A<br></p><p>&gt; On Jul 5, 2016, at 1:25 PM, Martin R via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; It seems that the extension method<br>&gt; <br>&gt;    extension Strideable {<br>&gt;        public func stride(to end: Self, by stride: Self.Stride) -&gt; StrideTo&lt;Self&gt;<br>&gt;    }<br>&gt; <br>&gt; from Swift 2.2 is still known to the compiler and only marked as unavailable in Swift 3, as this code example demonstrates:<br>&gt; <br>&gt;    extension Int {<br>&gt;        func test() {<br>&gt;            for _ in stride(to: 10, by: 2) { }<br>&gt;            // error: &#39;stride(to:by:)&#39; is unavailable: Use stride(from:to:by:) free function instead<br>&gt;        }<br>&gt;    }<br>&gt; <br>&gt; so that in your code<br>&gt; <br>&gt;    extension Int {<br>&gt;        func up(to upper: Int, by step: Int = 1, _ closure: @noescape () -&gt; Void) {<br>&gt;            for _ in stride(from: self, to: upper, by: step) {<br>&gt;                closure()<br>&gt;            }<br>&gt;        }<br>&gt;    }<br>&gt; <br>&gt; the compiler tries to match the stride() invocation against this (unavailable) extension method. This is also confirmed by the compiler messages:<br>&gt; <br>&gt;    error: cannot invoke &#39;stride&#39; with an argument list of type &#39;(from: Int, to: Int, by: Int)&#39;<br>&gt;    note: overloads for &#39;stride&#39; exist with these partially matching parameter lists: (to: Self, by: Self.Stride), (through: Self, by: Self.Stride)<br>&gt; <br>&gt; This would also explain why it fails to compile in an extension to Int or Float, but compiles without errors in an extension to String or other non-Strideable types.<br>&gt; <br>&gt; As a workaround, you can call the global function by explicitly prefixing it with the module name &quot;Swift&quot;:<br>&gt; <br>&gt;    extension Int {<br>&gt;        func up(to upper: Int, by step: Int = 1, _ closure: @noescape () -&gt; Void) {<br>&gt;            for _ in Swift.stride(from: self, to: upper, by: step) {<br>&gt;                closure()<br>&gt;            }<br>&gt;        }<br>&gt;    }<br>&gt; <br>&gt; Regards, Martin<br>&gt; <br>&gt;&gt; You are right. Int conforms to Strideable.<br>&gt;&gt; <br>&gt;&gt; Now it seams like a bug. As in a playground. below are code works and<br>&gt;&gt; doesn&#39;t work<br>&gt;&gt; <br>&gt;&gt; extension Int {<br>&gt;&gt; <br>&gt;&gt;    func test() {<br>&gt;&gt; <br>&gt;&gt;        let temp = stride(from:1, to:10, by:2) // error<br>&gt;&gt; <br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; extension Float {<br>&gt;&gt; <br>&gt;&gt;    func test() {<br>&gt;&gt; <br>&gt;&gt;        let temp = stride(from:1, to:10, by:2) // error<br>&gt;&gt; <br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; extension String {<br>&gt;&gt; <br>&gt;&gt;    func test() {<br>&gt;&gt; <br>&gt;&gt;        let temp = stride(from:1, to:10, by:2) // works<br>&gt;&gt; <br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; class A {<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; extension A {<br>&gt;&gt; <br>&gt;&gt;    func test() {<br>&gt;&gt; <br>&gt;&gt;        let temp = stride(from:1, to:10, by:2) // works<br>&gt;&gt; <br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; struct B {<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; extension B {<br>&gt;&gt; <br>&gt;&gt;    func test() {<br>&gt;&gt; <br>&gt;&gt;        let temp = stride(from:1, to:10, by:2) // works<br>&gt;&gt; <br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; func test() {<br>&gt;&gt; <br>&gt;&gt;    let temp = stride(from:1, to:10, by:2) //works<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; let temp = stride(from:1, to:10, by:2) // works<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; ​It is nothing bug a bug?​<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; ​Zhaoxin​<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Tue, Jul 5, 2016 at 10:16 PM, Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Int conforms to Strideable byway of Integer &lt;- SignedInteger &lt;- Int (not<br>&gt;&gt;&gt; exactly sure how it will be once the integer proposal is implemented but it<br>&gt;&gt;&gt; will still be strideable).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Shawn<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Mon, Jul 4, 2016 at 10:38 PM Zhao Xin via swift-users &lt;<br>&gt;&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; In Swift 3,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func stride&lt;T : Strideable&gt;(from start: T, to end: T, by stride:<br>&gt;&gt;&gt;&gt; T.Stride) -&gt; StrideTo&lt;T&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Int does not conform to Strideable.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Adopted By<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; CGFloat<br>&gt;&gt;&gt;&gt; Decimal<br>&gt;&gt;&gt;&gt; Double<br>&gt;&gt;&gt;&gt; Float<br>&gt;&gt;&gt;&gt; Float80<br>&gt;&gt;&gt;&gt; String.UTF16View.Index<br>&gt;&gt;&gt;&gt; UnsafeMutablePointer<br>&gt;&gt;&gt;&gt; UnsafePointer<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ​In Swift 2.2,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; @warn_unused_result func stride(to *end*: Self, by *stride*: Self.Stride)<br>&gt;&gt;&gt;&gt; -&gt; StrideTo&lt;Self&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It uses Self, which means the type of the variable, instead of T.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Zhaoxin<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Tue, Jul 5, 2016 at 11:41 AM, Adriano Ferreira via swift-users &lt;<br>&gt;&gt;&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Hi everyone!<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I’m converting some code to Swift 3 and got this issue?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Does anybody know what’s going on?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Here’s the code, before and after conversion:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; // Swift 2.2<br>&gt;&gt;&gt;&gt;&gt; extension Int {<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;    // Repeat a block of code from `self` up to a limit<br>&gt;&gt;&gt;&gt;&gt;    func up(to upper: Int, by step: Int = 1, @noescape closure: () -&gt;<br>&gt;&gt;&gt;&gt;&gt; Void) {<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;        for _ in self.stride(to: upper, by: step) {<br>&gt;&gt;&gt;&gt;&gt;            closure()<br>&gt;&gt;&gt;&gt;&gt;        }<br>&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; // Swift 3<br>&gt;&gt;&gt;&gt;&gt; extension Int {<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;    // Repeat a block of code from `self` up to a limit<br>&gt;&gt;&gt;&gt;&gt;    func up(to upper: Int, by step: Int = 1, _ closure: @noescape () -&gt;<br>&gt;&gt;&gt;&gt;&gt; Void) {<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;        for _ in stride(from: self, to: upper, by: step) {<br>&gt;&gt;&gt;&gt;&gt;            closure()<br>&gt;&gt;&gt;&gt;&gt;        }<br>&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; // Usage<br>&gt;&gt;&gt;&gt;&gt; 1.up(to: 10, by: 2) {<br>&gt;&gt;&gt;&gt;&gt;    print(&quot;Hi!&quot;)<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Cannot invoke &#39;stride&#39; with an argument list of type &#39;(from: Int, to: Int, by: Int)&#39;</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>July  5, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On Jul 5, 2016, at 11:39 AM, Adriano Ferreira via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Do you think this should be filed as a bug or just wait until the Swift team removes the old stride method?<br></p><p>The old method is probably a stub that tells the fix-its how to find the new one, so it&#39;s there to stay. File a bug.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
