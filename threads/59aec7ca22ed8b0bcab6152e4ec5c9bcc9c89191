<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5bbeef7bc2d026f2172e0c93b940674e?s=50"></div><header><strong>Review: SE-0007 (Remove C-style for-loops with conditions and incrementers)</strong> from <string>Alex Chan</string> &lt;alexwlchan at fastmail.co.uk&gt;<p>December  7, 2015 at 06:00:00pm</p></header><div class="content"><p>1. I strongly support this change.<br></p><p>2. It’s not a problem, but an antipattern. Just as it’s important to add new features, it’s also important to consider what should be removed. The for-loops feel like a piece of legacy baggage; I can’t imagine them being added (at least in this form) if they weren’t already in Swift. I can’t imagine a scenario in which I’d recommend using the C-style for-loop instead of a more expressive Swift construct (and was unable to find a counterexample in my Swift or Python code).<br></p><p>3. This proposal fits nicely with Swift, for a few reasons:<br></p><p>   * Readability. The alternatives tend to more expressive and explicit, and feel more Swift-like.<br></p><p>   * Safety. For-loops are often used to iterate over arrays, but it’s easy to make off-by-one errors that mean you miss elements or try to read off the end of an array. For example:<br></p><p>        for var i = 0; i &lt;= bar.count; i++ {<br>            print(&quot;The \(i)th element in bar is \(bar[i]).&quot;)<br>        }<br></p><p>     It would be harder to make this sort of mistake with for-in loops or similar replacement constructs.<br></p><p>  * Simplicity. In my experience, using explicit iterables results in much simpler code in most cases.<br></p><p>4. My primary programming language is Python (for now). Python has neither ++/-- operators nor C-style for-loops. I’ve never had a problem doing complex iterations or loops – indeed, I find Python to be a very powerful language for iteration. I feel the same will hold true for Swift.<br></p><p>   Python and Swift have similar aims for readability and safety. I don’t recall any suggestions to add these constructs to Python; I believe the same would hold true if these constructs weren’t already in Swift.<br></p><p>5. I read the proposal carefully, looked over the responses in the mailing list, and spent several hours reading through my collection of Swift and Python code to look for any cases where lack of a C-style for-loop was a serious impediment. (I didn’t find any.)<br></p><p>— Alex<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8a24682926961206ad452d8455b09457?s=50"></div><header><strong>Review: SE-0007 (Remove C-style for-loops with conditions and incrementers)</strong> from <string>thorsten at portableinnovations.de</string> &lt;thorsten at portableinnovations.de&gt;<p>December 10, 2015 at 08:00:00am</p></header><div class="content"><p>1. Evaluation<br>Initially I was hesitant but now I support this change.<br>The C-style for-loop is syntactic baggage (the semicolons do not separate its parts very well) and suffers from the problem that it is imperative, i.e. The loop variable is just that, a variable, and therefore will not work as expected when captured in closures that are executed later, e.g. in a GCD queue.<br>There might be some corner cases where the C-style for-loop cannot be easily replaced with a for-loop or a while-loop in the presence of several continue statements, which is why I originally proposed to Swiftify the C-style for-loop instead of removing it, but I haven&#39;t seen a concrete one yet and I am optimistic that good solutions can be found even for these cases by refactorings e.g. extracting the loop body into a function and replacing continue with return. If someone has a concrete case for which that does not apply for some reasons I&#39;d be interested to see that case and reconsider.<br></p><p>2. Significance<br>The C-style for-loop does not fit syntactically and its use is limited. In most cases the for-in loop is much better suited and more expressive and for the remaining few cases a while-loop can be used. <br></p><p>3. Direction of Swift<br>This proposal fits the philosophy of Swift with regards to readability and safety because the alternatives are more expressive and readable.<br></p><p>4. Comparisons<br>I have long experience with mostly Smalltalk, Haskell, Swift and Java, and from earlier times with C, C++, Python and Ruby. Furthermore I follow the development of many languages with modern constructs closely, e.g. Scala, Ceylon, Clojure and others and have a strong interest in programming language design.<br>Most of these languages, i.e. all except Swift, Java and of course C and C++, do not have a C-style for-loop. They typically do have more expressive loops similar to the for-in loop of Swift (or more powerful, e.g. Scala&#39;s for-expression which is similar to Haskells monadic do-notation).<br>Dylan has an iterating for-loop which improves on the C-style for-loop by introducing a new binding for the loop &quot;variable&quot; on each iteration, which might look like follows in a Swiftified syntax:<br></p><p>for i = 0 then i + 1 while i &lt; limit { ... }<br>for i = 0 then i + 1 until i == limit { ... }<br></p><p>which effectively introduces a let binding in the init clause scoped to the loop, an expression to replace the binding with for the next iteration and a while or until clause which is checked before each iteration.<br></p><p>I would propose this as an alternative to removing the C-style for-loop if a review makes a convincing case that an incremental loop is still needed.<br></p><p>5. Effort<br>I read the proposal carefully, read the discussion in the mailing list, checked two large Java codebases (large systems for logistics) for occurences of for-loops and did only find trivial ones. Furthermore I checked textbooks for their looping constructs, e.g. &quot;Concepts, techniques and models of computer programming&quot; by van Roy and Haridi (highly recommended!), .<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/76fffbb8/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
