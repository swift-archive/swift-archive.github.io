<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/566528c7f7c28c35c0c646d415943612?s=50"></div><header><strong>Which functionality should be covered by a native Swift math/numerics library that ships with the standard lib?</strong> from <string>Taras Zakharko</string> &lt;taras.zakharko at uzh.ch&gt;<p>August  5, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; A few things immediately spring to mind:<br>&gt; • Fixed-size arrays<br>&gt; • An optimized Matrix type<br>&gt; • Swifty syntax for Fourier transforms<br>&gt; • A numerical integrator (or diff-eq solver!)<br>&gt; • BigInt capabilities<br>&gt; <br>&gt; The first of these (fixed-size arrays) will probably require compiler support.<br></p><p>Fixed-size arrays should be easy enough to implement if the Swift generics are enhanced with support for constraints beyond type variables. E.g.<br></p><p>  struct Vector&lt;T, count: Int&gt; { … } <br></p><p>  var x : Vector&lt;Float, count=16&gt;<br></p><p>or even <br></p><p> struct SparseTensor&lt;T, dimensions : [Int]&gt; { … }<br></p><p> var x: SparseTensor&lt;Float, dimensions = [100, 100, 100, 100]&gt; = SparseTensor(withValue: 0)<br></p><p>I believe that something like this was mentioned in the discussion of the Generics Manifesto. If you are interested in making Swift more suitable for numerical operations, I’d say that the first order of business is to work towards implementing this sort of generic constants. <br></p><p>Best, <br></p><p> Taras<br></p><p>&gt; <br>&gt; The rest can already be done in a library, except I believe they will hit the “generics cannot be specialized across module boundaries” slowdown, and must be explicitly specialized for common numeric types to avoid it. (Has this been fixed yet? Are there plans to?)<br>&gt; <br>&gt; Nevin<br>&gt; <br>&gt; <br>&gt; <br>&gt; On Wed, Aug 3, 2016 at 8:41 AM, Björn Forster&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)&gt;wrote:<br>&gt; &gt; Hello Swift community,<br>&gt; &gt; to make use of Swift more appealing and useful for science, engineering and finance and everything else involving actually calculating things, I think it would be a big step forward if Swift would ship with its own math/numerics library.<br>&gt; &gt; <br>&gt; &gt; Wouldn&#39;t it be great if Swift would offer functionality similar to Numpy in its native math lib? It think it would be great to have a &quot;standard&quot; annotation for vector arithmetic that the Swift community has agreed on and that scientific packages can build on.<br>&gt; &gt; <br>&gt; &gt; Which functionality should be covered by a Swift&#39;s math lib and where should be drawn the line?<br>&gt; &gt; <br>&gt; &gt; Any thoughts?<br>&gt; &gt; <br>&gt; &gt; (If it is not the right time now to talk this topic, as it is not mentioned in the goals for Swift 4 by Chris, I apologize for bringing this up now. But I think then this should be discussed later at some point not in the infinite future)<br>&gt; &gt; <br>&gt; &gt; Björn<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org(mailto:swift-evolution at swift.org)<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; <br>&gt; <br>&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>Which functionality should be covered by a native Swift math/numerics library that ships with the standard lib?</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>August  5, 2016 at 08:00:00am</p></header><div class="content"><p>I don&#39;t think that non-type generic arguments are enough to create fixed-size arrays. How would you fill in `struct Vector&lt;T, count: Int&gt; { ... }`?<br></p><p>Seems to me that the first step would be actual language support for non-parametrizable fixed-size arrays.<br></p><p>Félix<br></p><p>&gt; Le 5 août 2016 à 04:53:20, Taras Zakharko via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; A few things immediately spring to mind:<br>&gt;&gt; • Fixed-size arrays<br>&gt;&gt; • An optimized Matrix type<br>&gt;&gt; • Swifty syntax for Fourier transforms<br>&gt;&gt; • A numerical integrator (or diff-eq solver!)<br>&gt;&gt; • BigInt capabilities<br>&gt;&gt; <br>&gt;&gt; The first of these (fixed-size arrays) will probably require compiler support.<br>&gt; <br>&gt; Fixed-size arrays should be easy enough to implement if the Swift generics are enhanced with support for constraints beyond type variables. E.g.<br>&gt; <br>&gt;  struct Vector&lt;T, count: Int&gt; { … } <br>&gt; <br>&gt;  var x : Vector&lt;Float, count=16&gt;<br>&gt; <br>&gt; or even <br>&gt; <br>&gt; struct SparseTensor&lt;T, dimensions : [Int]&gt; { … }<br>&gt; <br>&gt; var x: SparseTensor&lt;Float, dimensions = [100, 100, 100, 100]&gt; = SparseTensor(withValue: 0)<br>&gt; <br>&gt; I believe that something like this was mentioned in the discussion of the Generics Manifesto. If you are interested in making Swift more suitable for numerical operations, I’d say that the first order of business is to work towards implementing this sort of generic constants. <br>&gt; <br>&gt; Best, <br>&gt; <br>&gt; Taras<br>&gt; <br>&gt;&gt; <br>&gt;&gt; The rest can already be done in a library, except I believe they will hit the “generics cannot be specialized across module boundaries” slowdown, and must be explicitly specialized for common numeric types to avoid it. (Has this been fixed yet? Are there plans to?)<br>&gt;&gt; <br>&gt;&gt; Nevin<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Wed, Aug 3, 2016 at 8:41 AM, Björn Forster&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)&gt;wrote:<br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt; to make use of Swift more appealing and useful for science, engineering and finance and everything else involving actually calculating things, I think it would be a big step forward if Swift would ship with its own math/numerics library.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Wouldn&#39;t it be great if Swift would offer functionality similar to Numpy in its native math lib? It think it would be great to have a &quot;standard&quot; annotation for vector arithmetic that the Swift community has agreed on and that scientific packages can build on.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Which functionality should be covered by a Swift&#39;s math lib and where should be drawn the line?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Any thoughts?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; (If it is not the right time now to talk this topic, as it is not mentioned in the goals for Swift 4 by Chris, I apologize for bringing this up now. But I think then this should be discussed later at some point not in the infinite future)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Björn<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org(mailto:swift-evolution at swift.org)<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160805/481684dc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>Which functionality should be covered by a native Swift math/numerics library that ships with the standard lib?</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>August  5, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; I don&#39;t think that non-type generic arguments are enough to create fixed-size arrays. How would you fill in `struct Vector&lt;T, count: Int&gt; { ... }`?<br>Fixed-size arrays could be initialized like current arrays:<br>You either give a value to repeat or an array-literal of the right size.<br>There could be a faillable initializer that takes an array of undefined size as well.<br></p><p>The data could be stored in a &quot;normal&quot; array, but I&#39;d expect an implementation in the stdlib, so that working with raw memory would stay something that&#39;s not needed for most Swift developers.<br></p><p>&gt; Seems to me that the first step would be actual language support for non-parametrizable fixed-size arrays.<br>Are you referring to literals here?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160805/5d2da0e1/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
