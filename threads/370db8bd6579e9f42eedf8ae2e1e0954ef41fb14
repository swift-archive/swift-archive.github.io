<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f6b7154fd1d6a470d0b521a2e484bffc?s=50"></div><header><strong>Very slow Set&lt;String&gt;(arrayOfStrings) for some arrayOfStrings</strong> from <string>Daniel Duan</string> &lt;daniel at duan.org&gt;<p>March  2, 2016 at 06:00:00pm</p></header><div class="content"><p>Arnold Schwaighofer via swift-dev &lt;swift-dev &lt;at&gt; swift.org&gt; writes:<br></p><p>&gt; <br>&gt; That is the difference between a “String” type instance that can use the<br>&gt; ascii fast path and NSString backed “String” type instances.<br>&gt; <br></p><p>This makes total sense now :) I was very mystified by this issue and thought<br>it&#39;s a weird bias in the hashing function at some point.<br></p><p>Thanks for the insight Arnold.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d042be5dcfe90e649f760303af3e429?s=50"></div><header><strong>Very slow Set&lt;String&gt;(arrayOfStrings) for some arrayOfStrings</strong> from <string>Jens Persson</string> &lt;jens at bitcycle.com&gt;<p>March  2, 2016 at 10:00:00pm</p></header><div class="content"><p>Interesting, thanks!<br>I tried using this extension<br>extension String {<br>    func componentsSeparatedByNewLineCharacter() -&gt; [String] {<br>        var lines = [String]()<br>        var currStr = String.UnicodeScalarView()<br>        let newLineUCS = UnicodeScalar(&quot;\n&quot;)<br>        for ucs in self.unicodeScalars {<br>            switch ucs {<br>            case newLineUCS: lines.append(String(currStr));<br>currStr.removeAll()<br>            default: currStr.append(ucs)<br>            }<br>        }<br>        return lines<br>    }<br>}<br>instead of componentsSeparatedByString(&quot;\n&quot;)<br></p><p>This made the slow non-caseSwapped test(strings) run in 2.3 seconds instead<br>of the previous 9.5 seconds, but that is still relatively slow compared to<br>the 0.066 seconds of the test(caseSwappedStrings).<br></p><p>Is there a way to make sure a String in Swift has the isASCII bit set<br>(provided the original string contains only ASCII of course)?<br></p><p>/Jens<br></p><p><br>On Wed, Mar 2, 2016 at 7:24 PM, Daniel Duan via swift-dev &lt;<br>swift-dev at swift.org&gt; wrote:<br></p><p>&gt; Arnold Schwaighofer via swift-dev &lt;swift-dev &lt;at&gt; swift.org&gt; writes:<br>&gt;<br>&gt; &gt;<br>&gt; &gt; That is the difference between a “String” type instance that can use the<br>&gt; &gt; ascii fast path and NSString backed “String” type instances.<br>&gt; &gt;<br>&gt;<br>&gt; This makes total sense now :) I was very mystified by this issue and<br>&gt; thought<br>&gt; it&#39;s a weird bias in the hashing function at some point.<br>&gt;<br>&gt; Thanks for the insight Arnold.<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br></p><p><br></p><p>-- <br>bitCycle AB | Smedjegatan 12 | 742 32 Östhammar | Sweden<br>http://www.bitcycle.com/<br>Phone: +46-73-753 24 62<br>E-mail: jens at bitcycle.com<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160302/d05d2a01/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d042be5dcfe90e649f760303af3e429?s=50"></div><header><strong>Very slow Set&lt;String&gt;(arrayOfStrings) for some arrayOfStrings</strong> from <string>Jens Persson</string> &lt;jens at bitcycle.com&gt;<p>March  3, 2016 at 01:00:00am</p></header><div class="content"><p>The following slight modification of the extension, however, makes<br>test(strings) run as fast as test(caseSwappedStrings) (ie 0.07 seconds):<br></p><p>extension String {<br>    func componentsSeparatedByNewLineCharacter() -&gt; [String] {<br>        var lines = [String]()<br>        var currStr = String.UnicodeScalarView()<br>        let newLineUCS = UnicodeScalar(&quot;\n&quot;)<br>        for ucs in self.unicodeScalars {<br>            switch ucs {<br>            case newLineUCS: lines.append(String(currStr) + &quot; &quot;);<br>currStr.removeAll()<br>            default: currStr.append(ucs)<br>            }<br>        }<br>        return lines<br>    }<br>}<br></p><p>Note that the only change is that a space is added to the string there ( +<br>&quot; &quot; ).<br></p><p>So I guess that for some reason adding that space sets the String&#39;s isASCII<br>bit ... But the strange thing is that if I try to remove the space, and no<br>matter how I do that, the test(strings)-test goes back to being 2.3 seconds<br>again (instead of 0.07 seconds).<br></p><p>It&#39;s almost as if there is a cached version of the original String (one<br>that has its isASCII bit cleared) that is being reused as soon as I modify<br>it in a way that makes it be the same as it was originally.<br>If so, I&#39;m guessing that it is the String.init(contentsOfFile: path) that<br>is to blame (it&#39;s making an NSString-backed String with its isASCII bit<br>cleared), because I&#39;m unable to reproduce the slow (now 2.3 seconds)<br>behavior without loading from disk.<br></p><p>/Jens<br></p><p><br>On Wed, Mar 2, 2016 at 10:02 PM, Jens Persson &lt;jens at bitcycle.com&gt; wrote:<br></p><p>&gt; Interesting, thanks!<br>&gt; I tried using this extension<br>&gt; extension String {<br>&gt;     func componentsSeparatedByNewLineCharacter() -&gt; [String] {<br>&gt;         var lines = [String]()<br>&gt;         var currStr = String.UnicodeScalarView()<br>&gt;         let newLineUCS = UnicodeScalar(&quot;\n&quot;)<br>&gt;         for ucs in self.unicodeScalars {<br>&gt;             switch ucs {<br>&gt;             case newLineUCS: lines.append(String(currStr));<br>&gt; currStr.removeAll()<br>&gt;             default: currStr.append(ucs)<br>&gt;             }<br>&gt;         }<br>&gt;         return lines<br>&gt;     }<br>&gt; }<br>&gt; instead of componentsSeparatedByString(&quot;\n&quot;)<br>&gt;<br>&gt; This made the slow non-caseSwapped test(strings) run in 2.3 seconds<br>&gt; instead of the previous 9.5 seconds, but that is still relatively slow<br>&gt; compared to the 0.066 seconds of the test(caseSwappedStrings).<br>&gt;<br>&gt; Is there a way to make sure a String in Swift has the isASCII bit set<br>&gt; (provided the original string contains only ASCII of course)?<br>&gt;<br>&gt; /Jens<br>&gt;<br>&gt;<br>&gt; On Wed, Mar 2, 2016 at 7:24 PM, Daniel Duan via swift-dev &lt;<br>&gt; swift-dev at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Arnold Schwaighofer via swift-dev &lt;swift-dev &lt;at&gt; swift.org&gt; writes:<br>&gt;&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; That is the difference between a “String” type instance that can use the<br>&gt;&gt; &gt; ascii fast path and NSString backed “String” type instances.<br>&gt;&gt; &gt;<br>&gt;&gt;<br>&gt;&gt; This makes total sense now :) I was very mystified by this issue and<br>&gt;&gt; thought<br>&gt;&gt; it&#39;s a weird bias in the hashing function at some point.<br>&gt;&gt;<br>&gt;&gt; Thanks for the insight Arnold.<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-dev mailing list<br>&gt;&gt; swift-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; bitCycle AB | Smedjegatan 12 | 742 32 Östhammar | Sweden<br>&gt; http://www.bitcycle.com/<br>&gt; Phone: +46-73-753 24 62<br>&gt; E-mail: jens at bitcycle.com<br>&gt;<br>&gt;<br></p><p><br>-- <br>bitCycle AB | Smedjegatan 12 | 742 32 Östhammar | Sweden<br>http://www.bitcycle.com/<br>Phone: +46-73-753 24 62<br>E-mail: jens at bitcycle.com<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160303/060effbc/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
