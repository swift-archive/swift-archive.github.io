<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/44b9c3e92a40313850fdbc2cb0abdef7?s=50"></div><header><strong>Capturing difference with typealias</strong> from <string>Jon Shier</string> &lt;jon at jonshier.com&gt;<p>August 19, 2016 at 05:00:00pm</p></header><div class="content"><p>Users:<br>	I’m updating more code to beta 6 and have noticed a strange difference when calling functions with closure parameters where that closure is declared with a typealias. Take this class:<br></p><p>typealias Closure = () -&gt; Void<br></p><p>class Thing {<br>    var array: [String] = []<br>    <br>    func doClosure(closure: Closure) {<br>        array.append(&quot;closure&quot;)<br>    }<br>    <br>    func doManualClosure(manualClosure: () -&gt; Void) {<br>        array.append(&quot;manualClosure&quot;)<br>    }<br>    <br>    func append() {<br>        doClosure {<br>            doClosure {<br>                <br>            }<br>        }<br>    }<br>    <br>    func appendManual() {<br>        doManualClosure {<br>            doManualClosure {<br>                <br>            }<br>        }<br>    }<br>}<br></p><p>There’s an error triggered by the doClosure call inside a doClosure call saying that I need an explicit self capture. However, the same pattern in appendManual() builds just fine. I’m guessing this is a bug?<br></p><p><br></p><p>Jon<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/44b9c3e92a40313850fdbc2cb0abdef7?s=50"></div><header><strong>Capturing difference with typealias</strong> from <string>Jon Shier</string> &lt;jon at jonshier.com&gt;<p>August 19, 2016 at 08:00:00pm</p></header><div class="content"><p>Another general question I have is how the self requirement in general has changed. I’m noticing several instances where my previous @noescape closures, which of course had that attribute removed, are now requiring self when they didn’t before and aren’t marked @escaping either. So I guess my question is, should there ever be an instance where a closure not marked @escaping requires the use of self?<br></p><p><br>Jon<br></p><p>&gt; On Aug 19, 2016, at 5:46 PM, Jon Shier &lt;jon at jonshier.com&gt; wrote:<br>&gt; <br>&gt; Users:<br>&gt; 	I’m updating more code to beta 6 and have noticed a strange difference when calling functions with closure parameters where that closure is declared with a typealias. Take this class:<br>&gt; <br>&gt; typealias Closure = () -&gt; Void<br>&gt; <br>&gt; class Thing {<br>&gt;    var array: [String] = []<br>&gt; <br>&gt;    func doClosure(closure: Closure) {<br>&gt;        array.append(&quot;closure&quot;)<br>&gt;    }<br>&gt; <br>&gt;    func doManualClosure(manualClosure: () -&gt; Void) {<br>&gt;        array.append(&quot;manualClosure&quot;)<br>&gt;    }<br>&gt; <br>&gt;    func append() {<br>&gt;        doClosure {<br>&gt;            doClosure {<br>&gt; <br>&gt;            }<br>&gt;        }<br>&gt;    }<br>&gt; <br>&gt;    func appendManual() {<br>&gt;        doManualClosure {<br>&gt;            doManualClosure {<br>&gt; <br>&gt;            }<br>&gt;        }<br>&gt;    }<br>&gt; }<br>&gt; <br>&gt; There’s an error triggered by the doClosure call inside a doClosure call saying that I need an explicit self capture. However, the same pattern in appendManual() builds just fine. I’m guessing this is a bug?<br>&gt; <br>&gt; <br>&gt; <br>&gt; Jon<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/569ed436467cf145f3bbdd0d53fbe115?s=50"></div><header><strong>Capturing difference with typealias</strong> from <string>Slava Pestov</string> &lt;spestov at apple.com&gt;<p>August 19, 2016 at 10:00:00pm</p></header><div class="content"><p>Hi Jon,<br></p><p>In beta 6, non-escaping is now the default, and you must use the @escaping attribute to declare a parameter as escaping.<br></p><p>Unfortunately, there were a few bugs in how this attribute was implemented.<br></p><p>I checked in a fix to the swift-3.0-branch today: https://github.com/apple/swift/commit/c1214fea45f0cfa58a5eb4ffc44ee0533f5c8cbe &lt;https://github.com/apple/swift/commit/c1214fea45f0cfa58a5eb4ffc44ee0533f5c8cbe&gt;<br></p><p>After the above patch, it will no longer make a difference if the function type is written directly (as in doManualClosure) or a typealias (a in doClosure). In both cases, the closure should be non-escaping, unless explicitly declared @escaping. However in beta 6 you see the bug where the closure in doClosure() is escaping, even though no explicit @escaping attribute was specified, because it was written with a typealias.<br></p><p>If you have time, please test the next snapshot when it is released, or build Swift from swift-3.0-branch (or master) today, to see if it behaves as you expect.<br></p><p>Sorry for the confusion.<br></p><p>Slava<br></p><p>&gt; On Aug 19, 2016, at 5:27 PM, Jon Shier via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Another general question I have is how the self requirement in general has changed. I’m noticing several instances where my previous @noescape closures, which of course had that attribute removed, are now requiring self when they didn’t before and aren’t marked @escaping either. So I guess my question is, should there ever be an instance where a closure not marked @escaping requires the use of self?<br>&gt; <br>&gt; <br>&gt; Jon<br>&gt; <br>&gt;&gt; On Aug 19, 2016, at 5:46 PM, Jon Shier &lt;jon at jonshier.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Users:<br>&gt;&gt; 	I’m updating more code to beta 6 and have noticed a strange difference when calling functions with closure parameters where that closure is declared with a typealias. Take this class:<br>&gt;&gt; <br>&gt;&gt; typealias Closure = () -&gt; Void<br>&gt;&gt; <br>&gt;&gt; class Thing {<br>&gt;&gt;   var array: [String] = []<br>&gt;&gt; <br>&gt;&gt;   func doClosure(closure: Closure) {<br>&gt;&gt;       array.append(&quot;closure&quot;)<br>&gt;&gt;   }<br>&gt;&gt; <br>&gt;&gt;   func doManualClosure(manualClosure: () -&gt; Void) {<br>&gt;&gt;       array.append(&quot;manualClosure&quot;)<br>&gt;&gt;   }<br>&gt;&gt; <br>&gt;&gt;   func append() {<br>&gt;&gt;       doClosure {<br>&gt;&gt;           doClosure {<br>&gt;&gt; <br>&gt;&gt;           }<br>&gt;&gt;       }<br>&gt;&gt;   }<br>&gt;&gt; <br>&gt;&gt;   func appendManual() {<br>&gt;&gt;       doManualClosure {<br>&gt;&gt;           doManualClosure {<br>&gt;&gt; <br>&gt;&gt;           }<br>&gt;&gt;       }<br>&gt;&gt;   }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; There’s an error triggered by the doClosure call inside a doClosure call saying that I need an explicit self capture. However, the same pattern in appendManual() builds just fine. I’m guessing this is a bug?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Jon<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160819/70397d4e/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
