<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Accepted] SE-0103: Make non-escaping closures the default</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>June 30, 2016 at 01:00:00pm</p></header><div class="content"><p>Proposal link: https://github.com/apple/swift-evolution/blob/master/proposals/0103-make-noescape-default.md<br></p><p>Hello Swift Community,<br></p><p>The review of &quot;SE-0103: Make non-escaping closures the default&quot; ran from June 21...27. The proposal is *accepted* for Swift 3 with a minor revision: instead of a “asUnsafeEscapingClosure(_:)&quot; function that removes the @escaping attribute, the core team prefers a function with this signature (roughly) like:<br></p><p>  func withoutActuallyEscaping&lt;ClosureType, ResultType&gt;(_ closure: ClosureType, do: (fn : @escaping ClosureType) -&gt; ResultType) -&gt; ResultType { … }<br></p><p>This allows one to safely add the @escaping attribute in situations where a closure is known not to actually escape.  For example, in a situation where you might want to use a lazy algorithm, you could use:<br></p><p>  func yourFunction(fn : (Int) -&gt; Int) { // fn defaults to non-escaping.<br>    withoutActuallyEscaping(fn) { fn in  // fn is now marked @escaping inside the closure<br>      ... somearray.lazy.map(fn) …       // pass fn to something that is notationally @escaping<br>    }<br>  }<br></p><p>The key to this approach is that the “withoutActuallyEscaping” function can verify that the closure has not actually escaped when it completes, providing a safe model for locally adding the @escaping attribute when needed.  The core team believes that the actual implementation of withoutActuallyEscaping will require some magic, but that it should be implementable.<br></p><p>Many thanks to Trent Nadeau for driving this proposal forward.  I filed SR-1952 to track implementation of this feature.<br></p><p>-Chris Lattner<br>Review Manager<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution-announce/attachments/20160630/5ecdd954/attachment-0001.html&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
