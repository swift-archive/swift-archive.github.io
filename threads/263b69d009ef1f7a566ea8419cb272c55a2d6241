<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edef19574627937bf1cfb218aef49fcc?s=50"></div><header><strong>[Idea] Switch Statement with Optional Binding</strong> from <string>Natthan Leong</string> &lt;kar.joon at icloud.com&gt;<p>May 27, 2016 at 01:00:00am</p></header><div class="content"><p>Hi there,<br></p><p>I was wondering if the community would like Swift to have a switch statement with optional binding.<br></p><p>Take this simple dictionary as an example:<br></p><p>let cityIDs = [&quot;Paris&quot;: 1, &quot;London&quot;: 2]<br></p><p>Currently, this is how things are done if parisCityID is used only once within an if-let statement for only a switch statement: <br></p><p>if let parisCityID = cityIDs[&quot;Paris&quot;] {<br>    switch parisCityID {<br>    case 0..&lt;10:<br>        print(&quot;Paris city ID: \(parisCityID)&quot;)<br>    default:<br>        break<br>    }<br>}<br></p><p>And here is the proposed switch statement with optional binding:<br></p><p>switch let parisCityID = cityIDs[&quot;Paris&quot;] {<br>    case 0..&lt;10:<br>        print(&quot;Paris city ID: \(parisCityID)&quot;)<br>    default:<br>        break<br>}<br></p><p>With var:<br></p><p>switch var parisCityID = cityIDs[&quot;Paris&quot;] {<br>    case 0..&lt;10:<br>        parisCityID += 2 // just to demonstrate var<br>        print(&quot;Paris city ID: \(parisCityID)&quot;)<br>    default:<br>        break<br>}<br></p><p>Feedback welcomed!<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160527/263b6241/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a6729e3608691552bd1c61373d0e5b08?s=50"></div><header><strong>[Idea] Switch Statement with Optional Binding</strong> from <string>Kevin Nattinger</string> &lt;swift at nattinger.net&gt;<p>May 27, 2016 at 09:00:00am</p></header><div class="content"><p>You can do it today (2.2 and 3.0-master) like this:<br></p><p>switch cityIDs[&quot;Paris&quot;] {<br>	case let .Some(parisCityID) where 0..&lt;10 ~= parisCityID:<br>	print(&quot;Paris city ID: \(parisCityID)&quot;)<br>	default:<br>	break<br>}<br></p><p>&gt; On May 27, 2016, at 1:58 AM, Natthan Leong via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi there,<br>&gt; <br>&gt; I was wondering if the community would like Swift to have a switch statement with optional binding.<br>&gt; <br>&gt; Take this simple dictionary as an example:<br>&gt; <br>&gt; let cityIDs = [&quot;Paris&quot;: 1, &quot;London&quot;: 2]<br>&gt; <br>&gt; Currently, this is how things are done if parisCityID is used only once within an if-let statement for only a switch statement: <br>&gt; <br>&gt; if let parisCityID = cityIDs[&quot;Paris&quot;] {<br>&gt;     switch parisCityID {<br>&gt;     case 0..&lt;10:<br>&gt;         print(&quot;Paris city ID: \(parisCityID)&quot;)<br>&gt;     default:<br>&gt;         break<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; And here is the proposed switch statement with optional binding:<br>&gt; <br>&gt; switch let parisCityID = cityIDs[&quot;Paris&quot;] {<br>&gt;     case 0..&lt;10:<br>&gt;         print(&quot;Paris city ID: \(parisCityID)&quot;)<br>&gt;     default:<br>&gt;         break<br>&gt; }<br>&gt; <br>&gt; With var:<br>&gt; <br>&gt; switch var parisCityID = cityIDs[&quot;Paris&quot;] {<br>&gt;     case 0..&lt;10:<br>&gt;         parisCityID += 2 // just to demonstrate var<br>&gt;         print(&quot;Paris city ID: \(parisCityID)&quot;)<br>&gt;     default:<br>&gt;         break<br>&gt; }<br>&gt; <br>&gt; Feedback welcomed!<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edef19574627937bf1cfb218aef49fcc?s=50"></div><header><strong>[Idea] Switch Statement with Optional Binding</strong> from <string>Natthan Leong</string> &lt;kar.joon at icloud.com&gt;<p>May 27, 2016 at 09:00:00am</p></header><div class="content"><p>Nice!<br></p><p>However, the case statements may increase as shown below and I was wondering if it will still be worth it(Greetings core team!) in adding some syntactic sugar as aforementioned...<br></p><p>switch cityIDs[&quot;Paris&quot;] {<br>case let .Some(parisCityID) where 0..&lt;3 ~= parisCityID:<br>    print(&quot;Paris city ID: \(parisCityID)&quot;)<br>case let .Some(parisCityID) where 3..&lt;5 ~= parisCityID:<br>    print(&quot;&quot;)<br>case let .Some(parisCityID) where 5..&lt;10 ~= parisCityID:<br>    fatalError()<br>default:<br>    break<br>}<br></p><p>One more aspect that I have thought of is that the proposed switch statement with optional binding may only bind one value unlike if-let i.e.<br></p><p>if let x = foo, y = bar {<br>    // do something with `x` and `y`<br>}<br></p><p>// but the following can&#39;t happen<br></p><p>switch let x = foo, y = bar {<br>    // compile error<br>}<br></p><p>&gt; On May 27, 2016, at 9:25 AM, Kevin Nattinger &lt;swift at nattinger.net&gt; wrote:<br>&gt; <br>&gt; switch cityIDs[&quot;Paris&quot;] {<br>&gt; 	case let .Some(parisCityID) where 0..&lt;10 ~= parisCityID:<br>&gt; 	print(&quot;Paris city ID: \(parisCityID)&quot;)<br>&gt; 	default:<br>&gt; 	break<br>&gt; }<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160527/494f0d2a/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
