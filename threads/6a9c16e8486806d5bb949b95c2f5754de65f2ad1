<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>Why does RangeReplaceableCollection require an empty initialiser?</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>July  6, 2016 at 03:00:00pm</p></header><div class="content"><p>I’m not allowing generic subscripts. The collection is declared as `AnyIndexArray&lt;Index: Strideable, Element where Index.Stride == Int&gt;` and it can be subscripted with type `Index`.<br></p><p>Either way, it’s not really important. I’m mostly wondering why RangeReplaceableCollection needs an empty initialiser.<br></p><p>&gt; Then how you defined the index to conform toStrideable? Below code does work as it seams that you can&#39;t use generics in subscripts.<br>&gt; <br>&gt; <br>&gt; subscript&lt;T:Strideable&gt;(index:T) -&gt;Element<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; Zhaoxin<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; On Wed, Jul 6, 2016 at 8:32 PM, Tim Vermeulen&lt;tvermeulen at me.com(mailto:tvermeulen at me.com)&gt;wrote:<br>&gt; &gt; <br>&gt; &gt; &gt; On 6 Jul 2016, at 14:03, Zhao Xin&lt;owenzx at gmail.com(mailto:owenzx at gmail.com)&gt;wrote:<br>&gt; &gt; &gt; According to the document of Swift 3, Array has already conformed protocolRangeReplaceableCollection.<br>&gt; &gt; <br>&gt; &gt; That’s exactly why I also want to conform my wrapper to that protocol? I think there’s a misunderstanding. I’m making a collection that can be subscripted with any index (that conforms to Strideable), but behaves like an array otherwise.<br>&gt; &gt; <br>&gt; &gt; &gt; <br>&gt; &gt; &gt; Zhaoxin<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; On Wed, Jul 6, 2016 at 7:09 PM, Tim Vermeulen via swift-users&lt;swift-users at swift.org(mailto:swift-users at swift.org)&gt;wrote:<br>&gt; &gt; &gt; &gt; RangeReplaceableCollection has three initialisers: init(), init(_:) and init(repeating:count:). The latter two are implemented using the empty initialiser. But why are these initialisers part of this particular protocol? As far as I can tell, no other methods of this protocol depend on these initialisers. The requirement of the empty initialiser makes it impossible to have a collection conform to this protocol that needs additional data for its initialisation.<br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; For instance, I was making an array that works with any Strideable indices, not just integers. A startIndex is needed for its initialisation, so I can’t really conform it to RangeReplaceableCollection. If I do it anyways (with a fatalError() in the required empty initialiser) everything seems to work just fine, except for the protocol’s three initialisers.<br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; Perhaps these initialisers should be moved to a (possible new) different protocol?<br>&gt; &gt; &gt; &gt; _______________________________________________<br>&gt; &gt; &gt; &gt; swift-users mailing list<br>&gt; &gt; &gt; &gt; swift-users at swift.org(mailto:swift-users at swift.org)<br>&gt; &gt; &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; &gt; &gt; <br>&gt; &gt; <br>&gt; <br>&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>Why does RangeReplaceableCollection require an empty initialiser?</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>July  6, 2016 at 09:00:00pm</p></header><div class="content"><p>Now I understood you concerns. Have you ever thought of if a non-empty<br>RangeReplaceableCollection being removed all of its elements, which makes<br>the collection to be an empty collection. That shouldn&#39;t change the<br>RangeReplaceableCollection<br>to be a non-RangeReplaceableCollection. So the empty collection must also<br>be a RangeReplaceableCollection.<br></p><p>init()<br>&gt;<br>&gt; &lt;file:///Users/zhaoxin/Library/Application%20Support/Dash/DocSets/Apple_API_Reference/Apple_API_Reference.docset/Contents/Resources/Documents/developer.apple.com/reference/swift/rangereplaceablecollection/1641467-init.html&gt;Creates<br>&gt; a new, empty collection.<br></p><p><br>Zhaoxin<br></p><p>On Wed, Jul 6, 2016 at 9:09 PM, Tim Vermeulen &lt;tvermeulen at me.com&gt; wrote:<br></p><p>&gt; I’m not allowing generic subscripts. The collection is declared as<br>&gt; `AnyIndexArray&lt;Index: Strideable, Element where Index.Stride == Int&gt;` and<br>&gt; it can be subscripted with type `Index`.<br>&gt;<br>&gt; Either way, it’s not really important. I’m mostly wondering why<br>&gt; RangeReplaceableCollection needs an empty initialiser.<br>&gt;<br>&gt; &gt; Then how you defined the index to conform toStrideable? Below code does<br>&gt; work as it seams that you can&#39;t use generics in subscripts.<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; subscript&lt;T:Strideable&gt;(index:T) -&gt;Element<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; Zhaoxin<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; On Wed, Jul 6, 2016 at 8:32 PM, Tim Vermeulen&lt;tvermeulen at me.com(mailto:<br>&gt; tvermeulen at me.com)&gt;wrote:<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; On 6 Jul 2016, at 14:03, Zhao Xin&lt;owenzx at gmail.com(mailto:<br>&gt; owenzx at gmail.com)&gt;wrote:<br>&gt; &gt; &gt; &gt; According to the document of Swift 3, Array has already conformed<br>&gt; protocolRangeReplaceableCollection.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; That’s exactly why I also want to conform my wrapper to that protocol?<br>&gt; I think there’s a misunderstanding. I’m making a collection that can be<br>&gt; subscripted with any index (that conforms to Strideable), but behaves like<br>&gt; an array otherwise.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; Zhaoxin<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; On Wed, Jul 6, 2016 at 7:09 PM, Tim Vermeulen via swift-users&lt;<br>&gt; swift-users at swift.org(mailto:swift-users at swift.org)&gt;wrote:<br>&gt; &gt; &gt; &gt; &gt; RangeReplaceableCollection has three initialisers: init(),<br>&gt; init(_:) and init(repeating:count:). The latter two are implemented using<br>&gt; the empty initialiser. But why are these initialisers part of this<br>&gt; particular protocol? As far as I can tell, no other methods of this<br>&gt; protocol depend on these initialisers. The requirement of the empty<br>&gt; initialiser makes it impossible to have a collection conform to this<br>&gt; protocol that needs additional data for its initialisation.<br>&gt; &gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; &gt; For instance, I was making an array that works with any Strideable<br>&gt; indices, not just integers. A startIndex is needed for its initialisation,<br>&gt; so I can’t really conform it to RangeReplaceableCollection. If I do it<br>&gt; anyways (with a fatalError() in the required empty initialiser) everything<br>&gt; seems to work just fine, except for the protocol’s three initialisers.<br>&gt; &gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; &gt; Perhaps these initialisers should be moved to a (possible new)<br>&gt; different protocol?<br>&gt; &gt; &gt; &gt; &gt; _______________________________________________<br>&gt; &gt; &gt; &gt; &gt; swift-users mailing list<br>&gt; &gt; &gt; &gt; &gt; swift-users at swift.org(mailto:swift-users at swift.org)<br>&gt; &gt; &gt; &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160706/3d2abdb7/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
