<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a838c63b9093a77fb88231d65effa3b3?s=50"></div><header><strong>importer questions</strong> from <string>Drew Crawford</string> &lt;drew at sealedabstract.com&gt;<p>February 15, 2016 at 11:00:00pm</p></header><div class="content"><p>I&#39;m porting a codebase to Linux.  As part of this work, I have a large class of problems of the form &quot;Darwin defines this constant to be Int32 but Glibc defines it to be Int16&quot;.<br></p><p>Are these considered bugs, from Swift POV?  They mean I have to `#if os(Linux)` a lot of things, but one interpretation is that Darwin and Glibc headers are just different, get over it.<br>If they are bugs, should they be resolved in favor of making Glibc follow the Darwin types?<br>If they are bugs, perhaps someone could link me to the place where I can override the header import, so I can fix these directly?  Filing them separately would probably be inefficient, as I have a codebase that can identify them at some scale.<br></p><p>Thanks<br></p><p>Drew<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160215/02645313/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>importer questions</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>February 16, 2016 at 12:00:00am</p></header><div class="content"><p>On Mon, Feb 15, 2016 at 9:22 PM, Drew Crawford via swift-dev<br>&lt;swift-dev at swift.org&gt; wrote:<br>&gt; I&#39;m porting a codebase to Linux.  As part of this work, I have a large class<br>&gt; of problems of the form &quot;Darwin defines this constant to be Int32 but Glibc<br>&gt; defines it to be Int16&quot;.<br>&gt;<br>&gt; Are these considered bugs, from Swift POV?<br></p><p>It depends on the API.  Could you give some examples?<br></p><p>&gt; If they are bugs, should they be resolved in favor of making Glibc follow<br>&gt; the Darwin types?<br></p><p>Blanket rules like that don&#39;t make sense to me, since the correct<br>import could be neither Int32, nor Int16, but a plain Int.  And there<br>are other cases that we won&#39;t even imagine before we have a list of<br>problematic APIs in front of us.<br></p><p>&gt; If they are bugs, perhaps someone could link me to the place where I can<br>&gt; override the header import, so I can fix these directly?<br></p><p>So far, we have been fixing suboptimal API imports in the overlays.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a838c63b9093a77fb88231d65effa3b3?s=50"></div><header><strong>importer questions</strong> from <string>Drew Crawford</string> &lt;drew at sealedabstract.com&gt;<p>February 16, 2016 at 02:00:00am</p></header><div class="content"><p>&gt; On Feb 16, 2016, at 2:06 AM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; <br>&gt; Could you give some examples?<br></p><p>Here are some that I #ifdefed on Linux just today:<br></p><p>SOCK_STREAM<br>IPPROTO_TCP<br>timeval.  This is a tricky case, as there are actually 2 types on Darwin (timeval / timeval64), that map to 1 (as far as I know) on Linux.<br>timeval[64] members, which are in some platforms Int64, in some platforms __darwin_xx and in other platforms Int<br>SHUT_RDWR<br>POLLIN etc. is wrong IMO even on Darwin.  I opened SR-178 for this (and previously I filed a radar), but since that bug has sat for 2 months (and the radar for longer) without any comment it motivated me to investigate the DIY approach to these simple &quot;importer bugs&quot;, as perhaps the core team is too busy.<br></p><p>Obviously I don&#39;t expect 100% portability (these are different OSes afterall), but there are several cases where the type differences feel more by accident than by design.<br></p><p>I will probably have a new list in a few days if interested, as I am still battling Linux-specific compile errors :-)<br></p><p><br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160216/076e7066/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>importer questions</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>February 16, 2016 at 12:00:00am</p></header><div class="content"><p>On Tue, Feb 16, 2016 at 12:36 AM, Drew Crawford &lt;drew at sealedabstract.com&gt; wrote:<br>&gt;<br>&gt; On Feb 16, 2016, at 2:06 AM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;<br>&gt; Could you give some examples?<br>&gt;<br>&gt;<br>&gt; Here are some that I #ifdefed on Linux just today:<br></p><p>Thank you for the list!<br></p><p>Unfortunately, it is not clear what is wrong about the import of these<br>APIs.  Could you elaborate?<br></p><p>Dmitri<br></p><p>&gt;<br>&gt; SOCK_STREAM<br>&gt; IPPROTO_TCP<br>&gt; timeval.  This is a tricky case, as there are actually 2 types on Darwin<br>&gt; (timeval / timeval64), that map to 1 (as far as I know) on Linux.<br>&gt; timeval[64] members, which are in some platforms Int64, in some platforms<br>&gt; __darwin_xx and in other platforms Int<br>&gt; SHUT_RDWR<br>&gt; POLLIN etc. is wrong IMO even on Darwin.  I opened SR-178 for this (and<br>&gt; previously I filed a radar), but since that bug has sat for 2 months (and<br>&gt; the radar for longer) without any comment it motivated me to investigate the<br>&gt; DIY approach to these simple &quot;importer bugs&quot;, as perhaps the core team is<br>&gt; too busy.<br>&gt;<br>&gt;<br>&gt; Obviously I don&#39;t expect 100% portability (these are different OSes<br>&gt; afterall), but there are several cases where the type differences feel more<br>&gt; by accident than by design.<br>&gt;<br>&gt; I will probably have a new list in a few days if interested, as I am still<br>&gt; battling Linux-specific compile errors :-)<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br></p><p><br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a838c63b9093a77fb88231d65effa3b3?s=50"></div><header><strong>importer questions</strong> from <string>Drew Crawford</string> &lt;drew at sealedabstract.com&gt;<p>February 16, 2016 at 03:00:00am</p></header><div class="content"><p>Sorry, I wasn&#39;t sure how detailed to be.<br></p><p>BTW, I have not determined how to print the interface for e.g. Glibc, if you know how to do that, it might help gather more items.<br></p><p>1.  SOCK_STREAM is a __socket_type struct on Glibc, with an inner member rawValue : UInt32.  On Darwin it is Int32 without any wrapper struct.<br>     a.  However APIs where one would use this value (such as socket() ) take Int32 in both cases, this requires applications to do a member access + cast on Linux that is not necessary or allowed on Darwin<br>2.  IPPROTO_TCP is Int on Glibc, while Int32 on Darwin<br>    a.  APIs (e.g. socket() ) expect Int32 for this argument in practice<br>3.  timeval is a royal pain.<br>     a.  Darwin defines both timeval and timeval64, but at runtime, Darwin generally expects timeval64 on 64-bit platforms and timeval on 32-bit platforms<br>    b.  Linux seems only to define timeval, although I have not tried 32-bit Linux so I cannot speak to that case<br>4.  timeval&#39;s members are (e.g. to construct one, you need to use)<br>    a.   Int64 if using timeval64/Darwin64, <br>    b.  __darwin_time_t and __darwin_suseconds_t if using 32-bit Darwin, <br>    c.  and Int if on Linux<br>5.  SHUT_RDWR is Int on Linux and Int32 on Darwin, <br>    a. whereas function parameters (such as shutdown() ) expect Int32 in both cases<br>6.  The issues with POLLIN etc. I have documented in some detail on SR-178<br></p><p>Please let me know if I can provide more information.<br></p><p><br>&gt; On Feb 16, 2016, at 2:42 AM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Tue, Feb 16, 2016 at 12:36 AM, Drew Crawford &lt;drew at sealedabstract.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Feb 16, 2016, at 2:06 AM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Could you give some examples?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Here are some that I #ifdefed on Linux just today:<br>&gt; <br>&gt; Thank you for the list!<br>&gt; <br>&gt; Unfortunately, it is not clear what is wrong about the import of these<br>&gt; APIs.  Could you elaborate?<br>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt;&gt; <br>&gt;&gt; SOCK_STREAM<br>&gt;&gt; IPPROTO_TCP<br>&gt;&gt; timeval.  This is a tricky case, as there are actually 2 types on Darwin<br>&gt;&gt; (timeval / timeval64), that map to 1 (as far as I know) on Linux.<br>&gt;&gt; timeval[64] members, which are in some platforms Int64, in some platforms<br>&gt;&gt; __darwin_xx and in other platforms Int<br>&gt;&gt; SHUT_RDWR<br>&gt;&gt; POLLIN etc. is wrong IMO even on Darwin.  I opened SR-178 for this (and<br>&gt;&gt; previously I filed a radar), but since that bug has sat for 2 months (and<br>&gt;&gt; the radar for longer) without any comment it motivated me to investigate the<br>&gt;&gt; DIY approach to these simple &quot;importer bugs&quot;, as perhaps the core team is<br>&gt;&gt; too busy.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Obviously I don&#39;t expect 100% portability (these are different OSes<br>&gt;&gt; afterall), but there are several cases where the type differences feel more<br>&gt;&gt; by accident than by design.<br>&gt;&gt; <br>&gt;&gt; I will probably have a new list in a few days if interested, as I am still<br>&gt;&gt; battling Linux-specific compile errors :-)<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>importer questions</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>February 16, 2016 at 01:00:00am</p></header><div class="content"><p>On Tue, Feb 16, 2016 at 1:04 AM, Drew Crawford &lt;drew at sealedabstract.com&gt; wrote:<br>&gt; Sorry, I wasn&#39;t sure how detailed to be.<br>&gt;<br>&gt; BTW, I have not determined how to print the interface for e.g. Glibc, if you know how to do that, it might help gather more items.<br>&gt;<br>&gt; 1.  SOCK_STREAM is a __socket_type struct on Glibc, with an inner member rawValue : UInt32.  On Darwin it is Int32 without any wrapper struct.<br>&gt;      a.  However APIs where one would use this value (such as socket() ) take Int32 in both cases, this requires applications to do a member access + cast on Linux that is not necessary or allowed on Darwin<br></p><p>That&#39;s because __socket_type is an enum.  This issue can be easily<br>fixed with an addition to the Glibc overlay that defines these<br>constants and shadows imported ones.<br></p><p>&gt; 2.  IPPROTO_TCP is Int on Glibc, while Int32 on Darwin<br>&gt;     a.  APIs (e.g. socket() ) expect Int32 for this argument in practice<br></p><p>Again, I think overlay would fix this.<br></p><p>&gt; 3.  timeval is a royal pain.<br>&gt;      a.  Darwin defines both timeval and timeval64, but at runtime, Darwin generally expects timeval64 on 64-bit platforms and timeval on 32-bit platforms<br>&gt;     b.  Linux seems only to define timeval, although I have not tried 32-bit Linux so I cannot speak to that case<br></p><p>typealias timeval = timeval64 in the Darwin overlay?<br></p><p>&gt; 4.  timeval&#39;s members are (e.g. to construct one, you need to use)<br>&gt;     a.   Int64 if using timeval64/Darwin64,<br>&gt;     b.  __darwin_time_t and __darwin_suseconds_t if using 32-bit Darwin,<br>&gt;     c.  and Int if on Linux<br></p><p>The overlay should add a sane initializer, timeval(tv_sec: tv_usec:),<br>on both platforms.<br></p><p>&gt; 5.  SHUT_RDWR is Int on Linux and Int32 on Darwin,<br>&gt;     a. whereas function parameters (such as shutdown() ) expect Int32 in both cases<br></p><p>Another overlay fix.<br></p><p>&gt; 6.  The issues with POLLIN etc. I have documented in some detail on SR-178<br></p><p>I think this would be another overlay fix.<br></p><p>By the way, I think everywhere where you mention Int32, you actually<br>meant &#39;CInt&#39;.<br></p><p>Another approach that was considered, and sounds promising, is to<br>import more of C&#39;s constants as untyped integers, so that they would<br>infer the type from context.  Unfortunately, this feature requires<br>design and compiler work.<br></p><p>Overlay fixes, I think, don&#39;t require special skills to prepare.<br>Here&#39;s an example: https://github.com/apple/swift/pull/1096/files<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a838c63b9093a77fb88231d65effa3b3?s=50"></div><header><strong>importer questions</strong> from <string>Drew Crawford</string> &lt;drew at sealedabstract.com&gt;<p>February 16, 2016 at 03:00:00am</p></header><div class="content"><p>&gt; On Feb 16, 2016, at 3:20 AM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; <br>&gt; Overlay fixes, I think, don&#39;t require special skills to prepare.<br>&gt; Here&#39;s an example: https://github.com/apple/swift/pull/1096/files &lt;https://github.com/apple/swift/pull/1096/files&gt;<br>Sorry; I tried to ask for this at the outset, but I think I used the wrong words :-)<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160216/6e4d263f/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b9904260218b6d7942782c2b2355f2aa?s=50"></div><header><strong>importer questions</strong> from <string>William Dillon</string> &lt;william at housedillon.com&gt;<p>February 16, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; <br>&gt; Another approach that was considered, and sounds promising, is to<br>&gt; import more of C&#39;s constants as untyped integers, so that they would<br>&gt; infer the type from context.  Unfortunately, this feature requires<br>&gt; design and compiler work.<br>&gt; <br>&gt; Dmitri<br>&gt; <br></p><p>Yes, please!  That would improve my life so much.<br></p><p>- Will<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
