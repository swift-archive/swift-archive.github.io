<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3e4acc351c34224514f9d58b08389390?s=50"></div><header><strong>[Review] SE-0030 Property Behaviors</strong> from <string>Myles Schultz</string> &lt;myleslschultz at icloud.com&gt;<p>February 19, 2016 at 06:00:00pm</p></header><div class="content"><p>On Feb 19, 2016, at 12:01 AM, Curt Clifton via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br></p><p>&gt; <br>&gt;&gt; On Feb 18, 2016, at 6:56 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Based on review feedback, I&#39;ve revised the declaration syntax proposal for property behaviors to be more in line with our other declaration forms, reverting to the earlier pre-review &quot;var behavior&quot; proposal. I&#39;ve updated the proposal in swift-evolution:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0030-property-behavior-decls.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0030-property-behavior-decls.md&gt;<br>&gt; The updated behavior declaration form is largely an improvement. <br>&gt; <br>&gt; With the placeholder for binding the name of the attributed property gone from the grammar, I wonder if you’ve given any thought to how that binding might be done. I recognize that the binding is left for future work, but would hate to see my pet feature painted into a corner.<br>&gt; <br>&gt; I find the naked `initialValue` “declaration&quot; quite odd. It’s not exactly a declaration even.<br></p><p>I find the &#39;initialValue&#39; declaration a little odd as well. Also, when looking at the proposal, most of the behaviors have one of these declared. For a given property with multiple behaviors, we are holding onto duplicate data. Perhaps I&#39;m just misunderstanding the proposal?<br></p><p>&gt; What are the implications for parsing? If we’re already willing to special case`initialValue` in the parser in this context, perhaps we could introduce a binding list instead, like:<br>&gt; <br>&gt; ```<br>&gt; public var behavior lazy&lt;Value&gt;: Value {<br>&gt;   // Behaviors can bind the property&#39;s initializer expression with a<br>&gt;   // binding declaration.<br>&gt;   bind initialValue<br>&gt;   …<br>&gt; ```<br></p><p>Is this binding like a reference to the actual property? I think it would be awesome if there were a way for the behavior&#39;s &#39;value&#39; property to bind or reference the property to which the behavior is being applied. Then, there isn&#39;t any duplicate data, and the behavior is actually acting on the property. Personally, a given behavior acting on the property I have assigned it to is what I am expecting to happen. Not a behavior that works on some mysterious value that then sets the property. <br></p><p>To achieve this, could we have behaviors decide how a property is fundamentally treated instead of add functionality? Meaning a behavior such as lazy accesses the actual property value when doing its operations. At initialization of the property, lazy allows for reservation of space for the properties type, but doesn&#39;t not assign a value to it until the property gets called on. <br></p><p>In a sense we&#39;d be making a property/computed property hybrid where the computer part is defined by the user&#39;s defined behavior. <br></p><p>&gt; Besides eliminating the odd naked “declaration”, this has the added advantage that it could be extended to `bind initialValue, propertyName`. :-)<br>&gt; <br>&gt; Also, the initialValue in the “Proposed Solution” section doesn’t match the naked syntax used throughout the Examples section.<br>&gt; <br>&gt;&gt; In discussion with the core team, we&#39;ve also strongly come in favor of applying behaviors to properties using attribute syntax, e.g.:<br>&gt;&gt; <br>&gt;&gt; @lazy var x = 111<br>&gt;&gt; @delayed var x: Int<br>&gt;&gt; <br>&gt;&gt; They&#39;re definitely attribute-like, and we think it makes sense for behaviors to be the first of hopefully many kinds of user-defined behaviors. What do you all think of this direction?<br>&gt; <br>&gt; I think this is an excellent direction. Would we also use @ syntax for accessing property-supplied members, like `a at runcible.x &lt;mailto:a at runcible.x&gt;`?<br>&gt; <br>&gt; Cheers,<br>&gt; <br>&gt; Curt<br>&gt; -----------------------------------------------------------------------------<br>&gt; Curt Clifton, PhD<br>&gt; Software Engineer<br>&gt; The Omni Group<br>&gt; www.curtclifton.net &lt;http://www.curtclifton.net/&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160219/f87a89cb/attachment.html&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
