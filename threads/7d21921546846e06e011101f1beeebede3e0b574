<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Static Subscript</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>January 28, 2016 at 07:00:00pm</p></header><div class="content"><p>What do we think about allowing types to have static subscripts?<br>struct Foo {<br>    static subscript(bar: Bar) -&gt; FooBar {...}<br>}<br></p><p>It could be used to implement umbrella class “initializers” that return subclasses (or anything, really) without relying on Objective-C tomfoolery, since it’s just another function and can return anything you want:<br>class Int8Class    : SwiftInteger {…}<br>class Int16Class   : SwiftInteger { var x: Int16;  override init() { self.x = 0 }; init(_ x: Int16)  { self.x = x } }<br>class Int32Class   : SwiftInteger {…}<br>class IntClass     : SwiftInteger {…}<br>class BigIntClass  : SwiftInteger {…}<br>class SwiftInteger {<br>    static subscript()          -&gt; SwiftInteger {…}<br>    static subscript(x: Int8)   -&gt; SwiftInteger {…}<br>    static subscript(x: Int16)  -&gt; SwiftInteger {…}<br>    static subscript(x: Int32)  -&gt; SwiftInteger {…}<br>    static subscript(x: Int)    -&gt; SwiftInteger {<br>        switch x {<br>        case Int( Int8.min)...Int( Int8.max): return Int8Class(Int8(x))<br>        case Int(Int16.min)...Int(Int16.max): return Int16Class(Int16(x))<br>        case Int(Int32.min)...Int(Int32.max): return Int32Class(Int32(x))<br>        default:                              return IntClass(x)<br>        }<br>    }<br>}<br>let foo = SwiftInteger[256] //foo is a Int16Class<br></p><p>Or for creating “functions” that have properties:<br>struct add {<br>    static let name: String = &quot;add&quot;<br>    static var logging = false<br>    static private (set) var callCount = 0<br>    static subscript(arg1: Int, arg2: Int) -&gt; Int {<br>        defer {<br>            if add.logging == true {<br>                print(&quot;callcount = \(add.callCount): \(add.name)(\(arg1), \(arg2)) -&gt; \(ret)&quot;)<br>            }<br>        }<br>        add.callCount += 1<br>        let ret = arg1 + arg2<br>        return ret<br>    }<br>}<br>let nine = add[4, 5]<br>add.logging = true<br>let ten = add[4, 6]     // prints “call count = 2: add(4, 6) -&gt; 10&quot;<br></p><p>Thoughts?<br></p><p>- Dave Sweeris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160128/7d21b574/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>Static Subscript</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>January 28, 2016 at 10:00:00pm</p></header><div class="content"><p>I don&#39;t like that the subscript essentially becomes a second call syntax. Can we solve these problems in a different way?<br></p><p>Félix<br></p><p>&gt; Le 28 janv. 2016 à 22:20:01, Dave via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; What do we think about allowing types to have static subscripts?<br>&gt; struct Foo {<br>&gt;     static subscript(bar: Bar) -&gt; FooBar {...}<br>&gt; }<br>&gt; <br>&gt; It could be used to implement umbrella class “initializers” that return subclasses (or anything, really) without relying on Objective-C tomfoolery, since it’s just another function and can return anything you want:<br>&gt; class Int8Class    : SwiftInteger {…}<br>&gt; class Int16Class   : SwiftInteger { var x: Int16;  override init() { self.x = 0 }; init(_ x: Int16)  { self.x = x } }<br>&gt; class Int32Class   : SwiftInteger {…}<br>&gt; class IntClass     : SwiftInteger {…}<br>&gt; class BigIntClass  : SwiftInteger {…}<br>&gt; class SwiftInteger {<br>&gt;     static subscript()          -&gt; SwiftInteger {…}<br>&gt;     static subscript(x: Int8)   -&gt; SwiftInteger {…}<br>&gt;     static subscript(x: Int16)  -&gt; SwiftInteger {…}<br>&gt;     static subscript(x: Int32)  -&gt; SwiftInteger {…}<br>&gt;     static subscript(x: Int)    -&gt; SwiftInteger {<br>&gt;         switch x {<br>&gt;         case Int( Int8.min)...Int( Int8.max): return Int8Class(Int8(x))<br>&gt;         case Int(Int16.min)...Int(Int16.max): return Int16Class(Int16(x))<br>&gt;         case Int(Int32.min)...Int(Int32.max): return Int32Class(Int32(x))<br>&gt;         default:                              return IntClass(x)<br>&gt;         }<br>&gt;     }<br>&gt; }<br>&gt; let foo = SwiftInteger[256] //foo is a Int16Class<br>&gt; <br>&gt; Or for creating “functions” that have properties:<br>&gt; struct add {<br>&gt;     static let name: String = &quot;add&quot;<br>&gt;     static var logging = false<br>&gt;     static private (set) var callCount = 0<br>&gt;     static subscript(arg1: Int, arg2: Int) -&gt; Int {<br>&gt;         defer {<br>&gt;             if add.logging == true {<br>&gt;                 print(&quot;callcount = \(add.callCount): \(add.name)(\(arg1), \(arg2)) -&gt; \(ret)&quot;)<br>&gt;             }<br>&gt;         }<br>&gt;         add.callCount += 1<br>&gt;         let ret = arg1 + arg2<br>&gt;         return ret<br>&gt;     }<br>&gt; }<br>&gt; let nine = add[4, 5]<br>&gt; add.logging = true<br>&gt; let ten = add[4, 6]     // prints “call count = 2: add(4, 6) -&gt; 10&quot;<br>&gt; <br>&gt; Thoughts?<br>&gt; <br>&gt; - Dave Sweeris<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160128/74f619c9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Static Subscript</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>January 28, 2016 at 09:00:00pm</p></header><div class="content"><p>I don&#39;t like it either, as the &quot;official&quot; way to get that functionality, but that&#39;s not what I was suggesting. Those were just a couple off-top-of-my-head examples of what could be done if we had them.<br></p><p>They could also be used to facilitate &quot;static sequences&quot;:<br>protocol StaticSequenceType {<br>// whatever&#39;s in SequenceType, but with &quot;static&quot; in front of everything<br>}<br>And then with a minor change to the &quot;for-in&quot; mechanism, this would become valid:<br>for foo in SomeType {<br>// do stuff<br>}<br></p><p>(Come to think of it, seems like that could help with the proposal to be able to iterate over all cases of an enum, since it&#39;d probably decrease the chances of a naming collision between pre-existing properties and the automatically created code.)<br></p><p>Anyway, unless I&#39;m misunderstanding your objection, aside from &quot;letting people do something in an unaesthetic way&quot;, I can&#39;t really think of a downside.<br></p><p>Does anyone know why they&#39;re currently disallowed?<br></p><p>- Dave Sweeris<br></p><p>&gt; On Jan 28, 2016, at 19:36, Félix Cloutier &lt;felixcca at yahoo.ca&gt; wrote:<br>&gt; <br>&gt; I don&#39;t like that the subscript essentially becomes a second call syntax. Can we solve these problems in a different way?<br>&gt; <br>&gt; Félix<br>&gt; <br>&gt;&gt; Le 28 janv. 2016 à 22:20:01, Dave via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; What do we think about allowing types to have static subscripts?<br>&gt;&gt; struct Foo {<br>&gt;&gt;     static subscript(bar: Bar) -&gt; FooBar {...}<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; It could be used to implement umbrella class “initializers” that return subclasses (or anything, really) without relying on Objective-C tomfoolery, since it’s just another function and can return anything you want:<br>&gt;&gt; class Int8Class    : SwiftInteger {…}<br>&gt;&gt; class Int16Class   : SwiftInteger { var x: Int16;  override init() { self.x = 0 }; init(_ x: Int16)  { self.x = x } }<br>&gt;&gt; class Int32Class   : SwiftInteger {…}<br>&gt;&gt; class IntClass     : SwiftInteger {…}<br>&gt;&gt; class BigIntClass  : SwiftInteger {…}<br>&gt;&gt; class SwiftInteger {<br>&gt;&gt;     static subscript()          -&gt; SwiftInteger {…}<br>&gt;&gt;     static subscript(x: Int8)   -&gt; SwiftInteger {…}<br>&gt;&gt;     static subscript(x: Int16)  -&gt; SwiftInteger {…}<br>&gt;&gt;     static subscript(x: Int32)  -&gt; SwiftInteger {…}<br>&gt;&gt;     static subscript(x: Int)    -&gt; SwiftInteger {<br>&gt;&gt;         switch x {<br>&gt;&gt;         case Int( Int8.min)...Int( Int8.max): return Int8Class(Int8(x))<br>&gt;&gt;         case Int(Int16.min)...Int(Int16.max): return Int16Class(Int16(x))<br>&gt;&gt;         case Int(Int32.min)...Int(Int32.max): return Int32Class(Int32(x))<br>&gt;&gt;         default:                              return IntClass(x)<br>&gt;&gt;         }<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; let foo = SwiftInteger[256] //foo is a Int16Class<br>&gt;&gt; <br>&gt;&gt; Or for creating “functions” that have properties:<br>&gt;&gt; struct add {<br>&gt;&gt;     static let name: String = &quot;add&quot;<br>&gt;&gt;     static var logging = false<br>&gt;&gt;     static private (set) var callCount = 0<br>&gt;&gt;     static subscript(arg1: Int, arg2: Int) -&gt; Int {<br>&gt;&gt;         defer {<br>&gt;&gt;             if add.logging == true {<br>&gt;&gt;                 print(&quot;callcount = \(add.callCount): \(add.name)(\(arg1), \(arg2)) -&gt; \(ret)&quot;)<br>&gt;&gt;             }<br>&gt;&gt;         }<br>&gt;&gt;         add.callCount += 1<br>&gt;&gt;         let ret = arg1 + arg2<br>&gt;&gt;         return ret<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; let nine = add[4, 5]<br>&gt;&gt; add.logging = true<br>&gt;&gt; let ten = add[4, 6]     // prints “call count = 2: add(4, 6) -&gt; 10&quot;<br>&gt;&gt; <br>&gt;&gt; Thoughts?<br>&gt;&gt; <br>&gt;&gt; - Dave Sweeris<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160128/b70ae3ed/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
