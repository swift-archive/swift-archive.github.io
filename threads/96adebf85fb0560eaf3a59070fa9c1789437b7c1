<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e841a2a33b72c728c55ff99200275784?s=50"></div><header><strong>[Review] SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type</strong> from <string>James Froggatt</string> &lt;james.froggatt at me.com&gt;<p>June 22, 2016 at 08:00:00pm</p></header><div class="content"><p>I support this proposal for similar reasons.<br></p><p>&gt; covariance of using such a non-returning function as an argument<br></p><p>This is the key feature of this proposal.<br></p><p>In the earlier discussion, someone gave an example of a Runnable protocol, having one function which returns an associated type, and a second which takes that type as a parameter. By having the first return Never, the second function cannot be called, just as the first function cannot return.<br></p><p>As this currently are, @noreturn functions could already return an unconstructable Never type, but instead return the empty tuple (AKA Void or Unit). This proposal just enforces this safety measure by promoting it to a language feature, making the language safer and more powerful as a result.<br></p><p>The arguments that ‘-&gt; Never’ could look like just another return type are valid, but I think we have a false dichotomy here. This proposal suggests that the compiler can detect unconstructable types, and infer when functions return (or can be called) from that. Once we have that power, it&#39;s a relatively simple matter to enforce a keyword in these situations (like @noreturn), while still having all the safety to be gained from this proposal.<br></p><p>I can see programmers from other languages with a void keyword arguing things like ‘it&#39;s not a real type’, ‘it looks like a return value’ about Swift&#39;s ‘Void’, yet Swift nevertheless models Void as a type, and has much more powerful function types as a result. This proposal seems very much in the same nature.<br></p><p>------------ Begin Message ------------ <br>Group: gmane.comp.lang.swift.evolution <br>MsgID: &lt;48A7178C-FA85-409D-B6C3-5EF18CDFAB37 at alkaline-solutions.com&gt; <br></p><p>&gt;https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md<br>&gt;<br>&gt;* What is your evaluation of the proposal?<br></p><p>In terms of raw syntax, I like the idea of using an uninhabited types to indicate non-returning behavior.<br></p><p>I haven’t used a language with a ‘bottom’ type functionality, so I can’t evaluate that as an alternative.<br></p><p>I actually like the name ‘Never’ more than ‘NoReturn’, but thats mostly bike shedding. The one non-bikeshedding bit backing up the use of Never over NoReturn is that there is nothing in the language which prevents use of NoReturn in other contexts,e.g.:<br></p><p>func foo(_ n:NoReturn) {}  // Compiles but is not callable<br>var a:Optional&lt;NoReturn&gt; = nil // works, but can never be .Some(x)<br></p><p>The one catch I see here is that even documentation tools will need to understand uninhabited types in order to represent behavior to a developer, but I believe there is already a strong push away from tools built on technologies which wouldn’t have access to that information (such as using regular expressions)<br></p><p>&gt;* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>I think so - it eliminates what would need to be special rules around function declaration with @noescape, plus may allow for future subtype behaviors.<br></p><p>&gt;* Does this proposal fit well with the feel and direction of Swift?<br></p><p>I think so<br></p><p>&gt;* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I haven’t used languages with bottom types before or with non-returning behavior indicated by use of certain types - I’ve only languages that annotate non-returning functions at the compiler level. However, it seems like a good way of eliminating redundant or possibly conflicting behavior as well as special rules, such as declaration of a @noreturn fatal(_ message:String)-&gt;Int, and covariance of using such a non-returning function as an argument<br></p><p>&gt;* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick reading of proposal, intermittent tracking of the discussion beforehand.<br></p><p>-DW<br></p><p><br></p><p>------------- End Message ------------- <br></p><p><br></p><p>From James F<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
