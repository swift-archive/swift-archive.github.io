<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Analysis of case conventions for initialisms</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 11, 2016 at 09:00:00pm</p></header><div class="content"><p>I just posted a write-up about various case conventions for initialisms:<br>https://gist.github.com/dabrahams/55fc5ece355da4664730.  I was surprised<br>at how it turned out, FWIW.<br></p><p>Cheers,<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/34b9659227ea084bb09a8ba4a450a162?s=50"></div><header><strong>Analysis of case conventions for initialisms</strong> from <string>Jessy Catterwaul</string> &lt;mr.jessy at gmail.com&gt;<p>February 12, 2016 at 01:00:00am</p></header><div class="content"><p>It is too complicated to have different rules when an initialism is used,<br>or not.<br></p><p>uniformResourceLocatorForPublication<br>uRLForPublication<br></p><p>Sent from my iPad<br></p><p>On Feb 12, 2016, at 12:51 AM, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p><br>I just posted a write-up about various case conventions for initialisms:<br>https://gist.github.com/dabrahams/55fc5ece355da4664730.  I was surprised<br>at how it turned out, FWIW.<br></p><p>Cheers,<br></p><p>-- <br>-Dave<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br>On Friday, February 12, 2016, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; I just posted a write-up about various case conventions for initialisms:<br>&gt; https://gist.github.com/dabrahams/55fc5ece355da4664730.  I was surprised<br>&gt; at how it turned out, FWIW.<br>&gt;<br>&gt; Cheers,<br>&gt;<br>&gt; --<br>&gt; -Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;javascript:;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160212/391f08e4/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Analysis of case conventions for initialisms</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>February 11, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; I just posted a write-up about various case conventions for initialisms:<br>&gt; https://gist.github.com/dabrahams/55fc5ece355da4664730.  I was surprised<br>&gt; at how it turned out, FWIW.<br></p><p>This is perhaps not a practical answer, but honestly, I&#39;m having trouble thinking of a case where a variable name that&#39;s an initialism is a *good* name. Initialisms often make sense as types—HTML, URL, UUID, etc. But as variable names, they tend to be overly vague. For instance, in the example you give:<br></p><p>	func saveToURL(<br>	  _ url: NSURL,<br>	  forSaveOperation saveOperation: UIDocumentSaveOperation,<br>	  completionHandler completionHandler: ((Bool) -&gt; Void)?)<br></p><p>`url` is not really a very descriptive name for the parameter; it would probably be better as `destinationURL` or `fileURL` or `documentURL`. You might even want to drop the `URL` from the end of those, making `destination`, `file`, or `document`. The name `url` is about as descriptive as `block` would be for the last parameter.<br></p><p>(That&#39;s not to say I haven&#39;t done this; I certainly have. But I&#39;m thinking that maybe the code where I did it wasn&#39;t as good as it could have been.)<br></p><p>So I wonder if we shouldn&#39;t instead guide that initialisms should not appear at the beginning of variable names. You should name your variables (and properties) for their semantic, not their type.<br></p><p>If initialisms don&#39;t appear at the beginning of variable names, then you can distinguish between types and variables by capitalization. That leaves only the word boundary issues, which I think we can live with.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc045f9bdc3bd1885767f2a2ba8af458?s=50"></div><header><strong>Analysis of case conventions for initialisms</strong> from <string>Jonathan Tang</string> &lt;jonathan.d.tang at gmail.com&gt;<p>February 11, 2016 at 11:00:00pm</p></header><div class="content"><p>+1 for #2, which is also what Java and Google code conventions do.  It<br>looks awkward at first, but being able to distinguish word boundaries is<br>surprisingly important.  Tech is rife with initialisms; you could<br>realistically have a class or constant like AWSS3RPCURL where every single<br>letter is part of an initialism.<br></p><p>On Thu, Feb 11, 2016 at 10:52 PM, Brent Royal-Gordon via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; &gt; I just posted a write-up about various case conventions for initialisms:<br>&gt; &gt; https://gist.github.com/dabrahams/55fc5ece355da4664730.  I was surprised<br>&gt; &gt; at how it turned out, FWIW.<br>&gt;<br>&gt; This is perhaps not a practical answer, but honestly, I&#39;m having trouble<br>&gt; thinking of a case where a variable name that&#39;s an initialism is a *good*<br>&gt; name. Initialisms often make sense as types—HTML, URL, UUID, etc. But as<br>&gt; variable names, they tend to be overly vague. For instance, in the example<br>&gt; you give:<br>&gt;<br>&gt;         func saveToURL(<br>&gt;           _ url: NSURL,<br>&gt;           forSaveOperation saveOperation: UIDocumentSaveOperation,<br>&gt;           completionHandler completionHandler: ((Bool) -&gt; Void)?)<br>&gt;<br>&gt; `url` is not really a very descriptive name for the parameter; it would<br>&gt; probably be better as `destinationURL` or `fileURL` or `documentURL`. You<br>&gt; might even want to drop the `URL` from the end of those, making<br>&gt; `destination`, `file`, or `document`. The name `url` is about as<br>&gt; descriptive as `block` would be for the last parameter.<br>&gt;<br>&gt; (That&#39;s not to say I haven&#39;t done this; I certainly have. But I&#39;m thinking<br>&gt; that maybe the code where I did it wasn&#39;t as good as it could have been.)<br>&gt;<br>&gt; So I wonder if we shouldn&#39;t instead guide that initialisms should not<br>&gt; appear at the beginning of variable names. You should name your variables<br>&gt; (and properties) for their semantic, not their type.<br>&gt;<br>&gt; If initialisms don&#39;t appear at the beginning of variable names, then you<br>&gt; can distinguish between types and variables by capitalization. That leaves<br>&gt; only the word boundary issues, which I think we can live with.<br>&gt;<br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/21af276e/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>Analysis of case conventions for initialisms</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>February 12, 2016 at 06:00:00pm</p></header><div class="content"><p>+1 #2<br></p><p>  -- Howard.<br></p><p>On 12 February 2016 at 16:51, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; I just posted a write-up about various case conventions for initialisms:<br>&gt; https://gist.github.com/dabrahams/55fc5ece355da4664730.  I was surprised<br>&gt; at how it turned out, FWIW.<br>&gt;<br>&gt; Cheers,<br>&gt;<br>&gt; --<br>&gt; -Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160212/89a71bd2/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5a72880ffed1a30cb9b8e3f372507145?s=50"></div><header><strong>Analysis of case conventions for initialisms</strong> from <string>Rob Mayoff</string> &lt;mayoff at dqd.com&gt;<p>February 12, 2016 at 02:00:00am</p></header><div class="content"><p>I have been using #2 for years in many languages (including Objective-C and<br>more recently Swift) and much prefer it.<br></p><p>Incidentally, &quot;ASCII&quot; is one of the examples in the definition of &quot;acronym&quot;<br>in OS X&#39;s American English dictionary.<br></p><p>On Thu, Feb 11, 2016 at 11:51 PM, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I just posted a write-up about various case conventions for initialisms:<br>&gt; https://gist.github.com/dabrahams/55fc5ece355da4664730.  I was surprised<br>&gt; at how it turned out, FWIW.<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160212/97b1f025/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d1bff9080a4237cc9b79c5751afb6f7?s=50"></div><header><strong>Analysis of case conventions for initialisms</strong> from <string>Jarod Long</string> &lt;swift at lng.la&gt;<p>February 12, 2016 at 12:00:00am</p></header><div class="content"><p>+1 for 2. I&#39;ve used all three of these conventions at different times, and I&#39;ve had noticeably less friction with option 2.<br></p><p>Jarod<br></p><p>&gt; On Feb 11, 2016, at 21:51, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; I just posted a write-up about various case conventions for initialisms:<br>&gt; https://gist.github.com/dabrahams/55fc5ece355da4664730.  I was surprised<br>&gt; at how it turned out, FWIW.<br>&gt; <br>&gt; Cheers,<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/df65d69ec35e73390ddd0e6a2c335737?s=50"></div><header><strong>Analysis of case conventions for initialisms</strong> from <string>James Hillhouse IV</string> &lt;jimhillhouse at me.com&gt;<p>February 12, 2016 at 03:00:00am</p></header><div class="content"><p>+1 for #2. I like 2&#39;s clearer word boundaries and continuation of Swift&#39;s name type convention.<br></p><p>Jim<br></p><p>&gt; On Feb 11, 2016, at 21:51, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; I just posted a write-up about various case conventions for initialisms:<br>&gt; https://gist.github.com/dabrahams/55fc5ece355da4664730.  I was surprised<br>&gt; at how it turned out, FWIW.<br>&gt; <br>&gt; Cheers,<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d118cdf2fe31053bc7032466c4da282?s=50"></div><header><strong>Analysis of case conventions for initialisms</strong> from <string>Craig Cruden</string> &lt;ccruden at novafore.com&gt;<p>February 12, 2016 at 04:00:00pm</p></header><div class="content"><p>Another +1 for #2<br></p><p>&gt; On 2016-02-12, at 16:41:47, Jim Hillhouse via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1 for #2. I like 2&#39;s clearer word boundaries and continuation of Swift&#39;s name type convention.<br>&gt; <br>&gt; Jim<br>&gt; <br>&gt;&gt; On Feb 11, 2016, at 21:51, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I just posted a write-up about various case conventions for initialisms:<br>&gt;&gt; https://gist.github.com/dabrahams/55fc5ece355da4664730.  I was surprised<br>&gt;&gt; at how it turned out, FWIW.<br>&gt;&gt; <br>&gt;&gt; Cheers,<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; -Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f1b93037cbc5f78f16450bd925ce3b5b?s=50"></div><header><strong>Analysis of case conventions for initialisms</strong> from <string>Marco Masser</string> &lt;lists at duckcode.com&gt;<p>February 12, 2016 at 11:00:00am</p></header><div class="content"><p>Strong dislike for #2. I understand and accept the benefits, but I just don’t like how that looks.<br></p><p>I also don’t use #1 or #3. Instead, initialisms in my code are always all uppercase, no exceptions.<br></p><p>For type names, I can’t remember a case in my code where that could not be avoided or was too bad to read.<br>For local variables, methods, and functions, I try to find a name that puts the initialism at the end of the name, e.g. let publicationURL = document.URLForPublication<br></p><p>In my experience, my guidelines don’t always work. Just like everyone else’s.<br></p><p><br>&gt; On 2016-02-12, at 06:51, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; I just posted a write-up about various case conventions for initialisms:<br>&gt; https://gist.github.com/dabrahams/55fc5ece355da4664730.  I was surprised<br>&gt; at how it turned out, FWIW.<br>&gt; <br>&gt; Cheers,<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Analysis of case conventions for initialisms</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>February 12, 2016 at 03:00:00am</p></header><div class="content"><p>(Warning: I&#39;m going to use &quot;acronym&quot; loosely. Sorry.)<br></p><p>&gt; Strong dislike for #2. I understand and accept the benefits, but I just don’t like how that looks.<br></p><p>Me too. I look at the examples and I&#39;m frankly just revolted. It&#39;s a visceral reaction, something I have trouble analyzing because it&#39;s so violent. Whatever the practical benefits, it reads like a deliberate abuse of the language, like someone choosing expedience over good style, lyk sum1 doin dis bcuz its so hard 2 pres da btns.<br></p><p>But emotional reactions are hard to convey convincingly in text, so I&#39;ll try to distill some of it into logical argument.<br></p><p>Some acronym-using terms, like &quot;XML document&quot;, are easy to turn into identifiers; others, like &quot;AWS S3 RPC URL&quot;*, are difficult. Option #2 handles this problem by making all acronyms equally ugly and unreadable. I don&#39;t think that&#39;s an improvement.<br></p><p>I especially think it&#39;s not an improvement because the resulting identifiers are so hard to read. It&#39;s true that `AwsS3RpcUrl` is technically *parseable* since the word boundaries are demarcated (well, except for that pesky `3`), but is it actually *readable* when you set eyes on it? It&#39;s not for me. My brain, being used to English, tries to read those uppercase-lowercase combinations as actual words with actual pronunciations and it just sees gibberish. Maybe that would get better with time, but this is something that every new Swift developer would go through. Capitalizing acronyms may be ambiguous sometimes, but it at least ensures that you never misread an acronym as a word.<br></p><p>And for those pathological cases where we think there&#39;s too much ambiguity, we *do* have another option: `AWS_S3_RPC_URL`. Swift style disfavors underscores, but it disfavors lack of clarity even more. To me, `AWS_S3_RPC_URL` is *far* clearer than either `AWSS3RPCURL` *or* `AwsS3RpcUrl`.<br></p><p>Incidentally, how common *are* concatenated acronyms or other forms of acronym-related ambiguity? And when it does happen in existing Objective-C APIs, can we actually detect it and do the right thing, or are imported APIs going to have spellings like `Awss3Rpcurl` that are not merely ambiguous, but actively misleading?<br></p><p>The way I see it, at some point any convention is going to break down. All we can do is decide which cases we care about more. Do we want to optimize for the `XMLDocument`s of the world or the `AwsS3RpcUrl`s?<br></p><p>Bottom line for me: If #2 was the convention, I&#39;m about 90% certain I would simply flat out ignore it when I named things, and cringe when I had to use someone else&#39;s names. I don&#39;t think we should adopt a naming convention that makes users cringe.<br></p><p><br></p><p>(* I use the extreme &quot;AWS S3 RPC URL&quot; example here because the examples originally cited don&#39;t much worry me. I have no trouble reading `XMLRPC` as a single six-letter acronym and mapping it to the XML-RPC technology, the &quot;ack&quot; in `LAPBACK` is an abbreviation and ought to be mixed-case, and `XSLTiBook` is self-inflicted—it&#39;s not ambiguous unless you insist on violating your own API guidelines to preserve your own nonstandard capitalization.)<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>Analysis of case conventions for initialisms</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>February 12, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On 12 Feb 2016, at 11:42, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; (Warning: I&#39;m going to use &quot;acronym&quot; loosely. Sorry.)<br>&gt; <br>&gt;&gt; Strong dislike for #2. I understand and accept the benefits, but I just don’t like how that looks.<br>&gt; <br>&gt; Me too. I look at the examples and I&#39;m frankly just revolted. It&#39;s a visceral reaction, something I have trouble analyzing because it&#39;s so violent. Whatever the practical benefits, it reads like a deliberate abuse of the language, like someone choosing expedience over good style, lyk sum1 doin dis bcuz its so hard 2 pres da btns.<br>&gt; <br>&gt; But emotional reactions are hard to convey convincingly in text, so I&#39;ll try to distill some of it into logical argument.<br>&gt; <br>&gt; Some acronym-using terms, like &quot;XML document&quot;, are easy to turn into identifiers; others, like &quot;AWS S3 RPC URL&quot;*, are difficult. Option #2 handles this problem by making all acronyms equally ugly and unreadable. I don&#39;t think that&#39;s an improvement.<br>&gt; <br>&gt; I especially think it&#39;s not an improvement because the resulting identifiers are so hard to read. It&#39;s true that `AwsS3RpcUrl` is technically *parseable* since the word boundaries are demarcated (well, except for that pesky `3`), but is it actually *readable* when you set eyes on it? It&#39;s not for me. My brain, being used to English, tries to read those uppercase-lowercase combinations as actual words with actual pronunciations and it just sees gibberish. Maybe that would get better with time, but this is something that every new Swift developer would go through. Capitalizing acronyms may be ambiguous sometimes, but it at least ensures that you never misread an acronym as a word.<br>&gt; <br>&gt; And for those pathological cases where we think there&#39;s too much ambiguity, we *do* have another option: `AWS_S3_RPC_URL`. Swift style disfavors underscores, but it disfavors lack of clarity even more. To me, `AWS_S3_RPC_URL` is *far* clearer than either `AWSS3RPCURL` *or* `AwsS3RpcUrl`.<br>&gt; <br>&gt; Incidentally, how common *are* concatenated acronyms or other forms of acronym-related ambiguity? And when it does happen in existing Objective-C APIs, can we actually detect it and do the right thing, or are imported APIs going to have spellings like `Awss3Rpcurl` that are not merely ambiguous, but actively misleading?<br>&gt; <br>&gt; The way I see it, at some point any convention is going to break down. All we can do is decide which cases we care about more. Do we want to optimize for the `XMLDocument`s of the world or the `AwsS3RpcUrl`s?<br>&gt; <br>&gt; Bottom line for me: If #2 was the convention, I&#39;m about 90% certain I would simply flat out ignore it when I named things, and cringe when I had to use someone else&#39;s names. I don&#39;t think we should adopt a naming convention that makes users cringe.<br>&gt; <br>&gt; <br>&gt; <br>&gt; (* I use the extreme &quot;AWS S3 RPC URL&quot; example here because the examples originally cited don&#39;t much worry me. I have no trouble reading `XMLRPC` as a single six-letter acronym and mapping it to the XML-RPC technology, the &quot;ack&quot; in `LAPBACK` is an abbreviation and ought to be mixed-case, and `XSLTiBook` is self-inflicted—it&#39;s not ambiguous unless you insist on violating your own API guidelines to preserve your own nonstandard capitalization.)<br></p><p>I think it’s important to remember that at some point acronyms are simply the enemy and that before using one in any name you should think about whether you need it. For example, in HTMLDocument it makes some sense as HTML is significantly shorter and very widely understood; you could use say, HypertextDocument since it’s not *much* longer, but it’d then actually be less specific.<br></p><p>AWS S3 RPC URL is a pretty extreme example, good for highlighting the problems certainly, but right off I’d say that you don’t need either AWS or RPC; the protocol is often just referred to as S3, and the RPC I believe is redundant as I’m pretty sure the S3 API isn’t used any other way. The AWS is definitely redundant if you specify URL, as URL implies the ability to specify any S3 compatible host.<br></p><p>So if you boil it down it could be simplified to S3URL, which isn’t pretty, but isn’t that bad any either, or you could switch for something like S3Address, and use url as a parameter name to clarify that that’s how you’re describing the address.<br></p><p>I know you want to use it as the extreme example that the standard will need to be able to handle, but I think that the first rule of acronyms should be that if you have more than one in a name then you’re doing it wrong. Even having a single acronym in a name should require you to stop and think whether you really need it, as in many cases you may not, or it may make more sense to move it into a parameter name.<br></p><p>It’s definitely a tricky one to put into a formal specification though, as it can be very subjective, and there will always be edge cases where something doesn’t quite work, but I’m not sure we should worry too much about multiple conjoined acronyms, as they should be shunned for the evil monstrosities that they are =D<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>Analysis of case conventions for initialisms</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>February 12, 2016 at 08:00:00am</p></header><div class="content"><p>Just to make things more complex, I’d like to point out I’ve used yet another style myself in the past, #2 with elements of #1 which I’ll refer to as #4 for the purposes of this mail. (2 &lt;&lt; 1). Note that I have bad grammar, thus I may mess up initialism vs acronym vs abbreviation. Feel free to correct me.<br></p><p>If you are using two letter acronyms, leave the entire initialism consistently capitalized (#1 behavior). E.g. <br></p><p>	func tee(ioInput: IOOutputStream) -&gt; (IOOutputStream, IOOutputStream)<br></p><p>If you are using three or more letter initialism, treat them as words for capitalization. (#2 behavior) E.g.<br></p><p>	func htmlDigest(for html: String) -&gt; HtmlDigest<br></p><p>Visually, I find if an abbreviation is two characters long, mixed case interferes with my ability to read it. Although the overloading is a bit coincidental in this case, the system is not about Io the moon, but IO the Input/Output concept.<br></p><p>Two letter abbreviations are short enough that at least I can easily backtrack to say “they are not talking about some IOO concept”. The more capital letters put in a sequence, the more you lose the ability to disambiguate.<br></p><p>I’ve also found that it is very hard to turn a two letter initialism into an acronym. In general, the pronounceable two letter abbreviations are too short to be unambiguous when written, thus being poor choices for naming in general. However, if we expect people to write code on mobile phones going forward, then this may change (we may be in trouble in general).<br></p><p>You also have few enough two letter initialisms that this does not in practice run into the problems where the name of the thing is described by multiple concatenated abbreviations, such as an HTML DOM. Such cases of multiple two-letter abbreviations are rare enough that there does not need to be consistency rules for them IMHO (or shall I say, Imho)<br></p><p>I’ve found in practice that three letter initialisms have pros and cons to being treated by each set of rule - but there are enough TLA initialisms (TlaInitialism) that concatenation is more likely are likely - and it is better to just treat the few two-letter initialisms as special cases, and have everything else play by rule #2.<br></p><p>Finally, this has an interesting side benefit when you consider most objective C packages have an initialism, abbreviation or mnemonic of the module as a two-character prefix (even third parties often prefer this over the recommended three-character prefix). Assuming that is preserved on import of non-Foundation libraries, this will make such code look far more consistent.<br></p><p>-DW<br></p><p>&gt; On Feb 11, 2016, at 10:51 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; I just posted a write-up about various case conventions for initialisms:<br>&gt; https://gist.github.com/dabrahams/55fc5ece355da4664730.  I was surprised<br>&gt; at how it turned out, FWIW.<br>&gt; <br>&gt; Cheers,<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: smime.p7s<br>Type: application/pkcs7-signature<br>Size: 4139 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160212/708f5689/attachment.p7s&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>Analysis of case conventions for initialisms</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>February 12, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Feb 12, 2016, at 8:16 AM, David Waite &lt;david at alkaline-solutions.com&gt; wrote:<br>&gt; <br>&gt; 	func tee(ioInput: IOOutputStream) -&gt; (IOOutputStream, IOOutputStream)<br></p><p>Just realized that in trying to clarify the tee function I added a redundant Output to the type names. I should not use abbreviations before having coffee.<br></p><p>-DW<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Analysis of case conventions for initialisms</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>February 12, 2016 at 11:00:00am</p></header><div class="content"><p>(re: https://gist.github.com/dabrahams/55fc5ece355da4664730)<br></p><p>I am very strongly in favor of convention #1, and it comes from what we were talking about offline yesterday. This is what I do pretty much automatically when coding:<br></p><p>Word	Lowercase	&quot;Capitalized&quot;	Uppercase<br>string	string	String	STRING<br>Cupertino	cupertino	Cupertino	CUPERTINO<br>McCall	mccall	McCall	MCCALL<br>HTML	html	HTML	HTML<br>iPhone	iphone	IPhone	IPHONE<br>LaTeX &lt;https://en.wikipedia.org/wiki/LaTeX&gt;	latex	LaTeX	LATEX<br></p><p><br>(apologies to those reading this in plain text)<br></p><p>The important thing here is that the &quot;capitalize&quot; operation doesn&#39;t mess with the case of any other letters in the word. My preferred rules are then:<br></p><p>	• To form a type name, &quot;capitalize&quot; every component, then concatenate.<br>	• To form a value name, &quot;lowercase&quot; the first component, &quot;capitalize&quot; every other component, concatenate.<br></p><p>which is pretty much convention #1.<br></p><p>(My &quot;capitalize&quot; rule for coding breaks the rule for publication, in which &quot;iPhone&quot; would be the capitalized form. Without it, however, you end up with names like &quot;isUsingiPhone&quot; and &quot;DefaultiPhoneViewController&quot;, which I agree are harder to read than &quot;isUsingIPhone&quot; and &quot;DefaultIPhoneViewController&quot;.)<br></p><p>This isn&#39;t quite what Cocoa does (as noted by Dave, it prefers to not lowercase initialisms or acronyms in value names, leaving them all uppercase), but it&#39;s what I do in practice.<br></p><p>Regarding the other suggestions:<br></p><p>	• &quot;HtmlString&quot; (a type) makes me uncomfortable because there isn&#39;t a word &quot;Html&quot; or &quot;html&quot;; that is, it&#39;s not the output of any of my built-in mental operations.<br>	• &quot;hTMLString&quot; (a value) is nonsense to me; that&#39;s three words &quot;h&quot;, &quot;TML&quot;, and &quot;String&quot;.<br>	• I really don&#39;t find &quot;XmlRpcConnection&quot; easier to read than &quot;XMLRPCConnection&quot;. Easier to break up into words, yes; easier to recognize what those words are, no.<br></p><p>Jordan<br></p><p><br>&gt; On Feb 11, 2016, at 21:51, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; I just posted a write-up about various case conventions for initialisms:<br>&gt; https://gist.github.com/dabrahams/55fc5ece355da4664730.  I was surprised<br>&gt; at how it turned out, FWIW.<br>&gt; <br>&gt; Cheers,<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160212/56ec0628/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/34b9659227ea084bb09a8ba4a450a162?s=50"></div><header><strong>Analysis of case conventions for initialisms</strong> from <string>Jessy Catterwaul</string> &lt;mr.jessy at gmail.com&gt;<p>February 12, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; 	• &quot;hTMLString&quot; (a value) is nonsense to me; that&#39;s three words &quot;h&quot;, &quot;TML&quot;, and &quot;String”.<br></p><p><br>It was nonsense to me also. But I realized that we need to solve the problem of inconsistency, and forced myself to use it for a week. <br></p><p>Now, it’s not nonsense, but instead, automatic and solves all relevant casing problems.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Analysis of case conventions for initialisms</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>February 12, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Feb 12, 2016, at 11:20, Jessy Catterwaul &lt;mr.jessy at gmail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; 	• &quot;hTMLString&quot; (a value) is nonsense to me; that&#39;s three words &quot;h&quot;, &quot;TML&quot;, and &quot;String”.<br>&gt; <br>&gt; <br>&gt; It was nonsense to me also. But I realized that we need to solve the problem of inconsistency, and forced myself to use it for a week. <br>&gt; <br>&gt; Now, it’s not nonsense, but instead, automatic and solves all relevant casing problems.<br></p><p>I see this as valuing internal consistency over consistency with the rest of the world, which seems like a Bad Idea. This violates &quot;Use Terminology Well &lt;https://swift.org/documentation/api-design-guidelines/#use-terminology-well&gt;&quot; for me in the current draft API design guidelines. Identifiers are not sequences of characters; they are meant to be read.<br></p><p>Jordan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160212/9fb281b9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/44b9c3e92a40313850fdbc2cb0abdef7?s=50"></div><header><strong>Analysis of case conventions for initialisms</strong> from <string>Jon Shier</string> &lt;jon at jonshier.com&gt;<p>February 12, 2016 at 04:00:00pm</p></header><div class="content"><p>I find myself distinctly unimpressed by the “argument from other languages” presented in favor of #2. Any “rule” considered here should be able to stand on it’s own logical merits, no matter what other languages may do. <br>	#1: Interesting and acceptable. I find the type vs. variable name argument somewhat weak, since it’s almost always clear by usage what it is. However, the consistent upper or lower casing still relays the fact that a word is an acronym or initialism fairly clearly, though not as strongly as #3.<br>	#2: Unacceptable, as it completely ruins any notion of the words being an acronym or initialism. In normal writing, initialisms are easy to see, and are read by saying each letter separately. To me, this fact completely outweighs the argument for clearer word boundaries, since the letters, read separately, are the words of an acronym or initialism. So XMLRPCConnection is read as “ex em el ar pee cee connection (excuse the incorrect phonetics), and writing it as XmlRpcConnection just confuses the user at first glance about whether the words are words or a’s/i’s, especially if the a/i is somewhat uncommon.<br>	#3: This is largely my personal style, though I sometimes uppercase initialisms/acronyms used as variable names as well. This style makes usage almost entirely consistent across the language, and largely consistent with normal usage. There’s still the question of variable names, but that’s rather minor, and can be improved with better variable names, as already mentioned.<br></p><p><br></p><p>Jon Shier<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Analysis of case conventions for initialisms</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>February 12, 2016 at 01:00:00pm</p></header><div class="content"><p>Addendum: another problem with convention #2 is that the rule produces &quot;Mccall&quot;, &quot;Iphone&quot;, and &quot;Latex&quot; along with &quot;Html&quot;, all of which are less readable (for me, in context of a larger identifier like &quot;IphoneViewController&quot;) than the convention #1 output.<br></p><p>(At least, my understanding of the convention #2 rule.)<br></p><p><br>&gt; On Feb 12, 2016, at 11:12, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; (re: https://gist.github.com/dabrahams/55fc5ece355da4664730 &lt;https://gist.github.com/dabrahams/55fc5ece355da4664730&gt;)<br>&gt; <br>&gt; I am very strongly in favor of convention #1, and it comes from what we were talking about offline yesterday. This is what I do pretty much automatically when coding:<br>&gt; <br>&gt; Word	Lowercase	&quot;Capitalized&quot;	Uppercase<br>&gt; string	string	String	STRING<br>&gt; Cupertino	cupertino	Cupertino	CUPERTINO<br>&gt; McCall	mccall	McCall	MCCALL<br>&gt; HTML	html	HTML	HTML<br>&gt; iPhone	iphone	IPhone	IPHONE<br>&gt; LaTeX &lt;https://en.wikipedia.org/wiki/LaTeX&gt;	latex	LaTeX	LATEX<br>&gt; <br>&gt; <br>&gt; (apologies to those reading this in plain text)<br>&gt; <br>&gt; The important thing here is that the &quot;capitalize&quot; operation doesn&#39;t mess with the case of any other letters in the word. My preferred rules are then:<br>&gt; <br>&gt; 	• To form a type name, &quot;capitalize&quot; every component, then concatenate.<br>&gt; 	• To form a value name, &quot;lowercase&quot; the first component, &quot;capitalize&quot; every other component, concatenate.<br>&gt; <br>&gt; which is pretty much convention #1.<br>&gt; <br>&gt; (My &quot;capitalize&quot; rule for coding breaks the rule for publication, in which &quot;iPhone&quot; would be the capitalized form. Without it, however, you end up with names like &quot;isUsingiPhone&quot; and &quot;DefaultiPhoneViewController&quot;, which I agree are harder to read than &quot;isUsingIPhone&quot; and &quot;DefaultIPhoneViewController&quot;.)<br>&gt; <br>&gt; This isn&#39;t quite what Cocoa does (as noted by Dave, it prefers to not lowercase initialisms or acronyms in value names, leaving them all uppercase), but it&#39;s what I do in practice.<br>&gt; <br>&gt; Regarding the other suggestions:<br>&gt; <br>&gt; 	• &quot;HtmlString&quot; (a type) makes me uncomfortable because there isn&#39;t a word &quot;Html&quot; or &quot;html&quot;; that is, it&#39;s not the output of any of my built-in mental operations.<br>&gt; 	• &quot;hTMLString&quot; (a value) is nonsense to me; that&#39;s three words &quot;h&quot;, &quot;TML&quot;, and &quot;String&quot;.<br>&gt; 	• I really don&#39;t find &quot;XmlRpcConnection&quot; easier to read than &quot;XMLRPCConnection&quot;. Easier to break up into words, yes; easier to recognize what those words are, no.<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 11, 2016, at 21:51, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I just posted a write-up about various case conventions for initialisms:<br>&gt;&gt; https://gist.github.com/dabrahams/55fc5ece355da4664730 &lt;https://gist.github.com/dabrahams/55fc5ece355da4664730&gt;.  I was surprised<br>&gt;&gt; at how it turned out, FWIW.<br>&gt;&gt; <br>&gt;&gt; Cheers,<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; -Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160212/11d319f3/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/05e222e6ef4d84013bb3baeb0e25c90b?s=50"></div><header><strong>Analysis of case conventions for initialisms</strong> from <string>Patrick Gili</string> &lt;gili.patrick.r at gili-labs.com&gt;<p>February 13, 2016 at 05:00:00pm</p></header><div class="content"><p>+1 for #2, as I think this is most consistent with the rest of the naming conventions.<br></p><p>Cheers,<br>-Patrick<br></p><p>&gt; On Feb 12, 2016, at 12:51 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; I just posted a write-up about various case conventions for initialisms:<br>&gt; https://gist.github.com/dabrahams/55fc5ece355da4664730.  I was surprised<br>&gt; at how it turned out, FWIW.<br>&gt; <br>&gt; Cheers,<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>Analysis of case conventions for initialisms</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>February 13, 2016 at 04:00:00pm</p></header><div class="content"><p>I don’t care what the heck it is as long as someone tells me whether to use userID or userId. I’ve spent too many hours obsessing over this and I still keep going back and forth. What is ID anyway? It seems like it’s both an initialism and an acronym.<br></p><p>I think I lean towards #2 for a simple reason: the rules are the same for initialisms, acronyms, abbreviations, words, or what have you. I just want whatever guidelines are going to allow me to pick a casing and move on with my life as soon as possible. The guideline with the fewest rules is going to be the best at that.<br></p><p>Tyler<br></p><p><br>&gt; On Feb 13, 2016, at 2:10 PM, Patrick Gili via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1 for #2, as I think this is most consistent with the rest of the naming conventions.<br>&gt; <br>&gt; Cheers,<br>&gt; -Patrick<br>&gt; <br>&gt;&gt; On Feb 12, 2016, at 12:51 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I just posted a write-up about various case conventions for initialisms:<br>&gt;&gt; https://gist.github.com/dabrahams/55fc5ece355da4664730.  I was surprised<br>&gt;&gt; at how it turned out, FWIW.<br>&gt;&gt; <br>&gt;&gt; Cheers,<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; -Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
