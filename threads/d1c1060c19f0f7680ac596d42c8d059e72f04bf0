<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/46520baee6c64b0aa858ccfcec77f131?s=50"></div><header><strong>Error with SwiftGlibs building for arm-linux</strong> from <string>Iliya Trub</string> &lt;itrub at yandex.ru&gt;<p>March 24, 2016 at 11:00:00pm</p></header><div class="content"><p>Dear colleagues<br>I have faced with strange behaviour, when I compile some swift source on Ubuntu 14, target=arm-linux-gnueabi, all neccessary modules for arm present, -sysroot and <br>-isysroot are passed via -Xcc. <br></p><p>&lt;module-includes&gt;:61:10: note: in file included from &lt;module-includes&gt;:61:<br>#include &quot;/usr/include/x86_64-linux-gnu/sys/wait.h&quot;<br>         ^<br>/usr/include/x86_64-linux-gnu/sys/wait.h:148:20: error: unknown type name &#39;idtype_t&#39;<br>extern int waitid (idtype_t __idtype, __id_t __id, siginfo_t *__infop,<br>                   ^<br>&lt;unknown&gt;:0: error: could not build Objective-C module &#39;SwiftGlibc&#39;<br></p><p>Arm 32-bit pcm for SwiftShims was build successfully, but SwiftGlibc after it is not. Is it true, that compiler generates include-directive  with path, starting from &quot;/usr/include/x86_64-linux-gnu&quot;, that is on native host? What arguments I have to point out for swiftc to avoid such situation? But if that is true, and swiftc needs some headers on native host, I will looking for idtype_t definition. What do you think?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Error with SwiftGlibs building for arm-linux</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>March 24, 2016 at 01:00:00pm</p></header><div class="content"><p>On Thu, Mar 24, 2016 at 1:30 PM, Труб Илья &lt;swift-dev at swift.org&gt; wrote:<br>&gt; Dear colleagues<br>&gt; I have faced with strange behaviour, when I compile some swift source on Ubuntu 14, target=arm-linux-gnueabi, all neccessary modules for arm present, -sysroot and<br>&gt; -isysroot are passed via -Xcc.<br>&gt;<br>&gt; &lt;module-includes&gt;:61:10: note: in file included from &lt;module-includes&gt;:61:<br>&gt; #include &quot;/usr/include/x86_64-linux-gnu/sys/wait.h&quot;<br>&gt;          ^<br>&gt; /usr/include/x86_64-linux-gnu/sys/wait.h:148:20: error: unknown type name &#39;idtype_t&#39;<br>&gt; extern int waitid (idtype_t __idtype, __id_t __id, siginfo_t *__infop,<br>&gt;                    ^<br>&gt; &lt;unknown&gt;:0: error: could not build Objective-C module &#39;SwiftGlibc&#39;<br></p><p>You need a different variant of the module map for Glibc that<br>references the arm triple.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/46520baee6c64b0aa858ccfcec77f131?s=50"></div><header><strong>Error with SwiftGlibs building for arm-linux</strong> from <string>Iliya Trub</string> &lt;itrub at yandex.ru&gt;<p>March 25, 2016 at 12:00:00am</p></header><div class="content"><p>Thanks for your answer, Dmitry. I will look for examples of module maps in test sources.<br>24.03.2016, 23:56, &quot;Dmitri Gribenko&quot; &lt;gribozavr at gmail.com&gt;:<br>&gt; On Thu, Mar 24, 2016 at 1:30 PM, Труб Илья &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt;  Dear colleagues<br>&gt;&gt;  I have faced with strange behaviour, when I compile some swift source on Ubuntu 14, target=arm-linux-gnueabi, all neccessary modules for arm present, -sysroot and<br>&gt;&gt;  -isysroot are passed via -Xcc.<br>&gt;&gt;<br>&gt;&gt;  &lt;module-includes&gt;:61:10: note: in file included from &lt;module-includes&gt;:61:<br>&gt;&gt;  #include &quot;/usr/include/x86_64-linux-gnu/sys/wait.h&quot;<br>&gt;&gt;           ^<br>&gt;&gt;  /usr/include/x86_64-linux-gnu/sys/wait.h:148:20: error: unknown type name &#39;idtype_t&#39;<br>&gt;&gt;  extern int waitid (idtype_t __idtype, __id_t __id, siginfo_t *__infop,<br>&gt;&gt;                     ^<br>&gt;&gt;  &lt;unknown&gt;:0: error: could not build Objective-C module &#39;SwiftGlibc&#39;<br>&gt;<br>&gt; You need a different variant of the module map for Glibc that<br>&gt; references the arm triple.<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Error with SwiftGlibs building for arm-linux</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>March 24, 2016 at 02:00:00pm</p></header><div class="content"><p>On Thu, Mar 24, 2016 at 2:03 PM, Труб Илья &lt;itrub at yandex.ru&gt; wrote:<br>&gt;<br>&gt; Thanks for your answer, Dmitry. I will look for examples of module maps in test sources.<br></p><p>You shouldn&#39;t need to.  If you have built Swift for arm, you should<br>have the right one produced by the build system.<br></p><p>How did you compile the standard library for arm?<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/46520baee6c64b0aa858ccfcec77f131?s=50"></div><header><strong>Error with SwiftGlibs building for arm-linux</strong> from <string>Iliya Trub</string> &lt;itrub at yandex.ru&gt;<p>March 25, 2016 at 12:00:00am</p></header><div class="content"><p>I have built all targets for arm (including modules and libraries) within the native arm environment on arm-emulator with chroot.<br></p><p>25.03.2016, 00:25, &quot;Dmitri Gribenko&quot; &lt;gribozavr at gmail.com&gt;:<br>&gt; On Thu, Mar 24, 2016 at 2:03 PM, Труб Илья &lt;itrub at yandex.ru&gt; wrote:<br>&gt;&gt;  Thanks for your answer, Dmitry. I will look for examples of module maps in test sources.<br>&gt;<br>&gt; You shouldn&#39;t need to. If you have built Swift for arm, you should<br>&gt; have the right one produced by the build system.<br>&gt;<br>&gt; How did you compile the standard library for arm?<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Error with SwiftGlibs building for arm-linux</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>March 24, 2016 at 03:00:00pm</p></header><div class="content"><p>Then you should have a module map for Glibc in the build products.<br></p><p>Dmitri<br></p><p>On Thu, Mar 24, 2016 at 2:32 PM, Труб Илья &lt;itrub at yandex.ru&gt; wrote:<br>&gt; I have built all targets for arm (including modules and libraries) within the native arm environment on arm-emulator with chroot.<br>&gt;<br>&gt; 25.03.2016, 00:25, &quot;Dmitri Gribenko&quot; &lt;gribozavr at gmail.com&gt;:<br>&gt;&gt; On Thu, Mar 24, 2016 at 2:03 PM, Труб Илья &lt;itrub at yandex.ru&gt; wrote:<br>&gt;&gt;&gt;  Thanks for your answer, Dmitry. I will look for examples of module maps in test sources.<br>&gt;&gt;<br>&gt;&gt; You shouldn&#39;t need to. If you have built Swift for arm, you should<br>&gt;&gt; have the right one produced by the build system.<br>&gt;&gt;<br>&gt;&gt; How did you compile the standard library for arm?<br>&gt;&gt;<br>&gt;&gt; Dmitri<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p><p><br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/46520baee6c64b0aa858ccfcec77f131?s=50"></div><header><strong>Error with SwiftGlibs building for arm-linux</strong> from <string>Iliya Trub</string> &lt;itrub at yandex.ru&gt;<p>March 25, 2016 at 12:00:00pm</p></header><div class="content"><p>Yes, Dmitry. I found corresponding module.map for arm and placed it into glibs subdirectory of my swiftc&#39;s include path. It was found. But, it seems to me, sysroot argument is not applied to paths, written in that module.map or I do not how to correct do that.<br>I add to swift command-line following option:<br>-Xcc &quot;-sysroot &lt;msysroot&gt;&quot;, but now I get error:<br></p><p>&lt;my swift include path&gt;/glibc/module.map:187:14: error: header &#39;/usr/include/sys/ioctl.h&#39; not found<br>      header &quot;/usr/include/sys/ioctl.h&quot;<br>             ^<br>&lt;unknown&gt;:0: error: could not build Objective-C module &#39;SwiftGlibc&#39;<br></p><p>I checked, that file &lt;mysysroot&gt;/usr/include/sys/ioctl.h actually exists. Could you hint, what I do wrong?<br></p><p>25.03.2016, 01:15, &quot;Dmitri Gribenko&quot; &lt;gribozavr at gmail.com&gt;:<br>&gt; Then you should have a module map for Glibc in the build products.<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; On Thu, Mar 24, 2016 at 2:32 PM, Труб Илья &lt;itrub at yandex.ru&gt; wrote:<br>&gt;&gt;  I have built all targets for arm (including modules and libraries) within the native arm environment on arm-emulator with chroot.<br>&gt;&gt;<br>&gt;&gt;  25.03.2016, 00:25, &quot;Dmitri Gribenko&quot; &lt;gribozavr at gmail.com&gt;:<br>&gt;&gt;&gt;  On Thu, Mar 24, 2016 at 2:03 PM, Труб Илья &lt;itrub at yandex.ru&gt; wrote:<br>&gt;&gt;&gt;&gt;   Thanks for your answer, Dmitry. I will look for examples of module maps in test sources.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;  You shouldn&#39;t need to. If you have built Swift for arm, you should<br>&gt;&gt;&gt;  have the right one produced by the build system.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;  How did you compile the standard library for arm?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;  Dmitri<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;  --<br>&gt;&gt;&gt;  main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt;&gt;  (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/46520baee6c64b0aa858ccfcec77f131?s=50"></div><header><strong>Error with SwiftGlibs building for arm-linux</strong> from <string>Iliya Trub</string> &lt;itrub at yandex.ru&gt;<p>March 25, 2016 at 03:00:00pm</p></header><div class="content"><p>It seems to me, the last phenomena is explained by swift compiler bug. Let us look into clang/lib/Lex/ModuleMap.cpp source file, method parseHeaderDecl. We can find, for example, following lines:<br>if (llvm::sys::path::is_absolute(Header.FileName)) {<br>    RelativePathName = Header.FileName;<br>    File = SourceMgr.getFileManager().getFile(RelativePathName);<br>}<br> We can see, that sysroot (or isysroot) argument is ignored. What can you say about that?<br></p><p>25.03.2016, 12:21, &quot;Труб Илья via swift-dev&quot; &lt;swift-dev at swift.org&gt;:<br>&gt; Yes, Dmitry. I found corresponding module.map for arm and placed it into glibs subdirectory of my swiftc&#39;s include path. It was found. But, it seems to me, sysroot argument is not applied to paths, written in that module.map or I do not how to correct do that.<br>&gt; I add to swift command-line following option:<br>&gt; -Xcc &quot;-sysroot &lt;msysroot&gt;&quot;, but now I get error:<br>&gt;<br>&gt; &lt;my swift include path&gt;/glibc/module.map:187:14: error: header &#39;/usr/include/sys/ioctl.h&#39; not found<br>&gt;       header &quot;/usr/include/sys/ioctl.h&quot;<br>&gt;              ^<br>&gt; &lt;unknown&gt;:0: error: could not build Objective-C module &#39;SwiftGlibc&#39;<br>&gt;<br>&gt; I checked, that file &lt;mysysroot&gt;/usr/include/sys/ioctl.h actually exists. Could you hint, what I do wrong?<br>&gt;<br>&gt; 25.03.2016, 01:15, &quot;Dmitri Gribenko&quot; &lt;gribozavr at gmail.com&gt;:<br>&gt;&gt;  Then you should have a module map for Glibc in the build products.<br>&gt;&gt;<br>&gt;&gt;  Dmitri<br>&gt;&gt;<br>&gt;&gt;  On Thu, Mar 24, 2016 at 2:32 PM, Труб Илья &lt;itrub at yandex.ru&gt; wrote:<br>&gt;&gt;&gt;   I have built all targets for arm (including modules and libraries) within the native arm environment on arm-emulator with chroot.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;   25.03.2016, 00:25, &quot;Dmitri Gribenko&quot; &lt;gribozavr at gmail.com&gt;:<br>&gt;&gt;&gt;&gt;   On Thu, Mar 24, 2016 at 2:03 PM, Труб Илья &lt;itrub at yandex.ru&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;    Thanks for your answer, Dmitry. I will look for examples of module maps in test sources.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;   You shouldn&#39;t need to. If you have built Swift for arm, you should<br>&gt;&gt;&gt;&gt;   have the right one produced by the build system.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;   How did you compile the standard library for arm?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;   Dmitri<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;   --<br>&gt;&gt;&gt;&gt;   main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt;&gt;&gt;   (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;&gt;<br>&gt;&gt;  --<br>&gt;&gt;  main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt;  (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
