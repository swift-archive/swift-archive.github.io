<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Addition of a standardError OutputStream</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July 11, 2016 at 11:00:00am</p></header><div class="content"><p>on Sun Jul 10 2016, Saagar Jha &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; What is the process for smaller issues like these? I’m guessing that<br>&gt; this doesn’t need a proposal; where should it go? On bugs.swift.org<br>&gt; &lt;http://bugs.swift.org/&gt;?<br></p><p>If it adds an API, it needs a proposal.  Doesn&#39;t necessarily have to be<br>a big proposal, and the review period can be short, but we don&#39;t add<br>APIs without the evolution process.<br></p><p>Thanks,<br>Dave<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2024f9524b1e51a54c4251abf0c34f50?s=50"></div><header><strong>Addition of a standardError OutputStream</strong> from <string>Saagar Jha</string> &lt;saagarjha28 at gmail.com&gt;<p>July 11, 2016 at 11:00:00am</p></header><div class="content"><p>Thanks, I’ll write it up.<br>&gt; On Jul 11, 2016, at 11:20, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Sun Jul 10 2016, Saagar Jha &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; What is the process for smaller issues like these? I’m guessing that<br>&gt;&gt; this doesn’t need a proposal; where should it go? On bugs.swift.org<br>&gt;&gt; &lt;http://bugs.swift.org/&gt;?<br>&gt; <br>&gt; If it adds an API, it needs a proposal.  Doesn&#39;t necessarily have to be<br>&gt; a big proposal, and the review period can be short, but we don&#39;t add<br>&gt; APIs without the evolution process.<br>&gt; <br>&gt; Thanks,<br>&gt; Dave<br>&gt; <br>&gt; -- <br>&gt; Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Addition of a standardError OutputStream</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>July 11, 2016 at 01:00:00pm</p></header><div class="content"><p>Just throwing this here. Unfortunately `Stream` is already taken (and tied to Foundation).<br></p><p>public struct StdStream {<br>    public struct StderrStream: OutputStream {<br>        public func write(_ string: String) { fputs(string, Darwin.stderr) }<br>    }<br>    <br>    public struct StdoutStream: OutputStream {<br>        public func write(_ string: String) { fputs(string, Darwin.stdout) }<br>    }<br>    <br>    public static var err = StderrStream()<br>    public static var out = StdoutStream()<br>}<br></p><p>So in use, it would look something like <br></p><p>str.write(to: &amp;StdStream.out)<br>str.write(to: &amp;StdStream.err)<br></p><p>I also considered DarwinStream (seemed too on the nose), UnixStream, Streamfd, BSDStream, etc. Didn&#39;t like any of them.<br></p><p>-- E, have paintbrush will bikeshed<br></p><p><br>&gt; On Jul 11, 2016, at 12:58 PM, Saagar Jha via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Thanks, I’ll write it up.<br>&gt;&gt; On Jul 11, 2016, at 11:20, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Sun Jul 10 2016, Saagar Jha &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; What is the process for smaller issues like these? I’m guessing that<br>&gt;&gt;&gt; this doesn’t need a proposal; where should it go? On bugs.swift.org<br>&gt;&gt;&gt; &lt;http://bugs.swift.org/&gt;?<br>&gt;&gt; <br>&gt;&gt; If it adds an API, it needs a proposal.  Doesn&#39;t necessarily have to be<br>&gt;&gt; a big proposal, and the review period can be short, but we don&#39;t add<br>&gt;&gt; APIs without the evolution process.<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; Dave<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160711/7ae468c1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Addition of a standardError OutputStream</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July 11, 2016 at 07:00:00pm</p></header><div class="content"><p>Why not just OutputStream.stderr?<br></p><p>On Mon, Jul 11, 2016 at 14:25 Erica Sadun via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Just throwing this here. Unfortunately `Stream` is already taken (and tied<br>&gt; to Foundation).<br>&gt;<br>&gt; public struct StdStream {<br>&gt;     public struct StderrStream: OutputStream {<br>&gt;         public func write(_ string: String) { fputs(string, Darwin.stderr)<br>&gt; }<br>&gt;     }<br>&gt;<br>&gt;<br>&gt;     public struct StdoutStream: OutputStream {<br>&gt;         public func write(_ string: String) { fputs(string, Darwin.stdout)<br>&gt; }<br>&gt;     }<br>&gt;<br>&gt;<br>&gt;     public static var err = StderrStream()<br>&gt;     public static var out = StdoutStream()<br>&gt; }<br>&gt;<br>&gt; So in use, it would look something like<br>&gt;<br>&gt; str.write(to: &amp;StdStream.out)<br>&gt; str.write(to: &amp;StdStream.err)<br>&gt;<br>&gt; I also considered DarwinStream (seemed too on the nose), UnixStream,<br>&gt; Streamfd, BSDStream, etc. Didn&#39;t like any of them.<br>&gt;<br>&gt; -- E, have paintbrush will bikeshed<br>&gt;<br>&gt;<br>&gt; On Jul 11, 2016, at 12:58 PM, Saagar Jha via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Thanks, I’ll write it up.<br>&gt;<br>&gt; On Jul 11, 2016, at 11:20, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; on Sun Jul 10 2016, Saagar Jha &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; What is the process for smaller issues like these? I’m guessing that<br>&gt; this doesn’t need a proposal; where should it go? On bugs.swift.org<br>&gt; &lt;http://bugs.swift.org/&gt;?<br>&gt;<br>&gt;<br>&gt; If it adds an API, it needs a proposal.  Doesn&#39;t necessarily have to be<br>&gt; a big proposal, and the review period can be short, but we don&#39;t add<br>&gt; APIs without the evolution process.<br>&gt;<br>&gt; Thanks,<br>&gt; Dave<br>&gt;<br>&gt; --<br>&gt; Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160711/dbf19c57/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Addition of a standardError OutputStream</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>July 11, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jul 11, 2016, at 1:29 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; Why not just OutputStream.stderr?<br></p><p>Can you do an extension like that with state for a protocol?<br></p><p>-- E<br></p><p><br>&gt; <br>&gt; On Mon, Jul 11, 2016 at 14:25 Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Just throwing this here. Unfortunately `Stream` is already taken (and tied to Foundation).<br>&gt; <br>&gt; public struct StdStream {<br>&gt;     public struct StderrStream: OutputStream {<br>&gt;         public func write(_ string: String) { fputs(string, Darwin.stderr) }<br>&gt;     }<br>&gt;     <br>&gt;     public struct StdoutStream: OutputStream {<br>&gt;         public func write(_ string: String) { fputs(string, Darwin.stdout) }<br>&gt;     }<br>&gt;     <br>&gt;     public static var err = StderrStream()<br>&gt;     public static var out = StdoutStream()<br>&gt; }<br>&gt; <br>&gt; So in use, it would look something like <br>&gt; <br>&gt; str.write(to: &amp;StdStream.out)<br>&gt; str.write(to: &amp;StdStream.err)<br>&gt; <br>&gt; I also considered DarwinStream (seemed too on the nose), UnixStream, Streamfd, BSDStream, etc. Didn&#39;t like any of them.<br>&gt; <br>&gt; -- E, have paintbrush will bikeshed<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160711/e4ab6e7a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Addition of a standardError OutputStream</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July 11, 2016 at 02:00:00pm</p></header><div class="content"><p>You&#39;re right. It&#39;s at least tricky, if not currently impossible. I take it<br>back then.<br></p><p>I&#39;d be happy with a `StandardStream` type (though I&#39;d advocate, in the<br>spirit of Swiftiness, to have it spelled out), with static `output` and<br>`error`. This might be one of those rare cases where a reference type might<br>be most appropriate, though, with perhaps a singleton design?<br></p><p>On Mon, Jul 11, 2016 at 2:30 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Jul 11, 2016, at 1:29 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt; Why not just OutputStream.stderr?<br>&gt;<br>&gt;<br>&gt; Can you do an extension like that with state for a protocol?<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Mon, Jul 11, 2016 at 14:25 Erica Sadun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Just throwing this here. Unfortunately `Stream` is already taken (and<br>&gt;&gt; tied to Foundation).<br>&gt;&gt;<br>&gt;&gt; public struct StdStream {<br>&gt;&gt;     public struct StderrStream: OutputStream {<br>&gt;&gt;         public func write(_ string: String) { fputs(string, Darwin.stderr)<br>&gt;&gt; }<br>&gt;&gt;     }<br>&gt;&gt;<br>&gt;&gt;     public struct StdoutStream: OutputStream {<br>&gt;&gt;         public func write(_ string: String) { fputs(string, Darwin.stdout)<br>&gt;&gt; }<br>&gt;&gt;     }<br>&gt;&gt;<br>&gt;&gt;     public static var err = StderrStream()<br>&gt;&gt;     public static var out = StdoutStream()<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; So in use, it would look something like<br>&gt;&gt;<br>&gt;&gt; str.write(to: &amp;StdStream.out)<br>&gt;&gt; str.write(to: &amp;StdStream.err)<br>&gt;&gt;<br>&gt;&gt; I also considered DarwinStream (seemed too on the nose), UnixStream,<br>&gt;&gt; Streamfd, BSDStream, etc. Didn&#39;t like any of them.<br>&gt;&gt;<br>&gt;&gt; -- E, have paintbrush will bikeshed<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160711/a0e1b1e8/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76eb9711d45c1c9a71c0f24004072a22?s=50"></div><header><strong>Addition of a standardError OutputStream</strong> from <string>Zach Waldowski</string> &lt;zach at waldowski.me&gt;<p>July 11, 2016 at 01:00:00pm</p></header><div class="content"><p>`Process` might be a good place for namespacing these. You&#39;ll also note<br>that `print` can take an OutputStream to make this even more idiomatic.<br>Straw man example at<br>https://gist.github.com/zwaldowski/4ed2fd48da2af3193b0cbd3ec1883c9d.<br> <br>Cheers!<br>  Zachary Waldowski<br>  zach at waldowski.me<br> <br> <br>On Mon, Jul 11, 2016, at 12:24 PM, Erica Sadun via swift-evolution wrote:<br>&gt; Just throwing this here. Unfortunately `Stream` is already taken (and<br>&gt; tied to Foundation).<br>&gt;<br>&gt; public struct StdStream {<br>&gt;  public struct StderrStream: OutputStream {<br>&gt;  public func write(_ string: String) { fputs(string, Darwin.stderr) }<br>&gt;     }<br>&gt;<br>&gt;  public struct StdoutStream: OutputStream {<br>&gt;  public func write(_ string: String) { fputs(string, Darwin.stdout) }<br>&gt;     }<br>&gt;<br>&gt;  public static var err = StderrStream()<br>&gt;  public static var out = StdoutStream()<br>&gt; }<br>&gt;<br>&gt; So in use, it would look something like<br>&gt;<br>&gt; str.write(to: &amp;StdStream.out)<br>&gt; str.write(to: &amp;StdStream.err)<br>&gt;<br>&gt; I also considered DarwinStream (seemed too on the nose), UnixStream,<br>&gt; Streamfd, BSDStream, etc. Didn&#39;t like any of them.<br>&gt;<br>&gt; -- E, have paintbrush will bikeshed<br>&gt;<br>&gt;<br>&gt;&gt; On Jul 11, 2016, at 12:58 PM, Saagar Jha via swift-evolution &lt;swift-<br>&gt;&gt; evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Thanks, I’ll write it up.<br>&gt;&gt;&gt; On Jul 11, 2016, at 11:20, Dave Abrahams via swift-evolution &lt;swift-<br>&gt;&gt;&gt; evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; on Sun Jul 10 2016, Saagar Jha &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; What is the process for smaller issues like these? I’m<br>&gt;&gt;&gt;&gt; guessing that<br>&gt;&gt;&gt;&gt; this doesn’t need a proposal; where should it go? On bugs.swift.org<br>&gt;&gt;&gt;&gt; &lt;http://bugs.swift.org/&gt;?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; If it adds an API, it needs a proposal.  Doesn&#39;t necessarily<br>&gt;&gt;&gt; have to be<br>&gt;&gt;&gt; a big proposal, and the review period can be short, but we don&#39;t add<br>&gt;&gt;&gt; APIs without the evolution process.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _________________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br> <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160711/2d0ec1d0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Addition of a standardError OutputStream</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July 11, 2016 at 08:00:00pm</p></header><div class="content"><p>Sorry, I don&#39;t really see how these are related to &quot;process&quot;. Can you<br>explain?<br>On Mon, Jul 11, 2016 at 15:08 Zach Waldowski via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; `Process` might be a good place for namespacing these. You&#39;ll also note<br>&gt; that `print` can take an OutputStream to make this even more idiomatic.<br>&gt; Straw man example at<br>&gt; https://gist.github.com/zwaldowski/4ed2fd48da2af3193b0cbd3ec1883c9d.<br>&gt;<br>&gt; Cheers!<br>&gt;   Zachary Waldowski<br>&gt;   zach at waldowski.me<br>&gt;<br>&gt;<br>&gt; On Mon, Jul 11, 2016, at 12:24 PM, Erica Sadun via swift-evolution wrote:<br>&gt;<br>&gt; Just throwing this here. Unfortunately `Stream` is already taken (and tied<br>&gt; to Foundation).<br>&gt;<br>&gt; public struct StdStream {<br>&gt; public struct StderrStream: OutputStream {<br>&gt; public func write(_ string: String) { fputs(string, Darwin.stderr) }<br>&gt;     }<br>&gt;<br>&gt;<br>&gt; public struct StdoutStream: OutputStream {<br>&gt; public func write(_ string: String) { fputs(string, Darwin.stdout) }<br>&gt;     }<br>&gt;<br>&gt;<br>&gt; public static var err = StderrStream()<br>&gt; public static var out = StdoutStream()<br>&gt; }<br>&gt;<br>&gt; So in use, it would look something like<br>&gt;<br>&gt; str.write(to: &amp;StdStream.out)<br>&gt; str.write(to: &amp;StdStream.err)<br>&gt;<br>&gt; I also considered DarwinStream (seemed too on the nose), UnixStream,<br>&gt; Streamfd, BSDStream, etc. Didn&#39;t like any of them.<br>&gt;<br>&gt; -- E, have paintbrush will bikeshed<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Jul 11, 2016, at 12:58 PM, Saagar Jha via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Thanks, I’ll write it up.<br>&gt;<br>&gt; On Jul 11, 2016, at 11:20, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; on Sun Jul 10 2016, Saagar Jha &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; What is the process for smaller issues like these? I’m guessing that<br>&gt; this doesn’t need a proposal; where should it go? On bugs.swift.org<br>&gt; &lt;http://bugs.swift.org/&gt;?<br>&gt;<br>&gt;<br>&gt; If it adds an API, it needs a proposal.  Doesn&#39;t necessarily have to be<br>&gt; a big proposal, and the review period can be short, but we don&#39;t add<br>&gt; APIs without the evolution process.<br>&gt;<br>&gt; Thanks,<br>&gt; Dave<br>&gt;<br>&gt; --<br>&gt; Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; *_______________________________________________*<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160711/35185f30/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Addition of a standardError OutputStream</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>July 11, 2016 at 11:00:00pm</p></header><div class="content"><p>It makes some sense:<br></p><p>- Each process has its own Input/Output/Error streams.<br>- Processes are piped through their streams.<br>- C# has `StandardError`, `StandardInput`, `StandardOutput` properties on the `Process` class.<br></p><p>On the other hand:<br></p><p>- Java has them defined on `System`<br>- Python is very similar to Java `sys.stdout`<br></p><p>&gt; On 11 Jul 2016, at 22:10, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Sorry, I don&#39;t really see how these are related to &quot;process&quot;. Can you explain?<br>&gt; On Mon, Jul 11, 2016 at 15:08 Zach Waldowski via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; `Process` might be a good place for namespacing these. You&#39;ll also note that `print` can take an OutputStream to make this even more idiomatic. Straw man example at https://gist.github.com/zwaldowski/4ed2fd48da2af3193b0cbd3ec1883c9d &lt;https://gist.github.com/zwaldowski/4ed2fd48da2af3193b0cbd3ec1883c9d&gt;.<br>&gt;  <br>&gt; Cheers!<br>&gt;   Zachary Waldowski<br>&gt;   zach at waldowski.me &lt;mailto:zach at waldowski.me&gt;<br>&gt;  <br>&gt;  <br>&gt; On Mon, Jul 11, 2016, at 12:24 PM, Erica Sadun via swift-evolution wrote:<br>&gt;&gt; Just throwing this here. Unfortunately `Stream` is already taken (and tied to Foundation).<br>&gt;&gt;  <br>&gt;&gt; public struct StdStream {<br>&gt;&gt; public struct StderrStream: OutputStream {<br>&gt;&gt; public func write(_ string: String) { fputs(string, Darwin.stderr) }<br>&gt;&gt;     }<br>&gt;&gt;     <br>&gt;&gt; public struct StdoutStream: OutputStream {<br>&gt;&gt; public func write(_ string: String) { fputs(string, Darwin.stdout) }<br>&gt;&gt;     }<br>&gt;&gt;     <br>&gt;&gt; public static var err = StderrStream()<br>&gt;&gt; public static var out = StdoutStream()<br>&gt;&gt; }<br>&gt;&gt;  <br>&gt;&gt; So in use, it would look something like <br>&gt;&gt;  <br>&gt;&gt; str.write(to: &amp;StdStream.out)<br>&gt;&gt; str.write(to: &amp;StdStream.err)<br>&gt;&gt;  <br>&gt;&gt; I also considered DarwinStream (seemed too on the nose), UnixStream, Streamfd, BSDStream, etc. Didn&#39;t like any of them.<br>&gt;&gt;  <br>&gt;&gt; -- E, have paintbrush will bikeshed<br>&gt;&gt;  <br>&gt;&gt;  <br>&gt;&gt;&gt; On Jul 11, 2016, at 12:58 PM, Saagar Jha via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; Thanks, I’ll write it up.<br>&gt;&gt;&gt;&gt; On Jul 11, 2016, at 11:20, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; on Sun Jul 10 2016, Saagar Jha &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; What is the process for smaller issues like these? I’m guessing that<br>&gt;&gt;&gt;&gt;&gt; this doesn’t need a proposal; where should it go? On bugs.swift.org &lt;http://bugs.swift.org/&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;http://bugs.swift.org/ &lt;http://bugs.swift.org/&gt;&gt;?<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; If it adds an API, it needs a proposal.  Doesn&#39;t necessarily have to be<br>&gt;&gt;&gt;&gt; a big proposal, and the review period can be short, but we don&#39;t add<br>&gt;&gt;&gt;&gt; APIs without the evolution process.<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160711/126ef0e9/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
