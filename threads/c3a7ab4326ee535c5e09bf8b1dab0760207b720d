<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/17d2af4afb70023e28e655d17471a018?s=50"></div><header><strong>[Proposal] Move public AutoreleasingUnsafeMutablePointer API from StdlibCore -&gt; Objective C Overlay</strong> from <string>Michael Gottesman</string> &lt;mgottesman at apple.com&gt;<p>July 21, 2016 at 10:00:00am</p></header><div class="content"><p>Hello everyone.<br></p><p>This is a proposal to move AutoreleasingUnsafeMutablePointer from StdlibCore to the Objective C overlay. The reason to do this is that ideally StdlibCore would not have any code specific to ObjC in it. This is a small step that we can take in this direction by moving the public API of AutoreleasingUnsafeMutablePointer to the ObjC overlay. The way that this would be done is that the implementation for AutoreleasingUnsafeMutablePointer would remain in StdlibCore, but we would add an underscore to make that API private to the standard library. Then inside the ObjC overlay, we would create a typealias to the internal API with the non-underscored name (i.e. make the typealias the public API). Then at a later point in time we can move the implementation. The reason why I am not proposing to move the implementation today is that there are dependencies in Array/Hashed Collections on AutoreleasingUnsafeMutablePointer. Moving that code is a larger project that is preconditioned on this proposal going in first as an incremental step.<br></p><p>Thoughts, flames, etc?<br>Michael<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>[Proposal] Move public AutoreleasingUnsafeMutablePointer API from StdlibCore -&gt; Objective C Overlay</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>July 21, 2016 at 10:00:00am</p></header><div class="content"><p>On Thu, Jul 21, 2016 at 10:02 AM, Michael Gottesman via<br>swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; Hello everyone.<br>&gt;<br>&gt; This is a proposal to move AutoreleasingUnsafeMutablePointer from StdlibCore to the Objective C overlay.<br></p><p>+1.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Proposal] Move public AutoreleasingUnsafeMutablePointer API from StdlibCore -&gt; Objective C Overlay</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>July 21, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Jul 21, 2016, at 10:02 AM, Michael Gottesman via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello everyone.<br>&gt; <br>&gt; This is a proposal to move AutoreleasingUnsafeMutablePointer from StdlibCore to the Objective C overlay. The reason to do this is that ideally StdlibCore would not have any code specific to ObjC in it. This is a small step that we can take in this direction by moving the public API of AutoreleasingUnsafeMutablePointer to the ObjC overlay. The way that this would be done is that the implementation for AutoreleasingUnsafeMutablePointer would remain in StdlibCore, but we would add an underscore to make that API private to the standard library. Then inside the ObjC overlay, we would create a typealias to the internal API with the non-underscored name (i.e. make the typealias the public API). Then at a later point in time we can move the implementation. The reason why I am not proposing to move the implementation today is that there are dependencies in Array/Hashed Collections on AutoreleasingUnsafeMutablePointer. Moving that code is a larger project that is preconditioned on this proposal going in first as an incremental step.<br>&gt; <br>&gt; Thoughts, flames, etc?<br></p><p>Sounds awesome. Someone will need to ping Bret Victor to update his T-shirt: https://twitter.com/worrydream/status/558533126444445697<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[Proposal] Move public AutoreleasingUnsafeMutablePointer API from StdlibCore -&gt; Objective C Overlay</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>July 21, 2016 at 01:00:00pm</p></header><div class="content"><p>This proposal is great.<br></p><p>Complaining about an API that 99% of users won&#39;t ever have to touch and<br>exists to facilitate NS/CF interop is a bit precious, to be charitable.<br></p><p>On Thu, Jul 21, 2016 at 11:19 AM, Joe Groff via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Jul 21, 2016, at 10:02 AM, Michael Gottesman via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Hello everyone.<br>&gt; &gt;<br>&gt; &gt; This is a proposal to move AutoreleasingUnsafeMutablePointer from<br>&gt; StdlibCore to the Objective C overlay. The reason to do this is that<br>&gt; ideally StdlibCore would not have any code specific to ObjC in it. This is<br>&gt; a small step that we can take in this direction by moving the public API of<br>&gt; AutoreleasingUnsafeMutablePointer to the ObjC overlay. The way that this<br>&gt; would be done is that the implementation for<br>&gt; AutoreleasingUnsafeMutablePointer would remain in StdlibCore, but we would<br>&gt; add an underscore to make that API private to the standard library. Then<br>&gt; inside the ObjC overlay, we would create a typealias to the internal API<br>&gt; with the non-underscored name (i.e. make the typealias the public API).<br>&gt; Then at a later point in time we can move the implementation. The reason<br>&gt; why I am not proposing to move the implementation today is that there are<br>&gt; dependencies in Array/Hashed Collections on<br>&gt; AutoreleasingUnsafeMutablePointer. Moving that code is a larger project<br>&gt; that is preconditioned on this proposal going in first as an incremental<br>&gt; step.<br>&gt; &gt;<br>&gt; &gt; Thoughts, flames, etc?<br>&gt;<br>&gt; Sounds awesome. Someone will need to ping Bret Victor to update his<br>&gt; T-shirt: https://twitter.com/worrydream/status/558533126444445697<br>&gt;<br>&gt; -Joe<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160721/d12b373c/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>[Proposal] Move public AutoreleasingUnsafeMutablePointer API from StdlibCore -&gt; Objective C Overlay</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>July 22, 2016 at 08:00:00am</p></header><div class="content"><p>I agree on principle for moving it out of stdlib, but what&#39;s the Objective-C overlay?<br></p><p>Félix<br></p><p>&gt; Le 21 juil. 2016 à 10:02:46, Michael Gottesman via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Hello everyone.<br>&gt; <br>&gt; This is a proposal to move AutoreleasingUnsafeMutablePointer from StdlibCore to the Objective C overlay. The reason to do this is that ideally StdlibCore would not have any code specific to ObjC in it. This is a small step that we can take in this direction by moving the public API of AutoreleasingUnsafeMutablePointer to the ObjC overlay. The way that this would be done is that the implementation for AutoreleasingUnsafeMutablePointer would remain in StdlibCore, but we would add an underscore to make that API private to the standard library. Then inside the ObjC overlay, we would create a typealias to the internal API with the non-underscored name (i.e. make the typealias the public API). Then at a later point in time we can move the implementation. The reason why I am not proposing to move the implementation today is that there are dependencies in Array/Hashed Collections on AutoreleasingUnsafeMutablePointer. Moving that code is a larger project that is preconditioned on this proposal going in first as an incremental step.<br>&gt; <br>&gt; Thoughts, flames, etc?<br>&gt; Michael<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/d9444506/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>[Proposal] Move public AutoreleasingUnsafeMutablePointer API from StdlibCore -&gt; Objective C Overlay</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>July 22, 2016 at 08:00:00am</p></header><div class="content"><p>On Fri, Jul 22, 2016 at 8:23 AM, Félix Cloutier<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt; I agree on principle for moving it out of stdlib, but what&#39;s the Objective-C<br>&gt; overlay?<br></p><p>It is the overlay for the &#39;ObjectiveC&#39; module where NSObject is defined.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdd257c9369fb68e1d06923d10ff789e?s=50"></div><header><strong>[Proposal] Move public AutoreleasingUnsafeMutablePointer API from StdlibCore -&gt; Objective C Overlay</strong> from <string>Ben Rimmington</string> &lt;me at benrimmington.com&gt;<p>July 22, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On 21 Jul 2016, at 18:02, Michael Gottesman wrote:<br>&gt; <br>&gt; This is a proposal to move AutoreleasingUnsafeMutablePointer from StdlibCore to the Objective C overlay. The reason to do this is that ideally StdlibCore would not have any code specific to ObjC in it. This is a small step that we can take in this direction by moving the public API of AutoreleasingUnsafeMutablePointer to the ObjC overlay. The way that this would be done is that the implementation for AutoreleasingUnsafeMutablePointer would remain in StdlibCore, but we would add an underscore to make that API private to the standard library. Then inside the ObjC overlay, we would create a typealias to the internal API with the non-underscored name (i.e. make the typealias the public API). Then at a later point in time we can move the implementation. The reason why I am not proposing to move the implementation today is that there are dependencies in Array/Hashed Collections on AutoreleasingUnsafeMutablePointer. Moving that code is a larger project that is preconditioned on this proposal going in first as an incremental step.<br></p><p>If you want to move APIs which aren&#39;t cross-platform out of stdlib, should there be a similar proposal for the PlaygroundQuickLook enum and CustomPlaygroundQuickLookable protocol?<br></p><p>&lt;https://github.com/apple/swift/blob/master/stdlib/public/core/Mirror.swift&gt;<br></p><p>&lt;https://github.com/apple/swift-xcode-playground-support&gt;<br></p><p>-- Ben<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
