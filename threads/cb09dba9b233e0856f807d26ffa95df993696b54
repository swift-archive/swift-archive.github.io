<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c8bc65b07027beac76b917624be47611?s=50"></div><header><strong>Comparing POP to OOP</strong> from <string>Jon Hoffman</string> &lt;hoffman.jon at gmail.com&gt;<p>February 14, 2016 at 06:00:00pm</p></header><div class="content"><p>Numerous tutorials that I have seen take a very Object-Oriented approach to the protocol-oriented programming (POP) paradigm.  By this statement I mean that they tell us that with POP we should begin our design with the protocol rather than with the superclass as we did with OOP however the protocol design tends to mirror the superclass design of OOP.   They also tell us that we should use extensions to add common functionality to types that conform to a protocol as we did with superclasses in OOP.  While protocols and protocol extensions are arguably two of the most important concepts of POP these tutorials seem to be missing some other very important concepts.  <br></p><p>In this post I would like to compare Protocol-Oriented design to Object-Oriented design to highlight some of the conceptual differences.  You can view the blog post here:  http://masteringswift.blogspot.com/2016/02/pop-and-oop.html &lt;http://masteringswift.blogspot.com/2016/02/pop-and-oop.html&gt;<br></p><p>Jon<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160214/cb096b54/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>Comparing POP to OOP</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>February 15, 2016 at 09:00:00am</p></header><div class="content"><p>I have not read your blog. But in my opinion, what Apple called protocol<br>programming is actually so called functional programming. It is not object<br>programming at all. It uses protocols and structs to avoid object<br>programming.<br></p><p>zhaoxin<br></p><p>On Mon, Feb 15, 2016 at 7:59 AM, Jon Hoffman via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Numerous tutorials that I have seen take a very Object-Oriented approach<br>&gt; to the protocol-oriented programming (POP) paradigm.  By this statement I<br>&gt; mean that they tell us that with POP we should begin our design with the<br>&gt; protocol rather than with the superclass as we did with OOP however the<br>&gt; protocol design tends to mirror the superclass design of OOP.   They also<br>&gt; tell us that we should use extensions to add common functionality to types<br>&gt; that conform to a protocol as we did with superclasses in OOP.  While<br>&gt; protocols and protocol extensions are arguably two of the most important<br>&gt; concepts of POP these tutorials seem to be missing some other very<br>&gt; important concepts.<br>&gt;<br>&gt; In this post I would like to compare Protocol-Oriented design to<br>&gt; Object-Oriented design to highlight some of the conceptual differences.<br>&gt; You can view the blog post here:<br>&gt; http://masteringswift.blogspot.com/2016/02/pop-and-oop.html<br>&gt;<br>&gt; Jon<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160215/fba45d72/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c8bc65b07027beac76b917624be47611?s=50"></div><header><strong>Comparing POP to OOP</strong> from <string>Jon Hoffman</string> &lt;hoffman.jon at gmail.com&gt;<p>February 14, 2016 at 09:00:00pm</p></header><div class="content"><p>You should try reading my blog post, hopefully it will change your opinion of Protocol-Oriented programming.  I would be interested to hear what you or anyone else think of Protocol-Oriented programming after reading my post.<br></p><p>Jon<br></p><p><br>&gt; On Feb 14, 2016, at 8:34 PM, zhaoxin肇鑫 &lt;owenzx at gmail.com&gt; wrote:<br>&gt; <br>&gt; I have not read your blog. But in my opinion, what Apple called protocol programming is actually so called functional programming. It is not object programming at all. It uses protocols and structs to avoid object programming.<br>&gt; <br>&gt; zhaoxin<br>&gt; <br>&gt; On Mon, Feb 15, 2016 at 7:59 AM, Jon Hoffman via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt; Numerous tutorials that I have seen take a very Object-Oriented approach to the protocol-oriented programming (POP) paradigm.  By this statement I mean that they tell us that with POP we should begin our design with the protocol rather than with the superclass as we did with OOP however the protocol design tends to mirror the superclass design of OOP.   They also tell us that we should use extensions to add common functionality to types that conform to a protocol as we did with superclasses in OOP.  While protocols and protocol extensions are arguably two of the most important concepts of POP these tutorials seem to be missing some other very important concepts.  <br>&gt; <br>&gt; In this post I would like to compare Protocol-Oriented design to Object-Oriented design to highlight some of the conceptual differences.  You can view the blog post here:  http://masteringswift.blogspot.com/2016/02/pop-and-oop.html &lt;http://masteringswift.blogspot.com/2016/02/pop-and-oop.html&gt;<br>&gt; <br>&gt; Jon<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160214/2bff41f4/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
