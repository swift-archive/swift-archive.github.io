<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a1faea18be9eb2d50c4edcd223f2d685?s=50"></div><header><strong>Optionals in swift-clang</strong> from <string>Seth Friedman</string> &lt;sethfri at gmail.com&gt;<p>December  9, 2015 at 01:00:00am</p></header><div class="content"><p>Hi all,<br></p><p>In Optional.swift in the stdlib, there&#39;s a comment that says &quot;The compiler<br>has special knowledge of Optional&lt;Wrapped&gt;, including the fact that it is<br>an enum with cases named &#39;None&#39; and &#39;Some&#39;.&quot;<br></p><p>What I&#39;m trying to understand is: If I wanted to implement the optional<br>type from scratch, what would be the process I would go through? I&#39;ve<br>scoured the swift-clang project and can&#39;t seem to find any reference to<br>optionals or even Swift explicitly. I discovered nullability attributes and<br>am hypothesizing that an expression of something like &quot;Type?&quot; is somehow<br>mapped to an attribute, but I&#39;m really just stumbling around in the dark.<br></p><p>In terms of what I&#39;ve tried, I&#39;ve gone through a lot of the source in the<br>swift-clang lib/Basic and lib/AST directories, and I&#39;ve read through the<br>&quot;Clang CFE Internals Manual&quot; on the Clang website.<br></p><p>Help is much appreciated!<br></p><p>Thanks in advance,<br>Seth<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151209/fc988b24/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Optionals in swift-clang</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>December  8, 2015 at 06:00:00pm</p></header><div class="content"><p>Hi, Seth. I think you&#39;re getting Clang / swift-clang mixed up with swiftc / swift. Clang is not the Swift compiler; the Swift compiler lives in the &quot;swift&quot; repo. Swift depends on Clang for its interoperation with C and Objective-C.<br></p><p>A lot of the compiler encodes information about Optional, but most of it stems from ASTContext.h and ASTContext.cpp, which has dedicated entrypoints for getting Optional, Optional.None, and Optional.Some.<br></p><p>Hope this helps,<br>Jordan<br></p><p>&gt; On Dec 8, 2015, at 17:59 , Seth Friedman via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; In Optional.swift in the stdlib, there&#39;s a comment that says &quot;The compiler has special knowledge of Optional&lt;Wrapped&gt;, including the fact that it is an enum with cases named &#39;None&#39; and &#39;Some&#39;.&quot;<br>&gt; <br>&gt; What I&#39;m trying to understand is: If I wanted to implement the optional type from scratch, what would be the process I would go through? I&#39;ve scoured the swift-clang project and can&#39;t seem to find any reference to optionals or even Swift explicitly. I discovered nullability attributes and am hypothesizing that an expression of something like &quot;Type?&quot; is somehow mapped to an attribute, but I&#39;m really just stumbling around in the dark.<br>&gt; <br>&gt; In terms of what I&#39;ve tried, I&#39;ve gone through a lot of the source in the swift-clang lib/Basic and lib/AST directories, and I&#39;ve read through the &quot;Clang CFE Internals Manual&quot; on the Clang website.<br>&gt; <br>&gt; Help is much appreciated!<br>&gt; <br>&gt; Thanks in advance,<br>&gt; Seth<br>&gt;  _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151208/e8f3b78d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a1faea18be9eb2d50c4edcd223f2d685?s=50"></div><header><strong>Optionals in swift-clang</strong> from <string>Seth Friedman</string> &lt;sethfri at gmail.com&gt;<p>December 16, 2015 at 10:00:00am</p></header><div class="content"><p>Thanks Jordan!<br></p><p>Another question if anyone has some time: I&#39;m really interested in<br>contributing to the project, but given that I don&#39;t have a ton of<br>experience with compilers, I&#39;m having a really hard time following the flow<br>of the program. I understand that the high level flow is lexing, parsing,<br>sema, and building the AST. However, tracing through the actual functions<br>in the compiler prove much more difficult due to the amount of<br>indirection/metaprogramming.<br></p><p>Are there any sort of sequence diagrams that I haven&#39;t found yet? If anyone<br>could let me know of any good resources you know of, that would be great.<br>I&#39;m sure this would also be of use to people in my boat that want to help<br>but don&#39;t know how to start.<br></p><p>Thanks,<br>Seth<br></p><p>On Tue, Dec 8, 2015 at 9:04 PM Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br></p><p>&gt; Hi, Seth. I think you&#39;re getting Clang / swift-clang mixed up with swiftc<br>&gt; / swift. Clang is not the Swift compiler; the Swift compiler lives in the<br>&gt; &quot;swift&quot; repo. Swift depends on Clang for its interoperation with C and<br>&gt; Objective-C.<br>&gt;<br>&gt; A *lot* of the compiler encodes information about Optional, but most of<br>&gt; it stems from ASTContext.h and ASTContext.cpp, which has dedicated<br>&gt; entrypoints for getting Optional, Optional.None, and Optional.Some.<br>&gt;<br>&gt; Hope this helps,<br>&gt; Jordan<br>&gt;<br>&gt; On Dec 8, 2015, at 17:59 , Seth Friedman via swift-dev &lt;<br>&gt; swift-dev at swift.org&gt; wrote:<br>&gt;<br>&gt; Hi all,<br>&gt;<br>&gt; In Optional.swift in the stdlib, there&#39;s a comment that says &quot;The compiler<br>&gt; has special knowledge of Optional&lt;Wrapped&gt;, including the fact that it is<br>&gt; an enum with cases named &#39;None&#39; and &#39;Some&#39;.&quot;<br>&gt;<br>&gt; What I&#39;m trying to understand is: If I wanted to implement the optional<br>&gt; type from scratch, what would be the process I would go through? I&#39;ve<br>&gt; scoured the swift-clang project and can&#39;t seem to find any reference to<br>&gt; optionals or even Swift explicitly. I discovered nullability attributes and<br>&gt; am hypothesizing that an expression of something like &quot;Type?&quot; is somehow<br>&gt; mapped to an attribute, but I&#39;m really just stumbling around in the dark.<br>&gt;<br>&gt; In terms of what I&#39;ve tried, I&#39;ve gone through a lot of the source in the<br>&gt; swift-clang lib/Basic and lib/AST directories, and I&#39;ve read through the<br>&gt; &quot;Clang CFE Internals Manual&quot; on the Clang website.<br>&gt;<br>&gt; Help is much appreciated!<br>&gt;<br>&gt; Thanks in advance,<br>&gt; Seth<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151216/1a9544f1/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
