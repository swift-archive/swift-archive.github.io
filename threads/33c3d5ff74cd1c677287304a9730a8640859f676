<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0065 A New Model for Collections and Indices</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April 18, 2016 at 02:00:00pm</p></header><div class="content"><p>on Sat Apr 16 2016, Thorsten Seitz &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; Am 15.04.2016 um 23:19 schrieb Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt; <br>&gt;&gt; On Fri, Apr 15, 2016 at 1:30 PM, Stephan Tolksdorf &lt;st at quanttec.com&gt; wrote:<br>&gt;&gt;&gt; On 2016-04-12 Dmitri Gribenko via swift-evolution wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;<br>&gt;&gt;&gt;&gt; Not even to mention that<br>&gt;&gt;&gt;&gt; indices are valid only in context of a particular collection instance,<br>&gt;&gt;&gt;&gt; so in this model you could validate an index against one collection<br>&gt;&gt;&gt;&gt; and use it with another one.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The proposal requires Index values to be Comparable. Does that mean that<br>&gt;&gt;&gt; indices from different collection instances should be comparable i.e. have a<br>&gt;&gt;&gt; strict total order?<br>&gt;&gt; <br>&gt;&gt; No, comparing indices from unrelated instances produces unspecified<br>&gt;&gt; results (incl. traps).<br>&gt;<br>&gt; Path dependent types as used in Scala would allow making this<br>&gt; distinction type safe (see<br>&gt; http://docs.scala-lang.org/tutorials/tour/inner-classes or<br>&gt; http://danielwestheide.com/blog/2013/02/13/the-neophytes-guide-to-scala-part-13-path-dependent-types.html)<br>&gt; by allowing the index type to be rooted at the instance.<br></p><p>Wouldn&#39;t that also rule out useful designs, as in those where indices<br>into one collection are stored in another?<br></p><p>&gt; Are there any plans to adding path dependent types to Swift?<br></p><p>I don&#39;t know of any, but that doesn&#39;t really mean much.<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Review] SE-0065 A New Model for Collections and Indices</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>April 19, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; Am 18.04.2016 um 23:54 schrieb Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; <br>&gt; on Sat Apr 16 2016, Thorsten Seitz &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; Am 15.04.2016 um 23:19 schrieb Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Fri, Apr 15, 2016 at 1:30 PM, Stephan Tolksdorf &lt;st at quanttec.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; On 2016-04-12 Dmitri Gribenko via swift-evolution wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Not even to mention that<br>&gt;&gt;&gt;&gt;&gt; indices are valid only in context of a particular collection instance,<br>&gt;&gt;&gt;&gt;&gt; so in this model you could validate an index against one collection<br>&gt;&gt;&gt;&gt;&gt; and use it with another one.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The proposal requires Index values to be Comparable. Does that mean that<br>&gt;&gt;&gt;&gt; indices from different collection instances should be comparable i.e. have a<br>&gt;&gt;&gt;&gt; strict total order?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; No, comparing indices from unrelated instances produces unspecified<br>&gt;&gt;&gt; results (incl. traps).<br>&gt;&gt; <br>&gt;&gt; Path dependent types as used in Scala would allow making this<br>&gt;&gt; distinction type safe (see<br>&gt;&gt; http://docs.scala-lang.org/tutorials/tour/inner-classes or<br>&gt;&gt; http://danielwestheide.com/blog/2013/02/13/the-neophytes-guide-to-scala-part-13-path-dependent-types.html)<br>&gt;&gt; by allowing the index type to be rooted at the instance.<br>&gt; <br>&gt; Wouldn&#39;t that also rule out useful designs, as in those where indices<br>&gt; into one collection are stored in another?<br></p><p>This should still be possible:<br></p><p>val a: Collection&lt;T&gt; = ...<br>val indices: List&lt;a.Index&gt; = ...<br></p><p>As &#39;a.Index&#39; is just a normal type it should be possible to declare a collection containing elements of just that type (I haven&#39;t tried it out, yet, though, as I currently have no access to a development machine).<br></p><p>-Thorsten<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Review] SE-0065 A New Model for Collections and Indices</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>April 19, 2016 at 10:00:00am</p></header><div class="content"><p>Yup, I just tested on scastie.org, extending my earlier example:<br></p><p>class Coll(val elements: List[Int]) {<br>  <br>  case class Index(val value: Int)<br>  <br>  def firstIndex: Index = Index(0)<br>  <br>  def get(index: Index) = elements(index.value)<br>  <br>  def slice(start: Index) = new Slice(start.value)<br>  <br>  class Slice(val start: Int) {<br>    def firstIndex: Index = Index(start)<br>    def get(index: Index) = elements(index.value)<br>  }<br>  <br>}<br>  <br>object Main extends App {<br>  <br>  val a = new Coll(List(1, 2, 3))<br>  val b = new Coll(List(1, 2, 3))<br>  <br>  val i = a.firstIndex<br>  <br>  a.get(i)<br>  // b.get(i) // type error<br>  <br>  val s = a.slice(a.firstIndex)<br>  s.get(a.firstIndex) // allowed!<br>  <br>  val s2 = b.slice(b.firstIndex)<br>  s2.get(b.firstIndex)<br>  // s2.get(a.firstIndex) // type error<br> <br>  val indices: List[a.Index] =  List(a.firstIndex)<br>}<br></p><p>Note the last line declaring a list of indices of collection &#39;a&#39;.<br></p><p>-Thorsten <br></p><p><br>&gt; Am 19.04.2016 um 10:01 schrieb Thorsten Seitz via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; Am 18.04.2016 um 23:54 schrieb Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Sat Apr 16 2016, Thorsten Seitz &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; Am 15.04.2016 um 23:19 schrieb Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Apr 15, 2016 at 1:30 PM, Stephan Tolksdorf &lt;st at quanttec.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; On 2016-04-12 Dmitri Gribenko via swift-evolution wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Not even to mention that<br>&gt;&gt;&gt;&gt;&gt;&gt; indices are valid only in context of a particular collection instance,<br>&gt;&gt;&gt;&gt;&gt;&gt; so in this model you could validate an index against one collection<br>&gt;&gt;&gt;&gt;&gt;&gt; and use it with another one.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The proposal requires Index values to be Comparable. Does that mean that<br>&gt;&gt;&gt;&gt;&gt; indices from different collection instances should be comparable i.e. have a<br>&gt;&gt;&gt;&gt;&gt; strict total order?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; No, comparing indices from unrelated instances produces unspecified<br>&gt;&gt;&gt;&gt; results (incl. traps).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Path dependent types as used in Scala would allow making this<br>&gt;&gt;&gt; distinction type safe (see<br>&gt;&gt;&gt; http://docs.scala-lang.org/tutorials/tour/inner-classes or<br>&gt;&gt;&gt; http://danielwestheide.com/blog/2013/02/13/the-neophytes-guide-to-scala-part-13-path-dependent-types.html)<br>&gt;&gt;&gt; by allowing the index type to be rooted at the instance.<br>&gt;&gt; <br>&gt;&gt; Wouldn&#39;t that also rule out useful designs, as in those where indices<br>&gt;&gt; into one collection are stored in another?<br>&gt; <br>&gt; This should still be possible:<br>&gt; <br>&gt; val a: Collection&lt;T&gt; = ...<br>&gt; val indices: List&lt;a.Index&gt; = ...<br>&gt; <br>&gt; As &#39;a.Index&#39; is just a normal type it should be possible to declare a collection containing elements of just that type (I haven&#39;t tried it out, yet, though, as I currently have no access to a development machine).<br>&gt; <br>&gt; -Thorsten <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160419/7d98698b/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0065 A New Model for Collections and Indices</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April 19, 2016 at 11:00:00am</p></header><div class="content"><p>on Tue Apr 19 2016, Thorsten Seitz &lt;tseitz42-AT-icloud.com&gt; wrote:<br></p><p>&gt; Yup, I just tested on scastie.org, extending my earlier example:<br>&gt;<br>&gt; class Coll(val elements: List[Int]) {<br>&gt; case class Index(val value: Int)<br>&gt; def firstIndex: Index = Index(0)<br>&gt; def get(index: Index) = elements(index.value)<br>&gt; def slice(start: Index) = new Slice(start.value)<br>&gt; class Slice(val start: Int) {<br>&gt; def firstIndex: Index = Index(start)<br>&gt; def get(index: Index) = elements(index.value)<br>&gt; }<br>&gt; }<br>&gt; object Main extends App {<br>&gt; val a = new Coll(List(1, 2, 3))<br>&gt; val b = new Coll(List(1, 2, 3))<br>&gt; val i = a.firstIndex<br>&gt; a.get(i)<br>&gt; // b.get(i) // type error<br>&gt; val s = a.slice(a.firstIndex)<br>&gt; s.get(a.firstIndex) // allowed!<br>&gt; val s2 = b.slice(b.firstIndex)<br>&gt; s2.get(b.firstIndex)<br>&gt; // s2.get(a.firstIndex) // type error<br>&gt; val indices: List[a.Index] = List(a.firstIndex)<br>&gt; }<br>&gt;<br>&gt; Note the last line declaring a list of indices of collection &#39;a&#39;.<br></p><p>That&#39;s pretty cool.<br></p><p>&gt; -Thorsten <br>&gt;<br>&gt; Am 19.04.2016 um 10:01 schrieb Thorsten Seitz via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt;:<br>&gt;<br>&gt;         Am 18.04.2016 um 23:54 schrieb Dave Abrahams via swift-evolution<br>&gt;         &lt;swift-evolution at swift.org&gt;:<br>&gt;<br>&gt;     on Sat Apr 16 2016, Thorsten Seitz &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;                         Am 15.04.2016 um 23:19 schrieb Dmitri Gribenko via<br>&gt;                 swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;<br>&gt;                 On Fri, Apr 15, 2016 at 1:30 PM, Stephan Tolksdorf<br>&gt;                     &lt;st at quanttec.com&gt; wrote:<br>&gt;<br>&gt;                                     On 2016-04-12 Dmitri Gribenko via<br>&gt;                         swift-evolution wrote:<br>&gt;<br>&gt;                                     Not even to mention that<br>&gt;<br>&gt;                                     indices are valid only in context of a<br>&gt;                         particular collection instance,<br>&gt;<br>&gt;                                     so in this model you could validate an index<br>&gt;                         against one collection<br>&gt;<br>&gt;                                     and use it with another one.<br>&gt;<br>&gt;                 The proposal requires Index values to be Comparable. Does that<br>&gt;                     mean that<br>&gt;<br>&gt;                 indices from different collection instances should be comparable<br>&gt;                     i.e. have a<br>&gt;<br>&gt;                 strict total order?<br>&gt;<br>&gt;                         No, comparing indices from unrelated instances produces<br>&gt;                 unspecified<br>&gt;<br>&gt;                         results (incl. traps).<br>&gt;<br>&gt;             Path dependent types as used in Scala would allow making this<br>&gt;<br>&gt;             distinction type safe (see<br>&gt;<br>&gt;             http://docs.scala-lang.org/tutorials/tour/inner-classes or<br>&gt;<br>&gt;             http://danielwestheide.com/blog/2013/02/13/the-neophytes-guide-to-scala-part-13-path-dependent-types.html<br>&gt;            )<br>&gt;<br>&gt;             by allowing the index type to be rooted at the instance.<br>&gt;<br>&gt;     Wouldn&#39;t that also rule out useful designs, as in those where indices<br>&gt;<br>&gt;     into one collection are stored in another?<br>&gt;<br>&gt;     This should still be possible:<br>&gt;<br>&gt;     val a: Collection&lt;T&gt; = ...<br>&gt;     val indices: List&lt;a.Index&gt; = ...<br>&gt;<br>&gt;     As &#39;a.Index&#39; is just a normal type it should be possible to declare a<br>&gt;     collection containing elements of just that type (I haven&#39;t tried it out,<br>&gt;     yet, though, as I currently have no access to a development machine).<br>&gt;<br>&gt;     -Thorsten <br>&gt;     _______________________________________________<br>&gt;     swift-evolution mailing list<br>&gt;     swift-evolution at swift.org<br>&gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p>-- <br>Dave<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
