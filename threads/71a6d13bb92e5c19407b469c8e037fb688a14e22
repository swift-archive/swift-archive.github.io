<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e41b4af40e5dcd99ca063dbbfd7af182?s=50"></div><header><strong>Issues linking a C library module using swift build</strong> from <string>Valentin Radu</string> &lt;radu.v.valentin at me.com&gt;<p>December 15, 2015 at 02:00:00am</p></header><div class="content"><p>Hello all,<br></p><p><br>I’m having some strange issues on osx when trying to link a C library module. I’ve successfully did this before with another library, however, for some reason this one doesn’t work.<br>My module map looks like this:<br></p><p>module CFCGI [system] {<br>    header &quot;/usr/local/include/cfcgi/cfcgi.h&quot;<br>    link &quot;cfcgi&quot;<br>    export *<br>}<br></p><p>And the output:<br></p><p>swift build --clean &amp;&amp; swift build -v<br>Cloning into &#39;/Users/valentinradu/Playgrounds/April/Packages/libcfcgi&#39;...<br>warning: --depth is ignored in local clones; use file:// instead.<br>done.<br>/Library/Developer/Toolchains/swift-2.2-SNAPSHOT-2015-12-01-a.xctoolchain/usr/bin/swiftc -module-name April -incremental -emit-dependencies -emit-module -emit-module-path /Users/valentinradu/Playgrounds/April/.build/debug/April.swiftmodule -output-file-map /Users/valentinradu/Playgrounds/April/.build/debug/April.o/April/output-file-map.json -c /Users/valentinradu/Playgrounds/April/Sources/main.swift -I /Users/valentinradu/Playgrounds/April/.build/debug -j8 -Onone -g -target x86_64-apple-macosx10.10 -sdk /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk -Xcc -F-module-map=/Users/valentinradu/Playgrounds/April/Packages/libcfcgi-1.0.0/module.modulemap -I /Users/valentinradu/Playgrounds/April/Packages/libcfcgi-1.0.0 -I /usr/local/include<br>/Library/Developer/Toolchains/swift-2.2-SNAPSHOT-2015-12-01-a.xctoolchain/usr/bin/swiftc -o /Users/valentinradu/Playgrounds/April/.build/debug/April /Users/valentinradu/Playgrounds/April/.build/debug/April.o/Sources/main.swift.o -Xlinker -all_load -target x86_64-apple-macosx10.10 -sdk /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk -L/usr/local/lib<br>Undefined symbols for architecture x86_64:<br>  &quot;_cfcgi_create&quot;, referenced from:<br>      _main in main.swift.o<br>  &quot;_cfcgi_free&quot;, referenced from:<br>      _main in main.swift.o<br>  &quot;_cfcgi_start_and_wait&quot;, referenced from:<br>      _main in main.swift.o<br>ld: symbol(s) not found for architecture x86_64<br>&lt;unknown&gt;:0: error: build had 1 command failures<br>swift-build: exit(1): [&quot;/Library/Developer/Toolchains/swift-2.2-SNAPSHOT-2015-12-01-a.xctoolchain/usr/bin/swift-build-tool&quot;, &quot;-v&quot;, &quot;-f&quot;, &quot;/Users/valentinradu/Playgrounds/April/.build/debug/April.o/llbuild.yaml&quot;]<br></p><p>It looks like the linker ignores the `link &quot;cfcgi”` part. <br>I tried lots of things but failed to find the reason behind this. I’m starting to think this might be related to this paragraph in the clang docs:<br></p><p>&quot;Automatic linking with the link directive is not yet widely implemented, because it requires support from both the object file format and the linker. The notion is similar to Microsoft Visual Studio’s #pragma comment(lib…).”<br></p><p>Unfortunately I find it a little vague and I can’t know for sure if it applies here.<br></p><p>So far, this is what I know for sure:<br>- libcfcgi.a is in /usr/local/lib and it’s compiled for x86_64<br>- libcfcgi.a contains the above mentioned symbols, tested it with nm and linked it in a small C program <br>- I’m on osx and build with the swift-2.2-SNAPSHOT-2015-12-01-a toolchain<br></p><p><br>Any input on this would be greatly appreciated!<br></p><p>Valentin Radu<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151215/71a64e22/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ae51ca494b37cc270597830da66f089f?s=50"></div><header><strong>Issues linking a C library module using swift build</strong> from <string>Max Howell</string> &lt;max.howell at apple.com&gt;<p>December 14, 2015 at 04:00:00pm</p></header><div class="content"><p>Might well be that it is a statically compiled library. Would be easy to test. Do you mind opening a ticket for this? https://bugs.swift.org<br></p><p>&gt; Hello all,<br>&gt; <br>&gt; <br>&gt; I’m having some strange issues on osx when trying to link a C library module. I’ve successfully did this before with another library, however, for some reason this one doesn’t work.<br>&gt; My module map looks like this:<br>&gt; <br>&gt; module CFCGI [system] {<br>&gt;     header &quot;/usr/local/include/cfcgi/cfcgi.h&quot;<br>&gt;     link &quot;cfcgi&quot;<br>&gt;     export *<br>&gt; }<br>&gt; <br>&gt; And the output:<br>&gt; <br>&gt; swift build --clean &amp;&amp; swift build -v<br>&gt; Cloning into &#39;/Users/valentinradu/Playgrounds/April/Packages/libcfcgi&#39;...<br>&gt; warning: --depth is ignored in local clones; use file:// instead.<br>&gt; done.<br>&gt; /Library/Developer/Toolchains/swift-2.2-SNAPSHOT-2015-12-01-a.xctoolchain/usr/bin/swiftc -module-name April -incremental -emit-dependencies -emit-module -emit-module-path /Users/valentinradu/Playgrounds/April/.build/debug/April.swiftmodule -output-file-map /Users/valentinradu/Playgrounds/April/.build/debug/April.o/April/output-file-map.json -c /Users/valentinradu/Playgrounds/April/Sources/main.swift -I /Users/valentinradu/Playgrounds/April/.build/debug -j8 -Onone -g -target x86_64-apple-macosx10.10 -sdk /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk -Xcc -F-module-map=/Users/valentinradu/Playgrounds/April/Packages/libcfcgi-1.0.0/module.modulemap -I /Users/valentinradu/Playgrounds/April/Packages/libcfcgi-1.0.0 -I /usr/local/include<br>&gt; /Library/Developer/Toolchains/swift-2.2-SNAPSHOT-2015-12-01-a.xctoolchain/usr/bin/swiftc -o /Users/valentinradu/Playgrounds/April/.build/debug/April /Users/valentinradu/Playgrounds/April/.build/debug/April.o/Sources/main.swift.o -Xlinker -all_load -target x86_64-apple-macosx10.10 -sdk /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk -L/usr/local/lib<br>&gt; Undefined symbols for architecture x86_64:<br>&gt;   &quot;_cfcgi_create&quot;, referenced from:<br>&gt;       _main in main.swift.o<br>&gt;   &quot;_cfcgi_free&quot;, referenced from:<br>&gt;       _main in main.swift.o<br>&gt;   &quot;_cfcgi_start_and_wait&quot;, referenced from:<br>&gt;       _main in main.swift.o<br>&gt; ld: symbol(s) not found for architecture x86_64<br>&gt; &lt;unknown&gt;:0: error: build had 1 command failures<br>&gt; swift-build: exit(1): [&quot;/Library/Developer/Toolchains/swift-2.2-SNAPSHOT-2015-12-01-a.xctoolchain/usr/bin/swift-build-tool&quot;, &quot;-v&quot;, &quot;-f&quot;, &quot;/Users/valentinradu/Playgrounds/April/.build/debug/April.o/llbuild.yaml&quot;]<br>&gt; <br>&gt; It looks like the linker ignores the `link &quot;cfcgi”` part. <br>&gt; I tried lots of things but failed to find the reason behind this. I’m starting to think this might be related to this paragraph in the clang docs:<br>&gt; <br>&gt; &quot;Automatic linking with the link directive is not yet widely implemented, because it requires support from both the object file format and the linker. The notion is similar to Microsoft Visual Studio’s #pragma comment(lib…).”<br>&gt; <br>&gt; Unfortunately I find it a little vague and I can’t know for sure if it applies here.<br>&gt; <br>&gt; So far, this is what I know for sure:<br>&gt; - libcfcgi.a is in /usr/local/lib and it’s compiled for x86_64<br>&gt; - libcfcgi.a contains the above mentioned symbols, tested it with nm and linked it in a small C program <br>&gt; - I’m on osx and build with the swift-2.2-SNAPSHOT-2015-12-01-a toolchain<br>&gt; <br>&gt; <br>&gt; Any input on this would be greatly appreciated!<br>&gt; <br>&gt; Valentin Radu<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151214/c9a569ad/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
