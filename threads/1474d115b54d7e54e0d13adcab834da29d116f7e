<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2af8daf170a3ed693e577a9471ea1f10?s=50"></div><header><strong>Reducing the boilerplate for my ID types</strong> from <string>Ray Fix</string> &lt;rayfix at gmail.com&gt;<p>May 17, 2016 at 05:00:00pm</p></header><div class="content"><p>Hello,<br></p><p>I have some ID types that are simple ints coming back from a database.  I wanted to improve type safety so I don’t accidentally assign product IDs to user IDs, etc.  I want to be able to print it and use it as a dictionary key.  So it is a trivial wrapper of Int.  E.g.<br></p><p>struct CustomerID: Hashable, CustomStringConvertible {<br>    init(_ value: Int) { self.value = value }<br>    let value: Int<br>    var hashValue: Int { return value.hashValue }<br>    var description: String { return String(value) }<br>}<br></p><p>func ==(lhs: CustomerID, rhs: CustomerID) -&gt; Bool {<br>    return lhs.value == rhs.value<br>}<br></p><p>While it isn’t too much code, it seems like a lot boilerplate.  I tried to reduce the boilerplate with protocol extensions.  After a little bit of compiler fighting I came up with:<br></p><p>public protocol IDType: Hashable, CustomStringConvertible {<br>    init(_ value: Int)<br>    var value: Int { get }<br>}<br></p><p>extension IDType {<br>    public var hashValue: Int { return value.hashValue }<br>    public var description: String { return String(value) }<br>}<br></p><p>Notes  (1) compiler made me declare my protocol public since Hashable and CustomStringConvertible are public. (2) I could not implement init(_ value: Int) in the extension so I have to do that each time (3) Self requirement built into Hashable meant that I could not implement an == for all IDTypes.  So the final product looks like the following.  Given the additional complexity, doesn’t seem like it is worth it. <br></p><p>public struct ProductID: IDType {<br>    public init(_ value: Int) { self.value = value }<br>    public let value: Int<br>}<br></p><p>public func ==(lhs: ProductID, rhs: ProductID) -&gt; Bool {<br>    return lhs.value == rhs.value<br>}<br></p><p>I wonder if the hive mind had any better ideas or different approaches for creating such types with minimal boilerplate.  [Is there a possible new language feature coming that will make this more trivial?]<br></p><p>Ray<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160517/14746f7e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Reducing the boilerplate for my ID types</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>May 17, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; I have some ID types that are simple ints coming back from a database.  I wanted to improve type safety so I don’t accidentally assign product IDs to user IDs, etc.  I want to be able to print it and use it as a dictionary key.  So it is a trivial wrapper of Int.  E.g.<br>&gt; <br>&gt; struct CustomerID: Hashable, CustomStringConvertible {<br>&gt;     init(_ value: Int) { self.value = value }<br>&gt;     let value: Int<br>&gt;     var hashValue: Int { return value.hashValue }<br>&gt;     var description: String { return String(value) }<br>&gt; }<br>&gt; <br>&gt; func ==(lhs: CustomerID, rhs: CustomerID) -&gt; Bool {<br>&gt;     return lhs.value == rhs.value<br>&gt; }<br></p><p>Rather than going the protocol route, how about a generic type?<br></p><p>    struct ID&lt;IdentifiableType: Identifiable&gt;: Hashable, CustomStringConvertible {<br>        init(_ value: Int) { self.value = value }<br>        let value: Int<br>        var hashValue: Int { return value.hashValue }<br>        var description: String { return String(value) }<br>    }<br></p><p>    func ==&lt;T: Identifiable&gt;(lhs: ID&lt;T&gt;, rhs: ID&lt;T&gt;) -&gt; Bool {<br>        return lhs.value == rhs.value<br>    }<br></p><p>    protocol Identifiable {<br>        var id: ID&lt;Self&gt;? { get }<br>    }<br></p><p>    struct Customer: Identifiable {<br>        var id: ID&lt;Customer&gt;?<br>    }<br></p><p><br>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Reducing the boilerplate for my ID types</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 17, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On May 17, 2016, at 9:24 PM, Brent Royal-Gordon via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; I have some ID types that are simple ints coming back from a database.  I wanted to improve type safety so I don’t accidentally assign product IDs to user IDs, etc.  I want to be able to print it and use it as a dictionary key.  So it is a trivial wrapper of Int.  E.g.<br>&gt;&gt; <br>&gt;&gt; struct CustomerID: Hashable, CustomStringConvertible {<br>&gt;&gt;    init(_ value: Int) { self.value = value }<br>&gt;&gt;    let value: Int<br>&gt;&gt;    var hashValue: Int { return value.hashValue }<br>&gt;&gt;    var description: String { return String(value) }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; func ==(lhs: CustomerID, rhs: CustomerID) -&gt; Bool {<br>&gt;&gt;    return lhs.value == rhs.value<br>&gt;&gt; }<br>&gt; <br>&gt; Rather than going the protocol route, how about a generic type?<br>&gt; <br>&gt;    struct ID&lt;IdentifiableType: Identifiable&gt;: Hashable, CustomStringConvertible {<br>&gt;        init(_ value: Int) { self.value = value }<br>&gt;        let value: Int<br>&gt;        var hashValue: Int { return value.hashValue }<br>&gt;        var description: String { return String(value) }<br>&gt;    }<br>&gt; <br>&gt;    func ==&lt;T: Identifiable&gt;(lhs: ID&lt;T&gt;, rhs: ID&lt;T&gt;) -&gt; Bool {<br>&gt;        return lhs.value == rhs.value<br>&gt;    }<br>&gt; <br>&gt;    protocol Identifiable {<br>&gt;        var id: ID&lt;Self&gt;? { get }<br>&gt;    }<br>&gt; <br>&gt;    struct Customer: Identifiable {<br>&gt;        var id: ID&lt;Customer&gt;?<br>&gt;    }<br></p><p>Nice!<br></p><p>&gt; <br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2af8daf170a3ed693e577a9471ea1f10?s=50"></div><header><strong>Reducing the boilerplate for my ID types</strong> from <string>Ray Fix</string> &lt;rayfix at gmail.com&gt;<p>May 17, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On May 17, 2016, at 7:24 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt; I have some ID types that are simple ints coming back from a database.  I wanted to improve type safety so I don’t accidentally assign product IDs to user IDs, etc.  I want to be able to print it and use it as a dictionary key.  So it is a trivial wrapper of Int.  E.g.<br>&gt;&gt; <br>&gt;&gt; struct CustomerID: Hashable, CustomStringConvertible {<br>&gt;&gt;    init(_ value: Int) { self.value = value }<br>&gt;&gt;    let value: Int<br>&gt;&gt;    var hashValue: Int { return value.hashValue }<br>&gt;&gt;    var description: String { return String(value) }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; func ==(lhs: CustomerID, rhs: CustomerID) -&gt; Bool {<br>&gt;&gt;    return lhs.value == rhs.value<br>&gt;&gt; }<br>&gt; <br>&gt; Rather than going the protocol route, how about a generic type?<br>&gt; <br>&gt;    struct ID&lt;IdentifiableType: Identifiable&gt;: Hashable, CustomStringConvertible {<br>&gt;        init(_ value: Int) { self.value = value }<br>&gt;        let value: Int<br>&gt;        var hashValue: Int { return value.hashValue }<br>&gt;        var description: String { return String(value) }<br>&gt;    }<br>&gt; <br>&gt;    func ==&lt;T: Identifiable&gt;(lhs: ID&lt;T&gt;, rhs: ID&lt;T&gt;) -&gt; Bool {<br>&gt;        return lhs.value == rhs.value<br>&gt;    }<br>&gt; <br>&gt;    protocol Identifiable {<br>&gt;        var id: ID&lt;Self&gt;? { get }<br>&gt;    }<br>&gt; <br>&gt;    struct Customer: Identifiable {<br>&gt;        var id: ID&lt;Customer&gt;?<br>&gt;    }<br>&gt; <br></p><p>Very cool!  Thank you.<br></p><p>Notes to self: <br></p><p>ID uses the Identifiable model as sort of a phantom type.  Given my current code base, it also convenient for me to do<br></p><p>typealias CustomerID = ID&lt;Customer&gt;<br></p><p>Being able to define new ID types in one line like this is exactly the solution I was looking for.<br></p><p>Ray<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
