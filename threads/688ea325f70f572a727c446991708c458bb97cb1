<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>SetAlgebra naming update</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>March 24, 2016 at 01:00:00pm</p></header><div class="content"><p>Just an update:<br></p><p>The naming guidelines working group went back into negotiation over<br>the shape of SetAlgebra (and thus, Set and OptionSet) for<br>Swift 3, and reached a new consensus.  We intend to bring forward a<br>proposal for the API shown here:<br></p><p>  http://dabrahams.github.io/swift-naming/SetAlgebra-Math.html<br></p><p>and to update the guidelines to suggest using the &quot;form&quot; prefix to<br>create a verb phrase for a mutating method when the operation is<br>fundamentally non-mutating and described by a noun.<br></p><p>Regards,<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>SetAlgebra naming update</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>March 25, 2016 at 07:00:00am</p></header><div class="content"><p>I would suggest xxxing and xxx naming like sorting and sort, e.g.:<br></p><p>    y  = x.unioning(z)<br>    x.union(z)<br></p><p>The consistency of naming is more important to me than correct English. The<br>reason for this preference is that it quickly becomes 2nd nature to know<br>the names of variations and because the names begin with the same root and<br>are therefore code completion friendly.<br></p><p>On Friday, 25 March 2016, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; Just an update:<br>&gt;<br>&gt; The naming guidelines working group went back into negotiation over<br>&gt; the shape of SetAlgebra (and thus, Set and OptionSet) for<br>&gt; Swift 3, and reached a new consensus.  We intend to bring forward a<br>&gt; proposal for the API shown here:<br>&gt;<br>&gt;   http://dabrahams.github.io/swift-naming/SetAlgebra-Math.html<br>&gt;<br>&gt; and to update the guidelines to suggest using the &quot;form&quot; prefix to<br>&gt; create a verb phrase for a mutating method when the operation is<br>&gt; fundamentally non-mutating and described by a noun.<br>&gt;<br>&gt; Regards,<br>&gt;<br>&gt; --<br>&gt; Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;javascript:;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p><br>-- <br>-- Howard.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160325/3d0dc2a4/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>SetAlgebra naming update</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>March 24, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; <br>&gt; On Mar 24, 2016, at 2:39 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Just an update:<br>&gt; <br>&gt; The naming guidelines working group went back into negotiation over<br>&gt; the shape of SetAlgebra (and thus, Set and OptionSet) for<br>&gt; Swift 3, and reached a new consensus.  We intend to bring forward a<br>&gt; proposal for the API shown here:<br>&gt; <br>&gt;  http://dabrahams.github.io/swift-naming/SetAlgebra-Math.html<br>&gt; <br>&gt; and to update the guidelines to suggest using the &quot;form&quot; prefix to<br>&gt; create a verb phrase for a mutating method when the operation is<br>&gt; fundamentally non-mutating and described by a noun.<br></p><p>I&#39;ve got to say, I expected to hate this until I clicked the link and saw the actual <br>proposed syntax. For the most part, it&#39;s good: clear and readable.<br></p><p>Not a fan of &quot;subtracting&quot; (would prefer &quot;bySubtracting&quot;). Other than that<br>really impressed by how this evolved.<br></p><p>-- E<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>SetAlgebra naming update</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>March 24, 2016 at 09:00:00pm</p></header><div class="content"><p>Much improved, IMO. A few thoughts:<br>* typo in &quot;formSymmetricDifference&quot;<br>* I don&#39;t know about the preposition &quot;from&quot; in &quot;form symmetric difference<br>from&quot; (also, inconsistent, because you don&#39;t have &quot;form union with&quot;)<br>* &quot;form&quot; is fine, but scans similarly to &quot;from&quot; when reading quickly<br></p><p>On Thu, Mar 24, 2016 at 3:41 PM Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; Just an update:<br>&gt;<br>&gt; The naming guidelines working group went back into negotiation over<br>&gt; the shape of SetAlgebra (and thus, Set and OptionSet) for<br>&gt; Swift 3, and reached a new consensus.  We intend to bring forward a<br>&gt; proposal for the API shown here:<br>&gt;<br>&gt;   http://dabrahams.github.io/swift-naming/SetAlgebra-Math.html<br>&gt;<br>&gt; and to update the guidelines to suggest using the &quot;form&quot; prefix to<br>&gt; create a verb phrase for a mutating method when the operation is<br>&gt; fundamentally non-mutating and described by a noun.<br>&gt;<br>&gt; Regards,<br>&gt;<br>&gt; --<br>&gt; Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160324/9bede15c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b1fc4ed1ed8e138ef0a87fd3e91c83a4?s=50"></div><header><strong>SetAlgebra naming update</strong> from <string>Ricardo Parada</string> &lt;rparada at mac.com&gt;<p>March 24, 2016 at 05:00:00pm</p></header><div class="content"><p>Hi all,<br></p><p>I could get used to the formNoun naming convention for the mutable versions of the methods. <br></p><p>I would suggest the following changes:<br></p><p>Remove the parameter label from symmetricDifference() and formSymmetricDifference() to be consistent with the other methods. <br></p><p>Consider renaming:<br>subtracting / subtract <br></p><p>to: <br>difference / formDifference<br></p><p>in order to keep the API consistent. <br></p><p>Thanks<br></p><p>&gt; On Mar 24, 2016, at 5:35 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Much improved, IMO. A few thoughts:<br>&gt; * typo in &quot;formSymmetricDifference&quot;<br>&gt; * I don&#39;t know about the preposition &quot;from&quot; in &quot;form symmetric difference from&quot; (also, inconsistent, because you don&#39;t have &quot;form union with&quot;)<br>&gt; * &quot;form&quot; is fine, but scans similarly to &quot;from&quot; when reading quickly<br>&gt; <br>&gt;&gt; On Thu, Mar 24, 2016 at 3:41 PM Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Just an update:<br>&gt;&gt; <br>&gt;&gt; The naming guidelines working group went back into negotiation over<br>&gt;&gt; the shape of SetAlgebra (and thus, Set and OptionSet) for<br>&gt;&gt; Swift 3, and reached a new consensus.  We intend to bring forward a<br>&gt;&gt; proposal for the API shown here:<br>&gt;&gt; <br>&gt;&gt;   http://dabrahams.github.io/swift-naming/SetAlgebra-Math.html<br>&gt;&gt; <br>&gt;&gt; and to update the guidelines to suggest using the &quot;form&quot; prefix to<br>&gt;&gt; create a verb phrase for a mutating method when the operation is<br>&gt;&gt; fundamentally non-mutating and described by a noun.<br>&gt;&gt; <br>&gt;&gt; Regards,<br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160324/646adede/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>SetAlgebra naming update</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>March 25, 2016 at 10:00:00am</p></header><div class="content"><p>Can we rename `subtract` to `complement`, since that’s the correct term? At least, I’m assuming that’s what `subtract` means… if not, I’m confused.<br>https://en.wikipedia.org/wiki/Set_(mathematics)#Complements<br></p><p>- Dave Sweeris<br></p><p>&gt; On Mar 24, 2016, at 3:39 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Just an update:<br>&gt; <br>&gt; The naming guidelines working group went back into negotiation over<br>&gt; the shape of SetAlgebra (and thus, Set and OptionSet) for<br>&gt; Swift 3, and reached a new consensus.  We intend to bring forward a<br>&gt; proposal for the API shown here:<br>&gt; <br>&gt;  http://dabrahams.github.io/swift-naming/SetAlgebra-Math.html<br>&gt; <br>&gt; and to update the guidelines to suggest using the &quot;form&quot; prefix to<br>&gt; create a verb phrase for a mutating method when the operation is<br>&gt; fundamentally non-mutating and described by a noun.<br>&gt; <br>&gt; Regards,<br>&gt; <br>&gt; -- <br>&gt; Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>SetAlgebra naming update</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>March 25, 2016 at 02:00:00pm</p></header><div class="content"><p>on Fri Mar 25 2016, davesweeris-AT-mac.com wrote:<br></p><p>&gt; Can we rename `subtract` to `complement`, since that’s the correct<br>&gt; term? At least, I’m assuming that’s what `subtract` means… if not, I’m<br>&gt; confused.<br>&gt; https://en.wikipedia.org/wiki/Set_(mathematics)#Complements<br></p><p>It&#39;s not just “complement,” because that means inverting set membership<br>of everything in a finite domain.  It would have to be “relative<br>complement.”  But “relative complement” lacks the directional<br>implication that plagues terms like “difference,” but not “subtracting.”<br></p><p>I think in this case “subtract” works better.<br></p><p>&gt;<br>&gt;<br>&gt; - Dave Sweeris<br>&gt;<br>&gt;&gt; On Mar 24, 2016, at 3:39 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Just an update:<br>&gt;&gt; <br>&gt;&gt; The naming guidelines working group went back into negotiation over<br>&gt;&gt; the shape of SetAlgebra (and thus, Set and OptionSet) for<br>&gt;&gt; Swift 3, and reached a new consensus.  We intend to bring forward a<br>&gt;&gt; proposal for the API shown here:<br>&gt;&gt; <br>&gt;&gt;  http://dabrahams.github.io/swift-naming/SetAlgebra-Math.html<br>&gt;&gt; <br>&gt;&gt; and to update the guidelines to suggest using the &quot;form&quot; prefix to<br>&gt;&gt; create a verb phrase for a mutating method when the operation is<br>&gt;&gt; fundamentally non-mutating and described by a noun.<br>&gt;&gt; <br>&gt;&gt; Regards,<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>SetAlgebra naming update</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>March 28, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On Mar 25, 2016, at 4:45 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt; on Fri Mar 25 2016, davesweeris-AT-mac.com wrote:<br>&gt; <br>&gt;&gt; Can we rename `subtract` to `complement`, since that’s the correct<br>&gt;&gt; term? At least, I’m assuming that’s what `subtract` means… if not, I’m<br>&gt;&gt; confused.<br>&gt;&gt; https://en.wikipedia.org/wiki/Set_(mathematics)#Complements<br>&gt; <br>&gt; It&#39;s not just “complement,” because that means inverting set membership<br>&gt; of everything in a finite domain.  It would have to be “relative<br>&gt; complement.”  But “relative complement” lacks the directional<br>&gt; implication that plagues terms like “difference,” but not “subtracting.”<br></p><p>Fair points… I accidentally left off the argument label. May I amend my suggestion to &quot;rename `subtract(:)` to `complement(relativeTo:)`”? It just seems to me that if we’re going to claim we’re implementing something, we should adopt as much of its “standard&quot; syntax and terminology as possible. It makes Swift easier to use for those coming from other disciplines, IMHO.<br></p><p>- Dave Sweeris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>SetAlgebra naming update</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>March 28, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Mar 28, 2016, at 6:19 PM, Dave via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Mar 25, 2016, at 4:45 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; on Fri Mar 25 2016, davesweeris-AT-mac.com wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Can we rename `subtract` to `complement`, since that’s the correct<br>&gt;&gt;&gt; term? At least, I’m assuming that’s what `subtract` means… if not, I’m<br>&gt;&gt;&gt; confused.<br>&gt;&gt;&gt; https://en.wikipedia.org/wiki/Set_(mathematics)#Complements<br>&gt;&gt; <br>&gt;&gt; It&#39;s not just “complement,” because that means inverting set membership<br>&gt;&gt; of everything in a finite domain.  It would have to be “relative<br>&gt;&gt; complement.”  But “relative complement” lacks the directional<br>&gt;&gt; implication that plagues terms like “difference,” but not “subtracting.”<br>&gt; <br>&gt; Fair points… I accidentally left off the argument label. May I amend my suggestion to &quot;rename `subtract(:)` to `complement(relativeTo:)`”? It just seems to me that if we’re going to claim we’re implementing something, we should adopt as much of its “standard&quot; syntax and terminology as possible. It makes Swift easier to use for those coming from other disciplines, IMHO.<br></p><p>If you took 100 random developers off the street, and showed them code that said:<br></p><p>set1.formRelativeComplement(set2)<br></p><p>and<br></p><p>set1.subtracting(set2)<br></p><p>About 99.5% of them would understand the second better than the first on first read. <br>The other 0.5 of a developer would be living somewhere near Boulder and growing <br>his own hemi-pharmaceuticals.<br></p><p>The problem with subtraction is that there isn&#39;t really a good noun/formNoun pair<br>for it. That means either breaking the pair into two words that aren&#39;t well matched<br>or using a noun that isn&#39;t that amazing, such as difference.<br></p><p>set1.difference(set2)<br>set1.formDifference(set2)<br></p><p>In all my attempts at trying to brainstorm up a better word that would (1) retain<br>the characteristics of mutating/non-mutating pairing while (2) being easy to read<br>and understand, I could not come up with better than Dave A&#39;s subtract/subtracting.<br>I may not like it aesthetically but when it comes to offering something better,<br>I&#39;ve got nothing.<br></p><p>That said, I&#39;d really like to see a Swift Doc markup that allows you to mark<br>pairs of mutating/nonmutating functions, not from a compiler point of<br>view but in doc markup.<br></p><p>/// - nonmutatingVersion: <br>/// - mutatingVersion:<br></p><p>What group handles expansion of the markup keywords and how can I file a<br>feature request asking for this to be added?<br></p><p>Thanks,<br></p><p>-- E<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160328/56e140fa/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>SetAlgebra naming update</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>March 28, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Mar 28, 2016, at 7:34 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Mar 28, 2016, at 6:19 PM, Dave via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Mar 25, 2016, at 4:45 PM, Dave Abrahams &lt;dabrahams at apple.com &lt;mailto:dabrahams at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Fri Mar 25 2016, davesweeris-AT-mac.com &lt;http://davesweeris-at-mac.com/&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Can we rename `subtract` to `complement`, since that’s the correct<br>&gt;&gt;&gt;&gt; term? At least, I’m assuming that’s what `subtract` means… if not, I’m<br>&gt;&gt;&gt;&gt; confused.<br>&gt;&gt;&gt;&gt; https://en.wikipedia.org/wiki/Set_(mathematics)#Complements &lt;https://en.wikipedia.org/wiki/Set_(mathematics)#Complements&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It&#39;s not just “complement,” because that means inverting set membership<br>&gt;&gt;&gt; of everything in a finite domain.  It would have to be “relative<br>&gt;&gt;&gt; complement.”  But “relative complement” lacks the directional<br>&gt;&gt;&gt; implication that plagues terms like “difference,” but not “subtracting.”<br>&gt;&gt; <br>&gt;&gt; Fair points… I accidentally left off the argument label. May I amend my suggestion to &quot;rename `subtract(:)` to `complement(relativeTo:)`”? It just seems to me that if we’re going to claim we’re implementing something, we should adopt as much of its “standard&quot; syntax and terminology as possible. It makes Swift easier to use for those coming from other disciplines, IMHO.<br>&gt; <br>&gt; If you took 100 random developers off the street, and showed them code that said:<br>&gt; <br>&gt; set1.formRelativeComplement(set2)<br>&gt; <br>&gt; and<br>&gt; <br>&gt; set1.subtracting(set2)<br>&gt; <br>&gt; About 99.5% of them would understand the second better than the first on first read. <br>&gt; The other 0.5 of a developer would be living somewhere near Boulder and growing <br>&gt; his own hemi-pharmaceuticals.<br>With my amended suggestion, that would read &quot;set1.formComplement(relativeTo: set2)”. Either way, though, if you’re claiming that “complement(relativeTo:)” or “complementRelativeTo(:)” shouldn’t be used because it’s too unrecognizable compared to the roughly-analogous term “subtract&quot;, then surely “union”, intersection”, and especially “symmetricDifference” all fail that test as well when compared to some very well-known terms:<br>set1.or(set2)    //union<br>set1.and(set2)   //intersection<br>set1.xor(set2)   //symmetric difference<br>(Plus, they work &amp; play well with non-unicode operators.)<br></p><p>My issue isn’t so much that the proposal doesn’t implement the “correct” mathematical notation, it’s that it uses a very formal-sounding name (&quot;Set Algebra”), and very nearly implements the basic operations of Set Theory (which sounds very similar to “Set Algebra”), but then falls short by renaming just one operation. Although, come to think of it, the proposal is missing `cartesianProduct` as well…  Oh well, at least it’s not in there under a different name. :-)<br></p><p><br></p><p>&gt; The problem with subtraction is that there isn&#39;t really a good noun/formNoun pair<br>&gt; for it. <br>...<br>&gt; In all my attempts at trying to brainstorm up a better word that would (1) retain<br>&gt; the characteristics of mutating/non-mutating pairing while (2) being easy to read<br>&gt; and understand, I could not come up with better than Dave A&#39;s subtract/subtracting.<br>&gt; I may not like it aesthetically but when it comes to offering something better,<br>&gt; I&#39;ve got nothing.<br>I think these two statements have the same root cause: Pretty much everyone has heard of subtraction, but the closest most people come to formally thinking about sets is trying to decide who to pick for their fantasy football team. The concept of operating on sets simply isn’t widespread enough for english to have a colloquial word which conveys the required meaning. “Subtract” does come close, but the AFAIK two concepts are only analogous in that subtraction is often first taught from the POV of “imagine a set of x elements, take away y of them, and count how many are left over” (see the first graphic in https://en.wikipedia.org/wiki/Subtraction, if that doesn’t ring a bell). The analogy doesn’t really work if your sets are, well, sets, as opposed to visual representations of numbers. The only other “widely-recognized” term that I can think of is “minus” (which I’d prefer over “subtract” because it seems less precisely defined to me). Neither one is a noun, though, so they both break the noun/formNoun pattern.<br></p><p>Speaking of nouns...<br>&gt; That means either breaking the pair into two words that aren&#39;t well matched<br>&gt; or using a noun that isn&#39;t that amazing, such as difference.<br>&gt; <br>&gt; set1.difference(set2)<br>&gt; set1.formDifference(set2)<br>You can gain the requisite “directional implication” Dave Abrahams was talking about by adding some labels:<br>set1.difference(from: set2)<br>set1.formDifference(from: set2)<br></p><p><br></p><p>&gt; That said, I&#39;d really like to see a Swift Doc markup that allows you to mark<br>&gt; pairs of mutating/nonmutating functions, not from a compiler point of<br>&gt; view but in doc markup.<br>&gt; <br>&gt; /// - nonmutatingVersion: <br>&gt; /// - mutatingVersion:<br>&gt; <br>&gt; What group handles expansion of the markup keywords and how can I file a<br>&gt; feature request asking for this to be added?<br>&gt; <br>&gt; Thanks,<br>&gt; <br>&gt; -- E<br>+1 :-)<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160328/a5ce5c0c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>SetAlgebra naming update</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>March 29, 2016 at 03:00:00am</p></header><div class="content"><p>I do believe, if we&#39;re going to try to go down the route of correctness,<br>that A \ B is generally spoken of as the complement of B in A, which I<br>guess could be written in Swift as `a.complement(of: b)`. However, that<br>doesn&#39;t read too well and I don&#39;t think it clarifies anything.<br></p><p>Alternatively, and this would be a bigger change but would be unambiguous<br>and correct, we could have it as `b.complement(in: a)`, which has the added<br>but practically useless virtue that a hypothetical universal complement<br>could be named in a consistent way as `b.complement()`.<br></p><p>Difference does seem to be the consensus word among most programming<br>languages for this method, and in Python it really is just<br>`a.difference(b)`. I don&#39;t think it&#39;s ever referred to as &quot;difference<br>from&quot;, and I would not know if `a.formDifference(from: b)` denotes A \ B or<br>B \ A without looking it up.<br></p><p>So, I guess, I&#39;d prefer subtract over &quot;difference from&quot;, as neither is<br>really mathematically correct and at least the former is unambiguous. If<br>the core team is willing to entertain b.complement(in: a), I&#39;d be +1 on<br>that. At the end of the day, this particular method will have to look<br>different from the others no matter what because it is unique in not being<br>commutative.<br>On Mon, Mar 28, 2016 at 9:59 PM Dave via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Mar 28, 2016, at 7:34 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Mar 28, 2016, at 6:19 PM, Dave via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Mar 25, 2016, at 4:45 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;<br>&gt; on Fri Mar 25 2016, davesweeris-AT-mac.com<br>&gt; &lt;http://davesweeris-at-mac.com/&gt; wrote:<br>&gt;<br>&gt; Can we rename `subtract` to `complement`, since that’s the correct<br>&gt; term? At least, I’m assuming that’s what `subtract` means… if not, I’m<br>&gt; confused.<br>&gt; https://en.wikipedia.org/wiki/Set_(mathematics)#Complements<br>&gt;<br>&gt;<br>&gt; It&#39;s not just “complement,” because that means inverting set membership<br>&gt; of everything in a finite domain.  It would have to be “relative<br>&gt; complement.”  But “relative complement” lacks the directional<br>&gt; implication that plagues terms like “difference,” but not “subtracting.”<br>&gt;<br>&gt;<br>&gt; Fair points… I accidentally left off the argument label. May I amend my<br>&gt; suggestion to &quot;rename `subtract(:)` to `complement(relativeTo:)`”? It just<br>&gt; seems to me that if we’re going to claim we’re implementing something, we<br>&gt; should adopt as much of its “standard&quot; syntax and terminology as possible.<br>&gt; It makes Swift easier to use for those coming from other disciplines, IMHO.<br>&gt;<br>&gt;<br>&gt; If you took 100 random developers off the street, and showed them code<br>&gt; that said:<br>&gt;<br>&gt; set1.formRelativeComplement(set2)<br>&gt;<br>&gt; and<br>&gt;<br>&gt; set1.subtracting(set2)<br>&gt;<br>&gt; About 99.5% of them would understand the second better than the first on<br>&gt; first read.<br>&gt; The other 0.5 of a developer would be living somewhere near Boulder and<br>&gt; growing<br>&gt; his own hemi-pharmaceuticals.<br>&gt;<br>&gt; With my amended suggestion, that would read &quot;set1.formComplement(relativeTo:<br>&gt; set2)”. Either way, though, if you’re claiming that<br>&gt; “complement(relativeTo:)” or “complementRelativeTo(:)” shouldn’t be used<br>&gt; because it’s too unrecognizable compared to the roughly-analogous term<br>&gt; “subtract&quot;, then surely “union”, intersection”, and especially<br>&gt; “symmetricDifference” all fail that test as well when compared to some very<br>&gt; well-known terms:<br>&gt; set1.or(set2)    //union<br>&gt; set1.and(set2)   //intersection<br>&gt; set1.xor(set2)   //symmetric difference<br>&gt; (Plus, they work &amp; play well with non-unicode operators.)<br>&gt;<br>&gt; My issue isn’t so much that the proposal doesn’t implement the “correct”<br>&gt; mathematical notation, it’s that it uses a very formal-sounding name (&quot;Set<br>&gt; Algebra”), and very nearly implements the basic operations of Set Theory<br>&gt; (which sounds very similar to “Set Algebra”), but then falls short by<br>&gt; renaming just one operation. Although, come to think of it, the proposal is<br>&gt; missing `cartesianProduct` as well…  Oh well, at least it’s not in there<br>&gt; under a different name. :-)<br>&gt;<br>&gt;<br>&gt;<br>&gt; The problem with subtraction is that there isn&#39;t really a good<br>&gt; noun/formNoun pair<br>&gt; for it.<br>&gt;<br>&gt; ...<br>&gt;<br>&gt; In all my attempts at trying to brainstorm up a better word that would (1)<br>&gt; retain<br>&gt; the characteristics of mutating/non-mutating pairing while (2) being easy<br>&gt; to read<br>&gt; and understand, I could not come up with better than Dave A&#39;s<br>&gt; subtract/subtracting.<br>&gt; I may not like it aesthetically but when it comes to offering something<br>&gt; better,<br>&gt; I&#39;ve got nothing.<br>&gt;<br>&gt; I think these two statements have the same root cause: Pretty much<br>&gt; everyone has heard of subtraction, but the closest most people come to<br>&gt; formally thinking about sets is trying to decide who to pick for their<br>&gt; fantasy football team. The concept of operating on sets simply isn’t<br>&gt; widespread enough for english to have a colloquial word which conveys the<br>&gt; required meaning. “Subtract” does come close, but the AFAIK two concepts<br>&gt; are only analogous in that subtraction is often first taught from the POV<br>&gt; of “imagine a set of x elements, take away y of them, and count how many<br>&gt; are left over” (see the first graphic in<br>&gt; https://en.wikipedia.org/wiki/Subtraction, if that doesn’t ring a bell).<br>&gt; The analogy doesn’t really work if your sets are, well, sets, as opposed to<br>&gt; visual representations of numbers. The only other “widely-recognized” term<br>&gt; that I can think of is “minus” (which I’d prefer over “subtract” because it<br>&gt; seems less precisely defined to me). Neither one is a noun, though, so they<br>&gt; both break the noun/formNoun pattern.<br>&gt;<br>&gt; Speaking of nouns...<br>&gt;<br>&gt; That means either breaking the pair into two words that aren&#39;t well matched<br>&gt; or using a noun that isn&#39;t that amazing, such as difference.<br>&gt;<br>&gt; set1.difference(set2)<br>&gt; set1.formDifference(set2)<br>&gt;<br>&gt; You can gain the requisite “directional implication” Dave Abrahams was<br>&gt; talking about by adding some labels:<br>&gt; set1.difference(from: set2)<br>&gt; set1.formDifference(from: set2)<br>&gt;<br>&gt;<br>&gt;<br>&gt; That said, I&#39;d really like to see a Swift Doc markup that allows you to<br>&gt; mark<br>&gt; pairs of mutating/nonmutating functions, not from a compiler point of<br>&gt; view but in doc markup.<br>&gt;<br>&gt; /// - nonmutatingVersion:<br>&gt; /// - mutatingVersion:<br>&gt;<br>&gt; What group handles expansion of the markup keywords and how can I file a<br>&gt; feature request asking for this to be added?<br>&gt;<br>&gt; Thanks,<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt; +1 :-)<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160329/c955f3d0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5af07e950f10c7c1df1c44bed055c1eb?s=50"></div><header><strong>SetAlgebra naming update</strong> from <string>Daniel Steinberg</string> &lt;daniel at dimsumthinking.com&gt;<p>March 29, 2016 at 08:00:00pm</p></header><div class="content"><p>We do talk about set “minus”. So A \ B is also written A - B and is A union B complement. Although you can properly use the word complement to refer to A \ B, it generally applies to one set. So B complement is the set of elements that don’t belong to A. <br></p><p>Formally, I think what you’re referring to is the analog of “-“ in ordinary arithmetic having meaning as a unary operator and as an infix operator.<br></p><p>I tend to use minus for A - B, complement for B complement, and difference for the symmetric difference of A and B (which is (A union B) - (A intersect B))<br></p><p>Best,<br></p><p>Daniel <br>&gt; On Mar 29, 2016, at 5:28 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I do believe, if we&#39;re going to try to go down the route of correctness, that A \ B is generally spoken of as the complement of B in A, which I guess could be written in Swift as `a.complement(of: b)`. However, that doesn&#39;t read too well and I don&#39;t think it clarifies anything.<br>&gt; <br>&gt; Alternatively, and this would be a bigger change but would be unambiguous and correct, we could have it as `b.complement(in: a)`, which has the added but practically useless virtue that a hypothetical universal complement could be named in a consistent way as `b.complement()`.<br>&gt; <br>&gt; Difference does seem to be the consensus word among most programming languages for this method, and in Python it really is just `a.difference(b)`. I don&#39;t think it&#39;s ever referred to as &quot;difference from&quot;, and I would not know if `a.formDifference(from: b)` denotes A \ B or B \ A without looking it up.<br>&gt; <br>&gt; So, I guess, I&#39;d prefer subtract over &quot;difference from&quot;, as neither is really mathematically correct and at least the former is unambiguous. If the core team is willing to entertain b.complement(in: a), I&#39;d be +1 on that. At the end of the day, this particular method will have to look different from the others no matter what because it is unique in not being commutative.<br>&gt; On Mon, Mar 28, 2016 at 9:59 PM Dave via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; On Mar 28, 2016, at 7:34 PM, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Mar 28, 2016, at 6:19 PM, Dave via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Mar 25, 2016, at 4:45 PM, Dave Abrahams &lt;dabrahams at apple.com &lt;mailto:dabrahams at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; on Fri Mar 25 2016, davesweeris-AT-mac.com &lt;http://davesweeris-at-mac.com/&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Can we rename `subtract` to `complement`, since that’s the correct<br>&gt;&gt;&gt;&gt;&gt; term? At least, I’m assuming that’s what `subtract` means… if not, I’m<br>&gt;&gt;&gt;&gt;&gt; confused.<br>&gt;&gt;&gt;&gt;&gt; https://en.wikipedia.org/wiki/Set_(mathematics)#Complements &lt;https://en.wikipedia.org/wiki/Set_(mathematics)#Complements&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It&#39;s not just “complement,” because that means inverting set membership<br>&gt;&gt;&gt;&gt; of everything in a finite domain.  It would have to be “relative<br>&gt;&gt;&gt;&gt; complement.”  But “relative complement” lacks the directional<br>&gt;&gt;&gt;&gt; implication that plagues terms like “difference,” but not “subtracting.”<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Fair points… I accidentally left off the argument label. May I amend my suggestion to &quot;rename `subtract(:)` to `complement(relativeTo:)`”? It just seems to me that if we’re going to claim we’re implementing something, we should adopt as much of its “standard&quot; syntax and terminology as possible. It makes Swift easier to use for those coming from other disciplines, IMHO.<br>&gt;&gt; <br>&gt;&gt; If you took 100 random developers off the street, and showed them code that said:<br>&gt;&gt; <br>&gt;&gt; set1.formRelativeComplement(set2)<br>&gt;&gt; <br>&gt;&gt; and<br>&gt;&gt; <br>&gt;&gt; set1.subtracting(set2)<br>&gt;&gt; <br>&gt;&gt; About 99.5% of them would understand the second better than the first on first read. <br>&gt;&gt; The other 0.5 of a developer would be living somewhere near Boulder and growing <br>&gt;&gt; his own hemi-pharmaceuticals.<br>&gt; <br>&gt; With my amended suggestion, that would read &quot;set1.formComplement(relativeTo: set2)”. Either way, though, if you’re claiming that “complement(relativeTo:)” or “complementRelativeTo(:)” shouldn’t be used because it’s too unrecognizable compared to the roughly-analogous term “subtract&quot;, then surely “union”, intersection”, and especially “symmetricDifference” all fail that test as well when compared to some very well-known terms:<br>&gt; set1.or(set2)    //union<br>&gt; set1.and(set2)   //intersection<br>&gt; set1.xor(set2)   //symmetric difference<br>&gt; (Plus, they work &amp; play well with non-unicode operators.)<br>&gt; <br>&gt; My issue isn’t so much that the proposal doesn’t implement the “correct” mathematical notation, it’s that it uses a very formal-sounding name (&quot;Set Algebra”), and very nearly implements the basic operations of Set Theory (which sounds very similar to “Set Algebra”), but then falls short by renaming just one operation. Although, come to think of it, the proposal is missing `cartesianProduct` as well…  Oh well, at least it’s not in there under a different name. :-)<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; The problem with subtraction is that there isn&#39;t really a good noun/formNoun pair<br>&gt;&gt; for it. <br>&gt; <br>&gt; ...<br>&gt; <br>&gt;&gt; In all my attempts at trying to brainstorm up a better word that would (1) retain<br>&gt;&gt; the characteristics of mutating/non-mutating pairing while (2) being easy to read<br>&gt;&gt; and understand, I could not come up with better than Dave A&#39;s subtract/subtracting.<br>&gt;&gt; I may not like it aesthetically but when it comes to offering something better,<br>&gt;&gt; I&#39;ve got nothing.<br>&gt; <br>&gt; I think these two statements have the same root cause: Pretty much everyone has heard of subtraction, but the closest most people come to formally thinking about sets is trying to decide who to pick for their fantasy football team. The concept of operating on sets simply isn’t widespread enough for english to have a colloquial word which conveys the required meaning. “Subtract” does come close, but the AFAIK two concepts are only analogous in that subtraction is often first taught from the POV of “imagine a set of x elements, take away y of them, and count how many are left over” (see the first graphic in https://en.wikipedia.org/wiki/Subtraction &lt;https://en.wikipedia.org/wiki/Subtraction&gt;, if that doesn’t ring a bell). The analogy doesn’t really work if your sets are, well, sets, as opposed to visual representations of numbers. The only other “widely-recognized” term that I can think of is “minus” (which I’d prefer over “subtract” because it seems less precisely defined to me). Neither one is a noun, though, so they both break the noun/formNoun pattern.<br>&gt; <br>&gt; Speaking of nouns...<br>&gt;&gt; That means either breaking the pair into two words that aren&#39;t well matched<br>&gt;&gt; or using a noun that isn&#39;t that amazing, such as difference.<br>&gt;&gt; <br>&gt;&gt; set1.difference(set2)<br>&gt;&gt; set1.formDifference(set2)<br>&gt; <br>&gt; You can gain the requisite “directional implication” Dave Abrahams was talking about by adding some labels:<br>&gt; set1.difference(from: set2)<br>&gt; set1.formDifference(from: set2)<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; That said, I&#39;d really like to see a Swift Doc markup that allows you to mark<br>&gt;&gt; pairs of mutating/nonmutating functions, not from a compiler point of<br>&gt;&gt; view but in doc markup.<br>&gt;&gt; <br>&gt;&gt; /// - nonmutatingVersion: <br>&gt;&gt; /// - mutatingVersion:<br>&gt;&gt; <br>&gt;&gt; What group handles expansion of the markup keywords and how can I file a<br>&gt;&gt; feature request asking for this to be added?<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; <br>&gt;&gt; -- E<br>&gt; <br>&gt; +1 :-)<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160329/3bb456b8/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>SetAlgebra naming update</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>March 28, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Mar 28, 2016, at 5:34 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; That said, I&#39;d really like to see a Swift Doc markup that allows you to mark<br>&gt; pairs of mutating/nonmutating functions, not from a compiler point of<br>&gt; view but in doc markup.<br>&gt; <br>&gt; /// - nonmutatingVersion: <br>&gt; /// - mutatingVersion:<br>&gt; <br>&gt; What group handles expansion of the markup keywords and how can I file a<br>&gt; feature request asking for this to be added?<br></p><p>swift-evolution is the right place for this.  As I mentioned in a different thread, I think that having a more general “relatedto:” notion would be useful to have.  There are interesting relations between methods other than mutation.  One example is the localized vs non-localized versions of string operations, etc.<br></p><p>-Chris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160328/21036d53/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>SetAlgebra naming update</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>March 28, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On Mar 28, 2016, at 10:25 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Mar 28, 2016, at 5:34 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; That said, I&#39;d really like to see a Swift Doc markup that allows you to mark<br>&gt;&gt; pairs of mutating/nonmutating functions, not from a compiler point of<br>&gt;&gt; view but in doc markup.<br>&gt;&gt; <br>&gt;&gt; /// - nonmutatingVersion: <br>&gt;&gt; /// - mutatingVersion:<br>&gt;&gt; <br>&gt;&gt; What group handles expansion of the markup keywords and how can I file a<br>&gt;&gt; feature request asking for this to be added?<br>&gt; <br>&gt; swift-evolution is the right place for this.  As I mentioned in a different thread, I think that having a more general “relatedto:” notion would be useful to have.  There are interesting relations between methods other than mutation.  One example is the localized vs non-localized versions of string operations, etc.<br>&gt; <br>&gt; -Chris<br></p><p>The current markup includes: attention, important, note, remark, <br>and SeeAlso, which could all theoretically convey this information.  I don&#39;t<br>think RelatedTo offers a distinct advantage over the existing SeeAlso in <br>particular, as in most programming markup, SeeAlso already provides <br>cross-references to related constructs, methods, files, and URLs.<br></p><p>I am moved particularly by the recommended/recommendedOver pair in<br>terms of pushing for a specific Swift keyword expansion.  Let me go<br>for what I call the &quot;Hail Dave A&quot; defense on this one:<br></p><p>* Mutating and non-mutating pairs are specifically called out in the API naming guide. <br>* They reflect a specific Swift pattern that differentiates functional implementations <br>  from their related procedural cousins.  <br>* Using mutation-specific keywords avoids ambiguity that might be introduced by <br>  &quot;let self = nonMutatingCall&quot; patterns. These keywords support the developer in<br>   both directions.<br>* Using named keywords instantly identifies why the documentation is calling these items <br>  out and promoting their names, rather than promoting some  general relationship. <br>* The keywords support the expert and guide the beginner, adding value in a way RelatedTo cannot.<br></p><p>I believe localized vs non-localized string operations would be better covered<br>under the existing SeeAlso. Localization is not a Swift-specific pattern the way mutable <br>pairing is. While common, there is no inherent language basis for relating these methods.<br></p><p>-- Erica<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160328/638822e9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>SetAlgebra naming update</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>March 29, 2016 at 04:00:00pm</p></header><div class="content"><p>On Mar 28, 2016, at 10:05 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; swift-evolution is the right place for this.  As I mentioned in a different thread, I think that having a more general “relatedto:” notion would be useful to have.  There are interesting relations between methods other than mutation.  One example is the localized vs non-localized versions of string operations, etc.<br>&gt;&gt; <br>&gt; <br>&gt; The current markup includes: attention, important, note, remark, <br>&gt; and SeeAlso, which could all theoretically convey this information.  I don&#39;t<br>&gt; think RelatedTo offers a distinct advantage over the existing SeeAlso in <br>&gt; particular, as in most programming markup, SeeAlso already provides <br>&gt; cross-references to related constructs, methods, files, and URLs.<br></p><p>I agree SeeAlso seems sufficient.<br></p><p>&gt; I am moved particularly by the recommended/recommendedOver pair in<br>&gt; terms of pushing for a specific Swift keyword expansion.  Let me go<br>&gt; for what I call the &quot;Hail Dave A&quot; defense on this one:<br>&gt; <br>&gt; * Mutating and non-mutating pairs are specifically called out in the API naming guide. <br>&gt; * They reflect a specific Swift pattern that differentiates functional implementations <br>&gt;   from their related procedural cousins.  <br>&gt; * Using mutation-specific keywords avoids ambiguity that might be introduced by <br>&gt;   &quot;let self = nonMutatingCall&quot; patterns. These keywords support the developer in<br>&gt;    both directions.<br>&gt; * Using named keywords instantly identifies why the documentation is calling these items <br>&gt;   out and promoting their names, rather than promoting some  general relationship. <br>&gt; * The keywords support the expert and guide the beginner, adding value in a way RelatedTo cannot.<br>&gt; <br>&gt; I believe localized vs non-localized string operations would be better covered<br>&gt; under the existing SeeAlso. Localization is not a Swift-specific pattern the way mutable <br>&gt; pairing is. While common, there is no inherent language basis for relating these methods.<br></p><p>I’m not really seeing this, but in any case, I think you should start a new thread.  This discussion is buried in an unrelated thread about set naming, so many possibly interested folks aren’t looking at it.<br></p><p>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160329/3b1c18ba/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>SetAlgebra naming update</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>March 28, 2016 at 10:00:00am</p></header><div class="content"><p>I don&#39;t love it but given how long we&#39;ve spent discussing this and you&#39;ve spent thinking about it I can believe it&#39;s the answer that makes the most sense. I do have one question: what are &#39;element(_:subsumes:)&#39; and &#39;element(_:isDisjointWith:)&#39; for? Imported option sets with non-orthogonal options? I know that&#39;s not that uncommon, but I don&#39;t know why I would need dedicated operations for it, especially when these types have Element == Self.<br></p><p>(The naming guidelines also fall down on static methods like this. The base name doesn&#39;t describe the operation at all.)<br></p><p>Jordan<br></p><p>&gt; On Mar 24, 2016, at 13:39, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Just an update:<br>&gt; <br>&gt; The naming guidelines working group went back into negotiation over<br>&gt; the shape of SetAlgebra (and thus, Set and OptionSet) for<br>&gt; Swift 3, and reached a new consensus.  We intend to bring forward a<br>&gt; proposal for the API shown here:<br>&gt; <br>&gt;  http://dabrahams.github.io/swift-naming/SetAlgebra-Math.html<br>&gt; <br>&gt; and to update the guidelines to suggest using the &quot;form&quot; prefix to<br>&gt; create a verb phrase for a mutating method when the operation is<br>&gt; fundamentally non-mutating and described by a noun.<br>&gt; <br>&gt; Regards,<br>&gt; <br>&gt; -- <br>&gt; Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160328/cbd961c7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>SetAlgebra naming update</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>March 28, 2016 at 10:00:00am</p></header><div class="content"><p>on Mon Mar 28 2016, Jordan Rose &lt;jordan_rose-AT-apple.com&gt; wrote:<br></p><p>&gt; I don&#39;t love it but given how long we&#39;ve spent discussing this and<br>&gt; you&#39;ve spent thinking about it I can believe it&#39;s the answer that<br>&gt; makes the most sense. I do have one question: what are<br>&gt; &#39;element(_:subsumes:)&#39; and &#39;element(_:isDisjointWith:)&#39; for? Imported<br>&gt; option sets with non-orthogonal options? I know that&#39;s not that<br>&gt; uncommon, but I don&#39;t know why I would need dedicated operations for<br>&gt; it, especially when these types have Element == Self.<br></p><p>You don&#39;t need them; they&#39;re there so sensible semantic axioms could be<br>established for SetAlgebra.  Eventually, we&#39;ll get rid of Element ==<br>Self and we can retire those too :-)<br></p><p>&gt; (The naming guidelines also fall down on static methods like this. The<br>&gt; base name doesn&#39;t describe the operation at all.)<br>&gt;<br>&gt;<br>&gt; Jordan<br>&gt;<br>&gt;&gt; On Mar 24, 2016, at 13:39, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Just an update:<br>&gt;&gt; <br>&gt;&gt; The naming guidelines working group went back into negotiation over<br>&gt;&gt; the shape of SetAlgebra (and thus, Set and OptionSet) for<br>&gt;&gt; Swift 3, and reached a new consensus.  We intend to bring forward a<br>&gt;&gt; proposal for the API shown here:<br>&gt;&gt; <br>&gt;&gt;  http://dabrahams.github.io/swift-naming/SetAlgebra-Math.html<br>&gt;&gt; <br>&gt;&gt; and to update the guidelines to suggest using the &quot;form&quot; prefix to<br>&gt;&gt; create a verb phrase for a mutating method when the operation is<br>&gt;&gt; fundamentally non-mutating and described by a noun.<br>&gt;&gt; <br>&gt;&gt; Regards,<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p>-- <br>Dave<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>SetAlgebra naming update</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>March 30, 2016 at 12:00:00am</p></header><div class="content"><p>I think that this is a great improvement and is consistent enough to<br>accept. `form` will take some getting used to.<br>TJ<br></p><p>On Thu, Mar 24, 2016 at 9:39 PM, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; Just an update:<br>&gt;<br>&gt; The naming guidelines working group went back into negotiation over<br>&gt; the shape of SetAlgebra (and thus, Set and OptionSet) for<br>&gt; Swift 3, and reached a new consensus.  We intend to bring forward a<br>&gt; proposal for the API shown here:<br>&gt;<br>&gt;   http://dabrahams.github.io/swift-naming/SetAlgebra-Math.html<br>&gt;<br>&gt; and to update the guidelines to suggest using the &quot;form&quot; prefix to<br>&gt; create a verb phrase for a mutating method when the operation is<br>&gt; fundamentally non-mutating and described by a noun.<br>&gt;<br>&gt; Regards,<br>&gt;<br>&gt; --<br>&gt; Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160330/0f8f47d7/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
