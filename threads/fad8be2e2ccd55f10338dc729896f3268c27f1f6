<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/af0484aaac7ae5a28cf97e7fbdf16f18?s=50"></div><header><strong>Objective-C Foundation vs CoreLibs Foundation</strong> from <string>David Hart</string> &lt;david.w.hart at me.com&gt;<p>May 22, 2016 at 05:00:00pm</p></header><div class="content"><p>Hello,<br></p><p>The discussion we had previously on this mailing list made it quite clear that:<br></p><p>- Objective-C Foundation is the framework that is supposed to be used on all Darwin platforms,<br>- swift-corelibs-foundation will be the Foundation framework for all other platforms,<br>- Both frameworks will evolve slowly together.<br></p><p>Therefore, it makes sense that for code written against Foundation to be portable, the swift-corelibs-foundation APIs and behavior needs to be identical to Darwin Foundation. Hence the following questions?<br></p><p>- Shouldn&#39;t we be writing tests in a way so that they can be run against Darwin Foundation and have the CI Server run them? For example: while working on NSProgress, I write a bunch of tests against Darwin Foundation, make sure they pass, then copy-paste them in the CoreLibs project, and fix the implementation until they pass. This makes sure that both APIs are consistent with each other. I was thinking that we ought to automate this and have the CI server test them.<br></p><p>- How are we planning to reconcile the API differences between both frameworks? For examples, one of my tests will run against CoreLibs but not against Darwin because NSThread.init takes a closure as argument in CoreLibs but a target+selector in Darwin. This is just one example, but I guess they are other inconsistencies elsewhere. This seems to be particularly the case with APIs that rely on the Objective-C runtime.<br></p><p>In general, I&#39;m starting to worry about the state of Foundation from a portability point of view. Once Swift 3 is released, I want to start writing portable swift code that relies on Foundation. And it seems like this will require a huge amount of #if os() everywhere to cope with the differences.<br></p><p>David<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Objective-C Foundation vs CoreLibs Foundation</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>May 23, 2016 at 08:00:00am</p></header><div class="content"><p>Hi David,<br></p><p>&gt; On May 22, 2016, at 8:15 AM, David Hart via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello,<br>&gt; <br>&gt; The discussion we had previously on this mailing list made it quite clear that:<br>&gt; <br>&gt; - Objective-C Foundation is the framework that is supposed to be used on all Darwin platforms,<br>&gt; - swift-corelibs-foundation will be the Foundation framework for all other platforms,<br>&gt; - Both frameworks will evolve slowly together.<br></p><p>Yup.<br></p><p>&gt; <br>&gt; Therefore, it makes sense that for code written against Foundation to be portable, the swift-corelibs-foundation APIs and behavior needs to be identical to Darwin Foundation. Hence the following questions?<br>&gt; <br>&gt; - Shouldn&#39;t we be writing tests in a way so that they can be run against Darwin Foundation and have the CI Server run them? For example: while working on NSProgress, I write a bunch of tests against Darwin Foundation, make sure they pass, then copy-paste them in the CoreLibs project, and fix the implementation until they pass. This makes sure that both APIs are consistent with each other. I was thinking that we ought to automate this and have the CI server test them.<br></p><p>That would be a great step. This is part of the reason we tried to set up the dependencies of Foundation on XCTest the way we did, and provide the Xcode project file; so we could share tests. I would welcome any help we can get on improving our automation story here.<br></p><p>&gt; <br>&gt; - How are we planning to reconcile the API differences between both frameworks? For examples, one of my tests will run against CoreLibs but not against Darwin because NSThread.init takes a closure as argument in CoreLibs but a target+selector in Darwin. This is just one example, but I guess they are other inconsistencies elsewhere. This seems to be particularly the case with APIs that rely on the Objective-C runtime.<br>&gt; <br></p><p>These should be marked as “experimental” in the documentation comments. If not, we should do that.<br></p><p>There are some areas where we just don’t know what to do yet, because of the lack of the ObjC runtime and implicit bridging on Linux. In some of those places we’ve tried to provide a replacement API and mark it as experimental until we can figure out the larger story.<br></p><p>&gt; In general, I&#39;m starting to worry about the state of Foundation from a portability point of view. Once Swift 3 is released, I want to start writing portable swift code that relies on Foundation. And it seems like this will require a huge amount of #if os() everywhere to cope with the differences.<br>&gt; <br>&gt; David<br>&gt; <br></p><p>Our long term goal is to enable developers to do this. I acknowledge that we have a ways to go to get there. I’ve seen an uptick in contributions recently, which gives me hope that we can get closer before the release of Swift 3.<br></p><p>- Tony<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Objective-C Foundation vs CoreLibs Foundation</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>May 24, 2016 at 12:00:00am</p></header><div class="content"><p>Would you agree that the first step should be to have the project as a SwiftPM package so that we have a more consistent way to run tests on all platforms? Do you know if SwiftPM is far enough to support swift-corelibs-foundation? I might have a go at it once I finish implementing NSProgress (about half way through I think).<br></p><p>&gt; On 23 May 2016, at 17:59, Tony Parker via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi David,<br>&gt; <br>&gt;&gt; On May 22, 2016, at 8:15 AM, David Hart via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello,<br>&gt;&gt; <br>&gt;&gt; The discussion we had previously on this mailing list made it quite clear that:<br>&gt;&gt; <br>&gt;&gt; - Objective-C Foundation is the framework that is supposed to be used on all Darwin platforms,<br>&gt;&gt; - swift-corelibs-foundation will be the Foundation framework for all other platforms,<br>&gt;&gt; - Both frameworks will evolve slowly together.<br>&gt; <br>&gt; Yup.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Therefore, it makes sense that for code written against Foundation to be portable, the swift-corelibs-foundation APIs and behavior needs to be identical to Darwin Foundation. Hence the following questions?<br>&gt;&gt; <br>&gt;&gt; - Shouldn&#39;t we be writing tests in a way so that they can be run against Darwin Foundation and have the CI Server run them? For example: while working on NSProgress, I write a bunch of tests against Darwin Foundation, make sure they pass, then copy-paste them in the CoreLibs project, and fix the implementation until they pass. This makes sure that both APIs are consistent with each other. I was thinking that we ought to automate this and have the CI server test them.<br>&gt; <br>&gt; That would be a great step. This is part of the reason we tried to set up the dependencies of Foundation on XCTest the way we did, and provide the Xcode project file; so we could share tests. I would welcome any help we can get on improving our automation story here.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; - How are we planning to reconcile the API differences between both frameworks? For examples, one of my tests will run against CoreLibs but not against Darwin because NSThread.init takes a closure as argument in CoreLibs but a target+selector in Darwin. This is just one example, but I guess they are other inconsistencies elsewhere. This seems to be particularly the case with APIs that rely on the Objective-C runtime.<br>&gt; <br>&gt; These should be marked as “experimental” in the documentation comments. If not, we should do that.<br>&gt; <br>&gt; There are some areas where we just don’t know what to do yet, because of the lack of the ObjC runtime and implicit bridging on Linux. In some of those places we’ve tried to provide a replacement API and mark it as experimental until we can figure out the larger story.<br>&gt; <br>&gt;&gt; In general, I&#39;m starting to worry about the state of Foundation from a portability point of view. Once Swift 3 is released, I want to start writing portable swift code that relies on Foundation. And it seems like this will require a huge amount of #if os() everywhere to cope with the differences.<br>&gt;&gt; <br>&gt;&gt; David<br>&gt; <br>&gt; Our long term goal is to enable developers to do this. I acknowledge that we have a ways to go to get there. I’ve seen an uptick in contributions recently, which gives me hope that we can get closer before the release of Swift 3.<br>&gt; <br>&gt; - Tony<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>Objective-C Foundation vs CoreLibs Foundation</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>May 23, 2016 at 03:00:00pm</p></header><div class="content"><p>There are a few considerations for the package manager: we may have circular build requirements, swift-corelibs-foundation does some squirrelly things with linking and compilation like linker scripts and tacked on assembly data segments. I am not certain those edge use cases are supported yet.<br></p><p>The Python config file is way too complex as it is and was only really designed as a stopgap measure. If we can simplify I think it would definitely improve the state of things: it is worth investigating.<br></p><p>Sent from my iPhone<br></p><p>&gt; On May 23, 2016, at 3:03 PM, David Hart via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Would you agree that the first step should be to have the project as a SwiftPM package so that we have a more consistent way to run tests on all platforms? Do you know if SwiftPM is far enough to support swift-corelibs-foundation? I might have a go at it once I finish implementing NSProgress (about half way through I think).<br>&gt; <br>&gt;&gt; On 23 May 2016, at 17:59, Tony Parker via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi David,<br>&gt;&gt; <br>&gt;&gt;&gt; On May 22, 2016, at 8:15 AM, David Hart via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The discussion we had previously on this mailing list made it quite clear that:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Objective-C Foundation is the framework that is supposed to be used on all Darwin platforms,<br>&gt;&gt;&gt; - swift-corelibs-foundation will be the Foundation framework for all other platforms,<br>&gt;&gt;&gt; - Both frameworks will evolve slowly together.<br>&gt;&gt; <br>&gt;&gt; Yup.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Therefore, it makes sense that for code written against Foundation to be portable, the swift-corelibs-foundation APIs and behavior needs to be identical to Darwin Foundation. Hence the following questions?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Shouldn&#39;t we be writing tests in a way so that they can be run against Darwin Foundation and have the CI Server run them? For example: while working on NSProgress, I write a bunch of tests against Darwin Foundation, make sure they pass, then copy-paste them in the CoreLibs project, and fix the implementation until they pass. This makes sure that both APIs are consistent with each other. I was thinking that we ought to automate this and have the CI server test them.<br>&gt;&gt; <br>&gt;&gt; That would be a great step. This is part of the reason we tried to set up the dependencies of Foundation on XCTest the way we did, and provide the Xcode project file; so we could share tests. I would welcome any help we can get on improving our automation story here.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - How are we planning to reconcile the API differences between both frameworks? For examples, one of my tests will run against CoreLibs but not against Darwin because NSThread.init takes a closure as argument in CoreLibs but a target+selector in Darwin. This is just one example, but I guess they are other inconsistencies elsewhere. This seems to be particularly the case with APIs that rely on the Objective-C runtime.<br>&gt;&gt; <br>&gt;&gt; These should be marked as “experimental” in the documentation comments. If not, we should do that.<br>&gt;&gt; <br>&gt;&gt; There are some areas where we just don’t know what to do yet, because of the lack of the ObjC runtime and implicit bridging on Linux. In some of those places we’ve tried to provide a replacement API and mark it as experimental until we can figure out the larger story.<br>&gt;&gt; <br>&gt;&gt;&gt; In general, I&#39;m starting to worry about the state of Foundation from a portability point of view. Once Swift 3 is released, I want to start writing portable swift code that relies on Foundation. And it seems like this will require a huge amount of #if os() everywhere to cope with the differences.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; David<br>&gt;&gt; <br>&gt;&gt; Our long term goal is to enable developers to do this. I acknowledge that we have a ways to go to get there. I’ve seen an uptick in contributions recently, which gives me hope that we can get closer before the release of Swift 3.<br>&gt;&gt; <br>&gt;&gt; - Tony<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Objective-C Foundation vs CoreLibs Foundation</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>May 23, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On May 23, 2016, at 3:34 PM, Philippe Hausler via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; There are a few considerations for the package manager: we may have circular build requirements, swift-corelibs-foundation does some squirrelly things with linking and compilation like linker scripts and tacked on assembly data segments. I am not certain those edge use cases are supported yet.<br></p><p>They are not, and I would view them as a stretch for 3.0 at this point.<br></p><p>The combination of this and the circular build problem makes me think that we should probably expect to maintain a Foundation-specific build solution for the time being.<br></p><p> - Daniel<br></p><p>&gt; <br>&gt; The Python config file is way too complex as it is and was only really designed as a stopgap measure. If we can simplify I think it would definitely improve the state of things: it is worth investigating.<br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt;&gt; On May 23, 2016, at 3:03 PM, David Hart via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Would you agree that the first step should be to have the project as a SwiftPM package so that we have a more consistent way to run tests on all platforms? Do you know if SwiftPM is far enough to support swift-corelibs-foundation? I might have a go at it once I finish implementing NSProgress (about half way through I think).<br>&gt;&gt; <br>&gt;&gt;&gt; On 23 May 2016, at 17:59, Tony Parker via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi David,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 22, 2016, at 8:15 AM, David Hart via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hello,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The discussion we had previously on this mailing list made it quite clear that:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - Objective-C Foundation is the framework that is supposed to be used on all Darwin platforms,<br>&gt;&gt;&gt;&gt; - swift-corelibs-foundation will be the Foundation framework for all other platforms,<br>&gt;&gt;&gt;&gt; - Both frameworks will evolve slowly together.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yup.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Therefore, it makes sense that for code written against Foundation to be portable, the swift-corelibs-foundation APIs and behavior needs to be identical to Darwin Foundation. Hence the following questions?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - Shouldn&#39;t we be writing tests in a way so that they can be run against Darwin Foundation and have the CI Server run them? For example: while working on NSProgress, I write a bunch of tests against Darwin Foundation, make sure they pass, then copy-paste them in the CoreLibs project, and fix the implementation until they pass. This makes sure that both APIs are consistent with each other. I was thinking that we ought to automate this and have the CI server test them.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That would be a great step. This is part of the reason we tried to set up the dependencies of Foundation on XCTest the way we did, and provide the Xcode project file; so we could share tests. I would welcome any help we can get on improving our automation story here.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - How are we planning to reconcile the API differences between both frameworks? For examples, one of my tests will run against CoreLibs but not against Darwin because NSThread.init takes a closure as argument in CoreLibs but a target+selector in Darwin. This is just one example, but I guess they are other inconsistencies elsewhere. This seems to be particularly the case with APIs that rely on the Objective-C runtime.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; These should be marked as “experimental” in the documentation comments. If not, we should do that.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; There are some areas where we just don’t know what to do yet, because of the lack of the ObjC runtime and implicit bridging on Linux. In some of those places we’ve tried to provide a replacement API and mark it as experimental until we can figure out the larger story.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; In general, I&#39;m starting to worry about the state of Foundation from a portability point of view. Once Swift 3 is released, I want to start writing portable swift code that relies on Foundation. And it seems like this will require a huge amount of #if os() everywhere to cope with the differences.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; David<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Our long term goal is to enable developers to do this. I acknowledge that we have a ways to go to get there. I’ve seen an uptick in contributions recently, which gives me hope that we can get closer before the release of Swift 3.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt;&gt; swift-corelibs-dev at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
