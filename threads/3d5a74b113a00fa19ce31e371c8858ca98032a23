<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c65faa002b79348ac10e1fb9c1a9ad83?s=50"></div><header><strong>KVO/KVC in Swift</strong> from <string>Colin Cornaby</string> &lt;colin.cornaby at mac.com&gt;<p>December  3, 2015 at 08:00:00pm</p></header><div class="content"><p>I looked through the Swift Foundation this morning to see if there was evidence of KVO/KVC, but I didn&#39;t find any. Apologies if I missed anything. I&#39;m assuming KVO/KVC is still incompatible with pure Swift, but I was looking for evidence that maybe something had been added in NSObject.<br></p><p>We work in a lot of real time/signal-ly code so we&#39;ve gotten a lot of good use out of KVO/KVC in Cocoa. I&#39;ve seen a lot of value in using it when doing UI work as well, either through bindings on OS X (which seems a little unloved these days), or directly by observing key values on iOS. The willSet/didSet?functions?in Swift is a great step forward for variables in having some of this behavior, but it&#39;s still messy in situations where you are dealing with classes you don&#39;t control. For example, we&#39;re an API vendor, and KVC/KVO is?handy for providing a way for a customer to observe changes. But for a pure Swift API we&#39;d have to provide and maintain some sort of larger callback structure, or have a workflow that encourages subclassing with customers adding their own getter/setter handlers.<br></p><p>Are there any plans to add anything like KVO or KVC to pure Swift, with maybe something the bridges to Obj-C KVO? Swift doesn&#39;t need to go down the road of full Obj-C style dynamism with method swizzling and all that. But some sort of key based inspection of objects, and language construct for getting callbacks on a property change would be great.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151203/3d5a2a23/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>KVO/KVC in Swift</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December  3, 2015 at 01:00:00pm</p></header><div class="content"><p>On Dec 3, 2015, at 12:49 PM, Colin Cornaby &lt;colin.cornaby at mac.com&gt; wrote:<br>&gt; I looked through the Swift Foundation this morning to see if there was evidence of KVO/KVC, but I didn&#39;t find any. Apologies if I missed anything. I&#39;m assuming KVO/KVC is still incompatible with pure Swift, but I was looking for evidence that maybe something had been added in NSObject.<br>&gt; ..<br>&gt; <br>&gt; Are there any plans to add anything like KVO or KVC to pure Swift, with maybe something the bridges to Obj-C KVO?<br></p><p>Hi Colin,<br></p><p>This is one of *many* things that we are interested in working on some day, but we need to stay focused on shorter term goals (like getting to ABI stability) to make sure we are successful with those.  If you?re working on Apple platforms, Swift does interoperate with the Objective-C KVO implementation, using the ?dynamic&quot; keyword.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d30e546d655d1c7ece0464791a9a90d5?s=50"></div><header><strong>KVO/KVC in Swift</strong> from <string>Adrian Kashivskyy</string> &lt;adrian.kashivskyy at me.com&gt;<p>December  3, 2015 at 10:00:00pm</p></header><div class="content"><p>Colin,<br></p><p>Until KVC/KVO is supported, you may be interested in using constructs like Observable&lt;T&gt;. Here are some illustrative libraries that make use of it: SwiftBond/Bond &lt;https://github.com/SwiftBond/Bond&gt;, slazyk/Observable-Swift &lt;https://github.com/slazyk/Observable-Swift&gt;.<br></p><p><br>Pozdrawiam ? Regards,<br>Adrian Kashivskyy<br></p><p>&gt; Wiadomo?? napisana przez Chris Lattner &lt;clattner at apple.com&gt; w dniu 03.12.2015, o godz. 22:00:<br>&gt; <br>&gt; On Dec 3, 2015, at 12:49 PM, Colin Cornaby &lt;colin.cornaby at mac.com&gt; wrote:<br>&gt;&gt; I looked through the Swift Foundation this morning to see if there was evidence of KVO/KVC, but I didn&#39;t find any. Apologies if I missed anything. I&#39;m assuming KVO/KVC is still incompatible with pure Swift, but I was looking for evidence that maybe something had been added in NSObject.<br>&gt;&gt; ..<br>&gt;&gt; <br>&gt;&gt; Are there any plans to add anything like KVO or KVC to pure Swift, with maybe something the bridges to Obj-C KVO?<br>&gt; <br>&gt; Hi Colin,<br>&gt; <br>&gt; This is one of *many* things that we are interested in working on some day, but we need to stay focused on shorter term goals (like getting to ABI stability) to make sure we are successful with those.  If you?re working on Apple platforms, Swift does interoperate with the Objective-C KVO implementation, using the ?dynamic&quot; keyword.<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151203/ddb2054b/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
