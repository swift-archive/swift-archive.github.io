<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Analysis of case conventions for initialisms</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 12, 2016 at 08:00:00am</p></header><div class="content"><p>on Fri Feb 12 2016, Haravikk &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On 12 Feb 2016, at 11:42, Brent Royal-Gordon via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; (Warning: I&#39;m going to use &quot;acronym&quot; loosely. Sorry.)<br>&gt;&gt; <br>&gt;<br>&gt;&gt;&gt; Strong dislike for #2. I understand and accept the benefits, but I<br>&gt;&gt;&gt; just don’t like how that looks.<br>&gt;&gt; <br>&gt;&gt; Me too. I look at the examples and I&#39;m frankly just revolted. It&#39;s a<br>&gt;&gt; visceral reaction, something I have trouble analyzing because it&#39;s<br>&gt;&gt; so violent. Whatever the practical benefits, it reads like a<br>&gt;&gt; deliberate abuse of the language, like someone choosing expedience<br>&gt;&gt; over good style, lyk sum1 doin dis bcuz its so hard 2 pres da btns.<br>&gt;&gt; <br>&gt;&gt; But emotional reactions are hard to convey convincingly in text, so<br>&gt;&gt; I&#39;ll try to distill some of it into logical argument.<br>&gt;&gt; <br>&gt;&gt; Some acronym-using terms, like &quot;XML document&quot;, are easy to turn into<br>&gt;&gt; identifiers; others, like &quot;AWS S3 RPC URL&quot;*, are difficult. Option<br>&gt;&gt; #2 handles this problem by making all acronyms equally ugly and<br>&gt;&gt; unreadable. I don&#39;t think that&#39;s an improvement.<br>&gt;&gt; <br>&gt;&gt; I especially think it&#39;s not an improvement because the resulting<br>&gt;&gt; identifiers are so hard to read. It&#39;s true that `AwsS3RpcUrl` is<br>&gt;&gt; technically *parseable* since the word boundaries are demarcated<br>&gt;&gt; (well, except for that pesky `3`), but is it actually *readable*<br>&gt;&gt; when you set eyes on it? It&#39;s not for me. My brain, being used to<br>&gt;&gt; English, tries to read those uppercase-lowercase combinations as<br>&gt;&gt; actual words with actual pronunciations and it just sees<br>&gt;&gt; gibberish. Maybe that would get better with time, but this is<br>&gt;&gt; something that every new Swift developer would go<br>&gt;&gt; through. Capitalizing acronyms may be ambiguous sometimes, but it at<br>&gt;&gt; least ensures that you never misread an acronym as a word.<br>&gt;&gt; <br>&gt;&gt; And for those pathological cases where we think there&#39;s too much<br>&gt;&gt; ambiguity, we *do* have another option: `AWS_S3_RPC_URL`. Swift<br>&gt;&gt; style disfavors underscores, but it disfavors lack of clarity even<br>&gt;&gt; more. To me, `AWS_S3_RPC_URL` is *far* clearer than either<br>&gt;&gt; `AWSS3RPCURL` *or* `AwsS3RpcUrl`.<br>&gt;&gt; <br>&gt;&gt; Incidentally, how common *are* concatenated acronyms or other forms<br>&gt;&gt; of acronym-related ambiguity? And when it does happen in existing<br>&gt;&gt; Objective-C APIs, can we actually detect it and do the right thing,<br>&gt;&gt; or are imported APIs going to have spellings like `Awss3Rpcurl` that<br>&gt;&gt; are not merely ambiguous, but actively misleading?<br>&gt;&gt; <br>&gt;&gt; The way I see it, at some point any convention is going to break<br>&gt;&gt; down. All we can do is decide which cases we care about more. Do we<br>&gt;&gt; want to optimize for the `XMLDocument`s of the world or the<br>&gt;&gt; `AwsS3RpcUrl`s?<br>&gt;&gt; <br>&gt;&gt; Bottom line for me: If #2 was the convention, I&#39;m about 90% certain<br>&gt;&gt; I would simply flat out ignore it when I named things, and cringe<br>&gt;&gt; when I had to use someone else&#39;s names. I don&#39;t think we should<br>&gt;&gt; adopt a naming convention that makes users cringe.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; (* I use the extreme &quot;AWS S3 RPC URL&quot; example here because the<br>&gt;&gt; examples originally cited don&#39;t much worry me. I have no trouble<br>&gt;&gt; reading `XMLRPC` as a single six-letter acronym and mapping it to<br>&gt;&gt; the XML-RPC technology, the &quot;ack&quot; in `LAPBACK` is an abbreviation<br>&gt;&gt; and ought to be mixed-case, and `XSLTiBook` is self-inflicted—it&#39;s<br>&gt;&gt; not ambiguous unless you insist on violating your own API guidelines<br>&gt;&gt; to preserve your own nonstandard capitalization.)<br>&gt;<br>&gt; I think it’s important to remember that at some point acronyms are<br>&gt; simply the enemy and that before using one in any name you should<br>&gt; think about whether you need it. For example, in HTMLDocument it makes<br>&gt; some sense as HTML is significantly shorter and very widely<br>&gt; understood; you could use say, HypertextDocument since it’s not *much*<br>&gt; longer, but it’d then actually be less specific.<br>&gt;<br>&gt; AWS S3 RPC URL is a pretty extreme example, good for highlighting the<br>&gt; problems certainly, but right off I’d say that you don’t need either<br>&gt; AWS or RPC; the protocol is often just referred to as S3, and the RPC<br>&gt; I believe is redundant as I’m pretty sure the S3 API isn’t used any<br>&gt; other way. The AWS is definitely redundant if you specify URL, as URL<br>&gt; implies the ability to specify any S3 compatible host.<br>&gt;<br>&gt; So if you boil it down it could be simplified to S3URL, which isn’t<br>&gt; pretty, but isn’t that bad any either, or you could switch for<br>&gt; something like S3Address, and use url as a parameter name to clarify<br>&gt; that that’s how you’re describing the address.<br>&gt;<br>&gt; I know you want to use it as the extreme example that the standard<br>&gt; will need to be able to handle, but I think that the first rule of<br>&gt; acronyms should be that if you have more than one in a name then<br>&gt; you’re doing it wrong. <br></p><p>Not everybody has your good taste :-), and acronyms/initialisms<br>including the compound ones, are sometimes the predefined technical<br>terms we have to work with, c.f. XMLRPC.<br></p><p>&gt; Even having a single acronym in a name should<br>&gt; require you to stop and think whether you really need it, as in many<br>&gt; cases you may not, or it may make more sense to move it into a<br>&gt; parameter name.<br>&gt;<br>&gt; It’s definitely a tricky one to put into a formal specification<br>&gt; though, as it can be very subjective, and there will always be edge<br>&gt; cases where something doesn’t quite work, but I’m not sure we should<br>&gt; worry too much about multiple conjoined acronyms, as they should be<br>&gt; shunned for the evil monstrosities that they are =D<br></p><p>It&#39;s just one consideration among many.<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
