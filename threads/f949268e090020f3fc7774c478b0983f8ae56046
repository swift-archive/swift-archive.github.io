<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0047 Defaulting non-Void functions so they warn on unused results</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>March 24, 2016 at 02:00:00pm</p></header><div class="content"><p>on Wed Mar 23 2016, Andrey Tarantsov &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; What is your evaluation of the proposal?<br>&gt;<br>&gt; -0.5 if the annotation is verbose (much longer than @discardable).<br>&gt; +0.5 if the annotation is pleasant and concise, like @discardable<br>&gt;<br>&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;<br>&gt; The warn-by-default behavior is mostly useless. The only reason to<br>&gt; make the change is because “if we were designing Swift from scratch,<br>&gt; this would probably be a slightly better default”.<br>&gt;<br>&gt; Most non-void functions are called for their result, and nobody ever<br>&gt; forgets to use that result; if they do, it&#39;s like if they forgot to<br>&gt; call the function altogether — trivial to find, not useful as a<br>&gt; compiler diagnostic at all.<br>&gt;<br>&gt; The new default is better for:<br>&gt;<br>&gt; - (A) classes that provide both mutating and non-mutating methods;<br>&gt; - (B) methods where forgetting to use the result produces a bug (a<br>&gt; download task that needs to be resumed, an alert that needs to be<br>&gt; displayed, a listener that needs to be stored somewhere, etc).<br></p><p>To be clear, the mistake this warning prevents is the unintentional call<br>to a non-mutating method when one thinks one is mutating the receiver.<br>This scenario can arise independently of A or B.<br></p><p>&gt; The old default is better for:<br>&gt;<br>&gt; - (C) fluid APIs and other similar DSL scenarios;<br>&gt; - (D) methods that are mainly invoked for their side effect and return a value “just in case”, like removing/adding elements, scheduling tasks, ...<br>&gt;<br>&gt; I&#39;ve just scanned the entire Swift codebase I wrote since that fateful<br>&gt; WWDC&#39;14 (~20 kLOC excluding comments and blanks). I only have a<br>&gt; handful of classes/methods in each category above, and annotating them<br>&gt; one way or another is a trivial matter. Some of them *are not*<br>&gt; currently annotated with @warn_unused_result, which is a point in<br>&gt; favor of this proposal.<br>&gt;<br>&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>&gt; I think the safe-by-default, explicit-opt-out behavior is a better default for Swift, although, like I&#39;ve said, in practice it doesn&#39;t really matter much.<br>&gt;<br>&gt; Perhaps it&#39;s most useful for newcomers; you can easily skip over @warn_unused_result when learning Swift, but you won&#39;t be able ignore @discardable.<br>&gt;<br>&gt;&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;<br>&gt; Haven&#39;t ever seen this in a language.<br>&gt;<br>&gt; Golang had a (not very informative) discussion on this topic at https://groups.google.com/forum/#!topic/golang-nuts/ksfgSWxJcCo<br>&gt;<br>&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;<br>&gt; Closer to an in-depth study; looked at my Swift codebase, and read through all the discussions.<br>&gt;<br>&gt; On a side note, let me once again point to a dangerous trend in this<br>&gt; mailing list: not looking at (or reporting on) how potential changes<br>&gt; affect actual, specific, production code bases. We need a lot more of<br>&gt; that in our reviews.<br>&gt;<br>&gt; Thanks,<br>&gt;<br>&gt; A.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f822334c2f6ebeafd3a41cd44c82a62b?s=50"></div><header><strong>[Review] SE-0047 Defaulting non-Void functions so they warn on unused results</strong> from <string>Andrey Tarantsov</string> &lt;andrey at tarantsov.com&gt;<p>March 25, 2016 at 03:00:00am</p></header><div class="content"><p>&gt;&gt; The new default is better for:<br>&gt;&gt; <br>&gt;&gt; - (A) classes that provide both mutating and non-mutating methods;<br>&gt;&gt; - (B) methods where forgetting to use the result produces a bug (a<br>&gt;&gt; download task that needs to be resumed, an alert that needs to be<br>&gt;&gt; displayed, a listener that needs to be stored somewhere, etc).<br>&gt; <br>&gt; To be clear, the mistake this warning prevents is the unintentional call<br>&gt; to a non-mutating method when one thinks one is mutating the receiver.<br>&gt; This scenario can arise independently of A or B.<br></p><p>Sure. Although if a type only has mutating or non-mutating methods, but not both, the mistake will probably be immediately apparent, so the diagnostic doesn&#39;t win you much (except maybe in a newbie learning environment, which is an important use case as well).<br></p><p>A.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160325/202dfda5/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
