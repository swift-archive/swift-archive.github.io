<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>When to use argument labels, part DEUX</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February  7, 2016 at 07:00:00am</p></header><div class="content"><p>on Sun Feb 07 2016, Matthew Judge &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Feb 7, 2016, at 00:31, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; on Sat Feb 06 2016, plx &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br></p><p>&lt;schnipp&gt;<br></p><p>&gt;&gt;&gt; Taking it from the other direction, the way the guidelines are phrased<br>&gt;&gt;&gt; I worry bit that you wind up with:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; // not intended<br>&gt;&gt;&gt; a.add(subview: v) (or add(v)) // instead of `a.addSubview(v)`<br>&gt;&gt; <br>&gt;&gt; That&#39;s allowed as the guidelines were originally posted, but with the<br>&gt;&gt; modification to the guidelines that form B1 is to be preferred over form<br>&gt;&gt; B2 when both are allowed... which I swore I posted something about in<br>&gt;&gt; this thread in response to an excellent point someone made, but now<br>&gt;&gt; can&#39;t find.  <br>&gt;&gt; <br>&gt;&gt; Maybe I dreamt it; until I hear otherwise, *you* get credit for making<br>&gt;&gt; the excellent point :-)<br>&gt;<br>&gt; It was in response to my email, which I accidentally replied back only<br>&gt; to you and not the list, so I&#39;m the only one who saw your proposed<br>&gt; modification. (Unfortunately I noticed that the list was not there<br>&gt; after I replied a couple more times as well.)<br></p><p>Gah!  Well if you&#39;d like to post those messages here, you certainly have<br>my permission.  It might be good to have them as part of the public<br>record.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ece55ca3fe50dca9c70bcd914acb48a5?s=50"></div><header><strong>When to use argument labels, part DEUX</strong> from <string>Matthew Judge</string> &lt;matthew.judge at gmail.com&gt;<p>February  7, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Feb 7, 2016, at 10:50, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; &lt;&lt;schnipp&gt;&gt;<br>&gt;&gt; <br>&gt;&gt; Gah!  Well if you&#39;d like to post those messages here, you certainly have<br>&gt;&gt; my permission.  It might be good to have them as part of the public<br>&gt;&gt; record.<br>&gt; <br>&gt; Here was my original email:<br>&gt; <br>&gt; I certainly can live with these guidelines (and although I have a slight preference for something like move(from: a, to: b), it is only a _slight_ preference). However, I do have a suggested tweak to A. that I believe maintains clarity of guidance and covers this case. (See below inline)<br>&gt; <br>&gt;&gt; On Feb 5, 2016, at 16:32, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Given all the awesome feedback I&#39;ve gotten on this thread, I went back<br>&gt;&gt; to the drawing board and came up with something new; I think this one<br>&gt;&gt; works.  The previously-stated goals still apply:<br>&gt;&gt; <br>&gt;&gt; * describe when and where to use argument labels<br>&gt;&gt; * require labels in many of the cases people have asked for them<br>&gt;&gt; * are understandable by humans (this means relatively simple)<br>&gt;&gt; * preserve important semantics communicated by existing APIs.<br>&gt;&gt; <br>&gt;&gt; Please keep in mind that it is a non-goal to capture considerations we<br>&gt;&gt; think have a bearing on good names (such as relatedness of parameters):<br>&gt;&gt; it&#39;s to create simple guidelines that have the right effect in nearly<br>&gt;&gt; all cases.<br>&gt;&gt; <br>&gt;&gt; A. When arguments can&#39;t be usefully distinguished from one another, none<br>&gt;&gt;  should have argument labels, e.g. min(x,y), zip(x,y,z).  <br>&gt; <br>&gt; When arguments&#39; _importance_ can&#39;t be usefully distinguished from one another, none should have argument labels or _all should have argument labels_, e.g. min(x,y), zip(x,y,z), move(from: a, to: b), moveTo(x: a, y: b)<br>&gt; <br>&gt;&gt; B. Otherwise,<br>&gt;&gt; <br>&gt;&gt; 1. At the call site, a first parameter that has no argument label must<br>&gt;&gt;    form part of a grammatical phrase that starts with the basename, less<br>&gt;&gt;    any trailing nouns.  <br>&gt;&gt; <br>&gt;&gt;      print(x)<br>&gt;&gt;      a.contains(b)<br>&gt;&gt;      a.mergeWith(b)<br>&gt;&gt;      a.addGestureRecognizer(x)<br>&gt;&gt;           ^~~~~~~~~~~~~~~~~ trailing noun<br>&gt; <br>&gt; One other potential concern. I understand (and wholeheartedly agree) that GestureRecognizer should be pet of the base name here, but I&#39;m not sure I see where the guidance explains it to me.<br>&gt; <br>&gt;&gt;    This phrase must have the correct semantic implications, so, e.g.<br>&gt;&gt; <br>&gt;&gt;      a.dismiss(b)           // no, unless a is really dismissing b<br>&gt;&gt;      a.dismissAnimated(b)   // no, not grammatical<br>&gt;&gt;      a.dismiss(animated: b) // yes, using a label<br>&gt;&gt; <br>&gt;&gt; 2. If the first argument is part of a prepositional phrase, put the<br>&gt;&gt;    parenthesis immediately after the preposition. <br>&gt;&gt; <br>&gt;&gt;      a.encodeWith(b)<br>&gt;&gt;      a.moveFrom(b, to: c)<br>&gt;&gt; <br>&gt;&gt;    Thus, if words are required for any reason between the preposition<br>&gt;&gt;    and the first argument, they go into the first argument label.<br>&gt;&gt; <br>&gt;&gt;      a.tracksWith(mediaType: b, composer: c)<br>&gt;&gt;      a.moveTo(x: 22, y: 99)<br>&gt;&gt; <br>&gt;&gt; Notes: <br>&gt;&gt; <br>&gt;&gt; a. I would recommend prepositions other than &quot;with&quot; in nearly all<br>&gt;&gt;  cases, but that&#39;s not the point of these rules.<br>&gt;&gt; b. I can understand the aesthetic appeal of<br>&gt;&gt; <br>&gt;&gt;   a.move(from: b, to: c)<br>&gt;&gt; <br>&gt;&gt;  but I believe it is not a clear enough improvement to justify<br>&gt;&gt;  additional complexity in the guidelines.<br>&gt;&gt; <br>&gt;&gt; Questions:<br>&gt;&gt; <br>&gt;&gt; 1. I&#39;m not expecting these guidelines to make everybody optimally happy,<br>&gt;&gt;  all the time, but they shouldn&#39;t be harmful.  Are there any cases for<br>&gt;&gt;  which they produce results you couldn&#39;t live with?<br>&gt;&gt; <br>&gt;&gt; 2. Are there any cases where you&#39;d be confused about how to apply these<br>&gt;&gt;  guidelines?<br>&gt;&gt; <br>&gt;&gt; Thanks in advance for all your valuable input!<br>&gt;&gt; <br>&gt;&gt; P.S. Doug is presently working on generating new importer results, based<br>&gt;&gt;    on these guidelines, for your perusal.  They should be ready soon.<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; -Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160207/0dd8d93c/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ece55ca3fe50dca9c70bcd914acb48a5?s=50"></div><header><strong>When to use argument labels, part DEUX</strong> from <string>Matthew Judge</string> &lt;matthew.judge at gmail.com&gt;<p>February  7, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; Gah!  Well if you&#39;d like to post those messages here, you certainly have<br>&gt; my permission.  It might be good to have them as part of the public<br>&gt; record.<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br></p><p>Dave&#39;s reply to me inline...<br></p><p>&gt; on Fri Feb 05 2016, Matthew Judge &lt;matthew.judge-AT-gmail.com&gt; wrote:<br>&gt; <br>&gt; I certainly can live with these guidelines (and although I have a<br>&gt; slight preference for something like move(from: a, to: b), it is only<br>&gt; a _slight_ preference). However, I do have a suggested tweak to<br>&gt; A. that I believe maintains clarity of guidance and covers this<br>&gt; case. (See below inline)<br>&gt; <br>&gt;&gt; On Feb 5, 2016, at 16:32, Dave Abrahams via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Given all the awesome feedback I&#39;ve gotten on this thread, I went back<br>&gt;&gt; to the drawing board and came up with something new; I think this one<br>&gt;&gt; works.  The previously-stated goals still apply:<br>&gt;&gt; <br>&gt;&gt; * describe when and where to use argument labels<br>&gt;&gt; * require labels in many of the cases people have asked for them<br>&gt;&gt; * are understandable by humans (this means relatively simple)<br>&gt;&gt; * preserve important semantics communicated by existing APIs.<br>&gt;&gt; <br>&gt;&gt; Please keep in mind that it is a non-goal to capture considerations we<br>&gt;&gt; think have a bearing on good names (such as relatedness of parameters):<br>&gt;&gt; it&#39;s to create simple guidelines that have the right effect in nearly<br>&gt;&gt; all cases.<br>&gt;&gt; <br>&gt;&gt; A. When arguments can&#39;t be usefully distinguished from one another, none<br>&gt;&gt;  should have argument labels, e.g. min(x,y), zip(x,y,z).  <br>&gt; <br>&gt; When arguments&#39; _importance_ can&#39;t be usefully distinguished from one<br>&gt; another, none should have argument labels or _all should have argument<br>&gt; labels_, e.g. min(x,y), zip(x,y,z), move(from: a, to: b), moveTo(x: a,<br>&gt; y: b)<br></p><p>That would also imply <br></p><p> move(a, b)<br> tracksWith(a, b)<br></p><p>are both OK, because the importance of a and b can&#39;t be distinguished.<br></p><p>It would also imply that<br></p><p> min(first: a, second: b) <br></p><p>is OK.  I don&#39;t want any of these to be OK.  Do you?<br></p><p>Even if it didn&#39;t have these problems, it&#39;s asking people to make a<br>judgement about importance, which makes the rule harder to apply<br>consistently, and the only practical effect of your proposed change<br>seems to be to get your preferred form for move(from: a, to: b).<br></p><p>&gt;&gt; B. Otherwise,<br>&gt;&gt; <br>&gt;&gt; 1. At the call site, a first parameter that has no argument label must<br>&gt;&gt;    form part of a grammatical phrase that starts with the basename, less<br>&gt;&gt;    any trailing nouns.  <br>&gt;&gt; <br>&gt;&gt;      print(x)<br>&gt;&gt;      a.contains(b)<br>&gt;&gt;      a.mergeWith(b)<br>&gt;&gt;      a.addGestureRecognizer(x)<br>&gt;&gt;           ^~~~~~~~~~~~~~~~~ trailing noun<br>&gt; <br>&gt; One other potential concern. I understand (and wholeheartedly agree)<br>&gt; that GestureRecognizer should be pet of the base name here, but I&#39;m<br>&gt; not sure I see where the guidance explains it to me.<br></p><p>Ah, I see what you mean.  The rules as written would also allow<br></p><p>   add(gestureRecognizer: x)<br></p><p>Excellent point!  I think the fix is to declare, in B.1., that this form<br>is to be preferred.<br></p><p>&gt;&gt;    This phrase must have the correct semantic implications, so, e.g.<br>&gt;&gt; <br>&gt;&gt;      a.dismiss(b)           // no, unless a is really dismissing b<br>&gt;&gt;      a.dismissAnimated(b)   // no, not grammatical<br>&gt;&gt;      a.dismiss(animated: b) // yes, using a label<br>&gt;&gt; <br>&gt;&gt; 2. If the first argument is part of a prepositional phrase, put the<br>&gt;&gt;    parenthesis immediately after the preposition. <br>&gt;&gt; <br>&gt;&gt;      a.encodeWith(b)<br>&gt;&gt;      a.moveFrom(b, to: c)<br>&gt;&gt; <br>&gt;&gt;    Thus, if words are required for any reason between the preposition<br>&gt;&gt;    and the first argument, they go into the first argument label.<br>&gt;&gt; <br>&gt;&gt;      a.tracksWith(mediaType: b, composer: c)<br>&gt;&gt;      a.moveTo(x: 22, y: 99)<br>&gt;&gt; <br>&gt;&gt; Notes: <br>&gt;&gt; <br>&gt;&gt; a. I would recommend prepositions other than &quot;with&quot; in nearly all<br>&gt;&gt;  cases, but that&#39;s not the point of these rules.<br>&gt;&gt; b. I can understand the aesthetic appeal of<br>&gt;&gt; <br>&gt;&gt;   a.move(from: b, to: c)<br>&gt;&gt; <br>&gt;&gt;  but I believe it is not a clear enough improvement to justify<br>&gt;&gt;  additional complexity in the guidelines.<br>&gt;&gt; <br>&gt;&gt; Questions:<br>&gt;&gt; <br>&gt;&gt; 1. I&#39;m not expecting these guidelines to make everybody optimally happy,<br>&gt;&gt;  all the time, but they shouldn&#39;t be harmful.  Are there any cases for<br>&gt;&gt;  which they produce results you couldn&#39;t live with?<br>&gt;&gt; <br>&gt;&gt; 2. Are there any cases where you&#39;d be confused about how to apply these<br>&gt;&gt;  guidelines?<br>&gt;&gt; <br>&gt;&gt; Thanks in advance for all your valuable input!<br>&gt;&gt; <br>&gt;&gt; P.S. Doug is presently working on generating new importer results, based<br>&gt;&gt;    on these guidelines, for your perusal.  They should be ready soon.<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; -Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160207/6a0c4f6e/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ece55ca3fe50dca9c70bcd914acb48a5?s=50"></div><header><strong>When to use argument labels, part DEUX</strong> from <string>Matthew Judge</string> &lt;matthew.judge at gmail.com&gt;<p>February  7, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; Gah!  Well if you&#39;d like to post those messages here, you certainly have<br>&gt; my permission.  It might be good to have them as part of the public<br>&gt; record.<br></p><p>My reply back to Dave...<br></p><p><br></p><p>&gt; On Feb 5, 2016, at 22:04, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; on Fri Feb 05 2016, Matthew Judge &lt;matthew.judge-AT-gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I certainly can live with these guidelines (and although I have a<br>&gt;&gt; slight preference for something like move(from: a, to: b), it is only<br>&gt;&gt; a _slight_ preference). However, I do have a suggested tweak to<br>&gt;&gt; A. that I believe maintains clarity of guidance and covers this<br>&gt;&gt; case. (See below inline)<br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 5, 2016, at 16:32, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Given all the awesome feedback I&#39;ve gotten on this thread, I went back<br>&gt;&gt;&gt; to the drawing board and came up with something new; I think this one<br>&gt;&gt;&gt; works.  The previously-stated goals still apply:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * describe when and where to use argument labels<br>&gt;&gt;&gt; * require labels in many of the cases people have asked for them<br>&gt;&gt;&gt; * are understandable by humans (this means relatively simple)<br>&gt;&gt;&gt; * preserve important semantics communicated by existing APIs.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Please keep in mind that it is a non-goal to capture considerations we<br>&gt;&gt;&gt; think have a bearing on good names (such as relatedness of parameters):<br>&gt;&gt;&gt; it&#39;s to create simple guidelines that have the right effect in nearly<br>&gt;&gt;&gt; all cases.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; A. When arguments can&#39;t be usefully distinguished from one another, none<br>&gt;&gt;&gt; should have argument labels, e.g. min(x,y), zip(x,y,z).  <br>&gt;&gt; <br>&gt;&gt; When arguments&#39; _importance_ can&#39;t be usefully distinguished from one<br>&gt;&gt; another, none should have argument labels or _all should have argument<br>&gt;&gt; labels_, e.g. min(x,y), zip(x,y,z), move(from: a, to: b), moveTo(x: a,<br>&gt;&gt; y: b)<br>&gt; <br>&gt; That would also imply <br>&gt; <br>&gt; move(a, b)<br>&gt; tracksWith(a, b)<br></p><p>I would not want either of these two allowed. <br></p><p>I just realized that the rules as you wrote them imply &quot;if A applies, ignore B&quot;... I was thinking of A as special case that modifies the rules in B. So if we refactor the guidelines to:<br></p><p>Guideline 1: B.1<br>Guideline 2: B.2<br>Special Case: A.1<br></p><p>I believe they are both still covered by B.1 <br></p><p>&gt; are both OK, because the importance of a and b can&#39;t be distinguished.<br>&gt; <br>&gt; It would also imply that<br>&gt; <br>&gt; min(first: a, second: b) <br>&gt; <br>&gt; is OK.  I don&#39;t want any of these to be OK.  Do you?<br></p><p>I think omit needless words still covers this. I would say zip() is clearly still covered by B.1 as well. (With my above refactoring of the guidelines.)<br></p><p>&gt; Even if it didn&#39;t have these problems, it&#39;s asking people to make a<br>&gt; judgement about importance, which makes the rule harder to apply<br>&gt; consistently, and the only practical effect of your proposed change<br>&gt; seems to be to get your preferred form for move(from: a, to: b).<br>&gt; <br>&gt;&gt;&gt; B. Otherwise,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1. At the call site, a first parameter that has no argument label must<br>&gt;&gt;&gt;   form part of a grammatical phrase that starts with the basename, less<br>&gt;&gt;&gt;   any trailing nouns.  <br></p><p>I forgot to carry this comment forward from my reply to the other thread, but I think constraining this to the first parameter is needlessly specific. <br></p><p>&quot;At the call site, parameter(s) that have no argument label must...&quot; still seems to do what we want and covers a case like zip(x,y,z) without needing to apply a special rule. (Although there is an implied &quot;and&quot; to make it a sentence: &quot;zip x, y, and z&quot;)<br></p><p>&gt;&gt;&gt;     print(x)<br>&gt;&gt;&gt;     a.contains(b)<br>&gt;&gt;&gt;     a.mergeWith(b)<br>&gt;&gt;&gt;     a.addGestureRecognizer(x)<br>&gt;&gt;&gt;          ^~~~~~~~~~~~~~~~~ trailing noun<br>&gt;&gt; <br>&gt;&gt; One other potential concern. I understand (and wholeheartedly agree)<br>&gt;&gt; that GestureRecognizer should be pet of the base name here, but I&#39;m<br>&gt;&gt; not sure I see where the guidance explains it to me.<br>&gt; <br>&gt; Ah, I see what you mean.  The rules as written would also allow<br>&gt; <br>&gt;   add(gestureRecognizer: x)<br>&gt; <br>&gt; Excellent point!  I think the fix is to declare, in B.1., that this form<br>&gt; is to be preferred.<br></p><p>I&#39;m not sure how prevalent my way of thinking about method names is, but I would argue the following both have argument labels, they&#39;ve just been pulled to the left of the parenthesis:<br></p><p>a.mergeWith(b)<br>a.addGestureRecognizer(b)<br></p><p>So in my mind, B.2 really is just &quot;move the first argument label into the base name unless B.1 prevents it&quot; which then covers addGestureRecognizer and addObserver styled method names.<br></p><p>&gt; <br>&gt;&gt;&gt;   This phrase must have the correct semantic implications, so, e.g.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     a.dismiss(b)           // no, unless a is really dismissing b<br>&gt;&gt;&gt;     a.dismissAnimated(b)   // no, not grammatical<br>&gt;&gt;&gt;     a.dismiss(animated: b) // yes, using a label<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 2. If the first argument is part of a prepositional phrase, put the<br>&gt;&gt;&gt;   parenthesis immediately after the preposition. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     a.encodeWith(b)<br>&gt;&gt;&gt;     a.moveFrom(b, to: c)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   Thus, if words are required for any reason between the preposition<br>&gt;&gt;&gt;   and the first argument, they go into the first argument label.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     a.tracksWith(mediaType: b, composer: c)<br>&gt;&gt;&gt;     a.moveTo(x: 22, y: 99)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Notes: <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; a. I would recommend prepositions other than &quot;with&quot; in nearly all<br>&gt;&gt;&gt; cases, but that&#39;s not the point of these rules.<br>&gt;&gt;&gt; b. I can understand the aesthetic appeal of<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  a.move(from: b, to: c)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; but I believe it is not a clear enough improvement to justify<br>&gt;&gt;&gt; additional complexity in the guidelines.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Questions:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1. I&#39;m not expecting these guidelines to make everybody optimally happy,<br>&gt;&gt;&gt; all the time, but they shouldn&#39;t be harmful.  Are there any cases for<br>&gt;&gt;&gt; which they produce results you couldn&#39;t live with?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 2. Are there any cases where you&#39;d be confused about how to apply these<br>&gt;&gt;&gt; guidelines?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks in advance for all your valuable input!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; P.S. Doug is presently working on generating new importer results, based<br>&gt;&gt;&gt;   on these guidelines, for your perusal.  They should be ready soon.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160207/844aa0a0/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ece55ca3fe50dca9c70bcd914acb48a5?s=50"></div><header><strong>When to use argument labels, part DEUX</strong> from <string>Matthew Judge</string> &lt;matthew.judge at gmail.com&gt;<p>February  7, 2016 at 03:00:00pm</p></header><div class="content"><p>I think part of where the current guidelines struggle is the ambiguity of the term &quot;argument label&quot; so just for the sake of discussion I&#39;m going to define terms to be explicit (not saying these are precisely the right terms).<br></p><p>- External parameter names: names used to refer to parameters at the use site<br>a.moveTo(x: 1, y: 2) // external parameter names are &quot;x&quot; and &quot;y&quot;<br>a.addGestureRecognizer(b) // does not have an external parameter name<br></p><p>- Argument labels: words used to describe the argument being passed in<br>a.moveTo(x: 1, y: 2) // argument labels are &quot;x&quot; and &quot;y&quot;<br>a.addGestureRecognizer(b) // argument label is &quot;GestureRecognizer&quot;<br></p><p>Both of these are referred to as &quot;argument labels&quot; in the guidelines and most of the discussion, but they are slightly different (though overlapping) things. For instance, B.1 refers to &quot;external parameter names&quot; and B.2 refers to &quot;argument labels&quot;<br></p><p>I think my distinction between these terms makes the guidelines simpler with fewer caveats:<br></p><p>1. Prune needless and redundant words from the argument labels (i.e. remove any word that can be removed without confusing the semantic intent)<br>2. If the method reads as part of a grammatical phrase, prefer to locate the first argument label as part of the base name instead of as an external parameter name.<br>Special Cases/Exceptions:<br>a. Arguments with a default value should use an external parameter name<br>b. Arguments with similar semantic importance should be treated the same (use external parameter names for argument labels or don&#39;t label any)<br></p><p>Not saying these are right/perfect, but I do think the distinction of guidelines for argument labels and external parameter will make the rules simpler, clearer, and more consistent. (Everything below here is applying these rules to each of the examples used in Dave&#39;s original post.)<br></p><p>print(x) // Guideline 1 prunes argument label<br>a.contains(b) // Same<br>a.mergeWith(b) // Guideline 1 shortens argument label &quot;WithCollection&quot; to &quot;With&quot;<br>// Guideline 2 moves &quot;With&quot; into the base name<br></p><p>a.addGestureRecognizer(x)<br>// Guideline 1 does NOT prune &quot;GestureRecognizer&quot; because it would change the semantic meaning<br>// Guideline 2 moves it into the base name<br></p><p>- the following 3 examples from the original are treated the same under these rules, for the same reasons mentioned<br>&gt;&gt;&gt;&gt;     a.dismiss(b)           // no, unless a is really dismissing b<br>&gt;&gt;&gt;&gt;     a.dismissAnimated(b)   // no, not grammatical<br>&gt;&gt;&gt;&gt;     a.dismiss(animated: b) // yes, using a label<br></p><p><br>a.encodeWith(b) // Guideline 1 shortens argument label &quot;WithCoder&quot; to &quot;With&quot;<br>// Guideline 2 says put &quot;With&quot; to the base name<br></p><p>a.moveFrom(b, to: c) // Only change to the results of Dave&#39;s examples<br>// Guideline 1 shortens &quot;fromScene&quot; to &quot;from&quot; and &quot;toScene&quot; to &quot;to&quot;<br>// Exception (b) prevents Guideline 2 from moving &quot;from&quot; into the base name<br></p><p>* Note that I believe the only change to these guidelines required to recover the behavior of Dave&#39;s original guidelines is modifying Exception (b) to language similar to Dave&#39;s A.<br></p><p>- the following two examples would be covered by Exception (b) as well<br>&gt;&gt;&gt;&gt;     a.tracksWith(mediaType: b, composer: c)<br>&gt;&gt;&gt;&gt;     a.moveTo(x: 22, y: 99)<br></p><p><br>Sorry for the long email... Hopefully it&#39;s somewhat useful.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160207/894389f8/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
