<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/46439321e8b5b5ba0944eef50e18c3a3?s=50"></div><header><strong>CharacterSet vs Set&lt;Character&gt;</strong> from <string>Jean-Denis Muys</string> &lt;jdmuys at gmail.com&gt;<p>October  2, 2016 at 08:00:00pm</p></header><div class="content"><p>I was playing with CharacterSet, and I came up with:<br></p><p>let vowels = CharacterSet(charactersIn: &quot;AEIOU&quot;)<br></p><p>let char: Character = &quot;E&quot;<br></p><p>vowels.contains(char)<br></p><p><br>That last line doesn&#39;t compile: I get &quot;*cannot convert value of type<br>&#39;Character&#39; to expected argument type &#39;UnicodeScalar&#39;*&quot;<br></p><p>The problem is, I could not find a simple way to convert from a character<br>to a unicodeScalar. The best I found is the very ugly:<br></p><p>vowels.contains(String(char).unicodeScalars[String(char).unicodeScalars.<br>startIndex])<br></p><p>Did I miss anything? Does it have to be that horrific?<br></p><p>If so, I find using Set much better:<br></p><p>let vowelsSet: Set&lt;Character&gt; = Set(&quot;AEIOU&quot;.characters)<br></p><p>vowelsSet.contains(char)<br></p><p>I must have missed something. Any suggestion welcome<br></p><p>Jean-Denis<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161002/c9e80286/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2bc666e29724cd3bdf46b6cbbe4a07bb?s=50"></div><header><strong>CharacterSet vs Set&lt;Character&gt;</strong> from <string>Quinn &quot;The Eskimo!&quot;</string> &lt;eskimo1 at apple.com&gt;<p>October  3, 2016 at 08:00:00am</p></header><div class="content"><p>On 2 Oct 2016, at 19:02, Jean-Denis Muys via swift-users &lt;swift-users at swift.org&gt; wrote:<br></p><p>&gt; The problem is, I could not find a simple way to convert from a character to a unicodeScalar. <br></p><p>As is often the case with string examples, it would help if you posted more about your context.  With the details we have now your code could be written like this:<br></p><p>let vowels = CharacterSet(charactersIn: &quot;AEIOU&quot;)<br>let char: UnicodeScalar = &quot;E&quot;<br>vowels.contains(char)<br></p><p>but I’m pretty sure that won’t help in your real app (-:  So, my questions:<br></p><p>* Do you plan to use a fixed character set?  Or is the character set itself built at runtime?<br></p><p>* Do you have specific knowledge of either of the inputs?  Like that they’re all ASCII?  Or normalised in a certain way?<br></p><p>* Specifically, where do the characters you’re trying to test (`char` in your example) come from?  Do they represent user input, in which case they can be arbitrary Unicode?  Or something more constrained<br></p><p>Share and Enjoy<br>--<br>Quinn &quot;The Eskimo!&quot;                    &lt;http://www.apple.com/developer/&gt;<br>Apple Developer Relations, Developer Technical Support, Core OS/Hardware<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/46439321e8b5b5ba0944eef50e18c3a3?s=50"></div><header><strong>CharacterSet vs Set&lt;Character&gt;</strong> from <string>Jean-Denis Muys</string> &lt;jdmuys at gmail.com&gt;<p>October  3, 2016 at 11:00:00am</p></header><div class="content"><p>You are perfectly right. The context is playing around really, but I was more specifically writing a function counting vowels and consonants in an arbitrary string:<br></p><p>func countLetters(s: String) -&gt; (vowels: Int, consonants: Int) {<br>    let vowels: Set&lt;Character&gt; = Set(&quot;AEIOU&quot;.characters)<br>    let consonants: Set&lt;Character&gt; = Set(&quot;BCDFGHJKLMNPQRSTVWXYZ&quot;.characters)<br></p><p>    var v = 0, c = 0<br></p><p>    for char in s.uppercased().characters {<br>        if vowels.contains(char) {<br>            v += 1<br>        }<br>        if consonants.contains(char) {<br>            c += 1<br>        }<br>    }<br></p><p>    return (v, c)<br>}<br></p><p>As you could see, I opted not to use CharacterSet for this case, as it looked too much trouble. <br></p><p>The current goal is for me to learn Swift. Trying to extrapolate a bit on what might happen in the real world, I would tend to answer your questions thus:<br></p><p>&gt; * Do you plan to use a fixed character set?  Or is the character set itself built at runtime?<br></p><p>The character set is likely to be fixed. Does this really change anything?<br></p><p>&gt; * Do you have specific knowledge of either of the inputs?  Like that they’re all ASCII?  Or normalised in a certain way?<br></p><p>ASCII? Probably not. Latin? perhaps, though not obvious. For example French accented letters would probably have to be handled somehow. Greek or Cyrillic? Perhaps. Other scripts? Unlikely, but what do I know.<br>Normalisation: it should probably consider all variations of “é” to be the same…<br>Is this opening a Unicode can of worms? Possibly. I am not knowledgeable enough, but willing to learn.<br></p><p>&gt; * Specifically, where do the characters you’re trying to test (`char` in your example) come from?  Do they represent user input, in which case they can be arbitrary Unicode?  Or something more constrained<br></p><p><br>User input most probably.<br></p><p>I tried and your suggestion:<br></p><p>&gt; let uchar: UnicodeScalar = “E&quot;<br></p><p>will not work with a Character variable (as opposed to a character literal)<br></p><p>        let uchar: UnicodeScalar = char<br></p><p>(Cannot convert value of type Character to specified type UnicodeScalar)<br></p><p>Thanks,<br></p><p>Jean-Denis <br></p><p><br>&gt; On 3 Oct 2016, at 09:43, Quinn The Eskimo! via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; On 2 Oct 2016, at 19:02, Jean-Denis Muys via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; The problem is, I could not find a simple way to convert from a character to a unicodeScalar. <br>&gt; <br>&gt; As is often the case with string examples, it would help if you posted more about your context.  With the details we have now your code could be written like this:<br>&gt; <br>&gt; let vowels = CharacterSet(charactersIn: &quot;AEIOU&quot;)<br>&gt; let char: UnicodeScalar = &quot;E&quot;<br>&gt; vowels.contains(char)<br>&gt; <br>&gt; but I’m pretty sure that won’t help in your real app (-:  So, my questions:<br>&gt; <br>&gt; * Do you plan to use a fixed character set?  Or is the character set itself built at runtime?<br>&gt; <br>&gt; * Do you have specific knowledge of either of the inputs?  Like that they’re all ASCII?  Or normalised in a certain way?<br>&gt; <br>&gt; * Specifically, where do the characters you’re trying to test (`char` in your example) come from?  Do they represent user input, in which case they can be arbitrary Unicode?  Or something more constrained<br>&gt; <br>&gt; Share and Enjoy<br>&gt; --<br>&gt; Quinn &quot;The Eskimo!&quot;                    &lt;http://www.apple.com/developer/&gt;<br>&gt; Apple Developer Relations, Developer Technical Support, Core OS/Hardware<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161003/4df7c145/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/17f3e4010ef1b1ed65d4926cbb191b2f?s=50"></div><header><strong>CharacterSet vs Set&lt;Character&gt;</strong> from <string>Gerriet M. Denkmann</string> &lt;g at mdenkmann.de&gt;<p>October  3, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On 3 Oct 2016, at 16:28, Jean-Denis Muys via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; ASCII? Probably not. Latin? perhaps, though not obvious. For example French accented letters would probably have to be handled somehow. Greek or Cyrillic? Perhaps. Other scripts? Unlikely, but what do I know.<br></p><p>Don’t be so Europe-centric. Other people have vowels too.<br>Thai for example. And here are Swift characters completely useless: กี้ is one character (for Swift) but it is really one consonant + one vowel + one tone-mark.<br>So you will have to use unicodeScalars.<br></p><p>Have fun!<br></p><p>Gerriet.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/46439321e8b5b5ba0944eef50e18c3a3?s=50"></div><header><strong>CharacterSet vs Set&lt;Character&gt;</strong> from <string>Jean-Denis Muys</string> &lt;jdmuys at gmail.com&gt;<p>October  3, 2016 at 02:00:00pm</p></header><div class="content"><p>You are right: I don’t know much about asian languages.<br></p><p>How would you go about counting consonants, vowels (and tone-marks?) in the most general way?<br></p><p>I think I would need to educate myself about those things. Any pointer welcome.<br></p><p>JD<br></p><p><br>&gt; On 3 Oct 2016, at 12:52, Gerriet M. Denkmann &lt;g at mdenkmann.de&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 3 Oct 2016, at 16:28, Jean-Denis Muys via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; ASCII? Probably not. Latin? perhaps, though not obvious. For example French accented letters would probably have to be handled somehow. Greek or Cyrillic? Perhaps. Other scripts? Unlikely, but what do I know.<br>&gt; <br>&gt; Don’t be so Europe-centric. Other people have vowels too.<br>&gt; Thai for example. And here are Swift characters completely useless: กี้ is one character (for Swift) but it is really one consonant + one vowel + one tone-mark.<br>&gt; So you will have to use unicodeScalars.<br>&gt; <br>&gt; Have fun!<br>&gt; <br>&gt; Gerriet.<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/17f3e4010ef1b1ed65d4926cbb191b2f?s=50"></div><header><strong>CharacterSet vs Set&lt;Character&gt;</strong> from <string>Gerriet M. Denkmann</string> &lt;g at mdenkmann.de&gt;<p>October  3, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On 3 Oct 2016, at 19:17, Jean-Denis Muys via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; You are right: I don’t know much about asian languages.<br>&gt; <br>&gt; How would you go about counting consonants, vowels (and tone-marks?) in the most general way?<br></p><p>Iterate over unicodeScalars (in the most general case) - Swift characters are probably ok for European languages.<br></p><p>For each unicodeScalar a.k.a codepoint you can use the icu function:<br>	int8_t 	chrTyp = u_charType (codepoint) <br>This returns the general category value for the code point.<br>This gives you something like U_OTHER_PUNCTUATION, U_MATH_SYMBOL, U_OTHER_LETTER etc.<br>See enum UCharCategory in &lt;http://icu-project.org/apiref/icu4c-latest/uchar_8h.html&gt;<br></p><p>In European languages ignore U_NON_SPACING_MARKs.<br></p><p>There is a compare:options function for NSString (and probably similar for Swift String) which might use the options NSCaseInsensitiveSearch and NSDiacriticInsensitiveSearch to find equality between ‘E’, ‘e’ and è, é, Ĕ etc.<br>That is: for each character (or unicodeScalar) compare to a, e, i, o, u with these options.<br></p><p>let str = &quot;HaÁÅǺáXeëẽêèâàZ&quot;<br></p><p>for char in str.characters<br>{<br>	let vowel = isVowel( char )<br>	print(&quot;\(char) is \(vowel ? &quot;vowel&quot; : &quot;consonant&quot;)&quot;)<br>}<br></p><p>func isVowel( _ char: Character ) -&gt; Bool<br>{<br>	let s1 = &quot;\(char)&quot;<br>	let s2 = s1 as NSString<br>	let opt: NSString.CompareOptions = [.diacriticInsensitive, .caseInsensitive]<br></p><p>	//	no idea how do to this with Strings:<br>	if s2.compare(&quot;a&quot;, options: opt) == .orderedSame {return true}<br>	if s2.compare(&quot;e&quot;, options: opt) == .orderedSame {return true}<br>	…<br>	return false<br>}<br></p><p><br>If you really want to use Thai, then do NOT ignore U_NON_SPACING_MARKs because some vowels are classified thusly.<br>U+0E01 … U+0E2E are consonants, U+0E30 … U+0E39 and U+0E40 … U+0E44 are vowels.<br>But then: ‘อ’ is sometimes a (silent) consonant (อยาก), sometimes a vowel (บอ), sometimes part of a vowel (มือ), sometimes part of a diphthong (เบื่อ).<br>Similar for ย: normal consonant (ยาก), part of vowel (ไทย) or diphthong (เมีย).<br>In the latter case only ม is a consonant, the rest is one single diphthong and ี is a U_NON_SPACING_MARK which really is a vowel.<br>Oh, and don&#39;t forget the ligatures ฤ, ฤๅ, ฦ, ฦๅ. These are both a consonant and a vowel. Same for ำ: not a ligature but a vowel + consonant.<br></p><p><br>But to talk about german:<br>What about diphthongs? “neu” has one consonant + one vowel sound (but 2 vowel characters).<br>What if some silly users don’t know how to type umlauts and write “ueber” (instead of correctly “über”). This is really one consonant (+diaeresis).<br>But beware: “aktuell” is definitely not a misspelling of “aktüll” and has two vowels.<br></p><p>Gerriet.<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
