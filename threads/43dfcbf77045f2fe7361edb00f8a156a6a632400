<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a726de03bed3104ddaecca3fdcf59e19?s=50"></div><header><strong>Should Version be StringLiteralConvertible?</strong> from <string>Ling Wang</string> &lt;an00na at gmail.com&gt;<p>December 30, 2015 at 03:00:00pm</p></header><div class="content"><p>Because Version.init?(_ characters:) is really failable this code is very dangerous:<br>extension Version: StringLiteralConvertible {<br>    public init(stringLiteral value: String) {<br>        self.init(value.characters)!<br>    }<br></p><p>Is the convenience worth it?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ae51ca494b37cc270597830da66f089f?s=50"></div><header><strong>Should Version be StringLiteralConvertible?</strong> from <string>Max Howell</string> &lt;max.howell at apple.com&gt;<p>January  4, 2016 at 11:00:00am</p></header><div class="content"><p>Can you provide a use case that demonstrates the danger?<br></p><p>I can only imagine situations where the Package.swift is invalid and thus `swift build` simply errors out.  No data is lost, no work is lost. Just time.<br></p><p>&gt; On Dec 30, 2015, at 1:16 PM, Ling Wang via swift-build-dev &lt;swift-build-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Because Version.init?(_ characters:) is really failable this code is very dangerous:<br>&gt; extension Version: StringLiteralConvertible {<br>&gt;    public init(stringLiteral value: String) {<br>&gt;        self.init(value.characters)!<br>&gt;    }<br>&gt; <br>&gt; Is the convenience worth it?<br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a726de03bed3104ddaecca3fdcf59e19?s=50"></div><header><strong>Should Version be StringLiteralConvertible?</strong> from <string>Ling Wang</string> &lt;an00na at gmail.com&gt;<p>January  4, 2016 at 04:00:00pm</p></header><div class="content"><p>I guess there is not real consequence in the current code base. But it potentially lets us write crashing code like this without any help from the type system because we explicitly disabled the protection:<br></p><p>let version: Version = “hello”<br></p><p>By contrast, if Version is not StringLiteralConvertible, we must write code like this:<br></p><p>let version: Version = Version(“hello”)<br></p><p>where the type system will catch the error and force us to explicitly handle the potential `nil` result:<br></p><p>value of optional type &#39;Version?&#39; not unwrapped; did you mean to use &#39;!&#39; or &#39;?&#39;?<br></p><p>&gt; On Jan 4, 2016, at 1:22 PM, Max Howell &lt;max.howell at apple.com&gt; wrote:<br>&gt; <br>&gt; Can you provide a use case that demonstrates the danger?<br>&gt; <br>&gt; I can only imagine situations where the Package.swift is invalid and thus `swift build` simply errors out.  No data is lost, no work is lost. Just time.<br>&gt; <br>&gt;&gt; On Dec 30, 2015, at 1:16 PM, Ling Wang via swift-build-dev &lt;swift-build-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Because Version.init?(_ characters:) is really failable this code is very dangerous:<br>&gt;&gt; extension Version: StringLiteralConvertible {<br>&gt;&gt;   public init(stringLiteral value: String) {<br>&gt;&gt;       self.init(value.characters)!<br>&gt;&gt;   }<br>&gt;&gt; <br>&gt;&gt; Is the convenience worth it?<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-build-dev mailing list<br>&gt;&gt; swift-build-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ae51ca494b37cc270597830da66f089f?s=50"></div><header><strong>Should Version be StringLiteralConvertible?</strong> from <string>Max Howell</string> &lt;max.howell at apple.com&gt;<p>January  4, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; I guess there is not real consequence in the current code base. But it potentially lets us write crashing code like this without any help from the type system because we explicitly disabled the protection:<br>&gt; <br>&gt; let version: Version = “hello”<br>&gt; <br>&gt; By contrast, if Version is not StringLiteralConvertible, we must write code like this:<br>&gt; <br>&gt; let version: Version = Version(“hello”)<br>&gt; <br>&gt; where the type system will catch the error and force us to explicitly handle the potential `nil` result:<br>&gt; <br>&gt; value of optional type &#39;Version?&#39; not unwrapped; did you mean to use &#39;!&#39; or &#39;?’?<br></p><p><br>Well there’s two things:<br></p><p>1. If done in a Package.swift it will fail to build. Which is good. We want it to fail to build if the version is invalid.<br>2. We don’t use this constructor in the Package Manager’s sources, for the reasons you specify.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a726de03bed3104ddaecca3fdcf59e19?s=50"></div><header><strong>Should Version be StringLiteralConvertible?</strong> from <string>Ling Wang</string> &lt;an00na at gmail.com&gt;<p>January  4, 2016 at 04:00:00pm</p></header><div class="content"><p>Yes, as I said, I think there is no real consequence in current code. Just potential misusing danger in future. I suggest we use the help and protection of the type system as much as we can. That’s all.<br></p><p>&gt; On Jan 4, 2016, at 4:49 PM, Max Howell &lt;max.howell at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; I guess there is not real consequence in the current code base. But it potentially lets us write crashing code like this without any help from the type system because we explicitly disabled the protection:<br>&gt;&gt; <br>&gt;&gt; let version: Version = “hello”<br>&gt;&gt; <br>&gt;&gt; By contrast, if Version is not StringLiteralConvertible, we must write code like this:<br>&gt;&gt; <br>&gt;&gt; let version: Version = Version(“hello”)<br>&gt;&gt; <br>&gt;&gt; where the type system will catch the error and force us to explicitly handle the potential `nil` result:<br>&gt;&gt; <br>&gt;&gt; value of optional type &#39;Version?&#39; not unwrapped; did you mean to use &#39;!&#39; or &#39;?’?<br>&gt; <br>&gt; <br>&gt; Well there’s two things:<br>&gt; <br>&gt; 1. If done in a Package.swift it will fail to build. Which is good. We want it to fail to build if the version is invalid.<br>&gt; 2. We don’t use this constructor in the Package Manager’s sources, for the reasons you specify.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160104/6f2176b1/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
