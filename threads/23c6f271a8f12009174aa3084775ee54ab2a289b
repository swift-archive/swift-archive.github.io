<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dd370d16eb0bf6b4052d690975b7b72a?s=50"></div><header><strong>NSXMLNode and Friends</strong> from <string>Robert Stephen Thompson</string> &lt;robert.thompson at willowtreeapps.com&gt;<p>December 18, 2015 at 12:00:00pm</p></header><div class="content"><p>Since I recently did a small implementation of NSXMLNode and NSXMLDocument to use in an iOS project, I decided to tackle doing the full-featured one here. It’s not that hard, doing it as a wrapper on libxml2, except I’ve run into a bit of a snag with making the semantics exactly match Darwin Foundation: you can’t return a subclass from init! This really only matters in one place, but it matters quite a bit there. The de facto designated initializer for NSXMLNode is init(kind: NSXMLNodeKind, options: Int). In pure Swift, this always returns an NSXMLNode, not the appropriate subclass! Which, of course, means as? returns nil, as! (and unsafeDowncast) crash, etc, when you end up trying to retrieve one and treat it as the subclass it’s “supposed” to be. I’m completely stumped as to any way around this. It might be that it’s just impossible to match Darwin Foundation semantics without a new language feature for this, which obviously would have to go through swift-evolution and then actually be implemented. Am I correct, or is there something I’m missing? Also, should I go ahead and implement the rest of this without the exactly matching semantics because something is better than nothing?<br></p><p>Thanks,<br>Robert Thompson<br>Software Engineer<br>WillowTree, Inc.®<br>willowtreeapps.com<br> <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151218/23c6289b/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: PastedGraphic-1.png<br>Type: image/png<br>Size: 8609 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151218/23c6289b/attachment.png&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>NSXMLNode and Friends</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>December 18, 2015 at 10:00:00am</p></header><div class="content"><p>Hi Robert,<br></p><p>There actually already is some discussion on the swift-evolution list about a language feature to enable factory methods, which would help us to implement these kinds of things. It is a common pattern in Foundation to return subclasses from initializers (NSNull, NSPredicate are in the same boat, among many others), so I’m hoping we can get that one moving along soon. If you can find that thread, go ahead and reply to it with additional justification if you want.<br></p><p>I think we should try to move forward on this as if we’ll eventually get that feature. It’s pretty clear that we need it. We may need to work on other parts of the implementation first until we get it.<br></p><p>- Tony<br></p><p>&gt; On Dec 18, 2015, at 9:21 AM, Robert Stephen Thompson via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Since I recently did a small implementation of NSXMLNode and NSXMLDocument to use in an iOS project, I decided to tackle doing the full-featured one here. It’s not that hard, doing it as a wrapper on libxml2, except I’ve run into a bit of a snag with making the semantics exactly match Darwin Foundation: you can’t return a subclass from init! This really only matters in one place, but it matters quite a bit there. The de facto designated initializer for NSXMLNode is init(kind: NSXMLNodeKind, options: Int). In pure Swift, this always returns an NSXMLNode, not the appropriate subclass! Which, of course, means as? returns nil, as! (and unsafeDowncast) crash, etc, when you end up trying to retrieve one and treat it as the subclass it’s “supposed” to be. I’m completely stumped as to any way around this. It might be that it’s just impossible to match Darwin Foundation semantics without a new language feature for this, which obviously would have to go through swift-evolution and then actually be implemented. Am I correct, or is there something I’m missing? Also, should I go ahead and implement the rest of this without the exactly matching semantics because something is better than nothing?<br>&gt; <br>&gt; Thanks,<br>&gt; Robert Thompson<br>&gt; Software Engineer<br>&gt; WillowTree, Inc.®<br>&gt; willowtreeapps.com &lt;http://willowtreeapps.com/&gt;<br>&gt;  &lt;PastedGraphic-1.png&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151218/840c6884/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dd370d16eb0bf6b4052d690975b7b72a?s=50"></div><header><strong>NSXMLNode and Friends</strong> from <string>Robert Stephen Thompson</string> &lt;robert.thompson at willowtreeapps.com&gt;<p>December 18, 2015 at 05:00:00pm</p></header><div class="content"><p>Ok, sounds good to me. I have quite a bit done at this point, but it’s not “pretty enough” for a real PR yet. If people really want to look at the ugliness, https://github.com/rothomp3/swift-corelibs-foundation/tree/feature/NSXMLDocument is where it lives.<br></p><p>Thanks,<br>Robert<br>&gt; On Dec 18, 2015, at 1:58 PM, Tony Parker &lt;anthony.parker at apple.com&gt; wrote:<br>&gt; <br>&gt; Hi Robert,<br>&gt; <br>&gt; There actually already is some discussion on the swift-evolution list about a language feature to enable factory methods, which would help us to implement these kinds of things. It is a common pattern in Foundation to return subclasses from initializers (NSNull, NSPredicate are in the same boat, among many others), so I’m hoping we can get that one moving along soon. If you can find that thread, go ahead and reply to it with additional justification if you want.<br>&gt; <br>&gt; I think we should try to move forward on this as if we’ll eventually get that feature. It’s pretty clear that we need it. We may need to work on other parts of the implementation first until we get it.<br>&gt; <br>&gt; - Tony<br>&gt; <br>&gt;&gt; On Dec 18, 2015, at 9:21 AM, Robert Stephen Thompson via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Since I recently did a small implementation of NSXMLNode and NSXMLDocument to use in an iOS project, I decided to tackle doing the full-featured one here. It’s not that hard, doing it as a wrapper on libxml2, except I’ve run into a bit of a snag with making the semantics exactly match Darwin Foundation: you can’t return a subclass from init! This really only matters in one place, but it matters quite a bit there. The de facto designated initializer for NSXMLNode is init(kind: NSXMLNodeKind, options: Int). In pure Swift, this always returns an NSXMLNode, not the appropriate subclass! Which, of course, means as? returns nil, as! (and unsafeDowncast) crash, etc, when you end up trying to retrieve one and treat it as the subclass it’s “supposed” to be. I’m completely stumped as to any way around this. It might be that it’s just impossible to match Darwin Foundation semantics without a new language feature for this, which obviously would have to go through swift-evolution and then actually be implemented. Am I correct, or is there something I’m missing? Also, should I go ahead and implement the rest of this without the exactly matching semantics because something is better than nothing?<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; Robert Thompson<br>&gt;&gt; Software Engineer<br>&gt;&gt; WillowTree, Inc.®<br>&gt;&gt; willowtreeapps.com &lt;http://willowtreeapps.com/&gt;<br>&gt;&gt;  &lt;PastedGraphic-1.png&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151218/1502ae46/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>NSXMLNode and Friends</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>December 18, 2015 at 05:00:00pm</p></header><div class="content"><p>Dealing with the cross platform part of the module map portion may be a bit tricky; I had to use some of libxml2 for CFXMLInterface it is effectively a simple wrapper around a few xml c calls that are a bit swift-friendlier. Perhaps that might make some of that integration easier. However if you do find a decent way of dealing with the module map differentials between linux and mac os x I would be interested to see if we could improve the state of affairs in that bridged portion.<br></p><p>&gt; On Dec 18, 2015, at 2:33 PM, Robert Stephen Thompson via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Ok, sounds good to me. I have quite a bit done at this point, but it’s not “pretty enough” for a real PR yet. If people really want to look at the ugliness, https://github.com/rothomp3/swift-corelibs-foundation/tree/feature/NSXMLDocument &lt;https://github.com/rothomp3/swift-corelibs-foundation/tree/feature/NSXMLDocument&gt; is where it lives.<br>&gt; <br>&gt; Thanks,<br>&gt; Robert<br>&gt;&gt; On Dec 18, 2015, at 1:58 PM, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi Robert,<br>&gt;&gt; <br>&gt;&gt; There actually already is some discussion on the swift-evolution list about a language feature to enable factory methods, which would help us to implement these kinds of things. It is a common pattern in Foundation to return subclasses from initializers (NSNull, NSPredicate are in the same boat, among many others), so I’m hoping we can get that one moving along soon. If you can find that thread, go ahead and reply to it with additional justification if you want.<br>&gt;&gt; <br>&gt;&gt; I think we should try to move forward on this as if we’ll eventually get that feature. It’s pretty clear that we need it. We may need to work on other parts of the implementation first until we get it.<br>&gt;&gt; <br>&gt;&gt; - Tony<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 18, 2015, at 9:21 AM, Robert Stephen Thompson via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Since I recently did a small implementation of NSXMLNode and NSXMLDocument to use in an iOS project, I decided to tackle doing the full-featured one here. It’s not that hard, doing it as a wrapper on libxml2, except I’ve run into a bit of a snag with making the semantics exactly match Darwin Foundation: you can’t return a subclass from init! This really only matters in one place, but it matters quite a bit there. The de facto designated initializer for NSXMLNode is init(kind: NSXMLNodeKind, options: Int). In pure Swift, this always returns an NSXMLNode, not the appropriate subclass! Which, of course, means as? returns nil, as! (and unsafeDowncast) crash, etc, when you end up trying to retrieve one and treat it as the subclass it’s “supposed” to be. I’m completely stumped as to any way around this. It might be that it’s just impossible to match Darwin Foundation semantics without a new language feature for this, which obviously would have to go through swift-evolution and then actually be implemented. Am I correct, or is there something I’m missing? Also, should I go ahead and implement the rest of this without the exactly matching semantics because something is better than nothing?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt; Robert Thompson<br>&gt;&gt;&gt; Software Engineer<br>&gt;&gt;&gt; WillowTree, Inc.®<br>&gt;&gt;&gt; willowtreeapps.com &lt;http://willowtreeapps.com/&gt;<br>&gt;&gt;&gt;  &lt;PastedGraphic-1.png&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt;<br>&gt;&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151218/c67a3d59/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dd370d16eb0bf6b4052d690975b7b72a?s=50"></div><header><strong>NSXMLNode and Friends</strong> from <string>Robert Stephen Thompson</string> &lt;robert.thompson at willowtreeapps.com&gt;<p>January  4, 2016 at 03:00:00pm</p></header><div class="content"><p>Ok, after trying to get this building on Linux, I have discovered what you mean. I have gotten it building successfully on Linux, unfortunately this required changes to build settings in other modules, because /usr/include/libxml2 wasn’t being added to the search locations. And this then results in needing to add “-I/usr/include/libxml2” to the command line any time you want to build anything using Foundation! (including just typing “import Foundation” in the REPL, heh). Which is obviously less than ideal. There is already an implementation for all this stuff in CoreFoundation, but it’s marked as being deprecated as of OS X 10.6, with a note to use NSXMLDocument (or libxml2) instead! Not exactly a helpful recommendation when you’re implementing NSXMLDocument heh. Should I just add wrappers in CFXMLInterface for the libxml2 functions I need? That might be the easiest way to just get everything building with minimal changes to other modules.<br></p><p>Thanks,<br>Robert Thompson<br>Software Engineer<br>WillowTree, Inc.®<br>willowtreeapps.com &lt;http://willowtreeapps.com/&gt;<br> <br></p><p>&gt; On Dec 18, 2015, at 8:05 PM, Philippe Hausler &lt;phausler at apple.com&gt; wrote:<br>&gt; <br>&gt; Dealing with the cross platform part of the module map portion may be a bit tricky; I had to use some of libxml2 for CFXMLInterface it is effectively a simple wrapper around a few xml c calls that are a bit swift-friendlier. Perhaps that might make some of that integration easier. However if you do find a decent way of dealing with the module map differentials between linux and mac os x I would be interested to see if we could improve the state of affairs in that bridged portion.<br>&gt; <br>&gt;&gt; On Dec 18, 2015, at 2:33 PM, Robert Stephen Thompson via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Ok, sounds good to me. I have quite a bit done at this point, but it’s not “pretty enough” for a real PR yet. If people really want to look at the ugliness, https://github.com/rothomp3/swift-corelibs-foundation/tree/feature/NSXMLDocument &lt;https://github.com/rothomp3/swift-corelibs-foundation/tree/feature/NSXMLDocument&gt; is where it lives.<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; Robert<br>&gt;&gt;&gt; On Dec 18, 2015, at 1:58 PM, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi Robert,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; There actually already is some discussion on the swift-evolution list about a language feature to enable factory methods, which would help us to implement these kinds of things. It is a common pattern in Foundation to return subclasses from initializers (NSNull, NSPredicate are in the same boat, among many others), so I’m hoping we can get that one moving along soon. If you can find that thread, go ahead and reply to it with additional justification if you want.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think we should try to move forward on this as if we’ll eventually get that feature. It’s pretty clear that we need it. We may need to work on other parts of the implementation first until we get it.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 18, 2015, at 9:21 AM, Robert Stephen Thompson via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Since I recently did a small implementation of NSXMLNode and NSXMLDocument to use in an iOS project, I decided to tackle doing the full-featured one here. It’s not that hard, doing it as a wrapper on libxml2, except I’ve run into a bit of a snag with making the semantics exactly match Darwin Foundation: you can’t return a subclass from init! This really only matters in one place, but it matters quite a bit there. The de facto designated initializer for NSXMLNode is init(kind: NSXMLNodeKind, options: Int). In pure Swift, this always returns an NSXMLNode, not the appropriate subclass! Which, of course, means as? returns nil, as! (and unsafeDowncast) crash, etc, when you end up trying to retrieve one and treat it as the subclass it’s “supposed” to be. I’m completely stumped as to any way around this. It might be that it’s just impossible to match Darwin Foundation semantics without a new language feature for this, which obviously would have to go through swift-evolution and then actually be implemented. Am I correct, or is there something I’m missing? Also, should I go ahead and implement the rest of this without the exactly matching semantics because something is better than nothing?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt; Robert Thompson<br>&gt;&gt;&gt;&gt; Software Engineer<br>&gt;&gt;&gt;&gt; WillowTree, Inc.®<br>&gt;&gt;&gt;&gt; willowtreeapps.com &lt;http://willowtreeapps.com/&gt;<br>&gt;&gt;&gt;&gt;  &lt;PastedGraphic-1.png&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt;&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt;<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160104/57ed096b/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: PastedGraphic-1.png<br>Type: image/png<br>Size: 8609 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160104/57ed096b/attachment.png&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
