<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/17d2af4afb70023e28e655d17471a018?s=50"></div><header><strong>SIL: &quot;unowned&quot; the calling convention and &quot;unowned&quot; the variable ownership convention</strong> from <string>Michael Gottesman</string> &lt;mgottesman at apple.com&gt;<p>December 29, 2015 at 05:00:00pm</p></header><div class="content"><p>One form of overloading that we currently have at the SIL level are the notions of the &quot;unowned&quot; calling convention and &quot;unowned&quot; the variable ownership convention.<br></p><p>For those who are unfamiliar with the unowned calling convention consider the following:<br></p><p>@tmp : $@convention(thin) (@owned Array&lt;Double&gt;, Array&lt;Double&gt;, Int, Int) -&gt; Array&lt;Double&gt;<br></p><p>In this case the first parameter is passed in @owned (i.e. +1) and the second parameter is passed in as &quot;unowned&quot;. Unowned is a form of +0 parameter passing that essentially means that the callee needs to take ownership of the value (ideally) before performing any side-effect having operations.<br></p><p>Overloading the term &quot;unowned&quot; in this way is confusing for new people at the SIL level. I would like to propose that we rename the unowned calling convention to something else (since unowned the variable ownership convention corresponds to a swift level concept that will be more difficult to change). Additionally no matter what we do, we should annotate &quot;unowned&quot; parameters and return values with an appropriate @&quot;...&quot; sigil to make it absolutely clear visually what the convention is.<br></p><p>In terms of names, I am partial to the name &quot;immediate&quot;. My reasoning for using the term immediate is related to SGFContext in SILGen. In SILGen, there are three types of desired transfers defined by the DesiredTransfer enum.<br></p><p>  enum DesiredTransfer {                                                                                                                                                         <br>    PlusOne,                                                                                                                                                                     <br>    ImmediatePlusZero,                                                                                                                                                           <br>    GuaranteedPlusZero,                                                                                                                                                          <br>  };<br></p><p>PlusOne refers to @owned, GuaranteedPlusZero refers to @guaranteed, and if my memory is correct, ImmediatePlusZero refers to unowned. It seems natural to me to choose immediate for the name of the convention to match the terminology in SGFContext.<br></p><p>Comments, flames, etc?<br></p><p>Michael<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/331ec1a62e13e332445f7c802b5c93c6?s=50"></div><header><strong>SIL: &quot;unowned&quot; the calling convention and &quot;unowned&quot; the variable ownership convention</strong> from <string>Emanuel Zephir</string> &lt;emanuelzephir at gmail.com&gt;<p>December 30, 2015 at 03:00:00pm</p></header><div class="content"><p>Prior to this e-mail, it wasn&#39;t clear to me that there were two<br>different &quot;unowned&quot; concepts.<br></p><p>+1 in favor of the rename.<br></p><p>--Emanuel<br></p><p>On Tue, Dec 29, 2015 at 3:18 PM, Michael Gottesman via swift-dev<br>&lt;swift-dev at swift.org&gt; wrote:<br>&gt; One form of overloading that we currently have at the SIL level are the notions of the &quot;unowned&quot; calling convention and &quot;unowned&quot; the variable ownership convention.<br>&gt;<br>&gt; For those who are unfamiliar with the unowned calling convention consider the following:<br>&gt;<br>&gt; @tmp : $@convention(thin) (@owned Array&lt;Double&gt;, Array&lt;Double&gt;, Int, Int) -&gt; Array&lt;Double&gt;<br>&gt;<br>&gt; In this case the first parameter is passed in @owned (i.e. +1) and the second parameter is passed in as &quot;unowned&quot;. Unowned is a form of +0 parameter passing that essentially means that the callee needs to take ownership of the value (ideally) before performing any side-effect having operations.<br>&gt;<br>&gt; Overloading the term &quot;unowned&quot; in this way is confusing for new people at the SIL level. I would like to propose that we rename the unowned calling convention to something else (since unowned the variable ownership convention corresponds to a swift level concept that will be more difficult to change). Additionally no matter what we do, we should annotate &quot;unowned&quot; parameters and return values with an appropriate @&quot;...&quot; sigil to make it absolutely clear visually what the convention is.<br>&gt;<br>&gt; In terms of names, I am partial to the name &quot;immediate&quot;. My reasoning for using the term immediate is related to SGFContext in SILGen. In SILGen, there are three types of desired transfers defined by the DesiredTransfer enum.<br>&gt;<br>&gt;   enum DesiredTransfer {<br>&gt;     PlusOne,<br>&gt;     ImmediatePlusZero,<br>&gt;     GuaranteedPlusZero,<br>&gt;   };<br>&gt;<br>&gt; PlusOne refers to @owned, GuaranteedPlusZero refers to @guaranteed, and if my memory is correct, ImmediatePlusZero refers to unowned. It seems natural to me to choose immediate for the name of the convention to match the terminology in SGFContext.<br>&gt;<br>&gt; Comments, flames, etc?<br>&gt;<br>&gt; Michael<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>SIL: &quot;unowned&quot; the calling convention and &quot;unowned&quot; the variable ownership convention</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>January  4, 2016 at 11:00:00am</p></header><div class="content"><p>Hi, Michael. The calling convention is equivalent to the &#39;unowned(unsafe)&#39; variant of &#39;unowned&#39;, so I don&#39;t think it&#39;s entirely unrelated.<br></p><p>I don&#39;t like &quot;Immediate&quot; because I don&#39;t know what it means. Admittedly I don&#39;t work on SIL, but when is something passed &quot;immediate&quot; as opposed to &quot;guaranteed&quot;? Is &quot;immediate&quot; the case where it&#39;s valid now but mutating any external memory could make it invalid? What makes that &quot;immediate&quot;?<br></p><p>Jordan<br></p><p><br>&gt; On Dec 29, 2015, at 15:18, Michael Gottesman via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; One form of overloading that we currently have at the SIL level are the notions of the &quot;unowned&quot; calling convention and &quot;unowned&quot; the variable ownership convention.<br>&gt; <br>&gt; For those who are unfamiliar with the unowned calling convention consider the following:<br>&gt; <br>&gt; @tmp : $@convention(thin) (@owned Array&lt;Double&gt;, Array&lt;Double&gt;, Int, Int) -&gt; Array&lt;Double&gt;<br>&gt; <br>&gt; In this case the first parameter is passed in @owned (i.e. +1) and the second parameter is passed in as &quot;unowned&quot;. Unowned is a form of +0 parameter passing that essentially means that the callee needs to take ownership of the value (ideally) before performing any side-effect having operations.<br>&gt; <br>&gt; Overloading the term &quot;unowned&quot; in this way is confusing for new people at the SIL level. I would like to propose that we rename the unowned calling convention to something else (since unowned the variable ownership convention corresponds to a swift level concept that will be more difficult to change). Additionally no matter what we do, we should annotate &quot;unowned&quot; parameters and return values with an appropriate @&quot;...&quot; sigil to make it absolutely clear visually what the convention is.<br>&gt; <br>&gt; In terms of names, I am partial to the name &quot;immediate&quot;. My reasoning for using the term immediate is related to SGFContext in SILGen. In SILGen, there are three types of desired transfers defined by the DesiredTransfer enum.<br>&gt; <br>&gt;  enum DesiredTransfer {                                                                                                                                                         <br>&gt;    PlusOne,                                                                                                                                                                     <br>&gt;    ImmediatePlusZero,                                                                                                                                                           <br>&gt;    GuaranteedPlusZero,                                                                                                                                                          <br>&gt;  };<br>&gt; <br>&gt; PlusOne refers to @owned, GuaranteedPlusZero refers to @guaranteed, and if my memory is correct, ImmediatePlusZero refers to unowned. It seems natural to me to choose immediate for the name of the convention to match the terminology in SGFContext.<br>&gt; <br>&gt; Comments, flames, etc?<br>&gt; <br>&gt; Michael<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>SIL: &quot;unowned&quot; the calling convention and &quot;unowned&quot; the variable ownership convention</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>January  4, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Jan 4, 2016, at 11:07 AM, Jordan Rose via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; Hi, Michael. The calling convention is equivalent to the &#39;unowned(unsafe)&#39; variant of &#39;unowned&#39;, so I don&#39;t think it&#39;s entirely unrelated.<br>&gt; <br>&gt; I don&#39;t like &quot;Immediate&quot; because I don&#39;t know what it means. Admittedly I don&#39;t work on SIL, but when is something passed &quot;immediate&quot; as opposed to &quot;guaranteed&quot;? Is &quot;immediate&quot; the case where it&#39;s valid now but mutating any external memory could make it invalid?<br></p><p>Yes.<br></p><p>&gt; What makes that &quot;immediate”?<br></p><p>The name is used in SILGen when you’re going to use a value “immediately”, i.e. before any code executes that could possibly invalidate the reference.  For example, the base expression of a load of a stored class property can be emitted as a +0 immediate r-value, because the caller is going to immediately project the property and load.  That allows us to e.g. not retain after loading from a var; it’s a minor but frequently-impactful SILGen optimization.<br></p><p>Anyway, I agree with Jordan that that name is not particularly appropriate for a parameter convention.<br></p><p>This really just affects documentation and code within the compiler: it’s not actually written in textual SIL because it’s the default convention.  Still, I’m fine with changing the name from “unowned”.  Something that suggests the temporary nature of validity, maybe — “fleeting”? :)  One consideration is that this is also the convention used for trivial values, although I suppose we could split that out (to “trivial”, which would of course be the default for trivial arguments) and maybe even always require an explicit convention on non-trivial arguments.<br></p><p>John.<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
