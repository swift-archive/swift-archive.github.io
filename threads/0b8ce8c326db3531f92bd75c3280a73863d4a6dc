<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3eada20d8d86f9b78ef64f570acd29e9?s=50"></div><header><strong>if-case syntax ambiguity</strong> from <string>Nicholas Outram</string> &lt;nicholas.outram at icloud.com&gt;<p>November  9, 2016 at 11:00:00am</p></header><div class="content"><p>Hi<br></p><p>I’ve been drilling down on the syntax of enumerated types with associated data in the current release version of Swift 3.<br>I’ve pasted below a section of a Playground that captures an issue I’d like to raise.<br></p><p>In summary:<br></p><p>Consider the following <br>enum Vehicle {<br>   case car(petrol: Bool, sizeCC: Int)<br>   case plane(engines : Int)<br>   case other(String)<br>   case none<br>}<br>let myJourney : Vehicle = .other(&quot;pogo stick&quot;)<br></p><p>Whereas the following is clear<br>if case .other(_) = myJourney<br></p><p>the following shorthand equivalent is potentially confusing for the sake of 3 characters<br>if case .other = myJourney<br></p><p>- In the first case, the presence of the underscore does communicate that something is being assigned, but dropped.<br>- In the second case, the reader could easily be mislead into thinking that = was supposed to be == as there no apparent place to assign anything.<br></p><p>My suggestion would simply be to drop the shorthand as it’s ambiguous?<br></p><p><br>Nick Outram<br></p><p><br></p><p><br>import Foundation<br></p><p>//: Consider the following enumerated type with associated data<br>enum Vehicle {<br>   case car(petrol: Bool, sizeCC: Int)<br>   case plane(engines : Int)<br>   case other(String)<br>   case none<br>}<br></p><p>//: Let&#39;s pick an example<br>let myJourney : Vehicle = .other(&quot;pogo stick&quot;)<br></p><p>//: I now want to test what case `myJourney` is.<br>//:<br>//: We cannot use the `==` operator because `Vehicle` has associated data. Instead we use `if case` and *simply drop the associated value* with `_` as shown above<br>if case .other(_) = myJourney {<br>   print(&quot;Somewhere nice?&quot;)<br>} else {<br>   print(&quot;Ok, it&#39;s a secret?&quot;)<br>}<br>//:The above is clear enough once you get used to the syntax. The `_` communicates that a value has been dropped.<br>//:<br>//: **However**, Swift 3 allows us to drop the parenthesis altogether and use the following shorthand:<br>if case .other = myJourney {<br>   print(&quot;Somewhere nice?&quot;)<br>} else {<br>   print(&quot;Ok, it&#39;s a secret?&quot;)<br>}<br>//: *Unlike the previous example, I do wonder if this is a language feature that needs review?*<br>//:<br>//: - On face value, reading this code as is there is an assignment operator `=` with nothing apparently being assigned.<br>//: - It also reads as if `=` should be `==`<br></p><p><br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161109/0b8ca6dc/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: EnumChangeSuggestion.playground.zip<br>Type: application/zip<br>Size: 11810 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161109/0b8ca6dc/attachment.zip&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161109/0b8ca6dc/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>if-case syntax ambiguity</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>November  9, 2016 at 07:00:00pm</p></header><div class="content"><p>The `if case` is the same meaning as `switch-case`, so I don&#39;t think there<br>is anything ambitious. For `switch-case`, it is not equal, it is matching.<br></p><p>Zhaoxin<br></p><p>On Wed, Nov 9, 2016 at 7:17 PM, Nicholas Outram via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Hi<br>&gt;<br>&gt; I’ve been drilling down on the syntax of enumerated types with associated<br>&gt; data in the current release version of Swift 3.<br>&gt; I’ve pasted below a section of a Playground that captures an issue I’d<br>&gt; like to raise.<br>&gt;<br>&gt; In summary:<br>&gt;<br>&gt; Consider the following<br>&gt; enum Vehicle {<br>&gt;    case car(petrol: Bool, sizeCC: Int)<br>&gt;    case plane(engines : Int)<br>&gt;    case other(String)<br>&gt;    case none<br>&gt; }<br>&gt; let myJourney : Vehicle = .other(&quot;pogo stick&quot;)<br>&gt;<br>&gt; *Whereas the following is clear*<br>&gt; if case .other(_) = myJourney<br>&gt;<br>&gt; *the following shorthand equivalent is potentially confusing for the sake<br>&gt; of 3 characters*<br>&gt; if case .other = myJourney<br>&gt;<br>&gt; - In the first case, the presence of the underscore does communicate that<br>&gt; something is being assigned, but dropped.<br>&gt; - In the second case, the reader could easily be mislead into thinking<br>&gt; that = was supposed to be == as there no apparent place to assign anything.<br>&gt;<br>&gt; My suggestion would simply be to drop the shorthand as it’s ambiguous?<br>&gt;<br>&gt;<br>&gt; Nick Outram<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; import Foundation<br>&gt;<br>&gt; //: Consider the following enumerated type with associated data<br>&gt; enum Vehicle {<br>&gt;    case car(petrol: Bool, sizeCC: Int)<br>&gt;    case plane(engines : Int)<br>&gt;    case other(String)<br>&gt;    case none<br>&gt; }<br>&gt;<br>&gt; //: Let&#39;s pick an example<br>&gt; let myJourney : Vehicle = .other(&quot;pogo stick&quot;)<br>&gt;<br>&gt; //: I now want to test what case `myJourney` is.<br>&gt; //:<br>&gt; //: We cannot use the `==` operator because `Vehicle` has associated data.<br>&gt; Instead we use `if case` and *simply drop the associated value* with `_` as<br>&gt; shown above<br>&gt; if case .other(_) = myJourney {<br>&gt;    print(&quot;Somewhere nice?&quot;)<br>&gt; } else {<br>&gt;    print(&quot;Ok, it&#39;s a secret?&quot;)<br>&gt; }<br>&gt; //:The above is clear enough once you get used to the syntax. The `_`<br>&gt; communicates that a value has been dropped.<br>&gt; //:<br>&gt; //: **However**, Swift 3 allows us to drop the parenthesis altogether and<br>&gt; use the following shorthand:<br>&gt; if case .other = myJourney {<br>&gt;    print(&quot;Somewhere nice?&quot;)<br>&gt; } else {<br>&gt;    print(&quot;Ok, it&#39;s a secret?&quot;)<br>&gt; }<br>&gt; //: *Unlike the previous example, I do wonder if this is a language<br>&gt; feature that needs review?*<br>&gt; //:<br>&gt; //: - On face value, reading this code as is there is an assignment<br>&gt; operator `=` with nothing apparently being assigned.<br>&gt; //: - It also reads as if `=` should be `==`<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161109/ded812bb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2724bb8542919e2a86a82f73c003cbc2?s=50"></div><header><strong>if-case syntax ambiguity</strong> from <string>Michael Nisi</string> &lt;michael.nisi at gmail.com&gt;<p>November  9, 2016 at 01:00:00pm</p></header><div class="content"><p>Yes, equals isn&#39;t assignment but pattern matching here. Reminds of Erlang, which I love.<br></p><p>Michael<br></p><p>&gt; On 9 Nov 2016, at 12:57, Zhao Xin via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; The `if case` is the same meaning as `switch-case`, so I don&#39;t think there is anything ambitious. For `switch-case`, it is not equal, it is matching.<br>&gt; <br>&gt; Zhaoxin<br>&gt; <br>&gt;&gt; On Wed, Nov 9, 2016 at 7:17 PM, Nicholas Outram via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; Hi<br>&gt;&gt; <br>&gt;&gt; I’ve been drilling down on the syntax of enumerated types with associated data in the current release version of Swift 3.<br>&gt;&gt; I’ve pasted below a section of a Playground that captures an issue I’d like to raise.<br>&gt;&gt; <br>&gt;&gt; In summary:<br>&gt;&gt; <br>&gt;&gt; Consider the following <br>&gt;&gt; enum Vehicle {<br>&gt;&gt;    case car(petrol: Bool, sizeCC: Int)<br>&gt;&gt;    case plane(engines : Int)<br>&gt;&gt;    case other(String)<br>&gt;&gt;    case none<br>&gt;&gt; }<br>&gt;&gt; let myJourney : Vehicle = .other(&quot;pogo stick&quot;)<br>&gt;&gt; <br>&gt;&gt; Whereas the following is clear<br>&gt;&gt; if case .other(_) = myJourney<br>&gt;&gt; <br>&gt;&gt; the following shorthand equivalent is potentially confusing for the sake of 3 characters<br>&gt;&gt; if case .other = myJourney<br>&gt;&gt; <br>&gt;&gt; - In the first case, the presence of the underscore does communicate that something is being assigned, but dropped.<br>&gt;&gt; - In the second case, the reader could easily be mislead into thinking that = was supposed to be == as there no apparent place to assign anything.<br>&gt;&gt; <br>&gt;&gt; My suggestion would simply be to drop the shorthand as it’s ambiguous?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Nick Outram<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; import Foundation<br>&gt;&gt; <br>&gt;&gt; //: Consider the following enumerated type with associated data<br>&gt;&gt; enum Vehicle {<br>&gt;&gt;    case car(petrol: Bool, sizeCC: Int)<br>&gt;&gt;    case plane(engines : Int)<br>&gt;&gt;    case other(String)<br>&gt;&gt;    case none<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; //: Let&#39;s pick an example<br>&gt;&gt; let myJourney : Vehicle = .other(&quot;pogo stick&quot;)<br>&gt;&gt; <br>&gt;&gt; //: I now want to test what case `myJourney` is.<br>&gt;&gt; //:<br>&gt;&gt; //: We cannot use the `==` operator because `Vehicle` has associated data. Instead we use `if case` and *simply drop the associated value* with `_` as shown above<br>&gt;&gt; if case .other(_) = myJourney {<br>&gt;&gt;    print(&quot;Somewhere nice?&quot;)<br>&gt;&gt; } else {<br>&gt;&gt;    print(&quot;Ok, it&#39;s a secret?&quot;)<br>&gt;&gt; }<br>&gt;&gt; //:The above is clear enough once you get used to the syntax. The `_` communicates that a value has been dropped.<br>&gt;&gt; //:<br>&gt;&gt; //: **However**, Swift 3 allows us to drop the parenthesis altogether and use the following shorthand:<br>&gt;&gt; if case .other = myJourney {<br>&gt;&gt;    print(&quot;Somewhere nice?&quot;)<br>&gt;&gt; } else {<br>&gt;&gt;    print(&quot;Ok, it&#39;s a secret?&quot;)<br>&gt;&gt; }<br>&gt;&gt; //: *Unlike the previous example, I do wonder if this is a language feature that needs review?*<br>&gt;&gt; //:<br>&gt;&gt; //: - On face value, reading this code as is there is an assignment operator `=` with nothing apparently being assigned.<br>&gt;&gt; //: - It also reads as if `=` should be `==`<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161109/f41e10d4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3eada20d8d86f9b78ef64f570acd29e9?s=50"></div><header><strong>if-case syntax ambiguity</strong> from <string>Nicholas Outram</string> &lt;nicholas.outram at icloud.com&gt;<p>November  9, 2016 at 04:00:00pm</p></header><div class="content"><p>Thanks for that, it was really helpful. I see it now.<br></p><p>I’m happy to admit I had not fully appreciated the notion of pattern matching, and I very much doubt I&#39;m alone either.<br></p><p>The Swift Programming book goes some way to explain it (in the language reference section) - maybe this is an area that needs some attention (from an educational perspective).<br></p><p>Many thanks for replying.<br></p><p>Nick<br></p><p>p.s. I looked up some Erlang examples - it did help <br></p><p><br></p><p><br></p><p><br></p><p><br>&gt; On 9 Nov 2016, at 12:50, Michael Nisi &lt;michael.nisi at gmail.com&gt; wrote:<br>&gt; <br>&gt; Yes, equals isn&#39;t assignment but pattern matching here. Reminds of Erlang, which I love.<br>&gt; <br>&gt; Michael<br>&gt; <br>&gt; On 9 Nov 2016, at 12:57, Zhao Xin via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; The `if case` is the same meaning as `switch-case`, so I don&#39;t think there is anything ambitious. For `switch-case`, it is not equal, it is matching.<br>&gt;&gt; <br>&gt;&gt; Zhaoxin<br>&gt;&gt; <br>&gt;&gt; On Wed, Nov 9, 2016 at 7:17 PM, Nicholas Outram via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; Hi<br>&gt;&gt; <br>&gt;&gt; I’ve been drilling down on the syntax of enumerated types with associated data in the current release version of Swift 3.<br>&gt;&gt; I’ve pasted below a section of a Playground that captures an issue I’d like to raise.<br>&gt;&gt; <br>&gt;&gt; In summary:<br>&gt;&gt; <br>&gt;&gt; Consider the following <br>&gt;&gt; enum Vehicle {<br>&gt;&gt;    case car(petrol: Bool, sizeCC: Int)<br>&gt;&gt;    case plane(engines : Int)<br>&gt;&gt;    case other(String)<br>&gt;&gt;    case none<br>&gt;&gt; }<br>&gt;&gt; let myJourney : Vehicle = .other(&quot;pogo stick&quot;)<br>&gt;&gt; <br>&gt;&gt; Whereas the following is clear<br>&gt;&gt; if case .other(_) = myJourney<br>&gt;&gt; <br>&gt;&gt; the following shorthand equivalent is potentially confusing for the sake of 3 characters<br>&gt;&gt; if case .other = myJourney<br>&gt;&gt; <br>&gt;&gt; - In the first case, the presence of the underscore does communicate that something is being assigned, but dropped.<br>&gt;&gt; - In the second case, the reader could easily be mislead into thinking that = was supposed to be == as there no apparent place to assign anything.<br>&gt;&gt; <br>&gt;&gt; My suggestion would simply be to drop the shorthand as it’s ambiguous?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Nick Outram<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; import Foundation<br>&gt;&gt; <br>&gt;&gt; //: Consider the following enumerated type with associated data<br>&gt;&gt; enum Vehicle {<br>&gt;&gt;    case car(petrol: Bool, sizeCC: Int)<br>&gt;&gt;    case plane(engines : Int)<br>&gt;&gt;    case other(String)<br>&gt;&gt;    case none<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; //: Let&#39;s pick an example<br>&gt;&gt; let myJourney : Vehicle = .other(&quot;pogo stick&quot;)<br>&gt;&gt; <br>&gt;&gt; //: I now want to test what case `myJourney` is.<br>&gt;&gt; //:<br>&gt;&gt; //: We cannot use the `==` operator because `Vehicle` has associated data. Instead we use `if case` and *simply drop the associated value* with `_` as shown above<br>&gt;&gt; if case .other(_) = myJourney {<br>&gt;&gt;    print(&quot;Somewhere nice?&quot;)<br>&gt;&gt; } else {<br>&gt;&gt;    print(&quot;Ok, it&#39;s a secret?&quot;)<br>&gt;&gt; }<br>&gt;&gt; //:The above is clear enough once you get used to the syntax. The `_` communicates that a value has been dropped.<br>&gt;&gt; //:<br>&gt;&gt; //: **However**, Swift 3 allows us to drop the parenthesis altogether and use the following shorthand:<br>&gt;&gt; if case .other = myJourney {<br>&gt;&gt;    print(&quot;Somewhere nice?&quot;)<br>&gt;&gt; } else {<br>&gt;&gt;    print(&quot;Ok, it&#39;s a secret?&quot;)<br>&gt;&gt; }<br>&gt;&gt; //: *Unlike the previous example, I do wonder if this is a language feature that needs review?*<br>&gt;&gt; //:<br>&gt;&gt; //: - On face value, reading this code as is there is an assignment operator `=` with nothing apparently being assigned.<br>&gt;&gt; //: - It also reads as if `=` should be `==`<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161109/3620acbb/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
