<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Some concerns on custom operators</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>November  9, 2016 at 01:00:00pm</p></header><div class="content"><p>on Wed Nov 09 2016, John McCall &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Nov 9, 2016, at 9:25 AM, Anton Zhilin via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; • Upon implementation of SE-0077 in Swift 3, some libraries started to drop operators entirely:<br>&gt; link #1, link #2.<br>&gt;&gt; • Declarations of the same custom operator with different precedence groups create a conflict.<br>&gt;&gt; • The conflict can be resolved manually, but the resolution has to be made in every file that uses<br>&gt; the operator, which defeats the reason for using operators in the first place.<br>&gt;&gt; • This is a part of a larger problem of conflict resolution, for which we don’t currently have a<br>&gt; systematic approach.<br>&gt;<br>&gt; It makes sense to me to provide a more module-wide conflict resolution<br>&gt; mechanism.  Maybe we can have some sort of &quot;internal export&quot; mechanism<br>&gt; where a file can introduce imports into other files within a project.<br>&gt;<br>&gt;&gt; 		• Many libraries dealing with custom operators choose<br>&gt;&gt; to import Runes, which is basically a stockpile of operator<br>&gt;&gt; declarations. But it conflicts with Result, Swiftx and Operadics.<br>&gt;<br>&gt; Won&#39;t this just shake itself out pretty soon, assuming these projects<br>&gt; have any interest in interoperating?<br></p><p>This is a well-known library interoperability dynamic, and IMO we can&#39;t<br>expect the solution for conflicting libraries to be that you have to get<br>the library authors to communicate with one another.  That effectively<br>fixes nothing for the poor app developer who integrates these libraries.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>Some concerns on custom operators</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>November  9, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Nov 9, 2016, at 1:24 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; on Wed Nov 09 2016, John McCall &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On Nov 9, 2016, at 9:25 AM, Anton Zhilin via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; • Upon implementation of SE-0077 in Swift 3, some libraries started to drop operators entirely:<br>&gt;&gt; link #1, link #2.<br>&gt;&gt;&gt; • Declarations of the same custom operator with different precedence groups create a conflict.<br>&gt;&gt;&gt; • The conflict can be resolved manually, but the resolution has to be made in every file that uses<br>&gt;&gt; the operator, which defeats the reason for using operators in the first place.<br>&gt;&gt;&gt; • This is a part of a larger problem of conflict resolution, for which we don’t currently have a<br>&gt;&gt; systematic approach.<br>&gt;&gt; <br>&gt;&gt; It makes sense to me to provide a more module-wide conflict resolution<br>&gt;&gt; mechanism.  Maybe we can have some sort of &quot;internal export&quot; mechanism<br>&gt;&gt; where a file can introduce imports into other files within a project.<br>&gt;&gt; <br>&gt;&gt;&gt; 		• Many libraries dealing with custom operators choose<br>&gt;&gt;&gt; to import Runes, which is basically a stockpile of operator<br>&gt;&gt;&gt; declarations. But it conflicts with Result, Swiftx and Operadics.<br>&gt;&gt; <br>&gt;&gt; Won&#39;t this just shake itself out pretty soon, assuming these projects<br>&gt;&gt; have any interest in interoperating?<br>&gt; <br>&gt; This is a well-known library interoperability dynamic, and IMO we can&#39;t<br>&gt; expect the solution for conflicting libraries to be that you have to get<br>&gt; the library authors to communicate with one another.  That effectively<br>&gt; fixes nothing for the poor app developer who integrates these libraries.<br></p><p>I agree that we need to solve that problem, which is why I suggested an approach<br>for solving that problem in the previous paragraph.  But it&#39;s still reasonable for us as<br>&quot;wardens of the ecosystem&quot; to ask library authors to consider how their libraries<br>interoperate with their peers.<br></p><p>We can also make a stronger effort to ignore spurious conflicts in the language, of<br>course, e.g. by only complaining if conflicting precedencegroup declarations would<br>yield different parsing results; but that logic would get unworkably complex pretty quick.<br></p><p>John.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161109/e01caf08/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Some concerns on custom operators</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>November  9, 2016 at 01:00:00pm</p></header><div class="content"><p>on Wed Nov 09 2016, John McCall &lt;rjmccall-AT-apple.com&gt; wrote:<br></p><p>&gt;&gt; On Nov 9, 2016, at 1:24 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; on Wed Nov 09 2016, John McCall &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; On Nov 9, 2016, at 9:25 AM, Anton Zhilin via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; • Upon implementation of SE-0077 in Swift 3, some libraries started to drop operators entirely:<br>&gt;<br>&gt;&gt;&gt; link #1, link #2.<br>&gt;&gt;&gt;&gt; • Declarations of the same custom operator with different precedence groups create a conflict.<br>&gt;&gt;&gt;&gt; • The conflict can be resolved manually, but the resolution has to be made in every file that uses<br>&gt;&gt;&gt; the operator, which defeats the reason for using operators in the first place.<br>&gt;&gt;&gt;&gt; • This is a part of a larger problem of conflict resolution, for which we don’t currently have a<br>&gt;&gt;&gt; systematic approach.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It makes sense to me to provide a more module-wide conflict resolution<br>&gt;&gt;&gt; mechanism.  Maybe we can have some sort of &quot;internal export&quot; mechanism<br>&gt;&gt;&gt; where a file can introduce imports into other files within a project.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 		• Many libraries dealing with custom operators choose<br>&gt;&gt;&gt;&gt; to import Runes, which is basically a stockpile of operator<br>&gt;&gt;&gt;&gt; declarations. But it conflicts with Result, Swiftx and Operadics.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Won&#39;t this just shake itself out pretty soon, assuming these projects<br>&gt;&gt;&gt; have any interest in interoperating?<br>&gt;&gt; <br>&gt;&gt; This is a well-known library interoperability dynamic, and IMO we can&#39;t<br>&gt;&gt; expect the solution for conflicting libraries to be that you have to get<br>&gt;&gt; the library authors to communicate with one another.  That effectively<br>&gt;&gt; fixes nothing for the poor app developer who integrates these libraries.<br>&gt;<br>&gt; I agree that we need to solve that problem, which is why I suggested an approach<br>&gt; for solving that problem in the previous paragraph.  <br></p><p>Sorry if I didn&#39;t read carefully enough.<br></p><p>&gt; But it&#39;s still reasonable for us as &quot;wardens of the ecosystem&quot; to ask<br>&gt; library authors to consider how their libraries interoperate with<br>&gt; their peers.<br></p><p>Sure; that&#39;s part of the job of writing a library.<br></p><p>&gt; We can also make a stronger effort to ignore spurious conflicts in the<br>&gt; language, of course, e.g. by only complaining if conflicting<br>&gt; precedencegroup declarations would yield different parsing results;<br>&gt; but that logic would get unworkably complex pretty quick.<br>&gt;<br>&gt; John.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14f382feb5f0dd3d3700edf8d6156aa9?s=50"></div><header><strong>Some concerns on custom operators</strong> from <string>Jay Abbott</string> &lt;jay at abbott.me.uk&gt;<p>November 10, 2016 at 03:00:00pm</p></header><div class="content"><p>Would it make sense to allow some kind of operator aliasing on import, so<br>that developers can at least work-around library conflicts?<br></p><p>On Wed, 9 Nov 2016 at 21:59 Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; on Wed Nov 09 2016, John McCall &lt;rjmccall-AT-apple.com&gt; wrote:<br>&gt;<br>&gt; &gt;&gt; On Nov 9, 2016, at 1:24 PM, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt; on Wed Nov 09 2016, John McCall &lt;swift-evolution at swift.org &lt;mailto:<br>&gt; swift-evolution at swift.org&gt;&gt;<br>&gt; &gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; On Nov 9, 2016, at 9:25 AM, Anton Zhilin via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt; • Upon implementation of SE-0077 in Swift 3, some libraries started<br>&gt; to drop operators entirely:<br>&gt; &gt;<br>&gt; &gt;&gt;&gt; link #1, link #2.<br>&gt; &gt;&gt;&gt;&gt; • Declarations of the same custom operator with different precedence<br>&gt; groups create a conflict.<br>&gt; &gt;&gt;&gt;&gt; • The conflict can be resolved manually, but the resolution has to be<br>&gt; made in every file that uses<br>&gt; &gt;&gt;&gt; the operator, which defeats the reason for using operators in the<br>&gt; first place.<br>&gt; &gt;&gt;&gt;&gt; • This is a part of a larger problem of conflict resolution, for<br>&gt; which we don’t currently have a<br>&gt; &gt;&gt;&gt; systematic approach.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; It makes sense to me to provide a more module-wide conflict resolution<br>&gt; &gt;&gt;&gt; mechanism.  Maybe we can have some sort of &quot;internal export&quot; mechanism<br>&gt; &gt;&gt;&gt; where a file can introduce imports into other files within a project.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;            • Many libraries dealing with custom operators choose<br>&gt; &gt;&gt;&gt;&gt; to import Runes, which is basically a stockpile of operator<br>&gt; &gt;&gt;&gt;&gt; declarations. But it conflicts with Result, Swiftx and Operadics.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Won&#39;t this just shake itself out pretty soon, assuming these projects<br>&gt; &gt;&gt;&gt; have any interest in interoperating?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; This is a well-known library interoperability dynamic, and IMO we can&#39;t<br>&gt; &gt;&gt; expect the solution for conflicting libraries to be that you have to get<br>&gt; &gt;&gt; the library authors to communicate with one another.  That effectively<br>&gt; &gt;&gt; fixes nothing for the poor app developer who integrates these libraries.<br>&gt; &gt;<br>&gt; &gt; I agree that we need to solve that problem, which is why I suggested an<br>&gt; approach<br>&gt; &gt; for solving that problem in the previous paragraph.<br>&gt;<br>&gt; Sorry if I didn&#39;t read carefully enough.<br>&gt;<br>&gt; &gt; But it&#39;s still reasonable for us as &quot;wardens of the ecosystem&quot; to ask<br>&gt; &gt; library authors to consider how their libraries interoperate with<br>&gt; &gt; their peers.<br>&gt;<br>&gt; Sure; that&#39;s part of the job of writing a library.<br>&gt;<br>&gt; &gt; We can also make a stronger effort to ignore spurious conflicts in the<br>&gt; &gt; language, of course, e.g. by only complaining if conflicting<br>&gt; &gt; precedencegroup declarations would yield different parsing results;<br>&gt; &gt; but that logic would get unworkably complex pretty quick.<br>&gt; &gt;<br>&gt; &gt; John.<br>&gt;<br>&gt; --<br>&gt; -Dave<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161110/cc6a7463/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Some concerns on custom operators</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>November 10, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Nov 10, 2016, at 7:23 AM, Jay Abbott via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Would it make sense to allow some kind of operator aliasing on import, so that developers can at least work-around library conflicts?<br></p><p>Definitely. I think something like the import improvements Robert Widmann was proposing a while back are sorely needed, not only for operators but for managing conflicts in general.<br></p><p>-Joe<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
