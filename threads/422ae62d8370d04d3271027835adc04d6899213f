<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bce64da43e291f2ce30987a83780502c?s=50"></div><header><strong>API Guidelines: dropFirst?</strong> from <string>Patrick Pijnappel</string> &lt;patrickpijnappel at gmail.com&gt;<p>June 16, 2016 at 08:00:00am</p></header><div class="content"><p>What is the rationale behind the name dropFirst()? Being a non-mutating<br>method it should clearly be e.g. droppingFirst() according to the API<br>Naming Guidelines.<br></p><p>I can&#39;t seem to find the SE thread dealing with this.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160616/422a213f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>API Guidelines: dropFirst?</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>June 16, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; What is the rationale behind the name dropFirst()? Being a non-mutating method it should clearly be e.g. droppingFirst() according to the API Naming Guidelines.<br></p><p>Like many `Sequence` and `Collection` operations, `dropFirst()` is a result of the &quot;term of art&quot; exception, which is implied by the &quot;Use Terminology Well&quot; section of the API Guidelines: &lt;https://swift.org/documentation/api-design-guidelines/#use-terminology-well&gt;<br></p><p>Many languages use `dropWhatever` or `drop_whatever` for operations which return some sort of list with some of its leading or trailing elements removed. For instance:<br></p><p>* Ruby (which I happen to have in Dash) has `drop(n)` and `drop_while` methods.<br>* Haskell has `drop n`, `dropWhile`, and `dropWhileEnd` functions.<br>* Scala has a `drop(n)` method.<br>* R has a `dropFirst` function.<br></p><p>The standard library has chosen to break its usual patterns in order to maintain consistency with languages like these.<br></p><p>Personally, I believe the term of art exception has been misapplied in this area of the language; the precedents are not very strong, and the resulting APIs form a patchwork of inconsistent names rather than a coherent family. The term of art exception increases the clarity of calls like `map` and `filter` where the names are truly universal, but it impedes the clarity of the whole family of `first`/`prefix`/`suffix`/`last` calls, and the names should be revisited and rationalized. But that hasn&#39;t happened yet.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>API Guidelines: dropFirst?</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June 16, 2016 at 01:00:00pm</p></header><div class="content"><p>On 16.06.2016 10:39, Brent Royal-Gordon via swift-evolution wrote:<br>&gt;&gt; What is the rationale behind the name dropFirst()? Being a<br>&gt;&gt; non-mutating method it should clearly be e.g. droppingFirst()<br>&gt;&gt; according to the API Naming Guidelines.<br>&gt;<br>&gt; Like many `Sequence` and `Collection` operations, `dropFirst()` is a<br>&gt; result of the &quot;term of art&quot; exception, which is implied by the &quot;Use<br>&gt; Terminology Well&quot; section of the API Guidelines:<br>&gt; &lt;https://swift.org/documentation/api-design-guidelines/#use-terminology-well&gt;<br>&gt;<br>&gt;  Many languages use `dropWhatever` or `drop_whatever` for operations<br>&gt; which return some sort of list with some of its leading or trailing<br>&gt; elements removed. For instance:<br>&gt;<br>&gt; * Ruby (which I happen to have in Dash) has `drop(n)` and `drop_while`<br>&gt; methods. * Haskell has `drop n`, `dropWhile`, and `dropWhileEnd`<br>&gt; functions. * Scala has a `drop(n)` method. * R has a `dropFirst`<br>&gt; function.<br>&gt;<br>&gt; The standard library has chosen to break its usual patterns in order to<br>&gt; maintain consistency with languages like these.<br>&gt;<br>&gt; Personally, I believe the term of art exception has been misapplied in<br>&gt; this area of the language; the precedents are not very strong, and the<br>&gt; resulting APIs form a patchwork of inconsistent names rather than a<br>&gt; coherent family. The term of art exception increases the clarity of<br>&gt; calls like `map` and `filter` where the names are truly universal, but<br>&gt; it impedes the clarity of the whole family of<br>&gt; `first`/`prefix`/`suffix`/`last` calls, and the names should be<br>&gt; revisited and rationalized. But that hasn&#39;t happened yet.<br>&gt;<br></p><p>Agree with your opinion. As I understand, these languages are functional <br>languages or languages that have non-mutating methods as 1st class <br>citizens. That is why &#39;dropX&#39; in them by default means non-mutating method. <br>They just don&#39;t need to somehow highlight that the method is non-mutating <br>(but can highlight mutatuing method as in Ruby with &#39;!&#39;).<br></p><p>In Swift prior 3.0 we had the same situation : there was &#39;default&#39; <br>non-mutating method and &#39;xxInPlace&#39; for mutating method. Now, in Swift 3 we <br>have &quot;default&quot; name for mutating methods and changed(to highlight) names <br>for non-mutating. I believe there is no sense to leave methods other than <br>(map/filter/reduce) in their initial view as this IMO will only confuse <br>Swift coders that will expect &#39;droppingXXX&#39; for non-mutating method.<br></p><p>IMO To keep the consistency with modern languages, we should have <br>non-mutating methods with &quot;default&quot; name and &quot;modified&quot; for mutating.<br>As this solution was not chosen, then IMO we need to keep just <br>map/filer/reduce for non-mutating as &quot;term of art&quot; and explicitly highlight <br>that in documentation but use accepted naming rules for *all* other method <br>names to reduce the confusion. Only in this way we&#39;ll have consistency and <br>clear rules for naming. Otherwise we&#39;ll have a situation with naming in <br>Swift 3.0 worse than in Swift 2.<br></p><p>And, if I don&#39;t need know/use these languages, why should I care of their <br>naming elsewhere and have non-consistent names for some Swift methods?!<br></p><p>Btw, can&#39;t we say that &#39;sort&#39; is also a term of art?<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>API Guidelines: dropFirst?</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>June 16, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On 16 Jun 2016, at 08:39, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; What is the rationale behind the name dropFirst()? Being a non-mutating method it should clearly be e.g. droppingFirst() according to the API Naming Guidelines.<br>&gt; <br>&gt; Like many `Sequence` and `Collection` operations, `dropFirst()` is a result of the &quot;term of art&quot; exception, which is implied by the &quot;Use Terminology Well&quot; section of the API Guidelines: &lt;https://swift.org/documentation/api-design-guidelines/#use-terminology-well&gt;<br>&gt; <br>&gt; Many languages use `dropWhatever` or `drop_whatever` for operations which return some sort of list with some of its leading or trailing elements removed. For instance:<br>&gt; <br>&gt; * Ruby (which I happen to have in Dash) has `drop(n)` and `drop_while` methods.<br>&gt; * Haskell has `drop n`, `dropWhile`, and `dropWhileEnd` functions.<br>&gt; * Scala has a `drop(n)` method.<br>&gt; * R has a `dropFirst` function.<br>&gt; <br>&gt; The standard library has chosen to break its usual patterns in order to maintain consistency with languages like these.<br>&gt; <br>&gt; Personally, I believe the term of art exception has been misapplied in this area of the language; the precedents are not very strong, and the resulting APIs form a patchwork of inconsistent names rather than a coherent family. The term of art exception increases the clarity of calls like `map` and `filter` where the names are truly universal, but it impedes the clarity of the whole family of `first`/`prefix`/`suffix`/`last` calls, and the names should be revisited and rationalized. But that hasn&#39;t happened yet.<br></p><p>I’m not a big fan of the term of art exception personally.<br></p><p>That said I actually think it’s useful to have these methods slightly different as if I understand them correctly they’re not strictly non-mutating; a Sequence doesn’t guarantee that it can be consumed over and over without changing, as it could represent a buffer or some other construct that’s consumed as it’s accessed, so calling dropFirst() on a sequence, then calling it again on the same sequence may not yield the same result both times, for that you want a Collection (or a specific sequence implementation with well defined behaviour), but for a generic sequence I don’t think you can trust the method to be non-mutating unless you know what the sequence is backed by, so it shouldn’t follow the rule for non-mutating methods.<br></p><p>Of course this gets us into a weird position when it comes to naming things consistently, because it means the name follows the mutating naming convention because it *could* be mutating behind the scenes. It’s one of those areas where things get confusing, as because a type is a struct, doesn’t mean it doesn’t use a share class instance behind the scenes for example, fun stuff ;)<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>API Guidelines: dropFirst?</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>June 16, 2016 at 04:00:00am</p></header><div class="content"><p>&gt; That said I actually think it’s useful to have these methods slightly different as if I understand them correctly they’re not strictly non-mutating; a Sequence doesn’t guarantee that it can be consumed over and over without changing, as it could represent a buffer or some other construct that’s consumed as it’s accessed, so calling dropFirst() on a sequence, then calling it again on the same sequence may not yield the same result both times, for that you want a Collection (or a specific sequence implementation with well defined behaviour), but for a generic sequence I don’t think you can trust the method to be non-mutating unless you know what the sequence is backed by, so it shouldn’t follow the rule for non-mutating methods.<br></p><p>`dropFirst()`, like all `Sequence` APIs, works perfectly and reliably as long as you only access the contents of the `Sequence` once. Attempting to iterate the `Sequence` more than once may or may not work, so you shouldn&#39;t do it without static knowledge of the concrete type&#39;s behavior (for instance, knowledge that it&#39;s actually a `Collection`).<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
