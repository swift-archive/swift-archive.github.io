<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d04f3c48ab68a1dd3e712dcab04004ce?s=50"></div><header><strong>[Pitch] Version-pinned patching of public declarations</strong> from <string>Curt Clifton</string> &lt;curt at omnigroup.com&gt;<p>January 17, 2016 at 09:00:00pm</p></header><div class="content"><p>I&#39;m late to this thread and replying via a mail-to link from the archives, for both I apologize.<br></p><p>I wanted to express my support for this proposal. I&#39;m pleased that it addresses the specific concerns that I and others raised in the discussion of final/sealed-by-default regarding the need for some sort of escape hatch to work around framework bugs. Keying patches to specific framework or OS revisions seems like a reasonable approach. I brought the idea up at Seattle Xcoders this week and there was general agreement that folks were happy to update their apps for updated framework versions, whether to remove no longer necessary patches or to specify that some patches were still needed. <br></p><p>There are lots of interesting corner cases, of course, to deal with customers who update their OS but don&#39;t update an app and vice versa, but lifting patches to the language level seems like a promising way to improve robustness while decreasing the burden on framework authors of dragging &quot;do not break&quot; apps along.<br></p><p>Thanks again for the proposal.<br></p><p>Cheers,<br></p><p>Curt<br></p><p>Curt Clifton, PhD<br>Software Developer<br>The Omni Group<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9f91e04080667c3eff3b0e8b6b804cd5?s=50"></div><header><strong>[Pitch] Version-pinned patching of public declarations</strong> from <string>Ari Weinstein</string> &lt;ari at deskconnect.com&gt;<p>February 11, 2016 at 02:00:00pm</p></header><div class="content"><p>Hi all,<br></p><p>I just wanted to throw some more support behind this. Having such a<br>patching mechanism built-in to the language and allowing developers to work<br>around the inevitable bugs in frameworks (system or otherwise) would be a<br>huge boon to the developer community and ultimately, users.<br></p><p>There are some issues with the single version-based patching approach. For<br>example, if I&#39;m working around a bug in a system framework in iOS 9.0, and<br>Apple suddenly releases a bug-fix update like iOS 9.0.1 that doesn&#39;t fix<br>the issue, I don&#39;t have the opportunity to release an update, and my patch<br>would break. Additionally, it seems potentially unreasonable for developers<br>would have to release updates simply to uphold patches for bugs that aren&#39;t<br>fixed (many bugs in iOS system frameworks go several releases before being<br>fixed).<br></p><p>In my head, it&#39;d make sense for the version-patching to specify a start and<br>end version - like, &quot;this patch should be used when using a framework with<br>a version between 1.2 and 2.0.1.&quot; If there is no applicable end version<br>yet, the developer could specify only a start version, and update the app<br>with the appropriate end version when the issue has been resolved.<br></p><p>Ari<br></p><p>Ari Weinstein<br>Co-founder of Workflow<br></p><p>On Sun, Jan 17, 2016 at 9:40 PM, Curt Clifton via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I&#39;m late to this thread and replying via a mail-to link from the archives,<br>&gt; for both I apologize.<br>&gt;<br>&gt; I wanted to express my support for this proposal. I&#39;m pleased that it<br>&gt; addresses the specific concerns that I and others raised in the discussion<br>&gt; of final/sealed-by-default regarding the need for some sort of escape hatch<br>&gt; to work around framework bugs. Keying patches to specific framework or OS<br>&gt; revisions seems like a reasonable approach. I brought the idea up at<br>&gt; Seattle Xcoders this week and there was general agreement that folks were<br>&gt; happy to update their apps for updated framework versions, whether to<br>&gt; remove no longer necessary patches or to specify that some patches were<br>&gt; still needed.<br>&gt;<br>&gt; There are lots of interesting corner cases, of course, to deal with<br>&gt; customers who update their OS but don&#39;t update an app and vice versa, but<br>&gt; lifting patches to the language level seems like a promising way to improve<br>&gt; robustness while decreasing the burden on framework authors of dragging &quot;do<br>&gt; not break&quot; apps along.<br>&gt;<br>&gt; Thanks again for the proposal.<br>&gt;<br>&gt; Cheers,<br>&gt;<br>&gt; Curt<br>&gt;<br>&gt; Curt Clifton, PhD<br>&gt; Software Developer<br>&gt; The Omni Group<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/db3a9eee/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Pitch] Version-pinned patching of public declarations</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>February 12, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; There are some issues with the single version-based patching approach. For example, if I&#39;m working around a bug in a system framework in iOS 9.0, and Apple suddenly releases a bug-fix update like iOS 9.0.1 that doesn&#39;t fix the issue, I don&#39;t have the opportunity to release an update, and my patch would break. Additionally, it seems potentially unreasonable for developers would have to release updates simply to uphold patches for bugs that aren&#39;t fixed (many bugs in iOS system frameworks go several releases before being fixed).<br>&gt; <br>&gt; In my head, it&#39;d make sense for the version-patching to specify a start and end version - like, &quot;this patch should be used when using a framework with a version between 1.2 and 2.0.1.&quot; If there is no applicable end version yet, the developer could specify only a start version, and update the app with the appropriate end version when the issue has been resolved.<br></p><p>The problem is, if you&#39;re working around OS bugs by patching the system frameworks, you really need to be programming defensively and testing your patches carefully. In other words, you need to qualify your releases on the new version anyway. This aspect of the patching feature simply forces you to do the work you need to be doing anyway if you&#39;re doing something so dangerous.<br></p><p>Unbetaed snap OS releases *are* a problem, though. Perhaps we could compromise by continuing to apply the patch on OS patch releases, so a patch qualified for 9.0.0 would also apply on 9.0.1. But with minor releases, and certainly major releases, you should always have enough time to requalify your patches, so they shouldn&#39;t automatically carry over.<br></p><p>I really don&#39;t think, though, that we should have open-ended patching as you proposeâ€”following @Catfish_Man gives me a lot of empathy for the poor framework engineers who have to deal with our ludicrous hacks.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
