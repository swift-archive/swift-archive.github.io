<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2b6739ee4a85c74440c138932550002f?s=50"></div><header><strong>[Idea] &quot;guard not let&quot; optional binding</strong> from <string>John Morgan</string> &lt;johnpatrickmorganuk at gmail.com&gt;<p>May 16, 2016 at 09:00:00am</p></header><div class="content"><p>I&#39;ve occasionally hit this problem but I don’t think this warrants a<br>language addition, as it can be overcome in other ways. I would move the<br>expensive calculation into its own private method and rewrite your example<br>like this:<br></p><p>return cachedValue ?? calculatedValue()<br></p><p>In my opinion that would fit better with the single responsibility<br>principle and make unit testing easier.<br></p><p>John<br></p><p>&gt; -1 as there IMO some confusion between all these `not` and `else` and the<br>&gt; meaning of the expression at all is not obvious for me: &quot;check that not<br>&gt; allowed to assign _someExpensiveResult to some instance cachedValue,<br>&gt; otherwise return something&quot;<br>&gt;<br>&gt; This really looks nice, clean and obvious :<br>&gt;<br>&gt; guard cachedValue == nil else {<br>&gt; // here you need just to fast return unwrapped value of cachedValue<br>&gt; // so, IMO unwrapping it in this block is OK<br>&gt; return cachedValue!<br>&gt; }<br>&gt; // here you want to have cachedValue == nil, so you&#39;ll need to unwrap<br>&gt; it(after assignment) in any case.<br>&gt;<br>&gt; What I can see as improvement in this direction, something like this:<br>&gt; guard cachedValue == nil else let cachedValue! {<br>&gt; // here you can use unwrapped cachedValue<br>&gt; return cachedValue<br>&gt; }<br>&gt;<br>&gt;<br>&gt; Hmm... Btw, what about improving in optional binding: It is common to<br>&gt; shadow optional value name with unwrapped value with same name:<br>&gt;<br>&gt; if let value = value {...} // too much noise<br>&gt;<br>&gt; What about introduce such syntax:<br>&gt;<br>&gt; if let value! {<br>&gt; // unwrapped value here<br>&gt; }<br>&gt;<br>&gt; Seems like clear and obvious about what does this mean. Opinions? (before<br>I<br>&gt; drop this to separate thread)<br>&gt;<br>&gt;<br>&gt; On 14.05.2016 8:52, Karl via swift-evolution wrote:<br>&gt; &gt; If we want to check that an optional has a value and bail if it<br>doesn&#39;t, we have the helpful pattern:<br>&gt; &gt;<br>&gt; &gt; guard let x = x else { throw SomeError }<br>&gt; &gt;<br>&gt; &gt; However, it is also fairly common that you want to check that an<br>optional *is* nil, and still bail if it isn’t (maybe using the value that<br>you now know exists), e.g:<br>&gt; &gt;<br>&gt; &gt; guard cachedValue == nil else { return cachedValue! }<br>&gt; &gt; cachedValue = //… expensive calculation<br>&gt; &gt;<br>&gt; &gt; It seems a little bit “unfair” that we have this lovely clean `let`<br>syntax when checking for Optional.Some, but we to have to do this ugly<br>manual check against nil and explicit unwrap when checking for<br>Optional.None. There is literally no other way to satisfy the guard<br>statement; our optional bindings only go one-way can’t be evaluated.<br>&gt; &gt;<br>&gt; &gt; What about if we introduced a “not” modifier to optional bindings?<br>&gt; &gt;<br>&gt; &gt; guard not let cachedValue = _someExpensiveResult else { return<br>cachedValue }<br>&gt; &gt;<br>&gt; &gt; This obviously wouldn’t make sense for “if let…” switching, as the<br>variables get bound in the ‘else’ block and the code wouldn’t be very<br>readable. For the special case of a guard statement, though, which only has<br>an ‘else’ block, it does make some sense.<br>&gt; &gt;<br>&gt; &gt; If we had something like this, certainly in my code, I’d be able to<br>eliminate almost all (maybe even all) remaining force-unwraps of optionals;<br>that’s great! It’d be amazing if the language was expressive enough that<br>you could go without ever having to force-unwrap an optional. And it just<br>makes sense.<br>&gt; &gt;<br>&gt; &gt; Thoughts?<br>&gt; &gt;<br>&gt; &gt; Karl<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160516/e0b8cd6a/attachment.html&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
