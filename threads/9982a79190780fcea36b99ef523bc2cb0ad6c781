<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Swift Package Manager 3.0 Project Status</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>August 17, 2016 at 03:00:00pm</p></header><div class="content"><p>Hi everyone,<br></p><p>The package manager was a brand new project released with open source Swift, and we have made significant progress as part of Swift 3.0. Starting from that humble beginning we now estimate there are around 3,500 Swift Packages on GitHub (*), with more and more showing up every day.<br></p><p>Since release, we have seen a rapid explosion in the package ecosystem with brand new Swift-based web frameworks (like Kitura, Perfect, Vapor, and Zewo), tooling and infrastructure (like the IBM Package Catalog and swiftenv), or simply adoption by existing popular Swift frameworks (like Alamofire, SnapKit, SwiftJSON, and RxSwift).<br></p><p>We wanted to lay out our plans for the package manager with regard to the upcoming Swift 3.0 release, some project status, and a bit about our future directions.<br></p><p><br>## Release Plan<br></p><p>Our `swift-3.0` branch was cut along with the Swift compiler project and will be our final release branch for the Swift 3.0 release. At this point, the only changes we anticipate taking onto the branch are ones that have significant impact on our current user base (primarily those focused on server-side Swift development).<br></p><p>Swift 3.0 will be the first official release including the package manager, which is also shipping as a command line tool inside Xcode 8. We are looking forward to seeing the ecosystem develop as these tools GM alongside the now source stable Swift 3.0!<br></p><p><br>## Project Status<br></p><p>We have accomplished a lot in the past year, but the package manager still has a long way to go and there are a number of areas where we know there to be significant limitations:<br></p><p>* The current dependency resolution strategy is not able to resolve complex graphs with conflicts. This has not proved to be a major problem so far -- we suspect because of the relative youth of the ecosystem -- but this is an area known to need significant work.<br></p><p>* It can be quite difficult to deploy binaries built with the package manager, and there are little to no controls over some of the necessary parameters (like static versus dynamic linking, or management of linker RPATH values). See SR-648, SR-674, SR-1968, SR-2048.<br></p><p>* We are missing important workflows for a number of typical development scenarios: (1) lock files / version pinning, (2) editable packages (SE-0082), (3) master/trunk-style development (SR-666), and (4) vendoring dependencies (SR-679).<br></p><p>* Our documentation needs more work.<br></p><p><br>## Future Directions<br></p><p>The immediate focus for the package manager is on features and bug fixes which address the issues mentioned above and improve the usability of the tool, but which do not require significant changes to the current overall design (in particular, we would like to defer major changes to the manifest API until we have resolved more of the workflow issues).<br></p><p>Towards that end, the things we are interested in tackling in the short term are:<br></p><p>* Editable packages (SE-0082)<br>* Improved dependency graph resolution &amp; diagnostics:<br>  * Fine-grained package dependencies<br>  * Branch support (SR-666)<br>  * Version lockfiles/pinning<br>  * Dependency name collisions<br>* Stabilizing the manifest API for Swift 4<br>* Focused improvements to the Xcode project generator (SR-1653, SR-1655, SR-1740, SR-1741).<br>* Support for managing supported Swift language versions, as this feature develops in the compiler.<br>* Improvements to build consistency (SR-1708, SR-2182).<br>* Improvements to documentation (SR-2179, SR-1586).<br>* Improvements to diagnostics and usability (SR-879, SR-1388, SR-2261, SR-2270, SR-2271).<br>* Performance<br></p><p>Once we are on a more stable footing, there are many things we could tackle next. Here are some of the areas we are interested in investigating, to see if any of them fit in the scope of Swift 4:<br></p><p>* Evaluating the role for a centralized package index<br>* Extending the package model to support more use cases (extensible build targets, custom source layouts, more expressive product definition APIs)<br>* Package metadata such as license and attribution information<br>* Supporting repositories containing multiple packages<br>* Support for third-party testing frameworks<br>* Support for cross-compilation<br></p><p><br>We hope that gives some picture of where the Swift package manager is headed. It&#39;s an exciting time for Swift development, and we can&#39;t wait to see what the year holds!<br></p><p>- Daniel<br></p><p>(*) See https://github.com/czechboy0/swiftpm-packages-statistics, itself powered by a Swift Package.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>[swift-evolution] Swift Package Manager 3.0 Project Status</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>August 17, 2016 at 07:00:00pm</p></header><div class="content"><p>What are the near term plans–if there are any–for supporting iOS? I made<br>the mistake of assuming support was a couple months away at most when the<br>package manager was announced. I plan to port my iOS/Mac frameworks over as<br>soon as I can.<br></p><p>TJ<br></p><p>On Wed, Aug 17, 2016 at 6:44 PM, Daniel Dunbar via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hi everyone,<br>&gt;<br>&gt; The package manager was a brand new project released with open source<br>&gt; Swift, and we have made significant progress as part of Swift 3.0. Starting<br>&gt; from that humble beginning we now estimate there are around 3,500 Swift<br>&gt; Packages on GitHub (*), with more and more showing up every day.<br>&gt;<br>&gt; Since release, we have seen a rapid explosion in the package ecosystem<br>&gt; with brand new Swift-based web frameworks (like Kitura, Perfect, Vapor, and<br>&gt; Zewo), tooling and infrastructure (like the IBM Package Catalog and<br>&gt; swiftenv), or simply adoption by existing popular Swift frameworks (like<br>&gt; Alamofire, SnapKit, SwiftJSON, and RxSwift).<br>&gt;<br>&gt; We wanted to lay out our plans for the package manager with regard to the<br>&gt; upcoming Swift 3.0 release, some project status, and a bit about our future<br>&gt; directions.<br>&gt;<br>&gt;<br>&gt; ## Release Plan<br>&gt;<br>&gt; Our `swift-3.0` branch was cut along with the Swift compiler project and<br>&gt; will be our final release branch for the Swift 3.0 release. At this point,<br>&gt; the only changes we anticipate taking onto the branch are ones that have<br>&gt; significant impact on our current user base (primarily those focused on<br>&gt; server-side Swift development).<br>&gt;<br>&gt; Swift 3.0 will be the first official release including the package<br>&gt; manager, which is also shipping as a command line tool inside Xcode 8. We<br>&gt; are looking forward to seeing the ecosystem develop as these tools GM<br>&gt; alongside the now source stable Swift 3.0!<br>&gt;<br>&gt;<br>&gt; ## Project Status<br>&gt;<br>&gt; We have accomplished a lot in the past year, but the package manager still<br>&gt; has a long way to go and there are a number of areas where we know there to<br>&gt; be significant limitations:<br>&gt;<br>&gt; * The current dependency resolution strategy is not able to resolve<br>&gt; complex graphs with conflicts. This has not proved to be a major problem so<br>&gt; far -- we suspect because of the relative youth of the ecosystem -- but<br>&gt; this is an area known to need significant work.<br>&gt;<br>&gt; * It can be quite difficult to deploy binaries built with the package<br>&gt; manager, and there are little to no controls over some of the necessary<br>&gt; parameters (like static versus dynamic linking, or management of linker<br>&gt; RPATH values). See SR-648, SR-674, SR-1968, SR-2048.<br>&gt;<br>&gt; * We are missing important workflows for a number of typical development<br>&gt; scenarios: (1) lock files / version pinning, (2) editable packages<br>&gt; (SE-0082), (3) master/trunk-style development (SR-666), and (4) vendoring<br>&gt; dependencies (SR-679).<br>&gt;<br>&gt; * Our documentation needs more work.<br>&gt;<br>&gt;<br>&gt; ## Future Directions<br>&gt;<br>&gt; The immediate focus for the package manager is on features and bug fixes<br>&gt; which address the issues mentioned above and improve the usability of the<br>&gt; tool, but which do not require significant changes to the current overall<br>&gt; design (in particular, we would like to defer major changes to the manifest<br>&gt; API until we have resolved more of the workflow issues).<br>&gt;<br>&gt; Towards that end, the things we are interested in tackling in the short<br>&gt; term are:<br>&gt;<br>&gt; * Editable packages (SE-0082)<br>&gt; * Improved dependency graph resolution &amp; diagnostics:<br>&gt;   * Fine-grained package dependencies<br>&gt;   * Branch support (SR-666)<br>&gt;   * Version lockfiles/pinning<br>&gt;   * Dependency name collisions<br>&gt; * Stabilizing the manifest API for Swift 4<br>&gt; * Focused improvements to the Xcode project generator (SR-1653, SR-1655,<br>&gt; SR-1740, SR-1741).<br>&gt; * Support for managing supported Swift language versions, as this feature<br>&gt; develops in the compiler.<br>&gt; * Improvements to build consistency (SR-1708, SR-2182).<br>&gt; * Improvements to documentation (SR-2179, SR-1586).<br>&gt; * Improvements to diagnostics and usability (SR-879, SR-1388, SR-2261,<br>&gt; SR-2270, SR-2271).<br>&gt; * Performance<br>&gt;<br>&gt; Once we are on a more stable footing, there are many things we could<br>&gt; tackle next. Here are some of the areas we are interested in investigating,<br>&gt; to see if any of them fit in the scope of Swift 4:<br>&gt;<br>&gt; * Evaluating the role for a centralized package index<br>&gt; * Extending the package model to support more use cases (extensible build<br>&gt; targets, custom source layouts, more expressive product definition APIs)<br>&gt; * Package metadata such as license and attribution information<br>&gt; * Supporting repositories containing multiple packages<br>&gt; * Support for third-party testing frameworks<br>&gt; * Support for cross-compilation<br>&gt;<br>&gt;<br>&gt; We hope that gives some picture of where the Swift package manager is<br>&gt; headed. It&#39;s an exciting time for Swift development, and we can&#39;t wait to<br>&gt; see what the year holds!<br>&gt;<br>&gt; - Daniel<br>&gt;<br>&gt; (*) See https://github.com/czechboy0/swiftpm-packages-statistics, itself<br>&gt; powered by a Swift Package.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160817/e053d141/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1b54c2d366bbc31b41cf7dcbc77324f9?s=50"></div><header><strong>[swift-evolution] Swift Package Manager 3.0 Project Status</strong> from <string>Keith Smiley</string> &lt;k at keith.so&gt;<p>August 17, 2016 at 06:00:00pm</p></header><div class="content"><p>It sounds like we may not get any heads up about any work on that level of<br>integration:<br></p><p>https://twitter.com/jckarter/status/766072626624073729<br></p><p>Which I guess also brings up the question of whether or not it will be done in<br>public (which might also be unanswerable).<br></p><p>--<br>Keith Smiley<br></p><p>On 08/17, T.J. Usiyan via swift-evolution wrote:<br>&gt; What are the near term plans–if there are any–for supporting iOS? I made<br>&gt; the mistake of assuming support was a couple months away at most when the<br>&gt; package manager was announced. I plan to port my iOS/Mac frameworks over as<br>&gt; soon as I can.<br>&gt;<br>&gt; TJ<br>&gt;<br>&gt; On Wed, Aug 17, 2016 at 6:44 PM, Daniel Dunbar via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt; Hi everyone,<br>&gt; &gt;<br>&gt; &gt; The package manager was a brand new project released with open source<br>&gt; &gt; Swift, and we have made significant progress as part of Swift 3.0. Starting<br>&gt; &gt; from that humble beginning we now estimate there are around 3,500 Swift<br>&gt; &gt; Packages on GitHub (*), with more and more showing up every day.<br>&gt; &gt;<br>&gt; &gt; Since release, we have seen a rapid explosion in the package ecosystem<br>&gt; &gt; with brand new Swift-based web frameworks (like Kitura, Perfect, Vapor, and<br>&gt; &gt; Zewo), tooling and infrastructure (like the IBM Package Catalog and<br>&gt; &gt; swiftenv), or simply adoption by existing popular Swift frameworks (like<br>&gt; &gt; Alamofire, SnapKit, SwiftJSON, and RxSwift).<br>&gt; &gt;<br>&gt; &gt; We wanted to lay out our plans for the package manager with regard to the<br>&gt; &gt; upcoming Swift 3.0 release, some project status, and a bit about our future<br>&gt; &gt; directions.<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; ## Release Plan<br>&gt; &gt;<br>&gt; &gt; Our `swift-3.0` branch was cut along with the Swift compiler project and<br>&gt; &gt; will be our final release branch for the Swift 3.0 release. At this point,<br>&gt; &gt; the only changes we anticipate taking onto the branch are ones that have<br>&gt; &gt; significant impact on our current user base (primarily those focused on<br>&gt; &gt; server-side Swift development).<br>&gt; &gt;<br>&gt; &gt; Swift 3.0 will be the first official release including the package<br>&gt; &gt; manager, which is also shipping as a command line tool inside Xcode 8. We<br>&gt; &gt; are looking forward to seeing the ecosystem develop as these tools GM<br>&gt; &gt; alongside the now source stable Swift 3.0!<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; ## Project Status<br>&gt; &gt;<br>&gt; &gt; We have accomplished a lot in the past year, but the package manager still<br>&gt; &gt; has a long way to go and there are a number of areas where we know there to<br>&gt; &gt; be significant limitations:<br>&gt; &gt;<br>&gt; &gt; * The current dependency resolution strategy is not able to resolve<br>&gt; &gt; complex graphs with conflicts. This has not proved to be a major problem so<br>&gt; &gt; far -- we suspect because of the relative youth of the ecosystem -- but<br>&gt; &gt; this is an area known to need significant work.<br>&gt; &gt;<br>&gt; &gt; * It can be quite difficult to deploy binaries built with the package<br>&gt; &gt; manager, and there are little to no controls over some of the necessary<br>&gt; &gt; parameters (like static versus dynamic linking, or management of linker<br>&gt; &gt; RPATH values). See SR-648, SR-674, SR-1968, SR-2048.<br>&gt; &gt;<br>&gt; &gt; * We are missing important workflows for a number of typical development<br>&gt; &gt; scenarios: (1) lock files / version pinning, (2) editable packages<br>&gt; &gt; (SE-0082), (3) master/trunk-style development (SR-666), and (4) vendoring<br>&gt; &gt; dependencies (SR-679).<br>&gt; &gt;<br>&gt; &gt; * Our documentation needs more work.<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; ## Future Directions<br>&gt; &gt;<br>&gt; &gt; The immediate focus for the package manager is on features and bug fixes<br>&gt; &gt; which address the issues mentioned above and improve the usability of the<br>&gt; &gt; tool, but which do not require significant changes to the current overall<br>&gt; &gt; design (in particular, we would like to defer major changes to the manifest<br>&gt; &gt; API until we have resolved more of the workflow issues).<br>&gt; &gt;<br>&gt; &gt; Towards that end, the things we are interested in tackling in the short<br>&gt; &gt; term are:<br>&gt; &gt;<br>&gt; &gt; * Editable packages (SE-0082)<br>&gt; &gt; * Improved dependency graph resolution &amp; diagnostics:<br>&gt; &gt;   * Fine-grained package dependencies<br>&gt; &gt;   * Branch support (SR-666)<br>&gt; &gt;   * Version lockfiles/pinning<br>&gt; &gt;   * Dependency name collisions<br>&gt; &gt; * Stabilizing the manifest API for Swift 4<br>&gt; &gt; * Focused improvements to the Xcode project generator (SR-1653, SR-1655,<br>&gt; &gt; SR-1740, SR-1741).<br>&gt; &gt; * Support for managing supported Swift language versions, as this feature<br>&gt; &gt; develops in the compiler.<br>&gt; &gt; * Improvements to build consistency (SR-1708, SR-2182).<br>&gt; &gt; * Improvements to documentation (SR-2179, SR-1586).<br>&gt; &gt; * Improvements to diagnostics and usability (SR-879, SR-1388, SR-2261,<br>&gt; &gt; SR-2270, SR-2271).<br>&gt; &gt; * Performance<br>&gt; &gt;<br>&gt; &gt; Once we are on a more stable footing, there are many things we could<br>&gt; &gt; tackle next. Here are some of the areas we are interested in investigating,<br>&gt; &gt; to see if any of them fit in the scope of Swift 4:<br>&gt; &gt;<br>&gt; &gt; * Evaluating the role for a centralized package index<br>&gt; &gt; * Extending the package model to support more use cases (extensible build<br>&gt; &gt; targets, custom source layouts, more expressive product definition APIs)<br>&gt; &gt; * Package metadata such as license and attribution information<br>&gt; &gt; * Supporting repositories containing multiple packages<br>&gt; &gt; * Support for third-party testing frameworks<br>&gt; &gt; * Support for cross-compilation<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; We hope that gives some picture of where the Swift package manager is<br>&gt; &gt; headed. It&#39;s an exciting time for Swift development, and we can&#39;t wait to<br>&gt; &gt; see what the year holds!<br>&gt; &gt;<br>&gt; &gt; - Daniel<br>&gt; &gt;<br>&gt; &gt; (*) See https://github.com/czechboy0/swiftpm-packages-statistics, itself<br>&gt; &gt; powered by a Swift Package.<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br></p><p>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>[swift-evolution] Swift Package Manager 3.0 Project Status</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>August 21, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On 18 Aug 2016, at 03:04, Keith Smiley via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; It sounds like we may not get any heads up about any work on that level of<br>&gt; integration:<br>&gt; <br>&gt; https://twitter.com/jckarter/status/766072626624073729<br>&gt; <br>&gt; Which I guess also brings up the question of whether or not it will be done in<br>&gt; public (which might also be unanswerable).<br>&gt; <br>&gt; --<br>&gt; Keith Smiley<br></p><p>What special things are needed for iOS support? Isn’t it just another cross-compilation target (albeit one requiring code-signing)?<br></p><p>Karl<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1b54c2d366bbc31b41cf7dcbc77324f9?s=50"></div><header><strong>[swift-evolution] Swift Package Manager 3.0 Project Status</strong> from <string>Keith Smiley</string> &lt;k at keith.so&gt;<p>August 23, 2016 at 06:00:00pm</p></header><div class="content"><p>I&#39;m hoping that swiftpm never really has to deal with the complexities of code<br>signing and related problems like entitlements. But at the bare minimum it would<br>need to be able to create dynamic frameworks, optionally including resources<br>such as strings files or xibs, for consumption by your main app target.<br></p><p>I don&#39;t think we&#39;re too far away from this but that would need to happen first.<br>I would be happy to use swiftpm more like Carthage than CocoaPods. So as long as<br>it could create your frameworks and you could set them up in your project one<br>time this would totally be usable.<br></p><p>--<br>Keith Smiley<br></p><p>On 08/21, Karl wrote:<br>&gt;<br>&gt; &gt; On 18 Aug 2016, at 03:04, Keith Smiley via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; It sounds like we may not get any heads up about any work on that level of<br>&gt; &gt; integration:<br>&gt; &gt;<br>&gt; &gt; https://twitter.com/jckarter/status/766072626624073729<br>&gt; &gt;<br>&gt; &gt; Which I guess also brings up the question of whether or not it will be done in<br>&gt; &gt; public (which might also be unanswerable).<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; Keith Smiley<br>&gt;<br>&gt; What special things are needed for iOS support? Isn’t it just another cross-compilation target (albeit one requiring code-signing)?<br>&gt;<br>&gt; Karl<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>[swift-evolution] Swift Package Manager 3.0 Project Status</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>August 17, 2016 at 07:00:00pm</p></header><div class="content"><p>Our stated plans here, and there hasn&#39;t been any change, is to leave building for iOS to Xcode. We have (very) limited support for doing that from SwiftPM via generated projects, and it would be nice to see that support deepen. However, there are a lot of limits to that approach and for something better we will need to wait for full Xcode integration. Unfortunately, we don&#39;t yet have a much better answer than this one from last year:<br></p><p>https://lists.swift.org/pipermail/swift-users/2015-December/000052.html<br></p><p>The reality is that we have a lot of work to do to make the package manager and its ecosystem a stable base for development... for *any* platform. We think its really important to have that base be solid so that it can grow successfully, which means we are prioritizing features that impact the package syntax, dependency resolution, and workflows. The scope of things we would need to tackle to directly build for iOS is just too long (remote testing, cross-compilation, code signing, entitlements, provisioning profiles) to try to do simultaneously.<br></p><p>Cheers,<br> - Daniel<br></p><p>&gt; On Aug 17, 2016, at 4:58 PM, T.J. Usiyan &lt;griotspeak at gmail.com&gt; wrote:<br>&gt; <br>&gt; What are the near term plans–if there are any–for supporting iOS? I made the mistake of assuming support was a couple months away at most when the package manager was announced. I plan to port my iOS/Mac frameworks over as soon as I can.<br>&gt; <br>&gt; TJ<br>&gt; <br>&gt;&gt; On Wed, Aug 17, 2016 at 6:44 PM, Daniel Dunbar via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; Hi everyone,<br>&gt;&gt; <br>&gt;&gt; The package manager was a brand new project released with open source Swift, and we have made significant progress as part of Swift 3.0. Starting from that humble beginning we now estimate there are around 3,500 Swift Packages on GitHub (*), with more and more showing up every day.<br>&gt;&gt; <br>&gt;&gt; Since release, we have seen a rapid explosion in the package ecosystem with brand new Swift-based web frameworks (like Kitura, Perfect, Vapor, and Zewo), tooling and infrastructure (like the IBM Package Catalog and swiftenv), or simply adoption by existing popular Swift frameworks (like Alamofire, SnapKit, SwiftJSON, and RxSwift).<br>&gt;&gt; <br>&gt;&gt; We wanted to lay out our plans for the package manager with regard to the upcoming Swift 3.0 release, some project status, and a bit about our future directions.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; ## Release Plan<br>&gt;&gt; <br>&gt;&gt; Our `swift-3.0` branch was cut along with the Swift compiler project and will be our final release branch for the Swift 3.0 release. At this point, the only changes we anticipate taking onto the branch are ones that have significant impact on our current user base (primarily those focused on server-side Swift development).<br>&gt;&gt; <br>&gt;&gt; Swift 3.0 will be the first official release including the package manager, which is also shipping as a command line tool inside Xcode 8. We are looking forward to seeing the ecosystem develop as these tools GM alongside the now source stable Swift 3.0!<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; ## Project Status<br>&gt;&gt; <br>&gt;&gt; We have accomplished a lot in the past year, but the package manager still has a long way to go and there are a number of areas where we know there to be significant limitations:<br>&gt;&gt; <br>&gt;&gt; * The current dependency resolution strategy is not able to resolve complex graphs with conflicts. This has not proved to be a major problem so far -- we suspect because of the relative youth of the ecosystem -- but this is an area known to need significant work.<br>&gt;&gt; <br>&gt;&gt; * It can be quite difficult to deploy binaries built with the package manager, and there are little to no controls over some of the necessary parameters (like static versus dynamic linking, or management of linker RPATH values). See SR-648, SR-674, SR-1968, SR-2048.<br>&gt;&gt; <br>&gt;&gt; * We are missing important workflows for a number of typical development scenarios: (1) lock files / version pinning, (2) editable packages (SE-0082), (3) master/trunk-style development (SR-666), and (4) vendoring dependencies (SR-679).<br>&gt;&gt; <br>&gt;&gt; * Our documentation needs more work.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; ## Future Directions<br>&gt;&gt; <br>&gt;&gt; The immediate focus for the package manager is on features and bug fixes which address the issues mentioned above and improve the usability of the tool, but which do not require significant changes to the current overall design (in particular, we would like to defer major changes to the manifest API until we have resolved more of the workflow issues).<br>&gt;&gt; <br>&gt;&gt; Towards that end, the things we are interested in tackling in the short term are:<br>&gt;&gt; <br>&gt;&gt; * Editable packages (SE-0082)<br>&gt;&gt; * Improved dependency graph resolution &amp; diagnostics:<br>&gt;&gt;   * Fine-grained package dependencies<br>&gt;&gt;   * Branch support (SR-666)<br>&gt;&gt;   * Version lockfiles/pinning<br>&gt;&gt;   * Dependency name collisions<br>&gt;&gt; * Stabilizing the manifest API for Swift 4<br>&gt;&gt; * Focused improvements to the Xcode project generator (SR-1653, SR-1655, SR-1740, SR-1741).<br>&gt;&gt; * Support for managing supported Swift language versions, as this feature develops in the compiler.<br>&gt;&gt; * Improvements to build consistency (SR-1708, SR-2182).<br>&gt;&gt; * Improvements to documentation (SR-2179, SR-1586).<br>&gt;&gt; * Improvements to diagnostics and usability (SR-879, SR-1388, SR-2261, SR-2270, SR-2271).<br>&gt;&gt; * Performance<br>&gt;&gt; <br>&gt;&gt; Once we are on a more stable footing, there are many things we could tackle next. Here are some of the areas we are interested in investigating, to see if any of them fit in the scope of Swift 4:<br>&gt;&gt; <br>&gt;&gt; * Evaluating the role for a centralized package index<br>&gt;&gt; * Extending the package model to support more use cases (extensible build targets, custom source layouts, more expressive product definition APIs)<br>&gt;&gt; * Package metadata such as license and attribution information<br>&gt;&gt; * Supporting repositories containing multiple packages<br>&gt;&gt; * Support for third-party testing frameworks<br>&gt;&gt; * Support for cross-compilation<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; We hope that gives some picture of where the Swift package manager is headed. It&#39;s an exciting time for Swift development, and we can&#39;t wait to see what the year holds!<br>&gt;&gt; <br>&gt;&gt; - Daniel<br>&gt;&gt; <br>&gt;&gt; (*) See https://github.com/czechboy0/swiftpm-packages-statistics, itself powered by a Swift Package.<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160817/ca1de567/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/58e2591737c75b7700b11f23381b9590?s=50"></div><header><strong>[swift-evolution] Swift Package Manager 3.0 Project Status</strong> from <string>Rick Ballard</string> &lt;rballard at apple.com&gt;<p>August 18, 2016 at 12:00:00pm</p></header><div class="content"><p>To elaborate on this slightly:<br></p><p>We plan for you to be able to write iOS Swift Packages, but rather than creating a complete iOS build system in SwiftPM, this will likely work by leveraging Xcode&#39;s build system. We think that great Xcode integration is a requirement before we will see mass SwiftPM adoption by the iOS developer community. Since Xcode is not part of the open source project, the schedule and specific plans for that work are not public – but there will be work done in the open source project to give SwiftPM a library architecture suitable for allowing it to integrate with IDEs like Xcode.<br></p><p>In the meantime, SwiftPM supports generating an Xcode project from a package, which you can then use to build for iOS if desired (with some additional configuration of the generated project). We&#39;re open to pull requests to improve this functionality as well. For now, I would not broadly recommend that iOS developers switch to a SwiftPM-based workflow for their production software using this interim approach.<br></p><p>There are a lot of improvements to make to the workflow and features of Swift packages, and many of those improvements should have an effect on the eventual Xcode integration. Our public focus is on building a solid open source base that can support a thriving Swift package ecosystem for years to come. We&#39;re grateful to the developers who are using SwiftPM today and providing us with valuable feedback; much of today&#39;s use is to support server-side Swift development. And we&#39;re excited to grow SwiftPM into a tool that will meet the needs of our broader developer community!<br></p><p>	- Rick<br></p><p>&gt; On Aug 17, 2016, at 7:43 PM, Daniel Dunbar via swift-build-dev &lt;swift-build-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Our stated plans here, and there hasn&#39;t been any change, is to leave building for iOS to Xcode. We have (very) limited support for doing that from SwiftPM via generated projects, and it would be nice to see that support deepen. However, there are a lot of limits to that approach and for something better we will need to wait for full Xcode integration. Unfortunately, we don&#39;t yet have a much better answer than this one from last year:<br>&gt; <br>&gt; https://lists.swift.org/pipermail/swift-users/2015-December/000052.html &lt;https://lists.swift.org/pipermail/swift-users/2015-December/000052.html&gt;<br>&gt; <br>&gt; The reality is that we have a lot of work to do to make the package manager and its ecosystem a stable base for development... for *any* platform. We think its really important to have that base be solid so that it can grow successfully, which means we are prioritizing features that impact the package syntax, dependency resolution, and workflows. The scope of things we would need to tackle to directly build for iOS is just too long (remote testing, cross-compilation, code signing, entitlements, provisioning profiles) to try to do simultaneously.<br>&gt; <br>&gt; Cheers,<br>&gt;  - Daniel<br>&gt; <br>&gt; On Aug 17, 2016, at 4:58 PM, T.J. Usiyan &lt;griotspeak at gmail.com &lt;mailto:griotspeak at gmail.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; What are the near term plans–if there are any–for supporting iOS? I made the mistake of assuming support was a couple months away at most when the package manager was announced. I plan to port my iOS/Mac frameworks over as soon as I can.<br>&gt;&gt; <br>&gt;&gt; TJ<br>&gt;&gt; <br>&gt;&gt; On Wed, Aug 17, 2016 at 6:44 PM, Daniel Dunbar via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; Hi everyone,<br>&gt;&gt; <br>&gt;&gt; The package manager was a brand new project released with open source Swift, and we have made significant progress as part of Swift 3.0. Starting from that humble beginning we now estimate there are around 3,500 Swift Packages on GitHub (*), with more and more showing up every day.<br>&gt;&gt; <br>&gt;&gt; Since release, we have seen a rapid explosion in the package ecosystem with brand new Swift-based web frameworks (like Kitura, Perfect, Vapor, and Zewo), tooling and infrastructure (like the IBM Package Catalog and swiftenv), or simply adoption by existing popular Swift frameworks (like Alamofire, SnapKit, SwiftJSON, and RxSwift).<br>&gt;&gt; <br>&gt;&gt; We wanted to lay out our plans for the package manager with regard to the upcoming Swift 3.0 release, some project status, and a bit about our future directions.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; ## Release Plan<br>&gt;&gt; <br>&gt;&gt; Our `swift-3.0` branch was cut along with the Swift compiler project and will be our final release branch for the Swift 3.0 release. At this point, the only changes we anticipate taking onto the branch are ones that have significant impact on our current user base (primarily those focused on server-side Swift development).<br>&gt;&gt; <br>&gt;&gt; Swift 3.0 will be the first official release including the package manager, which is also shipping as a command line tool inside Xcode 8. We are looking forward to seeing the ecosystem develop as these tools GM alongside the now source stable Swift 3.0!<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; ## Project Status<br>&gt;&gt; <br>&gt;&gt; We have accomplished a lot in the past year, but the package manager still has a long way to go and there are a number of areas where we know there to be significant limitations:<br>&gt;&gt; <br>&gt;&gt; * The current dependency resolution strategy is not able to resolve complex graphs with conflicts. This has not proved to be a major problem so far -- we suspect because of the relative youth of the ecosystem -- but this is an area known to need significant work.<br>&gt;&gt; <br>&gt;&gt; * It can be quite difficult to deploy binaries built with the package manager, and there are little to no controls over some of the necessary parameters (like static versus dynamic linking, or management of linker RPATH values). See SR-648, SR-674, SR-1968, SR-2048.<br>&gt;&gt; <br>&gt;&gt; * We are missing important workflows for a number of typical development scenarios: (1) lock files / version pinning, (2) editable packages (SE-0082), (3) master/trunk-style development (SR-666), and (4) vendoring dependencies (SR-679).<br>&gt;&gt; <br>&gt;&gt; * Our documentation needs more work.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; ## Future Directions<br>&gt;&gt; <br>&gt;&gt; The immediate focus for the package manager is on features and bug fixes which address the issues mentioned above and improve the usability of the tool, but which do not require significant changes to the current overall design (in particular, we would like to defer major changes to the manifest API until we have resolved more of the workflow issues).<br>&gt;&gt; <br>&gt;&gt; Towards that end, the things we are interested in tackling in the short term are:<br>&gt;&gt; <br>&gt;&gt; * Editable packages (SE-0082)<br>&gt;&gt; * Improved dependency graph resolution &amp; diagnostics:<br>&gt;&gt;   * Fine-grained package dependencies<br>&gt;&gt;   * Branch support (SR-666)<br>&gt;&gt;   * Version lockfiles/pinning<br>&gt;&gt;   * Dependency name collisions<br>&gt;&gt; * Stabilizing the manifest API for Swift 4<br>&gt;&gt; * Focused improvements to the Xcode project generator (SR-1653, SR-1655, SR-1740, SR-1741).<br>&gt;&gt; * Support for managing supported Swift language versions, as this feature develops in the compiler.<br>&gt;&gt; * Improvements to build consistency (SR-1708, SR-2182).<br>&gt;&gt; * Improvements to documentation (SR-2179, SR-1586).<br>&gt;&gt; * Improvements to diagnostics and usability (SR-879, SR-1388, SR-2261, SR-2270, SR-2271).<br>&gt;&gt; * Performance<br>&gt;&gt; <br>&gt;&gt; Once we are on a more stable footing, there are many things we could tackle next. Here are some of the areas we are interested in investigating, to see if any of them fit in the scope of Swift 4:<br>&gt;&gt; <br>&gt;&gt; * Evaluating the role for a centralized package index<br>&gt;&gt; * Extending the package model to support more use cases (extensible build targets, custom source layouts, more expressive product definition APIs)<br>&gt;&gt; * Package metadata such as license and attribution information<br>&gt;&gt; * Supporting repositories containing multiple packages<br>&gt;&gt; * Support for third-party testing frameworks<br>&gt;&gt; * Support for cross-compilation<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; We hope that gives some picture of where the Swift package manager is headed. It&#39;s an exciting time for Swift development, and we can&#39;t wait to see what the year holds!<br>&gt;&gt; <br>&gt;&gt; - Daniel<br>&gt;&gt; <br>&gt;&gt; (*) See https://github.com/czechboy0/swiftpm-packages-statistics &lt;https://github.com/czechboy0/swiftpm-packages-statistics&gt;, itself powered by a Swift Package.<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160818/35e28128/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
