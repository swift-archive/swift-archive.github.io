<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Accepted] SE-0111: Remove type system significance of function argument labels</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July  6, 2016 at 08:00:00pm</p></header><div class="content"><p>Proposal Link: https://github.com/apple/swift-evolution/blob/master/proposals/0111-remove-arg-label-type-significance.md<br></p><p>The review of &quot;SE-0111: Remove type system significance of function argument labels &quot; ran from June 30 ... July 4, 2016. The proposal has been *accepted*:<br></p><p>The community and core team agree that this proposal will lead to a simplification and clarification of the type system, as well as a more clear user model for parameter labels.  In response to community feedback, the core team is accepting the proposal with a revision to allow “purely cosmetic” parameter labels in closure types for documentation (as outlined in the alternatives section).  The core team also wants to clarify that a call to a value of closure type would not allow use of any parameter labels, some interpretations thought that “arbitrary” parameter labels could be used.<br></p><p>Thank you to Austin Zheng for driving this discussion forward!  I filed SR-2009 to track implementation work on this.<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d569462ac92d4619342b1c5ff305043?s=50"></div><header><strong>[swift-evolution-announce] [Accepted] SE-0111: Remove type system significance of function argument labels</strong> from <string>frogcjn at 163.com</string> &lt;frogcjn at 163.com&gt;<p>July  7, 2016 at 11:00:00am</p></header><div class="content"><p>Don&#39;t agree with this one.<br></p><p>func foo(a: Int = 0, b: Int = 1, c: Int = 2) {<br>    print(a, b, c)<br>}<br></p><p>foo(a: 1, c: 3)<br></p><p>let bar = foo<br></p><p>bar(1, 3) will different than foo(a: 1, c: 3)<br></p><p>&gt; 在 2016年7月7日，11:06，Chris Lattner &lt;clattner at apple.com&gt; 写道：<br>&gt; <br>&gt; Proposal Link: https://github.com/apple/swift-evolution/blob/master/proposals/0111-remove-arg-label-type-significance.md<br>&gt; <br>&gt; The review of &quot;SE-0111: Remove type system significance of function argument labels &quot; ran from June 30 ... July 4, 2016. The proposal has been *accepted*:<br>&gt; <br>&gt; The community and core team agree that this proposal will lead to a simplification and clarification of the type system, as well as a more clear user model for parameter labels.  In response to community feedback, the core team is accepting the proposal with a revision to allow “purely cosmetic” parameter labels in closure types for documentation (as outlined in the alternatives section).  The core team also wants to clarify that a call to a value of closure type would not allow use of any parameter labels, some interpretations thought that “arbitrary” parameter labels could be used.<br>&gt; <br>&gt; Thank you to Austin Zheng for driving this discussion forward!  I filed SR-2009 to track implementation work on this.<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[swift-evolution-announce] [Accepted] SE-0111: Remove type system significance of function argument labels</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>July  6, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On Jul 6, 2016, at 8:25 PM, Cao, Jiannan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Don&#39;t agree with this one.<br>&gt; <br>&gt; func foo(a: Int = 0, b: Int = 1, c: Int = 2) {<br>&gt;    print(a, b, c)<br>&gt; }<br>&gt; <br>&gt; foo(a: 1, c: 3)<br>&gt; <br>&gt; let bar = foo<br>&gt; <br>&gt; bar(1, 3) will different than foo(a: 1, c: 3)<br></p><p>bar(1, 3) will result in an error, because “bar” is of type <br></p><p>	(Int, Int, Int) -&gt; Void<br></p><p>Default arguments are associated with function declarations, not function types.<br></p><p>	- Doug<br></p><p><br>&gt; <br>&gt;&gt; 在 2016年7月7日，11:06，Chris Lattner &lt;clattner at apple.com&gt; 写道：<br>&gt;&gt; <br>&gt;&gt; Proposal Link: https://github.com/apple/swift-evolution/blob/master/proposals/0111-remove-arg-label-type-significance.md<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0111: Remove type system significance of function argument labels &quot; ran from June 30 ... July 4, 2016. The proposal has been *accepted*:<br>&gt;&gt; <br>&gt;&gt; The community and core team agree that this proposal will lead to a simplification and clarification of the type system, as well as a more clear user model for parameter labels.  In response to community feedback, the core team is accepting the proposal with a revision to allow “purely cosmetic” parameter labels in closure types for documentation (as outlined in the alternatives section).  The core team also wants to clarify that a call to a value of closure type would not allow use of any parameter labels, some interpretations thought that “arbitrary” parameter labels could be used.<br>&gt;&gt; <br>&gt;&gt; Thank you to Austin Zheng for driving this discussion forward!  I filed SR-2009 to track implementation work on this.<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution-announce mailing list<br>&gt;&gt; swift-evolution-announce at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d569462ac92d4619342b1c5ff305043?s=50"></div><header><strong>[Accepted] SE-0111: Remove type system significance of function argument labels</strong> from <string>frogcjn at 163.com</string> &lt;frogcjn at 163.com&gt;<p>July  7, 2016 at 12:00:00pm</p></header><div class="content"><p>func needsCallback(callback: (a: Int, b: Int) -&gt; Void) {<br>    callback(a: 1,b: 2)<br>}<br></p><p><br>func needsCallback(callback: (Int, Int) -&gt; Void) {<br>    callback(1, 2)<br>}<br></p><p>Is the first one will be forbidden?<br>So you&#39;d like to keep the second one?<br></p><p><br>&gt; 在 2016年7月7日，11:06，Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; 写道：<br>&gt; <br>&gt; Proposal Link: https://github.com/apple/swift-evolution/blob/master/proposals/0111-remove-arg-label-type-significance.md<br>&gt; <br>&gt; The review of &quot;SE-0111: Remove type system significance of function argument labels &quot; ran from June 30 ... July 4, 2016. The proposal has been *accepted*:<br>&gt; <br>&gt; The community and core team agree that this proposal will lead to a simplification and clarification of the type system, as well as a more clear user model for parameter labels.  In response to community feedback, the core team is accepting the proposal with a revision to allow “purely cosmetic” parameter labels in closure types for documentation (as outlined in the alternatives section).  The core team also wants to clarify that a call to a value of closure type would not allow use of any parameter labels, some interpretations thought that “arbitrary” parameter labels could be used.<br>&gt; <br>&gt; Thank you to Austin Zheng for driving this discussion forward!  I filed SR-2009 to track implementation work on this.<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160707/2a56ff95/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>[Accepted] SE-0111: Remove type system significance of function argument labels</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>July  7, 2016 at 08:00:00am</p></header><div class="content"><p>This feels like making the language a lot worse. Lots of time was recently spent bikeshedding methods names and argument labels and this proposal bans labels use in some cases and encourage people not to use them in others.<br></p><p>&gt; On 7 Jul 2016, at 05:21, Cao Jiannan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; func needsCallback(callback: (a: Int, b: Int) -&gt; Void) {<br>&gt;     callback(a: 1,b: 2)<br>&gt; }<br>&gt; <br>&gt; <br>&gt; func needsCallback(callback: (Int, Int) -&gt; Void) {<br>&gt;     callback(1, 2)<br>&gt; }<br>&gt; <br>&gt; Is the first one will be forbidden?<br>&gt; So you&#39;d like to keep the second one?<br></p><p>I do not understand why someone would want the second example. A great point of both Objective-C and Swift was enforcing parameter labels use to make the code more readable. <br></p><p>What if that callback were to need width and height? How is that clear which parameter I need to pass in which order?<br></p><p>Considering Swift 3 is our last big chance to break code and fixing the effects of this proposal would break quite a bit of code again... this is a choice it would impact the language for a long time. <br></p><p><br>&gt;&gt; 在 2016年7月7日，11:06，Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; 写道：<br>&gt;&gt; <br>&gt;&gt; Proposal Link: https://github.com/apple/swift-evolution/blob/master/proposals/0111-remove-arg-label-type-significance.md<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0111: Remove type system significance of function argument labels &quot; ran from June 30 ... July 4, 2016. The proposal has been *accepted*:<br>&gt;&gt; <br>&gt;&gt; The community and core team agree that this proposal will lead to a simplification and clarification of the type system, as well as a more clear user model for parameter labels.  In response to community feedback, the core team is accepting the proposal with a revision to allow “purely cosmetic” parameter labels in closure types for documentation (as outlined in the alternatives section).  The core team also wants to clarify that a call to a value of closure type would not allow use of any parameter labels, some interpretations thought that “arbitrary” parameter labels could be used.<br>&gt;&gt; <br>&gt;&gt; Thank you to Austin Zheng for driving this discussion forward!  I filed SR-2009 to track implementation work on this.<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160707/bea850ba/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Accepted] SE-0111: Remove type system significance of function argument labels</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>July  7, 2016 at 09:00:00am</p></header><div class="content"><p>There was a fair proposal by Brent (http://article.gmane.org/gmane.comp.lang.swift.evolution/22939 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/22939&gt;) of adding the labels to the name of the variable rather than adding it to the type. And I agree with that since it simplifies the type system.<br></p><p>Unfortunately, since Swift 3 is making all the code-breaking changed and Brent&#39;s counterproposal is additive, it leaves at least a year-long period of not having the parameter labels in closures.<br></p><p>I agree with the change, I don&#39;t agree with the timing where it doesn&#39;t have a replacement yet.<br></p><p>&gt; On Jul 7, 2016, at 9:07 AM, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; This feels like making the language a lot worse. Lots of time was recently spent bikeshedding methods names and argument labels and this proposal bans labels use in some cases and encourage people not to use them in others.<br>&gt; <br>&gt; On 7 Jul 2016, at 05:21, Cao Jiannan via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; func needsCallback(callback: (a: Int, b: Int) -&gt; Void) {<br>&gt;&gt;     callback(a: 1,b: 2)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; func needsCallback(callback: (Int, Int) -&gt; Void) {<br>&gt;&gt;     callback(1, 2)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Is the first one will be forbidden?<br>&gt;&gt; So you&#39;d like to keep the second one?<br>&gt; <br>&gt; I do not understand why someone would want the second example. A great point of both Objective-C and Swift was enforcing parameter labels use to make the code more readable. <br>&gt; <br>&gt; What if that callback were to need width and height? How is that clear which parameter I need to pass in which order?<br>&gt; <br>&gt; Considering Swift 3 is our last big chance to break code and fixing the effects of this proposal would break quite a bit of code again... this is a choice it would impact the language for a long time. <br>&gt; <br>&gt; <br>&gt;&gt;&gt; 在 2016年7月7日，11:06，Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; 写道：<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Proposal Link: https://github.com/apple/swift-evolution/blob/master/proposals/0111-remove-arg-label-type-significance.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0111-remove-arg-label-type-significance.md&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The review of &quot;SE-0111: Remove type system significance of function argument labels &quot; ran from June 30 ... July 4, 2016. The proposal has been *accepted*:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The community and core team agree that this proposal will lead to a simplification and clarification of the type system, as well as a more clear user model for parameter labels.  In response to community feedback, the core team is accepting the proposal with a revision to allow “purely cosmetic” parameter labels in closure types for documentation (as outlined in the alternatives section).  The core team also wants to clarify that a call to a value of closure type would not allow use of any parameter labels, some interpretations thought that “arbitrary” parameter labels could be used.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thank you to Austin Zheng for driving this discussion forward!  I filed SR-2009 to track implementation work on this.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Chris Lattner<br>&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160707/84b5d4a6/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>[Accepted] SE-0111: Remove type system significance of function argument labels</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>July  7, 2016 at 09:00:00am</p></header><div class="content"><p>Hey Charlie,<br></p><p>The change you reference and this must work together, I have a hard time accepting that we will have a Swift 3 with this change in and no other change that balances it.<br></p><p>If this<br></p><p>function doItAndLetUsKnow(callback: (Int, Int, Bool) -&gt; ()) {<br></p><p>[...]<br></p><p>    callback(20,40, true)<br></p><p>}<br></p><p>is the style we have to use with callbacks from now on, it will be a major regression I would advise a proposal to stop right now.<br>The closure passed around and arriving as a callback there gives me NO clue how to send data to it. How is that for local reasoning?<br>This makes me believe/hope that I am getting it all wrong, so please correct me here :D.<br></p><p>If it is not true, then I am blowing things out of proportion and I apologise for this to everyone on the list.<br></p><p><br>Sent from my iPhone<br></p><p>&gt; On 7 Jul 2016, at 08:41, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt; <br>&gt; There was a fair proposal by Brent (http://article.gmane.org/gmane.comp.lang.swift.evolution/22939) of adding the labels to the name of the variable rather than adding it to the type. And I agree with that since it simplifies the type system.<br>&gt; <br>&gt; Unfortunately, since Swift 3 is making all the code-breaking changed and Brent&#39;s counterproposal is additive, it leaves at least a year-long period of not having the parameter labels in closures.<br>&gt; <br>&gt; I agree with the change, I don&#39;t agree with the timing where it doesn&#39;t have a replacement yet.<br>&gt; <br>&gt;&gt; On Jul 7, 2016, at 9:07 AM, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; This feels like making the language a lot worse. Lots of time was recently spent bikeshedding methods names and argument labels and this proposal bans labels use in some cases and encourage people not to use them in others.<br>&gt;&gt; <br>&gt;&gt;&gt; On 7 Jul 2016, at 05:21, Cao Jiannan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func needsCallback(callback: (a: Int, b: Int) -&gt; Void) {<br>&gt;&gt;&gt;     callback(a: 1,b: 2)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func needsCallback(callback: (Int, Int) -&gt; Void) {<br>&gt;&gt;&gt;     callback(1, 2)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is the first one will be forbidden?<br>&gt;&gt;&gt; So you&#39;d like to keep the second one?<br>&gt;&gt; <br>&gt;&gt; I do not understand why someone would want the second example. A great point of both Objective-C and Swift was enforcing parameter labels use to make the code more readable. <br>&gt;&gt; <br>&gt;&gt; What if that callback were to need width and height? How is that clear which parameter I need to pass in which order?<br>&gt;&gt; <br>&gt;&gt; Considering Swift 3 is our last big chance to break code and fixing the effects of this proposal would break quite a bit of code again... this is a choice it would impact the language for a long time. <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt;&gt; 在 2016年7月7日，11:06，Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; 写道：<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Proposal Link: https://github.com/apple/swift-evolution/blob/master/proposals/0111-remove-arg-label-type-significance.md<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The review of &quot;SE-0111: Remove type system significance of function argument labels &quot; ran from June 30 ... July 4, 2016. The proposal has been *accepted*:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The community and core team agree that this proposal will lead to a simplification and clarification of the type system, as well as a more clear user model for parameter labels.  In response to community feedback, the core team is accepting the proposal with a revision to allow “purely cosmetic” parameter labels in closure types for documentation (as outlined in the alternatives section).  The core team also wants to clarify that a call to a value of closure type would not allow use of any parameter labels, some interpretations thought that “arbitrary” parameter labels could be used.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thank you to Austin Zheng for driving this discussion forward!  I filed SR-2009 to track implementation work on this.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Chris Lattner<br>&gt;&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160707/bf763280/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/566528c7f7c28c35c0c646d415943612?s=50"></div><header><strong>[Accepted] SE-0111: Remove type system significance of function argument labels</strong> from <string>Taras Zakharko</string> &lt;taras.zakharko at uzh.ch&gt;<p>July  7, 2016 at 12:00:00pm</p></header><div class="content"><p>I would also be interested in a clarification on this point from Chris or someone else from the core team. <br></p><p>The accepted proposal states that labels are illegal in function types (that is also what I was arguing for towards the end of  the review discussion) but at the same time Cris mentions that cosmetic labels are allowed in closure types (which for me is synonymous with function types). So which one is it and how does this change affect closure parameters?<br></p><p>Best, <br></p><p> Taras<br></p><p><br>&gt; On 07 Jul 2016, at 10:10, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hey Charlie,<br>&gt; <br>&gt; The change you reference and this must work together, I have a hard time accepting that we will have a Swift 3 with this change in and no other change that balances it.<br>&gt; <br>&gt; If this<br>&gt; <br>&gt; function doItAndLetUsKnow(callback: (Int, Int, Bool) -&gt; ()) {<br>&gt; <br>&gt; [...]<br>&gt; <br>&gt;     callback(20,40, true)<br>&gt; <br>&gt; }<br>&gt; <br>&gt; is the style we have to use with callbacks from now on, it will be a major regression I would advise a proposal to stop right now.<br>&gt; The closure passed around and arriving as a callback there gives me NO clue how to send data to it. How is that for local reasoning?<br>&gt; This makes me believe/hope that I am getting it all wrong, so please correct me here :D.<br>&gt; <br>&gt; If it is not true, then I am blowing things out of proportion and I apologise for this to everyone on the list.<br>&gt; <br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt; On 7 Jul 2016, at 08:41, Charlie Monroe &lt;charlie at charliemonroe.net &lt;mailto:charlie at charliemonroe.net&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; There was a fair proposal by Brent (http://article.gmane.org/gmane.comp.lang.swift.evolution/22939 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/22939&gt;) of adding the labels to the name of the variable rather than adding it to the type. And I agree with that since it simplifies the type system.<br>&gt;&gt; <br>&gt;&gt; Unfortunately, since Swift 3 is making all the code-breaking changed and Brent&#39;s counterproposal is additive, it leaves at least a year-long period of not having the parameter labels in closures.<br>&gt;&gt; <br>&gt;&gt; I agree with the change, I don&#39;t agree with the timing where it doesn&#39;t have a replacement yet.<br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 7, 2016, at 9:07 AM, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This feels like making the language a lot worse. Lots of time was recently spent bikeshedding methods names and argument labels and this proposal bans labels use in some cases and encourage people not to use them in others.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On 7 Jul 2016, at 05:21, Cao Jiannan via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func needsCallback(callback: (a: Int, b: Int) -&gt; Void) {<br>&gt;&gt;&gt;&gt;     callback(a: 1,b: 2)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func needsCallback(callback: (Int, Int) -&gt; Void) {<br>&gt;&gt;&gt;&gt;     callback(1, 2)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Is the first one will be forbidden?<br>&gt;&gt;&gt;&gt; So you&#39;d like to keep the second one?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I do not understand why someone would want the second example. A great point of both Objective-C and Swift was enforcing parameter labels use to make the code more readable. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What if that callback were to need width and height? How is that clear which parameter I need to pass in which order?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Considering Swift 3 is our last big chance to break code and fixing the effects of this proposal would break quite a bit of code again... this is a choice it would impact the language for a long time. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 在 2016年7月7日，11:06，Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; 写道：<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Proposal Link: https://github.com/apple/swift-evolution/blob/master/proposals/0111-remove-arg-label-type-significance.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0111-remove-arg-label-type-significance.md&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The review of &quot;SE-0111: Remove type system significance of function argument labels &quot; ran from June 30 ... July 4, 2016. The proposal has been *accepted*:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The community and core team agree that this proposal will lead to a simplification and clarification of the type system, as well as a more clear user model for parameter labels.  In response to community feedback, the core team is accepting the proposal with a revision to allow “purely cosmetic” parameter labels in closure types for documentation (as outlined in the alternatives section).  The core team also wants to clarify that a call to a value of closure type would not allow use of any parameter labels, some interpretations thought that “arbitrary” parameter labels could be used.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Thank you to Austin Zheng for driving this discussion forward!  I filed SR-2009 to track implementation work on this.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -Chris Lattner<br>&gt;&gt;&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160707/ab3ba89d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Accepted] SE-0111: Remove type system significance of function argument labels</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>July  7, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Jul 7, 2016, at 3:18 AM, Taras Zakharko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I would also be interested in a clarification on this point from Chris or someone else from the core team. <br>&gt; <br>&gt; The accepted proposal states that labels are illegal in function types (that is also what I was arguing for towards the end of  the review discussion) but at the same time Cris mentions that cosmetic labels are allowed in closure types (which for me is synonymous with function types). So which one is it and how does this change affect closure parameters?<br></p><p>The core team’s intent is that one can add cosmetic labels to function types, but that those labels are not (cannot be) used at the call site, e.g.,<br></p><p>	func foo(fn: (success: Bool) -&gt; Void) {<br>	  fn(true) // note: no ‘success:’ argument label<br>	}<br></p><p>	func bar(something: Bool) { }<br></p><p>	foo(bar) // okay: labels not considered<br></p><p>The proposal should be updated accordingly so it’s clear for future readers. PR welcome ;)<br></p><p>	- Doug<br></p><p>&gt; <br>&gt; Best, <br>&gt; <br>&gt;  Taras<br>&gt; <br>&gt; <br>&gt;&gt; On 07 Jul 2016, at 10:10, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hey Charlie,<br>&gt;&gt; <br>&gt;&gt; The change you reference and this must work together, I have a hard time accepting that we will have a Swift 3 with this change in and no other change that balances it.<br>&gt;&gt; <br>&gt;&gt; If this<br>&gt;&gt; <br>&gt;&gt; function doItAndLetUsKnow(callback: (Int, Int, Bool) -&gt; ()) {<br>&gt;&gt; <br>&gt;&gt; [...]<br>&gt;&gt; <br>&gt;&gt;     callback(20,40, true)<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; is the style we have to use with callbacks from now on, it will be a major regression I would advise a proposal to stop right now.<br>&gt;&gt; The closure passed around and arriving as a callback there gives me NO clue how to send data to it. How is that for local reasoning?<br>&gt;&gt; This makes me believe/hope that I am getting it all wrong, so please correct me here :D.<br>&gt;&gt; <br>&gt;&gt; If it is not true, then I am blowing things out of proportion and I apologise for this to everyone on the list.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt; On 7 Jul 2016, at 08:41, Charlie Monroe &lt;charlie at charliemonroe.net &lt;mailto:charlie at charliemonroe.net&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; There was a fair proposal by Brent (http://article.gmane.org/gmane.comp.lang.swift.evolution/22939 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/22939&gt;) of adding the labels to the name of the variable rather than adding it to the type. And I agree with that since it simplifies the type system.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Unfortunately, since Swift 3 is making all the code-breaking changed and Brent&#39;s counterproposal is additive, it leaves at least a year-long period of not having the parameter labels in closures.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I agree with the change, I don&#39;t agree with the timing where it doesn&#39;t have a replacement yet.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 7, 2016, at 9:07 AM, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This feels like making the language a lot worse. Lots of time was recently spent bikeshedding methods names and argument labels and this proposal bans labels use in some cases and encourage people not to use them in others.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 7 Jul 2016, at 05:21, Cao Jiannan via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; func needsCallback(callback: (a: Int, b: Int) -&gt; Void) {<br>&gt;&gt;&gt;&gt;&gt;     callback(a: 1,b: 2)<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; func needsCallback(callback: (Int, Int) -&gt; Void) {<br>&gt;&gt;&gt;&gt;&gt;     callback(1, 2)<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Is the first one will be forbidden?<br>&gt;&gt;&gt;&gt;&gt; So you&#39;d like to keep the second one?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I do not understand why someone would want the second example. A great point of both Objective-C and Swift was enforcing parameter labels use to make the code more readable. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What if that callback were to need width and height? How is that clear which parameter I need to pass in which order?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Considering Swift 3 is our last big chance to break code and fixing the effects of this proposal would break quite a bit of code again... this is a choice it would impact the language for a long time. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 在 2016年7月7日，11:06，Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; 写道：<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Proposal Link: https://github.com/apple/swift-evolution/blob/master/proposals/0111-remove-arg-label-type-significance.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0111-remove-arg-label-type-significance.md&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The review of &quot;SE-0111: Remove type system significance of function argument labels &quot; ran from June 30 ... July 4, 2016. The proposal has been *accepted*:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The community and core team agree that this proposal will lead to a simplification and clarification of the type system, as well as a more clear user model for parameter labels.  In response to community feedback, the core team is accepting the proposal with a revision to allow “purely cosmetic” parameter labels in closure types for documentation (as outlined in the alternatives section).  The core team also wants to clarify that a call to a value of closure type would not allow use of any parameter labels, some interpretations thought that “arbitrary” parameter labels could be used.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Thank you to Austin Zheng for driving this discussion forward!  I filed SR-2009 to track implementation work on this.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; -Chris Lattner<br>&gt;&gt;&gt;&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160707/450a8737/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/175ad9e0827a836bfb3d1d06fe3182ec?s=50"></div><header><strong>[Accepted] SE-0111: Remove type system significance of function argument labels</strong> from <string>Diego Sánchez</string> &lt;diego.sanchezr at gmail.com&gt;<p>July  8, 2016 at 01:00:00am</p></header><div class="content"><p>Aw. It&#39;s really bad that labels are gone for closures at the call site 😢. IMHO, the same principles that encourage the use of labels for &quot;normal&quot; function calls should prevail here. <br></p><p>I hope I won&#39;t come across to many completion(true, false,...) + debugging if someone changes the order of the parameters in some branch and another one is merged adding a new call to the closure type with the old order. <br></p><p>Looks to me that the problem solved may cause more trouble than what was fixed :/<br></p><p>Sorry for failing at giving my feedback during the review period :(<br></p><p>Sent from my iPhone<br></p><p>&gt; On 8 Jul 2016, at 12:15 am, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jul 7, 2016, at 3:18 AM, Taras Zakharko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I would also be interested in a clarification on this point from Chris or someone else from the core team. <br>&gt;&gt; <br>&gt;&gt; The accepted proposal states that labels are illegal in function types (that is also what I was arguing for towards the end of  the review discussion) but at the same time Cris mentions that cosmetic labels are allowed in closure types (which for me is synonymous with function types). So which one is it and how does this change affect closure parameters?<br>&gt; <br>&gt; The core team’s intent is that one can add cosmetic labels to function types, but that those labels are not (cannot be) used at the call site, e.g.,<br>&gt; <br>&gt; 	func foo(fn: (success: Bool) -&gt; Void) {<br>&gt; 	  fn(true) // note: no ‘success:’ argument label<br>&gt; 	}<br>&gt; <br>&gt; 	func bar(something: Bool) { }<br>&gt; <br>&gt; 	foo(bar) // okay: labels not considered<br>&gt; <br>&gt; The proposal should be updated accordingly so it’s clear for future readers. PR welcome ;)<br>&gt; <br>&gt; 	- Doug<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Best, <br>&gt;&gt; <br>&gt;&gt;  Taras<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 07 Jul 2016, at 10:10, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hey Charlie,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The change you reference and this must work together, I have a hard time accepting that we will have a Swift 3 with this change in and no other change that balances it.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If this<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; function doItAndLetUsKnow(callback: (Int, Int, Bool) -&gt; ()) {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; [...]<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     callback(20,40, true)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; is the style we have to use with callbacks from now on, it will be a major regression I would advise a proposal to stop right now.<br>&gt;&gt;&gt; The closure passed around and arriving as a callback there gives me NO clue how to send data to it. How is that for local reasoning?<br>&gt;&gt;&gt; This makes me believe/hope that I am getting it all wrong, so please correct me here :D.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If it is not true, then I am blowing things out of proportion and I apologise for this to everyone on the list.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 7 Jul 2016, at 08:41, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; There was a fair proposal by Brent (http://article.gmane.org/gmane.comp.lang.swift.evolution/22939) of adding the labels to the name of the variable rather than adding it to the type. And I agree with that since it simplifies the type system.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Unfortunately, since Swift 3 is making all the code-breaking changed and Brent&#39;s counterproposal is additive, it leaves at least a year-long period of not having the parameter labels in closures.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I agree with the change, I don&#39;t agree with the timing where it doesn&#39;t have a replacement yet.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jul 7, 2016, at 9:07 AM, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; This feels like making the language a lot worse. Lots of time was recently spent bikeshedding methods names and argument labels and this proposal bans labels use in some cases and encourage people not to use them in others.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On 7 Jul 2016, at 05:21, Cao Jiannan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; func needsCallback(callback: (a: Int, b: Int) -&gt; Void) {<br>&gt;&gt;&gt;&gt;&gt;&gt;     callback(a: 1,b: 2)<br>&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; func needsCallback(callback: (Int, Int) -&gt; Void) {<br>&gt;&gt;&gt;&gt;&gt;&gt;     callback(1, 2)<br>&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Is the first one will be forbidden?<br>&gt;&gt;&gt;&gt;&gt;&gt; So you&#39;d like to keep the second one?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I do not understand why someone would want the second example. A great point of both Objective-C and Swift was enforcing parameter labels use to make the code more readable. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; What if that callback were to need width and height? How is that clear which parameter I need to pass in which order?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Considering Swift 3 is our last big chance to break code and fixing the effects of this proposal would break quite a bit of code again... this is a choice it would impact the language for a long time. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 在 2016年7月7日，11:06，Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; 写道：<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Proposal Link: https://github.com/apple/swift-evolution/blob/master/proposals/0111-remove-arg-label-type-significance.md<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; The review of &quot;SE-0111: Remove type system significance of function argument labels &quot; ran from June 30 ... July 4, 2016. The proposal has been *accepted*:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; The community and core team agree that this proposal will lead to a simplification and clarification of the type system, as well as a more clear user model for parameter labels.  In response to community feedback, the core team is accepting the proposal with a revision to allow “purely cosmetic” parameter labels in closure types for documentation (as outlined in the alternatives section).  The core team also wants to clarify that a call to a value of closure type would not allow use of any parameter labels, some interpretations thought that “arbitrary” parameter labels could be used.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Thank you to Austin Zheng for driving this discussion forward!  I filed SR-2009 to track implementation work on this.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; -Chris Lattner<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160708/79a7dfd3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>[Accepted] SE-0111: Remove type system significance of function argument labels</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>July  8, 2016 at 07:00:00am</p></header><div class="content"><p>It feels so odd especially because of the added emphasis by the core team for argument labels for Swift 3 only to have this passed.<br></p><p>What is the pro of not having argument labels in callbacks or functions stored in properties, how does this make for good readability or consistency with instance methods once they are mixed and matched?<br></p><p>&gt; completion(true, false,...) + debugging<br></p><p>This kind of methods always was a pain in other languages and a source of annoyance when taking over or reviewing other people&#39;s code :(.<br>If argument labels are not even mandatory in the closure declaration when passed as a method, how is it clear at all what parameters you have to pass and in which order at call site?<br></p><p>Sent from my iPhone<br></p><p>&gt; On 8 Jul 2016, at 01:49, Diego Sánchez via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Aw. It&#39;s really bad that labels are gone for closures at the call site 😢. IMHO, the same principles that encourage the use of labels for &quot;normal&quot; function calls should prevail here. <br>&gt; <br>&gt; I hope I won&#39;t come across to many completion(true, false,...) + debugging if someone changes the order of the parameters in some branch and another one is merged adding a new call to the closure type with the old order. <br>&gt; <br>&gt; Looks to me that the problem solved may cause more trouble than what was fixed :/<br>&gt; <br>&gt; Sorry for failing at giving my feedback during the review period :(<br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt;&gt; On 8 Jul 2016, at 12:15 am, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 7, 2016, at 3:18 AM, Taras Zakharko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I would also be interested in a clarification on this point from Chris or someone else from the core team. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The accepted proposal states that labels are illegal in function types (that is also what I was arguing for towards the end of  the review discussion) but at the same time Cris mentions that cosmetic labels are allowed in closure types (which for me is synonymous with function types). So which one is it and how does this change affect closure parameters?<br>&gt;&gt; <br>&gt;&gt; The core team’s intent is that one can add cosmetic labels to function types, but that those labels are not (cannot be) used at the call site, e.g.,<br>&gt;&gt; <br>&gt;&gt; 	func foo(fn: (success: Bool) -&gt; Void) {<br>&gt;&gt; 	  fn(true) // note: no ‘success:’ argument label<br>&gt;&gt; 	}<br>&gt;&gt; <br>&gt;&gt; 	func bar(something: Bool) { }<br>&gt;&gt; <br>&gt;&gt; 	foo(bar) // okay: labels not considered<br>&gt;&gt; <br>&gt;&gt; The proposal should be updated accordingly so it’s clear for future readers. PR welcome ;)<br>&gt;&gt; <br>&gt;&gt; 	- Doug<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Best, <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  Taras<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 07 Jul 2016, at 10:10, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hey Charlie,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The change you reference and this must work together, I have a hard time accepting that we will have a Swift 3 with this change in and no other change that balances it.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If this<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; function doItAndLetUsKnow(callback: (Int, Int, Bool) -&gt; ()) {<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; [...]<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     callback(20,40, true)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; is the style we have to use with callbacks from now on, it will be a major regression I would advise a proposal to stop right now.<br>&gt;&gt;&gt;&gt; The closure passed around and arriving as a callback there gives me NO clue how to send data to it. How is that for local reasoning?<br>&gt;&gt;&gt;&gt; This makes me believe/hope that I am getting it all wrong, so please correct me here :D.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If it is not true, then I am blowing things out of proportion and I apologise for this to everyone on the list.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 7 Jul 2016, at 08:41, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; There was a fair proposal by Brent (http://article.gmane.org/gmane.comp.lang.swift.evolution/22939) of adding the labels to the name of the variable rather than adding it to the type. And I agree with that since it simplifies the type system.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Unfortunately, since Swift 3 is making all the code-breaking changed and Brent&#39;s counterproposal is additive, it leaves at least a year-long period of not having the parameter labels in closures.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I agree with the change, I don&#39;t agree with the timing where it doesn&#39;t have a replacement yet.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jul 7, 2016, at 9:07 AM, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; This feels like making the language a lot worse. Lots of time was recently spent bikeshedding methods names and argument labels and this proposal bans labels use in some cases and encourage people not to use them in others.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On 7 Jul 2016, at 05:21, Cao Jiannan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; func needsCallback(callback: (a: Int, b: Int) -&gt; Void) {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     callback(a: 1,b: 2)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; func needsCallback(callback: (Int, Int) -&gt; Void) {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     callback(1, 2)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Is the first one will be forbidden?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; So you&#39;d like to keep the second one?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I do not understand why someone would want the second example. A great point of both Objective-C and Swift was enforcing parameter labels use to make the code more readable. <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; What if that callback were to need width and height? How is that clear which parameter I need to pass in which order?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Considering Swift 3 is our last big chance to break code and fixing the effects of this proposal would break quite a bit of code again... this is a choice it would impact the language for a long time. <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 在 2016年7月7日，11:06，Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; 写道：<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Proposal Link: https://github.com/apple/swift-evolution/blob/master/proposals/0111-remove-arg-label-type-significance.md<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; The review of &quot;SE-0111: Remove type system significance of function argument labels &quot; ran from June 30 ... July 4, 2016. The proposal has been *accepted*:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; The community and core team agree that this proposal will lead to a simplification and clarification of the type system, as well as a more clear user model for parameter labels.  In response to community feedback, the core team is accepting the proposal with a revision to allow “purely cosmetic” parameter labels in closure types for documentation (as outlined in the alternatives section).  The core team also wants to clarify that a call to a value of closure type would not allow use of any parameter labels, some interpretations thought that “arbitrary” parameter labels could be used.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Thank you to Austin Zheng for driving this discussion forward!  I filed SR-2009 to track implementation work on this.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -Chris Lattner<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160708/8eeefc28/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>[Accepted] SE-0111: Remove type system significance of function argument labels</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>July  8, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; Aw. It&#39;s really bad that labels are gone for closures at the call site 😢. IMHO, the same principles that encourage the use of labels for &quot;normal&quot; function calls should prevail here. <br>No need to feel bad — if I wasn&#39;t ignored (it&#39;s hard to notice if this happens ;-), the argument has been considered.<br></p><p>Additionally, those labels may return in the future — although there is a astoundingly long list of features that will be removed because their implementation is flawed, and whose fans have been calmed down with the argument that they&#39;ll be re-added in an improved form later ;-)<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160708/1af784e9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>[Accepted] SE-0111: Remove type system significance of function argument labels</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>July  8, 2016 at 11:00:00am</p></header><div class="content"><p>I still say that this is the case where we do take a stand and do ask for<br>this proposal to be blocked and re-analised, I cannot believe that we are<br>going to be addingthis kind of incosistency to the language and take<br>readability/ease of local reasoning (which Apple stressed at the last WWDC<br>once again) away. The community and the core team just finished<br>bikeshedding a huge change to how API&#39;s are imported and how labels are<br>used and how important they are and then we do this?<br></p><p>On Fri, Jul 8, 2016 at 10:22 AM, Tino Heth via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; Aw. It&#39;s really bad that labels are gone for closures at the call site 😢.<br>&gt; IMHO, the same principles that encourage the use of labels for &quot;normal&quot;<br>&gt; function calls should prevail here.<br>&gt;<br>&gt; No need to feel bad — if I wasn&#39;t ignored (it&#39;s hard to notice if this<br>&gt; happens ;-), the argument has been considered.<br>&gt;<br>&gt; Additionally, those labels may return in the future — although there is a<br>&gt; astoundingly long list of features that will be removed because their<br>&gt; implementation is flawed, and whose fans have been calmed down with the<br>&gt; argument that they&#39;ll be re-added in an improved form later ;-)<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160708/fe678e46/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/44b9c3e92a40313850fdbc2cb0abdef7?s=50"></div><header><strong>[Accepted] SE-0111: Remove type system significance of function argument labels</strong> from <string>Jon Shier</string> &lt;jon at jonshier.com&gt;<p>July  8, 2016 at 07:00:00pm</p></header><div class="content"><p>While I can see why removing the labels from the type system would be a good idea, I don’t see why calling the functions with labels would be actively prohibited. That’s useful information for the developer to have, and if the compiler doesn’t know them in some way, you can be assured Xcode’s autocomplete won’t see them. <br></p><p>&gt; On Jul 8, 2016, at 6:35 AM, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I still say that this is the case where we do take a stand and do ask for this proposal to be blocked and re-analised, I cannot believe that we are going to be addingthis kind of incosistency to the language and take readability/ease of local reasoning (which Apple stressed at the last WWDC once again) away. The community and the core team just finished bikeshedding a huge change to how API&#39;s are imported and how labels are used and how important they are and then we do this?<br>&gt; <br>&gt; On Fri, Jul 8, 2016 at 10:22 AM, Tino Heth via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Aw. It&#39;s really bad that labels are gone for closures at the call site 😢. IMHO, the same principles that encourage the use of labels for &quot;normal&quot; function calls should prevail here. <br>&gt; No need to feel bad — if I wasn&#39;t ignored (it&#39;s hard to notice if this happens ;-), the argument has been considered.<br>&gt; <br>&gt; Additionally, those labels may return in the future — although there is a astoundingly long list of features that will be removed because their implementation is flawed, and whose fans have been calmed down with the argument that they&#39;ll be re-added in an improved form later ;-)<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160708/f5aa5c50/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>[Accepted] SE-0111: Remove type system significance of function argument labels</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>July  9, 2016 at 09:00:00am</p></header><div class="content"><p>Sent from my iPhone<br></p><p>&gt; On 9 Jul 2016, at 00:53, Jon Shier &lt;jon at jonshier.com&gt; wrote:<br>&gt; <br>&gt; While I can see why removing the labels from the type system would be a good idea, I don’t see why calling the functions with labels would be actively prohibited. That’s useful information for the developer to have, and if the compiler doesn’t know them in some way, you can be assured Xcode’s autocomplete won’t see them. <br></p><p>I wish the core team or the author of the proposal came to this thread and engaged again with the community. <br></p><p>I imagine scenarios of callbacks, say for an image downloader or something that ought to happen asynchronously, injected in a method, stored, and then used when the asynchronous operation completed one way or the other. <br>How does this promote local reasoning so much stressed by Apple itself at WWDC when you have to jump through several hoops to have any idea what the callbacks does or what parameters and in which order it needs them?<br></p><p>The benefits to the compiler should be weighed against the negative effects to every day&#39;s code and the bugs this may introduce in a safe by default promise language like Swift.<br></p><p>&gt;&gt; On Jul 8, 2016, at 6:35 AM, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I still say that this is the case where we do take a stand and do ask for this proposal to be blocked and re-analised, I cannot believe that we are going to be addingthis kind of incosistency to the language and take readability/ease of local reasoning (which Apple stressed at the last WWDC once again) away. The community and the core team just finished bikeshedding a huge change to how API&#39;s are imported and how labels are used and how important they are and then we do this?<br>&gt;&gt; <br>&gt;&gt;&gt; On Fri, Jul 8, 2016 at 10:22 AM, Tino Heth via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Aw. It&#39;s really bad that labels are gone for closures at the call site 😢. IMHO, the same principles that encourage the use of labels for &quot;normal&quot; function calls should prevail here. <br>&gt;&gt;&gt; No need to feel bad — if I wasn&#39;t ignored (it&#39;s hard to notice if this happens ;-), the argument has been considered.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Additionally, those labels may return in the future — although there is a astoundingly long list of features that will be removed because their implementation is flawed, and whose fans have been calmed down with the argument that they&#39;ll be re-added in an improved form later ;-)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160709/54bdcb4f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/566528c7f7c28c35c0c646d415943612?s=50"></div><header><strong>[Accepted] SE-0111: Remove type system significance of function argument labels</strong> from <string>Taras Zakharko</string> &lt;taras.zakharko at uzh.ch&gt;<p>July  9, 2016 at 12:00:00pm</p></header><div class="content"><p>Well, now that function type and function signature are officially separate things, we need means to treat them as separate things. In particular, we need a way to force signatures on closure parameters (and maybe on some variables) while leaving function variables generally signature-agnostic. The proposal is incomplete in this regard. It attempts to solve one problem but actually shifts is elsewhere instead. <br></p><p>&gt; I wish the core team or the author of the proposal came to this thread and engaged again with the community. <br></p><p><br>I am quite sure that they are discussing this internally :) Also, its weekend, let people get some rest!<br></p><p><br>&gt; On 09 Jul 2016, at 10:56, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt; On 9 Jul 2016, at 00:53, Jon Shier &lt;jon at jonshier.com &lt;mailto:jon at jonshier.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; While I can see why removing the labels from the type system would be a good idea, I don’t see why calling the functions with labels would be actively prohibited. That’s useful information for the developer to have, and if the compiler doesn’t know them in some way, you can be assured Xcode’s autocomplete won’t see them. <br>&gt; <br>&gt; I wish the core team or the author of the proposal came to this thread and engaged again with the community. <br>&gt; <br>&gt; I imagine scenarios of callbacks, say for an image downloader or something that ought to happen asynchronously, injected in a method, stored, and then used when the asynchronous operation completed one way or the other. <br>&gt; How does this promote local reasoning so much stressed by Apple itself at WWDC when you have to jump through several hoops to have any idea what the callbacks does or what parameters and in which order it needs them?<br>&gt; <br>&gt; The benefits to the compiler should be weighed against the negative effects to every day&#39;s code and the bugs this may introduce in a safe by default promise language like Swift.<br>&gt; <br>&gt;&gt;&gt; On Jul 8, 2016, at 6:35 AM, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I still say that this is the case where we do take a stand and do ask for this proposal to be blocked and re-analised, I cannot believe that we are going to be addingthis kind of incosistency to the language and take readability/ease of local reasoning (which Apple stressed at the last WWDC once again) away. The community and the core team just finished bikeshedding a huge change to how API&#39;s are imported and how labels are used and how important they are and then we do this?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Fri, Jul 8, 2016 at 10:22 AM, Tino Heth via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Aw. It&#39;s really bad that labels are gone for closures at the call site 😢. IMHO, the same principles that encourage the use of labels for &quot;normal&quot; function calls should prevail here. <br>&gt;&gt;&gt; No need to feel bad — if I wasn&#39;t ignored (it&#39;s hard to notice if this happens ;-), the argument has been considered.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Additionally, those labels may return in the future — although there is a astoundingly long list of features that will be removed because their implementation is flawed, and whose fans have been calmed down with the argument that they&#39;ll be re-added in an improved form later ;-)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160709/06e429a5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>[Accepted] SE-0111: Remove type system significance of function argument labels</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>July  9, 2016 at 02:00:00pm</p></header><div class="content"><p>Sent from my iPhone<br></p><p>&gt; On 9 Jul 2016, at 11:31, Taras Zakharko &lt;taras.zakharko at uzh.ch&gt; wrote:<br>&gt; <br>&gt; Well, now that function type and function signature are officially separate things,<br></p><p>I think we may have made a mistake in doing this and the implementation work is not done yet, so we are in time to reconsider things. Processes are not perfect, I do hope nobody gets too offended if I am suggesting we moved too hastily with this proposal without thinking everything through. It can happen.<br></p><p>&gt; we need means to treat them as separate things. In particular, we need a way to force signatures on closure parameters (and maybe on some variables) while leaving function variables generally signature-agnostic. The proposal is incomplete in this regard. It attempts to solve one problem but actually shifts is elsewhere instead. <br></p><p>... hence why I said that this proposal may have been accepted too hastily and if implementing it causes readability/usability/lack of context  problems that is just as important as the hopeful benefits to the compiler. The compiler needs to be allowed to do a good job and helped too, but its job is to help us write better code and this proposal does not convince me as achieving that and is considered incomplete by at least a few others in this very thread too.<br></p><p>&gt; <br>&gt;&gt; I wish the core team or the author of the proposal came to this thread and engaged again with the community. <br>&gt; <br>&gt; <br>&gt; I am quite sure that they are discussing this internally :) Also, its weekend, let people get some rest!<br>&gt; <br>&gt; <br>&gt;&gt; On 09 Jul 2016, at 10:56, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt;&gt; On 9 Jul 2016, at 00:53, Jon Shier &lt;jon at jonshier.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; While I can see why removing the labels from the type system would be a good idea, I don’t see why calling the functions with labels would be actively prohibited. That’s useful information for the developer to have, and if the compiler doesn’t know them in some way, you can be assured Xcode’s autocomplete won’t see them. <br>&gt;&gt; <br>&gt;&gt; I wish the core team or the author of the proposal came to this thread and engaged again with the community. <br>&gt;&gt; <br>&gt;&gt; I imagine scenarios of callbacks, say for an image downloader or something that ought to happen asynchronously, injected in a method, stored, and then used when the asynchronous operation completed one way or the other. <br>&gt;&gt; How does this promote local reasoning so much stressed by Apple itself at WWDC when you have to jump through several hoops to have any idea what the callbacks does or what parameters and in which order it needs them?<br>&gt;&gt; <br>&gt;&gt; The benefits to the compiler should be weighed against the negative effects to every day&#39;s code and the bugs this may introduce in a safe by default promise language like Swift.<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 8, 2016, at 6:35 AM, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I still say that this is the case where we do take a stand and do ask for this proposal to be blocked and re-analised, I cannot believe that we are going to be addingthis kind of incosistency to the language and take readability/ease of local reasoning (which Apple stressed at the last WWDC once again) away. The community and the core team just finished bikeshedding a huge change to how API&#39;s are imported and how labels are used and how important they are and then we do this?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Fri, Jul 8, 2016 at 10:22 AM, Tino Heth via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Aw. It&#39;s really bad that labels are gone for closures at the call site 😢. IMHO, the same principles that encourage the use of labels for &quot;normal&quot; function calls should prevail here. <br>&gt;&gt;&gt;&gt;&gt; No need to feel bad — if I wasn&#39;t ignored (it&#39;s hard to notice if this happens ;-), the argument has been considered.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Additionally, those labels may return in the future — although there is a astoundingly long list of features that will be removed because their implementation is flawed, and whose fans have been calmed down with the argument that they&#39;ll be re-added in an improved form later ;-)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160709/4d031858/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/566528c7f7c28c35c0c646d415943612?s=50"></div><header><strong>[Accepted] SE-0111: Remove type system significance of function argument labels</strong> from <string>Taras Zakharko</string> &lt;taras.zakharko at uzh.ch&gt;<p>July  9, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On 09 Jul 2016, at 15:25, Goffredo Marocchi &lt;panajev at gmail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt; On 9 Jul 2016, at 11:31, Taras Zakharko &lt;taras.zakharko at uzh.ch &lt;mailto:taras.zakharko at uzh.ch&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Well, now that function type and function signature are officially separate things,<br>&gt; <br>&gt; I think we may have made a mistake in doing this and the implementation work is not done yet, so we are in time to reconsider things. Processes are not perfect, I do hope nobody gets too offended if I am suggesting we moved too hastily with this proposal without thinking everything through. It can happen.<br></p><p>You should probably look into the original review thread. The core team made it very clear that the core changes in the compiler were made a long time ago and that the things were working different from what many (including me) thought. There were also some quite compelling reasons for not making label signature part of the type. Specifically, look for email by Jordan Rose<br></p><p>&gt; <br>&gt;&gt; we need means to treat them as separate things. In particular, we need a way to force signatures on closure parameters (and maybe on some variables) while leaving function variables generally signature-agnostic. The proposal is incomplete in this regard. It attempts to solve one problem but actually shifts is elsewhere instead. <br>&gt; <br>&gt; ... hence why I said that this proposal may have been accepted too hastily and if implementing it causes readability/usability/lack of context  problems that is just as important as the hopeful benefits to the compiler. The compiler needs to be allowed to do a good job and helped too, but its job is to help us write better code and this proposal does not convince me as achieving that and is considered incomplete by at least a few others in this very thread too.<br></p><p>The problem is much more complicated than seems at the first glance. Swift designers have opened a huge can of worms by making argument labels first-class features :) This moves the issues from the formal type domain to linguistic domain, and natural language is horribly messy.  After some considerations, I believe that the move to separate type and signature is the simplest and probably the most reasonable solution (even though it makes me a bit sad), but we need some additional mechanism for dealing with closure arguments as well. Basically, we need something like a signature type/literal/syntax that enforces function signature, no matter the ‚kind‘ of function (func, variable, closure arg etc.). <br></p><p>Dr. Taras Zakharko<br></p><p>taras.zakharko at uzh.ch<br>IT Officer/Software Development<br>---------------------------------------------<br>Department of Comparative Linguistics<br>University of Zurich <br>Plattenstrasse 54, CH-8032 Zurich<br></p><p><br></p><p>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; I wish the core team or the author of the proposal came to this thread and engaged again with the community. <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I am quite sure that they are discussing this internally :) Also, its weekend, let people get some rest!<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 09 Jul 2016, at 10:56, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On 9 Jul 2016, at 00:53, Jon Shier &lt;jon at jonshier.com &lt;mailto:jon at jonshier.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; While I can see why removing the labels from the type system would be a good idea, I don’t see why calling the functions with labels would be actively prohibited. That’s useful information for the developer to have, and if the compiler doesn’t know them in some way, you can be assured Xcode’s autocomplete won’t see them. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I wish the core team or the author of the proposal came to this thread and engaged again with the community. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I imagine scenarios of callbacks, say for an image downloader or something that ought to happen asynchronously, injected in a method, stored, and then used when the asynchronous operation completed one way or the other. <br>&gt;&gt;&gt; How does this promote local reasoning so much stressed by Apple itself at WWDC when you have to jump through several hoops to have any idea what the callbacks does or what parameters and in which order it needs them?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The benefits to the compiler should be weighed against the negative effects to every day&#39;s code and the bugs this may introduce in a safe by default promise language like Swift.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jul 8, 2016, at 6:35 AM, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I still say that this is the case where we do take a stand and do ask for this proposal to be blocked and re-analised, I cannot believe that we are going to be addingthis kind of incosistency to the language and take readability/ease of local reasoning (which Apple stressed at the last WWDC once again) away. The community and the core team just finished bikeshedding a huge change to how API&#39;s are imported and how labels are used and how important they are and then we do this?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Fri, Jul 8, 2016 at 10:22 AM, Tino Heth via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Aw. It&#39;s really bad that labels are gone for closures at the call site 😢. IMHO, the same principles that encourage the use of labels for &quot;normal&quot; function calls should prevail here. <br>&gt;&gt;&gt;&gt;&gt; No need to feel bad — if I wasn&#39;t ignored (it&#39;s hard to notice if this happens ;-), the argument has been considered.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Additionally, those labels may return in the future — although there is a astoundingly long list of features that will be removed because their implementation is flawed, and whose fans have been calmed down with the argument that they&#39;ll be re-added in an improved form later ;-)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160709/8111bc9c/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[Accepted] SE-0111: Remove type system significance of function argument labels</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>July  9, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jul 9, 2016, at 1:56 AM, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt; On 9 Jul 2016, at 00:53, Jon Shier &lt;jon at jonshier.com &lt;mailto:jon at jonshier.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; While I can see why removing the labels from the type system would be a good idea, I don’t see why calling the functions with labels would be actively prohibited. That’s useful information for the developer to have, and if the compiler doesn’t know them in some way, you can be assured Xcode’s autocomplete won’t see them. <br>&gt; <br>&gt; I wish the core team or the author of the proposal came to this thread and engaged again with the community. <br></p><p>I&#39;m not inclined to spend time engaging with people who couldn&#39;t be bothered to give feedback during the week-long official review period.<br></p><p>&gt; <br>&gt; I imagine scenarios of callbacks, say for an image downloader or something that ought to happen asynchronously, injected in a method, stored, and then used when the asynchronous operation completed one way or the other. <br>&gt; How does this promote local reasoning so much stressed by Apple itself at WWDC when you have to jump through several hoops to have any idea what the callbacks does or what parameters and in which order it needs them?<br></p><p>If you really want to promote local reasoning, write short methods and look at the function signature, where you can stick labels. Or use the type system or typealiases.<br></p><p>A better solution might be the compound function names that came up during both the review thread and this thread (e.g. let foo(with:for:) : (Int, Int) -&gt; Bool = blah). Those were going to be added to the original proposal during private review, but were nixed. If someone feels strongly enough about the issue, they should submit a PR for a proposal amendment or a follow-up proposal.<br></p><p>&gt; <br>&gt; The benefits to the compiler should be weighed against the negative effects to every day&#39;s code and the bugs this may introduce in a safe by default promise language like Swift.<br>&gt; <br>&gt;&gt;&gt; On Jul 8, 2016, at 6:35 AM, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I still say that this is the case where we do take a stand and do ask for this proposal to be blocked and re-analised, I cannot believe that we are going to be addingthis kind of incosistency to the language and take readability/ease of local reasoning (which Apple stressed at the last WWDC once again) away. The community and the core team just finished bikeshedding a huge change to how API&#39;s are imported and how labels are used and how important they are and then we do this?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Fri, Jul 8, 2016 at 10:22 AM, Tino Heth via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Aw. It&#39;s really bad that labels are gone for closures at the call site 😢. IMHO, the same principles that encourage the use of labels for &quot;normal&quot; function calls should prevail here. <br>&gt;&gt;&gt; No need to feel bad — if I wasn&#39;t ignored (it&#39;s hard to notice if this happens ;-), the argument has been considered.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Additionally, those labels may return in the future — although there is a astoundingly long list of features that will be removed because their implementation is flawed, and whose fans have been calmed down with the argument that they&#39;ll be re-added in an improved form later ;-)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160709/e8fd160c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d569462ac92d4619342b1c5ff305043?s=50"></div><header><strong>[Accepted] SE-0111: Remove type system significance of function argument labels</strong> from <string>frogcjn at 163.com</string> &lt;frogcjn at 163.com&gt;<p>July 10, 2016 at 01:00:00am</p></header><div class="content"><p>If you like, you can try to modify your code as you writes. It is crazy.<br></p><p>&gt; 在 2016年7月10日，00:08，Austin Zheng via swift-evolution &lt;swift-evolution at swift.org&gt; 写道：<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Jul 9, 2016, at 1:56 AM, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt; On 9 Jul 2016, at 00:53, Jon Shier &lt;jon at jonshier.com &lt;mailto:jon at jonshier.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; While I can see why removing the labels from the type system would be a good idea, I don’t see why calling the functions with labels would be actively prohibited. That’s useful information for the developer to have, and if the compiler doesn’t know them in some way, you can be assured Xcode’s autocomplete won’t see them. <br>&gt;&gt; <br>&gt;&gt; I wish the core team or the author of the proposal came to this thread and engaged again with the community. <br>&gt; <br>&gt; I&#39;m not inclined to spend time engaging with people who couldn&#39;t be bothered to give feedback during the week-long official review period.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; I imagine scenarios of callbacks, say for an image downloader or something that ought to happen asynchronously, injected in a method, stored, and then used when the asynchronous operation completed one way or the other. <br>&gt;&gt; How does this promote local reasoning so much stressed by Apple itself at WWDC when you have to jump through several hoops to have any idea what the callbacks does or what parameters and in which order it needs them?<br>&gt; <br>&gt; If you really want to promote local reasoning, write short methods and look at the function signature, where you can stick labels. Or use the type system or typealiases.<br>&gt; <br>&gt; A better solution might be the compound function names that came up during both the review thread and this thread (e.g. let foo(with:for:) : (Int, Int) -&gt; Bool = blah). Those were going to be added to the original proposal during private review, but were nixed. If someone feels strongly enough about the issue, they should submit a PR for a proposal amendment or a follow-up proposal.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; The benefits to the compiler should be weighed against the negative effects to every day&#39;s code and the bugs this may introduce in a safe by default promise language like Swift.<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 8, 2016, at 6:35 AM, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I still say that this is the case where we do take a stand and do ask for this proposal to be blocked and re-analised, I cannot believe that we are going to be addingthis kind of incosistency to the language and take readability/ease of local reasoning (which Apple stressed at the last WWDC once again) away. The community and the core team just finished bikeshedding a huge change to how API&#39;s are imported and how labels are used and how important they are and then we do this?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Fri, Jul 8, 2016 at 10:22 AM, Tino Heth via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Aw. It&#39;s really bad that labels are gone for closures at the call site 😢. IMHO, the same principles that encourage the use of labels for &quot;normal&quot; function calls should prevail here. <br>&gt;&gt;&gt;&gt; No need to feel bad — if I wasn&#39;t ignored (it&#39;s hard to notice if this happens ;-), the argument has been considered.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Additionally, those labels may return in the future — although there is a astoundingly long list of features that will be removed because their implementation is flawed, and whose fans have been calmed down with the argument that they&#39;ll be re-added in an improved form later ;-)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160710/9fd41d3a/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>[Accepted] SE-0111: Remove type system significance of function argument labels</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>July 10, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On Jul 9, 2016, at 9:08 AM, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On 9 Jul 2016, at 00:53, Jon Shier &lt;jon at jonshier.com &lt;mailto:jon at jonshier.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; While I can see why removing the labels from the type system would be a good idea, I don’t see why calling the functions with labels would be actively prohibited. That’s useful information for the developer to have, and if the compiler doesn’t know them in some way, you can be assured Xcode’s autocomplete won’t see them. <br>&gt;&gt; <br>&gt;&gt; I wish the core team or the author of the proposal came to this thread and engaged again with the community. <br>&gt; <br>&gt; I&#39;m not inclined to spend time engaging with people who couldn&#39;t be bothered to give feedback during the week-long official review period.<br></p><p>Not all people &quot;couldn’t be bothered” but had life events, such as moving across states with four kids, that prevented them from being able to engage during the official review period. <br></p><p>I’ve read through all of the posts that I see in my mailbox regarding this topic and I’ve yet to see any real answer to the concerns of tooling, typealias usage, closures, and code readability and maintainability concerns under this new proposal. This is the closest I’ve seen (from Douglas Gregor a few days ago):<br></p><p>&gt; The core team’s intent is that one can add cosmetic labels to function types, but that those labels are not (cannot be) used at the call site, e.g.,<br></p><p>Do you have specific post in mind that addresses the these concerns? Maybe I’m just missing them, but I really don’t see those addressed and they are not mentioned in the proposal at all.<br></p><p>Let’s say I want to model a problem regarding some library functions that work with resizing some image type. Today, if I did that, the tooling would give me auto-completion for all of the parameter labels and the code is very legible. <br></p><p>struct Size {<br>    var x: Int<br>    var y: Int<br>}<br></p><p>struct Image {<br>    var data: Data<br>    var size: Size<br>    // lots more properties...<br>}<br></p><p>typealias ImageResizedCallback = (original: Image, resized: Image) -&gt; Void<br></p><p>func doResizeA(image: Image, completed: ImageResizedCallback) {<br>    let newData = image.data<br>    let newSize = image.size<br></p><p>    // do some work that&#39;s really slow...<br>    <br>    completed(original: image, resized: Image(data: newData, size: newSize))<br>}<br></p><p>func doResizeB(image: Image, completed: (original: Image, resized: Image) -&gt; Void) {<br>    let newData = image.data<br>    let newSize = image.size<br></p><p>    // do some work that&#39;s really slow...<br>    <br>    completed(original: image, resized: Image(data: newData, size: newSize))<br>}<br></p><p>In either approach, `doResizeA` with a named callback or `doResizeB` with an explicit parameter type offer benefits that are lost under this proposal.<br></p><p>let someAsset = Image(data: Data(), size: Size(x: 100, y: 100))<br>    <br>doResizeA(image: someAsset, completed: { (original, resized) in<br>    print(&quot;doResizeA - original: \(original), resized: \(resized)&quot;)<br>})<br></p><p>doResizeB(image: someAsset, completed: { (original, resized) in<br>    print(&quot;doResizeB - original: \(original), resized: \(resized)&quot;)<br>})<br></p><p>Note that both `original` and `resized` get auto-completed for us here. This provides great code clarity and insights. This is also self-documenting code.<br></p><p>However, under this proposal as accepted (as I understand it), we are left with this:<br></p><p>func doResizeC(image: Image, completed: (Image, Image) -&gt; Void) {<br>    let newData = image.data<br>    let newSize = image.size<br></p><p>    // do some work that&#39;s really slow...<br>    <br>    completed(image, Image(data: newData, size: newSize))<br>}<br></p><p>This code is no longer self-documenting. I have no idea at looking at the call signature which order the images to `completed` should be.<br></p><p>Further, I get no help here when trying to use it:<br></p><p>doResizeC(image: someAsset) { (&lt;#Image#&gt;, &lt;#Image#&gt;) in<br>    &lt;#code#&gt;<br>}<br></p><p>What do I label for the two images? This is a workflow regression. Yes, maybe the underlying model is more correct. However, this comes at a burden to actually authoring and maintaining the code. To me, that’s a truly unfortunate cost.<br></p><p>So now I probably write this:<br></p><p>doResizeC(image: someAsset) {<br>    print(&quot;doResizeC1 - original: \($0), resized: \($1)&quot;)<br>}<br></p><p>Or, if I happen to know or look-up the order, I can fill in the labels myself:<br></p><p>doResizeC(image: someAsset, completed: { (original, resized) in<br>    print(&quot;doResizeC2 - original: \(original), resized: \(resized)&quot;)<br>})<br></p><p>Further, we are able to turn runtime errors into compile-time checks when refactoring the signatures in the `doResizeA` and `doResizeB` functions - e.g. change the order of `original` and `resized` and you’ll get the compiler errors. This no longer happens under this proposal because the labels are erased. One way around that is to use types to solve this problem, but Swift provides no convenient way to have two `Image` types that share the same implementation but are considered as different types (sure, I could box them…).<br></p><p>I can get these benefits back, but now I need to introduce even more complexity into the system.<br></p><p>protocol ResizeCallbackType {<br>    func resized(original: Image, resized: Image)<br>}<br></p><p>struct ResizeCallback : ResizeCallbackType {<br>    func resized(original: Image, resized: Image) {<br>        print(&quot;resized - original: \(original), resized: \(resized)&quot;)<br>    }<br>}<br></p><p>func doResizeD(image: Image, callback: ResizeCallbackType) {<br>    let newData = image.data<br>    let newSize = image.size<br>    <br>    // do some work that&#39;s really slow...<br>    <br>    callback.resized(original: image, resized: Image(data: newData, size: newSize))<br>}<br></p><p>doResizeD(image: someAsset, callback: ResizeCallback())<br></p><p>But who really wants to go through all the protocol effort just to get back to a place being able to allow for label usage again? <br></p><p>I agree that the proposal provides a “more correct” underlying model for Swift. However, before being approved, I would have really liked to have seen the above workflow and what I consider to be code readability and maintainability regressions addressed.<br></p><p>-David<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160710/88b28286/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[Accepted] SE-0111: Remove type system significance of function argument labels</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>July 10, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On Jul 10, 2016, at 10:30 PM, David Owens II &lt;david at owensd.io&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I wish the core team or the author of the proposal came to this thread and engaged again with the community. <br>&gt;&gt; <br>&gt;&gt; I&#39;m not inclined to spend time engaging with people who couldn&#39;t be bothered to give feedback during the week-long official review period.<br>&gt; <br>&gt; Not all people &quot;couldn’t be bothered” but had life events, such as moving across states with four kids, that prevented them from being able to engage during the official review period. <br></p><p>I hope your move went smoothly. More generally, there will always be people with good reasons for not being able to participate in the review process, but the procedure is set: one week of formal discussion, followed by a decision by the core team. If a proposal should be re-reviewed or amended, someone should submit (or at least draft) a follow-up proposal; none of the other proposals that have been accepted have been taken up for re-review by the core team based merely on reviews that were submitted after the review period ended (and there have been at least a few whose acceptance was very controversial).<br></p><p>&gt; <br>&gt; I’ve read through all of the posts that I see in my mailbox regarding this topic and I’ve yet to see any real answer to the concerns of tooling, typealias usage, closures, and code readability and maintainability concerns under this new proposal. This is the closest I’ve seen (from Douglas Gregor a few days ago):<br>&gt; <br>&gt;&gt; The core team’s intent is that one can add cosmetic labels to function types, but that those labels are not (cannot be) used at the call site, e.g.,<br>&gt; <br>&gt; Do you have specific post in mind that addresses the these concerns? Maybe I’m just missing them, but I really don’t see those addressed and they are not mentioned in the proposal at all.<br>&gt; <br>&gt; Let’s say I want to model a problem regarding some library functions that work with resizing some image type. Today, if I did that, the tooling would give me auto-completion for all of the parameter labels and the code is very legible. <br>&gt; <br>&gt; Note that both `original` and `resized` get auto-completed for us here. This provides great code clarity and insights. This is also self-documenting code.<br>&gt; <br>&gt; However, under this proposal as accepted (as I understand it), we are left with this:<br>&gt; <br>&gt; func doResizeC(image: Image, completed: (Image, Image) -&gt; Void) {<br>&gt;     let newData = image.data<br>&gt;     let newSize = image.size<br></p><p>You can still have labels in the type: `completed: (original: Image, resized: Image)`.<br></p><p>&gt; <br>&gt;     // do some work that&#39;s really slow...<br>&gt;     <br>&gt;     completed(image, Image(data: newData, size: newSize))<br></p><p>This is definitely a problem. I am considering writing a follow-up proposal that would allow for compound naming of values of function type, which would alleviate this problem: `let foo(x:y:) : (Int, Int) -&gt; Void`, which was brought up a couple of times during the review thread. (This was going to be part of the original proposal, but was removed for various reasons.)<br></p><p>&gt; }<br>&gt; <br>&gt; -David<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160710/8f554d97/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8e77369a540cf4d35924683e176c7a9c?s=50"></div><header><strong>[Accepted] SE-0111: Remove type system significance of function argument labels</strong> from <string>Mark Lacey</string> &lt;mark.lacey at apple.com&gt;<p>July 10, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On Jul 10, 2016, at 10:53 PM, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jul 10, 2016, at 10:30 PM, David Owens II &lt;david at owensd.io &lt;mailto:david at owensd.io&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I wish the core team or the author of the proposal came to this thread and engaged again with the community. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m not inclined to spend time engaging with people who couldn&#39;t be bothered to give feedback during the week-long official review period.<br>&gt;&gt; <br>&gt;&gt; Not all people &quot;couldn’t be bothered” but had life events, such as moving across states with four kids, that prevented them from being able to engage during the official review period. <br>&gt; <br>&gt; I hope your move went smoothly. More generally, there will always be people with good reasons for not being able to participate in the review process, but the procedure is set: one week of formal discussion, followed by a decision by the core team. If a proposal should be re-reviewed or amended, someone should submit (or at least draft) a follow-up proposal; none of the other proposals that have been accepted have been taken up for re-review by the core team based merely on reviews that were submitted after the review period ended (and there have been at least a few whose acceptance was very controversial).<br>&gt; <br>&gt;&gt; <br>&gt;&gt; I’ve read through all of the posts that I see in my mailbox regarding this topic and I’ve yet to see any real answer to the concerns of tooling, typealias usage, closures, and code readability and maintainability concerns under this new proposal. This is the closest I’ve seen (from Douglas Gregor a few days ago):<br>&gt;&gt; <br>&gt;&gt;&gt; The core team’s intent is that one can add cosmetic labels to function types, but that those labels are not (cannot be) used at the call site, e.g.,<br>&gt;&gt; <br>&gt;&gt; Do you have specific post in mind that addresses the these concerns? Maybe I’m just missing them, but I really don’t see those addressed and they are not mentioned in the proposal at all.<br>&gt;&gt; <br>&gt;&gt; Let’s say I want to model a problem regarding some library functions that work with resizing some image type. Today, if I did that, the tooling would give me auto-completion for all of the parameter labels and the code is very legible. <br>&gt;&gt; <br>&gt;&gt; Note that both `original` and `resized` get auto-completed for us here. This provides great code clarity and insights. This is also self-documenting code.<br>&gt;&gt; <br>&gt;&gt; However, under this proposal as accepted (as I understand it), we are left with this:<br>&gt;&gt; <br>&gt;&gt; func doResizeC(image: Image, completed: (Image, Image) -&gt; Void) {<br>&gt;&gt;     let newData = image.data<br>&gt;&gt;     let newSize = image.size<br>&gt; <br>&gt; You can still have labels in the type: `completed: (original: Image, resized: Image)`.<br>&gt; <br>&gt;&gt; <br>&gt;&gt;     // do some work that&#39;s really slow...<br>&gt;&gt;     <br>&gt;&gt;     completed(image, Image(data: newData, size: newSize))<br>&gt; <br>&gt; This is definitely a problem. I am considering writing a follow-up proposal that would allow for compound naming of values of function type, which would alleviate this problem: `let foo(x:y:) : (Int, Int) -&gt; Void`, which was brought up a couple of times during the review thread. (This was going to be part of the original proposal, but was removed for various reasons.)<br></p><p>In the meantime one option here would be to define a nested function that invokes the callback. It results in boilerplate, which is unfortunate, but would work:<br></p><p>func doResize<br>(<br>  image: Image,<br>  completed completedParam: (original: Image, resized: Image) -&gt; Void<br>) {<br>  func completed(original: Image, resized: Image) {<br>    completedParam(original, resized)<br>  }<br></p><p>  // do lots of work<br></p><p>  completed(original: image, resized: Image(data: newData, size: newSize))<br>}<br></p><p>Mark<br></p><p><br>&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; -David<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160710/ef0750e3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>[Accepted] SE-0111: Remove type system significance of function argument labels</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>July 10, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On Jul 10, 2016, at 11:09 PM, Mark Lacey &lt;mark.lacey at apple.com&gt; wrote:<br>&gt; <br>&gt; In the meantime one option here would be to define a nested function that invokes the callback. It results in boilerplate, which is unfortunate, but would work:<br>&gt; <br>&gt; func doResize<br>&gt; (<br>&gt;   image: Image,<br>&gt;   completed completedParam: (original: Image, resized: Image) -&gt; Void<br>&gt; ) {<br>&gt;   func completed(original: Image, resized: Image) {<br>&gt;     completedParam(original, resized)<br>&gt;   }<br>&gt; <br>&gt;   // do lots of work<br>&gt; <br>&gt;   completed(original: image, resized: Image(data: newData, size: newSize))<br>&gt; }<br></p><p>That doesn’t solve anything; you still have to write the nested function, which means you still need to know what the order is. That’s only going to come through the documentation or non-compiler verified labels.<br></p><p>It also doesn’t help the call site for `doResize` - you’ll still get the non-descript `(Image, Image)` values.<br></p><p>-David<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>[Accepted] SE-0111: Remove type system significance of function argument labels</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>July 10, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On Jul 10, 2016, at 10:53 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jul 10, 2016, at 10:30 PM, David Owens II &lt;david at owensd.io &lt;mailto:david at owensd.io&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I wish the core team or the author of the proposal came to this thread and engaged again with the community. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m not inclined to spend time engaging with people who couldn&#39;t be bothered to give feedback during the week-long official review period.<br>&gt;&gt; <br>&gt;&gt; Not all people &quot;couldn’t be bothered” but had life events, such as moving across states with four kids, that prevented them from being able to engage during the official review period. <br>&gt; <br>&gt; I hope your move went smoothly. More generally, there will always be people with good reasons for not being able to participate in the review process, but the procedure is set: one week of formal discussion, followed by a decision by the core team. If a proposal should be re-reviewed or amended, someone should submit (or at least draft) a follow-up proposal; none of the other proposals that have been accepted have been taken up for re-review by the core team based merely on reviews that were submitted after the review period ended (and there have been at least a few whose acceptance was very controversial).<br></p><p>Sure, the review period is fine. I think it’s unreasonable to say that questions, clarifications, or feedback should simply be ignored because it’s outside of the review window. If the feature is implemented and checked in, fine, but we’re still aways from there.<br></p><p>Regardless, my feedback was more about clarification on what is actually being changed for the workflow because I found no real answers in the proposal or the thread. I found where some concerns were made, but no real solutions to those concerns. Maybe I just overlooked them.<br></p><p>&gt;&gt; I’ve read through all of the posts that I see in my mailbox regarding this topic and I’ve yet to see any real answer to the concerns of tooling, typealias usage, closures, and code readability and maintainability concerns under this new proposal. This is the closest I’ve seen (from Douglas Gregor a few days ago):<br>&gt;&gt; <br>&gt;&gt;&gt; The core team’s intent is that one can add cosmetic labels to function types, but that those labels are not (cannot be) used at the call site, e.g.,<br>&gt;&gt; <br>&gt;&gt; Do you have specific post in mind that addresses the these concerns? Maybe I’m just missing them, but I really don’t see those addressed and they are not mentioned in the proposal at all.<br>&gt;&gt; <br>&gt;&gt; Let’s say I want to model a problem regarding some library functions that work with resizing some image type. Today, if I did that, the tooling would give me auto-completion for all of the parameter labels and the code is very legible. <br>&gt;&gt; <br>&gt;&gt; Note that both `original` and `resized` get auto-completed for us here. This provides great code clarity and insights. This is also self-documenting code.<br>&gt;&gt; <br>&gt;&gt; However, under this proposal as accepted (as I understand it), we are left with this:<br>&gt;&gt; <br>&gt;&gt; func doResizeC(image: Image, completed: (Image, Image) -&gt; Void) {<br>&gt;&gt;     let newData = image.data<br>&gt;&gt;     let newSize = image.size<br>&gt; <br>&gt; You can still have labels in the type: `completed: (original: Image, resized: Image)`.<br></p><p>Labels that aren’t enforced or checked by the compiler are effectively worthless; they may as well be comments. This makes those labels allowed on typealiases equally as effective.<br></p><p>I also find it extremely strange that these labels will be allowed as source code that can never be verified or used in other places. It seems we are simply trading one set of inconsistencies for another.<br></p><p>&gt; <br>&gt;&gt; <br>&gt;&gt;     // do some work that&#39;s really slow...<br>&gt;&gt;     <br>&gt;&gt;     completed(image, Image(data: newData, size: newSize))<br>&gt; <br>&gt; This is definitely a problem. I am considering writing a follow-up proposal that would allow for compound naming of values of function type, which would alleviate this problem: `let foo(x:y:) : (Int, Int) -&gt; Void`, which was brought up a couple of times during the review thread. (This was going to be part of the original proposal, but was removed for various reasons.)<br></p><p>Which just gets you back to this syntax for closures:<br></p><p>func doResizeB(image: Image, completed: (original: Image, resized: Image) -&gt; Void)<br></p><p>Unless you really want to try and get parameter name syntax changed to match your example:<br></p><p>func doResizeB(image: Image, completed(original:resized:): (Image, Image) -&gt; Void)<br></p><p>Or maybe something else… I guess I will have to wait for the proposal.<br></p><p>-David<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160710/a24fd0e1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[Accepted] SE-0111: Remove type system significance of function argument labels</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>July 10, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On Jul 10, 2016, at 11:16 PM, David Owens II &lt;david at owensd.io&gt; wrote:<br>&gt; <br>&gt; Unless you really want to try and get parameter name syntax changed to match your example:<br>&gt; <br>&gt; func doResizeB(image: Image, completed(original:resized:): (Image, Image) -&gt; Void)<br></p><p>This is what I had in mind. You would be able to name a value of function type (whether it be a local variable, function argument, or property) with either a simple name (in which case there would be no labels at all), or a compound name with as many semicolons as arguments. Would you have any objection to this?<br></p><p>&gt; <br>&gt; Or maybe something else… I guess I will have to wait for the proposal.<br>&gt; <br>&gt; -David<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160710/088eb2e0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>[Accepted] SE-0111: Remove type system significance of function argument labels</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>July 11, 2016 at 12:00:00am</p></header><div class="content"><p>Sent from my iPhone<br></p><p>&gt; On Jul 10, 2016, at 11:24 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jul 10, 2016, at 11:16 PM, David Owens II &lt;david at owensd.io&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Unless you really want to try and get parameter name syntax changed to match your example:<br>&gt;&gt; <br>&gt;&gt; func doResizeB(image: Image, completed(original:resized:): (Image, Image) -&gt; Void)<br>&gt; <br>&gt; This is what I had in mind. You would be able to name a value of function type (whether it be a local variable, function argument, or property) with either a simple name (in which case there would be no labels at all), or a compound name with as many semicolons as arguments. Would you have any objection to this?<br></p><p>Would this compound name also affect how functions are referenced? I would assume no. <br></p><p>Also, how do typealiases work then? It&#39;s still desirable to not have to couple the labels there with the labels within the function declaration. So if:<br></p><p>typealias MyCallback = (original: Image, resized: Image) -&gt; Void<br></p><p>Meant that these were equivalent:<br></p><p>func doResizeB(image: Image, completed(original:resized:): (Image, Image) -&gt; Void)<br></p><p>func doResizeB(image: Image, completed: MyCallback)<br></p><p>I probably wouldn&#39;t have any real objection. <br></p><p>-David<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160711/b59ae070/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Accepted] SE-0111: Remove type system significance of function argument labels</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July 11, 2016 at 01:00:00am</p></header><div class="content"><p>On Mon, Jul 11, 2016 at 1:16 AM, David Owens II via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On Jul 10, 2016, at 10:53 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Jul 10, 2016, at 10:30 PM, David Owens II &lt;david at owensd.io&gt; wrote:<br>&gt;<br>&gt;<br>&gt; I wish the core team or the author of the proposal came to this thread and<br>&gt; engaged again with the community.<br>&gt;<br>&gt;<br>&gt; I&#39;m not inclined to spend time engaging with people who couldn&#39;t be<br>&gt; bothered to give feedback during the week-long official review period.<br>&gt;<br>&gt;<br>&gt; Not all people &quot;couldn’t be bothered” but had life events, such as moving<br>&gt; across states with four kids, that prevented them from being able to engage<br>&gt; during the official review period.<br>&gt;<br>&gt;<br>&gt; I hope your move went smoothly. More generally, there will always be<br>&gt; people with good reasons for not being able to participate in the review<br>&gt; process, but the procedure is set: one week of formal discussion, followed<br>&gt; by a decision by the core team. If a proposal should be re-reviewed or<br>&gt; amended, someone should submit (or at least draft) a follow-up proposal;<br>&gt; none of the other proposals that have been accepted have been taken up for<br>&gt; re-review by the core team based merely on reviews that were submitted<br>&gt; after the review period ended (and there have been at least a few whose<br>&gt; acceptance was very controversial).<br>&gt;<br>&gt;<br>&gt; Sure, the review period is fine. I think it’s unreasonable to say that<br>&gt; questions, clarifications, or feedback should simply be ignored because<br>&gt; it’s outside of the review window. If the feature is implemented and<br>&gt; checked in, fine, but we’re still aways from there.<br>&gt;<br>&gt; Regardless, my feedback was more about clarification on what is actually<br>&gt; being changed for the workflow because I found no real answers in the<br>&gt; proposal or the thread. I found where some concerns were made, but no real<br>&gt; solutions to those concerns. Maybe I just overlooked them.<br>&gt;<br>&gt; I’ve read through all of the posts that I see in my mailbox regarding this<br>&gt; topic and I’ve yet to see any real answer to the concerns of tooling,<br>&gt; typealias usage, closures, and code readability and maintainability<br>&gt; concerns under this new proposal. This is the closest I’ve seen (from<br>&gt; Douglas Gregor a few days ago):<br>&gt;<br>&gt; The core team’s intent is that one can add cosmetic labels to function<br>&gt; types, but that those labels are not (cannot be) used at the call site,<br>&gt; e.g.,<br>&gt;<br>&gt;<br>&gt; Do you have specific post in mind that addresses the these concerns? Maybe<br>&gt; I’m just missing them, but I really don’t see those addressed and they are<br>&gt; not mentioned in the proposal at all.<br>&gt;<br>&gt; Let’s say I want to model a problem regarding some library functions that<br>&gt; work with resizing some image type. Today, if I did that, the tooling would<br>&gt; give me auto-completion for all of the parameter labels and the code is<br>&gt; very legible.<br>&gt;<br>&gt; Note that both `original` and `resized` get auto-completed for us here.<br>&gt; This provides great code clarity and insights. This is also<br>&gt; self-documenting code.<br>&gt;<br>&gt; However, under this proposal as accepted (as I understand it), we are left<br>&gt; with this:<br>&gt;<br>&gt; func doResizeC(image: Image, completed: (Image, Image) -&gt; Void) {<br>&gt;     let newData = image.data<br>&gt;     let newSize = image.size<br>&gt;<br>&gt;<br>&gt; You can still have labels in the type: `completed: (original: Image,<br>&gt; resized: Image)`.<br>&gt;<br>&gt;<br>&gt; Labels that aren’t enforced or checked by the compiler are effectively<br>&gt; worthless; they may as well be comments. This makes those labels allowed on<br>&gt; typealiases equally as effective.<br>&gt;<br>&gt; I also find it extremely strange that these labels will be allowed as<br>&gt; source code that can never be verified or used in other places. It seems we<br>&gt; are simply trading one set of inconsistencies for another.<br>&gt;<br>&gt;<br>&gt;<br>&gt;     // do some work that&#39;s really slow...<br>&gt;<br>&gt;     completed(image, Image(data: newData, size: newSize))<br>&gt;<br>&gt;<br>&gt; This is definitely a problem. I am considering writing a follow-up<br>&gt; proposal that would allow for compound naming of values of function type,<br>&gt; which would alleviate this problem: `let foo(x:y:) : (Int, Int) -&gt; Void`,<br>&gt; which was brought up a couple of times during the review thread. (This was<br>&gt; going to be part of the original proposal, but was removed for various<br>&gt; reasons.)<br>&gt;<br>&gt;<br>&gt; Which just gets you back to this syntax for closures:<br>&gt;<br>&gt; func doResizeB(image: Image, completed: (original: Image, resized: Image)<br>&gt; -&gt; Void)<br>&gt;<br>&gt; Unless you really want to try and get parameter name syntax changed to<br>&gt; match your example:<br>&gt;<br>&gt; func doResizeB(image: Image, completed(original:resized:): (Image, Image)<br>&gt; -&gt; Void)<br>&gt;<br>&gt; Or maybe something else… I guess I will have to wait for the proposal.<br>&gt;<br></p><p>What makes sense to me is for the follow-on proposal to propose a notation<br>that permits mandatory external labels, while the for-your-reference-only<br>labels now left in the type annotation are treated as internal labels. That<br>is, for a function:<br></p><p>`func frobnicate(with foo: Int, and bar: Int)`<br></p><p>The corresponding notation could be<br></p><p>`let frobnicate(with:and:) : (foo: Int, bar: Int)`<br></p><p><br></p><p>&gt; -David<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160711/a3fd680a/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Accepted] SE-0111: Remove type system significance of function argument labels</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July 13, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On Jul 9, 2016, at 1:56 AM, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt; On 9 Jul 2016, at 00:53, Jon Shier &lt;jon at jonshier.com &lt;mailto:jon at jonshier.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; While I can see why removing the labels from the type system would be a good idea, I don’t see why calling the functions with labels would be actively prohibited. That’s useful information for the developer to have, and if the compiler doesn’t know them in some way, you can be assured Xcode’s autocomplete won’t see them. <br>&gt; <br>&gt; I wish the core team or the author of the proposal came to this thread and engaged again with the community. <br></p><p>Hi.  The core team had a long discussion about this today.  I will start a new thread to capture the discussion and update the community on the result of that.  Thank for for all of the input (even after the review period).  The core team really does care (even though everyone is insanely busy right now), we just can’t necessarily respond to every email in real time :-)<br></p><p>-Chris<br></p><p>&gt; <br>&gt; I imagine scenarios of callbacks, say for an image downloader or something that ought to happen asynchronously, injected in a method, stored, and then used when the asynchronous operation completed one way or the other. <br>&gt; How does this promote local reasoning so much stressed by Apple itself at WWDC when you have to jump through several hoops to have any idea what the callbacks does or what parameters and in which order it needs them?<br>&gt; <br>&gt; The benefits to the compiler should be weighed against the negative effects to every day&#39;s code and the bugs this may introduce in a safe by default promise language like Swift.<br>&gt; <br>&gt;&gt;&gt; On Jul 8, 2016, at 6:35 AM, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I still say that this is the case where we do take a stand and do ask for this proposal to be blocked and re-analised, I cannot believe that we are going to be addingthis kind of incosistency to the language and take readability/ease of local reasoning (which Apple stressed at the last WWDC once again) away. The community and the core team just finished bikeshedding a huge change to how API&#39;s are imported and how labels are used and how important they are and then we do this?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Fri, Jul 8, 2016 at 10:22 AM, Tino Heth via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Aw. It&#39;s really bad that labels are gone for closures at the call site 😢. IMHO, the same principles that encourage the use of labels for &quot;normal&quot; function calls should prevail here. <br>&gt;&gt;&gt; No need to feel bad — if I wasn&#39;t ignored (it&#39;s hard to notice if this happens ;-), the argument has been considered.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Additionally, those labels may return in the future — although there is a astoundingly long list of features that will be removed because their implementation is flawed, and whose fans have been calmed down with the argument that they&#39;ll be re-added in an improved form later ;-)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160713/e4f3726b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>[Accepted] SE-0111: Remove type system significance of function argument labels</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>July 14, 2016 at 07:00:00am</p></header><div class="content"><p>Sent from my iPhone<br></p><p>&gt; On 14 Jul 2016, at 04:58, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jul 9, 2016, at 1:56 AM, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt;&gt; On 9 Jul 2016, at 00:53, Jon Shier &lt;jon at jonshier.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; While I can see why removing the labels from the type system would be a good idea, I don’t see why calling the functions with labels would be actively prohibited. That’s useful information for the developer to have, and if the compiler doesn’t know them in some way, you can be assured Xcode’s autocomplete won’t see them. <br>&gt;&gt; <br>&gt;&gt; I wish the core team or the author of the proposal came to this thread and engaged again with the community. <br>&gt; <br>&gt; Hi.  The core team had a long discussion about this today.  I will start a new thread to capture the discussion and update the community on the result of that.  Thank for for all of the input (even after the review period).  The core team really does care (even though everyone is insanely busy right now), we just can’t necessarily respond to every email in real time :-)<br>&gt; <br>&gt; -Chris<br></p><p>Hi Chris,<br></p><p>I do appreciate you are all working hard at closing perhaps the biggest update to your new programming language in its history, I also trust you care about community input.<br></p><p>This was one of the issues that were key for me in this language (even though some people do not miss parameter labels in other languages) and I also felt ashamed for not being able to take active part in the review and throwing toys out of the pram now, but it is such a small yet defining and clarifying feature I had to speak out.<br></p><p>Thank you for listening, talking again about it, and making a plan on how to move forward.<br></p><p>&gt; <br>&gt;&gt; <br>&gt;&gt; I imagine scenarios of callbacks, say for an image downloader or something that ought to happen asynchronously, injected in a method, stored, and then used when the asynchronous operation completed one way or the other. <br>&gt;&gt; How does this promote local reasoning so much stressed by Apple itself at WWDC when you have to jump through several hoops to have any idea what the callbacks does or what parameters and in which order it needs them?<br>&gt;&gt; <br>&gt;&gt; The benefits to the compiler should be weighed against the negative effects to every day&#39;s code and the bugs this may introduce in a safe by default promise language like Swift.<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 8, 2016, at 6:35 AM, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I still say that this is the case where we do take a stand and do ask for this proposal to be blocked and re-analised, I cannot believe that we are going to be addingthis kind of incosistency to the language and take readability/ease of local reasoning (which Apple stressed at the last WWDC once again) away. The community and the core team just finished bikeshedding a huge change to how API&#39;s are imported and how labels are used and how important they are and then we do this?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Fri, Jul 8, 2016 at 10:22 AM, Tino Heth via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Aw. It&#39;s really bad that labels are gone for closures at the call site 😢. IMHO, the same principles that encourage the use of labels for &quot;normal&quot; function calls should prevail here. <br>&gt;&gt;&gt;&gt;&gt; No need to feel bad — if I wasn&#39;t ignored (it&#39;s hard to notice if this happens ;-), the argument has been considered.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Additionally, those labels may return in the future — although there is a astoundingly long list of features that will be removed because their implementation is flawed, and whose fans have been calmed down with the argument that they&#39;ll be re-added in an improved form later ;-)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160714/d8ec335b/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Accepted] SE-0111: Remove type system significance of function argument labels</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>July  8, 2016 at 09:00:00am</p></header><div class="content"><p>This hasn&#39;t occurred to me until now, but this will also elminate the following (right?):<br></p><p>public typealias XUURLRequestModifier = (request: NSMutableURLRequest) -&gt; Void<br></p><p>Which is really nice since when expanded by Xcode, this automatically offers you the &quot;request&quot; label for the variable so you don&#39;t have to name it. Without it, it will simply use the argument type...<br></p><p>&gt; On Jul 8, 2016, at 1:15 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Jul 7, 2016, at 3:18 AM, Taras Zakharko via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I would also be interested in a clarification on this point from Chris or someone else from the core team. <br>&gt;&gt; <br>&gt;&gt; The accepted proposal states that labels are illegal in function types (that is also what I was arguing for towards the end of  the review discussion) but at the same time Cris mentions that cosmetic labels are allowed in closure types (which for me is synonymous with function types). So which one is it and how does this change affect closure parameters?<br>&gt; <br>&gt; The core team’s intent is that one can add cosmetic labels to function types, but that those labels are not (cannot be) used at the call site, e.g.,<br>&gt; <br>&gt; 	func foo(fn: (success: Bool) -&gt; Void) {<br>&gt; 	  fn(true) // note: no ‘success:’ argument label<br>&gt; 	}<br>&gt; <br>&gt; 	func bar(something: Bool) { }<br>&gt; <br>&gt; 	foo(bar) // okay: labels not considered<br>&gt; <br>&gt; The proposal should be updated accordingly so it’s clear for future readers. PR welcome ;)<br>&gt; <br>&gt; 	- Doug<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Best, <br>&gt;&gt; <br>&gt;&gt;  Taras<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 07 Jul 2016, at 10:10, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hey Charlie,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The change you reference and this must work together, I have a hard time accepting that we will have a Swift 3 with this change in and no other change that balances it.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If this<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; function doItAndLetUsKnow(callback: (Int, Int, Bool) -&gt; ()) {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; [...]<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     callback(20,40, true)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; is the style we have to use with callbacks from now on, it will be a major regression I would advise a proposal to stop right now.<br>&gt;&gt;&gt; The closure passed around and arriving as a callback there gives me NO clue how to send data to it. How is that for local reasoning?<br>&gt;&gt;&gt; This makes me believe/hope that I am getting it all wrong, so please correct me here :D.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If it is not true, then I am blowing things out of proportion and I apologise for this to everyone on the list.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On 7 Jul 2016, at 08:41, Charlie Monroe &lt;charlie at charliemonroe.net &lt;mailto:charlie at charliemonroe.net&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; There was a fair proposal by Brent (http://article.gmane.org/gmane.comp.lang.swift.evolution/22939 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/22939&gt;) of adding the labels to the name of the variable rather than adding it to the type. And I agree with that since it simplifies the type system.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Unfortunately, since Swift 3 is making all the code-breaking changed and Brent&#39;s counterproposal is additive, it leaves at least a year-long period of not having the parameter labels in closures.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I agree with the change, I don&#39;t agree with the timing where it doesn&#39;t have a replacement yet.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jul 7, 2016, at 9:07 AM, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; This feels like making the language a lot worse. Lots of time was recently spent bikeshedding methods names and argument labels and this proposal bans labels use in some cases and encourage people not to use them in others.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 7 Jul 2016, at 05:21, Cao Jiannan via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; func needsCallback(callback: (a: Int, b: Int) -&gt; Void) {<br>&gt;&gt;&gt;&gt;&gt;&gt;     callback(a: 1,b: 2)<br>&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; func needsCallback(callback: (Int, Int) -&gt; Void) {<br>&gt;&gt;&gt;&gt;&gt;&gt;     callback(1, 2)<br>&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Is the first one will be forbidden?<br>&gt;&gt;&gt;&gt;&gt;&gt; So you&#39;d like to keep the second one?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I do not understand why someone would want the second example. A great point of both Objective-C and Swift was enforcing parameter labels use to make the code more readable. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; What if that callback were to need width and height? How is that clear which parameter I need to pass in which order?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Considering Swift 3 is our last big chance to break code and fixing the effects of this proposal would break quite a bit of code again... this is a choice it would impact the language for a long time. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 在 2016年7月7日，11:06，Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; 写道：<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Proposal Link: https://github.com/apple/swift-evolution/blob/master/proposals/0111-remove-arg-label-type-significance.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0111-remove-arg-label-type-significance.md&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; The review of &quot;SE-0111: Remove type system significance of function argument labels &quot; ran from June 30 ... July 4, 2016. The proposal has been *accepted*:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; The community and core team agree that this proposal will lead to a simplification and clarification of the type system, as well as a more clear user model for parameter labels.  In response to community feedback, the core team is accepting the proposal with a revision to allow “purely cosmetic” parameter labels in closure types for documentation (as outlined in the alternatives section).  The core team also wants to clarify that a call to a value of closure type would not allow use of any parameter labels, some interpretations thought that “arbitrary” parameter labels could be used.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Thank you to Austin Zheng for driving this discussion forward!  I filed SR-2009 to track implementation work on this.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; -Chris Lattner<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160708/2748f9f4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e0a5152b275c43b493a94b5a6a868905?s=50"></div><header><strong>[Accepted] SE-0111: Remove type system significance of function argument labels</strong> from <string>Pyry Jahkola</string> &lt;pyry.jahkola at iki.fi&gt;<p>July  8, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; Charlie Monroe wrote:<br>&gt; <br>&gt; This hasn&#39;t occurred to me until now, but this will also elminate the following (right?):<br>&gt; <br>&gt; public typealias XUURLRequestModifier = (request: NSMutableURLRequest) -&gt; Void<br>&gt; <br>&gt; Which is really nice since when expanded by Xcode, this automatically offers you the &quot;request&quot; label for the variable so you don&#39;t have to name it.<br></p><p>As far as I understood, no it won&#39;t eliminate that use case, and quite the contrary this is exactly the cosmetic change to the original proposal that the core team wanted to add. So your code above will work, but with the change that a closure `modifier` of type `XUURLRequestModifier` is called like `modifier(req)` from now on and not `modifier(request: req)`.<br></p><p>I think it&#39;s often missed in this discussion that there are not one but *two* cases where argument labels (or the lack of them) matter in Swift, and both of cases also affect auto-completion:<br></p><p>1) The first case is when calling a closure (which most often was passed to the current function as an argument). What the accepted proposal SE-0111 did was remove argument labels from those calls in all circumstances:<br></p><p>    func modifyRequest(modifier: XUURLRequestModifier) {<br>      // This autocompletes without labels as something like:<br>      modifier(&lt;#request#&gt;)<br>      // I.e. the cosmetic labels still appear as placeholders, AFAICT.<br>    }<br></p><p>Most of the time, the code that calls a closure is written once and run multiple times with various blocks, so simple mistakes that argument types won&#39;t catch get easily catched in unit tests or when testing the application.<br></p><p>2) The second, and much more common case in application-level code IMO is when passing a closure argument to a library function:<br></p><p>    // This, I think, would autocomplete as:<br>    frob.modifyRequest { (request: NSMutableURLRequest) -&gt; Void in<br>      // I.e. now the cosmetic label becomes the default argument name.<br>    }<br></p><p>So this is where cosmetic labels matter most and nothing changed in this regard in the outcome of SE-0111.<br></p><p>* * *<br></p><p>For people longing to pass labels when *calling* closures, I think you should consider proposing the extended naming syntax idea (or some variant) where an N-argument closure can alternatively be bound to a name with N labels (see https://github.com/apple/swift-evolution/blob/master/proposals/0021-generalized-naming.md):<br></p><p>    // This closure is named `modify(request:)`<br>    let modify(request:): XUURLModifierRequest = { request in<br>      ...<br>    }<br>    modify(request: req)<br></p><p>    // The argument with label `modifier` is *locally* named `mod(req:)`.<br>    func example(modifier mod(req:): XUURLModifierRequest) {<br>      mod(req: someRequest)<br>    }<br></p><p>    example { request in ... }<br>    example(modifier: modify(request:))<br></p><p>Note that the local name `req(mod:)` wouldn&#39;t need to match the call site (except in type), and they really shouldn&#39;t either.<br></p><p>— Pyry<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160708/341beed3/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>[Accepted] SE-0111: Remove type system significance of function argument labels</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>July 11, 2016 at 11:00:00am</p></header><div class="content"><p>I don&#39;t remember any &quot;Accepted&quot;-announcement that had such a large thread ;-)<br>Afair from the original discussion, there is nothing inherently wrong with labels — it&#39;s just that they are handled in a suboptimal way.<br>Assuming that the &quot;board&quot; made an informed decision, it&#39;s probably better to accept 0111 and start a proposal for a new implementation of labeled closure parameters… maybe I&#39;m to naive, but I hope that after Swift 3 those labels will return (accompanied by tuple-splat and currying ;-)<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
