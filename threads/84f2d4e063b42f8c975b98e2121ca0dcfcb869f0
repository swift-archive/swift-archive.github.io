<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b3b33f77a1215e7338bfea30585045c?s=50"></div><header><strong>Bit arrays</strong> from <string>Daryle Walker</string> &lt;darylew at mac.com&gt;<p>July  3, 2016 at 05:00:00pm</p></header><div class="content"><p>Since objects aren&#39;t addressable by default, there wouldn&#39;t be the problems with a bit-packed Boolean collection that C++&#39;s &quot;vector&lt;bool&gt;&quot; has. Does &quot;[Bool]&quot; currently have the option of packed optimization, or would  it have to be added via a proposal?  Or does it have to be a separate type instead?<br></p><p>This also brings to mind bit fields and fixed-sized bit sets, but those might have to wait for value-based generic parameters, and that&#39;s at least until Swift 4....<br></p><p>Sent from my iPhone<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Bit arrays</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July  3, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Jul 3, 2016, at 2:42 PM, Daryle Walker via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Since objects aren&#39;t addressable by default, there wouldn&#39;t be the problems with a bit-packed Boolean collection that C++&#39;s &quot;vector&lt;bool&gt;&quot; has. Does &quot;[Bool]&quot; currently have the option of packed optimization, or would  it have to be added via a proposal?  Or does it have to be a separate type instead?<br></p><p>It has to be a separate “bitvector” type.<br></p><p>FWIW, C++’s vector&lt;bool&gt; optimization is widely considered to be a bad idea, and many people have talked about trying to remove it from the C++ standard entirely.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Bit arrays</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July  3, 2016 at 10:00:00pm</p></header><div class="content"><p>As an additive thing, probably not much chance of seeing it in Swift 3,<br>then?<br></p><p>I tried wrapping CFBitVector just the other day but found performance to be<br>rather lacking for a number of operations because CF doesn&#39;t expose the<br>underlying storage. It would be nice to have something in the stdlib and<br>I&#39;d be happy to contribute to proposal and/or implementation.<br></p><p>On Sun, Jul 3, 2016 at 17:45 Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Jul 3, 2016, at 2:42 PM, Daryle Walker via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Since objects aren&#39;t addressable by default, there wouldn&#39;t be the<br>&gt; problems with a bit-packed Boolean collection that C++&#39;s &quot;vector&lt;bool&gt;&quot;<br>&gt; has. Does &quot;[Bool]&quot; currently have the option of packed optimization, or<br>&gt; would  it have to be added via a proposal?  Or does it have to be a<br>&gt; separate type instead?<br>&gt;<br>&gt; It has to be a separate “bitvector” type.<br>&gt;<br>&gt; FWIW, C++’s vector&lt;bool&gt; optimization is widely considered to be a bad<br>&gt; idea, and many people have talked about trying to remove it from the C++<br>&gt; standard entirely.<br>&gt;<br>&gt; -Chris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160703/7f498c29/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Bit arrays</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July  3, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On Jul 3, 2016, at 3:49 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; As an additive thing, probably not much chance of seeing it in Swift 3, then?<br></p><p>Right.<br></p><p>-Chris<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/566528c7f7c28c35c0c646d415943612?s=50"></div><header><strong>Bit arrays</strong> from <string>Taras Zakharko</string> &lt;taras.zakharko at uzh.ch&gt;<p>July  4, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; On 04 Jul 2016, at 00:44, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jul 3, 2016, at 2:42 PM, Daryle Walker via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Since objects aren&#39;t addressable by default, there wouldn&#39;t be the problems with a bit-packed Boolean collection that C++&#39;s &quot;vector&lt;bool&gt;&quot; has. Does &quot;[Bool]&quot; currently have the option of packed optimization, or would  it have to be added via a proposal?  Or does it have to be a separate type instead?<br>&gt; <br>&gt; It has to be a separate “bitvector” type.<br>&gt; <br>&gt; FWIW, C++’s vector&lt;bool&gt; optimization is widely considered to be a bad idea, and many people have talked about trying to remove it from the C++ standard entirely.<br></p><p>AFAIK, the problem lies within the vector&lt;bool&gt; implementation. Other bit-packed implementations (e.g. boost:dynamic_bitset) are much more efficient. In certain cases, there are performance advantages to the bit packed representation as it is more cache-friendly. <br></p><p>That said, I don’t think that such specialised data structures should be part of the standard library. I’d leave this to a third-party solution.<br></p><p>— Taras<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
