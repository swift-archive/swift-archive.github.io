<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/89e9af7c5754673419c8fac930319700?s=50"></div><header><strong>[Pitch] Expanded type category constraints</strong> from <string>Russ Bishop</string> &lt;xenadu at gmail.com&gt;<p>October 26, 2016 at 06:00:00pm</p></header><div class="content"><p>Do we already have a proposal for expanding constraints to support categories beyond class? I am guessing this might have ABI stability concerns, or at least library resilience concerns.<br></p><p>If so and no one else has tackled it I‚Äôm happy to write up a proposal. There are only a couple that I know of:<br></p><p>valuetype<br>Only struct and enum types would satisfy this constraint.<br></p><p>valuetype(pure)<br>A struct or enum that contain no reference types at all. The only reason to add this would be allowing certain optimizations, though the way existentials work today I‚Äôm not sure if this is even possible because the calls to value witnesses need to be emitted anyway.<br></p><p>functiontype<br>A function type. This doesn‚Äôt have much use today but eventually we could expand this to support reflecting the number and type of arguments, dynamically invoking, etc.<br></p><p><br></p><p>If there aren‚Äôt any ABI or resilience concerns then we can shelve it. I created https://bugs.swift.org/browse/SR-3056 &lt;https://bugs.swift.org/browse/SR-3056&gt; to track the idea in either case.<br></p><p>Russ<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161026/877fc639/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[Pitch] Expanded type category constraints</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>October 27, 2016 at 06:00:00am</p></header><div class="content"><p>&gt; On Oct 26, 2016, at 20:56, Russ Bishop via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Do we already have a proposal for expanding constraints to support categories beyond class? I am guessing this might have ABI stability concerns, or at least library resilience concerns.<br>&gt; <br>&gt; If so and no one else has tackled it I‚Äôm happy to write up a proposal. There are only a couple that I know of:<br>&gt; <br>&gt; valuetype<br>&gt; Only struct and enum types would satisfy this constraint.<br>&gt; <br>&gt; valuetype(pure)<br>&gt; A struct or enum that contain no reference types at all. The only reason to add this would be allowing certain optimizations, though the way existentials work today I‚Äôm not sure if this is even possible because the calls to value witnesses need to be emitted anyway.<br>&gt; <br>&gt; functiontype<br>&gt; A function type. This doesn‚Äôt have much use today but eventually we could expand this to support reflecting the number and type of arguments, dynamically invoking, etc.<br>I think &quot;valuetype(pure)&quot; would make a good starting point for some stuff. It depends on what exactly &quot;pure&quot; means and whether there are other adjectives we can use.<br></p><p>There are (at least potential) optimizations whose name and exact definition are unclear to me. For example, does &quot;pure&quot; also imply that equality can be checked just by comparing the bits? Because that would exclude, say, a 1&#39;s complement integer type because they inherently have two bit patterns for 0, even though such a type would meet the definitions of &quot;pure&quot; that usually get suggested.<br></p><p>The topic of supporting a &quot;pure&quot; &lt;noun&gt; has come up a few times before, and it seems like they never go anywhere because of a) too many differing views on what &quot;pure&quot; actually means, and b) a reluctance to support additional adjectives (&quot;reallypure&quot;, or whatever) to specify which definition of &quot;pure&quot; is intended.<br></p><p>I suspect that this is purely a language barrier issue... (See what I did there? Aw yeah... üòÅ) Does anyone know of an online resource that explains graduate/phd-level computer science terms which are still under active research?<br></p><p><br>&gt; If there aren‚Äôt any ABI or resilience concerns then we can shelve it. I created https://bugs.swift.org/browse/SR-3056 to track the idea in either case.<br>I keep losing track of what exactly constitutes &quot;ABI stability and resilience&quot;. I&#39;m pretty sure someone posted some guidelines on the matter, but I forgot to bookmark it.<br></p><p>- Dave Sweeris, who swears he&#39;s really not trying to drag every thread off-topic<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161027/d9a377b4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Pitch] Expanded type category constraints</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>October 28, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Oct 27, 2016, at 4:15 AM, David Sweeris via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I keep losing track of what exactly constitutes &quot;ABI stability and resilience&quot;<br></p><p>ABI stability can generally be thought of as &quot;anything that affects how APIs **that exist today** are represented in machine code&quot;. That includes features which will lead to binary-incompatible standard library redesigns, which is why we&#39;re working on things like conditional conformance.<br></p><p>I don&#39;t think a feature like this would qualify unless there are standard library interfaces we would redesign to use the new constraints.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
