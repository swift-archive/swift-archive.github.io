<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bba72a059f366cef32eb6ee35f884b6c?s=50"></div><header><strong>Suggested DateInterval API improvement</strong> from <string>Dave Lyon</string> &lt;dave at davelyon.net&gt;<p>June 17, 2016 at 02:00:00pm</p></header><div class="content"><p>In attempting to use the new DateInterval value type to improve some<br>existing code, I ran in to an issue where DateIntervals cannot be &quot;reverse&quot;<br>intervals, which is contrary to how TimeInterval works, and somewhat<br>confusing.<br></p><p>I would propose that the DateInterval value type should be able to be<br>properly initialized with any TimeInterval, as a reference date and time<br>interval are all that is actually required in order to construct a<br>DateInterval properly.<br></p><p>The simplest solution might be to change the `startDate:interval:`<br>initializer to one allows for negative time intervals, such as:<br></p><p>public init(withInterval: TimeInterval, fromDate: Date) {<br>    self.start = Date(timeInterval: interval, since: fromDate)<br>    self.duration = abs(interval)<br>}<br></p><p>I believe in general it is preferable to avoid preconditions that require a<br>subset of a given input type (in this case, that TimeInterval be positive<br>or 0), and would prefer to see an API where invalid values are properly<br>converted from the given input to the documented output. E.g. the old “Be<br>generous with input, strict with output” idea.<br></p><p>I hope this is the right place to bring this up, but if not I’m happy to<br>move the conversation to Radar or elsewhere.<br></p><p>Thanks!<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160617/1a31240c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Suggested DateInterval API improvement</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>June 20, 2016 at 04:00:00pm</p></header><div class="content"><p>Hi Dave,<br></p><p>We had some extensive discussion about this ourselves, but we couldn’t come up with a compelling use case for a negative time interval. Can you describe how you wanted to use it?<br></p><p>- Tony<br></p><p>&gt; On Jun 17, 2016, at 2:01 PM, Dave Lyon via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; In attempting to use the new DateInterval value type to improve some existing code, I ran in to an issue where DateIntervals cannot be &quot;reverse&quot; intervals, which is contrary to how TimeInterval works, and somewhat confusing.<br>&gt; <br>&gt; I would propose that the DateInterval value type should be able to be properly initialized with any TimeInterval, as a reference date and time interval are all that is actually required in order to construct a DateInterval properly.<br>&gt; <br>&gt; The simplest solution might be to change the `startDate:interval:` initializer to one allows for negative time intervals, such as:<br>&gt; <br>&gt; public init(withInterval: TimeInterval, fromDate: Date) { <br>&gt;     self.start = Date(timeInterval: interval, since: fromDate)<br>&gt;     self.duration = abs(interval)<br>&gt; }<br>&gt; <br>&gt; I believe in general it is preferable to avoid preconditions that require a subset of a given input type (in this case, that TimeInterval be positive or 0), and would prefer to see an API where invalid values are properly converted from the given input to the documented output. E.g. the old “Be generous with input, strict with output” idea.<br>&gt; <br>&gt; I hope this is the right place to bring this up, but if not I’m happy to move the conversation to Radar or elsewhere.<br>&gt; <br>&gt; Thanks!<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160620/d6e73d0d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/caa7226ca750e974668243476ffbafd5?s=50"></div><header><strong>Suggested DateInterval API improvement</strong> from <string>Greg Titus</string> &lt;greg at omnigroup.com&gt;<p>June 20, 2016 at 09:00:00pm</p></header><div class="content"><p>One domain where this happens is project planning back from a fixed end date. The most well-known of these would be rocket launches: “T minus 10 seconds” is exactly a negative time interval from an end date.<br></p><p>That being said, it’s a fairly uncommon use case and I wouldn’t change the API to support it on an equivalent basis with normal forward date intervals. A separate specific initializer for it might be useful, though.<br></p><p>	- Greg<br></p><p>&gt; On Jun 20, 2016, at 4:12 PM, Tony Parker via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Dave,<br>&gt; <br>&gt; We had some extensive discussion about this ourselves, but we couldn’t come up with a compelling use case for a negative time interval. Can you describe how you wanted to use it?<br>&gt; <br>&gt; - Tony<br>&gt; <br>&gt;&gt; On Jun 17, 2016, at 2:01 PM, Dave Lyon via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; In attempting to use the new DateInterval value type to improve some existing code, I ran in to an issue where DateIntervals cannot be &quot;reverse&quot; intervals, which is contrary to how TimeInterval works, and somewhat confusing.<br>&gt;&gt; <br>&gt;&gt; I would propose that the DateInterval value type should be able to be properly initialized with any TimeInterval, as a reference date and time interval are all that is actually required in order to construct a DateInterval properly.<br>&gt;&gt; <br>&gt;&gt; The simplest solution might be to change the `startDate:interval:` initializer to one allows for negative time intervals, such as:<br>&gt;&gt; <br>&gt;&gt; public init(withInterval: TimeInterval, fromDate: Date) { <br>&gt;&gt;     self.start = Date(timeInterval: interval, since: fromDate)<br>&gt;&gt;     self.duration = abs(interval)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; I believe in general it is preferable to avoid preconditions that require a subset of a given input type (in this case, that TimeInterval be positive or 0), and would prefer to see an API where invalid values are properly converted from the given input to the documented output. E.g. the old “Be generous with input, strict with output” idea.<br>&gt;&gt; <br>&gt;&gt; I hope this is the right place to bring this up, but if not I’m happy to move the conversation to Radar or elsewhere.<br>&gt;&gt; <br>&gt;&gt; Thanks!<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160620/67756cc5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Suggested DateInterval API improvement</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>June 21, 2016 at 09:00:00am</p></header><div class="content"><p>Hi Greg,<br></p><p>&gt; On Jun 20, 2016, at 9:04 PM, Greg Titus &lt;greg at omnigroup.com&gt; wrote:<br>&gt; <br>&gt; One domain where this happens is project planning back from a fixed end date. The most well-known of these would be rocket launches: “T minus 10 seconds” is exactly a negative time interval from an end date.<br>&gt; <br></p><p>That makes sense.<br></p><p>Let’s say we added negative interval support to the type. I could see it working in two ways:<br></p><p>1. You initialize with a start and negative duration. After this, the ‘end’ property becomes what you used for ‘start’ and ‘start’ is adjusted according to the interval.<br>2. We keep the start date to always be what you passed in but allow a negative value for timeInterval and allow for end to be &lt; start.<br></p><p>Which of these would be the least confusing?<br></p><p>- Tony<br></p><p>&gt; That being said, it’s a fairly uncommon use case and I wouldn’t change the API to support it on an equivalent basis with normal forward date intervals. A separate specific initializer for it might be useful, though.<br>&gt; <br>&gt; 	- Greg<br>&gt; <br>&gt;&gt; On Jun 20, 2016, at 4:12 PM, Tony Parker via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi Dave,<br>&gt;&gt; <br>&gt;&gt; We had some extensive discussion about this ourselves, but we couldn’t come up with a compelling use case for a negative time interval. Can you describe how you wanted to use it?<br>&gt;&gt; <br>&gt;&gt; - Tony<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 17, 2016, at 2:01 PM, Dave Lyon via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In attempting to use the new DateInterval value type to improve some existing code, I ran in to an issue where DateIntervals cannot be &quot;reverse&quot; intervals, which is contrary to how TimeInterval works, and somewhat confusing.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I would propose that the DateInterval value type should be able to be properly initialized with any TimeInterval, as a reference date and time interval are all that is actually required in order to construct a DateInterval properly.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The simplest solution might be to change the `startDate:interval:` initializer to one allows for negative time intervals, such as:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; public init(withInterval: TimeInterval, fromDate: Date) { <br>&gt;&gt;&gt;     self.start = Date(timeInterval: interval, since: fromDate)<br>&gt;&gt;&gt;     self.duration = abs(interval)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I believe in general it is preferable to avoid preconditions that require a subset of a given input type (in this case, that TimeInterval be positive or 0), and would prefer to see an API where invalid values are properly converted from the given input to the documented output. E.g. the old “Be generous with input, strict with output” idea.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I hope this is the right place to bring this up, but if not I’m happy to move the conversation to Radar or elsewhere.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160621/9cdffaf0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/caa7226ca750e974668243476ffbafd5?s=50"></div><header><strong>Suggested DateInterval API improvement</strong> from <string>Greg Titus</string> &lt;greg at omnigroup.com&gt;<p>June 21, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jun 21, 2016, at 9:44 AM, Tony Parker &lt;anthony.parker at apple.com&gt; wrote:<br>&gt; <br>&gt; Hi Greg,<br>&gt; <br>&gt;&gt; On Jun 20, 2016, at 9:04 PM, Greg Titus &lt;greg at omnigroup.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; One domain where this happens is project planning back from a fixed end date. The most well-known of these would be rocket launches: “T minus 10 seconds” is exactly a negative time interval from an end date.<br>&gt;&gt; <br>&gt; <br>&gt; That makes sense.<br>&gt; <br>&gt; Let’s say we added negative interval support to the type. I could see it working in two ways:<br>&gt; <br>&gt; 1. You initialize with a start and negative duration. After this, the ‘end’ property becomes what you used for ‘start’ and ‘start’ is adjusted according to the interval.<br>&gt; 2. We keep the start date to always be what you passed in but allow a negative value for timeInterval and allow for end to be &lt; start.<br>&gt; <br>&gt; Which of these would be the least confusing?<br></p><p>I think option #1 is the way to go. Subverting the English meaning of ‘start’ and ‘end’ would cause a lot of confusion. In actual use I think it would be fairly common to also need to keep track of which date was the ‘fixed’ date passed into the initializer, but that can always be done by the user of the framework by wrapping the DateInterval. e.g.:<br></p><p>enum FixedDirection {<br>    case FromStart<br>    case FromEnd<br>}<br>struct MyDateInterval {<br>    let interval: DateInterval<br>    let direction: FixedDirection<br>}<br></p><p>The additional info beyond the DateInterval itself likely varies by the use case, so it probably isn’t necessary to add this to DateInterval itself.<br></p><p>Thanks!<br>	- Greg<br></p><p>&gt; - Tony<br>&gt; <br>&gt;&gt; That being said, it’s a fairly uncommon use case and I wouldn’t change the API to support it on an equivalent basis with normal forward date intervals. A separate specific initializer for it might be useful, though.<br>&gt;&gt; <br>&gt;&gt; 	- Greg<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 20, 2016, at 4:12 PM, Tony Parker via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi Dave,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We had some extensive discussion about this ourselves, but we couldn’t come up with a compelling use case for a negative time interval. Can you describe how you wanted to use it?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 17, 2016, at 2:01 PM, Dave Lyon via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; In attempting to use the new DateInterval value type to improve some existing code, I ran in to an issue where DateIntervals cannot be &quot;reverse&quot; intervals, which is contrary to how TimeInterval works, and somewhat confusing.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I would propose that the DateInterval value type should be able to be properly initialized with any TimeInterval, as a reference date and time interval are all that is actually required in order to construct a DateInterval properly.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The simplest solution might be to change the `startDate:interval:` initializer to one allows for negative time intervals, such as:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; public init(withInterval: TimeInterval, fromDate: Date) { <br>&gt;&gt;&gt;&gt;     self.start = Date(timeInterval: interval, since: fromDate)<br>&gt;&gt;&gt;&gt;     self.duration = abs(interval)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I believe in general it is preferable to avoid preconditions that require a subset of a given input type (in this case, that TimeInterval be positive or 0), and would prefer to see an API where invalid values are properly converted from the given input to the documented output. E.g. the old “Be generous with input, strict with output” idea.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I hope this is the right place to bring this up, but if not I’m happy to move the conversation to Radar or elsewhere.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks!<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt;&gt;&gt; swift-corelibs-dev at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt;&gt; swift-corelibs-dev at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt;&gt; <br>&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Suggested DateInterval API improvement</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>June 21, 2016 at 11:00:00pm</p></header><div class="content"><p>I vote for (2). Thats what I would have expected. `start` changing from under you is weird.<br></p><p>&gt; On 21 Jun 2016, at 18:44, Tony Parker via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Greg,<br>&gt; <br>&gt;&gt; On Jun 20, 2016, at 9:04 PM, Greg Titus &lt;greg at omnigroup.com &lt;mailto:greg at omnigroup.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; One domain where this happens is project planning back from a fixed end date. The most well-known of these would be rocket launches: “T minus 10 seconds” is exactly a negative time interval from an end date.<br>&gt;&gt; <br>&gt; <br>&gt; That makes sense.<br>&gt; <br>&gt; Let’s say we added negative interval support to the type. I could see it working in two ways:<br>&gt; <br>&gt; 1. You initialize with a start and negative duration. After this, the ‘end’ property becomes what you used for ‘start’ and ‘start’ is adjusted according to the interval.<br>&gt; 2. We keep the start date to always be what you passed in but allow a negative value for timeInterval and allow for end to be &lt; start.<br>&gt; <br>&gt; Which of these would be the least confusing?<br>&gt; <br>&gt; - Tony<br>&gt; <br>&gt;&gt; That being said, it’s a fairly uncommon use case and I wouldn’t change the API to support it on an equivalent basis with normal forward date intervals. A separate specific initializer for it might be useful, though.<br>&gt;&gt; <br>&gt;&gt; 	- Greg<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 20, 2016, at 4:12 PM, Tony Parker via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi Dave,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We had some extensive discussion about this ourselves, but we couldn’t come up with a compelling use case for a negative time interval. Can you describe how you wanted to use it?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 17, 2016, at 2:01 PM, Dave Lyon via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; In attempting to use the new DateInterval value type to improve some existing code, I ran in to an issue where DateIntervals cannot be &quot;reverse&quot; intervals, which is contrary to how TimeInterval works, and somewhat confusing.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I would propose that the DateInterval value type should be able to be properly initialized with any TimeInterval, as a reference date and time interval are all that is actually required in order to construct a DateInterval properly.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The simplest solution might be to change the `startDate:interval:` initializer to one allows for negative time intervals, such as:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; public init(withInterval: TimeInterval, fromDate: Date) { <br>&gt;&gt;&gt;&gt;     self.start = Date(timeInterval: interval, since: fromDate)<br>&gt;&gt;&gt;&gt;     self.duration = abs(interval)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I believe in general it is preferable to avoid preconditions that require a subset of a given input type (in this case, that TimeInterval be positive or 0), and would prefer to see an API where invalid values are properly converted from the given input to the documented output. E.g. the old “Be generous with input, strict with output” idea.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I hope this is the right place to bring this up, but if not I’m happy to move the conversation to Radar or elsewhere.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks!<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt;&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt;<br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160621/de30727c/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
