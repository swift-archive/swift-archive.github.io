<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>UnsafeMutablePointer on the stack?</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>October  2, 2016 at 05:00:00pm</p></header><div class="content"><p>on Sun Oct 02 2016, Mike Ferenduros &lt;swift-users-AT-swift.org&gt; wrote:<br></p><p>&gt; You can use a local like this:<br>&gt;     var x: UInt32 = 0<br>&gt;     withUnsafePointer(to: x) { randomWordPT in<br>&gt;         //your existing code here<br>&gt;     }<br>&gt;<br>&gt; Or I&#39;m not sure if small arrays go on the heap, but<br></p><p>They do.<br></p><p>&gt;     var bytes: [UInt8] = [0,0,0,0]<br>&gt;     _ = SecRandomCopyBytes(kSecRandomDefault, bytes.count, &amp;bytes)<br>&gt;     return bytes.reduce(0) { ($0 &lt;&lt; 8) | UInt32($1) }<br>&gt;<br>&gt; reads a little nicer.<br>&gt;<br>&gt; Personally I would be surprised if the malloc caused an actual measurable<br>&gt; performance hit tbh.<br>&gt;<br>&gt; On Mon, 3 Oct 2016 at 02:15 Jean-Denis Muys via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Hi,<br>&gt;&gt;<br>&gt;&gt; I have some issues using the new raw memory API. For instance, let&#39;s<br>&gt;&gt; suppose I want to call the `SecRandomCopyBytes` API to generate a<br>&gt;&gt; cryptographically secure random 32-bit number. The difficulty is its 3rd<br>&gt;&gt; argument, which is declared as UnsafeMutablePointer&lt;UInt8&gt;. Here is a<br>&gt;&gt; function that does that:<br>&gt;&gt;<br>&gt;&gt; func entropicRandom() -&gt; UInt32 {<br>&gt;&gt;<br>&gt;&gt;     let randomWordPT = UnsafeMutablePointer&lt;UInt32&gt;.allocate(capacity: 1)<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     let _ = randomWordPT.withMemoryRebound(to: UInt8.self, capacity: 4) {<br>&gt;&gt; (p: UnsafeMutablePointer&lt;UInt8&gt;) -&gt; Int32 in<br>&gt;&gt;<br>&gt;&gt;         let result = SecRandomCopyBytes(kSecRandomDefault, MemoryLayout&lt;<br>&gt;&gt; UInt32&gt;.size, p)<br>&gt;&gt;<br>&gt;&gt;         return result<br>&gt;&gt;<br>&gt;&gt;     }<br>&gt;&gt;<br>&gt;&gt;     let randomInt32 = randomWordPT[0]<br>&gt;&gt;<br>&gt;&gt;     randomWordPT.deallocate(capacity: 1)<br>&gt;&gt;<br>&gt;&gt;     return randomInt32<br>&gt;&gt;<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; apparently, the calls to allocate and then deallocate suggest that there<br>&gt;&gt; is some heap allocation happening behind the scene here, possibly<br>&gt;&gt; malloc/free. Is that correct?<br>&gt;&gt;<br>&gt;&gt; If so, this is quite wasteful. Is there a way to use a local variable on<br>&gt;&gt; the stack to achieve the same result?<br>&gt;&gt;<br>&gt;&gt; Thanks,<br>&gt;&gt;<br>&gt;&gt; Jean-Denis<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
