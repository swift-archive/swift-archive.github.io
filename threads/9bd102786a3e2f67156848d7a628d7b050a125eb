<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>What is &quot;binding&quot; memory?</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>November  2, 2016 at 12:00:00pm</p></header><div class="content"><p>on Tue Nov 01 2016, Andrew Trick &lt;swift-users-AT-swift.org&gt; wrote:<br></p><p>&gt;&gt; On Nov 1, 2016, at 11:55 AM, Manfred Schubert via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The &quot;UnsafeRawPointer Migration&quot; guide talks about &quot;binding memory<br>&gt;&gt; to a type“ as if that was a well known term. I have never heard of<br>&gt;&gt; it yet though, and googling it returns no relevant results. I do not<br>&gt;<br>&gt;&gt; understand what binding memory is supposed to do.<br>&gt;&gt; <br>&gt;&gt; The migration guide says &quot;Binding uninitialized memory to a type<br>&gt;&gt; prepares the memory to store values of that type“, but clearly raw<br>&gt;&gt; memory does not need to be prepared (and cannot be) to hold any<br>&gt;&gt; arbitrary type and value.<br>&gt;&gt; <br>&gt;&gt; So what is this for, what does it actually do, and to whom is it done (the raw pointer, or the<br>&gt; typed pointer which is returned, or the raw memory)?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Manfred<br>&gt;<br>&gt; Hi Manfred,<br>&gt;<br>&gt; At the top of the migration guide is a link to the memory model explanation:<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md#memory-model-explanation<br>&gt;<br>&gt; &quot;A memory location&#39;s bound type is an abstract, dynamic property of the memory used to formalize<br>&gt; type safety.”<br>&gt;<br>&gt; I’m not sure I like the “prepares the memory” language myself. Binding<br>&gt; memory communicates to the compiler that the memory locations are safe<br>&gt; for typed access. Nothing happens at runtime--until someone writes a<br>&gt; type safety sanitizer. <br></p><p>Well, that&#39;s a slight overstatement IMO.  Sanitizers aside, the main<br>reason for these binding operations is that if you leave them out,<br>something different *will* happen at runtime... something that will make<br>your code do the wrong thing.<br></p><p>What I would say is that binding the memory has no immediate runtime<br>cost... but it&#39;s absolutely required if you want your program to behave<br>(and sometimes behaving correctly is a little slower than misbehaving).<br></p><p>&gt; It affects the abstract state of the memory location, independent of<br>&gt; the pointer variable used to access that memory. Binding memory<br>&gt; returns a typed pointer for convenience and clarity, but there’s<br>&gt; nothing special about that particular pointer value.<br>&gt;<br>&gt; Initialized memory is always bound to some type. A rawpointer can be<br>&gt; used to access that memory without knowing its bound type.<br>&gt;<br>&gt; -Andy<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6fe87aed0d64cdbc46378bf7596a7553?s=50"></div><header><strong>What is &quot;binding&quot; memory?</strong> from <string>Andrew Trick</string> &lt;atrick at apple.com&gt;<p>November  2, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Nov 2, 2016, at 12:58 PM, Dave Abrahams via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; At the top of the migration guide is a link to the memory model explanation:<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md#memory-model-explanation<br>&gt;&gt; <br>&gt;&gt; &quot;A memory location&#39;s bound type is an abstract, dynamic property of the memory used to formalize<br>&gt;&gt; type safety.”<br>&gt;&gt; <br>&gt;&gt; I’m not sure I like the “prepares the memory” language myself. Binding<br>&gt;&gt; memory communicates to the compiler that the memory locations are safe<br>&gt;&gt; for typed access. Nothing happens at runtime--until someone writes a<br>&gt;&gt; type safety sanitizer. <br>&gt; <br>&gt; Well, that&#39;s a slight overstatement IMO.  Sanitizers aside, the main<br>&gt; reason for these binding operations is that if you leave them out,<br>&gt; something different *will* happen at runtime... something that will make<br>&gt; your code do the wrong thing.<br>&gt; <br>&gt; What I would say is that binding the memory has no immediate runtime<br>&gt; cost... but it&#39;s absolutely required if you want your program to behave<br>&gt; (and sometimes behaving correctly is a little slower than misbehaving).<br></p><p><br>Good clarification. I really did not mean to imply that binding memory to a type has no effect on runtime behavior. Taken out of context, “nothing happens at runtime” is quite an understatement.<br></p><p>The original poster seemed to have the impression that the operation of binding memory itself might affect program state, independent of any compiler optimization. I want to make it clear that a call to bindMemory(to:capacity:) has no observable runtime side effects at the point of the call. But I need to throw in an exemption for future sanitizers.<br></p><p>-Andy<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161102/22324f98/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>What is &quot;binding&quot; memory?</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>November  2, 2016 at 03:00:00pm</p></header><div class="content"><p>on Wed Nov 02 2016, Andrew Trick &lt;atrick-AT-apple.com&gt; wrote:<br></p><p>&gt;&gt; On Nov 2, 2016, at 12:58 PM, Dave Abrahams via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; At the top of the migration guide is a link to the memory model explanation:<br>&gt;&gt;&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md#memory-model-explanation<br>&gt;&gt;&gt; <br>&gt;<br>&gt;&gt;&gt; &quot;A memory location&#39;s bound type is an abstract, dynamic property of the memory used to formalize<br>&gt;&gt;&gt; type safety.”<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’m not sure I like the “prepares the memory” language myself. Binding<br>&gt;&gt;&gt; memory communicates to the compiler that the memory locations are safe<br>&gt;&gt;&gt; for typed access. Nothing happens at runtime--until someone writes a<br>&gt;&gt;&gt; type safety sanitizer. <br>&gt;&gt; <br>&gt;&gt; Well, that&#39;s a slight overstatement IMO.  Sanitizers aside, the main<br>&gt;&gt; reason for these binding operations is that if you leave them out,<br>&gt;&gt; something different *will* happen at runtime... something that will make<br>&gt;&gt; your code do the wrong thing.<br>&gt;&gt; <br>&gt;&gt; What I would say is that binding the memory has no immediate runtime<br>&gt;&gt; cost... but it&#39;s absolutely required if you want your program to behave<br>&gt;&gt; (and sometimes behaving correctly is a little slower than misbehaving).<br>&gt;<br>&gt; Good clarification. I really did not mean to imply that binding memory<br>&gt; to a type has no effect on runtime behavior. Taken out of context,<br>&gt; “nothing happens at runtime” is quite an understatement.<br>&gt;<br>&gt; The original poster seemed to have the impression that the operation<br>&gt; of binding memory itself might affect program state, <br></p><p>Formally speaking, it does!<br></p><p>&gt; independent of any compiler optimization. I want to make it clear that<br>&gt; a call to bindMemory(to:capacity:) has no observable runtime side<br>&gt; effects at the point of the call. <br></p><p>Only because you can&#39;t observe what memory is bound to.<br></p><p>&gt; But I need to throw in an exemption for future sanitizers.<br></p><p>I don&#39;t think you do; sanitizer actions are allowed under undefined<br>behavior.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6fe87aed0d64cdbc46378bf7596a7553?s=50"></div><header><strong>What is &quot;binding&quot; memory?</strong> from <string>Andrew Trick</string> &lt;atrick at apple.com&gt;<p>November  2, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Nov 2, 2016, at 3:50 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; The original poster seemed to have the impression that the operation<br>&gt;&gt; of binding memory itself might affect program state, <br>&gt; <br>&gt; Formally speaking, it does!<br></p><p>Oh boy. I keep failing at this. How does one formally distinguish between semantic state and actual state?<br>-Andy<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161102/ebfccf78/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>What is &quot;binding&quot; memory?</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>November  3, 2016 at 03:00:00pm</p></header><div class="content"><p>on Wed Nov 02 2016, Andrew Trick &lt;atrick-AT-apple.com&gt; wrote:<br></p><p>&gt;&gt; On Nov 2, 2016, at 3:50 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; The original poster seemed to have the impression that the operation<br>&gt;&gt;&gt; of binding memory itself might affect program state, <br>&gt;&gt; <br>&gt;&gt; Formally speaking, it does!<br>&gt;<br>&gt; Oh boy. I keep failing at this. How does one formally distinguish<br>&gt; between semantic state and actual state?<br></p><p>That&#39;s the point; you don&#39;t. :-)<br></p><p>-- <br>-Dave<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>What is &quot;binding&quot; memory?</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>November  2, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Nov 2, 2016, at 15:50, Dave Abrahams via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Wed Nov 02 2016, Andrew Trick &lt;atrick-AT-apple.com &lt;http://atrick-at-apple.com/&gt;&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On Nov 2, 2016, at 12:58 PM, Dave Abrahams via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; At the top of the migration guide is a link to the memory model explanation:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md#memory-model-explanation<br>&gt;&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt;&gt; &quot;A memory location&#39;s bound type is an abstract, dynamic property of the memory used to formalize<br>&gt;&gt;&gt;&gt; type safety.”<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’m not sure I like the “prepares the memory” language myself. Binding<br>&gt;&gt;&gt;&gt; memory communicates to the compiler that the memory locations are safe<br>&gt;&gt;&gt;&gt; for typed access. Nothing happens at runtime--until someone writes a<br>&gt;&gt;&gt;&gt; type safety sanitizer. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Well, that&#39;s a slight overstatement IMO.  Sanitizers aside, the main<br>&gt;&gt;&gt; reason for these binding operations is that if you leave them out,<br>&gt;&gt;&gt; something different *will* happen at runtime... something that will make<br>&gt;&gt;&gt; your code do the wrong thing.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What I would say is that binding the memory has no immediate runtime<br>&gt;&gt;&gt; cost... but it&#39;s absolutely required if you want your program to behave<br>&gt;&gt;&gt; (and sometimes behaving correctly is a little slower than misbehaving).<br>&gt;&gt; <br>&gt;&gt; Good clarification. I really did not mean to imply that binding memory<br>&gt;&gt; to a type has no effect on runtime behavior. Taken out of context,<br>&gt;&gt; “nothing happens at runtime” is quite an understatement.<br>&gt;&gt; <br>&gt;&gt; The original poster seemed to have the impression that the operation<br>&gt;&gt; of binding memory itself might affect program state, <br>&gt; <br>&gt; Formally speaking, it does!<br>&gt; <br>&gt;&gt; independent of any compiler optimization. I want to make it clear that<br>&gt;&gt; a call to bindMemory(to:capacity:) has no observable runtime side<br>&gt;&gt; effects at the point of the call. <br>&gt; <br>&gt; Only because you can&#39;t observe what memory is bound to.<br>&gt; <br>&gt;&gt; But I need to throw in an exemption for future sanitizers.<br>&gt; <br>&gt; I don&#39;t think you do; sanitizer actions are allowed under undefined<br>&gt; behavior.<br></p><p>I think the difference here is that sanitizers affect program characteristics even for correct programs. Introducing a sanitizer can reduce optimization opportunities, changing an algorithm’s complexity. And of course, there’s always a bit of bookkeeping code being executed that wouldn’t be there otherwise.<br></p><p>Jordan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161102/5ef96cbd/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
