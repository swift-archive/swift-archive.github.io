<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[RFC] #Self</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>May 11, 2016 at 12:00:00pm</p></header><div class="content"><p>Am 10. Mai 2016 um 20:11 schrieb Matthew Johnson &lt;matthew at anandabits.com&gt;:<br></p><p><br></p><p><br>Sent from my iPad<br></p><p><br>On May 10, 2016, at 12:59 PM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br></p><p><br></p><p><br>Am 10.05.2016 um 18:41 schrieb Timothy Wood via swift-evolution &lt;swift-evolution at swift.org&gt;:<br></p><p><br></p><p><br>On May 10, 2016, at 9:28 AM, Matthew Johnson &lt;matthew at anandabits.com&gt; wrote:<br>Yep, understood. It&#39;s perfectly clear to me but I understand why Chris is concerned about it having potential to confuse people. It is a pretty subtle difference especially since Self and #Self are the same in some contexts. In any case, I would be content to live with any name that wins out.<br></p><p><br>Ah, OK -- it sounds like we just differ on what would be least confusing =)<br></p><p><br>The other proposed name of #StaticSelf, seems like it would be very clear (if a bit redundant and longer than needed, once you’ve come across it once or twice). I could certainly live with #StaticSelf.<br></p><p><br>In that case StaticSelf would be sufficient IMHO. The # should only be needed to distinguish between Self and #Self.<br></p><p><br>So:<br></p><p><br>Self, #Self<br>Self, StaticSelf<br>DynamicSelf, StaticSelf<br></p><p><br></p><p><br>As far as I understand #Self should be the type of the implementor (ImplementorSelf?) or conforming type (ConformingSelf?).<br>How would this work with default methods?<br></p><p><br>protocol A {<br>func f() -&gt; #Self<br>init()<br>}<br></p><p><br>extension A {<br>func f() -&gt; #Self { return init() } // what type has #Self here?<br>}<br></p><p>The conforming type. C in your example. If we have &#39;class D: C&#39; and it overrides &#39;f&#39; the override would have a return type of C, not D. The returned instance could be of type D since it is a subtype of C. We could also explore allowing overrides to have a covariant return type, it just wouldn&#39;t be visible when accessed via the protocol through a generic constraint or an existential (those would only guarantee C, the type that declared the conformance.<br></p><p><br>Thanks, that makes sense.<br>So within a default method like in extension A above the (concrete) type of #Self is still unknown and I only know that it will conform to A. That&#39;s fine. As soon as a non protocol type like a class conforms to the protocol #Self gets fixed to that type and because we have no multiple inheritance for non protocols there is no possibility to create conflicts.<br></p><p><br></p><p>-Thorsten<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160511/33fe15e1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[RFC] #Self</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 11, 2016 at 08:00:00am</p></header><div class="content"><p>Sent from my iPad<br></p><p>&gt; On May 11, 2016, at 7:33 AM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; Am 10. Mai 2016 um 20:11 schrieb Matthew Johnson &lt;matthew at anandabits.com&gt;:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Sent from my iPad<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 10, 2016, at 12:59 PM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Am 10.05.2016 um 18:41 schrieb Timothy Wood via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On May 10, 2016, at 9:28 AM, Matthew Johnson &lt;matthew at anandabits.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; Yep, understood. It&#39;s perfectly clear to me but I understand why Chris is concerned about it having potential to confuse people. It is a pretty subtle difference especially since Self and #Self are the same in some contexts. In any case, I would be content to live with any name that wins out.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Ah, OK -- it sounds like we just differ on what would be least confusing =)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The other proposed name of #StaticSelf, seems like it would be very clear (if a bit redundant and longer than needed, once you’ve come across it once or twice). I could certainly live with #StaticSelf.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In that case StaticSelf would be sufficient IMHO. The # should only be needed to distinguish between Self and #Self.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; So:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Self, #Self<br>&gt;&gt;&gt; Self, StaticSelf<br>&gt;&gt;&gt; DynamicSelf, StaticSelf<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As far as I understand #Self should be the type of the implementor (ImplementorSelf?) or conforming type (ConformingSelf?).<br>&gt;&gt;&gt; How would this work with default methods?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; protocol A {<br>&gt;&gt;&gt; func f() -&gt; #Self<br>&gt;&gt;&gt; init()<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; extension A {<br>&gt;&gt;&gt; func f() -&gt; #Self { return init() } // what type has #Self here?<br>&gt;&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; The conforming type. C in your example. If we have &#39;class D: C&#39; and it overrides &#39;f&#39; the override would have a return type of C, not D. The returned instance could be of type D since it is a subtype of C. We could also explore allowing overrides to have a covariant return type, it just wouldn&#39;t be visible when accessed via the protocol through a generic constraint or an existential (those would only guarantee C, the type that declared the conformance.<br>&gt; <br>&gt; <br>&gt; Thanks, that makes sense.<br>&gt; So within a default method like in extension A above the (concrete) type of #Self is still unknown and I only know that it will conform to A. That&#39;s fine. As soon as a non protocol type like a class conforms to the protocol #Self gets fixed to that type and because we have no multiple inheritance for non protocols there is no possibility to create conflicts.<br></p><p>Yep, it&#39;s a pretty subtle distinction from Self but will be useful to have.  <br></p><p>&gt; <br>&gt; -Thorsten<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
