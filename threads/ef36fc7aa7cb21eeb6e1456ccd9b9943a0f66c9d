<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fd420b6be1358fbbd155ad393453d8a5?s=50"></div><header><strong>SE-0025: Scoped Access Level, next steps</strong> from <string>David Ungar</string> &lt;ungar at icloud.com&gt;<p>March 15, 2016 at 11:00:00am</p></header><div class="content"><p>First post to Swift evolution, please bear with me: the following is a bit wild, but something to think about for the future, maybe.<br></p><p>Swift had three, and will now have four levels of scoping. In the future, might there be five? A scope that spans a limited set of modules, or a scope that only applies within a region of a declaration?<br>Maybe scope modifiers should be something like: scope(all), scope(module), scope(file), scope(declaration). <br>In other words, something that says it is a scope declaration, followed by a noun that names what the scope is. If additional scopes are needed in the future, it might be easier to add them. For instance, if there’s a way to name a collection of modules, there could be a scope(module-collection-name) modifier.<br></p><p>Hope you enjoy this thought,<br></p><p>- David<br></p><p><br>&gt; Per Doug’s email, the core team agrees we should make a change here, but would like some bikeshedding to happen on the replacement name for private.<br>&gt; <br>&gt; To summarize the place we’d like to end up:<br>&gt; <br>&gt; - “public” -&gt;symbol visible outside the current module.<br>&gt; - “internal” -&gt;symbol visible within the current module.<br>&gt; - unknown -&gt;symbol visible within the current file.<br>&gt; - “private” -&gt;symbol visible within the current declaration (class, extension, etc).<br>&gt; <br>&gt; The rationale here is that this aligns Swift with common art seen in other languages, and that many people using private today don’t *want* visibility out of their current declaration. It also encourages “extension oriented programming”, at least it will when some of the other restrictions on extensions are lifted. We discussed dropping the third one entirely, but think it *is* a useful and important level of access control, and when/if we ever get the ability to write unit tests inside of the file that defines the functionality, they will be a nicer solution to @testable.<br>&gt; <br>&gt; The thing we need to know is what the spelling should be for the third one. Off hand, perhaps:<br>&gt; <br>&gt; fileprivate<br>&gt; private(file)<br>&gt; internal(file)<br>&gt; fileaccessible<br>&gt; etc<br>&gt; <br>&gt; Some other thoughts on the choice:<br>&gt; - this will be a declaration modifier, so it will not “burn” a keyword.<br>&gt; - if will be a uniquely Swift thing, so there is virtue in it being a googlable keyword.<br>&gt; <br>&gt; Thoughts appreciated.<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt; <br>&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
