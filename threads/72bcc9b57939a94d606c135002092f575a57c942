<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Pitch] Align label behavior for subscripts</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>September 20, 2016 at 12:00:00pm</p></header><div class="content"><p>This is probably something additional and it might already have been discussed here somewhere, I apologize if I missed that talk.<br></p><p>The rule for parameter labels on functions was fixed in Swift, but now it kinda feels odd to have a different pair of rules for subscripts (at least it does feel odd to me).<br></p><p>// Is fine when the names are different<br>subscript(externalName internalName: ParamType) -&gt; ElementType {<br>    get { … }<br>    set { … }<br>}<br></p><p>something[externalName: …]<br></p><p>// We had this with functions already, remeber?<br>subscript(sameName sameName: ParamType) -&gt; ElementType {<br>    get { … }<br>    set { … }<br>}<br>Aligning this wouldn’t break anything. I believe this can be migrated easily.<br></p><p>// No label!<br>subscript(_ internalName: ParamType) -&gt; ElementType {<br>    get { … }<br>    set { … }<br>}<br></p><p>something[externalName: …]<br></p><p>// Label name is the same as the parameter name<br>subscript(sameName: ParamType) -&gt; ElementType {<br>    get { … }<br>    set { … }<br>}<br></p><p>// Different names<br>subscript(externalName internalName: ParamType) -&gt; ElementType {<br>    get { … }<br>    set { … }<br>}<br>I know this might be something for stage 2, and I apologize again for posting this early, but we need a better way to keep ideas alive and not forget them after a half of a year. ;) (Forum?)<br></p><p><br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160920/72bcc942/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Pitch] Align label behavior for subscripts</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>September 20, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Sep 20, 2016, at 3:36 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; This is probably something additional and it might already have been discussed here somewhere, I apologize if I missed that talk.<br>&gt; <br>&gt; The rule for parameter labels on functions was fixed in Swift, but now it kinda feels odd to have a different pair of rules for subscripts (at least it does feel odd to me).<br>&gt; <br>FWIW, operator functions, e.g.,<br></p><p>	func +(lhs: Int, rhs: Int) -&gt; Int<br></p><p>have the same rule as subscripts.<br></p><p>Personally, I don’t want to ever revisit these rules again. They’ve changed with every major Swift release, and I feel that we’ve landed in the right place.<br></p><p>	- Doug<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160920/b6812a1d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Align label behavior for subscripts</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>September 20, 2016 at 03:00:00pm</p></header><div class="content"><p>I agree, no obvious win to revisiting, best to keep source compatibility.<br>On Tue, Sep 20, 2016 at 10:43 Douglas Gregor via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Sep 20, 2016, at 3:36 AM, Adrian Zubarev via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; This is probably something additional and it might already have been<br>&gt; discussed here somewhere, I apologize if I missed that talk.<br>&gt;<br>&gt; The rule for parameter labels on functions was fixed in Swift, but now it<br>&gt; kinda feels odd to have a different pair of rules for subscripts (at least<br>&gt; it does feel odd to me).<br>&gt;<br>&gt; FWIW, operator functions, e.g.,<br>&gt;<br>&gt; func +(lhs: Int, rhs: Int) -&gt; Int<br>&gt;<br>&gt; have the same rule as subscripts.<br>&gt;<br>&gt; Personally, I don’t want to ever revisit these rules again. They’ve<br>&gt; changed with every major Swift release, and I feel that we’ve landed in the<br>&gt; right place.<br>&gt;<br>&gt; - Doug<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160920/f5a7ced4/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Pitch] Align label behavior for subscripts</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>September 20, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; On Sep 20, 2016, at 5:42 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Sep 20, 2016, at 3:36 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; This is probably something additional and it might already have been discussed here somewhere, I apologize if I missed that talk.<br>&gt;&gt; <br>&gt;&gt; The rule for parameter labels on functions was fixed in Swift, but now it kinda feels odd to have a different pair of rules for subscripts (at least it does feel odd to me).<br>&gt;&gt; <br>&gt; FWIW, operator functions, e.g.,<br>&gt; <br>&gt; 	func +(lhs: Int, rhs: Int) -&gt; Int<br>&gt; <br>&gt; have the same rule as subscripts.<br>&gt; <br>&gt; Personally, I don’t want to ever revisit these rules again. They’ve changed with every major Swift release, and I feel that we’ve landed in the right place.<br></p><p>I agree.<br></p><p>-Chris<br></p><p><br>&gt; <br>&gt; 	- Doug<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160920/d7883610/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>[Pitch] Align label behavior for subscripts</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>September 20, 2016 at 08:00:00pm</p></header><div class="content"><p>It sounds like they were a joy to handle under the hood... yikes ;).<br></p><p>Sent from my iPhone<br></p><p>&gt; On 20 Sep 2016, at 16:42, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Sep 20, 2016, at 3:36 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; This is probably something additional and it might already have been discussed here somewhere, I apologize if I missed that talk.<br>&gt;&gt; <br>&gt;&gt; The rule for parameter labels on functions was fixed in Swift, but now it kinda feels odd to have a different pair of rules for subscripts (at least it does feel odd to me).<br>&gt;&gt; <br>&gt; FWIW, operator functions, e.g.,<br>&gt; <br>&gt; 	func +(lhs: Int, rhs: Int) -&gt; Int<br>&gt; <br>&gt; have the same rule as subscripts.<br>&gt; <br>&gt; Personally, I don’t want to ever revisit these rules again. They’ve changed with every major Swift release, and I feel that we’ve landed in the right place.<br>&gt; <br>&gt; 	- Doug<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160920/d8c5a483/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
