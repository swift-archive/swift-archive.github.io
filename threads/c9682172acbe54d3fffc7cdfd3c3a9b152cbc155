<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1b852c5986959201d1f8eca105491072?s=50"></div><header><strong>Switch on an optional enum -- `case: nil`?</strong> from <string>Eric Miller</string> &lt;hi at simple.gy&gt;<p>May  5, 2016 at 09:00:00am</p></header><div class="content"><p>Wondering if you guys think this is a reasonable idea.<br></p><p>I was switching on an optional enum today, and naturally gravitated towards<br>including nil as a case:<br></p><p>enum Coin {<br>  case heads<br>  case tails<br>}<br>var result: Coin?<br></p><p>switch result {<br>case heads: print(&quot;heads&quot;)<br>case tails: print(&quot;tails&quot;)<br>case nil: print(&quot;not yet flipped&quot;) // exhaustive<br>}<br></p><p>Doesn&#39;t compile, and of course I can if-let or guard to unwrap instead, but<br>I like the compactness of this.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160505/c968c155/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2ff1daab58cd5e44a457908d1905c322?s=50"></div><header><strong>Switch on an optional enum -- `case: nil`?</strong> from <string>Krzysztof Siejkowski</string> &lt;krzysztof at siejkowski.net&gt;<p>May  5, 2016 at 05:00:00pm</p></header><div class="content"><p>It doesn’t compile because you’re switching on the Optional and trying to pattern match it to Coin.<br></p><p>It compiles right when you pattern match it to Optional&lt;Coin&gt;:<br></p><p>switch result {<br>case .heads?: print(&quot;heads&quot;)<br>case .tails?: print(&quot;tails&quot;)<br>case nil: print(&quot;not yet flipped&quot;)<br>}<br></p><p>Best,<br>Krzysztof<br></p><p>On 5 May 2016 at 17:42:24, Eric Miller via swift-evolution (swift-evolution at swift.org) wrote:<br></p><p>Wondering if you guys think this is a reasonable idea.<br></p><p>I was switching on an optional enum today, and naturally gravitated towards including nil as a case:<br></p><p>enum Coin {<br>  case heads<br>  case tails<br>}<br>var result: Coin?<br></p><p>switch result {<br>case heads: print(&quot;heads&quot;)<br>case tails: print(&quot;tails&quot;)<br>case nil: print(&quot;not yet flipped&quot;) // exhaustive<br>}<br></p><p>Doesn&#39;t compile, and of course I can if-let or guard to unwrap instead, but I like the compactness of this.<br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160505/68e62b6e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d172fa3c47108d84ee35a68e8d675c1?s=50"></div><header><strong>Switch on an optional enum -- `case: nil`?</strong> from <string>Ross O&#39;Brien</string> &lt;narrativium+swift at gmail.com&gt;<p>May  5, 2016 at 04:00:00pm</p></header><div class="content"><p>I was about to provide this, but Krzysztof&#39;s example is more compact than<br>mine:<br></p><p>enum Coin {<br></p><p>case heads<br></p><p>case tails<br></p><p>}<br></p><p>var result: Coin?<br></p><p><br>switch result {<br></p><p>case .Some(.heads): print(&quot;heads&quot;)<br></p><p>case .Some(.tails): print(&quot;tails&quot;)<br></p><p>case nil: print(&quot;not yet flipped&quot;) // exhaustive<br></p><p>}<br></p><p><br></p><p>On Thu, May 5, 2016 at 4:52 PM, Krzysztof Siejkowski via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; It doesn’t compile because you’re switching on the Optional and trying to<br>&gt; pattern match it to Coin.<br>&gt;<br>&gt; It compiles right when you pattern match it to Optional&lt;Coin&gt;:<br>&gt;<br>&gt; switch result {<br>&gt;<br>&gt; case .heads?: print(&quot;heads&quot;)<br>&gt;<br>&gt; case .tails?: print(&quot;tails&quot;)<br>&gt;<br>&gt; case nil: print(&quot;not yet flipped&quot;)<br>&gt;<br>&gt; }<br>&gt;<br>&gt; Best,<br>&gt; Krzysztof<br>&gt;<br>&gt;<br>&gt; On 5 May 2016 at 17:42:24, Eric Miller via swift-evolution (<br>&gt; swift-evolution at swift.org) wrote:<br>&gt;<br>&gt; Wondering if you guys think this is a reasonable idea.<br>&gt;<br>&gt; I was switching on an optional enum today, and naturally gravitated<br>&gt; towards including nil as a case:<br>&gt;<br>&gt; enum Coin {<br>&gt;   case heads<br>&gt;   case tails<br>&gt; }<br>&gt; var result: Coin?<br>&gt;<br>&gt; switch result {<br>&gt; case heads: print(&quot;heads&quot;)<br>&gt; case tails: print(&quot;tails&quot;)<br>&gt; case nil: print(&quot;not yet flipped&quot;) // exhaustive<br>&gt; }<br>&gt;<br>&gt; Doesn&#39;t compile, and of course I can if-let or guard to unwrap instead,<br>&gt; but I like the compactness of this.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160505/25b18f23/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Switch on an optional enum -- `case: nil`?</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>May  5, 2016 at 10:00:00am</p></header><div class="content"><p>Oh, cool! I didn’t realize this syntax existed.<br></p><p>On May 5, 2016, at 10:52 AM, Krzysztof Siejkowski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; It doesn’t compile because you’re switching on the Optional and trying to pattern match it to Coin.<br>&gt; <br>&gt; It compiles right when you pattern match it to Optional&lt;Coin&gt;:<br>&gt; <br>&gt; switch result {<br>&gt; case .heads?: print(&quot;heads&quot;)<br>&gt; case .tails?: print(&quot;tails&quot;)<br>&gt; case nil: print(&quot;not yet flipped&quot;)<br>&gt; }<br>&gt; <br>&gt; Best,<br>&gt; Krzysztof<br>&gt; <br>&gt; On 5 May 2016 at 17:42:24, Eric Miller via swift-evolution (swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;) wrote:<br>&gt; <br>&gt;&gt; Wondering if you guys think this is a reasonable idea.<br>&gt;&gt; <br>&gt;&gt; I was switching on an optional enum today, and naturally gravitated towards including nil as a case:<br>&gt;&gt; <br>&gt;&gt; enum Coin {<br>&gt;&gt;   case heads<br>&gt;&gt;   case tails<br>&gt;&gt; }<br>&gt;&gt; var result: Coin?<br>&gt;&gt; <br>&gt;&gt; switch result {<br>&gt;&gt; case heads: print(&quot;heads&quot;)<br>&gt;&gt; case tails: print(&quot;tails&quot;)<br>&gt;&gt; case nil: print(&quot;not yet flipped&quot;) // exhaustive<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Doesn&#39;t compile, and of course I can if-let or guard to unwrap instead, but I like the compactness of this.<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160505/a291718c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1b852c5986959201d1f8eca105491072?s=50"></div><header><strong>Switch on an optional enum -- `case: nil`?</strong> from <string>Eric Miller</string> &lt;hi at simple.gy&gt;<p>May  5, 2016 at 10:00:00am</p></header><div class="content"><p>Nor I. This syntax is excellent, thanks Krzysztof.<br></p><p>On Thu, May 5, 2016 at 9:56 AM, David Sweeris &lt;davesweeris at mac.com&gt; wrote:<br></p><p>&gt; Oh, cool! I didn’t realize this syntax existed.<br>&gt;<br>&gt; On May 5, 2016, at 10:52 AM, Krzysztof Siejkowski via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; It doesn’t compile because you’re switching on the Optional and trying to<br>&gt; pattern match it to Coin.<br>&gt;<br>&gt; It compiles right when you pattern match it to Optional&lt;Coin&gt;:<br>&gt;<br>&gt; switch result {<br>&gt; case .heads?: print(&quot;heads&quot;)<br>&gt; case .tails?: print(&quot;tails&quot;)<br>&gt; case nil: print(&quot;not yet flipped&quot;)<br>&gt; }<br>&gt;<br>&gt; Best,<br>&gt; Krzysztof<br>&gt;<br>&gt; On 5 May 2016 at 17:42:24, Eric Miller via swift-evolution (<br>&gt; swift-evolution at swift.org) wrote:<br>&gt;<br>&gt; Wondering if you guys think this is a reasonable idea.<br>&gt;<br>&gt; I was switching on an optional enum today, and naturally gravitated<br>&gt; towards including nil as a case:<br>&gt;<br>&gt; enum Coin {<br>&gt;   case heads<br>&gt;   case tails<br>&gt; }<br>&gt; var result: Coin?<br>&gt;<br>&gt; switch result {<br>&gt; case heads: print(&quot;heads&quot;)<br>&gt; case tails: print(&quot;tails&quot;)<br>&gt; case nil: print(&quot;not yet flipped&quot;) // exhaustive<br>&gt; }<br>&gt;<br>&gt; Doesn&#39;t compile, and of course I can if-let or guard to unwrap instead,<br>&gt; but I like the compactness of this.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160505/8184ad15/attachment-0001.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Switch on an optional enum -- `case: nil`?</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>May  5, 2016 at 10:00:00am</p></header><div class="content"><p>So… Is your idea that wrapping a SomeEnum in an Optional would add some “invalid” case to SomeEnum, or that switching on a SomeEnum? would be implicitly rewrite:<br>switch result {<br>case .heads: print(&quot;heads&quot;)<br>case .tails: print(&quot;tails&quot;)<br>case .none: print(&quot;not yet flipped&quot;) // exhaustive<br>}<br>to:<br>switch result {<br>case .none: print(&quot;not yet flipped&quot;)<br>case .some(let _result):<br>  switch _result {<br>  case .heads: print(&quot;heads&quot;)<br>  case .tails: print(&quot;tails&quot;)<br>  }<br>}<br></p><p>&gt; On May 5, 2016, at 10:40 AM, Eric Miller via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Wondering if you guys think this is a reasonable idea.<br>&gt; <br>&gt; I was switching on an optional enum today, and naturally gravitated towards including nil as a case:<br>&gt; <br>&gt; enum Coin {<br>&gt;   case heads<br>&gt;   case tails<br>&gt; }<br>&gt; var result: Coin?<br>&gt; <br>&gt; switch result {<br>&gt; case heads: print(&quot;heads&quot;)<br>&gt; case tails: print(&quot;tails&quot;)<br>&gt; case nil: print(&quot;not yet flipped&quot;) // exhaustive<br>&gt; }<br>&gt; <br>&gt; Doesn&#39;t compile, and of course I can if-let or guard to unwrap instead, but I like the compactness of this.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160505/1c21cd7c/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
