<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Swift4] Priorities and Sugar</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>July 29, 2016 at 05:00:00pm</p></header><div class="content"><p>Things I&#39;d like to see:<br></p><p>* On the Swift Evolution repository site, a wish list from core engineers, with a précis for each topic, a priority estimate, and contact information for the team (which can be none through &quot;willing to mentor&quot;). Using a central document is key. Placing requests on-list means they get lost within a day or two and cannot be updated in one place. <br></p><p>* At the same time, I&#39;d like to see regular posted updates on-list (announcement, or evolution) about the bigger picture goals: for example, neglected items that need some contributor love<br></p><p>* A way to submit pitches for early design review intervention on a regular calendar, so pitches without legs get cut off early and mercifully, and traffic is reduced.<br></p><p>* A deferred proposals folder where people can place low-priority (for example, &quot;sugar&quot;) items, to clear them from their heads, from the pull queue. Add in some structure for discussion, whether on a separate swift.org pipermail list, on github, or on-list using a well-specified tag that can be filtered out for those who need more on-topic bandwidth.<br></p><p>* Swift-academy outreach for those of us who can code but fall somewhere between starter bugs and full contribution.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Swift4] Priorities and Sugar</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July 29, 2016 at 04:00:00pm</p></header><div class="content"><p>On Jul 29, 2016, at 4:26 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; Things I&#39;d like to see:<br>&gt; <br>&gt; * On the Swift Evolution repository site, a wish list from core engineers, with a précis for each topic, a priority estimate, and contact information for the team (which can be none through &quot;willing to mentor&quot;). Using a central document is key. Placing requests on-list means they get lost within a day or two and cannot be updated in one place. <br></p><p>I expect/hope each of the topics listed in the email to turn into active threads of discussion.  If you or others have questions about them, feel free to ask now.  That said, major design work on them probably won’t kick off in earnest until Swift 3 is closer to being out the door.<br></p><p>&gt; * At the same time, I&#39;d like to see regular posted updates on-list (announcement, or evolution) about the bigger picture goals: for example, neglected items that need some contributor love<br></p><p>Makes sense.<br></p><p>&gt; * A way to submit pitches for early design review intervention on a regular calendar, so pitches without legs get cut off early and mercifully, and traffic is reduced.<br></p><p>I’m not sure what you mean by this.<br></p><p>&gt; * A deferred proposals folder where people can place low-priority (for example, &quot;sugar&quot;) items, to clear them from their heads, from the pull queue. Add in some structure for discussion, whether on a separate swift.org pipermail list, on github, or on-list using a well-specified tag that can be filtered out for those who need more on-topic bandwidth.<br></p><p>The core team discussed this and specifically does not want to do this.  The proposal template will change year over year, as will the goals for the releases.  There are plenty of places to post speculative ideas (blogs, personal github repos, etc).  Hosting them as an official part of the swift project doesn’t seem productive unless they are blessed, filtered, or somehow endorsed.<br></p><p>&gt; * Swift-academy outreach for those of us who can code but fall somewhere between starter bugs and full contribution.<br></p><p>I’m also not sure what you mean by this, but it sounds interesting!<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Swift4] Priorities and Sugar</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>July 29, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Jul 29, 2016, at 5:43 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; On Jul 29, 2016, at 4:26 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;&gt; Things I&#39;d like to see:<br>&gt;&gt; <br>&gt;&gt; * On the Swift Evolution repository site, a wish list from core engineers, with a précis for each topic, a priority estimate, and contact information for the team (which can be none through &quot;willing to mentor&quot;). Using a central document is key. Placing requests on-list means they get lost within a day or two and cannot be updated in one place. <br>&gt; <br>&gt; I expect/hope each of the topics listed in the email to turn into active threads of discussion.  If you or others have questions about them, feel free to ask now.  That said, major design work on them probably won’t kick off in earnest until Swift 3 is closer to being out the door.<br></p><p>A single asynchronously updated document can host ideas that may not yet be ready for the development timeline. I&#39;m not saying they shouldn&#39;t also appear in threads, but I&#39;d like to see an Apple-sourced wishlist given equal status with formal proposals. There is *so* much traffic on-list, and a lot gets lost. I speak as someone who has a vested interest in keeping on top of what&#39;s happening on-list.<br></p><p>&gt; <br>&gt;&gt; * At the same time, I&#39;d like to see regular posted updates on-list (announcement, or evolution) about the bigger picture goals: for example, neglected items that need some contributor love<br>&gt; <br>&gt; Makes sense.<br>&gt; <br>&gt;&gt; * A way to submit pitches for early design review intervention on a regular calendar, so pitches without legs get cut off early and mercifully, and traffic is reduced.<br>&gt; <br>&gt; I’m not sure what you mean by this.<br></p><p>Remember the design review meetings that reviewed proposals and gave feedback? (e.g. http://ericasadun.com/2016/03/16/behind-the-scenes-swift-core-team-design-discussion-315/) It seems like a huge amount of effort, late in the process. It would be great to step back to a less developed preliminary proposal (say 1-2 paragraphs), that gets thumbs up/down without so much investment of list and team resources on a regular design review schedule. I&#39;m thinking &quot;early intervention&quot;.<br></p><p>&gt; <br>&gt;&gt; * A deferred proposals folder where people can place low-priority (for example, &quot;sugar&quot;) items, to clear them from their heads, from the pull queue. Add in some structure for discussion, whether on a separate swift.org pipermail list, on github, or on-list using a well-specified tag that can be filtered out for those who need more on-topic bandwidth.<br>&gt; <br>&gt; The core team discussed this and specifically does not want to do this.  The proposal template will change year over year, as will the goals for the releases.  There are plenty of places to post speculative ideas (blogs, personal github repos, etc).  Hosting them as an official part of the swift project doesn’t seem productive unless they are blessed, filtered, or somehow endorsed.<br></p><p>Understood.<br></p><p>&gt; <br>&gt;&gt; * Swift-academy outreach for those of us who can code but fall somewhere between starter bugs and full contribution.<br>&gt; <br>&gt; I’m also not sure what you mean by this, but it sounds interesting!<br></p><p>Ted&#39;s email (https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025587.html) highlighted the gap between designing ideas and writing code. Or as you wrote, &quot;Software scheduling (particularly with open source) continues to be difficult-to-impossible to predict.&quot; Outreach (maybe through slack?) could help guide almost-but-not-quite-there devs, specifically working on swift coding.<br></p><p>-- E<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Swift4] Priorities and Sugar</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July 29, 2016 at 05:00:00pm</p></header><div class="content"><p>On Jul 29, 2016, at 5:05 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;&gt; I expect/hope each of the topics listed in the email to turn into active threads of discussion.  If you or others have questions about them, feel free to ask now.  That said, major design work on them probably won’t kick off in earnest until Swift 3 is closer to being out the door.<br>&gt; <br>&gt; A single asynchronously updated document can host ideas that may not yet be ready for the development timeline. I&#39;m not saying they shouldn&#39;t also appear in threads, but I&#39;d like to see an Apple-sourced wishlist given equal status with formal proposals. There is *so* much traffic on-list, and a lot gets lost. I speak as someone who has a vested interest in keeping on top of what&#39;s happening on-list.<br></p><p>Moving into early Swift 4 planning and development, we have no desires beyond what I listed in the big email.  There is no long laundry list, it is a few specific (big!) topics.<br></p><p>We specifically do not want a surge of proposals.<br></p><p><br>&gt;&gt;&gt; * A way to submit pitches for early design review intervention on a regular calendar, so pitches without legs get cut off early and mercifully, and traffic is reduced.<br>&gt;&gt; <br>&gt;&gt; I’m not sure what you mean by this.<br>&gt; <br>&gt; Remember the design review meetings that reviewed proposals and gave feedback? (e.g. http://ericasadun.com/2016/03/16/behind-the-scenes-swift-core-team-design-discussion-315/) It seems like a huge amount of effort, late in the process. It would be great to step back to a less developed preliminary proposal (say 1-2 paragraphs), that gets thumbs up/down without so much investment of list and team resources on a regular design review schedule. I&#39;m thinking &quot;early intervention”.<br></p><p>Sure, this makes a lot of sense as proposals are coming together for the areas that are on topic.<br></p><p>&gt;&gt;&gt; * Swift-academy outreach for those of us who can code but fall somewhere between starter bugs and full contribution.<br>&gt;&gt; <br>&gt;&gt; I’m also not sure what you mean by this, but it sounds interesting!<br>&gt; <br>&gt; Ted&#39;s email (https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025587.html) highlighted the gap between designing ideas and writing code. Or as you wrote, &quot;Software scheduling (particularly with open source) continues to be difficult-to-impossible to predict.&quot; Outreach (maybe through slack?) could help guide almost-but-not-quite-there devs, specifically working on swift coding.<br></p><p>Ah, this would be fantastic.  I’m not sure exactly what the right approach is, but if you haven’t seen it, Slava wrote some phenomenal blog posts about the inner workings of the Swift type system:<br>https://medium.com/@slavapestov/the-secret-life-of-types-in-swift-ff83c3c000a5#.utgtukjwf<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/42eca71033ece251f2f194b7e343c2ec?s=50"></div><header><strong>[Swift4] Priorities and Sugar</strong> from <string>Magnus Ahltorp</string> &lt;map at kth.se&gt;<p>July 30, 2016 at 02:00:00am</p></header><div class="content"><p>&gt; 30 Jul 2016 02:17 Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Moving into early Swift 4 planning and development, we have no desires beyond what I listed in the big email.  There is no long laundry list, it is a few specific (big!) topics.<br>&gt; <br>&gt; We specifically do not want a surge of proposals.<br></p><p>Is it appropriate to discuss high-level topics that are not one of the topics on your list? Example: Decreasing the number of cases where unsafe constructs have to be used.<br></p><p>If it is not, how do topics get on the list?<br></p><p>/Magnus<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Swift4] Priorities and Sugar</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July 29, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Jul 29, 2016, at 5:29 PM, Magnus Ahltorp &lt;map at kth.se&gt; wrote:<br>&gt; <br>&gt;&gt; 30 Jul 2016 02:17 Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Moving into early Swift 4 planning and development, we have no desires beyond what I listed in the big email.  There is no long laundry list, it is a few specific (big!) topics.<br>&gt;&gt; <br>&gt;&gt; We specifically do not want a surge of proposals.<br>&gt; <br>&gt; Is it appropriate to discuss high-level topics that are not one of the topics on your list? Example: Decreasing the number of cases where unsafe constructs have to be used.<br>&gt; <br>&gt; If it is not, how do topics get on the list?<br></p><p>If a topic is related to source or ABI compatibility, it is fair game for discussion.  We don’t want to widen the doors beyond this, because that is already a huge set of very important topics.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/42eca71033ece251f2f194b7e343c2ec?s=50"></div><header><strong>[Swift4] Priorities and Sugar</strong> from <string>Magnus Ahltorp</string> &lt;map at kth.se&gt;<p>July 30, 2016 at 02:00:00am</p></header><div class="content"><p>&gt; 30 Jul 2016 02:38 Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; On Jul 29, 2016, at 5:29 PM, Magnus Ahltorp &lt;map at kth.se&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; 30 Jul 2016 02:17 Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Moving into early Swift 4 planning and development, we have no desires beyond what I listed in the big email.  There is no long laundry list, it is a few specific (big!) topics.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We specifically do not want a surge of proposals.<br>&gt;&gt; <br>&gt;&gt; Is it appropriate to discuss high-level topics that are not one of the topics on your list? Example: Decreasing the number of cases where unsafe constructs have to be used.<br>&gt;&gt; <br>&gt;&gt; If it is not, how do topics get on the list?<br>&gt; <br>&gt; If a topic is related to source or ABI compatibility, it is fair game for discussion.  We don’t want to widen the doors beyond this, because that is already a huge set of very important topics.<br></p><p>I assume you mean for Swift 4 Stage 1? I was more referring to the Stage 2 list of high-level topics. When/how will it be appropriate to discuss what the topics should be? Before or after Stage 1 is completed, or not at all?<br></p><p>Also, &quot;Our goal is to be better at string processing than Perl!&quot; doesn&#39;t seem to be very related to ABI stability, but it is listed under Stage 1.<br></p><p>/Magnus<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Swift4] Priorities and Sugar</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July 29, 2016 at 06:00:00pm</p></header><div class="content"><p>On Jul 29, 2016, at 5:53 PM, Magnus Ahltorp &lt;map at kth.se&gt; wrote:<br>&gt;&gt;&gt; Is it appropriate to discuss high-level topics that are not one of the topics on your list? Example: Decreasing the number of cases where unsafe constructs have to be used.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If it is not, how do topics get on the list?<br>&gt;&gt; <br>&gt;&gt; If a topic is related to source or ABI compatibility, it is fair game for discussion.  We don’t want to widen the doors beyond this, because that is already a huge set of very important topics.<br>&gt; <br>&gt; I assume you mean for Swift 4 Stage 1?<br></p><p>Yes, I was referring to Stage 1, sorry for not being specific.<br></p><p>&gt; I was more referring to the Stage 2 list of high-level topics. When/how will it be appropriate to discuss what the topics should be? Before or after Stage 1 is completed, or not at all?<br></p><p>Stage 2 discussions will start once the work for Stage 1 is well understood and the implementation work starts converging (but is not necessarily done).  My wild guess is sometime in the early spring next year.<br></p><p>&gt; Also, &quot;Our goal is to be better at string processing than Perl!&quot; doesn&#39;t seem to be very related to ABI stability, but it is listed under Stage 1.<br></p><p>Great point, let me clarify: I expect String to get a major design overhaul.  For example, sizeof(String) is currently three words, but it should be one.  Relatedly, the API exposed by it is known to need revisions.  All of that work clearly impacts the ABI, and so it is a key project for Stage 1.<br></p><p>There is also a lot of other work that will build on that Stage 1 work, but is appropriate for Stage 2.  I’m personally convinced that we don’t get to great string processing without regular expressions (as one example), but they are clearly out of scope for Stage 1.  That’s ok though: the design work for the Stage 1 string design can just assume that that will come in at some point, and make sure the ultimate design anticipates that.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/90677221288dba8210194347b162bda8?s=50"></div><header><strong>[Swift4] Priorities and Sugar</strong> from <string>Ian Partridge</string> &lt;ian at poncho.org.uk&gt;<p>July 30, 2016 at 09:00:00am</p></header><div class="content"><p>On 30 July 2016 at 02:33, Chris Lattner via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt; I’m personally convinced that we don’t get to great string processing without regular expressions (as one<br>&gt; example), but they are clearly out of scope for Stage 1.<br></p><p>Foundation already has NSRegularExpression. Do you mean that the<br>stdlib could potentially duplicate Foundation functionality? If so,<br>what are the implications for Foundation (and<br>swift-corelibs-foundation)? Does this also mean that other &quot;stringy&quot;<br>functionality could arrive in the stdlib, for example a Swifty JSON<br>serializer/deserializer?<br></p><p>Best wishes,<br></p><p>-- <br>Ian Partridge<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Swift4] Priorities and Sugar</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>July 30, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; Foundation already has NSRegularExpression. Do you mean that the<br>&gt; stdlib could potentially duplicate Foundation functionality?<br></p><p>NSRegularExpression is not really easy to use for most common usecases (first match in string, etc.) + it lacks a lot of features e.g. Python has (named groups, etc.). I&#39;ve personally never used NSRegularExpression and rather wrote an ObjC wrapper around re2 (https://github.com/google/re2/).<br></p><p>I&#39;d really like Swift&#39;s regex to be much more powerful and be able to match against it in a switch:<br></p><p>switch someString {<br>case /\d+:<br>	...<br>case /w+:<br>	...<br>...<br></p><p>Also, you can have compile-time check whether the expression is valid if regex is part of the language. But that&#39;s kind of getting too specific and away from the original discussion.<br></p><p><br>&gt; If so,<br>&gt; what are the implications for Foundation (and<br>&gt; swift-corelibs-foundation)? Does this also mean that other &quot;stringy&quot;<br>&gt; functionality could arrive in the stdlib, for example a Swifty JSON<br>&gt; serializer/deserializer?<br>&gt; <br>&gt; Best wishes,<br>&gt; <br>&gt; -- <br>&gt; Ian Partridge<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6e5bfbacb9ead452482f19041b9779dd?s=50"></div><header><strong>[Swift4] Priorities and Sugar</strong> from <string>Daniel Leping</string> &lt;daniel at crossroadlabs.xyz&gt;<p>July 30, 2016 at 02:00:00pm</p></header><div class="content"><p>Hey guys,<br></p><p>TL;DR; proposed solution in the second half.<br></p><p>actually, we are already doing something like this without modifying the<br>language itself here:<br>https://github.com/crossroadlabs/Regex/blob/swift2.x/Regex/String%2BRegex.swift<br></p><p>It&#39;s Scala style (.r notion). Works perfectly with switch keyword:<br></p><p>*switch letter {*<br></p><p>*    //note .r after the string literal of the pattern*<br></p><p>*    case &quot;\\d&quot;.r: print(&quot;digit&quot;)*<br></p><p>*    case &quot;[a-z]&quot;.r: print(&quot;letter&quot;)*<br></p><p>*    default: print(&quot;bizarre symbol&quot;)*<br></p><p>*}*<br></p><p>You can try it in release 0.8 (for Swift 2.x, Swift 3.0 release with this<br>feature is not issued yet).<br></p><p>What we really lack though is matching objects to tuples with *switch*.<br>Here is the explanation:<br></p><p>Let&#39;s say we have a match:<br></p><p>let match = &quot;(\d*)(.*)&quot;.r.findFirst(&quot;123abc&quot;)<br></p><p>what I would love to do with it is the following:<br></p><p>*switch match {*<br></p><p>*case (_, &quot;xyz&quot;): print(&quot;end of alphabet&quot;)*<br></p><p>*case (&quot;123&quot;, _): print(&quot;beginning of numerics&quot;)*<br></p><p>*default: print(&quot;I don&#39;t care&quot;)*<br></p><p>*}*<br></p><p>It would be possible if ~= operator was a bit more powerful and allow to<br>match against tuples (currently, it can&#39;t even without underscores). What I<br>would like to propose (will create an evolution proposal later if it&#39;s<br>something the core-team is willing to consider) is to:<br></p><p>1. Either extend ~= to allow to match tuples. Currently, I see it the<br>following way (an example):<br></p><p>*// you have to create an operator for each tuple size, any ideas on a<br>better solution?*<br></p><p>*func ~=&lt;A, B&gt;(match:Match, tuple:(A?, B?)) -&gt; Bool*<br></p><p>Why optionals? Well, this way we could process _ substitutions.<br></p><p>2. Implement Scala-like apply/unapply. Good too, but option one sounds more<br>&quot;Swiftish&quot; to me personally.<br></p><p><br>Why is this cool? Well, this is not just about Regular Expressions, it&#39;s<br>rather overall language power and Regex is a nice example. I think there<br>will be a lot of examples, especially with the web apps. Some additional<br>ones I can think of right away is processing of URL or query params or<br>&quot;parsing&quot; of message object (i.e. in Actors or Queues).<br></p><p>Why making the match object to be an enum would not work? Well, first of<br>all there is some more additional info in it which I would like to keep<br>hidden for the user (i.e. full match, etc.) and not to push to match to.<br>This is not just one use case and in others it might become even more<br>important.<br></p><p>Hope it&#39;s clear and understandable (let me know if not and I&#39;ll bring it in<br>more details). Would this fit to Swift 3.x (no existing code impact) or to<br>Swift 4.x?<br></p><p>Best,<br></p><p>Daniel<br></p><p>On Sat, Jul 30, 2016 at 12:37 PM, Charlie Monroe via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; &gt; Foundation already has NSRegularExpression. Do you mean that the<br>&gt; &gt; stdlib could potentially duplicate Foundation functionality?<br>&gt;<br>&gt; NSRegularExpression is not really easy to use for most common usecases<br>&gt; (first match in string, etc.) + it lacks a lot of features e.g. Python has<br>&gt; (named groups, etc.). I&#39;ve personally never used NSRegularExpression and<br>&gt; rather wrote an ObjC wrapper around re2 (https://github.com/google/re2/).<br>&gt;<br>&gt; I&#39;d really like Swift&#39;s regex to be much more powerful and be able to<br>&gt; match against it in a switch:<br>&gt;<br>&gt; switch someString {<br>&gt; case /\d+:<br>&gt;         ...<br>&gt; case /w+:<br>&gt;         ...<br>&gt; ...<br>&gt;<br>&gt; Also, you can have compile-time check whether the expression is valid if<br>&gt; regex is part of the language. But that&#39;s kind of getting too specific and<br>&gt; away from the original discussion.<br>&gt;<br>&gt;<br>&gt; &gt; If so,<br>&gt; &gt; what are the implications for Foundation (and<br>&gt; &gt; swift-corelibs-foundation)? Does this also mean that other &quot;stringy&quot;<br>&gt; &gt; functionality could arrive in the stdlib, for example a Swifty JSON<br>&gt; &gt; serializer/deserializer?<br>&gt; &gt;<br>&gt; &gt; Best wishes,<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; Ian Partridge<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160730/0445dac3/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Swift4] Priorities and Sugar</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July 30, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jul 30, 2016, at 1:42 AM, Ian Partridge &lt;ian at poncho.org.uk&gt; wrote:<br>&gt; <br>&gt; On 30 July 2016 at 02:33, Chris Lattner via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; I’m personally convinced that we don’t get to great string processing without regular expressions (as one<br>&gt;&gt; example), but they are clearly out of scope for Stage 1.<br>&gt; <br>&gt; Foundation already has NSRegularExpression. Do you mean that the<br>&gt; stdlib could potentially duplicate Foundation functionality? If so,<br>&gt; what are the implications for Foundation (and<br>&gt; swift-corelibs-foundation)? Does this also mean that other &quot;stringy&quot;<br>&gt; functionality could arrive in the stdlib, for example a Swifty JSON<br>&gt; serializer/deserializer?<br></p><p>As others have mentioned, the interesting thing in this space is language support for regex literals.  They should tie into the pattern matching constructs in the language (e.g. switch, if case, etc).<br></p><p>Better support for JSON is also interesting and possible over the next year, but it would be the domain of the corelibs folks.  I believe they have some ideas in this space, but probably aren’t ready to dive into it given that Swift 3 isn’t done, and I’m not sure if there are any “plans”.<br></p><p>-Chris<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[Swift4] Priorities and Sugar</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>July 29, 2016 at 08:00:00pm</p></header><div class="content"><p>Where can we learn what affects the ABI? (Google, yes, but is there a highly respected document or article?)<br></p><p>Unless it&#39;s just something I&#39;m not really familiar with, it might be helpful to detail what kind of changes would affect the ABI. <br></p><p>Brandon<br></p><p>&gt; On Jul 29, 2016, at 8:38 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt;&gt; On Jul 29, 2016, at 5:29 PM, Magnus Ahltorp &lt;map at kth.se&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 30 Jul 2016 02:17 Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Moving into early Swift 4 planning and development, we have no desires beyond what I listed in the big email.  There is no long laundry list, it is a few specific (big!) topics.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We specifically do not want a surge of proposals.<br>&gt;&gt; <br>&gt;&gt; Is it appropriate to discuss high-level topics that are not one of the topics on your list? Example: Decreasing the number of cases where unsafe constructs have to be used.<br>&gt;&gt; <br>&gt;&gt; If it is not, how do topics get on the list?<br>&gt; <br>&gt; If a topic is related to source or ABI compatibility, it is fair game for discussion.  We don’t want to widen the doors beyond this, because that is already a huge set of very important topics.<br>&gt; <br>&gt; -Chris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160729/55352c41/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f6b7154fd1d6a470d0b521a2e484bffc?s=50"></div><header><strong>[Swift4] Priorities and Sugar</strong> from <string>Daniel Duan</string> &lt;daniel at duan.org&gt;<p>July 29, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Jul 29, 2016, at 5:59 PM, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Where can we learn what affects the ABI? (Google, yes, but is there a highly respected document or article?)<br>&gt; <br></p><p>This is a really good question, if we expect lots of discussion on this list relating to ABIs, some organized, introductory material would be really helpful. I’d start with https://github.com/apple/swift/blob/master/docs/ABI.rst &lt;https://github.com/apple/swift/blob/master/docs/ABI.rst&gt;. <br></p><p>&gt; Unless it&#39;s just something I&#39;m not really familiar with, it might be helpful to detail what kind of changes would affect the ABI. <br>&gt; <br>&gt; Brandon<br>&gt; <br>&gt; On Jul 29, 2016, at 8:38 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 29, 2016, at 5:29 PM, Magnus Ahltorp &lt;map at kth.se &lt;mailto:map at kth.se&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 30 Jul 2016 02:17 Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Moving into early Swift 4 planning and development, we have no desires beyond what I listed in the big email.  There is no long laundry list, it is a few specific (big!) topics.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; We specifically do not want a surge of proposals.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is it appropriate to discuss high-level topics that are not one of the topics on your list? Example: Decreasing the number of cases where unsafe constructs have to be used.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If it is not, how do topics get on the list?<br>&gt;&gt; <br>&gt;&gt; If a topic is related to source or ABI compatibility, it is fair game for discussion.  We don’t want to widen the doors beyond this, because that is already a huge set of very important topics.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160729/85f7df83/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[Swift4] Priorities and Sugar</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>July 29, 2016 at 09:00:00pm</p></header><div class="content"><p>Thanks for this! This looks great!<br></p><p>Brandon<br></p><p>&gt; On Jul 29, 2016, at 9:14 PM, Daniel Duan &lt;daniel at duan.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jul 29, 2016, at 5:59 PM, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Where can we learn what affects the ABI? (Google, yes, but is there a highly respected document or article?)<br>&gt;&gt; <br>&gt; <br>&gt; This is a really good question, if we expect lots of discussion on this list relating to ABIs, some organized, introductory material would be really helpful. I’d start with https://github.com/apple/swift/blob/master/docs/ABI.rst. <br>&gt; <br>&gt;&gt; Unless it&#39;s just something I&#39;m not really familiar with, it might be helpful to detail what kind of changes would affect the ABI. <br>&gt;&gt; <br>&gt;&gt; Brandon<br>&gt;&gt; <br>&gt;&gt; On Jul 29, 2016, at 8:38 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jul 29, 2016, at 5:29 PM, Magnus Ahltorp &lt;map at kth.se&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 30 Jul 2016 02:17 Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Moving into early Swift 4 planning and development, we have no desires beyond what I listed in the big email.  There is no long laundry list, it is a few specific (big!) topics.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; We specifically do not want a surge of proposals.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Is it appropriate to discuss high-level topics that are not one of the topics on your list? Example: Decreasing the number of cases where unsafe constructs have to be used.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If it is not, how do topics get on the list?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If a topic is related to source or ABI compatibility, it is fair game for discussion.  We don’t want to widen the doors beyond this, because that is already a huge set of very important topics.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160729/3a24904f/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Swift4] Priorities and Sugar</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July 29, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Jul 29, 2016, at 6:14 PM, Daniel Duan &lt;daniel at duan.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jul 29, 2016, at 5:59 PM, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Where can we learn what affects the ABI? (Google, yes, but is there a highly respected document or article?)<br>&gt;&gt; <br>&gt; <br>&gt; This is a really good question, if we expect lots of discussion on this list relating to ABIs, some organized, introductory material would be really helpful. I’d start with https://github.com/apple/swift/blob/master/docs/ABI.rst &lt;https://github.com/apple/swift/blob/master/docs/ABI.rst&gt;. <br></p><p>Right.  In addition, it is basically “every public symbol exported by the standard library”.  This includes everything you get by running the ‘nm’ command on the standard library dylibs.  Each of those has to be right.<br></p><p>-Chris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160729/4ec3fac1/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[Swift4] Priorities and Sugar</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>July 29, 2016 at 08:00:00pm</p></header><div class="content"><p>Chris, has the core team discussed opening up a forum for discussing proposal implementations. <br></p><p>Some of us aren&#39;t as skilled as the core team or other contributors but would like to learn. A forum is a much easier place for us to post for code help and to help others with their questions. I think this could help get more involved as it would be a more comfortable format for them. Think of how there are Apple Developer forums and not mailing lists for iOS betas etc. <br></p><p>I am not saying moving swift-evo to forums *yet* but I believe a lot of the newer programmers are more comfortable with a forum format, especially when it comes to help and discussing code. <br></p><p>Forums for contributors would:<br>- be more familiar for a lot of the newer and not as experienced developers <br>- be easier to search<br>- be easier to moderate (not really a problem yet)<br></p><p>My .02<br>Brandon <br></p><p>&gt; On Jul 29, 2016, at 7:43 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Jul 29, 2016, at 4:26 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;&gt; Things I&#39;d like to see:<br>&gt;&gt; <br>&gt;&gt; * On the Swift Evolution repository site, a wish list from core engineers, with a précis for each topic, a priority estimate, and contact information for the team (which can be none through &quot;willing to mentor&quot;). Using a central document is key. Placing requests on-list means they get lost within a day or two and cannot be updated in one place. <br>&gt; <br>&gt; I expect/hope each of the topics listed in the email to turn into active threads of discussion.  If you or others have questions about them, feel free to ask now.  That said, major design work on them probably won’t kick off in earnest until Swift 3 is closer to being out the door.<br>&gt; <br>&gt;&gt; * At the same time, I&#39;d like to see regular posted updates on-list (announcement, or evolution) about the bigger picture goals: for example, neglected items that need some contributor love<br>&gt; <br>&gt; Makes sense.<br>&gt; <br>&gt;&gt; * A way to submit pitches for early design review intervention on a regular calendar, so pitches without legs get cut off early and mercifully, and traffic is reduced.<br>&gt; <br>&gt; I’m not sure what you mean by this.<br>&gt; <br>&gt;&gt; * A deferred proposals folder where people can place low-priority (for example, &quot;sugar&quot;) items, to clear them from their heads, from the pull queue. Add in some structure for discussion, whether on a separate swift.org pipermail list, on github, or on-list using a well-specified tag that can be filtered out for those who need more on-topic bandwidth.<br>&gt; <br>&gt; The core team discussed this and specifically does not want to do this.  The proposal template will change year over year, as will the goals for the releases.  There are plenty of places to post speculative ideas (blogs, personal github repos, etc).  Hosting them as an official part of the swift project doesn’t seem productive unless they are blessed, filtered, or somehow endorsed.<br>&gt; <br>&gt;&gt; * Swift-academy outreach for those of us who can code but fall somewhere between starter bugs and full contribution.<br>&gt; <br>&gt; I’m also not sure what you mean by this, but it sounds interesting!<br>&gt; <br>&gt; -Chris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Swift4] Priorities and Sugar</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July 29, 2016 at 05:00:00pm</p></header><div class="content"><p>On Jul 29, 2016, at 5:14 PM, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt; <br>&gt; Chris, has the core team discussed opening up a forum for discussing proposal implementations. <br>&gt; <br>&gt; Some of us aren&#39;t as skilled as the core team or other contributors but would like to learn. A forum is a much easier place for us to post for code help and to help others with their questions. I think this could help get more involved as it would be a more comfortable format for them. Think of how there are Apple Developer forums and not mailing lists for iOS betas etc. <br>&gt; <br>&gt; I am not saying moving swift-evo to forums *yet* but I believe a lot of the newer programmers are more comfortable with a forum format, especially when it comes to help and discussing code. <br>&gt; <br>&gt; Forums for contributors would:<br>&gt; - be more familiar for a lot of the newer and not as experienced developers <br>&gt; - be easier to search<br>&gt; - be easier to moderate (not really a problem yet)<br></p><p>Hi Brandon,<br></p><p>Moving from email to a forum system has come up before, but they have some disadvantages.  One of major wins of email is that it is pervasive and can be adapted into other forms.  For example, if you haven’t seen it yet, check out:<br>https://stylemac.com/hirundo/<br></p><p>-Chris<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
