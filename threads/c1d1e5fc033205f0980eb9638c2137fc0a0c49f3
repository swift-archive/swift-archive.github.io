<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a1faea18be9eb2d50c4edcd223f2d685?s=50"></div><header><strong>Swift Binary Size vs. Obj-C</strong> from <string>Seth Friedman</string> &lt;sethfri at gmail.com&gt;<p>June 15, 2016 at 10:00:00pm</p></header><div class="content"><p>Hi all,<br></p><p>I&#39;ve seen a ton of blog posts written about all of the cool and exciting<br>things about Swift, but I haven&#39;t see anything really about the downsides<br>(besides the occasional post about pain points with interoperability).<br>What&#39;s of biggest concern to me when considering migrating my company&#39;s app<br>from Objective-C to Swift is binary size. Swift binary size seems to be<br>several times larger than Objective-C, and I&#39;m curious what data there is<br>in the community to support this suspicion.<br></p><p>For some quick data points, I created a single view controller project in<br>Obj-C and one in Swift, turned off bitcode to get a better idea of what the<br>binary size on device would be, and archived them. I did this in Xcode 8<br>Beta 1 using Swift 3 so that I&#39;d make sure to get any binary size<br>improvements in Swift 3.<br></p><p>The Obj-C IPA file was 639 KB. The Swift IPA file was *23.6 MB*. I know<br>that the Swift runtime libs are about 4.5 MB, but subtracting that, the<br>Swift IPA file is still *30x bigger than the Obj-C equivalent*. Next, I<br>tried adding a simple table view controller, a Person model with a first<br>and last name, and a data source that puts the first and last names in the<br>table view in an attempt to make a functioning app. However, the binary<br>sizes were about the same (the Obj-C one actually decreased to 635 KB).<br></p><p>When we&#39;re talking about binary sizes this small, it&#39;s not a big deal, but<br>my company&#39;s app is currently 81 MB, about 35 MB of which is code, and the<br>rest is assets. If the code part of the binary size increases by orders of<br>magnitude like this, we&#39;ll go way over the 100 MB cellular limit that Apple<br>has set. This is also a really bad experience for customers in emerging<br>markets like China and India that have poor connections.<br></p><p>Can anyone confirm or deny that Swift binary size is orders of magnitude<br>larger than Objective-C? I&#39;m looking for the specific increase we&#39;ll see to<br>take to my management in order to make a justification for whether it&#39;s<br>worth it for our customers.<br></p><p>Thanks!<br></p><p>Seth Friedman<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160615/c1d149f3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>Swift Binary Size vs. Obj-C</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>June 15, 2016 at 05:00:00pm</p></header><div class="content"><p>Swift binaries are so massive currently because there&#39;s no ABI stability,<br>therefore the runtime and support libraries must be packaged with every<br>application. This should change in the future.<br></p><p>Best,<br>Austin<br></p><p>On Wed, Jun 15, 2016 at 3:43 PM, Seth Friedman via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Hi all,<br>&gt;<br>&gt; I&#39;ve seen a ton of blog posts written about all of the cool and exciting<br>&gt; things about Swift, but I haven&#39;t see anything really about the downsides<br>&gt; (besides the occasional post about pain points with interoperability).<br>&gt; What&#39;s of biggest concern to me when considering migrating my company&#39;s app<br>&gt; from Objective-C to Swift is binary size. Swift binary size seems to be<br>&gt; several times larger than Objective-C, and I&#39;m curious what data there is<br>&gt; in the community to support this suspicion.<br>&gt;<br>&gt; For some quick data points, I created a single view controller project in<br>&gt; Obj-C and one in Swift, turned off bitcode to get a better idea of what the<br>&gt; binary size on device would be, and archived them. I did this in Xcode 8<br>&gt; Beta 1 using Swift 3 so that I&#39;d make sure to get any binary size<br>&gt; improvements in Swift 3.<br>&gt;<br>&gt; The Obj-C IPA file was 639 KB. The Swift IPA file was *23.6 MB*. I know<br>&gt; that the Swift runtime libs are about 4.5 MB, but subtracting that, the<br>&gt; Swift IPA file is still *30x bigger than the Obj-C equivalent*. Next, I<br>&gt; tried adding a simple table view controller, a Person model with a first<br>&gt; and last name, and a data source that puts the first and last names in the<br>&gt; table view in an attempt to make a functioning app. However, the binary<br>&gt; sizes were about the same (the Obj-C one actually decreased to 635 KB).<br>&gt;<br>&gt; When we&#39;re talking about binary sizes this small, it&#39;s not a big deal, but<br>&gt; my company&#39;s app is currently 81 MB, about 35 MB of which is code, and the<br>&gt; rest is assets. If the code part of the binary size increases by orders of<br>&gt; magnitude like this, we&#39;ll go way over the 100 MB cellular limit that Apple<br>&gt; has set. This is also a really bad experience for customers in emerging<br>&gt; markets like China and India that have poor connections.<br>&gt;<br>&gt; Can anyone confirm or deny that Swift binary size is orders of magnitude<br>&gt; larger than Objective-C? I&#39;m looking for the specific increase we&#39;ll see to<br>&gt; take to my management in order to make a justification for whether it&#39;s<br>&gt; worth it for our customers.<br>&gt;<br>&gt; Thanks!<br>&gt;<br>&gt; Seth Friedman<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160615/bbac8726/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Swift Binary Size vs. Obj-C</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>June 16, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jun 15, 2016, at 5:02 PM, Austin Zheng via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Swift binaries are so massive currently because there&#39;s no ABI stability, therefore the runtime and support libraries must be packaged with every application. This should change in the future.<br></p><p>Does anyone have an estimate of how far off this future is? Presumably it involves the runtime libraries being bundled into the OS … so would this happen in iOS 10 / macOS 10.12?<br></p><p>I’d love to use Swift, but I work on a framework &lt;https://github.com/couchbase/couchbase-lite-ios/&gt; for use by other apps, and I can’t justify adding any Swift code to the framework if that would suddenly cause everyone’s app size to balloon by ~5MB. (Except for devs already using Swift in their apps, true, but I don’t know how many of them are.)<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160616/853ce6d4/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2024f9524b1e51a54c4251abf0c34f50?s=50"></div><header><strong>Swift Binary Size vs. Obj-C</strong> from <string>Saagar Jha</string> &lt;saagarjha28 at gmail.com&gt;<p>June 16, 2016 at 12:00:00am</p></header><div class="content"><p>Yep, I just took a simple app and opened up the ipa. 90% of it is the<br>“Frameworks” directory containing the Swift frameworks libSwiftCore.dylib,<br>libSwiftDarwin.dylib, etc.<br></p><p><br>On Wed, Jun 15, 2016 at 3:43 PM Seth Friedman via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Hi all,<br>&gt;<br>&gt; I&#39;ve seen a ton of blog posts written about all of the cool and exciting<br>&gt; things about Swift, but I haven&#39;t see anything really about the downsides<br>&gt; (besides the occasional post about pain points with interoperability).<br>&gt; What&#39;s of biggest concern to me when considering migrating my company&#39;s app<br>&gt; from Objective-C to Swift is binary size. Swift binary size seems to be<br>&gt; several times larger than Objective-C, and I&#39;m curious what data there is<br>&gt; in the community to support this suspicion.<br>&gt;<br>&gt; For some quick data points, I created a single view controller project in<br>&gt; Obj-C and one in Swift, turned off bitcode to get a better idea of what the<br>&gt; binary size on device would be, and archived them. I did this in Xcode 8<br>&gt; Beta 1 using Swift 3 so that I&#39;d make sure to get any binary size<br>&gt; improvements in Swift 3.<br>&gt;<br>&gt; The Obj-C IPA file was 639 KB. The Swift IPA file was *23.6 MB*. I know<br>&gt; that the Swift runtime libs are about 4.5 MB, but subtracting that, the<br>&gt; Swift IPA file is still *30x bigger than the Obj-C equivalent*. Next, I<br>&gt; tried adding a simple table view controller, a Person model with a first<br>&gt; and last name, and a data source that puts the first and last names in the<br>&gt; table view in an attempt to make a functioning app. However, the binary<br>&gt; sizes were about the same (the Obj-C one actually decreased to 635 KB).<br>&gt;<br>&gt; When we&#39;re talking about binary sizes this small, it&#39;s not a big deal, but<br>&gt; my company&#39;s app is currently 81 MB, about 35 MB of which is code, and the<br>&gt; rest is assets. If the code part of the binary size increases by orders of<br>&gt; magnitude like this, we&#39;ll go way over the 100 MB cellular limit that Apple<br>&gt; has set. This is also a really bad experience for customers in emerging<br>&gt; markets like China and India that have poor connections.<br>&gt;<br>&gt; Can anyone confirm or deny that Swift binary size is orders of magnitude<br>&gt; larger than Objective-C? I&#39;m looking for the specific increase we&#39;ll see to<br>&gt; take to my management in order to make a justification for whether it&#39;s<br>&gt; worth it for our customers.<br>&gt;<br>&gt; Thanks!<br>&gt;<br>&gt; Seth Friedman<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-- <br>-Saagar Jha<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160616/2e381cf8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a1faea18be9eb2d50c4edcd223f2d685?s=50"></div><header><strong>Swift Binary Size vs. Obj-C</strong> from <string>Seth Friedman</string> &lt;sethfri at gmail.com&gt;<p>June 16, 2016 at 12:00:00am</p></header><div class="content"><p>Thanks for the quick reply. You guys are right on part of it; the runtime<br>libraries are causing the majority of the increase. I thought the Swift<br>runtime libraries were supposed to only take up 4.5 MB though? Did they<br>increase with Swift 3? If I add up all of the libraries, they take up a<br>total of 22.88 MB in the binary. About how big would they be if I had<br>Bitcode turned on?<br></p><p>That said, the actual Swift binary is still larger. In my table view<br>example, the Objective-C binary is 144 KB and the Swift binary is 201<br>KB. *That&#39;s<br>still a 40% increase*. Obviously it&#39;s much harder to test a large-scale<br>app, but I&#39;d like to know the percentage increase to expect if we were to<br>migrate to Swift.<br></p><p>On Wed, Jun 15, 2016 at 5:04 PM Saagar Jha &lt;saagarjha28 at gmail.com&gt; wrote:<br></p><p>&gt; Yep, I just took a simple app and opened up the ipa. 90% of it is the<br>&gt; “Frameworks” directory containing the Swift frameworks libSwiftCore.dylib,<br>&gt; libSwiftDarwin.dylib, etc.<br>&gt;<br>&gt;<br>&gt; On Wed, Jun 15, 2016 at 3:43 PM Seth Friedman via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Hi all,<br>&gt;&gt;<br>&gt;&gt; I&#39;ve seen a ton of blog posts written about all of the cool and exciting<br>&gt;&gt; things about Swift, but I haven&#39;t see anything really about the downsides<br>&gt;&gt; (besides the occasional post about pain points with interoperability).<br>&gt;&gt; What&#39;s of biggest concern to me when considering migrating my company&#39;s app<br>&gt;&gt; from Objective-C to Swift is binary size. Swift binary size seems to be<br>&gt;&gt; several times larger than Objective-C, and I&#39;m curious what data there is<br>&gt;&gt; in the community to support this suspicion.<br>&gt;&gt;<br>&gt;&gt; For some quick data points, I created a single view controller project in<br>&gt;&gt; Obj-C and one in Swift, turned off bitcode to get a better idea of what the<br>&gt;&gt; binary size on device would be, and archived them. I did this in Xcode 8<br>&gt;&gt; Beta 1 using Swift 3 so that I&#39;d make sure to get any binary size<br>&gt;&gt; improvements in Swift 3.<br>&gt;&gt;<br>&gt;&gt; The Obj-C IPA file was 639 KB. The Swift IPA file was *23.6 MB*. I know<br>&gt;&gt; that the Swift runtime libs are about 4.5 MB, but subtracting that, the<br>&gt;&gt; Swift IPA file is still *30x bigger than the Obj-C equivalent*. Next, I<br>&gt;&gt; tried adding a simple table view controller, a Person model with a first<br>&gt;&gt; and last name, and a data source that puts the first and last names in the<br>&gt;&gt; table view in an attempt to make a functioning app. However, the binary<br>&gt;&gt; sizes were about the same (the Obj-C one actually decreased to 635 KB).<br>&gt;&gt;<br>&gt;&gt; When we&#39;re talking about binary sizes this small, it&#39;s not a big deal,<br>&gt;&gt; but my company&#39;s app is currently 81 MB, about 35 MB of which is code, and<br>&gt;&gt; the rest is assets. If the code part of the binary size increases by orders<br>&gt;&gt; of magnitude like this, we&#39;ll go way over the 100 MB cellular limit that<br>&gt;&gt; Apple has set. This is also a really bad experience for customers in<br>&gt;&gt; emerging markets like China and India that have poor connections.<br>&gt;&gt;<br>&gt;&gt; Can anyone confirm or deny that Swift binary size is orders of magnitude<br>&gt;&gt; larger than Objective-C? I&#39;m looking for the specific increase we&#39;ll see to<br>&gt;&gt; take to my management in order to make a justification for whether it&#39;s<br>&gt;&gt; worth it for our customers.<br>&gt;&gt;<br>&gt;&gt; Thanks!<br>&gt;&gt;<br>&gt;&gt; Seth Friedman<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt; --<br>&gt; -Saagar Jha<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160616/0d724472/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>Swift Binary Size vs. Obj-C</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>June 15, 2016 at 05:00:00pm</p></header><div class="content"><p>Sorry, I totally missed the part where you mentioned the runtime libs.<br></p><p>I assume you&#39;re compiling your Objective-C code using the `-Os`<br>optimization level? Unfortunately, it doesn&#39;t seem like swiftc has any<br>flags for trading off speed and binary size. Part of the size discrepancy<br>is almost certainly due to the immaturity of the compiler.<br></p><p>This is probably only valid for the roughest of OOM estimates, but<br>LinkedIn&#39;s iOS app is 135 MB (don&#39;t know how it breaks down in terms of<br>assets vs code), and is almost entirely implemented in Swift. It&#39;s not much<br>to go off, but it might provide you with a starting point.<br></p><p>If any of your company&#39;s engineers are at WWDC, you might want to have them<br>ask the engineers during the developer tools labs.<br></p><p>Best,<br>Austin<br></p><p><br>On Wed, Jun 15, 2016 at 5:16 PM, Seth Friedman via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Thanks for the quick reply. You guys are right on part of it; the runtime<br>&gt; libraries are causing the majority of the increase. I thought the Swift<br>&gt; runtime libraries were supposed to only take up 4.5 MB though? Did they<br>&gt; increase with Swift 3? If I add up all of the libraries, they take up a<br>&gt; total of 22.88 MB in the binary. About how big would they be if I had<br>&gt; Bitcode turned on?<br>&gt;<br>&gt; That said, the actual Swift binary is still larger. In my table view<br>&gt; example, the Objective-C binary is 144 KB and the Swift binary is 201 KB. *That&#39;s<br>&gt; still a 40% increase*. Obviously it&#39;s much harder to test a large-scale<br>&gt; app, but I&#39;d like to know the percentage increase to expect if we were to<br>&gt; migrate to Swift.<br>&gt;<br>&gt; On Wed, Jun 15, 2016 at 5:04 PM Saagar Jha &lt;saagarjha28 at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; Yep, I just took a simple app and opened up the ipa. 90% of it is the<br>&gt;&gt; “Frameworks” directory containing the Swift frameworks libSwiftCore.dylib,<br>&gt;&gt; libSwiftDarwin.dylib, etc.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Wed, Jun 15, 2016 at 3:43 PM Seth Friedman via swift-users &lt;<br>&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Hi all,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I&#39;ve seen a ton of blog posts written about all of the cool and exciting<br>&gt;&gt;&gt; things about Swift, but I haven&#39;t see anything really about the downsides<br>&gt;&gt;&gt; (besides the occasional post about pain points with interoperability).<br>&gt;&gt;&gt; What&#39;s of biggest concern to me when considering migrating my company&#39;s app<br>&gt;&gt;&gt; from Objective-C to Swift is binary size. Swift binary size seems to be<br>&gt;&gt;&gt; several times larger than Objective-C, and I&#39;m curious what data there is<br>&gt;&gt;&gt; in the community to support this suspicion.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; For some quick data points, I created a single view controller project<br>&gt;&gt;&gt; in Obj-C and one in Swift, turned off bitcode to get a better idea of what<br>&gt;&gt;&gt; the binary size on device would be, and archived them. I did this in Xcode<br>&gt;&gt;&gt; 8 Beta 1 using Swift 3 so that I&#39;d make sure to get any binary size<br>&gt;&gt;&gt; improvements in Swift 3.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The Obj-C IPA file was 639 KB. The Swift IPA file was *23.6 MB*. I know<br>&gt;&gt;&gt; that the Swift runtime libs are about 4.5 MB, but subtracting that, the<br>&gt;&gt;&gt; Swift IPA file is still *30x bigger than the Obj-C equivalent*. Next, I<br>&gt;&gt;&gt; tried adding a simple table view controller, a Person model with a first<br>&gt;&gt;&gt; and last name, and a data source that puts the first and last names in the<br>&gt;&gt;&gt; table view in an attempt to make a functioning app. However, the binary<br>&gt;&gt;&gt; sizes were about the same (the Obj-C one actually decreased to 635 KB).<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; When we&#39;re talking about binary sizes this small, it&#39;s not a big deal,<br>&gt;&gt;&gt; but my company&#39;s app is currently 81 MB, about 35 MB of which is code, and<br>&gt;&gt;&gt; the rest is assets. If the code part of the binary size increases by orders<br>&gt;&gt;&gt; of magnitude like this, we&#39;ll go way over the 100 MB cellular limit that<br>&gt;&gt;&gt; Apple has set. This is also a really bad experience for customers in<br>&gt;&gt;&gt; emerging markets like China and India that have poor connections.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Can anyone confirm or deny that Swift binary size is orders of magnitude<br>&gt;&gt;&gt; larger than Objective-C? I&#39;m looking for the specific increase we&#39;ll see to<br>&gt;&gt;&gt; take to my management in order to make a justification for whether it&#39;s<br>&gt;&gt;&gt; worth it for our customers.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Thanks!<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Seth Friedman<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; -Saagar Jha<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160615/11de5c94/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a1faea18be9eb2d50c4edcd223f2d685?s=50"></div><header><strong>Swift Binary Size vs. Obj-C</strong> from <string>Seth Friedman</string> &lt;sethfri at gmail.com&gt;<p>June 16, 2016 at 12:00:00am</p></header><div class="content"><p>Does anyone know if the runtime libs definitively increased in size in<br>Swift 3? I could have sworn I heard 4.5 MB for Swift 2.<br></p><p>Also, does anyone know if there are plans to introduce a `-Os` equivalent<br>for Swift? (Yes, I&#39;m using that in Obj-C, to answer your question).<br></p><p>Thanks!<br></p><p>Seth<br></p><p>On Wed, Jun 15, 2016 at 5:27 PM Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br></p><p>&gt; Sorry, I totally missed the part where you mentioned the runtime libs.<br>&gt;<br>&gt; I assume you&#39;re compiling your Objective-C code using the `-Os`<br>&gt; optimization level? Unfortunately, it doesn&#39;t seem like swiftc has any<br>&gt; flags for trading off speed and binary size. Part of the size discrepancy<br>&gt; is almost certainly due to the immaturity of the compiler.<br>&gt;<br>&gt; This is probably only valid for the roughest of OOM estimates, but<br>&gt; LinkedIn&#39;s iOS app is 135 MB (don&#39;t know how it breaks down in terms of<br>&gt; assets vs code), and is almost entirely implemented in Swift. It&#39;s not much<br>&gt; to go off, but it might provide you with a starting point.<br>&gt;<br>&gt; If any of your company&#39;s engineers are at WWDC, you might want to have<br>&gt; them ask the engineers during the developer tools labs.<br>&gt;<br>&gt; Best,<br>&gt; Austin<br>&gt;<br>&gt;<br>&gt; On Wed, Jun 15, 2016 at 5:16 PM, Seth Friedman via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Thanks for the quick reply. You guys are right on part of it; the runtime<br>&gt;&gt; libraries are causing the majority of the increase. I thought the Swift<br>&gt;&gt; runtime libraries were supposed to only take up 4.5 MB though? Did they<br>&gt;&gt; increase with Swift 3? If I add up all of the libraries, they take up a<br>&gt;&gt; total of 22.88 MB in the binary. About how big would they be if I had<br>&gt;&gt; Bitcode turned on?<br>&gt;&gt;<br>&gt;&gt; That said, the actual Swift binary is still larger. In my table view<br>&gt;&gt; example, the Objective-C binary is 144 KB and the Swift binary is 201 KB. *That&#39;s<br>&gt;&gt; still a 40% increase*. Obviously it&#39;s much harder to test a large-scale<br>&gt;&gt; app, but I&#39;d like to know the percentage increase to expect if we were to<br>&gt;&gt; migrate to Swift.<br>&gt;&gt;<br>&gt;&gt; On Wed, Jun 15, 2016 at 5:04 PM Saagar Jha &lt;saagarjha28 at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Yep, I just took a simple app and opened up the ipa. 90% of it is the<br>&gt;&gt;&gt; “Frameworks” directory containing the Swift frameworks<br>&gt;&gt;&gt; libSwiftCore.dylib, libSwiftDarwin.dylib, etc.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Wed, Jun 15, 2016 at 3:43 PM Seth Friedman via swift-users &lt;<br>&gt;&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Hi all,<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I&#39;ve seen a ton of blog posts written about all of the cool and<br>&gt;&gt;&gt;&gt; exciting things about Swift, but I haven&#39;t see anything really about the<br>&gt;&gt;&gt;&gt; downsides (besides the occasional post about pain points with<br>&gt;&gt;&gt;&gt; interoperability). What&#39;s of biggest concern to me when considering<br>&gt;&gt;&gt;&gt; migrating my company&#39;s app from Objective-C to Swift is binary size. Swift<br>&gt;&gt;&gt;&gt; binary size seems to be several times larger than Objective-C, and I&#39;m<br>&gt;&gt;&gt;&gt; curious what data there is in the community to support this suspicion.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; For some quick data points, I created a single view controller project<br>&gt;&gt;&gt;&gt; in Obj-C and one in Swift, turned off bitcode to get a better idea of what<br>&gt;&gt;&gt;&gt; the binary size on device would be, and archived them. I did this in Xcode<br>&gt;&gt;&gt;&gt; 8 Beta 1 using Swift 3 so that I&#39;d make sure to get any binary size<br>&gt;&gt;&gt;&gt; improvements in Swift 3.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; The Obj-C IPA file was 639 KB. The Swift IPA file was *23.6 MB*. I<br>&gt;&gt;&gt;&gt; know that the Swift runtime libs are about 4.5 MB, but subtracting that,<br>&gt;&gt;&gt;&gt; the Swift IPA file is still *30x bigger than the Obj-C equivalent*.<br>&gt;&gt;&gt;&gt; Next, I tried adding a simple table view controller, a Person model with a<br>&gt;&gt;&gt;&gt; first and last name, and a data source that puts the first and last names<br>&gt;&gt;&gt;&gt; in the table view in an attempt to make a functioning app. However, the<br>&gt;&gt;&gt;&gt; binary sizes were about the same (the Obj-C one actually decreased to 635<br>&gt;&gt;&gt;&gt; KB).<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; When we&#39;re talking about binary sizes this small, it&#39;s not a big deal,<br>&gt;&gt;&gt;&gt; but my company&#39;s app is currently 81 MB, about 35 MB of which is code, and<br>&gt;&gt;&gt;&gt; the rest is assets. If the code part of the binary size increases by orders<br>&gt;&gt;&gt;&gt; of magnitude like this, we&#39;ll go way over the 100 MB cellular limit that<br>&gt;&gt;&gt;&gt; Apple has set. This is also a really bad experience for customers in<br>&gt;&gt;&gt;&gt; emerging markets like China and India that have poor connections.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Can anyone confirm or deny that Swift binary size is orders of<br>&gt;&gt;&gt;&gt; magnitude larger than Objective-C? I&#39;m looking for the specific increase<br>&gt;&gt;&gt;&gt; we&#39;ll see to take to my management in order to make a justification for<br>&gt;&gt;&gt;&gt; whether it&#39;s worth it for our customers.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Thanks!<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Seth Friedman<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; -Saagar Jha<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160616/e9d85b20/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc8eae356a7d359691154094ae6d56a7?s=50"></div><header><strong>Swift Binary Size vs. Obj-C</strong> from <string>Marco S Hyman</string> &lt;marc at snafu.org&gt;<p>June 15, 2016 at 05:00:00pm</p></header><div class="content"><p>On Jun 15, 2016, at 5:37 PM, Seth Friedman via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Does anyone know if the runtime libs definitively increased in size in Swift 3? I could have sworn I heard 4.5 MB for Swift 2.<br></p><p>The total of the Frameworks dir in a Swift 2.2 app I have is 5.8M.  The breakdown for this app is:<br></p><p> 64K	libswiftAppKit.dylib<br>4.8M	libswiftCore.dylib<br> 44K	libswiftCoreData.dylib<br>112K	libswiftCoreGraphics.dylib<br> 32K	libswiftCoreImage.dylib<br> 84K	libswiftDarwin.dylib<br> 40K	libswiftDispatch.dylib<br>516K	libswiftFoundation.dylib<br> 64K	libswiftObjectiveC.dylib<br> 48K	libswiftWebKit.dylib<br></p><p>So how big might partially depend upon what frameworks the app uses.  The same app in Swift 3 is 6.6M -- a little bit bigger.  It’s breakdown is:<br></p><p> 76K	libswiftAppKit.dylib<br>4.5M	libswiftCore.dylib<br> 44K	libswiftCoreData.dylib<br>116K	libswiftCoreGraphics.dylib<br> 36K	libswiftCoreImage.dylib<br> 68K	libswiftDarwin.dylib<br> 40K	libswiftDispatch.dylib<br>552K	libswiftFoundation.dylib<br> 36K	libswiftIOKit.dylib<br> 64K	libswiftObjectiveC.dylib<br>1.0M	libswiftSwiftOnoneSupport.dylib<br> 48K	libswiftWebKit.dylib<br> 36K	libswiftXPC.dylib<br></p><p>The Swift 3 version is a debug build, the swift 2.2 version isn’t.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a1faea18be9eb2d50c4edcd223f2d685?s=50"></div><header><strong>Swift Binary Size vs. Obj-C</strong> from <string>Seth Friedman</string> &lt;sethfri at gmail.com&gt;<p>June 16, 2016 at 02:00:00am</p></header><div class="content"><p>I&#39;m seeing 7.375 MB for Swift 3 dylibs with a Release build, and I don&#39;t<br>have WebKit, XPC, OnoneSupport, IOKit, CoreData, and AppKit in my binary<br>when I create just a bare bones app.<br></p><p>Thanks,<br>Seth<br></p><p>On Wed, Jun 15, 2016 at 5:59 PM Marco S Hyman &lt;marc at snafu.org&gt; wrote:<br></p><p>&gt; On Jun 15, 2016, at 5:37 PM, Seth Friedman via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Does anyone know if the runtime libs definitively increased in size in<br>&gt; Swift 3? I could have sworn I heard 4.5 MB for Swift 2.<br>&gt;<br>&gt; The total of the Frameworks dir in a Swift 2.2 app I have is 5.8M.  The<br>&gt; breakdown for this app is:<br>&gt;<br>&gt;  64K    libswiftAppKit.dylib<br>&gt; 4.8M    libswiftCore.dylib<br>&gt;  44K    libswiftCoreData.dylib<br>&gt; 112K    libswiftCoreGraphics.dylib<br>&gt;  32K    libswiftCoreImage.dylib<br>&gt;  84K    libswiftDarwin.dylib<br>&gt;  40K    libswiftDispatch.dylib<br>&gt; 516K    libswiftFoundation.dylib<br>&gt;  64K    libswiftObjectiveC.dylib<br>&gt;  48K    libswiftWebKit.dylib<br>&gt;<br>&gt; So how big might partially depend upon what frameworks the app uses.  The<br>&gt; same app in Swift 3 is 6.6M -- a little bit bigger.  It’s breakdown is:<br>&gt;<br>&gt;  76K    libswiftAppKit.dylib<br>&gt; 4.5M    libswiftCore.dylib<br>&gt;  44K    libswiftCoreData.dylib<br>&gt; 116K    libswiftCoreGraphics.dylib<br>&gt;  36K    libswiftCoreImage.dylib<br>&gt;  68K    libswiftDarwin.dylib<br>&gt;  40K    libswiftDispatch.dylib<br>&gt; 552K    libswiftFoundation.dylib<br>&gt;  36K    libswiftIOKit.dylib<br>&gt;  64K    libswiftObjectiveC.dylib<br>&gt; 1.0M    libswiftSwiftOnoneSupport.dylib<br>&gt;  48K    libswiftWebKit.dylib<br>&gt;  36K    libswiftXPC.dylib<br>&gt;<br>&gt; The Swift 3 version is a debug build, the swift 2.2 version isn’t.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160616/d5e2c294/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
