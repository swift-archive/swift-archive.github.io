<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0103: Make non-escaping closures the default</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>June 21, 2016 at 10:00:00pm</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;SE-0103: Make non-escaping closures the default&quot; begins now and runs through June 27. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0103-make-noescape-default.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>[Review] SE-0103: Make non-escaping closures the default</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>June 22, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br>+1 I think this will help getting safer code by default along with already approved  SE-0035 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0035-limit-inout-capture.md&gt;<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>Yes. I think that @nonescaping is a good default that goes along the same lines on why I use `let` over `var. <br>When I learned about @nonescaping I found myself using it more and more but it felt like having to use `const` in C++ and I thought why isn’t @noscape the default. <br>I think that is @nonescaping was available before swift 1 came out that the core team would have made it the default.  <br></p><p>How would somebody unsafely cast an escaping closure to a non escaping? Do we need to keep the @nonescaping attribute around for this to work?<br></p><p><br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>Yes. Safe by default. <br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>n/a<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Follow the discussing and proposal. <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/b97f8d1e/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e0f13ec2f877f56e92f812fc00a6a035?s=50"></div><header><strong>[Review] SE-0103: Make non-escaping closures the default</strong> from <string>Felipe Cypriano</string> &lt;felipe at cypriano.me&gt;<p>June 22, 2016 at 11:00:00am</p></header><div class="content"><p>&gt;<br>&gt; * What is your evaluation of the proposal?<br>My team just started using Swift a few weeks ago. But based on my<br>experience in Objective-C and problems with retain cycles I really<br>really like this proposal. Makes the code easier to grasp because by<br>just reading it I know that that closure cannot escape by default, so<br>the receiver will not hold onto to it for longer than I expect.<br> <br>I totally approve this change. Sounds awesome.<br> <br>&gt; * Is the problem being addressed significant enough to warrant a<br>&gt;   change to Swift?<br>Based on my experience using blocks and async callbacks in Objective-C,<br>yes. I expect Swift to be safe by default and this helps solving a<br>common problem for me.<br> <br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>Yes, safe by default. Without being hard to use.<br> <br>&gt; * If you have used other languages or libraries with a similar<br>&gt;   feature, how do you feel that this proposal compares to those?<br>N/A<br> <br>&gt; * How much effort did you put into your review? A glance, a quick<br>&gt;   reading, or an in-depth study?<br>I read the proposal.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/de0f3f87/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00464d59365595ecaebd19b44de312fa?s=50"></div><header><strong>[Review] SE-0103: Make non-escaping closures the default</strong> from <string>Gwynne Raskind</string> &lt;gwynne at darkrainfall.org&gt;<p>June 22, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>I’m strongly in favor - improvements on retain cycle issues are a huge win, and escaping as the default better fits the visual layout of the code and forces the developer to think more for the case that’s more conceptually complicated instead of the simple one. The way I read it also suggests that the compiler will be able to give better warnings with nonescaping as the default, and better warnings are rarely a bad thing :). I also like the normalization of the otherwise somewhat awkward and redundant @autoclosure(escaping) syntax - with nonescaping as the default, this is no longer a place where there’s a disconnect between closure behaviors in different contexts.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Definitely; retain cycles are bad enough without making them more painful than they need to be, matching the code’s behavior to its appearance is a net win for ease of use, and the removal of the @autoclosure(escaping) syntax cleans up a place where the language often looks as if it’s deliberately being pedantic in a context where the intent is obvious.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>I couldn’t imagine a better fit - an improvement to syntax, intent, consistency, and behavior all at once; being able to make such improvements is one of the fundamental essences of Swift (at least as I understand it :).<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I haven’t used any languages which have a similar feature, unless you count Objective-C and its lack of a &quot;nonescaping&quot; syntax (or concept) for blocks (I imagine Clang has code to optimize them when it does detect them, but it definitely wasn&#39;t part of the blocks spec last time I read it.) Speaking from that experience and what I’ve done with closures in Swift, I definitely like being able to declare explicitly that my closure doesn’t escape; it clarifies my intent without needing extra text in my headerdocs explaining the block’s semantics. I like it even better with nonescaping as the default - consumers of my API (including myself) don’t have to think nearly as hard about retain cycles in a surprising number of cases (I obviously don’t do much Objective-C bridging ^^; )<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I gave it a moderate amount of attention; I haven’t done deep research or refreshed my memory of the semantics further than a quick skim, but I don’t think there are many corner cases that need consideration for this proposal (which is another reason I like it and the way proposals in Swift are done in general). (Also, I generally trust my memory for semantics I was working with successfully an hour ago :)<br></p><p>-- Gwynne Raskind<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>[Review] SE-0103: Make non-escaping closures the default</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>June 22, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; The review of &quot;SE-0103: Make non-escaping closures the default&quot; begins now and runs through June 27. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0103-make-noescape-default.md<br></p><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>Huge +1. I think this will lead to safer, faster code by default and better errors and warnings.<br></p><p><br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes.<br></p><p><br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p><br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>n/a<br></p><p><br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Followed the discussion, read the proposal twice.<br></p><p>l8r<br>Sean<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0103: Make non-escaping closures the default</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>June 22, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>+11.  This is a much better default.  Escaping closures impose additional complexity on callers which should only be introduced when necessary.  <br></p><p>I am extremely unconvinced by the primary opposing argument that it should not be a breaking change to escape a closure that was not previously escaping.  This is a significant semantic change.  If an API author wants to reserve the right to escape a closure they should explicitly opt-in to that semantic from the start.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes.  Unfortunately many programmers are not careful about providing annotations that are not strictly required by the compiler.  This means that the compiler currently must treat many closures as escaping even though they will never actually escape.  This change makes the language safer and easier to use.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Very much so.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>No.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I followed and participated in the discussion and gave the final proposal a quick read.  I have always thought this is the right default for the language and am glad to see that this proposal is receiving positive feedback.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/15ed660cd9d971062f9dd5084932a698?s=50"></div><header><strong>[Review] SE-0103: Make non-escaping closures the default</strong> from <string>David Rönnqvist</string> &lt;david.ronnqvist at gmail.com&gt;<p>June 23, 2016 at 11:00:00am</p></header><div class="content"><p>&gt;    * What is your evaluation of the proposal?<br></p><p>+1. It&#39;s a positive change. It makes un-annotated code safer, and it moves the annotation to the case where one needs to think about captures as opposed to annotating the case where one doesn&#39;t have to think about captures.<br></p><p>&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes. It both helps in the un-annotated cases and it adds explicit annotation for escaping closures which serve as a documentation that one need to think about how variables are captured when invoking these functions/methods.  <br></p><p>&gt;    * Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes. It&#39;s goes with the safer of the two choices by default. I also imagine that it might be ever so slightly more performant I these cases.<br></p><p>&gt;    * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I&#39;ve not used another language that explicitly makes a distinction between escaping and non-escaping. <br></p><p>Objective-C blocks always capture everything, which has led to a common &quot;weakify/strongify dance&quot; in most cases, even in cases where there wasn&#39;t a cycle. <br></p><p>&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Read the proposal, skimmed thought the discussion, and a little experimentation with the current syntax.<br></p><p>- David <br></p><p>&gt; On 22 Jun 2016, at 07:03, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0103: Make non-escaping closures the default&quot; begins now and runs through June 27. The proposal is available here:<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/proposals/0103-make-noescape-default.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt;    https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt;    * What is your evaluation of the proposal?<br>&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;    * Does this proposal fit well with the feel and direction of Swift?<br>&gt;    * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/0ea0ab60/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/175ad9e0827a836bfb3d1d06fe3182ec?s=50"></div><header><strong>[Review] SE-0103: Make non-escaping closures the default</strong> from <string>Diego Sánchez</string> &lt;diego.sanchezr at gmail.com&gt;<p>June 23, 2016 at 10:00:00pm</p></header><div class="content"><p>** What is your evaluation of the proposal?*<br></p><p>-1<br></p><p>I find myself using 3 types of closures:<br> - Algorithm-like (filter, map etc.). non-escaping<br> - Completion closures: asynchronous operations: network requests, many<br>cocoa APIs, background image processing. escaping<br> - Data/dependency providers: userProvider(forId id: String) -&gt; User.<br>escaping (ok, can be non-escaping sometimes too)<br></p><p>In the codebases I&#39;m working with, escaping closures predominate clearly;<br>and most of the non-escaping ones refer to usages of the standard library.<br></p><p>Another point comes when changing things. Consider the following code:<br></p><p>func doSomething(closure: () -&gt; Void) {<br>self.doSomething2(closure)<br>}<br></p><p>func doSomething2(closure: () -&gt; Void) {<br>self.doSomething3(closure)<br>}<br></p><p>func doSomething3(closure: () -&gt; Void) {<br>closure()<br>}<br></p><p>If non-escaping is the default, and for some reason doSomething3&#39;s closure<br>needs to change to escaping, then I would have to change all the callers as<br>escaping.<br></p><p>To sump up, I see @noescape as something to opt-in for performance reasons<br>(or better static analysis as it was mentioned during the initial<br>discussion) but I don&#39;t think it&#39;s a good default.<br></p><p>** Is the problem being addressed significant enough to warrant a change to<br>Swift?*<br>I don&#39;t think there&#39;s a problem that needs to be fixed.<br></p><p>** Does this proposal fit well with the feel and direction of Swift?*<br>Not really. I think escaping is a safe good default that works for all<br>cases.<br></p><p>** If you have used other languages or libraries with a similar feature,<br>how do you feel that this proposal compares to those?*<br>NA<br></p><p>** How much effort did you put into your review? A glance, a quick reading,<br>or an in-depth study?*<br>Followed the discussion and read the proposal carefully.<br></p><p><br>2016-06-22 6:03 GMT+01:00 Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt;:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0103: Make non-escaping closures the default&quot; begins now<br>&gt; and runs through June 27. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0103-make-noescape-default.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction of Swift.<br>&gt; When writing your review, here are some questions you might want to answer<br>&gt; in your review:<br>&gt;<br>&gt;         * What is your evaluation of the proposal?<br>&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;         * If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/c1d5b6cb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/73a38bb7bc9528e31098defe30e68ea4?s=50"></div><header><strong>[Review] SE-0103: Make non-escaping closures the default</strong> from <string>Jean-Daniel Dupas</string> &lt;mailing at xenonium.com&gt;<p>June 24, 2016 at 12:00:00am</p></header><div class="content"><p>-1 for the proposal too<br></p><p>@nonescaping is more restrictive than escaping closure. You can’t pass a non escaping closure to a method that expects one, while the reverse is possible.<br></p><p>Nowadays, a method without any annotation defaults to be able to do anything. If we switch to non-escaping  as the default, a method without annotation would be restricted in what it can do with the closure. That’s why I don’t think this is a good move.<br></p><p>for example:<br></p><p>func myfunc(closure: () -&gt; Void) {<br>	stdlibfunction(closure)	<br>}<br></p><p>Today, whatever the stdlib function annotation is, it will compile. By reversing the annotation, that code may compile or not depending the stdlib function annotation.<br></p><p>Forcing the newcomer to learn advanced optimization technic to be able to write a simple function is very bad IMHO.<br></p><p><br>&gt; Le 23 juin 2016 à 23:06, Diego Sánchez via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; * What is your evaluation of the proposal?<br>&gt; <br>&gt; -1<br>&gt; <br>&gt; I find myself using 3 types of closures:<br>&gt;  - Algorithm-like (filter, map etc.). non-escaping<br>&gt;  - Completion closures: asynchronous operations: network requests, many cocoa APIs, background image processing. escaping<br>&gt;  - Data/dependency providers: userProvider(forId id: String) -&gt; User. escaping (ok, can be non-escaping sometimes too)<br>&gt; <br>&gt; In the codebases I&#39;m working with, escaping closures predominate clearly; and most of the non-escaping ones refer to usages of the standard library.<br>&gt; <br>&gt; Another point comes when changing things. Consider the following code:<br>&gt; <br>&gt; func doSomething(closure: () -&gt; Void) {<br>&gt; 	self.doSomething2(closure)<br>&gt; }<br>&gt; <br>&gt; func doSomething2(closure: () -&gt; Void) {<br>&gt; 	self.doSomething3(closure)<br>&gt; }<br>&gt; <br>&gt; func doSomething3(closure: () -&gt; Void) {<br>&gt; 	closure()<br>&gt; }<br>&gt; <br>&gt; If non-escaping is the default, and for some reason doSomething3&#39;s closure needs to change to escaping, then I would have to change all the callers as escaping.<br>&gt; <br>&gt; To sump up, I see @noescape as something to opt-in for performance reasons (or better static analysis as it was mentioned during the initial discussion) but I don&#39;t think it&#39;s a good default.<br>&gt; <br>&gt; * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; I don&#39;t think there&#39;s a problem that needs to be fixed.<br>&gt; <br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt; Not really. I think escaping is a safe good default that works for all cases.<br>&gt; <br>&gt; * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; NA<br>&gt; <br>&gt; * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; Followed the discussion and read the proposal carefully.<br>&gt; <br>&gt; <br>&gt; 2016-06-22 6:03 GMT+01:00 Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0103: Make non-escaping closures the default&quot; begins now and runs through June 27. The proposal is available here:<br>&gt; <br>&gt;         https://github.com/apple/swift-evolution/blob/master/proposals/0103-make-noescape-default.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0103-make-noescape-default.md&gt;<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt;         * What is your evaluation of the proposal?<br>&gt;         * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;         * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;         * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt;         https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/a3485102/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Review] SE-0103: Make non-escaping closures the default</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>June 23, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>I support it; if escaping and nonescaping are about equally common, but users would never discover a @nonescaping on their own, I think it makes sense to have @escaping instead.<br></p><p>However, I&#39;m concerned about migration. Rather than saying that all currently escaping closures will be marked with @escaping, the proposal says:<br></p><p>&gt; Existing code using the @noescape attribute will need to be migrated to remove the attribute since it will be the default. In addition, the compiler will need to detect escaping closures that are not marked with @escaping and create an error with a fixit to add the required attribute.<br></p><p>If I&#39;m reading this correctly, it&#39;s saying that the migrator will convert *all* closures into nonescaping closures and then let compiler errors guide the user to convert those that need to escape. This is going to add to the burden of migrating code to Swift 3. And the compiler may not catch all mistakes—consider, for instance, a framework which defines a public delegate protocol with a method that takes a completion or reply closure. That parameter probably ought to be @escaping, but if it&#39;s not, nothing in the module itself will break.<br></p><p>I think it would be better if the migrator added @escaping to all currently-non- at noescape closures, thus preserving current semantics. The cost of doing so—forgoing a speed improvement—is just not that large. And I can just imagine the tableflip I would do if I were assigned to migrate, say, Alamofire to Swift 3 and it forced me to manually annotate *every* closure parameter in the entire library.<br></p><p>Failing that, I would consider at least doing so on public methods of protocols and nonfinal classes, where the concerns are most acute. I would also like to see the migrator automatically add @escaping to closure parameters it heuristically determines are probably escaping—at the very least, `completion` and `completionHandler` trailing closures.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes. @noescape was just weird.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>None I can think of, unless Objective-C is somehow doing this behind my back.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick reading.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
