<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9f3e3f9871fd088e42df4509aa724367?s=50"></div><header><strong>Checking/getting custom objects from a collection</strong> from <string>Adriano Ferreira</string> &lt;adriano.ferreira at me.com&gt;<p>April  7, 2016 at 07:00:00pm</p></header><div class="content"><p>Hi everyone!<br></p><p>I’m experimenting with Entity-Component Systems &lt;https://en.wikipedia.org/wiki/Entity_component_system&gt; and I’d appreciate if you could help me working on how to check/get custom objects from a collection.<br></p><p>The idea is to verify if an entity contains a particular component and, if so, retrieve it.<br></p><p>Here’s the API I’d like work on:<br></p><p><br>// Entity Library<br>class Character: Entity {}<br></p><p>// Component Library<br>class HealthComponent: Component {<br>    var health = 100.0<br>    var isDead = false<br>}<br></p><p>class AttackComponent: Component {<br>    var range = 0<br>    var damage = 0<br>}<br></p><p>// Usage<br>var healthComponent = HealthComponent()<br>var attackComponent = AttackComponent()<br></p><p>var components: [ComponentType] = [healthComponent, attackComponent]<br>var char = Character(components: components)<br></p><p>let hc = char.get(component: HealthComponent)<br>let ac = char.get(component: AttackComponent)<br></p><p><br>So, what are your thoughts on the TODOs below?<br></p><p>—<br></p><p>import Foundation<br></p><p>protocol ComponentType {<br>    var entity: EntityType? { get }<br>}<br></p><p>protocol EntityType {<br>    var components: [ComponentType] { get }<br>    func get&lt;T: ComponentType&gt;(component c: T.Type) -&gt; T?<br>    func add(component c: ComponentType)<br>    func remove(component c: ComponentType)<br>}<br></p><p>class Component: ComponentType {<br>    var entity: EntityType?<br>}<br></p><p>class Entity: EntityType {<br>    var components = [ComponentType]()<br></p><p>    init(components: [ComponentType]) {<br>        for component in components {<br>            self.add(component: component)<br>        }<br>    }<br></p><p>    func get&lt;T: ComponentType&gt;(component c: T.Type) -&gt; T? {<br>        // TODO: - not sure how to work the types here<br>        // if `self` contains component of given type, return it<br>        // otherwise, return nil<br>    }<br></p><p>    func add(component c: ComponentType) {<br>        // TODO: - depends on the `get` function<br>        // if `self` already contains component, just return<br>        // otherwise, self.components += [component]<br>    }<br></p><p>    func remove(component c: ComponentType) {<br>        // TODO: - also depends on the `get` function<br>        // if `self` contains component, remove it<br>        // otherwise, just return<br>    }<br>}<br></p><p><br></p><p>Best,<br></p><p>—A<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160407/8ca4d1be/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Checking/getting custom objects from a collection</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>April  7, 2016 at 05:00:00pm</p></header><div class="content"><p>I’m not familiar with this design pattern, but it looks like Entity would just contain an array of Component. That makes add() and remove() straightforward.<br></p><p>I’m not sure about your get() method. It sounds as though the implication is that an entity could only contain a single component of a given class, but that sounds awfully limiting. (If Limb is a Component, then a Spider entity needs eight of them…) I also don’t believe that Swift is dynamic enough to be able to interrogate the classes of components that way at runtime. You could implement that at a higher level by adding a `type` property to ComponentType, that returns some component-type enumeration or maybe a string, and checking component types via that property.<br></p><p>—Jens<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Checking/getting custom objects from a collection</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>April  8, 2016 at 08:00:00am</p></header><div class="content"><p>Unity, the game engine, uses a component system heavily. It uses C# and retrieves components using generic functions. And no, it doesn&#39;t force having a single instance of each component class:<br></p><p>http://swiftlang.ng.bluemix.net/#/repl/7be36f2d70a31da3b6ab09b7b89277a4463c23b40c28e1663e56c959a1f3eca8<br></p><p>Crashes the compiler, but that&#39;s how I would implement it.<br></p><p>Sent from my iPad<br>&gt; On 08 Apr 2016, at 02:29, Jens Alfke via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; I’m not familiar with this design pattern, but it looks like Entity would just contain an array of Component. That makes add() and remove() straightforward.<br>&gt; <br>&gt; I’m not sure about your get() method. It sounds as though the implication is that an entity could only contain a single component of a given class, but that sounds awfully limiting. (If Limb is a Component, then a Spider entity needs eight of them…) I also don’t believe that Swift is dynamic enough to be able to interrogate the classes of components that way at runtime. You could implement that at a higher level by adding a `type` property to ComponentType, that returns some component-type enumeration or maybe a string, and checking component types via that property.<br>&gt; <br>&gt; —Jens<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6d3081a5b9c408dfecc2681ab82af734?s=50"></div><header><strong>Checking/getting custom objects from a collection</strong> from <string>Milos Rankovic</string> &lt;milos at milos-and-slavica.net&gt;<p>April  8, 2016 at 11:00:00am</p></header><div class="content"><p>This is just a sketch. There may be issues down the line (I’ve indicated some with `TODO`s), but it works and you can try it in the playground:<br></p><p>// Swift 2.2<br></p><p>// utility:<br>extension Array {<br>	func first &lt;T&gt; (_: T.Type) -&gt; T? {<br>		for e in self where e is T { return e as? T }<br>		return nil<br>	}<br>}<br></p><p>// Entity-Component System (sketch):<br>protocol Component { }<br></p><p>protocol Entity {<br>	static func with(_: Component...) -&gt; Self<br>	// TODO: make get only<br>	// also should be a set-by-type really, but that would <br>	// force `Component` to be a class (which may be worth it)<br>	var components: [Component] { get set } <br>	init()<br>	func component&lt;T: Component&gt;(_: T.Type) -&gt; T?<br>}<br></p><p>extension Entity {<br>	static func with(components: Component...) -&gt; Self {<br>		var entity = self.init()<br>		// TODO: enforce uniquely typed elements<br>		entity.components = components<br>		return entity<br>	}<br>	func component&lt;T: Component&gt;(_: T.Type) -&gt; T? {<br>		return self.components.first(T)<br>	}<br>}<br></p><p>// game:<br>struct Character: Entity {<br>	// TODO: make private<br>	var components: [Component] = [] <br>}<br></p><p>struct Health: Component {<br>	var percent = 100.0<br>	var dead = false<br>}<br></p><p>struct Attack: Component {<br>	var range = 0, damage = 0<br>}<br></p><p>// use:<br>var health = Health()<br>var attack = Attack()<br></p><p>var character = Character.with(health, attack)<br></p><p>character.component(Health)?.percent // 100<br></p><p>Hope this helps,<br></p><p>milos<br></p><p>&gt; On 8 Apr 2016, at 00:47, Adriano Ferreira via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi everyone!<br>&gt; <br>&gt; I’m experimenting with Entity-Component Systems &lt;https://en.wikipedia.org/wiki/Entity_component_system&gt; and I’d appreciate if you could help me working on how to check/get custom objects from a collection.<br>&gt; <br>&gt; The idea is to verify if an entity contains a particular component and, if so, retrieve it.<br>&gt; <br>&gt; Here’s the API I’d like work on:<br>&gt; <br>&gt; <br>&gt; // Entity Library<br>&gt; class Character: Entity {}<br>&gt; <br>&gt; // Component Library<br>&gt; class HealthComponent: Component {<br>&gt;     var health = 100.0<br>&gt;     var isDead = false<br>&gt; }<br>&gt; <br>&gt; class AttackComponent: Component {<br>&gt;     var range = 0<br>&gt;     var damage = 0<br>&gt; }<br>&gt; <br>&gt; // Usage<br>&gt; var healthComponent = HealthComponent()<br>&gt; var attackComponent = AttackComponent()<br>&gt; <br>&gt; var components: [ComponentType] = [healthComponent, attackComponent]<br>&gt; var char = Character(components: components)<br>&gt; <br>&gt; let hc = char.get(component: HealthComponent)<br>&gt; let ac = char.get(component: AttackComponent)<br>&gt; <br>&gt; <br>&gt; So, what are your thoughts on the TODOs below?<br>&gt; <br>&gt; —<br>&gt; <br>&gt; import Foundation<br>&gt; <br>&gt; protocol ComponentType {<br>&gt;     var entity: EntityType? { get }<br>&gt; }<br>&gt; <br>&gt; protocol EntityType {<br>&gt;     var components: [ComponentType] { get }<br>&gt;     func get&lt;T: ComponentType&gt;(component c: T.Type) -&gt; T?<br>&gt;     func add(component c: ComponentType)<br>&gt;     func remove(component c: ComponentType)<br>&gt; }<br>&gt; <br>&gt; class Component: ComponentType {<br>&gt;     var entity: EntityType?<br>&gt; }<br>&gt; <br>&gt; class Entity: EntityType {<br>&gt;     var components = [ComponentType]()<br>&gt; <br>&gt;     init(components: [ComponentType]) {<br>&gt;         for component in components {<br>&gt;             self.add(component: component)<br>&gt;         }<br>&gt;     }<br>&gt; <br>&gt;     func get&lt;T: ComponentType&gt;(component c: T.Type) -&gt; T? {<br>&gt;         // TODO: - not sure how to work the types here<br>&gt;         // if `self` contains component of given type, return it<br>&gt;         // otherwise, return nil<br>&gt;     }<br>&gt; <br>&gt;     func add(component c: ComponentType) {<br>&gt;         // TODO: - depends on the `get` function<br>&gt;         // if `self` already contains component, just return<br>&gt;         // otherwise, self.components += [component]<br>&gt;     }<br>&gt; <br>&gt;     func remove(component c: ComponentType) {<br>&gt;         // TODO: - also depends on the `get` function<br>&gt;         // if `self` contains component, remove it<br>&gt;         // otherwise, just return<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; <br>&gt; <br>&gt; Best,<br>&gt; <br>&gt; —A<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160408/99fb6061/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6d3081a5b9c408dfecc2681ab82af734?s=50"></div><header><strong>Checking/getting custom objects from a collection</strong> from <string>Milos Rankovic</string> &lt;milos at milos-and-slavica.net&gt;<p>April  8, 2016 at 12:00:00pm</p></header><div class="content"><p>A type-uniquing alternative (see my previous message):<br></p><p>// Swift 2.2<br></p><p>// Entity-Component System (sketch):<br>protocol Component {<br>	static var name: String { get } // not necessary (see comments below)<br>}<br></p><p>extension Component {<br>	// can be overridden with `let` by conforming types<br>	static var name: String { return String(self.dynamicType) }<br>}<br></p><p>protocol Entity {<br>	static func with(_: Component...) -&gt; Self<br>	var components: [String:Component] { get set }<br>	init()<br>	func component&lt;T: Component&gt;(_: T.Type) -&gt; T?<br>}<br></p><p>extension Entity {<br>	static func with(components: Component...) -&gt; Self {<br>		var d: [String:Component] = [:]<br>		for c in components { d[c.dynamicType.name/* String(c.dynamicType) */] = c }<br>		var entity = self.init()<br>		entity.components = d<br>		return entity<br>	}<br>	func component&lt;T: Component&gt;(_: T.Type) -&gt; T? {<br>		return self.components[T.name/* String(T) */] as? T<br>	}<br>	// TODO: mutating func add&lt;T: Component&gt;(_: T)<br>	// TODO: mutating func remove&lt;T: Component&gt;(_: T.Type)<br>}<br></p><p>// game:<br>struct Character: Entity {<br>	var components: [String:Component] = [:]<br>}<br></p><p>struct Health: Component {<br>	var percent = 100.0<br>	var dead: Bool { return percent &lt;= 0 }<br>}<br></p><p>struct Attack: Component {<br>	var range = 0, damage = 0<br>}<br></p><p>// use:<br>let health = Health()<br>let attack = Attack()<br></p><p>let character = Character.with(health, attack)<br></p><p>character.component(Health)?.percent // 100<br></p><p>milos<br></p><p>&gt; On 8 Apr 2016, at 11:05, Milos Rankovic via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; This is just a sketch. There may be issues down the line (I’ve indicated some with `TODO`s), but it works and you can try it in the playground:<br>&gt; <br>&gt; // Swift 2.2<br>&gt; <br>&gt; // utility:<br>&gt; extension Array {<br>&gt; 	func first &lt;T&gt; (_: T.Type) -&gt; T? {<br>&gt; 		for e in self where e is T { return e as? T }<br>&gt; 		return nil<br>&gt; 	}<br>&gt; }<br>&gt; <br>&gt; // Entity-Component System (sketch):<br>&gt; protocol Component { }<br>&gt; <br>&gt; protocol Entity {<br>&gt; 	static func with(_: Component...) -&gt; Self<br>&gt; 	// TODO: make get only<br>&gt; 	// also should be a set-by-type really, but that would <br>&gt; 	// force `Component` to be a class (which may be worth it)<br>&gt; 	var components: [Component] { get set } <br>&gt; 	init()<br>&gt; 	func component&lt;T: Component&gt;(_: T.Type) -&gt; T?<br>&gt; }<br>&gt; <br>&gt; extension Entity {<br>&gt; 	static func with(components: Component...) -&gt; Self {<br>&gt; 		var entity = self.init()<br>&gt; 		// TODO: enforce uniquely typed elements<br>&gt; 		entity.components = components<br>&gt; 		return entity<br>&gt; 	}<br>&gt; 	func component&lt;T: Component&gt;(_: T.Type) -&gt; T? {<br>&gt; 		return self.components.first(T)<br>&gt; 	}<br>&gt; }<br>&gt; <br>&gt; // game:<br>&gt; struct Character: Entity {<br>&gt; 	// TODO: make private<br>&gt; 	var components: [Component] = [] <br>&gt; }<br>&gt; <br>&gt; struct Health: Component {<br>&gt; 	var percent = 100.0<br>&gt; 	var dead = false<br>&gt; }<br>&gt; <br>&gt; struct Attack: Component {<br>&gt; 	var range = 0, damage = 0<br>&gt; }<br>&gt; <br>&gt; // use:<br>&gt; var health = Health()<br>&gt; var attack = Attack()<br>&gt; <br>&gt; var character = Character.with(health, attack)<br>&gt; <br>&gt; character.component(Health)?.percent // 100<br>&gt; <br>&gt; Hope this helps,<br>&gt; <br>&gt; milos<br>&gt; <br>&gt;&gt; On 8 Apr 2016, at 00:47, Adriano Ferreira via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi everyone!<br>&gt;&gt; <br>&gt;&gt; I’m experimenting with Entity-Component Systems &lt;https://en.wikipedia.org/wiki/Entity_component_system&gt; and I’d appreciate if you could help me working on how to check/get custom objects from a collection.<br>&gt;&gt; <br>&gt;&gt; The idea is to verify if an entity contains a particular component and, if so, retrieve it.<br>&gt;&gt; <br>&gt;&gt; Here’s the API I’d like work on:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; // Entity Library<br>&gt;&gt; class Character: Entity {}<br>&gt;&gt; <br>&gt;&gt; // Component Library<br>&gt;&gt; class HealthComponent: Component {<br>&gt;&gt;     var health = 100.0<br>&gt;&gt;     var isDead = false<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; class AttackComponent: Component {<br>&gt;&gt;     var range = 0<br>&gt;&gt;     var damage = 0<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; // Usage<br>&gt;&gt; var healthComponent = HealthComponent()<br>&gt;&gt; var attackComponent = AttackComponent()<br>&gt;&gt; <br>&gt;&gt; var components: [ComponentType] = [healthComponent, attackComponent]<br>&gt;&gt; var char = Character(components: components)<br>&gt;&gt; <br>&gt;&gt; let hc = char.get(component: HealthComponent)<br>&gt;&gt; let ac = char.get(component: AttackComponent)<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; So, what are your thoughts on the TODOs below?<br>&gt;&gt; <br>&gt;&gt; —<br>&gt;&gt; <br>&gt;&gt; import Foundation<br>&gt;&gt; <br>&gt;&gt; protocol ComponentType {<br>&gt;&gt;     var entity: EntityType? { get }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; protocol EntityType {<br>&gt;&gt;     var components: [ComponentType] { get }<br>&gt;&gt;     func get&lt;T: ComponentType&gt;(component c: T.Type) -&gt; T?<br>&gt;&gt;     func add(component c: ComponentType)<br>&gt;&gt;     func remove(component c: ComponentType)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; class Component: ComponentType {<br>&gt;&gt;     var entity: EntityType?<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; class Entity: EntityType {<br>&gt;&gt;     var components = [ComponentType]()<br>&gt;&gt; <br>&gt;&gt;     init(components: [ComponentType]) {<br>&gt;&gt;         for component in components {<br>&gt;&gt;             self.add(component: component)<br>&gt;&gt;         }<br>&gt;&gt;     }<br>&gt;&gt; <br>&gt;&gt;     func get&lt;T: ComponentType&gt;(component c: T.Type) -&gt; T? {<br>&gt;&gt;         // TODO: - not sure how to work the types here<br>&gt;&gt;         // if `self` contains component of given type, return it<br>&gt;&gt;         // otherwise, return nil<br>&gt;&gt;     }<br>&gt;&gt; <br>&gt;&gt;     func add(component c: ComponentType) {<br>&gt;&gt;         // TODO: - depends on the `get` function<br>&gt;&gt;         // if `self` already contains component, just return<br>&gt;&gt;         // otherwise, self.components += [component]<br>&gt;&gt;     }<br>&gt;&gt; <br>&gt;&gt;     func remove(component c: ComponentType) {<br>&gt;&gt;         // TODO: - also depends on the `get` function<br>&gt;&gt;         // if `self` contains component, remove it<br>&gt;&gt;         // otherwise, just return<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Best,<br>&gt;&gt; <br>&gt;&gt; —A<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160408/32157049/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9f3e3f9871fd088e42df4509aa724367?s=50"></div><header><strong>Checking/getting custom objects from a collection</strong> from <string>Adriano Ferreira</string> &lt;adriano.ferreira at me.com&gt;<p>April  8, 2016 at 10:00:00am</p></header><div class="content"><p>Milos,<br></p><p>Thanks for taking a look at it, I appreciate you suggestion.<br></p><p>It’s protocol-oriented, quite different from the idea I was trying to emulate — the one provided by GameplayKit.<br></p><p>Well, I tried it and it works great.<br></p><p><br>Now, would you implement those methods differently?<br></p><p>mutating func add&lt;T: Component&gt;(component: T) {<br>    self.components[T.name] = component<br>}<br></p><p>mutating func remove&lt;T: Component&gt;(_: T.Type) {<br>    self.components[T.name] = nil<br>}<br></p><p>Also, since the key to the components dictionary is the name, adding a component of the same type will replace the exiting one.<br></p><p>How would you change that so it would be possible to add some components more than once, as Jens mentioned?<br></p><p>Best,<br></p><p>—A<br></p><p>&gt; On Apr 8, 2016, at 7:12 AM, Milos Rankovic &lt;milos at milos-and-slavica.net&gt; wrote:<br>&gt; <br>&gt; A type-uniquing alternative (see my previous message):<br>&gt; <br>&gt; // Swift 2.2<br>&gt; <br>&gt; // Entity-Component System (sketch):<br>&gt; protocol Component {<br>&gt; 	static var name: String { get } // not necessary (see comments below)<br>&gt; }<br>&gt; <br>&gt; extension Component {<br>&gt; 	// can be overridden with `let` by conforming types<br>&gt; 	static var name: String { return String(self.dynamicType) }<br>&gt; }<br>&gt; <br>&gt; protocol Entity {<br>&gt; 	static func with(_: Component...) -&gt; Self<br>&gt; 	var components: [String:Component] { get set }<br>&gt; 	init()<br>&gt; 	func component&lt;T: Component&gt;(_: T.Type) -&gt; T?<br>&gt; }<br>&gt; <br>&gt; extension Entity {<br>&gt; 	static func with(components: Component...) -&gt; Self {<br>&gt; 		var d: [String:Component] = [:]<br>&gt; 		for c in components { d[c.dynamicType.name/* String(c.dynamicType) */] = c }<br>&gt; 		var entity = self.init()<br>&gt; 		entity.components = d<br>&gt; 		return entity<br>&gt; 	}<br>&gt; 	func component&lt;T: Component&gt;(_: T.Type) -&gt; T? {<br>&gt; 		return self.components[T.name/* String(T) */] as? T<br>&gt; 	}<br>&gt; 	// TODO: mutating func add&lt;T: Component&gt;(_: T)<br>&gt; 	// TODO: mutating func remove&lt;T: Component&gt;(_: T.Type)<br>&gt; }<br>&gt; <br>&gt; // game:<br>&gt; struct Character: Entity {<br>&gt; 	var components: [String:Component] = [:]<br>&gt; }<br>&gt; <br>&gt; struct Health: Component {<br>&gt; 	var percent = 100.0<br>&gt; 	var dead: Bool { return percent &lt;= 0 }<br>&gt; }<br>&gt; <br>&gt; struct Attack: Component {<br>&gt; 	var range = 0, damage = 0<br>&gt; }<br>&gt; <br>&gt; // use:<br>&gt; let health = Health()<br>&gt; let attack = Attack()<br>&gt; <br>&gt; let character = Character.with(health, attack)<br>&gt; <br>&gt; character.component(Health)?.percent // 100<br>&gt; <br>&gt; milos<br>&gt; <br>&gt;&gt; On 8 Apr 2016, at 11:05, Milos Rankovic via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; This is just a sketch. There may be issues down the line (I’ve indicated some with `TODO`s), but it works and you can try it in the playground:<br>&gt;&gt; <br>&gt;&gt; // Swift 2.2<br>&gt;&gt; <br>&gt;&gt; // utility:<br>&gt;&gt; extension Array {<br>&gt;&gt; 	func first &lt;T&gt; (_: T.Type) -&gt; T? {<br>&gt;&gt; 		for e in self where e is T { return e as? T }<br>&gt;&gt; 		return nil<br>&gt;&gt; 	}<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; // Entity-Component System (sketch):<br>&gt;&gt; protocol Component { }<br>&gt;&gt; <br>&gt;&gt; protocol Entity {<br>&gt;&gt; 	static func with(_: Component...) -&gt; Self<br>&gt;&gt; 	// TODO: make get only<br>&gt;&gt; 	// also should be a set-by-type really, but that would <br>&gt;&gt; 	// force `Component` to be a class (which may be worth it)<br>&gt;&gt; 	var components: [Component] { get set } <br>&gt;&gt; 	init()<br>&gt;&gt; 	func component&lt;T: Component&gt;(_: T.Type) -&gt; T?<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; extension Entity {<br>&gt;&gt; 	static func with(components: Component...) -&gt; Self {<br>&gt;&gt; 		var entity = self.init()<br>&gt;&gt; 		// TODO: enforce uniquely typed elements<br>&gt;&gt; 		entity.components = components<br>&gt;&gt; 		return entity<br>&gt;&gt; 	}<br>&gt;&gt; 	func component&lt;T: Component&gt;(_: T.Type) -&gt; T? {<br>&gt;&gt; 		return self.components.first(T)<br>&gt;&gt; 	}<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; // game:<br>&gt;&gt; struct Character: Entity {<br>&gt;&gt; 	// TODO: make private<br>&gt;&gt; 	var components: [Component] = [] <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; struct Health: Component {<br>&gt;&gt; 	var percent = 100.0<br>&gt;&gt; 	var dead = false<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; struct Attack: Component {<br>&gt;&gt; 	var range = 0, damage = 0<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; // use:<br>&gt;&gt; var health = Health()<br>&gt;&gt; var attack = Attack()<br>&gt;&gt; <br>&gt;&gt; var character = Character.with(health, attack)<br>&gt;&gt; <br>&gt;&gt; character.component(Health)?.percent // 100<br>&gt;&gt; <br>&gt;&gt; Hope this helps,<br>&gt;&gt; <br>&gt;&gt; milos<br>&gt;&gt; <br>&gt;&gt;&gt; On 8 Apr 2016, at 00:47, Adriano Ferreira via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi everyone!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’m experimenting with Entity-Component Systems &lt;https://en.wikipedia.org/wiki/Entity_component_system&gt; and I’d appreciate if you could help me working on how to check/get custom objects from a collection.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The idea is to verify if an entity contains a particular component and, if so, retrieve it.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Here’s the API I’d like work on:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; // Entity Library<br>&gt;&gt;&gt; class Character: Entity {}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; // Component Library<br>&gt;&gt;&gt; class HealthComponent: Component {<br>&gt;&gt;&gt;     var health = 100.0<br>&gt;&gt;&gt;     var isDead = false<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; class AttackComponent: Component {<br>&gt;&gt;&gt;     var range = 0<br>&gt;&gt;&gt;     var damage = 0<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; // Usage<br>&gt;&gt;&gt; var healthComponent = HealthComponent()<br>&gt;&gt;&gt; var attackComponent = AttackComponent()<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; var components: [ComponentType] = [healthComponent, attackComponent]<br>&gt;&gt;&gt; var char = Character(components: components)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let hc = char.get(component: HealthComponent)<br>&gt;&gt;&gt; let ac = char.get(component: AttackComponent)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; So, what are your thoughts on the TODOs below?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; —<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; import Foundation<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; protocol ComponentType {<br>&gt;&gt;&gt;     var entity: EntityType? { get }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; protocol EntityType {<br>&gt;&gt;&gt;     var components: [ComponentType] { get }<br>&gt;&gt;&gt;     func get&lt;T: ComponentType&gt;(component c: T.Type) -&gt; T?<br>&gt;&gt;&gt;     func add(component c: ComponentType)<br>&gt;&gt;&gt;     func remove(component c: ComponentType)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; class Component: ComponentType {<br>&gt;&gt;&gt;     var entity: EntityType?<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; class Entity: EntityType {<br>&gt;&gt;&gt;     var components = [ComponentType]()<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     init(components: [ComponentType]) {<br>&gt;&gt;&gt;         for component in components {<br>&gt;&gt;&gt;             self.add(component: component)<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     func get&lt;T: ComponentType&gt;(component c: T.Type) -&gt; T? {<br>&gt;&gt;&gt;         // TODO: - not sure how to work the types here<br>&gt;&gt;&gt;         // if `self` contains component of given type, return it<br>&gt;&gt;&gt;         // otherwise, return nil<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     func add(component c: ComponentType) {<br>&gt;&gt;&gt;         // TODO: - depends on the `get` function<br>&gt;&gt;&gt;         // if `self` already contains component, just return<br>&gt;&gt;&gt;         // otherwise, self.components += [component]<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     func remove(component c: ComponentType) {<br>&gt;&gt;&gt;         // TODO: - also depends on the `get` function<br>&gt;&gt;&gt;         // if `self` contains component, remove it<br>&gt;&gt;&gt;         // otherwise, just return<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Best,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; —A<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160408/4083ca85/attachment-0001.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
