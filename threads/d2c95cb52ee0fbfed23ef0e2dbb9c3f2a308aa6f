<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/742e884e233b8786ea2ad5d2a022c48e?s=50"></div><header><strong>Make getting a random number more intuitive</strong> from <string>David Keck</string> &lt;davidskeck at icloud.com&gt;<p>January 21, 2016 at 12:00:00pm</p></header><div class="content"><p>Is there a plan to make it easier to obtain a random number? Our the current method involving arc4random_uniform isn&#39;t very obvious IMO.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc2018ce0c170425a51033a54850a538?s=50"></div><header><strong>Make getting a random number more intuitive</strong> from <string>Lukas Stabe</string> &lt;ahti333 at gmail.com&gt;<p>January 21, 2016 at 09:00:00pm</p></header><div class="content"><p>In addition to not being very obvious, arc4random is also not supported on platforms other than OSX.<br></p><p>For a uni project I did recently, I wrote FastRNG[1], which provides a protocol for random number generators, some convenience functions, and a few cross-platform generators.<br></p><p>Be aware that the generators are not able to produce cryptographically secure random, and I’m pretty new to this field. I basically just ported some generators from http://xorshift.di.unimi.it/ to Swift.<br></p><p>I think something like this (the protocol mostly) might be a good fit for future versions of the standard library, but I don’t think it meets the goals stated for Swift 3.<br></p><p>For now, feel free to use FastRNG. I’d also be happy to merge PRs (I think a generator based on arc4random and /dev/random would be pretty cool to have).<br></p><p>— Lukas<br></p><p><br>[1]:  https://github.com/Ahti/FastRNG<br>&gt; On 21 Jan 2016, at 19:19, David Keck via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Is there a plan to make it easier to obtain a random number? Our the current method involving arc4random_uniform isn&#39;t very obvious IMO.<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Make getting a random number more intuitive</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>January 21, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Jan 21, 2016, at 12:07 PM, Lukas Stabe via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; In addition to not being very obvious, arc4random is also not supported on platforms other than OSX.<br></p><p>It’s also available in OpenBSD and FreeBSD.<br></p><p>&gt; Be aware that the generators are not able to produce cryptographically secure random, and I’m pretty new to this field. I basically just ported some generators from http://xorshift.di.unimi.it/ &lt;http://xorshift.di.unimi.it/&gt; to Swift.<br></p><p>In general it’s better to provide a cryptographically-safe RNG, so people can’t accidentally use an insecure one in a context that needs security. Since every OS provides one of these, I think it’d be best for Swift to provide a single RNG API whose implementation calls the platform’s RNG.<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160121/16f092da/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Make getting a random number more intuitive</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>January 21, 2016 at 02:00:00pm</p></header><div class="content"><p>* In terms of cross-platform random numbers, there are any number of third party libraries and you can use rand() on many platforms<br>* In terms of Mac, use GameplayKit for more rational generation. (http://ericasadun.com/2015/06/30/going-random-in-the-age-of-gameplaykit/ &lt;http://ericasadun.com/2015/06/30/going-random-in-the-age-of-gameplaykit/&gt;)  You choose the source and distribution.<br></p><p>Not sure this is a Swift question but I hope this helps<br></p><p>-- E<br></p><p><br>&gt; On Jan 21, 2016, at 11:19 AM, David Keck via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Is there a plan to make it easier to obtain a random number? Our the current method involving arc4random_uniform isn&#39;t very obvious IMO.<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160121/cbe5ba14/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Make getting a random number more intuitive</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>January 21, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jan 21, 2016, at 1:00 PM, Erica Sadun via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; * In terms of cross-platform random numbers, there are any number of third party libraries and you can use rand() on many platforms<br></p><p>rand() is deprecated because it uses a poor algorithm that doesn’t provide enough randomness. From the random(3) man page:<br></p><p>     The random() and srandom() functions have (almost) the same calling<br>     sequence and initialization properties as the rand(3) and srand(3) func-<br>     tions.  The difference is that rand(3) produces a much less random<br>     sequence -- in fact, the low dozen bits generated by rand go through a<br>     cyclic pattern.  All of the bits generated by random() are usable.  For<br>     example, `random()&amp;01&#39; will produce a random binary value.<br></p><p>I’d forgotten that random()s sidekick function srandomdev() seeds the RNG with a cryptographic source of entropy, making it usable for secure purposes. So these would be good functions to implement a Swift RNG with.<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160121/88afa22a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Make getting a random number more intuitive</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>January 21, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jan 21, 2016, at 1:24 PM, Jens Alfke via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 21, 2016, at 1:00 PM, Erica Sadun via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; * In terms of cross-platform random numbers, there are any number of third party libraries and you can use rand() on many platforms<br>&gt; <br>&gt; rand() is deprecated because it uses a poor algorithm that doesn’t provide enough randomness. From the random(3) man page:<br>&gt; <br>&gt;      The random() and srandom() functions have (almost) the same calling<br>&gt;      sequence and initialization properties as the rand(3) and srand(3) func-<br>&gt;      tions.  The difference is that rand(3) produces a much less random<br>&gt;      sequence -- in fact, the low dozen bits generated by rand go through a<br>&gt;      cyclic pattern.  All of the bits generated by random() are usable.  For<br>&gt;      example, `random()&amp;01&#39; will produce a random binary value.<br>&gt; <br>&gt; I’d forgotten that random()s sidekick function srandomdev() seeds the RNG with a cryptographic source of entropy, making it usable for secure purposes. So these would be good functions to implement a Swift RNG with.<br></p><p>Another important thing arc4random_uniform provides is a uniform distribution between 0 and an arbitrary upper bound. Naively constraining the output of random() by using &#39;%&#39; will give you a biased result if the bound isn&#39;t a power of 2.<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160121/f0946c8a/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Make getting a random number more intuitive</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>January 21, 2016 at 03:00:00pm</p></header><div class="content"><p>For some reason, when we were trying to test this the other day in irc, srandom()/random() weren&#39;t available (dunno why, because googling for linux man pages shows it should be), which is why we fell back to rand/srand.<br></p><p>-- E<br></p><p>&gt; On Jan 21, 2016, at 2:24 PM, Jens Alfke &lt;jens at mooseyard.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 21, 2016, at 1:00 PM, Erica Sadun via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; * In terms of cross-platform random numbers, there are any number of third party libraries and you can use rand() on many platforms<br>&gt; <br>&gt; rand() is deprecated because it uses a poor algorithm that doesn’t provide enough randomness. From the random(3) man page:<br>&gt; <br>&gt;      The random() and srandom() functions have (almost) the same calling<br>&gt;      sequence and initialization properties as the rand(3) and srand(3) func-<br>&gt;      tions.  The difference is that rand(3) produces a much less random<br>&gt;      sequence -- in fact, the low dozen bits generated by rand go through a<br>&gt;      cyclic pattern.  All of the bits generated by random() are usable.  For<br>&gt;      example, `random()&amp;01&#39; will produce a random binary value.<br>&gt; <br>&gt; I’d forgotten that random()s sidekick function srandomdev() seeds the RNG with a cryptographic source of entropy, making it usable for secure purposes. So these would be good functions to implement a Swift RNG with.<br>&gt; <br>&gt; —Jens<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160121/d193d02a/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
