<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Completing Generics] Arbitrary requirements in protocols</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April 12, 2016 at 03:00:00pm</p></header><div class="content"><p>on Tue Apr 12 2016, Douglas Gregor &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;     On Apr 11, 2016, at 1:01 AM, Jacob Bandes-Storch via swift-evolution<br>&gt;     &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;     Doug wrote this in the Completing Generics manifesto, under &quot;Minor<br>&gt;     extensions&quot;:<br>&gt;<br>&gt;         *Arbitrary requirements in protocols<br>&gt;<br>&gt;         Currently, a new protocol can inherit from other protocols, introduce<br>&gt;         new associated types, and add new conformance constraints to associated<br>&gt;         types (by redeclaring an associated type from an inherited protocol).<br>&gt;         However, one cannot express more general constraints. Building on the<br>&gt;         example from “Recursive protocol constraints”, we really want the<br>&gt;         element type of a Sequence’s SubSequence to be the same as the element<br>&gt;         type of the Sequence, e.g.,<br>&gt;<br>&gt;         protocol Sequence {<br>&gt;         associatedtype Iterator : IteratorProtocol<br>&gt;         …<br>&gt;         associatedtype SubSequence : Sequence where SubSequence.Iterator.Element<br>&gt;         == Iterator.Element<br>&gt;         }<br>&gt;<br>&gt;     +1.<br>&gt;<br>&gt;     To make it into Swift 3, would this feature require a proposal of its own? <br>&gt;<br>&gt; Yes. Also, be wary that the syntax above potentially conflicts with the syntax<br>&gt; discussed as &quot;moving the where clauses”:<br>&gt;<br>&gt; http://thread.gmane.org/gmane.comp.lang.swift.evolution/13886/focus=14058<br>&gt;<br>&gt;     How feasible would it be to implement on top of the current system?<br>&gt;<br>&gt; Definitely! The archetype builder would need to learn to check these extra where<br>&gt; clauses, and one would need to be sure that the constraint solver is picking<br>&gt; them up as well.<br></p><p>By the way, having this would enable us to massively simplify the<br>standard library, and potentially lots of user-written generic code,<br>too.  So I&#39;m very excited that someone&#39;s interested!<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Completing Generics] Arbitrary requirements in protocols</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>April 12, 2016 at 04:00:00pm</p></header><div class="content"><p>I&#39;m interested, but I&#39;m by no means claiming I&#39;ll have enough time to drive<br>any of the discussion/proposal/implementation. :-(<br></p><p>Jacob<br></p><p>On Tue, Apr 12, 2016 at 3:07 PM, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; on Tue Apr 12 2016, Douglas Gregor &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt;     On Apr 11, 2016, at 1:01 AM, Jacob Bandes-Storch via swift-evolution<br>&gt; &gt;     &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;     Doug wrote this in the Completing Generics manifesto, under &quot;Minor<br>&gt; &gt;     extensions&quot;:<br>&gt; &gt;<br>&gt; &gt;         *Arbitrary requirements in protocols<br>&gt; &gt;<br>&gt; &gt;         Currently, a new protocol can inherit from other protocols,<br>&gt; introduce<br>&gt; &gt;         new associated types, and add new conformance constraints to<br>&gt; associated<br>&gt; &gt;         types (by redeclaring an associated type from an inherited<br>&gt; protocol).<br>&gt; &gt;         However, one cannot express more general constraints. Building<br>&gt; on the<br>&gt; &gt;         example from “Recursive protocol constraints”, we really want the<br>&gt; &gt;         element type of a Sequence’s SubSequence to be the same as the<br>&gt; element<br>&gt; &gt;         type of the Sequence, e.g.,<br>&gt; &gt;<br>&gt; &gt;         protocol Sequence {<br>&gt; &gt;         associatedtype Iterator : IteratorProtocol<br>&gt; &gt;         …<br>&gt; &gt;         associatedtype SubSequence : Sequence where<br>&gt; SubSequence.Iterator.Element<br>&gt; &gt;         == Iterator.Element<br>&gt; &gt;         }<br>&gt; &gt;<br>&gt; &gt;     +1.<br>&gt; &gt;<br>&gt; &gt;     To make it into Swift 3, would this feature require a proposal of<br>&gt; its own?<br>&gt; &gt;<br>&gt; &gt; Yes. Also, be wary that the syntax above potentially conflicts with the<br>&gt; syntax<br>&gt; &gt; discussed as &quot;moving the where clauses”:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; http://thread.gmane.org/gmane.comp.lang.swift.evolution/13886/focus=14058<br>&gt; &gt;<br>&gt; &gt;     How feasible would it be to implement on top of the current system?<br>&gt; &gt;<br>&gt; &gt; Definitely! The archetype builder would need to learn to check these<br>&gt; extra where<br>&gt; &gt; clauses, and one would need to be sure that the constraint solver is<br>&gt; picking<br>&gt; &gt; them up as well.<br>&gt;<br>&gt; By the way, having this would enable us to massively simplify the<br>&gt; standard library, and potentially lots of user-written generic code,<br>&gt; too.  So I&#39;m very excited that someone&#39;s interested!<br>&gt;<br>&gt; --<br>&gt; Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160412/747c86d9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Completing Generics] Arbitrary requirements in protocols</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>April 13, 2016 at 08:00:00am</p></header><div class="content"><p>I wouldn&#39;t mind driving the discussion and proposal, because I&#39;d really like to see a more complete generics system. Before I start, can David or Doug, or someone else with a high-level view of the generics system tell me if this is where to start or if there is another feature in the Complete Generics manifesto which is more urgent first?<br></p><p>David<br></p><p>&gt; On 13 Apr 2016, at 01:46, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;m interested, but I&#39;m by no means claiming I&#39;ll have enough time to drive any of the discussion/proposal/implementation. :-(<br>&gt; <br>&gt; Jacob<br>&gt; <br>&gt;&gt; On Tue, Apr 12, 2016 at 3:07 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; on Tue Apr 12 2016, Douglas Gregor &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &gt;     On Apr 11, 2016, at 1:01 AM, Jacob Bandes-Storch via swift-evolution<br>&gt;&gt; &gt;     &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;     Doug wrote this in the Completing Generics manifesto, under &quot;Minor<br>&gt;&gt; &gt;     extensions&quot;:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;         *Arbitrary requirements in protocols<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;         Currently, a new protocol can inherit from other protocols, introduce<br>&gt;&gt; &gt;         new associated types, and add new conformance constraints to associated<br>&gt;&gt; &gt;         types (by redeclaring an associated type from an inherited protocol).<br>&gt;&gt; &gt;         However, one cannot express more general constraints. Building on the<br>&gt;&gt; &gt;         example from “Recursive protocol constraints”, we really want the<br>&gt;&gt; &gt;         element type of a Sequence’s SubSequence to be the same as the element<br>&gt;&gt; &gt;         type of the Sequence, e.g.,<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;         protocol Sequence {<br>&gt;&gt; &gt;         associatedtype Iterator : IteratorProtocol<br>&gt;&gt; &gt;         …<br>&gt;&gt; &gt;         associatedtype SubSequence : Sequence where SubSequence.Iterator.Element<br>&gt;&gt; &gt;         == Iterator.Element<br>&gt;&gt; &gt;         }<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;     +1.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;     To make it into Swift 3, would this feature require a proposal of its own?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Yes. Also, be wary that the syntax above potentially conflicts with the syntax<br>&gt;&gt; &gt; discussed as &quot;moving the where clauses”:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; http://thread.gmane.org/gmane.comp.lang.swift.evolution/13886/focus=14058<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;     How feasible would it be to implement on top of the current system?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Definitely! The archetype builder would need to learn to check these extra where<br>&gt;&gt; &gt; clauses, and one would need to be sure that the constraint solver is picking<br>&gt;&gt; &gt; them up as well.<br>&gt;&gt; <br>&gt;&gt; By the way, having this would enable us to massively simplify the<br>&gt;&gt; standard library, and potentially lots of user-written generic code,<br>&gt;&gt; too.  So I&#39;m very excited that someone&#39;s interested!<br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160413/5eeb649b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Completing Generics] Arbitrary requirements in protocols</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>April 13, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; On Apr 12, 2016, at 11:23 PM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I wouldn&#39;t mind driving the discussion and proposal, because I&#39;d really like to see a more complete generics system. Before I start, can David or Doug, or someone else with a high-level view of the generics system tell me if this is where to start or if there is another feature in the Complete Generics manifesto which is more urgent first?<br></p><p>I think this is a fine feature to focus on. It’s useful, fits well in the system, and it’s scope is small enough that it’s achievable.<br></p><p>	- Doug<br></p><p>&gt; <br>&gt; David<br>&gt; <br>&gt; On 13 Apr 2016, at 01:46, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; I&#39;m interested, but I&#39;m by no means claiming I&#39;ll have enough time to drive any of the discussion/proposal/implementation. :-(<br>&gt;&gt; <br>&gt;&gt; Jacob<br>&gt;&gt; <br>&gt;&gt; On Tue, Apr 12, 2016 at 3:07 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; on Tue Apr 12 2016, Douglas Gregor &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &gt;     On Apr 11, 2016, at 1:01 AM, Jacob Bandes-Storch via swift-evolution<br>&gt;&gt; &gt;     &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;     Doug wrote this in the Completing Generics manifesto, under &quot;Minor<br>&gt;&gt; &gt;     extensions&quot;:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;         *Arbitrary requirements in protocols<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;         Currently, a new protocol can inherit from other protocols, introduce<br>&gt;&gt; &gt;         new associated types, and add new conformance constraints to associated<br>&gt;&gt; &gt;         types (by redeclaring an associated type from an inherited protocol).<br>&gt;&gt; &gt;         However, one cannot express more general constraints. Building on the<br>&gt;&gt; &gt;         example from “Recursive protocol constraints”, we really want the<br>&gt;&gt; &gt;         element type of a Sequence’s SubSequence to be the same as the element<br>&gt;&gt; &gt;         type of the Sequence, e.g.,<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;         protocol Sequence {<br>&gt;&gt; &gt;         associatedtype Iterator : IteratorProtocol<br>&gt;&gt; &gt;         …<br>&gt;&gt; &gt;         associatedtype SubSequence : Sequence where SubSequence.Iterator.Element<br>&gt;&gt; &gt;         == Iterator.Element<br>&gt;&gt; &gt;         }<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;     +1.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;     To make it into Swift 3, would this feature require a proposal of its own?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Yes. Also, be wary that the syntax above potentially conflicts with the syntax<br>&gt;&gt; &gt; discussed as &quot;moving the where clauses”:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; http://thread.gmane.org/gmane.comp.lang.swift.evolution/13886/focus=14058 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/13886/focus=14058&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;     How feasible would it be to implement on top of the current system?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Definitely! The archetype builder would need to learn to check these extra where<br>&gt;&gt; &gt; clauses, and one would need to be sure that the constraint solver is picking<br>&gt;&gt; &gt; them up as well.<br>&gt;&gt; <br>&gt;&gt; By the way, having this would enable us to massively simplify the<br>&gt;&gt; standard library, and potentially lots of user-written generic code,<br>&gt;&gt; too.  So I&#39;m very excited that someone&#39;s interested!<br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160413/245d9bfd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Completing Generics] Arbitrary requirements in protocols</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April 13, 2016 at 10:00:00am</p></header><div class="content"><p>on Wed Apr 13 2016, Douglas Gregor &lt;dgregor-AT-apple.com&gt; wrote:<br></p><p>&gt;     On Apr 12, 2016, at 11:23 PM, David Hart via swift-evolution<br>&gt;     &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;     I wouldn&#39;t mind driving the discussion and proposal, because I&#39;d really like<br>&gt;     to see a more complete generics system. Before I start, can David or Doug,<br>&gt;     or someone else with a high-level view of the generics system tell me if<br>&gt;     this is where to start or if there is another feature in the Complete<br>&gt;     Generics manifesto which is more urgent first?<br>&gt;<br>&gt; I think this is a fine feature to focus on. It’s useful, fits well in the<br>&gt; system, and it’s scope is small enough that it’s achievable.<br></p><p>I think Doug is somewhat understating its usefulness ;-)<br></p><p>-- <br>Dave<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
