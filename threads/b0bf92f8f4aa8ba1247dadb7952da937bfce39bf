<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ade0c334ecff1448bb96f5f733bf1f83?s=50"></div><header><strong>Extending the for loop to have multiple clauses</strong> from <string>Chris Eidhof</string> &lt;chris at eidhof.nl&gt;<p>December  9, 2015 at 03:00:00pm</p></header><div class="content"><p>I think it could be really nice to extend the for-loop so that it can have multiple clauses. Much like in the if-let with multiple clauses, I could imagine a for-loop with multiple clauses:<br></p><p>var cards: [(Suit,Rank)] = []<br>for x in suits, y in ranks {<br>  cards.append((x,y))<br>}<br></p><p>This would be the same as writing:<br></p><p>var cards: [(Suit,Rank)] = []<br>for x in suits {<br>  for y in ranks {<br>    cards.append((x,y))}<br>  }<br>}<br></p><p>You could also do something like:<br></p><p>for x in input1, y in (x..&lt;end) {<br>   // Do something with (x,y)<br>}<br></p><p>In fact, once we would have that, we could combine both if-let and for, and make it more general, to end up with something like Haskell’s do-notation or C#’s LINQ. But that might be taking it too far...<br></p><p>Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2ff1daab58cd5e44a457908d1905c322?s=50"></div><header><strong>Extending the for loop to have multiple clauses</strong> from <string>Krzysztof Siejkowski</string> &lt;krzysztof at siejkowski.net&gt;<p>December  9, 2015 at 09:00:00pm</p></header><div class="content"><p>+1. Way more readable than nested loops and consistent with already existing syntax.<br></p><p><br>-----Original Message-----<br>From: Chris Eidhof via swift-evolution &lt;swift-evolution at swift.org&gt;<br>Reply: Chris Eidhof &lt;chris at eidhof.nl&gt;<br>Date: December 9, 2015 at 9:00:26 PM<br>To: swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>Subject:  [swift-evolution] Extending the for loop to have multiple clauses<br></p><p>&gt; I think it could be really nice to extend the for-loop so that it can have multiple clauses.  <br>&gt; Much like in the if-let with multiple clauses, I could imagine a for-loop with multiple  <br>&gt; clauses:<br>&gt;  <br>&gt; var cards: [(Suit,Rank)] = []<br>&gt; for x in suits, y in ranks {<br>&gt; cards.append((x,y))<br>&gt; }<br>&gt;  <br>&gt; This would be the same as writing:<br>&gt;  <br>&gt; var cards: [(Suit,Rank)] = []<br>&gt; for x in suits {<br>&gt; for y in ranks {<br>&gt; cards.append((x,y))}<br>&gt; }<br>&gt; }<br>&gt;  <br>&gt; You could also do something like:<br>&gt;  <br>&gt; for x in input1, y in (x..&gt; // Do something with (x,y)<br>&gt; }<br>&gt;  <br>&gt; In fact, once we would have that, we could combine both if-let and for, and make it more  <br>&gt; general, to end up with something like Haskell’s do-notation or C#’s LINQ. But that might  <br>&gt; be taking it too far...<br>&gt;  <br>&gt; Chris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Extending the for loop to have multiple clauses</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>December  9, 2015 at 08:00:00pm</p></header><div class="content"><p>Are you expecting that this could be combined with &quot;where&quot; clauses?<br></p><p>for x in range1 where x%2==0, y in range2 where y%3==0 {}<br></p><p>for x in range1, y in range2 where x%2==0 &amp;&amp; y%3==0 {}<br></p><p>I think it&#39;s a good idea, but the implications may be less than obvious.<br>On Wed, Dec 9, 2015 at 12:37 PM krzysztof at siejkowski.net via<br>swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; +1. Way more readable than nested loops and consistent with already<br>&gt; existing syntax.<br>&gt;<br>&gt;<br>&gt; -----Original Message-----<br>&gt; From: Chris Eidhof via swift-evolution &lt;swift-evolution at swift.org&gt;<br>&gt; Reply: Chris Eidhof &lt;chris at eidhof.nl&gt;<br>&gt; Date: December 9, 2015 at 9:00:26 PM<br>&gt; To: swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt; Subject:  [swift-evolution] Extending the for loop to have multiple clauses<br>&gt;<br>&gt; &gt; I think it could be really nice to extend the for-loop so that it can<br>&gt; have multiple clauses.<br>&gt; &gt; Much like in the if-let with multiple clauses, I could imagine a<br>&gt; for-loop with multiple<br>&gt; &gt; clauses:<br>&gt; &gt;<br>&gt; &gt; var cards: [(Suit,Rank)] = []<br>&gt; &gt; for x in suits, y in ranks {<br>&gt; &gt; cards.append((x,y))<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; This would be the same as writing:<br>&gt; &gt;<br>&gt; &gt; var cards: [(Suit,Rank)] = []<br>&gt; &gt; for x in suits {<br>&gt; &gt; for y in ranks {<br>&gt; &gt; cards.append((x,y))}<br>&gt; &gt; }<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; You could also do something like:<br>&gt; &gt;<br>&gt; &gt; for x in input1, y in (x..&gt; // Do something with (x,y)<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; In fact, once we would have that, we could combine both if-let and for,<br>&gt; and make it more<br>&gt; &gt; general, to end up with something like Haskell’s do-notation or C#’s<br>&gt; LINQ. But that might<br>&gt; &gt; be taking it too far...<br>&gt; &gt;<br>&gt; &gt; Chris<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151209/ab05f46b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ade0c334ecff1448bb96f5f733bf1f83?s=50"></div><header><strong>Extending the for loop to have multiple clauses</strong> from <string>Chris Eidhof</string> &lt;chris at eidhof.nl&gt;<p>December  9, 2015 at 04:00:00pm</p></header><div class="content"><p>Yes, it’d be great if you can combine it with where. Alternatively, it could be interesting to instead explore array comprehension syntax, rather than making `for` smarter. That’d allow for a more functional style. For example, Norvig’s spelling corrector (http://norvig.com/spell-correct.html) would then be very straightforward to port.<br></p><p>Re the x operator: it’s even easier if you define it with flatMap. However, the for syntax is different, because the second clause can depend on the first...<br></p><p>Chris<br></p><p>&gt; On 09 Dec 2015, at 15:48, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt; Are you expecting that this could be combined with &quot;where&quot; clauses?<br>&gt; <br>&gt; for x in range1 where x%2==0, y in range2 where y%3==0 {}<br>&gt; <br>&gt; for x in range1, y in range2 where x%2==0 &amp;&amp; y%3==0 {}<br>&gt; <br>&gt; I think it&#39;s a good idea, but the implications may be less than obvious.<br>&gt; On Wed, Dec 9, 2015 at 12:37 PM krzysztof at siejkowski.net &lt;mailto:krzysztof at siejkowski.net&gt; via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; +1. Way more readable than nested loops and consistent with already existing syntax.<br>&gt; <br>&gt; <br>&gt; -----Original Message-----<br>&gt; From: Chris Eidhof via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt; Reply: Chris Eidhof &lt;chris at eidhof.nl &lt;mailto:chris at eidhof.nl&gt;&gt;<br>&gt; Date: December 9, 2015 at 9:00:26 PM<br>&gt; To: swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt; Subject:  [swift-evolution] Extending the for loop to have multiple clauses<br>&gt; <br>&gt; &gt; I think it could be really nice to extend the for-loop so that it can have multiple clauses.<br>&gt; &gt; Much like in the if-let with multiple clauses, I could imagine a for-loop with multiple<br>&gt; &gt; clauses:<br>&gt; &gt;<br>&gt; &gt; var cards: [(Suit,Rank)] = []<br>&gt; &gt; for x in suits, y in ranks {<br>&gt; &gt; cards.append((x,y))<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; This would be the same as writing:<br>&gt; &gt;<br>&gt; &gt; var cards: [(Suit,Rank)] = []<br>&gt; &gt; for x in suits {<br>&gt; &gt; for y in ranks {<br>&gt; &gt; cards.append((x,y))}<br>&gt; &gt; }<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; You could also do something like:<br>&gt; &gt;<br>&gt; &gt; for x in input1, y in (x..&gt; // Do something with (x,y)<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; In fact, once we would have that, we could combine both if-let and for, and make it more<br>&gt; &gt; general, to end up with something like Haskell’s do-notation or C#’s LINQ. But that might<br>&gt; &gt; be taking it too far...<br>&gt; &gt;<br>&gt; &gt; Chris<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151209/42c66b4a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2861bfeb71de9de58206bb6ae750bc2f?s=50"></div><header><strong>Extending the for loop to have multiple clauses</strong> from <string>ilya</string> &lt;ilya.nikokoshev at gmail.com&gt;<p>December 10, 2015 at 12:00:00am</p></header><div class="content"><p>&gt;  the second clause can depend on the first...<br></p><p>For those cases, I&#39;d really prefer plain dumb old for loop on two separate<br>visually distinct lines :)<br></p><p>On Thu, Dec 10, 2015 at 12:13 AM, Chris Eidhof via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Yes, it’d be great if you can combine it with where. Alternatively, it<br>&gt; could be interesting to instead explore array comprehension syntax, rather<br>&gt; than making `for` smarter. That’d allow for a more functional style. For<br>&gt; example, Norvig’s spelling corrector (http://norvig.com/spell-correct.html)<br>&gt; would then be very straightforward to port.<br>&gt;<br>&gt; Re the x operator: it’s even easier if you define it with flatMap.<br>&gt; However, the for syntax is different, because the second clause can depend<br>&gt; on the first...<br>&gt;<br>&gt; Chris<br>&gt;<br>&gt;<br>&gt; On 09 Dec 2015, at 15:48, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt;<br>&gt; Are you expecting that this could be combined with &quot;where&quot; clauses?<br>&gt;<br>&gt; for x in range1 where x%2==0, y in range2 where y%3==0 {}<br>&gt;<br>&gt; for x in range1, y in range2 where x%2==0 &amp;&amp; y%3==0 {}<br>&gt;<br>&gt; I think it&#39;s a good idea, but the implications may be less than obvious.<br>&gt; On Wed, Dec 9, 2015 at 12:37 PM krzysztof at siejkowski.net via<br>&gt; swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; +1. Way more readable than nested loops and consistent with already<br>&gt;&gt; existing syntax.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; -----Original Message-----<br>&gt;&gt; From: Chris Eidhof via swift-evolution &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; Reply: Chris Eidhof &lt;chris at eidhof.nl&gt;<br>&gt;&gt; Date: December 9, 2015 at 9:00:26 PM<br>&gt;&gt; To: swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; Subject:  [swift-evolution] Extending the for loop to have multiple<br>&gt;&gt; clauses<br>&gt;&gt;<br>&gt;&gt; &gt; I think it could be really nice to extend the for-loop so that it can<br>&gt;&gt; have multiple clauses.<br>&gt;&gt; &gt; Much like in the if-let with multiple clauses, I could imagine a<br>&gt;&gt; for-loop with multiple<br>&gt;&gt; &gt; clauses:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; var cards: [(Suit,Rank)] = []<br>&gt;&gt; &gt; for x in suits, y in ranks {<br>&gt;&gt; &gt; cards.append((x,y))<br>&gt;&gt; &gt; }<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; This would be the same as writing:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; var cards: [(Suit,Rank)] = []<br>&gt;&gt; &gt; for x in suits {<br>&gt;&gt; &gt; for y in ranks {<br>&gt;&gt; &gt; cards.append((x,y))}<br>&gt;&gt; &gt; }<br>&gt;&gt; &gt; }<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; You could also do something like:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; for x in input1, y in (x..&gt; // Do something with (x,y)<br>&gt;&gt; &gt; }<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; In fact, once we would have that, we could combine both if-let and for,<br>&gt;&gt; and make it more<br>&gt;&gt; &gt; general, to end up with something like Haskell’s do-notation or C#’s<br>&gt;&gt; LINQ. But that might<br>&gt;&gt; &gt; be taking it too far...<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Chris<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/6e53e8a0/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2861bfeb71de9de58206bb6ae750bc2f?s=50"></div><header><strong>Extending the for loop to have multiple clauses</strong> from <string>ilya</string> &lt;ilya.nikokoshev at gmail.com&gt;<p>December  9, 2015 at 11:00:00pm</p></header><div class="content"><p>You can define a &#39;times&#39; operation to work with any sequences, e.g.<br></p><p>import Foundation<br></p><p>enum Suits: String {<br>    case Spades = &quot;♠&quot;<br>    case Hearts = &quot;♥&quot;<br>    case Diamonds = &quot;♦&quot;<br>    case Clubs = &quot;♣&quot;<br>}<br></p><p>let suits:[Suits] = [.Spades, .Hearts, .Diamonds, .Clubs]<br>let ranks = [&quot;A&quot;, &quot;K&quot;, &quot;Q&quot;, &quot;J&quot;, &quot;10&quot;, &quot;9&quot;, &quot;8&quot;, &quot;7&quot;, &quot;6&quot;, &quot;5&quot;, &quot;4&quot;, &quot;3&quot;,<br>&quot;2&quot;]<br></p><p>infix operator ⨉ {}<br></p><p>func ⨉&lt;A:SequenceType, B:SequenceType&gt;(lhs: A, rhs: B)<br>    -&gt; [(A.Generator.Element, B.Generator.Element)] {<br></p><p>    return lhs<br>        .map{ left in rhs.map{ right in (left, right) }}<br>        .reduce([], combine: +)<br>}<br></p><p>[1, 2] ⨉ [3, 4]<br></p><p>func shuffled() -&gt; [String] {<br>    var cards:[String] = []<br></p><p>    for (suit, rank) in suits ⨉ ranks {<br>        let random = Int(abs(rand())) % (cards.count + 1)<br>        cards.insert(suit.rawValue + rank, atIndex: random)<br>    }<br></p><p>    return cards<br>}<br></p><p>shuffled().joinWithSeparator(&quot; &quot;)<br></p><p><br></p><p><br>On Wed, Dec 9, 2015 at 23:00 Chris Eidhof via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I think it could be really nice to extend the for-loop so that it can have<br>&gt; multiple clauses. Much like in the if-let with multiple clauses, I could<br>&gt; imagine a for-loop with multiple clauses:<br>&gt;<br>&gt; var cards: [(Suit,Rank)] = []<br>&gt; for x in suits, y in ranks {<br>&gt;   cards.append((x,y))<br>&gt; }<br>&gt;<br>&gt; This would be the same as writing:<br>&gt;<br>&gt; var cards: [(Suit,Rank)] = []<br>&gt; for x in suits {<br>&gt;   for y in ranks {<br>&gt;     cards.append((x,y))}<br>&gt;   }<br>&gt; }<br>&gt;<br>&gt; You could also do something like:<br>&gt;<br>&gt; for x in input1, y in (x..&lt;end) {<br>&gt;    // Do something with (x,y)<br>&gt; }<br>&gt;<br>&gt; In fact, once we would have that, we could combine both if-let and for,<br>&gt; and make it more general, to end up with something like Haskell’s<br>&gt; do-notation or C#’s LINQ. But that might be taking it too far...<br>&gt;<br>&gt; Chris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151209/547552f8/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>Extending the for loop to have multiple clauses</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>December  9, 2015 at 01:00:00pm</p></header><div class="content"><p>The proposed extension looks to me like is iterating both the suits and<br>rank at the same time. In that case I think is a great idea.<br></p><p>var cards: [(Suit,Rank)] = []<br>for x in suits, y in ranks {<br>  cards.append((x,y))<br>}<br></p><p>What I am expecting:<br></p><p>x1, y1<br>x2, y2<br>x3, y3<br>etc<br></p><p>This reminds me that this is one of the ways I use the C-style for-loop.<br>The alternative now:<br></p><p>for (index, x) in suits.enumerate(){<br>   let y = ranks[index]<br>   cards.append((x,y))<br></p><p>}<br></p><p><br></p><p><br></p><p><br>On Wed, Dec 9, 2015 at 12:00 PM, Chris Eidhof via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I think it could be really nice to extend the for-loop so that it can have<br>&gt; multiple clauses. Much like in the if-let with multiple clauses, I could<br>&gt; imagine a for-loop with multiple clauses:<br>&gt;<br>&gt; var cards: [(Suit,Rank)] = []<br>&gt; for x in suits, y in ranks {<br>&gt;   cards.append((x,y))<br>&gt; }<br>&gt;<br>&gt; This would be the same as writing:<br>&gt;<br>&gt; var cards: [(Suit,Rank)] = []<br>&gt; for x in suits {<br>&gt;   for y in ranks {<br>&gt;     cards.append((x,y))}<br>&gt;   }<br>&gt; }<br>&gt;<br>&gt; You could also do something like:<br>&gt;<br>&gt; for x in input1, y in (x..&lt;end) {<br>&gt;    // Do something with (x,y)<br>&gt; }<br>&gt;<br>&gt; In fact, once we would have that, we could combine both if-let and for,<br>&gt; and make it more general, to end up with something like Haskell’s<br>&gt; do-notation or C#’s LINQ. But that might be taking it too far...<br>&gt;<br>&gt; Chris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151209/ee473a95/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f9e638540251a5a2a70ae516ad544281?s=50"></div><header><strong>Extending the for loop to have multiple clauses</strong> from <string>Frederick Kellison-Linn</string> &lt;fred.kl at me.com&gt;<p>December  9, 2015 at 04:00:00pm</p></header><div class="content"><p>Agreed. My original response, which did not get reply all’ed:<br></p><p>To me, this notation seems slightly confusing. The current syntax with an inner loop makes the time complexity apparent, and more accurately represents what you are trying to do (in this example, build the Cartesian product of suits and ranks).<br></p><p>The &quot;for x in suits, y in ranks&quot; notation hides the inner loop(s) and is not immediately apparent in its function (does this construct increment both x and y every iteration?). I definitely have seen the type of construct you are proposing many times, so there is value in considering a more concise way of writing it, but perhaps there is better notation. <br></p><p>FKL<br></p><p>&gt; On Dec 9, 2015, at 4:31 PM, J. Cheyo Jimenez via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The proposed extension looks to me like is iterating both the suits and rank at the same time. In that case I think is a great idea.<br>&gt; <br>&gt; var cards: [(Suit,Rank)] = []<br>&gt; for x in suits, y in ranks {<br>&gt;   cards.append((x,y))<br>&gt; }<br>&gt; <br>&gt; What I am expecting:<br>&gt; <br>&gt; x1, y1<br>&gt; x2, y2<br>&gt; x3, y3<br>&gt; etc<br>&gt; <br>&gt; This reminds me that this is one of the ways I use the C-style for-loop. <br>&gt; The alternative now:<br>&gt; <br>&gt; for (index, x) in suits.enumerate(){<br>&gt;    let y = ranks[index]<br>&gt;    cards.append((x,y))<br>&gt; }<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; On Wed, Dec 9, 2015 at 12:00 PM, Chris Eidhof via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; I think it could be really nice to extend the for-loop so that it can have multiple clauses. Much like in the if-let with multiple clauses, I could imagine a for-loop with multiple clauses:<br>&gt; <br>&gt; var cards: [(Suit,Rank)] = []<br>&gt; for x in suits, y in ranks {<br>&gt;   cards.append((x,y))<br>&gt; }<br>&gt; <br>&gt; This would be the same as writing:<br>&gt; <br>&gt; var cards: [(Suit,Rank)] = []<br>&gt; for x in suits {<br>&gt;   for y in ranks {<br>&gt;     cards.append((x,y))}<br>&gt;   }<br>&gt; }<br>&gt; <br>&gt; You could also do something like:<br>&gt; <br>&gt; for x in input1, y in (x..&lt;end) {<br>&gt;    // Do something with (x,y)<br>&gt; }<br>&gt; <br>&gt; In fact, once we would have that, we could combine both if-let and for, and make it more general, to end up with something like Haskell’s do-notation or C#’s LINQ. But that might be taking it too far...<br>&gt; <br>&gt; Chris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151209/be2c657c/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2861bfeb71de9de58206bb6ae750bc2f?s=50"></div><header><strong>Extending the for loop to have multiple clauses</strong> from <string>ilya</string> &lt;ilya.nikokoshev at gmail.com&gt;<p>December 10, 2015 at 12:00:00am</p></header><div class="content"><p>&gt; The proposed extension looks to me like is iterating both the suits and<br>rank at the same time.<br>So, it looks like different things to different people, which doesn&#39;t bode<br>well for its acceptance.<br></p><p>&gt; The alternative now:<br>That&#39;s what zip is for:<br></p><p>var count = 0<br></p><p>for (x, y) in zip(ranks, suits) {<br>    count += 1<br>}<br></p><p>count // 4<br></p><p>On Thu, Dec 10, 2015 at 12:31 AM, J. Cheyo Jimenez via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; The proposed extension looks to me like is iterating both the suits and<br>&gt; rank at the same time. In that case I think is a great idea.<br>&gt;<br>&gt; var cards: [(Suit,Rank)] = []<br>&gt; for x in suits, y in ranks {<br>&gt;   cards.append((x,y))<br>&gt; }<br>&gt;<br>&gt; What I am expecting:<br>&gt;<br>&gt; x1, y1<br>&gt; x2, y2<br>&gt; x3, y3<br>&gt; etc<br>&gt;<br>&gt; This reminds me that this is one of the ways I use the C-style for-loop.<br>&gt; The alternative now:<br>&gt;<br>&gt; for (index, x) in suits.enumerate(){<br>&gt;    let y = ranks[index]<br>&gt;    cards.append((x,y))<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Wed, Dec 9, 2015 at 12:00 PM, Chris Eidhof via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; I think it could be really nice to extend the for-loop so that it can<br>&gt;&gt; have multiple clauses. Much like in the if-let with multiple clauses, I<br>&gt;&gt; could imagine a for-loop with multiple clauses:<br>&gt;&gt;<br>&gt;&gt; var cards: [(Suit,Rank)] = []<br>&gt;&gt; for x in suits, y in ranks {<br>&gt;&gt;   cards.append((x,y))<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; This would be the same as writing:<br>&gt;&gt;<br>&gt;&gt; var cards: [(Suit,Rank)] = []<br>&gt;&gt; for x in suits {<br>&gt;&gt;   for y in ranks {<br>&gt;&gt;     cards.append((x,y))}<br>&gt;&gt;   }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; You could also do something like:<br>&gt;&gt;<br>&gt;&gt; for x in input1, y in (x..&lt;end) {<br>&gt;&gt;    // Do something with (x,y)<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; In fact, once we would have that, we could combine both if-let and for,<br>&gt;&gt; and make it more general, to end up with something like Haskell’s<br>&gt;&gt; do-notation or C#’s LINQ. But that might be taking it too far...<br>&gt;&gt;<br>&gt;&gt; Chris<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/5e243c6e/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>Extending the for loop to have multiple clauses</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>December  9, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt; On Dec 9, 2015, at 12:00 PM, Chris Eidhof via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I think it could be really nice to extend the for-loop so that it can have multiple clauses. Much like in the if-let with multiple clauses, I could imagine a for-loop with multiple clauses:<br>&gt; <br>&gt; var cards: [(Suit,Rank)] = []<br>&gt; for x in suits, y in ranks {<br>&gt;  cards.append((x,y))<br>&gt; }<br></p><p><br>Isn’t this just<br></p><p>	for (x, y) in zip2(suits, ranks) {<br>	}<br></p><p>?<br></p><p>	- Doug<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Extending the for loop to have multiple clauses</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>December  9, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt;&gt; I think it could be really nice to extend the for-loop so that it can have multiple clauses. Much like in the if-let with multiple clauses, I could imagine a for-loop with multiple clauses:<br>&gt;&gt; <br>&gt;&gt; var cards: [(Suit,Rank)] = []<br>&gt;&gt; for x in suits, y in ranks {<br>&gt;&gt; cards.append((x,y))<br>&gt;&gt; }<br>&gt; <br>&gt; <br>&gt; Isn’t this just<br>&gt; <br>&gt; 	for (x, y) in zip2(suits, ranks) {<br>&gt; 	}<br>&gt; <br>&gt; ?<br></p><p>No, apparently it’s supposed to be all permutations of both types. But I too read it as syntactic sugar for a zip, which I think is a great reason not to add this syntax.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>Extending the for loop to have multiple clauses</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>December  9, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt; On Dec 9, 2015, at 1:43 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; I think it could be really nice to extend the for-loop so that it can have multiple clauses. Much like in the if-let with multiple clauses, I could imagine a for-loop with multiple clauses:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; var cards: [(Suit,Rank)] = []<br>&gt;&gt;&gt; for x in suits, y in ranks {<br>&gt;&gt;&gt; cards.append((x,y))<br>&gt;&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Isn’t this just<br>&gt;&gt; <br>&gt;&gt; 	for (x, y) in zip2(suits, ranks) {<br>&gt;&gt; 	}<br>&gt;&gt; <br>&gt;&gt; ?<br>&gt; <br>&gt; No, apparently it’s supposed to be all permutations of both types. But I too read it as syntactic sugar for a zip, which I think is a great reason not to add this syntax.<br></p><p><br>Ah. In that case, I’d much rather have a library function that indicates that we’re getting all permutations. This doesn’t feel like it belongs in the language at all, but in the library.<br></p><p>	- Doug<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/92213e4823cdfe88f0ba5113540d386c?s=50"></div><header><strong>Extending the for loop to have multiple clauses</strong> from <string>Maxwell Swadling</string> &lt;maxs at apple.com&gt;<p>December  9, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt; On 9 Dec 2015, at 1:44 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Dec 9, 2015, at 1:43 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; I think it could be really nice to extend the for-loop so that it can have multiple clauses. Much like in the if-let with multiple clauses, I could imagine a for-loop with multiple clauses:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; var cards: [(Suit,Rank)] = []<br>&gt;&gt;&gt;&gt; for x in suits, y in ranks {<br>&gt;&gt;&gt;&gt; cards.append((x,y))<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Isn’t this just<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	for (x, y) in zip2(suits, ranks) {<br>&gt;&gt;&gt; 	}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ?<br>&gt;&gt; <br>&gt;&gt; No, apparently it’s supposed to be all permutations of both types. But I too read it as syntactic sugar for a zip, which I think is a great reason not to add this syntax.<br>&gt; <br>&gt; <br>&gt; Ah. In that case, I’d much rather have a library function that indicates that we’re getting all permutations. This doesn’t feel like it belongs in the language at all, but in the library.<br>&gt; <br>&gt; 	- Doug<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>We do have this library function, it is flatMap.<br></p><p>The desired feature here seems to be desugaring for loops  <br></p><p>for x in xs, y in ys, z in zs {<br>  ...<br>}<br></p><p>into:<br></p><p>xs.flatMap { x in ys.flatMap { y in zs.map { z in ... } } }<br></p><p>So as above you would get:<br></p><p>suits.flatMap { x in ranks.map { y in cards.append((x,y)) } }<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151209/40f6ee49/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ade0c334ecff1448bb96f5f733bf1f83?s=50"></div><header><strong>Extending the for loop to have multiple clauses</strong> from <string>Chris Eidhof</string> &lt;chris at eidhof.nl&gt;<p>December  9, 2015 at 05:00:00pm</p></header><div class="content"><p>Exactly! Just like multiple-if-let is the same as flatMap on optionals, this is a better syntax for flatMap on arrays. <br></p><p>To make it more clear that it’s a nested loop, we could also consider:<br></p><p>for x in xs, for y in ys {<br>}<br></p><p>But I’m not sure if it actually is clearer. (You could totally still interpret this as a zip, rather than a flatMap).<br></p><p>Chris<br></p><p><br></p><p>&gt; On 09 Dec 2015, at 16:51, Maxwell Swadling &lt;maxs at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 9 Dec 2015, at 1:44 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Dec 9, 2015, at 1:43 PM, Brent Royal-Gordon &lt;brent at architechies.com &lt;mailto:brent at architechies.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I think it could be really nice to extend the for-loop so that it can have multiple clauses. Much like in the if-let with multiple clauses, I could imagine a for-loop with multiple clauses:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; var cards: [(Suit,Rank)] = []<br>&gt;&gt;&gt;&gt;&gt; for x in suits, y in ranks {<br>&gt;&gt;&gt;&gt;&gt; cards.append((x,y))<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Isn’t this just<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	for (x, y) in zip2(suits, ranks) {<br>&gt;&gt;&gt;&gt; 	}<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; No, apparently it’s supposed to be all permutations of both types. But I too read it as syntactic sugar for a zip, which I think is a great reason not to add this syntax.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Ah. In that case, I’d much rather have a library function that indicates that we’re getting all permutations. This doesn’t feel like it belongs in the language at all, but in the library.<br>&gt;&gt; <br>&gt;&gt; 	- Doug<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; We do have this library function, it is flatMap.<br>&gt; <br>&gt; The desired feature here seems to be desugaring for loops  <br>&gt; <br>&gt; for x in xs, y in ys, z in zs {<br>&gt;   ...<br>&gt; }<br>&gt; <br>&gt; into:<br>&gt; <br>&gt; xs.flatMap { x in ys.flatMap { y in zs.map { z in ... } } }<br>&gt; <br>&gt; So as above you would get:<br>&gt; <br>&gt; suits.flatMap { x in ranks.map { y in cards.append((x,y)) } }<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151209/31b4dcaf/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>Extending the for loop to have multiple clauses</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>December  9, 2015 at 02:00:00pm</p></header><div class="content"><p>&gt; On Dec 9, 2015, at 2:11 PM, Chris Eidhof &lt;chris at eidhof.nl&gt; wrote:<br>&gt; <br>&gt; Exactly! Just like multiple-if-let is the same as flatMap on optionals, this is a better syntax for flatMap on arrays. <br>&gt; <br>&gt; To make it more clear that it’s a nested loop, we could also consider:<br>&gt; <br>&gt; for x in xs, for y in ys {<br>&gt; }<br>&gt; <br>&gt; But I’m not sure if it actually is clearer. (You could totally still interpret this as a zip, rather than a flatMap).<br></p><p>I suspect I’ll always have a very hard time reading a comma-separated list of clauses as producing a nested iteration.<br></p><p><br>	- Doug<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>Extending the for loop to have multiple clauses</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>December  9, 2015 at 03:00:00pm</p></header><div class="content"><p>You could have a function (lets call it cross for lack of me knowing a better mathematical term) that takes in multiple CollectionTypes and returns a CollectionType of all the combinations of the constituent sequence type elements.<br></p><p>for (x,y) in cross(0..&lt;width, 0..&lt;height) { … }<br></p><p>My swift-fu however is not yet strong enough for me to know how to avoid the backing generators being CrossGenerator2, CrossGenerator3, etc.<br></p><p>-DW<br></p><p>&gt; On Dec 9, 2015, at 3:11 PM, Chris Eidhof via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Exactly! Just like multiple-if-let is the same as flatMap on optionals, this is a better syntax for flatMap on arrays. <br>&gt; <br>&gt; To make it more clear that it’s a nested loop, we could also consider:<br>&gt; <br>&gt; for x in xs, for y in ys {<br>&gt; }<br>&gt; <br>&gt; But I’m not sure if it actually is clearer. (You could totally still interpret this as a zip, rather than a flatMap).<br>&gt; <br>&gt; Chris<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On 09 Dec 2015, at 16:51, Maxwell Swadling &lt;maxs at apple.com &lt;mailto:maxs at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 9 Dec 2015, at 1:44 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 9, 2015, at 1:43 PM, Brent Royal-Gordon &lt;brent at architechies.com &lt;mailto:brent at architechies.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I think it could be really nice to extend the for-loop so that it can have multiple clauses. Much like in the if-let with multiple clauses, I could imagine a for-loop with multiple clauses:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; var cards: [(Suit,Rank)] = []<br>&gt;&gt;&gt;&gt;&gt;&gt; for x in suits, y in ranks {<br>&gt;&gt;&gt;&gt;&gt;&gt; cards.append((x,y))<br>&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Isn’t this just<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	for (x, y) in zip2(suits, ranks) {<br>&gt;&gt;&gt;&gt;&gt; 	}<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; ?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; No, apparently it’s supposed to be all permutations of both types. But I too read it as syntactic sugar for a zip, which I think is a great reason not to add this syntax.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Ah. In that case, I’d much rather have a library function that indicates that we’re getting all permutations. This doesn’t feel like it belongs in the language at all, but in the library.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	- Doug<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; We do have this library function, it is flatMap.<br>&gt;&gt; <br>&gt;&gt; The desired feature here seems to be desugaring for loops  <br>&gt;&gt; <br>&gt;&gt; for x in xs, y in ys, z in zs {<br>&gt;&gt;   ...<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; into:<br>&gt;&gt; <br>&gt;&gt; xs.flatMap { x in ys.flatMap { y in zs.map { z in ... } } }<br>&gt;&gt; <br>&gt;&gt; So as above you would get:<br>&gt;&gt; <br>&gt;&gt; suits.flatMap { x in ranks.map { y in cards.append((x,y)) } }<br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151209/d4b76fc2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/268d9a6a10ecdf70a24fdf96d03cec1c?s=50"></div><header><strong>Extending the for loop to have multiple clauses</strong> from <string>Colin Barrett</string> &lt;colin at springsandstruts.com&gt;<p>December  9, 2015 at 05:00:00pm</p></header><div class="content"><p>Indeed. In fact, ilya posted this already with an implementation upthread :) <br></p><p>BTW, the mathematical term is “Cartesian product”, named so because this operation is how you construct the famous Cartesian xy-coordinate system we all learned in Algebra class.<br></p><p>FWIW I agree that this should be a library function and not in the language.<br></p><p>-Colin<br></p><p>&gt; On Dec 9, 2015, at 5:31 PM, David Waite via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; You could have a function (lets call it cross for lack of me knowing a better mathematical term) that takes in multiple CollectionTypes and returns a CollectionType of all the combinations of the constituent sequence type elements.<br>&gt; <br>&gt; for (x,y) in cross(0..&lt;width, 0..&lt;height) { … }<br>&gt; <br>&gt; My swift-fu however is not yet strong enough for me to know how to avoid the backing generators being CrossGenerator2, CrossGenerator3, etc.<br>&gt; <br>&gt; -DW<br>&gt; <br>&gt;&gt; On Dec 9, 2015, at 3:11 PM, Chris Eidhof via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Exactly! Just like multiple-if-let is the same as flatMap on optionals, this is a better syntax for flatMap on arrays. <br>&gt;&gt; <br>&gt;&gt; To make it more clear that it’s a nested loop, we could also consider:<br>&gt;&gt; <br>&gt;&gt; for x in xs, for y in ys {<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; But I’m not sure if it actually is clearer. (You could totally still interpret this as a zip, rather than a flatMap).<br>&gt;&gt; <br>&gt;&gt; Chris<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 09 Dec 2015, at 16:51, Maxwell Swadling &lt;maxs at apple.com &lt;mailto:maxs at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 9 Dec 2015, at 1:44 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 9, 2015, at 1:43 PM, Brent Royal-Gordon &lt;brent at architechies.com &lt;mailto:brent at architechies.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think it could be really nice to extend the for-loop so that it can have multiple clauses. Much like in the if-let with multiple clauses, I could imagine a for-loop with multiple clauses:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; var cards: [(Suit,Rank)] = []<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; for x in suits, y in ranks {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; cards.append((x,y))<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Isn’t this just<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 	for (x, y) in zip2(suits, ranks) {<br>&gt;&gt;&gt;&gt;&gt;&gt; 	}<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; ?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; No, apparently it’s supposed to be all permutations of both types. But I too read it as syntactic sugar for a zip, which I think is a great reason not to add this syntax.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Ah. In that case, I’d much rather have a library function that indicates that we’re getting all permutations. This doesn’t feel like it belongs in the language at all, but in the library.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	- Doug<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We do have this library function, it is flatMap.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The desired feature here seems to be desugaring for loops  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; for x in xs, y in ys, z in zs {<br>&gt;&gt;&gt;   ...<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; into:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; xs.flatMap { x in ys.flatMap { y in zs.map { z in ... } } }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; So as above you would get:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; suits.flatMap { x in ranks.map { y in cards.append((x,y)) } }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151209/7fc1a57a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8a24682926961206ad452d8455b09457?s=50"></div><header><strong>Extending the for loop to have multiple clauses</strong> from <string>thorsten at portableinnovations.de</string> &lt;thorsten at portableinnovations.de&gt;<p>December 10, 2015 at 01:00:00pm</p></header><div class="content"><p>Having a notation instead of just a function enables lots of sweet stuff not just nested loops (which happens within the List monad) but more, depending on the monad being used. Just have a look at Scala&#39;s for-expression, Haskell&#39;s do-notation or C#&#39;s LINQ, e.g.<br></p><p>let result: Future&lt;Int&gt; = for<br>    x in getXAsynchronously(),<br>    y in getYAsynchronously() {<br>        x + y<br>    }<br></p><p>using an Async Monad here, where flatMap() is defined appropriately.<br></p><p>-Thorsten<br></p><p>&gt; Am 09.12.2015 um 23:38 schrieb Colin Barrett via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; Indeed. In fact, ilya posted this already with an implementation upthread :) <br>&gt; <br>&gt; BTW, the mathematical term is “Cartesian product”, named so because this operation is how you construct the famous Cartesian xy-coordinate system we all learned in Algebra class.<br>&gt; <br>&gt; FWIW I agree that this should be a library function and not in the language.<br>&gt; <br>&gt; -Colin<br>&gt; <br>&gt;&gt; On Dec 9, 2015, at 5:31 PM, David Waite via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; You could have a function (lets call it cross for lack of me knowing a better mathematical term) that takes in multiple CollectionTypes and returns a CollectionType of all the combinations of the constituent sequence type elements.<br>&gt;&gt; <br>&gt;&gt; for (x,y) in cross(0..&lt;width, 0..&lt;height) { … }<br>&gt;&gt; <br>&gt;&gt; My swift-fu however is not yet strong enough for me to know how to avoid the backing generators being CrossGenerator2, CrossGenerator3, etc.<br>&gt;&gt; <br>&gt;&gt; -DW<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 9, 2015, at 3:11 PM, Chris Eidhof via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Exactly! Just like multiple-if-let is the same as flatMap on optionals, this is a better syntax for flatMap on arrays. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; To make it more clear that it’s a nested loop, we could also consider:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; for x in xs, for y in ys {<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But I’m not sure if it actually is clearer. (You could totally still interpret this as a zip, rather than a flatMap).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Chris<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 09 Dec 2015, at 16:51, Maxwell Swadling &lt;maxs at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On 9 Dec 2015, at 1:44 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Dec 9, 2015, at 1:43 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think it could be really nice to extend the for-loop so that it can have multiple clauses. Much like in the if-let with multiple clauses, I could imagine a for-loop with multiple clauses:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; var cards: [(Suit,Rank)] = []<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; for x in suits, y in ranks {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; cards.append((x,y))<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Isn’t this just<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 	for (x, y) in zip2(suits, ranks) {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 	}<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; ?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; No, apparently it’s supposed to be all permutations of both types. But I too read it as syntactic sugar for a zip, which I think is a great reason not to add this syntax.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Ah. In that case, I’d much rather have a library function that indicates that we’re getting all permutations. This doesn’t feel like it belongs in the language at all, but in the library.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	- Doug<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; We do have this library function, it is flatMap.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The desired feature here seems to be desugaring for loops  <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; for x in xs, y in ys, z in zs {<br>&gt;&gt;&gt;&gt;   ...<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; into:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; xs.flatMap { x in ys.flatMap { y in zs.map { z in ... } } }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; So as above you would get:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; suits.flatMap { x in ranks.map { y in cards.append((x,y)) } }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/4797b0ef/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ade0c334ecff1448bb96f5f733bf1f83?s=50"></div><header><strong>Extending the for loop to have multiple clauses</strong> from <string>Chris Eidhof</string> &lt;chris at eidhof.nl&gt;<p>December 10, 2015 at 11:00:00am</p></header><div class="content"><p>I’ve thought a bit more about this, and now have changed my mind: I don’t think supporting multiple clauses in a for loop is a good idea anymore.<br></p><p>It’s confusing: people who’re not familiar with this concept from other languages expect a zip rather than a flatMap. I think the added value of having multiple clauses doesn’t really pay for this. <br></p><p>I still think there’s a lot of value in having something like do-notation, but I also feel that that’s too big a step currently.<br></p><p>Chris<br></p><p>&gt; On 10 Dec 2015, at 07:56, thorsten at portableinnovations.de wrote:<br>&gt; <br>&gt; Having a notation instead of just a function enables lots of sweet stuff not just nested loops (which happens within the List monad) but more, depending on the monad being used. Just have a look at Scala&#39;s for-expression, Haskell&#39;s do-notation or C#&#39;s LINQ, e.g.<br>&gt; <br>&gt; let result: Future&lt;Int&gt; = for<br>&gt;     x in getXAsynchronously(),<br>&gt;     y in getYAsynchronously() {<br>&gt;         x + y<br>&gt;     }<br>&gt; <br>&gt; using an Async Monad here, where flatMap() is defined appropriately.<br>&gt; <br>&gt; -Thorsten<br>&gt; <br>&gt; Am 09.12.2015 um 23:38 schrieb Colin Barrett via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt; <br>&gt;&gt; Indeed. In fact, ilya posted this already with an implementation upthread :) <br>&gt;&gt; <br>&gt;&gt; BTW, the mathematical term is “Cartesian product”, named so because this operation is how you construct the famous Cartesian xy-coordinate system we all learned in Algebra class.<br>&gt;&gt; <br>&gt;&gt; FWIW I agree that this should be a library function and not in the language.<br>&gt;&gt; <br>&gt;&gt; -Colin<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 9, 2015, at 5:31 PM, David Waite via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; You could have a function (lets call it cross for lack of me knowing a better mathematical term) that takes in multiple CollectionTypes and returns a CollectionType of all the combinations of the constituent sequence type elements.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; for (x,y) in cross(0..&lt;width, 0..&lt;height) { … }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; My swift-fu however is not yet strong enough for me to know how to avoid the backing generators being CrossGenerator2, CrossGenerator3, etc.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -DW<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 9, 2015, at 3:11 PM, Chris Eidhof via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Exactly! Just like multiple-if-let is the same as flatMap on optionals, this is a better syntax for flatMap on arrays. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; To make it more clear that it’s a nested loop, we could also consider:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; for x in xs, for y in ys {<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; But I’m not sure if it actually is clearer. (You could totally still interpret this as a zip, rather than a flatMap).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Chris<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 09 Dec 2015, at 16:51, Maxwell Swadling &lt;maxs at apple.com &lt;mailto:maxs at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On 9 Dec 2015, at 1:44 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Dec 9, 2015, at 1:43 PM, Brent Royal-Gordon &lt;brent at architechies.com &lt;mailto:brent at architechies.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think it could be really nice to extend the for-loop so that it can have multiple clauses. Much like in the if-let with multiple clauses, I could imagine a for-loop with multiple clauses:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; var cards: [(Suit,Rank)] = []<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; for x in suits, y in ranks {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; cards.append((x,y))<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Isn’t this just<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 	for (x, y) in zip2(suits, ranks) {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 	}<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; No, apparently it’s supposed to be all permutations of both types. But I too read it as syntactic sugar for a zip, which I think is a great reason not to add this syntax.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Ah. In that case, I’d much rather have a library function that indicates that we’re getting all permutations. This doesn’t feel like it belongs in the language at all, but in the library.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 	- Doug<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; We do have this library function, it is flatMap.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The desired feature here seems to be desugaring for loops  <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; for x in xs, y in ys, z in zs {<br>&gt;&gt;&gt;&gt;&gt;   ...<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; into:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; xs.flatMap { x in ys.flatMap { y in zs.map { z in ... } } }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; So as above you would get:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; suits.flatMap { x in ranks.map { y in cards.append((x,y)) } }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/0f3a0e98/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8a24682926961206ad452d8455b09457?s=50"></div><header><strong>Extending the for loop to have multiple clauses</strong> from <string>thorsten at portableinnovations.de</string> &lt;thorsten at portableinnovations.de&gt;<p>December 10, 2015 at 01:00:00pm</p></header><div class="content"><p>The advantage of not having to nest is that I can do all these nice monadic things with its. Just look at Scala&#39;s for-expression which does exactly that, mimicking Haskell&#39;s do-notation.<br>I would love support for that in Swift.<br></p><p>-Thorsten<br></p><p>&gt; Am 09.12.2015 um 23:11 schrieb Chris Eidhof via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; Exactly! Just like multiple-if-let is the same as flatMap on optionals, this is a better syntax for flatMap on arrays. <br>&gt; <br>&gt; To make it more clear that it’s a nested loop, we could also consider:<br>&gt; <br>&gt; for x in xs, for y in ys {<br>&gt; }<br>&gt; <br>&gt; But I’m not sure if it actually is clearer. (You could totally still interpret this as a zip, rather than a flatMap).<br>&gt; <br>&gt; Chris<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt;&gt; On 09 Dec 2015, at 16:51, Maxwell Swadling &lt;maxs at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 9 Dec 2015, at 1:44 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 9, 2015, at 1:43 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I think it could be really nice to extend the for-loop so that it can have multiple clauses. Much like in the if-let with multiple clauses, I could imagine a for-loop with multiple clauses:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; var cards: [(Suit,Rank)] = []<br>&gt;&gt;&gt;&gt;&gt;&gt; for x in suits, y in ranks {<br>&gt;&gt;&gt;&gt;&gt;&gt; cards.append((x,y))<br>&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Isn’t this just<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	for (x, y) in zip2(suits, ranks) {<br>&gt;&gt;&gt;&gt;&gt; 	}<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; ?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; No, apparently it’s supposed to be all permutations of both types. But I too read it as syntactic sugar for a zip, which I think is a great reason not to add this syntax.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Ah. In that case, I’d much rather have a library function that indicates that we’re getting all permutations. This doesn’t feel like it belongs in the language at all, but in the library.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	- Doug<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; We do have this library function, it is flatMap.<br>&gt;&gt; <br>&gt;&gt; The desired feature here seems to be desugaring for loops  <br>&gt;&gt; <br>&gt;&gt; for x in xs, y in ys, z in zs {<br>&gt;&gt;   ...<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; into:<br>&gt;&gt; <br>&gt;&gt; xs.flatMap { x in ys.flatMap { y in zs.map { z in ... } } }<br>&gt;&gt; <br>&gt;&gt; So as above you would get:<br>&gt;&gt; <br>&gt;&gt; suits.flatMap { x in ranks.map { y in cards.append((x,y)) } }<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/e1277fbb/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
