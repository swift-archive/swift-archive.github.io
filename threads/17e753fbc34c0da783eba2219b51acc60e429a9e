<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0032: Add find method to SequenceType</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>April 28, 2016 at 11:00:00am</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;SE-0032: Add find method to SequenceType&quot; begins now and runs through May 3. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0032-sequencetype-find.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c74c15ba14b1096d4e42900ddd2dacd0?s=50"></div><header><strong>[Review] SE-0032: Add find method to SequenceType</strong> from <string>Patrick Smith</string> &lt;pgwsmith at gmail.com&gt;<p>April 28, 2016 at 04:00:00pm</p></header><div class="content"><p>* What is your evaluation of the proposal?<br></p><p>Yes, seems like a great addition. I have wanted a method like this quite a few<br>times.<br></p><p>  <br></p><p>* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes, I think it adds an essential part to Sequence.<br></p><p>  <br></p><p>* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes, it’s surprising it wasn’t there already; it feels a very natural<br>addition.<br></p><p>  <br></p><p>* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>.find() is the name I have seen elsewhere, and this proposed functionality is<br>the same.<br></p><p>  <br></p><p>* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>A quick reading, and had followed some earlier discussion.<br></p><p>  <br>**Patrick Smith**  <br></p><p>On Apr 29 2016, at 4:11 am, Chris Lattner via swift-evolution &amp;lt;swift-<br>evolution at swift.org&amp;gt; wrote:  <br></p><p>&gt; Hello Swift community,<br></p><p>&gt;<br></p><p>&gt; The review of &quot;SE-0032: Add find method to SequenceType&quot; begins now and runs<br>through May 3. The proposal is available here:<br></p><p>&gt;<br></p><p>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0032<br>-sequencetype-find.md<br></p><p>&gt;<br></p><p>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>should be sent to the swift-evolution mailing list at<br></p><p>&gt;<br></p><p>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>&gt;<br></p><p>&gt; or, if you would like to keep your feedback private, directly to the review<br>manager.<br></p><p>&gt;<br></p><p>&gt; What goes into a review?<br></p><p>&gt;<br></p><p>&gt; The goal of the review process is to improve the proposal under review<br>through constructive criticism and, eventually, determine the direction of<br>Swift. When writing your review, here are some questions you might want to<br>answer in your review:<br></p><p>&gt;<br></p><p>&gt; * What is your evaluation of the proposal?  <br>* Is the problem being addressed significant enough to warrant a change to Swift?  <br>* Does this proposal fit well with the feel and direction of Swift?  <br>* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?  <br>* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;<br></p><p>&gt; More information about the Swift evolution process is available at<br></p><p>&gt;<br></p><p>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>&gt;<br></p><p>&gt; Thank you,<br></p><p>&gt;<br></p><p>&gt; -Chris Lattner  <br>Review Manager<br></p><p>&gt;<br></p><p>&gt;  <br>_______________________________________________  <br>swift-evolution mailing list  <br>swift-evolution at swift.org  <br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160428/94b664de/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>[Review] SE-0032: Add find method to SequenceType</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>April 28, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; The review of &quot;SE-0032: Add find method to SequenceType&quot; begins now and runs through May 3. The proposal is available here:<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0032-sequencetype-find.md<br></p><p><br>&gt; * What is your evaluation of the proposal?<br>-0 for naming reasons<br></p><p>&gt; * Is the problem being addressed significant enough to warrant a change to Swift?<br>Sure<br>&gt; <br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>Not entirely. Because Sequence operations are based on the iterator, and the iterator is not guaranteed to be either non-destructive/resetting or finite, a find method could lead to subtle bugs.<br></p><p>I would prefer either another name such as skipUntil, or that find exist on Collection which does have the guarantee of being non-destructive and resettable on iteration.<br></p><p>&gt; <br>&gt; * If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>skipUntil is the closest I see in reactive programming sources, which process events as a stream rather than as a resettable cursor into a data structure.<br></p><p>&gt; * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>A quick reading.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160428/28cd6f48/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e9b374b9587bd8da1a1a027c8716ac0d?s=50"></div><header><strong>[Review] SE-0032: Add find method to SequenceType</strong> from <string>Rod Brown</string> &lt;rodney.brown6 at icloud.com&gt;<p>April 29, 2016 at 03:00:00pm</p></header><div class="content"><p>* What is your evaluation of the proposal?<br>+1 for the functionality on CollectionType<br>-1 for the functionality on SequenceType<br> <br>* Is the problem being addressed significant enough to warrant a change to Swift?<br>It’s certainly a helpful addition and one I’ve got an analogous version of in my own projects. Considering this is a simply addition on CollectionType, I think there no reasons not to.<br></p><p>I’m concerned about this being added to SequenceType. The risks associated with iterating through a sequence where it may be destructive seem to great to me, especially when this can be limited to CollectionType instead.<br></p><p>* Does this proposal fit well with the feel and direction of Swift?<br>In general I find the proposal concept to be inline with Swift, for simplicity and ease of use. SequenceType usage however seems risky, due to the destructive iterator problem, and this seems against Swift’s safe direction.<br></p><p>* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>I’ve used similar functionality added to NSArrays.<br></p><p>* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>A quick read, and was following the earlier discussion.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Review] SE-0032: Add find method to SequenceType</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>April 29, 2016 at 05:00:00pm</p></header><div class="content"><p>On Thu, Apr 28, 2016, at 10:31 PM, Rod Brown via swift-evolution wrote:<br>&gt; * What is your evaluation of the proposal?<br>&gt; +1 for the functionality on CollectionType<br>&gt; -1 for the functionality on SequenceType<br>&gt;  <br>&gt; * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; It’s certainly a helpful addition and one I’ve got an analogous version of in my own projects. Considering this is a simply addition on CollectionType, I think there no reasons not to.<br>&gt; <br>&gt; I’m concerned about this being added to SequenceType. The risks associated with iterating through a sequence where it may be destructive seem to great to me, especially when this can be limited to CollectionType instead.<br></p><p>I don&#39;t understand this argument. The whole point of a sequence is to iterate over it. Yes, if you have a destructive sequence and you iterate over it multiple times it&#39;s not going to work right, but I don&#39;t see find() as having any higher risk of doing this than any of the other methods that iterate over the sequence.<br></p><p>Not only that, but I actually find the find() method to be most useful when used with Sequence. With Collection you can already just get the index and then use that to index into the collection; it&#39;s a little verbose, but not awful. But the only alternative with Sequence is to write an imperative loop that uses a mutable variable.<br></p><p>-Kevin<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] SE-0032: Add find method to SequenceType</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>April 29, 2016 at 08:00:00am</p></header><div class="content"><p>I like the functionality. I remain concerned that Sequence types do not guarantee termination and the semantics are better represented by something along the line of &quot;ordered collection&quot;. Related notes here: https://gist.github.com/erica/1fa219d79572c2916acd7de91a2f221a &lt;https://gist.github.com/erica/1fa219d79572c2916acd7de91a2f221a&gt;<br></p><p>-- E<br></p><p><br>&gt; On Apr 28, 2016, at 12:11 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0032: Add find method to SequenceType&quot; begins now and runs through May 3. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0032-sequencetype-find.md<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160429/f4c47c4e/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c53218a6524f4d644b6a75a4441ea631?s=50"></div><header><strong>[Review] SE-0032: Add find method to SequenceType</strong> from <string>Max Moiseev</string> &lt;moiseev at apple.com&gt;<p>April 29, 2016 at 05:00:00pm</p></header><div class="content"><p>HI all,<br></p><p>After having discussed this proposal with the members of the standard library team, we would like to propose the following updates:<br></p><p>- Since both the language and the standard library have evolved since it was written, the proposal should reflect these changes (things like renaming `Generator` to `Iterator`, adjusting for first argument label rules etc.)<br>(Actually, while writing this, I discovered https://github.com/apple/swift-evolution/pull/276)<br>- We believe that renaming `find(_:)` to `first(where:)` would make call sites more clear<br></p><p>// original proposal<br>numbers.find { isPrime($0) }<br>numbers.find(isPrime)<br></p><p>// suggested update<br>numbers.first { isPrime($0) }<br>numbers.first(where: isPrime)<br></p><p>In the examples above, when the predicate is passed as a trailing closure, there is no big difference in the invocation, but it changes when we have a named function that we would like to use as a predicate.<br>The Collection protocol already has a property called `first`, that returns an optional element, it also has a method `index(where:)`. In this sense `first(where:)` does not introduce new words to the library vocabulary.<br></p><p>max<br></p><p>&gt; On Apr 28, 2016, at 11:11 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0032: Add find method to SequenceType&quot; begins now and runs through May 3. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0032-sequencetype-find.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160429/f14b2dad/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Review] SE-0032: Add find method to SequenceType</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>April 29, 2016 at 05:00:00pm</p></header><div class="content"><p>On Fri, Apr 29, 2016, at 05:12 PM, Max Moiseev via swift-evolution wrote:<br>&gt; HI all,<br>&gt;<br>&gt;<br>&gt; After having discussed this proposal with the members of the standard<br>&gt; library team, we would like to propose the following updates:<br>&gt;<br>&gt; - Since both the language and the standard library have evolved since<br>&gt;   it was written, the proposal should reflect these changes (things<br>&gt;   like renaming `Generator` to `Iterator`, adjusting for first<br>&gt;   argument label rules etc.)<br>&gt;&gt; (Actually, while writing this, I discovered<br>&gt;&gt; https://github.com/apple/swift-evolution/pull/276)<br>&gt; - We believe that renaming `find(_:)` to `first(where:)` would make<br>&gt;   call sites more clear<br>&gt;<br>&gt;&gt; // original proposal<br>&gt;&gt; numbers.find { isPrime($0) }<br>&gt;&gt; numbers.find(isPrime)<br>&gt;&gt;<br>&gt;&gt; // suggested update<br>&gt;&gt; numbers.first { isPrime($0) }<br>&gt;&gt; numbers.first(where: isPrime)<br>&gt;&gt;<br>&gt;&gt; In the examples above, when the predicate is passed as a trailing<br>&gt;&gt; closure, there is no big difference in the invocation, but it changes<br>&gt;&gt; when we have a named function that we would like to use as a<br>&gt;&gt; predicate.<br>&gt;&gt; The Collection protocol already has a property called `first`, that<br>&gt;&gt; returns an optional element, it also has a method `index(where:)`. In<br>&gt;&gt; this sense `first(where:)` does not introduce new words to the<br>&gt;&gt; library vocabulary.<br> <br>first(where:) is a neat idea, but I&#39;m a little concerned about ambiguity<br>with the property in the presence of type errors. Experimentally, if I<br>try to call first(where:) with a block with the wrong signature, Swift 3<br>produces an unhelpful error about how I cannot call value of a non-<br>function type (i.e. the property) instead of recognizing that I&#39;m trying<br>to call the function.<br> <br>Example:<br> <br>struct Foo {<br>var first: Int = 42<br> <br>func first(where: @noescape Int -&gt; Bool) -&gt; Int {<br>return 42<br>}<br>}<br> <br>If I try and call `print(Foo().find(where: { true }))`, you&#39;ll note that<br>the closure has the wrong type signature (it types as `() -&gt; Bool`), and<br>the compiler gives me the error:<br> <br>&lt;REPL Input&gt;:1:12: error: cannot call value of non-function type &#39;Int&#39;<br>Foo().first(where: { true })<br>~~~~~~~~~~~^<br> <br>Calling it with a block of the correct type works, but having useful<br>errors is very important.<br> <br>-Kevin Ballard<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160429/dafff5c7/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>[Review] SE-0032: Add find method to SequenceType</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>April 29, 2016 at 05:00:00pm</p></header><div class="content"><p>+1 for the name change. <br></p><p>&gt; On Apr 29, 2016, at 5:12 PM, Max Moiseev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; HI all,<br>&gt; <br>&gt; After having discussed this proposal with the members of the standard library team, we would like to propose the following updates:<br>&gt; <br>&gt; - Since both the language and the standard library have evolved since it was written, the proposal should reflect these changes (things like renaming `Generator` to `Iterator`, adjusting for first argument label rules etc.)<br>&gt; (Actually, while writing this, I discovered https://github.com/apple/swift-evolution/pull/276 &lt;https://github.com/apple/swift-evolution/pull/276&gt;)<br>&gt; - We believe that renaming `find(_:)` to `first(where:)` would make call sites more clear<br>&gt; <br>&gt; // original proposal<br>&gt; numbers.find { isPrime($0) }<br>&gt; numbers.find(isPrime)<br>&gt; <br>&gt; // suggested update<br>&gt; numbers.first { isPrime($0) }<br>&gt; numbers.first(where: isPrime)<br>&gt; <br>&gt; In the examples above, when the predicate is passed as a trailing closure, there is no big difference in the invocation, but it changes when we have a named function that we would like to use as a predicate.<br>&gt; The Collection protocol already has a property called `first`, that returns an optional element, it also has a method `index(where:)`. In this sense `first(where:)` does not introduce new words to the library vocabulary.<br>&gt; <br>&gt; max<br>&gt; <br>&gt;&gt; On Apr 28, 2016, at 11:11 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0032: Add find method to SequenceType&quot; begins now and runs through May 3. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0032-sequencetype-find.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0032-sequencetype-find.md&gt;<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160429/c1cce2da/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
