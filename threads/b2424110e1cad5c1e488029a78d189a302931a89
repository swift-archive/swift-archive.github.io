<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Ad hoc enums / options</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>May 31, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; Begin forwarded message:<br>&gt; <br>&gt; From: Christopher Kornher &lt;ckornher at me.com&gt;<br>&gt; Subject: Fwd: [swift-evolution] Ad hoc enums / options<br>&gt; Date: May 31, 2016 at 12:25:33 PM MDT<br>&gt; To: Erica Sadun &lt;erica at ericasadun.com&gt;<br>&gt; <br>&gt; Apologies for using you as a relay...<br>&gt; <br>&gt;&gt; Begin forwarded message:<br>&gt;&gt; <br>&gt;&gt; From: Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; Subject: Re: [swift-evolution] Ad hoc enums / options<br>&gt;&gt; Date: May 31, 2016 at 11:43:43 AM MDT<br>&gt;&gt; To: Charles Constant &lt;charles at charlesism.com &lt;mailto:charles at charlesism.com&gt;&gt;<br>&gt;&gt; Cc: Swift Evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;, Christopher Kornher &lt;ckornher at me.com &lt;mailto:ckornher at me.com&gt;&gt;<br>&gt;&gt; Reply-To: Charlie Monroe &lt;charlie at charliemonroe.net &lt;mailto:charlie at charliemonroe.net&gt;&gt;<br>&gt;&gt; <br>&gt;&gt; I have mixed feelings about this since it may lead to redeclarations over and over of the same values instead of actually declaring an enum.<br>&gt; <br>&gt; <br>&gt; I have two suggested “improvements”<br>&gt; <br>&gt; 1) Make the enum String raw-representable. Name it somehow. This does not affect Erica’s original syntax.<br>&gt; 2) Force an explicit name.<br>&gt; <br>&gt; #2  does add to the length of function declarations, so it is a tradeoff. Perhaps the name could be optional, but...<br>&gt; <br>&gt; #2 would improve debug representations of the value by providing a name that can be found in source code<br>&gt; <br>&gt; In a full-featured metadata system, it would probably be nice to have a type for the enum to simply the handling of all enums. <br>&gt; <br>&gt; #2 is more future-proof. Systems get more complex over time and one use of a type becomes many. <br>&gt; The enum type name (auto-generated or required, it makes no difference) would be scoped to the function’s namespace e.g. (fixing the typo) :<br>&gt; <br>&gt; class MyImage  {<br>&gt; 	func scaleAndCropImage(<br>&gt;     		image: UIImage,<br>&gt; 		toSize size: CGSize,<br>&gt; 		operation: ScaleCropFitFill{ .Fit | Fill} = .Fit<br>&gt; <br>&gt;     	) -&gt; UIImage {…}<br>&gt; }<br>&gt; <br>&gt; would be equivalent to:<br>&gt; <br>&gt; class MyImage  {<br>&gt;  	enum  ScaleCropFitFill {<br>&gt; 		case  Fit<br>&gt; 		case  Fill<br>&gt; 	} <br>&gt; <br>&gt; 	func scaleAndCropImage(<br>&gt; 		image: UIImage,<br>&gt; 		toSize size: CGSize,<br>&gt; 		operation: ScaleCropFitFill = .Fit<br>&gt; 	) -&gt; UIImage {…}<br>&gt; }<br>&gt; <br>&gt; There are two ways that an implementation could evolve from having one use of the enum in a call to multiple uses;<br>&gt; <br>&gt; 1) The function is refactored into more functions internal to the original function’s namespace: module/class/struct/enum.<br>&gt; 	In this case, it would be appropriate to leave the enum declaration in function declaration to indicate that this is the only public use of the enum.<br>&gt; 2) More public functions are created that use the enum<br>&gt; 	In this case, it would be appropriate to declare the enum within the same scope. Existing code would not be affected. Smart editors could provide this refactoring.<br>&gt; <br>&gt; - Chris K<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160531/b2421a89/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Ad hoc enums / options</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>May 31, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt;&gt; I have two suggested “improvements”<br>&gt;&gt; <br>&gt;&gt; 1) Make the enum String raw-representable. Name it somehow. This does not affect Erica’s original syntax.<br>&gt;&gt; 2) Force an explicit name.<br>&gt;&gt; <br>&gt;&gt; class MyImage  {<br>&gt;&gt; 	func scaleAndCropImage(<br>&gt;&gt;     		image: UIImage,<br>&gt;&gt; 		toSize size: CGSize,<br>&gt;&gt; 		operation: ScaleCropFitFill{ .Fit | Fill} = .Fit<br>&gt;&gt; <br>&gt;&gt;     	) -&gt; UIImage {…}<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; would be equivalent to:<br>&gt;&gt; <br>&gt;&gt; class MyImage  {<br>&gt;&gt;  	enum  ScaleCropFitFill {<br>&gt;&gt; 		case  Fit<br>&gt;&gt; 		case  Fill<br>&gt;&gt; 	} <br>&gt;&gt; <br>&gt;&gt; 	func scaleAndCropImage(<br>&gt;&gt; 		image: UIImage,<br>&gt;&gt; 		toSize size: CGSize,<br>&gt;&gt; 		operation: ScaleCropFitFill = .Fit<br>&gt;&gt; 	) -&gt; UIImage {…}<br>&gt;&gt; }<br></p><p>This is not the direction I&#39;m hoping to move in.<br></p><p>If an enumeration is to be used in more than one place, it should be a proper enumeration. Swift already offers dependent type support.  Single-point ad-hoc enumerations create better semantics for moving from if statements that test on Boolean values to switch statements that test on phrases, without creating dependencies on other types. As Tony A points out, <br></p><p>&gt; Having argument labels solves some of the problems that come along with boolean arguments, but &quot;fitImage&quot; is a great example where the false case (&quot;not fit?&quot;) doesn&#39;t really convey enough information (or can convey misleading information).<br></p><p><br>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160531/8fa6789e/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
