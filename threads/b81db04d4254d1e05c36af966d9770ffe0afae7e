<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0060: Enforcing order of defaulted parameters</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May  3, 2016 at 08:00:00pm</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;SE-0060: Enforcing order of defaulted parameters&quot; begins now and runs through May 9. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0060-defaulted-parameter-order.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>[Review] SE-0060: Enforcing order of defaulted parameters</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>May  3, 2016 at 11:00:00pm</p></header><div class="content"><p>Count me among those who had no idea this feature even existed.<br></p><p>The thing about the current behavior that strikes me as odd is that it only applies to parameters with default values. So foo(a: Int = 1, b: Int = 2) is reorderable, whereas foo(a: Int, b: Int) is not. This seems fairly inconsistent and quite weird, given that both forms contain the same amount of information that would be pertinent to determining order. So the behavior should probably change one way or the other; either remove it entirely, or extend it to labeled parameters without defaults.<br></p><p>Charles<br></p><p>&gt; On May 3, 2016, at 10:52 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0060: Enforcing order of defaulted parameters&quot; begins now and runs through May 9. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0060-defaulted-parameter-order.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Review] SE-0060: Enforcing order of defaulted parameters</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May  4, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>I am unsure.  I am definitely not fully convinced yet.  <br></p><p>I believe a change like this deserves more analysis of the impact of reordering on call site clarity when used with existing APIs.  If the argument labels of defaulted parameters in most current APIs usually form part of an english-like phrase continuing from the non-defaulted arguments I would generally be in support of this proposal.  Allowing reordering with such APIs would be confusing and negatively impact call site clarity.<br></p><p>However, my hunch is that in many cases they are more like “options” where order is somewhat arbitrary (maybe most frequently used come first) and where reordering would not have a significant impact on the readability or clarity at the call site.  If this is the case one could argue that requiring callers to know the correct order for the “options” is an unnecessary cognitive burden.  The benefit of consistency may still outweigh that burden but I am not sure it would.  I believe a stronger argument would need to be made as to specifically *how* this change benefits users in order to offset the burden or requiring callers to remember the specific order of “options” arguments.<br></p><p>If analysis of existing APIs shows that defaulted parameters generally fall into the “options” pattern where call site clarity is not negatively impacted by reordering I would be opposed to this proposal.  This is a pattern I have found quite useful in other languages.  It would be a little bit sad and annoying to be required to remember the correct order for such arguments in Swift, especially when this has not been necessary thus far.  This pattern is much more useful in some domains than others, but its usefulness is widespread enough that it deserves more consideration than it has been given.<br></p><p>To summarize, with a more complete analysis we may find that the current design strikes a useful balance: required parameters may typically form a “phrase” where strict ordering is essential to clarity, while defaulted arguments may typically be “options” that can be reordered freely without a negative impact to call site clarity and with the benefit that we don’t need to memorize the correct order for “options” arguments.<br></p><p>I hope we don’t rush this through without analysis of current APIs just because it is a breaking change that must happen in Swift 3 or not happen at all.  <br></p><p>As noted under alternatives, I do think allowing reordering makes sense for memberwise initialization, however in that case *all* memberwise arguments should be reorderable, not just defaulted arguments.  As this use case isn’t well supported by the current feature anyway it isn’t a huge loss.  Memberwise initialization is very likely to be improved eventually, quite possibly in Swift 4 (Chris is a big proponent of doing something here).  Assuming that happens, there will be ample opportunity to consider reordering for that use case as a part of that proposal.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Possibly.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes in the sense that it is revisiting early design decisions and seeking to improve consistency with the changes to the direction of the language that have happened subsequently.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I have used several languages that allow for arbitrary ordering of “options” arguments in one way or another.  I have generally found it quite useful to not need to be concerned with providing such arguments in a specific order.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I have given this a fair bit of consideration.  <br></p><p>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7559ac465b184ec777f29d37c0e4b374?s=50"></div><header><strong>[Review] SE-0060: Enforcing order of defaulted parameters</strong> from <string>Michael Peternell</string> &lt;michael.peternell at gmx.at&gt;<p>May  4, 2016 at 07:00:00pm</p></header><div class="content"><p>comments inline<br></p><p>&gt; Am 04.05.2016 um 05:52 schrieb Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0060: Enforcing order of defaulted parameters&quot; begins now and runs through May 9. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0060-defaulted-parameter-order.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>+1 The advantage is that the code becomes easier to understand if everyone uses the same parameter order. The disadvantage is that users don&#39;t have as much freedom to re-order the parameters as they like. I think the advantage weighs more. Furthermore, having different parameter orders in the same program could probably give the impression that the parameter order is important. If only one parameter order is possible, there can be no confusion regarding that.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Haven&#39;t used.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Read the proposal, imagined some friends discussing how the parameters should be ordered for a particular function, and thought &quot;let&#39;s remove this trap from the language.&quot;<br></p><p>-Michael<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] SE-0060: Enforcing order of defaulted parameters</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>May  4, 2016 at 12:00:00pm</p></header><div class="content"><p>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160504/99cf5c14/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Review] SE-0060: Enforcing order of defaulted parameters</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May  4, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On May 4, 2016, at 1:22 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Here is a real world example of where I use defaulted parameters:<br>&gt; <br>&gt; public extension UIView {<br>&gt;     public convenience init(<br>&gt;         _ w: CGFloat,<br>&gt;         _ h: CGFloat,<br>&gt;         position: CGPoint = .zero,<br>&gt;         backgroundColor: UIColor = UIColor.whiteColor(),<br>&gt;         translucency alpha: CGFloat = 1.0,<br>&gt;         borderWidth: CGFloat = 0.0,<br>&gt;         borderColor: UIColor = UIColor.blackColor(),<br>&gt;         cornerRadius: CGFloat = 0.0<br>&gt;         ){<br>&gt;         self.init(frame: CGRect(x: position.x, y: position.y, width: w, height: h))<br>&gt;         self.backgroundColor = backgroundColor.colorWithAlphaComponent(alpha)<br>&gt;         self.layer.borderWidth = borderWidth<br>&gt;         self.layer.borderColor = borderColor.CGColor<br>&gt;         self.layer.cornerRadius = cornerRadius<br>&gt;         self.translatesAutoresizingMaskIntoConstraints = false<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; <br>&gt; It&#39;s not a beautiful initializer or aspirational code. It is convenient for putting together flexible views in playgrounds. This utility controls the axes I typically want to tweak for view creation:<br>&gt; <br>&gt; * How big is it  (w, h)<br>&gt; * Where is it? (position, if used, for example, as a subview)<br>&gt; * What color is it? Is the color solid or translucent? (backgroundColor, translucency)<br>&gt; * Does it have a border? and if so, how wide and what color? (borderWidth, borderColor)<br>&gt; * Are the corners rounded and to what degree? (cornerRadius)<br>&gt; <br>&gt; The reason I present this example is that while there are relationships between some of the defaulted values, there is absolutely no inherent order to those groups. When putting together a view, I may later decide to add, for example, the border. Should I have to know that the border must appear before any background color settings?<br>&gt; <br>&gt; Having to figure out where a previously defaulted value should be inserted when adding an explicit setting imposes an undue burden on the programmer, reduces flexibility during experimentation, and removes one of the neatest Swift features. For this reason, I vote no on the proposal. By rejecting this proposal, Swift retains a flexibility that defers to the programmer, placing the programmer&#39;s needs before any benefits that may accrue to the compiler.<br></p><p>Thanks for bringing a concrete example to the discussion Erica.  This is a good example of the memberwise initializer use case for reordering.  This is exactly the kind of cognitive burden I mentioned in my review.  This burden is also present for *any* function which might have “options” with defaults, it does not just apply to initializers.<br></p><p>I’m really glad you discussed code evolution as I was only thinking about writing new code and reading code when considering this proposal.  I think you have swayed me firmly into the -1 camp unless it can be demonstrated that there are many existing APIs which are negatively impacted at the call site by reordering of their defaulted arguments.  Adding and removing “options” from a call to an initializer or function such as this is not an uncommon thing to do (at least in some domains such as apps), and as you point out facilitating experimentation is a big part of what Swift is about.<br></p><p>IMO this example also demonstrates why it may also be desirable to also allow reordering of  “w” and “h” as there really is no inherent order present in those either and enforcing an order does not add clarity in this case.  That said, the case for enforcing order here is stronger than the one for defaulted arguments, partly because they always *must* be present and are therefore not as subject to the “experimentation” burden you describe.<br></p><p>&gt; <br>&gt; I have followed the discussion. I believe it goes against the general Swift philosophy. And while the change being proposed is significant to be part of a formal language review process, I think adopting it would be the wrong thing to do.<br></p><p><br>&gt; <br>&gt; -- Erica<br>&gt; <br>&gt; <br>&gt;&gt; On May 3, 2016, at 9:52 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0060: Enforcing order of defaulted parameters&quot; begins now and runs through May 9. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0060-defaulted-parameter-order.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0060-defaulted-parameter-order.md&gt;<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160504/07f4abaa/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
