<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3679b974d53f17b3b684fc9cadb99fa3?s=50"></div><header><strong>Replace the override keyword by &#39;extend&#39; and &#39;replace&#39; or add an annotation like @SuppressSuperCall</strong> from <string>Kyle Sherman</string> &lt;kyledsherman at gmail.com&gt;<p>February 17, 2016 at 10:00:00am</p></header><div class="content"><p>I was working on a proposal just like this, so I submitted it for discussion today. Check it out. It’s called Enforcing Calling Super.<br></p><p>-Kyle<br></p><p>&gt; This is an interesting idea, and fits well with the theme of preventing mistakes in Swift, but I think that the proposed solution isn’t flexible enough, as there are cases for inheritance patterns where extending doesn’t actually make sense, so having to specify an exception every time could quickly become annoying.<br>&gt; <br>&gt; I think the better solution is to instead allow super-classes to specify whether or not their method must be called when overridden/extended. For example:<br>&gt; <br>&gt; class View {<br>&gt; @super(required) func viewDidLoad() { … }<br>&gt; }<br>&gt; <br>&gt; class Button : View {<br>&gt; override func viewDidLoad() { … }<br>&gt; }<br>&gt; <br>&gt; class Widget : View {<br>&gt; override func viewDidLoad() {<br>&gt; super.viewDidLoad()<br>&gt; …<br>&gt; }<br>&gt; }<br>&gt; <br>&gt; In this extension of your example Button will cause an error because it overrides viewDidLoad() but fails to call the parent’s method as required by the @super attribute. However, Widget compiles successfully because it follows the requirement.<br>&gt; <br>&gt; So the options for @super would be:<br>&gt; <br>&gt; required: child-class must call parent implementation of this method.<br>&gt; optional: default behaviour, child can choose whether to call the parent’s method.<br>&gt; denied: child may not call parent’s method (useful if it makes assumptions that a child-class may not follow), but can still extend/override.<br>&gt; <br>&gt; I think this would be a more flexible solution to the problem, and put the decision in the hands of those writing classes designed for inheritance. I’m not 100% sure of whether to rename override to extend, I like extend better personally, but it probably doesn’t matter overall.<br>&gt; <br>&gt; &gt; On 15 Feb 2016, at 20:57, Florian Liefers via swift-evolution&lt;swift-evolution at swift.org&gt;wrote:<br>&gt; &gt; <br>&gt; &gt; Hi!<br>&gt; &gt; <br>&gt; &gt; I would like to suggest to replace the override keyword for functions by something like extend and replace or to add an annotation like @SuppressSuperCall (don’t know a good name for it).<br>&gt; &gt; The reason for this is, that it might happen, that one forgets to call the super’s implementation in an overridden function or if one reads the code it might not be obvious why the super’s implementation is not called:<br>&gt; &gt; <br>&gt; &gt; class View {<br>&gt; &gt; func viewDidLoad() {<br>&gt; &gt; // does something<br>&gt; &gt; }<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; class Button: View {<br>&gt; &gt; override func viewDidLoad() {<br>&gt; &gt; super.viewDidLoad() //&lt;— this might be forgotten<br>&gt; &gt; // do something other<br>&gt; &gt; }<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; The compiler will accept if one overrides a superclass’s function but does not call the superclass’s implementation which is often ok. The developer should clearly state that he doesn’t want to call the superclass’s implementation, otherwise the compiler should throw an error.<br>&gt; &gt; <br>&gt; &gt; // Example for extending a function<br>&gt; &gt; class Button: View {<br>&gt; &gt; extend func viewDidLoad() {<br>&gt; &gt; super.viewDidLoad()<br>&gt; &gt; // do something<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; extend func viewDidAppear() {<br>&gt; &gt; // do something<br>&gt; &gt; } //&lt;— the compiler should throw an error here.<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; // Example for replacing a function<br>&gt; &gt; class Geometry {<br>&gt; &gt; func volume() -&gt;Double {<br>&gt; &gt; return 0;<br>&gt; &gt; }<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; class Cube: Geometry {<br>&gt; &gt; var length: Double = 0.0<br>&gt; &gt; replace func volume() -&gt;Double {<br>&gt; &gt; let v = length * length * length<br>&gt; &gt; return v<br>&gt; &gt; }<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; Cheers,<br>&gt; &gt; Florian<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160217/c40d8204/attachment.html&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
