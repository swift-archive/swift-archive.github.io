<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>Fluent syntax (replacing void with a useful default return value)</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>December 19, 2015 at 06:00:00pm</p></header><div class="content"><p>Hi there,<br></p><p>this idea might be quite unconventional, but it is simple and wouldn&#39;t break any existing code.<br>Returning void has no use beside telling &quot;there is nothing to return&quot; and makes it impossible to perform method chaining, which drives popular systems like iostream and LINQ (the concept was promoted by Martin Fowler as fluent interface - but wikipedia has a good explanation on this: https://en.wikipedia.org/wiki/Fluent_interface &lt;https://en.wikipedia.org/wiki/Fluent_interface&gt;)<br>One of its most popular use cases is database access, which imho will become quite important for Swift as it might gain popularity in the server domain.<br>It is useful in other areas as well, but I&#39;ll stick to databases in an example:<br></p><p>let kids = userDatabase.select(.name).where(.age &lt; 18)<br></p><p>This is already possible in Swift today, but with a simple change, it could be much more fun:<br>I guess void is the natural choice for a default return value - what else is guaranteed to exist in a function?<br>For methods, on the other hand, there is a real object that is always available: self.<br>If self would be the default return value, we would get method chaining for free in all places where we now stuck with void - and whoever doesn&#39;t like the concept can still ignore the value as he did with ().<br></p><p>I have to admit that right now there is a proposal that wants to sanction ignoring non-void return values with warnings, which would interfere with this idea; but imho even in this case the workarounds wouldn&#39;t be that complicated.<br></p><p>So, please give feedback wether it is worth the burden of writing a official proposal or start by creating a library with the current toolset and try to prove the usefulness of fluent interfaces ;-)<br></p><p>Best regards,<br>Tino<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/a06028b2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Fluent syntax (replacing void with a useful default return value)</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>December 19, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt; On Dec 19, 2015, at 9:21 AM, Tino Heth via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi there,<br>&gt; <br>&gt; this idea might be quite unconventional, but it is simple and wouldn&#39;t break any existing code.<br>&gt; Returning void has no use beside telling &quot;there is nothing to return&quot; and makes it impossible to perform method chaining, which drives popular systems like iostream and LINQ (the concept was promoted by Martin Fowler as fluent interface - but wikipedia has a good explanation on this: https://en.wikipedia.org/wiki/Fluent_interface &lt;https://en.wikipedia.org/wiki/Fluent_interface&gt;)<br>&gt; One of its most popular use cases is database access, which imho will become quite important for Swift as it might gain popularity in the server domain.<br>&gt; It is useful in other areas as well, but I&#39;ll stick to databases in an example:<br>&gt; <br>&gt; let kids = userDatabase.select(.name).where(.age &lt; 18)<br>&gt; <br>&gt; This is already possible in Swift today, but with a simple change, it could be much more fun:<br>&gt; I guess void is the natural choice for a default return value - what else is guaranteed to exist in a function?<br>&gt; For methods, on the other hand, there is a real object that is always available: self.<br>&gt; If self would be the default return value, we would get method chaining for free in all places where we now stuck with void - and whoever doesn&#39;t like the concept can still ignore the value as he did with ().<br>&gt; <br>&gt; I have to admit that right now there is a proposal that wants to sanction ignoring non-void return values with warnings, which would interfere with this idea; but imho even in this case the workarounds wouldn&#39;t be that complicated.<br>&gt; <br>&gt; So, please give feedback wether it is worth the burden of writing a official proposal or start by creating a library with the current toolset and try to prove the usefulness of fluent interfaces ;-)<br></p><p>In order to evaluate this more fully, I&#39;d like to see some examples of real code that would be improved by having this facility, but in general, I&#39;d be concerned that this proposal making mutating/side-effectful method calls look more like purely-functional ones.<br></p><p>-Dave<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/d7eb1d0c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>Fluent syntax (replacing void with a useful default return value)</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>December 20, 2015 at 07:00:00pm</p></header><div class="content"><p>&gt; In order to evaluate this more fully, I&#39;d like to see some examples of real code that would be improved by having this facility, but in general, I&#39;d be concerned that this proposal making mutating/side-effectful method calls look more like purely-functional ones.<br>Mh, maybe I&#39;m a little bit old-fashioned, but I expect side effects everywhere unless purity is guaranteed ;-)<br></p><p>It&#39;s really no big thing - one example is small enough to inline it instead of pushing a playground.<br>As Kevin pointed out, there are solutions that are probably better, but require a real change in the language.<br></p><p>I think Objective-C didn&#39;t copy the chaining-pattern from Smalltalk because it&#39;s quite ugly to calculate the number of opening braces in advance, but in Swift, I really like that approach.<br>Builders are actually the most common use case, but the pattern fits well wherever you have to do configuration.<br>Of cause, it&#39;s always a bit of personal preference how to rate a solution, but for those who like the concept of fluent interfaces, returning self is much more valuable than void (well, considering the traffic, it doesn&#39;t seem that many Swift-Users care for the topic ;-).<br></p><p>import Cocoa<br></p><p>func backgroundStuff() {<br>	print(&quot;Working very hard...&quot;)<br>	NSThread.sleepForTimeInterval(0.5)<br>}<br></p><p>func finish() {<br>	print(&quot;Just imagine I&#39;m doing some GUI-cleanup&quot;)<br>}<br></p><p>func current() {<br>	let queue = NSOperationQueue()<br></p><p>	let mainOperation = NSBlockOperation(block: backgroundStuff)<br>	mainOperation.name = &quot;Download-Task&quot;<br>	mainOperation.queuePriority = .VeryHigh<br>	queue.addOperation(mainOperation)<br></p><p>	let cleanup = NSBlockOperation(block: finish)<br>	cleanup.queuePriority = .Low<br>	cleanup.addDependency(mainOperation)<br>	NSOperationQueue.mainQueue().addOperation(cleanup)<br>}<br></p><p>extension NSOperation {<br>	func addToQueue(queue: NSOperationQueue = NSOperationQueue.mainQueue()) -&gt; Self {<br>		queue.addOperation(self)<br>		return self<br>	}<br></p><p>	func changePriority(priority: NSOperationQueuePriority = .Normal) -&gt; Self {<br>		queuePriority = priority<br>		return self<br>	}<br></p><p>	func changeName(name: String) -&gt; Self {<br>		self.name = name<br>		return self<br>	}<br></p><p>	func waitFor(dependency: NSOperation) -&gt; Self {<br>		addDependency(dependency)<br>		return self<br>	}<br>}<br></p><p>func fluent() {<br>	let queue = NSOperationQueue()<br>	let mainOperation = NSBlockOperation(block: backgroundStuff).changeName(&quot;DownloadTask&quot;).changePriority(.VeryHigh)<br>	mainOperation.addToQueue(queue)<br>	NSBlockOperation(block: finish).changePriority(.Low).waitFor(mainOperation).addToQueue()<br>}<br></p><p>// second one - this wont actually compile, but the needed code wouldn&#39;t be complicated<br>self.view.layer.changeBorderWidth(3).changeBorderColor(UIColor.redColor().CGColor)<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>Fluent syntax (replacing void with a useful default return value)</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>December 19, 2015 at 07:00:00pm</p></header><div class="content"><p>This kind of pattern (which I&#39;ve always considered the &quot;builder<br>pattern&quot;) is useful in various circumstances, but I don&#39;t think it is<br>reasonable to assume that it&#39;s the appropriate pattern to use by default<br>for any mutating method.<br></p><p>I&#39;d much rather see an explicit method cascade operator added (e.g.<br>Dart&#39;s .. operator), which fulfills the same desire but without<br>requiring any API or even ABI changes, and without adding the overhead<br>of duplicating values all over the place (e.g. all the now-implicit-self<br>return values that aren&#39;t actually used by the caller).<br></p><p>-Kevin Ballard<br></p><p>On Sat, Dec 19, 2015, at 09:21 AM, Tino Heth via swift-evolution wrote:<br>&gt; Hi there,<br>&gt;<br>&gt; this idea might be quite unconventional, but it is simple and wouldn&#39;t<br>&gt; break any existing code. Returning void has no use beside telling<br>&gt; &quot;there is nothing to return&quot; and makes it impossible to perform method<br>&gt; chaining, which drives popular systems like iostream and LINQ (the<br>&gt; concept was promoted by Martin Fowler as fluent interface - but<br>&gt; wikipedia has a good explanation on this:<br>&gt; https://en.wikipedia.org/wiki/Fluent_interface) One of its most<br>&gt; popular use cases is database access, which imho will become quite<br>&gt; important for Swift as it might gain popularity in the server domain.<br>&gt; It is useful in other areas as well, but I&#39;ll stick to databases in an<br>&gt; example:<br>&gt;<br>&gt; let kids = userDatabase.select(.name).where(.age &lt; 18)<br>&gt;<br>&gt; This is already possible in Swift today, but with a simple change, it<br>&gt; could be much more fun: I guess void is the natural choice for a<br>&gt; default return value - what else is guaranteed to exist in a function?<br>&gt; For methods, on the other hand, there is a real object that is always<br>&gt; available: self. If self would be the default return value, we would<br>&gt; get method chaining for free in all places where we now stuck with<br>&gt; void - and whoever doesn&#39;t like the concept can still ignore the value<br>&gt; as he did with ().<br>&gt;<br>&gt; I have to admit that right now there is a proposal that wants to<br>&gt; sanction ignoring non-void return values with warnings, which would<br>&gt; interfere with this idea; but imho even in this case the workarounds<br>&gt; wouldn&#39;t be that complicated.<br>&gt;<br>&gt; So, please give feedback wether it is worth the burden of writing a<br>&gt; official proposal or start by creating a library with the current<br>&gt; toolset and try to prove the usefulness of fluent interfaces ;-)<br>&gt;<br>&gt; Best regards, Tino<br>&gt;<br>&gt; _________________________________________________<br>&gt; swift-evolution mailing list swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/751c6cb1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>Fluent syntax (replacing void with a useful default return value)</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>December 20, 2015 at 09:00:00pm</p></header><div class="content"><p>Same as Kevin. I like this pattern, but an implicit behavior of this sort doesn’t seem appropriate.<br></p><p>— Radek<br></p><p>&gt; On 20 Dec 2015, at 04:05, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; This kind of pattern (which I&#39;ve always considered the &quot;builder pattern&quot;) is useful in various circumstances, but I don&#39;t think it is reasonable to assume that it&#39;s the appropriate pattern to use by default for any mutating method.<br>&gt;  <br>&gt; I&#39;d much rather see an explicit method cascade operator added (e.g. Dart&#39;s .. operator), which fulfills the same desire but without requiring any API or even ABI changes, and without adding the overhead of duplicating values all over the place (e.g. all the now-implicit-self return values that aren&#39;t actually used by the caller).<br>&gt;  <br>&gt; -Kevin Ballard<br>&gt;  <br>&gt; On Sat, Dec 19, 2015, at 09:21 AM, Tino Heth via swift-evolution wrote:<br>&gt;&gt; Hi there,<br>&gt;&gt;  <br>&gt;&gt; this idea might be quite unconventional, but it is simple and wouldn&#39;t break any existing code.<br>&gt;&gt; Returning void has no use beside telling &quot;there is nothing to return&quot; and makes it impossible to perform method chaining, which drives popular systems like iostream and LINQ (the concept was promoted by Martin Fowler as fluent interface - but wikipedia has a good explanation on this: https://en.wikipedia.org/wiki/Fluent_interface &lt;https://en.wikipedia.org/wiki/Fluent_interface&gt;)<br>&gt;&gt; One of its most popular use cases is database access, which imho will become quite important for Swift as it might gain popularity in the server domain.<br>&gt;&gt; It is useful in other areas as well, but I&#39;ll stick to databases in an example:<br>&gt;&gt;  <br>&gt;&gt; let kids = userDatabase.select(.name).where(.age &lt; 18)<br>&gt;&gt;  <br>&gt;&gt; This is already possible in Swift today, but with a simple change, it could be much more fun:<br>&gt;&gt; I guess void is the natural choice for a default return value - what else is guaranteed to exist in a function?<br>&gt;&gt; For methods, on the other hand, there is a real object that is always available: self.<br>&gt;&gt; If self would be the default return value, we would get method chaining for free in all places where we now stuck with void - and whoever doesn&#39;t like the concept can still ignore the value as he did with ().<br>&gt;&gt;  <br>&gt;&gt; I have to admit that right now there is a proposal that wants to sanction ignoring non-void return values with warnings, which would interfere with this idea; but imho even in this case the workarounds wouldn&#39;t be that complicated.<br>&gt;&gt;  <br>&gt;&gt; So, please give feedback wether it is worth the burden of writing a official proposal or start by creating a library with the current toolset and try to prove the usefulness of fluent interfaces ;-)<br>&gt;&gt;  <br>&gt;&gt; Best regards,<br>&gt;&gt; Tino<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/d0e71e33/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f822334c2f6ebeafd3a41cd44c82a62b?s=50"></div><header><strong>Fluent syntax (replacing void with a useful default return value)</strong> from <string>Andrey Tarantsov</string> &lt;andrey at tarantsov.com&gt;<p>December 21, 2015 at 02:00:00am</p></header><div class="content"><p>&gt; I&#39;d much rather see an explicit method cascade operator added (e.g. Dart&#39;s .. operator)<br></p><p>This. The only right way to deal with it. Although is funny to mention Dart in this context; method cascades date back to SmallTalk at least. (I never understood why they didn&#39;t make it into Objective-C.)<br></p><p>A.<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
