<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/78b45a835031f4ce03a6653b3262b5d3?s=50"></div><header><strong>[Proposal] Add support for compile-time function execution</strong> from <string>Alexander Momchilov</string> &lt;alexandermomchilov at gmail.com&gt;<p>June  8, 2016 at 07:00:00pm</p></header><div class="content"><p>Preface: I know this is likely a large undertaking to implement, but I think it&#39;s worth it.<br></p><p>In addition to the typical compiler optimization of constant math expressions, some languages (such as D and C++) have support for running arbitrary functions at compile time &lt;https://en.wikipedia.org/wiki/Compile_time_function_execution&gt; (with some constraints).<br></p><p>I see many advantages of this:<br>On iOS/OS X: it could precompute the UI and app initialization logic (wherever possible) to speed app load times<br>It can significantly speed up the initialization of applications with large static properties. E.g. large constant Dictionaries could be precomputed.<br>You could keep complex math expressions (including custom functions) in their unevaluated form, without the pressure to precompute them elsewhere and hardcode in the result.<br>Dynamic programming: expensive look-up tables could be precomputed. These wouldn&#39;t necessarily be large in size, but if their elements are especially expensive to compute, there would be a huge advantage to precomputing them.<br></p><p>What do you guys think? Can you think of any other useful applications? Would it be worth the implementation effort?<br></p><p>- Regards,<br>        Alexander Momchilov<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160608/edb5feb8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Proposal] Add support for compile-time function execution</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June  9, 2016 at 07:00:00am</p></header><div class="content"><p>Chris has rules macros out-of-scope for 3.0. Who knows, maybe they&#39;ll be allowable in 4.0<br></p><p>&gt; On Jun 9, 2016, at 1:41 AM, Alexander Momchilov via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Preface: I know this is likely a large undertaking to implement, but I think it&#39;s worth it.<br>&gt; <br>&gt; In addition to the typical compiler optimization of constant math expressions, some languages (such as D and C++) have support for running arbitrary functions at compile time (with some constraints).<br>&gt; <br>&gt; I see many advantages of this:<br>&gt; On iOS/OS X: it could precompute the UI and app initialization logic (wherever possible) to speed app load times<br>&gt; It can significantly speed up the initialization of applications with large static properties. E.g. large constant Dictionaries could be precomputed.<br>&gt; You could keep complex math expressions (including custom functions) in their unevaluated form, without the pressure to precompute them elsewhere and hardcode in the result.<br>&gt; Dynamic programming: expensive look-up tables could be precomputed. These wouldn&#39;t necessarily be large in size, but if their elements are especially expensive to compute, there would be a huge advantage to precomputing them.<br>&gt; <br>&gt; What do you guys think? Can you think of any other useful applications? Would it be worth the implementation effort?<br>&gt; <br>&gt; - Regards,<br>&gt;         Alexander Momchilov<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/b41e8a31/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/73a38bb7bc9528e31098defe30e68ea4?s=50"></div><header><strong>[Proposal] Add support for compile-time function execution</strong> from <string>Jean-Daniel Dupas</string> &lt;mailing at xenonium.com&gt;<p>June  9, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; Le 9 juin 2016 à 01:41, Alexander Momchilov via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Preface: I know this is likely a large undertaking to implement, but I think it&#39;s worth it.<br>&gt; <br>&gt; In addition to the typical compiler optimization of constant math expressions, some languages (such as D and C++) have support for running arbitrary functions at compile time &lt;https://en.wikipedia.org/wiki/Compile_time_function_execution&gt; (with some constraints).<br>&gt; <br>&gt; I see many advantages of this:<br>&gt; On iOS/OS X: it could precompute the UI and app initialization logic (wherever possible) to speed app load times<br></p><p>I can’t see how it would speed up app launch time. You still all have to allocate and init all UI objects, especially as they are opaque objects and can’t be precomputed.<br></p><p>&gt; It can significantly speed up the initialization of applications with large static properties. E.g. large constant Dictionaries could be precomputed.<br>&gt; You could keep complex math expressions (including custom functions) in their unevaluated form, without the pressure to precompute them elsewhere and hardcode in the result.<br>&gt; Dynamic programming: expensive look-up tables could be precomputed. These wouldn&#39;t necessarily be large in size, but if their elements are especially expensive to compute, there would be a huge advantage to precomputing them.<br>&gt; <br>&gt; What do you guys think? Can you think of any other useful applications? Would it be worth the implementation effort?<br>&gt; <br>&gt; - Regards,<br>&gt;         Alexander Momchilov<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/d9a46cb9/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
