<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Pitch] Tuple Destructuring in Parameter Lists</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>May  6, 2016 at 06:00:00am</p></header><div class="content"><p>+1<br></p><p><br></p><p>I do like the syntax suggested by Dennis. Making use of Swift&#39;s ability to differentiate between external and internal parameter names is a great idea!<br></p><p><br></p><p>-Thorsten<br></p><p><br></p><p><br>Am 06. Mai 2016 um 06:25 schrieb &quot;T.J. Usiyan via swift-evolution&quot; &lt;swift-evolution at swift.org&gt;:<br></p><p><br>+1 <br>I have wanted this since the first beta. I hadn&#39;t proposed because I haven&#39;t come up with a nice syntax to do this in functions/methods. I don&#39;t particularly like<br>    func takesATuple(someInt: Int, tuple (valueA, valueB): (String, String))<br></p><p><br>and the closes that I have come is to simply reuse the closure syntax with<br></p><p><br>    func takesATuple(someInt: Int, tuple: (String, String)) {  (someInt, (valueA, valueB)) in<br></p><p><br>but that gets confusing in my opinion, specifically if you choose to have different names inside and outside.<br></p><p><br></p><p><br></p><p><br>On Thu, May 5, 2016 at 11:22 AM, Dennis Weissmann via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>Following a short discussion with positive feedback on [swift-users](http://thread.gmane.org/gmane.comp.lang.swift.user/1812) I’d like to discuss the following:<br></p><p><br>Tuples should be destructible into their components in parameter lists.<br></p><p><br>Consider the following code:<br></p><p><br>let a = [0,1,2,3,4,5,6,7,8,9]<br>let b = [0,1,2,3,4,5,6,7,8,9]<br></p><p><br>let c = zip(a,b).reduce(0) { acc, tuple in<br>  acc + tuple.0 + tuple.1<br>}<br></p><p><br>tuple is of type (Int, Int).<br></p><p><br>The problem is that the calculation is not very comprehensible due to .0 and .1. That’s when destructuring tuples directly in the parameter list comes into play:<br></p><p><br>let c = zip(a,b).reduce(0) { acc, (valueA, valueB) in<br>  acc + valueA + valueB<br>}<br></p><p><br>The above is what I propose should be accepted by the compiler (but currently isn’t).<br></p><p><br>Currently tuple destructuring is possible like this:<br></p><p><br>let c = zip(a,b).reduce(0) { (acc, tuple) in<br>  let (valueA, valueB) = tuple<br>  return acc + valueA + valueB<br>}<br></p><p><br>This is not about saving one line ;-). I just find it much more intuitive to destructure the tuple in the parameter list itself.<br></p><p><br>The same thing could be done for functions:<br></p><p><br>func takesATuple(someInt: Int, tuple: (String, String))<br></p><p><br>Here we also need to destructure the tuple inside the function, but the intuitive place (at least for me) to do this would be the parameter list.<br></p><p><br>In the following example I&#39;m making use of Swift’s feature to name parameters different from their labels (for internal use inside the function, this is not visible to consumers of the API):<br></p><p><br>func takesATuple(someInt: Int, tuple (valueA, valueB): (String, String))<br></p><p><br>Here valueA and valueB would be directly usable within the function. The tuple as a whole would not be available anymore.<br></p><p><br></p><p><br>Now it’s your turn!<br></p><p><br>1. What do you think?<br>2. Is this worth being discussed now (i.e. is it implementable in the Swift 3 timeframe) or should I delay it?<br></p><p><br>Cheers,<br></p><p><br>- Dennis<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br></p><p><br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160506/7c77dcf3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>[Pitch] Tuple Destructuring in Parameter Lists</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>May  6, 2016 at 08:00:00am</p></header><div class="content"><p>+1 it improves readability a lot and thus should be encouraged.<br></p><p>[[iOS messageWithData:ideas] broadcast]<br></p><p>&gt; On 6 May 2016, at 07:57, Thorsten Seitz via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1<br>&gt; <br>&gt; I do like the syntax suggested by Dennis. Making use of Swift&#39;s ability to differentiate between external and internal parameter names is a great idea!<br>&gt; <br>&gt; -Thorsten<br>&gt; <br>&gt; <br>&gt;&gt; Am 06. Mai 2016 um 06:25 schrieb &quot;T.J. Usiyan via swift-evolution&quot; &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt; <br>&gt;&gt; +1 <br>&gt;&gt; I have wanted this since the first beta. I hadn&#39;t proposed because I haven&#39;t come up with a nice syntax to do this in functions/methods. I don&#39;t particularly like<br>&gt;&gt;     func takesATuple(someInt: Int, tuple (valueA, valueB): (String, String))<br>&gt;&gt; <br>&gt;&gt; and the closes that I have come is to simply reuse the closure syntax with<br>&gt;&gt; <br>&gt;&gt;     func takesATuple(someInt: Int, tuple: (String, String)) {  (someInt, (valueA, valueB)) in<br>&gt;&gt; <br>&gt;&gt; but that gets confusing in my opinion, specifically if you choose to have different names inside and outside.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Thu, May 5, 2016 at 11:22 AM, Dennis Weissmann via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; Following a short discussion with positive feedback on [swift-users](http://thread.gmane.org/gmane.comp.lang.swift.user/1812) I’d like to discuss the following:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Tuples should be destructible into their components in parameter lists.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Consider the following code:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let a = [0,1,2,3,4,5,6,7,8,9]<br>&gt;&gt;&gt; let b = [0,1,2,3,4,5,6,7,8,9]<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let c = zip(a,b).reduce(0) { acc, tuple in<br>&gt;&gt;&gt;   acc + tuple.0 + tuple.1<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; tuple is of type (Int, Int).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The problem is that the calculation is not very comprehensible due to .0 and .1. That’s when destructuring tuples directly in the parameter list comes into play:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let c = zip(a,b).reduce(0) { acc, (valueA, valueB) in<br>&gt;&gt;&gt;   acc + valueA + valueB<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The above is what I propose should be accepted by the compiler (but currently isn’t).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Currently tuple destructuring is possible like this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let c = zip(a,b).reduce(0) { (acc, tuple) in<br>&gt;&gt;&gt;   let (valueA, valueB) = tuple<br>&gt;&gt;&gt;   return acc + valueA + valueB<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is not about saving one line ;-). I just find it much more intuitive to destructure the tuple in the parameter list itself.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The same thing could be done for functions:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func takesATuple(someInt: Int, tuple: (String, String))<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Here we also need to destructure the tuple inside the function, but the intuitive place (at least for me) to do this would be the parameter list.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In the following example I&#39;m making use of Swift’s feature to name parameters different from their labels (for internal use inside the function, this is not visible to consumers of the API):<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func takesATuple(someInt: Int, tuple (valueA, valueB): (String, String))<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Here valueA and valueB would be directly usable within the function. The tuple as a whole would not be available anymore.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Now it’s your turn!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1. What do you think?<br>&gt;&gt;&gt; 2. Is this worth being discussed now (i.e. is it implementable in the Swift 3 timeframe) or should I delay it?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Dennis<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160506/8be1af08/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f50a7532821edd503161abf3f2eb87cd?s=50"></div><header><strong>[Pitch] Tuple Destructuring in Parameter Lists</strong> from <string>Cole Campbell</string> &lt;cole.m.campbell at icloud.com&gt;<p>May  6, 2016 at 02:00:00am</p></header><div class="content"><p>+1 from me as well. I have no problem with the function declaration in the example. It&#39;s very intuitive and is much more elegant than destructing in the function body.<br></p><p>Cole<br></p><p>&gt; On May 6, 2016, at 2:05 AM, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1 it improves readability a lot and thus should be encouraged.<br>&gt; <br>&gt; [[iOS messageWithData:ideas] broadcast]<br>&gt; <br>&gt;&gt; On 6 May 2016, at 07:57, Thorsten Seitz via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; +1<br>&gt;&gt; <br>&gt;&gt; I do like the syntax suggested by Dennis. Making use of Swift&#39;s ability to differentiate between external and internal parameter names is a great idea!<br>&gt;&gt; <br>&gt;&gt; -Thorsten<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; Am 06. Mai 2016 um 06:25 schrieb &quot;T.J. Usiyan via swift-evolution&quot; &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; +1 <br>&gt;&gt;&gt; I have wanted this since the first beta. I hadn&#39;t proposed because I haven&#39;t come up with a nice syntax to do this in functions/methods. I don&#39;t particularly like<br>&gt;&gt;&gt;     func takesATuple(someInt: Int, tuple (valueA, valueB): (String, String))<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; and the closes that I have come is to simply reuse the closure syntax with<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     func takesATuple(someInt: Int, tuple: (String, String)) {  (someInt, (valueA, valueB)) in<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; but that gets confusing in my opinion, specifically if you choose to have different names inside and outside.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Thu, May 5, 2016 at 11:22 AM, Dennis Weissmann via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; Following a short discussion with positive feedback on [swift-users](http://thread.gmane.org/gmane.comp.lang.swift.user/1812) I’d like to discuss the following:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Tuples should be destructible into their components in parameter lists.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Consider the following code:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let a = [0,1,2,3,4,5,6,7,8,9]<br>&gt;&gt;&gt;&gt; let b = [0,1,2,3,4,5,6,7,8,9]<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let c = zip(a,b).reduce(0) { acc, tuple in<br>&gt;&gt;&gt;&gt;   acc + tuple.0 + tuple.1<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; tuple is of type (Int, Int).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The problem is that the calculation is not very comprehensible due to .0 and .1. That’s when destructuring tuples directly in the parameter list comes into play:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let c = zip(a,b).reduce(0) { acc, (valueA, valueB) in<br>&gt;&gt;&gt;&gt;   acc + valueA + valueB<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The above is what I propose should be accepted by the compiler (but currently isn’t).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Currently tuple destructuring is possible like this:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let c = zip(a,b).reduce(0) { (acc, tuple) in<br>&gt;&gt;&gt;&gt;   let (valueA, valueB) = tuple<br>&gt;&gt;&gt;&gt;   return acc + valueA + valueB<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This is not about saving one line ;-). I just find it much more intuitive to destructure the tuple in the parameter list itself.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The same thing could be done for functions:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func takesATuple(someInt: Int, tuple: (String, String))<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Here we also need to destructure the tuple inside the function, but the intuitive place (at least for me) to do this would be the parameter list.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; In the following example I&#39;m making use of Swift’s feature to name parameters different from their labels (for internal use inside the function, this is not visible to consumers of the API):<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func takesATuple(someInt: Int, tuple (valueA, valueB): (String, String))<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Here valueA and valueB would be directly usable within the function. The tuple as a whole would not be available anymore.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Now it’s your turn!<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 1. What do you think?<br>&gt;&gt;&gt;&gt; 2. Is this worth being discussed now (i.e. is it implementable in the Swift 3 timeframe) or should I delay it?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - Dennis<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160506/f0168fd5/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
