<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8809800aec2460f291384b794d7e6f8f?s=50"></div><header><strong>Attempting to call default protocol implementation crashes Playground</strong> from <string>Rick Mann</string> &lt;rmann at latencyzero.com&gt;<p>November 15, 2016 at 02:00:00pm</p></header><div class="content"><p>The following gives Xcode 8.1 a very hard time. Eventually I get a Bad Access on the last line. I&#39;m guessing it&#39;s a recursive call. Is there any way to call the default implementation from a &quot;real&quot; implementation?<br></p><p>protocol FooPro<br>{<br>	func fooFunc()<br>}<br></p><p>extension FooPro<br>{<br>	func<br>	fooFunc()<br>	{<br>		print(&quot;fooFunc default&quot;)<br>	}<br>}<br></p><p>class FooClass : FooPro<br>{<br>	func<br>	fooFunc()<br>	{<br>		(self as FooPro).fooFunc()<br>		print(&quot;fooFunc FooClass&quot;)<br>	}<br>}<br></p><p>let fc: FooPro = FooClass()<br>fc.fooFunc()<br></p><p><br>Thanks!<br></p><p><br>-- <br>Rick Mann<br>rmann at latencyzero.com<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0f0154768aeec561194e651b0bca02d9?s=50"></div><header><strong>Attempting to call default protocol implementation crashes Playground</strong> from <string>Dan Loewenherz</string> &lt;dan at lionheartsw.com&gt;<p>November 15, 2016 at 04:00:00pm</p></header><div class="content"><p>What are you trying to accomplish here, more concretely?<br></p><p>My first thought is that you shouldn&#39;t implement the same function in both<br>a protocol extension and a conforming class. Why not just give them<br>different names and call the function from within the extension instead of<br>from the class? E.g.<br></p><p>protocol FooPro {<br></p><p>    func _fooFunc()<br></p><p>}<br></p><p><br>extension FooPro {<br></p><p>    func fooFunc() {<br></p><p>        print(&quot;fooFunc default&quot;)<br></p><p>        _fooFunc()<br></p><p>    }<br></p><p>}<br></p><p><br>class FooClass: FooPro {<br></p><p>    func _fooFunc() {<br></p><p>        print(&quot;fooFunc FooClass&quot;)<br></p><p>    }<br></p><p>}<br></p><p><br>let fc = FooClass()<br></p><p>fc.fooFunc()<br></p><p>Dan<br></p><p>On Tue, Nov 15, 2016 at 4:28 PM, Rick Mann via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; The following gives Xcode 8.1 a very hard time. Eventually I get a Bad<br>&gt; Access on the last line. I&#39;m guessing it&#39;s a recursive call. Is there any<br>&gt; way to call the default implementation from a &quot;real&quot; implementation?<br>&gt;<br>&gt; protocol FooPro<br>&gt; {<br>&gt;         func fooFunc()<br>&gt; }<br>&gt;<br>&gt; extension FooPro<br>&gt; {<br>&gt;         func<br>&gt;         fooFunc()<br>&gt;         {<br>&gt;                 print(&quot;fooFunc default&quot;)<br>&gt;         }<br>&gt; }<br>&gt;<br>&gt; class FooClass : FooPro<br>&gt; {<br>&gt;         func<br>&gt;         fooFunc()<br>&gt;         {<br>&gt;                 (self as FooPro).fooFunc()<br>&gt;                 print(&quot;fooFunc FooClass&quot;)<br>&gt;         }<br>&gt; }<br>&gt;<br>&gt; let fc: FooPro = FooClass()<br>&gt; fc.fooFunc()<br>&gt;<br>&gt;<br>&gt; Thanks!<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Rick Mann<br>&gt; rmann at latencyzero.com<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161115/deeca505/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8809800aec2460f291384b794d7e6f8f?s=50"></div><header><strong>Attempting to call default protocol implementation crashes Playground</strong> from <string>Rick Mann</string> &lt;rmann at latencyzero.com&gt;<p>November 15, 2016 at 03:00:00pm</p></header><div class="content"><p>Well, this is a standard protocol default implementation. I was experimenting to see if it was possible to call the default implementation after providing a concrete implementation.<br></p><p>&gt; On Nov 15, 2016, at 14:47 , Dan Loewenherz &lt;dan at lionheartsw.com&gt; wrote:<br>&gt; <br>&gt; What are you trying to accomplish here, more concretely?<br>&gt; <br>&gt; My first thought is that you shouldn&#39;t implement the same function in both a protocol extension and a conforming class. Why not just give them different names and call the function from within the extension instead of from the class? E.g.<br>&gt; <br>&gt; protocol FooPro {<br>&gt;     func _fooFunc()<br>&gt; }<br>&gt; <br>&gt; extension FooPro {<br>&gt;     func fooFunc() {<br>&gt;         print(&quot;fooFunc default&quot;)<br>&gt;         _fooFunc()<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; class FooClass: FooPro {<br>&gt;     func _fooFunc() {<br>&gt;         print(&quot;fooFunc FooClass&quot;)<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; let fc = FooClass()<br>&gt; fc.fooFunc()<br>&gt; <br>&gt; Dan<br>&gt; <br>&gt; On Tue, Nov 15, 2016 at 4:28 PM, Rick Mann via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; The following gives Xcode 8.1 a very hard time. Eventually I get a Bad Access on the last line. I&#39;m guessing it&#39;s a recursive call. Is there any way to call the default implementation from a &quot;real&quot; implementation?<br>&gt; <br>&gt; protocol FooPro<br>&gt; {<br>&gt;         func fooFunc()<br>&gt; }<br>&gt; <br>&gt; extension FooPro<br>&gt; {<br>&gt;         func<br>&gt;         fooFunc()<br>&gt;         {<br>&gt;                 print(&quot;fooFunc default&quot;)<br>&gt;         }<br>&gt; }<br>&gt; <br>&gt; class FooClass : FooPro<br>&gt; {<br>&gt;         func<br>&gt;         fooFunc()<br>&gt;         {<br>&gt;                 (self as FooPro).fooFunc()<br>&gt;                 print(&quot;fooFunc FooClass&quot;)<br>&gt;         }<br>&gt; }<br>&gt; <br>&gt; let fc: FooPro = FooClass()<br>&gt; fc.fooFunc()<br>&gt; <br>&gt; <br>&gt; Thanks!<br>&gt; <br>&gt; <br>&gt; --<br>&gt; Rick Mann<br>&gt; rmann at latencyzero.com<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br></p><p><br>-- <br>Rick Mann<br>rmann at latencyzero.com<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>Attempting to call default protocol implementation crashes Playground</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>November 16, 2016 at 01:00:00am</p></header><div class="content"><p>&#39;Default&#39; implementation in protocol extension is used as fail safe. You should not consider it like something super class does. If you want it that way, use class inheritance instead.<br>Zhaoxin<br></p><p>Get Outlook for iOS<br></p><p>		_____________________________<br>From: Rick Mann via swift-users &lt;swift-users at swift.org&gt;<br>Sent: 星期三, 十一月 16, 2016 07:51<br>Subject: Re: [swift-users] Attempting to call default protocol implementation crashes Playground<br>To: Dan Loewenherz &lt;dan at lionheartsw.com&gt;<br>Cc: swift-users &lt;swift-users at swift.org&gt;<br></p><p><br>Well, this is a standard protocol default implementation. I was experimenting to see if it was possible to call the default implementation after providing a concrete implementation.<br></p><p>&gt; On Nov 15, 2016, at 14:47 , Dan Loewenherz &lt;dan at lionheartsw.com&gt; wrote:<br>&gt; <br>&gt; What are you trying to accomplish here, more concretely?<br>&gt; <br>&gt; My first thought is that you shouldn&#39;t implement the same function in both a protocol extension and a conforming class. Why not just give them different names and call the function from within the extension instead of from the class? E.g.<br>&gt; <br>&gt; protocol FooPro {<br>&gt;     func _fooFunc()<br>&gt; }<br>&gt; <br>&gt; extension FooPro {<br>&gt;     func fooFunc() {<br>&gt;         print(&quot;fooFunc default&quot;)<br>&gt;         _fooFunc()<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; class FooClass: FooPro {<br>&gt;     func _fooFunc() {<br>&gt;         print(&quot;fooFunc FooClass&quot;)<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; let fc = FooClass()<br>&gt; fc.fooFunc()<br>&gt; <br>&gt; Dan<br>&gt; <br>&gt; On Tue, Nov 15, 2016 at 4:28 PM, Rick Mann via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; The following gives Xcode 8.1 a very hard time. Eventually I get a Bad Access on the last line. I&#39;m guessing it&#39;s a recursive call. Is there any way to call the default implementation from a &quot;real&quot; implementation?<br>&gt; <br>&gt; protocol FooPro<br>&gt; {<br>&gt;         func fooFunc()<br>&gt; }<br>&gt; <br>&gt; extension FooPro<br>&gt; {<br>&gt;         func<br>&gt;         fooFunc()<br>&gt;         {<br>&gt;                 print(&quot;fooFunc default&quot;)<br>&gt;         }<br>&gt; }<br>&gt; <br>&gt; class FooClass : FooPro<br>&gt; {<br>&gt;         func<br>&gt;         fooFunc()<br>&gt;         {<br>&gt;                 (self as FooPro).fooFunc()<br>&gt;                 print(&quot;fooFunc FooClass&quot;)<br>&gt;         }<br>&gt; }<br>&gt; <br>&gt; let fc: FooPro = FooClass()<br>&gt; fc.fooFunc()<br>&gt; <br>&gt; <br>&gt; Thanks!<br>&gt; <br>&gt; <br>&gt; --<br>&gt; Rick Mann<br>&gt; rmann at latencyzero.com<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br></p><p><br>-- <br>Rick Mann<br>rmann at latencyzero.com<br></p><p><br>_______________________________________________<br>swift-users mailing list<br>swift-users at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-users<br></p><p><br></p><p>	<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161116/a53f40f7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8809800aec2460f291384b794d7e6f8f?s=50"></div><header><strong>Attempting to call default protocol implementation crashes Playground</strong> from <string>Rick Mann</string> &lt;rmann at latencyzero.com&gt;<p>November 15, 2016 at 05:00:00pm</p></header><div class="content"><p>Okay. I coudln&#39;t find official documentation on this, and I don&#39;t currently need to do this, but wanted to fully understand it.<br></p><p>&gt; On Nov 15, 2016, at 17:27 , zh ao &lt;owenzx at gmail.com&gt; wrote:<br>&gt; <br>&gt; &#39;Default&#39; implementation in protocol extension is used as fail safe. You should not consider it like something super class does. If you want it that way, use class inheritance instead.<br>&gt; <br>&gt; Zhaoxin<br>&gt; <br>&gt; Get Outlook for iOS<br>&gt; <br>&gt; _____________________________<br>&gt; From: Rick Mann via swift-users &lt;swift-users at swift.org&gt;<br>&gt; Sent: 星期三, 十一月 16, 2016 07:51<br>&gt; Subject: Re: [swift-users] Attempting to call default protocol implementation crashes Playground<br>&gt; To: Dan Loewenherz &lt;dan at lionheartsw.com&gt;<br>&gt; Cc: swift-users &lt;swift-users at swift.org&gt;<br>&gt; <br>&gt; <br>&gt; Well, this is a standard protocol default implementation. I was experimenting to see if it was possible to call the default implementation after providing a concrete implementation.<br>&gt; <br>&gt; &gt; On Nov 15, 2016, at 14:47 , Dan Loewenherz &lt;dan at lionheartsw.com&gt; wrote:<br>&gt; &gt; <br>&gt; &gt; What are you trying to accomplish here, more concretely?<br>&gt; &gt; <br>&gt; &gt; My first thought is that you shouldn&#39;t implement the same function in both a protocol extension and a conforming class. Why not just give them different names and call the function from within the extension instead of from the class? E.g.<br>&gt; &gt; <br>&gt; &gt; protocol FooPro {<br>&gt; &gt; func _fooFunc()<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; extension FooPro {<br>&gt; &gt; func fooFunc() {<br>&gt; &gt; print(&quot;fooFunc default&quot;)<br>&gt; &gt; _fooFunc()<br>&gt; &gt; }<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; class FooClass: FooPro {<br>&gt; &gt; func _fooFunc() {<br>&gt; &gt; print(&quot;fooFunc FooClass&quot;)<br>&gt; &gt; }<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; let fc = FooClass()<br>&gt; &gt; fc.fooFunc()<br>&gt; &gt; <br>&gt; &gt; Dan<br>&gt; &gt; <br>&gt; &gt; On Tue, Nov 15, 2016 at 4:28 PM, Rick Mann via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; &gt; The following gives Xcode 8.1 a very hard time. Eventually I get a Bad Access on the last line. I&#39;m guessing it&#39;s a recursive call. Is there any way to call the default implementation from a &quot;real&quot; implementation?<br>&gt; &gt; <br>&gt; &gt; protocol FooPro<br>&gt; &gt; {<br>&gt; &gt; func fooFunc()<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; extension FooPro<br>&gt; &gt; {<br>&gt; &gt; func<br>&gt; &gt; fooFunc()<br>&gt; &gt; {<br>&gt; &gt; print(&quot;fooFunc default&quot;)<br>&gt; &gt; }<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; class FooClass : FooPro<br>&gt; &gt; {<br>&gt; &gt; func<br>&gt; &gt; fooFunc()<br>&gt; &gt; {<br>&gt; &gt; (self as FooPro).fooFunc()<br>&gt; &gt; print(&quot;fooFunc FooClass&quot;)<br>&gt; &gt; }<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; let fc: FooPro = FooClass()<br>&gt; &gt; fc.fooFunc()<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; Thanks!<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; --<br>&gt; &gt; Rick Mann<br>&gt; &gt; rmann at latencyzero.com<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-users mailing list<br>&gt; &gt; swift-users at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; &gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Rick Mann<br>&gt; rmann at latencyzero.com<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br>&gt; <br></p><p><br>-- <br>Rick Mann<br>rmann at latencyzero.com<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c45573c04087ddcfa76a22095bb0877b?s=50"></div><header><strong>Attempting to call default protocol implementation crashes Playground</strong> from <string>Игорь Никитин</string> &lt;devnikor at icloud.com&gt;<p>November 16, 2016 at 09:00:00am</p></header><div class="content"><p>Right, it’s a recursion, because this <br></p><p>(self as FooPro).fooFunc()<br></p><p>Will call FooClass’s  method implementation<br></p><p>You can read more about dispatch rules here: https://medium.com/ios-os-x-development/swift-protocol-extension-method-dispatch-6a6bf270ba94#.hkh1rc56p &lt;https://medium.com/ios-os-x-development/swift-protocol-extension-method-dispatch-6a6bf270ba94#.hkh1rc56p&gt;<br></p><p><br></p><p>&gt; 16 нояб. 2016 г., в 4:29, Rick Mann via swift-users &lt;swift-users at swift.org&gt; написал(а):<br>&gt; <br>&gt; Okay. I coudln&#39;t find official documentation on this, and I don&#39;t currently need to do this, but wanted to fully understand it.<br>&gt; <br>&gt;&gt; On Nov 15, 2016, at 17:27 , zh ao &lt;owenzx at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &#39;Default&#39; implementation in protocol extension is used as fail safe. You should not consider it like something super class does. If you want it that way, use class inheritance instead.<br>&gt;&gt; <br>&gt;&gt; Zhaoxin<br>&gt;&gt; <br>&gt;&gt; Get Outlook for iOS<br>&gt;&gt; <br>&gt;&gt; _____________________________<br>&gt;&gt; From: Rick Mann via swift-users &lt;swift-users at swift.org&gt;<br>&gt;&gt; Sent: 星期三, 十一月 16, 2016 07:51<br>&gt;&gt; Subject: Re: [swift-users] Attempting to call default protocol implementation crashes Playground<br>&gt;&gt; To: Dan Loewenherz &lt;dan at lionheartsw.com&gt;<br>&gt;&gt; Cc: swift-users &lt;swift-users at swift.org&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Well, this is a standard protocol default implementation. I was experimenting to see if it was possible to call the default implementation after providing a concrete implementation.<br>&gt;&gt; <br>&gt;&gt;&gt; On Nov 15, 2016, at 14:47 , Dan Loewenherz &lt;dan at lionheartsw.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What are you trying to accomplish here, more concretely?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; My first thought is that you shouldn&#39;t implement the same function in both a protocol extension and a conforming class. Why not just give them different names and call the function from within the extension instead of from the class? E.g.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; protocol FooPro {<br>&gt;&gt;&gt; func _fooFunc()<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; extension FooPro {<br>&gt;&gt;&gt; func fooFunc() {<br>&gt;&gt;&gt; print(&quot;fooFunc default&quot;)<br>&gt;&gt;&gt; _fooFunc()<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; class FooClass: FooPro {<br>&gt;&gt;&gt; func _fooFunc() {<br>&gt;&gt;&gt; print(&quot;fooFunc FooClass&quot;)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let fc = FooClass()<br>&gt;&gt;&gt; fc.fooFunc()<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Dan<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Tue, Nov 15, 2016 at 4:28 PM, Rick Mann via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt; The following gives Xcode 8.1 a very hard time. Eventually I get a Bad Access on the last line. I&#39;m guessing it&#39;s a recursive call. Is there any way to call the default implementation from a &quot;real&quot; implementation?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; protocol FooPro<br>&gt;&gt;&gt; {<br>&gt;&gt;&gt; func fooFunc()<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; extension FooPro<br>&gt;&gt;&gt; {<br>&gt;&gt;&gt; func<br>&gt;&gt;&gt; fooFunc()<br>&gt;&gt;&gt; {<br>&gt;&gt;&gt; print(&quot;fooFunc default&quot;)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; class FooClass : FooPro<br>&gt;&gt;&gt; {<br>&gt;&gt;&gt; func<br>&gt;&gt;&gt; fooFunc()<br>&gt;&gt;&gt; {<br>&gt;&gt;&gt; (self as FooPro).fooFunc()<br>&gt;&gt;&gt; print(&quot;fooFunc FooClass&quot;)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let fc: FooPro = FooClass()<br>&gt;&gt;&gt; fc.fooFunc()<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; Rick Mann<br>&gt;&gt;&gt; rmann at latencyzero.com<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Rick Mann<br>&gt;&gt; rmann at latencyzero.com<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Rick Mann<br>&gt; rmann at latencyzero.com &lt;mailto:rmann at latencyzero.com&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161116/0b991ad2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c45573c04087ddcfa76a22095bb0877b?s=50"></div><header><strong>Attempting to call default protocol implementation crashes Playground</strong> from <string>Игорь Никитин</string> &lt;devnikor at icloud.com&gt;<p>November 16, 2016 at 09:00:00am</p></header><div class="content"><p>And, as I know, it&#39;s not possible to call protocol&#39;s implementation in that case<br></p><p><br>&gt; 16 нояб. 2016 г., в 9:09, Игорь Никитин via swift-users &lt;swift-users at swift.org&gt; написал(а):<br>&gt; <br>&gt; Right, it’s a recursion, because this <br>&gt; <br>&gt; (self as FooPro).fooFunc()<br>&gt; <br>&gt; Will call FooClass’s  method implementation<br>&gt; <br>&gt; You can read more about dispatch rules here: https://medium.com/ios-os-x-development/swift-protocol-extension-method-dispatch-6a6bf270ba94#.hkh1rc56p<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; 16 нояб. 2016 г., в 4:29, Rick Mann via swift-users &lt;swift-users at swift.org&gt; написал(а):<br>&gt;&gt; <br>&gt;&gt; Okay. I coudln&#39;t find official documentation on this, and I don&#39;t currently need to do this, but wanted to fully understand it.<br>&gt;&gt; <br>&gt;&gt;&gt; On Nov 15, 2016, at 17:27 , zh ao &lt;owenzx at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &#39;Default&#39; implementation in protocol extension is used as fail safe. You should not consider it like something super class does. If you want it that way, use class inheritance instead.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Zhaoxin<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Get Outlook for iOS<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _____________________________<br>&gt;&gt;&gt; From: Rick Mann via swift-users &lt;swift-users at swift.org&gt;<br>&gt;&gt;&gt; Sent: 星期三, 十一月 16, 2016 07:51<br>&gt;&gt;&gt; Subject: Re: [swift-users] Attempting to call default protocol implementation crashes Playground<br>&gt;&gt;&gt; To: Dan Loewenherz &lt;dan at lionheartsw.com&gt;<br>&gt;&gt;&gt; Cc: swift-users &lt;swift-users at swift.org&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Well, this is a standard protocol default implementation. I was experimenting to see if it was possible to call the default implementation after providing a concrete implementation.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Nov 15, 2016, at 14:47 , Dan Loewenherz &lt;dan at lionheartsw.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What are you trying to accomplish here, more concretely?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; My first thought is that you shouldn&#39;t implement the same function in both a protocol extension and a conforming class. Why not just give them different names and call the function from within the extension instead of from the class? E.g.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; protocol FooPro {<br>&gt;&gt;&gt;&gt; func _fooFunc()<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; extension FooPro {<br>&gt;&gt;&gt;&gt; func fooFunc() {<br>&gt;&gt;&gt;&gt; print(&quot;fooFunc default&quot;)<br>&gt;&gt;&gt;&gt; _fooFunc()<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; class FooClass: FooPro {<br>&gt;&gt;&gt;&gt; func _fooFunc() {<br>&gt;&gt;&gt;&gt; print(&quot;fooFunc FooClass&quot;)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let fc = FooClass()<br>&gt;&gt;&gt;&gt; fc.fooFunc()<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Dan<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Tue, Nov 15, 2016 at 4:28 PM, Rick Mann via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; The following gives Xcode 8.1 a very hard time. Eventually I get a Bad Access on the last line. I&#39;m guessing it&#39;s a recursive call. Is there any way to call the default implementation from a &quot;real&quot; implementation?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; protocol FooPro<br>&gt;&gt;&gt;&gt; {<br>&gt;&gt;&gt;&gt; func fooFunc()<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; extension FooPro<br>&gt;&gt;&gt;&gt; {<br>&gt;&gt;&gt;&gt; func<br>&gt;&gt;&gt;&gt; fooFunc()<br>&gt;&gt;&gt;&gt; {<br>&gt;&gt;&gt;&gt; print(&quot;fooFunc default&quot;)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; class FooClass : FooPro<br>&gt;&gt;&gt;&gt; {<br>&gt;&gt;&gt;&gt; func<br>&gt;&gt;&gt;&gt; fooFunc()<br>&gt;&gt;&gt;&gt; {<br>&gt;&gt;&gt;&gt; (self as FooPro).fooFunc()<br>&gt;&gt;&gt;&gt; print(&quot;fooFunc FooClass&quot;)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let fc: FooPro = FooClass()<br>&gt;&gt;&gt;&gt; fc.fooFunc()<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks!<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt; Rick Mann<br>&gt;&gt;&gt;&gt; rmann at latencyzero.com<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Rick Mann<br>&gt;&gt;&gt; rmann at latencyzero.com<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Rick Mann<br>&gt;&gt; rmann at latencyzero.com<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161116/24cfc088/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c45573c04087ddcfa76a22095bb0877b?s=50"></div><header><strong>Attempting to call default protocol implementation crashes Playground</strong> from <string>Игорь Никитин</string> &lt;devnikor at icloud.com&gt;<p>November 16, 2016 at 09:00:00am</p></header><div class="content"><p>And, as I know, it&#39;s not possible to call protocol&#39;s implementation in that case<br></p><p>&gt; 16 нояб. 2016 г., в 4:29, Rick Mann via swift-users &lt;swift-users at swift.org&gt; написал(а):<br>&gt; <br>&gt; Okay. I coudln&#39;t find official documentation on this, and I don&#39;t currently need to do this, but wanted to fully understand it.<br>&gt; <br>&gt;&gt; On Nov 15, 2016, at 17:27 , zh ao &lt;owenzx at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &#39;Default&#39; implementation in protocol extension is used as fail safe. You should not consider it like something super class does. If you want it that way, use class inheritance instead.<br>&gt;&gt; <br>&gt;&gt; Zhaoxin<br>&gt;&gt; <br>&gt;&gt; Get Outlook for iOS<br>&gt;&gt; <br>&gt;&gt; _____________________________<br>&gt;&gt; From: Rick Mann via swift-users &lt;swift-users at swift.org&gt;<br>&gt;&gt; Sent: 星期三, 十一月 16, 2016 07:51<br>&gt;&gt; Subject: Re: [swift-users] Attempting to call default protocol implementation crashes Playground<br>&gt;&gt; To: Dan Loewenherz &lt;dan at lionheartsw.com&gt;<br>&gt;&gt; Cc: swift-users &lt;swift-users at swift.org&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Well, this is a standard protocol default implementation. I was experimenting to see if it was possible to call the default implementation after providing a concrete implementation.<br>&gt;&gt; <br>&gt;&gt;&gt; On Nov 15, 2016, at 14:47 , Dan Loewenherz &lt;dan at lionheartsw.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What are you trying to accomplish here, more concretely?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; My first thought is that you shouldn&#39;t implement the same function in both a protocol extension and a conforming class. Why not just give them different names and call the function from within the extension instead of from the class? E.g.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; protocol FooPro {<br>&gt;&gt;&gt; func _fooFunc()<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; extension FooPro {<br>&gt;&gt;&gt; func fooFunc() {<br>&gt;&gt;&gt; print(&quot;fooFunc default&quot;)<br>&gt;&gt;&gt; _fooFunc()<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; class FooClass: FooPro {<br>&gt;&gt;&gt; func _fooFunc() {<br>&gt;&gt;&gt; print(&quot;fooFunc FooClass&quot;)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let fc = FooClass()<br>&gt;&gt;&gt; fc.fooFunc()<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Dan<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Tue, Nov 15, 2016 at 4:28 PM, Rick Mann via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt; The following gives Xcode 8.1 a very hard time. Eventually I get a Bad Access on the last line. I&#39;m guessing it&#39;s a recursive call. Is there any way to call the default implementation from a &quot;real&quot; implementation?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; protocol FooPro<br>&gt;&gt;&gt; {<br>&gt;&gt;&gt; func fooFunc()<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; extension FooPro<br>&gt;&gt;&gt; {<br>&gt;&gt;&gt; func<br>&gt;&gt;&gt; fooFunc()<br>&gt;&gt;&gt; {<br>&gt;&gt;&gt; print(&quot;fooFunc default&quot;)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; class FooClass : FooPro<br>&gt;&gt;&gt; {<br>&gt;&gt;&gt; func<br>&gt;&gt;&gt; fooFunc()<br>&gt;&gt;&gt; {<br>&gt;&gt;&gt; (self as FooPro).fooFunc()<br>&gt;&gt;&gt; print(&quot;fooFunc FooClass&quot;)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let fc: FooPro = FooClass()<br>&gt;&gt;&gt; fc.fooFunc()<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; Rick Mann<br>&gt;&gt;&gt; rmann at latencyzero.com<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Rick Mann<br>&gt;&gt; rmann at latencyzero.com<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Rick Mann<br>&gt; rmann at latencyzero.com<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
