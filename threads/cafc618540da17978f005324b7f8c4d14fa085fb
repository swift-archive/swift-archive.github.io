<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fd5bd4566ee1f286333b7dbf2df6fadb?s=50"></div><header><strong>Proposal: SwiftPM Test Naming Conventions</strong> from <string>Anders Bertelrud</string> &lt;anders at apple.com&gt;<p>July 19, 2016 at 12:00:00pm</p></header><div class="content"><p>Hello,<br></p><p>I am proposing some improvements to the test naming conventions, along with clarified semantics.  You can find it here, and the current text is also included in this email:  https://github.com/abertelrud/swift-evolution/blob/master/proposals/NNNN-package-manager-test-naming-conventions.md<br></p><p>I would welcome any feedback.<br></p><p>Thanks,<br></p><p>Anders<br></p><p><br></p><p>Package Manager Test Naming Conventions<br></p><p>Proposal: SE-NNNN &lt;https://github.com/abertelrud/swift-evolution/blob/master/proposals/NNNN-package-manager-test-naming-conventions.md&gt;<br>Author: Anders Bertelrud &lt;https://github.com/abertelrud&gt;<br>Status: Awaiting review<br>Review manager: TBD<br> &lt;https://github.com/abertelrud/swift-evolution/tree/master/proposals#introduction&gt;Introduction<br></p><p>The Swift Package Manager uses a convention-based rather than a declarative approach for various aspects of package configuration. This is as true of the naming and structure of tests as of other kinds of targets.<br></p><p>However, the current conventions are somewhat inconsistent and unintuitive, and they also do not provide enough flexibility. This proposal seeks to address these problems through updated conventions.<br></p><p> &lt;https://github.com/abertelrud/swift-evolution/tree/master/proposals#motivation&gt;Motivation<br></p><p> &lt;https://github.com/abertelrud/swift-evolution/tree/master/proposals#predictability-of-test-target-names&gt;Predictability of test target names<br></p><p>Module names for test targets are currently formed by appending the suffix TestSuite to the name of the corresponding directory under the top-level Tests directory in the package.<br></p><p>This makes it non-obvious to know what name to pass to swift package test in order to run just one set of tests. This is also the case for any other context in which the module name is needed.<br></p><p> &lt;https://github.com/abertelrud/swift-evolution/tree/master/proposals#ability-to-declare-test-target-dependencies&gt;Ability to declare test target dependencies<br></p><p>The way in which the test module name is formed also makes it difficult to add target dependencies that specify the name of the test. This makes it hard to make a test depend on a library, such as a helper library containing shared code for use by the tests.<br></p><p>Another consequence of unconditionally appending a TestSuite suffix to every module under the Tests directory is that it becomes impossible to add modules under Tests that define helper libraries for use only by tests.<br></p><p> &lt;https://github.com/abertelrud/swift-evolution/tree/master/proposals#reportability-of-errors&gt;Reportability of errors<br></p><p>In order for error messages to be understandable and actionable, they should refer to names the user can see and control. Also, the naming convention needs to have a reliable way of determining user intent so that error messages can be made as clear as possible.<br></p><p> &lt;https://github.com/abertelrud/swift-evolution/tree/master/proposals#proposed-solution&gt;Proposed solution<br></p><p>The essence of the proposed solution is to make the naming of tests be more predictable and more under the package author&#39;s control. This is achieved in part by simplifying the naming conventions, and in part by reducing the number of differences between the conventions for the the Tests and the Sources top-level directories.<br></p><p>First, the naming convention will be changed so a module will be considered a test if it:<br></p><p>is located under the Tests directory<br>has a name that ends with Tests<br>A future proposal may want to loosen the restriction so that tests can also be located under Sources, if we feel that there is any use for that. As part of this proposal, SwiftPM will emit an error for any tests located under Sources.<br></p><p>Allowing non-test targets under the Tests directory will unblock future improvements to allow test-only libraries to be located there. It will also unblock the potential to support test executables in the future, though this proposal does not specifically address that.<br></p><p>Like any other target, a test will be able to be mentioned in a dependency declaration. As a convenience, if there is a target named Foo and a test target named FooTests, a dependency between the two will be automatically established.<br></p><p>It will still be allowed to have a FooTests test without a corresponding Foo source module. This can be useful for integration tests or for fixtures, etc.<br></p><p> &lt;https://github.com/abertelrud/swift-evolution/tree/master/proposals#detailed-design&gt;Detailed design<br></p><p>Change the naming conventions so that a module will be considered a test if it:<br></p><p>is located under the top-level Tests directory, and<br>has a name that ends with Tests<br>Allow a target dependency to refer to the name of a test target, which will allow package authors to create dependencies between tests and libraries.<br></p><p>Add an implicit dependency between any test target a non-test target that has the same name but without the Testssuffix.<br></p><p>For now, make it an error to have executables or libraries under Tests (for technical reasons, a LinuxMain.swiftsource file is permitted, and indeed expected, under the Tests top-level directory). The intent is to loosen this restriction in a future proposal, to allow test-specific libraries and test executables under Tests.<br></p><p>For now, make it an error to have tests under Sources. We may loosen this this restriction at some point, but would need to define what it would mean from a conceptual point of view to have tests under Sources instead of Tests.<br></p><p>Improve error reporting to reflect the new conventions. This includes adding more checks, and also auditing all the error messages relating to testing to see if there is more information that should be displayed.<br></p><p> &lt;https://github.com/abertelrud/swift-evolution/tree/master/proposals#impact-on-existing-code&gt;Impact on existing code<br></p><p>The change in naming conventions does mean that any module under the top-level Tests directory whose name ends with the suffix Tests will be considered a test module. The fact that this proposal does not involve allowing tests to be located under Sources, and the fact that any module under Tests already had an unconditional TestSuite suffix string appended, makes it unlikely that any current non-test module under Tests would suddenly be considered a test.<br></p><p>Any module with a Tests suffix under Sources would need to be renamed.<br></p><p>Any current package that refers to a test module using a TestSuite suffix will need to be changed.<br></p><p> &lt;https://github.com/abertelrud/swift-evolution/tree/master/proposals#alternatives-considered&gt;Alternatives considered<br></p><p>An alternative that was considered was to enhance the PackageDescription API to let package authors explicitly tag targets as tests. While we might still want to add this for cases in which the author doesn&#39;t want to use any of the naming conventions, we don&#39;t want such an API to be the only way to specify tests.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160719/cafc85fb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/05540cd6be96706f76aa66a4519f7db9?s=50"></div><header><strong>Proposal: SwiftPM Test Naming Conventions</strong> from <string>Ankit Agarwal</string> &lt;ankit at ankit.im&gt;<p>July 20, 2016 at 03:00:00am</p></header><div class="content"><p>Hi,<br></p><p>Great to see this proposal! Looks awesome! Just have couple of doubts:<br></p><p><br>&gt;    1.<br>&gt;<br>&gt;    For now, make it an error to have executables or libraries under Tests (for<br>&gt;    technical reasons, a LinuxMain.swiftsource file is permitted, and<br>&gt;    indeed expected, under the Tests top-level directory). The intent is<br>&gt;    to loosen this restriction in a future proposal, to allow test-specific<br>&gt;    libraries and test executables under Tests.<br>&gt;<br>&gt;<br>Is there a reason we want to not allow library modules under Tests right<br>now? I think keeping test-specific library modules under Tests makes more<br>sense. With the convention change in this proposal all modules that do not<br>end in Test can just act as normal modules on which Test targets can depend<br>on.<br>And Test targets would be able to define dependency on modules under<br>Sources or Tests folder.<br></p><p>&gt;<br>&gt;    1.<br>&gt;<br>&gt;    For now, make it an error to have tests under Sources. We may loosen<br>&gt;    this this restriction at some point, but would need to define what it would<br>&gt;    mean from a conceptual point of view to have tests under Sources instead<br>&gt;    of Tests.<br>&gt;<br>&gt; This mean that a module name that ends in `Tests` under `Sources` (even<br>though its not an actual test) will not be allowed. I am not sure if that<br>should be enforced, it might be too much magic.<br></p><p><br></p><p>-- <br>Ankit<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160720/5223613b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Proposal: SwiftPM Test Naming Conventions</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>July 20, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Jul 19, 2016, at 2:32 PM, Ankit Agarwal via swift-build-dev &lt;swift-build-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; Great to see this proposal! Looks awesome! Just have couple of doubts:<br>&gt; <br>&gt; For now, make it an error to have executables or libraries under Tests (for technical reasons, a LinuxMain.swiftsource file is permitted, and indeed expected, under the Tests top-level directory). The intent is to loosen this restriction in a future proposal, to allow test-specific libraries and test executables under Tests.<br>&gt; <br>&gt; <br>&gt; Is there a reason we want to not allow library modules under Tests right now? I think keeping test-specific library modules under Tests makes more sense. With the convention change in this proposal all modules that do not end in Test can just act as normal modules on which Test targets can depend on.<br></p><p>I think we agree, it just was orthogonal to this proposal (it is a new feature) and there are some points that need to be resolved/discussed (like what dependencies are allowed, what is impact on downstream projects, etc). Also, George had posted a similar proposal in this vein here:<br>  https://lists.swift.org/pipermail/swift-build-dev/Week-of-Mon-20160704/000539.html<br>so it seemed reasonable to let that it be handled by a separate proposal.<br></p><p>The other thing here is that enhancements can always come later, but since this will break all packages with tests it seems better to get ASAP.<br></p><p>&gt; And Test targets would be able to define dependency on modules under Sources or Tests folder.<br>&gt; For now, make it an error to have tests under Sources. We may loosen this this restriction at some point, but would need to define what it would mean from a conceptual point of view to have tests under Sources instead of Tests.<br>&gt; <br>&gt; This mean that a module name that ends in `Tests` under `Sources` (even though its not an actual test) will not be allowed. I am not sure if that should be enforced, it might be too much magic.<br></p><p>The reason to enforce it is that it would be really bad to allow it as a non-Tests module now, but then have future semantics make it a Tests module.<br></p><p> - Daniel<br></p><p>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Ankit<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160720/ff855ae5/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
