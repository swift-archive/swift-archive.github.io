<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fd420b6be1358fbbd155ad393453d8a5?s=50"></div><header><strong>How to call a private protocol extension method from a public protocol extension method</strong> from <string>David Ungar</string> &lt;ungar at icloud.com&gt;<p>June 22, 2016 at 11:00:00am</p></header><div class="content"><p>I love protocol-oriented programming because of the guarantees that come with value types. But I cannot figure out how to do the same factoring I can do with the class side of the the language. I want to factor out common code into a public method that calls specific code in a private method &amp; I want to do this for value types.<br></p><p>Here it is in classes:<br></p><p>public class CommonSuper {<br>  public func publicFn() { … specificPrivateFn()  … }<br>  private func specificPrivateFn() { }<br>}<br></p><p>private class SubA {<br>  override private func specificPrivate() { … }<br>}<br>private class SubB {<br>  override  private func specificPrivate() { … }<br>}<br></p><p>I have tried it lots of ways with protocols, and can get none to compile. Here is one:<br></p><p>public protocol PublicProto {<br>    func publicFn()<br>}<br></p><p>private protocol PrivateProto {<br>    func specificPrivateFn()<br>}<br></p><p>public extension  PublicProto where Self: PrivateProto { // Error: Extension cannot be declared public because its generic requirement uses a private type<br>    public func publicFn() { specificPrivateFn() } // Error: Cannot declare a public instance method in an extension with private requirements<br>}<br></p><p>private struct SA: PublicProto, PrivateProto {<br>    private func specificPrivateFn() {}<br>}<br>private struct SB: PublicProto, PrivateProto {<br>    private func specificPrivateFn() {}<br>}<br></p><p>What am I doing wrong?<br></p><p>Thanks,<br></p><p>- David<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160622/60e7ba9b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ccda8c71648820ad875839cd0d2d06ae?s=50"></div><header><strong>How to call a private protocol extension method from a public protocol extension method</strong> from <string>Kevin Greene</string> &lt;kgreenek at gmail.com&gt;<p>June 22, 2016 at 01:00:00pm</p></header><div class="content"><p>You could have your common superclass implement your protocol. E.g...<br></p><p>public protocol PublicProto {<br></p><p>  func publicFn()<br></p><p>}<br></p><p><br>public class CommonSuper: PublicProto {<br></p><p>  public func publicFn() { specificPrivate() }<br></p><p>  private func specificPrivate() {}<br></p><p>}<br></p><p><br>private class SubA: CommonSuper {<br></p><p>  override private func specificPrivate() { /* ... */ }<br></p><p>}<br></p><p><br>private class SubB: CommonSuper {<br></p><p>  override  private func specificPrivate() { /* ... */ }<br></p><p>}<br></p><p>I don&#39;t know what you&#39;re doing specifically, but I would guess that a<br>cleaner approach would likely be to get rid of the super class entirely,<br>and pull the shared logic from your two subclasses into a separate object<br>that both classes instantiate, or have injected. Then have your two classes<br>implement PublicProto directly. That discussion would probably be best had<br>on another mailing list though.<br></p><p>On Wed, Jun 22, 2016 at 11:19 AM, David Ungar via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; I love protocol-oriented programming because of the guarantees that come<br>&gt; with value types. But I cannot figure out how to do the same factoring I<br>&gt; can do with the class side of the the language. I want to factor out common<br>&gt; code into a public method that calls specific code in a private method &amp; I<br>&gt; want to do this for value types.<br>&gt;<br>&gt; Here it is in classes:<br>&gt;<br>&gt; public class CommonSuper {<br>&gt;   public func publicFn() { … specificPrivateFn()  … }<br>&gt;   private func specificPrivateFn() { }<br>&gt; }<br>&gt;<br>&gt; private class SubA {<br>&gt;   override private func specificPrivate() { … }<br>&gt; }<br>&gt; private class SubB {<br>&gt;   override  private func specificPrivate() { … }<br>&gt; }<br>&gt;<br>&gt; I have tried it lots of ways with protocols, and can get none to compile.<br>&gt; Here is one:<br>&gt;<br>&gt; public protocol PublicProto {<br>&gt;     func publicFn()<br>&gt; }<br>&gt;<br>&gt; private protocol PrivateProto {<br>&gt;     func specificPrivateFn()<br>&gt; }<br>&gt;<br>&gt; public extension  PublicProto where Self: PrivateProto { // Error:<br>&gt; Extension cannot be declared public because its generic requirement uses a<br>&gt; private type<br>&gt;     public func publicFn() { specificPrivateFn() } // Error: Cannot<br>&gt; declare a public instance method in an extension with private requirements<br>&gt; }<br>&gt;<br>&gt; private struct SA: PublicProto, PrivateProto {<br>&gt;     private func specificPrivateFn() {}<br>&gt; }<br>&gt; private struct SB: PublicProto, PrivateProto {<br>&gt;     private func specificPrivateFn() {}<br>&gt; }<br>&gt;<br>&gt; What am I doing wrong?<br>&gt;<br>&gt; Thanks,<br>&gt;<br>&gt; - David<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160622/8e95a703/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8c17b3a547f4b69a9a20aad93fa82fb0?s=50"></div><header><strong>How to call a private protocol extension method from a public protocol extension method</strong> from <string>David Ungar</string> &lt;ungar at mac.com&gt;<p>June 22, 2016 at 03:00:00pm</p></header><div class="content"><p>Kevin,<br></p><p>Thank you so much for helping me out. I wasn’t clear, but I’m hoping to find a solution that uses only value types and protocols.<br></p><p>- David<br></p><p><br>&gt; On Jun 22, 2016, at 1:19 PM, Kevin Greene &lt;kgreenek at gmail.com&gt; wrote:<br>&gt; <br>&gt; You could have your common superclass implement your protocol. E.g...<br>&gt; <br>&gt; public protocol PublicProto {<br>&gt;   func publicFn()<br>&gt; }<br>&gt; <br>&gt; public class CommonSuper: PublicProto {<br>&gt;   public func publicFn() { specificPrivate() }<br>&gt;   private func specificPrivate() {}<br>&gt; }<br>&gt; <br>&gt; private class SubA: CommonSuper {<br>&gt;   override private func specificPrivate() { /* ... */ }<br>&gt; }<br>&gt; <br>&gt; private class SubB: CommonSuper {<br>&gt;   override  private func specificPrivate() { /* ... */ }<br>&gt; }<br>&gt; <br>&gt; I don&#39;t know what you&#39;re doing specifically, but I would guess that a cleaner approach would likely be to get rid of the super class entirely, and pull the shared logic from your two subclasses into a separate object that both classes instantiate, or have injected. Then have your two classes implement PublicProto directly. That discussion would probably be best had on another mailing list though.<br>&gt; <br>&gt; On Wed, Jun 22, 2016 at 11:19 AM, David Ungar via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt; I love protocol-oriented programming because of the guarantees that come with value types. But I cannot figure out how to do the same factoring I can do with the class side of the the language. I want to factor out common code into a public method that calls specific code in a private method &amp; I want to do this for value types.<br>&gt; <br>&gt; Here it is in classes:<br>&gt; <br>&gt; public class CommonSuper {<br>&gt;   public func publicFn() { … specificPrivateFn()  … }<br>&gt;   private func specificPrivateFn() { }<br>&gt; }<br>&gt; <br>&gt; private class SubA {<br>&gt;   override private func specificPrivate() { … }<br>&gt; }<br>&gt; private class SubB {<br>&gt;   override  private func specificPrivate() { … }<br>&gt; }<br>&gt; <br>&gt; I have tried it lots of ways with protocols, and can get none to compile. Here is one:<br>&gt; <br>&gt; public protocol PublicProto {<br>&gt;     func publicFn()<br>&gt; }<br>&gt; <br>&gt; private protocol PrivateProto {<br>&gt;     func specificPrivateFn()<br>&gt; }<br>&gt; <br>&gt; public extension  PublicProto where Self: PrivateProto { // Error: Extension cannot be declared public because its generic requirement uses a private type<br>&gt;     public func publicFn() { specificPrivateFn() } // Error: Cannot declare a public instance method in an extension with private requirements<br>&gt; }<br>&gt; <br>&gt; private struct SA: PublicProto, PrivateProto {<br>&gt;     private func specificPrivateFn() {}<br>&gt; }<br>&gt; private struct SB: PublicProto, PrivateProto {<br>&gt;     private func specificPrivateFn() {}<br>&gt; }<br>&gt; <br>&gt; What am I doing wrong?<br>&gt; <br>&gt; Thanks,<br>&gt; <br>&gt; - David<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160622/47d0574a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ccda8c71648820ad875839cd0d2d06ae?s=50"></div><header><strong>How to call a private protocol extension method from a public protocol extension method</strong> from <string>Kevin Greene</string> &lt;kgreenek at gmail.com&gt;<p>June 22, 2016 at 03:00:00pm</p></header><div class="content"><p>Oh gotcha. I totally misunderstood the question. Sorry about that!<br>I didn&#39;t actually realize you can extend protocols. Cool stuff! For anybody<br>else who is uninitiated:<br>https://www.raywenderlich.com/109156/introducing-protocol-oriented-programming-in-swift-2<br></p><p>On Wed, Jun 22, 2016 at 3:17 PM, David Ungar &lt;ungar at mac.com&gt; wrote:<br></p><p>&gt; Kevin,<br>&gt;<br>&gt; Thank you so much for helping me out. I wasn’t clear, but I’m hoping to<br>&gt; find a solution that uses only value types and protocols.<br>&gt;<br>&gt; - David<br>&gt;<br>&gt;<br>&gt; On Jun 22, 2016, at 1:19 PM, Kevin Greene &lt;kgreenek at gmail.com&gt; wrote:<br>&gt;<br>&gt; You could have your common superclass implement your protocol. E.g...<br>&gt;<br>&gt; public protocol PublicProto {<br>&gt;   func publicFn()<br>&gt; }<br>&gt;<br>&gt; public class CommonSuper: PublicProto {<br>&gt;   public func publicFn() { specificPrivate() }<br>&gt;   private func specificPrivate() {}<br>&gt; }<br>&gt;<br>&gt; private class SubA: CommonSuper {<br>&gt;   override private func specificPrivate() { /* ... */ }<br>&gt; }<br>&gt;<br>&gt; private class SubB: CommonSuper {<br>&gt;   override  private func specificPrivate() { /* ... */ }<br>&gt; }<br>&gt;<br>&gt; I don&#39;t know what you&#39;re doing specifically, but I would guess that a<br>&gt; cleaner approach would likely be to get rid of the super class entirely,<br>&gt; and pull the shared logic from your two subclasses into a separate object<br>&gt; that both classes instantiate, or have injected. Then have your two classes<br>&gt; implement PublicProto directly. That discussion would probably be best had<br>&gt; on another mailing list though.<br>&gt;<br>&gt; On Wed, Jun 22, 2016 at 11:19 AM, David Ungar via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; I love protocol-oriented programming because of the guarantees that come<br>&gt;&gt; with value types. But I cannot figure out how to do the same factoring I<br>&gt;&gt; can do with the class side of the the language. I want to factor out common<br>&gt;&gt; code into a public method that calls specific code in a private method &amp; I<br>&gt;&gt; want to do this for value types.<br>&gt;&gt;<br>&gt;&gt; Here it is in classes:<br>&gt;&gt;<br>&gt;&gt; public class CommonSuper {<br>&gt;&gt;   public func publicFn() { … specificPrivateFn()  … }<br>&gt;&gt;   private func specificPrivateFn() { }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; private class SubA {<br>&gt;&gt;   override private func specificPrivate() { … }<br>&gt;&gt; }<br>&gt;&gt; private class SubB {<br>&gt;&gt;   override  private func specificPrivate() { … }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; I have tried it lots of ways with protocols, and can get none to compile.<br>&gt;&gt; Here is one:<br>&gt;&gt;<br>&gt;&gt; public protocol PublicProto {<br>&gt;&gt;     func publicFn()<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; private protocol PrivateProto {<br>&gt;&gt;     func specificPrivateFn()<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; public extension  PublicProto where Self: PrivateProto { // Error:<br>&gt;&gt; Extension cannot be declared public because its generic requirement uses a<br>&gt;&gt; private type<br>&gt;&gt;     public func publicFn() { specificPrivateFn() } // Error: Cannot<br>&gt;&gt; declare a public instance method in an extension with private requirements<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; private struct SA: PublicProto, PrivateProto {<br>&gt;&gt;     private func specificPrivateFn() {}<br>&gt;&gt; }<br>&gt;&gt; private struct SB: PublicProto, PrivateProto {<br>&gt;&gt;     private func specificPrivateFn() {}<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; What am I doing wrong?<br>&gt;&gt;<br>&gt;&gt; Thanks,<br>&gt;&gt;<br>&gt;&gt; - David<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160622/19648a16/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
