<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0068: Expanding Swift Self to class members and value types</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April 20, 2016 at 11:00:00am</p></header><div class="content"><p>on Wed Apr 20 2016, Chris Lattner &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0068: Expanding Swift Self to class members and value types&quot;<br>&gt; begins now and runs through April 25. The proposal is available here:<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0068-universal-self.md<br></p><p>Caveat: somewhat scattered response, probably after insufficient<br>review; apply salt liberally.<br></p><p>This looks like a good idea overall to me, but I think it may leave<br>important uses for Self on the floor.  For example, I still want to<br>write this:<br></p><p>  struct SomeType {<br>    func f(x: Self) {}<br>  }<br></p><p>Does the proposal make that work in some way that I&#39;ve overlooked?  <br></p><p>IMO it&#39;s a shame that you can&#39;t take a protocol body, dump it into your<br>type&#39;s body, and fill in the implementations to satisfy a conformance<br>without finding all the instances of “Self” and replacing them with your<br>type&#39;s name, and it would be sad if this proposal didn&#39;t address that<br>somehow.  In general, I&#39;m concerned that we may be making “Self” mean<br>two very different things in different contexts: IIUC one is a type<br>that&#39;s fully-resolved at compile time, and the other one is a value that<br>holds a metatype.  If there were less of a wall between the two<br>uses/contexts, that would make the proposal more palatable to me.<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] SE-0068: Expanding Swift Self to class members and value types</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>April 20, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Apr 20, 2016, at 12:37 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Wed Apr 20 2016, Chris Lattner &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0068: Expanding Swift Self to class members and value types&quot;<br>&gt;&gt; begins now and runs through April 25. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0068-universal-self.md<br>&gt; <br>&gt; Caveat: somewhat scattered response, probably after insufficient<br>&gt; review; apply salt liberally.<br>&gt; <br>&gt; This looks like a good idea overall to me, but I think it may leave<br>&gt; important uses for Self on the floor.  For example, I still want to<br>&gt; write this:<br>&gt; <br>&gt;  struct SomeType {<br>&gt;    func f(x: Self) {}<br>&gt;  }<br>&gt; <br>&gt; Does the proposal make that work in some way that I&#39;ve overlooked?  <br>&gt; <br>&gt; IMO it&#39;s a shame that you can&#39;t take a protocol body, dump it into your<br>&gt; type&#39;s body, and fill in the implementations to satisfy a conformance<br>&gt; without finding all the instances of “Self” and replacing them with your<br>&gt; type&#39;s name, and it would be sad if this proposal didn&#39;t address that<br>&gt; somehow.  In general, I&#39;m concerned that we may be making “Self” mean<br>&gt; two very different things in different contexts: IIUC one is a type<br>&gt; that&#39;s fully-resolved at compile time, and the other one is a value that<br>&gt; holds a metatype.  If there were less of a wall between the two<br>&gt; uses/contexts, that would make the proposal more palatable to me.<br></p><p>It kind of did address this until late last night. I was worried that proposing #Self and Self at the<br>same time would be divisive. The point of #Self would be a compile-time replacement of the name<br>of the defining type, vs the run-time evaluation of Self. Trying to propose two things at once <br>seemed like a difficult sell.<br></p><p>If there&#39;s sufficient support for doing so, I can add it back in as a revision to the proposal if<br>the core team requests it.<br></p><p>-- E<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0068: Expanding Swift Self to class members and value types</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>April 20, 2016 at 04:00:00pm</p></header><div class="content"><p>On Apr 20, 2016, at 1:27 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; It kind of did address this until late last night. I was worried that proposing #Self and Self at the<br>&gt; same time would be divisive. The point of #Self would be a compile-time replacement of the name<br>&gt; of the defining type, vs the run-time evaluation of Self. Trying to propose two things at once <br>&gt; seemed like a difficult sell.<br>&gt; <br>&gt; If there&#39;s sufficient support for doing so, I can add it back in as a revision to the proposal if<br>&gt; the core team requests it.<br></p><p>The core team discussed this briefly today, and has several concerns with the direction of the proposal.  Alex will be sending out notes in a bit.<br></p><p>-Chris<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Review] SE-0068: Expanding Swift Self to class members and value types</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 21, 2016 at 10:00:00am</p></header><div class="content"><p>I believe we just have to separate these concepts explicity : i.e. <br>&quot;dynamicType&quot; and &quot;Self&quot;(as replacement for type name in protocol)<br></p><p>Yes, seems like we need Self and #Self to separate these. Or we should <br>select a better names, if we have better suggestions.<br></p><p>On 20.04.2016 23:27, Erica Sadun via swift-evolution wrote:<br>&gt;<br>&gt;&gt; On Apr 20, 2016, at 12:37 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; on Wed Apr 20 2016, Chris Lattner &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The review of &quot;SE-0068: Expanding Swift Self to class members and value types&quot;<br>&gt;&gt;&gt; begins now and runs through April 25. The proposal is available here:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0068-universal-self.md<br>&gt;&gt;<br>&gt;&gt; Caveat: somewhat scattered response, probably after insufficient<br>&gt;&gt; review; apply salt liberally.<br>&gt;&gt;<br>&gt;&gt; This looks like a good idea overall to me, but I think it may leave<br>&gt;&gt; important uses for Self on the floor.  For example, I still want to<br>&gt;&gt; write this:<br>&gt;&gt;<br>&gt;&gt;  struct SomeType {<br>&gt;&gt;    func f(x: Self) {}<br>&gt;&gt;  }<br>&gt;&gt;<br>&gt;&gt; Does the proposal make that work in some way that I&#39;ve overlooked?<br>&gt;&gt;<br>&gt;&gt; IMO it&#39;s a shame that you can&#39;t take a protocol body, dump it into your<br>&gt;&gt; type&#39;s body, and fill in the implementations to satisfy a conformance<br>&gt;&gt; without finding all the instances of “Self” and replacing them with your<br>&gt;&gt; type&#39;s name, and it would be sad if this proposal didn&#39;t address that<br>&gt;&gt; somehow.  In general, I&#39;m concerned that we may be making “Self” mean<br>&gt;&gt; two very different things in different contexts: IIUC one is a type<br>&gt;&gt; that&#39;s fully-resolved at compile time, and the other one is a value that<br>&gt;&gt; holds a metatype.  If there were less of a wall between the two<br>&gt;&gt; uses/contexts, that would make the proposal more palatable to me.<br>&gt;<br>&gt; It kind of did address this until late last night. I was worried that proposing #Self and Self at the<br>&gt; same time would be divisive. The point of #Self would be a compile-time replacement of the name<br>&gt; of the defining type, vs the run-time evaluation of Self. Trying to propose two things at once<br>&gt; seemed like a difficult sell.<br>&gt;<br>&gt; If there&#39;s sufficient support for doing so, I can add it back in as a revision to the proposal if<br>&gt; the core team requests it.<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Review] SE-0068: Expanding Swift Self to class members and value types</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 21, 2016 at 10:00:00am</p></header><div class="content"><p>I feel like we should separate all these self/Self/dynamicType explicity.<br></p><p>For example :<br></p><p>DynamicSelf - where we use &quot;self.dynamicType&quot; in instance methods and <br>&quot;self&quot; in class/static methods<br></p><p>#ThisType (or #Type or #Self or ?) - where we need a replacement for &quot;the <br>exactly type name where this method is declared&quot;<br></p><p>I.e. you&#39;ll have<br>   struct SomeType {<br>     func f(x: #ThisType) {}<br>   }<br></p><p>protocol SomeProtocol {<br>   func f(x: #ThisType)<br>}<br></p><p>class SomeClass: SomeProtocol {<br>   func f(x: #ThisType) {   }<br>}<br></p><p>but<br></p><p>class SomeClass {<br>   class func classF() { DynamicSelf.someOtherClassF() }<br></p><p>   func f() {<br>     DynamicSelf.someStaticMethod()<br>   }<br>}<br></p><p><br>On 20.04.2016 21:37, Dave Abrahams via swift-evolution wrote:<br>&gt;<br>&gt; on Wed Apr 20 2016, Chris Lattner &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Hello Swift community,<br>&gt;&gt;<br>&gt;&gt; The review of &quot;SE-0068: Expanding Swift Self to class members and value types&quot;<br>&gt;&gt; begins now and runs through April 25. The proposal is available here:<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0068-universal-self.md<br>&gt;<br>&gt; Caveat: somewhat scattered response, probably after insufficient<br>&gt; review; apply salt liberally.<br>&gt;<br>&gt; This looks like a good idea overall to me, but I think it may leave<br>&gt; important uses for Self on the floor.  For example, I still want to<br>&gt; write this:<br>&gt;<br>&gt;   struct SomeType {<br>&gt;     func f(x: Self) {}<br>&gt;   }<br>&gt;<br>&gt; Does the proposal make that work in some way that I&#39;ve overlooked?<br>&gt;<br>&gt; IMO it&#39;s a shame that you can&#39;t take a protocol body, dump it into your<br>&gt; type&#39;s body, and fill in the implementations to satisfy a conformance<br>&gt; without finding all the instances of “Self” and replacing them with your<br>&gt; type&#39;s name, and it would be sad if this proposal didn&#39;t address that<br>&gt; somehow.  In general, I&#39;m concerned that we may be making “Self” mean<br>&gt; two very different things in different contexts: IIUC one is a type<br>&gt; that&#39;s fully-resolved at compile time, and the other one is a value that<br>&gt; holds a metatype.  If there were less of a wall between the two<br>&gt; uses/contexts, that would make the proposal more palatable to me.<br>&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
