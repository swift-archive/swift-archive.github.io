<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dc0180c1b9aff52f5d42a1ca6bd1f184?s=50"></div><header><strong>C/FFI interop</strong> from <string>Thomas Catterall</string> &lt;me at swizzlr.co&gt;<p>December 23, 2015 at 11:00:00am</p></header><div class="content"><p>What are the current facilities planned or in development for FFI? Just as Swift functions can be exposed through @objc, how would I add a similar capability for pure C? Is this what, in fact, module maps might be for?<br></p><p>I ask since writing high performance native code for dynamic languages is currently done in C, and that’s a pretty bad idea. It would be great for Swift if people started writing native bindings in it as opposed to C, but it probably needs at the least a way to re-export global public functions for C/C++.<br></p><p>Please let me know if I should take this to swift-dev or swift-evolution!<br></p><p>Tom<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7321934b88ca8da079d7b89926501a9c?s=50"></div><header><strong>C/FFI interop</strong> from <string>David Turnbull</string> &lt;dturnbull at gmail.com&gt;<p>December 23, 2015 at 12:00:00pm</p></header><div class="content"><p>On Wed, Dec 23, 2015 at 8:30 AM, swizzlr via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; It would be great for Swift if people started writing native bindings in<br>&gt; it as opposed to C, but...<br>&gt;<br></p><p>No buts. It&#39;s started already. For example, here&#39;s my Mac and Linux OpenGL<br>loader that&#39;s 100% pure swift. Over 3000 commands cleanly imported into<br>Swift without a single line of C or H code.<br></p><p>https://github.com/AE9RB/SwiftGL<br></p><p>Swift isn&#39;t a dynamic language that needs an ecosystem of C packages to<br>supplement performance while at the same time being difficult to integrate<br>with C. It&#39;s exactly not that in every way. Come on in, the water&#39;s fine.<br></p><p>-david<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151223/27bbe0c7/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>C/FFI interop</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>December 23, 2015 at 03:00:00pm</p></header><div class="content"><p>&gt; What are the current facilities planned or in development for FFI? Just as Swift functions can be exposed through @objc, how would I add a similar capability for pure C? Is this what, in fact, module maps might be for?<br>&gt; <br>&gt; I ask since writing high performance native code for dynamic languages is currently done in C, and that’s a pretty bad idea. It would be great for Swift if people started writing native bindings in it as opposed to C, but it probably needs at the least a way to re-export global public functions for C/C++.<br>&gt; <br>&gt; Please let me know if I should take this to swift-dev or swift-evolution!<br></p><p>Swift does not require a foreign function interface—it can directly call C functions. Sometimes Swift generates a trampoline to do this, but often not even that. The module map basically just tells Swift which headers and binaries make up a particular module. There&#39;s generally no need to write any bridging code—it just works.<br></p><p>There are a few C constructs that Swift doesn&#39;t support very well, like unions and fixed-size arrays in structs. In those cases, you may need to write some C functions which perform the operations that can&#39;t be easily expressed in Swift, but these functions would just be plain old C with no special bridging involved. Similarly, you may choose to write wrappers around some of your library&#39;s C constructs to make them more convenient to use—for instance, if your library has a struct called `foo` and an operation on that struct called `frobnicate_foo()`, you might extend `foo` to add a `frobnicate()` method to it. But this is purely optional, and you would write it in plain old Swift.<br></p><p>Though Apple&#39;s platforms are most commonly associated with Objective-C, there&#39;s a lot of C over there too. Swift works very well with it—this stuff is fast, as transparent as it can be, and frequently exercised.<br></p><p>In short: Just try it. It&#39;s pretty easy.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/94064636d740f54a1ea944b46f4dd8bd?s=50"></div><header><strong>C/FFI interop</strong> from <string>Jason Dusek</string> &lt;jason.dusek at gmail.com&gt;<p>December 24, 2015 at 12:00:00am</p></header><div class="content"><p>I think the OP was asking not about importing C symbols into Swift but<br>rather exporting Swift to C.<br></p><p>On Wed, 23 Dec 2015 at 15:18 Brent Royal-Gordon via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; &gt; What are the current facilities planned or in development for FFI? Just<br>&gt; as Swift functions can be exposed through @objc, how would I add a similar<br>&gt; capability for pure C? Is this what, in fact, module maps might be for?<br>&gt; &gt;<br>&gt; &gt; I ask since writing high performance native code for dynamic languages<br>&gt; is currently done in C, and that’s a pretty bad idea. It would be great for<br>&gt; Swift if people started writing native bindings in it as opposed to C, but<br>&gt; it probably needs at the least a way to re-export global public functions<br>&gt; for C/C++.<br>&gt; &gt;<br>&gt; &gt; Please let me know if I should take this to swift-dev or swift-evolution!<br>&gt;<br>&gt; Swift does not require a foreign function interface—it can directly call C<br>&gt; functions. Sometimes Swift generates a trampoline to do this, but often not<br>&gt; even that. The module map basically just tells Swift which headers and<br>&gt; binaries make up a particular module. There&#39;s generally no need to write<br>&gt; any bridging code—it just works.<br>&gt;<br>&gt; There are a few C constructs that Swift doesn&#39;t support very well, like<br>&gt; unions and fixed-size arrays in structs. In those cases, you may need to<br>&gt; write some C functions which perform the operations that can&#39;t be easily<br>&gt; expressed in Swift, but these functions would just be plain old C with no<br>&gt; special bridging involved. Similarly, you may choose to write wrappers<br>&gt; around some of your library&#39;s C constructs to make them more convenient to<br>&gt; use—for instance, if your library has a struct called `foo` and an<br>&gt; operation on that struct called `frobnicate_foo()`, you might extend `foo`<br>&gt; to add a `frobnicate()` method to it. But this is purely optional, and you<br>&gt; would write it in plain old Swift.<br>&gt;<br>&gt; Though Apple&#39;s platforms are most commonly associated with Objective-C,<br>&gt; there&#39;s a lot of C over there too. Swift works very well with it—this stuff<br>&gt; is fast, as transparent as it can be, and frequently exercised.<br>&gt;<br>&gt; In short: Just try it. It&#39;s pretty easy.<br>&gt;<br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151224/5467693a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dc0180c1b9aff52f5d42a1ca6bd1f184?s=50"></div><header><strong>C/FFI interop</strong> from <string>Thomas Catterall</string> &lt;me at swizzlr.co&gt;<p>December 23, 2015 at 08:00:00pm</p></header><div class="content"><p>Indeed I was - I&#39;m quite sorry for the confusion, I didn&#39;t make my intent clear as I should have, such as through example. What I&#39;m referring to is, for instance, offering a way for a Ruby library to interface with a module written in Swift to communicate with Redis (as an example, not something I&#39;m thinking too seriously about).<br></p><p>Sent from my iPhone<br></p><p>&gt; On 23 Dec 2015, at 19:20, Jason Dusek &lt;jason.dusek at gmail.com&gt; wrote:<br>&gt; <br>&gt; I think the OP was asking not about importing C symbols into Swift but rather exporting Swift to C.<br>&gt; <br>&gt;&gt; On Wed, 23 Dec 2015 at 15:18 Brent Royal-Gordon via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; &gt; What are the current facilities planned or in development for FFI? Just as Swift functions can be exposed through @objc, how would I add a similar capability for pure C? Is this what, in fact, module maps might be for?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I ask since writing high performance native code for dynamic languages is currently done in C, and that’s a pretty bad idea. It would be great for Swift if people started writing native bindings in it as opposed to C, but it probably needs at the least a way to re-export global public functions for C/C++.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Please let me know if I should take this to swift-dev or swift-evolution!<br>&gt;&gt; <br>&gt;&gt; Swift does not require a foreign function interface—it can directly call C functions. Sometimes Swift generates a trampoline to do this, but often not even that. The module map basically just tells Swift which headers and binaries make up a particular module. There&#39;s generally no need to write any bridging code—it just works.<br>&gt;&gt; <br>&gt;&gt; There are a few C constructs that Swift doesn&#39;t support very well, like unions and fixed-size arrays in structs. In those cases, you may need to write some C functions which perform the operations that can&#39;t be easily expressed in Swift, but these functions would just be plain old C with no special bridging involved. Similarly, you may choose to write wrappers around some of your library&#39;s C constructs to make them more convenient to use—for instance, if your library has a struct called `foo` and an operation on that struct called `frobnicate_foo()`, you might extend `foo` to add a `frobnicate()` method to it. But this is purely optional, and you would write it in plain old Swift.<br>&gt;&gt; <br>&gt;&gt; Though Apple&#39;s platforms are most commonly associated with Objective-C, there&#39;s a lot of C over there too. Swift works very well with it—this stuff is fast, as transparent as it can be, and frequently exercised.<br>&gt;&gt; <br>&gt;&gt; In short: Just try it. It&#39;s pretty easy.<br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151223/0260c6aa/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c6c3c6af3a3702ecbe5bfa02e3d89aca?s=50"></div><header><strong>C/FFI interop</strong> from <string>Eric Wing</string> &lt;ewmailing at gmail.com&gt;<p>December 23, 2015 at 07:00:00pm</p></header><div class="content"><p>On 12/23/15, Thomas Catterall via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; Indeed I was - I&#39;m quite sorry for the confusion, I didn&#39;t make my intent<br>&gt; clear as I should have, such as through example. What I&#39;m referring to is,<br>&gt; for instance, offering a way for a Ruby library to interface with a module<br>&gt; written in Swift to communicate with Redis (as an example, not something I&#39;m<br>&gt; thinking too seriously about).<br>&gt;<br>&gt; Sent from my iPhone<br>&gt;<br>&gt;&gt; On 23 Dec 2015, at 19:20, Jason Dusek &lt;jason.dusek at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I think the OP was asking not about importing C symbols into Swift but<br>&gt;&gt; rather exporting Swift to C.<br>&gt;&gt;<br></p><p><br>I am also interested in this same general question, but maybe a little<br>simpler. I simply would like to call Swift from C.<br></p><p>My use case is much simpler though. I have a lot of code written in C,<br>often at pretty low level and/or platform level. It may not be easy to<br>rewrite this in pure Swift. But higher-level functionality could be<br>more easily written in Swift, so it would be nice to call out to Swift<br>from C.<br></p><p>One specific example I&#39;m thinking of is Android and the NDK. On<br>Android, everything starts in Java. You can cross into C via the NDK.<br>But once in C, you still need a way to reach Swift.<br></p><p>On Apple platforms, I achieved this by going through Objective-C<br>(pre-Xcode 7). I created Swift classes that could be called from<br>Obj-C. Then from C, I crossed into Obj-C, and then finally Swift. But<br>on Swift on Linux doesn&#39;t seem to come with Obj-C. Furthermore, I<br>noticed that with Xcode 7+, my little C/Obj-C/Swift trampolines don&#39;t<br>seem to work any more unless I make my Swift classes full subclasses<br>of NSObject, which I was trying to avoid because I expected Linux<br>Obj-C support to be extremely minimal even if it were available.<br></p><p><br>Thanks,<br>Eric<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
