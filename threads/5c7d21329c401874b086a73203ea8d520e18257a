<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>Why does URL.checkResourceIsReachable() return a Bool?</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>August  7, 2016 at 12:00:00pm</p></header><div class="content"><p>-[NSURL checkResourceIsReachableAndReturnError:] has taken on several forms in Swift during its development, sometimes returning a Boolean and an error by reference, sometimes returning Void and using Swift’s do/try/catch system. In Swift 3, though, it appears to do both, which is weird:<br></p><p>func checkResourceIsReachable() throws -&gt; Bool<br></p><p>All the documentation has to say about this is:<br></p><p>&quot;This method is currently applicable only to URLs for file system resources. For other URL types, false is returned.”<br></p><p>It does not, however, say whether non-file URLs are the only thing that can cause a return of ‘false’, so I don’t know whether I should be checking the return value when checking a file URL or not. This results in having to check both the return value *and* the catch block each time, which is fairly awkward. I’m also not clear on why checking reachability on a non-file URL can’t just return an error like it did in the past.<br></p><p>What’s the rationale behind this?<br></p><p>Charles<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160807/5c7d257a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>Why does URL.checkResourceIsReachable() return a Bool?</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>August  7, 2016 at 11:00:00am</p></header><div class="content"><p>One line above the text that you quoted, you can read:<br></p><p>&gt; If this method returns false, the object pointer referenced by error is populated with additional information.<br></p><p>The rationale is probably that this method was awkward to begin with. It&#39;s unclear to me why it was decided to return a `NSError` by reference and a bool that is seemingly equivalent to `error != nil`.<br></p><p>Félix<br></p><p>&gt; Le 7 août 2016 à 10:41:32, Charles Srstka via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; -[NSURL checkResourceIsReachableAndReturnError:] has taken on several forms in Swift during its development, sometimes returning a Boolean and an error by reference, sometimes returning Void and using Swift’s do/try/catch system. In Swift 3, though, it appears to do both, which is weird:<br>&gt; <br>&gt; func checkResourceIsReachable() throws -&gt; Bool<br>&gt; <br>&gt; All the documentation has to say about this is:<br>&gt; <br>&gt; &quot;This method is currently applicable only to URLs for file system resources. For other URL types, false is returned.”<br>&gt; <br>&gt; It does not, however, say whether non-file URLs are the only thing that can cause a return of ‘false’, so I don’t know whether I should be checking the return value when checking a file URL or not. This results in having to check both the return value *and* the catch block each time, which is fairly awkward. I’m also not clear on why checking reachability on a non-file URL can’t just return an error like it did in the past.<br>&gt; <br>&gt; What’s the rationale behind this?<br>&gt; <br>&gt; Charles<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160807/e2e41bcb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>Why does URL.checkResourceIsReachable() return a Bool?</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>August  7, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Aug 7, 2016, at 1:59 PM, Félix Cloutier &lt;felixcca at yahoo.ca&gt; wrote:<br>&gt; <br>&gt; One line above the text that you quoted, you can read:<br>&gt; <br>&gt;&gt; If this method returns false, the object pointer referenced by error is populated with additional information.<br></p><p>That’s only in the documentation for the original NSURL method (which still returns an error by reference). This is the entirety of the description in the documentation for the new one on URL:<br></p><p>&quot;This method synchronously checks if the resource’s backing store is reachable. Checking reachability is appropriate when making decisions that do not require other immediate operations on the resource, e.g. periodic maintenance of UI state that depends on the existence of a specific document. When performing operations such as opening a file or copying resource properties, it is more efficient to simply try the operation and handle failures. This method is currently applicable only to URLs for file system resources. For other URL types, false is returned.”<br></p><p>&gt; The rationale is probably that this method was awkward to begin with. It&#39;s unclear to me why it was decided to return a `NSError` by reference and a bool that is seemingly equivalent to `error != nil`.<br></p><p><br>It’s not like that anymore. On the new URL value type, it both returns a bool *and* is marked ‘throws’. So you have to check *both* whether it returned false *and* whether it threw an error.<br></p><p>Charles<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160807/724f4115/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>Why does URL.checkResourceIsReachable() return a Bool?</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>August  7, 2016 at 12:00:00pm</p></header><div class="content"><p>I read it from the Mac Developer Library&#39;s documentation, which has all of that for the Swift version too (link &lt;https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSURL_Class/#//apple_ref/occ/instm/NSURL/checkResourceIsReachableAndReturnError:&gt;).<br></p><p>I was commenting on the awkwardness of the Objective-C interface. Given that the error parameter is only populated when the return value is `false`, in the transposed Swift world, you shouldn&#39;t need to check the return value.<br></p><p>Félix<br></p><p>&gt; Le 7 août 2016 à 12:14:38, Charles Srstka &lt;cocoadev at charlessoft.com&gt; a écrit :<br>&gt; <br>&gt;&gt; On Aug 7, 2016, at 1:59 PM, Félix Cloutier &lt;felixcca at yahoo.ca &lt;mailto:felixcca at yahoo.ca&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; One line above the text that you quoted, you can read:<br>&gt;&gt; <br>&gt;&gt;&gt; If this method returns false, the object pointer referenced by error is populated with additional information.<br>&gt; <br>&gt; That’s only in the documentation for the original NSURL method (which still returns an error by reference). This is the entirety of the description in the documentation for the new one on URL:<br>&gt; <br>&gt; &quot;This method synchronously checks if the resource’s backing store is reachable. Checking reachability is appropriate when making decisions that do not require other immediate operations on the resource, e.g. periodic maintenance of UI state that depends on the existence of a specific document. When performing operations such as opening a file or copying resource properties, it is more efficient to simply try the operation and handle failures. This method is currently applicable only to URLs for file system resources. For other URL types, false is returned.”<br>&gt; <br>&gt;&gt; The rationale is probably that this method was awkward to begin with. It&#39;s unclear to me why it was decided to return a `NSError` by reference and a bool that is seemingly equivalent to `error != nil`.<br>&gt; <br>&gt; <br>&gt; It’s not like that anymore. On the new URL value type, it both returns a bool *and* is marked ‘throws’. So you have to check *both* whether it returned false *and* whether it threw an error.<br>&gt; <br>&gt; Charles<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160807/bc23f68d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Why does URL.checkResourceIsReachable() return a Bool?</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>August  7, 2016 at 12:00:00pm</p></header><div class="content"><p>If you were to design this API for Swift in the first place, you might want<br>to do something entirely different:<br></p><p>extension URL {<br>    enum Reachability {<br>        case reachable<br>        case notReachable(ErrorProtocol)<br>    }<br>    func reachability() -&gt; Reachability<br>}<br></p><p>On Sun, Aug 7, 2016 at 12:20 PM, Félix Cloutier &lt;swift-evolution at swift.org&gt;<br>wrote:<br></p><p>&gt; I read it from the Mac Developer Library&#39;s documentation, which has all of<br>&gt; that for the Swift version too (link<br>&gt; &lt;https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSURL_Class/#//apple_ref/occ/instm/NSURL/checkResourceIsReachableAndReturnError:&gt;<br>&gt; ).<br>&gt;<br>&gt; I was commenting on the awkwardness of the Objective-C interface. Given<br>&gt; that the error parameter is only populated when the return value is<br>&gt; `false`, in the transposed Swift world, you shouldn&#39;t need to check the<br>&gt; return value.<br>&gt;<br>&gt; Félix<br>&gt;<br>&gt; Le 7 août 2016 à 12:14:38, Charles Srstka &lt;cocoadev at charlessoft.com&gt; a<br>&gt; écrit :<br>&gt;<br>&gt; On Aug 7, 2016, at 1:59 PM, Félix Cloutier &lt;felixcca at yahoo.ca&gt; wrote:<br>&gt;<br>&gt;<br>&gt; One line above the text that you quoted, you can read:<br>&gt;<br>&gt; If this method returns false, the object pointer referenced by error is<br>&gt; populated with additional information.<br>&gt;<br>&gt;<br>&gt; That’s only in the documentation for the original NSURL method (which<br>&gt; still returns an error by reference). This is the entirety of the<br>&gt; description in the documentation for the new one on URL:<br>&gt;<br>&gt; &quot;This method synchronously checks if the resource’s backing store is<br>&gt; reachable. Checking reachability is appropriate when making decisions that<br>&gt; do not require other immediate operations on the resource, e.g. periodic<br>&gt; maintenance of UI state that depends on the existence of a specific<br>&gt; document. When performing operations such as opening a file or copying<br>&gt; resource properties, it is more efficient to simply try the operation and<br>&gt; handle failures. This method is currently applicable only to URLs for file<br>&gt; system resources. For other URL types, false is returned.”<br>&gt;<br>&gt; The rationale is probably that this method was awkward to begin with. It&#39;s<br>&gt; unclear to me why it was decided to return a `NSError` by reference and a<br>&gt; bool that is seemingly equivalent to `error != nil`.<br>&gt;<br>&gt;<br>&gt; It’s not like that anymore. On the new URL value type, it both returns a<br>&gt; bool *and* is marked ‘throws’. So you have to check *both* whether it<br>&gt; returned false *and* whether it threw an error.<br>&gt;<br>&gt; Charles<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160807/49adab8e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>Why does URL.checkResourceIsReachable() return a Bool?</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>August  7, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Aug 7, 2016, at 2:33 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt; extension URL {<br>&gt;     enum Reachability {<br>&gt;         case reachable<br>&gt;         case notReachable(ErrorProtocol)<br>&gt;     }<br>&gt;     func reachability() -&gt; Reachability<br>&gt; }<br></p><p>That is excellent.<br></p><p>Charles<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160807/f499a156/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>Why does URL.checkResourceIsReachable() return a Bool?</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>August  7, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Aug 7, 2016, at 2:20 PM, Félix Cloutier &lt;felixcca at yahoo.ca&gt; wrote:<br>&gt; <br>&gt; I read it from the Mac Developer Library&#39;s documentation, which has all of that for the Swift version too (link &lt;https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSURL_Class/#//apple_ref/occ/instm/NSURL/checkResourceIsReachableAndReturnError:&gt;).<br></p><p>Again, that is the documentation for NSURL, not the new URL value type. Check the top of the file: “NSURL Class Reference”.<br></p><p>Charles<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160807/fae7a03c/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>Why does URL.checkResourceIsReachable() return a Bool?</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>August  8, 2016 at 02:00:00pm</p></header><div class="content"><p>The documentation is wrong (for Swift).<br></p><p>For file URLs, this method returns true/false without throwing an error<br>(at least, if the file doesn&#39;t exist there&#39;s no error; I don&#39;t know if<br>there are conditions that would cause an error to be returned).<br></p><p>For non-file URLs this method throws an error.<br></p><p>The bit about &quot;For other URL types, false is returned&quot; is written for<br>Obj-C, where you can completely disregard the error. You can&#39;t disregard<br>the error in Swift, so it doesn&#39;t apply (though you can use try? and<br>treat a nil value the same as false)<br></p><p>-Kevin<br></p><p>On Sun, Aug 7, 2016, at 10:41 AM, Charles Srstka via swift-evolution wrote:<br>&gt; -[NSURL checkResourceIsReachableAndReturnError:] has taken on several<br>&gt; forms in Swift during its development, sometimes returning a Boolean<br>&gt; and an error by reference, sometimes returning Void and using Swift’s<br>&gt; do/try/catch system. In Swift 3, though, it appears to do both, which<br>&gt; is weird:<br>&gt;<br>&gt; func checkResourceIsReachable() throws -&gt; Bool<br>&gt;<br>&gt; All the documentation has to say about this is:<br>&gt;<br>&gt; &quot;This method is currently applicable only to URLs for file system<br>&gt; resources. For other URL types, false is returned.”<br>&gt;<br>&gt; It does not, however, say whether non-file URLs are the only thing<br>&gt; that can cause a return of ‘false’, so I don’t know whether I should<br>&gt; be checking the return value when checking a file URL or not. This<br>&gt; results in having to check both the return value *and* the catch block<br>&gt; each time, which is fairly awkward. I’m also not clear on why checking<br>&gt; reachability on a non-file URL can’t just return an error like it did<br>&gt; in the past.<br>&gt;<br>&gt; What’s the rationale behind this?<br>&gt;<br>&gt; Charles<br>&gt;<br>&gt;<br>&gt;<br>&gt; _________________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160808/d236b2c2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>Why does URL.checkResourceIsReachable() return a Bool?</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>August  8, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Aug 8, 2016, at 4:32 PM, Kevin Ballard &lt;kevin at sb.org&gt; wrote:<br>&gt; <br>&gt; The documentation is wrong (for Swift).<br>&gt; <br>&gt; For file URLs, this method returns true/false without throwing an error (at least, if the file doesn&#39;t exist there&#39;s no error; I don&#39;t know if there are conditions that would cause an error to be returned).<br>&gt; <br>&gt; For non-file URLs this method throws an error.<br>&gt; <br>&gt; The bit about &quot;For other URL types, false is returned&quot; is written for Obj-C, where you can completely disregard the error. You can&#39;t disregard the error in Swift, so it doesn&#39;t apply (though you can use try? and treat a nil value the same as false)<br></p><p>In my testing, this does not appear to be correct; it actually seems to throw an error in both cases. For a file URL pointing to a file that doesn’t exist, it throws NSFileReadNoSuchFileError, and for an HTTP URL, it throws NSFileNoSuchFileError. This further causes me to question the purpose of having the method return a boolean.<br></p><p>Here’s the code:<br></p><p>import Foundation<br></p><p>let fileURL = URL(fileURLWithPath: &quot;/asdfasdfasdf&quot;)<br>let httpURL = URL(string: &quot;http://asdfasdfasdf.com/asdfasdfasdf&quot;)!<br></p><p>do {<br>    if try fileURL.checkResourceIsReachable() {<br>        print(&quot;file URL is reachable&quot;)<br>    } else {<br>        print(&quot;file URL returned false&quot;)<br>    }<br>} catch {<br>    print(&quot;file URL threw error: \(error)&quot;)<br>}<br></p><p>do {<br>    if try httpURL.checkResourceIsReachable() {<br>        print(&quot;http URL is reachable&quot;)<br>    } else {<br>        print(&quot;http URL returned false&quot;)<br>    }<br>} catch {<br>    print(&quot;http URL threw error: \(error)&quot;)<br>}<br></p><p><br>And the output:<br></p><p>file URL threw error: Error Domain=NSCocoaErrorDomain Code=260 &quot;The file “asdfasdfasdf” couldn’t be opened because there is no such file.&quot; UserInfo={NSURL=file:///asdfasdfasdf, NSFilePath=/asdfasdfasdf, NSUnderlyingError=0x100903eb0 {Error Domain=NSPOSIXErrorDomain Code=2 &quot;No such file or directory&quot;}}<br>http URL threw error: Error Domain=NSCocoaErrorDomain Code=4 &quot;The file doesn’t exist.&quot;<br>Program ended with exit code: 0<br></p><p>Charles<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160808/9df28b39/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>Why does URL.checkResourceIsReachable() return a Bool?</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>August  8, 2016 at 03:00:00pm</p></header><div class="content"><p>Well that&#39;s curious. I tested in the REPL for URL(fileURLWithPath:<br>&quot;/foo/bar&quot;) and it simply returned false, but running the script does<br>throw an error. And doubly-weird, if I go back to the REPL and prefix<br>the call with `try?` the value becomes nil instead of false. So that&#39;s<br>pretty confusing.<br></p><p>It definitely seems like this method should behave differently than it<br>does today. My suggestion would be to replace it with something like<br></p><p>func checkResourceIsReachable() -&gt; (Bool, Error?)<br></p><p>This best approximates the Obj-C behavior where you can just use the<br>return value if you don&#39;t care about the reason why it&#39;s not reachable,<br>and you can inspect the error if you do care.<br></p><p>-Kevin Ballard<br></p><p>On Mon, Aug 8, 2016, at 03:13 PM, Charles Srstka wrote:<br>&gt;&gt; On Aug 8, 2016, at 4:32 PM, Kevin Ballard &lt;kevin at sb.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; The documentation is wrong (for Swift).<br>&gt;&gt;<br>&gt;&gt; For file URLs, this method returns true/false without throwing an<br>&gt;&gt; error (at least, if the file doesn&#39;t exist there&#39;s no error; I don&#39;t<br>&gt;&gt; know if there are conditions that would cause an error to be<br>&gt;&gt; returned).<br>&gt;&gt;<br>&gt;&gt; For non-file URLs this method throws an error.<br>&gt;&gt;<br>&gt;&gt; The bit about &quot;For other URL types, false is returned&quot; is written for<br>&gt;&gt; Obj-C, where you can completely disregard the error. You can&#39;t<br>&gt;&gt; disregard the error in Swift, so it doesn&#39;t apply (though you can use<br>&gt;&gt; try? and treat a nil value the same as false)<br>&gt;<br>&gt; In my testing, this does not appear to be correct; it actually seems<br>&gt; to throw an error in both cases. For a file URL pointing to a file<br>&gt; that doesn’t exist, it throws NSFileReadNoSuchFileError, and for an<br>&gt; HTTP URL, it throws NSFileNoSuchFileError. This further causes me to<br>&gt; question the purpose of having the method return a boolean.<br>&gt;<br>&gt; Here’s the code:<br>&gt;<br>&gt; import Foundation<br>&gt;<br>&gt; let fileURL = URL(fileURLWithPath: &quot;/asdfasdfasdf&quot;)<br>&gt; let httpURL = URL(string: &quot;http://asdfasdfasdf.com/asdfasdfasdf&quot;)!<br>&gt;<br>&gt; do {<br>&gt;  if try fileURL.checkResourceIsReachable() {<br>&gt;  print(&quot;file URL is reachable&quot;)<br>&gt;     } else {<br>&gt;  print(&quot;file URL returned false&quot;)<br>&gt;     }<br>&gt; } catch {<br>&gt;  print(&quot;file URL threw error: \(error)&quot;)<br>&gt; }<br>&gt;<br>&gt; do {<br>&gt;  if try httpURL.checkResourceIsReachable() {<br>&gt;  print(&quot;http URL is reachable&quot;)<br>&gt;     } else {<br>&gt;  print(&quot;http URL returned false&quot;)<br>&gt;     }<br>&gt; } catch {<br>&gt;  print(&quot;http URL threw error: \(error)&quot;)<br>&gt; }<br>&gt;<br>&gt;<br>&gt; And the output:<br>&gt;<br>&gt; *file URL threw error: Error Domain=NSCocoaErrorDomain Code=260 &quot;The<br>&gt; file “asdfasdfasdf” couldn’t be opened because there is no such file.&quot;<br>&gt; UserInfo={NSURL=file:///asdfasdfasdf, NSFilePath=/asdfasdfasdf,<br>&gt; NSUnderlyingError=0x100903eb0 {Error Domain=NSPOSIXErrorDomain Code=2<br>&gt; &quot;No such file or directory&quot;}}*<br>&gt; *http URL threw error: Error Domain=NSCocoaErrorDomain Code=4 &quot;The<br>&gt; file doesn’t exist.&quot;*<br>&gt; *Program ended with exit code: 0*<br>&gt; **<br>&gt; Charles<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160808/bb31509f/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
