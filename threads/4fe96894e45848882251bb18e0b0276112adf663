<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/175ad9e0827a836bfb3d1d06fe3182ec?s=50"></div><header><strong>didSet and time when propagation of mutation happens</strong> from <string>Diego S치nchez</string> &lt;diego.sanchezr at gmail.com&gt;<p>July 14, 2016 at 02:00:00am</p></header><div class="content"><p>Hi all,<br></p><p>The following snippet summarises an issue I was investigating:<br></p><p>struct Observable&lt;T&gt; {<br>    var value: T {<br>        didSet {<br>            print(&quot;Observable.didSet&quot;)<br>            callback?()<br>        }<br>    }<br>    var callback: (() -&gt; Void)?<br>}<br></p><p>class MyClass {<br>    var myString: Observable&lt;String&gt; {<br>        get {<br>            return _myString<br>        }<br>        set {<br>            print(&quot;MyClass.Setter&quot;)<br>            self._myString = newValue<br>        }<br>    }<br></p><p>    private var _myString: Observable&lt;String&gt;<br>    init (string: Observable&lt;String&gt;) {<br>        self._myString = string<br>        print(&quot;MyClass.init.end&quot;)<br>    }<br>}<br></p><p>let myClass = MyClass(string: Observable&lt;String&gt;(value: &quot;1&quot;, callback: nil))<br>myClass.myString.callback = {<br>    print(myClass.myString.value)<br>}<br>myClass.myString.value = &quot;2&quot;<br></p><p>*Output:*<br>MyClass.init.end<br>MyClass.Setter<br>Observable.didSet<br>*1*<br>MyClass.Setter<br></p><p>Obviously I wasn&#39;t expecting to get &quot;1&quot;, but &quot;2&quot; in the callback&#39;s print,<br>and this happens because MyClass.setter is called after Observable.didSet<br>completes.<br></p><p>Is it feasible that all the *set*s are called first, and then all the<br>*didSet*s?<br></p><p>Cheers,<br>Diego<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160714/4fe9f663/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>didSet and time when propagation of mutation happens</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>July 14, 2016 at 11:00:00am</p></header><div class="content"><p>I think the order is right.<br></p><p>value.set &gt;&gt; value.didSet &gt;&gt; string.set &gt;&gt; string.didSet<br></p><p>you expected value.set &gt;&gt; string.set &gt;&gt;  value.didSet &gt;&gt; string.didSet is<br>not correct.<br></p><p>The value &quot;1&quot; is not you expected. However, that is something that I think<br>is tricky. For closure<br></p><p>&gt;  {<br>&gt;     print(myClass.myString.value)<br>&gt; }<br></p><p>it captured the value. However, unless Objective-C, Swift will decide if it<br>is a static capture or an inout capture. So it should be consider right to<br> be &quot;1&quot; or &quot;2&quot;? I am not sure about that.<br></p><p>Zhaoxin<br></p><p>On Thu, Jul 14, 2016 at 8:36 AM, Diego S치nchez &lt;swift-users at swift.org&gt;<br>wrote:<br></p><p>&gt; Hi all,<br>&gt;<br>&gt; The following snippet summarises an issue I was investigating:<br>&gt;<br>&gt; struct Observable&lt;T&gt; {<br>&gt;     var value: T {<br>&gt;         didSet {<br>&gt;             print(&quot;Observable.didSet&quot;)<br>&gt;             callback?()<br>&gt;         }<br>&gt;     }<br>&gt;     var callback: (() -&gt; Void)?<br>&gt; }<br>&gt;<br>&gt; class MyClass {<br>&gt;     var myString: Observable&lt;String&gt; {<br>&gt;         get {<br>&gt;             return _myString<br>&gt;         }<br>&gt;         set {<br>&gt;             print(&quot;MyClass.Setter&quot;)<br>&gt;             self._myString = newValue<br>&gt;         }<br>&gt;     }<br>&gt;<br>&gt;     private var _myString: Observable&lt;String&gt;<br>&gt;     init (string: Observable&lt;String&gt;) {<br>&gt;         self._myString = string<br>&gt;         print(&quot;MyClass.init.end&quot;)<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; let myClass = MyClass(string: Observable&lt;String&gt;(value: &quot;1&quot;, callback:<br>&gt; nil))<br>&gt; myClass.myString.callback = {<br>&gt;     print(myClass.myString.value)<br>&gt; }<br>&gt; myClass.myString.value = &quot;2&quot;<br>&gt;<br>&gt; *Output:*<br>&gt; MyClass.init.end<br>&gt; MyClass.Setter<br>&gt; Observable.didSet<br>&gt; *1*<br>&gt; MyClass.Setter<br>&gt;<br>&gt; Obviously I wasn&#39;t expecting to get &quot;1&quot;, but &quot;2&quot; in the callback&#39;s print,<br>&gt; and this happens because MyClass.setter is called after Observable.didSet<br>&gt; completes.<br>&gt;<br>&gt; Is it feasible that all the *set*s are called first, and then all the<br>&gt; *didSet*s?<br>&gt;<br>&gt; Cheers,<br>&gt; Diego<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160714/f2dd2b60/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/175ad9e0827a836bfb3d1d06fe3182ec?s=50"></div><header><strong>didSet and time when propagation of mutation happens</strong> from <string>Diego S치nchez</string> &lt;diego.sanchezr at gmail.com&gt;<p>July 15, 2016 at 12:00:00am</p></header><div class="content"><p>I don&#39;t know... when didSet is called the struct is already mutated so I<br>would expect all the references to be updated as well.<br></p><p>Regarding the capture in the closure it should always capture a reference<br>to &quot;myClass&quot;, and call the accessors in the moment the closure is executed.<br>Adding<br></p><p>myClass.myString.value = &quot;3&quot;<br></p><p>will print &quot;2&quot;.<br></p><p>because myClass.myString still holds the previous struct.<br></p><p>I will solve this problem by making Observable a reference type, but I was<br>wondering if someone could share more details about this behaviour.<br>Cheers,<br>Diego.<br></p><p><br></p><p><br>2016-07-14 5:19 GMT+02:00 Zhao Xin &lt;owenzx at gmail.com&gt;:<br></p><p>&gt; I think the order is right.<br>&gt;<br>&gt; value.set &gt;&gt; value.didSet &gt;&gt; string.set &gt;&gt; string.didSet<br>&gt;<br>&gt; you expected value.set &gt;&gt; string.set &gt;&gt;  value.didSet &gt;&gt; string.didSet is<br>&gt; not correct.<br>&gt;<br>&gt; The value &quot;1&quot; is not you expected. However, that is something that I think<br>&gt; is tricky. For closure<br>&gt;<br>&gt;&gt;  {<br>&gt;&gt;     print(myClass.myString.value)<br>&gt;&gt; }<br>&gt;<br>&gt; it captured the value. However, unless Objective-C, Swift will decide if<br>&gt; it is a static capture or an inout capture. So it should be consider right<br>&gt; to  be &quot;1&quot; or &quot;2&quot;? I am not sure about that.<br>&gt;<br>&gt; Zhaoxin<br>&gt;<br>&gt; On Thu, Jul 14, 2016 at 8:36 AM, Diego S치nchez &lt;swift-users at swift.org&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; Hi all,<br>&gt;&gt;<br>&gt;&gt; The following snippet summarises an issue I was investigating:<br>&gt;&gt;<br>&gt;&gt; struct Observable&lt;T&gt; {<br>&gt;&gt;     var value: T {<br>&gt;&gt;         didSet {<br>&gt;&gt;             print(&quot;Observable.didSet&quot;)<br>&gt;&gt;             callback?()<br>&gt;&gt;         }<br>&gt;&gt;     }<br>&gt;&gt;     var callback: (() -&gt; Void)?<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; class MyClass {<br>&gt;&gt;     var myString: Observable&lt;String&gt; {<br>&gt;&gt;         get {<br>&gt;&gt;             return _myString<br>&gt;&gt;         }<br>&gt;&gt;         set {<br>&gt;&gt;             print(&quot;MyClass.Setter&quot;)<br>&gt;&gt;             self._myString = newValue<br>&gt;&gt;         }<br>&gt;&gt;     }<br>&gt;&gt;<br>&gt;&gt;     private var _myString: Observable&lt;String&gt;<br>&gt;&gt;     init (string: Observable&lt;String&gt;) {<br>&gt;&gt;         self._myString = string<br>&gt;&gt;         print(&quot;MyClass.init.end&quot;)<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; let myClass = MyClass(string: Observable&lt;String&gt;(value: &quot;1&quot;, callback:<br>&gt;&gt; nil))<br>&gt;&gt; myClass.myString.callback = {<br>&gt;&gt;     print(myClass.myString.value)<br>&gt;&gt; }<br>&gt;&gt; myClass.myString.value = &quot;2&quot;<br>&gt;&gt;<br>&gt;&gt; *Output:*<br>&gt;&gt; MyClass.init.end<br>&gt;&gt; MyClass.Setter<br>&gt;&gt; Observable.didSet<br>&gt;&gt; *1*<br>&gt;&gt; MyClass.Setter<br>&gt;&gt;<br>&gt;&gt; Obviously I wasn&#39;t expecting to get &quot;1&quot;, but &quot;2&quot; in the callback&#39;s print,<br>&gt;&gt; and this happens because MyClass.setter is called after Observable.didSet<br>&gt;&gt; completes.<br>&gt;&gt;<br>&gt;&gt; Is it feasible that all the *set*s are called first, and then all the<br>&gt;&gt; *didSet*s?<br>&gt;&gt;<br>&gt;&gt; Cheers,<br>&gt;&gt; Diego<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160715/77e0603f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>didSet and time when propagation of mutation happens</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>July 15, 2016 at 08:00:00am</p></header><div class="content"><p>I think the problem is that you should not call callback?() in didSet() as<br>the values in the closure are updated depending on the function, which<br>means, it is not updated until the didSet() function finished.<br></p><p><br>Zhaoxin<br></p><p><br>On Fri, Jul 15, 2016 at 6:17 AM, Diego S치nchez &lt;diego.sanchezr at gmail.com&gt;<br>wrote:<br></p><p>&gt; I don&#39;t know... when didSet is called the struct is already mutated so I<br>&gt; would expect all the references to be updated as well.<br>&gt;<br>&gt; Regarding the capture in the closure it should always capture a reference<br>&gt; to &quot;myClass&quot;, and call the accessors in the moment the closure is executed.<br>&gt; Adding<br>&gt;<br>&gt; myClass.myString.value = &quot;3&quot;<br>&gt;<br>&gt; will print &quot;2&quot;.<br>&gt;<br>&gt; because myClass.myString still holds the previous struct.<br>&gt;<br>&gt; I will solve this problem by making Observable a reference type, but I was<br>&gt; wondering if someone could share more details about this behaviour.<br>&gt; Cheers,<br>&gt; Diego.<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; 2016-07-14 5:19 GMT+02:00 Zhao Xin &lt;owenzx at gmail.com&gt;:<br>&gt;<br>&gt;&gt; I think the order is right.<br>&gt;&gt;<br>&gt;&gt; value.set &gt;&gt; value.didSet &gt;&gt; string.set &gt;&gt; string.didSet<br>&gt;&gt;<br>&gt;&gt; you expected value.set &gt;&gt; string.set &gt;&gt;  value.didSet &gt;&gt; string.didSet<br>&gt;&gt; is not correct.<br>&gt;&gt;<br>&gt;&gt; The value &quot;1&quot; is not you expected. However, that is something that I<br>&gt;&gt; think is tricky. For closure<br>&gt;&gt;<br>&gt;&gt;&gt;  {<br>&gt;&gt;&gt;     print(myClass.myString.value)<br>&gt;&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; it captured the value. However, unless Objective-C, Swift will decide if<br>&gt;&gt; it is a static capture or an inout capture. So it should be consider right<br>&gt;&gt; to  be &quot;1&quot; or &quot;2&quot;? I am not sure about that.<br>&gt;&gt;<br>&gt;&gt; Zhaoxin<br>&gt;&gt;<br>&gt;&gt; On Thu, Jul 14, 2016 at 8:36 AM, Diego S치nchez &lt;swift-users at swift.org&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Hi all,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The following snippet summarises an issue I was investigating:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; struct Observable&lt;T&gt; {<br>&gt;&gt;&gt;     var value: T {<br>&gt;&gt;&gt;         didSet {<br>&gt;&gt;&gt;             print(&quot;Observable.didSet&quot;)<br>&gt;&gt;&gt;             callback?()<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt;     var callback: (() -&gt; Void)?<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; class MyClass {<br>&gt;&gt;&gt;     var myString: Observable&lt;String&gt; {<br>&gt;&gt;&gt;         get {<br>&gt;&gt;&gt;             return _myString<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt;         set {<br>&gt;&gt;&gt;             print(&quot;MyClass.Setter&quot;)<br>&gt;&gt;&gt;             self._myString = newValue<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     private var _myString: Observable&lt;String&gt;<br>&gt;&gt;&gt;     init (string: Observable&lt;String&gt;) {<br>&gt;&gt;&gt;         self._myString = string<br>&gt;&gt;&gt;         print(&quot;MyClass.init.end&quot;)<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; let myClass = MyClass(string: Observable&lt;String&gt;(value: &quot;1&quot;, callback:<br>&gt;&gt;&gt; nil))<br>&gt;&gt;&gt; myClass.myString.callback = {<br>&gt;&gt;&gt;     print(myClass.myString.value)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; myClass.myString.value = &quot;2&quot;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; *Output:*<br>&gt;&gt;&gt; MyClass.init.end<br>&gt;&gt;&gt; MyClass.Setter<br>&gt;&gt;&gt; Observable.didSet<br>&gt;&gt;&gt; *1*<br>&gt;&gt;&gt; MyClass.Setter<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Obviously I wasn&#39;t expecting to get &quot;1&quot;, but &quot;2&quot; in the callback&#39;s<br>&gt;&gt;&gt; print, and this happens because MyClass.setter is called after<br>&gt;&gt;&gt; Observable.didSet completes.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Is it feasible that all the *set*s are called first, and then all the<br>&gt;&gt;&gt; *didSet*s?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt; Diego<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160715/035b761f/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
