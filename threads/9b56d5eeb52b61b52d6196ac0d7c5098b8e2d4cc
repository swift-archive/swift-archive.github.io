<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Looking at corelibs-foundation</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>May 12, 2016 at 01:00:00am</p></header><div class="content"><p>Hello people,<br></p><p>I wanted to start giving a hand on corelibs-foundation but hit two obstacles I’d like to discuss:<br></p><p>It feels difficult to know where help is needed because the ReleaseNotes, Status and Know Issues docs have not been updated in a very long time, as if abandoned. Hopefully we can update hem, but perhaps a rule should be put in place so that no pull request is merged without the corresponding update in the documentation?<br></p><p>I tried downloading the master branch of corelibs-foundation and running the tests before starting any work, but several of them crashed or failed. I am on OS X, Xcode 7.3.1, up to date on the master branches of corelibs-foundation and corelibs-xctest and am using the latest development snapshot. For reference, the failing tests are:<br></p><p>TestNSString.test_initializeWithFormat3<br>TestNSTask.test_pipe_stderr<br>TestNSTask.test_pipe_stdout_and_stderr_same_pipe<br>TestNSTask.test_passthrough_environment<br>TestNSTask.test_no_environment<br>TestNSTask.test_custom_environment<br>TestNSUserDefaults.test_createUserDefaults<br>TestNSUserDefaults.test_getRegisteredDefaultItem<br>TestNSXMLDocument.test_xpath<br></p><p>Any ideas? Perhaps I’m doing something wrong.<br></p><p>I was surprised to see fairly little tests for certain classes NSIndexPath, NSUserDefaults, NSScanner. Is that because the code was written before the Open Source project started? What are the rules on test quality and how are they applied?<br></p><p>More generally, I feel worried at how much work is still left, especially with the 3.0 beta branches starting. Am I imagining things or does it not look very good? What can we do to rally the troops?<br></p><p>A well meaning developer,<br>David.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160512/9b56d4cc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Looking at corelibs-foundation</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>May 13, 2016 at 10:00:00am</p></header><div class="content"><p>Hi David,<br></p><p>&gt; On May 11, 2016, at 4:02 PM, David Hart via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello people,<br>&gt; <br>&gt; I wanted to start giving a hand on corelibs-foundation but hit two obstacles I’d like to discuss:<br>&gt; <br>&gt; It feels difficult to know where help is needed because the ReleaseNotes, Status and Know Issues docs have not been updated in a very long time, as if abandoned. Hopefully we can update hem, but perhaps a rule should be put in place so that no pull request is merged without the corresponding update in the documentation?<br>&gt; <br></p><p>Sounds good to me. I don&#39;t want to start rejecting PRs because they miss a bit of documentation but hopefully we can encourage it or update it after we merge.<br></p><p>&gt; I tried downloading the master branch of corelibs-foundation and running the tests before starting any work, but several of them crashed or failed. I am on OS X, Xcode 7.3.1, up to date on the master branches of corelibs-foundation and corelibs-xctest and am using the latest development snapshot. For reference, the failing tests are:<br>&gt; <br>&gt; TestNSString.test_initializeWithFormat3<br>&gt; TestNSTask.test_pipe_stderr<br>&gt; TestNSTask.test_pipe_stdout_and_stderr_same_pipe<br>&gt; TestNSTask.test_passthrough_environment<br>&gt; TestNSTask.test_no_environment<br>&gt; TestNSTask.test_custom_environment<br>&gt; TestNSUserDefaults.test_createUserDefaults<br>&gt; TestNSUserDefaults.test_getRegisteredDefaultItem<br>&gt; TestNSXMLDocument.test_xpath<br>&gt; <br>&gt; Any ideas? Perhaps I’m doing something wrong.<br></p><p>Our CI system only builds and tests corelibs-foundation on Linux, so perhaps some regressions have snuck in on OS X only (which is interesting if true).<br></p><p>NSTask in particular has been under a lot of changes for Linux recently.<br></p><p>&gt; <br>&gt; I was surprised to see fairly little tests for certain classes NSIndexPath, NSUserDefaults, NSScanner. Is that because the code was written before the Open Source project started? What are the rules on test quality and how are they applied?<br>&gt; <br></p><p>We’d like to see tests with all new code, for sure. Some of this was written fairly quickly in the run up to the launch, so we probably don’t have as many tests as we would like there. I do have a task on my plate somewhere to figure out how we can integrate more of our internal unit tests into the open source project to help with compatibility.<br></p><p>&gt; More generally, I feel worried at how much work is still left, especially with the 3.0 beta branches starting. Am I imagining things or does it not look very good? What can we do to rally the troops?<br>&gt; <br></p><p>I totally understand. The Foundation team itself has been focused on the value type changes, naming changes, etc that are coming as part of Swift 3. We haven’t had nearly as much time as I would have liked to dedicate to bringing this project up to parity with Swift 2.2 functionality. We are still hoping to accept as many contributions as possible. That is why I went through and accepted a bunch of PRs last week.<br></p><p>We have had a few contributions that felt like one-offs; when changes were requested we received no response and so I had to close them, which makes me pretty sad. I haven’t really seen any true ownership of a particular area. I understand it’s asking a lot for someone to come in and help us implement a pre-set API, but I believe in a bright future for this project if we can pick up the pace a bit.<br></p><p>- Tony<br></p><p>&gt; A well meaning developer,<br>&gt; David.<br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160513/affe74b3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1d54deb32312ab6a282cde8637bc7077?s=50"></div><header><strong>Looking at corelibs-foundation</strong> from <string>James Lee</string> &lt;james at jelee.co.uk&gt;<p>May 13, 2016 at 06:00:00pm</p></header><div class="content"><p>Wanted to chirp up and say I am in the same position as David, with that said, if PR&#39;s have been rejected due to a lack of response, are there any that have not been covered elsewhere and can be picked up?<br></p><p>James<br></p><p>Sent from my iPhone<br></p><p>&gt; On 13 May 2016, at 18:01, Tony Parker via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi David,<br>&gt; <br>&gt;&gt; On May 11, 2016, at 4:02 PM, David Hart via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello people,<br>&gt;&gt; <br>&gt;&gt; I wanted to start giving a hand on corelibs-foundation but hit two obstacles I’d like to discuss:<br>&gt;&gt; <br>&gt;&gt; It feels difficult to know where help is needed because the ReleaseNotes, Status and Know Issues docs have not been updated in a very long time, as if abandoned. Hopefully we can update hem, but perhaps a rule should be put in place so that no pull request is merged without the corresponding update in the documentation?<br>&gt; <br>&gt; Sounds good to me. I don&#39;t want to start rejecting PRs because they miss a bit of documentation but hopefully we can encourage it or update it after we merge.<br>&gt; <br>&gt;&gt; I tried downloading the master branch of corelibs-foundation and running the tests before starting any work, but several of them crashed or failed. I am on OS X, Xcode 7.3.1, up to date on the master branches of corelibs-foundation and corelibs-xctest and am using the latest development snapshot. For reference, the failing tests are:<br>&gt;&gt; <br>&gt;&gt; TestNSString.test_initializeWithFormat3<br>&gt;&gt; TestNSTask.test_pipe_stderr<br>&gt;&gt; TestNSTask.test_pipe_stdout_and_stderr_same_pipe<br>&gt;&gt; TestNSTask.test_passthrough_environment<br>&gt;&gt; TestNSTask.test_no_environment<br>&gt;&gt; TestNSTask.test_custom_environment<br>&gt;&gt; TestNSUserDefaults.test_createUserDefaults<br>&gt;&gt; TestNSUserDefaults.test_getRegisteredDefaultItem<br>&gt;&gt; TestNSXMLDocument.test_xpath<br>&gt;&gt; <br>&gt;&gt; Any ideas? Perhaps I’m doing something wrong.<br>&gt; <br>&gt; Our CI system only builds and tests corelibs-foundation on Linux, so perhaps some regressions have snuck in on OS X only (which is interesting if true).<br>&gt; <br>&gt; NSTask in particular has been under a lot of changes for Linux recently.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; I was surprised to see fairly little tests for certain classes NSIndexPath, NSUserDefaults, NSScanner. Is that because the code was written before the Open Source project started? What are the rules on test quality and how are they applied?<br>&gt; <br>&gt; We’d like to see tests with all new code, for sure. Some of this was written fairly quickly in the run up to the launch, so we probably don’t have as many tests as we would like there. I do have a task on my plate somewhere to figure out how we can integrate more of our internal unit tests into the open source project to help with compatibility.<br>&gt; <br>&gt;&gt; More generally, I feel worried at how much work is still left, especially with the 3.0 beta branches starting. Am I imagining things or does it not look very good? What can we do to rally the troops?<br>&gt; <br>&gt; I totally understand. The Foundation team itself has been focused on the value type changes, naming changes, etc that are coming as part of Swift 3. We haven’t had nearly as much time as I would have liked to dedicate to bringing this project up to parity with Swift 2.2 functionality. We are still hoping to accept as many contributions as possible. That is why I went through and accepted a bunch of PRs last week.<br>&gt; <br>&gt; We have had a few contributions that felt like one-offs; when changes were requested we received no response and so I had to close them, which makes me pretty sad. I haven’t really seen any true ownership of a particular area. I understand it’s asking a lot for someone to come in and help us implement a pre-set API, but I believe in a bright future for this project if we can pick up the pace a bit.<br>&gt; <br>&gt; - Tony<br>&gt; <br>&gt;&gt; A well meaning developer,<br>&gt;&gt; David.<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160513/3f0d1971/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Looking at corelibs-foundation</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>May 13, 2016 at 10:00:00am</p></header><div class="content"><p>I did this search to try and find some:<br></p><p>https://github.com/apple/swift-corelibs-foundation/pulls?utf8=✓&amp;q=is%3Apr+is%3Aclosed+is%3Aunmerged &lt;https://github.com/apple/swift-corelibs-foundation/pulls?utf8=%E2%9C%93&amp;q=is:pr+is:closed+is:unmerged&gt;<br></p><p>Here’s one:<br></p><p>https://github.com/apple/swift-corelibs-foundation/pull/226 &lt;https://github.com/apple/swift-corelibs-foundation/pull/226&gt;<br></p><p>Here was another that we had difficulty getting through review on:<br></p><p>https://github.com/apple/swift-corelibs-foundation/pull/248 &lt;https://github.com/apple/swift-corelibs-foundation/pull/248&gt;<br></p><p>Here is an old one that had some hard to figure out merge conflicts:<br></p><p>https://github.com/apple/swift-corelibs-foundation/pull/225 &lt;https://github.com/apple/swift-corelibs-foundation/pull/225&gt;<br></p><p>There are probably more… <br></p><p>Some of the root cause has been our own failure in getting these merged quickly, which I’m trying to improve on.<br></p><p>- Tony<br></p><p>&gt; On May 13, 2016, at 10:26 AM, James Lee &lt;james at jelee.co.uk&gt; wrote:<br>&gt; <br>&gt; Wanted to chirp up and say I am in the same position as David, with that said, if PR&#39;s have been rejected due to a lack of response, are there any that have not been covered elsewhere and can be picked up?<br>&gt; <br>&gt; James<br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt; On 13 May 2016, at 18:01, Tony Parker via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Hi David,<br>&gt;&gt; <br>&gt;&gt;&gt; On May 11, 2016, at 4:02 PM, David Hart via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello people,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I wanted to start giving a hand on corelibs-foundation but hit two obstacles I’d like to discuss:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It feels difficult to know where help is needed because the ReleaseNotes, Status and Know Issues docs have not been updated in a very long time, as if abandoned. Hopefully we can update hem, but perhaps a rule should be put in place so that no pull request is merged without the corresponding update in the documentation?<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Sounds good to me. I don&#39;t want to start rejecting PRs because they miss a bit of documentation but hopefully we can encourage it or update it after we merge.<br>&gt;&gt; <br>&gt;&gt;&gt; I tried downloading the master branch of corelibs-foundation and running the tests before starting any work, but several of them crashed or failed. I am on OS X, Xcode 7.3.1, up to date on the master branches of corelibs-foundation and corelibs-xctest and am using the latest development snapshot. For reference, the failing tests are:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; TestNSString.test_initializeWithFormat3<br>&gt;&gt;&gt; TestNSTask.test_pipe_stderr<br>&gt;&gt;&gt; TestNSTask.test_pipe_stdout_and_stderr_same_pipe<br>&gt;&gt;&gt; TestNSTask.test_passthrough_environment<br>&gt;&gt;&gt; TestNSTask.test_no_environment<br>&gt;&gt;&gt; TestNSTask.test_custom_environment<br>&gt;&gt;&gt; TestNSUserDefaults.test_createUserDefaults<br>&gt;&gt;&gt; TestNSUserDefaults.test_getRegisteredDefaultItem<br>&gt;&gt;&gt; TestNSXMLDocument.test_xpath<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Any ideas? Perhaps I’m doing something wrong.<br>&gt;&gt; <br>&gt;&gt; Our CI system only builds and tests corelibs-foundation on Linux, so perhaps some regressions have snuck in on OS X only (which is interesting if true).<br>&gt;&gt; <br>&gt;&gt; NSTask in particular has been under a lot of changes for Linux recently.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I was surprised to see fairly little tests for certain classes NSIndexPath, NSUserDefaults, NSScanner. Is that because the code was written before the Open Source project started? What are the rules on test quality and how are they applied?<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; We’d like to see tests with all new code, for sure. Some of this was written fairly quickly in the run up to the launch, so we probably don’t have as many tests as we would like there. I do have a task on my plate somewhere to figure out how we can integrate more of our internal unit tests into the open source project to help with compatibility.<br>&gt;&gt; <br>&gt;&gt;&gt; More generally, I feel worried at how much work is still left, especially with the 3.0 beta branches starting. Am I imagining things or does it not look very good? What can we do to rally the troops?<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I totally understand. The Foundation team itself has been focused on the value type changes, naming changes, etc that are coming as part of Swift 3. We haven’t had nearly as much time as I would have liked to dedicate to bringing this project up to parity with Swift 2.2 functionality. We are still hoping to accept as many contributions as possible. That is why I went through and accepted a bunch of PRs last week.<br>&gt;&gt; <br>&gt;&gt; We have had a few contributions that felt like one-offs; when changes were requested we received no response and so I had to close them, which makes me pretty sad. I haven’t really seen any true ownership of a particular area. I understand it’s asking a lot for someone to come in and help us implement a pre-set API, but I believe in a bright future for this project if we can pick up the pace a bit.<br>&gt;&gt; <br>&gt;&gt; - Tony<br>&gt;&gt; <br>&gt;&gt;&gt; A well meaning developer,<br>&gt;&gt;&gt; David.<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160513/04815739/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/79d9ba388d6b6cf4ec7310cad9fa8c8a?s=50"></div><header><strong>Looking at corelibs-foundation</strong> from <string>Rob Allen</string> &lt;rob at akrabat.com&gt;<p>May 13, 2016 at 06:00:00pm</p></header><div class="content"><p>Hi all,<br></p><p>&gt; On 13 May 2016, at 18:01, Tony Parker via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi David,<br>&gt; <br>&gt;&gt; On May 11, 2016, at 4:02 PM, David Hart via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello people,<br>&gt;&gt; <br>&gt;&gt; I wanted to start giving a hand on corelibs-foundation but hit two obstacles I’d like to discuss:<br></p><p>This is good timing as I&#39;m planning on seeing if I can contribute to corelibs-foundation on the grounds that it may be at my ability level! <br></p><p><br>&gt;&gt; I tried downloading the master branch of corelibs-foundation and running the tests before starting any work, but several of them crashed or failed. I am on OS X, Xcode 7.3.1, up to date on the master branches of corelibs-foundation and corelibs-xctest and am using the latest development snapshot. For reference, the failing tests are:<br>&gt;&gt; <br>&gt;&gt; TestNSString.test_initializeWithFormat3<br>&gt;&gt; TestNSTask.test_pipe_stderr<br>&gt;&gt; TestNSTask.test_pipe_stdout_and_stderr_same_pipe<br>&gt;&gt; TestNSTask.test_passthrough_environment<br>&gt;&gt; TestNSTask.test_no_environment<br>&gt;&gt; TestNSTask.test_custom_environment<br>&gt;&gt; TestNSUserDefaults.test_createUserDefaults<br>&gt;&gt; TestNSUserDefaults.test_getRegisteredDefaultItem<br>&gt;&gt; TestNSXMLDocument.test_xpath<br>&gt;&gt; <br>&gt;&gt; Any ideas? Perhaps I’m doing something wrong.<br>&gt; <br>&gt; Our CI system only builds and tests corelibs-foundation on Linux, so perhaps some regressions have snuck in on OS X only (which is interesting if true).<br>&gt; <br>&gt; NSTask in particular has been under a lot of changes for Linux recently.<br></p><p>I&#39;ve hit this too - I&#39;ll try and raise issues over the weekend for them if I can. <br></p><p>My plan is to start by writing unit tests if only get a feel for how all the project fits together. Building and testing on Linux is so slow due to the lack of incremental builds that starting with OS X seemed logical.  I thought it was a problem at my end though when the tests failed on OS X.<br> <br>Is there a reason why corelibs-foundation isn&#39;t build for OS X by the CI system?<br></p><p><br>Regards,<br></p><p>Rob...<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160513/29a5a7d9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Looking at corelibs-foundation</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>May 13, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On May 13, 2016, at 10:33 AM, Rob Allen &lt;rob at akrabat.com&gt; wrote:<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt;&gt; On 13 May 2016, at 18:01, Tony Parker via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi David,<br>&gt;&gt; <br>&gt;&gt;&gt; On May 11, 2016, at 4:02 PM, David Hart via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello people,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I wanted to start giving a hand on corelibs-foundation but hit two obstacles I’d like to discuss:<br>&gt; <br>&gt; This is good timing as I&#39;m planning on seeing if I can contribute to corelibs-foundation on the grounds that it may be at my ability level! <br>&gt; <br>&gt; <br>&gt;&gt;&gt; I tried downloading the master branch of corelibs-foundation and running the tests before starting any work, but several of them crashed or failed. I am on OS X, Xcode 7.3.1, up to date on the master branches of corelibs-foundation and corelibs-xctest and am using the latest development snapshot. For reference, the failing tests are:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; TestNSString.test_initializeWithFormat3<br>&gt;&gt;&gt; TestNSTask.test_pipe_stderr<br>&gt;&gt;&gt; TestNSTask.test_pipe_stdout_and_stderr_same_pipe<br>&gt;&gt;&gt; TestNSTask.test_passthrough_environment<br>&gt;&gt;&gt; TestNSTask.test_no_environment<br>&gt;&gt;&gt; TestNSTask.test_custom_environment<br>&gt;&gt;&gt; TestNSUserDefaults.test_createUserDefaults<br>&gt;&gt;&gt; TestNSUserDefaults.test_getRegisteredDefaultItem<br>&gt;&gt;&gt; TestNSXMLDocument.test_xpath<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Any ideas? Perhaps I’m doing something wrong.<br>&gt;&gt; <br>&gt;&gt; Our CI system only builds and tests corelibs-foundation on Linux, so perhaps some regressions have snuck in on OS X only (which is interesting if true).<br>&gt;&gt; <br>&gt;&gt; NSTask in particular has been under a lot of changes for Linux recently.<br>&gt; <br>&gt; I&#39;ve hit this too - I&#39;ll try and raise issues over the weekend for them if I can. <br>&gt; <br>&gt; My plan is to start by writing unit tests if only get a feel for how all the project fits together. Building and testing on Linux is so slow due to the lack of incremental builds that starting with OS X seemed logical.  I thought it was a problem at my end though when the tests failed on OS X.<br>&gt;  <br>&gt; Is there a reason why corelibs-foundation isn&#39;t build for OS X by the CI system?<br>&gt; <br></p><p>Technically, swift-corelibs-foundation is only part of the distribution on Linux. On Darwin platforms, we use a combination of the overlay (stdlib/public/SDK/Foundation directory in the Swift project) and the Foundation.framework that ships on the OS.<br></p><p>However, we want to build and test it on OS X because that’s a much easier platform for most of us to deal with on a day-to-day basis.<br></p><p>I think we should consider having the CI build foundation and run its tests on OS X, but I’m not sure how to split out that concept from the final package that the CI generates. We don’t want to ship swift-corelibs-foundation on OS X because then we’d have two separate libraries with the same name and same API…<br></p><p>- Tony<br></p><p>&gt; <br>&gt; Regards,<br>&gt; <br>&gt; Rob...<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160513/7cefd9c2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Looking at corelibs-foundation</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>May 14, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; On 13 May 2016, at 21:50, Tony Parker &lt;anthony.parker at apple.com&gt; wrote:<br>&gt; <br>&gt; Technically, swift-corelibs-foundation is only part of the distribution on Linux. On Darwin platforms, we use a combination of the overlay (stdlib/public/SDK/Foundation directory in the Swift project) and the Foundation.framework that ships on the OS.<br></p><p>I’m confused about swift-corelibs-foundation only being part of the Linux distribution. Are you saying that when Swift 3.0 ships, import Foundation on OS X and iOS will still import the Objective-C framework? If yes, I’m very surprised, and I think many people will be. One of the goals of swift-corelibs-foundation (README) says:<br></p><p>	• Provide a level of OS independence, to enhance portability.<br></p><p>How can it be portable if different platforms don’t share the same underlying core libraries?<br></p><p>David.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160514/03162c6a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Looking at corelibs-foundation</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>May 14, 2016 at 12:00:00am</p></header><div class="content"><p>After looking into it, I guess it would be available, but under the SwiftFoundation module. Correct? I guess that decision was made so that Swift apps in production built on Foundation don’t break when recompiled under Swift 3? Is it worth converging the names of the module so its the same on all platforms? Isn’t it bad if portable code was doomed to have #if os() for all Foundation imports? If we do rename it, do we rename it to SwiftFoundation on Linux or do we rename it to Foundation on OS X (which would require renaming the Objective-C Foundation to something else and write a migration)?<br></p><p>&gt; On 14 May 2016, at 00:19, David Hart via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 13 May 2016, at 21:50, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Technically, swift-corelibs-foundation is only part of the distribution on Linux. On Darwin platforms, we use a combination of the overlay (stdlib/public/SDK/Foundation directory in the Swift project) and the Foundation.framework that ships on the OS.<br>&gt; <br>&gt; I’m confused about swift-corelibs-foundation only being part of the Linux distribution. Are you saying that when Swift 3.0 ships, import Foundation on OS X and iOS will still import the Objective-C framework? If yes, I’m very surprised, and I think many people will be. One of the goals of swift-corelibs-foundation (README) says:<br>&gt; <br>&gt; 	• Provide a level of OS independence, to enhance portability.<br>&gt; <br>&gt; How can it be portable if different platforms don’t share the same underlying core libraries?<br>&gt; <br>&gt; David.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160514/73fab684/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Looking at corelibs-foundation</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>May 13, 2016 at 03:00:00pm</p></header><div class="content"><p>Hi David,<br></p><p>Much of the implementation is indeed shared (via the CoreFoundation C code, and the stuff it uses like ICU and libdispatch). Some of it is a reimplementation of the same API, but in Swift.<br></p><p>If you write code targeting the Foundation API, then you simply ‘import Foundation’. The idea here is that the implementation abstracts away the platform differences including the implementation itself.<br></p><p>- Tony<br></p><p>&gt; On May 13, 2016, at 3:34 PM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt; <br>&gt; After looking into it, I guess it would be available, but under the SwiftFoundation module. Correct? I guess that decision was made so that Swift apps in production built on Foundation don’t break when recompiled under Swift 3? Is it worth converging the names of the module so its the same on all platforms? Isn’t it bad if portable code was doomed to have #if os() for all Foundation imports? If we do rename it, do we rename it to SwiftFoundation on Linux or do we rename it to Foundation on OS X (which would require renaming the Objective-C Foundation to something else and write a migration)?<br>&gt; <br>&gt;&gt; On 14 May 2016, at 00:19, David Hart via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 13 May 2016, at 21:50, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Technically, swift-corelibs-foundation is only part of the distribution on Linux. On Darwin platforms, we use a combination of the overlay (stdlib/public/SDK/Foundation directory in the Swift project) and the Foundation.framework that ships on the OS.<br>&gt;&gt; <br>&gt;&gt; I’m confused about swift-corelibs-foundation only being part of the Linux distribution. Are you saying that when Swift 3.0 ships, import Foundation on OS X and iOS will still import the Objective-C framework? If yes, I’m very surprised, and I think many people will be. One of the goals of swift-corelibs-foundation (README) says:<br>&gt;&gt; <br>&gt;&gt; 	• Provide a level of OS independence, to enhance portability.<br>&gt;&gt; <br>&gt;&gt; How can it be portable if different platforms don’t share the same underlying core libraries?<br>&gt;&gt; <br>&gt;&gt; David.<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160513/76ce7881/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Looking at corelibs-foundation</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>May 14, 2016 at 01:00:00am</p></header><div class="content"><p>Hi Tony,<br></p><p>I’m a bit confused by your answer. I am aware that some Objective-C Foundation and swift-corelibs-foundation classes share a common implementation through CF. My questions were really about the place of swift-corelibs-foundation on OS X and iOS. Can you help me understand?<br></p><p>What did you mean by &quot;Technically, swift-corelibs-foundation is only part of the distribution on Linux.”?<br>Will swift-corelibs-foundation be part of the canonical Swift distribution on OS X and iOS once Swift 3 is released?<br>What is the name of the swift-corelibs-foundation module on OS X and iOS? SwiftFoundation?<br>What is the name of the swift-corelibs-foundation module on Linux? Foundation?<br>If those are different, isn’t there an incentive for having the same moule name on all platforms?<br></p><p>David.<br></p><p>&gt; On 14 May 2016, at 00:44, Tony Parker &lt;anthony.parker at apple.com&gt; wrote:<br>&gt; <br>&gt; Hi David,<br>&gt; <br>&gt; Much of the implementation is indeed shared (via the CoreFoundation C code, and the stuff it uses like ICU and libdispatch). Some of it is a reimplementation of the same API, but in Swift.<br>&gt; <br>&gt; If you write code targeting the Foundation API, then you simply ‘import Foundation’. The idea here is that the implementation abstracts away the platform differences including the implementation itself.<br>&gt; <br>&gt; - Tony<br>&gt; <br>&gt;&gt; On May 13, 2016, at 3:34 PM, David Hart &lt;david at hartbit.com &lt;mailto:david at hartbit.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; After looking into it, I guess it would be available, but under the SwiftFoundation module. Correct? I guess that decision was made so that Swift apps in production built on Foundation don’t break when recompiled under Swift 3? Is it worth converging the names of the module so its the same on all platforms? Isn’t it bad if portable code was doomed to have #if os() for all Foundation imports? If we do rename it, do we rename it to SwiftFoundation on Linux or do we rename it to Foundation on OS X (which would require renaming the Objective-C Foundation to something else and write a migration)?<br>&gt;&gt; <br>&gt;&gt;&gt; On 14 May 2016, at 00:19, David Hart via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 13 May 2016, at 21:50, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Technically, swift-corelibs-foundation is only part of the distribution on Linux. On Darwin platforms, we use a combination of the overlay (stdlib/public/SDK/Foundation directory in the Swift project) and the Foundation.framework that ships on the OS.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’m confused about swift-corelibs-foundation only being part of the Linux distribution. Are you saying that when Swift 3.0 ships, import Foundation on OS X and iOS will still import the Objective-C framework? If yes, I’m very surprised, and I think many people will be. One of the goals of swift-corelibs-foundation (README) says:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	• Provide a level of OS independence, to enhance portability.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; How can it be portable if different platforms don’t share the same underlying core libraries?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; David.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt;<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160514/5a7133eb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Looking at corelibs-foundation</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>May 13, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On May 13, 2016, at 4:13 PM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt; <br>&gt; Hi Tony,<br>&gt; <br>&gt; I’m a bit confused by your answer. I am aware that some Objective-C Foundation and swift-corelibs-foundation classes share a common implementation through CF. My questions were really about the place of swift-corelibs-foundation on OS X and iOS. Can you help me understand?<br>&gt; <br>&gt; What did you mean by &quot;Technically, swift-corelibs-foundation is only part of the distribution on Linux.”?<br></p><p>On Darwin we will use the system framework. It is (clearly) far more mature than the swift-corelibs-foundation implementation.<br></p><p>Over time it’s not clear how the two will evolve, but we want them to evolve together from an API point of view at least.<br></p><p>&gt; Will swift-corelibs-foundation be part of the canonical Swift distribution on OS X and iOS once Swift 3 is released?<br></p><p>No. Only on Linux or other non-Darwin platforms.<br></p><p>&gt; What is the name of the swift-corelibs-foundation module on OS X and iOS? SwiftFoundation?<br></p><p>SwiftFoundation, and it is named this way specifically to avoid conflict with the system Foundation.<br></p><p>&gt; What is the name of the swift-corelibs-foundation module on Linux? Foundation?<br></p><p>Foundation<br></p><p>&gt; If those are different, isn’t there an incentive for having the same moule name on all platforms?<br>&gt; <br>&gt; David.<br>&gt; <br></p><p>The system Foundation.framework on Darwin and swift-corelibs-foundation on Linux are both called “Foundation”.<br></p><p>Hope that clears this up.<br></p><p>- Tony<br></p><p><br>&gt;&gt; On 14 May 2016, at 00:44, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi David,<br>&gt;&gt; <br>&gt;&gt; Much of the implementation is indeed shared (via the CoreFoundation C code, and the stuff it uses like ICU and libdispatch). Some of it is a reimplementation of the same API, but in Swift.<br>&gt;&gt; <br>&gt;&gt; If you write code targeting the Foundation API, then you simply ‘import Foundation’. The idea here is that the implementation abstracts away the platform differences including the implementation itself.<br>&gt;&gt; <br>&gt;&gt; - Tony<br>&gt;&gt; <br>&gt;&gt;&gt; On May 13, 2016, at 3:34 PM, David Hart &lt;david at hartbit.com &lt;mailto:david at hartbit.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; After looking into it, I guess it would be available, but under the SwiftFoundation module. Correct? I guess that decision was made so that Swift apps in production built on Foundation don’t break when recompiled under Swift 3? Is it worth converging the names of the module so its the same on all platforms? Isn’t it bad if portable code was doomed to have #if os() for all Foundation imports? If we do rename it, do we rename it to SwiftFoundation on Linux or do we rename it to Foundation on OS X (which would require renaming the Objective-C Foundation to something else and write a migration)?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 14 May 2016, at 00:19, David Hart via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 13 May 2016, at 21:50, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Technically, swift-corelibs-foundation is only part of the distribution on Linux. On Darwin platforms, we use a combination of the overlay (stdlib/public/SDK/Foundation directory in the Swift project) and the Foundation.framework that ships on the OS.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’m confused about swift-corelibs-foundation only being part of the Linux distribution. Are you saying that when Swift 3.0 ships, import Foundation on OS X and iOS will still import the Objective-C framework? If yes, I’m very surprised, and I think many people will be. One of the goals of swift-corelibs-foundation (README) says:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	• Provide a level of OS independence, to enhance portability.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; How can it be portable if different platforms don’t share the same underlying core libraries?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; David.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt;&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt;<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160513/9eb0cf79/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Looking at corelibs-foundation</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>May 14, 2016 at 10:00:00am</p></header><div class="content"><p>Thanks for all the answers :) These questions are dear to my heart because I plan on using corelibs-foundation on Darwin as soon as possible to share code between our iOS apps and web services.<br></p><p>&gt; On 14 May 2016, at 01:39, Tony Parker &lt;anthony.parker at apple.com&gt; wrote:<br>&gt; <br>&gt; Over time it’s not clear how the two will evolve, but we want them to evolve together from an API point of view at least.<br></p><p>I have a hard time seeing how they can evolve together seeing as we are already making improvements to corelibs-foundation with the value-type and NS-dropping proposals which will not reflect back to Darwin&#39;s system framework.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Looking at corelibs-foundation</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>May 14, 2016 at 09:00:00am</p></header><div class="content"><p>Hi David,<br></p><p><br>&gt; On May 14, 2016, at 1:04 AM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt; <br>&gt; Thanks for all the answers :) These questions are dear to my heart because I plan on using corelibs-foundation on Darwin as soon as possible to share code between our iOS apps and web services.<br></p><p>Yup, that is exactly the use case we want to enable. In fact...<br></p><p>&gt; <br>&gt;&gt; On 14 May 2016, at 01:39, Tony Parker &lt;anthony.parker at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Over time it’s not clear how the two will evolve, but we want them to evolve together from an API point of view at least.<br>&gt; <br>&gt; I have a hard time seeing how they can evolve together seeing as we are already making improvements to corelibs-foundation with the value-type and NS-dropping proposals which will not reflect back to Darwin&#39;s system framework.<br>&gt; <br>&gt; <br></p><p>Quite the contrary! Everything in those proposals applies equally to both Darwin and corelibs Foundation. <br></p><p>- Tony<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Looking at corelibs-foundation</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>May 14, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On 14 May 2016, at 01:39, Tony Parker &lt;anthony.parker at apple.com&gt; wrote:<br>&gt; <br>&gt; No. Only on Linux or other non-Darwin platforms.<br></p><p>Ok, I understand that corelibs won&#39;t be the official &quot;Foundation&quot; framework on Darwin, but it will still be available under SwiftFoundation without having to compile it ourselves right?<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
