<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9b5e7f229ebf32c8eca02e7cee0f379f?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Nicola Salmoria</string> &lt;nicola.salmoria at gmail.com&gt;<p>February 25, 2016 at 09:00:00am</p></header><div class="content"><p>I agree that the attribute should be attached to the return type instead that to the function.<br></p><p>I’d say that the cases where it’s ok to discard the result are when the result is not strictly part of the API, but provided because it could be useful to the caller. An attribute that would naturally describe this could be<br></p><p>@convenience<br></p><p>The first example that comes to mind is Dictionary.updateValue. The declaration could then become<br></p><p>    public mutating func updateValue(value: Value, forKey key: Key) -&gt; @convenience Value?<br></p><p>Nicola<br></p><p>&gt; &gt; @optional_result (or ideally @optionalResult if camel-case for attributes is accepted) is clearer I think if we want a shortened two-word form.<br>&gt; I don&#39;t like &quot;optional&quot; here because it falsely implies a connection with the Optional type.<br>&gt; <br>&gt; I do think, however, that this needs to be something very short—one or two words, not three or four. One way to trim words would be to attach the attribute to the return type; the position would imply that the keyword related to the return type, so the word &quot;result&quot; would be unnecessary:<br>&gt; <br>&gt; @ignoreUnusedResult mutating func removeLast() -&gt;Element<br>&gt; mutating func removeLast() -&gt;@ignoreUnused Element<br>&gt; <br>&gt; That might be a little strange, though—we don&#39;t currently have any attributes in that position.<br>&gt; <br>&gt; Another way to make this shorter is to try to find an adjective which implies *why* we can ignore the result—that is, because it isn&#39;t important. The problem is that most such adjectives are either compound words:<br>&gt; <br>&gt; @unimportantResult mutating func removeLast() -&gt;Element<br>&gt; mutating func removeLast() -&gt;@unimportant Element<br>&gt; <br>&gt; @discardableResult mutating func removeLast() -&gt;Element<br>&gt; mutating func removeLast() -&gt;@discardable Element<br>&gt; <br>&gt; Or they&#39;re uncommon words people may need to look up:<br>&gt; <br>&gt; @banalResult mutating func removeLast() -&gt;Element<br>&gt; mutating func removeLast() -&gt;@banal Element<br>&gt; <br>&gt; Actually, I can think of one word in the latter category that many programmers *do* know:<br>&gt; <br>&gt; @trivialResult mutating func removeLast() -&gt;Element<br>&gt; mutating func removeLast() -&gt;@trivial Element<br>&gt; <br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160225/14335077/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/47e3aeeaf151d4f51ee15fc7871bf584?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Rudolf Adamkovič</string> &lt;salutis at me.com&gt;<p>February 25, 2016 at 11:00:00am</p></header><div class="content"><p>+1 for @convenience attached to the return type.<br></p><p>Very, very clean solution.<br></p><p>R+<br></p><p>&gt; On 25 Feb 2016, at 09:13, Nicola Salmoria via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I agree that the attribute should be attached to the return type instead that to the function.<br>&gt; <br>&gt; I’d say that the cases where it’s ok to discard the result are when the result is not strictly part of the API, but provided because it could be useful to the caller. An attribute that would naturally describe this could be<br>&gt; <br>&gt; @convenience<br>&gt; <br>&gt; The first example that comes to mind is Dictionary.updateValue. The declaration could then become<br>&gt; <br>&gt;     public mutating func updateValue(value: Value, forKey key: Key) -&gt; @convenience Value?<br>&gt; <br>&gt; Nicola<br>&gt; <br>&gt; &gt; &gt; @optional_result (or ideally @optionalResult if camel-case for attributes is accepted) is clearer I think if we want a shortened two-word form.<br>&gt; &gt; I don&#39;t like &quot;optional&quot; here because it falsely implies a connection with the Optional type.<br>&gt; &gt; <br>&gt; &gt; I do think, however, that this needs to be something very short—one or two words, not three or four. One way to trim words would be to attach the attribute to the return type; the position would imply that the keyword related to the return type, so the word &quot;result&quot; would be unnecessary:<br>&gt; &gt; <br>&gt; &gt; @ignoreUnusedResult mutating func removeLast() -&gt;Element<br>&gt; &gt; mutating func removeLast() -&gt;@ignoreUnused Element<br>&gt; &gt; <br>&gt; &gt; That might be a little strange, though—we don&#39;t currently have any attributes in that position.<br>&gt; &gt; <br>&gt; &gt; Another way to make this shorter is to try to find an adjective which implies *why* we can ignore the result—that is, because it isn&#39;t important. The problem is that most such adjectives are either compound words:<br>&gt; &gt; <br>&gt; &gt; @unimportantResult mutating func removeLast() -&gt;Element<br>&gt; &gt; mutating func removeLast() -&gt;@unimportant Element<br>&gt; &gt; <br>&gt; &gt; @discardableResult mutating func removeLast() -&gt;Element<br>&gt; &gt; mutating func removeLast() -&gt;@discardable Element<br>&gt; &gt; <br>&gt; &gt; Or they&#39;re uncommon words people may need to look up:<br>&gt; &gt; <br>&gt; &gt; @banalResult mutating func removeLast() -&gt;Element<br>&gt; &gt; mutating func removeLast() -&gt;@banal Element<br>&gt; &gt; <br>&gt; &gt; Actually, I can think of one word in the latter category that many programmers *do* know:<br>&gt; &gt; <br>&gt; &gt; @trivialResult mutating func removeLast() -&gt;Element<br>&gt; &gt; mutating func removeLast() -&gt;@trivial Element<br>&gt; &gt; <br>&gt; &gt; --<br>&gt; &gt; Brent Royal-Gordon<br>&gt; &gt; Architechies<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160225/40d680d3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/47e3aeeaf151d4f51ee15fc7871bf584?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Rudolf Adamkovič</string> &lt;salutis at me.com&gt;<p>February 25, 2016 at 12:00:00pm</p></header><div class="content"><p>By the way, the following:<br></p><p>func updateIfNeeded() -&gt; @convenience Int<br></p><p>… can satisfy a protocol requirement like:<br></p><p>func updateIfNeeded()<br></p><p>I’m no expert but … I love this!<br></p><p>R+<br></p><p>&gt; On 25 Feb 2016, at 11:54, Rudolf Adamkovič &lt;salutis at me.com&gt; wrote:<br>&gt; <br>&gt; +1 for @convenience attached to the return type.<br>&gt; <br>&gt; Very, very clean solution.<br>&gt; <br>&gt; R+<br>&gt; <br>&gt;&gt; On 25 Feb 2016, at 09:13, Nicola Salmoria via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I agree that the attribute should be attached to the return type instead that to the function.<br>&gt;&gt; <br>&gt;&gt; I’d say that the cases where it’s ok to discard the result are when the result is not strictly part of the API, but provided because it could be useful to the caller. An attribute that would naturally describe this could be<br>&gt;&gt; <br>&gt;&gt; @convenience<br>&gt;&gt; <br>&gt;&gt; The first example that comes to mind is Dictionary.updateValue. The declaration could then become<br>&gt;&gt; <br>&gt;&gt;     public mutating func updateValue(value: Value, forKey key: Key) -&gt; @convenience Value?<br>&gt;&gt; <br>&gt;&gt; Nicola<br>&gt;&gt; <br>&gt;&gt; &gt; &gt; @optional_result (or ideally @optionalResult if camel-case for attributes is accepted) is clearer I think if we want a shortened two-word form.<br>&gt;&gt; &gt; I don&#39;t like &quot;optional&quot; here because it falsely implies a connection with the Optional type.<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; I do think, however, that this needs to be something very short—one or two words, not three or four. One way to trim words would be to attach the attribute to the return type; the position would imply that the keyword related to the return type, so the word &quot;result&quot; would be unnecessary:<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; @ignoreUnusedResult mutating func removeLast() -&gt;Element<br>&gt;&gt; &gt; mutating func removeLast() -&gt;@ignoreUnused Element<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; That might be a little strange, though—we don&#39;t currently have any attributes in that position.<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; Another way to make this shorter is to try to find an adjective which implies *why* we can ignore the result—that is, because it isn&#39;t important. The problem is that most such adjectives are either compound words:<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; @unimportantResult mutating func removeLast() -&gt;Element<br>&gt;&gt; &gt; mutating func removeLast() -&gt;@unimportant Element<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; @discardableResult mutating func removeLast() -&gt;Element<br>&gt;&gt; &gt; mutating func removeLast() -&gt;@discardable Element<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; Or they&#39;re uncommon words people may need to look up:<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; @banalResult mutating func removeLast() -&gt;Element<br>&gt;&gt; &gt; mutating func removeLast() -&gt;@banal Element<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; Actually, I can think of one word in the latter category that many programmers *do* know:<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; @trivialResult mutating func removeLast() -&gt;Element<br>&gt;&gt; &gt; mutating func removeLast() -&gt;@trivial Element<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; --<br>&gt;&gt; &gt; Brent Royal-Gordon<br>&gt;&gt; &gt; Architechies<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; <br>&gt;&gt; &gt; <br>&gt;&gt; &gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160225/8dd7b019/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>February 25, 2016 at 07:00:00am</p></header><div class="content"><p>I like this a lot.<br></p><p>-- E<br></p><p>&gt; On Feb 25, 2016, at 1:13 AM, Nicola Salmoria via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I agree that the attribute should be attached to the return type instead that to the function.<br>&gt; <br>&gt; I’d say that the cases where it’s ok to discard the result are when the result is not strictly part of the API, but provided because it could be useful to the caller. An attribute that would naturally describe this could be<br>&gt; <br>&gt; @convenience<br>&gt; <br>&gt; The first example that comes to mind is Dictionary.updateValue. The declaration could then become<br>&gt; <br>&gt;     public mutating func updateValue(value: Value, forKey key: Key) -&gt; @convenience Value?<br>&gt; <br>&gt; Nicola<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160225/979855e7/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>February 25, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; I’d say that the cases where it’s ok to discard the result are when the result is not strictly part of the API, but provided because it could be useful to the caller. An attribute that would naturally describe this could be<br>&gt; <br>&gt; @convenience<br>&gt; <br>&gt; The first example that comes to mind is Dictionary.updateValue. The declaration could then become<br>&gt; <br>&gt;     public mutating func updateValue(value: Value, forKey key: Key) -&gt; @convenience Value?<br></p><p>@convenience reads really, really well, but I&#39;m worried it might get confused with `convenience init`, which means something completely different.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>February 25, 2016 at 02:00:00pm</p></header><div class="content"><p>There are two parts to this suggestion:<br></p><p>Part 1 decorates the return type, which may or may not be used. This makes a lot of sense to me. as the return type can also be treated as Void<br>Part 2 suggests @convenience. This is easily tweakable.<br></p><p>-- E<br></p><p><br>&gt; On Feb 25, 2016, at 2:06 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; I’d say that the cases where it’s ok to discard the result are when the result is not strictly part of the API, but provided because it could be useful to the caller. An attribute that would naturally describe this could be<br>&gt;&gt; <br>&gt;&gt; @convenience<br>&gt;&gt; <br>&gt;&gt; The first example that comes to mind is Dictionary.updateValue. The declaration could then become<br>&gt;&gt; <br>&gt;&gt;    public mutating func updateValue(value: Value, forKey key: Key) -&gt; @convenience Value?<br>&gt; <br>&gt; @convenience reads really, really well, but I&#39;m worried it might get confused with `convenience init`, which means something completely different.<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160225/e9737989/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
