<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Completing Generics] Arbitrary requirements in protocols</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April 11, 2016 at 11:00:00am</p></header><div class="content"><p>on Mon Apr 11 2016, Jacob Bandes-Storch &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Doug wrote this in the Completing Generics manifesto, under &quot;Minor extensions&quot;:<br>&gt;<br>&gt;     *Arbitrary requirements in protocols<br>&gt;<br>&gt;     Currently, a new protocol can inherit from other protocols, introduce new<br>&gt;     associated types, and add new conformance constraints to associated types<br>&gt;     (by redeclaring an associated type from an inherited protocol). However, one<br>&gt;     cannot express more general constraints. Building on the example from<br>&gt;     “Recursive protocol constraints”, we really want the element type of a<br>&gt;     Sequence’s SubSequence to be the same as the element type of the Sequence,<br>&gt;     e.g.,<br>&gt;<br>&gt;     protocol Sequence {<br>&gt;     associatedtype Iterator : IteratorProtocol<br>&gt;     …<br>&gt;     associatedtype SubSequence : Sequence where SubSequence.Iterator.Element ==<br>&gt;     Iterator.Element<br>&gt;     }<br>&gt;<br>&gt; +1.<br>&gt;<br>&gt; To make it into Swift 3, would this feature require a proposal of its<br>&gt; own? <br></p><p>It could be part of another proposal, but it should be in a proposal.<br>Whether or not it can still make Swift 3, I am unsure.<br></p><p>&gt; How feasible would it be to implement on top of the current system?<br></p><p>I can&#39;t answer that, but if you want to work on this I&#39;d suggest<br>starting with the implementation.  In this case, the proposal is the<br>easy part.<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Completing Generics] Arbitrary requirements in protocols</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>April 11, 2016 at 02:00:00pm</p></header><div class="content"><p>On Mon, Apr 11, 2016 at 11:56 AM, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; on Mon Apr 11 2016, Jacob Bandes-Storch &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt; Doug wrote this in the Completing Generics manifesto, under &quot;Minor<br>&gt; extensions&quot;:<br>&gt; &gt;<br>&gt; &gt;     *Arbitrary requirements in protocols<br>&gt; &gt;<br>&gt; &gt;     Currently, a new protocol can inherit from other protocols,<br>&gt; introduce new<br>&gt; &gt;     associated types, and add new conformance constraints to associated<br>&gt; types<br>&gt; &gt;     (by redeclaring an associated type from an inherited protocol).<br>&gt; However, one<br>&gt; &gt;     cannot express more general constraints. Building on the example from<br>&gt; &gt;     “Recursive protocol constraints”, we really want the element type of<br>&gt; a<br>&gt; &gt;     Sequence’s SubSequence to be the same as the element type of the<br>&gt; Sequence,<br>&gt; &gt;     e.g.,<br>&gt; &gt;<br>&gt; &gt;     protocol Sequence {<br>&gt; &gt;     associatedtype Iterator : IteratorProtocol<br>&gt; &gt;     …<br>&gt; &gt;     associatedtype SubSequence : Sequence where<br>&gt; SubSequence.Iterator.Element ==<br>&gt; &gt;     Iterator.Element<br>&gt; &gt;     }<br>&gt; &gt;<br>&gt; &gt; +1.<br>&gt; &gt;<br>&gt; &gt; To make it into Swift 3, would this feature require a proposal of its<br>&gt; &gt; own?<br>&gt;<br>&gt; It could be part of another proposal, but it should be in a proposal.<br>&gt; Whether or not it can still make Swift 3, I am unsure.<br>&gt;<br>&gt; &gt; How feasible would it be to implement on top of the current system?<br>&gt;<br>&gt; I can&#39;t answer that, but if you want to work on this I&#39;d suggest<br>&gt; starting with the implementation.  In this case, the proposal is the<br>&gt; easy part.<br>&gt;<br></p><p>I was mostly wondering if anyone inside the team has already thought about<br>how to do this, or perhaps even started working on it. If it&#39;s in the<br>pipeline, it might affect our discussion about &quot;allValues&quot; for enums (which<br>I&#39;m going to send an email about soon).<br></p><p><br>&gt;<br>&gt; --<br>&gt; Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160411/3c48a21a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Completing Generics] Arbitrary requirements in protocols</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April 11, 2016 at 03:00:00pm</p></header><div class="content"><p>on Mon Apr 11 2016, Jacob Bandes-Storch &lt;jtbandes-AT-gmail.com&gt; wrote:<br></p><p>&gt; On Mon, Apr 11, 2016 at 11:56 AM, Dave Abrahams via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;     on Mon Apr 11 2016, Jacob Bandes-Storch &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;     &gt; Doug wrote this in the Completing Generics manifesto, under &quot;Minor<br>&gt;     extensions&quot;:<br>&gt;     &gt;<br>&gt;     &gt; *Arbitrary requirements in protocols<br>&gt;     &gt;<br>&gt;     &gt; Currently, a new protocol can inherit from other protocols, introduce new<br>&gt;     &gt; associated types, and add new conformance constraints to associated types<br>&gt;     &gt; (by redeclaring an associated type from an inherited protocol). However,<br>&gt;     one<br>&gt;     &gt; cannot express more general constraints. Building on the example from<br>&gt;     &gt; “Recursive protocol constraints”, we really want the element type of a<br>&gt;     &gt; Sequence’s SubSequence to be the same as the element type of the Sequence,<br>&gt;     &gt; e.g.,<br>&gt;     &gt;<br>&gt;     &gt; protocol Sequence {<br>&gt;     &gt; associatedtype Iterator : IteratorProtocol<br>&gt;     &gt; …<br>&gt;     &gt; associatedtype SubSequence : Sequence where SubSequence.Iterator.Element<br>&gt;     ==<br>&gt;     &gt; Iterator.Element<br>&gt;     &gt; }<br>&gt;     &gt;<br>&gt;     &gt; +1.<br>&gt;     &gt;<br>&gt;     &gt; To make it into Swift 3, would this feature require a proposal of its<br>&gt;     &gt; own?<br>&gt;<br>&gt;     It could be part of another proposal, but it should be in a proposal.<br>&gt;     Whether or not it can still make Swift 3, I am unsure.<br>&gt;<br>&gt;     &gt; How feasible would it be to implement on top of the current system?<br>&gt;<br>&gt;     I can&#39;t answer that, but if you want to work on this I&#39;d suggest<br>&gt;     starting with the implementation. In this case, the proposal is the<br>&gt;     easy part.<br>&gt;<br>&gt; I was mostly wondering if anyone inside the team has already thought about how<br>&gt; to do this, or perhaps even started working on it. If it&#39;s in the pipeline, it<br>&gt; might affect our discussion about &quot;allValues&quot; for enums (which I&#39;m going to send<br>&gt; an email about soon).<br></p><p>AFAIK, nobody has started it yet.<br></p><p>-- <br>Dave<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
