<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>NSOperationQueue and friends</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>March 25, 2016 at 01:00:00pm</p></header><div class="content"><p>I know a few of you have been waiting for this: I just pushed an initial implementation of NSOperationQueue, NSOperation and NSBlockOperation. It is worth noting that this implementaiton has a few behavioral differences between this implementation and the one implemented in objective-c. Part of this difference is due to features like QoS not being cross platform portable or KVO not yet implementable in Swift. This is very much a work-in-progress; it needs unit tests and and a bit more polish, but hopefully it is good enough to get some work started in some other places.<br></p><p>- Philippe Hausler<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/79cd2bdc2074f4e69eac60743fe785fc?s=50"></div><header><strong>NSOperationQueue and friends</strong> from <string>Daniel Eggert</string> &lt;danieleggert at me.com&gt;<p>March 26, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; <br>&gt; On 25 Mar 2016, at 21:15, Philippe Hausler via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; I know a few of you have been waiting for this: I just pushed an initial implementation of NSOperationQueue, NSOperation and NSBlockOperation. It is worth noting that this implementaiton has a few behavioral differences between this implementation and the one implemented in objective-c. Part of this difference is due to features like QoS not being cross platform portable or KVO not yet implementable in Swift. This is very much a work-in-progress; it needs unit tests and and a bit more polish, but hopefully it is good enough to get some work started in some other places.<br>&gt; <br>&gt; - Philippe Hausler<br></p><p><br>Great to see progress on this.<br></p><p>It does fail this simple test case, though:<br></p><p><br>    func test_BlockBasedAPI() {<br>        let queue = NSOperationQueue()<br>        <br>        let expectation = expectationWithDescription(&quot;did run block&quot;)<br>        queue.addOperationWithBlock {<br>            expectation.fulfill()<br>        }<br>        <br>        waitForExpectationsWithTimeout(0.001, handler: nil)<br>    }<br></p><p>I&#39;m not sure what&#39;s going on there. I was using this on my branch for NSURLSession since it has a delegate queue that I need to run callbacks on.<br></p><p>/Daniel<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>NSOperationQueue and friends</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>March 26, 2016 at 02:00:00pm</p></header><div class="content"><p>Is that on Linux? Perhaps it is because it is missing run loop interaction?<br></p><p>Sent from my iPhone<br></p><p>On Mar 26, 2016, at 10:52 AM, Daniel Eggert &lt;danieleggert at me.com&gt; wrote:<br></p><p>&gt;&gt; <br>&gt;&gt; On 25 Mar 2016, at 21:15, Philippe Hausler via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I know a few of you have been waiting for this: I just pushed an initial implementation of NSOperationQueue, NSOperation and NSBlockOperation. It is worth noting that this implementaiton has a few behavioral differences between this implementation and the one implemented in objective-c. Part of this difference is due to features like QoS not being cross platform portable or KVO not yet implementable in Swift. This is very much a work-in-progress; it needs unit tests and and a bit more polish, but hopefully it is good enough to get some work started in some other places.<br>&gt;&gt; <br>&gt;&gt; - Philippe Hausler<br>&gt; <br>&gt; <br>&gt; Great to see progress on this.<br>&gt; <br>&gt; It does fail this simple test case, though:<br>&gt; <br>&gt; <br>&gt;    func test_BlockBasedAPI() {<br>&gt;        let queue = NSOperationQueue()<br>&gt; <br>&gt;        let expectation = expectationWithDescription(&quot;did run block&quot;)<br>&gt;        queue.addOperationWithBlock {<br>&gt;            expectation.fulfill()<br>&gt;        }<br>&gt; <br>&gt;        waitForExpectationsWithTimeout(0.001, handler: nil)<br>&gt;    }<br>&gt; <br>&gt; I&#39;m not sure what&#39;s going on there. I was using this on my branch for NSURLSession since it has a delegate queue that I need to run callbacks on.<br>&gt; <br>&gt; /Daniel<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/79cd2bdc2074f4e69eac60743fe785fc?s=50"></div><header><strong>NSOperationQueue and friends</strong> from <string>Daniel Eggert</string> &lt;danieleggert at me.com&gt;<p>March 28, 2016 at 10:00:00pm</p></header><div class="content"><p>This is on OS X will everything pulled from master yesterday. I&#39;m using Xcode, and I built a toolchain from source. Same happens with the 2016-03-24 toolchain from swift.org.<br></p><p>For some reason DEPLOYMENT_ENABLE_LIBDISPATCH isn&#39;t set, but I guess it should be?<br></p><p>/Daniel<br></p><p><br>&gt; On 26 Mar 2016, at 22:54, Philippe Hausler &lt;phausler at apple.com&gt; wrote:<br>&gt; <br>&gt; Is that on Linux? Perhaps it is because it is missing run loop interaction?<br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt; On Mar 26, 2016, at 10:52 AM, Daniel Eggert &lt;danieleggert at me.com&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On 25 Mar 2016, at 21:15, Philippe Hausler via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I know a few of you have been waiting for this: I just pushed an initial implementation of NSOperationQueue, NSOperation and NSBlockOperation. It is worth noting that this implementaiton has a few behavioral differences between this implementation and the one implemented in objective-c. Part of this difference is due to features like QoS not being cross platform portable or KVO not yet implementable in Swift. This is very much a work-in-progress; it needs unit tests and and a bit more polish, but hopefully it is good enough to get some work started in some other places.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Philippe Hausler<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Great to see progress on this.<br>&gt;&gt; <br>&gt;&gt; It does fail this simple test case, though:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;   func test_BlockBasedAPI() {<br>&gt;&gt;       let queue = NSOperationQueue()<br>&gt;&gt; <br>&gt;&gt;       let expectation = expectationWithDescription(&quot;did run block&quot;)<br>&gt;&gt;       queue.addOperationWithBlock {<br>&gt;&gt;           expectation.fulfill()<br>&gt;&gt;       }<br>&gt;&gt; <br>&gt;&gt;       waitForExpectationsWithTimeout(0.001, handler: nil)<br>&gt;&gt;   }<br>&gt;&gt; <br>&gt;&gt; I&#39;m not sure what&#39;s going on there. I was using this on my branch for NSURLSession since it has a delegate queue that I need to run callbacks on.<br>&gt;&gt; <br>&gt;&gt; /Daniel<br>&gt;&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>NSOperationQueue and friends</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>March 28, 2016 at 01:00:00pm</p></header><div class="content"><p>DEPLOYMENT_ENABLE_LIBDISPATCH should not be enabled unless you specifically enable it (this is until we get libdispatch fully integrated into the build system)<br></p><p>&gt; On Mar 28, 2016, at 1:14 PM, Daniel Eggert &lt;danieleggert at me.com&gt; wrote:<br>&gt; <br>&gt; This is on OS X will everything pulled from master yesterday. I&#39;m using Xcode, and I built a toolchain from source. Same happens with the 2016-03-24 toolchain from swift.org.<br>&gt; <br>&gt; For some reason DEPLOYMENT_ENABLE_LIBDISPATCH isn&#39;t set, but I guess it should be?<br>&gt; <br>&gt; /Daniel<br>&gt; <br>&gt; <br>&gt;&gt; On 26 Mar 2016, at 22:54, Philippe Hausler &lt;phausler at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Is that on Linux? Perhaps it is because it is missing run loop interaction?<br>&gt;&gt; <br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt; On Mar 26, 2016, at 10:52 AM, Daniel Eggert &lt;danieleggert at me.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 25 Mar 2016, at 21:15, Philippe Hausler via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I know a few of you have been waiting for this: I just pushed an initial implementation of NSOperationQueue, NSOperation and NSBlockOperation. It is worth noting that this implementaiton has a few behavioral differences between this implementation and the one implemented in objective-c. Part of this difference is due to features like QoS not being cross platform portable or KVO not yet implementable in Swift. This is very much a work-in-progress; it needs unit tests and and a bit more polish, but hopefully it is good enough to get some work started in some other places.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - Philippe Hausler<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Great to see progress on this.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It does fail this simple test case, though:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  func test_BlockBasedAPI() {<br>&gt;&gt;&gt;      let queue = NSOperationQueue()<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;      let expectation = expectationWithDescription(&quot;did run block&quot;)<br>&gt;&gt;&gt;      queue.addOperationWithBlock {<br>&gt;&gt;&gt;          expectation.fulfill()<br>&gt;&gt;&gt;      }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;      waitForExpectationsWithTimeout(0.001, handler: nil)<br>&gt;&gt;&gt;  }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m not sure what&#39;s going on there. I was using this on my branch for NSURLSession since it has a delegate queue that I need to run callbacks on.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; /Daniel<br>&gt;&gt;&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/79cd2bdc2074f4e69eac60743fe785fc?s=50"></div><header><strong>NSOperationQueue and friends</strong> from <string>Daniel Eggert</string> &lt;danieleggert at me.com&gt;<p>March 28, 2016 at 11:00:00pm</p></header><div class="content"><p>Ok.<br></p><p>That test case fail on OS X, though. Should I open a bug?<br></p><p>/Daniel<br></p><p><br>&gt; On Mar 28, 2016, at 22:17, Philippe Hausler &lt;phausler at apple.com&gt; wrote:<br>&gt; <br>&gt; DEPLOYMENT_ENABLE_LIBDISPATCH should not be enabled unless you specifically enable it (this is until we get libdispatch fully integrated into the build system)<br>&gt; <br>&gt;&gt; On Mar 28, 2016, at 1:14 PM, Daniel Eggert &lt;danieleggert at me.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; This is on OS X will everything pulled from master yesterday. I&#39;m using Xcode, and I built a toolchain from source. Same happens with the 2016-03-24 toolchain from swift.org.<br>&gt;&gt; <br>&gt;&gt; For some reason DEPLOYMENT_ENABLE_LIBDISPATCH isn&#39;t set, but I guess it should be?<br>&gt;&gt; <br>&gt;&gt; /Daniel<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 26 Mar 2016, at 22:54, Philippe Hausler &lt;phausler at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is that on Linux? Perhaps it is because it is missing run loop interaction?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Mar 26, 2016, at 10:52 AM, Daniel Eggert &lt;danieleggert at me.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 25 Mar 2016, at 21:15, Philippe Hausler via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I know a few of you have been waiting for this: I just pushed an initial implementation of NSOperationQueue, NSOperation and NSBlockOperation. It is worth noting that this implementaiton has a few behavioral differences between this implementation and the one implemented in objective-c. Part of this difference is due to features like QoS not being cross platform portable or KVO not yet implementable in Swift. This is very much a work-in-progress; it needs unit tests and and a bit more polish, but hopefully it is good enough to get some work started in some other places.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; - Philippe Hausler<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Great to see progress on this.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It does fail this simple test case, though:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func test_BlockBasedAPI() {<br>&gt;&gt;&gt;&gt;     let queue = NSOperationQueue()<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     let expectation = expectationWithDescription(&quot;did run block&quot;)<br>&gt;&gt;&gt;&gt;     queue.addOperationWithBlock {<br>&gt;&gt;&gt;&gt;         expectation.fulfill()<br>&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     waitForExpectationsWithTimeout(0.001, handler: nil)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;m not sure what&#39;s going on there. I was using this on my branch for NSURLSession since it has a delegate queue that I need to run callbacks on.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; /Daniel<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>NSOperationQueue and friends</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>March 28, 2016 at 02:00:00pm</p></header><div class="content"><p>the swift-corelibs-foundation compiled for Darwin does not define that yet either. Are you seeing issues with it when defined?<br></p><p><br>&gt; On Mar 28, 2016, at 2:51 PM, Daniel Eggert &lt;danieleggert at me.com&gt; wrote:<br>&gt; <br>&gt; Ok.<br>&gt; <br>&gt; That test case fail on OS X, though. Should I open a bug?<br>&gt; <br>&gt; /Daniel<br>&gt; <br>&gt; <br>&gt;&gt; On Mar 28, 2016, at 22:17, Philippe Hausler &lt;phausler at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; DEPLOYMENT_ENABLE_LIBDISPATCH should not be enabled unless you specifically enable it (this is until we get libdispatch fully integrated into the build system)<br>&gt;&gt; <br>&gt;&gt;&gt; On Mar 28, 2016, at 1:14 PM, Daniel Eggert &lt;danieleggert at me.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is on OS X will everything pulled from master yesterday. I&#39;m using Xcode, and I built a toolchain from source. Same happens with the 2016-03-24 toolchain from swift.org.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; For some reason DEPLOYMENT_ENABLE_LIBDISPATCH isn&#39;t set, but I guess it should be?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; /Daniel<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 26 Mar 2016, at 22:54, Philippe Hausler &lt;phausler at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Is that on Linux? Perhaps it is because it is missing run loop interaction?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Mar 26, 2016, at 10:52 AM, Daniel Eggert &lt;danieleggert at me.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On 25 Mar 2016, at 21:15, Philippe Hausler via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I know a few of you have been waiting for this: I just pushed an initial implementation of NSOperationQueue, NSOperation and NSBlockOperation. It is worth noting that this implementaiton has a few behavioral differences between this implementation and the one implemented in objective-c. Part of this difference is due to features like QoS not being cross platform portable or KVO not yet implementable in Swift. This is very much a work-in-progress; it needs unit tests and and a bit more polish, but hopefully it is good enough to get some work started in some other places.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; - Philippe Hausler<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Great to see progress on this.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; It does fail this simple test case, though:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; func test_BlockBasedAPI() {<br>&gt;&gt;&gt;&gt;&gt;    let queue = NSOperationQueue()<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;    let expectation = expectationWithDescription(&quot;did run block&quot;)<br>&gt;&gt;&gt;&gt;&gt;    queue.addOperationWithBlock {<br>&gt;&gt;&gt;&gt;&gt;        expectation.fulfill()<br>&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;    waitForExpectationsWithTimeout(0.001, handler: nil)<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I&#39;m not sure what&#39;s going on there. I was using this on my branch for NSURLSession since it has a delegate queue that I need to run callbacks on.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; /Daniel<br>&gt;&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/79cd2bdc2074f4e69eac60743fe785fc?s=50"></div><header><strong>NSOperationQueue and friends</strong> from <string>Daniel Eggert</string> &lt;danieleggert at me.com&gt;<p>March 30, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On 28 Mar 2016, at 23:59, Philippe Hausler &lt;phausler at apple.com&gt; wrote:<br>&gt; <br>&gt; the swift-corelibs-foundation compiled for Darwin does not define that yet either. Are you seeing issues with it when defined?<br></p><p><br>When I add<br></p><p>OTHER_SWIFT_FLAGS = -DDEPLOYMENT_ENABLE_LIBDISPATCH<br></p><p>it works. So I guess that&#39;s what I should do?<br></p><p>/Daniel<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>NSOperationQueue and friends</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>March 30, 2016 at 09:00:00am</p></header><div class="content"><p>Yah, we didn’t want to enable this by default yet because it’s still a work in progress. Also, it requires dispatch on Linux, which we are still working on getting integrated into the overall swift build process.<br></p><p>- Tony<br></p><p>&gt; On Mar 30, 2016, at 4:42 AM, Daniel Eggert via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On 28 Mar 2016, at 23:59, Philippe Hausler &lt;phausler at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; the swift-corelibs-foundation compiled for Darwin does not define that yet either. Are you seeing issues with it when defined?<br>&gt; <br>&gt; <br>&gt; When I add<br>&gt; <br>&gt; OTHER_SWIFT_FLAGS = -DDEPLOYMENT_ENABLE_LIBDISPATCH<br>&gt; <br>&gt; it works. So I guess that&#39;s what I should do?<br>&gt; <br>&gt; /Daniel<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
