<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>When to use argument labels, part DEUX</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February  6, 2016 at 09:00:00pm</p></header><div class="content"><p>on Sat Feb 06 2016, plx &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I like these revisions quite a bit.<br>&gt;<br>&gt;&gt; On Feb 5, 2016, at 3:32 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Given all the awesome feedback I&#39;ve gotten on this thread, I went back<br>&gt;&gt; to the drawing board and came up with something new; I think this one<br>&gt;&gt; works.  The previously-stated goals still apply:<br>&gt;&gt; <br>&gt;&gt; * describe when and where to use argument labels<br>&gt;&gt; * require labels in many of the cases people have asked for them<br>&gt;&gt; * are understandable by humans (this means relatively simple)<br>&gt;&gt; * preserve important semantics communicated by existing APIs.<br>&gt;&gt; <br>&gt;&gt; Please keep in mind that it is a non-goal to capture considerations we<br>&gt;&gt; think have a bearing on good names (such as relatedness of parameters):<br>&gt;&gt; it&#39;s to create simple guidelines that have the right effect in nearly<br>&gt;&gt; all cases.<br>&gt;&gt; <br>&gt;&gt; A. When arguments can&#39;t be usefully distinguished from one another, none<br>&gt;&gt;   should have argument labels, e.g. min(x,y), zip(x,y,z).  <br>&gt;&gt; <br>&gt;&gt; B. Otherwise,<br>&gt;&gt; <br>&gt;&gt;  1. At the call site, a first parameter that has no argument label must<br>&gt;&gt;     form part of a grammatical phrase that starts with the basename, less<br>&gt;&gt;     any trailing nouns.  <br>&gt;&gt; <br>&gt;&gt;       print(x)<br>&gt;&gt;       a.contains(b)<br>&gt;&gt;       a.mergeWith(b)<br>&gt;&gt;       a.addGestureRecognizer(x)<br>&gt;&gt;            ^~~~~~~~~~~~~~~~~ trailing noun<br>&gt;&gt; <br>&gt;&gt;     This phrase must have the correct semantic implications, so, e.g.<br>&gt;&gt; <br>&gt;&gt;       a.dismiss(b)           // no, unless a is really dismissing b<br>&gt;&gt;       a.dismissAnimated(b)   // no, not grammatical<br>&gt;&gt;       a.dismiss(animated: b) // yes, using a label<br>&gt;&gt; <br>&gt;&gt;  2. If the first argument is part of a prepositional phrase, put the<br>&gt;&gt;     parenthesis immediately after the preposition. <br>&gt;&gt; <br>&gt;&gt;       a.encodeWith(b)<br>&gt;&gt;       a.moveFrom(b, to: c)<br>&gt;&gt; <br>&gt;&gt;     Thus, if words are required for any reason between the preposition<br>&gt;&gt;     and the first argument, they go into the first argument label.<br>&gt;&gt; <br>&gt;&gt;       a.tracksWith(mediaType: b, composer: c)<br>&gt;&gt;       a.moveTo(x: 22, y: 99)<br>&gt;&gt; <br>&gt;&gt; Notes: <br>&gt;&gt; <br>&gt;&gt; a. I would recommend prepositions other than &quot;with&quot; in nearly all<br>&gt;&gt;   cases, but that&#39;s not the point of these rules.<br>&gt;&gt; b. I can understand the aesthetic appeal of<br>&gt;&gt; <br>&gt;&gt;    a.move(from: b, to: c)<br>&gt;<br>&gt; I agree with the aesthetic and also not wanting to complicate the rules to cover it. <br>&gt;<br>&gt; I also think this is a bad example, though, b/c in practice one would<br>&gt; *hope* that such calls would look more like:<br>&gt;<br>&gt; container.move(element, from: currentIndex, to: destinationIndex)<br>&gt;<br>&gt; …and whatnot; <br></p><p>I don&#39;t understand how this one works.  In most cases the call would<br>have lots of redundancy:<br></p><p>  container.move(container[currentIndex], from: currentIndex, to: destinationIndex)<br>  ^^^^^^^^^      ^^^^^^^^^ ~~~~~~~~~~~~         ~~~~~~~~~~~~ <br></p><p>Why make the caller come up with the element value here?<br></p><p>&gt; I suspect that the `move(from:to:)` case may be getting strong<br>&gt; reactions in part b/c it’s actually an unusually-poorly-named method<br>&gt; to begin with.<br>&gt;<br>&gt; Also, as these are just guidelines, in third party code we can deviate<br>&gt; from them (at our own peril, but we can...).<br>&gt;<br>&gt;&gt; <br>&gt;&gt;   but I believe it is not a clear enough improvement to justify<br>&gt;&gt;   additional complexity in the guidelines.<br>&gt;&gt; <br>&gt;&gt; Questions:<br>&gt;&gt; <br>&gt;&gt; 1. I&#39;m not expecting these guidelines to make everybody optimally happy,<br>&gt;&gt;   all the time, but they shouldn&#39;t be harmful.  Are there any cases for<br>&gt;&gt;   which they produce results you couldn&#39;t live with?<br>&gt;&gt; <br>&gt;&gt; 2. Are there any cases where you&#39;d be confused about how to apply these<br>&gt;&gt;   guidelines?<br>&gt;<br>&gt; I do find some of the rules worded in ways that are hard to apply in<br>&gt; the presence of trailing nouns; I’m not sure the guidelines are strong<br>&gt; enough here to force the “right” outcome.<br>&gt;<br>&gt; Consider this example:<br>&gt;<br>&gt; // not-intended: <br>&gt; a.tracksWithMediaCharacteristic(b, composer: c)<br>&gt;<br>&gt; …applying our guidelines:<br>&gt;<br>&gt; - `tracks with media characteristic b` is a grammatical phrase<br></p><p>I went through a series of thoughts on this:<br></p><p>1. I&#39;m not sure it is grammatical (I&#39;ll have to consult with a<br>   linguist).  <br></p><p>2. I understand why it sounds natural: this is the somewhat misleading<br>   result of using a single-character identifier in the example.  It&#39;s like<br>   talking about a hypothetical &quot;person A&quot; and &quot;person B&quot;.  You wouldn&#39;t think<br>   &quot;Person Joe&quot;  was grammatical.<br></p><p>3. Yeah, but &quot;umbrellas with color yellow&quot; is perfectly fine, if<br>   slightly unnatural, and it has the same grammatical structure.  My<br>   wife points out that it&#39;s like something you would say in poetry to<br>   make rhyme or meter work.<br></p><p>4. Again I need to consult with a linguist, but I now have hope that it<br>   actually is grammatical, meaning the whole “skipping trailing nouns<br>   on the base name” wrinkle can be eliminated from the guidelines.<br>   Thanks!<br></p><p>&gt; - `tracks with b` is (arguably also) a grammatical phrase <br></p><p>Yes, this was the interpretation for which I introduced the “skipping<br>trailing nouns on the base name” wrinkle.<br></p><p>&gt; - `b` is “part of” the &quot;noun phrase&quot; &quot;tracks with media characteristic<br>&gt;    b&quot;<br>&gt; - `b` is “part of” the “prepositional phrase” “with media characteristic b&quot;<br></p><p>All true.<br></p><p>&gt; …and although I think this is fine under a “strict” application of the<br>&gt; guidelines—as `b` is part of a prepositional phrase, we *must* split<br>&gt; the base name after the preposition, at which point we are allowed to<br>&gt; “restore&quot; the `mediaCharacteristic:` label if we wish<br></p><p>I don&#39;t think of it as &quot;restoring.&quot;  It&#39;s simply that the phrase you&#39;re<br>encoding is &quot;tracks with media characteristic b&quot; and b is part of a<br>prepositional phrase, so you put a parenthesis after the preposition:<br></p><p>  &quot;tracks with (media characteristic b&quot;<br></p><p>and then you apply camel case and everything falls into place.<br></p><p>&gt; —I don’t know in practice that the “strict” interpretation will be<br>&gt; what people naturally opt to use.<br></p><p>Well, that&#39;s the intention of the guideline.  I think if we give people<br>examples to follow they will understand, but no matter *how* we phrase<br>the guidelines there&#39;s always the risk that some people will choose to<br>interpret them in unintended ways.<br></p><p>&gt; Taking it from the other direction, the way the guidelines are phrased<br>&gt; I worry bit that you wind up with:<br>&gt;<br>&gt; // not intended<br>&gt; a.add(subview: v) (or add(v)) // instead of `a.addSubview(v)`<br></p><p>That&#39;s allowed as the guidelines were originally posted, but with the<br>modification to the guidelines that form B1 is to be preferred over form<br>B2 when both are allowed... which I swore I posted something about in<br>this thread in response to an excellent point someone made, but now<br>can&#39;t find.  <br></p><p>Maybe I dreamt it; until I hear otherwise, *you* get credit for making<br>the excellent point :-)<br></p><p>&gt; a.add(layoutGuide: g) (or add(g)) // instead of `a.addLayoutGuide(g)`<br>&gt; a.add(gestureRecognizer: r) (or add(r)) // instead of<br>&gt; `a.addGestureRecognizer(r)`<br>&gt;<br>&gt; …b/c the rule that we should ignore such trailing nouns means those<br>&gt; are *exactly* as-grammatical as the “intended” imports (it’s “add v”<br>&gt; vs “add v”, after all, under the guidelines), so at least within the<br>&gt; proposed guidelines there’s no apparent reason to prefer the<br>&gt; `addSubview` form vis-a-vis the `add(subview:)` (or `add(_)`) form(s).<br>&gt;<br>&gt; Perhaps I just overlooked something from the non-label guidelines in<br>&gt; this response, but it’d seem the omit-needless-words would also steer<br>&gt; you towards `add()`, with or without a first-argument label.<br></p><p>It might appear to, but the words are very much needed in this case<br>because adding a gesture recognizer is not the same kind of operation as<br>adding an observer or subview.<br></p><p>&gt; So overall these guidelines seem more than adequate to resolve<br>&gt; labeling disputes if we are already dealing with &quot;well-named”<br>&gt; functions but may be a bit weak to steer naming *decisions*.<br></p><p>The guidelines in this particular thread are just trying to deal with<br>the labels .<br></p><p><br>&gt; But, for guidelines, that might still be OK?<br></p><p>Not because they&#39;re guidelines, but because of the scope of what we&#39;re<br>trying to address here.<br></p><p>&gt;&gt; <br>&gt;&gt; Thanks in advance for all your valuable input!<br>&gt;&gt; <br>&gt;&gt; P.S. Doug is presently working on generating new importer results, based<br>&gt;&gt;     on these guidelines, for your perusal.  They should be ready soon.<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; -Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ece55ca3fe50dca9c70bcd914acb48a5?s=50"></div><header><strong>When to use argument labels, part DEUX</strong> from <string>Matthew Judge</string> &lt;matthew.judge at gmail.com&gt;<p>February  7, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Feb 7, 2016, at 00:31, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; on Sat Feb 06 2016, plx &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I like these revisions quite a bit.<br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 5, 2016, at 3:32 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Given all the awesome feedback I&#39;ve gotten on this thread, I went back<br>&gt;&gt;&gt; to the drawing board and came up with something new; I think this one<br>&gt;&gt;&gt; works.  The previously-stated goals still apply:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * describe when and where to use argument labels<br>&gt;&gt;&gt; * require labels in many of the cases people have asked for them<br>&gt;&gt;&gt; * are understandable by humans (this means relatively simple)<br>&gt;&gt;&gt; * preserve important semantics communicated by existing APIs.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Please keep in mind that it is a non-goal to capture considerations we<br>&gt;&gt;&gt; think have a bearing on good names (such as relatedness of parameters):<br>&gt;&gt;&gt; it&#39;s to create simple guidelines that have the right effect in nearly<br>&gt;&gt;&gt; all cases.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; A. When arguments can&#39;t be usefully distinguished from one another, none<br>&gt;&gt;&gt;  should have argument labels, e.g. min(x,y), zip(x,y,z).  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; B. Otherwise,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1. At the call site, a first parameter that has no argument label must<br>&gt;&gt;&gt;    form part of a grammatical phrase that starts with the basename, less<br>&gt;&gt;&gt;    any trailing nouns.  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;      print(x)<br>&gt;&gt;&gt;      a.contains(b)<br>&gt;&gt;&gt;      a.mergeWith(b)<br>&gt;&gt;&gt;      a.addGestureRecognizer(x)<br>&gt;&gt;&gt;           ^~~~~~~~~~~~~~~~~ trailing noun<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    This phrase must have the correct semantic implications, so, e.g.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;      a.dismiss(b)           // no, unless a is really dismissing b<br>&gt;&gt;&gt;      a.dismissAnimated(b)   // no, not grammatical<br>&gt;&gt;&gt;      a.dismiss(animated: b) // yes, using a label<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 2. If the first argument is part of a prepositional phrase, put the<br>&gt;&gt;&gt;    parenthesis immediately after the preposition. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;      a.encodeWith(b)<br>&gt;&gt;&gt;      a.moveFrom(b, to: c)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    Thus, if words are required for any reason between the preposition<br>&gt;&gt;&gt;    and the first argument, they go into the first argument label.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;      a.tracksWith(mediaType: b, composer: c)<br>&gt;&gt;&gt;      a.moveTo(x: 22, y: 99)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Notes: <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; a. I would recommend prepositions other than &quot;with&quot; in nearly all<br>&gt;&gt;&gt;  cases, but that&#39;s not the point of these rules.<br>&gt;&gt;&gt; b. I can understand the aesthetic appeal of<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   a.move(from: b, to: c)<br>&gt;&gt; <br>&gt;&gt; I agree with the aesthetic and also not wanting to complicate the rules to cover it. <br>&gt;&gt; <br>&gt;&gt; I also think this is a bad example, though, b/c in practice one would<br>&gt;&gt; *hope* that such calls would look more like:<br>&gt;&gt; <br>&gt;&gt; container.move(element, from: currentIndex, to: destinationIndex)<br>&gt;&gt; <br>&gt;&gt; …and whatnot;<br>&gt; <br>&gt; I don&#39;t understand how this one works.  In most cases the call would<br>&gt; have lots of redundancy:<br>&gt; <br>&gt;  container.move(container[currentIndex], from: currentIndex, to: destinationIndex)<br>&gt;  ^^^^^^^^^      ^^^^^^^^^ ~~~~~~~~~~~~         ~~~~~~~~~~~~ <br>&gt; <br>&gt; Why make the caller come up with the element value here?<br>&gt; <br>&gt;&gt; I suspect that the `move(from:to:)` case may be getting strong<br>&gt;&gt; reactions in part b/c it’s actually an unusually-poorly-named method<br>&gt;&gt; to begin with.<br>&gt;&gt; <br>&gt;&gt; Also, as these are just guidelines, in third party code we can deviate<br>&gt;&gt; from them (at our own peril, but we can...).<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  but I believe it is not a clear enough improvement to justify<br>&gt;&gt;&gt;  additional complexity in the guidelines.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Questions:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1. I&#39;m not expecting these guidelines to make everybody optimally happy,<br>&gt;&gt;&gt;  all the time, but they shouldn&#39;t be harmful.  Are there any cases for<br>&gt;&gt;&gt;  which they produce results you couldn&#39;t live with?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 2. Are there any cases where you&#39;d be confused about how to apply these<br>&gt;&gt;&gt;  guidelines?<br>&gt;&gt; <br>&gt;&gt; I do find some of the rules worded in ways that are hard to apply in<br>&gt;&gt; the presence of trailing nouns; I’m not sure the guidelines are strong<br>&gt;&gt; enough here to force the “right” outcome.<br>&gt;&gt; <br>&gt;&gt; Consider this example:<br>&gt;&gt; <br>&gt;&gt; // not-intended: <br>&gt;&gt; a.tracksWithMediaCharacteristic(b, composer: c)<br>&gt;&gt; <br>&gt;&gt; …applying our guidelines:<br>&gt;&gt; <br>&gt;&gt; - `tracks with media characteristic b` is a grammatical phrase<br>&gt; <br>&gt; I went through a series of thoughts on this:<br>&gt; <br>&gt; 1. I&#39;m not sure it is grammatical (I&#39;ll have to consult with a<br>&gt;   linguist).  <br>&gt; <br>&gt; 2. I understand why it sounds natural: this is the somewhat misleading<br>&gt;   result of using a single-character identifier in the example.  It&#39;s like<br>&gt;   talking about a hypothetical &quot;person A&quot; and &quot;person B&quot;.  You wouldn&#39;t think<br>&gt;   &quot;Person Joe&quot;  was grammatical.<br>&gt; <br>&gt; 3. Yeah, but &quot;umbrellas with color yellow&quot; is perfectly fine, if<br>&gt;   slightly unnatural, and it has the same grammatical structure.  My<br>&gt;   wife points out that it&#39;s like something you would say in poetry to<br>&gt;   make rhyme or meter work.<br>&gt; <br>&gt; 4. Again I need to consult with a linguist, but I now have hope that it<br>&gt;   actually is grammatical, meaning the whole “skipping trailing nouns<br>&gt;   on the base name” wrinkle can be eliminated from the guidelines.<br>&gt;   Thanks!<br>&gt; <br>&gt;&gt; - `tracks with b` is (arguably also) a grammatical phrase<br>&gt; <br>&gt; Yes, this was the interpretation for which I introduced the “skipping<br>&gt; trailing nouns on the base name” wrinkle.<br>&gt; <br>&gt;&gt; - `b` is “part of” the &quot;noun phrase&quot; &quot;tracks with media characteristic<br>&gt;&gt;   b&quot;<br>&gt;&gt; - `b` is “part of” the “prepositional phrase” “with media characteristic b&quot;<br>&gt; <br>&gt; All true.<br>&gt; <br>&gt;&gt; …and although I think this is fine under a “strict” application of the<br>&gt;&gt; guidelines—as `b` is part of a prepositional phrase, we *must* split<br>&gt;&gt; the base name after the preposition, at which point we are allowed to<br>&gt;&gt; “restore&quot; the `mediaCharacteristic:` label if we wish<br>&gt; <br>&gt; I don&#39;t think of it as &quot;restoring.&quot;  It&#39;s simply that the phrase you&#39;re<br>&gt; encoding is &quot;tracks with media characteristic b&quot; and b is part of a<br>&gt; prepositional phrase, so you put a parenthesis after the preposition:<br>&gt; <br>&gt;  &quot;tracks with (media characteristic b&quot;<br>&gt; <br>&gt; and then you apply camel case and everything falls into place.<br>&gt; <br>&gt;&gt; —I don’t know in practice that the “strict” interpretation will be<br>&gt;&gt; what people naturally opt to use.<br>&gt; <br>&gt; Well, that&#39;s the intention of the guideline.  I think if we give people<br>&gt; examples to follow they will understand, but no matter *how* we phrase<br>&gt; the guidelines there&#39;s always the risk that some people will choose to<br>&gt; interpret them in unintended ways.<br>&gt; <br>&gt;&gt; Taking it from the other direction, the way the guidelines are phrased<br>&gt;&gt; I worry bit that you wind up with:<br>&gt;&gt; <br>&gt;&gt; // not intended<br>&gt;&gt; a.add(subview: v) (or add(v)) // instead of `a.addSubview(v)`<br>&gt; <br>&gt; That&#39;s allowed as the guidelines were originally posted, but with the<br>&gt; modification to the guidelines that form B1 is to be preferred over form<br>&gt; B2 when both are allowed... which I swore I posted something about in<br>&gt; this thread in response to an excellent point someone made, but now<br>&gt; can&#39;t find.  <br>&gt; <br>&gt; Maybe I dreamt it; until I hear otherwise, *you* get credit for making<br>&gt; the excellent point :-)<br></p><p>It was in response to my email, which I accidentally replied back only to you and not the list, so I&#39;m the only one who saw your proposed modification. (Unfortunately I noticed that the list was not there after I replied a couple more times as well.)<br></p><p>&gt;&gt; a.add(layoutGuide: g) (or add(g)) // instead of `a.addLayoutGuide(g)`<br>&gt;&gt; a.add(gestureRecognizer: r) (or add(r)) // instead of<br>&gt;&gt; `a.addGestureRecognizer(r)`<br>&gt;&gt; <br>&gt;&gt; …b/c the rule that we should ignore such trailing nouns means those<br>&gt;&gt; are *exactly* as-grammatical as the “intended” imports (it’s “add v”<br>&gt;&gt; vs “add v”, after all, under the guidelines), so at least within the<br>&gt;&gt; proposed guidelines there’s no apparent reason to prefer the<br>&gt;&gt; `addSubview` form vis-a-vis the `add(subview:)` (or `add(_)`) form(s).<br>&gt;&gt; <br>&gt;&gt; Perhaps I just overlooked something from the non-label guidelines in<br>&gt;&gt; this response, but it’d seem the omit-needless-words would also steer<br>&gt;&gt; you towards `add()`, with or without a first-argument label.<br>&gt; <br>&gt; It might appear to, but the words are very much needed in this case<br>&gt; because adding a gesture recognizer is not the same kind of operation as<br>&gt; adding an observer or subview.<br>&gt; <br>&gt;&gt; So overall these guidelines seem more than adequate to resolve<br>&gt;&gt; labeling disputes if we are already dealing with &quot;well-named”<br>&gt;&gt; functions but may be a bit weak to steer naming *decisions*.<br>&gt; <br>&gt; The guidelines in this particular thread are just trying to deal with<br>&gt; the labels .<br>&gt; <br>&gt; <br>&gt;&gt; But, for guidelines, that might still be OK?<br>&gt; <br>&gt; Not because they&#39;re guidelines, but because of the scope of what we&#39;re<br>&gt; trying to address here.<br>&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks in advance for all your valuable input!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; P.S. Doug is presently working on generating new importer results, based<br>&gt;&gt;&gt;    on these guidelines, for your perusal.  They should be ready soon.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b6a0b6562cd412f587c69d192f335161?s=50"></div><header><strong>When to use argument labels, part DEUX</strong> from <string>plx</string> &lt;plxswift at icloud.com&gt;<p>February  7, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Feb 6, 2016, at 11:31 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Sat Feb 06 2016, plx &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; I like these revisions quite a bit.<br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 5, 2016, at 3:32 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Given all the awesome feedback I&#39;ve gotten on this thread, I went back<br>&gt;&gt;&gt; to the drawing board and came up with something new; I think this one<br>&gt;&gt;&gt; works.  The previously-stated goals still apply:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * describe when and where to use argument labels<br>&gt;&gt;&gt; * require labels in many of the cases people have asked for them<br>&gt;&gt;&gt; * are understandable by humans (this means relatively simple)<br>&gt;&gt;&gt; * preserve important semantics communicated by existing APIs.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Please keep in mind that it is a non-goal to capture considerations we<br>&gt;&gt;&gt; think have a bearing on good names (such as relatedness of parameters):<br>&gt;&gt;&gt; it&#39;s to create simple guidelines that have the right effect in nearly<br>&gt;&gt;&gt; all cases.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; A. When arguments can&#39;t be usefully distinguished from one another, none<br>&gt;&gt;&gt;  should have argument labels, e.g. min(x,y), zip(x,y,z).  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; B. Otherwise,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1. At the call site, a first parameter that has no argument label must<br>&gt;&gt;&gt;    form part of a grammatical phrase that starts with the basename, less<br>&gt;&gt;&gt;    any trailing nouns.  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;      print(x)<br>&gt;&gt;&gt;      a.contains(b)<br>&gt;&gt;&gt;      a.mergeWith(b)<br>&gt;&gt;&gt;      a.addGestureRecognizer(x)<br>&gt;&gt;&gt;           ^~~~~~~~~~~~~~~~~ trailing noun<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    This phrase must have the correct semantic implications, so, e.g.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;      a.dismiss(b)           // no, unless a is really dismissing b<br>&gt;&gt;&gt;      a.dismissAnimated(b)   // no, not grammatical<br>&gt;&gt;&gt;      a.dismiss(animated: b) // yes, using a label<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 2. If the first argument is part of a prepositional phrase, put the<br>&gt;&gt;&gt;    parenthesis immediately after the preposition. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;      a.encodeWith(b)<br>&gt;&gt;&gt;      a.moveFrom(b, to: c)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    Thus, if words are required for any reason between the preposition<br>&gt;&gt;&gt;    and the first argument, they go into the first argument label.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;      a.tracksWith(mediaType: b, composer: c)<br>&gt;&gt;&gt;      a.moveTo(x: 22, y: 99)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Notes: <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; a. I would recommend prepositions other than &quot;with&quot; in nearly all<br>&gt;&gt;&gt;  cases, but that&#39;s not the point of these rules.<br>&gt;&gt;&gt; b. I can understand the aesthetic appeal of<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   a.move(from: b, to: c)<br>&gt;&gt; <br>&gt;&gt; I agree with the aesthetic and also not wanting to complicate the rules to cover it. <br>&gt;&gt; <br>&gt;&gt; I also think this is a bad example, though, b/c in practice one would<br>&gt;&gt; *hope* that such calls would look more like:<br>&gt;&gt; <br>&gt;&gt; container.move(element, from: currentIndex, to: destinationIndex)<br>&gt;&gt; <br>&gt;&gt; …and whatnot; <br>&gt; <br>&gt; I don&#39;t understand how this one works.  In most cases the call would<br>&gt; have lots of redundancy:<br>&gt; <br>&gt;  container.move(container[currentIndex], from: currentIndex, to: destinationIndex)<br>&gt;  ^^^^^^^^^      ^^^^^^^^^ ~~~~~~~~~~~~         ~~~~~~~~~~~~ <br>&gt; <br>&gt; Why make the caller come up with the element value here?<br></p><p>You’re totally right. I got myself confused and was thinking of some of delegate methods where you’re told “such-and-such wants to move $element from $oldIndex to $newIndex”, so that e.g. you can veto the move or modify the `$newIndex`.<br></p><p>None of the basic `move/exchange` calls work that way.<br></p><p>&gt; <br>&gt;&gt; I suspect that the `move(from:to:)` case may be getting strong<br>&gt;&gt; reactions in part b/c it’s actually an unusually-poorly-named method<br>&gt;&gt; to begin with.<br>&gt;&gt; <br>&gt;&gt; Also, as these are just guidelines, in third party code we can deviate<br>&gt;&gt; from them (at our own peril, but we can...).<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  but I believe it is not a clear enough improvement to justify<br>&gt;&gt;&gt;  additional complexity in the guidelines.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Questions:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1. I&#39;m not expecting these guidelines to make everybody optimally happy,<br>&gt;&gt;&gt;  all the time, but they shouldn&#39;t be harmful.  Are there any cases for<br>&gt;&gt;&gt;  which they produce results you couldn&#39;t live with?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 2. Are there any cases where you&#39;d be confused about how to apply these<br>&gt;&gt;&gt;  guidelines?<br>&gt;&gt; <br>&gt;&gt; I do find some of the rules worded in ways that are hard to apply in<br>&gt;&gt; the presence of trailing nouns; I’m not sure the guidelines are strong<br>&gt;&gt; enough here to force the “right” outcome.<br>&gt;&gt; <br>&gt;&gt; Consider this example:<br>&gt;&gt; <br>&gt;&gt; // not-intended: <br>&gt;&gt; a.tracksWithMediaCharacteristic(b, composer: c)<br>&gt;&gt; <br>&gt;&gt; …applying our guidelines:<br>&gt;&gt; <br>&gt;&gt; - `tracks with media characteristic b` is a grammatical phrase<br>&gt; <br>&gt; I went through a series of thoughts on this:<br>&gt; <br>&gt; 1. I&#39;m not sure it is grammatical (I&#39;ll have to consult with a<br>&gt;   linguist).  <br>&gt; <br>&gt; 2. I understand why it sounds natural: this is the somewhat misleading<br>&gt;   result of using a single-character identifier in the example.  It&#39;s like<br>&gt;   talking about a hypothetical &quot;person A&quot; and &quot;person B&quot;.  You wouldn&#39;t think<br>&gt;   &quot;Person Joe&quot;  was grammatical.<br>&gt; <br>&gt; 3. Yeah, but &quot;umbrellas with color yellow&quot; is perfectly fine, if<br>&gt;   slightly unnatural, and it has the same grammatical structure.  My<br>&gt;   wife points out that it&#39;s like something you would say in poetry to<br>&gt;   make rhyme or meter work.<br>&gt; <br>&gt; 4. Again I need to consult with a linguist, but I now have hope that it<br>&gt;   actually is grammatical, meaning the whole “skipping trailing nouns<br>&gt;   on the base name” wrinkle can be eliminated from the guidelines.<br>&gt;   Thanks!<br></p><p>It’s a good example of “grammaticality vs acceptability” issues; for another other example, “The Color Purple”. Even “Person Joe” is ok in the right context, but as it’s unusual and tricky to parse it seemingly requires a pause (or a comma when written), e.g. consider “The person, Joe, bit the dog, Fido”.<br></p><p>For the above example, I think there’s a strong sense that the phrasing is unusual, and the lack of articles isn’t helping; I’d order the acceptability like this: <br></p><p>tracks with the “legible” media-characteristic // &lt;- most-natural/least-unusual<br>tracks with the media-characteristic “legible”<br>tracks with media-characteristic “legible”<br>tracks with “legible” media-characteristic // &lt;- worst due to interpretational ambiguity <br></p><p>…and I think the the perceived acceptability improves substantially—and seemingly uniformly—with some more context:<br></p><p>let t = (all of a&#39;s) tracks with the “legible” media-characteristic<br>let t = (all of a&#39;s) tracks with the media-characteristic “legible”<br>let t = (all of a&#39;s) tracks with media-characteristic “legible”<br>let t = (all of a&#39;s) tracks with “legible” media-characteristic // &lt;- still the worst, for the same reason<br></p><p>…which sort of situation was why I thought it was risky to put too much weight on grammatical rules in the guidelines: I suspect that a lot of what needs to be “ungrammatical” for the guidelines will in practice be closer to “questionable”, and it can be difficult to keep one’s sense of the “questionable” calibrated; this is especially true if you spend a lot of time exposed to “odd&quot; language, e.g. English-like source code.<br></p><p>Given the perceived oddness of the trailing-noun usage, the best rule-adjustment might be “is it a complete phrase? If there’s a trailing noun, you may *either* ignore the trailing noun *or* ignore the argument—but not both—when making that decision,” except pithier. <br></p><p>&gt; <br>&gt;&gt; - `tracks with b` is (arguably also) a grammatical phrase <br>&gt; <br>&gt; Yes, this was the interpretation for which I introduced the “skipping<br>&gt; trailing nouns on the base name” wrinkle.<br>&gt; <br>&gt;&gt; - `b` is “part of” the &quot;noun phrase&quot; &quot;tracks with media characteristic<br>&gt;&gt;   b&quot;<br>&gt;&gt; - `b` is “part of” the “prepositional phrase” “with media characteristic b&quot;<br>&gt; <br>&gt; All true.<br>&gt; <br>&gt;&gt; …and although I think this is fine under a “strict” application of the<br>&gt;&gt; guidelines—as `b` is part of a prepositional phrase, we *must* split<br>&gt;&gt; the base name after the preposition, at which point we are allowed to<br>&gt;&gt; “restore&quot; the `mediaCharacteristic:` label if we wish<br>&gt; <br>&gt; I don&#39;t think of it as &quot;restoring.&quot;  It&#39;s simply that the phrase you&#39;re<br>&gt; encoding is &quot;tracks with media characteristic b&quot; and b is part of a<br>&gt; prepositional phrase, so you put a parenthesis after the preposition:<br>&gt; <br>&gt;  &quot;tracks with (media characteristic b&quot;<br>&gt; <br>&gt; and then you apply camel case and everything falls into place.<br>&gt; <br>&gt;&gt; —I don’t know in practice that the “strict” interpretation will be<br>&gt;&gt; what people naturally opt to use.<br>&gt; <br>&gt; Well, that&#39;s the intention of the guideline.  I think if we give people<br>&gt; examples to follow they will understand, but no matter *how* we phrase<br>&gt; the guidelines there&#39;s always the risk that some people will choose to<br>&gt; interpret them in unintended ways.<br>&gt; <br>&gt;&gt; Taking it from the other direction, the way the guidelines are phrased<br>&gt;&gt; I worry bit that you wind up with:<br>&gt;&gt; <br>&gt;&gt; // not intended<br>&gt;&gt; a.add(subview: v) (or add(v)) // instead of `a.addSubview(v)`<br>&gt; <br>&gt; That&#39;s allowed as the guidelines were originally posted, but with the<br>&gt; modification to the guidelines that form B1 is to be preferred over form<br>&gt; B2 when both are allowed... which I swore I posted something about in<br>&gt; this thread in response to an excellent point someone made, but now<br>&gt; can&#39;t find.  <br>&gt; <br>&gt; Maybe I dreamt it; until I hear otherwise, *you* get credit for making<br>&gt; the excellent point :-)<br>&gt; <br>&gt;&gt; a.add(layoutGuide: g) (or add(g)) // instead of `a.addLayoutGuide(g)`<br>&gt;&gt; a.add(gestureRecognizer: r) (or add(r)) // instead of<br>&gt;&gt; `a.addGestureRecognizer(r)`<br>&gt;&gt; <br>&gt;&gt; …b/c the rule that we should ignore such trailing nouns means those<br>&gt;&gt; are *exactly* as-grammatical as the “intended” imports (it’s “add v”<br>&gt;&gt; vs “add v”, after all, under the guidelines), so at least within the<br>&gt;&gt; proposed guidelines there’s no apparent reason to prefer the<br>&gt;&gt; `addSubview` form vis-a-vis the `add(subview:)` (or `add(_)`) form(s).<br>&gt;&gt; <br>&gt;&gt; Perhaps I just overlooked something from the non-label guidelines in<br>&gt;&gt; this response, but it’d seem the omit-needless-words would also steer<br>&gt;&gt; you towards `add()`, with or without a first-argument label.<br>&gt; <br>&gt; It might appear to, but the words are very much needed in this case<br>&gt; because adding a gesture recognizer is not the same kind of operation as<br>&gt; adding an observer or subview.<br>&gt; <br>&gt;&gt; So overall these guidelines seem more than adequate to resolve<br>&gt;&gt; labeling disputes if we are already dealing with &quot;well-named”<br>&gt;&gt; functions but may be a bit weak to steer naming *decisions*.<br>&gt; <br>&gt; The guidelines in this particular thread are just trying to deal with<br>&gt; the labels .<br>&gt; <br>&gt; <br>&gt;&gt; But, for guidelines, that might still be OK?<br>&gt; <br>&gt; Not because they&#39;re guidelines, but because of the scope of what we&#39;re<br>&gt; trying to address here.<br>&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks in advance for all your valuable input!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; P.S. Doug is presently working on generating new importer results, based<br>&gt;&gt;&gt;    on these guidelines, for your perusal.  They should be ready soon.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160207/4105b598/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
