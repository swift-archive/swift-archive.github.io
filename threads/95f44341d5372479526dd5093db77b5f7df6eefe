<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Last second] Precedence of nil-coalescing operator seems too low</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>September  3, 2016 at 10:00:00pm</p></header><div class="content"><p>Given: `let x = Optional(3)` then<br>`let y = 5 + x ?? 2` will not compile<br>but <br>`let y = 5 + (x ?? 2)` will.<br></p><p>Should NilCoalescingPrecedence be raised? The current operator precedence chain is:<br></p><p>BitwiseShiftPrecedence &gt; MultiplicationPrecedence &gt; AdditionPrecedence &gt; RangeFormationPrecedence &gt; CastingPrecedence &gt; NilCoalescingPrecedence &gt; ComparisonPrecedence &gt; LogicalConjunctionPrecedence &gt; LogicalDisjunctionPrecedence &gt; TernaryPrecedence &gt; AssignmentPrecedence &gt; FunctionArrowPrecedence &gt; [nothing]<br></p><p>It seems to me that `NilCoalescingPrecedence` should probably be higher than `MultiplicationPrecedence` and possibly higher `BitwiseShiftPrecedence` as its job is to produce an unwrapped value that can then be operated upon.<br></p><p>I think CastingPrecedence should be even higher because<br>`expression as? T ?? fallback value`<br>should be parsed as<br>`(expression as? T) ?? (fallback value)`<br></p><p>I apologize profusely because I know this is beyond last minute,<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160903/95f4eefe/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Last second] Precedence of nil-coalescing operator seems too low</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>September  3, 2016 at 09:00:00pm</p></header><div class="content"><p>Perhaps-conversely, what should this code do?<br></p><p>    let nextIndex = foundIndex ?? lastIndex + 1<br></p><p>Jacob<br></p><p>On Sat, Sep 3, 2016 at 9:05 PM, Erica Sadun via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Given: `let x = Optional(3)` then<br>&gt;<br>&gt; `let y = 5 + x ?? 2` will not compile<br>&gt;<br>&gt; but<br>&gt;<br>&gt; `let y = 5 + (x ?? 2)` will.<br>&gt;<br>&gt;<br>&gt; Should NilCoalescingPrecedence be raised? The current operator precedence<br>&gt; chain is:<br>&gt;<br>&gt; BitwiseShiftPrecedence &gt; MultiplicationPrecedence &gt; AdditionPrecedence &gt;<br>&gt; RangeFormationPrecedence &gt; CastingPrecedence &gt; NilCoalescingPrecedence &gt;<br>&gt; ComparisonPrecedence &gt; LogicalConjunctionPrecedence &gt;<br>&gt; LogicalDisjunctionPrecedence &gt; TernaryPrecedence &gt; AssignmentPrecedence &gt;<br>&gt; FunctionArrowPrecedence &gt; [nothing]<br>&gt;<br>&gt;<br>&gt; It seems to me that `NilCoalescingPrecedence` should probably be higher<br>&gt; than `MultiplicationPrecedence` and possibly higher `<br>&gt; BitwiseShiftPrecedence` as its job is to produce an unwrapped value that<br>&gt; can then be operated upon.<br>&gt;<br>&gt; I think CastingPrecedence should be even higher because<br>&gt;<br>&gt; `expression as? T ?? fallback value`<br>&gt;<br>&gt; should be parsed as<br>&gt;<br>&gt; `(expression as? T) ?? (fallback value)`<br>&gt;<br>&gt;<br>&gt; I apologize profusely because I know this is beyond last minute,<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160903/d4cad221/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Last second] Precedence of nil-coalescing operator seems too low</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>September  3, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On Sep 3, 2016, at 10:15 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt; Perhaps-conversely, what should this code do?<br>&gt; <br>&gt;     let nextIndex = foundIndex ?? lastIndex + 1<br>&gt; <br>&gt; Jacob<br></p><p>It&#39;s a good counter example. And there&#39;s no optional-associative option.<br></p><p>-- E<br></p><p>&gt; <br>&gt; On Sat, Sep 3, 2016 at 9:05 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Given: `let x = Optional(3)` then<br>&gt; `let y = 5 + x ?? 2` will not compile<br>&gt; but <br>&gt; `let y = 5 + (x ?? 2)` will.<br>&gt; <br>&gt; Should NilCoalescingPrecedence be raised? The current operator precedence chain is:<br>&gt; <br>&gt; BitwiseShiftPrecedence &gt; MultiplicationPrecedence &gt; AdditionPrecedence &gt; RangeFormationPrecedence &gt; CastingPrecedence &gt; NilCoalescingPrecedence &gt; ComparisonPrecedence &gt; LogicalConjunctionPrecedence &gt; LogicalDisjunctionPrecedence &gt; TernaryPrecedence &gt; AssignmentPrecedence &gt; FunctionArrowPrecedence &gt; [nothing]<br>&gt; <br>&gt; It seems to me that `NilCoalescingPrecedence` should probably be higher than `MultiplicationPrecedence` and possibly higher `BitwiseShiftPrecedence` as its job is to produce an unwrapped value that can then be operated upon.<br>&gt; <br>&gt; I think CastingPrecedence should be even higher because<br>&gt; `expression as? T ?? fallback value`<br>&gt; should be parsed as<br>&gt; `(expression as? T) ?? (fallback value)`<br>&gt; <br>&gt; I apologize profusely because I know this is beyond last minute,<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160903/f79e164d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Last second] Precedence of nil-coalescing operator seems too low</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>September  4, 2016 at 11:00:00pm</p></header><div class="content"><p>Now you&#39;ve gotten me thinking about precedence of other operators too.<br></p><p>Since ?? is prone to causing confusion in either direction (cf. your<br>example and my example), it could be put in its own group whose relation to<br>the numeric operators is intentionally undefined (thus requiring parens).<br></p><p>I don&#39;t know about other folks, but I&#39;ll certainly get confused if &amp; and |<br>and ^ are mixed. What if we removed their relation to each other (requiring<br>parens when mixing them)?<br></p><p>[image: Inline image 1]<br></p><p>For comparison (ha), here&#39;s what we have today:<br></p><p>[image: Inline image 1]<br></p><p>Jacob<br></p><p>On Sat, Sep 3, 2016 at 10:20 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br></p><p>&gt; On Sep 3, 2016, at 10:15 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; Perhaps-conversely, what should this code do?<br>&gt;<br>&gt;     let nextIndex = foundIndex ?? lastIndex + 1<br>&gt;<br>&gt; Jacob<br>&gt;<br>&gt;<br>&gt; It&#39;s a good counter example. And there&#39;s no optional-associative option.<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt;<br>&gt; On Sat, Sep 3, 2016 at 9:05 PM, Erica Sadun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Given: `let x = Optional(3)` then<br>&gt;&gt;<br>&gt;&gt; `let y = 5 + x ?? 2` will not compile<br>&gt;&gt;<br>&gt;&gt; but<br>&gt;&gt;<br>&gt;&gt; `let y = 5 + (x ?? 2)` will.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Should NilCoalescingPrecedence be raised? The current operator<br>&gt;&gt; precedence chain is:<br>&gt;&gt;<br>&gt;&gt; BitwiseShiftPrecedence &gt; MultiplicationPrecedence &gt; AdditionPrecedence &gt;<br>&gt;&gt; RangeFormationPrecedence &gt; CastingPrecedence &gt; NilCoalescingPrecedence &gt;<br>&gt;&gt; ComparisonPrecedence &gt; LogicalConjunctionPrecedence &gt;<br>&gt;&gt; LogicalDisjunctionPrecedence &gt; TernaryPrecedence &gt; AssignmentPrecedence &gt;<br>&gt;&gt; FunctionArrowPrecedence &gt; [nothing]<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; It seems to me that `NilCoalescingPrecedence` should probably be higher<br>&gt;&gt; than `MultiplicationPrecedence` and possibly higher `<br>&gt;&gt; BitwiseShiftPrecedence` as its job is to produce an unwrapped value that<br>&gt;&gt; can then be operated upon.<br>&gt;&gt;<br>&gt;&gt; I think CastingPrecedence should be even higher because<br>&gt;&gt;<br>&gt;&gt; `expression as? T ?? fallback value`<br>&gt;&gt;<br>&gt;&gt; should be parsed as<br>&gt;&gt;<br>&gt;&gt; `(expression as? T) ?? (fallback value)`<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I apologize profusely because I know this is beyond last minute,<br>&gt;&gt;<br>&gt;&gt; -- E<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160904/86551167/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: current-precedence.png<br>Type: image/png<br>Size: 84116 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160904/86551167/attachment.png&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: proposed-precedence.png<br>Type: image/png<br>Size: 152283 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160904/86551167/attachment-0001.png&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
