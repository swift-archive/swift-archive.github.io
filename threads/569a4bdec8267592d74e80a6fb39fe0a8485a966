<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] SE-0139: Bridge Numeric Types to NSNumber and Cocoa Structs to NSValue</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>September  1, 2016 at 04:00:00pm</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of SE-0139 &quot;Bridge Numeric Types to NSNumber and Cocoa Structs to NSValue&quot; begins now and runs through September 7, 2016. The proposal is available here:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0139-bridge-nsnumber-and-nsvalue.md<br>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br></p><p>Proposal link:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0139-bridge-nsnumber-and-nsvalue.md<br>Reply text<br></p><p>Other replies<br> &lt;https://github.com/apple/swift-evolution/blob/master/process.md#what-goes-into-a-review-1&gt;What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>What is your evaluation of the proposal?<br>Is the problem being addressed significant enough to warrant a change to Swift?<br>Does this proposal fit well with the feel and direction of Swift?<br>If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>More information about the Swift evolution process is available at<br></p><p>https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>Thank you,<br></p><p>-Doug Gregor<br></p><p>Review Manager<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution-announce/attachments/20160901/569aa966/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c72bd3ba434ad651a5d8d3d79f2d4c49?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0139: Bridge Numeric Types to NSNumber and Cocoa Structs to NSValue</strong> from <string>Scott James Remnant</string> &lt;scott at netsplit.com&gt;<p>September  2, 2016 at 10:00:00am</p></header><div class="content"><p>üëç <br></p><p>Makes ObjC APIs even easier to work with, without any cost to working with Swift APIs<br></p><p><br>&gt; On Sep 1, 2016, at 4:58 PM, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0139 &quot;Bridge Numeric Types to NSNumber and Cocoa Structs to NSValue&quot; begins now and runs through September 7, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0139-bridge-nsnumber-and-nsvalue.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0139-bridge-nsnumber-and-nsvalue.md&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0139-bridge-nsnumber-and-nsvalue.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0139-bridge-nsnumber-and-nsvalue.md&gt;<br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt;  &lt;https://github.com/apple/swift-evolution/blob/master/process.md#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; What is your evaluation of the proposal?<br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; Thank you,<br>&gt; <br>&gt; -Doug Gregor<br>&gt; <br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160902/70df5c1d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0139: Bridge Numeric Types to NSNumber and Cocoa Structs to NSValue</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>September  4, 2016 at 10:00:00am</p></header><div class="content"><p>+1<br>I like this especially considering that 64 bit iOS has led to more boxing<br>to `NSNumber` for convenience<br></p><p>On Fri, Sep 2, 2016 at 1:23 PM, Scott James Remnant via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; üëç<br>&gt;<br>&gt; Makes ObjC APIs even easier to work with, without any cost to working with<br>&gt; Swift APIs<br>&gt;<br>&gt;<br>&gt; On Sep 1, 2016, at 4:58 PM, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt;<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of SE-0139 &quot;Bridge Numeric Types to NSNumber and Cocoa Structs<br>&gt; to NSValue&quot; begins now and runs through September 7, 2016. The proposal is<br>&gt; available here:<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/<br>&gt; proposals/0139-bridge-nsnumber-and-nsvalue.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager. When replying, please try to keep the proposal link at the<br>&gt; top of the message:<br>&gt;<br>&gt; Proposal link:<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/<br>&gt; proposals/0139-bridge-nsnumber-and-nsvalue.md<br>&gt;<br>&gt; Reply text<br>&gt;<br>&gt; Other replies<br>&gt;<br>&gt;<br>&gt; &lt;https://github.com/apple/swift-evolution/blob/master/process.md#what-goes-into-a-review-1&gt;What<br>&gt; goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt;    - What is your evaluation of the proposal?<br>&gt;    - Is the problem being addressed significant enough to warrant a<br>&gt;    change to Swift?<br>&gt;    - Does this proposal fit well with the feel and direction of Swift?<br>&gt;    - If you have used other languages or libraries with a similar<br>&gt;    feature, how do you feel that this proposal compares to those?<br>&gt;    - How much effort did you put into your review? A glance, a quick<br>&gt;    reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Doug Gregor<br>&gt;<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160904/6a6b6458/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e95942f1fe843f007ef5430b9acff78b?s=50"></div><header><strong>[Review] SE-0139: Bridge Numeric Types to NSNumber and Cocoa Structs to NSValue</strong> from <string>Jaden Geller</string> &lt;jaden.geller at gmail.com&gt;<p>September  6, 2016 at 07:00:00pm</p></header><div class="content"><p>* What is your evaluation of the proposal?<br></p><p>I majorly support this proposal, particularly the completion of numeric bridging. I would almost regarding the existing behavior as a bug. As a user, I was very surprised that `Int8` and friends did not bridge to `NSNumber`, and it has actually been the source of bugs in production code for us. Prior to import `id` as `Any`, the lack of bridging here was inconvenient but not likely to cause bugs since Swift provided a compile-time error when an `Int8` was passed in an `AnyObject` context. Now that these imported function signatures are annotated `Any`, it is very easy to accidentally pass an opaque `Int8` into them. It seems utterly inconsistent to not bridge these other numeric types. It would be unfortunate if we kept it this way simply due to historic reasons.<br></p><p>I&#39;m less qualified to talk about the `NSValue` bridging, but in my precursory thoughts it does seem like a decent idea. It seems like it would make the most sense to bridge all `objc_boxable`, but it&#39;s not immediately apparent to me that this won&#39;t clash with other custom bridging behavior we might want to give certain types in the future.<br></p><p>* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes. Though it&#39;s clear that `Int8` isn&#39;t bridged to `NSNumber` when you write `Int8(x) as NSNumber` (since you get a compile-time error), it is not always quite this apparent. For example, when casting from `Any` to a numeric type, you must force cast with `as!`. Because of this, it is easy to write `num as! Int8` and not realize that, if `num` is an `NSNumber` this code will not compile. Given that `Int` does bridge from `NSNumber`, a reasonable Swift programmer might easily make this mistake.<br></p><p>In a framework I work on, we had a crash in our API when users used `Int8` and friends in as the generic argument of a function. We tested it on `Int`, `Float`, and a whole bunch of other types, but overlooked the lack of numeric bridging for some of these types leading to user crashes. In order to work around this bug, we had to define a `CustomObjectiveCBridgeable` protocol that defines these bridges, and explicitly call a custom bridging function whenever we get a value from Objective-C or pass a value to Objective-C from Swift. We&#39;re still discovering bugs in our codebase due to this issue. It&#39;s extremely easy to overlook a place that such a conversion is necessary when you provide a dynamic framework.<br></p><p>* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Definitely. In my understanding, Objective-C interop is a major feature of Swift. The Swift team has done a fantastic job improving this since the first release of Swift, and this seems like a logical, incremental step in the same direction.<br></p><p>* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I&#39;m not familiar with other languages with such comprehensive bridging features as Swift. That said, this feature is nearly identical to the already-existing `Int` to `NSNumber` bridging feature present in Swift. Like I said before, it doesn&#39;t seem so much like an enhancement as it does a bug fix.<br></p><p>* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I&#39;ve spent a significant number of hours dealings with issues causes by the lack of bridging here. I&#39;ve discussed this problem and workarounds with other engineers, and I&#39;ve filed bug reports related to these issues.<br></p><p>‚Äî<br></p><p>I&#39;m really excited about this proposal, so big thanks for those who&#39;ve spent time on it!<br>Jaden Geller<br></p><p>&gt; On Sep 1, 2016, at 4:58 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0139 &quot;Bridge Numeric Types to NSNumber and Cocoa Structs to NSValue&quot; begins now and runs through September 7, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0139-bridge-nsnumber-and-nsvalue.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0139-bridge-nsnumber-and-nsvalue.md&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0139-bridge-nsnumber-and-nsvalue.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0139-bridge-nsnumber-and-nsvalue.md&gt;<br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt;  &lt;https://github.com/apple/swift-evolution/blob/master/process.md#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; What is your evaluation of the proposal?<br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; Thank you,<br>&gt; <br>&gt; -Doug Gregor<br>&gt; <br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160906/f7c5a034/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>[Review] SE-0139: Bridge Numeric Types to NSNumber and Cocoa Structs to NSValue</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>September 11, 2016 at 04:00:00am</p></header><div class="content"><p>I know the review is over, but I just wanted to chime in with something: does this extend to types which are RawRepresentable as numeric types, too? <br></p><p>For example, Cocoa and UIKit have several option-set types which must be placed in dictionaries. Just now I tried to use UIFontDescriptorSymbolicTraits and it crashed at runtime (radar://28244679 &lt;radar://28244679&gt;).<br></p><p>I consider the current behaviour extremely surprising and definitely a bug.<br></p><p>Karl<br></p><p><br>&gt; On 2 Sep 2016, at 01:58, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0139 &quot;Bridge Numeric Types to NSNumber and Cocoa Structs to NSValue&quot; begins now and runs through September 7, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0139-bridge-nsnumber-and-nsvalue.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0139-bridge-nsnumber-and-nsvalue.md&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0139-bridge-nsnumber-and-nsvalue.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0139-bridge-nsnumber-and-nsvalue.md&gt;<br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt;  &lt;https://github.com/apple/swift-evolution/blob/master/process.md#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; What is your evaluation of the proposal?<br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; Thank you,<br>&gt; <br>&gt; -Doug Gregor<br>&gt; <br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160911/0472b75f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Review] SE-0139: Bridge Numeric Types to NSNumber and Cocoa Structs to NSValue</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>September 12, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Sep 10, 2016, at 7:52 PM, Karl via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I know the review is over, but I just wanted to chime in with something: does this extend to types which are RawRepresentable as numeric types, too? <br>&gt; <br>&gt; For example, Cocoa and UIKit have several option-set types which must be placed in dictionaries. Just now I tried to use UIFontDescriptorSymbolicTraits and it crashed at runtime (radar://28244679).<br>&gt; <br>&gt; I consider the current behaviour extremely surprising and definitely a bug.<br></p><p>No, that would require separate consideration. It does make sense to me for NS_ENUMs and NS_OPTIONS types from Cocoa to bridge this way, though.<br></p><p>-Joe<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
