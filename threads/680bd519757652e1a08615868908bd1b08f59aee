<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0023 API Design Guidelines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February  1, 2016 at 03:00:00pm</p></header><div class="content"><p>on Mon Feb 01 2016, Ricardo Parada &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; supportsVideoMirroring -&gt; isVideoMirroringSupported<br>&gt;&gt; supportsVideoOrientation -&gt; isVideoOrientationSupported<br>&gt;<br>&gt; IMHO, for this particular case, I think the ones on the left read more<br>&gt; as assertions about the receiver than the alternatives on the right.<br>&gt; I may be wrong, but I did not interpret this guideline as having to<br>&gt; prefix boolean properties with is.  I think these two would be fine as<br>&gt; supportVideMirroring and supportVideoOrientation as they read as<br>&gt; assertions about the receiver.<br></p><p>+1 to all of that.<br></p><p>&gt;<br>&gt;&gt; On Feb 1, 2016, at 2:51 AM, Colin Cornaby via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I’m still processing all my thoughts on this and might have a<br>&gt;&gt; thought or two on the Obj-C bridging thread as well, but I had a<br>&gt;&gt; question about one specific style guideline:<br>&gt;&gt; <br>&gt;&gt;&gt; Uses &lt;&gt; of nonmutating Boolean methods and properties should read<br>&gt;&gt;&gt; as assertions about the receiver, e.g. x.isEmpty,<br>&gt;&gt;&gt; line1.intersects(line2)<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I have really mixed feelings on this, and was wondering what the<br>&gt;&gt; rationale was (maybe to convince me it’s a good idea.) To me, this<br>&gt;&gt; seems like adding extra language to a proposal that is pretty good<br>&gt;&gt; at removing now unnecessary language. It also seems unhelpful to me<br>&gt;&gt; as an API user and writer because in an alphabetical list, related<br>&gt;&gt; functionality (like a “playing” nonmutating property and a “play”<br>&gt;&gt; function, or a “playRate” mutable property) are all going to be<br>&gt;&gt; moved away from each other in a list. I acknowledge that Xcode’s<br>&gt;&gt; autocomplete is getting better though in that regard, and that most<br>&gt;&gt; documentation is grouped. But I’m not a fan of the crowding of “is”<br>&gt;&gt; functions that is going to happen.<br>&gt;&gt; <br>&gt;&gt; In reviewing AVFoundation specifically (but I’m going through the<br>&gt;&gt; others as well), I’m not sure this is an improvement either.<br>&gt;&gt; <br>&gt;&gt; Mildly worse, makes it sound like a function instead of a property:<br>&gt;&gt; exposurePointOfInterestSupported -&gt; isExposurePointOfInterestSupported<br>&gt;&gt; <br>&gt;&gt; Same sort of thing, I’m not sure this is cleaner:<br>&gt;&gt; supportsVideoMirroring -&gt; isVideoMirroringSupported<br>&gt;&gt; <br>&gt;&gt; This one almost sounds to me like the function meaning is being tweaked:<br>&gt;&gt; videoMirrored -&gt; isVideoMirrored<br>&gt;&gt; <br>&gt;&gt; The name of this one now sounds like it is supposed to have an<br>&gt;&gt; argument to check to see if a specific video orientation is<br>&gt;&gt; supported (although it is true that the original property wasn’t<br>&gt;&gt; named great either):<br>&gt;&gt; supportsVideoOrientation -&gt; isVideoOrientationSupported<br>&gt;&gt; <br>&gt;&gt; Like I said, I’d be willing to be talked into this, but at this<br>&gt;&gt; point I’m just really curious what the justification is. For simple<br>&gt;&gt; cases this seems to work well, but I’m really not enthused for what<br>&gt;&gt; this does to more complex or domain specific property names. I’m<br>&gt;&gt; willing to call this “unease after doing Obj-C too long”, but I’d<br>&gt;&gt; like to understand why the Swift team feels this is better.<br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 22, 2016, at 1:02 PM, Douglas Gregor via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The review of SE-0023&quot;API Design Guidelines&quot; begins now and runs<br>&gt;&gt;&gt; through January 31, 2016. The proposal is available here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md<br>&gt;&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md&gt;<br>&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All<br>&gt;&gt;&gt; reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to<br>&gt;&gt;&gt; the review manager. When replying, please try to keep the proposal<br>&gt;&gt;&gt; link at the top of the message:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Proposal link:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md<br>&gt;&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md&gt;<br>&gt;&gt;&gt; Reply text<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Other replies<br>&gt;&gt;&gt;  &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What<br>&gt;&gt;&gt; goes into a review?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The goal of the review process is to improve the proposal under<br>&gt;&gt;&gt; review through constructive criticism and, eventually, determine<br>&gt;&gt;&gt; the direction of Swift. When writing your review, here are some<br>&gt;&gt;&gt; questions you might want to answer in your review:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What is your evaluation of the proposal?<br>&gt;&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; If you have used other languages or libraries with a similar<br>&gt;&gt;&gt; feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt; How much effort did you put into your review? A glance, a quick<br>&gt;&gt;&gt; reading, or an in-depth study?<br>&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Doug Gregor<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
