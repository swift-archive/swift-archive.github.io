<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d82ae2358637a4680638eb4218c1e64a?s=50"></div><header><strong>Ability to pack, order and align certain types of Structs (like in C)</strong> from <string>hitstergtd+swiftevo at gmail.com</string> &lt;hitstergtd+swiftevo at gmail.com&gt;<p>April  7, 2016 at 08:00:00pm</p></header><div class="content"><p>To the community:<br></p><p>Neither am I a compiler/language design expert nor have I previously<br>written a proposal to that effect, so I apologise if I have<br>trivialised the matter especially with regard to other parts of Swift<br>or if some of it already exists. I am also aware that what I&#39;ve<br>proposed herein maybe possible through alternate means. However, the<br>aim of this is to make it a first-class feature in Swift itself. For<br>those unfamiliar with what is being requested, please see [2], [5] and [8].<br></p><p>I have also filed this as a language feature request at [7].<br></p><p>Proposal:<br>* As a Swift language user, I would like the ability to specify<br>packing, order and alignment for certain type of Structs and their<br>members.<br>* The characteristics requested are: packing, padding, ordering and<br>byte-level alignment of Struct elements<br>* All the requested characteristics would work similarly to the way they do in C<br>* Ideally, this should be achieved in a way that makes it simple to<br>use with appropriate syntactic sugar<br></p><p>Potential Preconditions (for the feature):<br>* Only Structs with certain, basic named types such as Int, UInt, etc.?<br>* Allow Enums and Tuples as well, so long as only basic named types<br>are allowed within them?<br>* No other nested types unless they meet the above criteria?<br>* Type aliased names can be used within the Struct so long as they<br>meet the above preconditions?<br></p><p>Alternatives:<br>* Augment and integrate something similar to [1], which mimics the<br>Python struct module [6]<br>* Recommend interfacing with C, for any language user who requires the<br>aforementioned characteristics; but this route would devoid the<br>language of self-sufficiency from a systems programming aspect.<br></p><p>Ultimately even if the above is deemed totally undesirable (I hope<br>not), at the very least, I hope it stirs discussion about being able<br>to use Swift as a systems programming language and how we could<br>possibly move toward that direction.<br></p><p>Thanks for your consideration!<br></p><p>For reference:<br></p><p>[1] https://github.com/nst/BinUtils/<br>[2] http://stackoverflow.com/questions/24139149/how-do-i-create-a-packed-data-structure-in-swift<br>[3] http://stackoverflow.com/questions/13688625/how-to-declare-packed-struct-without-padding-for-llvm<br>[4] https://llvm.org/svn/llvm-project/cfe/branches/eh-experiment/test/Sema/struct-packed-align.c<br>[5] http://www.catb.org/esr/structure-packing/<br>[6] https://docs.python.org/3/library/struct.html<br>[7] https://bugs.swift.org/browse/SR-1134<br>[8] https://mikeash.com/pyblog/friday-qa-2014-08-01-exploring-swift-memory-layout-part-ii.html<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Ability to pack, order and align certain types of Structs (like in C)</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>April  7, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On Apr 7, 2016, at 12:28 PM, hitstergtd+swiftevo--- via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; To the community:<br>&gt; <br>&gt; Neither am I a compiler/language design expert nor have I previously<br>&gt; written a proposal to that effect, so I apologise if I have<br>&gt; trivialised the matter especially with regard to other parts of Swift<br>&gt; or if some of it already exists. I am also aware that what I&#39;ve<br>&gt; proposed herein maybe possible through alternate means. However, the<br>&gt; aim of this is to make it a first-class feature in Swift itself. For<br>&gt; those unfamiliar with what is being requested, please see [2], [5] and [8].<br>&gt; <br>&gt; I have also filed this as a language feature request at [7].<br></p><p>Yes, this would be a great thing to have, but it requires significant design and implementation work, so I’m afraid it is out of scope for Swift 3.  In the meantime, a lame workaround is that you can define your struct in C and import it.  Swift will honor the layout of the C type.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ea949e5f3459ebaf072fa00b682cb72a?s=50"></div><header><strong>Ability to pack, order and align certain types of Structs (like in C)</strong> from <string>Hitster GTD</string> &lt;hitstergtd at gmail.com&gt;<p>April  8, 2016 at 03:00:00pm</p></header><div class="content"><p>Chris,<br></p><p>Thanks for supporting it in principle. I understand that it is out of<br>scope for Swift 3 and that using C is one of the only decent<br>workarounds at the moment.<br></p><p>However, since you concur with what is being requested, would it be OK to:<br></p><p>(a) Draft a summary proposal and commit it to the swift-evolution@<br>repository, perhaps under &quot;Other Proposals&quot; or &quot;Post v3&quot;? and/or<br>(b) Add some notes under docs/, perhaps in docs/LibraryEvolution.rst<br>regarding this topic?<br></p><p>I am uncertain as to what happens after Swift 3 since there don&#39;t seem<br>to be any guidelines for that; hopefully the above would ensure that<br>it isn&#39;t forgotten. :)<br></p><p>On 8 April 2016 at 07:01, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;<br>&gt;&gt; On Apr 7, 2016, at 12:28 PM, hitstergtd+swiftevo--- via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; To the community:<br>&gt;&gt;<br>&gt;&gt; Neither am I a compiler/language design expert nor have I previously<br>&gt;&gt; written a proposal to that effect, so I apologise if I have<br>&gt;&gt; trivialised the matter especially with regard to other parts of Swift<br>&gt;&gt; or if some of it already exists. I am also aware that what I&#39;ve<br>&gt;&gt; proposed herein maybe possible through alternate means. However, the<br>&gt;&gt; aim of this is to make it a first-class feature in Swift itself. For<br>&gt;&gt; those unfamiliar with what is being requested, please see [2], [5] and [8].<br>&gt;&gt;<br>&gt;&gt; I have also filed this as a language feature request at [7].<br>&gt;<br>&gt; Yes, this would be a great thing to have, but it requires significant design and implementation work, so I’m afraid it is out of scope for Swift 3.  In the meantime, a lame workaround is that you can define your struct in C and import it.  Swift will honor the layout of the C type.<br>&gt;<br>&gt; -Chris<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
