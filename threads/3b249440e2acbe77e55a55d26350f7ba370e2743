<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>June 21, 2016 at 05:00:00pm</p></header><div class="content"><p>on Tue Jun 21 2016, Brandon Knope &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Maybe this is flawed, but I think it is hard to argue that the \ is<br>&gt; easy to type when there are far more usable alternatives.<br></p><p>While I agree with you, readability is *so* much more important than<br>typeability that I think this line of argument doesn&#39;t count for much.<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7559ac465b184ec777f29d37c0e4b374?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Michael Peternell</string> &lt;michael.peternell at gmx.at&gt;<p>June 22, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; Am 22.06.2016 um 02:11 schrieb Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; <br>&gt; on Tue Jun 21 2016, Brandon Knope &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; Maybe this is flawed, but I think it is hard to argue that the \ is<br>&gt;&gt; easy to type when there are far more usable alternatives.<br>&gt; <br>&gt; While I agree with you, readability is *so* much more important than<br>&gt; typeability that I think this line of argument doesn&#39;t count for much.<br></p><p>I agree. As a user of a German keyboard, &quot;\&quot; is written as Alt-Shift-7 (there isn&#39;t even a label on the keyboard, you just have to know this. The &quot;7&quot; key says &quot;7&quot; and &quot;/&quot; - I&#39;m talking about the German Mac Keyboard, the standalone version of the Mac Mini and the Notebook Version of Macbook Air/Pro are the same in this regard.), and &quot;$&quot; is written as Shift-4. &quot;$&quot; is used in languages were &quot;$&quot; is used as a sigil for variables. It makes sense there to allow these variables directly in some strings. But not so in Swift. What I like about &quot;\&quot; is that it is a compatible extension to string literals, as much as possible. Strings that were valid and sensible before are still valid and sensible and mean the same thing. You can copy&amp;paste a C string literal into Swift, and it will have the same meaning, because C strings do not contain `\(`.<br></p><p>I&#39;m already used to using Alt- and Alt-Shift combinations anyway, they are just needed everywhere. Can use them for „German typographical quotes“ (Alt-^, Alt-2), “English typographical quotes” (Alt-Shift-^, Alt-Shift-2), 2 ≤ 4 comparisons, etc. E.g. the &quot;[]&quot; are Alt-5 and Alt-6.<br></p><p>That said, there is a programming co-worker of mine that uses an English keyboard, because he says it&#39;s easier to write code there. That&#39;s actually something that many non-English programmers do right now.<br></p><p>-Michael<br></p><p>&gt; <br>&gt; -- <br>&gt; Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June 22, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; I agree. As a user of a German keyboard, &quot;\&quot; is written as Alt-Shift-7 (there isn&#39;t even a label on the keyboard, you just have to know this. The &quot;7&quot; key says &quot;7&quot; and &quot;/&quot; - I&#39;m talking about the German Mac Keyboard, the standalone version of the Mac Mini and the Notebook Version of Macbook Air/Pro are the same in this regard.), and &quot;$&quot; is written as Shift-4. &quot;$&quot; is used in languages were &quot;$&quot; is used as a sigil for variables. It makes sense there to allow these variables directly in some strings. But not so in Swift. What I like about &quot;\&quot; is that it is a compatible extension to string literals, as much as possible. Strings that were valid and sensible before are still valid and sensible and mean the same thing. You can copy&amp;paste a C string literal into Swift, and it will have the same meaning, because C strings do not contain `\(`.<br>&gt; <br>&gt; I&#39;m already used to using Alt- and Alt-Shift combinations anyway, they are just needed everywhere. Can use them for „German typographical quotes“ (Alt-^, Alt-2), “English typographical quotes” (Alt-Shift-^, Alt-Shift-2), 2 ≤ 4 comparisons, etc. E.g. the &quot;[]&quot; are Alt-5 and Alt-6.<br>&gt; <br>&gt; That said, there is a programming co-worker of mine that uses an English keyboard, because he says it&#39;s easier to write code there. That&#39;s actually something that many non-English programmers do right now.<br></p><p>Exactly. And on some other keyboards, $ is not easily accessible either. There will never be a universal character that&#39;s easily accessible on all keyboards. \ is already used for escaping  characters in a string, which makes it logical.<br></p><p>&gt; <br>&gt; -Michael<br>&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>June 22, 2016 at 09:00:00am</p></header><div class="content"><p>Sorry, but can you explain why the character used to   escape   strings is also the best choice to do   Variable value extraction/String interpolation?  They are two different concepts.<br></p><p>Sent from my iPhone<br></p><p>On 22 Jun 2016, at 09:28, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; I agree. As a user of a German keyboard, &quot;\&quot; is written as Alt-Shift-7 (there isn&#39;t even a label on the keyboard, you just have to know this. The &quot;7&quot; key says &quot;7&quot; and &quot;/&quot; - I&#39;m talking about the German Mac Keyboard, the standalone version of the Mac Mini and the Notebook Version of Macbook Air/Pro are the same in this regard.), and &quot;$&quot; is written as Shift-4. &quot;$&quot; is used in languages were &quot;$&quot; is used as a sigil for variables. It makes sense there to allow these variables directly in some strings. But not so in Swift. What I like about &quot;\&quot; is that it is a compatible extension to string literals, as much as possible. Strings that were valid and sensible before are still valid and sensible and mean the same thing. You can copy&amp;paste a C string literal into Swift, and it will have the same meaning, because C strings do not contain `\(`.<br>&gt;&gt; <br>&gt;&gt; I&#39;m already used to using Alt- and Alt-Shift combinations anyway, they are just needed everywhere. Can use them for „German typographical quotes“ (Alt-^, Alt-2), “English typographical quotes” (Alt-Shift-^, Alt-Shift-2), 2 ≤ 4 comparisons, etc. E.g. the &quot;[]&quot; are Alt-5 and Alt-6.<br>&gt;&gt; <br>&gt;&gt; That said, there is a programming co-worker of mine that uses an English keyboard, because he says it&#39;s easier to write code there. That&#39;s actually something that many non-English programmers do right now.<br>&gt; <br>&gt; Exactly. And on some other keyboards, $ is not easily accessible either. There will never be a universal character that&#39;s easily accessible on all keyboards. \ is already used for escaping  characters in a string, which makes it logical.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; -Michael<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>June 22, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On 22 Jun 2016, at 09:39, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Sorry, but can you explain why the character used to   escape   strings is also the best choice to do   Variable value extraction/String interpolation?  They are two different concepts.<br></p><p>The following two lines are equivalent:<br></p><p>	return &quot;Value of foo is \(foo), have a nice day!&quot;<br>	return &quot;Value of foo is &quot; + foo + &quot;have a nice day!&quot; // Assuming foo is a String already<br></p><p>So in a way you can think of \() as being a means of escaping from the string entirely. I find this more logical than the idea which other languages encourage which is that the variable is somehow embedded inside the string, which is why I actually really like having escape do this in Swift.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/cb8b6b6f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>June 22, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; So in a way you can think of \() as being a means of escaping from the string entirely. I find this more logical than the idea which other languages encourage which is that the variable is somehow embedded inside the string, which is why I actually really like having escape do this in Swift.<br></p><p>I guess it is only a matter of personal preference... I do find the opposite to hold true, I like to think about the variable and its expansion so to speak in the target string.<br></p><p>Sent from my iPhone<br></p><p>&gt; On 22 Jun 2016, at 11:19, Haravikk &lt;swift-evolution at haravikk.me&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 22 Jun 2016, at 09:39, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Sorry, but can you explain why the character used to   escape   strings is also the best choice to do   Variable value extraction/String interpolation?  They are two different concepts.<br>&gt; <br>&gt; The following two lines are equivalent:<br>&gt; <br>&gt; 	return &quot;Value of foo is \(foo), have a nice day!&quot;<br>&gt; 	return &quot;Value of foo is &quot; + foo + &quot;have a nice day!&quot; // Assuming foo is a String already<br>&gt; <br>&gt; So in a way you can think of \() as being a means of escaping from the string entirely. I find this more logical than the idea which other languages encourage which is that the variable is somehow embedded inside the string, which is why I actually really like having escape do this in Swift.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/aaae3c0c/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>June 22, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Jun 22, 2016, at 4:19 AM, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The following two lines are equivalent:<br>&gt; <br>&gt; 	return &quot;Value of foo is \(foo), have a nice day!&quot;<br>&gt; 	return &quot;Value of foo is &quot; + foo + &quot;have a nice day!&quot; // Assuming foo is a String already<br>&gt; <br>&gt; So in a way you can think of \() as being a means of escaping from the string entirely. I find this more logical than the idea which other languages encourage which is that the variable is somehow embedded inside the string, which is why I actually really like having escape do this in Swift.<br></p><p>The two have equivalent output (excluding the omission of “, “ which I assume was a typo), but go through different code paths. I believe the interpolation has more opportunities for memory optimization.<br></p><p>-DW<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/de7dbf7f/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/92adc26e3003cac88ca299a08d35b2b3?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>João Pinheiro</string> &lt;joao at joaopinheiro.org&gt;<p>June 22, 2016 at 03:00:00pm</p></header><div class="content"><p>On 22 Jun 2016, at 09:39, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Sorry, but can you explain why the character used to   escape   strings is also the best choice to do   Variable value extraction/String interpolation?  They are two different concepts.<br></p><p>One could argue they are different concepts, but that would be prioritising absolute purity over simplicity and clarity.<br></p><p>The current \() method is simple, clear, and easy to type and read. It&#39;s also compatible with the use of \ as an escape character which is a huge plus. I don&#39;t think it makes sense to replace it with another character simply for absolute purity&#39;s sake, especially if such a substitution would introduce another character that would require escaping.<br></p><p>Sincerely,<br>João Pinheiro<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>June 22, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On 22 Jun 2016, at 09:39, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Sorry, but can you explain why the character used to   escape   strings is also the best choice to do   Variable value extraction/String interpolation?  They are two different concepts.<br></p><p>No they are not.<br></p><p>Escape means nothing more than “stop interpreting characters literally for a bit and do something else”. It’s perfectly reasonable to think of \( … ) as a nothing more than a complicated escape sequence. I don’t think anybody has ever been confused by the fact that it happens at run time rather than compile time.<br></p><p>Furthermore, if you change the escape character you have to introduce another escape sequence fro the character you have just taken and “$&quot;, I would argue is a poor choice since it is probably reasonable common to find it used literally in strings (unlike “\&quot;).<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7559ac465b184ec777f29d37c0e4b374?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Michael Peternell</string> &lt;michael.peternell at gmx.at&gt;<p>June 22, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; Am 22.06.2016 um 10:39 schrieb Goffredo Marocchi &lt;panajev at gmail.com&gt;:<br>&gt; <br>&gt; Sorry, but can you explain why the character used to   escape   strings is also the best choice to do   Variable value extraction/String interpolation?  They are two different concepts.<br></p><p>They are two different concepts in the same way that salami pizza and pizza funghi are two different concepts.<br></p><p>The unifying concept (the &quot;pizza&quot;) is this: A string starts with a `&quot;`, has some letters, and ends with `&quot;`; the letters in between the quotes are taken as-is, except for sequences starting with a `\`: `\n` is new line, ..., `\(...)` is string interpolation, ..., and finally you need to do `\\` to include a literal backslash into the string. So there is just one character (the backslash) which can start a special sequence. My opinion: `\` is rightfully the pizza character, not just the salami character.<br></p><p>Sorry for the cheesy analogy ;) In the end, it&#39;s just a matter of personal preference. Both approaches are equally sound on a theoretical level. To me, it was surprising at first, that `\` is used for string interpolation. But in a good way.<br></p><p>I think Swift 3 is heading in the right direction, and many changes provide real value. But there are also many things that should not change, like string interpolation syntax, &quot;@noreturn&quot; or removing the bridging of Objective-C types. Keeping the good things is just as important as inventing new stuff. Only a well-considered approach will bring major improvements.<br></p><p>-Michael<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
