<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Pitch] remove(at: Set&lt;Index&gt;)</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>June 20, 2016 at 03:00:00pm</p></header><div class="content"><p>on Sun Jun 19 2016, Haravikk &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On 19 Jun 2016, at 11:12, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I think the following should work for the generic case, and is pretty similar:<br>&gt;&gt; <br>&gt;&gt; extension MutableCollection {<br>&gt;&gt; 	public mutating func remove(indices: Set&lt;Index&gt;) {<br>&gt;&gt; 		var index = self.startIndex<br>&gt;&gt; 		self = self.filter {<br>&gt;&gt; 			let result = indices.contains(index)<br>&gt;&gt; 			self.formIndex(after: &amp;index)<br>&gt;&gt; 			return result<br>&gt;&gt; 		}<br>&gt;&gt; 	}<br>&gt;&gt; }<br>&gt;<br>&gt; Apologies for the double-post but I’m honour bound to follow up that my generic method is a load of nonsense at the moment; it’s missing some kind of constructor (I don’t recall if there’s a common option that will satisfy this), also, due to the way .filter {} currently works even in its lazy form it can end up calling the filter closure more than once per item, so advancing the index currently won’t work as expected (elements are skipped, children murdered, it’s just the worst).<br>&gt;<br>&gt; So yeah, best option to do this right now is with a proper loop over self.indices, but it still requires some kind constructor to build a new copy of the correct type.<br>&gt;<br>&gt; For arrays this is a bit simpler as you *can* safely remove indices in reverse order, since later indices cannot invalidate earlier ones, but this is reliant on the array’s indices being integers (reasonable enough, but not really correct in the strictest sense), so like so:<br>&gt;<br>&gt; 	extension Array {<br>&gt; 		public mutating func remove(indices: Set&lt;Index&gt;) {<br>&gt; 			for eachIndex in indices.sort(&gt;) { // greater than should give descending order<br>&gt; 				self.remove(at: eachIndex)<br>&gt; 			}<br>&gt; 		}<br>&gt; 	}<br></p><p>This is still an O(N^2) algorithm.  You can do this in O(N) by taking<br>Dmitri&#39;s approach.<br></p><p>-- <br>Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
