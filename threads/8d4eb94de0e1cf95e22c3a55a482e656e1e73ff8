<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Protocols, `mutating` and Value vs Reference Types.</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April 29, 2016 at 05:00:00pm</p></header><div class="content"><p>on Fri Apr 29 2016, Hooman Mehr &lt;swift-users-AT-swift.org&gt; wrote:<br></p><p>&gt; Hi,<br>&gt;<br>&gt; I am designing APIs that need to support both reference (class/object) and value<br>&gt; types. I am running into restrictions of `mutating` keyword in my protocols and<br>&gt; this is causing a lot of duplication of code. In order to understand what I mean<br>&gt; please take a look at this gist. <br>&gt;<br>&gt; As you see, I have pairs of almost identical declarations: KeyValueStore vs<br>&gt; KeyValueStoreObject, and AnyDictionaryStore vs AnyDictionaryStoreObject. This<br>&gt; keeps rapidly growing as I am designing my APIs. Is there any sane way around<br>&gt; this?<br></p><p>protocol KeyValueStoreObject : class, KeyValueStore {}<br>protocol AnyDictionaryStoreObject : class, AnyDictionaryStore {}<br></p><p>would probably work for you.<br></p><p>HTH,<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e7e554db1f80d7d6041d92edd5145698?s=50"></div><header><strong>Protocols, `mutating` and Value vs Reference Types.</strong> from <string>Hooman Mehr</string> &lt;hooman at mac.com&gt;<p>April 29, 2016 at 06:00:00pm</p></header><div class="content"><p>Thank you very much for your response. I made the change in the gist &lt;https://gist.github.com/hooman/2b74d9756976a43330c1acfcfba699f3&gt;. This takes me back to the same error that forced my into duplication path:<br></p><p>“Cannot assign through subscript: ‘self’ is immutable” for the object case.<br></p><p>The gist &lt;https://gist.github.com/hooman/2b74d9756976a43330c1acfcfba699f3&gt; is self contained if you want to compile it yourself.<br></p><p>Is this some kind of bug or the expected behavior?<br></p><p>&gt; On Apr 29, 2016, at 5:28 PM, Dave Abrahams via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Fri Apr 29 2016, Hooman Mehr &lt;swift-users-AT-swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; Hi,<br>&gt;&gt; <br>&gt;&gt; I am designing APIs that need to support both reference (class/object) and value<br>&gt;&gt; types. I am running into restrictions of `mutating` keyword in my protocols and<br>&gt;&gt; this is causing a lot of duplication of code. In order to understand what I mean<br>&gt;&gt; please take a look at this gist. <br>&gt;&gt; <br>&gt;&gt; As you see, I have pairs of almost identical declarations: KeyValueStore vs<br>&gt;&gt; KeyValueStoreObject, and AnyDictionaryStore vs AnyDictionaryStoreObject. This<br>&gt;&gt; keeps rapidly growing as I am designing my APIs. Is there any sane way around<br>&gt;&gt; this?<br>&gt; <br>&gt; protocol KeyValueStoreObject : class, KeyValueStore {}<br>&gt; protocol AnyDictionaryStoreObject : class, AnyDictionaryStore {}<br>&gt; <br>&gt; would probably work for you.<br>&gt; <br>&gt; HTH,<br>&gt; <br>&gt; -- <br>&gt; Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160429/790f3c2e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Protocols, `mutating` and Value vs Reference Types.</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April 29, 2016 at 08:00:00pm</p></header><div class="content"><p>on Fri Apr 29 2016, Hooman Mehr &lt;hooman-AT-mac.com&gt; wrote:<br></p><p>&gt; Thank you very much for your response. I made the change in the gist. This takes<br>&gt; me back to the same error that forced my into duplication path:<br>&gt;<br>&gt; “Cannot assign through subscript: ‘self’ is immutable” for the object case.<br>&gt;<br>&gt; The gist is self contained if you want to compile it yourself.<br>&gt;<br>&gt; Is this some kind of bug or the expected behavior?<br></p><p>Looks like a bug to me!<br></p><p>&gt;<br>&gt;<br>&gt;     On Apr 29, 2016, at 5:28 PM, Dave Abrahams via swift-users<br>&gt;     &lt;swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt;     on Fri Apr 29 2016, Hooman Mehr &lt;swift-users-AT-swift.org&gt; wrote:<br>&gt;<br>&gt;         Hi,<br>&gt;<br>&gt;         I am designing APIs that need to support both reference (class/object)<br>&gt;         and value<br>&gt;         types. I am running into restrictions of `mutating` keyword in my<br>&gt;         protocols and<br>&gt;         this is causing a lot of duplication of code. In order to understand<br>&gt;         what I mean<br>&gt;         please take a look at this gist. <br>&gt;<br>&gt;         As you see, I have pairs of almost identical declarations: KeyValueStore<br>&gt;         vs<br>&gt;         KeyValueStoreObject, and AnyDictionaryStore vs AnyDictionaryStoreObject.<br>&gt;         This<br>&gt;         keeps rapidly growing as I am designing my APIs. Is there any sane way<br>&gt;         around<br>&gt;         this?<br>&gt;<br>&gt;     protocol KeyValueStoreObject : class, KeyValueStore {}<br>&gt;     protocol AnyDictionaryStoreObject : class, AnyDictionaryStore {}<br>&gt;<br>&gt;     would probably work for you.<br>&gt;<br>&gt;     HTH,<br>&gt;<br>&gt;     -- <br>&gt;     Dave<br>&gt;<br>&gt;     _______________________________________________<br>&gt;     swift-users mailing list<br>&gt;     swift-users at swift.org<br>&gt;     https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br></p><p>-- <br>Dave<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
