<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May 10, 2016 at 11:00:00am</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;SE-0084: Allow trailing commas in parameter lists and tuples&quot; begins now and runs through May 16. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0084-trailing-commas.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>May 10, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On 10 May 2016, at 20:53, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0084: Allow trailing commas in parameter lists and tuples&quot; begins now and runs through May 16. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0084-trailing-commas.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>I would love this, but I’d hate any language which allows it.<br></p><p>Maybe we could degrade it to a warning instead of a compile error? So it’d be fine in scripts and when debugging, but you’ll be reminded that leaving it that way is not cool.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a69f91816dae5f787bd9f58ceb7b70bd?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Eduardo Mourey Lopez Ne</string> &lt;edmourey at icloud.com&gt;<p>May 10, 2016 at 02:00:00pm</p></header><div class="content"><p>I will like to suggest the alternative <br>that consists in eliminating the use of &quot;,&quot; since the compiler is able to know here they are expected, automatic watermarks can be added by Xcode to indicate where the compiler is automatically adding the comas. <br>also use of a “..” watermark  at the end of a line will indicate that it continues on the next line, it will also be added on the start of the next line as well.<br></p><p>Optionally watermark numbers can be added to indicate the number of elements in a line or the accumulated total<br></p><p>This change will make it easier for user to rearrange list, and eliminate the “Expected ‘,’ separator” error without making the code less safe or less readable. It also doesn’t have any impact on existing code since the user could still use the “,” manually<br></p><p>There could be cases were the user will still need to type “,” if the grammar is ambiguous <br></p><p>The use of the &quot;;&quot; can also be eliminated using similar logic <br></p><p><br>&gt; On May 10, 2016, at 2:05 PM, Karl Wagner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 10 May 2016, at 20:53, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0084: Allow trailing commas in parameter lists and tuples&quot; begins now and runs through May 16. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0084-trailing-commas.md<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; I would love this, but I’d hate any language which allows it.<br>&gt; <br>&gt; Maybe we could degrade it to a warning instead of a compile error? So it’d be fine in scripts and when debugging, but you’ll be reminded that leaving it that way is not cool.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/a1e81f20/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: _Swift_Comma_Sugestion_xcf-2_0__RGB_color__1_layer__531x204_?_GIMP 2.png<br>Type: image/png<br>Size: 13004 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/a1e81f20/attachment.png&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e910871dda004717de19e83626308b5a?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Tony Allevato</string> &lt;allevato at google.com&gt;<p>May 10, 2016 at 07:00:00pm</p></header><div class="content"><p>On Tue, May 10, 2016 at 11:53 AM Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0084: Allow trailing commas in parameter lists and<br>&gt; tuples&quot; begins now and runs through May 16. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0084-trailing-commas.md<br>&gt;<br>&gt;         * What is your evaluation of the proposal?<br>&gt;<br></p><p>-1. It makes more sense to allow this for arrays and dictionaries because<br>are variable-length collections whose literals are much more likely to grow<br>as a code base evolves (anecdotal personal experience). Tuples are fixed<br>arity, so proactively protecting oneself with a trailing comma seems like<br>it would have minimal benefit when the surrounding code would have to<br>change in other ways.<br></p><p>Likewise for function calls; I would argue that if a function<br>call/definition&#39;s parameter list is likely to grow so much and/or so<br>frequently that a trailing comma provides significant savings, that&#39;s a<br>code smell that should encourage the author to redesign the function.<br></p><p>Essentially, my argument draws a line between &quot;content&quot; changes where we<br>should allow this (i.e., you can add an element to an array or dictionary<br>and the code that uses it works as expected, just iterates over the<br>additional elements) vs. &quot;structural&quot; changes where we should not (adding<br>an element to a tuple or a function call is likely to involve changes to<br>surrounding code as well, so the savings are minimal).<br></p><p><br></p><p>&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;<br></p><p>I don&#39;t believe so. This feels like a language change that would only<br>produce cleaner diffs in isolated places in source control. The cases where<br>one would proactively want to protect themselves against future changes<br>using this syntax don&#39;t seem to warrant a grammar change.<br></p><p><br></p><p>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br></p><p>        * If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br></p><p>        * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br></p><p>I read the proposal.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/39a8332d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>May 10, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On May 10, 2016, at 1:36 PM, Tony Allevato via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Tue, May 10, 2016 at 11:53 AM Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0084: Allow trailing commas in parameter lists and tuples&quot; begins now and runs through May 16. The proposal is available here:<br>&gt; <br>&gt;         https://github.com/apple/swift-evolution/blob/master/proposals/0084-trailing-commas.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0084-trailing-commas.md&gt;<br>&gt; <br>&gt;         * What is your evaluation of the proposal?<br>&gt; <br>&gt; -1. It makes more sense to allow this for arrays and dictionaries because are variable-length collections whose literals are much more likely to grow as a code base evolves (anecdotal personal experience). Tuples are fixed arity, so proactively protecting oneself with a trailing comma seems like it would have minimal benefit when the surrounding code would have to change in other ways.<br>&gt; <br>&gt; Likewise for function calls; I would argue that if a function call/definition&#39;s parameter list is likely to grow so much and/or so frequently that a trailing comma provides significant savings, that&#39;s a code smell that should encourage the author to redesign the function.<br></p><p>Swift serves production code, but it also serves code for teaching, for documentation, for samples, for shell scripting, and for many other purposes. What &quot;smells&quot; in one use may not &quot;smell&quot; in another.<br></p><p>Reordering and commenting in and out parameters is especially handy while prototyping, experimenting, and sometimes even for production code where user feedback may affect tuning choices (working in AVFoundation is a particularly good example of this), especially in a language with default parameters where the final parameter may not always be in use.<br></p><p>As a heavy user of source code that extends beyond simple production goals, I would greatly benefit from their inclusion into the language. I do not believe doing so would adversely affect traditional coding.<br></p><p>It is easy enough to use a linter to remove trailing commas.  It is impossible to lint them into the language. <br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/a29ed4d8/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May 10, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On May 10, 2016, at 12:36 PM, Tony Allevato &lt;allevato at google.com&gt; wrote:<br>&gt; <br>&gt; On Tue, May 10, 2016 at 11:53 AM Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0084: Allow trailing commas in parameter lists and tuples&quot; begins now and runs through May 16. The proposal is available here:<br>&gt; <br>&gt;         https://github.com/apple/swift-evolution/blob/master/proposals/0084-trailing-commas.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0084-trailing-commas.md&gt;<br>&gt; <br>&gt;         * What is your evaluation of the proposal?<br>&gt; <br>&gt; -1. It makes more sense to allow this for arrays and dictionaries because are variable-length collections whose literals are much more likely to grow as a code base evolves (anecdotal personal experience). Tuples are fixed arity, so proactively protecting oneself with a trailing comma seems like it would have minimal benefit when the surrounding code would have to change in other ways.<br>&gt; <br>&gt; Likewise for function calls; I would argue that if a function call/definition&#39;s parameter list is likely to grow so much and/or so frequently that a trailing comma provides significant savings, that&#39;s a code smell that should encourage the author to redesign the function.<br></p><p>FWIW, I personally agree with this observation.<br></p><p>Parameter lists and tuples are also structurally different than collections.  Parameter lists also have labels, and (depending on how the ‘disable reordering default arguments’ decision goes) parameters may not be added and reordered arbitrarily.  Tuples are different because adding a member will often break all the code downstream because it changes the type of the value.  This is different than array and dictionary literals.<br></p><p>The only “collection like” aspect I can think of is for variadic parameter lists, but I don’t think they’re common enough to provide a special case for.<br></p><p>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/f887f140/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May 10, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On May 10, 2016, at 1:58 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On May 10, 2016, at 12:36 PM, Tony Allevato &lt;allevato at google.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Tue, May 10, 2016 at 11:53 AM Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0084: Allow trailing commas in parameter lists and tuples&quot; begins now and runs through May 16. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt;         https://github.com/apple/swift-evolution/blob/master/proposals/0084-trailing-commas.md<br>&gt;&gt; <br>&gt;&gt;         * What is your evaluation of the proposal?<br>&gt;&gt; <br>&gt;&gt; -1. It makes more sense to allow this for arrays and dictionaries because are variable-length collections whose literals are much more likely to grow as a code base evolves (anecdotal personal experience). Tuples are fixed arity, so proactively protecting oneself with a trailing comma seems like it would have minimal benefit when the surrounding code would have to change in other ways.<br>&gt;&gt; <br>&gt;&gt; Likewise for function calls; I would argue that if a function call/definition&#39;s parameter list is likely to grow so much and/or so frequently that a trailing comma provides significant savings, that&#39;s a code smell that should encourage the author to redesign the function.<br>&gt; <br>&gt; FWIW, I personally agree with this observation.<br>&gt; <br>&gt; Parameter lists and tuples are also structurally different than collections.  Parameter lists also have labels, and (depending on how the ‘disable reordering default arguments’ decision goes) parameters may not be added and reordered arbitrarily.  Tuples are different because adding a member will often break all the code downstream because it changes the type of the value.  This is different than array and dictionary literals.<br></p><p>A parameter list or tuple may have a specific arity and order at a point in time, but function signatures still evolve.<br></p><p>&gt; The only “collection like” aspect I can think of is for variadic parameter lists, but I don’t think they’re common enough to provide a special case for.<br></p><p><br>IMO, this is *already* a special case. It feels like an arbitrary inconsistency that some comma-separated lists admit trailing commas and some don&#39;t. I don&#39;t think users are thinking of a &quot;structural difference&quot; between collections and arguments when working with them, they just see the syntax.<br></p><p>-Joe<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>May 12, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On May 10, 2016, at 2:58 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; On May 10, 2016, at 12:36 PM, Tony Allevato &lt;allevato at google.com &lt;mailto:allevato at google.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Likewise for function calls; I would argue that if a function call/definition&#39;s parameter list is likely to grow so much and/or so frequently that a trailing comma provides significant savings, that&#39;s a code smell that should encourage the author to redesign the function.<br>&gt; <br>&gt; FWIW, I personally agree with this observation.<br>&gt; <br>&gt; Parameter lists and tuples are also structurally different than collections.  Parameter lists also have labels, and (depending on how the ‘disable reordering default arguments’ decision goes) parameters may not be added and reordered arbitrarily.  Tuples are different because adding a member will often break all the code downstream because it changes the type of the value.  This is different than array and dictionary literals.<br>&gt; <br>&gt; The only “collection like” aspect I can think of is for variadic parameter lists, but I don’t think they’re common enough to provide a special case for.<br></p><p><br>I agree that the trailing comma offers its best support for situations that express variadic properties. I propose that all three of the following scenarios share this nature:<br>At call sites with variadic arguments<br>At call sites with defaulted arguments<br>At definition sites with large complex argument lists or tuple members<br>It&#39;s slightly easier to make the case for call sites, the first two of these uses, as they exactly mirror the way collections parse members. Supporting the third style of trailing commas requires the consideration of real world modern Swift. <br></p><p>Allowing cut and paste or commenting of entire parameter lines means simple changes do not ripple out to affect other lines. In this, trailing commas serve programmer intent and limit the effect in diff comparisons. As Joe pointed out in one of his responses on this thread, one edit becomes one diff, without extra housekeeping for other affected lines. When considered together, I do believe the use cases for these scenarios are common enough to be considered something other than a &quot;special case&quot;. <br></p><p>Given that SE-0060 is accepted, the third case is narrowed but should not be ignored. Reordering and commenting out lines during prototyping, working in playgrounds, and scripting is still common. Also, a reorder or comment when trailing commas are permitted ensures that such changes are single-point edits. <br></p><p>As Brent points out in his review, &quot;I was skeptical of this until a week or two ago, when I had some code where I ended up commenting out certain parameters.&quot; Trailing commas, although a minor feature in a major language, still serves the developer and supports the overall philosophy of Swift, which is as you have pointed out multiple times, an opinionated language.<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160512/29eb9422/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>May 12, 2016 at 07:00:00pm</p></header><div class="content"><p>I find it symptomatic that the &#39;popular&#39; languages where this is allowed all seem to be rooted in scripting++ rather than in hard core, strong grammar languages. But i guess the two shall at some point meet... in swift?! <br></p><p>Could the feature perhaps be reserved for SwiftScript 1.0 then, instead of added to Swift 3.0? The situation somehow reminds me of Martin Orderski&#39;s early decision to make XML a first class citizen in Scala to fish for more audience, and his recent about face and cleaning up of the grammar.<br></p><p>Regards<br>(From mobile)<br></p><p>&gt; On May 12, 2016, at 6:31 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt;&gt; On May 10, 2016, at 2:58 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; On May 10, 2016, at 12:36 PM, Tony Allevato &lt;allevato at google.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Likewise for function calls; I would argue that if a function call/definition&#39;s parameter list is likely to grow so much and/or so frequently that a trailing comma provides significant savings, that&#39;s a code smell that should encourage the author to redesign the function.<br>&gt;&gt; <br>&gt;&gt; FWIW, I personally agree with this observation.<br>&gt;&gt; <br>&gt;&gt; Parameter lists and tuples are also structurally different than collections.  Parameter lists also have labels, and (depending on how the ‘disable reordering default arguments’ decision goes) parameters may not be added and reordered arbitrarily.  Tuples are different because adding a member will often break all the code downstream because it changes the type of the value.  This is different than array and dictionary literals.<br>&gt;&gt; <br>&gt;&gt; The only “collection like” aspect I can think of is for variadic parameter lists, but I don’t think they’re common enough to provide a special case for.<br>&gt; <br>&gt; <br>&gt; I agree that the trailing comma offers its best support for situations that express variadic properties. I propose that all three of the following scenarios share this nature:<br>&gt; At call sites with variadic arguments<br>&gt; At call sites with defaulted arguments<br>&gt; At definition sites with large complex argument lists or tuple members<br>&gt; It&#39;s slightly easier to make the case for call sites, the first two of these uses, as they exactly mirror the way collections parse members. Supporting the third style of trailing commas requires the consideration of real world modern Swift. <br>&gt; <br>&gt; Allowing cut and paste or commenting of entire parameter lines means simple changes do not ripple out to affect other lines. In this, trailing commas serve programmer intent and limit the effect in diff comparisons. As Joe pointed out in one of his responses on this thread, one edit becomes one diff, without extra housekeeping for other affected lines. When considered together, I do believe the use cases for these scenarios are common enough to be considered something other than a &quot;special case&quot;. <br>&gt; <br>&gt; Given that SE-0060 is accepted, the third case is narrowed but should not be ignored. Reordering and commenting out lines during prototyping, working in playgrounds, and scripting is still common. Also, a reorder or comment when trailing commas are permitted ensures that such changes are single-point edits. <br>&gt; <br>&gt; As Brent points out in his review, &quot;I was skeptical of this until a week or two ago, when I had some code where I ended up commenting out certain parameters.&quot; Trailing commas, although a minor feature in a major language, still serves the developer and supports the overall philosophy of Swift, which is as you have pointed out multiple times, an opinionated language.<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160512/047f83ca/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ed9a0d8cd44b62539b141f6c10405db1?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Rob Napier</string> &lt;robnapier at gmail.com&gt;<p>May 10, 2016 at 04:00:00pm</p></header><div class="content"><p>On Tue, May 10, 2016 at 2:53 PM, Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt;         * What is your evaluation of the proposal?<br>&gt;<br></p><p>Trailing commas is clearly very useful in the collections case. While that<br>case is more common than functions and tuples, I don&#39;t see any reason that<br>collections should be treated as a special case. Why should some<br>comma-separated lists allow trailing commas and some not?<br></p><p>This seems a reasonable move towards consistency and is useful in some<br>cases while not harmful in others. When in doubt, I&#39;d rather broad rules<br>(&quot;trailing commas are allowed in comma-separated lists&quot;) rather than<br>special cases. This improves teachability.<br></p><p>It also improves diffs when functions pick up new parameters, particularly<br>ones with default values. This is particularly common (and expected) in<br>constructors. That&#39;s valuable.<br></p><p><br></p><p>&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;<br></p><p>As a language rule simplification, I believe it&#39;s worth a change if it<br>doesn&#39;t introduce problematic corner cases. The fact that it improves diffs<br>is no less valuable for functions than it is for collections.<br></p><p><br></p><p>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br></p><p>Yes; it definitely feels Swifty in the same way that it does for<br>collections. There&#39;s no reason for Swift to treat them differently.<br></p><p><br></p><p>&gt;         * If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;<br></p><p>I&#39;ve seen this in Perl, Python, and Go. Basically every language I&#39;ve used<br>that allows trailing commas in collections also allows them in function<br>calls. In Go, the trailing comma is mandatory in some cases. This has been<br>nice for consistency.<br></p><p><br></p><p>&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br></p><p>Quick reading.<br></p><p>-Rob<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/b7f6394e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4ab486d7597af4cfe0be33a762150848?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Dany St-Amant</string> &lt;dsa.mls at icloud.com&gt;<p>May 10, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On May 10, 2016, at 4:57 PM, Rob Napier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Tue, May 10, 2016 at 2:53 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;         * What is your evaluation of the proposal?<br>&gt; <br>&gt; Trailing commas is clearly very useful in the collections case. While that case is more common than functions and tuples, I don&#39;t see any reason that collections should be treated as a special case. Why should some comma-separated lists allow trailing commas and some not?<br>&gt; <br>&gt; This seems a reasonable move towards consistency and is useful in some cases while not harmful in others. When in doubt, I&#39;d rather broad rules (&quot;trailing commas are allowed in comma-separated lists&quot;) rather than special cases. This improves teachability.<br></p><p>If one look purely at commas, the inconsistency may be hard to explain, but if one include the enclosing characters there are clear rules:<br></p><p>- within square brackets: trailing comma allowed<br>- within parenthesis: trailing comma not allowed<br>- within angle bracket: trailing comma not allowed<br></p><p>Weird, I do not recall anyone mentioning generics in the original trailing comma thread.<br></p><p>Dany<br></p><p>&gt; <br>&gt; It also improves diffs when functions pick up new parameters, particularly ones with default values. This is particularly common (and expected) in constructors. That&#39;s valuable.<br>&gt; <br>&gt;  <br>&gt;&gt;         * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; As a language rule simplification, I believe it&#39;s worth a change if it doesn&#39;t introduce problematic corner cases. The fact that it improves diffs is no less valuable for functions than it is for collections.<br>&gt; <br>&gt;  <br>&gt;&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; Yes; it definitely feels Swifty in the same way that it does for collections. There&#39;s no reason for Swift to treat them differently.<br>&gt; <br>&gt;  <br>&gt;&gt;         * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; I&#39;ve seen this in Perl, Python, and Go. Basically every language I&#39;ve used that allows trailing commas in collections also allows them in function calls. In Go, the trailing comma is mandatory in some cases. This has been nice for consistency.<br>&gt; <br>&gt;  <br>&gt;&gt;         * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; Quick reading.<br>&gt; <br>&gt; -Rob<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/870aa1e6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May 10, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On May 10, 2016, at 5:51 PM, Dany St-Amant via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; On May 10, 2016, at 4:57 PM, Rob Napier via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Tue, May 10, 2016 at 2:53 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;         * What is your evaluation of the proposal?<br>&gt;&gt; <br>&gt;&gt; Trailing commas is clearly very useful in the collections case. While that case is more common than functions and tuples, I don&#39;t see any reason that collections should be treated as a special case. Why should some comma-separated lists allow trailing commas and some not?<br>&gt;&gt; <br>&gt;&gt; This seems a reasonable move towards consistency and is useful in some cases while not harmful in others. When in doubt, I&#39;d rather broad rules (&quot;trailing commas are allowed in comma-separated lists&quot;) rather than special cases. This improves teachability.<br>&gt; <br>&gt; If one look purely at commas, the inconsistency may be hard to explain, but if one include the enclosing characters there are clear rules:<br>&gt; <br>&gt; - within square brackets: trailing comma allowed<br>&gt; - within parenthesis: trailing comma not allowed<br>&gt; - within angle bracket: trailing comma not allowed<br></p><p>- within compound “conditions” (of while, if, guard): trailing comma not allowed<br></p><p>-Chris<br></p><p>&gt; <br>&gt; Weird, I do not recall anyone mentioning generics in the original trailing comma thread.<br>&gt; <br>&gt; Dany<br>&gt; <br>&gt;&gt; <br>&gt;&gt; It also improves diffs when functions pick up new parameters, particularly ones with default values. This is particularly common (and expected) in constructors. That&#39;s valuable.<br>&gt;&gt; <br>&gt;&gt;  <br>&gt;&gt;         * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; <br>&gt;&gt; As a language rule simplification, I believe it&#39;s worth a change if it doesn&#39;t introduce problematic corner cases. The fact that it improves diffs is no less valuable for functions than it is for collections.<br>&gt;&gt; <br>&gt;&gt;  <br>&gt;&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; <br>&gt;&gt; Yes; it definitely feels Swifty in the same way that it does for collections. There&#39;s no reason for Swift to treat them differently.<br>&gt;&gt; <br>&gt;&gt;  <br>&gt;&gt;         * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; <br>&gt;&gt; I&#39;ve seen this in Perl, Python, and Go. Basically every language I&#39;ve used that allows trailing commas in collections also allows them in function calls. In Go, the trailing comma is mandatory in some cases. This has been nice for consistency.<br>&gt;&gt; <br>&gt;&gt;  <br>&gt;&gt;         * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; Quick reading.<br>&gt;&gt; <br>&gt;&gt; -Rob<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/88f5079b/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c74c15ba14b1096d4e42900ddd2dacd0?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Patrick Smith</string> &lt;pgwsmith at gmail.com&gt;<p>May 11, 2016 at 10:00:00pm</p></header><div class="content"><p>I +1 the proposal. If it doesn’t make the compiler more complicated, and its a purely opt-in feature for writers, then I don’t why it couldn’t literally extend to everywhere there’s a comma-separated list as a general rule.<br></p><p>&gt; On 11 May 2016, at 6:57 AM, Rob Napier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Tue, May 10, 2016 at 2:53 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;         * What is your evaluation of the proposal?<br>&gt; <br>&gt; Trailing commas is clearly very useful in the collections case. While that case is more common than functions and tuples, I don&#39;t see any reason that collections should be treated as a special case. Why should some comma-separated lists allow trailing commas and some not?<br>&gt; <br>&gt; This seems a reasonable move towards consistency and is useful in some cases while not harmful in others. When in doubt, I&#39;d rather broad rules (&quot;trailing commas are allowed in comma-separated lists&quot;) rather than special cases. This improves teachability.<br>&gt; <br>&gt; It also improves diffs when functions pick up new parameters, particularly ones with default values. This is particularly common (and expected) in constructors. That&#39;s valuable.<br>&gt; <br>&gt;  <br>&gt;         * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; As a language rule simplification, I believe it&#39;s worth a change if it doesn&#39;t introduce problematic corner cases. The fact that it improves diffs is no less valuable for functions than it is for collections.<br>&gt; <br>&gt;  <br>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; Yes; it definitely feels Swifty in the same way that it does for collections. There&#39;s no reason for Swift to treat them differently.<br>&gt; <br>&gt;  <br>&gt;         * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; I&#39;ve seen this in Perl, Python, and Go. Basically every language I&#39;ve used that allows trailing commas in collections also allows them in function calls. In Go, the trailing comma is mandatory in some cases. This has been nice for consistency.<br>&gt; <br>&gt;  <br>&gt;         * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; Quick reading.<br>&gt; <br>&gt; -Rob<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160511/c975d1b8/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>May 11, 2016 at 01:00:00am</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>-1. Even if I see the arguments in favour, I am of the same opinion as Tony Allevato and Chris Latner: tuples and parameter lists are most often fixed size, which reduces the usefulness of this proposal. And if the proposal is accepted, where do we stop? Do we then accept it in generic parameter list? In where constraint lists? If there is a limit not to cross, I think this proposal is it.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>I don’t think so.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>I don’t think it either fits or not with the feel and direction.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I think not. If I have used other languages which allow it, I am not aware of it.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I spent a lot of time thinking about it since it was first discussed. My opinion went back and forth but I am now sure of my opinion.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>May 11, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>-1. I support the opinion that dictionary/array is different &quot;thing&quot; than <br>parameters in functions/methods and parameters in tuples.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>I don&#39;t think so. For me the proposal is not solving a problem in Swift, <br>not improving Swift.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>I don&#39;t think so. For me the proposal adds confusion to Swift, especially <br>for novice coders. Like &quot;why comma placed here.. are we expecting some <br>additional parameters here.. is it the same as variable arguments&quot; etc<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I wanted trailing commas for array/dictionary in other languages, but not <br>for functions/methods/tuples.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Read the proposal and opinions in mailing list.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b1fc4ed1ed8e138ef0a87fd3e91c83a4?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Ricardo Parada</string> &lt;rparada at mac.com&gt;<p>May 11, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On May 10, 2016, at 2:53 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0084: Allow trailing commas in parameter lists and tuples&quot; begins now and runs through May 16. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0084-trailing-commas.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0084-trailing-commas.md&gt;<br></p><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>-1<br></p><p>I don’t like the proposal.  I understand the flexibility it gives to rearranging elements but to someone reading the code it looks like an element was removed by mistake.<br></p><p>&gt;  	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>I don’t think it needs to change at the expense of making code look like an error was made.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>No.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I’ve seen this in .plists and other languages.  I don’t use it for the reasons mentioned.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick review.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160511/79143960/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>May 11, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On May 11, 2016, at 8:01 AM, Ricardo Parada via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; On May 10, 2016, at 2:53 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0084: Allow trailing commas in parameter lists and tuples&quot; begins now and runs through May 16. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0084-trailing-commas.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0084-trailing-commas.md&gt;<br>&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt; <br>&gt; -1<br>&gt; <br>&gt; I don’t like the proposal.  I understand the flexibility it gives to rearranging elements but to someone reading the code it looks like an element was removed by mistake.<br></p><p><br>This objection is coming up quite often and I don&#39;t really see the difference between trailing commas in collections (legal in Swift)<br></p><p>let listenerKeys: NSDictionary = [<br>    AVFormatIDKey: NSNumber(unsignedInt: kAudioFormatAppleLossless),<br>    AVSampleRateKey: 44100.0,<br>    AVNumberOfChannelsKey: 1,<br>    AVEncoderAudioQualityKey: NSNumber(int: Int32(AVAudioQuality.Max.rawValue)),<br>]<br></p><p>And trailing commas in parameter lists (not yet allowed in Swift):<br></p><p>public convenience init(<br>    _ w: CGFloat,<br>    _ h: CGFloat,<br>    position: CGPoint = .zero,<br>    backgroundColor: UIColor = UIColor.whiteColor(),<br>    translucency alpha: CGFloat = 1.0,<br>    borderWidth: CGFloat = 0.0,<br>    borderColor: UIColor = UIColor.blackColor(),<br>    cornerRadius: CGFloat = 0.0, // this is currently illegal<br>    ){<br>    ...<br>}<br></p><p>Neither example reads to me as if an element was removed by mistake. Both greatly enhance programming flexibility. Both allow the final comma to be omitted and/or the elements to be re-ordered.<br></p><p>To summarize the complaints to date:<br></p><p>* It make code read like errors<br>* Arrays and dictionaries are different &quot;things&quot; than parameters and tuples; They are structurally different<br>* Parameter lists should always be of fixed size at deployment time; Once a signature is fixed and consumed, it&#39;s difficult to change<br></p><p>To which I reply:<br></p><p>* Well structured code needn&#39;t read like an error. The examples above show an in-house style that allows final commas. Your in-house style may differ and a linter can catch these issues.<br>* Both collections and signatures are syntactically similar in layout even if they are semantically different in use. In Swift, complex method signatures with defaulted arguments like the example shown are not uncommon. Do not limit your thinking to single line lists of (x: T, y: U, z: V) signatures.<br>* Parameter lists and function signatures, like collections, can evolve, especially when using defaulted parameters, even when they are consumed at multiple points.<br></p><p>-- E<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160511/b8caeb0a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>May 11, 2016 at 10:00:00am</p></header><div class="content"><p>I think that, to me, the ability to allow trailing commas is linked with the ability to arbitrarily reorder defaulted parameters. If we retain arbitrary reordering of defaults (which I like and have taken advantage of), then we should allow trailing commas as well. Both of these features together help make quick playground prototyping and experimentation easy and painless.<br></p><p>l8r<br>Sean<br></p><p><br>&gt; On May 11, 2016, at 10:09 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On May 11, 2016, at 8:01 AM, Ricardo Parada via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; On May 10, 2016, at 2:53 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The review of &quot;SE-0084: Allow trailing commas in parameter lists and tuples&quot; begins now and runs through May 16. The proposal is available here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0084-trailing-commas.md<br>&gt;&gt; <br>&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; <br>&gt;&gt; -1<br>&gt;&gt; <br>&gt;&gt; I don’t like the proposal.  I understand the flexibility it gives to rearranging elements but to someone reading the code it looks like an element was removed by mistake.<br>&gt; <br>&gt; <br>&gt; This objection is coming up quite often and I don&#39;t really see the difference between trailing commas in collections (legal in Swift)<br>&gt; <br>&gt; let listenerKeys: NSDictionary = [<br>&gt;     AVFormatIDKey: NSNumber(unsignedInt: kAudioFormatAppleLossless),<br>&gt;     AVSampleRateKey: 44100.0,<br>&gt;     AVNumberOfChannelsKey: 1,<br>&gt;     AVEncoderAudioQualityKey: NSNumber(int: Int32(AVAudioQuality.Max.rawValue)),<br>&gt; ]<br>&gt; <br>&gt; And trailing commas in parameter lists (not yet allowed in Swift):<br>&gt; <br>&gt; public convenience init(<br>&gt;     _ w: CGFloat,<br>&gt;     _ h: CGFloat,<br>&gt;     position: CGPoint = .zero,<br>&gt;     backgroundColor: UIColor = UIColor.whiteColor(),<br>&gt;     translucency alpha: CGFloat = 1.0,<br>&gt;     borderWidth: CGFloat = 0.0,<br>&gt;     borderColor: UIColor = UIColor.blackColor(),<br>&gt;     cornerRadius: CGFloat = 0.0, // this is currently illegal<br>&gt;     ){<br>&gt;     ...<br>&gt; }<br>&gt; <br>&gt; Neither example reads to me as if an element was removed by mistake. Both greatly enhance programming flexibility. Both allow the final comma to be omitted and/or the elements to be re-ordered.<br>&gt; <br>&gt; To summarize the complaints to date:<br>&gt; <br>&gt; * It make code read like errors<br>&gt; * Arrays and dictionaries are different &quot;things&quot; than parameters and tuples; They are structurally different<br>&gt; * Parameter lists should always be of fixed size at deployment time; Once a signature is fixed and consumed, it&#39;s difficult to change<br>&gt; <br>&gt; To which I reply:<br>&gt; <br>&gt; * Well structured code needn&#39;t read like an error. The examples above show an in-house style that allows final commas. Your in-house style may differ and a linter can catch these issues.<br>&gt; * Both collections and signatures are syntactically similar in layout even if they are semantically different in use. In Swift, complex method signatures with defaulted arguments like the example shown are not uncommon. Do not limit your thinking to single line lists of (x: T, y: U, z: V) signatures.<br>&gt; * Parameter lists and function signatures, like collections, can evolve, especially when using defaulted parameters, even when they are consumed at multiple points.<br>&gt; <br>&gt; -- E<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e910871dda004717de19e83626308b5a?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Tony Allevato</string> &lt;allevato at google.com&gt;<p>May 11, 2016 at 04:00:00pm</p></header><div class="content"><p>On Wed, May 11, 2016 at 8:09 AM Erica Sadun via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; To summarize the complaints to date:<br>&gt;<br>&gt; * It make code read like errors<br>&gt; * Arrays and dictionaries are different &quot;things&quot; than parameters and<br>&gt; tuples; They are structurally different<br>&gt; * Parameter lists should always be of fixed size at deployment time; Once<br>&gt; a signature is fixed and consumed, it&#39;s difficult to change<br>&gt;<br>&gt; To which I reply:<br>&gt;<br>&gt; * Well structured code needn&#39;t read like an error. The examples above show<br>&gt; an in-house style that allows final commas. Your in-house style may differ<br>&gt; and a linter can catch these issues.<br>&gt; * Both collections and signatures are syntactically similar in layout even<br>&gt; if they are semantically different in use. In Swift, complex method<br>&gt; signatures with defaulted arguments like the example shown are not<br>&gt; uncommon. Do not limit your thinking to single line lists of (x: T, y: U,<br>&gt; z: V) signatures.<br>&gt; * Parameter lists and function signatures, like collections, can evolve,<br>&gt; especially when using defaulted parameters, even when they are consumed at<br>&gt; multiple points.<br>&gt;<br></p><p>To me, this reads like a solution in search of a problem, and the arbitrary<br>syntactical freedom—and IMO, ugliness—that would be allowed by it outweighs<br>the benefit of not having to type a comma occasionally. We shouldn&#39;t just<br>loosen the syntax of a language arbitrarily because tools can produce<br>linter warnings or auto-correct them; if we use that as our determining<br>factor, where do we draw the line?<br></p><p>Once a function signature evolves, you typically have to change all of the<br>call sites (excepting arguments with default values), which will be a<br>bigger task than inserting a comma anyway. And if you only have to change<br>the function definition (if it&#39;s a default argument), is the extra comma<br>you have to add that big of a problem? How often in the process of writing<br>code is someone going to re-order default arguments that this would be a<br>significant benefit?<br></p><p>Since you alluded to teaching earlier as a scenario to consider, in my<br>(anecdotal, of course) experience teaching CS, I&#39;ve never run into a time<br>where a student was confused by the inability to put a trailing comma in an<br>argument list or where it was more than a trivial inconvenience to have to<br>add one later, but I *can* recall times where they stumbled over trailing<br>commas when they were present (&quot;does it have a different meaning?&quot; &quot;is<br>there an empty item in this list?&quot;, etc.). That harkens back to concerns<br>that trailing commas make code look like there&#39;s something &quot;missing&quot; or<br>&quot;left out.&quot;<br></p><p>Of course, the argument could be made that I personally would be mostly<br>unaffected by this change—I don&#39;t use trailing commas now and this proposal<br>wouldn&#39;t force me to start. So why do I care? I feel that changes that<br>would loosen the language syntax should have to meet an extremely high bar<br>other than allowing for personal style preference or convenience.<br>Consistency is a good goal, but if that was the argument being made, I&#39;d<br>argue the opposite direction—commas should be uniformly treated as<br>separators, not terminators, and should not be allowed in a terminating<br>position in collection literals either, even despite the fact that I think<br>there is more of a case to be made to allow them there vs. here.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160511/bd0d0430/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>May 11, 2016 at 07:00:00pm</p></header><div class="content"><p>On 11.05.2016 18:09, Erica Sadun via swift-evolution wrote:<br>&gt; To which I reply:<br>&gt;<br>&gt; * Well structured code needn&#39;t read like an error. The examples above show<br>&gt; an in-house style that allows final commas. Your in-house style may differ<br>&gt; and a linter can catch these issues.<br></p><p>Will not discuss about taste. Someone likes commas, someone not. Not important.<br></p><p>&gt; * Both collections and signatures are syntactically similar in layout even<br>&gt; if they are semantically different in use. In Swift, complex method<br>&gt; signatures with defaulted arguments like the example shown are not<br>&gt; uncommon. Do not limit your thinking to single line lists of (x: T, y: U,<br>&gt; z: V) signatures.<br>&gt; * Parameter lists and function signatures, like collections, can evolve,<br>&gt; especially when using defaulted parameters, even when they are consumed at<br>&gt; multiple points.<br></p><p>Can&#39;t agree. For me the main point is *they are semantically different in <br>use*, this is why I like trailing commas in array/dict and don&#39;t like in <br>signatures. For me array/dict - is &quot;data&quot;, parameter list - is &quot;code&quot;.<br></p><p>Personally I support the idea of dropping comma in array/dict to allow line <br>break separate elements(like operations in Swift code):<br>let a = [<br>	10<br>	20<br>	30<br>	40<br>	]<br>	<br>let d = [<br>	10 : &quot;a&quot;<br>	20 : &quot;b&quot;<br>	30 : &quot;c&quot;<br>	40 : &quot;d&quot;<br>	]<br>	<br>but I don&#39;t know if I&#39;d support the same for parameter list/tuples, <br>probably will not support.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b1fc4ed1ed8e138ef0a87fd3e91c83a4?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Ricardo Parada</string> &lt;rparada at mac.com&gt;<p>May 11, 2016 at 01:00:00pm</p></header><div class="content"><p>Dropping the commas looks good and doesn&#39;t look like someone made a mistake. I don&#39;t know what other implications / complications dropping the commas would have but I like it. <br></p><p><br></p><p>&gt; On May 11, 2016, at 12:20 PM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Personally I support the idea of dropping comma in array/dict to allow line break separate elements(like operations in Swift code):<br>&gt; let a = [<br>&gt;    10<br>&gt;    20<br>&gt;    30<br>&gt;    40<br>&gt;    ]<br>&gt;    <br>&gt; let d = [<br>&gt;    10 : &quot;a&quot;<br>&gt;    20 : &quot;b&quot;<br>&gt;    30 : &quot;c&quot;<br>&gt;    40 : &quot;d&quot;<br>&gt;    ]<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/49f329a0267f5a1773a77017882a82a8?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Rainer Brockerhoff</string> &lt;rainer at brockerhoff.net&gt;<p>May 12, 2016 at 10:00:00am</p></header><div class="content"><p>On 5/11/16 14:29, Ricardo Parada via swift-evolution wrote:<br>&gt; Dropping the commas looks good and doesn&#39;t look like someone made a mistake. I don&#39;t know what other implications / complications dropping the commas would have but I like it. <br>&gt; <br>&gt;&gt; On May 11, 2016, at 12:20 PM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Personally I support the idea of dropping comma in array/dict to allow line break separate elements(like operations in Swift code):<br>&gt;&gt; let a = [<br>&gt;&gt;    10<br>&gt;&gt;    20<br>&gt;&gt;    30<br>&gt;&gt;    40<br>&gt;&gt;    ]<br>&gt;&gt;    <br>&gt;&gt; let d = [<br>&gt;&gt;    10 : &quot;a&quot;<br>&gt;&gt;    20 : &quot;b&quot;<br>&gt;&gt;    30 : &quot;c&quot;<br>&gt;&gt;    40 : &quot;d&quot;<br>&gt;&gt;    ]<br></p><p>I&#39;m +1 on allowing either trailing commas *or* a line-break instead of<br>where a comma is expected.<br></p><p>Just as we allow a line-break where a semicolon is expected in a list of<br>statements.<br></p><p>-1 on making trailing commas mandatory, just as I&#39;m against making<br>semicolons mandatory again :-)<br></p><p><br>-- <br>Rainer Brockerhoff  &lt;rainer at brockerhoff.net&gt;<br>Belo Horizonte, Brazil<br>&quot;In the affairs of others even fools are wise<br>In their own business even sages err.&quot;<br>http://brockerhoff.net/blog/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>May 12, 2016 at 04:00:00pm</p></header><div class="content"><p>On 12.05.2016 16:22, Rainer Brockerhoff via swift-evolution wrote:<br>&gt; I&#39;m +1 on allowing either trailing commas *or* a line-break instead of<br>&gt; where a comma is expected.<br>&gt;<br>&gt; Just as we allow a line-break where a semicolon is expected in a list of<br>&gt; statements.<br></p><p>Well.. Although I&#39;m still -1 on allowing trailing comma anywhere other than <br>array/dict initialization, and think we need just line-breaks as separator, <br>I feel(am I wrong?) like core team wants to accept the initial proposal(at <br>least replies from @apple.com are supporting the initial proposal).<br></p><p>So, I believe this proposal(SE-0084) should be changed to something like:<br>&quot;Allow trailing commas *everywhere* in comma-separated lists(parameters, <br>tuples, generic type list, func/method call,etc) *and* allow line-break to <br>be treated as a separator in comma-separated lists&quot;<br></p><p>I believe such changed proposal, if will be accepted, will suite the needs <br>of most developers - trailing comma + line-breaks.<br></p><p>But again.. will you use comma as separator in multi-line list if you can <br>just don&#39;t type it and &#39;use&#39; line-break? Do you use semicolons in code now? ;-)<br></p><p>&gt;<br>&gt; -1 on making trailing commas mandatory, just as I&#39;m against making<br>&gt; semicolons mandatory again :-)<br></p><p>OK. Probably I was wrong regarding my suggestion to make them mandatory.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/49f329a0267f5a1773a77017882a82a8?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Rainer Brockerhoff</string> &lt;rainer at brockerhoff.net&gt;<p>May 12, 2016 at 11:00:00am</p></header><div class="content"><p>On 5/12/16 10:52, Vladimir.S via swift-evolution wrote:<br>&gt; On 12.05.2016 16:22, Rainer Brockerhoff via swift-evolution wrote:<br>&gt;&gt; I&#39;m +1 on allowing either trailing commas *or* a line-break instead of<br>&gt;&gt; where a comma is expected.<br>&gt;&gt;<br>&gt;&gt; Just as we allow a line-break where a semicolon is expected in a list of<br>&gt;&gt; statements.<br>&gt; <br>&gt; Well.. Although I&#39;m still -1 on allowing trailing comma anywhere other<br>&gt; than array/dict initialization, and think we need just line-breaks as<br>&gt; separator, I feel(am I wrong?) like core team wants to accept the<br>&gt; initial proposal(at least replies from @apple.com are supporting the<br>&gt; initial proposal).<br>&gt; <br>&gt; So, I believe this proposal(SE-0084) should be changed to something like:<br>&gt; &quot;Allow trailing commas *everywhere* in comma-separated lists(parameters,<br>&gt; tuples, generic type list, func/method call,etc) *and* allow line-break<br>&gt; to be treated as a separator in comma-separated lists&quot;<br>&gt; <br>&gt; I believe such changed proposal, if will be accepted, will suite the<br>&gt; needs of most developers - trailing comma + line-breaks.<br></p><p>Agreed. Everyone can use whatever feels best. Teams will mandate some<br>specific style, anyway.<br></p><p><br>&gt; But again.. will you use comma as separator in multi-line list if you<br>&gt; can just don&#39;t type it and &#39;use&#39; line-break? Do you use semicolons in<br>&gt; code now? ;-)<br></p><p>I use commas with items on the same line, and semicolons with statements<br>on the same line. ;-)<br></p><p>Now, the choice of when to put items or statements on the same line<br>varies...<br></p><p>-- <br>Rainer Brockerhoff  &lt;rainer at brockerhoff.net&gt;<br>Belo Horizonte, Brazil<br>&quot;In the affairs of others even fools are wise<br>In their own business even sages err.&quot;<br>http://brockerhoff.net/blog/<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b1fc4ed1ed8e138ef0a87fd3e91c83a4?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Ricardo Parada</string> &lt;rparada at mac.com&gt;<p>May 11, 2016 at 10:00:00pm</p></header><div class="content"><p>My apologies... I did not know that trailing commas were already legal. Thanks for pointing that out. Nevertheless I don&#39;t think I would have supported that. <br></p><p>I also understand that the trailing comma may help a &quot;git diff&quot; look better and simpler. <br></p><p>The trailing comma still bothers me though because it looks like somebody forgot to add something or as if something got deleted by mistake. <br></p><p>I would support the trailing comma so that the language is consistent but I don&#39;t think I would personally use it. <br></p><p>&gt; On May 11, 2016, at 11:09 AM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt;&gt; On May 11, 2016, at 8:01 AM, Ricardo Parada via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; On May 10, 2016, at 2:53 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The review of &quot;SE-0084: Allow trailing commas in parameter lists and tuples&quot; begins now and runs through May 16. The proposal is available here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0084-trailing-commas.md<br>&gt;&gt; <br>&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; <br>&gt;&gt; -1<br>&gt;&gt; <br>&gt;&gt; I don’t like the proposal.  I understand the flexibility it gives to rearranging elements but to someone reading the code it looks like an element was removed by mistake.<br>&gt; <br>&gt; <br>&gt; This objection is coming up quite often and I don&#39;t really see the difference between trailing commas in collections (legal in Swift)<br>&gt; <br>&gt; let listenerKeys: NSDictionary = [<br>&gt;     AVFormatIDKey: NSNumber(unsignedInt: kAudioFormatAppleLossless),<br>&gt;     AVSampleRateKey: 44100.0,<br>&gt;     AVNumberOfChannelsKey: 1,<br>&gt;     AVEncoderAudioQualityKey: NSNumber(int: Int32(AVAudioQuality.Max.rawValue)),<br>&gt; ]<br>&gt; <br>&gt; And trailing commas in parameter lists (not yet allowed in Swift):<br>&gt; <br>&gt; public convenience init(<br>&gt;     _ w: CGFloat,<br>&gt;     _ h: CGFloat,<br>&gt;     position: CGPoint = .zero,<br>&gt;     backgroundColor: UIColor = UIColor.whiteColor(),<br>&gt;     translucency alpha: CGFloat = 1.0,<br>&gt;     borderWidth: CGFloat = 0.0,<br>&gt;     borderColor: UIColor = UIColor.blackColor(),<br>&gt;     cornerRadius: CGFloat = 0.0, // this is currently illegal<br>&gt;     ){<br>&gt;     ...<br>&gt; }<br>&gt; <br>&gt; Neither example reads to me as if an element was removed by mistake. Both greatly enhance programming flexibility. Both allow the final comma to be omitted and/or the elements to be re-ordered.<br>&gt; <br>&gt; To summarize the complaints to date:<br>&gt; <br>&gt; * It make code read like errors<br>&gt; * Arrays and dictionaries are different &quot;things&quot; than parameters and tuples; They are structurally different<br>&gt; * Parameter lists should always be of fixed size at deployment time; Once a signature is fixed and consumed, it&#39;s difficult to change<br>&gt; <br>&gt; To which I reply:<br>&gt; <br>&gt; * Well structured code needn&#39;t read like an error. The examples above show an in-house style that allows final commas. Your in-house style may differ and a linter can catch these issues.<br>&gt; * Both collections and signatures are syntactically similar in layout even if they are semantically different in use. In Swift, complex method signatures with defaulted arguments like the example shown are not uncommon. Do not limit your thinking to single line lists of (x: T, y: U, z: V) signatures.<br>&gt; * Parameter lists and function signatures, like collections, can evolve, especially when using defaulted parameters, even when they are consumed at multiple points.<br>&gt; <br>&gt; -- E<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160511/d6d32e46/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>May 12, 2016 at 10:00:00am</p></header><div class="content"><p>On 12.05.2016 5:28, Ricardo Parada via swift-evolution wrote:<br>&gt; I would support the trailing comma so that the language is consistent but I<br>&gt; don&#39;t think I would personally use it.<br></p><p>IMO language will be consistent (regarding trailing comma) if we extend the <br>proposal to *any comma-separated list* in Swift.. like list of generic <br>types &lt;T,U,V,&gt;.<br>So, I&#39;d understand if Swift will allow(or better - *require*) trailing <br>comma in *any* such list. Or just for array/dict. But not for some piece of <br>code(func params, tuples), but not for other(list of generics or other)<br></p><p>And I don&#39;t accept the problem with diffs - yes, diff will show you not <br>just new element is added, but also that element that was last is not last <br>anymore.<br>Also, often closed `)` is placed on the same line with last parameter:<br>func myFunc(a: Int,<br>	b: String,<br>	c: Int,) {<br>}<br>so after we add `d` parameter:<br>func myFunc(a: Int,<br>	b: String,<br>	c: Int,<br>	d: String) {<br>}<br></p><p>the diff will show not only new `d` declaration, but also changes to `c` <br>line even with trailing comma.<br></p><p>IMO when I write function(code), I usually don&#39;t expect it will have more <br>arguments. When I write array/dict initialization(data), I usually expect <br>to add more items to it.<br></p><p>So I&#39;m strongly -1 on this proposal in any case. At least we should extend <br>it to allow trailing comma in any list. And I then (if this is so pretty <br>feature) prefer Swift to require that trailing comma in list. This will be <br>consistent and strict.<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dd033b3ed46d65c7d7394eab52d53e6b?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Evan Maloney</string> &lt;emaloney at gilt.com&gt;<p>May 11, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; * What is your evaluation of the proposal?<br></p><p>-1. <br></p><p>It feels wrong to allow garbage syntax lying around in one&#39;s code simply for the sake of occasional convenience. It&#39;s like littering on the sidewalk because it&#39;s easier than throwing something in a trash can.<br></p><p>Because commas are allowed in several places, and because there is no consistent way to allow a trailing commas throughout the language without allowing at least some scenarios in which a trailing comma would change the meaning of the code, it is not safe for the Swift compiler to assume that a trailing comma is intentional and not a mistake. Doing so would shift a compile-time error to runtime.<br></p><p>&gt; * Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>No. Not terminating a list with a comma is about as much of a &quot;problem&quot; as having to terminate strings with a quote.<br></p><p>&gt; * Does this proposal fit well with the feel and direction of Swift?<br></p><p>Making Swift more forgiving of bad syntax does not feel very Swifty to me.<br></p><p>Allowing trailing commas everywhere comma separation is used would be consistent, but would make Swift less strict and less safe. Allowing trailing commas only in those places where they could not possibly affect runtime behavior would be safer, but would make the language less consistent. Either option is sub-optimal.<br></p><p>&gt; * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I&#39;ve never used the feature in any other language, because I don&#39;t find trailing commas visually appealing. They make the code look the developer forgot to finish working on it.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>May 11, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On May 11, 2016, at 9:08 AM, Evan Maloney via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; It feels wrong to allow garbage syntax lying around in one&#39;s code simply for the sake of occasional convenience.<br></p><p>Would you then recommend removing trailing comma support for collections on the same principle?<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160511/83a9b5fa/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dd033b3ed46d65c7d7394eab52d53e6b?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Evan Maloney</string> &lt;emaloney at gilt.com&gt;<p>May 11, 2016 at 11:00:00am</p></header><div class="content"><p>&gt;&gt; It feels wrong to allow garbage syntax lying around in one&#39;s code simply for the sake of occasional convenience.<br>&gt; <br>&gt; Would you then recommend removing trailing comma support for collections on the same principle?<br></p><p>Yes.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160511/10a6f038/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c74c15ba14b1096d4e42900ddd2dacd0?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Patrick Smith</string> &lt;pgwsmith at gmail.com&gt;<p>May 12, 2016 at 01:00:00am</p></header><div class="content"><p>I’m going to propose the keyword #litter as an alias for , so I can throw garbage syntax into my code more effectively seven letters at time :P<br></p><p>I think this is just a choice of taste, and this is offering an additional choice. You don’t have to agree with it, you don’t have to make use of it, you don’t even have to know it’s there.<br></p><p>We’ve all seen and written messy code, and it wasn’t due to the punctuation. There are much more powerful weapons at hand for that.<br></p><p><br>&gt; On 12 May 2016, at 1:25 AM, Evan Maloney via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt;&gt; It feels wrong to allow garbage syntax lying around in one&#39;s code simply for the sake of occasional convenience.<br>&gt;&gt; <br>&gt;&gt; Would you then recommend removing trailing comma support for collections on the same principle?<br>&gt; <br>&gt; Yes.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160512/c44bbae0/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>May 14, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt;&gt; Would you then recommend removing trailing comma support for collections on the same principle?<br>me too — so, for the review-part: -0.5, no trailing commas (it&#39;s not a full -1 as long as I&#39;m not forced to add those trailing commas)<br>I don&#39;t think they are convenient, and even if that is wrong: The convenience-argument could be used to cripple the language (skipping closing parens could be convenient, using &quot;l&quot; and &quot;v&quot; instead of &quot;let&quot; &amp; &quot;var&quot; could be convenient, inferring the return-type of methods could be convenient... and possibly hundreds of small changes in the syntax as well).<br>The idea of using newlines as separators (making &quot;,&quot; obsolete, like &quot;;&quot; in other situations) imho is much nicer and would address the same issues that this proposal tries to improve.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160514/8664fb44/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>May 14, 2016 at 09:00:00pm</p></header><div class="content"><p>On 14.05.2016 20:53, Tino Heth via swift-evolution wrote:<br>&gt; The idea of using newlines as separators (making &quot;,&quot; obsolete, like &quot;;&quot; in<br>&gt; other situations) imho is much nicer and would address the same issues that<br>&gt; this proposal tries to improve.<br></p><p>Tino, would you like to form an &#39;official&#39; proposal for this(newlines as <br>separators) feature? As I can see, there is a much support in community for <br>this idea, but no one said yet he/she will create a proposal for this.(or I <br>just missed this)<br></p><p>It seems like we&#39;ll need separate proposal for this, as &#39;traliling commas&#39; <br>proposal already in review and probably(I don&#39;t know) will be accepted(I <br>saw support in comments from @apple.com)<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>May 15, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; Tino, would you like to form an &#39;official&#39; proposal for this(newlines as separators) feature? As I can see, there is a much support in community for this idea, but no one said yet he/she will create a proposal for this.(or I just missed this)<br>I feel honored, but I guess there are others (native speaker, closer relation to the core team...) who are better suited than me...<br>On the other hand, I lack fear of seeing a proposal rejected ;-), so as long as deeper thinking doesn&#39;t reveal any downsides, I don&#39;t mind spending some hours and putting my name on the pull request.<br>Afaics, there are no plans to change SE-0084 to at least add &quot;making commas optional if followed by a newline&quot; as an alternative, so the first step would be a separate thread (&quot;Newlines as item separators in lists&quot;?) — but as all examples in the proposal use commas followed by newlines, I think all of its goals could be archived<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>May 15, 2016 at 07:00:00pm</p></header><div class="content"><p>Tino, I believe you can start just with [Draft]... thread where you can <br>present the draft of your proposal. Then, after you&#39;ll get opinions and <br>after the draft will be polished, you can form an &#39;official&#39; proposal.<br></p><p>For now I didn&#39;t hear if someone else wanted to create that proposal. So I <br>don&#39;t see any barrier for you to do this(if you want).<br></p><p>As for proposal itself. Yes, I also think almost all of SE-0084 goals could <br>be archived in your proposal.<br>But, personally I believe new proposal should introduce newlines as <br>separators for any comma-separated list, not limited by funcs/typles but <br>also array/dicts/generic type list etc. If something will be hard/imposible <br>to implement - core team can accept the proposal with some exceptions after <br>the review.<br></p><p>On 15.05.2016 13:18, Tino Heth wrote:<br>&gt;<br>&gt;&gt; Tino, would you like to form an &#39;official&#39; proposal for this(newlines<br>&gt;&gt; as separators) feature? As I can see, there is a much support in<br>&gt;&gt; community for this idea, but no one said yet he/she will create a<br>&gt;&gt; proposal for this.(or I just missed this)<br>&gt; I feel honored, but I guess there are others (native speaker, closer<br>&gt; relation to the core team...) who are better suited than me... On the<br>&gt; other hand, I lack fear of seeing a proposal rejected ;-), so as long as<br>&gt; deeper thinking doesn&#39;t reveal any downsides, I don&#39;t mind spending some<br>&gt; hours and putting my name on the pull request. Afaics, there are no<br>&gt; plans to change SE-0084 to at least add &quot;making commas optional if<br>&gt; followed by a newline&quot; as an alternative, so the first step would be a<br>&gt; separate thread (&quot;Newlines as item separators in lists&quot;?) — but as all<br>&gt; examples in the proposal use commas followed by newlines, I think all of<br>&gt; its goals could be archived<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May 11, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On May 10, 2016, at 11:53 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0084: Allow trailing commas in parameter lists and tuples&quot; begins now and runs through May 16. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0084-trailing-commas.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br></p><p>+1 from me. We should be consistent in either accepting or rejecting trailing commas everywhere we have comma-delimited syntax. I&#39;m in favor of accepting it, since it&#39;s popular in languages where it&#39;s supported to enable a minimal-diff style, so that changes to code don&#39;t impact neighboring lines for purely syntactic reasons. If you add an argument to a function, without trailing comma support, a comma has to be added to dirty the previous line:<br></p><p>	--- a.swift<br>	+++ a.swift<br>	 foo(<br>	   x: 0,<br>	-  y: 1<br>	+  y: 1,<br>	+  z: 2<br>	 )<br></p><p>Trailing commas avoid this:<br></p><p>	--- a.swift<br>	+++ a.swift<br>	 foo(<br>	   x: 0,<br>	   y: 1,<br>	+  z: 2,<br>	 )<br></p><p><br>In languages that don&#39;t support trailing commas, many users resort to the abomination of leading-comma style, strangely popular in Haskell and related languages:<br>	<br>	--- a.swift<br>	+++ a.swift<br>	 foo( x: 0<br>	    , y: 1<br>	+   , z: 2<br>	    )<br></p><p>I think the trailing-comma syntax jives much better with Swift style.<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160511/1d89327a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May 11, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On May 11, 2016, at 9:47 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On May 10, 2016, at 11:53 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0084: Allow trailing commas in parameter lists and tuples&quot; begins now and runs through May 16. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0084-trailing-commas.md<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt; <br>&gt; +1 from me. We should be consistent in either accepting or rejecting trailing commas everywhere we have comma-delimited syntax. I&#39;m in favor of accepting it, since it&#39;s popular in languages where it&#39;s supported to enable a minimal-diff style, so that changes to code don&#39;t impact neighboring lines for purely syntactic reasons. If you add an argument to a function, without trailing comma support, a comma has to be added to dirty the previous line:<br>&gt; <br>&gt; 	--- a.swift<br>&gt; 	+++ a.swift<br>&gt; 	 foo(<br>&gt; 	   x: 0,<br>&gt; 	-  y: 1<br>&gt; 	+  y: 1,<br>&gt; 	+  z: 2<br>&gt; 	 )<br>&gt; <br>&gt; Trailing commas avoid this:<br>&gt; <br>&gt; 	--- a.swift<br>&gt; 	+++ a.swift<br>&gt; 	 foo(<br>&gt; 	   x: 0,<br>&gt; 	   y: 1,<br>&gt; 	+  z: 2,<br>&gt; 	 )<br>&gt; <br>&gt; <br>&gt; In languages that don&#39;t support trailing commas, many users resort to the abomination of leading-comma style, strangely popular in Haskell and related languages:<br>&gt; 	<br>&gt; 	--- a.swift<br>&gt; 	+++ a.swift<br>&gt; 	 foo( x: 0<br>&gt; 	    , y: 1<br>&gt; 	+   , z: 2<br>&gt; 	    )<br>&gt; <br>&gt; I think the trailing-comma syntax jives much better with Swift style.<br></p><p>In response to observations that tuples and function arguments are somehow different from collection literals because they generally have fixed arity, I&#39;ll note that we have an very prominent variadic function in the standard library, &quot;print&quot;, and that adding or removing values to a &quot;print&quot; is a very common and natural thing to do.<br></p><p>-Joe<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>May 11, 2016 at 08:00:00pm</p></header><div class="content"><p>In this case (if this is a such good feature) IMO we should think about <br>making the trailing commas *required*. In this way we will be consistent in <br>either do we have trailing commas in Swift or don&#39;t. Otherwise we&#39;ll have a <br>zoo in our sources/projects.<br></p><p>I don&#39;t think we need to have the same rules for commas &quot;everywhere we have <br>comma-delimited syntax&quot;.<br></p><p>On 11.05.2016 19:47, Joe Groff via swift-evolution wrote:<br>&gt; +1 from me. We should be consistent in either accepting or rejecting<br>&gt; trailing commas everywhere we have comma-delimited syntax. I&#39;m in favor of<br>&gt; accepting it, since it&#39;s popular in languages where it&#39;s supported to<br>&gt; enable a minimal-diff style, so that changes to code don&#39;t impact<br>&gt; neighboring lines for purely syntactic reasons. If you add an argument to a<br>&gt; function, without trailing comma support, a comma has to be added to dirty<br>&gt; the previous line:<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May 11, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On May 11, 2016, at 10:14 AM, Vladimir.S &lt;svabox at gmail.com&gt; wrote:<br>&gt; <br>&gt; In this case (if this is a such good feature) IMO we should think about making the trailing commas *required*. In this way we will be consistent in either do we have trailing commas in Swift or don&#39;t. Otherwise we&#39;ll have a zoo in our sources/projects.<br>&gt; <br>&gt; I don&#39;t think we need to have the same rules for commas &quot;everywhere we have comma-delimited syntax&quot;.<br></p><p>We&#39;ve generally shied away from legislating style; see our rationale behind not requiring `self.` for an example:<br></p><p>https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160104/005478.html<br></p><p>In languages where trailing commas are pervasively allowed, such as Perl, Python, Ruby, and modern Javascript, I haven&#39;t seen any indication that this is a major problem. Less blood has definitely been shed over it than over bracing style and other style wars.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>May 12, 2016 at 01:00:00pm</p></header><div class="content"><p>Inline<br></p><p>On 11.05.2016 22:58, Joe Groff wrote:<br>&gt;<br>&gt;&gt; On May 11, 2016, at 10:14 AM, Vladimir.S &lt;svabox at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; In this case (if this is a such good feature) IMO we should think<br>&gt;&gt; about making the trailing commas *required*. In this way we will be<br>&gt;&gt; consistent in either do we have trailing commas in Swift or don&#39;t.<br>&gt;&gt; Otherwise we&#39;ll have a zoo in our sources/projects.<br>&gt;&gt;<br>&gt;&gt; I don&#39;t think we need to have the same rules for commas &quot;everywhere we<br>&gt;&gt; have comma-delimited syntax&quot;.<br>&gt;<br>&gt; We&#39;ve generally shied away from legislating style; see our rationale<br>&gt; behind not requiring `self.` for an example:<br>&gt;<br>&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160104/005478.html<br></p><p>Got it. I expect you(the core team) will not be against new line as item <br>separator in list(in addition to comma) just for the same reason. Also just <br>for the same reason IMO you should not be against type inference for <br>default parameters in funcs. etc<br>I find this rationale very &#39;wide&#39; so we can end up with JavaScript(in worst <br>meaning) instead of Swift at the end.<br></p><p>&gt;<br>&gt;  In languages where trailing commas are pervasively allowed, such as<br>&gt; Perl, Python, Ruby, and modern Javascript, I haven&#39;t seen any indication<br>&gt; that this is a major problem. Less blood has definitely been shed over<br>&gt; it than over bracing style and other style wars.<br>&gt;<br></p><p>For me this does not rationale why we need to introduce this &#39;feature&#39; in <br>Swift. There is a lot of &#39;cool&#39;(or ugly, from someone&#39;s point of view) <br>&#39;features&#39; in these languages.<br>And we *have* trailing comma for arrays/dicts - IMO this is a golden middle <br>between both words.<br></p><p>&gt; -Joe.<br>&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>May 12, 2016 at 06:00:00am</p></header><div class="content"><p>-1 - for ever<br></p><p><br>&gt; On May 11, 2016, at 6:47 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On May 10, 2016, at 11:53 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0084: Allow trailing commas in parameter lists and tuples&quot; begins now and runs through May 16. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0084-trailing-commas.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0084-trailing-commas.md&gt;<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt; <br>&gt; +1 from me. We should be consistent in either accepting or rejecting trailing commas everywhere we have comma-delimited syntax. I&#39;m in favor of accepting it, since it&#39;s popular in languages where it&#39;s supported to enable a minimal-diff style, so that changes to code don&#39;t impact neighboring lines for purely syntactic reasons. If you add an argument to a function, without trailing comma support, a comma has to be added to dirty the previous line:<br>&gt; <br>&gt; 	--- a.swift<br>&gt; 	+++ a.swift<br>&gt; 	 foo(<br>&gt; 	   x: 0,<br>&gt; 	-  y: 1<br>&gt; 	+  y: 1,<br>&gt; 	+  z: 2<br>&gt; 	 )<br>&gt; <br>&gt; Trailing commas avoid this:<br>&gt; <br>&gt; 	--- a.swift<br>&gt; 	+++ a.swift<br>&gt; 	 foo(<br>&gt; 	   x: 0,<br>&gt; 	   y: 1,<br>&gt; 	+  z: 2,<br>&gt; 	 )<br>&gt; <br>&gt; <br>&gt; In languages that don&#39;t support trailing commas, many users resort to the abomination of leading-comma style, strangely popular in Haskell and related languages:<br></p><p>I am not sure I understand where the “abomination” lies in using leading-comma style… but I will try to see it.<br></p><p>&gt; 	<br>&gt; 	--- a.swift<br>&gt; 	+++ a.swift<br>&gt; 	 foo( x: 0<br>&gt; 	    , y: 1<br>&gt; 	+   , z: 2<br>&gt; 	    )<br>&gt; <br>&gt; I think the trailing-comma syntax jives much better with Swift style.<br></p><p><br>If commas are to be construed as elegantly but meaninglessly dropped little crumbs, then one can see why it might not matter where they go, or how many there are, which as well as begging the question of allowing them at the end, should equally prompt the question of completely removing them altogether. And if having extras is just great anticipation on future needs, should we think about considering the following lines as all equivalent<br></p><p>let v0 = (1,<br>          2,<br>          3)<br>let v1 = (1,<br>          2,<br>          3,<br>         )<br>let v2 = (,        // just in case I want to add something at the front later?!<br>          1,<br>          2,<br>          3,) <br>let v3 = (1,<br>          2,<br>          ,<br>          3,<br>         )         // just in case I want to add something in the middle or front later<br>let v4 = (1,,<br>          2,,<br>          3,,)	   // lets be really good programmer, in case it doubles in length<br></p><p><br>Aside from the good-anticipation interpretation of trailing commas, there is also the thinking-interuptus  line of interpretation:<br></p><p>	this and<br>	that and<br></p><p>standing for: now hold your breath, I am not done.. or maybe I lost my train of thoughts so I am actually done… who knows.. read the next line to figure that out.<br></p><p><br></p><p>As I recall there is an ongoing debate about long string literal… Perhaps this line of thinking can help there too?!!  Swift would become very unique and progressive with something like:<br></p><p>let var = this is a long string literal”  // notice my continuation quote at the end <br>     which I am continuing to the”        // notice how I am letting people know that, like my parameter list,<br>     next line and perhaps even”          // my string may not be quite finished yet<br>     to the next one and even”		  // … <br></p><p>Like in the convenient case of a trailing comma in a parameter list, I added a last quote character so that I can add another string later, without having to resort to the cliche notion of a leading quote. and like with trailing commas, it is just a placeholder because my string is really finished for now!<br></p><p><br>Another convenient area where this reasoning could potentially be applied might be logical expressions!!! The ability to anticipate on future needs to change a logical expression might also be neat there by allowing expressions like:<br></p><p>if (cond1 &amp;&amp; <br>      cond2 &amp;&amp;) {<br>}<br></p><p>which floats a lot than the overly tight:<br></p><p>if (cond1 <br>      &amp;&amp; cond2) {<br>}<br></p><p>I think I’m convinced… it is such a powerful concept it should probably extend to the english language at large and<br></p><p>Cheers<br>LM/<br>[just in case, I hope everyone has seen the tongue-in-cheeks tone ;-) ]<br></p><p>PS: can they actually be removed EVERYWHERE instead?!<br></p><p><br>&gt; <br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160512/b40ed25e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>May 12, 2016 at 10:00:00am</p></header><div class="content"><p>Fully support your opinion.<br></p><p> &gt; PS: can they actually be removed EVERYWHERE instead?!<br></p><p>Yes, I believe it will be much better to propose feature to allow line <br>break instead of comma, so we can have:<br></p><p>let x = [10<br>	20<br>	30]<br></p><p>let y = [1 : &quot;one&quot;<br>	2 : &quot;two&quot;]<br></p><p>(from proposal):<br></p><p>func padStringToLength(<br>     sourceString: String<br>     destinationCount: Int<br>     paddingStyle: StringPaddingStyle = .Left<br>     paddingCharacter: Character = &quot; &quot;<br>) -&gt; String {<br>     /* ... */<br>}<br></p><p>padStringToLength(<br>     sourceString: &quot;source&quot;<br>     destinationCount: 4<br>     paddingStyle: .Right<br>     paddingCharacter: &quot;&quot;<br>)<br></p><p>let tuple: (<br>     string: String<br>     number: Int<br>) = (<br>    string: &quot;string&quot;<br>    number: 0<br>)<br></p><p>...	&lt;SomeT<br>	SomeU<br>	SomeV&gt; ...<br></p><p>This solves all the problems with diffs, makes code much clean and nice, no <br>additional noise. Why we need these commas instead of this solution? IMO <br>this will be real step forward.<br></p><p>Is there such a proposal? (Or probably was discussed already?)<br></p><p>On 12.05.2016 7:46, L Mihalkovic via swift-evolution wrote:<br>&gt;<br>&gt; -1 - for ever<br>&gt;<br>&gt;<br>&gt;&gt; On May 11, 2016, at 6:47 PM, Joe Groff via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; On May 10, 2016, at 11:53 AM, Chris Lattner via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The review of &quot;SE-0084: Allow trailing commas in parameter lists and<br>&gt;&gt;&gt; tuples&quot; begins now and runs through May 16. The proposal is available here:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0084-trailing-commas.md<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All<br>&gt;&gt;&gt; reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the<br>&gt;&gt;&gt; review manager.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The goal of the review process is to improve the proposal under review<br>&gt;&gt;&gt; through constructive criticism and contribute to the direction of Swift.<br>&gt;&gt;&gt; When writing your review, here are some questions you might want to<br>&gt;&gt;&gt; answer in your review:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; * What is your evaluation of the proposal?<br>&gt;&gt;&gt; * Is the problem being addressed significant enough to warrant a change<br>&gt;&gt;&gt; to Swift?<br>&gt;&gt;&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; * If you have used other languages or libraries with a similar feature,<br>&gt;&gt;&gt; how do you feel that this proposal compares to those?<br>&gt;&gt;&gt; * How much effort did you put into your review? A glance, a quick<br>&gt;&gt;&gt; reading, or an in-depth study?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; -Chris Lattner<br>&gt;&gt;&gt; Review Manager<br>&gt;&gt;<br>&gt;&gt; +1 from me. We should be consistent in either accepting or rejecting<br>&gt;&gt; trailing commas everywhere we have comma-delimited syntax. I&#39;m in favor<br>&gt;&gt; of accepting it, since it&#39;s popular in languages where it&#39;s supported to<br>&gt;&gt; enable a minimal-diff style, so that changes to code don&#39;t impact<br>&gt;&gt; neighboring lines for purely syntactic reasons. If you add an argument to<br>&gt;&gt; a function, without trailing comma support, a comma has to be added to<br>&gt;&gt; dirty the previous line:<br>&gt;&gt;<br>&gt;&gt; --- a.swift<br>&gt;&gt; +++ a.swift<br>&gt;&gt;  foo(<br>&gt;&gt;    x: 0,<br>&gt;&gt; -  y: 1<br>&gt;&gt; +  y: 1,<br>&gt;&gt; +  z: 2<br>&gt;&gt;  )<br>&gt;&gt;<br>&gt;&gt; Trailing commas avoid this:<br>&gt;&gt;<br>&gt;&gt; --- a.swift<br>&gt;&gt; +++ a.swift<br>&gt;&gt;  foo(<br>&gt;&gt;    x: 0,<br>&gt;&gt;    y: 1,<br>&gt;&gt; +  z: 2,<br>&gt;&gt;  )<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; In languages that don&#39;t support trailing commas, many users resort to the<br>&gt;&gt; abomination of leading-comma style, strangely popular in Haskell and<br>&gt;&gt; related languages:<br>&gt;<br>&gt; I am not sure I understand where the “abomination” lies in using<br>&gt; leading-comma style… but I will try to see it.<br>&gt;<br>&gt;&gt; --- a.swift<br>&gt;&gt; +++ a.swift<br>&gt;&gt;  foo( x: 0<br>&gt;&gt;     , y: 1<br>&gt;&gt; +   , z: 2<br>&gt;&gt;     )<br>&gt;&gt;<br>&gt;&gt; I think the trailing-comma syntax jives much better with Swift style.<br>&gt;<br>&gt;<br>&gt; If commas are to be construed as elegantly but meaninglessly dropped little<br>&gt; crumbs, then one can see why it might not matter where they go, or how many<br>&gt; there are, which as well as begging the question of allowing them at the<br>&gt; end, should equally prompt the question of completely removing them<br>&gt; altogether. And if having extras is just /great anticipation on future<br>&gt; needs/, should we think about considering the following lines as all equivalent<br>&gt;<br>&gt; let v0 = (1,<br>&gt;           2,<br>&gt;           3)<br>&gt; let v1 = (1,<br>&gt;           2,<br>&gt;           3,<br>&gt;          )<br>&gt; let v2 = (,        // just in case I want to add something at the front later?!<br>&gt;           1,<br>&gt;           2,<br>&gt;           3,)<br>&gt; let v3 = (1,<br>&gt;           2,<br>&gt;           ,<br>&gt;           3,<br>&gt;          )         // just in case I want to add something in the middle or<br>&gt; front later<br>&gt; let v4 = (1,,<br>&gt;           2,,<br>&gt;           3,,)   // lets be really good programmer, in case it doubles in<br>&gt; length<br>&gt;<br>&gt;<br>&gt; Aside from the good-anticipation interpretation of trailing commas, there<br>&gt; is also the /thinking-interuptus/  line of interpretation:<br>&gt;<br>&gt; this and<br>&gt; that and<br>&gt;<br>&gt; standing for: now hold your breath, I am not done.. or maybe I lost my<br>&gt; train of thoughts so I am actually done… who knows.. read the next line to<br>&gt; figure that out.<br>&gt;<br>&gt;<br>&gt; As I recall there is an ongoing debate about long string literal… Perhaps<br>&gt; this line of thinking can help there too?!!  Swift would become very unique<br>&gt; and progressive with something like:<br>&gt;<br>&gt; let var = this is a long string literal”  // notice my continuation quote<br>&gt; at the end<br>&gt;      which I am continuing to the”        // notice how I am letting people<br>&gt; know that, like my parameter list,<br>&gt;      next line and perhaps even”          // my string may not be quite<br>&gt; finished yet<br>&gt;      to the next one and even”  // …<br>&gt;<br>&gt; Like in the convenient case of a trailing comma in a parameter list, I<br>&gt; added a last quote character so that I can add another string later,<br>&gt; without having to resort to the /cliche/ notion of a leading quote. and<br>&gt; like with trailing commas, it is just a placeholder because my string is<br>&gt; really finished for now!<br>&gt;<br>&gt;<br>&gt; Another convenient area where this reasoning could potentially be applied<br>&gt; might be logical expressions!!! The ability to anticipate on future needs<br>&gt; to change a logical expression might also be neat there by allowing<br>&gt; expressions like:<br>&gt;<br>&gt; if (cond1 &amp;&amp;<br>&gt;       cond2 &amp;&amp;) {<br>&gt; }<br>&gt;<br>&gt; which floats a lot than the overly tight:<br>&gt;<br>&gt; if (cond1<br>&gt;       &amp;&amp; cond2) {<br>&gt; }<br>&gt;<br>&gt; I think I’m convinced… it is such a powerful concept it should probably<br>&gt; extend to the english language at large and<br>&gt;<br>&gt; Cheers<br>&gt; LM/<br>&gt; [just in case, I hope everyone has seen the tongue-in-cheeks tone ;-) ]<br>&gt;<br>&gt; PS: can they actually be removed EVERYWHERE instead?!<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt; -Joe<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b1fc4ed1ed8e138ef0a87fd3e91c83a4?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Ricardo Parada</string> &lt;rparada at mac.com&gt;<p>May 12, 2016 at 08:00:00am</p></header><div class="content"><p>I agree. <br></p><p><br>&gt; On May 12, 2016, at 3:36 AM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Fully support your opinion.<br>&gt; <br>&gt; &gt; PS: can they actually be removed EVERYWHERE instead?!<br>&gt; <br>&gt; Yes, I believe it will be much better to propose feature to allow line break instead of comma, so we can have:<br>&gt; <br>&gt; let x = [10<br>&gt;    20<br>&gt;    30]<br>&gt; <br>&gt; let y = [1 : &quot;one&quot;<br>&gt;    2 : &quot;two&quot;]<br>&gt; <br>&gt; (from proposal):<br>&gt; <br>&gt; func padStringToLength(<br>&gt;    sourceString: String<br>&gt;    destinationCount: Int<br>&gt;    paddingStyle: StringPaddingStyle = .Left<br>&gt;    paddingCharacter: Character = &quot; &quot;<br>&gt; ) -&gt; String {<br>&gt;    /* ... */<br>&gt; }<br>&gt; <br>&gt; padStringToLength(<br>&gt;    sourceString: &quot;source&quot;<br>&gt;    destinationCount: 4<br>&gt;    paddingStyle: .Right<br>&gt;    paddingCharacter: &quot;&quot;<br>&gt; )<br>&gt; <br>&gt; let tuple: (<br>&gt;    string: String<br>&gt;    number: Int<br>&gt; ) = (<br>&gt;   string: &quot;string&quot;<br>&gt;   number: 0<br>&gt; )<br>&gt; <br>&gt; ...    &lt;SomeT<br>&gt;    SomeU<br>&gt;    SomeV&gt; ...<br>&gt; <br>&gt; This solves all the problems with diffs, makes code much clean and nice, no additional noise. Why we need these commas instead of this solution? IMO this will be real step forward.<br>&gt; <br>&gt; Is there such a proposal? (Or probably was discussed already?)<br>&gt; <br>&gt;&gt; On 12.05.2016 7:46, L Mihalkovic via swift-evolution wrote:<br>&gt;&gt; <br>&gt;&gt; -1 - for ever<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On May 11, 2016, at 6:47 PM, Joe Groff via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 10, 2016, at 11:53 AM, Chris Lattner via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The review of &quot;SE-0084: Allow trailing commas in parameter lists and<br>&gt;&gt;&gt;&gt; tuples&quot; begins now and runs through May 16. The proposal is available here:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0084-trailing-commas.md<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All<br>&gt;&gt;&gt;&gt; reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the<br>&gt;&gt;&gt;&gt; review manager.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The goal of the review process is to improve the proposal under review<br>&gt;&gt;&gt;&gt; through constructive criticism and contribute to the direction of Swift.<br>&gt;&gt;&gt;&gt; When writing your review, here are some questions you might want to<br>&gt;&gt;&gt;&gt; answer in your review:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; * What is your evaluation of the proposal?<br>&gt;&gt;&gt;&gt; * Is the problem being addressed significant enough to warrant a change<br>&gt;&gt;&gt;&gt; to Swift?<br>&gt;&gt;&gt;&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt;&gt; * If you have used other languages or libraries with a similar feature,<br>&gt;&gt;&gt;&gt; how do you feel that this proposal compares to those?<br>&gt;&gt;&gt;&gt; * How much effort did you put into your review? A glance, a quick<br>&gt;&gt;&gt;&gt; reading, or an in-depth study?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Chris Lattner<br>&gt;&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; +1 from me. We should be consistent in either accepting or rejecting<br>&gt;&gt;&gt; trailing commas everywhere we have comma-delimited syntax. I&#39;m in favor<br>&gt;&gt;&gt; of accepting it, since it&#39;s popular in languages where it&#39;s supported to<br>&gt;&gt;&gt; enable a minimal-diff style, so that changes to code don&#39;t impact<br>&gt;&gt;&gt; neighboring lines for purely syntactic reasons. If you add an argument to<br>&gt;&gt;&gt; a function, without trailing comma support, a comma has to be added to<br>&gt;&gt;&gt; dirty the previous line:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; --- a.swift<br>&gt;&gt;&gt; +++ a.swift<br>&gt;&gt;&gt; foo(<br>&gt;&gt;&gt;   x: 0,<br>&gt;&gt;&gt; -  y: 1<br>&gt;&gt;&gt; +  y: 1,<br>&gt;&gt;&gt; +  z: 2<br>&gt;&gt;&gt; )<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Trailing commas avoid this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; --- a.swift<br>&gt;&gt;&gt; +++ a.swift<br>&gt;&gt;&gt; foo(<br>&gt;&gt;&gt;   x: 0,<br>&gt;&gt;&gt;   y: 1,<br>&gt;&gt;&gt; +  z: 2,<br>&gt;&gt;&gt; )<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In languages that don&#39;t support trailing commas, many users resort to the<br>&gt;&gt;&gt; abomination of leading-comma style, strangely popular in Haskell and<br>&gt;&gt;&gt; related languages:<br>&gt;&gt; <br>&gt;&gt; I am not sure I understand where the “abomination” lies in using<br>&gt;&gt; leading-comma style… but I will try to see it.<br>&gt;&gt; <br>&gt;&gt;&gt; --- a.swift<br>&gt;&gt;&gt; +++ a.swift<br>&gt;&gt;&gt; foo( x: 0<br>&gt;&gt;&gt;    , y: 1<br>&gt;&gt;&gt; +   , z: 2<br>&gt;&gt;&gt;    )<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think the trailing-comma syntax jives much better with Swift style.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; If commas are to be construed as elegantly but meaninglessly dropped little<br>&gt;&gt; crumbs, then one can see why it might not matter where they go, or how many<br>&gt;&gt; there are, which as well as begging the question of allowing them at the<br>&gt;&gt; end, should equally prompt the question of completely removing them<br>&gt;&gt; altogether. And if having extras is just /great anticipation on future<br>&gt;&gt; needs/, should we think about considering the following lines as all equivalent<br>&gt;&gt; <br>&gt;&gt; let v0 = (1,<br>&gt;&gt;          2,<br>&gt;&gt;          3)<br>&gt;&gt; let v1 = (1,<br>&gt;&gt;          2,<br>&gt;&gt;          3,<br>&gt;&gt;         )<br>&gt;&gt; let v2 = (,        // just in case I want to add something at the front later?!<br>&gt;&gt;          1,<br>&gt;&gt;          2,<br>&gt;&gt;          3,)<br>&gt;&gt; let v3 = (1,<br>&gt;&gt;          2,<br>&gt;&gt;          ,<br>&gt;&gt;          3,<br>&gt;&gt;         )         // just in case I want to add something in the middle or<br>&gt;&gt; front later<br>&gt;&gt; let v4 = (1,,<br>&gt;&gt;          2,,<br>&gt;&gt;          3,,)   // lets be really good programmer, in case it doubles in<br>&gt;&gt; length<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Aside from the good-anticipation interpretation of trailing commas, there<br>&gt;&gt; is also the /thinking-interuptus/  line of interpretation:<br>&gt;&gt; <br>&gt;&gt; this and<br>&gt;&gt; that and<br>&gt;&gt; <br>&gt;&gt; standing for: now hold your breath, I am not done.. or maybe I lost my<br>&gt;&gt; train of thoughts so I am actually done… who knows.. read the next line to<br>&gt;&gt; figure that out.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; As I recall there is an ongoing debate about long string literal… Perhaps<br>&gt;&gt; this line of thinking can help there too?!!  Swift would become very unique<br>&gt;&gt; and progressive with something like:<br>&gt;&gt; <br>&gt;&gt; let var = this is a long string literal”  // notice my continuation quote<br>&gt;&gt; at the end<br>&gt;&gt;     which I am continuing to the”        // notice how I am letting people<br>&gt;&gt; know that, like my parameter list,<br>&gt;&gt;     next line and perhaps even”          // my string may not be quite<br>&gt;&gt; finished yet<br>&gt;&gt;     to the next one and even”  // …<br>&gt;&gt; <br>&gt;&gt; Like in the convenient case of a trailing comma in a parameter list, I<br>&gt;&gt; added a last quote character so that I can add another string later,<br>&gt;&gt; without having to resort to the /cliche/ notion of a leading quote. and<br>&gt;&gt; like with trailing commas, it is just a placeholder because my string is<br>&gt;&gt; really finished for now!<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Another convenient area where this reasoning could potentially be applied<br>&gt;&gt; might be logical expressions!!! The ability to anticipate on future needs<br>&gt;&gt; to change a logical expression might also be neat there by allowing<br>&gt;&gt; expressions like:<br>&gt;&gt; <br>&gt;&gt; if (cond1 &amp;&amp;<br>&gt;&gt;      cond2 &amp;&amp;) {<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; which floats a lot than the overly tight:<br>&gt;&gt; <br>&gt;&gt; if (cond1<br>&gt;&gt;      &amp;&amp; cond2) {<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; I think I’m convinced… it is such a powerful concept it should probably<br>&gt;&gt; extend to the english language at large and<br>&gt;&gt; <br>&gt;&gt; Cheers<br>&gt;&gt; LM/<br>&gt;&gt; [just in case, I hope everyone has seen the tongue-in-cheeks tone ;-) ]<br>&gt;&gt; <br>&gt;&gt; PS: can they actually be removed EVERYWHERE instead?!<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May 12, 2016 at 04:00:00pm</p></header><div class="content"><p>On May 11, 2016, at 9:47 AM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; +1 from me. We should be consistent in either accepting or rejecting trailing commas everywhere we have comma-delimited syntax. I&#39;m in favor of accepting it, since it&#39;s popular in languages where it&#39;s supported to enable a minimal-diff style, so that changes to code don&#39;t impact neighboring lines for purely syntactic reasons. If you add an argument to a function, without trailing comma support, a comma has to be added to dirty the previous line:<br>&gt; <br>&gt; 	--- a.swift<br>&gt; 	+++ a.swift<br>&gt; 	 foo(<br>&gt; 	   x: 0,<br>&gt; 	-  y: 1<br>&gt; 	+  y: 1,<br>&gt; 	+  z: 2<br>&gt; 	 )<br>&gt; <br>&gt; Trailing commas avoid this:<br>&gt; <br>&gt; 	--- a.swift<br>&gt; 	+++ a.swift<br>&gt; 	 foo(<br>&gt; 	   x: 0,<br>&gt; 	   y: 1,<br>&gt; 	+  z: 2,<br>&gt; 	 )<br></p><p>You’re arguing that you want to read Swift code written like this?<br></p><p>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160512/f42bac8c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May 12, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On May 12, 2016, at 4:47 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; On May 11, 2016, at 9:47 AM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt; +1 from me. We should be consistent in either accepting or rejecting trailing commas everywhere we have comma-delimited syntax. I&#39;m in favor of accepting it, since it&#39;s popular in languages where it&#39;s supported to enable a minimal-diff style, so that changes to code don&#39;t impact neighboring lines for purely syntactic reasons. If you add an argument to a function, without trailing comma support, a comma has to be added to dirty the previous line:<br>&gt;&gt; <br>&gt;&gt; 	--- a.swift<br>&gt;&gt; 	+++ a.swift<br>&gt;&gt; 	 foo(<br>&gt;&gt; 	   x: 0,<br>&gt;&gt; 	-  y: 1<br>&gt;&gt; 	+  y: 1,<br>&gt;&gt; 	+  z: 2<br>&gt;&gt; 	 )<br>&gt;&gt; <br>&gt;&gt; Trailing commas avoid this:<br>&gt;&gt; <br>&gt;&gt; 	--- a.swift<br>&gt;&gt; 	+++ a.swift<br>&gt;&gt; 	 foo(<br>&gt;&gt; 	   x: 0,<br>&gt;&gt; 	   y: 1,<br>&gt;&gt; 	+  z: 2,<br>&gt;&gt; 	 )<br>&gt; <br>&gt; You’re arguing that you want to read Swift code written like this?<br></p><p>I wouldn&#39;t mind it. The standard library already uses this style for function parameters, modulo the trailing comma, and I certainly prefer it to:<br>	<br>&gt; 	--- a.swift<br>&gt; 	+++ a.swift<br>&gt; 	 foo( x: 0<br>&gt; 	    , y: 1<br>&gt; 	+   , z: 2<br>&gt; 	    )<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May 12, 2016 at 10:00:00pm</p></header><div class="content"><p>On May 12, 2016, at 4:50 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt;&gt; 	--- a.swift<br>&gt;&gt;&gt; 	+++ a.swift<br>&gt;&gt;&gt; 	 foo(<br>&gt;&gt;&gt; 	   x: 0,<br>&gt;&gt;&gt; 	-  y: 1<br>&gt;&gt;&gt; 	+  y: 1,<br>&gt;&gt;&gt; 	+  z: 2<br>&gt;&gt;&gt; 	 )<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Trailing commas avoid this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	--- a.swift<br>&gt;&gt;&gt; 	+++ a.swift<br>&gt;&gt;&gt; 	 foo(<br>&gt;&gt;&gt; 	   x: 0,<br>&gt;&gt;&gt; 	   y: 1,<br>&gt;&gt;&gt; 	+  z: 2,<br>&gt;&gt;&gt; 	 )<br>&gt;&gt; <br>&gt;&gt; You’re arguing that you want to read Swift code written like this?<br>&gt; <br>&gt; I wouldn&#39;t mind it.<br></p><p>I personally find that style repulsive :-) and I haven’t seen swift code commonly doing it.  I’m not sure that we want to encourage it either.<br></p><p>&gt; The standard library already uses this style for function parameters, modulo the trailing comma, and I certainly prefer it to:<br>&gt; 	<br>&gt;&gt; 	--- a.swift<br>&gt;&gt; 	+++ a.swift<br>&gt;&gt; 	 foo( x: 0<br>&gt;&gt; 	    , y: 1<br>&gt;&gt; 	+   , z: 2<br>&gt;&gt; 	    )<br></p><p>I agree that this is even worse, but I also haven’t seen this used in Swift code.  Have you?   Swift’s strictness with argument labels makes any of this pretty unappealing to use.<br></p><p>If we were really concerned about this, a narrower way to solve the same problem would be to allow a comma before the ), but *only* when there is a newline between them.  I still don’t see why we’d want to encourage this though.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a06dd7924588141b9c907543798c2524?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Gwendal Roué</string> &lt;gwendal.roue at gmail.com&gt;<p>May 13, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; Le 13 mai 2016 à 07:01, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; On May 12, 2016, at 4:50 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt; 	--- a.swift<br>&gt;&gt;&gt;&gt; 	+++ a.swift<br>&gt;&gt;&gt;&gt; 	 foo(<br>&gt;&gt;&gt;&gt; 	   x: 0,<br>&gt;&gt;&gt;&gt; 	-  y: 1<br>&gt;&gt;&gt;&gt; 	+  y: 1,<br>&gt;&gt;&gt;&gt; 	+  z: 2<br>&gt;&gt;&gt;&gt; 	 )<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Trailing commas avoid this:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	--- a.swift<br>&gt;&gt;&gt;&gt; 	+++ a.swift<br>&gt;&gt;&gt;&gt; 	 foo(<br>&gt;&gt;&gt;&gt; 	   x: 0,<br>&gt;&gt;&gt;&gt; 	   y: 1,<br>&gt;&gt;&gt;&gt; 	+  z: 2,<br>&gt;&gt;&gt;&gt; 	 )<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; You’re arguing that you want to read Swift code written like this?<br>&gt;&gt; <br>&gt;&gt; I wouldn&#39;t mind it.<br>&gt; <br>&gt; I personally find that style repulsive :-) and I haven’t seen swift code commonly doing it.  I’m not sure that we want to encourage it either.<br></p><p>Don&#39;t be too harsh :-) This style can be used with much profit when there are several closure arguments:<br></p><p>	foo(<br>	    x: {<br>	        // several lines of code<br>	    },<br>	    y: {<br>	        // several lines of code<br>	    }<br>	)<br></p><p>For example: https://github.com/groue/GRDBDemo/blob/cd8b9d5cadc3c6c66fd0da4869d820c6624fdf79/GRDBDemo/PersonsViewController.swift#L12-L44<br></p><p>Gwendal Roué<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>May 13, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On May 13, 2016, at 7:58 AM, Gwendal Roué via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; Le 13 mai 2016 à 07:01, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; On May 12, 2016, at 4:50 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;    --- a.swift<br>&gt;&gt;&gt;&gt;&gt;    +++ a.swift<br>&gt;&gt;&gt;&gt;&gt;     foo(<br>&gt;&gt;&gt;&gt;&gt;       x: 0,<br>&gt;&gt;&gt;&gt;&gt;    -  y: 1<br>&gt;&gt;&gt;&gt;&gt;    +  y: 1,<br>&gt;&gt;&gt;&gt;&gt;    +  z: 2<br>&gt;&gt;&gt;&gt;&gt;     )<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Trailing commas avoid this:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;    --- a.swift<br>&gt;&gt;&gt;&gt;&gt;    +++ a.swift<br>&gt;&gt;&gt;&gt;&gt;     foo(<br>&gt;&gt;&gt;&gt;&gt;       x: 0,<br>&gt;&gt;&gt;&gt;&gt;       y: 1,<br>&gt;&gt;&gt;&gt;&gt;    +  z: 2,<br>&gt;&gt;&gt;&gt;&gt;     )<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; You’re arguing that you want to read Swift code written like this?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I wouldn&#39;t mind it.<br>&gt;&gt; <br>&gt;&gt; I personally find that style repulsive :-) and I haven’t seen swift code commonly doing it.  I’m not sure that we want to encourage it either.<br>&gt; <br>&gt; Don&#39;t be too harsh :-) This style can be used with much profit when there are several closure arguments:<br>&gt; <br>&gt;    foo(<br>&gt;        x: {<br>&gt;            // several lines of code<br>&gt;        },<br>&gt;        y: {<br>&gt;            // several lines of code<br>&gt;        }<br>&gt;    )<br>&gt; <br></p><p>Sorry, but this kind of code writing evokes to me the kind of stream-of-consciousness-scripting I was happy to leave behind when I quit perl (or the one *modern* Javascript is ridden with). But I get it, it is an age old psych principle that it is easier for us to ask to be enabled than it is to self-discipline ourselves. I think it is an addiction lambdas have enabled... why would I have to think about the large scale structure of what I do when I can shove a bunch instructions as a parameter. don&#39;t get me wrong, i use lambdas a lot in java, but I use method references as soon as it starts to look smell like I am about to stuff all the logic as parameters.<br></p><p>Regards<br>LM<br>(From mobile)<br></p><p><br></p><p><br>&gt; For example: https://github.com/groue/GRDBDemo/blob/cd8b9d5cadc3c6c66fd0da4869d820c6624fdf79/GRDBDemo/PersonsViewController.swift#L12-L44<br>&gt; <br>&gt; Gwendal Roué<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c74c15ba14b1096d4e42900ddd2dacd0?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Patrick Smith</string> &lt;pgwsmith at gmail.com&gt;<p>May 13, 2016 at 04:00:00pm</p></header><div class="content"><p>I do it quite a lot, especially for initialising structs, enums. I use it to get the same benefits as a switch statement spread over several lines.<br></p><p>I think it’s often good to liberally apply new lines, as it aids legibility.<br></p><p>Here some sample code of mine using it:<br></p><p>extension ImageGraphic : JSONObjectRepresentable {<br>	public init(source: JSONObjectDecoder) throws {<br>		try self.init(<br>			imageSource: source.decode(&quot;imageSource&quot;),<br>			width: source.decodeOptional(&quot;width&quot;),<br>			height: source.decodeOptional(&quot;height&quot;)<br>		)<br>	}<br>	<br>	public func toJSON() -&gt; JSON {<br>		return .ObjectValue([<br>			&quot;imageSource&quot;: imageSource.toJSON(),<br>			&quot;width&quot;: width.toJSON(),<br>			&quot;height&quot;: height.toJSON()<br>		])<br>	}<br>}<br></p><p><br>&gt; On 13 May 2016, at 3:01 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On May 12, 2016, at 4:50 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt; 	--- a.swift<br>&gt;&gt;&gt;&gt; 	+++ a.swift<br>&gt;&gt;&gt;&gt; 	 foo(<br>&gt;&gt;&gt;&gt; 	   x: 0,<br>&gt;&gt;&gt;&gt; 	-  y: 1<br>&gt;&gt;&gt;&gt; 	+  y: 1,<br>&gt;&gt;&gt;&gt; 	+  z: 2<br>&gt;&gt;&gt;&gt; 	 )<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Trailing commas avoid this:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	--- a.swift<br>&gt;&gt;&gt;&gt; 	+++ a.swift<br>&gt;&gt;&gt;&gt; 	 foo(<br>&gt;&gt;&gt;&gt; 	   x: 0,<br>&gt;&gt;&gt;&gt; 	   y: 1,<br>&gt;&gt;&gt;&gt; 	+  z: 2,<br>&gt;&gt;&gt;&gt; 	 )<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; You’re arguing that you want to read Swift code written like this?<br>&gt;&gt; <br>&gt;&gt; I wouldn&#39;t mind it.<br>&gt; <br>&gt; I personally find that style repulsive :-) and I haven’t seen swift code commonly doing it.  I’m not sure that we want to encourage it either.<br>&gt; <br>&gt;&gt; The standard library already uses this style for function parameters, modulo the trailing comma, and I certainly prefer it to:<br>&gt;&gt; 	<br>&gt;&gt;&gt; 	--- a.swift<br>&gt;&gt;&gt; 	+++ a.swift<br>&gt;&gt;&gt; 	 foo( x: 0<br>&gt;&gt;&gt; 	    , y: 1<br>&gt;&gt;&gt; 	+   , z: 2<br>&gt;&gt;&gt; 	    )<br>&gt; <br>&gt; I agree that this is even worse, but I also haven’t seen this used in Swift code.  Have you?   Swift’s strictness with argument labels makes any of this pretty unappealing to use.<br>&gt; <br>&gt; If we were really concerned about this, a narrower way to solve the same problem would be to allow a comma before the ), but *only* when there is a newline between them.  I still don’t see why we’d want to encourage this though.<br>&gt; <br>&gt; -Chris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>May 13, 2016 at 09:00:00am</p></header><div class="content"><p>It seems like all problems could be solved by allowing line-break instead <br>of comma in list:<br></p><p>	public init(source: JSONObjectDecoder) throws {<br>		try self.init(<br>			imageSource: source.decode(&quot;imageSource&quot;)<br>			width: source.decodeOptional(&quot;width&quot;)<br>			height: source.decodeOptional(&quot;height&quot;)<br>		)<br>	}<br>	<br>	public func toJSON() -&gt; JSON {<br>		return .ObjectValue([<br>			&quot;imageSource&quot;: imageSource.toJSON()<br>			&quot;width&quot;: width.toJSON()<br>			&quot;height&quot;: height.toJSON()<br>		])<br>	}<br></p><p>Shouldn&#39;t we move in that direction? Probably in addition to allow trailing <br>comma just to allow one to use his/her preferable formatting<br></p><p>On 13.05.2016 9:07, Patrick Smith via swift-evolution wrote:<br>&gt; I do it quite a lot, especially for initialising structs, enums. I use it to get the same benefits as a switch statement spread over several lines.<br>&gt;<br>&gt; I think it’s often good to liberally apply new lines, as it aids legibility.<br>&gt;<br>&gt; Here some sample code of mine using it:<br>&gt;<br>&gt; extension ImageGraphic : JSONObjectRepresentable {<br>&gt; 	public init(source: JSONObjectDecoder) throws {<br>&gt; 		try self.init(<br>&gt; 			imageSource: source.decode(&quot;imageSource&quot;),<br>&gt; 			width: source.decodeOptional(&quot;width&quot;),<br>&gt; 			height: source.decodeOptional(&quot;height&quot;)<br>&gt; 		)<br>&gt; 	}<br>&gt; 	<br>&gt; 	public func toJSON() -&gt; JSON {<br>&gt; 		return .ObjectValue([<br>&gt; 			&quot;imageSource&quot;: imageSource.toJSON(),<br>&gt; 			&quot;width&quot;: width.toJSON(),<br>&gt; 			&quot;height&quot;: height.toJSON()<br>&gt; 		])<br>&gt; 	}<br>&gt; }<br>&gt;<br>&gt;<br>&gt;&gt; On 13 May 2016, at 3:01 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On May 12, 2016, at 4:50 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; 	--- a.swift<br>&gt;&gt;&gt;&gt;&gt; 	+++ a.swift<br>&gt;&gt;&gt;&gt;&gt; 	 foo(<br>&gt;&gt;&gt;&gt;&gt; 	   x: 0,<br>&gt;&gt;&gt;&gt;&gt; 	-  y: 1<br>&gt;&gt;&gt;&gt;&gt; 	+  y: 1,<br>&gt;&gt;&gt;&gt;&gt; 	+  z: 2<br>&gt;&gt;&gt;&gt;&gt; 	 )<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Trailing commas avoid this:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; 	--- a.swift<br>&gt;&gt;&gt;&gt;&gt; 	+++ a.swift<br>&gt;&gt;&gt;&gt;&gt; 	 foo(<br>&gt;&gt;&gt;&gt;&gt; 	   x: 0,<br>&gt;&gt;&gt;&gt;&gt; 	   y: 1,<br>&gt;&gt;&gt;&gt;&gt; 	+  z: 2,<br>&gt;&gt;&gt;&gt;&gt; 	 )<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; You’re arguing that you want to read Swift code written like this?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I wouldn&#39;t mind it.<br>&gt;&gt;<br>&gt;&gt; I personally find that style repulsive :-) and I haven’t seen swift code commonly doing it.  I’m not sure that we want to encourage it either.<br>&gt;&gt;<br>&gt;&gt;&gt; The standard library already uses this style for function parameters, modulo the trailing comma, and I certainly prefer it to:<br>&gt;&gt;&gt; 	<br>&gt;&gt;&gt;&gt; 	--- a.swift<br>&gt;&gt;&gt;&gt; 	+++ a.swift<br>&gt;&gt;&gt;&gt; 	 foo( x: 0<br>&gt;&gt;&gt;&gt; 	    , y: 1<br>&gt;&gt;&gt;&gt; 	+   , z: 2<br>&gt;&gt;&gt;&gt; 	    )<br>&gt;&gt;<br>&gt;&gt; I agree that this is even worse, but I also haven’t seen this used in Swift code.  Have you?   Swift’s strictness with argument labels makes any of this pretty unappealing to use.<br>&gt;&gt;<br>&gt;&gt; If we were really concerned about this, a narrower way to solve the same problem would be to allow a comma before the ), but *only* when there is a newline between them.  I still don’t see why we’d want to encourage this though.<br>&gt;&gt;<br>&gt;&gt; -Chris<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c74c15ba14b1096d4e42900ddd2dacd0?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Patrick Smith</string> &lt;pgwsmith at gmail.com&gt;<p>May 13, 2016 at 04:00:00pm</p></header><div class="content"><p>I forgot to add I like this style particularly as it matches how the type is declared (below). There’s a symmetry between them all. Obviously each var in a struct doesn’t need a comma between it, so it would be nice to not have to type them in the other cases too!<br></p><p>public struct ImageGraphic : GraphicType {<br>	var imageSource: ImageSource<br>	var width: Dimension?<br>	var height: Dimension?<br>}<br></p><p><br>&gt; On 13 May 2016, at 4:22 PM, Vladimir.S &lt;svabox at gmail.com&gt; wrote:<br>&gt; <br>&gt; It seems like all problems could be solved by allowing line-break instead of comma in list:<br>&gt; <br>&gt; 	public init(source: JSONObjectDecoder) throws {<br>&gt; 		try self.init(<br>&gt; 			imageSource: source.decode(&quot;imageSource&quot;)<br>&gt; 			width: source.decodeOptional(&quot;width&quot;)<br>&gt; 			height: source.decodeOptional(&quot;height&quot;)<br>&gt; 		)<br>&gt; 	}<br>&gt; 	<br>&gt; 	public func toJSON() -&gt; JSON {<br>&gt; 		return .ObjectValue([<br>&gt; 			&quot;imageSource&quot;: imageSource.toJSON()<br>&gt; 			&quot;width&quot;: width.toJSON()<br>&gt; 			&quot;height&quot;: height.toJSON()<br>&gt; 		])<br>&gt; 	}<br>&gt; <br>&gt; Shouldn&#39;t we move in that direction? Probably in addition to allow trailing comma just to allow one to use his/her preferable formatting<br>&gt; <br>&gt; On 13.05.2016 9:07, Patrick Smith via swift-evolution wrote:<br>&gt;&gt; I do it quite a lot, especially for initialising structs, enums. I use it to get the same benefits as a switch statement spread over several lines.<br>&gt;&gt; <br>&gt;&gt; I think it’s often good to liberally apply new lines, as it aids legibility.<br>&gt;&gt; <br>&gt;&gt; Here some sample code of mine using it:<br>&gt;&gt; <br>&gt;&gt; extension ImageGraphic : JSONObjectRepresentable {<br>&gt;&gt; 	public init(source: JSONObjectDecoder) throws {<br>&gt;&gt; 		try self.init(<br>&gt;&gt; 			imageSource: source.decode(&quot;imageSource&quot;),<br>&gt;&gt; 			width: source.decodeOptional(&quot;width&quot;),<br>&gt;&gt; 			height: source.decodeOptional(&quot;height&quot;)<br>&gt;&gt; 		)<br>&gt;&gt; 	}<br>&gt;&gt; 	<br>&gt;&gt; 	public func toJSON() -&gt; JSON {<br>&gt;&gt; 		return .ObjectValue([<br>&gt;&gt; 			&quot;imageSource&quot;: imageSource.toJSON(),<br>&gt;&gt; 			&quot;width&quot;: width.toJSON(),<br>&gt;&gt; 			&quot;height&quot;: height.toJSON()<br>&gt;&gt; 		])<br>&gt;&gt; 	}<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 13 May 2016, at 3:01 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On May 12, 2016, at 4:50 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; 	--- a.swift<br>&gt;&gt;&gt;&gt;&gt;&gt; 	+++ a.swift<br>&gt;&gt;&gt;&gt;&gt;&gt; 	 foo(<br>&gt;&gt;&gt;&gt;&gt;&gt; 	   x: 0,<br>&gt;&gt;&gt;&gt;&gt;&gt; 	-  y: 1<br>&gt;&gt;&gt;&gt;&gt;&gt; 	+  y: 1,<br>&gt;&gt;&gt;&gt;&gt;&gt; 	+  z: 2<br>&gt;&gt;&gt;&gt;&gt;&gt; 	 )<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Trailing commas avoid this:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 	--- a.swift<br>&gt;&gt;&gt;&gt;&gt;&gt; 	+++ a.swift<br>&gt;&gt;&gt;&gt;&gt;&gt; 	 foo(<br>&gt;&gt;&gt;&gt;&gt;&gt; 	   x: 0,<br>&gt;&gt;&gt;&gt;&gt;&gt; 	   y: 1,<br>&gt;&gt;&gt;&gt;&gt;&gt; 	+  z: 2,<br>&gt;&gt;&gt;&gt;&gt;&gt; 	 )<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; You’re arguing that you want to read Swift code written like this?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I wouldn&#39;t mind it.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I personally find that style repulsive :-) and I haven’t seen swift code commonly doing it.  I’m not sure that we want to encourage it either.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The standard library already uses this style for function parameters, modulo the trailing comma, and I certainly prefer it to:<br>&gt;&gt;&gt;&gt; 	<br>&gt;&gt;&gt;&gt;&gt; 	--- a.swift<br>&gt;&gt;&gt;&gt;&gt; 	+++ a.swift<br>&gt;&gt;&gt;&gt;&gt; 	 foo( x: 0<br>&gt;&gt;&gt;&gt;&gt; 	    , y: 1<br>&gt;&gt;&gt;&gt;&gt; 	+   , z: 2<br>&gt;&gt;&gt;&gt;&gt; 	    )<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I agree that this is even worse, but I also haven’t seen this used in Swift code.  Have you?   Swift’s strictness with argument labels makes any of this pretty unappealing to use.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If we were really concerned about this, a narrower way to solve the same problem would be to allow a comma before the ), but *only* when there is a newline between them.  I still don’t see why we’d want to encourage this though.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>May 13, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On May 13, 2016, at 8:31 AM, Patrick Smith via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I forgot to add I like this style particularly as it matches how the type is declared (below). There’s a symmetry between them all. Obviously each var in a struct doesn’t need a comma between it, so it would be nice to not have to type them in the other cases too!<br>&gt; <br>&gt; public struct ImageGraphic : GraphicType {<br>&gt;    var imageSource: ImageSource<br>&gt;    var width: Dimension?<br>&gt;    var height: Dimension?<br>&gt; }<br>&gt; <br></p><p>Hate to admit it (i write my code such that i can use &quot;, xxxx&quot; as a search pattern, especially with editors/IDEs that have a poot level of understanding of what I am typing - Did I mention somewhere this idea of a new @string_literal(&quot;text/json&quot;) attribute to help them make some sense of what those magic quoted-holes contain??!), but I actually am growing fonder of this by the day... I can even find it logical considering other grammar-fragments use the same heuristic to get rid of their own separation markers (like ;)<br></p><p><br>&gt; <br>&gt;&gt; On 13 May 2016, at 4:22 PM, Vladimir.S &lt;svabox at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; It seems like all problems could be solved by allowing line-break instead of comma in list:<br>&gt;&gt; <br>&gt;&gt;    public init(source: JSONObjectDecoder) throws {<br>&gt;&gt;        try self.init(<br>&gt;&gt;            imageSource: source.decode(&quot;imageSource&quot;)<br>&gt;&gt;            width: source.decodeOptional(&quot;width&quot;)<br>&gt;&gt;            height: source.decodeOptional(&quot;height&quot;)<br>&gt;&gt;        )<br>&gt;&gt;    }<br>&gt;&gt;    <br>&gt;&gt;    public func toJSON() -&gt; JSON {<br>&gt;&gt;        return .ObjectValue([<br>&gt;&gt;            &quot;imageSource&quot;: imageSource.toJSON()<br>&gt;&gt;            &quot;width&quot;: width.toJSON()<br>&gt;&gt;            &quot;height&quot;: height.toJSON()<br>&gt;&gt;        ])<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt; Shouldn&#39;t we move in that direction? Probably in addition to allow trailing comma just to allow one to use his/her preferable formatting<br>&gt;&gt; <br>&gt;&gt;&gt; On 13.05.2016 9:07, Patrick Smith via swift-evolution wrote:<br>&gt;&gt;&gt; I do it quite a lot, especially for initialising structs, enums. I use it to get the same benefits as a switch statement spread over several lines.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think it’s often good to liberally apply new lines, as it aids legibility.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Here some sample code of mine using it:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; extension ImageGraphic : JSONObjectRepresentable {<br>&gt;&gt;&gt;    public init(source: JSONObjectDecoder) throws {<br>&gt;&gt;&gt;        try self.init(<br>&gt;&gt;&gt;            imageSource: source.decode(&quot;imageSource&quot;),<br>&gt;&gt;&gt;            width: source.decodeOptional(&quot;width&quot;),<br>&gt;&gt;&gt;            height: source.decodeOptional(&quot;height&quot;)<br>&gt;&gt;&gt;        )<br>&gt;&gt;&gt;    }<br>&gt;&gt;&gt;    <br>&gt;&gt;&gt;    public func toJSON() -&gt; JSON {<br>&gt;&gt;&gt;        return .ObjectValue([<br>&gt;&gt;&gt;            &quot;imageSource&quot;: imageSource.toJSON(),<br>&gt;&gt;&gt;            &quot;width&quot;: width.toJSON(),<br>&gt;&gt;&gt;            &quot;height&quot;: height.toJSON()<br>&gt;&gt;&gt;        ])<br>&gt;&gt;&gt;    }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 13 May 2016, at 3:01 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 12, 2016, at 4:50 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;    --- a.swift<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;    +++ a.swift<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     foo(<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;       x: 0,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;    -  y: 1<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;    +  y: 1,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;    +  z: 2<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     )<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Trailing commas avoid this:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;    --- a.swift<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;    +++ a.swift<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     foo(<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;       x: 0,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;       y: 1,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;    +  z: 2,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     )<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; You’re arguing that you want to read Swift code written like this?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I wouldn&#39;t mind it.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I personally find that style repulsive :-) and I haven’t seen swift code commonly doing it.  I’m not sure that we want to encourage it either.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The standard library already uses this style for function parameters, modulo the trailing comma, and I certainly prefer it to:<br>&gt;&gt;&gt;&gt;&gt;    <br>&gt;&gt;&gt;&gt;&gt;&gt;    --- a.swift<br>&gt;&gt;&gt;&gt;&gt;&gt;    +++ a.swift<br>&gt;&gt;&gt;&gt;&gt;&gt;     foo( x: 0<br>&gt;&gt;&gt;&gt;&gt;&gt;        , y: 1<br>&gt;&gt;&gt;&gt;&gt;&gt;    +   , z: 2<br>&gt;&gt;&gt;&gt;&gt;&gt;        )<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I agree that this is even worse, but I also haven’t seen this used in Swift code.  Have you?   Swift’s strictness with argument labels makes any of this pretty unappealing to use.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If we were really concerned about this, a narrower way to solve the same problem would be to allow a comma before the ), but *only* when there is a newline between them.  I still don’t see why we’d want to encourage this though.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/79d9ba388d6b6cf4ec7310cad9fa8c8a?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Rob Allen</string> &lt;rob at akrabat.com&gt;<p>May 13, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On 13 May 2016, at 07:22, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; It seems like all problems could be solved by allowing line-break instead of comma in list:<br></p><p><br>For what it&#39;s worth, I&#39;m very much in favour of this idea of allowing line breaks instead of commas in lists.<br></p><p>I&#39;m neutral on trailing commas in the parameter lists &amp; tuples. I can the the consistency argument, but think that trailing commas should only be used for multi-line lists; in which case a new line character is better as there would be less visual clutter without any of the commas.<br></p><p><br>Regards,<br></p><p>Rob...<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 13, 2016 at 08:00:00am</p></header><div class="content"><p>Sent from my iPad<br></p><p>&gt; On May 13, 2016, at 1:07 AM, Patrick Smith via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I do it quite a lot, especially for initialising structs, enums. I use it to get the same benefits as a switch statement spread over several lines.<br>&gt; <br>&gt; I think it’s often good to liberally apply new lines, as it aids legibility.<br>&gt; <br>&gt; Here some sample code of mine using it:<br>&gt; <br>&gt; extension ImageGraphic : JSONObjectRepresentable {<br>&gt;    public init(source: JSONObjectDecoder) throws {<br>&gt;        try self.init(<br>&gt;            imageSource: source.decode(&quot;imageSource&quot;),<br>&gt;            width: source.decodeOptional(&quot;width&quot;),<br>&gt;            height: source.decodeOptional(&quot;height&quot;)<br>&gt;        )<br>&gt;    }<br></p><p>+1 to the initialization use case.  You can do type-safe embedded data this way.  Similar to embedding JSON directly, but with type checking and no need for parsing.  In that use case the initializer calls may be intermingled with arrays and may have defaulted parameters.<br></p><p>If that use case matters at all allowing trailing commas in the arrays but not the initializer calls would *feel* inconsistent regardless of the technical distinction.<br></p><p><br>&gt;    <br>&gt;    public func toJSON() -&gt; JSON {<br>&gt;        return .ObjectValue([<br>&gt;            &quot;imageSource&quot;: imageSource.toJSON(),<br>&gt;            &quot;width&quot;: width.toJSON(),<br>&gt;            &quot;height&quot;: height.toJSON()<br>&gt;        ])<br>&gt;    }<br>&gt; }<br>&gt; <br>&gt; <br>&gt;&gt; On 13 May 2016, at 3:01 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On May 12, 2016, at 4:50 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;    --- a.swift<br>&gt;&gt;&gt;&gt;&gt;    +++ a.swift<br>&gt;&gt;&gt;&gt;&gt;     foo(<br>&gt;&gt;&gt;&gt;&gt;       x: 0,<br>&gt;&gt;&gt;&gt;&gt;    -  y: 1<br>&gt;&gt;&gt;&gt;&gt;    +  y: 1,<br>&gt;&gt;&gt;&gt;&gt;    +  z: 2<br>&gt;&gt;&gt;&gt;&gt;     )<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Trailing commas avoid this:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;    --- a.swift<br>&gt;&gt;&gt;&gt;&gt;    +++ a.swift<br>&gt;&gt;&gt;&gt;&gt;     foo(<br>&gt;&gt;&gt;&gt;&gt;       x: 0,<br>&gt;&gt;&gt;&gt;&gt;       y: 1,<br>&gt;&gt;&gt;&gt;&gt;    +  z: 2,<br>&gt;&gt;&gt;&gt;&gt;     )<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; You’re arguing that you want to read Swift code written like this?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I wouldn&#39;t mind it.<br>&gt;&gt; <br>&gt;&gt; I personally find that style repulsive :-) and I haven’t seen swift code commonly doing it.  I’m not sure that we want to encourage it either.<br>&gt;&gt; <br>&gt;&gt;&gt; The standard library already uses this style for function parameters, modulo the trailing comma, and I certainly prefer it to:<br>&gt;&gt;&gt;    <br>&gt;&gt;&gt;&gt;    --- a.swift<br>&gt;&gt;&gt;&gt;    +++ a.swift<br>&gt;&gt;&gt;&gt;     foo( x: 0<br>&gt;&gt;&gt;&gt;        , y: 1<br>&gt;&gt;&gt;&gt;    +   , z: 2<br>&gt;&gt;&gt;&gt;        )<br>&gt;&gt; <br>&gt;&gt; I agree that this is even worse, but I also haven’t seen this used in Swift code.  Have you?   Swift’s strictness with argument labels makes any of this pretty unappealing to use.<br>&gt;&gt; <br>&gt;&gt; If we were really concerned about this, a narrower way to solve the same problem would be to allow a comma before the ), but *only* when there is a newline between them.  I still don’t see why we’d want to encourage this though.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>May 13, 2016 at 09:00:00am</p></header><div class="content"><p>IMO If we were *really* concerned about this, we should just allow <br>line-break as separator in comma-separated lists.<br></p><p>On 13.05.2016 8:01, Chris Lattner via swift-evolution wrote:<br>&gt; If we were really concerned about this, a narrower way to solve the same problem would be to allow a comma before the ), but *only* when there is a newline between them.  I still don’t see why we’d want to encourage this though.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 13, 2016 at 08:00:00am</p></header><div class="content"><p>I am, +1 on allowing new lines instead of commas.  I suggest you pursue a proposal on that.<br></p><p>I am also +1 on the current proposal because it exists and will be pretty useful in some cases and I can&#39;t predict how long it might be until such a new line proposal would be approved.  I also think that the choice between them should be a style choice, not one made by the language (as with semicolon) and if anyone chooses commas they should have the utility of the current proposal available to them.<br></p><p>Sent from my iPad<br></p><p>&gt; On May 13, 2016, at 1:24 AM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; IMO If we were *really* concerned about this, we should just allow line-break as separator in comma-separated lists.<br>&gt; <br>&gt;&gt; On 13.05.2016 8:01, Chris Lattner via swift-evolution wrote:<br>&gt;&gt; If we were really concerned about this, a narrower way to solve the same problem would be to allow a comma before the ), but *only* when there is a newline between them.  I still don’t see why we’d want to encourage this though.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>May 13, 2016 at 05:00:00pm</p></header><div class="content"><p>On 13.05.2016 16:32, Matthew Johnson wrote:<br>&gt; I am, +1 on allowing new lines instead of commas.  I suggest you pursue a proposal on that.<br></p><p>Unfortunately I have no ability for this right now, so someone who is <br>interested in this could take the idea and create a &#39;formal&#39; proposal.<br></p><p>&gt;<br>&gt; I am also +1 on the current proposal because it exists and will be pretty useful in some cases and I can&#39;t predict how long it might be until such a new line proposal would be approved.  I also think that the choice between them should be a style choice, not one made by the language (as with semicolon) and if anyone chooses commas they should have the utility of the current proposal available to them.<br></p><p>Don&#39;t you feel like this proposal(SE-0084) should be extended to list of <br>generic types at least, or even to allow trailing comma in any <br>comma-separated list in Swift? I.e. you are saying +1, but probably the <br>exact proposal should be improved to have your +1.<br></p><p>Probably (if this is allowed) the author of this proposal (SE-0084) can add <br>&#39;line-break separator feature&#39; to his/her proposal and generalize the rule <br>of trailing comma/line-breaks for any comma-separated list in Swift?<br></p><p>As I can see, the proposal SE-0084 &#39;per se&#39; has more negative comments than <br>positive(even if some from @apple.com supports it) and I feel like extended <br>proposal can have more support.<br></p><p>&gt;<br>&gt; Sent from my iPad<br>&gt;<br>&gt;&gt; On May 13, 2016, at 1:24 AM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; IMO If we were *really* concerned about this, we should just allow line-break as separator in comma-separated lists.<br>&gt;&gt;<br>&gt;&gt;&gt; On 13.05.2016 8:01, Chris Lattner via swift-evolution wrote:<br>&gt;&gt;&gt; If we were really concerned about this, a narrower way to solve the same problem would be to allow a comma before the ), but *only* when there is a newline between them.  I still don’t see why we’d want to encourage this though.<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 13, 2016 at 09:00:00am</p></header><div class="content"><p>Sent from my iPad<br></p><p>&gt; On May 13, 2016, at 9:19 AM, Vladimir.S &lt;svabox at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; On 13.05.2016 16:32, Matthew Johnson wrote:<br>&gt;&gt; I am, +1 on allowing new lines instead of commas.  I suggest you pursue a proposal on that.<br>&gt; <br>&gt; Unfortunately I have no ability for this right now, so someone who is interested in this could take the idea and create a &#39;formal&#39; proposal.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; I am also +1 on the current proposal because it exists and will be pretty useful in some cases and I can&#39;t predict how long it might be until such a new line proposal would be approved.  I also think that the choice between them should be a style choice, not one made by the language (as with semicolon) and if anyone chooses commas they should have the utility of the current proposal available to them.<br>&gt; <br>&gt; Don&#39;t you feel like this proposal(SE-0084) should be extended to list of generic types at least, or even to allow trailing comma in any comma-separated list in Swift? I.e. you are saying +1, but probably the exact proposal should be improved to have your +1.<br></p><p>I have no opinion on that.  I don&#39;t object to it being done in the name of consistency but can&#39;t think of any actual use cases either.<br>&gt; <br>&gt; Probably (if this is allowed) the author of this proposal (SE-0084) can add &#39;line-break separator feature&#39; to his/her proposal and generalize the rule of trailing comma/line-breaks for any comma-separated list in Swift?<br></p><p>That feels like a separate proposal to me.<br>&gt; <br>&gt; As I can see, the proposal SE-0084 &#39;per se&#39; has more negative comments than positive(even if some from @apple.com supports it) and I feel like extended proposal can have more support.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Sent from my iPad<br>&gt;&gt; <br>&gt;&gt;&gt; On May 13, 2016, at 1:24 AM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; IMO If we were *really* concerned about this, we should just allow line-break as separator in comma-separated lists.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 13.05.2016 8:01, Chris Lattner via swift-evolution wrote:<br>&gt;&gt;&gt;&gt; If we were really concerned about this, a narrower way to solve the same problem would be to allow a comma before the ), but *only* when there is a newline between them.  I still don’t see why we’d want to encourage this though.<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May 13, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On May 13, 2016, at 7:32 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; Sent from my iPad<br>&gt; <br>&gt;&gt; On May 13, 2016, at 9:19 AM, Vladimir.S &lt;svabox at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On 13.05.2016 16:32, Matthew Johnson wrote:<br>&gt;&gt;&gt; I am, +1 on allowing new lines instead of commas.  I suggest you pursue a proposal on that.<br>&gt;&gt; <br>&gt;&gt; Unfortunately I have no ability for this right now, so someone who is interested in this could take the idea and create a &#39;formal&#39; proposal.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I am also +1 on the current proposal because it exists and will be pretty useful in some cases and I can&#39;t predict how long it might be until such a new line proposal would be approved.  I also think that the choice between them should be a style choice, not one made by the language (as with semicolon) and if anyone chooses commas they should have the utility of the current proposal available to them.<br>&gt;&gt; <br>&gt;&gt; Don&#39;t you feel like this proposal(SE-0084) should be extended to list of generic types at least, or even to allow trailing comma in any comma-separated list in Swift? I.e. you are saying +1, but probably the exact proposal should be improved to have your +1.<br>&gt; <br>&gt; I have no opinion on that.  I don&#39;t object to it being done in the name of consistency but can&#39;t think of any actual use cases either.<br>&gt;&gt; <br>&gt;&gt; Probably (if this is allowed) the author of this proposal (SE-0084) can add &#39;line-break separator feature&#39; to his/her proposal and generalize the rule of trailing comma/line-breaks for any comma-separated list in Swift?<br>&gt; <br>&gt; That feels like a separate proposal to me.<br></p><p>I agree, allowing commas to be elided at line breaks is an interesting direction that deserves its own discussion. One problem that immediately comes to my mind is commas in generic parameter lists. If commas aren&#39;t required in generic parameter lists, it becomes even more challenging to disambiguate with less-than/greater-than expressions at top level, compromising our ability to shed `.self` for this purpose.<br></p><p>-Joe<br></p><p>&gt;&gt; <br>&gt;&gt; As I can see, the proposal SE-0084 &#39;per se&#39; has more negative comments than positive(even if some from @apple.com supports it) and I feel like extended proposal can have more support.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 13, 2016, at 1:24 AM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; IMO If we were *really* concerned about this, we should just allow line-break as separator in comma-separated lists.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 13.05.2016 8:01, Chris Lattner via swift-evolution wrote:<br>&gt;&gt;&gt;&gt;&gt; If we were really concerned about this, a narrower way to solve the same problem would be to allow a comma before the ), but *only* when there is a newline between them.  I still don’t see why we’d want to encourage this though.<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>May 13, 2016 at 09:00:00am</p></header><div class="content"><p>Regards<br>(From mobile)<br></p><p>&gt; On May 13, 2016, at 7:01 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On May 12, 2016, at 4:50 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;    --- a.swift<br>&gt;&gt;&gt;&gt;    +++ a.swift<br>&gt;&gt;&gt;&gt;     foo(<br>&gt;&gt;&gt;&gt;       x: 0,<br>&gt;&gt;&gt;&gt;    -  y: 1<br>&gt;&gt;&gt;&gt;    +  y: 1,<br>&gt;&gt;&gt;&gt;    +  z: 2<br>&gt;&gt;&gt;&gt;     )<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Trailing commas avoid this:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;    --- a.swift<br>&gt;&gt;&gt;&gt;    +++ a.swift<br>&gt;&gt;&gt;&gt;     foo(<br>&gt;&gt;&gt;&gt;       x: 0,<br>&gt;&gt;&gt;&gt;       y: 1,<br>&gt;&gt;&gt;&gt;    +  z: 2,<br>&gt;&gt;&gt;&gt;     )<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; You’re arguing that you want to read Swift code written like this?<br>&gt;&gt; <br>&gt;&gt; I wouldn&#39;t mind it.<br>&gt; <br>&gt; I personally find that style repulsive :-) and I haven’t seen swift code commonly doing it.  I’m not sure that we want to encourage it either.<br>&gt; <br>&gt;&gt; The standard library already uses this style for function parameters, modulo the trailing comma, and I certainly prefer it to:<br>&gt;&gt;    <br>&gt;&gt;&gt;    --- a.swift<br>&gt;&gt;&gt;    +++ a.swift<br>&gt;&gt;&gt;     foo( x: 0<br>&gt;&gt;&gt;        , y: 1<br>&gt;&gt;&gt;    +   , z: 2<br>&gt;&gt;&gt;        )<br>&gt; <br>&gt; I agree that this is even worse, but I also haven’t seen this used in Swift code.  Have you?   Swift’s strictness with argument labels makes any of this pretty unappealing to use.<br>&gt; <br>&gt; If we were really concerned about this, a narrower way to solve the same problem would be to allow a comma before the ), but *only* when there is a newline between them.  I still don’t see why we’d want to encourage this though.<br>&gt; <br></p><p>did I read it correctly:  &quot;swift allows (rogue) commas at the end of a method invocation iif it is immediately followed by a single newline, itself followed by any amount of whitespace characters and a closing bracket&quot;.  will it satisfy the people it is designed to appeal to?<br></p><p><br>&gt; -Chris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>May 13, 2016 at 08:00:00am</p></header><div class="content"><p>On May 12, 2016, at 11:01 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; On May 12, 2016, at 4:50 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt;&gt; You’re arguing that you want to read Swift code written like this?<br>&gt;&gt; <br>&gt;&gt; I wouldn&#39;t mind it.<br>&gt; <br>&gt; I personally find that style repulsive :-) and I haven’t seen swift code commonly doing it.  I’m not sure that we want to encourage it either.<br>&gt; <br></p><p>No. Tell us what you *really* think of the style. Don&#39;t hold back.[1]<br></p><p>&gt; If we were really concerned about this, a narrower way to solve the same problem would be to allow a comma before the ), but *only* when there is a newline between them.  I still don’t see why we’d want to encourage this though.<br></p><p>I wouldn&#39;t object to this restriction. I cannot think of a situation where using &quot;,)&quot; -- that is the comma adjacent to a closing parenthesis -- makes sense for any reason previously enumerated in support of this proposal.<br></p><p>-- E<br></p><p>[1] &quot;Swift is an opinionated language&quot; - C. Lattner<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>May 13, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On May 13, 2016, at 4:04 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On May 12, 2016, at 11:01 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; On May 12, 2016, at 4:50 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt; You’re arguing that you want to read Swift code written like this?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I wouldn&#39;t mind it.<br>&gt;&gt; <br>&gt;&gt; I personally find that style repulsive :-) and I haven’t seen swift code commonly doing it.  I’m not sure that we want to encourage it either.<br>&gt; <br>&gt; No. Tell us what you *really* think of the style. Don&#39;t hold back.[1]<br></p><p>Gave me a great smile at the end of a long day... Reminded me of how in the show  &quot;Yes Minister&quot;, the main character chooses an rather insignificant topics to *send a strong message* to the public opinion, and lands the job of england&#39;s next prime minister.<br></p><p>&gt; <br>&gt;&gt; If we were really concerned about this, a narrower way to solve the same problem would be to allow a comma before the ), but *only* when there is a newline between them.  I still don’t see why we’d want to encourage this though.<br>&gt; <br>&gt; I wouldn&#39;t object to this restriction. I cannot think of a situation where using &quot;,)&quot; -- that is the comma adjacent to a closing parenthesis -- makes sense for any reason previously enumerated in support of this proposal.<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt; [1] &quot;Swift is an opinionated language&quot; - C. Lattner<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May 13, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On May 13, 2016, at 7:04 AM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; On May 12, 2016, at 11:01 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; On May 12, 2016, at 4:50 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt; You’re arguing that you want to read Swift code written like this?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I wouldn&#39;t mind it.<br>&gt;&gt; <br>&gt;&gt; I personally find that style repulsive :-) and I haven’t seen swift code commonly doing it.  I’m not sure that we want to encourage it either.<br>&gt;&gt; <br>&gt; <br>&gt; No. Tell us what you *really* think of the style. Don&#39;t hold back.[1]<br>&gt; <br>&gt;&gt; If we were really concerned about this, a narrower way to solve the same problem would be to allow a comma before the ), but *only* when there is a newline between them.  I still don’t see why we’d want to encourage this though.<br>&gt; <br>&gt; I wouldn&#39;t object to this restriction. I cannot think of a situation where using &quot;,)&quot; -- that is the comma adjacent to a closing parenthesis -- makes sense for any reason previously enumerated in support of this proposal.<br></p><p>I don&#39;t see why we need to micromanage the situations where trailing commas are allowed. That&#39;s just unnecessarily increasing the fractal complexity of the language. We&#39;ve delegated other style choices like requiring `self.` or brace formatting to linters; why does this one need to be legislated by the compiler?<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>May 13, 2016 at 08:00:00pm</p></header><div class="content"><p>Support. *all or nothing* :-)<br></p><p>On 13.05.2016 20:29, Joe Groff via swift-evolution wrote:<br>&gt; I don&#39;t see why we need to micromanage the situations where trailing commas are allowed. That&#39;s just unnecessarily increasing the fractal complexity of the language. We&#39;ve delegated other style choices like requiring `self.` or brace formatting to linters; why does this one need to be legislated by the compiler?<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>May 13, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On May 13, 2016, at 11:29 AM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On May 13, 2016, at 7:04 AM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On May 12, 2016, at 11:01 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; On May 12, 2016, at 4:50 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; You’re arguing that you want to read Swift code written like this?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I wouldn&#39;t mind it.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I personally find that style repulsive :-) and I haven’t seen swift code commonly doing it.  I’m not sure that we want to encourage it either.<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; No. Tell us what you *really* think of the style. Don&#39;t hold back.[1]<br>&gt;&gt; <br>&gt;&gt;&gt; If we were really concerned about this, a narrower way to solve the same problem would be to allow a comma before the ), but *only* when there is a newline between them.  I still don’t see why we’d want to encourage this though.<br>&gt;&gt; <br>&gt;&gt; I wouldn&#39;t object to this restriction. I cannot think of a situation where using &quot;,)&quot; -- that is the comma adjacent to a closing parenthesis -- makes sense for any reason previously enumerated in support of this proposal.<br>&gt; <br>&gt; I don&#39;t see why we need to micromanage the situations where trailing commas are allowed. That&#39;s just unnecessarily increasing the fractal complexity of the language. We&#39;ve delegated other style choices like requiring `self.` or brace formatting to linters; why does this one need to be legislated by the compiler?<br>&gt; <br>&gt; -Joe<br></p><p>Mostly because I&#39;m trying to play nice and get Chris to reconsider. I&#39;d like to get the feature, I&#39;m willing to compromise on the technicalities.<br>Having it would make my coding life significantly easier and if a little micromanagement is involved, I&#39;m not terribly fussed. When I need trailing<br>commas, it&#39;s always at the ends of lines anyway.<br></p><p>But since I don&#39;t want to undercut you, so I&#39;d much prefer to step back and defer to your judgement on this.<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160513/5fa7ba20/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May 13, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On May 13, 2016, at 10:46 AM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On May 13, 2016, at 11:29 AM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On May 13, 2016, at 7:04 AM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On May 12, 2016, at 11:01 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; On May 12, 2016, at 4:50 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; You’re arguing that you want to read Swift code written like this?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I wouldn&#39;t mind it.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I personally find that style repulsive :-) and I haven’t seen swift code commonly doing it.  I’m not sure that we want to encourage it either.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; No. Tell us what you *really* think of the style. Don&#39;t hold back.[1]<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If we were really concerned about this, a narrower way to solve the same problem would be to allow a comma before the ), but *only* when there is a newline between them.  I still don’t see why we’d want to encourage this though.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I wouldn&#39;t object to this restriction. I cannot think of a situation where using &quot;,)&quot; -- that is the comma adjacent to a closing parenthesis -- makes sense for any reason previously enumerated in support of this proposal.<br>&gt;&gt; <br>&gt;&gt; I don&#39;t see why we need to micromanage the situations where trailing commas are allowed. That&#39;s just unnecessarily increasing the fractal complexity of the language. We&#39;ve delegated other style choices like requiring `self.` or brace formatting to linters; why does this one need to be legislated by the compiler?<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt; <br>&gt; Mostly because I&#39;m trying to play nice and get Chris to reconsider. I&#39;d like to get the feature, I&#39;m willing to compromise on the technicalities.<br></p><p>Sorry, I replied to you, but my comments were more directed toward Chris.<br></p><p>-Joe<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/afb1af7924cbadd912a8b5b2f1308bba?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>John Siracusa</string> &lt;siracusa at gmail.com&gt;<p>May 13, 2016 at 05:00:00pm</p></header><div class="content"><p>Having used, more or less continuously for my 20 years as a professional<br>programmer, both a language that allows trailing commas and one that does<br>not, I come down pretty strongly on the side of allowing trailing commas<br>(for all the reasons already stated in this thread). If it means requiring<br>a newline after the last comma to make some people feel better about it, so<br>be it.<br></p><p>-John<br></p><p><br></p><p>On Fri, May 13, 2016 at 1:46 PM, Erica Sadun via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On May 13, 2016, at 11:29 AM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On May 13, 2016, at 7:04 AM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;<br>&gt; On May 12, 2016, at 11:01 PM, Chris Lattner via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On May 12, 2016, at 4:50 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;<br>&gt; You’re arguing that you want to read Swift code written like this?<br>&gt;<br>&gt;<br>&gt; I wouldn&#39;t mind it.<br>&gt;<br>&gt;<br>&gt; I personally find that style repulsive :-) and I haven’t seen swift code<br>&gt; commonly doing it.  I’m not sure that we want to encourage it either.<br>&gt;<br>&gt;<br>&gt; No. Tell us what you *really* think of the style. Don&#39;t hold back.[1]<br>&gt;<br>&gt; If we were really concerned about this, a narrower way to solve the same<br>&gt; problem would be to allow a comma before the ), but *only* when there is a<br>&gt; newline between them.  I still don’t see why we’d want to encourage this<br>&gt; though.<br>&gt;<br>&gt;<br>&gt; I wouldn&#39;t object to this restriction. I cannot think of a situation where<br>&gt; using &quot;,)&quot; -- that is the comma adjacent to a closing parenthesis -- makes<br>&gt; sense for any reason previously enumerated in support of this proposal.<br>&gt;<br>&gt;<br>&gt; I don&#39;t see why we need to micromanage the situations where trailing<br>&gt; commas are allowed. That&#39;s just unnecessarily increasing the fractal<br>&gt; complexity of the language. We&#39;ve delegated other style choices like<br>&gt; requiring `self.` or brace formatting to linters; why does this one need to<br>&gt; be legislated by the compiler?<br>&gt;<br>&gt; -Joe<br>&gt;<br>&gt;<br>&gt; Mostly because I&#39;m trying to play nice and get Chris to reconsider. I&#39;d<br>&gt; like to get the feature, I&#39;m willing to compromise on the technicalities.<br>&gt; Having it would make my coding life significantly easier and if a little<br>&gt; micromanagement is involved, I&#39;m not terribly fussed. When I need trailing<br>&gt; commas, it&#39;s always at the ends of lines anyway.<br>&gt;<br>&gt; But since I don&#39;t want to undercut you, so I&#39;d much prefer to step back<br>&gt; and defer to your judgement on this.<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160513/ef8148fe/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2af8daf170a3ed693e577a9471ea1f10?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Ray Fix</string> &lt;rayfix at gmail.com&gt;<p>May 11, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>-1 for me.  This proposal inspired me to start participating again. :]<br></p><p>The perceived benefits aren’t worth the visual noise to me.  (It looks half-baked to my eyes.)  I *really* want to avoid having to and a custom linting step in all my projects.  I further fear if this did become possible, I would somehow end up on a project where having extra commas *everywhere* was part of some coding standard.  Noooooo! :]<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Not from my vantage point.  If anything, I would remove the capability for collections. I was blissfully unaware of the functionality before reading this proposal.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>I don’t believe so.  BTW, what about enum case statements?  enum Few { case one, two, three, } Or generic argument lists (I think as someone already mentioned.)  Shouldn’t those support extra commas too?  (No please! Haha.  :)<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Similar to Swift, C++ ignores trailing commas in some situations, but not for param lists.  I actually did use this feature in a few instances where the lists where frequently changed as it helped with merges.  I put up with it because it was in a few limited contexts and not everywhere.  This proposal would make it *everywhere* I fear.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Reading through the proposal and skimming the threads.<br></p><p>Best Wishes,<br>Ray<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>May 11, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>I was skeptical of this until a week or two ago, when I had some code where I ended up commenting out certain parameters. Removing the now-trailing commas was an inconvenience. So, +1 from me.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>It&#39;s a minor issue, but it&#39;s a minor fix too.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes; this brings function call syntax in line with other comma-separated lists.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I&#39;ve used a number of languages like this and it does come in handy occasionally.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick reading, plus participation in previous discussion (where I took the other side).<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2ff1daab58cd5e44a457908d1905c322?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Krzysztof Siejkowski</string> &lt;krzysztof at siejkowski.net&gt;<p>May 12, 2016 at 11:00:00am</p></header><div class="content"><p>* What is your evaluation of the proposal?<br>-1<br></p><p>While I appreciate the ease of reordering and commenting out that the proposal brings, I think it hurts readability. Also, it seems to me that keeping the commas in check is a job of a IDE, not language syntax feature. <br></p><p>The analogy for me is the Lisp parentheses problem. It’s often even more difficult to manage parens while editing and commenting code. Instead of providing a language syntax feature that makes the number of trailing parents flexible, it was better solved with IDE feature called Parinfer.<br></p><p><br></p><p>* Is the problem being addressed significant enough to warrant a change to Swift?<br>I do not think so. It’s a minor issue with minor consequences.<br></p><p><br></p><p>* Does this proposal fit well with the feel and direction of Swift?<br>The only part of Swift “feel and direction” that I think can be of relevance is its focus on educational cases. I do not have any data concerning whether trailing commas will be easier or harder to grasp by the students. However, it’s one more think to explain.<br></p><p><br></p><p>* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>I’ve used a little Python and JavaScript. I didn’t use this feature in those languages, but it was just me. I think it fits better with their scripting style, where by “scripting” I mean very forgiving, very flexible (multiple ways to achieve the same effect) and hardly ever preventing you from making mistakes. I think Swift was always trying to drive away from this attitude and replace it with “scripting syntax for safe language” one.<br></p><p><br></p><p>* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>I’ve read the proposal and related discussion.<br></p><p><br></p><p>All the best,<br></p><p>Krzysztof<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160512/59d2f57e/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>May 12, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; The review of &quot;SE-0084: Allow trailing commas in parameter lists and tuples&quot; begins now and runs through May 16. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0084-trailing-commas.md<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>-0.5<br></p><p>Trailing commas look like a mistake. While having to clean them up when editing parameter lists is unfortunate I prefer it to the untidy and erroneous look of trailing commas in the code. Remember that code is more often read than written, so the preference should be on readability.<br></p><p>I am not convinced by the diff argument either.<br></p><p>I am reluctantly ok with the existing ability to place trailing commas in arrays or dictionaries because these are conceptually more open than parameter lists or tuples or generic argument lists etc.<br></p><p>I’d prefer the alternative proposal of being able to omit commas when placing expressions on different lines (just like with semicolons), although I haven’t thought about possible parsing problems which might arise because of that.<br></p><p><br>But as long as I am not required to use trailing commas, I’m not strongly against this. There are more important changes to be made. I just think it is a bad idea :-)<br></p><p><br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>No, the task of cleaning up parameter lists is small compared to the untidy and erroneous look of trailing commas. In addition cleaning up is only necessary at the end of lists.<br></p><p><br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>No. An important feature of Swift is readability which is disturbed by trailing commas.<br></p><p><br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I haven’t.<br></p><p><br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Followed the discussion and weighed the convenience of trailing commas against the impact on readability.<br></p><p>-Thorsten<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>May 12, 2016 at 11:00:00am</p></header><div class="content"><p>What is your evaluation of the proposal?<br>+1. Commas are already redundant syntax to provide additional clarity over spaces in nearly all use cases. Being strict on this provides no material benefit. On the other hand, being super strict about this does have measurable, real-world impacts. I can provide examples of days of build time and breaking change back-outs because C++ lacks this very feature.<br></p><p>Is the problem being addressed significant enough to warrant a change to Swift?<br>Yes.<br></p><p>Does this proposal fit well with the feel and direction of Swift?<br>Yes<br></p><p>If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>Yes. It scales well to large team sizes as well, especially within the context of merging code together. The code that used trailing commas never has potentially build breaking merges in this same context. However, when merging C or C++ code, this is often a headache to deal with this.<br></p><p>How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>I’ve read the proposal and used languages both with and without this feature.<br></p><p>-David<br></p><p>&gt; On May 10, 2016, at 11:53 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0084: Allow trailing commas in parameter lists and tuples&quot; begins now and runs through May 16. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0084-trailing-commas.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160512/c603f185/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2b19ddab2d7de4523412c875c258e278?s=50"></div><header><strong>[Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Matt Whiteside</string> &lt;mwhiteside.dev at gmail.com&gt;<p>May 14, 2016 at 07:00:00am</p></header><div class="content"><p>-1.  This has always looked like a typo to me.<br></p><p>-Matt<br></p><p><br>&gt; On May 10, 2016, at 11:53, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0084: Allow trailing commas in parameter lists and tuples&quot; begins now and runs through May 16. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0084-trailing-commas.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e01e37acbfad671da1b94a61cf819d82?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Kenny Leung</string> &lt;kenny_leung at pobox.com&gt;<p>May 14, 2016 at 12:00:00pm</p></header><div class="content"><p>I am against this proposal.<br></p><p>- I think it makes the code look ugly and incomplete when there is a trailing comma<br>- I much prefer the counter-proposal which would allow newline to be the separator for items in a list.<br>    - in general, it’s much better when you can remove something from your code rather than add something to it<br>    - this proposal serves the same purpose as allowing the trailing comma<br></p><p>-Kenny<br></p><p><br>&gt; On May 10, 2016, at 11:53 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0084: Allow trailing commas in parameter lists and tuples&quot; begins now and runs through May 16. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0084-trailing-commas.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/73a38bb7bc9528e31098defe30e68ea4?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Jean-Daniel Dupas</string> &lt;mailing at xenonium.com&gt;<p>May 15, 2016 at 09:00:00am</p></header><div class="content"><p>I really don’t like that proposal too.<br></p><p>While I can understand why it may be useful for list, I find it very confusing to allow it in function declaration. <br>The motivation do not apply here. You can’t simply remove a parameter or reorder that without breaking all code that use that function (even function with default parameter as the parameter may be explicitly defined at invocation site).<br></p><p>Even in other places (list, enum, …), I think the kind of refactoring describe in the motivation is not something that is common enough to introduce that kind of syntax change.<br></p><p>And the fact that no alternative was investigated (like allowing new line as separator) make me think this proposal is not complete and shouldn’t be accepted as is anyway.<br></p><p>Jean-Daniel<br></p><p>&gt; Le 14 mai 2016 à 21:25, Kenny Leung via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; I am against this proposal.<br>&gt; <br>&gt; - I think it makes the code look ugly and incomplete when there is a trailing comma<br>&gt; - I much prefer the counter-proposal which would allow newline to be the separator for items in a list.<br>&gt;    - in general, it’s much better when you can remove something from your code rather than add something to it<br>&gt;    - this proposal serves the same purpose as allowing the trailing comma<br>&gt; <br>&gt; -Kenny<br>&gt; <br>&gt; <br>&gt;&gt; On May 10, 2016, at 11:53 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0084: Allow trailing commas in parameter lists and tuples&quot; begins now and runs through May 16. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0084-trailing-commas.md<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution-announce mailing list<br>&gt;&gt; swift-evolution-announce at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dd033b3ed46d65c7d7394eab52d53e6b?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0084: Allow trailing commas in parameter lists and tuples</strong> from <string>Evan Maloney</string> &lt;emaloney at gilt.com&gt;<p>May 17, 2016 at 07:00:00am</p></header><div class="content"><p>While I am a -1 on the proposal as written, I also have no objection to allowing newlines in place of commas for such lists to support the use-case for which people want this proposal.<br></p><p><br></p><p>&gt; On May 14, 2016, at 3:25 PM, Kenny Leung via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I am against this proposal.<br>&gt; <br>&gt; - I think it makes the code look ugly and incomplete when there is a trailing comma<br>&gt; - I much prefer the counter-proposal which would allow newline to be the separator for items in a list.<br>&gt;    - in general, it’s much better when you can remove something from your code rather than add something to it<br>&gt;    - this proposal serves the same purpose as allowing the trailing comma<br>&gt; <br>&gt; -Kenny<br>&gt; <br>&gt; <br>&gt;&gt; On May 10, 2016, at 11:53 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0084: Allow trailing commas in parameter lists and tuples&quot; begins now and runs through May 16. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0084-trailing-commas.md<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution-announce mailing list<br>&gt;&gt; swift-evolution-announce at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
