<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c65faa002b79348ac10e1fb9c1a9ad83?s=50"></div><header><strong>Getting rid of willSet/didSet</strong> from <string>Colin Cornaby</string> &lt;colin.cornaby at mac.com&gt;<p>December 14, 2015 at 11:00:00pm</p></header><div class="content"><p>didSet/willSet is super handy for doing things like updating UI when a property has been set without going through the overhead of writing a full setter or getter. It&#39;s useful for many things beyond a super class responding to changes going through a subclass.<br></p><p>Blocking/validating changes seems like something totally different to me. didSet/willSet doesn&#39;t really seem meant for change validation necessarily, and I think it&#39;s mixing use cases. That almost seems like something where you&#39;d want to move beyond properties (Obj-C certainly doesn&#39;t handle validation in this way.)<br></p><p>On Dec 14, 2015, at 02:57 PM, Tino Heth via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>Hi there!<br></p><p>Considering that I just read that someone wants to have „willGet“, I guess willSet and didSet are here to stay — but for me, the concept has several downsides:<br>- two special keywords<br>- oldValue as another special word (there are some of those, but afaics only self and super are used often)<br>- imho it is not intuitive in which order those methods are called when subclassing<br>… and all those special rules only work for properties.<br></p><p>I think NS_REQUIRES_SUPER (beside the hard name) is much better, because<br>- it works for every method (I guess everyone knows some classes in Cocoa where the docs say you must call super, but the compiler cannot enforce this)<br>- order of execution is clear<br>- it is easy to block a change, instead of doing a rollback in „didSet“<br></p><p>The only advantage of willSet/didSet is that it is easy to create a stored property and be notified when it is changed, without the need to create an additional field — but I think it wouldn’t be that bad to just write „super.property = value“, even if there is no superclass as backing store: It may appear odd, but shouldn’t cause any problems.<br></p><p>Best regards,<br>Tino<br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151214/14f0d227/attachment.html&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
