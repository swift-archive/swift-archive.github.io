<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0031 Adjusting inout Declarations for Type Decoration</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>February 11, 2016 at 03:00:00pm</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;Adjusting inout Declarations for Type Decoration&quot; begins now and runs through February 15th. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0031-adjusting-inout-declarations.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Review] SE-0031 Adjusting inout Declarations for Type Decoration</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>February 12, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0031-adjusting-inout-declarations.md<br></p><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>I like it. The current positioning made sense when we still had `var` in that slot, but now that we don&#39;t, having it decorate the type seems better.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>It&#39;s not a major problem, but fixing it isn&#39;t a major problem either.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes. I can see a few nice directions we can go with this.<br></p><p>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>For some reason, in my experience inout parameters are usually either built from a different, often very advanced, language feature (like references or pointers), or their syntax is idiosyncratic and unprincipled. It&#39;s nice to see Swift attempting to do something rational here.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>A quick reading, nothing special.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5818a8a9211c31af95d6db8974457683?s=50"></div><header><strong>[Review] SE-0031 Adjusting inout Declarations for Type Decoration</strong> from <string>Joseph Lord</string> &lt;joseph at human-friendly.com&gt;<p>February 13, 2016 at 03:00:00pm</p></header><div class="content"><p>+1<br></p><p>Feels like part of the type to me. Ability for it to be in the type definition of the function is a big plus.<br></p><p>Joseph<br></p><p>&gt; On Feb 11, 2016, at 11:21 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;Adjusting inout Declarations for Type Decoration&quot; begins now and runs through February 15th. The proposal is available here:<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/proposals/0031-adjusting-inout-declarations.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt;    https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt;    * What is your evaluation of the proposal?<br>&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;    * Does this proposal fit well with the feel and direction of Swift?<br>&gt;    * If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/05e222e6ef4d84013bb3baeb0e25c90b?s=50"></div><header><strong>[Review] SE-0031 Adjusting inout Declarations for Type Decoration</strong> from <string>Patrick Gili</string> &lt;gili.patrick.r at gili-labs.com&gt;<p>February 13, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Feb 11, 2016, at 6:21 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;Adjusting inout Declarations for Type Decoration&quot; begins now and runs through February 15th. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0031-adjusting-inout-declarations.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>With the removal of &quot;let&quot; and &quot;var&quot; from function parameters, this seems to make sense.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>In a loose way, it is similar to C# and Java. This is exactly the way Ada does it. <br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Only read the proposal once, but it is straightforward.<br></p><p>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>[Review] SE-0031 Adjusting inout Declarations for Type Decoration</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>February 14, 2016 at 11:00:00am</p></header><div class="content"><p>&gt;       * What is your evaluation of the proposal?<br></p><p>+0.5 A good improvement. I think it could be made less special-case, but<br>that can be built on top of this. See my next comments for more details.<br></p><p>&gt;       * Is the problem being addressed significant enough to warrant a<br>change to Swift?<br></p><p>Not a major problem, but an incremental improvement with easy migration and<br>no negative impact.<br></p><p>&gt;       * Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes, although I think it needs a little more work before it&#39;s properly<br>Swifty.<br></p><p>We are now saying it&#39;s part of the argument&#39;s type, but that type is *only*<br>an argument type, you cannot use that type elsewhere. I can see this as<br>being confusing for people unfamiliar with inout. When it&#39;s part of the<br>label it&#39;s obvious it&#39;s only usable as an argument.<br></p><p>If we can do this:<br></p><p>func foo(a: B)<br>var b: B<br></p><p><br>Why can&#39;t we do this?<br></p><p>func foo(a: inout B)<br></p><p>var b: inout B<br></p><p><br>I&#39;d like to see a reference modifier for types that can be used elsewhere.<br></p><p>It seems reasonable to be able to refer to the inout type outside of an<br>argument context.<br></p><p>I presume that this:<br></p><p>func test(inout a: Int) {<br></p><p>    a = 456<br></p><p>}<br></p><p>var a = 123<br></p><p>test(&amp;a)<br></p><p><br>Is roughly equivalent to something like this:<br></p><p>class Reference&lt;T&gt; {<br></p><p>    var value: T<br></p><p>    init(value: T) { self.value = value }<br></p><p>}<br></p><p>func test(a: Reference&lt;Int&gt;) {<br></p><p>    a.value = 456<br></p><p>}<br></p><p>var b = 123<br></p><p>var bRef = Reference(value: b)<br></p><p>test(bRef)<br></p><p>b = bRef.value<br></p><p><br>I&#39;d be happy if *inout* it was implemented something like this, and there<br>were optimisations introduced to ensure this was done as efficiently as<br>inout currently is.<br></p><p>See *potential future work* below for details.<br></p><p>&gt;       * If you have you used other languages or libraries with a similar<br>feature, how do you feel that this proposal compares to those?<br></p><p>It&#39;s roughly similar to a few other languages I&#39;ve used, it seems<br>consistent to make it about the argument&#39;s type.<br></p><p>&gt;       * How much effort did you put into your review? A glance, a quick<br>reading, or an in-depth study?<br></p><p>I read through and considered the implications of making inout more<br>explicitly part of the argument type, instead of just the function&#39;s type.<br></p><p>*Potential future work:*<br></p><p>It seems to me that *inout*/*&amp;* are to *?* what *Reference&lt;T&gt;* is to<br>*Optional&lt;T&gt;*. We already have the *indirect* keyword on enums, perhaps<br>*indirect, **inout*, and *&amp;* should all be combined into one concept.<br></p><p>&amp;Type is equivalent to:<br></p><p>Reference&lt;Type&gt;<br></p><p><br>test(&amp;foo) is equivalent to:<br></p><p>var fooRef = Reference(value: foo)<br></p><p>test(fooRef)<br></p><p>foo = fooRef.value<br></p><p><br>Similar to optionals you could have syntactic sugar to get and set the<br>value, simplifying this to:<br></p><p>var fooRef = &amp;foo<br></p><p>test(fooRef)<br></p><p>foo = fooRef<br></p><p><br>With an enum instead of using indirect you could use Reference&lt;T&gt;.<br></p><p>*Potential issues:*<br></p><p>I&#39;m not sure if it will be confusing that using *&amp;* in a declaration makes<br>a copy; using *&amp;* in an argument makes a copy, then copies it back after<br>the call. Also this could be confusing if you&#39;re used to<br>pointers/references and expect changing foo to change the value of<br>`fooRef`. This may be solved if foo is aliased to fooRef for the lifetime<br>of fooRef, however that may be confusing for users that aren&#39;t used<br>to pointers/references.<br></p><p>There&#39;s also the issue of what to do if someone writes &amp;&amp;foo, does this<br>make any sense as it&#39;s not really a pointer, and you cannot offset it? I<br>think that calling &amp; on a reference type would have to be identity.<br></p><p>*Potential future-future work:*<br>Make the distinction between struct and class stop at SIL, implement them<br>on top of a Reference&lt;T&gt; style type (with compiler support), then use<br>something akin to property behaviours to implement inheritance,<br>overloading, etc.<br></p><p>Any simplifications/generalisations like this should only really be done if<br>they don&#39;t make it harder to interpret error messages.<br></p><p>On Friday, 12 February 2016, Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;Adjusting inout Declarations for Type Decoration&quot; begins<br>&gt; now and runs through February 15th. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0031-adjusting-inout-declarations.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt;         * What is your evaluation of the proposal?<br>&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;         * If you have you used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160214/7e5a9905/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/566528c7f7c28c35c0c646d415943612?s=50"></div><header><strong>[Review] SE-0031 Adjusting inout Declarations for Type Decoration</strong> from <string>Taras Zakharko</string> &lt;taras.zakharko at uzh.ch&gt;<p>February 14, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>+1<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Its not really a problem per se, but an inconsistency, and this proposal does a very good job of addressing it<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes. One of the declared goals for Swift is to streamline the type system and remove idiosyncrasies. This proposal does exactly that<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I was following the discussion quite closely. <br></p><p>— Taras<br></p><p><br>&gt; On 14 Feb 2016, at 03:08, Andrew Bennett via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; &gt;       * What is your evaluation of the proposal?<br>&gt; <br>&gt; +0.5 A good improvement. I think it could be made less special-case, but that can be built on top of this. See my next comments for more details.<br>&gt; <br>&gt; &gt;       * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; Not a major problem, but an incremental improvement with easy migration and no negative impact.<br>&gt; <br>&gt; &gt;       * Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; Yes, although I think it needs a little more work before it&#39;s properly Swifty.<br>&gt; <br>&gt; We are now saying it&#39;s part of the argument&#39;s type, but that type is *only* an argument type, you cannot use that type elsewhere. I can see this as being confusing for people unfamiliar with inout. When it&#39;s part of the label it&#39;s obvious it&#39;s only usable as an argument.<br>&gt; <br>&gt; If we can do this:<br>&gt; func foo(a: B)<br>&gt; var b: B<br>&gt; <br>&gt; Why can&#39;t we do this?<br>&gt; func foo(a: inout B)<br>&gt; var b: inout B<br>&gt; <br>&gt; I&#39;d like to see a reference modifier for types that can be used elsewhere.<br>&gt; <br>&gt; It seems reasonable to be able to refer to the inout type outside of an argument context.<br>&gt; <br>&gt; I presume that this:<br>&gt; func test(inout a: Int) {<br>&gt;     a = 456<br>&gt; }<br>&gt; var a = 123<br>&gt; test(&amp;a)<br>&gt; <br>&gt; Is roughly equivalent to something like this:<br>&gt; class Reference&lt;T&gt; {<br>&gt;     var value: T<br>&gt;     init(value: T) { self.value = value }<br>&gt; }<br>&gt; func test(a: Reference&lt;Int&gt;) {<br>&gt;     a.value = 456<br>&gt; }<br>&gt; var b = 123<br>&gt; var bRef = Reference(value: b)<br>&gt; test(bRef)<br>&gt; b = bRef.value<br>&gt; <br>&gt; I&#39;d be happy if inout it was implemented something like this, and there were optimisations introduced to ensure this was done as efficiently as inout currently is.<br>&gt; <br>&gt; See potential future work below for details.<br>&gt; <br>&gt; &gt;       * If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; It&#39;s roughly similar to a few other languages I&#39;ve used, it seems consistent to make it about the argument&#39;s type.<br>&gt; <br>&gt; &gt;       * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; I read through and considered the implications of making inout more explicitly part of the argument type, instead of just the function&#39;s type.<br>&gt; <br>&gt; Potential future work:<br>&gt; <br>&gt; It seems to me that inout/&amp; are to ? what Reference&lt;T&gt; is to Optional&lt;T&gt;. We already have the indirect keyword on enums, perhaps indirect, inout, and &amp; should all be combined into one concept. <br>&gt; <br>&gt; &amp;Type is equivalent to:<br>&gt; Reference&lt;Type&gt;<br>&gt; <br>&gt; test(&amp;foo) is equivalent to:<br>&gt; var fooRef = Reference(value: foo)<br>&gt; test(fooRef)<br>&gt; foo = fooRef.value<br>&gt; <br>&gt; Similar to optionals you could have syntactic sugar to get and set the value, simplifying this to:<br>&gt; var fooRef = &amp;foo<br>&gt; test(fooRef)<br>&gt; foo = fooRef<br>&gt; <br>&gt; With an enum instead of using indirect you could use Reference&lt;T&gt;.<br>&gt; <br>&gt; Potential issues:<br>&gt; <br>&gt; I&#39;m not sure if it will be confusing that using &amp; in a declaration makes a copy; using &amp; in an argument makes a copy, then copies it back after the call. Also this could be confusing if you&#39;re used to pointers/references and expect changing foo to change the value of `fooRef`. This may be solved if foo is aliased to fooRef for the lifetime of fooRef, however that may be confusing for users that aren&#39;t used to pointers/references.<br>&gt; <br>&gt; There&#39;s also the issue of what to do if someone writes &amp;&amp;foo, does this make any sense as it&#39;s not really a pointer, and you cannot offset it? I think that calling &amp; on a reference type would have to be identity.<br>&gt; <br>&gt; Potential future-future work:<br>&gt; Make the distinction between struct and class stop at SIL, implement them on top of a Reference&lt;T&gt; style type (with compiler support), then use something akin to property behaviours to implement inheritance, overloading, etc.<br>&gt; <br>&gt; Any simplifications/generalisations like this should only really be done if they don&#39;t make it harder to interpret error messages.<br>&gt; <br>&gt; On Friday, 12 February 2016, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;Adjusting inout Declarations for Type Decoration&quot; begins now and runs through February 15th. The proposal is available here:<br>&gt; <br>&gt;         https://github.com/apple/swift-evolution/blob/master/proposals/0031-adjusting-inout-declarations.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0031-adjusting-inout-declarations.md&gt;<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt;         * What is your evaluation of the proposal?<br>&gt;         * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;         * If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;         * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt;         https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160214/36bbefa9/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>[Review] SE-0031 Adjusting inout Declarations for Type Decoration</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>February 15, 2016 at 09:00:00am</p></header><div class="content"><p>+1 for me. Much more logical.<br></p><p>  -- Howard.<br></p><p>On 12 February 2016 at 10:21, Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;Adjusting inout Declarations for Type Decoration&quot; begins<br>&gt; now and runs through February 15th. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0031-adjusting-inout-declarations.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt;         * What is your evaluation of the proposal?<br>&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;         * If you have you used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160215/7dea1fb5/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b1fc4ed1ed8e138ef0a87fd3e91c83a4?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0031 Adjusting inout Declarations for Type Decoration</strong> from <string>Ricardo Parada</string> &lt;rparada at mac.com&gt;<p>February 14, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; The proposal is available here:<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/proposals/0031-adjusting-inout-declarations.md<br></p><p>   * What is your evaluation of the proposal?<br></p><p>+1<br></p><p>   * Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>I think so. This is already explained in the proposal. <br></p><p>   * Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes and it appears that it will help the language move forward. <br></p><p>   * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Swift is different from other languages and more powerful in naming functions and their parameters. So it is difficult to compare. <br>The placement of the inout is difficult as the current placement conflicts with parameter labels. The new placement seems to resolve that conflict and still looks good. <br></p><p>   * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick read. <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160214/e23f3044/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/47e3aeeaf151d4f51ee15fc7871bf584?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0031 Adjusting inout Declarations for Type Decoration</strong> from <string>Rudolf Adamkovič</string> &lt;salutis at me.com&gt;<p>February 23, 2016 at 12:00:00am</p></header><div class="content"><p>+1 Much better!<br></p><p>Sent from my iPhone<br></p><p>&gt; On 12 Feb 2016, at 00:21, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;Adjusting inout Declarations for Type Decoration&quot; begins now and runs through February 15th. The proposal is available here:<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/proposals/0031-adjusting-inout-declarations.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt;    https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt;    * What is your evaluation of the proposal?<br>&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;    * Does this proposal fit well with the feel and direction of Swift?<br>&gt;    * If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
