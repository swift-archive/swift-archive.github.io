<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d932a7cff4e614f7b268b11b3b362a7?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Alexandre Lopoukhine</string> &lt;superlopuh at gmail.com&gt;<p>December 20, 2015 at 08:00:00pm</p></header><div class="content"><p>Hi all,<br></p><p>I would like to suggest an alternative to this, and would like to hear what you all think. I think that the biggest problems with the current operators are:<br></p><p>1) They are not clear, by themselves or as a pair.<br>2) ? is associated with optionals<br>3) The type of the resulting expression is not immediately clear, as it begins as a boolean, and only after the ? are the actual expressions to be assigned<br></p><p>So, using “booleanExpression”, “anExpression” and “alternativeExpression”:<br></p><p>Current Swift:<br>booleanExpression ? anExpression : alternativeExpression<br></p><p>Paul’s suggested syntax:<br>?(booleanExpression: anExpression, alternativeExpression) <br>/* Shouldn’t this be ?(booleanExpression: true: anExpression, false: alternativeExpression), for it to be a true equivalent to switch, or should the boolean shorthand be hard-coded?<br></p><p>My suggestion:<br>(anExpression if booleanExpression else alternativeExpression)<br></p><p>The logic here is:<br>1) by adding the keywords, the expression becomes more verbose, but also clearer<br>2) the “?&quot; is gone<br>3) it begins with an expression of the result type<br></p><p>I think that requiring the parentheses might be a good idea, as it immediately flags the first expression as not being alone, especially if the expression is separated across multiple lines.<br>Having “if” after the first expression also clearly distinguishes it as different from the “if” used for control flow.<br></p><p>The obvious loss to Paul’s proposal is the loss of switch-level power, but I’m not convinced that this is too bad. Switch statements are great, but can grow quite long with various patterns, and I think should be kept (with current syntax required) as-is.<br></p><p>What do you think?<br></p><p>— Sasha<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 20, 2015 at 10:00:00am</p></header><div class="content"><p>This is interesting, and thanks for the proposal, and I am not completely against something like this:<br></p><p>Your points on problems with ternary, I agree, except on point 2)  I would like to challenge a bit on the notion that ? is only for optionals, if it means that there is a question, instead of an optional. Then it fits pretty well. <br></p><p>&gt; On Dec 20, 2015, at 9:14 AM, Alexandre Lopoukhine &lt;superlopuh at gmail.com&gt; wrote:<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; I would like to suggest an alternative to this, and would like to hear what you all think. I think that the biggest problems with the current operators are:<br>&gt; <br>&gt; 1) They are not clear, by themselves or as a pair.<br>&gt; 2) ? is associated with optionals<br>&gt; 3) The type of the resulting expression is not immediately clear, as it begins as a boolean, and only after the ? are the actual expressions to be assigned<br>&gt; <br>&gt; So, using “booleanExpression”, “anExpression” and “alternativeExpression”:<br>&gt; <br>&gt; Current Swift:<br>&gt; booleanExpression ? anExpression : alternativeExpression<br>&gt; <br>&gt; Paul’s suggested syntax:<br>&gt; ?(booleanExpression: anExpression, alternativeExpression) <br>&gt; /* Shouldn’t this be ?(booleanExpression: true: anExpression, false: alternativeExpression), for it to be a true equivalent to switch, or should the boolean shorthand be hard-coded?<br></p><p>I would not want to have to spell out the true: false: With my proposal you can certainly do that and even reverse it if it fits your needs better:<br></p><p>?(cond : false: “A”, true: “B”)<br></p><p>Note: In my proposal you can put default: or else: if you prefer. <br></p><p>?(cond : “A” else: “B”)<br></p><p>This might be a nice middle ground for terseness vs readability. I think flexibility is important so that developers have different ways of expressing it for what is best in the situation. <br></p><p>&gt; <br>&gt; My suggestion:<br>&gt; (anExpression if booleanExpression else alternativeExpression)<br>&gt; <br>&gt; The logic here is:<br>&gt; 1) by adding the keywords, the expression becomes more verbose, but also clearer<br>&gt; 2) the “?&quot; is gone<br>&gt; 3) it begins with an expression of the result type<br></p><p>We did discuss something like this earlier on. I think the required parenthesis is a good addition, this is part of my suggestion.  <br></p><p>&gt; <br>&gt; I think that requiring the parentheses might be a good idea, as it immediately flags the first expression as not being alone, especially if the expression is separated across multiple lines.<br>&gt; Having “if” after the first expression also clearly distinguishes it as different from the “if” used for control flow.<br>&gt; <br>&gt; The obvious loss to Paul’s proposal is the loss of switch-level power, but I’m not convinced that this is too bad. Switch statements are great, but can grow quite long with various patterns, and I think should be kept (with current syntax required) as-is.<br></p><p>I think that would be a pretty big loss dropping switch support. Most of the examples in the Swift Language guide for the switch statement could more simply be written with a switch expression. Also, I think just replacing it with an if may not be considered a big enough benefit to make a change. I am pretty sure we could accommodate switch with something like your proposal too, if there is strong agreement that this is a better way to go.<br></p><p>&gt; <br>&gt; What do you think?<br></p><p>• Some downsides, we lose terseness which Chris and others brought up as important if trying to come up with something better. <br> • This is similar to python’s ternary while it reads pretty well as an English sentence, I am not sure it is better. Grouping the outcomes together I think is better. It feels odd and I remember when Python first introduced it, it was confusing. <br></p><p>Thanks <br>- Paul<br>&gt; <br>&gt; — Sasha<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
