<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/01cbe19a454fc80c86f5e2e2f15edbcd?s=50"></div><header><strong>Standard shared libraries with executable stack</strong> from <string>Jongsu Kim</string> &lt;kimjs29 at gmail.com&gt;<p>June 12, 2016 at 12:00:00am</p></header><div class="content"><p>I am testing Swift in &quot;Windows Subsystem for Linux&quot; which is a new feature<br>of Windows 10 Anniversary Update scheduled in this year. WSL is Ubuntu LTS<br>14.04 compatible in user space.<br></p><p>Swift runtime libraries such as libswiftCore.so are marked Executable<br>Stack, which have no problem in Linux.<br></p><p>dlopen()&#39;ing swift runtime libraries causes mprotect() with PROT_GROWSDOWN,<br>which is not documented but verified with strace.<br></p><p>WSL has not implemented PROT_GROWSDOWN feature because of clean room<br>development.<br></p><p>Swift runtime libraries had not been marked Executable Stack before Febrary<br>snapshot. And cmark and llvm/clang shared libraries are not marked too.<br></p><p>***My request is swift runtime libraries be not marked Executable Stack.***<br></p><p>Thanks in advance.<br></p><p><br>Kim, Jongsu<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160612/2ded2535/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Standard shared libraries with executable stack</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>June 13, 2016 at 08:00:00pm</p></header><div class="content"><p>On Sat, Jun 11, 2016 at 8:12 AM, 김종수 via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; I am testing Swift in &quot;Windows Subsystem for Linux&quot; which is a new feature<br>&gt; of Windows 10 Anniversary Update scheduled in this year. WSL is Ubuntu LTS<br>&gt; 14.04 compatible in user space.<br>&gt;<br>&gt; Swift runtime libraries such as libswiftCore.so are marked Executable Stack,<br>&gt; which have no problem in Linux.<br>&gt;<br>&gt; dlopen()&#39;ing swift runtime libraries causes mprotect() with PROT_GROWSDOWN,<br>&gt; which is not documented but verified with strace.<br>&gt;<br>&gt; WSL has not implemented PROT_GROWSDOWN feature because of clean room<br>&gt; development.<br>&gt;<br>&gt; Swift runtime libraries had not been marked Executable Stack before Febrary<br>&gt; snapshot. And cmark and llvm/clang shared libraries are not marked too.<br>&gt;<br>&gt; ***My request is swift runtime libraries be not marked Executable Stack.***<br></p><p>Hi,<br></p><p>This could have been caused by our switch from the BFD linker to gold.<br>Could you try linking a hello world program using gold linker and<br>running it in WSL?<br></p><p>Are you sure that PROT_GROWSDOWN is the flag that enables executable<br>stack?  I thought that&#39;s what PROT_EXEC is for.  I&#39;m not sure what<br>PROT_GROWSDOWN actually changes, if I were to speculate, I&#39;d say it<br>could be a marker that means &quot;this is a stack&quot; or maybe even be just a<br>performance hint.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14477c366d6ee4e41adf14837bc4f2f9?s=50"></div><header><strong>Standard shared libraries with executable stack</strong> from <string>Ryan Lovelett</string> &lt;swift-dev at ryan.lovelett.me&gt;<p>June 14, 2016 at 08:00:00am</p></header><div class="content"><p>On Mon, Jun 13, 2016, at 11:33 PM, Dmitri Gribenko via swift-dev wrote:<br>&gt; On Sat, Jun 11, 2016 at 8:12 AM, 김종수 via swift-dev &lt;swift-dev at swift.org&gt;<br>&gt; wrote:<br>&gt; &gt; I am testing Swift in &quot;Windows Subsystem for Linux&quot; which is a new feature<br>&gt; &gt; of Windows 10 Anniversary Update scheduled in this year. WSL is Ubuntu LTS<br>&gt; &gt; 14.04 compatible in user space.<br>&gt; &gt;<br>&gt; &gt; Swift runtime libraries such as libswiftCore.so are marked Executable Stack,<br>&gt; &gt; which have no problem in Linux.<br>&gt; &gt;<br>&gt; &gt; dlopen()&#39;ing swift runtime libraries causes mprotect() with PROT_GROWSDOWN,<br>&gt; &gt; which is not documented but verified with strace.<br>&gt; &gt;<br>&gt; &gt; WSL has not implemented PROT_GROWSDOWN feature because of clean room<br>&gt; &gt; development.<br>&gt; &gt;<br>&gt; &gt; Swift runtime libraries had not been marked Executable Stack before Febrary<br>&gt; &gt; snapshot. And cmark and llvm/clang shared libraries are not marked too.<br>&gt; &gt;<br>&gt; &gt; ***My request is swift runtime libraries be not marked Executable Stack.***<br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; This could have been caused by our switch from the BFD linker to gold.<br>&gt; Could you try linking a hello world program using gold linker and<br>&gt; running it in WSL?<br></p><p>I _think_ this problem existed before the switch from BFD to gold.<br></p><p>I build and package a version of Swift for Linux. During the package<br>processes makepkg [1] checks the installed binaries for common gotchas<br>(I tried looking up exactly what is run but could not find it quickly).<br></p><p>My point is that I&#39;ve been seeing:<br></p><p>swiftc W: ELF file (&#39;usr/bin/swift-test&#39;) has executable stack.<br>swiftc W: ELF file (&#39;usr/bin/repl_swift&#39;) has executable stack.<br>swiftc W: ELF file (&#39;usr/bin/swift-build&#39;) has executable stack.<br>swiftc W: ELF file (&#39;usr/lib/swift/pm/libPackageDescription.so&#39;) has<br>executable stack.<br>swiftc W: ELF file (&#39;usr/lib/swift/linux/libswiftGlibc.so&#39;) has<br>executable stack.<br>swiftc W: ELF file (&#39;usr/lib/swift/linux/libXCTest.so&#39;) has executable<br>stack.<br>swiftc W: ELF file (&#39;usr/lib/swift/linux/libswiftCore.so&#39;) has<br>executable stack.<br>swiftc W: ELF file (&#39;usr/lib/swift/linux/libFoundation.so&#39;) has<br>executable stack.<br></p><p>Since at least the 20160208a release, but probably longer, I have been<br>seeing the above errors. That predates the BFD to gold switch by at<br>least a month. Though I do admit I don&#39;t remember the exact date that<br>change landed.<br></p><p>I have all the build logs dating back to February 22nd if that helps in<br>anyway. Just food for thought.<br></p><p>[1] https://www.archlinux.org/pacman/makepkg.8.html<br></p><p>&gt; <br>&gt; Are you sure that PROT_GROWSDOWN is the flag that enables executable<br>&gt; stack?  I thought that&#39;s what PROT_EXEC is for.  I&#39;m not sure what<br>&gt; PROT_GROWSDOWN actually changes, if I were to speculate, I&#39;d say it<br>&gt; could be a marker that means &quot;this is a stack&quot; or maybe even be just a<br>&gt; performance hint.<br>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/52752079730726d693332706c65540b8?s=50"></div><header><strong>Standard shared libraries with executable stack</strong> from <string>Sangjin Han</string> &lt;tinysun.net at gmail.com&gt;<p>June 15, 2016 at 09:00:00am</p></header><div class="content"><p>Hi, Kim.<br></p><p>I have the WSL on Windows Preview.<br></p><p>Could you show the test source/command ?<br></p><p>-Han Sangjin<br></p><p>2016-06-14 21:10 GMT+09:00 Ryan Lovelett via swift-dev &lt;swift-dev at swift.org&gt;<br>:<br></p><p>&gt; On Mon, Jun 13, 2016, at 11:33 PM, Dmitri Gribenko via swift-dev wrote:<br>&gt; &gt; On Sat, Jun 11, 2016 at 8:12 AM, 김종수 via swift-dev &lt;swift-dev at swift.org&gt;<br>&gt; &gt; wrote:<br>&gt; &gt; &gt; I am testing Swift in &quot;Windows Subsystem for Linux&quot; which is a new<br>&gt; feature<br>&gt; &gt; &gt; of Windows 10 Anniversary Update scheduled in this year. WSL is Ubuntu<br>&gt; LTS<br>&gt; &gt; &gt; 14.04 compatible in user space.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; Swift runtime libraries such as libswiftCore.so are marked Executable<br>&gt; Stack,<br>&gt; &gt; &gt; which have no problem in Linux.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; dlopen()&#39;ing swift runtime libraries causes mprotect() with<br>&gt; PROT_GROWSDOWN,<br>&gt; &gt; &gt; which is not documented but verified with strace.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; WSL has not implemented PROT_GROWSDOWN feature because of clean room<br>&gt; &gt; &gt; development.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; Swift runtime libraries had not been marked Executable Stack before<br>&gt; Febrary<br>&gt; &gt; &gt; snapshot. And cmark and llvm/clang shared libraries are not marked too.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; ***My request is swift runtime libraries be not marked Executable<br>&gt; Stack.***<br>&gt; &gt;<br>&gt; &gt; Hi,<br>&gt; &gt;<br>&gt; &gt; This could have been caused by our switch from the BFD linker to gold.<br>&gt; &gt; Could you try linking a hello world program using gold linker and<br>&gt; &gt; running it in WSL?<br>&gt;<br>&gt; I _think_ this problem existed before the switch from BFD to gold.<br>&gt;<br>&gt; I build and package a version of Swift for Linux. During the package<br>&gt; processes makepkg [1] checks the installed binaries for common gotchas<br>&gt; (I tried looking up exactly what is run but could not find it quickly).<br>&gt;<br>&gt; My point is that I&#39;ve been seeing:<br>&gt;<br>&gt; swiftc W: ELF file (&#39;usr/bin/swift-test&#39;) has executable stack.<br>&gt; swiftc W: ELF file (&#39;usr/bin/repl_swift&#39;) has executable stack.<br>&gt; swiftc W: ELF file (&#39;usr/bin/swift-build&#39;) has executable stack.<br>&gt; swiftc W: ELF file (&#39;usr/lib/swift/pm/libPackageDescription.so&#39;) has<br>&gt; executable stack.<br>&gt; swiftc W: ELF file (&#39;usr/lib/swift/linux/libswiftGlibc.so&#39;) has<br>&gt; executable stack.<br>&gt; swiftc W: ELF file (&#39;usr/lib/swift/linux/libXCTest.so&#39;) has executable<br>&gt; stack.<br>&gt; swiftc W: ELF file (&#39;usr/lib/swift/linux/libswiftCore.so&#39;) has<br>&gt; executable stack.<br>&gt; swiftc W: ELF file (&#39;usr/lib/swift/linux/libFoundation.so&#39;) has<br>&gt; executable stack.<br>&gt;<br>&gt; Since at least the 20160208a release, but probably longer, I have been<br>&gt; seeing the above errors. That predates the BFD to gold switch by at<br>&gt; least a month. Though I do admit I don&#39;t remember the exact date that<br>&gt; change landed.<br>&gt;<br>&gt; I have all the build logs dating back to February 22nd if that helps in<br>&gt; anyway. Just food for thought.<br>&gt;<br>&gt; [1] https://www.archlinux.org/pacman/makepkg.8.html<br>&gt;<br>&gt; &gt;<br>&gt; &gt; Are you sure that PROT_GROWSDOWN is the flag that enables executable<br>&gt; &gt; stack?  I thought that&#39;s what PROT_EXEC is for.  I&#39;m not sure what<br>&gt; &gt; PROT_GROWSDOWN actually changes, if I were to speculate, I&#39;d say it<br>&gt; &gt; could be a marker that means &quot;this is a stack&quot; or maybe even be just a<br>&gt; &gt; performance hint.<br>&gt; &gt;<br>&gt; &gt; Dmitri<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; &gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-dev mailing list<br>&gt; &gt; swift-dev at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160615/93d33442/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/01cbe19a454fc80c86f5e2e2f15edbcd?s=50"></div><header><strong>Standard shared libraries with executable stack</strong> from <string>Jongsu Kim</string> &lt;kimjs29 at gmail.com&gt;<p>June 16, 2016 at 07:00:00pm</p></header><div class="content"><p>Hi, Han<br></p><p>The test code is as follows:<br></p><p>#include &lt;stdio.h&gt;<br>#include &lt;dlfcn.h&gt;<br></p><p>int main()<br>{<br>    if<br>(!dlopen(&quot;swift-3.0-preview-1-ubuntu14.04/usr/lib/swift/linux/libswiftCore.so&quot;,<br>RTLD_LAZY | RTLD_GLOBAL))<br>        fprintf(stderr, &quot;%s\n&quot;, dlerror());<br>}<br></p><p>The executable stack flag is queried as follows:<br></p><p>sudo execstack -q<br>swift-3.0-preview-1-ubuntu14.04/usr/lib/swift/linux/libswiftCore.so<br></p><p>If the executable stack flag is set, the stderr output is as follows:<br></p><p>swift-3.0-preview-1-ubuntu14.04/usr/lib/swift/linux/libswiftCore.so: cannot<br>enable executable stack as shared object requires: Invalid argument<br></p><p>And strace ouput tail is as follows:<br></p><p>mprotect(0x7ffffe5c3000, 4096,<br>PROT_READ|PROT_WRITE|PROT_EXEC|PROT_GROWSDOWN) = -1 EINVAL (Invalid<br>argument)<br>close(3)                                = 0<br>write(2, &quot;swift-3.0-preview-1-ubuntu14.04/&quot;...,<br>144swift-3.0-preview-1-ubuntu14.04/usr/lib/swift/linux/libswiftCore.so:<br>cannot enable executable stack as shared object requires: Invalid argument)<br>= 144<br>exit_group(144)                         = ?<br>+++ exited with 144 +++<br></p><p>If the executable stack flag is cleared by using execstack -c option, there<br>is no error.<br></p><p>Of course on Ubuntu 14.04 there is no error with the executable stack flag<br>on.<br></p><p>To clarify my request, I don&#39;t know how the Swift shared libraries&#39;<br>executable stack flag has been set since Febrary 25 snapshot because<br>Febrary 8 snapshot and Swift 2.X branches have no such executable stack<br>shared libraries.<br></p><p>I tested on WSL Build 14366.<br></p><p>Thanks.<br></p><p><br>On Wed, Jun 15, 2016 at 9:48 AM, Sangjin Han &lt;tinysun.net at gmail.com&gt; wrote:<br></p><p>&gt; Hi, Kim.<br>&gt;<br>&gt; I have the WSL on Windows Preview.<br>&gt;<br>&gt; Could you show the test source/command ?<br>&gt;<br>&gt; -Han Sangjin<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160616/1a1bd1cb/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/01cbe19a454fc80c86f5e2e2f15edbcd?s=50"></div><header><strong>Standard shared libraries with executable stack</strong> from <string>Jongsu Kim</string> &lt;kimjs29 at gmail.com&gt;<p>June 16, 2016 at 09:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>This could have been caused by our switch from the BFD linker to gold.<br>&gt; Could you try linking a hello world program using gold linker and<br>&gt; running it in WSL?<br>&gt;<br></p><p>I tried to build Swift by not using -fuse-gold option and the result was<br>same.<br></p><p><br>Are you sure that PROT_GROWSDOWN is the flag that enables executable<br>&gt; stack?  I thought that&#39;s what PROT_EXEC is for.  I&#39;m not sure what<br>&gt; PROT_GROWSDOWN actually changes, if I were to speculate, I&#39;d say it<br>&gt; could be a marker that means &quot;this is a stack&quot; or maybe even be just a<br>&gt; performance hint.<br>&gt;<br></p><p>You are right. The executable stack is enabled by PROT_EXEC.<br></p><p>But Swift shared library&#39;s executable stack seems to set PROT_EXEC AND<br>PROT_GROWSDOWN according to strace.<br></p><p>I don&#39;t know what causes Swift shared library to have executable stack<br>since Febrary 25 snapshot. Febrary 8 snapshot and Swift 2.X branches have<br>no such executable stack shared library.<br></p><p>Thanks,<br></p><p><br>-Kim, Jongsu<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160616/aadcf02a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Standard shared libraries with executable stack</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>June 16, 2016 at 06:00:00am</p></header><div class="content"><p>On Thu, Jun 16, 2016 at 5:17 AM, Jongsu Kim &lt;kimjs29 at gmail.com&gt; wrote:<br>&gt; Hi,<br>&gt;<br>&gt;&gt; This could have been caused by our switch from the BFD linker to gold.<br>&gt;&gt; Could you try linking a hello world program using gold linker and<br>&gt;&gt; running it in WSL?<br>&gt;<br>&gt;<br>&gt; I tried to build Swift by not using -fuse-gold option and the result was<br>&gt; same.<br></p><p>&#39;-fuse-gold&#39; is implicitly the default now.  We have switched to the<br>gold linker because the BFD linker had bugs and could not link Swift<br>libraries at all.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/52752079730726d693332706c65540b8?s=50"></div><header><strong>Standard shared libraries with executable stack</strong> from <string>Sangjin Han</string> &lt;tinysun.net at gmail.com&gt;<p>June 17, 2016 at 03:00:00pm</p></header><div class="content"><p>Hi, Kim.<br></p><p>The test result is same on WSL build 14342.<br></p><p>There is similar report in<br>https://github.com/Microsoft/BashOnWindows/issues/286 .<br>MS engineer recognized this and replied that give them feedback on the<br>uservoice for prioritizing, currently it has only 3 votes.<br></p><p>-Han Sangjin<br></p><p>2016-06-16 21:17 GMT+09:00 Jongsu Kim via swift-dev &lt;swift-dev at swift.org&gt;:<br></p><p>&gt; Hi,<br>&gt;<br>&gt; This could have been caused by our switch from the BFD linker to gold.<br>&gt;&gt; Could you try linking a hello world program using gold linker and<br>&gt;&gt; running it in WSL?<br>&gt;&gt;<br>&gt;<br>&gt; I tried to build Swift by not using -fuse-gold option and the result was<br>&gt; same.<br>&gt;<br>&gt;<br>&gt; Are you sure that PROT_GROWSDOWN is the flag that enables executable<br>&gt;&gt; stack?  I thought that&#39;s what PROT_EXEC is for.  I&#39;m not sure what<br>&gt;&gt; PROT_GROWSDOWN actually changes, if I were to speculate, I&#39;d say it<br>&gt;&gt; could be a marker that means &quot;this is a stack&quot; or maybe even be just a<br>&gt;&gt; performance hint.<br>&gt;&gt;<br>&gt;<br>&gt; You are right. The executable stack is enabled by PROT_EXEC.<br>&gt;<br>&gt; But Swift shared library&#39;s executable stack seems to set PROT_EXEC AND<br>&gt; PROT_GROWSDOWN according to strace.<br>&gt;<br>&gt; I don&#39;t know what causes Swift shared library to have executable stack<br>&gt; since Febrary 25 snapshot. Febrary 8 snapshot and Swift 2.X branches have<br>&gt; no such executable stack shared library.<br>&gt;<br>&gt; Thanks,<br>&gt;<br>&gt;<br>&gt; -Kim, Jongsu<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160617/0fae62ba/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Standard shared libraries with executable stack</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>June 17, 2016 at 12:00:00am</p></header><div class="content"><p>Hi,<br></p><p>While there wight be an issue in WSL with executable stacks, Swift<br>does not really need one.  If the binary is actually asking for one,<br>it would be great if we could figure out a way to ask the gold linker<br>to not mark stacks as executable.<br></p><p>Dmitri<br></p><p>On Thu, Jun 16, 2016 at 11:39 PM, Sangjin Han &lt;tinysun.net at gmail.com&gt; wrote:<br>&gt; Hi, Kim.<br>&gt;<br>&gt; The test result is same on WSL build 14342.<br>&gt;<br>&gt; There is similar report in<br>&gt; https://github.com/Microsoft/BashOnWindows/issues/286 .<br>&gt; MS engineer recognized this and replied that give them feedback on the<br>&gt; uservoice for prioritizing, currently it has only 3 votes.<br>&gt;<br>&gt; -Han Sangjin<br>&gt;<br>&gt; 2016-06-16 21:17 GMT+09:00 Jongsu Kim via swift-dev &lt;swift-dev at swift.org&gt;:<br>&gt;&gt;<br>&gt;&gt; Hi,<br>&gt;&gt;<br>&gt;&gt;&gt; This could have been caused by our switch from the BFD linker to gold.<br>&gt;&gt;&gt; Could you try linking a hello world program using gold linker and<br>&gt;&gt;&gt; running it in WSL?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I tried to build Swift by not using -fuse-gold option and the result was<br>&gt;&gt; same.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; Are you sure that PROT_GROWSDOWN is the flag that enables executable<br>&gt;&gt;&gt; stack?  I thought that&#39;s what PROT_EXEC is for.  I&#39;m not sure what<br>&gt;&gt;&gt; PROT_GROWSDOWN actually changes, if I were to speculate, I&#39;d say it<br>&gt;&gt;&gt; could be a marker that means &quot;this is a stack&quot; or maybe even be just a<br>&gt;&gt;&gt; performance hint.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; You are right. The executable stack is enabled by PROT_EXEC.<br>&gt;&gt;<br>&gt;&gt; But Swift shared library&#39;s executable stack seems to set PROT_EXEC AND<br>&gt;&gt; PROT_GROWSDOWN according to strace.<br>&gt;&gt;<br>&gt;&gt; I don&#39;t know what causes Swift shared library to have executable stack<br>&gt;&gt; since Febrary 25 snapshot. Febrary 8 snapshot and Swift 2.X branches have no<br>&gt;&gt; such executable stack shared library.<br>&gt;&gt;<br>&gt;&gt; Thanks,<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; -Kim, Jongsu<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-dev mailing list<br>&gt;&gt; swift-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;&gt;<br>&gt;<br></p><p><br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/52752079730726d693332706c65540b8?s=50"></div><header><strong>Standard shared libraries with executable stack</strong> from <string>Sangjin Han</string> &lt;tinysun.net at gmail.com&gt;<p>June 17, 2016 at 11:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>When linking libswiftCore.so, gold linker with --warn-execstack option<br>generates following messages.<br>/usr/bin/ld.gold: warning: lib/swift/linux/x86_64/swift_begin.o: missing<br>.note.GNU-stack section implies executable stack<br>/usr/bin/ld.gold: warning: lib/swift/linux/x86_64/swift_end.o: missing<br>.note.GNU-stack section implies executable stack<br></p><p>I found the web page about the GNU-stack section.<br>http://en.chys.info/2010/12/note-gnu-stack/<br></p><p>After quick testing in my build system (Linux + execstack -q), I think we<br>should append one line to stdlib/public/runtime/swift_sections.S, or pass<br>the proper option to the linker.<br>The line is<br>    .section .note.GNU-stack,&quot;&quot;, at progbits<br>and the option is<br>    &#39;-z noexecstack&#39; (or -Wl,-z -Wl,noexecstack for clang++).<br></p><p>I don&#39;t know which method is better, to patch swift_section.S or to patch<br>linking option.<br></p><p>-Han Sangjin<br></p><p><br>2016-06-17 16:27 GMT+09:00 Dmitri Gribenko &lt;gribozavr at gmail.com&gt;:<br></p><p>&gt; Hi,<br>&gt;<br>&gt; While there wight be an issue in WSL with executable stacks, Swift<br>&gt; does not really need one.  If the binary is actually asking for one,<br>&gt; it would be great if we could figure out a way to ask the gold linker<br>&gt; to not mark stacks as executable.<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; On Thu, Jun 16, 2016 at 11:39 PM, Sangjin Han &lt;tinysun.net at gmail.com&gt;<br>&gt; wrote:<br>&gt; &gt; Hi, Kim.<br>&gt; &gt;<br>&gt; &gt; The test result is same on WSL build 14342.<br>&gt; &gt;<br>&gt; &gt; There is similar report in<br>&gt; &gt; https://github.com/Microsoft/BashOnWindows/issues/286 .<br>&gt; &gt; MS engineer recognized this and replied that give them feedback on the<br>&gt; &gt; uservoice for prioritizing, currently it has only 3 votes.<br>&gt; &gt;<br>&gt; &gt; -Han Sangjin<br>&gt; &gt;<br>&gt; &gt; 2016-06-16 21:17 GMT+09:00 Jongsu Kim via swift-dev &lt;swift-dev at swift.org<br>&gt; &gt;:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Hi,<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; This could have been caused by our switch from the BFD linker to gold.<br>&gt; &gt;&gt;&gt; Could you try linking a hello world program using gold linker and<br>&gt; &gt;&gt;&gt; running it in WSL?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I tried to build Swift by not using -fuse-gold option and the result was<br>&gt; &gt;&gt; same.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; Are you sure that PROT_GROWSDOWN is the flag that enables executable<br>&gt; &gt;&gt;&gt; stack?  I thought that&#39;s what PROT_EXEC is for.  I&#39;m not sure what<br>&gt; &gt;&gt;&gt; PROT_GROWSDOWN actually changes, if I were to speculate, I&#39;d say it<br>&gt; &gt;&gt;&gt; could be a marker that means &quot;this is a stack&quot; or maybe even be just a<br>&gt; &gt;&gt;&gt; performance hint.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; You are right. The executable stack is enabled by PROT_EXEC.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; But Swift shared library&#39;s executable stack seems to set PROT_EXEC AND<br>&gt; &gt;&gt; PROT_GROWSDOWN according to strace.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I don&#39;t know what causes Swift shared library to have executable stack<br>&gt; &gt;&gt; since Febrary 25 snapshot. Febrary 8 snapshot and Swift 2.X branches<br>&gt; have no<br>&gt; &gt;&gt; such executable stack shared library.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Thanks,<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; -Kim, Jongsu<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-dev mailing list<br>&gt; &gt;&gt; swift-dev at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; &gt;&gt;<br>&gt; &gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160617/062f7d5f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Standard shared libraries with executable stack</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>June 17, 2016 at 08:00:00am</p></header><div class="content"><p>On Fri, Jun 17, 2016 at 7:31 AM, Sangjin Han &lt;tinysun.net at gmail.com&gt; wrote:<br>&gt; Hi,<br>&gt;<br>&gt; When linking libswiftCore.so, gold linker with --warn-execstack option<br>&gt; generates following messages.<br>&gt; /usr/bin/ld.gold: warning: lib/swift/linux/x86_64/swift_begin.o: missing<br>&gt; .note.GNU-stack section implies executable stack<br>&gt; /usr/bin/ld.gold: warning: lib/swift/linux/x86_64/swift_end.o: missing<br>&gt; .note.GNU-stack section implies executable stack<br>&gt;<br>&gt; I found the web page about the GNU-stack section.<br>&gt; http://en.chys.info/2010/12/note-gnu-stack/<br>&gt;<br>&gt; After quick testing in my build system (Linux + execstack -q), I think we<br>&gt; should append one line to stdlib/public/runtime/swift_sections.S, or pass<br>&gt; the proper option to the linker.<br>&gt; The line is<br>&gt;     .section .note.GNU-stack,&quot;&quot;, at progbits<br>&gt; and the option is<br>&gt;     &#39;-z noexecstack&#39; (or -Wl,-z -Wl,noexecstack for clang++).<br></p><p>The patch would be much better I think.  Thank you very much for the<br>investigation!  Could you submit a pull request?<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/52752079730726d693332706c65540b8?s=50"></div><header><strong>Standard shared libraries with executable stack</strong> from <string>Sangjin Han</string> &lt;tinysun.net at gmail.com&gt;<p>June 18, 2016 at 06:00:00am</p></header><div class="content"><p>Please review the PR #3053.<br></p><p>2016-06-18 0:17 GMT+09:00 Dmitri Gribenko &lt;gribozavr at gmail.com&gt;:<br></p><p>&gt; On Fri, Jun 17, 2016 at 7:31 AM, Sangjin Han &lt;tinysun.net at gmail.com&gt;<br>&gt; wrote:<br>&gt; &gt; Hi,<br>&gt; &gt;<br>&gt; &gt; When linking libswiftCore.so, gold linker with --warn-execstack option<br>&gt; &gt; generates following messages.<br>&gt; &gt; /usr/bin/ld.gold: warning: lib/swift/linux/x86_64/swift_begin.o: missing<br>&gt; &gt; .note.GNU-stack section implies executable stack<br>&gt; &gt; /usr/bin/ld.gold: warning: lib/swift/linux/x86_64/swift_end.o: missing<br>&gt; &gt; .note.GNU-stack section implies executable stack<br>&gt; &gt;<br>&gt; &gt; I found the web page about the GNU-stack section.<br>&gt; &gt; http://en.chys.info/2010/12/note-gnu-stack/<br>&gt; &gt;<br>&gt; &gt; After quick testing in my build system (Linux + execstack -q), I think we<br>&gt; &gt; should append one line to stdlib/public/runtime/swift_sections.S, or pass<br>&gt; &gt; the proper option to the linker.<br>&gt; &gt; The line is<br>&gt; &gt;     .section .note.GNU-stack,&quot;&quot;, at progbits<br>&gt; &gt; and the option is<br>&gt; &gt;     &#39;-z noexecstack&#39; (or -Wl,-z -Wl,noexecstack for clang++).<br>&gt;<br>&gt; The patch would be much better I think.  Thank you very much for the<br>&gt; investigation!  Could you submit a pull request?<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160618/c98ac010/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Standard shared libraries with executable stack</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>June 18, 2016 at 01:00:00am</p></header><div class="content"><p>Thank you!  I merged your PR, it should be included in the next snapshot.<br></p><p>Dmitri<br></p><p>On Fri, Jun 17, 2016 at 2:26 PM, Sangjin Han &lt;tinysun.net at gmail.com&gt; wrote:<br>&gt; Please review the PR #3053.<br>&gt;<br>&gt; 2016-06-18 0:17 GMT+09:00 Dmitri Gribenko &lt;gribozavr at gmail.com&gt;:<br>&gt;&gt;<br>&gt;&gt; On Fri, Jun 17, 2016 at 7:31 AM, Sangjin Han &lt;tinysun.net at gmail.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; &gt; Hi,<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; When linking libswiftCore.so, gold linker with --warn-execstack option<br>&gt;&gt; &gt; generates following messages.<br>&gt;&gt; &gt; /usr/bin/ld.gold: warning: lib/swift/linux/x86_64/swift_begin.o: missing<br>&gt;&gt; &gt; .note.GNU-stack section implies executable stack<br>&gt;&gt; &gt; /usr/bin/ld.gold: warning: lib/swift/linux/x86_64/swift_end.o: missing<br>&gt;&gt; &gt; .note.GNU-stack section implies executable stack<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I found the web page about the GNU-stack section.<br>&gt;&gt; &gt; http://en.chys.info/2010/12/note-gnu-stack/<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; After quick testing in my build system (Linux + execstack -q), I think<br>&gt;&gt; &gt; we<br>&gt;&gt; &gt; should append one line to stdlib/public/runtime/swift_sections.S, or<br>&gt;&gt; &gt; pass<br>&gt;&gt; &gt; the proper option to the linker.<br>&gt;&gt; &gt; The line is<br>&gt;&gt; &gt;     .section .note.GNU-stack,&quot;&quot;, at progbits<br>&gt;&gt; &gt; and the option is<br>&gt;&gt; &gt;     &#39;-z noexecstack&#39; (or -Wl,-z -Wl,noexecstack for clang++).<br>&gt;&gt;<br>&gt;&gt; The patch would be much better I think.  Thank you very much for the<br>&gt;&gt; investigation!  Could you submit a pull request?<br>&gt;&gt;<br>&gt;&gt; Dmitri<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br>&gt;<br></p><p><br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/01cbe19a454fc80c86f5e2e2f15edbcd?s=50"></div><header><strong>Standard shared libraries with executable stack</strong> from <string>Jongsu Kim</string> &lt;kimjs29 at gmail.com&gt;<p>June 19, 2016 at 12:00:00pm</p></header><div class="content"><p>Hi, Han<br></p><p>Your PR is very helpful. Thanks a lot.<br></p><p>The Foundation repo has some assembly files similar to swift_sections.S as<br>follows:<br>  swift-corelibs-foundation/CoreFoundation/String.subproj/<br>    CFCharacterSetData.S<br>    CFUniCharPropertyDatabase.S<br>    CFUnicodeData.S<br></p><p>The generated libFoundation.so is marked as executable stack on Linux, too.<br></p><p>Would you do me a favor of posting simlar PR to the Foundation Project?<br>Very sorry, I am a git novice.<br></p><p>Thanks.<br></p><p><br>-Kim, Jongsu<br></p><p><br>On Sat, Jun 18, 2016 at 5:30 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt;<br>wrote:<br></p><p>&gt; Thank you!  I merged your PR, it should be included in the next snapshot.<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; On Fri, Jun 17, 2016 at 2:26 PM, Sangjin Han &lt;tinysun.net at gmail.com&gt;<br>&gt; wrote:<br>&gt; &gt; Please review the PR #3053.<br>&gt; &gt;<br>&gt; &gt; 2016-06-18 0:17 GMT+09:00 Dmitri Gribenko &lt;gribozavr at gmail.com&gt;:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; On Fri, Jun 17, 2016 at 7:31 AM, Sangjin Han &lt;tinysun.net at gmail.com&gt;<br>&gt; &gt;&gt; wrote:<br>&gt; &gt;&gt; &gt; Hi,<br>&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt; &gt; When linking libswiftCore.so, gold linker with --warn-execstack option<br>&gt; &gt;&gt; &gt; generates following messages.<br>&gt; &gt;&gt; &gt; /usr/bin/ld.gold: warning: lib/swift/linux/x86_64/swift_begin.o:<br>&gt; missing<br>&gt; &gt;&gt; &gt; .note.GNU-stack section implies executable stack<br>&gt; &gt;&gt; &gt; /usr/bin/ld.gold: warning: lib/swift/linux/x86_64/swift_end.o: missing<br>&gt; &gt;&gt; &gt; .note.GNU-stack section implies executable stack<br>&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt; &gt; I found the web page about the GNU-stack section.<br>&gt; &gt;&gt; &gt; http://en.chys.info/2010/12/note-gnu-stack/<br>&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt; &gt; After quick testing in my build system (Linux + execstack -q), I think<br>&gt; &gt;&gt; &gt; we<br>&gt; &gt;&gt; &gt; should append one line to stdlib/public/runtime/swift_sections.S, or<br>&gt; &gt;&gt; &gt; pass<br>&gt; &gt;&gt; &gt; the proper option to the linker.<br>&gt; &gt;&gt; &gt; The line is<br>&gt; &gt;&gt; &gt;     .section .note.GNU-stack,&quot;&quot;, at progbits<br>&gt; &gt;&gt; &gt; and the option is<br>&gt; &gt;&gt; &gt;     &#39;-z noexecstack&#39; (or -Wl,-z -Wl,noexecstack for clang++).<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; The patch would be much better I think.  Thank you very much for the<br>&gt; &gt;&gt; investigation!  Could you submit a pull request?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Dmitri<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; --<br>&gt; &gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; &gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt; &gt;<br>&gt; &gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160619/f7ba3202/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
