<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/30531676aaa28c283443b2bbe04e1a7b?s=50"></div><header><strong>For discussion: Including source code alongside binaries</strong> from <string>Alexey Demedetskiy</string> &lt;dalog at me.com&gt;<p>February 13, 2016 at 10:00:00am</p></header><div class="content"><p>Why not use _just_ source code and let Xcode / Package Manager to do the job of building? <br></p><p>Or you to want have binary distribution and source code for debug?<br></p><p><br>- Alexey Demedetskiy<br></p><p>&gt; Hello everyone,<br>&gt; <br>&gt; I would like to start a discussion on the possibility of enabling compelling Swift binaries that embed the source code from which they&#39;ve been compiled.<br>&gt; <br>&gt; The value of having source code embedded alongside the binary isdebugging aid - A developer will be able to download 3rd party framework, include it into his Xcode project and then drill down in a debug session into the framework code, having Xcode showing him the source code from which the current breakpoint instruction was built.<br>&gt; <br>&gt; This feature exists in the java world where you can compile a Jar file, having each .class contain it&#39;s .java counter part. I //think// it&#39;s stored in this propertyhttps://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.7.11. This allows opening the Jar of a target library in eclipse and instantly seeing what the code is doing.<br>&gt; <br>&gt; The alternatives today are either decompilers, or.dSYM both are good but not great as each requires manually steps in either management or enforcing corrects of the results.<br>&gt; <br>&gt; Would the community be interested in such a &quot;plug and play&quot; approach for attaching source code to build frameworks / applications / stand alone binaries ?<br>&gt; <br>&gt; Is it feasible to expect such a thing from native apps? if not, can it be an Xcode level feature when only .packages (Framework/Application) will be added support for shipping the .dSYM and Xcode will know to do the lifting to make it just work for the developer?<br>&gt; <br>&gt; <br>&gt; tnx,<br>&gt; -m<br>&gt; <br>&gt; <br>&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d67dc06a6330e7043f85896351fd7e83?s=50"></div><header><strong>For discussion: Including source code alongside binaries</strong> from <string>Maxim Veksler</string> &lt;maxim at vekslers.org&gt;<p>February 14, 2016 at 12:00:00pm</p></header><div class="content"><p>Hey Alexey,<br></p><p>Imagine being able to add RxSwift into your project (either via manually,<br>cocoa pods, carthage, swift package manager or otherwise) and having the<br>seamless experiences of being able to drill down in a debugging session<br>into the code of the framework, looking for why it does something you did<br>not expect.<br></p><p>This experience is very valuable time saver, because today should you wish<br>to reach this point of being able to drill down you need to:<br></p><p>1. Find the source code repository<br>2. clone it locally<br>3. checkout to the correct version / patch<br>4. add the framework source code into your app<br>5. fix any build problems<br>6. remove the binary framework you already have included.<br>7. run the debugging session and hope to be able to reproduce your bug<br>7.1 let Xcode compile the framework from source -- time consuming, without<br>value task.<br>8. Now you need to choose if you leave the framework in source form or<br>starting changing your app back into binary form.<br></p><p>So I think a complete automation is possible, but it does require many<br>moving parts which is why I think Swift poses a great opportunity of making<br>this leap.<br></p><p>Would be glad to hear your feedback.<br></p><p>On Sat, Feb 13, 2016 at 10:20 AM, Alexey Demedetskiy &lt;dalog at me.com&gt; wrote:<br></p><p>&gt; Why not use _just_ source code and let Xcode / Package Manager to do the<br>&gt; job of building?<br>&gt;<br>&gt; Or you to want have binary distribution and source code for debug?<br>&gt;<br>&gt;<br>&gt; - Alexey Demedetskiy<br>&gt;<br>&gt; &gt; Hello everyone,<br>&gt; &gt;<br>&gt; &gt; I would like to start a discussion on the possibility of enabling<br>&gt; compelling Swift binaries that embed the source code from which they&#39;ve<br>&gt; been compiled.<br>&gt; &gt;<br>&gt; &gt; The value of having source code embedded alongside the binary<br>&gt; isdebugging aid - A developer will be able to download 3rd party framework,<br>&gt; include it into his Xcode project and then drill down in a debug session<br>&gt; into the framework code, having Xcode showing him the source code from<br>&gt; which the current breakpoint instruction was built.<br>&gt; &gt;<br>&gt; &gt; This feature exists in the java world where you can compile a Jar file,<br>&gt; having each .class contain it&#39;s .java counter part. I //think// it&#39;s stored<br>&gt; in this propertyhttps://<br>&gt; docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.7.11. This<br>&gt; allows opening the Jar of a target library in eclipse and instantly seeing<br>&gt; what the code is doing.<br>&gt; &gt;<br>&gt; &gt; The alternatives today are either decompilers, or.dSYM both are good but<br>&gt; not great as each requires manually steps in either management or enforcing<br>&gt; corrects of the results.<br>&gt; &gt;<br>&gt; &gt; Would the community be interested in such a &quot;plug and play&quot; approach for<br>&gt; attaching source code to build frameworks / applications / stand alone<br>&gt; binaries ?<br>&gt; &gt;<br>&gt; &gt; Is it feasible to expect such a thing from native apps? if not, can it<br>&gt; be an Xcode level feature when only .packages (Framework/Application) will<br>&gt; be added support for shipping the .dSYM and Xcode will know to do the<br>&gt; lifting to make it just work for the developer?<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; tnx,<br>&gt; &gt; -m<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt;<br></p><p><br></p><p>-- <br>puıɯ ʎɯ ɯoɹɟ ʇuǝs<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160214/6865b41a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/30531676aaa28c283443b2bbe04e1a7b?s=50"></div><header><strong>For discussion: Including source code alongside binaries</strong> from <string>Alexey Demedetskiy</string> &lt;dalog at me.com&gt;<p>February 14, 2016 at 05:00:00pm</p></header><div class="content"><p>Hey Maxim,<br></p><p>I understand your point. This kind of behavior is ideal development workflow, and we should move our package management systems in this direction.<br></p><p>Including source code into binary will do the job, however, we should consider different approaches. <br></p><p>For example: <br></p><p>1) Inside your project you specify RxSwift dependency.<br>2) During build phase, IDE / compiler will download sources.<br>3) Sources are stored in system cache, independent from project tree. Sources are read only.<br>4) RxSwift sources compilation.<br>5) Resulting RXSwift framework is stored in system cache.<br>6) Project is build using resulting framework from cache.<br>7) During debug, exact sources can be displayed to developer.<br></p><p>Advantages of this approach: <br>1) No need to keep sources or binaries in project repo.<br>2) IDE / compiler can reuse resulting binaries.<br>3) Full debug support.<br></p><p>To be honest, this is exactly what you are suppose to do. But on infrastructure level instead of implementation level.<br>I believe we can achieve this behavior using combination of small improvements into existing infrastructure, <br>instead of adding more complexity into compiler.<br></p><p>&gt; 14 февр. 2016 г., в 12:12, Maxim Veksler &lt;maxim at vekslers.org&gt; написал(а):<br>&gt; <br>&gt; Hey Alexey, <br>&gt; <br>&gt; Imagine being able to add RxSwift into your project (either via manually, cocoa pods, carthage, swift package manager or otherwise) and having the seamless experiences of being able to drill down in a debugging session into the code of the framework, looking for why it does something you did not expect. <br>&gt; <br>&gt; This experience is very valuable time saver, because today should you wish to reach this point of being able to drill down you need to:<br>&gt; <br>&gt; 1. Find the source code repository<br>&gt; 2. clone it locally<br>&gt; 3. checkout to the correct version / patch<br>&gt; 4. add the framework source code into your app<br>&gt; 5. fix any build problems<br>&gt; 6. remove the binary framework you already have included.<br>&gt; 7. run the debugging session and hope to be able to reproduce your bug<br>&gt; 7.1 let Xcode compile the framework from source -- time consuming, without value task.<br>&gt; 8. Now you need to choose if you leave the framework in source form or starting changing your app back into binary form.<br>&gt; <br>&gt; So I think a complete automation is possible, but it does require many moving parts which is why I think Swift poses a great opportunity of making this leap. <br>&gt; <br>&gt; Would be glad to hear your feedback.<br>&gt; <br>&gt; On Sat, Feb 13, 2016 at 10:20 AM, Alexey Demedetskiy &lt;dalog at me.com &lt;mailto:dalog at me.com&gt;&gt; wrote:<br>&gt; Why not use _just_ source code and let Xcode / Package Manager to do the job of building?<br>&gt; <br>&gt; Or you to want have binary distribution and source code for debug?<br>&gt; <br>&gt; <br>&gt; - Alexey Demedetskiy<br>&gt; <br>&gt; &gt; Hello everyone,<br>&gt; &gt;<br>&gt; &gt; I would like to start a discussion on the possibility of enabling compelling Swift binaries that embed the source code from which they&#39;ve been compiled.<br>&gt; &gt;<br>&gt; &gt; The value of having source code embedded alongside the binary isdebugging aid - A developer will be able to download 3rd party framework, include it into his Xcode project and then drill down in a debug session into the framework code, having Xcode showing him the source code from which the current breakpoint instruction was built.<br>&gt; &gt;<br>&gt; &gt; This feature exists in the java world where you can compile a Jar file, having each .class contain it&#39;s .java counter part. I //think// it&#39;s stored in this propertyhttps://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.7.11 &lt;http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.7.11&gt;. This allows opening the Jar of a target library in eclipse and instantly seeing what the code is doing.<br>&gt; &gt;<br>&gt; &gt; The alternatives today are either decompilers, or.dSYM both are good but not great as each requires manually steps in either management or enforcing corrects of the results.<br>&gt; &gt;<br>&gt; &gt; Would the community be interested in such a &quot;plug and play&quot; approach for attaching source code to build frameworks / applications / stand alone binaries ?<br>&gt; &gt;<br>&gt; &gt; Is it feasible to expect such a thing from native apps? if not, can it be an Xcode level feature when only .packages (Framework/Application) will be added support for shipping the .dSYM and Xcode will know to do the lifting to make it just work for the developer?<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; tnx,<br>&gt; &gt; -m<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; puıɯ ʎɯ ɯoɹɟ ʇuǝs<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160214/572a69b9/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
