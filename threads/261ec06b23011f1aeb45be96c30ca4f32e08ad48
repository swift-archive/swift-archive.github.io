<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e18859caca1afb014ad58590415b638a?s=50"></div><header><strong>&quot;Assume&quot; directive for classes and methods</strong> from <string>D. Felipe Torres</string> &lt;warorface at gmail.com&gt;<p>December 23, 2015 at 04:00:00pm</p></header><div class="content"><p>I&#39;ve been reading the discussion in &quot;Final by default for classes and<br>methods&quot; and although I don&#39;t have a strong position towards what the<br>default behaviour should be, I think a directive to change that behaviour<br>should be added as when nullability was introduced into Obj-C.<br></p><p>In the current model of Swift, where methods and classes are not final we<br>can ease that by doing something like this:<br></p><p>ASSUME_FINAL_BEGIN<br></p><p>class MyClass {<br></p><p>    func aMethod(arg: String) {<br></p><p><br></p><p>    }<br></p><p><br></p><p>    func anotherMethod(number: Int) {<br></p><p><br></p><p>    }<br></p><p>}<br></p><p>ASSUME_FINAL_END<br></p><p><br></p><p>In this example the whole class is treated as final by the compiler.<br>On the other hand, in the following example:<br></p><p>class MyClass {<br></p><p>ASSUME_FINAL_BEGIN<br></p><p>    func aMethod(arg: String) {<br></p><p><br></p><p>    }<br></p><p>ASSUME_FINAL_END<br></p><p>    func anotherMethod(number: Int) {<br></p><p><br></p><p>    }<br></p><p>}<br></p><p><br>Only aMethod is final, leaving the rest to the default behaviour. (Ok, the<br>example is not different to prepending &#39;final&#39; but you get the idea).<br></p><p><br>Similarly, should the classes and methods become final by default, a<br>directive to do the opposite should be added<br>(ASSUME_OVERRIDEABLE_(BEGIN|END)?)<br></p><p>-- <br>++++++++++++++++++++++++++<br>Diego Torres.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151223/261ead48/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>&quot;Assume&quot; directive for classes and methods</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>December 23, 2015 at 05:00:00pm</p></header><div class="content"><p>&gt; I&#39;ve been reading the discussion in &quot;Final by default for classes and methods&quot; and although I don&#39;t have a strong position towards what the default behaviour should be, I think a directive to change that behaviour should be added as when nullability was introduced into Obj-C.<br>&gt; <br>&gt; In the current model of Swift, where methods and classes are not final we can ease that by doing something like this:<br>&gt; <br>&gt; ASSUME_FINAL_BEGIN<br>&gt; class MyClass {<br>&gt;     func aMethod(arg: String) {<br>&gt;         <br>&gt;     }<br>&gt;     <br>&gt;     func anotherMethod(number: Int) {<br>&gt;         <br>&gt;     }<br>&gt; }<br>&gt; ASSUME_FINAL_END<br></p><p>I talked about this possibility in the thread you mention, and there are imho several other issues that could be addressed in a similar way:<br>[swift-evolution] [Pitch] make @noescape the default<br>[swift-evolution] Make non-void functions @warn_unused_result by default<br></p><p>But there would be one big downside:<br>All this fruitless arguing about better defaults keeps amateurs like me busy â€” just imagine the havoc I&#39;d cause in the complicated and important topics ;-)<br></p><p>Best regards,<br>Tino<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151223/75695df4/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>&quot;Assume&quot; directive for classes and methods</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December 23, 2015 at 09:00:00am</p></header><div class="content"><p>&gt; On Dec 23, 2015, at 7:36 AM, D. Felipe Torres via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;ve been reading the discussion in &quot;Final by default for classes and methods&quot; and although I don&#39;t have a strong position towards what the default behaviour should be, I think a directive to change that behaviour should be added as when nullability was introduced into Obj-C.<br>&gt; <br>&gt; In the current model of Swift, where methods and classes are not final we can ease that by doing something like this:<br>&gt; <br>&gt; ASSUME_FINAL_BEGIN<br>&gt; class MyClass {<br>&gt;     func aMethod(arg: String) {<br>&gt;         <br>&gt;     }<br>&gt;     <br>&gt;     func anotherMethod(number: Int) {<br>&gt;         <br>&gt;     }<br>&gt; }<br>&gt; ASSUME_FINAL_END<br>&gt; <br>&gt; <br>&gt; In this example the whole class is treated as final by the compiler.<br>&gt; On the other hand, in the following example:<br>&gt; <br>&gt; class MyClass {<br>&gt; ASSUME_FINAL_BEGIN<br>&gt;     func aMethod(arg: String) {<br>&gt;         <br>&gt;     }<br>&gt; ASSUME_FINAL_END    <br>&gt;     func anotherMethod(number: Int) {<br>&gt;         <br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; Only aMethod is final, leaving the rest to the default behaviour. (Ok, the example is not different to prepending &#39;final&#39; but you get the idea).<br>&gt; <br>&gt; Similarly, should the classes and methods become final by default, a directive to do the opposite should be added (ASSUME_OVERRIDEABLE_(BEGIN|END)?)<br></p><p>We tried to avoid these kinds of contextual blocks because they make reading declarations in isolation much harder. That&#39;s one of the reasons we have &#39;public&#39;/&#39;private&#39; as per-decl modifiers rather than C++/ObjC-style grouping.<br></p><p>-Joe<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151223/ed0ee8ed/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>&quot;Assume&quot; directive for classes and methods</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>December 23, 2015 at 09:00:00am</p></header><div class="content"><p>&gt; On Dec 23, 2015, at 9:14 , Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Dec 23, 2015, at 7:36 AM, D. Felipe Torres via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I&#39;ve been reading the discussion in &quot;Final by default for classes and methods&quot; and although I don&#39;t have a strong position towards what the default behaviour should be, I think a directive to change that behaviour should be added as when nullability was introduced into Obj-C.<br>&gt;&gt; <br>&gt;&gt; In the current model of Swift, where methods and classes are not final we can ease that by doing something like this:<br>&gt;&gt; <br>&gt;&gt; ASSUME_FINAL_BEGIN<br>&gt;&gt; class MyClass {<br>&gt;&gt;     func aMethod(arg: String) {<br>&gt;&gt;         <br>&gt;&gt;     }<br>&gt;&gt;     <br>&gt;&gt;     func anotherMethod(number: Int) {<br>&gt;&gt;         <br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; ASSUME_FINAL_END<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; In this example the whole class is treated as final by the compiler.<br>&gt;&gt; On the other hand, in the following example:<br>&gt;&gt; <br>&gt;&gt; class MyClass {<br>&gt;&gt; ASSUME_FINAL_BEGIN<br>&gt;&gt;     func aMethod(arg: String) {<br>&gt;&gt;         <br>&gt;&gt;     }<br>&gt;&gt; ASSUME_FINAL_END    <br>&gt;&gt;     func anotherMethod(number: Int) {<br>&gt;&gt;         <br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Only aMethod is final, leaving the rest to the default behaviour. (Ok, the example is not different to prepending &#39;final&#39; but you get the idea).<br>&gt;&gt; <br>&gt;&gt; Similarly, should the classes and methods become final by default, a directive to do the opposite should be added (ASSUME_OVERRIDEABLE_(BEGIN|END)?)<br>&gt; <br>&gt; We tried to avoid these kinds of contextual blocks because they make reading declarations in isolation much harder. That&#39;s one of the reasons we have &#39;public&#39;/&#39;private&#39; as per-decl modifiers rather than C++/ObjC-style grouping.<br></p><p>One of the primary reasons we have the &quot;regions&quot; in Objective-C is because we have existing large bodies of code that need to be audited and annotated. The intent there is to set up a reasonable default, and just mark that a particular section follows that default, rather than to have some code inside regions and some code outside.<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151223/03a6a7a5/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>&quot;Assume&quot; directive for classes and methods</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>December 23, 2015 at 06:00:00pm</p></header><div class="content"><p>&gt; We tried to avoid these kinds of contextual blocks because they make reading declarations in isolation much harder. That&#39;s one of the reasons we have &#39;public&#39;/&#39;private&#39; as per-decl modifiers rather than C++/ObjC-style grouping.<br>Imho that is no problem when the effect of the modifier isn&#39;t local.<br>In the case of final, it would only make a difference in a subclass, and no matter if that subclass is in the same module or in a different one, I don&#39;t see problems:<br>- If it&#39;s in the same module, the author most likely knows his own preference, so it&#39;s better to leave him the freedom of choice instead of forcing him to live with the global default.<br>- If it&#39;s in another module, there is the interface that is generated and has the information<br></p><p>Best regards,<br>Tino<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151223/fab8ee62/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
