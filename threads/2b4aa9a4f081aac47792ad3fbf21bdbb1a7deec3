<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5985cfe6ca3249d6ed92456d15d33e6f?s=50"></div><header><strong>renaming CustomStringConvertible</strong> from <string>Eric Habberstad</string> &lt;eric.colorapp at gmail.com&gt;<p>July  1, 2016 at 12:00:00pm</p></header><div class="content"><p>To the Swift community,<br></p><p>May I put forth a couple of new names for the following protocol:<br></p><p><br>- CustomStringConvertible  —   rename as ‘Descriptive’ or as ‘Revealable’<br></p><p><br>Two goals for Swift is clarity and joy in use of the language, so I strongly feel that ‘Custom-‘ not be part of any new name here since it contributes little except verbosity, and ‘-String-‘ should be dropped too since ‘CustomStringConvertible’ has nothing to do with the String struct proper.  The protocol only consists of the var description, after all.<br></p><p>Of course, the corollary would be ‘DebugDescriptive’ or ‘DebugRevealable’<br></p><p>I did consider ‘Describable’ as a name but to me ‘Descriptive’ looks and sounds better and captures the essence of what CustomStringConvertible really is.  ‘Revealable’ as an alternate sounds, pardon the pun, almost as descriptive and has a bit of a classier ring to it.<br></p><p>This is a followup, albeit partial, to the final review of proposal SE-0041 which noted that the community was quite positive about the stated need to rename this and some other protocols, but just needs agreement on new names.<br></p><p>— Eric<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/2b4aeec3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>renaming CustomStringConvertible</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July  1, 2016 at 07:00:00pm</p></header><div class="content"><p>IIRC, &quot;custom&quot; was used because it&#39;s not just conforming types that are<br>string convertible; it&#39;s that these types have a custom string conversion.<br>I can appreciate how this is an important point to communicate.<br>On Fri, Jul 1, 2016 at 14:16 Eric Habberstad via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; To the Swift community,<br>&gt;<br>&gt; May I put forth a couple of new names for the following protocol:<br>&gt;<br>&gt;<br>&gt; - CustomStringConvertible  —   rename as ‘Descriptive’ or as ‘Revealable’<br>&gt;<br>&gt;<br>&gt; Two goals for Swift is clarity and joy in use of the language, so I<br>&gt; strongly feel that ‘Custom-‘ not be part of any new name here since it<br>&gt; contributes little except verbosity, and ‘-String-‘ should be dropped too<br>&gt; since ‘CustomStringConvertible’ has nothing to do with the String struct<br>&gt; proper.  The protocol only consists of the *var description*, after all.<br>&gt;<br>&gt; Of course, the corollary would be ‘DebugDescriptive’ or ‘DebugRevealable’<br>&gt;<br>&gt; I did consider ‘Describable’ as a name but to me ‘Descriptive’ looks and<br>&gt; sounds better and captures the essence of what CustomStringConvertible<br>&gt; really is.  ‘Revealable’ as an alternate sounds, pardon the pun, almost as<br>&gt; descriptive and has a bit of a classier ring to it.<br>&gt;<br>&gt; This is a followup, albeit partial, to the final review of proposal<br>&gt; SE-0041 which noted that the community was quite positive about the<br>&gt; stated need to rename this and some other protocols, but just needs<br>&gt; agreement on new names.<br>&gt;<br>&gt; — Eric<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/39cea0eb/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>renaming CustomStringConvertible</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>July  1, 2016 at 12:00:00pm</p></header><div class="content"><p>On Fri, Jul 1, 2016 at 12:16 PM, Eric Habberstad via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; To the Swift community,<br>&gt;<br>&gt; May I put forth a couple of new names for the following protocol:<br>&gt;<br>&gt;<br>&gt; - CustomStringConvertible  —   rename as ‘Descriptive’ or as ‘Revealable’<br>&gt;<br>&gt;<br>&gt; Two goals for Swift is clarity and joy in use of the language, so I strongly<br>&gt; feel that ‘Custom-‘ not be part of any new name here since it contributes<br>&gt; little except verbosity<br></p><p>Hi Eric,<br></p><p>This protocol was called Printable before, but it caused a lot of<br>confusion for developers, and was guiding the developers toward<br>writing incorrect APIs.  We have seen a lot of developers writing code<br>like this:<br></p><p>func printAll(_ values: [Printable]) {<br>  for v in values { print(v) }<br>}<br></p><p>This code is unnecessarily restrictive since in Swift everything can<br>be converted into a String.<br></p><p>func printAll(_ values: [Any]) {<br>  for v in values { print(v) }<br>}<br></p><p>The same goes for retrieving debug descriptions and mirrors.  Any<br>value can do that.  It is just that some values can opt into<br>customizing this behavior.<br></p><p>Thus, we renamed the protocols, adding the Custom~ prefix.  Our<br>intention was to encourage only conformances to these protocols, and<br>discourage writing APIs against them.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>renaming CustomStringConvertible</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July  1, 2016 at 07:00:00pm</p></header><div class="content"><p>Perhaps another candidate for sinking into `Syntax`?<br>On Fri, Jul 1, 2016 at 14:23 Dmitri Gribenko via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Fri, Jul 1, 2016 at 12:16 PM, Eric Habberstad via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; To the Swift community,<br>&gt; &gt;<br>&gt; &gt; May I put forth a couple of new names for the following protocol:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; - CustomStringConvertible  —   rename as ‘Descriptive’ or as ‘Revealable’<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; Two goals for Swift is clarity and joy in use of the language, so I<br>&gt; strongly<br>&gt; &gt; feel that ‘Custom-‘ not be part of any new name here since it contributes<br>&gt; &gt; little except verbosity<br>&gt;<br>&gt; Hi Eric,<br>&gt;<br>&gt; This protocol was called Printable before, but it caused a lot of<br>&gt; confusion for developers, and was guiding the developers toward<br>&gt; writing incorrect APIs.  We have seen a lot of developers writing code<br>&gt; like this:<br>&gt;<br>&gt; func printAll(_ values: [Printable]) {<br>&gt;   for v in values { print(v) }<br>&gt; }<br>&gt;<br>&gt; This code is unnecessarily restrictive since in Swift everything can<br>&gt; be converted into a String.<br>&gt;<br>&gt; func printAll(_ values: [Any]) {<br>&gt;   for v in values { print(v) }<br>&gt; }<br>&gt;<br>&gt; The same goes for retrieving debug descriptions and mirrors.  Any<br>&gt; value can do that.  It is just that some values can opt into<br>&gt; customizing this behavior.<br>&gt;<br>&gt; Thus, we renamed the protocols, adding the Custom~ prefix.  Our<br>&gt; intention was to encourage only conformances to these protocols, and<br>&gt; discourage writing APIs against them.<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/2b2b051d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>renaming CustomStringConvertible</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>July  1, 2016 at 02:00:00pm</p></header><div class="content"><p>Maybe... It&#39;s just a property, though. I think if something&#39;s moving into the Syntax thing, I&#39;d rather look for a way to move string interpolation there. Maybe.<br></p><p>- Dave Sweeris<br></p><p>&gt; On Jul 1, 2016, at 14:24, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Perhaps another candidate for sinking into `Syntax`?<br>&gt;&gt; On Fri, Jul 1, 2016 at 14:23 Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; On Fri, Jul 1, 2016 at 12:16 PM, Eric Habberstad via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; To the Swift community,<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; May I put forth a couple of new names for the following protocol:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; - CustomStringConvertible  —   rename as ‘Descriptive’ or as ‘Revealable’<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Two goals for Swift is clarity and joy in use of the language, so I strongly<br>&gt;&gt; &gt; feel that ‘Custom-‘ not be part of any new name here since it contributes<br>&gt;&gt; &gt; little except verbosity<br>&gt;&gt; <br>&gt;&gt; Hi Eric,<br>&gt;&gt; <br>&gt;&gt; This protocol was called Printable before, but it caused a lot of<br>&gt;&gt; confusion for developers, and was guiding the developers toward<br>&gt;&gt; writing incorrect APIs.  We have seen a lot of developers writing code<br>&gt;&gt; like this:<br>&gt;&gt; <br>&gt;&gt; func printAll(_ values: [Printable]) {<br>&gt;&gt;   for v in values { print(v) }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; This code is unnecessarily restrictive since in Swift everything can<br>&gt;&gt; be converted into a String.<br>&gt;&gt; <br>&gt;&gt; func printAll(_ values: [Any]) {<br>&gt;&gt;   for v in values { print(v) }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; The same goes for retrieving debug descriptions and mirrors.  Any<br>&gt;&gt; value can do that.  It is just that some values can opt into<br>&gt;&gt; customizing this behavior.<br>&gt;&gt; <br>&gt;&gt; Thus, we renamed the protocols, adding the Custom~ prefix.  Our<br>&gt;&gt; intention was to encourage only conformances to these protocols, and<br>&gt;&gt; discourage writing APIs against them.<br>&gt;&gt; <br>&gt;&gt; Dmitri<br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/65d9587c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>renaming CustomStringConvertible</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July  1, 2016 at 07:00:00pm</p></header><div class="content"><p>How do you mean?<br>On Fri, Jul 1, 2016 at 14:44 David Sweeris &lt;davesweeris at mac.com&gt; wrote:<br></p><p>&gt; Maybe... It&#39;s just a property, though. I *think* if something&#39;s moving<br>&gt; into the Syntax thing, I&#39;d rather look for a way to move string<br>&gt; interpolation there. Maybe.<br>&gt;<br>&gt; - Dave Sweeris<br>&gt;<br>&gt; On Jul 1, 2016, at 14:24, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Perhaps another candidate for sinking into `Syntax`?<br>&gt; On Fri, Jul 1, 2016 at 14:23 Dmitri Gribenko via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; On Fri, Jul 1, 2016 at 12:16 PM, Eric Habberstad via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; To the Swift community,<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; May I put forth a couple of new names for the following protocol:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; - CustomStringConvertible  —   rename as ‘Descriptive’ or as<br>&gt;&gt; ‘Revealable’<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Two goals for Swift is clarity and joy in use of the language, so I<br>&gt;&gt; strongly<br>&gt;&gt; &gt; feel that ‘Custom-‘ not be part of any new name here since it<br>&gt;&gt; contributes<br>&gt;&gt; &gt; little except verbosity<br>&gt;&gt;<br>&gt;&gt; Hi Eric,<br>&gt;&gt;<br>&gt;&gt; This protocol was called Printable before, but it caused a lot of<br>&gt;&gt; confusion for developers, and was guiding the developers toward<br>&gt;&gt; writing incorrect APIs.  We have seen a lot of developers writing code<br>&gt;&gt; like this:<br>&gt;&gt;<br>&gt;&gt; func printAll(_ values: [Printable]) {<br>&gt;&gt;   for v in values { print(v) }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; This code is unnecessarily restrictive since in Swift everything can<br>&gt;&gt; be converted into a String.<br>&gt;&gt;<br>&gt;&gt; func printAll(_ values: [Any]) {<br>&gt;&gt;   for v in values { print(v) }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; The same goes for retrieving debug descriptions and mirrors.  Any<br>&gt;&gt; value can do that.  It is just that some values can opt into<br>&gt;&gt; customizing this behavior.<br>&gt;&gt;<br>&gt;&gt; Thus, we renamed the protocols, adding the Custom~ prefix.  Our<br>&gt;&gt; intention was to encourage only conformances to these protocols, and<br>&gt;&gt; discourage writing APIs against them.<br>&gt;&gt;<br>&gt;&gt; Dmitri<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/0e06afdd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>renaming CustomStringConvertible</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>July  1, 2016 at 03:00:00pm</p></header><div class="content"><p>As I understand things, the point of the whole “Syntax.Literal.ICan’tRememberWhatIt’sCalledToday” discussion was that syntactically speaking, literals kinda work the opposite as how everyone thinks they do. That’s not the case here; CustomStringConvertible clearly only requires `var description: String {get}`. But the String interpolation “operator&quot;, “\()” might be a good candidate for moving into “Syntax”, if we ever decide it should be able to interact with types other than `T` and `T: CustomStringConvertible`. Well, IMHO, it probably should get moved there regardless, but “my humble opinion&quot; does not make for a convincing proposal on its own (which is unfortunate, IMHO :-D ).<br></p><p>- Dave Sweeris<br></p><p>&gt; On Jul 1, 2016, at 2:47 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; How do you mean?<br>&gt; On Fri, Jul 1, 2016 at 14:44 David Sweeris &lt;davesweeris at mac.com &lt;mailto:davesweeris at mac.com&gt;&gt; wrote:<br>&gt; Maybe... It&#39;s just a property, though. I think if something&#39;s moving into the Syntax thing, I&#39;d rather look for a way to move string interpolation there. Maybe.<br>&gt; <br>&gt; - Dave Sweeris<br>&gt; <br>&gt; On Jul 1, 2016, at 14:24, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Perhaps another candidate for sinking into `Syntax`?<br>&gt;&gt; On Fri, Jul 1, 2016 at 14:23 Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; On Fri, Jul 1, 2016 at 12:16 PM, Eric Habberstad via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; To the Swift community,<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; May I put forth a couple of new names for the following protocol:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; - CustomStringConvertible  —   rename as ‘Descriptive’ or as ‘Revealable’<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Two goals for Swift is clarity and joy in use of the language, so I strongly<br>&gt;&gt; &gt; feel that ‘Custom-‘ not be part of any new name here since it contributes<br>&gt;&gt; &gt; little except verbosity<br>&gt;&gt; <br>&gt;&gt; Hi Eric,<br>&gt;&gt; <br>&gt;&gt; This protocol was called Printable before, but it caused a lot of<br>&gt;&gt; confusion for developers, and was guiding the developers toward<br>&gt;&gt; writing incorrect APIs.  We have seen a lot of developers writing code<br>&gt;&gt; like this:<br>&gt;&gt; <br>&gt;&gt; func printAll(_ values: [Printable]) {<br>&gt;&gt;   for v in values { print(v) }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; This code is unnecessarily restrictive since in Swift everything can<br>&gt;&gt; be converted into a String.<br>&gt;&gt; <br>&gt;&gt; func printAll(_ values: [Any]) {<br>&gt;&gt;   for v in values { print(v) }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; The same goes for retrieving debug descriptions and mirrors.  Any<br>&gt;&gt; value can do that.  It is just that some values can opt into<br>&gt;&gt; customizing this behavior.<br>&gt;&gt; <br>&gt;&gt; Thus, we renamed the protocols, adding the Custom~ prefix.  Our<br>&gt;&gt; intention was to encourage only conformances to these protocols, and<br>&gt;&gt; discourage writing APIs against them.<br>&gt;&gt; <br>&gt;&gt; Dmitri<br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com &lt;mailto:gribozavr at gmail.com&gt;&gt;*/<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/173fe569/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>renaming CustomStringConvertible</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>July  1, 2016 at 10:00:00pm</p></header><div class="content"><p>On 01.07.2016 22:22, Dmitri Gribenko via swift-evolution wrote:<br>&gt; On Fri, Jul 1, 2016 at 12:16 PM, Eric Habberstad via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; To the Swift community,<br>&gt;&gt;<br>&gt;&gt; May I put forth a couple of new names for the following protocol:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; - CustomStringConvertible  —   rename as ‘Descriptive’ or as ‘Revealable’<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Two goals for Swift is clarity and joy in use of the language, so I strongly<br>&gt;&gt; feel that ‘Custom-‘ not be part of any new name here since it contributes<br>&gt;&gt; little except verbosity<br>&gt;<br>&gt; Hi Eric,<br>&gt;<br>&gt; This protocol was called Printable before, but it caused a lot of<br>&gt; confusion for developers, and was guiding the developers toward<br>&gt; writing incorrect APIs.  We have seen a lot of developers writing code<br>&gt; like this:<br>&gt;<br>&gt; func printAll(_ values: [Printable]) {<br>&gt;   for v in values { print(v) }<br>&gt; }<br>&gt;<br>&gt; This code is unnecessarily restrictive since in Swift everything can<br>&gt; be converted into a String.<br></p><p>Yes, but IMO someone, who don&#39;t know this can still write<br></p><p>func printAll(_ values: [CustomStringConvertible]) {<br>   for v in values { print(v) }<br>}<br></p><p>So, I don&#39;t see how this name should help to understand that &quot;everything <br>can be converted into a String&quot;. This is a knowledge that one should read <br>in docs, IMO.<br></p><p>For me it seems logical: &quot;everything could be printed&quot; + &quot;but those who is <br>Descriptive, will be printed by their .description property&quot;.<br></p><p>As for CustomStringConvertible, it seems like you need .asCustromString (or <br>just .asString) property, not .description. This confuses. Or each &quot;thing&quot; <br>should have .description/.asString, but one who needs can override it(to be <br>&quot;custom&quot; representable).<br></p><p>Just some thoughts.<br></p><p>&gt;<br>&gt; func printAll(_ values: [Any]) {<br>&gt;   for v in values { print(v) }<br>&gt; }<br>&gt;<br>&gt; The same goes for retrieving debug descriptions and mirrors.  Any<br>&gt; value can do that.  It is just that some values can opt into<br>&gt; customizing this behavior.<br>&gt;<br>&gt; Thus, we renamed the protocols, adding the Custom~ prefix.  Our<br>&gt; intention was to encourage only conformances to these protocols, and<br>&gt; discourage writing APIs against them.<br>&gt;<br>&gt; Dmitri<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>renaming CustomStringConvertible</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>July  1, 2016 at 12:00:00pm</p></header><div class="content"><p>On Fri, Jul 1, 2016 at 12:48 PM, Vladimir.S &lt;svabox at gmail.com&gt; wrote:<br>&gt; On 01.07.2016 22:22, Dmitri Gribenko via swift-evolution wrote:<br>&gt;&gt;<br>&gt;&gt; On Fri, Jul 1, 2016 at 12:16 PM, Eric Habberstad via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; To the Swift community,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; May I put forth a couple of new names for the following protocol:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; - CustomStringConvertible  —   rename as ‘Descriptive’ or as ‘Revealable’<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Two goals for Swift is clarity and joy in use of the language, so I<br>&gt;&gt;&gt; strongly<br>&gt;&gt;&gt; feel that ‘Custom-‘ not be part of any new name here since it contributes<br>&gt;&gt;&gt; little except verbosity<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Hi Eric,<br>&gt;&gt;<br>&gt;&gt; This protocol was called Printable before, but it caused a lot of<br>&gt;&gt; confusion for developers, and was guiding the developers toward<br>&gt;&gt; writing incorrect APIs.  We have seen a lot of developers writing code<br>&gt;&gt; like this:<br>&gt;&gt;<br>&gt;&gt; func printAll(_ values: [Printable]) {<br>&gt;&gt;   for v in values { print(v) }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; This code is unnecessarily restrictive since in Swift everything can<br>&gt;&gt; be converted into a String.<br>&gt;<br>&gt;<br>&gt; Yes, but IMO someone, who don&#39;t know this can still write<br>&gt;<br>&gt; func printAll(_ values: [CustomStringConvertible]) {<br>&gt;   for v in values { print(v) }<br>&gt; }<br>&gt;<br>&gt; So, I don&#39;t see how this name should help to understand that &quot;everything can<br>&gt; be converted into a String&quot;. This is a knowledge that one should read in<br>&gt; docs, IMO.<br></p><p>They can still write this code, the compiler will accept it.  In<br>practice we found that changing the name helped and developers are now<br>much less likely to code APIs against CustomStringConvertible.  The<br>old name, Printable, strongly implied a capability (like Equatable,<br>Comparable, Hashable).  The new name does not suggest that<br>printability is a capability provided by this protocol.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>renaming CustomStringConvertible</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>July  1, 2016 at 10:00:00pm</p></header><div class="content"><p>On 01.07.2016 22:16, Eric Habberstad via swift-evolution wrote:<br>&gt;<br>&gt; To the Swift community,<br>&gt;<br>&gt; May I put forth a couple of new names for the following protocol:<br>&gt;<br>&gt;<br>&gt; - CustomStringConvertible  —   rename as ‘Descriptive’ or as ‘Revealable’<br></p><p>Strong +1 from me. It looks and reads nice, clearly shows the meaning of <br>the protocol i.e. what it for : to describe the type. I.e. the conformed <br>type could be described. Don&#39;t think we need `String` word here as it is <br>IMO clearly that description is usually a text describing something.<br></p><p>&gt;<br>&gt;<br>&gt; Two goals for Swift is clarity and joy in use of the language, so I<br>&gt; strongly feel that ‘Custom-‘ not be part of any new name here since it<br>&gt; contributes little except verbosity, and ‘-String-‘ should be dropped too<br>&gt; since ‘CustomStringConvertible’ has nothing to do with the String struct<br>&gt; proper.  The protocol only consists of the *var description*, after all.<br>&gt;<br>&gt; Of course, the corollary would be ‘DebugDescriptive’ or ‘DebugRevealable’<br>&gt;<br>&gt; I did consider ‘Describable’ as a name but to me ‘Descriptive’ looks and<br>&gt; sounds better and captures the essence of what CustomStringConvertible<br>&gt; really is.  ‘Revealable’ as an alternate sounds, pardon the pun, almost as<br>&gt; descriptive and has a bit of a classier ring to it.<br>&gt;<br>&gt; This is a followup, albeit partial, to the final review of proposal SE-0041<br>&gt; which noted that the community was quite positive about the stated need to<br>&gt; rename this and some other protocols, but just needs agreement on new names.<br>&gt;<br>&gt; — Eric<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
