<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4a300fb6ff17dc07df9be5e863e0c98a?s=50"></div><header><strong>Switch based on let</strong> from <string>Nate Birkholz</string> &lt;nbirkholz at gmail.com&gt;<p>July  8, 2016 at 08:00:00am</p></header><div class="content"><p>This looks like it doesn&#39;t work (swift 2.x), but wanted to be sure it&#39;s not<br>supported:<br></p><p>class Superclass {}<br>class Subclass1 : Superclass {}<br>class Subclass2 : Superclass {}<br>class Subclass3 : Superclass {}<br></p><p>let sc1 = Subclass1()<br>let sc2 = Subclass2()<br>let sc3 = Subclass3()<br></p><p>let objects : [Superclass] = [sc1, sc2, sc3]<br></p><p>for subclassObject in objects {<br>    switch subclassObject {<br>    case let object = subclassObject as? Subclass1:<br>        doSomethingWith(object)<br>    case let object = subclassObject as? Subclass2:<br>        doSomethingWith(object)<br>    case let object = subclassObject as? Subclass3:<br>        doSomethingWith(object)<br>    default:<br>        return<br>    }<br>}<br>This gives an error, expecting a colon (:) after object on every case.<br></p><p>I wanted to be sure I wasn&#39;t missing something in my syntax (nor some<br>obvious-to-others reason this isn&#39;t supported) before going to swift<br>evolution.<br></p><p><br>-- <br>Nate Birkholz<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160708/d112ef2d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0f0154768aeec561194e651b0bca02d9?s=50"></div><header><strong>Switch based on let</strong> from <string>Dan Loewenherz</string> &lt;dan at lionheartsw.com&gt;<p>July  8, 2016 at 10:00:00am</p></header><div class="content"><p>To my knowledge, you can’t do exactly what you’re trying to do, but this is<br>close:<br></p><p>for subclassObject in objects {<br></p><p>    switch subclassObject.self {<br></p><p>    case is Subclass1:<br></p><p>        doSomethingWith(subclassObject as! Subclass1)<br></p><p><br>    case is Subclass2:<br></p><p>        doSomethingWith(subclassObject as! Subclass2)<br></p><p><br>    case is Subclass3:<br></p><p>        doSomethingWith(subclassObject as! Subclass3)<br></p><p><br>    default:<br></p><p>        break<br></p><p>    }<br></p><p>}<br></p><p>On Fri, Jul 8, 2016 at 10:11 AM, Nate Birkholz via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; This looks like it doesn&#39;t work (swift 2.x), but wanted to be sure it&#39;s<br>&gt; not supported:<br>&gt;<br>&gt; class Superclass {}<br>&gt; class Subclass1 : Superclass {}<br>&gt; class Subclass2 : Superclass {}<br>&gt; class Subclass3 : Superclass {}<br>&gt;<br>&gt; let sc1 = Subclass1()<br>&gt; let sc2 = Subclass2()<br>&gt; let sc3 = Subclass3()<br>&gt;<br>&gt; let objects : [Superclass] = [sc1, sc2, sc3]<br>&gt;<br>&gt; for subclassObject in objects {<br>&gt;     switch subclassObject {<br>&gt;     case let object = subclassObject as? Subclass1:<br>&gt;         doSomethingWith(object)<br>&gt;     case let object = subclassObject as? Subclass2:<br>&gt;         doSomethingWith(object)<br>&gt;     case let object = subclassObject as? Subclass3:<br>&gt;         doSomethingWith(object)<br>&gt;     default:<br>&gt;         return<br>&gt;     }<br>&gt; }<br>&gt; This gives an error, expecting a colon (:) after object on every case.<br>&gt;<br>&gt; I wanted to be sure I wasn&#39;t missing something in my syntax (nor some<br>&gt; obvious-to-others reason this isn&#39;t supported) before going to swift<br>&gt; evolution.<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Nate Birkholz<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160708/2660bdc1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4a300fb6ff17dc07df9be5e863e0c98a?s=50"></div><header><strong>Switch based on let</strong> from <string>Nate Birkholz</string> &lt;nbirkholz at gmail.com&gt;<p>July  8, 2016 at 08:00:00am</p></header><div class="content"><p>Thanks, I never seem to know when to use .self.<br></p><p>On Fri, Jul 8, 2016 at 8:15 AM, Dan Loewenherz &lt;dan at lionheartsw.com&gt; wrote:<br></p><p>&gt; To my knowledge, you can’t do exactly what you’re trying to do, but this<br>&gt; is close:<br>&gt;<br>&gt; for subclassObject in objects {<br>&gt;<br>&gt;     switch subclassObject.self {<br>&gt;<br>&gt;     case is Subclass1:<br>&gt;<br>&gt;         doSomethingWith(subclassObject as! Subclass1)<br>&gt;<br>&gt;<br>&gt;     case is Subclass2:<br>&gt;<br>&gt;         doSomethingWith(subclassObject as! Subclass2)<br>&gt;<br>&gt;<br>&gt;     case is Subclass3:<br>&gt;<br>&gt;         doSomethingWith(subclassObject as! Subclass3)<br>&gt;<br>&gt;<br>&gt;     default:<br>&gt;<br>&gt;         break<br>&gt;<br>&gt;     }<br>&gt;<br>&gt; }<br>&gt;<br>&gt; On Fri, Jul 8, 2016 at 10:11 AM, Nate Birkholz via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; This looks like it doesn&#39;t work (swift 2.x), but wanted to be sure it&#39;s<br>&gt;&gt; not supported:<br>&gt;&gt;<br>&gt;&gt; class Superclass {}<br>&gt;&gt; class Subclass1 : Superclass {}<br>&gt;&gt; class Subclass2 : Superclass {}<br>&gt;&gt; class Subclass3 : Superclass {}<br>&gt;&gt;<br>&gt;&gt; let sc1 = Subclass1()<br>&gt;&gt; let sc2 = Subclass2()<br>&gt;&gt; let sc3 = Subclass3()<br>&gt;&gt;<br>&gt;&gt; let objects : [Superclass] = [sc1, sc2, sc3]<br>&gt;&gt;<br>&gt;&gt; for subclassObject in objects {<br>&gt;&gt;     switch subclassObject {<br>&gt;&gt;     case let object = subclassObject as? Subclass1:<br>&gt;&gt;         doSomethingWith(object)<br>&gt;&gt;     case let object = subclassObject as? Subclass2:<br>&gt;&gt;         doSomethingWith(object)<br>&gt;&gt;     case let object = subclassObject as? Subclass3:<br>&gt;&gt;         doSomethingWith(object)<br>&gt;&gt;     default:<br>&gt;&gt;         return<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; This gives an error, expecting a colon (:) after object on every case.<br>&gt;&gt;<br>&gt;&gt; I wanted to be sure I wasn&#39;t missing something in my syntax (nor some<br>&gt;&gt; obvious-to-others reason this isn&#39;t supported) before going to swift<br>&gt;&gt; evolution.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Nate Birkholz<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br></p><p><br>-- <br>Nate Birkholz<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160708/b9cd5eca/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8809800aec2460f291384b794d7e6f8f?s=50"></div><header><strong>object.self?</strong> from <string>Rick Mann</string> &lt;rmann at latencyzero.com&gt;<p>July  8, 2016 at 09:00:00am</p></header><div class="content"><p>I just saw a question which brought up something I didn&#39;t know about. Apparently sometimes you have to call object.self in a place that looks like you should just use &quot;object.&quot; What does this usage mean?<br></p><p>for subclassObject in objects {<br>    switch subclassObject.self {	&lt;--- Here, why not &quot;subclassObject&quot; alone?<br>    case is Subclass1:<br>        doSomethingWith(subclassObject as! Subclass1)<br></p><p>    case is Subclass2:<br>        doSomethingWith(subclassObject as! Subclass2)<br></p><p>    case is Subclass3:<br>        doSomethingWith(subclassObject as! Subclass3)<br></p><p>    default:<br>        break<br>    }<br>}<br></p><p>Thanks,<br>Rick<br></p><p>&gt; On Jul 8, 2016, at 08:15 , Dan Loewenherz via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; To my knowledge, you can’t do exactly what you’re trying to do, but this is close:<br>&gt; <br>&gt; for subclassObject in objects {<br>&gt;     switch subclassObject.self {<br>&gt;     case is Subclass1:<br>&gt;         doSomethingWith(subclassObject as! Subclass1)<br>&gt; <br>&gt;     case is Subclass2:<br>&gt;         doSomethingWith(subclassObject as! Subclass2)<br>&gt; <br>&gt;     case is Subclass3:<br>&gt;         doSomethingWith(subclassObject as! Subclass3)<br>&gt; <br>&gt;     default:<br>&gt;         break<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; On Fri, Jul 8, 2016 at 10:11 AM, Nate Birkholz via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; This looks like it doesn&#39;t work (swift 2.x), but wanted to be sure it&#39;s not supported:<br>&gt; class Superclass {}<br>&gt; class Subclass1 : Superclass {}<br>&gt; class Subclass2 : Superclass {}<br>&gt; class Subclass3 : Superclass {}<br>&gt; <br>&gt; let sc1 = Subclass1()<br>&gt; let sc2 = Subclass2()<br>&gt; let sc3 = Subclass3()<br>&gt; <br>&gt; let objects : [Superclass] = [sc1, sc2, sc3]<br>&gt; <br>&gt; for subclassObject in objects {<br>&gt;     switch subclassObject {<br>&gt;     case let object = subclassObject as? Subclass1:<br>&gt;         doSomethingWith(object)<br>&gt;     case let object = subclassObject as? Subclass2:<br>&gt;         doSomethingWith(object)<br>&gt;     case let object = subclassObject as? Subclass3:<br>&gt;         doSomethingWith(object)<br>&gt;     default:<br>&gt;         return<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; This gives an error, expecting a colon (:) after object on every case.<br>&gt; <br>&gt; I wanted to be sure I wasn&#39;t missing something in my syntax (nor some obvious-to-others reason this isn&#39;t supported) before going to swift evolution.<br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Nate Birkholz<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p><br>-- <br>Rick Mann<br>rmann at latencyzero.com<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>object.self?</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>July  8, 2016 at 09:00:00am</p></header><div class="content"><p>Hi Rick,<br></p><p>If you have a type (let&#39;s call it &quot;T&quot;), you can use it two ways:<br></p><p>* As a type, or part of a type, like such: &quot;let x : T = blah()&quot;<br>* As a value, just like any other variable, function argument, property,<br>etc.<br></p><p>In the second case (type-as-value), you need to append &quot;.self&quot; to the type<br>name according to the grammar:<br></p><p>&quot;let x : Any.Type = T.self&quot;<br></p><p>There was a &quot;bug&quot; in Swift 2.x where you could sometimes use just &quot;T&quot;,<br>without the &quot;.self&quot;, in certain cases (in particular, when you were passing<br>in a type-as-value to a function with one unlabeled argument). That bug has<br>since been fixed.<br></p><p>As for types-as-values: Swift allows you to treat a type as a normal value,<br>which means you can do whatever you want with it: pass it to functions and<br>return it from functions, store it in properties or variables, etc. If you<br>have one of these types-as-values (called &#39;metatypes&#39;), you can do certain<br>things like call static methods or initializers on them, use them to<br>parameterize generic functions, etc.<br></p><p>However, to get back to your original question, the `.self` in that switch<br>statement actually isn&#39;t necessary and you should really just be switching<br>on the value of subclassObject itself, not the value of its type.<br></p><p>Best,<br>Austin<br></p><p><br>On Fri, Jul 8, 2016 at 9:38 AM, Rick Mann via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; I just saw a question which brought up something I didn&#39;t know about.<br>&gt; Apparently sometimes you have to call object.self in a place that looks<br>&gt; like you should just use &quot;object.&quot; What does this usage mean?<br>&gt;<br>&gt; for subclassObject in objects {<br>&gt;     switch subclassObject.self {        &lt;--- Here, why not<br>&gt; &quot;subclassObject&quot; alone?<br>&gt;     case is Subclass1:<br>&gt;         doSomethingWith(subclassObject as! Subclass1)<br>&gt;<br>&gt;     case is Subclass2:<br>&gt;         doSomethingWith(subclassObject as! Subclass2)<br>&gt;<br>&gt;     case is Subclass3:<br>&gt;         doSomethingWith(subclassObject as! Subclass3)<br>&gt;<br>&gt;     default:<br>&gt;         break<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; Thanks,<br>&gt; Rick<br>&gt;<br>&gt; &gt; On Jul 8, 2016, at 08:15 , Dan Loewenherz via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; To my knowledge, you can’t do exactly what you’re trying to do, but this<br>&gt; is close:<br>&gt; &gt;<br>&gt; &gt; for subclassObject in objects {<br>&gt; &gt;     switch subclassObject.self {<br>&gt; &gt;     case is Subclass1:<br>&gt; &gt;         doSomethingWith(subclassObject as! Subclass1)<br>&gt; &gt;<br>&gt; &gt;     case is Subclass2:<br>&gt; &gt;         doSomethingWith(subclassObject as! Subclass2)<br>&gt; &gt;<br>&gt; &gt;     case is Subclass3:<br>&gt; &gt;         doSomethingWith(subclassObject as! Subclass3)<br>&gt; &gt;<br>&gt; &gt;     default:<br>&gt; &gt;         break<br>&gt; &gt;     }<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; On Fri, Jul 8, 2016 at 10:11 AM, Nate Birkholz via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt; &gt; This looks like it doesn&#39;t work (swift 2.x), but wanted to be sure it&#39;s<br>&gt; not supported:<br>&gt; &gt; class Superclass {}<br>&gt; &gt; class Subclass1 : Superclass {}<br>&gt; &gt; class Subclass2 : Superclass {}<br>&gt; &gt; class Subclass3 : Superclass {}<br>&gt; &gt;<br>&gt; &gt; let sc1 = Subclass1()<br>&gt; &gt; let sc2 = Subclass2()<br>&gt; &gt; let sc3 = Subclass3()<br>&gt; &gt;<br>&gt; &gt; let objects : [Superclass] = [sc1, sc2, sc3]<br>&gt; &gt;<br>&gt; &gt; for subclassObject in objects {<br>&gt; &gt;     switch subclassObject {<br>&gt; &gt;     case let object = subclassObject as? Subclass1:<br>&gt; &gt;         doSomethingWith(object)<br>&gt; &gt;     case let object = subclassObject as? Subclass2:<br>&gt; &gt;         doSomethingWith(object)<br>&gt; &gt;     case let object = subclassObject as? Subclass3:<br>&gt; &gt;         doSomethingWith(object)<br>&gt; &gt;     default:<br>&gt; &gt;         return<br>&gt; &gt;     }<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; This gives an error, expecting a colon (:) after object on every case.<br>&gt; &gt;<br>&gt; &gt; I wanted to be sure I wasn&#39;t missing something in my syntax (nor some<br>&gt; obvious-to-others reason this isn&#39;t supported) before going to swift<br>&gt; evolution.<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; Nate Birkholz<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-users mailing list<br>&gt; &gt; swift-users at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-users mailing list<br>&gt; &gt; swift-users at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Rick Mann<br>&gt; rmann at latencyzero.com<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160708/3e35b007/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8809800aec2460f291384b794d7e6f8f?s=50"></div><header><strong>object.self?</strong> from <string>Rick Mann</string> &lt;rmann at latencyzero.com&gt;<p>July  9, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Jul 8, 2016, at 09:45 , Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt; <br>&gt; Hi Rick,<br>&gt; <br>&gt; If you have a type (let&#39;s call it &quot;T&quot;), you can use it two ways:<br>&gt; <br>&gt; * As a type, or part of a type, like such: &quot;let x : T = blah()&quot;<br>&gt; * As a value, just like any other variable, function argument, property, etc.<br>&gt; <br>&gt; In the second case (type-as-value), you need to append &quot;.self&quot; to the type name according to the grammar:<br>&gt; <br>&gt; &quot;let x : Any.Type = T.self&quot;<br>&gt; <br>&gt; There was a &quot;bug&quot; in Swift 2.x where you could sometimes use just &quot;T&quot;, without the &quot;.self&quot;, in certain cases (in particular, when you were passing in a type-as-value to a function with one unlabeled argument). That bug has since been fixed.<br>&gt; <br>&gt; As for types-as-values: Swift allows you to treat a type as a normal value, which means you can do whatever you want with it: pass it to functions and return it from functions, store it in properties or variables, etc. If you have one of these types-as-values (called &#39;metatypes&#39;), you can do certain things like call static methods or initializers on them, use them to parameterize generic functions, etc.<br></p><p>Thanks, Austin. I&#39;m familiar with all this in Swift. What threw me was that &quot;subclassObject&quot; was an instance, not a class.<br></p><p>&gt; However, to get back to your original question, the `.self` in that switch statement actually isn&#39;t necessary and you should really just be switching on the value of subclassObject itself, not the value of its type.<br></p><p>I would have thought so, but the response to this answer was something along the lines of &quot;I never know when to use the object or its self.&quot;<br></p><p>To me, for an instance, foo an foo.self should be equivalent in all respects (shouldn&#39;t it?).<br></p><p>&gt;  <br>&gt; Best,<br>&gt; Austin<br>&gt; <br>&gt; <br>&gt; On Fri, Jul 8, 2016 at 9:38 AM, Rick Mann via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; I just saw a question which brought up something I didn&#39;t know about. Apparently sometimes you have to call object.self in a place that looks like you should just use &quot;object.&quot; What does this usage mean?<br>&gt; <br>&gt; for subclassObject in objects {<br>&gt;     switch subclassObject.self {        &lt;--- Here, why not &quot;subclassObject&quot; alone?<br>&gt;     case is Subclass1:<br>&gt;         doSomethingWith(subclassObject as! Subclass1)<br>&gt; <br>&gt;     case is Subclass2:<br>&gt;         doSomethingWith(subclassObject as! Subclass2)<br>&gt; <br>&gt;     case is Subclass3:<br>&gt;         doSomethingWith(subclassObject as! Subclass3)<br>&gt; <br>&gt;     default:<br>&gt;         break<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; Thanks,<br>&gt; Rick<br>&gt; <br>&gt; &gt; On Jul 8, 2016, at 08:15 , Dan Loewenherz via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; To my knowledge, you can’t do exactly what you’re trying to do, but this is close:<br>&gt; &gt;<br>&gt; &gt; for subclassObject in objects {<br>&gt; &gt;     switch subclassObject.self {<br>&gt; &gt;     case is Subclass1:<br>&gt; &gt;         doSomethingWith(subclassObject as! Subclass1)<br>&gt; &gt;<br>&gt; &gt;     case is Subclass2:<br>&gt; &gt;         doSomethingWith(subclassObject as! Subclass2)<br>&gt; &gt;<br>&gt; &gt;     case is Subclass3:<br>&gt; &gt;         doSomethingWith(subclassObject as! Subclass3)<br>&gt; &gt;<br>&gt; &gt;     default:<br>&gt; &gt;         break<br>&gt; &gt;     }<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; On Fri, Jul 8, 2016 at 10:11 AM, Nate Birkholz via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; &gt; This looks like it doesn&#39;t work (swift 2.x), but wanted to be sure it&#39;s not supported:<br>&gt; &gt; class Superclass {}<br>&gt; &gt; class Subclass1 : Superclass {}<br>&gt; &gt; class Subclass2 : Superclass {}<br>&gt; &gt; class Subclass3 : Superclass {}<br>&gt; &gt;<br>&gt; &gt; let sc1 = Subclass1()<br>&gt; &gt; let sc2 = Subclass2()<br>&gt; &gt; let sc3 = Subclass3()<br>&gt; &gt;<br>&gt; &gt; let objects : [Superclass] = [sc1, sc2, sc3]<br>&gt; &gt;<br>&gt; &gt; for subclassObject in objects {<br>&gt; &gt;     switch subclassObject {<br>&gt; &gt;     case let object = subclassObject as? Subclass1:<br>&gt; &gt;         doSomethingWith(object)<br>&gt; &gt;     case let object = subclassObject as? Subclass2:<br>&gt; &gt;         doSomethingWith(object)<br>&gt; &gt;     case let object = subclassObject as? Subclass3:<br>&gt; &gt;         doSomethingWith(object)<br>&gt; &gt;     default:<br>&gt; &gt;         return<br>&gt; &gt;     }<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; This gives an error, expecting a colon (:) after object on every case.<br>&gt; &gt;<br>&gt; &gt; I wanted to be sure I wasn&#39;t missing something in my syntax (nor some obvious-to-others reason this isn&#39;t supported) before going to swift evolution.<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; Nate Birkholz<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-users mailing list<br>&gt; &gt; swift-users at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-users mailing list<br>&gt; &gt; swift-users at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br>&gt; <br>&gt; --<br>&gt; Rick Mann<br>&gt; rmann at latencyzero.com<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br></p><p><br>-- <br>Rick Mann<br>rmann at latencyzero.com<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>object.self?</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>July  9, 2016 at 02:00:00pm</p></header><div class="content"><p>Yes, as far as I know &#39;foo&#39; and &#39;foo.self&#39; are equivalent. I don&#39;t actually<br>know why the latter exists, except in analogy to &quot;T.self&quot;.<br></p><p>There was a mistake in my response; the metatype of &#39;foo&#39; is not<br>&#39;foo.self&#39;, it is &#39;foo.dynamicType&#39; (or whatever new form dynamicType is<br>going to take in Swift 3).<br></p><p>On Sat, Jul 9, 2016 at 2:27 PM, Rick Mann &lt;rmann at latencyzero.com&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Jul 8, 2016, at 09:45 , Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Hi Rick,<br>&gt; &gt;<br>&gt; &gt; If you have a type (let&#39;s call it &quot;T&quot;), you can use it two ways:<br>&gt; &gt;<br>&gt; &gt; * As a type, or part of a type, like such: &quot;let x : T = blah()&quot;<br>&gt; &gt; * As a value, just like any other variable, function argument, property,<br>&gt; etc.<br>&gt; &gt;<br>&gt; &gt; In the second case (type-as-value), you need to append &quot;.self&quot; to the<br>&gt; type name according to the grammar:<br>&gt; &gt;<br>&gt; &gt; &quot;let x : Any.Type = T.self&quot;<br>&gt; &gt;<br>&gt; &gt; There was a &quot;bug&quot; in Swift 2.x where you could sometimes use just &quot;T&quot;,<br>&gt; without the &quot;.self&quot;, in certain cases (in particular, when you were passing<br>&gt; in a type-as-value to a function with one unlabeled argument). That bug has<br>&gt; since been fixed.<br>&gt; &gt;<br>&gt; &gt; As for types-as-values: Swift allows you to treat a type as a normal<br>&gt; value, which means you can do whatever you want with it: pass it to<br>&gt; functions and return it from functions, store it in properties or<br>&gt; variables, etc. If you have one of these types-as-values (called<br>&gt; &#39;metatypes&#39;), you can do certain things like call static methods or<br>&gt; initializers on them, use them to parameterize generic functions, etc.<br>&gt;<br>&gt; Thanks, Austin. I&#39;m familiar with all this in Swift. What threw me was<br>&gt; that &quot;subclassObject&quot; was an instance, not a class.<br>&gt;<br>&gt; &gt; However, to get back to your original question, the `.self` in that<br>&gt; switch statement actually isn&#39;t necessary and you should really just be<br>&gt; switching on the value of subclassObject itself, not the value of its type.<br>&gt;<br>&gt; I would have thought so, but the response to this answer was something<br>&gt; along the lines of &quot;I never know when to use the object or its self.&quot;<br>&gt;<br>&gt; To me, for an instance, foo an foo.self should be equivalent in all<br>&gt; respects (shouldn&#39;t it?).<br>&gt;<br>&gt; &gt;<br>&gt; &gt; Best,<br>&gt; &gt; Austin<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; On Fri, Jul 8, 2016 at 9:38 AM, Rick Mann via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt; &gt; I just saw a question which brought up something I didn&#39;t know about.<br>&gt; Apparently sometimes you have to call object.self in a place that looks<br>&gt; like you should just use &quot;object.&quot; What does this usage mean?<br>&gt; &gt;<br>&gt; &gt; for subclassObject in objects {<br>&gt; &gt;     switch subclassObject.self {        &lt;--- Here, why not<br>&gt; &quot;subclassObject&quot; alone?<br>&gt; &gt;     case is Subclass1:<br>&gt; &gt;         doSomethingWith(subclassObject as! Subclass1)<br>&gt; &gt;<br>&gt; &gt;     case is Subclass2:<br>&gt; &gt;         doSomethingWith(subclassObject as! Subclass2)<br>&gt; &gt;<br>&gt; &gt;     case is Subclass3:<br>&gt; &gt;         doSomethingWith(subclassObject as! Subclass3)<br>&gt; &gt;<br>&gt; &gt;     default:<br>&gt; &gt;         break<br>&gt; &gt;     }<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; Thanks,<br>&gt; &gt; Rick<br>&gt; &gt;<br>&gt; &gt; &gt; On Jul 8, 2016, at 08:15 , Dan Loewenherz via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; To my knowledge, you can’t do exactly what you’re trying to do, but<br>&gt; this is close:<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; for subclassObject in objects {<br>&gt; &gt; &gt;     switch subclassObject.self {<br>&gt; &gt; &gt;     case is Subclass1:<br>&gt; &gt; &gt;         doSomethingWith(subclassObject as! Subclass1)<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;     case is Subclass2:<br>&gt; &gt; &gt;         doSomethingWith(subclassObject as! Subclass2)<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;     case is Subclass3:<br>&gt; &gt; &gt;         doSomethingWith(subclassObject as! Subclass3)<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;     default:<br>&gt; &gt; &gt;         break<br>&gt; &gt; &gt;     }<br>&gt; &gt; &gt; }<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; On Fri, Jul 8, 2016 at 10:11 AM, Nate Birkholz via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt; &gt; &gt; This looks like it doesn&#39;t work (swift 2.x), but wanted to be sure<br>&gt; it&#39;s not supported:<br>&gt; &gt; &gt; class Superclass {}<br>&gt; &gt; &gt; class Subclass1 : Superclass {}<br>&gt; &gt; &gt; class Subclass2 : Superclass {}<br>&gt; &gt; &gt; class Subclass3 : Superclass {}<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; let sc1 = Subclass1()<br>&gt; &gt; &gt; let sc2 = Subclass2()<br>&gt; &gt; &gt; let sc3 = Subclass3()<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; let objects : [Superclass] = [sc1, sc2, sc3]<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; for subclassObject in objects {<br>&gt; &gt; &gt;     switch subclassObject {<br>&gt; &gt; &gt;     case let object = subclassObject as? Subclass1:<br>&gt; &gt; &gt;         doSomethingWith(object)<br>&gt; &gt; &gt;     case let object = subclassObject as? Subclass2:<br>&gt; &gt; &gt;         doSomethingWith(object)<br>&gt; &gt; &gt;     case let object = subclassObject as? Subclass3:<br>&gt; &gt; &gt;         doSomethingWith(object)<br>&gt; &gt; &gt;     default:<br>&gt; &gt; &gt;         return<br>&gt; &gt; &gt;     }<br>&gt; &gt; &gt; }<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; This gives an error, expecting a colon (:) after object on every case.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; I wanted to be sure I wasn&#39;t missing something in my syntax (nor some<br>&gt; obvious-to-others reason this isn&#39;t supported) before going to swift<br>&gt; evolution.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; --<br>&gt; &gt; &gt; Nate Birkholz<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; _______________________________________________<br>&gt; &gt; &gt; swift-users mailing list<br>&gt; &gt; &gt; swift-users at swift.org<br>&gt; &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; _______________________________________________<br>&gt; &gt; &gt; swift-users mailing list<br>&gt; &gt; &gt; swift-users at swift.org<br>&gt; &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; Rick Mann<br>&gt; &gt; rmann at latencyzero.com<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-users mailing list<br>&gt; &gt; swift-users at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; &gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Rick Mann<br>&gt; rmann at latencyzero.com<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160709/c5ccb254/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
