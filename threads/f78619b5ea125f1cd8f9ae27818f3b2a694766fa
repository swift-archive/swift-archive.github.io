<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/56cb5a1cac292ddd8f5688fc031e0103?s=50"></div><header><strong>an observation on colons in variable type declarations</strong> from <string>Oliver M</string> &lt;selectedfordeletion at yahoo.com&gt;<p>February  9, 2016 at 10:00:00pm</p></header><div class="content"><p>- A brief observation regarding variable type declarations<br>   -    <br></p><p>   - I find the colon in variable type declarations a little odd.<br>   - Consider the following:<br>   -    <br></p><p>   - var welcomeMessage: String<br>   -    <br></p><p>   - wouldn&#39;t this be cleaner simply written as<br>   -    <br></p><p>   - var welcomeMessage String<br>   -    <br></p><p>   -    <br></p><p>   - the documentation says to read the colon &#39;:&#39; as &quot;of type&quot; in such situations<br>   -    <br></p><p>   - but does the type &quot;String&quot; itself not imply &#39;of type String&#39;<br>   -    <br></p><p>   -    <br></p><p>   -    <br></p><p>   - Consider the colon in a function declaration:<br>   -    <br></p><p>   - func sayHello(personName: String) {}<br>   -    <br></p><p>   - I would read the portion within the brackets as:<br>   - parameter named personName takes value of type String (because you input values when calling functions)<br>   - with the colon reading &#39;takes value&#39; and &quot;String&quot; again reading &#39;of type String&#39;<br>   -    <br></p><p>   -    <br></p><p>   -    <br></p><p>   - I find the colon &#39;:&#39; strongly associated with function input values, and with associations [key:value pairs etc]<br>   - but variables…you don&#39;t input anything and they are not inherently associations.<br>   -    <br></p><p>   -    <br></p><p>   - When coding half asleep I find myself compelled to input a value wherever I see a &#39;:&#39; and I can see myself typing something really really silly<br>   -    <br></p><p>   - var myIndex: &quot;Int&quot; <br>   - myIndex = 0<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160209/f78666fa/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>an observation on colons in variable type declarations</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>February 10, 2016 at 11:00:00am</p></header><div class="content"><p>I also find it odd that -&gt; is used for return types instead of a :. My<br>favourite would be for = to be used for assigning to argument labels,<br>initialization of lets, and dictionary entries, : used for types, and -&gt;<br>used for assignment to vars. IE:<br></p><p>   1. Defining: `func max(x1 x1: Int, x2: Int = 0): Int` instead of `func<br>   max(x1 x1: Int, x2: Int = 0) -&gt; Int`<br>   2. Using: `let positive = max(x1 = -5)` instead of `let positive =<br>   max(x1: -5)`<br>   3. Assigning: `var 0 -&gt; x; 1 +-&gt; x` instead of `var x = 0; x += 1`<br>   4. Entries: `let dict = [&quot;A&quot; = 1, &quot;B&quot; = 2]` instead of `let dict = [&quot;A&quot;<br>   : 1, &quot;B&quot; : 2]`<br></p><p>However the current syntax, whilst inconsistent, is OK and therefore not<br>worth changing.<br></p><p>  -- Howard.<br></p><p>On 10 February 2016 at 09:45, Oliver M via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt;    - A brief observation regarding variable type declarations<br>&gt;    -<br>&gt;    - I find the colon in variable type declarations a little odd.<br>&gt;    - Consider the following:<br>&gt;    -<br>&gt;    - var welcomeMessage: String<br>&gt;    -<br>&gt;    - wouldn&#39;t this be cleaner simply written as<br>&gt;    -<br>&gt;    - var welcomeMessage String<br>&gt;    -<br>&gt;    -<br>&gt;    - the documentation says to read the colon &#39;:&#39; as &quot;of type&quot; in such<br>&gt;    situations<br>&gt;    -<br>&gt;    - but does the type &quot;String&quot; itself not imply &#39;of type String&#39;<br>&gt;    -<br>&gt;    -<br>&gt;    -<br>&gt;    - Consider the colon in a function declaration:<br>&gt;    -<br>&gt;    - func sayHello(personName: String) {}<br>&gt;    -<br>&gt;    - I would read the portion within the brackets as:<br>&gt;    - parameter named personName takes value of type String (because you<br>&gt;    input values when calling functions)<br>&gt;    - with the colon reading &#39;takes value&#39; and &quot;String&quot; again reading &#39;of<br>&gt;    type String&#39;<br>&gt;    -<br>&gt;    -<br>&gt;    -<br>&gt;    - I find the colon &#39;:&#39; strongly associated with function input values,<br>&gt;    and with associations [key:value pairs etc]<br>&gt;    - but variables…you don&#39;t input anything and they are not inherently<br>&gt;    associations.<br>&gt;    -<br>&gt;    -<br>&gt;    - When coding half asleep I find myself compelled to input a value<br>&gt;    wherever I see a &#39;:&#39; and I can see myself typing something really really<br>&gt;    silly<br>&gt;    -<br>&gt;    - var myIndex: &quot;Int&quot;<br>&gt;    - myIndex = 0<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160210/eb7c9544/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d30e546d655d1c7ece0464791a9a90d5?s=50"></div><header><strong>an observation on colons in variable type declarations</strong> from <string>Adrian Kashivskyy</string> &lt;adrian.kashivskyy at me.com&gt;<p>February 10, 2016 at 10:00:00am</p></header><div class="content"><p>Howard, there is an ongoing discussion about using equal sign instead of a colon in dictionary literals.<br></p><p>Anyway, I&#39;m -1 on all of this. Colons explicitly and successfully separate name from its type. What happens if you type <br></p><p>&gt; let String String<br></p><p><br>in your scenario? How can one distinguish what&#39;s what?<br></p><p>Besides, Oliver and Howard, your only argument is that &quot;you find it odd&quot;. To convince me (and many others, I presume), you&#39;d need to provide a stronger argument.<br></p><p><br>Pozdrawiam – Regards,<br>Adrian Kashivskyy<br></p><p>&gt; Wiadomość napisana przez Howard Lovatt via swift-evolution &lt;swift-evolution at swift.org&gt; w dniu 10.02.2016, o godz. 01:28:<br>&gt; <br>&gt; I also find it odd that -&gt; is used for return types instead of a :. My favourite would be for = to be used for assigning to argument labels, initialization of lets, and dictionary entries, : used for types, and -&gt; used for assignment to vars. IE:<br>&gt; Defining: `func max(x1 x1: Int, x2: Int = 0): Int` instead of `func max(x1 x1: Int, x2: Int = 0) -&gt; Int`<br>&gt; Using: `let positive = max(x1 = -5)` instead of `let positive = max(x1: -5)`<br>&gt; Assigning: `var 0 -&gt; x; 1 +-&gt; x` instead of `var x = 0; x += 1`<br>&gt; Entries: `let dict = [&quot;A&quot; = 1, &quot;B&quot; = 2]` instead of `let dict = [&quot;A&quot; : 1, &quot;B&quot; : 2]`<br>&gt; However the current syntax, whilst inconsistent, is OK and therefore not worth changing.<br>&gt; <br>&gt;   -- Howard.<br>&gt; <br>&gt; On 10 February 2016 at 09:45, Oliver M via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; A brief observation regarding variable type declarations<br>&gt; <br>&gt; I find the colon in variable type declarations a little odd.<br>&gt; Consider the following:<br>&gt; <br>&gt; var welcomeMessage: String<br>&gt; <br>&gt; wouldn&#39;t this be cleaner simply written as<br>&gt; <br>&gt; var welcomeMessage String<br>&gt; <br>&gt; <br>&gt; the documentation says to read the colon &#39;:&#39; as &quot;of type&quot; in such situations<br>&gt; <br>&gt; but does the type &quot;String&quot; itself not imply &#39;of type String&#39;<br>&gt; <br>&gt; <br>&gt; <br>&gt; Consider the colon in a function declaration:<br>&gt; <br>&gt; func sayHello(personName: String) {}<br>&gt; <br>&gt; I would read the portion within the brackets as:<br>&gt; parameter named personName takes value of type String (because you input values when calling functions)<br>&gt; with the colon reading &#39;takes value&#39; and &quot;String&quot; again reading &#39;of type String&#39;<br>&gt; <br>&gt; <br>&gt; <br>&gt; I find the colon &#39;:&#39; strongly associated with function input values, and with associations [key:value pairs etc]<br>&gt; but variables…you don&#39;t input anything and they are not inherently associations.<br>&gt; <br>&gt; <br>&gt; When coding half asleep I find myself compelled to input a value wherever I see a &#39;:&#39; and I can see myself typing something really really silly<br>&gt; <br>&gt; var myIndex: &quot;Int&quot; <br>&gt; myIndex = 0<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160210/37470648/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/34b9659227ea084bb09a8ba4a450a162?s=50"></div><header><strong>an observation on colons in variable type declarations</strong> from <string>Jessy Catterwaul</string> &lt;mr.jessy at gmail.com&gt;<p>February 10, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; However the current syntax, whilst inconsistent, is OK and therefore not worth changing.<br></p><p>Subscripts use arrows, despite them allowing setters. Properties use a colon instead of arrow. That at least needs to be standardized.<br></p><p>Personally, I see no need for the arrow we have today. It’s not even a real arrow character and so looks antiquated. <br></p><p>https://forums.developer.apple.com/thread/16592<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/46439321e8b5b5ba0944eef50e18c3a3?s=50"></div><header><strong>an observation on colons in variable type declarations</strong> from <string>Jean-Denis Muys</string> &lt;jdmuys at gmail.com&gt;<p>February 10, 2016 at 03:00:00pm</p></header><div class="content"><p>I read the colon a bit like “corresponds to”, which (with some stretch) fits how it is used.<br></p><p>&gt; Defining: `func max(x1 x1: Int, x2: Int = 0): Int` instead of `func max(x1 x1: Int, x2: Int = 0) -&gt; Int`<br>I prefer the arrow, that really suggests something is returned, to be handled later. I would prefer a real arrow though, in these Unicode times, rather than “dash”-“greater than” (which could be accepted as a digraph maybe)<br>&gt; Using: `let positive = max(x1 = -5)` instead of `let positive = max(x1: -5)`<br>Here, “=“ meaning assignment works very well, better than the colon probably<br></p><p>&gt; Assigning: `var 0 -&gt; x; 1 +-&gt; x` instead of `var x = 0; x += 1`<br>This is totally wrong to me. It is at complete odd with “let a = 5”. Assignment is written with receiver on the left, in Swift as in the vast majority of languages. Reversing that is gratuitous and very difficult to read. The second case, with the strange “stopped arrow” +-&gt; which looks very much like |-&gt; i even worse.<br></p><p>&gt; Entries: `let dict = [&quot;A&quot; = 1, &quot;B&quot; = 2]` instead of `let dict = [&quot;A&quot; : 1, &quot;B&quot; : 2]`<br>So you mean you assign the integer 2 to the string “A”? Let me die in horror.<br></p><p>Standard math notation uses the equal sign for both assignment and comparison (it can also be argued that in maths, there is no assignment, only comparison, and the phrase “let x=3” actually means “let’s consider the case where x=3”).<br>Pascal used to replace = with := out of fear of confusing = with comparison. C decided to alter the comparison rather than the assignment.<br></p><p>Choosing yet another meaning for “=“, writing “String” = 1 is really an anathema to my eyes.<br></p><p>Jean-Denis<br></p><p><br></p><p><br>&gt; On 10 Feb 2016, at 01:28, Howard Lovatt via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I also find it odd that -&gt; is used for return types instead of a :. My favourite would be for = to be used for assigning to argument labels, initialization of lets, and dictionary entries, : used for types, and -&gt; used for assignment to vars. IE:<br>&gt; Defining: `func max(x1 x1: Int, x2: Int = 0): Int` instead of `func max(x1 x1: Int, x2: Int = 0) -&gt; Int`<br>&gt; Using: `let positive = max(x1 = -5)` instead of `let positive = max(x1: -5)`<br>&gt; Assigning: `var 0 -&gt; x; 1 +-&gt; x` instead of `var x = 0; x += 1`<br>&gt; Entries: `let dict = [&quot;A&quot; = 1, &quot;B&quot; = 2]` instead of `let dict = [&quot;A&quot; : 1, &quot;B&quot; : 2]`<br>&gt; However the current syntax, whilst inconsistent, is OK and therefore not worth changing.<br>&gt; <br>&gt;   -- Howard.<br>&gt; <br>&gt; On 10 February 2016 at 09:45, Oliver M via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; A brief observation regarding variable type declarations<br>&gt; <br>&gt; I find the colon in variable type declarations a little odd.<br>&gt; Consider the following:<br>&gt; <br>&gt; var welcomeMessage: String<br>&gt; <br>&gt; wouldn&#39;t this be cleaner simply written as<br>&gt; <br>&gt; var welcomeMessage String<br>&gt; <br>&gt; <br>&gt; the documentation says to read the colon &#39;:&#39; as &quot;of type&quot; in such situations<br>&gt; <br>&gt; but does the type &quot;String&quot; itself not imply &#39;of type String&#39;<br>&gt; <br>&gt; <br>&gt; <br>&gt; Consider the colon in a function declaration:<br>&gt; <br>&gt; func sayHello(personName: String) {}<br>&gt; <br>&gt; I would read the portion within the brackets as:<br>&gt; parameter named personName takes value of type String (because you input values when calling functions)<br>&gt; with the colon reading &#39;takes value&#39; and &quot;String&quot; again reading &#39;of type String&#39;<br>&gt; <br>&gt; <br>&gt; <br>&gt; I find the colon &#39;:&#39; strongly associated with function input values, and with associations [key:value pairs etc]<br>&gt; but variables…you don&#39;t input anything and they are not inherently associations.<br>&gt; <br>&gt; <br>&gt; When coding half asleep I find myself compelled to input a value wherever I see a &#39;:&#39; and I can see myself typing something really really silly<br>&gt; <br>&gt; var myIndex: &quot;Int&quot; <br>&gt; myIndex = 0<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160210/8d849c7b/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/566528c7f7c28c35c0c646d415943612?s=50"></div><header><strong>an observation on colons in variable type declarations</strong> from <string>Taras Zakharko</string> &lt;taras.zakharko at uzh.ch&gt;<p>February 10, 2016 at 06:00:00pm</p></header><div class="content"><p>It really depends on what you are used to. Swift notation comes from mathematics and formal computer science. You seem to be more used to the Fortran/ALGOL/C syntax. Personally, I prefer the Swift way, its cleaner and less confusing to me. <br></p><p>At any rate, I don’t think there is a valid reason to reconsider this design aspect of the language. <br></p><p>&gt; On 09 Feb 2016, at 23:45, Oliver M via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; A brief observation regarding variable type declarations<br>&gt; <br>&gt; I find the colon in variable type declarations a little odd.<br>&gt; Consider the following:<br>&gt; <br>&gt; var welcomeMessage: String<br>&gt; <br>&gt; wouldn&#39;t this be cleaner simply written as<br>&gt; <br>&gt; var welcomeMessage String<br>&gt; <br>&gt; <br>&gt; the documentation says to read the colon &#39;:&#39; as &quot;of type&quot; in such situations<br>&gt; <br>&gt; but does the type &quot;String&quot; itself not imply &#39;of type String&#39;<br>&gt; <br>&gt; <br>&gt; <br>&gt; Consider the colon in a function declaration:<br>&gt; <br>&gt; func sayHello(personName: String) {}<br>&gt; <br>&gt; I would read the portion within the brackets as:<br>&gt; parameter named personName takes value of type String (because you input values when calling functions)<br>&gt; with the colon reading &#39;takes value&#39; and &quot;String&quot; again reading &#39;of type String&#39;<br>&gt; <br>&gt; <br>&gt; <br>&gt; I find the colon &#39;:&#39; strongly associated with function input values, and with associations [key:value pairs etc]<br>&gt; but variables…you don&#39;t input anything and they are not inherently associations.<br>&gt; <br>&gt; <br>&gt; When coding half asleep I find myself compelled to input a value wherever I see a &#39;:&#39; and I can see myself typing something really really silly<br>&gt; <br>&gt; var myIndex: &quot;Int&quot; <br>&gt; myIndex = 0<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160210/2dcf1019/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/72cc28f12d423d7d87c5e20e8de0966c?s=50"></div><header><strong>an observation on colons in variable type declarations</strong> from <string>Ilya Belenkiy</string> &lt;ilya.belenkiy at gmail.com&gt;<p>February 10, 2016 at 06:00:00pm</p></header><div class="content"><p>+1 on all points made by Taras<br>On Wed, Feb 10, 2016 at 12:44 PM Taras Zakharko via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; It really depends on what you are used to. Swift notation comes from<br>&gt; mathematics and formal computer science. You seem to be more used to the<br>&gt; Fortran/ALGOL/C syntax. Personally, I prefer the Swift way, its cleaner and<br>&gt; less confusing to me.<br>&gt;<br>&gt; At any rate, I don’t think there is a valid reason to reconsider this<br>&gt; design aspect of the language.<br>&gt;<br>&gt;<br>&gt; On 09 Feb 2016, at 23:45, Oliver M via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt;    - A brief observation regarding variable type declarations<br>&gt;    -<br>&gt;    - I find the colon in variable type declarations a little odd.<br>&gt;    - Consider the following:<br>&gt;    -<br>&gt;    - var welcomeMessage: String<br>&gt;    -<br>&gt;    - wouldn&#39;t this be cleaner simply written as<br>&gt;    -<br>&gt;    - var welcomeMessage String<br>&gt;    -<br>&gt;    -<br>&gt;    - the documentation says to read the colon &#39;:&#39; as &quot;of type&quot; in such<br>&gt;    situations<br>&gt;    -<br>&gt;    - but does the type &quot;String&quot; itself not imply &#39;of type String&#39;<br>&gt;    -<br>&gt;    -<br>&gt;    -<br>&gt;    - Consider the colon in a function declaration:<br>&gt;    -<br>&gt;    - func sayHello(personName: String) {}<br>&gt;    -<br>&gt;    - I would read the portion within the brackets as:<br>&gt;    - parameter named personName takes value of type String (because you<br>&gt;    input values when calling functions)<br>&gt;    - with the colon reading &#39;takes value&#39; and &quot;String&quot; again reading &#39;of<br>&gt;    type String&#39;<br>&gt;    -<br>&gt;    -<br>&gt;    -<br>&gt;    - I find the colon &#39;:&#39; strongly associated with function input values,<br>&gt;    and with associations [key:value pairs etc]<br>&gt;    - but variables…you don&#39;t input anything and they are not inherently<br>&gt;    associations.<br>&gt;    -<br>&gt;    -<br>&gt;    - When coding half asleep I find myself compelled to input a value<br>&gt;    wherever I see a &#39;:&#39; and I can see myself typing something really really<br>&gt;    silly<br>&gt;    -<br>&gt;    - var myIndex: &quot;Int&quot;<br>&gt;    - myIndex = 0<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160210/cadb9d13/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
