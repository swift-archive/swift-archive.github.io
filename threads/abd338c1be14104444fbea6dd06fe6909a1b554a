<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Pitch] Add `mapValues` method to Dictionary</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>May 26, 2016 at 02:00:00pm</p></header><div class="content"><p>on Tue May 24 2016, Nate Cook &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On May 24, 2016, at 7:43 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Sent from my iPad<br>&gt;&gt; <br>&gt;&gt; On May 24, 2016, at 12:59 AM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; I have a small remark though, wouldnâ€™t it be better to let transform be of type (Key, Value) throws -&gt; T instead of (Value) throws -&gt; T? You can just ignore the key (with _) if you donâ€™t need it, but I think it might come in handy in some cases.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The problem is, that closes the door to writing many simple maps in functional style. For instance, this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   dictionaryOfNumbers.mapValues(abs)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Would have to become this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   dictionaryOfNumbers.mapValues { _, v in abs(v) }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; (It *might* be possible to do it with `$1`, but I&#39;m not sure; there are some limitations around that.)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; A value-value map is just simpler and cleaner, while almost always giving you what you need.<br>&gt;&gt; <br>&gt;&gt; +1.  <br>&gt;&gt; <br>&gt;&gt; I don&#39;t think I have ever mapped keys.  Incidentally, that doesn&#39;t have the usual semantics of a map operation as you can produce duplicate keys.<br>&gt;<br>&gt; I think this conversation suffers from not knowing whether Dictionary<br>&gt; is going to receive a sequence-based initializer. There&#39;s been a<br>&gt; proposal for that in the PR queue for quite a while. Could someone in<br>&gt; the core team please either merge or close that proposal?<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/pull/125<br></p><p>Done.  I was just waiting until we could assign it SE-0100.<br>Congratulations! ;-)<br></p><p>&gt; If there&#39;s no sequence-based init, mapValues should probably produce a<br>&gt; new Dictionary. If there is, having mapValues produce a dictionary<br>&gt; would be redundant. I&#39;d rather see a MapDictionary type that wraps a<br>&gt; dictionary and only evaluates the transformation on access, rather<br>&gt; than eagerly allocating storage and performing all the<br>&gt; transformations.<br>&gt;<br>&gt; You can take a look at a rudimentary MapDictionary in this gist:<br>&gt; https://gist.github.com/natecook1000/7cfc5c04f18237066f7aca6e9658f276<br>&gt;<br>&gt; Best,<br>&gt; Nate<br>&gt;<br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/67a361b77f5c6cba256d06ba641f2af8?s=50"></div><header><strong>[Pitch] Add `mapValues` method to Dictionary</strong> from <string>Nate Cook</string> &lt;nate at natecook.com&gt;<p>May 26, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On May 26, 2016, at 4:23 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Tue May 24 2016, Nate Cook &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On May 24, 2016, at 7:43 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 24, 2016, at 12:59 AM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I have a small remark though, wouldnâ€™t it be better to let transform be of type (Key, Value) throws -&gt; T instead of (Value) throws -&gt; T? You can just ignore the key (with _) if you donâ€™t need it, but I think it might come in handy in some cases.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The problem is, that closes the door to writing many simple maps in functional style. For instance, this:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  dictionaryOfNumbers.mapValues(abs)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Would have to become this:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  dictionaryOfNumbers.mapValues { _, v in abs(v) }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; (It *might* be possible to do it with `$1`, but I&#39;m not sure; there are some limitations around that.)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; A value-value map is just simpler and cleaner, while almost always giving you what you need.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; +1.  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t think I have ever mapped keys.  Incidentally, that doesn&#39;t have the usual semantics of a map operation as you can produce duplicate keys.<br>&gt;&gt; <br>&gt;&gt; I think this conversation suffers from not knowing whether Dictionary<br>&gt;&gt; is going to receive a sequence-based initializer. There&#39;s been a<br>&gt;&gt; proposal for that in the PR queue for quite a while. Could someone in<br>&gt;&gt; the core team please either merge or close that proposal?<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/pull/125<br>&gt; <br>&gt; Done.  I was just waiting until we could assign it SE-0100.<br>&gt; Congratulations! ;-)<br></p><p>ðŸ’¯ðŸ˜‚<br></p><p>&gt;&gt; If there&#39;s no sequence-based init, mapValues should probably produce a<br>&gt;&gt; new Dictionary. If there is, having mapValues produce a dictionary<br>&gt;&gt; would be redundant. I&#39;d rather see a MapDictionary type that wraps a<br>&gt;&gt; dictionary and only evaluates the transformation on access, rather<br>&gt;&gt; than eagerly allocating storage and performing all the<br>&gt;&gt; transformations.<br>&gt;&gt; <br>&gt;&gt; You can take a look at a rudimentary MapDictionary in this gist:<br>&gt;&gt; https://gist.github.com/natecook1000/7cfc5c04f18237066f7aca6e9658f276<br>&gt;&gt; <br>&gt;&gt; Best,<br>&gt;&gt; Nate<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; -- <br>&gt; Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
