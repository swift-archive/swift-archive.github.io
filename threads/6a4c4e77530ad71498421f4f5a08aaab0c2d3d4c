<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>Can&#39;t initialise using a UTF8 string from within &#39;withUnsafeBufferPointer&#39; expression</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>July 18, 2016 at 07:00:00am</p></header><div class="content"><p>As I understand it, we are supposed to use withUnsafe{Mutable/Buffer}Pointer or withExtendedLifetime to guarantee that objects we take pointers of will exist and won’t be optimised out by the compiler.<br></p><p>However, this leads to a problem when trying to initialise something which expects a UTF8 string using only the standard library (not Foundation’s equivalent cStringUsingEncoding):<br></p><p>&gt; extension DispatchIO {<br>&gt; <br>&gt; 	convenience init(type: DispatchIO.StreamType, path: String, oflag: Int32, mode: mode_t, queue: DispatchQueue, cleanupHandler: (error: Int32) -&gt; Void) {<br>&gt; <br>&gt; 		let utf8Path = path.nulTerminatedUTF8<br>&gt; 		utf8Path.withUnsafeBufferPointer {<br>&gt; 			self.init(type: type, path: UnsafePointer($0.baseAddress!), oflag: oflag, mode: mode, queue: queue, cleanupHandler: cleanupHandler)<br>&gt; 		}<br>&gt; 	}<br>&gt; }<br></p><p>ERROR: Initializer delegation (&#39;self.init&#39;) cannot be nested in another expression<br></p><p>I don’t really understand why that isn’t allowed for a non-capturing closure, but if we accept that, how do I actually use those pointer/extended lifetime functions to initialise things?<br></p><p>Thanks<br></p><p>Karl<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/389ea0cf26e2a2d4646bf580da2fb6b5?s=50"></div><header><strong>Can&#39;t initialise using a UTF8 string from within &#39;withUnsafeBufferPointer&#39; expression</strong> from <string>Martin R</string> &lt;martinr448 at gmail.com&gt;<p>July 18, 2016 at 02:00:00pm</p></header><div class="content"><p>This is not an answer to your question, but note that you can pass a Swift String to functions expecting an UnsafePointer&lt;Int8&gt; (C String) parameter, and the compiler will generate a temporary NUL-terminated UTF-8 representation for you:<br></p><p>  let io = DispatchIO(type: .stream, path: &quot;/path/to/file&quot;, ...)<br></p><p>So you don&#39;t need a convenience initializer for _this_ purpose.<br></p><p>&gt; On 18 Jul 2016, at 07:17, Karl via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; As I understand it, we are supposed to use withUnsafe{Mutable/Buffer}Pointer or withExtendedLifetime to guarantee that objects we take pointers of will exist and won’t be optimised out by the compiler.<br>&gt; <br>&gt; However, this leads to a problem when trying to initialise something which expects a UTF8 string using only the standard library (not Foundation’s equivalent cStringUsingEncoding):<br>&gt; <br>&gt;&gt; extension DispatchIO {<br>&gt;&gt; <br>&gt;&gt; 	convenience init(type: DispatchIO.StreamType, path: String, oflag: Int32, mode: mode_t, queue: DispatchQueue, cleanupHandler: (error: Int32) -&gt; Void) {<br>&gt;&gt; <br>&gt;&gt; 		let utf8Path = path.nulTerminatedUTF8<br>&gt;&gt; 		utf8Path.withUnsafeBufferPointer {<br>&gt;&gt; 			self.init(type: type, path: UnsafePointer($0.baseAddress!), oflag: oflag, mode: mode, queue: queue, cleanupHandler: cleanupHandler)<br>&gt;&gt; 		}<br>&gt;&gt; 	}<br>&gt;&gt; }<br>&gt; <br>&gt; ERROR: Initializer delegation (&#39;self.init&#39;) cannot be nested in another expression<br>&gt; <br>&gt; I don’t really understand why that isn’t allowed for a non-capturing closure, but if we accept that, how do I actually use those pointer/extended lifetime functions to initialise things?<br>&gt; <br>&gt; Thanks<br>&gt; <br>&gt; Karl<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>Can&#39;t initialise using a UTF8 string from within &#39;withUnsafeBufferPointer&#39; expression</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>July 18, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On 18 Jul 2016, at 14:51, Martin R &lt;martinr448 at gmail.com&gt; wrote:<br>&gt; <br>&gt; This is not an answer to your question, but note that you can pass a Swift String to functions expecting an UnsafePointer&lt;Int8&gt; (C String) parameter, and the compiler will generate a temporary NUL-terminated UTF-8 representation for you:<br>&gt; <br>&gt;  let io = DispatchIO(type: .stream, path: &quot;/path/to/file&quot;, ...)<br>&gt; <br>&gt; So you don&#39;t need a convenience initializer for _this_ purpose.<br></p><p>Oh, my…<br></p><p>Isn’t it kind of strange that we have such a hidden implicit conversion, yet we don’t have implicit widening conversions?<br></p><p>Also, as interesting as that may be, I’m also curious what to do in the general case for types without magic compiler optimisations.<br></p><p>Karl<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Can&#39;t initialise using a UTF8 string from within &#39;withUnsafeBufferPointer&#39; expression</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>July 18, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Jul 18, 2016, at 11:44 AM, Karl via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Also, as interesting as that may be, I’m also curious what to do in the general case for types without magic compiler optimisations.<br></p><p>Wait for Swift 4, apparently: https://github.com/apple/swift-evolution/blob/master/proposals/0073-noescape-once.md#rationale<br></p><p>Or use a class method, or two-phase initialization, or some other trick to get around this limitation.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
