<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b397983c72fc0400927bd578212b8b5e?s=50"></div><header><strong>ideas to remove NSCoding as requirement in UIView subclasses</strong> from <string>Lou Zell</string> &lt;lzell11 at gmail.com&gt;<p>October  8, 2016 at 09:00:00am</p></header><div class="content"><p>Hi all,<br></p><p>For better or worse I still hand code most of my views. I am getting<br>frustrated by the constant compiler error that I haven&#39;t updated &quot;required<br>init(coder:)&quot;, which is something that will never be executed in my case.<br></p><p>Is there some hacky mechanism that I could use to create a subtype that<br>doesn&#39;t conform to all protocols of the parent?  Seems like recipe for<br>disaster so I suspect it&#39;s not built into swift directly.<br></p><p>Is there a creative way to use UIViews, but with the dependency on NSCoding<br>removed? I am open to total hacks.<br></p><p>Thanks!<br>Lou<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161008/1f23b499/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b397983c72fc0400927bd578212b8b5e?s=50"></div><header><strong>ideas to remove NSCoding as requirement in UIView subclasses</strong> from <string>Lou Zell</string> &lt;lzell11 at gmail.com&gt;<p>October  8, 2016 at 09:00:00am</p></header><div class="content"><p>Oh wow, I stumbled on this immediately after posting: For anyone else that<br>fills their NSCoding initializers with assert(false), switch them to<br>fatalError(&quot;message&quot;)<br></p><p>On Sat, Oct 8, 2016 at 9:22 AM, Lou Zell &lt;lzell11 at gmail.com&gt; wrote:<br></p><p>&gt; Hi all,<br>&gt;<br>&gt; For better or worse I still hand code most of my views. I am getting<br>&gt; frustrated by the constant compiler error that I haven&#39;t updated &quot;required<br>&gt; init(coder:)&quot;, which is something that will never be executed in my case.<br>&gt;<br>&gt; Is there some hacky mechanism that I could use to create a subtype that<br>&gt; doesn&#39;t conform to all protocols of the parent?  Seems like recipe for<br>&gt; disaster so I suspect it&#39;s not built into swift directly.<br>&gt;<br>&gt; Is there a creative way to use UIViews, but with the dependency on<br>&gt; NSCoding removed? I am open to total hacks.<br>&gt;<br>&gt; Thanks!<br>&gt; Lou<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161008/fd1b7432/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>ideas to remove NSCoding as requirement in UIView subclasses</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>October  8, 2016 at 08:00:00pm</p></header><div class="content"><p>This is a wrong place to ask. This topic is part of the iOS SDK from Apple not part of Swift itself or libraries like Foundation.<br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail <br></p><p>Am 8. Oktober 2016 um 18:32:50, Lou Zell via swift-users (swift-users at swift.org(mailto:swift-users at swift.org)) schrieb:<br></p><p>&gt; <br>&gt; Oh wow, I stumbled on this immediately after posting: For anyone else that fills their NSCoding initializers with assert(false), switch them to fatalError(&quot;message&quot;)<br>&gt; <br>&gt; On Sat, Oct 8, 2016 at 9:22 AM, Lou Zell &lt;lzell11 at gmail.com(mailto:lzell11 at gmail.com)&gt; wrote:<br>&gt; &gt; Hi all, <br>&gt; &gt; <br>&gt; &gt; For better or worse I still hand code most of my views. I am getting frustrated by the constant compiler error that I haven&#39;t updated &quot;required init(coder:)&quot;, which is something that will never be executed in my case. <br>&gt; &gt; <br>&gt; &gt; Is there some hacky mechanism that I could use to create a subtype that doesn&#39;t conform to all protocols of the parent? Seems like recipe for disaster so I suspect it&#39;s not built into swift directly. <br>&gt; &gt; <br>&gt; &gt; Is there a creative way to use UIViews, but with the dependency on NSCoding removed? I am open to total hacks. <br>&gt; &gt; <br>&gt; &gt; Thanks! <br>&gt; &gt; Lou<br>&gt; &gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161008/f1b2b246/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/960ce0d42ca874f25b0b58904d3f941b?s=50"></div><header><strong>ideas to remove NSCoding as requirement in UIView subclasses</strong> from <string>Tadeas Kriz</string> &lt;tadeas at brightify.org&gt;<p>October 10, 2016 at 06:00:00pm</p></header><div class="content"><p>Lou, you can create a &quot;class BaseView: UIView&quot; which will serve as a<br>default view your views will subclass and inside it, add the init required<br>by NSCoding, make its body `fatalError(&quot;Not implemented!&quot;)` and add the<br>following attribute on the init: `@available(*, unavailable)`. Then you&#39;ll<br>not need to declare it in every view that subclasses the BaseView.<br></p><p>Tadeas<br></p><p>On Sat, Oct 8, 2016 at 8:23 PM Adrian Zubarev via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; This is a wrong place to ask. This topic is part of the iOS SDK from Apple<br>&gt; not part of Swift itself or libraries like Foundation.<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt;<br>&gt; Am 8. Oktober 2016 um 18:32:50, Lou Zell via swift-users (<br>&gt; swift-users at swift.org) schrieb:<br>&gt;<br>&gt; Oh wow, I stumbled on this immediately after posting: For anyone else that<br>&gt; fills their NSCoding initializers with assert(false), switch them to<br>&gt; fatalError(&quot;message&quot;)<br>&gt;<br>&gt; On Sat, Oct 8, 2016 at 9:22 AM, Lou Zell &lt;lzell11 at gmail.com&gt; wrote:<br>&gt;<br>&gt; Hi all,<br>&gt;<br>&gt; For better or worse I still hand code most of my views. I am getting<br>&gt; frustrated by the constant compiler error that I haven&#39;t updated &quot;required<br>&gt; init(coder:)&quot;, which is something that will never be executed in my case.<br>&gt;<br>&gt; Is there some hacky mechanism that I could use to create a subtype that<br>&gt; doesn&#39;t conform to all protocols of the parent?  Seems like recipe for<br>&gt; disaster so I suspect it&#39;s not built into swift directly.<br>&gt;<br>&gt; Is there a creative way to use UIViews, but with the dependency on<br>&gt; NSCoding removed? I am open to total hacks.<br>&gt;<br>&gt; Thanks!<br>&gt; Lou<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161010/adca33c7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b397983c72fc0400927bd578212b8b5e?s=50"></div><header><strong>ideas to remove NSCoding as requirement in UIView subclasses</strong> from <string>Lou Zell</string> &lt;lzell11 at gmail.com&gt;<p>October 10, 2016 at 12:00:00pm</p></header><div class="content"><p>Tadeas - Just what I was looking for. Thank you!<br></p><p>class BaseView: UIView {<br>    @available(*, unavailable)<br>    required init?(coder aDecoder: NSCoder)  {<br>        fatalError(&quot;Not implemented!&quot;)<br>    }<br>}<br></p><p><br>On Mon, Oct 10, 2016 at 11:45 AM, Tadeas Kriz &lt;tadeas at brightify.org&gt; wrote:<br></p><p>&gt; Lou, you can create a &quot;class BaseView: UIView&quot; which will serve as a<br>&gt; default view your views will subclass and inside it, add the init required<br>&gt; by NSCoding, make its body `fatalError(&quot;Not implemented!&quot;)` and add the<br>&gt; following attribute on the init: `@available(*, unavailable)`. Then you&#39;ll<br>&gt; not need to declare it in every view that subclasses the BaseView.<br>&gt;<br>&gt; Tadeas<br>&gt;<br>&gt; On Sat, Oct 8, 2016 at 8:23 PM Adrian Zubarev via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; This is a wrong place to ask. This topic is part of the iOS SDK from<br>&gt;&gt; Apple not part of Swift itself or libraries like Foundation.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Adrian Zubarev<br>&gt;&gt; Sent with Airmail<br>&gt;&gt;<br>&gt;&gt; Am 8. Oktober 2016 um 18:32:50, Lou Zell via swift-users (<br>&gt;&gt; swift-users at swift.org) schrieb:<br>&gt;&gt;<br>&gt;&gt; Oh wow, I stumbled on this immediately after posting: For anyone else<br>&gt;&gt; that fills their NSCoding initializers with assert(false), switch them to<br>&gt;&gt; fatalError(&quot;message&quot;)<br>&gt;&gt;<br>&gt;&gt; On Sat, Oct 8, 2016 at 9:22 AM, Lou Zell &lt;lzell11 at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hi all,<br>&gt;&gt;<br>&gt;&gt; For better or worse I still hand code most of my views. I am getting<br>&gt;&gt; frustrated by the constant compiler error that I haven&#39;t updated &quot;required<br>&gt;&gt; init(coder:)&quot;, which is something that will never be executed in my case.<br>&gt;&gt;<br>&gt;&gt; Is there some hacky mechanism that I could use to create a subtype that<br>&gt;&gt; doesn&#39;t conform to all protocols of the parent?  Seems like recipe for<br>&gt;&gt; disaster so I suspect it&#39;s not built into swift directly.<br>&gt;&gt;<br>&gt;&gt; Is there a creative way to use UIViews, but with the dependency on<br>&gt;&gt; NSCoding removed? I am open to total hacks.<br>&gt;&gt;<br>&gt;&gt; Thanks!<br>&gt;&gt; Lou<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161010/58bf9898/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/960ce0d42ca874f25b0b58904d3f941b?s=50"></div><header><strong>ideas to remove NSCoding as requirement in UIView subclasses</strong> from <string>Tadeas Kriz</string> &lt;tadeas at brightify.org&gt;<p>October 10, 2016 at 07:00:00pm</p></header><div class="content"><p>You&#39;re welcome! Glad to be helpful :)<br></p><p>Tadeas<br></p><p>On Mon, Oct 10, 2016 at 9:12 PM Lou Zell &lt;lzell11 at gmail.com&gt; wrote:<br></p><p>&gt; Tadeas - Just what I was looking for. Thank you!<br>&gt;<br>&gt; class BaseView: UIView {<br>&gt;     @available(*, unavailable)<br>&gt;     required init?(coder aDecoder: NSCoder)  {<br>&gt;         fatalError(&quot;Not implemented!&quot;)<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt;<br>&gt; On Mon, Oct 10, 2016 at 11:45 AM, Tadeas Kriz &lt;tadeas at brightify.org&gt;<br>&gt; wrote:<br>&gt;<br>&gt; Lou, you can create a &quot;class BaseView: UIView&quot; which will serve as a<br>&gt; default view your views will subclass and inside it, add the init required<br>&gt; by NSCoding, make its body `fatalError(&quot;Not implemented!&quot;)` and add the<br>&gt; following attribute on the init: `@available(*, unavailable)`. Then you&#39;ll<br>&gt; not need to declare it in every view that subclasses the BaseView.<br>&gt;<br>&gt; Tadeas<br>&gt;<br>&gt; On Sat, Oct 8, 2016 at 8:23 PM Adrian Zubarev via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; This is a wrong place to ask. This topic is part of the iOS SDK from Apple<br>&gt; not part of Swift itself or libraries like Foundation.<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt;<br>&gt; Am 8. Oktober 2016 um 18:32:50, Lou Zell via swift-users (<br>&gt; swift-users at swift.org) schrieb:<br>&gt;<br>&gt; Oh wow, I stumbled on this immediately after posting: For anyone else that<br>&gt; fills their NSCoding initializers with assert(false), switch them to<br>&gt; fatalError(&quot;message&quot;)<br>&gt;<br>&gt; On Sat, Oct 8, 2016 at 9:22 AM, Lou Zell &lt;lzell11 at gmail.com&gt; wrote:<br>&gt;<br>&gt; Hi all,<br>&gt;<br>&gt; For better or worse I still hand code most of my views. I am getting<br>&gt; frustrated by the constant compiler error that I haven&#39;t updated &quot;required<br>&gt; init(coder:)&quot;, which is something that will never be executed in my case.<br>&gt;<br>&gt; Is there some hacky mechanism that I could use to create a subtype that<br>&gt; doesn&#39;t conform to all protocols of the parent?  Seems like recipe for<br>&gt; disaster so I suspect it&#39;s not built into swift directly.<br>&gt;<br>&gt; Is there a creative way to use UIViews, but with the dependency on<br>&gt; NSCoding removed? I am open to total hacks.<br>&gt;<br>&gt; Thanks!<br>&gt; Lou<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161010/df202985/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
