<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Accepted with modification] SE-0005 &quot;Better Translation of Objective-C APIs Into Swift&quot;</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>March  3, 2016 at 01:00:00pm</p></header><div class="content"><p>The review of SE-0005 &quot;Better Translation of Objective-C APIs Into Swift&quot; ran from January 22...February 5, 2016, with the discussion continuing long afterward. We were thrilled with the scope and depth of the community response to this proposal. The proposal is accepted with some significant modifications, detailed below. The proposal document has been updated at:<br></p><p>  https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md<br></p><p>as have the automatically-generated results for Cocoa APIs:<br></p><p>  https://github.com/apple/swift-3-api-guidelines-review<br></p><p><br>Most of the modifications to the proposal involve tracking changes to the Swift API Design Guidelines (SE-0023), especially:<br></p><p>* The Clang importer will &quot;split&quot; the first selector piece of a method before the last preposition, producing a base name (the words that precede the last preposition) and an argument label for the first argument (the preposition and the words that follow it). For example, the following Objective-C method:<br></p><p>    - (void)exchangeSubviewAtIndex:(NSInteger)index1<br>                withSubviewAtIndex:(NSInteger)index2<br></p><p>  will be imported as<br></p><p>    func exchangeSubview(at index1: Int, withSubviewAt index2: Int)<br></p><p>* The Clang importer will change enum cases to lowerCamelCase<br></p><p>* The Clang importer will lowercase initialisms at the beginning of non-type identifiers (e.g., &quot;var UTF8String&quot; becomes &quot;var utf8String&quot;)<br></p><p><br>One significant part of the proposal was the removal of the &quot;NS&quot; prefix from Foundation APIs in Swift. This name change was considered problematic for several reasons, the most-often-cited one being that the reference-semantic nature of many Foundation types conflicted with the Swift standard library&#39;s value-semantic types. The &quot;NS&quot; prefix removal part of this proposal has been removed from the accepted proposal. A revised version of this will come back as its own proposal, taking into account the feedback received.<br></p><p>Another interesting aspect of the discussion centered on the naming of methods in delegates. It was observed that the naming of Cocoa delegates isn&#39;t captured in the Swift API Design Guidelines. There are a number of potential solutions, including extending the guidelines or [more Clang importer heuristics](http://thread.gmane.org/gmane.comp.lang.swift.evolution/4178/focus=5258). We consider this to be an important but separable problem, so we consider this a reasonable follow-up investigation and won&#39;t try to tackle it within this proposal.<br></p><p>Thank you!<br>Doug Gregor<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>[Accepted with modification] SE-0005 &quot;Better Translation of Objective-C APIs Into Swift&quot;</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>March  4, 2016 at 09:00:00am</p></header><div class="content"><p>Just wanted to say how well I think this review went. There was a lot of<br>feedback and you have handled all the competing opinions skilfully. Thanks,<br>-- Howard.<br></p><p>On Friday, 4 March 2016, Douglas Gregor via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; The review of SE-0005 &quot;Better Translation of Objective-C APIs Into Swift&quot;<br>&gt; ran from January 22...February 5, 2016, with the discussion continuing long<br>&gt; afterward. We were thrilled with the scope and depth of the community<br>&gt; response to this proposal. The proposal is accepted with some significant<br>&gt; modifications, detailed below. The proposal document has been updated at:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md<br>&gt;<br>&gt; as have the automatically-generated results for Cocoa APIs:<br>&gt;<br>&gt;   https://github.com/apple/swift-3-api-guidelines-review<br>&gt;<br>&gt;<br>&gt; Most of the modifications to the proposal involve tracking changes to the<br>&gt; Swift API Design Guidelines (SE-0023), especially:<br>&gt;<br>&gt; * The Clang importer will &quot;split&quot; the first selector piece of a method<br>&gt; before the last preposition, producing a base name (the words that precede<br>&gt; the last preposition) and an argument label for the first argument (the<br>&gt; preposition and the words that follow it). For example, the following<br>&gt; Objective-C method:<br>&gt;<br>&gt;     - (void)exchangeSubviewAtIndex:(NSInteger)index1<br>&gt;                 withSubviewAtIndex:(NSInteger)index2<br>&gt;<br>&gt;   will be imported as<br>&gt;<br>&gt;     func exchangeSubview(at index1: Int, withSubviewAt index2: Int)<br>&gt;<br>&gt; * The Clang importer will change enum cases to lowerCamelCase<br>&gt;<br>&gt; * The Clang importer will lowercase initialisms at the beginning of<br>&gt; non-type identifiers (e.g., &quot;var UTF8String&quot; becomes &quot;var utf8String&quot;)<br>&gt;<br>&gt;<br>&gt; One significant part of the proposal was the removal of the &quot;NS&quot; prefix<br>&gt; from Foundation APIs in Swift. This name change was considered problematic<br>&gt; for several reasons, the most-often-cited one being that the<br>&gt; reference-semantic nature of many Foundation types conflicted with the<br>&gt; Swift standard library&#39;s value-semantic types. The &quot;NS&quot; prefix removal part<br>&gt; of this proposal has been removed from the accepted proposal. A revised<br>&gt; version of this will come back as its own proposal, taking into account the<br>&gt; feedback received.<br>&gt;<br>&gt; Another interesting aspect of the discussion centered on the naming of<br>&gt; methods in delegates. It was observed that the naming of Cocoa delegates<br>&gt; isn&#39;t captured in the Swift API Design Guidelines. There are a number of<br>&gt; potential solutions, including extending the guidelines or [more Clang<br>&gt; importer heuristics](<br>&gt; http://thread.gmane.org/gmane.comp.lang.swift.evolution/4178/focus=5258).<br>&gt; We consider this to be an important but separable problem, so we consider<br>&gt; this a reasonable follow-up investigation and won&#39;t try to tackle it within<br>&gt; this proposal.<br>&gt;<br>&gt; Thank you!<br>&gt; Doug Gregor<br>&gt; Review Manager<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;javascript:;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p><br>-- <br>-- Howard.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160304/80decb0a/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Accepted with modification] SE-0005 &quot;Better Translation of Objective-C APIs Into Swift&quot;</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>March  4, 2016 at 12:00:00am</p></header><div class="content"><p>Woohoo! This has been a great process discussing all the nitpicks to get it right, and I’m quite happy with the result.<br></p><p>Thanks Doug &amp; all,<br>— Radek<br></p><p>&gt; On 03 Mar 2016, at 22:57, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The review of SE-0005 &quot;Better Translation of Objective-C APIs Into Swift&quot; ran from January 22...February 5, 2016, with the discussion continuing long afterward. We were thrilled with the scope and depth of the community response to this proposal. The proposal is accepted with some significant modifications, detailed below. The proposal document has been updated at:<br>&gt; <br>&gt;  https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md<br>&gt; <br>&gt; as have the automatically-generated results for Cocoa APIs:<br>&gt; <br>&gt;  https://github.com/apple/swift-3-api-guidelines-review<br>&gt; <br>&gt; <br>&gt; Most of the modifications to the proposal involve tracking changes to the Swift API Design Guidelines (SE-0023), especially:<br>&gt; <br>&gt; * The Clang importer will &quot;split&quot; the first selector piece of a method before the last preposition, producing a base name (the words that precede the last preposition) and an argument label for the first argument (the preposition and the words that follow it). For example, the following Objective-C method:<br>&gt; <br>&gt;    - (void)exchangeSubviewAtIndex:(NSInteger)index1<br>&gt;                withSubviewAtIndex:(NSInteger)index2<br>&gt; <br>&gt;  will be imported as<br>&gt; <br>&gt;    func exchangeSubview(at index1: Int, withSubviewAt index2: Int)<br>&gt; <br>&gt; * The Clang importer will change enum cases to lowerCamelCase<br>&gt; <br>&gt; * The Clang importer will lowercase initialisms at the beginning of non-type identifiers (e.g., &quot;var UTF8String&quot; becomes &quot;var utf8String&quot;)<br>&gt; <br>&gt; <br>&gt; One significant part of the proposal was the removal of the &quot;NS&quot; prefix from Foundation APIs in Swift. This name change was considered problematic for several reasons, the most-often-cited one being that the reference-semantic nature of many Foundation types conflicted with the Swift standard library&#39;s value-semantic types. The &quot;NS&quot; prefix removal part of this proposal has been removed from the accepted proposal. A revised version of this will come back as its own proposal, taking into account the feedback received.<br>&gt; <br>&gt; Another interesting aspect of the discussion centered on the naming of methods in delegates. It was observed that the naming of Cocoa delegates isn&#39;t captured in the Swift API Design Guidelines. There are a number of potential solutions, including extending the guidelines or [more Clang importer heuristics](http://thread.gmane.org/gmane.comp.lang.swift.evolution/4178/focus=5258). We consider this to be an important but separable problem, so we consider this a reasonable follow-up investigation and won&#39;t try to tackle it within this proposal.<br>&gt; <br>&gt; Thank you!<br>&gt; Doug Gregor<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdd257c9369fb68e1d06923d10ff789e?s=50"></div><header><strong>[Accepted with modification] SE-0005 &quot;Better Translation of Objective-C APIs Into Swift&quot;</strong> from <string>Ben Rimmington</string> &lt;me at benrimmington.com&gt;<p>March  4, 2016 at 06:00:00am</p></header><div class="content"><p>&gt; On 3 Mar 2016, at 21:57, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The proposal document has been updated at:<br>&gt; <br>&gt;  https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md<br>&gt; <br>&gt; as have the automatically-generated results for Cocoa APIs:<br>&gt; <br>&gt;  https://github.com/apple/swift-3-api-guidelines-review<br></p><p>I like your choice of always using both the argument label and parameter name. &quot;Clarity is more important than brevity.&quot;<br></p><p>&lt;https://github.com/apple/swift-3-api-guidelines-review/commit/525e68966fb618c5be10b2a106d61c69e13f1311&gt;<br></p><p>The existing API documentation already displays both, but the parameter name is italicized. If the Xcode source editor did the same, it would make one type of shadowing clearer.<br></p><p>Other comments and questions:<br></p><p>1. Adding default arguments will sometimes create ambiguities.<br></p><p>&gt; extension NSData {<br>&gt;   init(bytesNoCopy bytes: UnsafeMutablePointer&lt;Void&gt;, length length: Int)<br>&gt; <br>&gt;   @available(iOS 7.0, *)<br>&gt;   init(bytesNoCopy bytes: UnsafeMutablePointer&lt;Void&gt;, length length: Int, deallocator deallocator: ((UnsafeMutablePointer&lt;Void&gt;, Int) -&gt; Void)? = nil)<br>&gt; }<br></p><p>&lt;https://github.com/apple/swift-3-api-guidelines-review/blob/swift-3/Platforms/iOS/Foundation/NSData.swift&gt;<br></p><p>&gt; error: ambiguous use of &#39;init(bytesNoCopy:length:)&#39;<br>&gt; NSData(bytesNoCopy: nil, length: 0)<br>&gt; ^<br></p><p>2. Could you add labels to closure parameters, without changing the swift-corelibs-foundation ABI?<br></p><p>&gt; - func enumerateByteRanges(_ block: (UnsafePointer&lt;Void&gt;, NSRange, UnsafeMutablePointer&lt;ObjCBool&gt;) -&gt; Void)<br>&gt; <br>&gt; + func enumerateByteRanges(_ block: (bytes: UnsafePointer&lt;Void&gt;, byteRange: NSRange, stop: UnsafeMutablePointer&lt;ObjCBool&gt;) -&gt; Void)<br></p><p>3. Should first arguments with default values always be labelled?<br></p><p>&gt; extension NSData {<br>&gt;   @available(iOS 7.0, *)<br>&gt;   func base64EncodedData(_ options: NSDataBase64EncodingOptions = []) -&gt; NSData<br>&gt; }<br></p><p>4. Your example UIBezierPath interface in &quot;Proposed solution&quot; doesn&#39;t match the latest results.<br></p><p>&lt;https://github.com/apple/swift-3-api-guidelines-review/commit/64e3132a6a383b4a4603605180ded31efd37dcdc&gt;<br></p><p>(i.e. Retain &quot;with&quot; after splitting more regularly.)<br></p><p>-- Ben<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
