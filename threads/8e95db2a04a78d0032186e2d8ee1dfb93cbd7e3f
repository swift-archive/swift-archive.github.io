<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0023 API Design Guidelines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 30, 2016 at 07:00:00pm</p></header><div class="content"><p>on Fri Jan 29 2016, Paul Cantrell &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I took Adriano’s comments not as a specific syntax proposal — clearly<br>&gt; Ruby’s use of the ? and ! symbols is both different from and<br>&gt; fundamentally incompatible with Swift’s — but rather as a way of<br>&gt; pointing out that another language has solved this problem by<br>&gt; reserving a special notation for “mutating” instead of trying to pack<br>&gt; it in to grammar-based or otherwise natural-langue-based conventions,<br>&gt; and that worked out all right.<br></p><p>Yes, I understand that.  But language features to support such a special<br>notation are really off the table for Swift 3, so we&#39;re left with<br>“grammar-based or otherwise natural-langue-based conventions,” and<br>discussion of anything else is not relevant to this review.<br></p><p>&gt; Turning back to the guidelines review at hand, I do worry that these<br>&gt; proposed guidelines pack too much significance into the vagaries of<br>&gt; English grammar, which (as we’ve found out on this thread) is an<br>&gt; inconsistent and fickle friend. I’m personally in favor of charging<br>&gt; ahead with that quixotic venture nonetheless, but I do worry a bit<br>&gt; that the guidelines as stated are too narrowly stated in all the<br>&gt; places where grammar is involved.<br></p><p>Understood.  It would be nice to be able to say “just do what makes<br>sense,” but the downside is that you lose regularity and you lose<br>developer hours agonizing over trivia.  The downside of API guidelines<br>is that they restrain you from doing what you want to do... and the<br>upside is that they restain you from doing whatever you want to do. ;-)<br></p><p>&gt; Cheers, P<br>&gt;<br>&gt;&gt; On Jan 29, 2016, at 2:55 PM, David Waite via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; In Ruby ‘?’ indicates conditional usage while in Swift ‘?’ indicates<br>&gt;&gt; optionality or an optional (fall-back) execution path (this<br>&gt;&gt; operation returned return nil as a fallback for not holding a value,<br>&gt;&gt; method being called on a nil value, method call throwing an error,<br>&gt;&gt; etc)<br>&gt;&gt; <br>&gt;&gt; This is why in Ruby 2.3, the “?.” operator that they wanted to use<br>&gt;&gt; eventually evolved into an “&amp;.” operator.<br>&gt;&gt; <br>&gt;&gt; ‘!’ in Ruby means either this operation is destructive or that this<br>&gt;&gt; operation will raise an exception on error, in Swift it means as a<br>&gt;&gt; general rule ‘failures are precondition failures which will crash<br>&gt;&gt; your application’<br>&gt;&gt; <br>&gt;&gt; -DW<br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 29, 2016, at 11:10 AM, Adriano Ferreira via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Indeed, Ruby has an interesting convention where a question mark<br>&gt;&gt;&gt; (?) is used for boolean functions/methods:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In Swift: foo.contains(...)<br>&gt;&gt;&gt; In Ruby: foo.include?(...)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In Swift: foo.isEmpty<br>&gt;&gt;&gt; In Ruby: foo.empty?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Well, in the last case `isEmpty` is a property whereas `empty?` is a method, but the idea is similar.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Also, an exclamation mark (!) is generally used to indicate that a function/method mutates `self`:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Non-mutating:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Swift — foo.reverse()<br>&gt;&gt;&gt; Ruby — foo.reverse<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Mutating:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Swift — foo.reverseInPlace()<br>&gt;&gt;&gt; Ruby — foo.reverse!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Non-mutating:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Swift — foo.sort()  or  foo.sort({…})<br>&gt;&gt;&gt; Ruby — foo.sort  or  foo.sort {…}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Mutating:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Swift — foo.sortInPlace()  or  foo.sortInPlace({…})<br>&gt;&gt;&gt; Ruby — foo.sort!  or  foo.sort! {…} <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think it’s a simple and nice way of addressing the naming issue<br>&gt;&gt;&gt; of mutating vs. non-mutating or pure vs. impure<br>&gt;&gt;&gt; functions/methods. However, this conflicts with the syntax sugar of<br>&gt;&gt;&gt; Optionals and, therefore, following this path would have a clear<br>&gt;&gt;&gt; impact in the language.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Best,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; — A<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 23, 2016, at 3:46 PM, Jacob Bandes-Storch via<br>&gt;&gt;&gt;&gt; swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Sat, Jan 23, 2016 at 12:44 PM, J. Cheyo Jimenez via<br>&gt;&gt;&gt;&gt; swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; The inPlace proposal is excellent. As suggested something like<br>&gt;&gt;&gt;&gt; x.=f() would be perfect to distinguish mutating methods .Something<br>&gt;&gt;&gt;&gt; I don&#39;t like from the API design guidelines is that non mutating<br>&gt;&gt;&gt;&gt; methods like enumerate would be become enumerated. In my mind<br>&gt;&gt;&gt;&gt; enumerate is a word of art and I don&#39;t ever think of it as muting<br>&gt;&gt;&gt;&gt; so having to always use enumerated in the future seems weird. Also<br>&gt;&gt;&gt;&gt; having to ed/ing non mutating methods seems to make mutating<br>&gt;&gt;&gt;&gt; methods more important.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; //non mutating suggestion<br>&gt;&gt;&gt;&gt; x.sort()<br>&gt;&gt;&gt;&gt; x.split()<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; //other ideas for mutating methods names<br>&gt;&gt;&gt;&gt; x.sort*()<br>&gt;&gt;&gt;&gt; x.sort&amp;() // I like &amp; the most<br>&gt;&gt;&gt;&gt; x.split&amp;()<br>&gt;&gt;&gt;&gt; x.sort@()<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; By marking a method with a special character at the end, the<br>&gt;&gt;&gt;&gt; reader would know that the method mutates.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Ruby uses ! for this, by convention:<br>&gt;&gt;&gt;&gt; http://stackoverflow.com/questions/612189/why-are-exclamation-marks-used-in-ruby-methods<br>&gt;&gt;&gt;&gt; &lt;http://stackoverflow.com/questions/612189/why-are-exclamation-marks-used-in-ruby-methods&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ecdb231117dda838340bfcbb8873d28e?s=50"></div><header><strong>[Review] SE-0023 API Design Guidelines</strong> from <string>Paul Cantrell</string> &lt;cantrell at pobox.com&gt;<p>January 31, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jan 30, 2016, at 9:54 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; on Fri Jan 29 2016, Paul Cantrell &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; I do worry that these<br>&gt;&gt; proposed guidelines pack too much significance into the vagaries of<br>&gt;&gt; English grammar, which (as we’ve found out on this thread) is an<br>&gt;&gt; inconsistent and fickle friend. I’m personally in favor of charging<br>&gt;&gt; ahead with that quixotic venture nonetheless, but I do worry a bit<br>&gt;&gt; that the guidelines as stated are too narrowly stated in all the<br>&gt;&gt; places where grammar is involved.<br>&gt; <br>&gt; Understood.  It would be nice to be able to say “just do what makes<br>&gt; sense,” but the downside is that you lose regularity and you lose<br>&gt; developer hours agonizing over trivia.  The downside of API guidelines<br>&gt; is that they restrain you from doing what you want to do... and the<br>&gt; upside is that they restain you from doing whatever you want to do. ;-)<br></p><p>An escape clause would help strike the balance: let the guidelines be as narrow as they are, but include a “guidelines are not laws” remark that gives teams permission to make carefully considered guideline overrides. This would prevent the “but it says so right here we must not deviate” vs. “but that injures clarity in our situation” argument within teams.<br></p><p>It seems to me that the first item under “Fundamentals,” maybe the first two, have a different order of importance than the rest of the document: “Clarity at the point of use is your most important goal. Clarity is more important than brevity.” That’s the Bill of Rights, as it were, and the rest of the guidelines are federal laws. Sometimes, in a particular situation, specific guidelines will come into conflict with clarity. You’ve written the guidelines to try to minimize that happening, but when it does, it’s clarity that should prevail.<br></p><p>…and I imagine we’d all agree on that, but having the guidelines explicitly say as much would prevent unnecessary agonizing.<br></p><p>Cheers,<br></p><p>Paul<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160131/0b531f59/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0023 API Design Guidelines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 31, 2016 at 02:00:00pm</p></header><div class="content"><p>on Sun Jan 31 2016, Paul Cantrell &lt;cantrell-AT-pobox.com&gt; wrote:<br></p><p>&gt;&gt; On Jan 30, 2016, at 9:54 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; on Fri Jan 29 2016, Paul Cantrell &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; I do worry that these<br>&gt;<br>&gt;&gt;&gt; proposed guidelines pack too much significance into the vagaries of<br>&gt;&gt;&gt; English grammar, which (as we’ve found out on this thread) is an<br>&gt;&gt;&gt; inconsistent and fickle friend. I’m personally in favor of charging<br>&gt;&gt;&gt; ahead with that quixotic venture nonetheless, but I do worry a bit<br>&gt;&gt;&gt; that the guidelines as stated are too narrowly stated in all the<br>&gt;&gt;&gt; places where grammar is involved.<br>&gt;&gt; <br>&gt;&gt; Understood.  It would be nice to be able to say “just do what makes<br>&gt;&gt; sense,” but the downside is that you lose regularity and you lose<br>&gt;&gt; developer hours agonizing over trivia.  The downside of API guidelines<br>&gt;&gt; is that they restrain you from doing what you want to do... and the<br>&gt;&gt; upside is that they restain you from doing whatever you want to do. ;-)<br>&gt;<br>&gt; An escape clause would help strike the balance: let the guidelines be<br>&gt; as narrow as they are, but include a “guidelines are not laws” remark<br>&gt; that gives teams permission to make carefully considered guideline<br>&gt; overrides. This would prevent the “but it says so right here we must<br>&gt; not deviate” vs. “but that injures clarity in our situation” argument<br>&gt; within teams.<br>&gt;<br>&gt; It seems to me that the first item under “Fundamentals,” maybe the<br>&gt; first two, have a different order of importance than the rest of the<br>&gt; document: “Clarity at the point of use is your most important<br>&gt; goal. Clarity is more important than brevity.” That’s the Bill of<br>&gt; Rights, as it were, and the rest of the guidelines are federal<br>&gt; laws. Sometimes, in a particular situation, specific guidelines will<br>&gt; come into conflict with clarity. You’ve written the guidelines to try<br>&gt; to minimize that happening, but when it does, it’s clarity that should<br>&gt; prevail.<br>&gt;<br>&gt; …and I imagine we’d all agree on that, but having the guidelines<br>&gt; explicitly say as much would prevent unnecessary agonizing.<br></p><p>I&#39;m wary of doing that.  Having worked with these guidelines for months,<br>my guess is that 90% of the time one thinks one can&#39;t conform to the<br>guidelines without losing clarity, one just hasn&#39;t thought of how to do<br>it yet.  If you&#39;re let off the hook too early, you end up with avoidable<br>non-uniformity in the name of clarity.  Do you really think people can&#39;t<br>infer priorities from the structure of the document and the permission<br>to bend from the fact that they&#39;re called “guidelines?”<br></p><p>-- <br>-Dave<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
