<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Prohibit invisible characters in identifier names</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>June 20, 2016 at 02:00:00pm</p></header><div class="content"><p>on Mon Jun 20 2016, Xiaodi Wu &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Mon, Jun 20, 2016 at 2:42 PM, Jo√£o Pinheiro &lt;joao at joaopinheiro.org&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; I agree that treating zero-width spaces as non-existent would be a<br>&gt;&gt; possible solution, but I think it would make more sense to consider it as<br>&gt;&gt; white space and thus not admissible in identifier names.<br>&gt;&gt;<br>&gt;<br>&gt; If you treat it like whitespace, then you get interesting behaviors that I<br>&gt; don&#39;t think you would want. For example, something that looks like `if<br>&gt; letter...` could be parsed as conditional binding `if let ter...` if I put<br>&gt; in a zero-width space in the right place.<br>&gt;<br>&gt;&gt; I&#39;m not sure of what the best way to handle left-to-right and<br>&gt;&gt; right-to-left markers would be. Does it make sense to allow mixed text<br>&gt;&gt; orientation in identifiers?<br>&gt;&gt;<br>&gt;<br>&gt; How do other languages that support Unicode handle these markers in<br>&gt; identifiers? I&#39;d be interested to know.<br>&gt;<br>&gt;&gt; Removing ambiguity between unicode confusables is a much more complicated<br>&gt;&gt; issue which implies defining a canonical unicode representation for<br>&gt;&gt; identifiers and a way to resolve them. It would also make it impractical to<br>&gt;&gt; use certain valid mathematical symbols as identifiers.<br>&gt;&gt;<br>&gt;<br>&gt; Most interesting mathematical symbols are reserved for operators anyway. As<br>&gt; a result, `x` and the multiplication symbol are not readily confusable in<br>&gt; most contexts in Swift, and confusable resolution could be built in such a<br>&gt; way that identifier characters are not regarded as confusable with operator<br>&gt; characters.<br></p><p>I&#39;m a little concerned about cases like these:<br></p><p>1D6CE ;	0076 ;	MA	# ( ùõé ‚Üí v ) MATHEMATICAL BOLD SMALL NU ‚Üí LATIN SMALL LETTER V	# ‚ÜíŒΩ‚Üí<br>1D6D2 ;	0070 ;	MA	# ( ùõí ‚Üí p ) MATHEMATICAL BOLD SMALL RHO ‚Üí LATIN SMALL LETTER P	# ‚ÜíœÅ‚Üí<br></p><p>etc.  Now, one could reasonably argue that using ‚Äúùõé‚Äù and ‚Äúv‚Äù to mean<br>different things in the same scope would be bad, but I&#39;m not sure<br>we really want to accept them as aliases of one another, either.<br></p><p>&gt;&gt; Jo√£o Pinheiro<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On 20 Jun 2016, at 20:23, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On Mon, Jun 20, 2016 at 2:17 PM, Jo√£o Pinheiro &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Nice feature in the IBM Swift Sandbox. Xcode doesn&#39;t display zero-width<br>&gt;&gt;&gt; spaces either so the identifier names look exactly the same.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The issue with left-to-right and right-to-left markers is interesting and<br>&gt;&gt;&gt; has previously been exploited in email phishing attacks.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; It would be possible to highlight invisible characters in Xcode as a<br>&gt;&gt;&gt; stopgap measure, but that doesn&#39;t solve the problem for developers using<br>&gt;&gt;&gt; other editors or in other platforms. I think it would be a better idea to<br>&gt;&gt;&gt; sanitise the set of allowed (or prohibited) characters for identifiers at<br>&gt;&gt;&gt; the language level.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; This is a potential security problem, but no need try to invent an ad-hoc<br>&gt;&gt; solution here, particularly one as drastic as prohibiting characters. The<br>&gt;&gt; same security considerations are applicable elsewhere and there&#39;s a lot of<br>&gt;&gt; work about Unicode security. See here:<br>&gt;&gt; http://www.unicode.org/reports/tr39/<br>&gt;&gt;<br>&gt;&gt; Unicode maintains a list of &quot;confusable&quot; characters. See here:<br>&gt;&gt; http://www.unicode.org/Public/security/latest/confusables.txt<br>&gt;&gt;<br>&gt;&gt; It should be sufficient to regard confusables as the same glyph for the<br>&gt;&gt; purpose of identifier names; zero-width and invisible marks would then be<br>&gt;&gt; regarded as non-existent, so that `test` and `t[invisible glyph]est` would<br>&gt;&gt; refer to the same variable.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; Sincerely,<br>&gt;&gt;&gt; Jo√£o Pinheiro<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt; On 20 Jun 2016, at 19:26, Vladimir.S &lt;svabox at gmail.com&gt; wrote:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; Very interesting.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; Btw, IBM Swift Sandbox shows these spaces:<br>&gt;&gt;&gt; &gt; https://swiftlang.ng.bluemix.net/<br>&gt;&gt;&gt; &gt; But my mail client does not - i.e. I saw exactly the same &quot;test&quot;&amp;&quot;abc&quot;<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; Also, I read about some issues with left-to-right and right-to-left<br>&gt;&gt;&gt; markers that also somehow change the actual text of source - i.e. you see<br>&gt;&gt;&gt; one text, but when it compiles - it works not as expected. I.e.<br>&gt;&gt;&gt; viewer/editor processes these special codes and show you one text, but<br>&gt;&gt;&gt; compiler treats text in another way.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; I believe it is a potential security problem that all unicode chars are<br>&gt;&gt;&gt; allowed for variables/func names in Swift. IMO We definitely should limit<br>&gt;&gt;&gt; allowed charset for identifiers in sources.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; On 20.06.2016 20:51, Jo√£o Pinheiro via swift-evolution wrote:<br>&gt;&gt;&gt; &gt;&gt; Recently there has been a screenshot going around Twitter about C++<br>&gt;&gt;&gt; allowing zero-width spaces in variable names. Swift also suffers from this<br>&gt;&gt;&gt; problem which can be abused to create ambiguous, misleading, and<br>&gt;&gt;&gt; potentially obfuscate nefarious code.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; I would like to propose a change to prohibit the use of invisible<br>&gt;&gt;&gt; characters in identifier names.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; I&#39;m including an example of problematic code at the bottom of this<br>&gt;&gt;&gt; email.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; Sincerely,<br>&gt;&gt;&gt; &gt;&gt; Jo√£o Pinheiro<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; /* The output for this code is:<br>&gt;&gt;&gt; &gt;&gt; A<br>&gt;&gt;&gt; &gt;&gt; B<br>&gt;&gt;&gt; &gt;&gt; C<br>&gt;&gt;&gt; &gt;&gt; 1<br>&gt;&gt;&gt; &gt;&gt; 2<br>&gt;&gt;&gt; &gt;&gt; 3<br>&gt;&gt;&gt; &gt;&gt; */<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; func test() { print(&quot;A&quot;) }<br>&gt;&gt;&gt; &gt;&gt; func t‚Äãest() { print(&quot;B&quot;) }<br>&gt;&gt;&gt; &gt;&gt; func te‚Äãst() { print(&quot;C&quot;) }<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; let abc = 1<br>&gt;&gt;&gt; &gt;&gt; let a‚Äãbc = 2<br>&gt;&gt;&gt; &gt;&gt; let ab‚Äãc = 3<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; test()<br>&gt;&gt;&gt; &gt;&gt; t‚Äãest()<br>&gt;&gt;&gt; &gt;&gt; te‚Äãst()<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; print(abc)<br>&gt;&gt;&gt; &gt;&gt; print(a‚Äãbc)<br>&gt;&gt;&gt; &gt;&gt; print(ab‚Äãc)<br>&gt;&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/92adc26e3003cac88ca299a08d35b2b3?s=50"></div><header><strong>Prohibit invisible characters in identifier names</strong> from <string>Jo√£o Pinheiro</string> &lt;joao at joaopinheiro.org&gt;<p>June 20, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On 20 Jun 2016, at 22:44, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; I&#39;m a little concerned about cases like these:<br>&gt; <br>&gt; 1D6CE ;	0076 ;	MA	# ( ùõé ‚Üí v ) MATHEMATICAL BOLD SMALL NU ‚Üí LATIN SMALL LETTER V	# ‚ÜíŒΩ‚Üí<br>&gt; 1D6D2 ;	0070 ;	MA	# ( ùõí ‚Üí p ) MATHEMATICAL BOLD SMALL RHO ‚Üí LATIN SMALL LETTER P	# ‚ÜíœÅ‚Üí<br>&gt; <br>&gt; etc.  Now, one could reasonably argue that using ‚Äúùõé‚Äù and ‚Äúv‚Äù to mean<br>&gt; different things in the same scope would be bad, but I&#39;m not sure<br>&gt; we really want to accept them as aliases of one another, either.<br></p><p>Indeed, it would be unwise to pick &quot;ùõé&quot; and &quot;v&quot; for different things within the same scope. Unicode confusables are annoying and unfortunate, but not totally unexpected. Automatic aliases for similar characters would arguably be worse since it would probably qualify as unexpected behaviour for most people.<br></p><p>Jo√£o Pinheiro<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Prohibit invisible characters in identifier names</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 20, 2016 at 05:00:00pm</p></header><div class="content"><p>On Mon, Jun 20, 2016 at 5:20 PM, Jo√£o Pinheiro &lt;swift-evolution at swift.org&gt;<br>wrote:<br></p><p>&gt;<br>&gt; &gt; On 20 Jun 2016, at 22:44, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; I&#39;m a little concerned about cases like these:<br>&gt; &gt;<br>&gt; &gt; 1D6CE ;       0076 ;  MA      # ( ùõé ‚Üí v ) MATHEMATICAL BOLD SMALL NU ‚Üí<br>&gt; LATIN SMALL LETTER V  # ‚ÜíŒΩ‚Üí<br>&gt; &gt; 1D6D2 ;       0070 ;  MA      # ( ùõí ‚Üí p ) MATHEMATICAL BOLD SMALL RHO ‚Üí<br>&gt; LATIN SMALL LETTER P # ‚ÜíœÅ‚Üí<br>&gt; &gt;<br>&gt; &gt; etc.  Now, one could reasonably argue that using ‚Äúùõé‚Äù and ‚Äúv‚Äù to mean<br>&gt; &gt; different things in the same scope would be bad, but I&#39;m not sure<br>&gt; &gt; we really want to accept them as aliases of one another, either.<br>&gt;<br>&gt; Indeed, it would be unwise to pick &quot;ùõé&quot; and &quot;v&quot; for different things<br>&gt; within the same scope. Unicode confusables are annoying and unfortunate,<br>&gt; but not totally unexpected. Automatic aliases for similar characters would<br>&gt; arguably be worse since it would probably qualify as unexpected behaviour<br>&gt; for most people.<br>&gt;<br></p><p>I&#39;m not entirely sure about automatic aliasing either. But I will boldly<br>claim that &quot;most people&quot; who choose v and nu for distinct variables don&#39;t<br>walk into that situation with expectations of sanity.<br></p><p><br>&gt;<br>&gt; Jo√£o Pinheiro<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160620/f54f03b4/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Prohibit invisible characters in identifier names</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 20, 2016 at 05:00:00pm</p></header><div class="content"><p>On Mon, Jun 20, 2016 at 4:44 PM, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; on Mon Jun 20 2016, Xiaodi Wu &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt; On Mon, Jun 20, 2016 at 2:42 PM, Jo√£o Pinheiro &lt;joao at joaopinheiro.org&gt;<br>&gt; &gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt; I agree that treating zero-width spaces as non-existent would be a<br>&gt; &gt;&gt; possible solution, but I think it would make more sense to consider it<br>&gt; as<br>&gt; &gt;&gt; white space and thus not admissible in identifier names.<br>&gt; &gt;&gt;<br>&gt; &gt;<br>&gt; &gt; If you treat it like whitespace, then you get interesting behaviors that<br>&gt; I<br>&gt; &gt; don&#39;t think you would want. For example, something that looks like `if<br>&gt; &gt; letter...` could be parsed as conditional binding `if let ter...` if I<br>&gt; put<br>&gt; &gt; in a zero-width space in the right place.<br>&gt; &gt;<br>&gt; &gt;&gt; I&#39;m not sure of what the best way to handle left-to-right and<br>&gt; &gt;&gt; right-to-left markers would be. Does it make sense to allow mixed text<br>&gt; &gt;&gt; orientation in identifiers?<br>&gt; &gt;&gt;<br>&gt; &gt;<br>&gt; &gt; How do other languages that support Unicode handle these markers in<br>&gt; &gt; identifiers? I&#39;d be interested to know.<br>&gt; &gt;<br>&gt; &gt;&gt; Removing ambiguity between unicode confusables is a much more<br>&gt; complicated<br>&gt; &gt;&gt; issue which implies defining a canonical unicode representation for<br>&gt; &gt;&gt; identifiers and a way to resolve them. It would also make it<br>&gt; impractical to<br>&gt; &gt;&gt; use certain valid mathematical symbols as identifiers.<br>&gt; &gt;&gt;<br>&gt; &gt;<br>&gt; &gt; Most interesting mathematical symbols are reserved for operators anyway.<br>&gt; As<br>&gt; &gt; a result, `x` and the multiplication symbol are not readily confusable in<br>&gt; &gt; most contexts in Swift, and confusable resolution could be built in such<br>&gt; a<br>&gt; &gt; way that identifier characters are not regarded as confusable with<br>&gt; operator<br>&gt; &gt; characters.<br>&gt;<br>&gt; I&#39;m a little concerned about cases like these:<br>&gt;<br>&gt; 1D6CE ; 0076 ;  MA      # ( ùõé ‚Üí v ) MATHEMATICAL BOLD SMALL NU ‚Üí LATIN<br>&gt; SMALL LETTER V  # ‚ÜíŒΩ‚Üí<br>&gt; 1D6D2 ; 0070 ;  MA      # ( ùõí ‚Üí p ) MATHEMATICAL BOLD SMALL RHO ‚Üí LATIN<br>&gt; SMALL LETTER P # ‚ÜíœÅ‚Üí<br>&gt;<br>&gt; etc.  Now, one could reasonably argue that using ‚Äúùõé‚Äù and ‚Äúv‚Äù to mean<br>&gt; different things in the same scope would be bad, but I&#39;m not sure<br>&gt; we really want to accept them as aliases of one another, either.<br>&gt;<br></p><p>Yes, that does give me pause. FWIW, though, Greek letters have been known<br>to turn into their lookalike Latin counterparts. For instance, do a Google<br>search for Planck&#39;s equation written as &quot;E = hv&quot; (that &quot;v&quot; is supposed to<br>be lowercase nu). Or consider the abbreviation &quot;XP&quot; for Christ,<br>etymologically uppercase chi and rho (the first two letters of Christ in<br>Greek). (Or relatedly, the erroneous claim that &quot;Xmas&quot; is an attempt to<br>remove Christ out of Christmas.)<br></p><p>I guess what I&#39;m saying is, if a co-worker named two distinct variables v<br>and nu, I would have a word or two with them... Consider an alternative<br>scenario. I have a Greek keyboard in my keyboard switcher, handy for<br>scientific uses. If I accidentally use Greek uppercase alpha in my code<br>instead of A, this would be essentially impossible to find by eye. Why<br>should the language not elide the invisible distinction?<br></p><p><br>&gt; &gt;&gt; Jo√£o Pinheiro<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; On 20 Jun 2016, at 20:23, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; On Mon, Jun 20, 2016 at 2:17 PM, Jo√£o Pinheiro &lt;<br>&gt; swift-evolution at swift.org&gt;<br>&gt; &gt;&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; Nice feature in the IBM Swift Sandbox. Xcode doesn&#39;t display zero-width<br>&gt; &gt;&gt;&gt; spaces either so the identifier names look exactly the same.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; The issue with left-to-right and right-to-left markers is interesting<br>&gt; and<br>&gt; &gt;&gt;&gt; has previously been exploited in email phishing attacks.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; It would be possible to highlight invisible characters in Xcode as a<br>&gt; &gt;&gt;&gt; stopgap measure, but that doesn&#39;t solve the problem for developers<br>&gt; using<br>&gt; &gt;&gt;&gt; other editors or in other platforms. I think it would be a better idea<br>&gt; to<br>&gt; &gt;&gt;&gt; sanitise the set of allowed (or prohibited) characters for identifiers<br>&gt; at<br>&gt; &gt;&gt;&gt; the language level.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; This is a potential security problem, but no need try to invent an<br>&gt; ad-hoc<br>&gt; &gt;&gt; solution here, particularly one as drastic as prohibiting characters.<br>&gt; The<br>&gt; &gt;&gt; same security considerations are applicable elsewhere and there&#39;s a lot<br>&gt; of<br>&gt; &gt;&gt; work about Unicode security. See here:<br>&gt; &gt;&gt; http://www.unicode.org/reports/tr39/<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Unicode maintains a list of &quot;confusable&quot; characters. See here:<br>&gt; &gt;&gt; http://www.unicode.org/Public/security/latest/confusables.txt<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; It should be sufficient to regard confusables as the same glyph for the<br>&gt; &gt;&gt; purpose of identifier names; zero-width and invisible marks would then<br>&gt; be<br>&gt; &gt;&gt; regarded as non-existent, so that `test` and `t[invisible glyph]est`<br>&gt; would<br>&gt; &gt;&gt; refer to the same variable.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; Sincerely,<br>&gt; &gt;&gt;&gt; Jo√£o Pinheiro<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt; On 20 Jun 2016, at 19:26, Vladimir.S &lt;svabox at gmail.com&gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;<br>&gt; &gt;&gt;&gt; &gt; Very interesting.<br>&gt; &gt;&gt;&gt; &gt;<br>&gt; &gt;&gt;&gt; &gt; Btw, IBM Swift Sandbox shows these spaces:<br>&gt; &gt;&gt;&gt; &gt; https://swiftlang.ng.bluemix.net/<br>&gt; &gt;&gt;&gt; &gt; But my mail client does not - i.e. I saw exactly the same<br>&gt; &quot;test&quot;&amp;&quot;abc&quot;<br>&gt; &gt;&gt;&gt; &gt;<br>&gt; &gt;&gt;&gt; &gt; Also, I read about some issues with left-to-right and right-to-left<br>&gt; &gt;&gt;&gt; markers that also somehow change the actual text of source - i.e. you<br>&gt; see<br>&gt; &gt;&gt;&gt; one text, but when it compiles - it works not as expected. I.e.<br>&gt; &gt;&gt;&gt; viewer/editor processes these special codes and show you one text, but<br>&gt; &gt;&gt;&gt; compiler treats text in another way.<br>&gt; &gt;&gt;&gt; &gt;<br>&gt; &gt;&gt;&gt; &gt; I believe it is a potential security problem that all unicode chars<br>&gt; are<br>&gt; &gt;&gt;&gt; allowed for variables/func names in Swift. IMO We definitely should<br>&gt; limit<br>&gt; &gt;&gt;&gt; allowed charset for identifiers in sources.<br>&gt; &gt;&gt;&gt; &gt;<br>&gt; &gt;&gt;&gt; &gt; On 20.06.2016 20:51, Jo√£o Pinheiro via swift-evolution wrote:<br>&gt; &gt;&gt;&gt; &gt;&gt; Recently there has been a screenshot going around Twitter about C++<br>&gt; &gt;&gt;&gt; allowing zero-width spaces in variable names. Swift also suffers from<br>&gt; this<br>&gt; &gt;&gt;&gt; problem which can be abused to create ambiguous, misleading, and<br>&gt; &gt;&gt;&gt; potentially obfuscate nefarious code.<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; I would like to propose a change to prohibit the use of invisible<br>&gt; &gt;&gt;&gt; characters in identifier names.<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; I&#39;m including an example of problematic code at the bottom of this<br>&gt; &gt;&gt;&gt; email.<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; Sincerely,<br>&gt; &gt;&gt;&gt; &gt;&gt; Jo√£o Pinheiro<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; /* The output for this code is:<br>&gt; &gt;&gt;&gt; &gt;&gt; A<br>&gt; &gt;&gt;&gt; &gt;&gt; B<br>&gt; &gt;&gt;&gt; &gt;&gt; C<br>&gt; &gt;&gt;&gt; &gt;&gt; 1<br>&gt; &gt;&gt;&gt; &gt;&gt; 2<br>&gt; &gt;&gt;&gt; &gt;&gt; 3<br>&gt; &gt;&gt;&gt; &gt;&gt; */<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; func test() { print(&quot;A&quot;) }<br>&gt; &gt;&gt;&gt; &gt;&gt; func t‚Äãest() { print(&quot;B&quot;) }<br>&gt; &gt;&gt;&gt; &gt;&gt; func te‚Äãst() { print(&quot;C&quot;) }<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; let abc = 1<br>&gt; &gt;&gt;&gt; &gt;&gt; let a‚Äãbc = 2<br>&gt; &gt;&gt;&gt; &gt;&gt; let ab‚Äãc = 3<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; test()<br>&gt; &gt;&gt;&gt; &gt;&gt; t‚Äãest()<br>&gt; &gt;&gt;&gt; &gt;&gt; te‚Äãst()<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; print(abc)<br>&gt; &gt;&gt;&gt; &gt;&gt; print(a‚Äãbc)<br>&gt; &gt;&gt;&gt; &gt;&gt; print(ab‚Äãc)<br>&gt; &gt;&gt;&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt;<br>&gt; --<br>&gt; Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160620/dc85d878/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
