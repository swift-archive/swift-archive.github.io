<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Fwd: [RFC] &quot;Library Evolution Support in Swift (&#39;Resilience&#39;)&quot;</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>February  8, 2016 at 06:00:00pm</p></header><div class="content"><p>I just sent this to swift-evolution. TLDR: LibraryEvolution.rst is ready for wider review and comments.<br></p><p>(Of course Slava&#39;s been hard at work implementing all this for the last few weeks already, but that doesn&#39;t make the model any less important!)<br></p><p>Thanks!<br>Jordan<br></p><p><br>&gt; Begin forwarded message:<br>&gt; <br>&gt; From: Jordan Rose &lt;jordan_rose at apple.com&gt;<br>&gt; Subject: [RFC] &quot;Library Evolution Support in Swift (&#39;Resilience&#39;)&quot;<br>&gt; Date: February 8, 2016 at 18:24:15 PST<br>&gt; To: swift-evolution &lt;swift-evolution at swift.org&gt;<br>&gt; <br>&gt; Hi, swift-evolution. We&#39;ve been making references for a while to &quot;resilience&quot; as a cornerstone of the Swift 3.0 work, the collection of features that allows a library to evolve over time while maintaining binary compatibility. Among other things, this is necessary if we want to stop bundling the Swift standard library with any app that uses Swift, a noted complaint from iOS developers. :-)<br>&gt; <br>&gt; If you&#39;re wondering what this is all about, take a look at the prologue for the design document:<br>&gt; <br>&gt;&gt; One of Swift’s primary design goals is to allow efficient execution of code without sacrificing load-time abstraction of implementation.<br>&gt;&gt; <br>&gt;&gt; Abstraction of implementation means that code correctly written against a published interface will correctly function when the underlying implementation changes to anything which still satisfies the original interface. There are many potential reasons to provide this sort of abstraction. Apple’s primary interest is in making it easy and painless for our internal and external developers to improve the ecosystem of Apple products by creating good and secure programs and libraries; subtle deployment problems and/or unnecessary dependencies on the behavior of our implementations would work against these goals.<br>&gt;&gt; <br>&gt;&gt; Our current design in Swift is to provide opt-out load-time abstraction of implementation for all language features. Alone, this would either incur unacceptable cost or force widespread opting-out of abstraction. We intend to mitigate this primarily by designing the language and its implementation to minimize unnecessary and unintended abstraction:<br>&gt;&gt; <br>&gt;&gt; 	• Avoiding unnecessary language guarantees and taking advantage of that flexibility to limit load-time costs.<br>&gt;&gt; 	• Within the domain that defines an entity, all the details of its implementation are available.<br>&gt;&gt; 	• When entities are not exposed outside their defining module, their implementation is not constrained.<br>&gt;&gt; 	• By default, entities are not exposed outside their defining modules. This is independently desirable to reduce accidental API surface area, but happens to also interact well with the performance design.<br>&gt;&gt; <br>&gt;&gt; This last point is a specific case of a general tenet of Swift: the default behavior is safe. Where possible, choices made when an entity is first published should not limit its evolution in the future.<br>&gt; <br>&gt; <br>&gt; RFC stands for &quot;request for comments&quot;, and that&#39;s what this is: I&#39;d appreciate the eager and discriminating eyes of swift-evolution on this model. It is quite long—nearly ten thousand words—and attempts to be fairly precise in describing what is and isn&#39;t allowed, so feel free to focus on the parts that interest you most. This isn&#39;t a proposal and won&#39;t be going through the Swift Evolution Process, but many existing or planned proposals will affect or support the model described here. (There&#39;s a list of them at the end of the document.)<br>&gt; <br>&gt; The document is written in ReStructuredText to match the rest of the compiler documentation, but it&#39;s using some features from the Sphinx system that GitHub&#39;s ReST renderer doesn&#39;t support. Consequently, I&#39;ve put up a rendered form &lt;http://jrose-apple.github.io/swift-library-evolution/&gt;, which I&#39;ll update every few days when there are changes. (This is pretty much the same rendering you get from running &quot;make&quot; in the docs/ directory in the Swift repo.) The canonical document is still the one in the Swift repository &lt;https://github.com/apple/swift/blob/master/docs/LibraryEvolution.rst&gt;.<br>&gt; <br>&gt; Looking forward to your feedback!<br>&gt; Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160208/dc9b09b1/attachment.html&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
