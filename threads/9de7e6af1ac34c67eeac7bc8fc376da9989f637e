<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6b4cb21e7820c14a4044e4706757da83?s=50"></div><header><strong>Discussion: Enforce usage of @available on enum cases</strong> from <string>Stuart Breckenridge</string> &lt;stuart.breckenridge at icloud.com&gt;<p>May 26, 2016 at 09:00:00am</p></header><div class="content"><p>Presently, you can mark enum cases as @available but it has no impact. Take the following example:<br></p><p>enum Things:String {<br>	@available (iOS 9.3, *) case MobileThing = &quot;com.example.mobilething&quot;<br>	@available (OSX 10.11, *) case DesktopThing = &quot;com.example.desktopthing&quot;<br>}<br></p><p>Despite the above compiling, the following code will run iOS with no warnings:<br></p><p>func takesA(thing:Things) {<br>	print(thing)<br>}<br></p><p>takesA(.DesktopThing)<br></p><p><br>Are there enough compelling use-cases for @available on enum cases to be considered? At the very least, if @available doesn&#39;t do anything on cases, it shouldn&#39;t be permitted.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160526/9de7637e/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: smime.p7s<br>Type: application/pkcs7-signature<br>Size: 3138 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160526/9de7637e/attachment.p7s&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Discussion: Enforce usage of @available on enum cases</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>May 25, 2016 at 08:00:00pm</p></header><div class="content"><p>The “*” in @available means “all other platforms”. If you want to mark something unavailable on a particular platform, you’ll have to use the long form of the @available attribute. There’s currently no way to mark something “only available on these platforms”.<br></p><p>Jordan<br></p><p>&gt; On May 25, 2016, at 18:48, Stuart Breckenridge via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Presently, you can mark enum cases as @available but it has no impact. Take the following example:<br>&gt; <br>&gt; enum Things:String {<br>&gt; 	@available (iOS 9.3, *) case MobileThing = &quot;com.example.mobilething&quot;<br>&gt; 	@available (OSX 10.11, *) case DesktopThing = &quot;com.example.desktopthing&quot;<br>&gt; }<br>&gt; <br>&gt; Despite the above compiling, the following code will run iOS with no warnings:<br>&gt; <br>&gt; func takesA(thing:Things) {<br>&gt; 	print(thing)<br>&gt; }<br>&gt; <br>&gt; takesA(.DesktopThing)<br>&gt; <br>&gt; <br>&gt; Are there enough compelling use-cases for @available on enum cases to be considered? At the very least, if @available doesn&#39;t do anything on cases, it shouldn&#39;t be permitted.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160525/3ecc3ecf/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Discussion: Enforce usage of @available on enum cases</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>May 25, 2016 at 08:00:00pm</p></header><div class="content"><p>Was this an intentional choice, or is it just a temporary limitation? Would<br>a proposal to allow something like &quot;@available(OS X 10.11)&quot; be welcomed?<br></p><p><br>On Wed, May 25, 2016 at 8:17 PM, Jordan Rose via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; The “*” in @available means “all other platforms”. If you want to mark<br>&gt; something *unavailable* on a particular platform, you’ll have to use the<br>&gt; long form of the @available attribute. There’s currently no way to mark<br>&gt; something “only available on these platforms”.<br>&gt;<br>&gt; Jordan<br>&gt;<br>&gt; On May 25, 2016, at 18:48, Stuart Breckenridge via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Presently, you can mark enum cases as @available but it has no impact.<br>&gt; Take the following example:<br>&gt;<br>&gt; enum Things:String {<br>&gt; @available (iOS 9.3, *) case MobileThing = &quot;com.example.mobilething&quot;<br>&gt; @available (OSX 10.11, *) case DesktopThing = &quot;com.example.desktopthing&quot;<br>&gt; }<br>&gt;<br>&gt; Despite the above compiling, the following code will run iOS with no<br>&gt; warnings:<br>&gt;<br>&gt; func takesA(thing:Things) {<br>&gt; print(thing)<br>&gt; }<br>&gt;<br>&gt; takesA(.DesktopThing)<br>&gt;<br>&gt;<br>&gt; Are there enough compelling use-cases for @available on enum cases to be<br>&gt; considered? At the very least, if @available doesn&#39;t do anything on<br>&gt; cases, it shouldn&#39;t be permitted.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160525/883d8bd2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Discussion: Enforce usage of @available on enum cases</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>May 25, 2016 at 08:00:00pm</p></header><div class="content"><p>This was deliberate, and came from the pain of bringing up tvOS (and watchOS). Clang actually had a hack to treat “available on iOS” as “available on tvOS” for a while because of this. When you port something to a new platform, presumably everything that’s been introduced so far should be available from the start.<br></p><p>If we introduced a limited availability attribute, I think we’d want to make it more verbose than the normal one, so that you know you’re choosing it.<br></p><p>Jordan<br></p><p><br>&gt; On May 25, 2016, at 20:18, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt; Was this an intentional choice, or is it just a temporary limitation? Would a proposal to allow something like &quot;@available(OS X 10.11)&quot; be welcomed?<br>&gt; <br>&gt; <br>&gt; On Wed, May 25, 2016 at 8:17 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; The “*” in @available means “all other platforms”. If you want to mark something unavailable on a particular platform, you’ll have to use the long form of the @available attribute. There’s currently no way to mark something “only available on these platforms”.<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt;&gt; On May 25, 2016, at 18:48, Stuart Breckenridge via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Presently, you can mark enum cases as @available but it has no impact. Take the following example:<br>&gt;&gt; <br>&gt;&gt; enum Things:String {<br>&gt;&gt; 	@available (iOS 9.3, *) case MobileThing = &quot;com.example.mobilething&quot;<br>&gt;&gt; 	@available (OSX 10.11, *) case DesktopThing = &quot;com.example.desktopthing&quot;<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Despite the above compiling, the following code will run iOS with no warnings:<br>&gt;&gt; <br>&gt;&gt; func takesA(thing:Things) {<br>&gt;&gt; 	print(thing)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; takesA(.DesktopThing)<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Are there enough compelling use-cases for @available on enum cases to be considered? At the very least, if @available doesn&#39;t do anything on cases, it shouldn&#39;t be permitted.<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160525/941e39f4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6b4cb21e7820c14a4044e4706757da83?s=50"></div><header><strong>Discussion: Enforce usage of @available on enum cases</strong> from <string>Stuart Breckenridge</string> &lt;stuart.breckenridge at icloud.com&gt;<p>May 26, 2016 at 12:00:00pm</p></header><div class="content"><p>Taking the long form approach:<br></p><p>enum Things:String {<br>    @available (iOS 9.0, tvOS 9.0, watchOS 2.0, *)<br>    @available (OSX, unavailable, message=&quot;Not available on OS X.&quot;)<br>    case MobileThing = &quot;com.example.mobile&quot;<br>    <br>    @available (iOS, unavailable, message=&quot;Not available on iOS.&quot;)<br>    @available (tvOS, unavailable, message=&quot;Not available on tvOS.&quot;)<br>    @available (watchOS, unavailable, message=&quot;Not available on watchOS.&quot;)<br>    @available (OSX 10.11, *)<br>    case DesktopThing = &quot;com.example.desktop&quot;<br>}<br></p><p>This yields the expected result in a tvOS app:<br></p><p>func that(thing:Things) -&gt; () {<br>        print(thing)<br>}<br>that(.DesktopThing) // &#39;DesktopThing&#39; is unavailable. Not available on tvOS.<br></p><p>A limited availability attribute does have some merit, perhaps using a different keyword (so you know you are choosing it), for example:<br></p><p>    	@restricted (OSX 10.11, *, message=&quot;Only available on OS X.&quot;)<br>    	case DesktopThing = &quot;com.example.desktop&quot;<br>	<br>	func that(thing:Things) -&gt; () {<br>        	print(thing)<br>	}<br>	that(.DesktopThing) // &#39;DesktopThing&#39; is unavailable. Only available on OS X.<br></p><p><br>...but this is outside the scope of the original topic.<br></p><p>Stuart<br></p><p><br>&gt; On 26 May 2016, at 11:23, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; This was deliberate, and came from the pain of bringing up tvOS (and watchOS). Clang actually had a hack to treat “available on iOS” as “available on tvOS” for a while because of this. When you port something to a new platform, presumably everything that’s been introduced so far should be available from the start.<br>&gt; <br>&gt; If we introduced a limited availability attribute, I think we’d want to make it more verbose than the normal one, so that you know you’re choosing it.<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; <br>&gt;&gt; On May 25, 2016, at 20:18, Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Was this an intentional choice, or is it just a temporary limitation? Would a proposal to allow something like &quot;@available(OS X 10.11)&quot; be welcomed?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Wed, May 25, 2016 at 8:17 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; The “*” in @available means “all other platforms”. If you want to mark something unavailable on a particular platform, you’ll have to use the long form of the @available attribute. There’s currently no way to mark something “only available on these platforms”.<br>&gt;&gt; <br>&gt;&gt; Jordan<br>&gt;&gt; <br>&gt;&gt;&gt; On May 25, 2016, at 18:48, Stuart Breckenridge via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Presently, you can mark enum cases as @available but it has no impact. Take the following example:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; enum Things:String {<br>&gt;&gt;&gt; 	@available (iOS 9.3, *) case MobileThing = &quot;com.example.mobilething&quot;<br>&gt;&gt;&gt; 	@available (OSX 10.11, *) case DesktopThing = &quot;com.example.desktopthing&quot;<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Despite the above compiling, the following code will run iOS with no warnings:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func takesA(thing:Things) {<br>&gt;&gt;&gt; 	print(thing)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; takesA(.DesktopThing)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Are there enough compelling use-cases for @available on enum cases to be considered? At the very least, if @available doesn&#39;t do anything on cases, it shouldn&#39;t be permitted.<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160526/ead30b24/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: smime.p7s<br>Type: application/pkcs7-signature<br>Size: 3138 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160526/ead30b24/attachment.p7s&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>Discussion: Enforce usage of @available on enum cases</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>May 26, 2016 at 07:00:00am</p></header><div class="content"><p>Personally, I&#39;d support splitting the @available attribute into:<br></p><p>@available - indicating that the identifier is available since some version.<br>@unavailable - indicating that it&#39;s unavailable for certain.<br>@deprecated - indicating deprecation.<br></p><p>+<br></p><p>@restricted as Stuart suggests, which seems very useful.<br></p><p>@available (iOS, unavailable, message=&quot;Not available on iOS.&quot;)<br></p><p>vs.<br></p><p>@unavailable (iOS, message=&quot;Not available on iOS.&quot;)<br></p><p><br>IMHO removes some unnecessary boilerplate.<br></p><p>Charlie<br></p><p>&gt; On May 26, 2016, at 6:36 AM, Stuart Breckenridge via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Taking the long form approach:<br>&gt; <br>&gt; enum Things:String {<br>&gt;     @available (iOS 9.0, tvOS 9.0, watchOS 2.0, *)<br>&gt;     @available (OSX, unavailable, message=&quot;Not available on OS X.&quot;)<br>&gt;     case MobileThing = &quot;com.example.mobile&quot;<br>&gt;     <br>&gt;     @available (iOS, unavailable, message=&quot;Not available on iOS.&quot;)<br>&gt;     @available (tvOS, unavailable, message=&quot;Not available on tvOS.&quot;)<br>&gt;     @available (watchOS, unavailable, message=&quot;Not available on watchOS.&quot;)<br>&gt;     @available (OSX 10.11, *)<br>&gt;     case DesktopThing = &quot;com.example.desktop&quot;<br>&gt; }<br>&gt; <br>&gt; This yields the expected result in a tvOS app:<br>&gt; <br>&gt; func that(thing:Things) -&gt; () {<br>&gt;         print(thing)<br>&gt; }<br>&gt; that(.DesktopThing) // &#39;DesktopThing&#39; is unavailable. Not available on tvOS.<br>&gt; <br>&gt; A limited availability attribute does have some merit, perhaps using a different keyword (so you know you are choosing it), for example:<br>&gt; <br>&gt;     	@restricted (OSX 10.11, *, message=&quot;Only available on OS X.&quot;)<br>&gt;     	case DesktopThing = &quot;com.example.desktop&quot;<br>&gt; 	<br>&gt; 	func that(thing:Things) -&gt; () {<br>&gt;         	print(thing)<br>&gt; 	}<br>&gt; 	that(.DesktopThing) // &#39;DesktopThing&#39; is unavailable. Only available on OS X.<br>&gt; <br>&gt; <br>&gt; ...but this is outside the scope of the original topic.<br>&gt; <br>&gt; Stuart<br>&gt; <br>&gt; <br>&gt;&gt; On 26 May 2016, at 11:23, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; This was deliberate, and came from the pain of bringing up tvOS (and watchOS). Clang actually had a hack to treat “available on iOS” as “available on tvOS” for a while because of this. When you port something to a new platform, presumably everything that’s been introduced so far should be available from the start.<br>&gt;&gt; <br>&gt;&gt; If we introduced a limited availability attribute, I think we’d want to make it more verbose than the normal one, so that you know you’re choosing it.<br>&gt;&gt; <br>&gt;&gt; Jordan<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On May 25, 2016, at 20:18, Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Was this an intentional choice, or is it just a temporary limitation? Would a proposal to allow something like &quot;@available(OS X 10.11)&quot; be welcomed?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Wed, May 25, 2016 at 8:17 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; The “*” in @available means “all other platforms”. If you want to mark something unavailable on a particular platform, you’ll have to use the long form of the @available attribute. There’s currently no way to mark something “only available on these platforms”.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jordan<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 25, 2016, at 18:48, Stuart Breckenridge via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Presently, you can mark enum cases as @available but it has no impact. Take the following example:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; enum Things:String {<br>&gt;&gt;&gt;&gt; 	@available (iOS 9.3, *) case MobileThing = &quot;com.example.mobilething&quot;<br>&gt;&gt;&gt;&gt; 	@available (OSX 10.11, *) case DesktopThing = &quot;com.example.desktopthing&quot;<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Despite the above compiling, the following code will run iOS with no warnings:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func takesA(thing:Things) {<br>&gt;&gt;&gt;&gt; 	print(thing)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; takesA(.DesktopThing)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Are there enough compelling use-cases for @available on enum cases to be considered? At the very least, if @available doesn&#39;t do anything on cases, it shouldn&#39;t be permitted.<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160526/d85d0c42/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6b4cb21e7820c14a4044e4706757da83?s=50"></div><header><strong>Discussion: Enforce usage of @available on enum cases</strong> from <string>Stuart Breckenridge</string> &lt;stuart.breckenridge at icloud.com&gt;<p>May 26, 2016 at 03:00:00pm</p></header><div class="content"><p>I&#39;ll put together a draft in a new thread. <br></p><p>Sent from my iPhone<br></p><p>&gt; On 26 May 2016, at 13:37, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt; <br>&gt; Personally, I&#39;d support splitting the @available attribute into:<br>&gt; <br>&gt; @available - indicating that the identifier is available since some version.<br>&gt; @unavailable - indicating that it&#39;s unavailable for certain.<br>&gt; @deprecated - indicating deprecation.<br>&gt; <br>&gt; +<br>&gt; <br>&gt; @restricted as Stuart suggests, which seems very useful.<br>&gt; <br>&gt; @available (iOS, unavailable, message=&quot;Not available on iOS.&quot;)<br>&gt; <br>&gt; vs.<br>&gt; <br>&gt; @unavailable (iOS, message=&quot;Not available on iOS.&quot;)<br>&gt; <br>&gt; <br>&gt; IMHO removes some unnecessary boilerplate.<br>&gt; <br>&gt; Charlie<br>&gt; <br>&gt;&gt; On May 26, 2016, at 6:36 AM, Stuart Breckenridge via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Taking the long form approach:<br>&gt;&gt; <br>&gt;&gt; enum Things:String {<br>&gt;&gt;     @available (iOS 9.0, tvOS 9.0, watchOS 2.0, *)<br>&gt;&gt;     @available (OSX, unavailable, message=&quot;Not available on OS X.&quot;)<br>&gt;&gt;     case MobileThing = &quot;com.example.mobile&quot;<br>&gt;&gt;     <br>&gt;&gt;     @available (iOS, unavailable, message=&quot;Not available on iOS.&quot;)<br>&gt;&gt;     @available (tvOS, unavailable, message=&quot;Not available on tvOS.&quot;)<br>&gt;&gt;     @available (watchOS, unavailable, message=&quot;Not available on watchOS.&quot;)<br>&gt;&gt;     @available (OSX 10.11, *)<br>&gt;&gt;     case DesktopThing = &quot;com.example.desktop&quot;<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; This yields the expected result in a tvOS app:<br>&gt;&gt; <br>&gt;&gt; func that(thing:Things) -&gt; () {<br>&gt;&gt;         print(thing)<br>&gt;&gt; }<br>&gt;&gt; that(.DesktopThing) // &#39;DesktopThing&#39; is unavailable. Not available on tvOS.<br>&gt;&gt; <br>&gt;&gt; A limited availability attribute does have some merit, perhaps using a different keyword (so you know you are choosing it), for example:<br>&gt;&gt; <br>&gt;&gt;     	@restricted (OSX 10.11, *, message=&quot;Only available on OS X.&quot;)<br>&gt;&gt;     	case DesktopThing = &quot;com.example.desktop&quot;<br>&gt;&gt; 	<br>&gt;&gt; 	func that(thing:Things) -&gt; () {<br>&gt;&gt;         	print(thing)<br>&gt;&gt; 	}<br>&gt;&gt; 	that(.DesktopThing) // &#39;DesktopThing&#39; is unavailable. Only available on OS X.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; ...but this is outside the scope of the original topic.<br>&gt;&gt; <br>&gt;&gt; Stuart<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 26 May 2016, at 11:23, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This was deliberate, and came from the pain of bringing up tvOS (and watchOS). Clang actually had a hack to treat “available on iOS” as “available on tvOS” for a while because of this. When you port something to a new platform, presumably everything that’s been introduced so far should be available from the start.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If we introduced a limited availability attribute, I think we’d want to make it more verbose than the normal one, so that you know you’re choosing it.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jordan<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 25, 2016, at 20:18, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Was this an intentional choice, or is it just a temporary limitation? Would a proposal to allow something like &quot;@available(OS X 10.11)&quot; be welcomed?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Wed, May 25, 2016 at 8:17 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; The “*” in @available means “all other platforms”. If you want to mark something unavailable on a particular platform, you’ll have to use the long form of the @available attribute. There’s currently no way to mark something “only available on these platforms”.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Jordan<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On May 25, 2016, at 18:48, Stuart Breckenridge via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Presently, you can mark enum cases as @available but it has no impact. Take the following example:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; enum Things:String {<br>&gt;&gt;&gt;&gt;&gt;&gt; 	@available (iOS 9.3, *) case MobileThing = &quot;com.example.mobilething&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt; 	@available (OSX 10.11, *) case DesktopThing = &quot;com.example.desktopthing&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Despite the above compiling, the following code will run iOS with no warnings:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; func takesA(thing:Things) {<br>&gt;&gt;&gt;&gt;&gt;&gt; 	print(thing)<br>&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; takesA(.DesktopThing)<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Are there enough compelling use-cases for @available on enum cases to be considered? At the very least, if @available doesn&#39;t do anything on cases, it shouldn&#39;t be permitted.<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160526/cca48a7d/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: smime.p7s<br>Type: application/pkcs7-signature<br>Size: 4005 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160526/cca48a7d/attachment.p7s&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
