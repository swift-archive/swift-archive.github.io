<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5f8978dbb959b069613e2d027420615f?s=50"></div><header><strong>[Pitch] deprecating ManagedBufferPointer</strong> from <string>Erik Eckstein</string> &lt;eeckstein at apple.com&gt;<p>October 10, 2016 at 03:00:00pm</p></header><div class="content"><p>The purpose of ManagedBufferPointer is to create a buffer with a custom class-metadata to be able to implement a custom deinit (e.g. to destroy the tail allocated elements).<br>It was used in Array (before I replaced it with the new tail-allocated-array-built-ins). But now it’s not used anymore in the standard library.<br></p><p>As a replacement for ManagedBufferPointer one can just derive a class from ManagedBuffer and implement the deinit in the derived class.<br></p><p>final class MyBuffer : ManagedBuffer&lt;MyHeader, MyElements&gt; {<br>  deinit {<br>    // do whatever needs to be done<br>  }<br>}<br></p><p>// creating MyBuffer:<br>let b = MyBuffer.create(minimumCapacity: 27, makingHeaderWith: { myb in return MyHeader(...) })<br></p><p>IMO ManagedBuffer is much cleaner than ManagedBufferPointer (it doesn’t need this custom bufferClass to be passed to the constructor). Also ManagedBufferPointer doesn’t use SIL tail-allocated arrays internally. Although this is not something visible to the programmer, it makes life easier for the compiler.<br></p><p>So I suggest that we deprecate ManagedBufferPointer.<br></p><p>Erik<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161010/a34336e9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>[Pitch] deprecating ManagedBufferPointer</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>October 11, 2016 at 03:00:00pm</p></header><div class="content"><p>+1.  I haven’t found use for it, and I don’t think there is one outside of stdlib.<br></p><p>~Robert Widmann<br></p><p>&gt; On Oct 10, 2016, at 6:12 PM, Erik Eckstein via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The purpose of ManagedBufferPointer is to create a buffer with a custom class-metadata to be able to implement a custom deinit (e.g. to destroy the tail allocated elements).<br>&gt; It was used in Array (before I replaced it with the new tail-allocated-array-built-ins). But now it’s not used anymore in the standard library.<br>&gt; <br>&gt; As a replacement for ManagedBufferPointer one can just derive a class from ManagedBuffer and implement the deinit in the derived class.<br>&gt; <br>&gt; final class MyBuffer : ManagedBuffer&lt;MyHeader, MyElements&gt; {<br>&gt;   deinit {<br>&gt;     // do whatever needs to be done<br>&gt;   }<br>&gt; }<br>&gt; <br>&gt; // creating MyBuffer:<br>&gt; let b = MyBuffer.create(minimumCapacity: 27, makingHeaderWith: { myb in return MyHeader(...) })<br>&gt; <br>&gt; IMO ManagedBuffer is much cleaner than ManagedBufferPointer (it doesn’t need this custom bufferClass to be passed to the constructor). Also ManagedBufferPointer doesn’t use SIL tail-allocated arrays internally. Although this is not something visible to the programmer, it makes life easier for the compiler.<br>&gt; <br>&gt; So I suggest that we deprecate ManagedBufferPointer.<br>&gt; <br>&gt; Erik<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161011/ead89e3c/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0735d3bf1d76c0385258ac7a2a22d6fe?s=50"></div><header><strong>[Pitch] deprecating ManagedBufferPointer</strong> from <string>Károly Lőrentey</string> &lt;karoly at lorentey.hu&gt;<p>October 11, 2016 at 11:00:00pm</p></header><div class="content"><p>+1<br></p><p>ManagedBuffer has been really useful a couple of times, but I never found a use for ManagedBufferPointer. I can’t even say I’m entirely sure what need it was originally designed to fulfill.<br></p><p>&gt; On 2016-10-11, at 00:12, Erik Eckstein via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The purpose of ManagedBufferPointer is to create a buffer with a custom class-metadata to be able to implement a custom deinit (e.g. to destroy the tail allocated elements).<br>&gt; It was used in Array (before I replaced it with the new tail-allocated-array-built-ins). But now it’s not used anymore in the standard library.<br>&gt; <br>&gt; As a replacement for ManagedBufferPointer one can just derive a class from ManagedBuffer and implement the deinit in the derived class.<br>&gt; <br>&gt; final class MyBuffer : ManagedBuffer&lt;MyHeader, MyElements&gt; {<br>&gt;   deinit {<br>&gt;     // do whatever needs to be done<br>&gt;   }<br>&gt; }<br>&gt; <br>&gt; // creating MyBuffer:<br>&gt; let b = MyBuffer.create(minimumCapacity: 27, makingHeaderWith: { myb in return MyHeader(...) })<br>&gt; <br>&gt; IMO ManagedBuffer is much cleaner than ManagedBufferPointer (it doesn’t need this custom bufferClass to be passed to the constructor). Also ManagedBufferPointer doesn’t use SIL tail-allocated arrays internally. Although this is not something visible to the programmer, it makes life easier for the compiler.<br>&gt; <br>&gt; So I suggest that we deprecate ManagedBufferPointer.<br>&gt; <br>&gt; Erik<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161011/9964a7ef/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
