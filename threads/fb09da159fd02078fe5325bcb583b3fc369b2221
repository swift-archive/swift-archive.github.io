<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/592dc9334a2782e2e768be22dcbd33f9?s=50"></div><header><strong>[stdlib] Array.description calls debugDescription on its contents</strong> from <string>Wojciech Czekalski</string> &lt;wczekalski at me.com&gt;<p>December 11, 2015 at 10:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>while I was working on this &lt;https://github.com/apple/swift/pull/348&gt; PR I encountered unexpected behavior from Array.description. It iterates over its items and calls debugDescription on them. I found it a bit unexpected thus my question here. Is it desired behavior? I would expect description and debugDescription call respective methods on the contents.<br></p><p>(I asked the same question in the PR but thought it’s general, so might be worth posting here)<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151211/fb092221/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>[stdlib] Array.description calls debugDescription on its contents</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December 11, 2015 at 02:00:00pm</p></header><div class="content"><p>On Fri, Dec 11, 2015 at 1:38 PM, Wojciech Czekalski via swift-dev &lt;<br>swift-dev at swift.org&gt; wrote:<br></p><p>&gt; Hi,<br>&gt;<br>&gt; while I was working on this &lt;https://github.com/apple/swift/pull/348&gt; PR<br>&gt; I encountered unexpected behavior from Array.description. It iterates<br>&gt; over its items and calls debugDescription on them. I found it a bit<br>&gt; unexpected thus my question here. Is it desired behavior? I would expect<br>&gt; description and debugDescription call respective methods on the contents.<br>&gt;<br></p><p>Array&#39;s description shouldn&#39;t be presented to the user in raw form, ever,<br>so the use case here is debugging.  Thus, it makes sense to present the<br>debug representation of the elements in both cases.  Consider an array of<br>strings:<br></p><p>var myArray = [ &quot;&quot;, &quot;&quot;, &quot;&quot; ]<br></p><p>If we used the regular description, then String(myArray) would be &quot;[ , ,<br>]&quot;, which looks like a library bug.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151211/fc4e6123/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[stdlib] Array.description calls debugDescription on its contents</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>December 11, 2015 at 03:00:00pm</p></header><div class="content"><p>&gt;&gt; while I was working on this PR I encountered unexpected behavior from Array.description. It iterates over its items and calls debugDescription on them. I found it a bit unexpected thus my question here. Is it desired behavior? I would expect description and debugDescription call respective methods on the contents.<br>&gt; <br>&gt; Array&#39;s description shouldn&#39;t be presented to the user in raw form, ever, so the use case here is debugging.  Thus, it makes sense to present the debug representation of the elements in both cases.<br></p><p>I keep noticing threads where people are confused about this kind of thing—I’ve seen it with Array, Optional, and several others. I wonder if these kinds of types simply *shouldn’t* offer .description properties, as a way of saying “no user-visible conversion inside”.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>[stdlib] Array.description calls debugDescription on its contents</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December 11, 2015 at 05:00:00pm</p></header><div class="content"><p>On Fri, Dec 11, 2015 at 3:02 PM, Brent Royal-Gordon<br>&lt;brent at architechies.com&gt; wrote:<br>&gt;&gt;&gt; while I was working on this PR I encountered unexpected behavior from Array.description. It iterates over its items and calls debugDescription on them. I found it a bit unexpected thus my question here. Is it desired behavior? I would expect description and debugDescription call respective methods on the contents.<br>&gt;&gt;<br>&gt;&gt; Array&#39;s description shouldn&#39;t be presented to the user in raw form, ever, so the use case here is debugging.  Thus, it makes sense to present the debug representation of the elements in both cases.<br>&gt;<br>&gt; I keep noticing threads where people are confused about this kind of thing—I’ve seen it with Array, Optional, and several others. I wonder if these kinds of types simply *shouldn’t* offer .description properties, as a way of saying “no user-visible conversion inside”.<br></p><p>Nobody should be using &#39;.description&#39; or &#39;.debugDescription&#39; directly<br>in any case.  One should be using String(x) or String(reflecting: x),<br>because that works with any instances, including those cases when the<br>runtime will synthesize the string representation for you.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[stdlib] Array.description calls debugDescription on its contents</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>December 12, 2015 at 11:00:00am</p></header><div class="content"><p>&gt; Nobody should be using &#39;.description&#39; or &#39;.debugDescription&#39; directly<br>&gt; in any case.  One should be using String(x) or String(reflecting: x),<br>&gt; because that works with any instances, including those cases when the<br>&gt; runtime will synthesize the string representation for you.<br></p><p>It would similarly be nice if String.init(_: Any) were instead String.init(_: CustomStringConvertible), and passing something to it that wasn’t convertible was an error. Similarly for string interpolation (although particular types would need a way to specify additional interpolatable types they supported).<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[stdlib] Array.description calls debugDescription on its contents</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>December 12, 2015 at 10:00:00am</p></header><div class="content"><p>Sent from my moss-covered three-handled family gradunza<br></p><p>&gt; On Dec 12, 2015, at 9:09 AM, Brent Royal-Gordon via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; It would similarly be nice if String.init(_: Any) were instead String.init(_: CustomStringConvertible), and passing something to it that wasn’t convertible was an error.<br></p><p>Why would that be nice?  It is an explicit goal that every type can be represented as a string, whatever its conformance a, FWIW<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/592dc9334a2782e2e768be22dcbd33f9?s=50"></div><header><strong>[stdlib] Array.description calls debugDescription on its contents</strong> from <string>Wojciech Czekalski</string> &lt;wczekalski at me.com&gt;<p>December 13, 2015 at 09:00:00pm</p></header><div class="content"><p>I agree with Brent that offering description on Arrays where it &quot;shouldn&#39;t be presented to the user in raw form, ever, so the use case here is debugging”  is misleading. Is there any specific reason for them to offer it? Also, there is a slightly difference in representation of description and debugDescription for ContiguousArray and ArraySlice. If the motivation behind it is unclear it might be worth to remove either the difference in implementation or the conformance to CustomStringConvertible altogether.<br></p><p>-Wojtek<br></p><p>&gt; Wiadomość napisana przez Dave Abrahams via swift-dev &lt;swift-dev at swift.org&gt; w dniu 12.12.2015, o godz. 21:41:<br>&gt; <br>&gt; <br>&gt; <br>&gt; Sent from my moss-covered three-handled family gradunza<br>&gt; <br>&gt;&gt; On Dec 12, 2015, at 9:09 AM, Brent Royal-Gordon via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; It would similarly be nice if String.init(_: Any) were instead String.init(_: CustomStringConvertible), and passing something to it that wasn’t convertible was an error.<br>&gt; <br>&gt; Why would that be nice?  It is an explicit goal that every type can be represented as a string, whatever its conformance a, FWIW<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151213/39a3beef/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[stdlib] Array.description calls debugDescription on its contents</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>December 13, 2015 at 11:00:00pm</p></header><div class="content"><p>&gt; On Dec 13, 2015, at 12:43 PM, Wojciech Czekalski &lt;wczekalski at me.com&gt; wrote:<br>&gt; <br>&gt; I agree with Brent that offering description on Arrays where it &quot;shouldn&#39;t be presented to the user in raw form, ever, so the use case here is debugging”  is misleading.<br></p><p>I think it&#39;s a bit too absolute—there are a few applications where users could interact with the raw form of an array but these are mostly programming tools ;-).  I don&#39;t, however see how Dmitri&#39;s statement is in any way misleading.<br></p><p>&gt; Is there any specific reason for them to offer it?<br></p><p>Who is &quot;them&quot; and what is &quot;it?&quot;<br></p><p>&gt; Also, there is a slightly difference in representation of description and debugDescription for ContiguousArray and ArraySlice. If the motivation behind it is unclear it might be worth to remove either the difference in implementation or the conformance to CustomStringConvertible altogether.<br></p><p>Removing the conformance would make their printed representation useless and/or needlessly verbose depending on how you did it (try it yourself).<br></p><p>Dmitri&#39;s example is the driving use-case: when you print a string you want the literal contents, but when you print an array of strings you want the strings quoted, and to get the quoted representation of the elements when they are strings you need String(reflecting: arrayElement), not String(arrayElement).<br></p><p>&gt; <br>&gt; -Wojtek<br>&gt; <br>&gt;&gt; Wiadomość napisana przez Dave Abrahams via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; w dniu 12.12.2015, o godz. 21:41:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Sent from my moss-covered three-handled family gradunza<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 12, 2015, at 9:09 AM, Brent Royal-Gordon via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It would similarly be nice if String.init(_: Any) were instead String.init(_: CustomStringConvertible), and passing something to it that wasn’t convertible was an error.<br>&gt;&gt; <br>&gt;&gt; Why would that be nice?  It is an explicit goal that every type can be represented as a string, whatever its conformance a, FWIW<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-dev mailing list<br>&gt;&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; <br></p><p>-Dave<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151213/1a2dc041/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[stdlib] Array.description calls debugDescription on its contents</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>December 13, 2015 at 11:00:00pm</p></header><div class="content"><p>&gt; On Dec 13, 2015, at 11:08 PM, Dave Abrahams via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Dec 13, 2015, at 12:43 PM, Wojciech Czekalski &lt;wczekalski at me.com &lt;mailto:wczekalski at me.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I agree with Brent that offering description on Arrays where it &quot;shouldn&#39;t be presented to the user in raw form, ever, so the use case here is debugging”  is misleading. <br>&gt; <br>&gt; I think it&#39;s a bit too absolute—there are a few applications where users could interact with the raw form of an array but these are mostly programming tools ;-).  I don&#39;t, however see how Dmitri&#39;s statement is in any way misleading.<br>&gt; <br>&gt;&gt; Is there any specific reason for them to offer it? <br>&gt; <br>&gt; Who is &quot;them&quot; and what is &quot;it?&quot;<br></p><p>Sorry, I didn&#39;t read carefully enough: I think you&#39;re saying that it&#39;s misleading for Arrays to offer a description property.<br></p><p>I don&#39;t think so, personally, but I understand why you&#39;d say so.  If the problem is that you don&#39;t understand why ContiguousArray and ArraySlice have slightly different behavior for debugDescription, it&#39;s because an unadorned array literal is already an Array, but ContiguousArray and ArraySlice need some help to be coerced, and ideally, a debugDescription should be interpreted by the compiler as an identical copy of the receiver.<br></p><p>&gt; <br>&gt;&gt; Also, there is a slightly difference in representation of description and debugDescription for ContiguousArray and ArraySlice. If the motivation behind it is unclear it might be worth to remove either the difference in implementation or the conformance to CustomStringConvertible altogether.<br>&gt; <br>&gt; Removing the conformance would make their printed representation useless and/or needlessly verbose depending on how you did it (try it yourself).<br>&gt; <br>&gt; Dmitri&#39;s example is the driving use-case: when you print a string you want the literal contents, but when you print an array of strings you want the strings quoted, and to get the quoted representation of the elements when they are strings you need String(reflecting: arrayElement), not String(arrayElement).<br>&gt; <br>&gt;&gt; <br>&gt;&gt; -Wojtek<br>&gt;&gt; <br>&gt;&gt;&gt; Wiadomość napisana przez Dave Abrahams via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; w dniu 12.12.2015, o godz. 21:41:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sent from my moss-covered three-handled family gradunza<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 12, 2015, at 9:09 AM, Brent Royal-Gordon via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It would similarly be nice if String.init(_: Any) were instead String.init(_: CustomStringConvertible), and passing something to it that wasn’t convertible was an error.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Why would that be nice?  It is an explicit goal that every type can be represented as a string, whatever its conformance a, FWIW<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br>&gt;&gt; <br>&gt; <br>&gt; -Dave<br>&gt; <br>&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br>-Dave<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151213/ce6ff231/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
