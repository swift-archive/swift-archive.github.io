<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[SHORT Review] SE-0132: Rationalizing Sequence end-operation names</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July 26, 2016 at 12:00:00pm</p></header><div class="content"><p>on Mon Jul 25 2016, Jacob Bandes-Storch &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0132-sequence-end-ops.md<br>&gt;&gt;<br>&gt;&gt;         * What is your evaluation of the proposal?<br>&gt;&gt;<br>&gt;<br>&gt; +1 on drop{First,Last}() → removing{First,Last}().<br>&gt; +1 on drop{First,Last}(_:) → removing{Prefix,Suffix}(_:).<br>&gt; +1 on drop(while:) → removingPrefix(while:).<br>&gt; +1 on starts(with:[by:]) → hasPrefix(_:[by:]).<br>&gt; +1 on index({of:,where:}) → firstIndex({of:,where:}).<br>&gt; +1 on prefix and postfix versions of ..&lt; and the prefix version of the ...<br>&gt; operator. For a while I thought I might prefer labeled subscripts, but<br>&gt; after writing them out I agree the operators are better.<br>&gt;<br>&gt; The rest is a stream of consciousness:.<br>&gt;<br>&gt; I don&#39;t think postfix ... is necessary. When does one ever combine a<br>&gt; ClosedRange with endIndex?<br></p><p>+1<br></p><p>There is a use case for it, but IMO it&#39;s a corner that doesn&#39;t need<br>terse syntax.<br></p><p>&gt; I don&#39;t agree that &quot;drop&quot; sounds particularly scary, <br></p><p>It&#39;s scary because it&#39;s active.  “Dropping” has other issues, as you<br>note below.<br></p><p>&gt; but I&#39;m fine with &quot;removing&quot; as an alternative to<br>&gt; &quot;drop&quot;/&quot;dropping&quot;. Scatologists will be disappointed, I&#39;m sure.<br>&gt;<br>&gt; I&#39;d forgotten about prefix(while:), which apparently isn&#39;t implemented yet.<br>&gt; I think I&#39;d prefer if this were named prefix(where:) instead.<br></p><p>+1<br></p><p>&gt; I&#39;m struggling a little with the distinction between length-based and<br>&gt; index-based methods/subscripts. Are &quot;prefix(_ length: Int)&quot; and<br>&gt; &quot;prefix(upTo end: Index)&quot; really different enough that one of them should<br>&gt; be a subscript and the other a method? <br></p><p>&gt; The same question applies to prefix(through:) and suffix(from:). I<br>&gt; kinda wish these could all be methods or all subscripts.<br></p><p>Me too.  That was the motivation for my suggestion of x[..&lt;$+n], meaning<br>x.prefix(n).<br></p><p>However, that proposal is a failure (I just wrote it wrong above again<br>before correcting myself)!<br></p><p>The main point of changing prefix(to:) and suffix(from:) into x[..&lt;i]<br>and x[i..&lt;] is not to make them subscripts, but to re-use the cognitive<br>power users have already invested in range expressions.  Writing them as<br>something like x.slice(..&lt;i) and x.slice(i..&lt;), would accomplish that,<br>too.<br></p><p>&gt; I have to say I don&#39;t fully understand the need for (or benefits of)<br>&gt; RangeExpression and the relative(to:) API (perhaps because I don&#39;t have<br>&gt; much experience using the most recent collection/index/range APIs). <br></p><p>It collapses a whole raft of overloads into two (except for subscript,<br>because we don&#39;t have generic subscript yet, which is a temporary<br>limitation).  In general if you want to implement a collection method<br>that takes a range today, you really should implement four overloads.<br>With the introduction of the incomplete ranges it&#39;s six or eight.<br></p><p>&gt; Since the conforming type&#39;s Bound is already required to be the<br>&gt; collection&#39;s Index, it seems pointless to have an API to access this<br>&gt; as a Range...there should just be Collection subscript methods which<br>&gt; accept the conforming types. I suppose it&#39;s nice to get all these for<br>&gt; free by implementing just one subscript function (excepting the<br>&gt; current lack of generic subscripts)...but is it even possible to<br>&gt; express every RangeExpression as a Range? <br></p><p>For the purposes of creating a range of valid indices in a collection, yes.<br></p><p>&gt; What about a ClosedRange&lt;Int&gt; whose upperBound is Int.max? (Wasn&#39;t<br>&gt; that the whole point of introducing ClosedRange in the first place?)<br>&gt;<br>&gt; Random question: why do we have both removeFirst and popFirst?  <br></p><p>We don&#39;t.<br></p><p>&gt; ...on further reading I see you covered this in Future Directions. I&#39;d<br>&gt; be happy to discuss merging these. I wonder if it&#39;s important to do<br>&gt; for Swift 3 (although we&#39;re basically out of time)?<br>&gt;<br>&gt; The name IncompleteRange makes sense, but could be a little misleading if<br>&gt; ..&lt;(Bound?,Bound?) is called with two non-nil operands: based on my<br>&gt; reading, it sounds like the returned IncompleteRange wouldn&#39;t actually<br>&gt; change when you call completed(by:) (since it&#39;s not actually incomplete).<br>&gt; However, I can&#39;t come up with any better naming suggestions.<br>&gt;<br>&gt;&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt;&gt; change to Swift?<br>&gt;&gt;<br>&gt;<br>&gt; Yes.<br>&gt;<br>&gt;&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;<br>&gt;<br>&gt; Mostly. Not sure there&#39;s enough consistency between<br>&gt; subsequence-length-based and index-based APIs, namely that prefix(upTo:)<br>&gt; becomes a subscript but prefix(_:) doesn&#39;t.<br>&gt;<br>&gt;         * If you have used other languages or libraries with a similar<br>&gt;&gt; feature, how do you feel that this proposal compares to those?<br>&gt;&gt;<br>&gt;<br>&gt; I&#39;ve used Python and Mathematica, which both have functionality similar to<br>&gt; &quot;incomplete range subscripts&quot;:<br>&gt;<br>&gt;     Python: http://stackoverflow.com/a/509295/23649<br>&gt;     Mathematica: https://reference.wolfram.com/language/ref/Span.html<br>&gt;<br>&gt; Based on my experience there, this is a good first (second?) step for Swift<br>&gt; to take.<br>&gt;<br>&gt; Both Mathematica and Python support a *stride* as well as start/end indices<br>&gt; in their subscripting syntax. It would be nice for Swift to support<br>&gt; something like this, but some versions of that would require custom ternary<br>&gt; operators (or weird intermediate types to fake a custom ternary operator).<br>&gt; We might also consider labelled multi-argument subscripts like<br>&gt; &quot;collection[start..&lt;end, by: 2]&quot;.<br></p><p>There&#39;s a point at which we should stop trying to overload subscript<br>syntax and just use stride(...).<br></p><p>&gt; They also both support *negative indices *which count from the end. <br></p><p>That&#39;s another thing I was getting at with x[..&lt;$-n]<br>(a.k.a. x.removingSuffix(ofMaxLength: n)).  But again, #FAIL.<br></p><p>&gt; Swift&#39;s suffix-based APIs are limited; I&#39;d like to see an in-depth<br>&gt; consideration of this down the line. Now is probably not the time,<br>&gt; unless anyone can think of reasons it would affect the syntax/naming<br>&gt; we choose in this proposal.<br>&gt;<br>&gt; (It&#39;s also interesting to note that Mathematica&#39;s subscripts (Part<br>&gt; &lt;https://reference.wolfram.com/language/ref/Part.html&gt;) support<br>&gt; multi-dimensional arrays:  matrix[[3;;4, -5;;]] would be the submatrix<br>&gt; containing the last 5 entries in rows 3 and 4 of the original matrix.)<br>&gt;<br>&gt;&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt;&gt; reading, or an in-depth study?<br>&gt;&gt;<br>&gt;<br>&gt; A mostly-thorough reading of the proposal.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p>-- <br>Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
