<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0023 API Design Guidelines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 23, 2016 at 10:00:00am</p></header><div class="content"><p>on Fri Jan 22 2016, Erica Sadun &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Jan 22, 2016, at 4:24 PM, Dave Abrahams via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Fri Jan 22 2016, Erica Sadun<br>&gt;<br>&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________ swift-evolution mailing list swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; <br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Current:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  * Use imperative verb phrases for mutating methods: x.reverse(), x.sort(), x.tweak()<br>&gt;&gt;&gt;  * Use noun phrases for non-mutating methods: x.distanceTo(...), idx.successor()<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Proposed:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  * Use verb phrases to declare procedural methods, whether or not they mutate an instance or just produce side<br>&gt;&gt;&gt;    effects: x.reverse(), x.sort(), x.tweak(), x.perform(), x.dispatch(), x.send()<br>&gt;&gt;&gt;  * Use noun phrases to describe values returned by a functional method: x.distanceTo(y), index.successor() (This<br>&gt;&gt;&gt;    admittedly leaves further issues around other functional methods, for example, seq.separatedBySequence(seq) and<br>&gt;&gt;&gt;     int.strideTo(other: Self, step:Self.Stride), etc. )<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I suggest that mutating methods are just a procedural method (side effect, no return value) vs functional.<br>&gt;&gt; <br>&gt;&gt; Hi Erica,<br>&gt;&gt; <br>&gt;&gt; When you propose a change, could you please explain why you think your<br>&gt;&gt; change is an improvement?  <br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; Dave<br>&gt;<br>&gt; I believe the current distinction is misguided in focusing on mutating and non-mutating implementations when the<br>&gt; differentiation can be viewed from a more general level. There are two ways to distinguish these:<br>&gt;<br>&gt; * Does this method or function have side effects (which is what the current API approach intends to address); and<br>&gt; * Is this method or function inherently functional or procedural in<br>&gt; nature, returning a value or not.<br></p><p>Okay, I understand what you&#39;re driving at, but these don&#39;t seem to be<br>separate distinctions.  Can you show me a method that&#39;s inherently<br>functional but has side effects, or inherently procedural but has none?<br></p><p>&gt; For example, contrast sort() and sortInPlace().  Even with the current<br>&gt; approach they lack a natural clarity. You could easily swap<br>&gt; them without anything &quot;breaking&quot; in understanding because your<br>&gt; solution is conventional, not based on any underlying principle.<br></p><p>There&#39;s certainly an underlying principle there: that methods that<br>mutate the receiver, and have a nonmutating counterpart that instead<br>returns a modified *copy* of the receiver, are named with &quot;InPlace&quot;<br>suffix.  It&#39;s not as general as what you&#39;re suggesting, but it&#39;s<br>something.<br></p><p>How could one could ever call a nonmutating method that returns a new<br>collection &quot;sortInPlace,&quot; without causing confusion?  How would people<br>interpret &quot;InPlace&quot; as conveying meaningful information?<br></p><p>&gt; With noun/verb naming, the function name reflects the functional/procedural underlying differentiation. <br>&gt; * A function produces something: f(x) -&gt; y. <br>&gt; * A procedure does something: g(x) -&gt; Void<br>&gt;<br>&gt; Under my proposed change, the procedural variation would be sort, sortInPlace, etc. Optional adverbs and near-adverbs<br>&gt; could distinguish similar versions sortQuickly, sortBalanced, etc.<br>&gt;<br>&gt; The functional would be sortedVersion or with a slight rule tweak that<br>&gt; infers the subject of the action, sorted. <br></p><p>Two issues with &quot;sortedVersion&quot;:<br></p><p>1. &quot;Version&quot; is needless for readability.  &quot;Return the list of names,<br>   sorted.&quot;<br>2. I&#39;m already uncomfortable with the idea that the nonmutating version<br>   of the method is longer than the mutating one.  The ed/ing &quot;rule&quot;<br>   makes the penalty small enough that I think it&#39;s tolerable, but<br>   &quot;edVersion&quot; is too much.  Note that the nonmutating methods are the<br>   ones used in &quot;method chains,&quot; and idiom we very much want to support<br>   and keep uncluttered.<br></p><p>&gt; The adjective modifies a noun, and therefore implies the presence of a<br>&gt; noun that is not explicitly added to the name.<br></p><p>IIUC, in the end, your proposal leads to the same result.  I understand<br>your desire to generalize to deal with side-effects as a whole rather<br>than just mutations of the receiver, but it sounds like you&#39;re saying<br>there&#39;s more to it than just that.  What am I missing (if anything)?<br></p><p>&gt;<br>&gt; I find my approach more principled and more obvious for use to non-native speakers.<br>&gt;<br>&gt; Hopefully this clarifies.<br>&gt;<br>&gt; -- E, finishing dinner and about to go on family time. I&#39;ll be around a little longer but not much longer<br>&gt;<br>&gt;&gt; <br>&gt;&gt;&gt; -- E<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    On Jan 22, 2016, at 2:02 PM, Douglas Gregor via swift-evolution &lt;<br>&gt;&gt;&gt;    swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    Hello Swift community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    The review of SE-0023&quot;API Design Guidelines&quot; begins now and runs through January 31, 2016. The proposal is<br>&gt;&gt;&gt;    available here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;        https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution<br>&gt;&gt;&gt;    mailing list at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;        https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    or, if you would like to keep your feedback private, directly to the review manager. When replying, please try<br>&gt;&gt;&gt;    to keep the proposal link at the top of the message:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;        Proposal link:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;            https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;        Reply text<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;            Other replies<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     What goes into a review?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    The goal of the review process is to improve the proposal under review through constructive criticism and,<br>&gt;&gt;&gt;    eventually, determine the direction of Swift. When writing your review, here are some questions you might want<br>&gt;&gt;&gt;    to answer in your review:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;      + What is your evaluation of the proposal?<br>&gt;&gt;&gt;      + Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt;      + Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt;      + If you have used other languages or libraries with a similar feature, how do you feel that this proposal<br>&gt;&gt;&gt;        compares to those?<br>&gt;&gt;&gt;      + How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    More information about the Swift evolution process is available at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;        https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    Thank you,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    -Doug Gregor<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    Review Manager<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    _______________________________________________<br>&gt;&gt;&gt;    swift-evolution mailing list<br>&gt;&gt;&gt;    swift-evolution at swift.org<br>&gt;&gt;&gt;    https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Current: Use imperative verb phrases for mutating methods: x.reverse(), x.sort(), x.tweak() Use noun phrases for<br>&gt;&gt;&gt; non-mutating methods: x.distanceTo(...), idx.successor() Proposed: Use verb phrases to declare procedural methods,<br>&gt;&gt;&gt; whether or not they mutate an instance or just produce side effects: x.reverse(), x.sort(), x.tweak(), x.perform(),<br>&gt;&gt;&gt; x.dispatch(), x.send() Use noun phrases to describe values returned by a functional method: x.distanceTo(y),<br>&gt;&gt;&gt; index.successor() (This admittedly leaves further issues around other functional methods, for example,<br>&gt;&gt;&gt; seq.separatedBySequence(seq) and int.strideTo(other: Self, step:Self.Stride), etc. ) I suggest that mutating<br>&gt;&gt;&gt; methods are just a procedural method (side effect, no return value) vs functional. -- E &gt; On Jan 22, 2016, at 2:02<br>&gt;&gt;&gt; PM, Douglas Gregor via swift-evolution wrote: &gt; &gt; Hello Swift community, &gt; &gt; The review of SE-0023&quot;API Design<br>&gt;&gt;&gt; Guidelines&quot; begins now and runs through January 31, 2016. The proposal is available here: &gt; &gt; <br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md&gt; &gt; Reviews are an important<br>&gt;&gt;&gt; part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at &gt; &gt; <br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt; &gt; or, if you would like to keep your feedback private,<br>&gt;&gt;&gt; directly to the review manager. When replying, please try to keep the proposal link at the top of the message: &gt; &gt;<br>&gt;&gt;&gt; Proposal link: &gt; &gt; https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md&gt; &gt; Reply<br>&gt;&gt;&gt; text &gt; &gt; Other replies &gt; What goes into a review? &gt; &gt; The goal of the review process is to improve the proposal<br>&gt;&gt;&gt; under review through constructive criticism and, eventually, determine the direction of Swift. When writing your<br>&gt;&gt;&gt; review, here are some questions you might want to answer in your review: &gt; &gt; What is your evaluation of the<br>&gt;&gt;&gt; proposal? &gt; Is the problem being addressed significant enough to warrant a change to Swift? &gt; Does this proposal<br>&gt;&gt;&gt; fit well with the feel and direction of Swift? &gt; If you have used other languages or libraries with a similar<br>&gt;&gt;&gt; feature, how do you feel that this proposal compares to those? &gt; How much effort did you put into your review? A<br>&gt;&gt;&gt; glance, a quick reading, or an in-depth study? &gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt;&gt;&gt; &gt; Thank you, &gt; &gt; -Doug Gregor &gt; &gt; Review<br>&gt;&gt;&gt; Manager &gt; &gt; _______________________________________________ &gt; swift-evolution mailing list &gt;<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt; &gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; -Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] SE-0023 API Design Guidelines</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>January 23, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Jan 23, 2016, at 11:51 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Fri Jan 22 2016, Erica Sadun &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On Jan 22, 2016, at 4:24 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Fri Jan 22 2016, Erica Sadun<br>&gt;&gt; <br>&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________ swift-evolution mailing list swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; <br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Current:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; * Use imperative verb phrases for mutating methods: x.reverse(), x.sort(), x.tweak()<br>&gt;&gt;&gt;&gt; * Use noun phrases for non-mutating methods: x.distanceTo(...), idx.successor()<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Proposed:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; * Use verb phrases to declare procedural methods, whether or not they mutate an instance or just produce side<br>&gt;&gt;&gt;&gt;   effects: x.reverse(), x.sort(), x.tweak(), x.perform(), x.dispatch(), x.send()<br>&gt;&gt;&gt;&gt; * Use noun phrases to describe values returned by a functional method: x.distanceTo(y), index.successor() (This<br>&gt;&gt;&gt;&gt;   admittedly leaves further issues around other functional methods, for example, seq.separatedBySequence(seq) and<br>&gt;&gt;&gt;&gt;    int.strideTo(other: Self, step:Self.Stride), etc. )<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I suggest that mutating methods are just a procedural method (side effect, no return value) vs functional.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi Erica,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; When you propose a change, could you please explain why you think your<br>&gt;&gt;&gt; change is an improvement?  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt; Dave<br>&gt;&gt; <br>&gt;&gt; I believe the current distinction is misguided in focusing on mutating and non-mutating implementations when the<br>&gt;&gt; differentiation can be viewed from a more general level. There are two ways to distinguish these:<br>&gt;&gt; <br>&gt;&gt; * Does this method or function have side effects (which is what the current API approach intends to address); and<br>&gt;&gt; * Is this method or function inherently functional or procedural in<br>&gt;&gt; nature, returning a value or not.<br>&gt; <br>&gt; Okay, I understand what you&#39;re driving at, but these don&#39;t seem to be<br>&gt; separate distinctions.  Can you show me a method that&#39;s inherently<br>&gt; functional but has side effects, or inherently procedural but has none?<br></p><p>func loginWithCredential(credential: SomeCredentialType) -&gt; SuccessTokenType? {...}<br>func printThisValueNicelyFormatted&lt;T&gt;(something: T) {...}<br></p><p>&gt; <br>&gt;&gt; For example, contrast sort() and sortInPlace().  Even with the current<br>&gt;&gt; approach they lack a natural clarity. You could easily swap<br>&gt;&gt; them without anything &quot;breaking&quot; in understanding because your<br>&gt;&gt; solution is conventional, not based on any underlying principle.<br>&gt; <br>&gt; There&#39;s certainly an underlying principle there: that methods that<br>&gt; mutate the receiver, and have a nonmutating counterpart that instead<br>&gt; returns a modified *copy* of the receiver, are named with &quot;InPlace&quot;<br>&gt; suffix.  It&#39;s not as general as what you&#39;re suggesting, but it&#39;s<br>&gt; something.<br>&gt; <br>&gt; How could one could ever call a nonmutating method that returns a new<br>&gt; collection &quot;sortInPlace,&quot; without causing confusion?  How would people<br>&gt; interpret &quot;InPlace&quot; as conveying meaningful information?<br></p><p>I could imagine two algorithms, one that limits excess memory by sorting in place, and another <br>that uses sort-and-copy-back, so the sort is not done in place. My point is not that this<br>is ideal naming but that I was addressing the example that was part of the original.<br></p><p>&gt; With noun/verb naming, the function name reflects the functional/procedural underlying differentiation. <br>&gt;&gt; * A function produces something: f(x) -&gt; y. <br>&gt;&gt; * A procedure does something: g(x) -&gt; Void<br>&gt;&gt; <br>&gt;&gt; Under my proposed change, the procedural variation would be sort, sortInPlace, etc. Optional adverbs and near-adverbs<br>&gt;&gt; could distinguish similar versions sortQuickly, sortBalanced, etc.<br>&gt;&gt; <br>&gt;&gt; The functional would be sortedVersion or with a slight rule tweak that<br>&gt;&gt; infers the subject of the action, sorted. <br>&gt; <br>&gt; Two issues with &quot;sortedVersion&quot;:<br>&gt; <br>&gt; 1. &quot;Version&quot; is needless for readability.  &quot;Return the list of names,<br>&gt;   sorted.&quot;<br></p><p>I included this to force it to be a noun because I was trying to keep with the<br>examples used in the original. Which is why I then mentioned using<br>an inferred noun to preserve succinctness.<br></p><p>&gt; 2. I&#39;m already uncomfortable with the idea that the nonmutating version<br>&gt;   of the method is longer than the mutating one.  The ed/ing &quot;rule&quot;<br>&gt;   makes the penalty small enough that I think it&#39;s tolerable, but<br>&gt;   &quot;edVersion&quot; is too much.  Note that the nonmutating methods are the<br>&gt;   ones used in &quot;method chains,&quot; and idiom we very much want to support<br>&gt;   and keep uncluttered.<br></p><p>I&#39;m going to hold off on responding to this because of the two examples I<br>gave above about &quot;a method that&#39;s inherently functional but has side effects, <br>or inherently procedural but has none?&quot;<br></p><p><br>&gt; <br>&gt;&gt; The adjective modifies a noun, and therefore implies the presence of a<br>&gt;&gt; noun that is not explicitly added to the name.<br>&gt; <br>&gt; IIUC, in the end, your proposal leads to the same result.  I understand<br>&gt; your desire to generalize to deal with side-effects as a whole rather<br>&gt; than just mutations of the receiver, but it sounds like you&#39;re saying<br>&gt; there&#39;s more to it than just that.  What am I missing (if anything)?<br>&gt; <br>&gt;&gt; <br>&gt;&gt; I find my approach more principled and more obvious for use to non-native speakers.<br>&gt;&gt; <br>&gt;&gt; Hopefully this clarifies.<br>&gt;&gt; <br>&gt;&gt; -- E, finishing dinner and about to go on family time. I&#39;ll be around a little longer but not much longer<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- E<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   On Jan 22, 2016, at 2:02 PM, Douglas Gregor via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;   swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   Hello Swift community,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   The review of SE-0023&quot;API Design Guidelines&quot; begins now and runs through January 31, 2016. The proposal is<br>&gt;&gt;&gt;&gt;   available here:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;       https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution<br>&gt;&gt;&gt;&gt;   mailing list at<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;       https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   or, if you would like to keep your feedback private, directly to the review manager. When replying, please try<br>&gt;&gt;&gt;&gt;   to keep the proposal link at the top of the message:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;       Proposal link:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;           https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;       Reply text<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;           Other replies<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;    What goes into a review?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   The goal of the review process is to improve the proposal under review through constructive criticism and,<br>&gt;&gt;&gt;&gt;   eventually, determine the direction of Swift. When writing your review, here are some questions you might want<br>&gt;&gt;&gt;&gt;   to answer in your review:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     + What is your evaluation of the proposal?<br>&gt;&gt;&gt;&gt;     + Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt;&gt;     + Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt;&gt;     + If you have used other languages or libraries with a similar feature, how do you feel that this proposal<br>&gt;&gt;&gt;&gt;       compares to those?<br>&gt;&gt;&gt;&gt;     + How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   More information about the Swift evolution process is available at<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;       https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   Thank you,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   -Doug Gregor<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   Review Manager<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   _______________________________________________<br>&gt;&gt;&gt;&gt;   swift-evolution mailing list<br>&gt;&gt;&gt;&gt;   swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;   https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Current: Use imperative verb phrases for mutating methods: x.reverse(), x.sort(), x.tweak() Use noun phrases for<br>&gt;&gt;&gt;&gt; non-mutating methods: x.distanceTo(...), idx.successor() Proposed: Use verb phrases to declare procedural methods,<br>&gt;&gt;&gt;&gt; whether or not they mutate an instance or just produce side effects: x.reverse(), x.sort(), x.tweak(), x.perform(),<br>&gt;&gt;&gt;&gt; x.dispatch(), x.send() Use noun phrases to describe values returned by a functional method: x.distanceTo(y),<br>&gt;&gt;&gt;&gt; index.successor() (This admittedly leaves further issues around other functional methods, for example,<br>&gt;&gt;&gt;&gt; seq.separatedBySequence(seq) and int.strideTo(other: Self, step:Self.Stride), etc. ) I suggest that mutating<br>&gt;&gt;&gt;&gt; methods are just a procedural method (side effect, no return value) vs functional. -- E &gt; On Jan 22, 2016, at 2:02<br>&gt;&gt;&gt;&gt; PM, Douglas Gregor via swift-evolution wrote: &gt; &gt; Hello Swift community, &gt; &gt; The review of SE-0023&quot;API Design<br>&gt;&gt;&gt;&gt; Guidelines&quot; begins now and runs through January 31, 2016. The proposal is available here: &gt; &gt; <br>&gt;&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md&gt; &gt; Reviews are an important<br>&gt;&gt;&gt;&gt; part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at &gt; &gt; <br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt; &gt; or, if you would like to keep your feedback private,<br>&gt;&gt;&gt;&gt; directly to the review manager. When replying, please try to keep the proposal link at the top of the message: &gt; &gt;<br>&gt;&gt;&gt;&gt; Proposal link: &gt; &gt; https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md&gt; &gt; Reply<br>&gt;&gt;&gt;&gt; text &gt; &gt; Other replies &gt; What goes into a review? &gt; &gt; The goal of the review process is to improve the proposal<br>&gt;&gt;&gt;&gt; under review through constructive criticism and, eventually, determine the direction of Swift. When writing your<br>&gt;&gt;&gt;&gt; review, here are some questions you might want to answer in your review: &gt; &gt; What is your evaluation of the<br>&gt;&gt;&gt;&gt; proposal? &gt; Is the problem being addressed significant enough to warrant a change to Swift? &gt; Does this proposal<br>&gt;&gt;&gt;&gt; fit well with the feel and direction of Swift? &gt; If you have used other languages or libraries with a similar<br>&gt;&gt;&gt;&gt; feature, how do you feel that this proposal compares to those? &gt; How much effort did you put into your review? A<br>&gt;&gt;&gt;&gt; glance, a quick reading, or an in-depth study? &gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt;&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt;&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Thank you, &gt; &gt; -Doug Gregor &gt; &gt; Review<br>&gt;&gt;&gt;&gt; Manager &gt; &gt; _______________________________________________ &gt; swift-evolution mailing list &gt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt; &gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
