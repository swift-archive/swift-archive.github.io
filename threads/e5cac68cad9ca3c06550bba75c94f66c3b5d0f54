<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Swift 3 Ranges</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>September 14, 2016 at 09:00:00am</p></header><div class="content"><p>on Tue Sep 06 2016, Haravikk &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On 6 Sep 2016, at 07:39, David Hart via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I have the impression we exchanged flexibility for correctness (the<br>&gt; ability to represent 0..&lt;Int.max) and that it&#39;s wasn&#39;t worth the loss<br>&gt; of flexibility.1<br>&gt;&gt; <br>&gt;&gt; Or am I missing something?<br>&gt;<br>&gt;&gt; <br>&gt;&gt; On 6 Sep 2016, at 08:15, David Hart via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Hi people,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’ve recently started migrating some Swift 2 projects to Swift 3. I<br>&gt;&gt;&gt; came across the split of Range into Range and ClosedRange and I’ve<br>&gt;&gt;&gt; really struggled with it. Specifically, in Swift 2, I had a struct<br>&gt;&gt;&gt; with a Range property that was initialised in many places with<br>&gt;&gt;&gt; either a closed or open range:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; struct Day { … }<br>&gt;&gt;&gt; struct Day : Comparable { … }<br>&gt;&gt;&gt; struct Day : Strippable { … }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; struct Info {<br>&gt;&gt;&gt;     let name: String<br>&gt;&gt;&gt;     let range: Range&lt;Day&gt;<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Info(name: &quot;Christmas Vacation&quot;, range: twentyfith...thirtyfirst)<br>&gt;&gt;&gt; Info(name: &quot;Summer Vacation&quot;, range: someday..&lt;otherday)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Now, in Swift 3, it seems like we’ve lost a type to represent any<br>&gt;&gt;&gt; range to allow an API client the flexibility to specify it as he<br>&gt;&gt;&gt; wishes. Is there a solution to this problem through a protocol<br>&gt;&gt;&gt; which both ranges conform to, or are we stuck with this because of<br>&gt;&gt;&gt; the new API?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; protocol RangeType {<br>&gt;&gt;&gt;     associatedtype Bounds<br>&gt;&gt;&gt;     let lowerBound: Bound { get }<br>&gt;&gt;&gt;     let upperBound: Bound { get }<br>&gt;&gt;&gt; // what else? not even sure if it is possible to define such a<br>&gt; protocol<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; David.<br>&gt;<br>&gt; The problem was that to implement both generically, a closed range was<br>&gt; just an open range with the upper bound increment by one step, but as<br>&gt; you say this wasn&#39;t safe as Int.max etc. could not be used.<br></p><p>It was safe.  Trapping is safe behavior.  It was simply not expressive<br>enough to express the ranges people wanted to write, e.g. 0...Int8.max.<br>Your scheme (below) isn&#39;t either.<br></p><p>&gt; I think if you wanted to solve this you&#39;d need to reintroduce the<br>&gt; concept of incrementing by a minimum step, which was moved away from<br>&gt; index types during the changes to the new indexing model for<br>&gt; collections. You could do this something like so:<br>&gt;<br>&gt; // Reintroduce these methods that were lost in the new indexing API<br>&gt; protocol ForwardStep { func successor()? -&gt; Self }<br>&gt; protocol BackwardStep : ForwardStep { func predecessor()? -&gt; Self }<br>&gt;<br>&gt; // Enable conversion of ranges<br>&gt; extend ClosedRange where Self.Bound : ForwardStep {<br>&gt; 	func toOpenRange() -&gt; Range&lt;Self.Bound&gt;? {<br>&gt; 		guard let upperBound = self.upperBound.successor()<br>&gt; else { return nil }<br>&gt; 		return self.lowerBound ..&lt; upperBound<br>&gt; 	}<br>&gt; }<br>&gt; extend Range where Self.Bound : BackwardStep {<br>&gt; 	func toClosedRange() -&gt; ClosedRange&lt;Self.Bound&gt;? {<br>&gt; 		guard let upperBound = self.upperBound.predecessor()<br>&gt; else { return nil }<br>&gt; 		return self.lowerBound ... upperBound<br>&gt; 	}<br>&gt; }<br>&gt; extend ClosedRange where Self.Bound : BackwardStep {<br>&gt; 	init(_ openRange:Range&lt;Self.Bound&gt;)? {<br>&gt; 		guard let closedRange = openRange.toClosedRange() else<br>&gt; { return nil }<br>&gt; 		self = closedRange<br>&gt; 	}<br>&gt; }<br>&gt; extend Range where Self.Bound : ForwardStep {<br>&gt; 	init(_ closedRange:Range&lt;Self.Bound&gt;)? {<br>&gt; 		guard let openRange = closedRange.toClosedRange() else<br>&gt; { return nil }<br>&gt; 		self = openRange<br>&gt; 	}<br>&gt; }<br></p><p>This would not result in correct range conversion with respect to all<br>collections.  For example, a StridedCollection might step its<br>ForwardStep indices several times for each call to index(after:).<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
