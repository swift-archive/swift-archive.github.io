<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e860a1e0d21a7ae5467aacfe1d9c6a78?s=50"></div><header><strong>[Review] Remove C-style for-loops with conditions and incrementers</strong> from <string>Denis Nikitenko</string> &lt;d.nikitenko at icloud.com&gt;<p>December 10, 2015 at 03:00:00pm</p></header><div class="content"><p>- What is your evaluation of the proposal?<br></p><p>Overall, I think it is a good long-term idea.  However, if it is implemented at this point, with no other changes to the language, I believe its negative side effects would outweigh its benefits.  I think we should wait until the language evolves several features that mitigate the problems that the immediate removal of the C-style for-loop would introduce.<br></p><p><br>- Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>I do not think so.  for-loops can lead to errors, such as stepping past the end of an array, but while and do-repeat loops have the same problem.  They can also seem somewhat old-fashioned.  On the other hand, for-in loops are a clean solution for iterating through an entire collection, or values on a specific interval from n1 to n2, where n1 &lt; n2.  However, with the current language features, they are not nearly as clean in several cases that I describe below.  <br></p><p>Removal of traditional for-loops would make Swift awkward for implementing many imperative numerical algorithms, where stepping from a value to a value by a custom step occurs rather commonly: you regularly count up and down, have unusual ways of incrementing/decrementing the counter,  want to sometimes skip loops, etc..  Functional algorithms are not affected by this, but Swift focuses on imperative programming, with some limited support for functional patterns.<br></p><p>I believe that removal of traditional for loops would also be detrimental in using Swift as a teaching language.  Most computer science books often describe (imperative) algorithms using for-loops, either in pseudocode or using C-style syntax.  Removal of for loops would make in difficult for people learning programming - or, more generally, computer science, mathematics, and engineering - to make a jump to Swift.  Solutions to the problems posed by removing for-loops either involve somewhat esoteric features such as stride() and the defer statement, or rely on the while-loop, which has all the dangers of the for-loop, but makes counting loops less readable.<br></p><p>Some specific examples of difficulties created by removing traditional for-loops:<br>1) Counting from n1 to n2 where n1 &gt; n2:<br>We can create a loop &quot;for i in 0…5 { … }&quot;.  However, there is a lack of symmetry in how the intervals are implemented, and there is no way to create a loop &quot;for i in 5…0 {…}”  without calling the reverse() function on the range, using stride(), or switching to a while-loop.<br></p><p>2) There is no clean, concise way to step by increments other than 1.  Both while-loops and stride() work.  However, while-loops spread the control variables of the loop over multiple lines of code or require defer() to keep the counter close to the loop condition, which is a rather advanced language feature.  On the other hand, stride(), is useful but also rather obscure language feature, which is not even mentioned in the Swift iBook.<br></p><p>3) There is no way to create a  &quot;for i in n…m {…}&quot;, where sometimes m &lt; n and the loop is skipped.  This might not be everyone’s cup of tea, but many numerical algorithms rely on this and are presented this way in the literature.  If we remove “traditional” for-loops, we instantly place a roadblock for someone who learned Swift as the first language and wants to play around with new algorithms, or whose background is the C-familty of languages.<br></p><p>Now, all of these are probably corner cases for the for-loop.  However, all of them pop up regularly in some application areas.  For example, I was reviewing a linear algebra book that I want my students to use next semester in a first year undergraduate course.   It had pseudocode for a simple LU decomposition algorithm (with no row switching).  I decided to implement it in Swift without the “traditional” for-loops.  I immediately ran into two of the above issues:<br></p><p>- counting down by 1 required (0…n).reverse(), which seemed unnecessarily verbose<br>- loops that are sometimes skipped required either:<br>--- an if-statement preceding a for-loop, which lead to a lot of unnecessary indentation in multiple nested for-loops<br>--- a while-loop, which spread loop control variables all over my code<br>--- for-in with stride(), which, while avery useful, is a poorly documented and rather advanced language feature, unfamiliar to many of potentials learners of Swift, both beginners and professionals.<br></p><p><br>- Does this proposal fit well with the feel and direction of Swift?<br></p><p>It could, but it would need to be implemented in concert with updating and expanding some other language features.  Updating Swift intervals to allow 5…0 solves one set of problems. Introducing some form of concise &quot;from-to-by” expression should solve the rest.  For now, however, I believe this proposal would introduce more problems that it would solve.<br></p><p><br>- If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I am familiar with:<br>- C-family of languages (C, C++,Objective-C, Java,and C#), all of which either only use C-style for-loops, or have both for and for-in loops<br>- Numerical languages: Matlab and R.  Both have very flexible and expressive for-loops that support different ranges, boundaries, increments, etc.  I think something along these lines - a clean, smart, flexible for-in - could be a good replacement for an old C-style for-loop. <br>- Scheme.  As a Lisp dialect, this language is utterly different from Swift, so I can’t make a direct comparison.<br></p><p>- How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I have read the original proposal, and have closely followed the discussions on this list.  I have looked through my own code, as well as some common algorithms, to see how easily they would be implemented without C-style for-loops.  I have also discussed this with my colleagues, whose background is either academic, or involves working as programmers in the gaming industry.  Their comments closely resembled mine.<br></p><p>I would like to thank the Swift team and the community for opening these healthy discussions!<br></p><p>cheers,<br></p><p>Denis<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
