<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0095: Replace `protocol&lt;P1, P2&gt;` syntax with `Any&lt;P1, P2&gt;`</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>June 22, 2016 at 11:00:00am</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;SE-0095: Replace `protocol&lt;P1,P2&gt;` syntax with `Any&lt;P1,P2&gt;`&quot; begins now and runs through June 27. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0095-any-as-existential.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/90677221288dba8210194347b162bda8?s=50"></div><header><strong>[Review] SE-0095: Replace `protocol&lt;P1, P2&gt;` syntax with `Any&lt;P1, P2&gt;`</strong> from <string>Ian Partridge</string> &lt;ian at poncho.org.uk&gt;<p>June 22, 2016 at 07:00:00pm</p></header><div class="content"><p>Could this ampersand syntax be reused in protocol adoption too?<br></p><p>Idea:<br></p><p>protocol A { }<br>protocol B { }<br></p><p>struct Foo : A &amp; B { }<br></p><p>class SuperClass { }<br>class SubClass : SuperClass, A &amp; B { }<br></p><p>This would solve a problem: currently you cannot tell at a glance whether a<br>class is a) inheriting from a superclass and adopting one protocol, or b)<br>adopting two protocols.<br></p><p>Ian Partridge<br></p><p>On 22 June 2016 at 19:04, Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0095: Replace `protocol&lt;P1,P2&gt;` syntax with<br>`Any&lt;P1,P2&gt;`&quot; begins now and runs through June 27. The proposal is<br>available here:<br>&gt;<br>&gt;<br>https://github.com/apple/swift-evolution/blob/master/proposals/0095-any-as-existential.md<br></p><p><br>-- <br>Ian Partridge<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/1730662d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Review] SE-0095: Replace `protocol&lt;P1, P2&gt;` syntax with `Any&lt;P1, P2&gt;`</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>June 22, 2016 at 08:00:00pm</p></header><div class="content"><p>Not with this proposal, but this should be allowed at a later point.<br></p><p>This would work as a workaround.<br></p><p>protocol A { }<br>protocol B { }<br></p><p>typealias AB = A &amp; B<br></p><p>struct Foo : AB { }<br></p><p>class SuperClass { }<br>class SubClass : SuperClass, AB { }<br>It’s up to the core team to decide if your mentioned behavior should be allowed with this proposal.<br></p><p><br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 22. Juni 2016 um 20:45:55, Ian Partridge via swift-evolution (swift-evolution at swift.org) schrieb:<br></p><p>Could this ampersand syntax be reused in protocol adoption too?<br></p><p>Idea:<br></p><p>protocol A { }<br>protocol B { }<br></p><p>struct Foo : A &amp; B { }<br></p><p>class SuperClass { }<br>class SubClass : SuperClass, A &amp; B { }<br></p><p>This would solve a problem: currently you cannot tell at a glance whether a class is a) inheriting from a superclass and adopting one protocol, or b) adopting two protocols.<br></p><p>Ian Partridge<br></p><p>On 22 June 2016 at 19:04, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0095: Replace `protocol&lt;P1,P2&gt;` syntax with `Any&lt;P1,P2&gt;`&quot; begins now and runs through June 27. The proposal is available here:<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/proposals/0095-any-as-existential.md<br></p><p><br>--<br>Ian Partridge<br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/6785394e/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c72bd3ba434ad651a5d8d3d79f2d4c49?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0095: Replace `protocol&lt;P1, P2&gt;` syntax with `Any&lt;P1, P2&gt;`</strong> from <string>Scott James Remnant</string> &lt;scott at netsplit.com&gt;<p>June 22, 2016 at 12:00:00pm</p></header><div class="content"><p>Have given this a thorough review, both the final proposal, and its development during the draft phases on the list, etc.<br></p><p>Unfortunately I have to give the final proposal as it stands a strong -1.<br></p><p>While I appreciate the future benefits of more generic existential types, the final proposal introduces syntax that is flat-out confusing and inconsistent with the rest of Swift 3.<br></p><p><br>In Swift, the &amp; operator is not used for composition, it serves only as the “Bitwise AND&quot; operator for integer operations.<br></p><p><br>OptionSetType gives a good example, where Swift has actively abandoned &amp; for composition. Previously code was in an Obj-C style, e.g.<br></p><p>  NSOptionBox &amp; NSOptionCarton<br></p><p>but now uses “,” for composition within an array context:<br></p><p>  [.box, .carton]<br></p><p><br>For this reason, I find that the pattern `&lt;…, …, …&gt;` is still a more Swift-y type composition syntax than the proposal.<br></p><p>Scott<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e910871dda004717de19e83626308b5a?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0095: Replace `protocol&lt;P1, P2&gt;` syntax with `Any&lt;P1, P2&gt;`</strong> from <string>Tony Allevato</string> &lt;allevato at google.com&gt;<p>June 22, 2016 at 08:00:00pm</p></header><div class="content"><p>On Wed, Jun 22, 2016 at 12:34 PM Scott James Remnant via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Have given this a thorough review, both the final proposal, and its<br>&gt; development during the draft phases on the list, etc.<br>&gt;<br>&gt; Unfortunately I have to give the final proposal as it stands a strong -1.<br>&gt;<br>&gt; While I appreciate the future benefits of more generic existential types,<br>&gt; the final proposal introduces syntax that is flat-out confusing and<br>&gt; inconsistent with the rest of Swift 3.<br>&gt;<br>&gt;<br>&gt; In Swift, the &amp; operator is not used for composition, it serves only as<br>&gt; the “Bitwise AND&quot; operator for integer operations.<br>&gt;<br>&gt;<br>&gt; OptionSetType gives a good example, where Swift has actively abandoned &amp;<br>&gt; for composition. Previously code was in an Obj-C style, e.g.<br>&gt;<br>&gt;   NSOptionBox &amp; NSOptionCarton<br>&gt;<br>&gt; but now uses “,” for composition within an array context:<br>&gt;<br>&gt;   [.box, .carton]<br>&gt;<br></p><p>The equivalent to [.box, .carton] in Swift 1 option sets would have been<br>&quot;NSOptionBox | NSOptionCarton&quot;, not &quot;&amp;&quot;. In that sense, we can&#39;t compare<br>&#39;&amp;&#39; in that context to &#39;&amp;&#39; in this one.<br></p><p>We shouldn&#39;t necessarily let analogies to bitwise operations affect us here<br>because the operations are so dissimilar and clear from context—they only<br>happen to share the same symbol. The same could be said for addition vs.<br>string concatenation (and actually has been recently on this list). String<br>concatenation is formally a multiplicative operation, not an additive one,<br>and operates on completely different types than numeric ones, but we use +<br>for historical reasons and because it&#39;s clear to the user.<br></p><p>Likewise, the symbol &quot;&amp;&quot; here is quite clear to the user, and I would argue<br>more so than the protocol&lt;&gt; or Any&lt;&gt; syntaxes (the former because<br>eventually this may be extended to non-protocol types, and the latter<br>because it&#39;s ambiguous about whether it&#39;s &quot;any type conforming to&quot; or &quot;a<br>type conforming to any of&quot;.<br></p><p><br></p><p>&gt;<br>&gt; For this reason, I find that the pattern `&lt;…, …, …&gt;` is still a more<br>&gt; Swift-y type composition syntax than the proposal.<br>&gt;<br>&gt; Scott<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/76cbddc2/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e910871dda004717de19e83626308b5a?s=50"></div><header><strong>[Review] SE-0095: Replace `protocol&lt;P1, P2&gt;` syntax with `Any&lt;P1, P2&gt;`</strong> from <string>Tony Allevato</string> &lt;allevato at google.com&gt;<p>June 22, 2016 at 07:00:00pm</p></header><div class="content"><p>On Wed, Jun 22, 2016 at 11:04 AM Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0095: Replace `protocol&lt;P1,P2&gt;` syntax with<br>&gt; `Any&lt;P1,P2&gt;`&quot; begins now and runs through June 27. The proposal is<br>&gt; available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0095-any-as-existential.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction of Swift.<br>&gt; When writing your review, here are some questions you might want to answer<br>&gt; in your review:<br>&gt;<br>&gt;         * What is your evaluation of the proposal?<br>&gt;<br></p><p>+1. This syntax is clean and its meaning is very clear (&quot;what is A &amp; B? A<br>type that conforms to A and B&quot;).<br></p><p>        * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;<br></p><p>Yes, and it&#39;s important to address now. As the type system becomes richer<br>in the future with the completion of generics, combined with Swift&#39;s<br>protocol-driven design philosophies, this feature will get much heavier use<br>going forward. Having a clean, simple, terse syntax to express multiple<br>protocol conformances (and eventually concrete type relationships) will<br>make those features much easier to use without being cluttered by keywords<br>and potential nested-angle-bracket hell.<br></p><p>The previously proposed Any&lt;...&gt; syntax suffers from ambiguity of meaning:<br>does it mean &quot;a type that conforms to any of these...&quot; or &quot;any type that<br>conforms to all of these...&quot;? Turns out it&#39;s the latter. The use of &quot;&amp;&quot;<br>removes that ambiguity completely.<br></p><p><br></p><p>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br></p><p>Yes. It will go a long way toward making protocol-driven designs and<br>generics great to use.<br></p><p><br>&gt;         * If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br></p><p>Read the proposal and participated a small amount in the earlier<br>discussions.<br></p><p><br></p><p>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/e45fdc27/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Review] SE-0095: Replace `protocol&lt;P1, P2&gt;` syntax with `Any&lt;P1, P2&gt;`</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>June 22, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>+1.  It sets the stage for some very desirable type system features in the future.  There has already been extensive discussion on the topic and I don’t have anything new to add.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>No, but I have seen examples from languages that allow this and found them very elegant.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Participated very heavily in the earlier threads on the topic and read the latest proposal.<br></p><p>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>[Review] SE-0095: Replace `protocol&lt;P1, P2&gt;` syntax with `Any&lt;P1, P2&gt;`</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>June 22, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; The review of &quot;SE-0095: Replace `protocol&lt;P1,P2&gt;` syntax with `Any&lt;P1,P2&gt;`&quot; begins now and runs through June 27. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0095-any-as-existential.md<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>I think I like it and it seems straight-forward enough.<br></p><p><br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>I cannot say if it is significant “enough” but I think it results in cleaner looking code that doesn’t end up reading as if generics are being used when they are not.<br></p><p><br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>I believe so.<br></p><p><br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>n/a<br></p><p><br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Minimal attention-paying during the discussions, 2 readings of the current proposal.<br></p><p>l8r<br>Sean<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c40db4457ab2c91a0d8006da31b177c6?s=50"></div><header><strong>[Review] SE-0095: Replace `protocol&lt;P1, P2&gt;` syntax with `Any&lt;P1, P2&gt;`</strong> from <string>Trent Nadeau</string> &lt;tanadeau at gmail.com&gt;<p>June 22, 2016 at 10:00:00pm</p></header><div class="content"><p>On Wed, Jun 22, 2016 at 2:04 PM, Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0095: Replace `protocol&lt;P1,P2&gt;` syntax with<br>&gt; `Any&lt;P1,P2&gt;`&quot; begins now and runs through June 27. The proposal is<br>&gt; available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0095-any-as-existential.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction of Swift.<br>&gt; When writing your review, here are some questions you might want to answer<br>&gt; in your review:<br>&gt;<br>&gt;         * What is your evaluation of the proposal?<br>&gt;<br>+1. I think this syntax shorter and easier to read.<br></p><p>&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;<br>Yes.<br></p><p>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>Yes. It improves the use of protocols in generics and existentials.<br></p><p>&gt;         * If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;<br>Rust uses `+` with its traits, with basically the same meaning.<br></p><p>&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br>Read the proposal and followed the email threads.<br></p><p>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p><br></p><p>-- <br>Trent Nadeau<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/98d6548c/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Review] SE-0095: Replace `protocol&lt;P1, P2&gt;` syntax with `Any&lt;P1, P2&gt;`</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June 23, 2016 at 10:00:00am</p></header><div class="content"><p>Regards<br>LM<br>(From mobile)<br>&gt; On Jun 22, 2016, at 8:04 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0095: Replace `protocol&lt;P1,P2&gt;` syntax with `Any&lt;P1,P2&gt;`&quot; begins now and runs through June 27. The proposal is available here:<br>&gt; <br>&gt;   https://github.com/apple/swift-evolution/blob/master/proposals/0095-any-as-existential.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt;   https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt;   * What is your evaluation of the proposal?<br></p><p>This is a very simple and intuitive way to express compositions that naturally eliminates the ambiguity around ordering which plagued the original proposal<br></p><p>&gt;   * Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>It is critical to choose a syntax that will scale up for generalized existentials, which will plug a whole in the current type system.<br></p><p>&gt;   * Does this proposal fit well with the feel and direction of Swift?<br></p><p>It is new, but fits well with the rest<br></p><p>&gt;   * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Lots... the only real alternative (with the same benefits) is to use &#39; + &#39;.  Given alternatives, swift airs on the side of the easiest to read as English.. which means &#39; &amp; &#39; is the natural winner<br></p><p>&gt;   * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Lots, including exploring a generalization that logically degenerates to the syntax prosed here.<br></p><p>More:<br>https://gist.github.com/lmihalkovic/68c321ea7ffe27e553e37b794309b051<br></p><p>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt;   https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/4d39b52e/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0095: Replace `protocol&lt;P1, P2&gt;` syntax with `P1 &amp; P2`</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>June 23, 2016 at 08:00:00pm</p></header><div class="content"><p>[Proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0095-any-as-existential.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0095-any-as-existential.md&gt; ]<br></p><p>I’ve gone on record before as against this syntax, although when I set out earlier today to record my usual rebuttal I found that it really was mostly a matter of taste. Yes, this looks weird to me:<br></p><p>let callback: (Data) -&gt; NSCoding &amp; NSCopying<br></p><p>but I’m sure the infix ‘-&gt;’ for functions looked weird to everyone the first time they saw it as well, and it really is pretty clear in argument position.<br></p><p>However, I did remember one issue, which was brought up on the previous mega-thread: if we do want to generalize protocol values &lt;https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md#generalized-existentials&gt;, we’re going to want something that’s essentially “a type with a ‘where’ clauses in it”. I really don’t want to force people to use a typealias to spell such a type, but at the same time I want that where clause to be clearly attached to the type. (As brought up before the return position of a function is currently ambiguous with SE-0081 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md&gt;.)<br></p><p>Despite the lightweightedness and the well-prepared proposal by Adrian and Austin, the lack of bracketing &lt;&gt; () {} [] leads me to maintain my stance against the proposed syntax.<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/6c5d6632/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0095: Replace `protocol&lt;P1, P2&gt;` syntax with `P1 &amp; P2`</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June 24, 2016 at 07:00:00am</p></header><div class="content"><p>Regards<br>LM<br>(From mobile)<br>&gt; On Jun 24, 2016, at 5:55 AM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; [Proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0095-any-as-existential.md ]<br>&gt; <br>&gt; I’ve gone on record before as against this syntax, although when I set out earlier today to record my usual rebuttal I found that it really was mostly a matter of taste. Yes, this looks weird to me:<br>&gt; <br>&gt; let callback: (Data) -&gt; NSCoding &amp; NSCopying<br>&gt; <br>&gt; but I’m sure the infix ‘-&gt;’ for functions looked weird to everyone the first time they saw it as well, and it really is pretty clear in argument position.<br>&gt; <br>&gt; However, I did remember one issue, which was brought up on the previous mega-thread: if we do want to generalize protocol values, we’re going to want something that’s essentially “a type with a ‘where’ clauses in it”. I really don’t want to force people to use a typealias to spell such a type, but at the same time I want that where clause to be clearly attached to the type. (As brought up before the return position of a function is currently ambiguous with SE-0081.)<br>&gt; <br>&gt; Despite the lightweightedness and the well-prepared proposal by Adrian and Austin, the lack of bracketing &lt;&gt; () {} [] leads me to maintain my stance against the proposed syntax.<br></p><p>This is another way to generalize P&amp;Q compositions that opens another way to specify WHERE<br></p><p>https://gist.github.com/lmihalkovic/68c321ea7ffe27e553e37b794309b051<br></p><p>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/3862d479/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0095: Replace `protocol&lt;P1, P2&gt;` syntax with `P1 &amp; P2`</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>June 24, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jun 23, 2016, at 22:20, L. Mihalkovic &lt;laurent.mihalkovic at gmail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Regards<br>&gt; LM<br>&gt; (From mobile)<br>&gt; On Jun 24, 2016, at 5:55 AM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; [Proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0095-any-as-existential.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0095-any-as-existential.md&gt; ]<br>&gt;&gt; <br>&gt;&gt; I’ve gone on record before as against this syntax, although when I set out earlier today to record my usual rebuttal I found that it really was mostly a matter of taste. Yes, this looks weird to me:<br>&gt;&gt; <br>&gt;&gt; let callback: (Data) -&gt; NSCoding &amp; NSCopying<br>&gt;&gt; <br>&gt;&gt; but I’m sure the infix ‘-&gt;’ for functions looked weird to everyone the first time they saw it as well, and it really is pretty clear in argument position.<br>&gt;&gt; <br>&gt;&gt; However, I did remember one issue, which was brought up on the previous mega-thread: if we do want to generalize protocol values &lt;https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md#generalized-existentials&gt;, we’re going to want something that’s essentially “a type with a ‘where’ clauses in it”. I really don’t want to force people to use a typealias to spell such a type, but at the same time I want that where clause to be clearly attached to the type. (As brought up before the return position of a function is currently ambiguous with SE-0081 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md&gt;.)<br>&gt;&gt; <br>&gt;&gt; Despite the lightweightedness and the well-prepared proposal by Adrian and Austin, the lack of bracketing &lt;&gt; () {} [] leads me to maintain my stance against the proposed syntax.<br>&gt; <br>&gt; This is another way to generalize P&amp;Q compositions that opens another way to specify WHERE<br>&gt; <br>&gt; https://gist.github.com/lmihalkovic/68c321ea7ffe27e553e37b794309b051 &lt;https://gist.github.com/lmihalkovic/68c321ea7ffe27e553e37b794309b051&gt;<br>Thanks for bringing this up. I know one reason we’ve avoided syntax like this in the past is the potential for static subscripts, but of course that’s just one of many future concerns.<br></p><p>Jordan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/4ae37db8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0095: Replace `protocol&lt;P1, P2&gt;` syntax with `P1 &amp; P2`</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June 24, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Jun 24, 2016, at 6:04 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 23, 2016, at 22:20, L. Mihalkovic &lt;laurent.mihalkovic at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Regards<br>&gt;&gt; LM<br>&gt;&gt; (From mobile)<br>&gt;&gt; On Jun 24, 2016, at 5:55 AM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; [Proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0095-any-as-existential.md ]<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’ve gone on record before as against this syntax, although when I set out earlier today to record my usual rebuttal I found that it really was mostly a matter of taste. Yes, this looks weird to me:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let callback: (Data) -&gt; NSCoding &amp; NSCopying<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; but I’m sure the infix ‘-&gt;’ for functions looked weird to everyone the first time they saw it as well, and it really is pretty clear in argument position.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; However, I did remember one issue, which was brought up on the previous mega-thread: if we do want to generalize protocol values, we’re going to want something that’s essentially “a type with a ‘where’ clauses in it”. I really don’t want to force people to use a typealias to spell such a type, but at the same time I want that where clause to be clearly attached to the type. (As brought up before the return position of a function is currently ambiguous with SE-0081.)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Despite the lightweightedness and the well-prepared proposal by Adrian and Austin, the lack of bracketing &lt;&gt; () {} [] leads me to maintain my stance against the proposed syntax.<br>&gt;&gt; <br>&gt;&gt; This is another way to generalize P&amp;Q compositions that opens another way to specify WHERE<br>&gt;&gt; <br>&gt;&gt; https://gist.github.com/lmihalkovic/68c321ea7ffe27e553e37b794309b051<br>&gt; <br>&gt; Thanks for bringing this up. I know one reason we’ve avoided syntax like this in the past is the potential for static subscripts, but of course that’s just one of many future concerns.<br>&gt; <br>&gt; Jordan<br></p><p>Thank you for reading.<br></p><p>Originally i wanted to make &quot;[&quot; and &quot;]&quot; be CONSTRAINT_BEGIN and CONSTRAINT_END respectively to signify that what mattered was the overall structure and how it degenerated into this syntax when the composition is not applied to a concrete type (i.e. naked P&amp;Q), as well as show that this gave a formal definition to Any: a zero term composition that is not limited to a single concrete type, otherwise spelled &quot;_ CONSTRAINT_BEGIN CONSTRAINT_END&quot;<br></p><p>Anyhow, it was an interesting mental exercise.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/d26dd545/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0095: Replace `protocol&lt;P1, P2&gt;` syntax with `P1 &amp; P2`</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>June 24, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jun 24, 2016, at 9:04 AM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 23, 2016, at 22:20, L. Mihalkovic &lt;laurent.mihalkovic at gmail.com &lt;mailto:laurent.mihalkovic at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; This is another way to generalize P&amp;Q compositions that opens another way to specify WHERE<br>&gt;&gt; <br>&gt;&gt; https://gist.github.com/lmihalkovic/68c321ea7ffe27e553e37b794309b051 &lt;https://gist.github.com/lmihalkovic/68c321ea7ffe27e553e37b794309b051&gt;<br>&gt; Thanks for bringing this up. I know one reason we’ve avoided syntax like this in the past is the potential for static subscripts, but of course that’s just one of many future concerns.<br></p><p>I would prefer to simply expand `&lt;...&gt;` to refer to type arguments in general, rather than simply generic arguments, and keep the `Any` syntax. The argument made by a few people in the previous thread that `&lt;...&gt;` is supposedly associated primarily with generics is not compelling to me; it&#39;s currently used for protocol composition already, and there are generic features (constrained extensions) that don&#39;t use it.<br></p><p>(Consider this my weak -0.5 review against a proposal I helped to author.)<br></p><p>Austin<br></p><p>&gt; <br>&gt; Jordan<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/6655d9f0/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0095: Replace `protocol&lt;P1, P2&gt;` syntax with `P1 &amp; P2`</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>June 24, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Jun 23, 2016, at 8:55 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; [Proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0095-any-as-existential.md ]<br>&gt; <br>&gt; I’ve gone on record before as against this syntax, although when I set out earlier today to record my usual rebuttal I found that it really was mostly a matter of taste. Yes, this looks weird to me:<br>&gt; <br>&gt; let callback: (Data) -&gt; NSCoding &amp; NSCopying<br>&gt; <br>&gt; but I’m sure the infix ‘-&gt;’ for functions looked weird to everyone the first time they saw it as well, and it really is pretty clear in argument position.<br></p><p>We could conceivably bracket the &#39;where&#39; constraints somewhere. It&#39;s nice not to have to punish the common case syntax. In my personal ideal vision of the world, I&#39;d like to see us support opening existentials via path-dependent types (e.g., let a: Collection; let element: a.Element). If we support them in decl-level &#39;where&#39; clauses, we provide a nice, clean syntax for complex generic relationships that doesn&#39;t require angle brackets or per-existential where clauses at all, something like:<br></p><p>	func intersect(a: Collection, b: Collection) -&gt; Collection<br>		where a.Element == b.Element, b.Element == return.Element {<br>	}<br></p><p>which doesn&#39;t completely define away the need for &#39;where&#39; as part of existential types, but would shrink it quite a bit.<br></p><p>-Joe<br></p><p>&gt; However, I did remember one issue, which was brought up on the previous mega-thread: if we do want to generalize protocol values, we’re going to want something that’s essentially “a type with a ‘where’ clauses in it”. I really don’t want to force people to use a typealias to spell such a type, but at the same time I want that where clause to be clearly attached to the type. (As brought up before the return position of a function is currently ambiguous with SE-0081.)<br>&gt; <br>&gt; Despite the lightweightedness and the well-prepared proposal by Adrian and Austin, the lack of bracketing &lt;&gt; () {} [] leads me to maintain my stance against the proposed syntax.<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0095: Replace `protocol&lt;P1, P2&gt;` syntax with `P1 &amp; P2`</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>June 24, 2016 at 06:00:00pm</p></header><div class="content"><p>Sent from my iPad<br></p><p>&gt; On Jun 24, 2016, at 6:00 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 23, 2016, at 8:55 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; [Proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0095-any-as-existential.md ]<br>&gt;&gt; <br>&gt;&gt; I’ve gone on record before as against this syntax, although when I set out earlier today to record my usual rebuttal I found that it really was mostly a matter of taste. Yes, this looks weird to me:<br>&gt;&gt; <br>&gt;&gt; let callback: (Data) -&gt; NSCoding &amp; NSCopying<br>&gt;&gt; <br>&gt;&gt; but I’m sure the infix ‘-&gt;’ for functions looked weird to everyone the first time they saw it as well, and it really is pretty clear in argument position.<br>&gt; <br>&gt; We could conceivably bracket the &#39;where&#39; constraints somewhere. It&#39;s nice not to have to punish the common case syntax. In my personal ideal vision of the world, I&#39;d like to see us support opening existentials via path-dependent types (e.g., let a: Collection; let element: a.Element). If we support them in decl-level &#39;where&#39; clauses, we provide a nice, clean syntax for complex generic relationships that doesn&#39;t require angle brackets or per-existential where clauses at all, something like:<br>&gt; <br>&gt;    func intersect(a: Collection, b: Collection) -&gt; Collection<br>&gt;        where a.Element == b.Element, b.Element == return.Element {<br>&gt;    }<br>&gt; <br>&gt; which doesn&#39;t completely define away the need for &#39;where&#39; as part of existential types, but would shrink it quite a bit.<br></p><p>Would this syntax have the same semantics as the current generics syntax?  That would be very cool - it is much more elegant.<br></p><p>&gt; <br>&gt; -Joe<br>&gt; <br>&gt;&gt; However, I did remember one issue, which was brought up on the previous mega-thread: if we do want to generalize protocol values, we’re going to want something that’s essentially “a type with a ‘where’ clauses in it”. I really don’t want to force people to use a typealias to spell such a type, but at the same time I want that where clause to be clearly attached to the type. (As brought up before the return position of a function is currently ambiguous with SE-0081.)<br>&gt;&gt; <br>&gt;&gt; Despite the lightweightedness and the well-prepared proposal by Adrian and Austin, the lack of bracketing &lt;&gt; () {} [] leads me to maintain my stance against the proposed syntax.<br>&gt;&gt; <br>&gt;&gt; Jordan<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0095: Replace `protocol&lt;P1, P2&gt;` syntax with `P1 &amp; P2`</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June 25, 2016 at 09:00:00am</p></header><div class="content"><p>Inline<br>Regards<br>(From mobile)<br></p><p>&gt; On Jun 25, 2016, at 1:00 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 23, 2016, at 8:55 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; [Proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0095-any-as-existential.md ]<br>&gt;&gt; <br>&gt;&gt; I’ve gone on record before as against this syntax, although when I set out earlier today to record my usual rebuttal I found that it really was mostly a matter of taste. Yes, this looks weird to me:<br>&gt;&gt; <br>&gt;&gt; let callback: (Data) -&gt; NSCoding &amp; NSCopying<br>&gt;&gt; <br>&gt;&gt; but I’m sure the infix ‘-&gt;’ for functions looked weird to everyone the first time they saw it as well, and it really is pretty clear in argument position.<br>&gt; <br>&gt; We could conceivably bracket the &#39;where&#39; constraints somewhere. It&#39;s nice not to have to punish the common case syntax. In my personal ideal vision of the world, I&#39;d like to see us support opening existentials via path-dependent types (e.g., let a: Collection; let element: a.Element). If we support them in decl-level &#39;where&#39; clauses, we provide a nice, clean syntax for complex generic relationships that doesn&#39;t require angle brackets or per-existential where clauses at all, something like:<br>&gt; <br>&gt;    func intersect(a: Collection, b: Collection) -&gt; Collection<br>&gt;        where a.Element == b.Element, b.Element == return.Element {<br>&gt;    }<br>&gt; <br>&gt; which doesn&#39;t completely define away the need for &#39;where&#39; as part of existential types, but would shrink it quite a bit.<br></p><p>For some reason it had not clicked until your &#39;path dependent type&#39; reference how reminicent of (U+00B7) this is. I watched nada&#39;s 2014 presentation again... but then it means intersection types would add a lot... you guys seem ok to add P&amp;Q now, so why not take that opportunity to allow P|Q at the same time. Does it also mean that you might consider at some point expanding &#39;assoctype U&#39;  into:  T where &lt;:U , :&gt;U  opening the door to lower/higher type bounds?<br></p><p><br>&gt; <br>&gt; -Joe<br>&gt; <br>&gt;&gt; However, I did remember one issue, which was brought up on the previous mega-thread: if we do want to generalize protocol values, we’re going to want something that’s essentially “a type with a ‘where’ clauses in it”. I really don’t want to force people to use a typealias to spell such a type, but at the same time I want that where clause to be clearly attached to the type. (As brought up before the return position of a function is currently ambiguous with SE-0081.)<br>&gt;&gt; <br>&gt;&gt; Despite the lightweightedness and the well-prepared proposal by Adrian and Austin, the lack of bracketing &lt;&gt; () {} [] leads me to maintain my stance against the proposed syntax.<br>&gt;&gt; <br>&gt;&gt; Jordan<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0095: Replace `protocol&lt;P1, P2&gt;` syntax with `P1 &amp; P2`</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June 25, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jun 25, 2016, at 9:00 AM, L. Mihalkovic &lt;laurent.mihalkovic at gmail.com&gt; wrote:<br>&gt; <br>&gt; Inline<br>&gt; Regards<br>&gt; (From mobile)<br>&gt; <br>&gt;&gt; On Jun 25, 2016, at 1:00 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 23, 2016, at 8:55 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; [Proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0095-any-as-existential.md ]<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’ve gone on record before as against this syntax, although when I set out earlier today to record my usual rebuttal I found that it really was mostly a matter of taste. Yes, this looks weird to me:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let callback: (Data) -&gt; NSCoding &amp; NSCopying<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; but I’m sure the infix ‘-&gt;’ for functions looked weird to everyone the first time they saw it as well, and it really is pretty clear in argument position.<br>&gt;&gt; <br>&gt;&gt; We could conceivably bracket the &#39;where&#39; constraints somewhere. It&#39;s nice not to have to punish the common case syntax. In my personal ideal vision of the world, I&#39;d like to see us support opening existentials via path-dependent types (e.g., let a: Collection; let element: a.Element). If we support them in decl-level &#39;where&#39; clauses, we provide a nice, clean syntax for complex generic relationships that doesn&#39;t require angle brackets or per-existential where clauses at all, something like:<br>&gt;&gt; <br>&gt;&gt;   func intersect(a: Collection, b: Collection) -&gt; Collection<br>&gt;&gt;       where a.Element == b.Element, b.Element == return.Element {<br>&gt;&gt;   }<br>&gt;&gt; <br>&gt;&gt; which doesn&#39;t completely define away the need for &#39;where&#39; as part of existential types, but would shrink it quite a bit.<br>&gt; <br>&gt; For some reason it had not clicked until your &#39;path dependent type&#39; reference how reminicent of (U+00B7) this is. I watched nada&#39;s 2014 presentation again... but then it means intersection types would add a lot... you guys seem ok to add P&amp;Q now, so why not take that opportunity to allow P|Q at the same time. Does it also mean that you might consider at some point expanding &#39;assoctype U&#39;  into:  T where &lt;:U , :&gt;U  opening the door to lower/higher type bounds?<br></p><p>My point was that the dots (pun intended) are starting to connect and I think it is a neat path to follow. Strike union type as the first use case is already addressed, and it would no matter what be a larger additive. I would love to see a future with type bounds, and although the implementation would be a massive delta, the syntax change would be very minimal. I will play more with my little syntactic exercise to see what a grammar might look like following your train of thoughts.<br></p><p>https://gist.github.com/lmihalkovic/68c321ea7ffe27e553e37b794309b051<br></p><p>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt;&gt; <br>&gt;&gt;&gt; However, I did remember one issue, which was brought up on the previous mega-thread: if we do want to generalize protocol values, we’re going to want something that’s essentially “a type with a ‘where’ clauses in it”. I really don’t want to force people to use a typealias to spell such a type, but at the same time I want that where clause to be clearly attached to the type. (As brought up before the return position of a function is currently ambiguous with SE-0081.)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Despite the lightweightedness and the well-prepared proposal by Adrian and Austin, the lack of bracketing &lt;&gt; () {} [] leads me to maintain my stance against the proposed syntax.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jordan<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0095: Replace `protocol&lt;P1, P2&gt;` syntax with `P1 &amp; P2`</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>June 27, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jun 25, 2016, at 12:00 AM, L. Mihalkovic &lt;laurent.mihalkovic at gmail.com&gt; wrote:<br>&gt; <br>&gt; Inline<br>&gt; Regards<br>&gt; (From mobile)<br>&gt; <br>&gt;&gt; On Jun 25, 2016, at 1:00 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 23, 2016, at 8:55 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; [Proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0095-any-as-existential.md ]<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’ve gone on record before as against this syntax, although when I set out earlier today to record my usual rebuttal I found that it really was mostly a matter of taste. Yes, this looks weird to me:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let callback: (Data) -&gt; NSCoding &amp; NSCopying<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; but I’m sure the infix ‘-&gt;’ for functions looked weird to everyone the first time they saw it as well, and it really is pretty clear in argument position.<br>&gt;&gt; <br>&gt;&gt; We could conceivably bracket the &#39;where&#39; constraints somewhere. It&#39;s nice not to have to punish the common case syntax. In my personal ideal vision of the world, I&#39;d like to see us support opening existentials via path-dependent types (e.g., let a: Collection; let element: a.Element). If we support them in decl-level &#39;where&#39; clauses, we provide a nice, clean syntax for complex generic relationships that doesn&#39;t require angle brackets or per-existential where clauses at all, something like:<br>&gt;&gt; <br>&gt;&gt;   func intersect(a: Collection, b: Collection) -&gt; Collection<br>&gt;&gt;       where a.Element == b.Element, b.Element == return.Element {<br>&gt;&gt;   }<br>&gt;&gt; <br>&gt;&gt; which doesn&#39;t completely define away the need for &#39;where&#39; as part of existential types, but would shrink it quite a bit.<br>&gt; <br>&gt; For some reason it had not clicked until your &#39;path dependent type&#39; reference how reminicent of (U+00B7) this is. I watched nada&#39;s 2014 presentation again... but then it means intersection types would add a lot... you guys seem ok to add P&amp;Q now, so why not take that opportunity to allow P|Q at the same time. Does it also mean that you might consider at some point expanding &#39;assoctype U&#39;  into:  T where &lt;:U , :&gt;U  opening the door to lower/higher type bounds?<br></p><p>Let&#39;s not rathole on the P|Q thing. Disjunctions are difficult to make much sense of in a parametric type system like ours; there are plenty of other threads on this mailing list discussing it.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0095: Replace `protocol&lt;P1, P2&gt;` syntax with `P1 &amp; P2`</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>June 27, 2016 at 10:00:00am</p></header><div class="content"><p>I think the rationale thread for the original version of this proposal<br>pretty much shut down the possibility of disjunctive type constraints. In<br>fact, the primary argument against &#39;&amp;&#39; was that it would encourage<br>conversations about &#39;|&#39;.<br></p><p>It&#39;s also been added to the commonly rejected proposals list:<br>https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md<br></p><p>On Mon, Jun 27, 2016 at 9:48 AM, Joe Groff via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Jun 25, 2016, at 12:00 AM, L. Mihalkovic &lt;<br>&gt; laurent.mihalkovic at gmail.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Inline<br>&gt; &gt; Regards<br>&gt; &gt; (From mobile)<br>&gt; &gt;<br>&gt; &gt;&gt; On Jun 25, 2016, at 1:00 AM, Joe Groff via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; On Jun 23, 2016, at 8:55 PM, Jordan Rose via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; [Proposal:<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0095-any-as-existential.md<br>&gt; ]<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; I’ve gone on record before as against this syntax, although when I set<br>&gt; out earlier today to record my usual rebuttal I found that it really was<br>&gt; mostly a matter of taste. Yes, this looks weird to me:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; let callback: (Data) -&gt; NSCoding &amp; NSCopying<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; but I’m sure the infix ‘-&gt;’ for functions looked weird to everyone the<br>&gt; first time they saw it as well, and it really is pretty clear in argument<br>&gt; position.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; We could conceivably bracket the &#39;where&#39; constraints somewhere. It&#39;s<br>&gt; nice not to have to punish the common case syntax. In my personal ideal<br>&gt; vision of the world, I&#39;d like to see us support opening existentials via<br>&gt; path-dependent types (e.g., let a: Collection; let element: a.Element). If<br>&gt; we support them in decl-level &#39;where&#39; clauses, we provide a nice, clean<br>&gt; syntax for complex generic relationships that doesn&#39;t require angle<br>&gt; brackets or per-existential where clauses at all, something like:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;   func intersect(a: Collection, b: Collection) -&gt; Collection<br>&gt; &gt;&gt;       where a.Element == b.Element, b.Element == return.Element {<br>&gt; &gt;&gt;   }<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; which doesn&#39;t completely define away the need for &#39;where&#39; as part of<br>&gt; existential types, but would shrink it quite a bit.<br>&gt; &gt;<br>&gt; &gt; For some reason it had not clicked until your &#39;path dependent type&#39;<br>&gt; reference how reminicent of (U+00B7) this is. I watched nada&#39;s 2014<br>&gt; presentation again... but then it means intersection types would add a<br>&gt; lot... you guys seem ok to add P&amp;Q now, so why not take that opportunity to<br>&gt; allow P|Q at the same time. Does it also mean that you might consider at<br>&gt; some point expanding &#39;assoctype U&#39;  into:  T where &lt;:U , :&gt;U  opening the<br>&gt; door to lower/higher type bounds?<br>&gt;<br>&gt; Let&#39;s not rathole on the P|Q thing. Disjunctions are difficult to make<br>&gt; much sense of in a parametric type system like ours; there are plenty of<br>&gt; other threads on this mailing list discussing it.<br>&gt;<br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160627/add2e2f0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0095: Replace `protocol&lt;P1, P2&gt;` syntax with `P1 &amp; P2`</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June 27, 2016 at 09:00:00pm</p></header><div class="content"><p>As i said, already deeply regretted mentioning P|Q as on closer examination of a well known precedent it is very realistic to have P&amp;Q only.<br>Apologize again for not doing the due dilligence before pressing send.<br>(From mobile)<br></p><p>&gt; On Jun 27, 2016, at 7:04 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt; <br>&gt; I think the rationale thread for the original version of this proposal pretty much shut down the possibility of disjunctive type constraints. In fact, the primary argument against &#39;&amp;&#39; was that it would encourage conversations about &#39;|&#39;.<br>&gt; <br>&gt; It&#39;s also been added to the commonly rejected proposals list: https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md<br>&gt; <br>&gt;&gt; On Mon, Jun 27, 2016 at 9:48 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &gt; On Jun 25, 2016, at 12:00 AM, L. Mihalkovic &lt;laurent.mihalkovic at gmail.com&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Inline<br>&gt;&gt; &gt; Regards<br>&gt;&gt; &gt; (From mobile)<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; On Jun 25, 2016, at 1:00 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; On Jun 23, 2016, at 8:55 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; [Proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0095-any-as-existential.md ]<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; I’ve gone on record before as against this syntax, although when I set out earlier today to record my usual rebuttal I found that it really was mostly a matter of taste. Yes, this looks weird to me:<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; let callback: (Data) -&gt; NSCoding &amp; NSCopying<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; but I’m sure the infix ‘-&gt;’ for functions looked weird to everyone the first time they saw it as well, and it really is pretty clear in argument position.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; We could conceivably bracket the &#39;where&#39; constraints somewhere. It&#39;s nice not to have to punish the common case syntax. In my personal ideal vision of the world, I&#39;d like to see us support opening existentials via path-dependent types (e.g., let a: Collection; let element: a.Element). If we support them in decl-level &#39;where&#39; clauses, we provide a nice, clean syntax for complex generic relationships that doesn&#39;t require angle brackets or per-existential where clauses at all, something like:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;   func intersect(a: Collection, b: Collection) -&gt; Collection<br>&gt;&gt; &gt;&gt;       where a.Element == b.Element, b.Element == return.Element {<br>&gt;&gt; &gt;&gt;   }<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; which doesn&#39;t completely define away the need for &#39;where&#39; as part of existential types, but would shrink it quite a bit.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; For some reason it had not clicked until your &#39;path dependent type&#39; reference how reminicent of (U+00B7) this is. I watched nada&#39;s 2014 presentation again... but then it means intersection types would add a lot... you guys seem ok to add P&amp;Q now, so why not take that opportunity to allow P|Q at the same time. Does it also mean that you might consider at some point expanding &#39;assoctype U&#39;  into:  T where &lt;:U , :&gt;U  opening the door to lower/higher type bounds?<br>&gt;&gt; <br>&gt;&gt; Let&#39;s not rathole on the P|Q thing. Disjunctions are difficult to make much sense of in a parametric type system like ours; there are plenty of other threads on this mailing list discussing it.<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160627/d3addbcb/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0095: Replace `protocol&lt;P1, P2&gt;` syntax with `P1 &amp; P2`</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June 27, 2016 at 07:00:00pm</p></header><div class="content"><p>Inline<br></p><p>Regards&amp;Apologies<br>LM<br>(From mobile)<br></p><p>&gt; On Jun 27, 2016, at 6:48 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 25, 2016, at 12:00 AM, L. Mihalkovic &lt;laurent.mihalkovic at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Inline<br>&gt;&gt; Regards<br>&gt;&gt; (From mobile)<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 25, 2016, at 1:00 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 23, 2016, at 8:55 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; [Proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0095-any-as-existential.md ]<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’ve gone on record before as against this syntax, although when I set out earlier today to record my usual rebuttal I found that it really was mostly a matter of taste. Yes, this looks weird to me:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let callback: (Data) -&gt; NSCoding &amp; NSCopying<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; but I’m sure the infix ‘-&gt;’ for functions looked weird to everyone the first time they saw it as well, and it really is pretty clear in argument position.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We could conceivably bracket the &#39;where&#39; constraints somewhere. It&#39;s nice not to have to punish the common case syntax. In my personal ideal vision of the world, I&#39;d like to see us support opening existentials via path-dependent types (e.g., let a: Collection; let element: a.Element). If we support them in decl-level &#39;where&#39; clauses, we provide a nice, clean syntax for complex generic relationships that doesn&#39;t require angle brackets or per-existential where clauses at all, something like:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  func intersect(a: Collection, b: Collection) -&gt; Collection<br>&gt;&gt;&gt;      where a.Element == b.Element, b.Element == return.Element {<br>&gt;&gt;&gt;  }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; which doesn&#39;t completely define away the need for &#39;where&#39; as part of existential types, but would shrink it quite a bit.<br>&gt;&gt; <br>&gt;&gt; For some reason it had not clicked until your &#39;path dependent type&#39; reference how reminicent of (U+00B7) this is. I watched nada&#39;s 2014 presentation again... but then it means intersection types would add a lot... you guys seem ok to add P&amp;Q now, so why not take that opportunity to allow P|Q at the same time. Does it also mean that you might consider at some point expanding &#39;assoctype U&#39;  into:  T where &lt;:U , :&gt;U  opening the door to lower/higher type bounds?<br>&gt; <br>&gt; Let&#39;s not rathole on the P|Q thing. Disjunctions are difficult to make much sense of in a parametric type system like ours; there are plenty of other threads on this mailing list discussing it.<br></p><p>Already retracted the P|Q as bringing absolutely nothing required in the foreseeable future. Apologies again for not having the presence of mind to see it before clicking send.<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
