<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/15cc745a2ea99e2f6838fdb82c8e45ca?s=50"></div><header><strong>[Review] SE-0016 - Adding initializers to Int and UInt to convert from UnsafePointer and UnsafeMutablePointer</strong> from <string>fukurokujo</string> &lt;fukurokujoe at googlemail.com&gt;<p>March 28, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; * What is your evaluation of the proposal?<br></p><p>-1<br></p><p>&gt; * Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>No `UnsafePointer` and `UnsafeMutablePointer` already provide their address  as Int by their `hashValue` property (maybe add a dedicated `address` property that returns this???), this means it is already possible to do XOR on the addresses of two pointers. <br></p><p>&gt; * Does this proposal fit well with the feel and direction of Swift?<br></p><p>No, UnsafePointer and UnsafeMutablePointer etc. should be only used in rare cases e.g. interaction with C APIs or similar.<br>But maybe there should be a dedicated `address` property as `hashValue` seems to be a bit non obvious.<br></p><p>&gt; * If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Everything in the proposal is already possible and if one creates a XOR operator for unsafe pointers via their `hashValue` it<br>does not differ too much from doing the same thing in a language like C.<br></p><p>&gt; * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Implemented functions that make use of XORing unsafe pointers in Swift.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Review] SE-0016 - Adding initializers to Int and UInt to convert from UnsafePointer and UnsafeMutablePointer</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>March 28, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Mar 28, 2016, at 4:47, fukurokujo via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; * What is your evaluation of the proposal?<br>&gt; <br>&gt; -1<br>&gt; <br>&gt;&gt; * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; No `UnsafePointer` and `UnsafeMutablePointer` already provide their address  as Int by their `hashValue` property (maybe add a dedicated `address` property that returns this???), this means it is already possible to do XOR on the addresses of two pointers. <br></p><p>The use of &#39;hashValue&#39; to get an address is not something you should rely on; it is very possible we&#39;ll decide to change the hashing algorithm for pointers in the future. But &quot;I think a property would be a better API&quot; is certainly still valid and useful feedback.<br></p><p>Jordan<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
