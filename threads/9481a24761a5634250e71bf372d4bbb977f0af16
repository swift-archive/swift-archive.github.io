<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9d9d4c769b20cd12b15f4e5b991b4ca5?s=50"></div><header><strong>General take on &quot;special&quot; code in Swift</strong> from <string>Timothy J. Wood</string> &lt;tjw at omnigroup.com&gt;<p>December  3, 2015 at 11:00:00pm</p></header><div class="content"><p>First off, thanks for all the hard work in putting together an in-depth release and open community infrastructure!<br></p><p>Looking through the Swift sources briefly, I?m noticing various constructs that aren?t documented, idiomatic Swift, or even Swift at all. This isn?t super surprising for various mostly obvious reasons. But, one particular example that caught my attention is in swift/util/gyb.py (&quot;GYB: Generate Your Boilerplate?), and all the .gyb files scattered around.<br></p><p>One of the various Apple Swift tutorial/reference PDFs had the canonical maligning of the C preprocessor (warranted, but yet it is a powerful and useful tool), and yet here is the Swift standard library using a preprocessor of another sort.<br></p><p>For this specific case, I could ask for some magical hygienic macro support, with full debugger support, autocompletion, and puppies (which would be great!), but the more general question is whether the Swift team feels like this dichotomy is OK, or whether it just (a ton of) work that is left to do? Should it be the case that the standard library, Foundation, testing frameworks, and such are almost entirely idiomatic Swift code (even if they are using advanced features)?<br></p><p>Thanks again ? it?s been an exciting day for Swift!<br></p><p>-tim<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>General take on &quot;special&quot; code in Swift</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December  4, 2015 at 03:00:00pm</p></header><div class="content"><p>&gt; On Dec 3, 2015, at 11:21 PM, Timothy Wood &lt;tjw at omnigroup.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; First off, thanks for all the hard work in putting together an in-depth release and open community infrastructure!<br>&gt; <br>&gt; Looking through the Swift sources briefly, I’m noticing various constructs that aren’t documented, idiomatic Swift, or even Swift at all. This isn’t super surprising for various mostly obvious reasons. But, one particular example that caught my attention is in swift/util/gyb.py (&quot;GYB: Generate Your Boilerplate”), and all the .gyb files scattered around.<br>&gt; <br>&gt; One of the various Apple Swift tutorial/reference PDFs had the canonical maligning of the C preprocessor (warranted, but yet it is a powerful and useful tool), and yet here is the Swift standard library using a preprocessor of another sort.<br>&gt; <br>&gt; For this specific case, I could ask for some magical hygienic macro support, with full debugger support, autocompletion, and puppies (which would be great!), but the more general question is whether the Swift team feels like this dichotomy is OK, or whether it just (a ton of) work that is left to do? Should it be the case that the standard library, Foundation, testing frameworks, and such are almost entirely idiomatic Swift code (even if they are using advanced features)?<br></p><p>This is a better question for swift-dev than swift-evolution, but…<br></p><p>IMO, “gyb” is a pragmatic but unfortunate tool.  It fills the same space as the underscored protocols in the standard library: it allows us to ship a product that is useful, but they are both far from ideal.  The _ protocols were generally forced by some limitations in the generics system and other parts of the compiler.  GYB is needed by those, but also by the fact that we don’t have a hygienic macro system (we certainly won’t have a macro system in Swift 3, but could consider it after that).<br></p><p>The good news is that the need for these things is being reduced as Swift improves.<br></p><p>-Chris<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
