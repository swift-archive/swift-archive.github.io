<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Pre-proposal/Discussion] Padding and Smaller Integer Types?</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>August  3, 2016 at 01:00:00pm</p></header><div class="content"><p>So we have a pretty good set of integer types right now, but one issue I come into is when they don&#39;t quite fit within the padding of a type. It&#39;s not something I&#39;ve ever really thought about before, since most of my background is in OOP with reference types (Java for example) and these don&#39;t really encourage you to think about it, but with value types I find myself doing so quite a lot.<br></p><p>For example, an Int32? has space for a four-byte integer value, plus one extra bit to indicate whether it is a .None or a .Some, this means that it&#39;s padded to 5-bytes. If I create a struct containing an optional Int32, I have seven bits of free space before the type grows in size again (more if I target the type&#39;s stride width), so I could add up to seven Bool values if I wanted in this case.<br>But what if I want to add another small integer? If I add a UInt8 this will cause the type&#39;s size to grow (as it&#39;ll still have one-bit of extra overhead), but I may not require the full range from the UInt8.<br></p><p>The simple solution to this might be introduce an Octet type (Int4/UInt4) but that may actually be smaller than I need; what if what I would really like is a UInt7 type?<br></p><p><br>Now I&#39;m not very familiar with how other languages solve problems like this; as I say I&#39;ve mostly worked with reference based OOP languages in the past, and only worked fleetingly with C (I can modify code, but haven&#39;t written anything new in it in a very long time), so I guess I&#39;m mostly just looking to find those with more knowledge than me on the subject to see if there are some good solutions to this? Swift&#39;s rich support for optionals, and enums in general, make small overheads like this more common, so a neat way to work with them would be nice.<br></p><p>In my mind the most perfect option would be some kind of integer type for which I can specify a minimum range for what I need, but which I can have scaled in size to fill, but avoid growing, my type&#39;s size or stride. For example, if my type is intended for storage in arrays exclusively, then I might like to use up all of the free space in my type&#39;s stride width, only growing if it is necessary to achieve the minimum range of values I require. So I might require a minimum range of 0-127 (7 bits unsigned) but end up with a wider type that I can make use of generically by querying the min/max values, i.e- if the remaining space is 7-bits then my integer will fill that perfectly, if the remaining space is 13-bits I will end up with a 13-bit integer, if remaining space is 3-bits the type might grow by 16-bits, giving me a 19-bit integer.<br>Is such a thing possible? If so, how is it achieved in other languages?<br></p><p><br>Sorry about the lack of knowledge in my part on this subject; like I say it&#39;s nothing I&#39;ve really thought about before, but now that I&#39;m working with a value type that I want to pack as efficiently as possible into an array (while remaining useful) it&#39;s something that is suddenly of interest to me =D<br></p><p>All ideas and thoughts welcome!<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdd257c9369fb68e1d06923d10ff789e?s=50"></div><header><strong>[Pre-proposal/Discussion] Padding and Smaller Integer Types?</strong> from <string>Ben Rimmington</string> &lt;me at benrimmington.com&gt;<p>August  3, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On 3 Aug 2016, at 13:15, Haravikk wrote:<br>&gt; <br>&gt; So we have a pretty good set of integer types right now, but one issue I come into is when they don&#39;t quite fit within the padding of a type. It&#39;s not something I&#39;ve ever really thought about before, since most of my background is in OOP with reference types (Java for example) and these don&#39;t really encourage you to think about it, but with value types I find myself doing so quite a lot.<br>&gt; <br>&gt; For example, an Int32? has space for a four-byte integer value, plus one extra bit to indicate whether it is a .None or a .Some, this means that it&#39;s padded to 5-bytes. If I create a struct containing an optional Int32, I have seven bits of free space before the type grows in size again (more if I target the type&#39;s stride width), so I could add up to seven Bool values if I wanted in this case.<br>&gt; But what if I want to add another small integer? If I add a UInt8 this will cause the type&#39;s size to grow (as it&#39;ll still have one-bit of extra overhead), but I may not require the full range from the UInt8.<br>&gt; <br>&gt; The simple solution to this might be introduce an Octet type (Int4/UInt4) but that may actually be smaller than I need; what if what I would really like is a UInt7 type?<br>&gt; <br>&gt; <br>&gt; Now I&#39;m not very familiar with how other languages solve problems like this; as I say I&#39;ve mostly worked with reference based OOP languages in the past, and only worked fleetingly with C (I can modify code, but haven&#39;t written anything new in it in a very long time), so I guess I&#39;m mostly just looking to find those with more knowledge than me on the subject to see if there are some good solutions to this? Swift&#39;s rich support for optionals, and enums in general, make small overheads like this more common, so a neat way to work with them would be nice.<br>&gt; <br>&gt; In my mind the most perfect option would be some kind of integer type for which I can specify a minimum range for what I need, but which I can have scaled in size to fill, but avoid growing, my type&#39;s size or stride. For example, if my type is intended for storage in arrays exclusively, then I might like to use up all of the free space in my type&#39;s stride width, only growing if it is necessary to achieve the minimum range of values I require. So I might require a minimum range of 0-127 (7 bits unsigned) but end up with a wider type that I can make use of generically by querying the min/max values, i.e- if the remaining space is 7-bits then my integer will fill that perfectly, if the remaining space is 13-bits I will end up with a 13-bit integer, if remaining space is 3-bits the type might grow by 16-bits, giving me a 19-bit integer.<br>&gt; Is such a thing possible? If so, how is it achieved in other languages?<br>&gt; <br>&gt; <br>&gt; Sorry about the lack of knowledge in my part on this subject; like I say it&#39;s nothing I&#39;ve really thought about before, but now that I&#39;m working with a value type that I want to pack as efficiently as possible into an array (while remaining useful) it&#39;s something that is suddenly of interest to me =D<br>&gt; <br>&gt; All ideas and thoughts welcome!<br></p><p>UnicodeScalar previously stored its _value as Builtin.Int21 (instead of the current UInt32).<br></p><p>&lt;https://github.com/apple/swift/blob/b86ebcc042ae87b3de64dcaa7100454291446da2/stdlib/core/UnicodeScalar.swift&gt;<br></p><p>There are some out-of-date examples, where enums with UnicodeScalar payloads used the spare bits (i32 \ i21) for the tag.<br></p><p>&lt;https://github.com/apple/swift/blob/master/docs/ABI.rst#single-payload-enums&gt;<br>&lt;https://github.com/apple/swift/blob/master/docs/ABI.rst#multi-payload-enums&gt;<br></p><p>Maybe these strategies can&#39;t be used for libraries with binary compatibility?<br></p><p>&lt;http://jrose-apple.github.io/swift-library-evolution/#enums&gt;<br></p><p>-- Ben<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
