<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Pitch] Introducing #fileName debug identifier</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>March 12, 2016 at 08:00:00pm</p></header><div class="content"><p>Here is a small one as pitches go, but I think it embraces the spirit of the Groff (http://bit.ly/1pn47Yr &lt;http://bit.ly/1pn47Yr&gt;).<br></p><p>Of all the possible expansions brought up in the SE-0028 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0028-modernizing-debug-identifiers.md&gt;  discussion on modernizing <br>debug identifiers, I would get a lot of use out of `#fileName`  for my debug logging.<br>A simple websearch &lt;https://www.google.com/?gws_rd=ssl#q=__FILE__+lastPathComponent&gt; for `__FILE__ lastPathComponent` yields page after page of results<br>across both Swift and Objective-C.<br></p><p>My idea is that a `#fileName` debug identifier would return the file name and not the entire <br>path for logging. Instead of <br></p><p>`CoreError(reason: &quot;Reason&quot;, context: &quot;/Users/ericasadun/Desktop/SviftTestbed/SviftTestbed/main.swift:29&quot;) // #file, #line`<br></p><p>you&#39;d be able to grab<br></p><p>`CoreError(reason: &quot;Reason&quot;, context: &quot;main.swift:29&quot;) // #fileName, #line`<br></p><p>all in native Swift without having to bridge to `NSString` or call `lastPathComponent`.<br></p><p>A bit of water has gone under the #identifier bridge since SE-0028, specifically a general embrace of<br>lowerCamelCase identifiers and unambiguous names. I think `#fileName` conforms to that<br>philosophy. <br></p><p>(One might want to rename `#line` to `#lineNumber`, `#file` to `#filePath`, and `#column`<br>to `#fileColumn` but those lie outside the scope of this pitch.)<br></p><p>groffishly I hope,<br></p><p>-- E<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160312/ef80349a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>[Pitch] Introducing #fileName debug identifier</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>March 12, 2016 at 07:00:00pm</p></header><div class="content"><p>On Sat, Mar 12, 2016 at 7:04 PM, Erica Sadun via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt; Here is a small one as pitches go, but I think it embraces the spirit of the<br>&gt; Groff (http://bit.ly/1pn47Yr).<br>&gt;<br>&gt; Of all the possible expansions brought up in the SE-0028  discussion on<br>&gt; modernizing<br>&gt; debug identifiers, I would get a lot of use out of `#fileName`  for my debug<br>&gt; logging.<br>&gt; A simple websearch for `__FILE__ lastPathComponent` yields page after page<br>&gt; of results<br>&gt; across both Swift and Objective-C.<br>&gt;<br>&gt; My idea is that a `#fileName` debug identifier would return the file name<br>&gt; and not the entire<br>&gt; path for logging.<br></p><p>It should be OK to have multiple files with the same name in the<br>project.  For example, in the Swift compiler we have Decl.cpp in both<br>Clang and Swift.  It is important to distinguish these in the<br>assertion messages.<br></p><p>Thus, I&#39;d suggest to consider instead passing the project directory to<br>the compiler, so that the compiler can provide a file name relative to<br>the project root.<br></p><p>You can even go as far as replacing the project root with the<br>project-version string.  For example:<br></p><p>#relativeFileName could expand to<br>&quot;&lt;MyStringExtras-1.0&gt;/String+KnuthMorrisPrattSearch.swift&quot;<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Pitch] Introducing #fileName debug identifier</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>March 12, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Mar 12, 2016, at 8:27 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; It should be OK to have multiple files with the same name in the<br>&gt; project.  For example, in the Swift compiler we have Decl.cpp in both<br>&gt; Clang and Swift.  It is important to distinguish these in the<br>&gt; assertion messages.<br>&gt; <br>&gt; Thus, I&#39;d suggest to consider instead passing the project directory to<br>&gt; the compiler, so that the compiler can provide a file name relative to<br>&gt; the project root.<br></p><p>Agreed that name overlap is possible. I tend to use a lot of shared code<br>with &quot;add reference&quot; vs &quot;add file&quot; and relative-to-project-root actually <br>ends up longer that way than just absolute path.<br></p><p>-- Erica<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160312/9721ad3f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4002684831b0a89736f4837d2e60f66a?s=50"></div><header><strong>[Pitch] Introducing #fileName debug identifier</strong> from <string>Pierre Monod-Broca</string> &lt;pierremonodbroca at gmail.com&gt;<p>March 13, 2016 at 06:00:00pm</p></header><div class="content"><p>TLDR: a path relative to the project would be nice.<br></p><p>I agree an absolute path is often too much. <br>I don&#39;t have much file name overlap, but would it happen I reckon I would be glad to be able to differentiate them.<br></p><p>Pierre<br></p><p>&gt; Le 13 mars 2016 à 05:07, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; <br>&gt;&gt; On Mar 12, 2016, at 8:27 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt; It should be OK to have multiple files with the same name in the<br>&gt;&gt; project.  For example, in the Swift compiler we have Decl.cpp in both<br>&gt;&gt; Clang and Swift.  It is important to distinguish these in the<br>&gt;&gt; assertion messages.<br>&gt;&gt; <br>&gt;&gt; Thus, I&#39;d suggest to consider instead passing the project directory to<br>&gt;&gt; the compiler, so that the compiler can provide a file name relative to<br>&gt;&gt; the project root.<br>&gt; <br>&gt; Agreed that name overlap is possible. I tend to use a lot of shared code<br>&gt; with &quot;add reference&quot; vs &quot;add file&quot; and relative-to-project-root actually <br>&gt; ends up longer that way than just absolute path.<br>&gt; <br>&gt; -- Erica<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160313/5b00f955/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Pitch] Introducing #fileName debug identifier</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>March 14, 2016 at 11:00:00am</p></header><div class="content"><p>Agreed. It’s really not useful for anyone to see `/Users/radex/Documents/Projects/MillionDollarAppIdea/` when logging errors or… anything really.<br></p><p>I think a project-relative path should just be the new #file. I’m not even sure the full absolute path is necessary — but if it is, I’d rename it.<br></p><p>— Radek<br></p><p>&gt; On 13 Mar 2016, at 18:12, Pierre Monod-Broca via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; TLDR: a path relative to the project would be nice.<br>&gt; <br>&gt; I agree an absolute path is often too much. <br>&gt; I don&#39;t have much file name overlap, but would it happen I reckon I would be glad to be able to differentiate them.<br>&gt; <br>&gt; Pierre<br>&gt; <br>&gt; Le 13 mars 2016 à 05:07, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Mar 12, 2016, at 8:27 PM, Dmitri Gribenko &lt;gribozavr at gmail.com &lt;mailto:gribozavr at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; It should be OK to have multiple files with the same name in the<br>&gt;&gt;&gt; project.  For example, in the Swift compiler we have Decl.cpp in both<br>&gt;&gt;&gt; Clang and Swift.  It is important to distinguish these in the<br>&gt;&gt;&gt; assertion messages.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thus, I&#39;d suggest to consider instead passing the project directory to<br>&gt;&gt;&gt; the compiler, so that the compiler can provide a file name relative to<br>&gt;&gt;&gt; the project root.<br>&gt;&gt; <br>&gt;&gt; Agreed that name overlap is possible. I tend to use a lot of shared code<br>&gt;&gt; with &quot;add reference&quot; vs &quot;add file&quot; and relative-to-project-root actually <br>&gt;&gt; ends up longer that way than just absolute path.<br>&gt;&gt; <br>&gt;&gt; -- Erica<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160314/0c7332a6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e0a5152b275c43b493a94b5a6a868905?s=50"></div><header><strong>[Pitch] Introducing #fileName debug identifier</strong> from <string>Pyry Jahkola</string> &lt;pyry.jahkola at iki.fi&gt;<p>March 14, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On 14 Mar 2016, at 12:40, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Agreed. It’s really not useful for anyone to see `/Users/radex/Documents/Projects/MillionDollarAppIdea/` when logging errors or… anything really.<br>&gt; <br>&gt; I think a project-relative path should just be the new #file. I’m not even sure the full absolute path is necessary — but if it is, I’d rename it.<br></p><p>I think the biggest part of the problem is that Xcode has no option for building the project with relative file paths.<br></p><p>If file paths were relative (and `$PWD` were set to the project root—like it indeed is!) then `#file` would be the relative name. Actually, you can try it out, just give `swiftc` a roll yourself!<br></p><p>$ echo &#39;print(#file)&#39; &gt; foobar.swift<br></p><p>$ swiftc foobar.swift -o foobar &amp;&amp; ./foobar<br>foobar.swift<br></p><p>$ swiftc &quot;$PWD&quot;/foobar.swift -o foobar &amp;&amp; ./foobar<br>/Users/pyrtsa/foobar.swift<br></p><p>— Pyry<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160314/f48b8eb3/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Pitch] Introducing #fileName debug identifier</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>March 14, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Mar 12, 2016, at 7:27 PM, Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Sat, Mar 12, 2016 at 7:04 PM, Erica Sadun via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; Here is a small one as pitches go, but I think it embraces the spirit of the<br>&gt;&gt; Groff (http://bit.ly/1pn47Yr).<br>&gt;&gt; <br>&gt;&gt; Of all the possible expansions brought up in the SE-0028  discussion on<br>&gt;&gt; modernizing<br>&gt;&gt; debug identifiers, I would get a lot of use out of `#fileName`  for my debug<br>&gt;&gt; logging.<br>&gt;&gt; A simple websearch for `__FILE__ lastPathComponent` yields page after page<br>&gt;&gt; of results<br>&gt;&gt; across both Swift and Objective-C.<br>&gt;&gt; <br>&gt;&gt; My idea is that a `#fileName` debug identifier would return the file name<br>&gt;&gt; and not the entire<br>&gt;&gt; path for logging.<br>&gt; <br>&gt; It should be OK to have multiple files with the same name in the<br>&gt; project.  For example, in the Swift compiler we have Decl.cpp in both<br>&gt; Clang and Swift.  It is important to distinguish these in the<br>&gt; assertion messages.<br>&gt; <br>&gt; Thus, I&#39;d suggest to consider instead passing the project directory to<br>&gt; the compiler, so that the compiler can provide a file name relative to<br>&gt; the project root.<br></p><p>If it is practical to get the module-relative path, I’d rather see us switch #file to produce *that*, and introduce a #fullPath that produces the current behavior.  Rationale: we want to encourage deterministic and stable builds wherever possible, and including the full path to a source file breaks the ability to build in different directories (e.g. two different users’s homedirs) and get the same executable out.<br></p><p>-Chris<br></p><p>&gt; <br>&gt; You can even go as far as replacing the project root with the<br>&gt; project-version string.  For example:<br>&gt; <br>&gt; #relativeFileName could expand to<br>&gt; &quot;&lt;MyStringExtras-1.0&gt;/String+KnuthMorrisPrattSearch.swift&quot;<br>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Pitch] Introducing #fileName debug identifier</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>March 14, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Mar 14, 2016, at 2:37 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; If it is practical to get the module-relative path, I’d rather see us switch #file to produce *that*, and introduce a #fullPath that produces the current behavior.  Rationale: we want to encourage deterministic and stable builds wherever possible, and including the full path to a source file breaks the ability to build in different directories (e.g. two different users’s homedirs) and get the same executable out.<br></p><p>I&#39;d like to know one way or another. My current understanding is that this is not produced as part of the build.<br></p><p>And, quite honestly, I&#39;d sort of like to see better names. I stuck with file, line, column, and function because those were the current art.<br>Now that the identifiers are growing, relativeFilePath, fullFilePath, fileName, lineNumber (or fileLineNumber), fileColumn, and functionSignature (that&#39;s somehow compliant with the updated signatures proposal) seem more appropriate. The old &quot;function&quot; string just feels archaic and wrong.<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160314/9c08a2ac/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>[Pitch] Introducing #fileName debug identifier</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>March 14, 2016 at 02:00:00pm</p></header><div class="content"><p>On Mon, Mar 14, 2016 at 1:49 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;<br>&gt; On Mar 14, 2016, at 2:37 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; If it is practical to get the module-relative path, I’d rather see us switch<br>&gt; #file to produce *that*, and introduce a #fullPath that produces the current<br>&gt; behavior.  Rationale: we want to encourage deterministic and stable builds<br>&gt; wherever possible, and including the full path to a source file breaks the<br>&gt; ability to build in different directories (e.g. two different users’s<br>&gt; homedirs) and get the same executable out.<br>&gt;<br>&gt;<br>&gt; I&#39;d like to know one way or another. My current understanding is that this<br>&gt; is not produced as part of the build.<br></p><p>Just wanted to remind everyone that we control the whole stack, the<br>swift compiler, the package manager etc.  If something needs to change<br>in the tooling to pass extra arguments to the compiler to support this<br>feature, we can coordinate across all projects and make it happen.<br>Let&#39;s figure out an end state that we like, and that is feasible to<br>implement.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Pitch] Introducing #fileName debug identifier</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>March 14, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Mar 14, 2016, at 1:49 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Mar 14, 2016, at 2:37 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt; If it is practical to get the module-relative path, I’d rather see us switch #file to produce *that*, and introduce a #fullPath that produces the current behavior.  Rationale: we want to encourage deterministic and stable builds wherever possible, and including the full path to a source file breaks the ability to build in different directories (e.g. two different users’s homedirs) and get the same executable out.<br>&gt; <br>&gt; I&#39;d like to know one way or another. My current understanding is that this is not produced as part of the build.<br>&gt; <br>&gt; And, quite honestly, I&#39;d sort of like to see better names. I stuck with file, line, column, and function because those were the current art.<br>&gt; Now that the identifiers are growing, relativeFilePath, fullFilePath, fileName, lineNumber (or fileLineNumber), fileColumn, and functionSignature (that&#39;s somehow compliant with the updated signatures proposal) seem more appropriate. The old &quot;function&quot; string just feels archaic and wrong.<br></p><p>In this case, I don’t think that more is better.  Having too many options and knobs is not good for anyone.  Having #file produce the module-relative path (including the module name) serves all of the use-cases that I’m aware of, since you can further slice and dice it to get the base file name out.  <br></p><p>What other use cases exist, and how important are they?<br></p><p>-Chris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160314/fe9f811b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Pitch] Introducing #fileName debug identifier</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>March 14, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Mar 14, 2016, at 6:09 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Mar 14, 2016, at 1:49 PM, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Mar 14, 2016, at 2:37 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; If it is practical to get the module-relative path, I’d rather see us switch #file to produce *that*, and introduce a #fullPath that produces the current behavior.  Rationale: we want to encourage deterministic and stable builds wherever possible, and including the full path to a source file breaks the ability to build in different directories (e.g. two different users’s homedirs) and get the same executable out.<br>&gt;&gt; <br>&gt;&gt; I&#39;d like to know one way or another. My current understanding is that this is not produced as part of the build.<br>&gt;&gt; <br>&gt;&gt; And, quite honestly, I&#39;d sort of like to see better names. I stuck with file, line, column, and function because those were the current art.<br>&gt;&gt; Now that the identifiers are growing, relativeFilePath, fullFilePath, fileName, lineNumber (or fileLineNumber), fileColumn, and functionSignature (that&#39;s somehow compliant with the updated signatures proposal) seem more appropriate. The old &quot;function&quot; string just feels archaic and wrong.<br>&gt; <br>&gt; In this case, I don’t think that more is better.  Having too many options and knobs is not good for anyone.  Having #file produce the module-relative path (including the module name) serves all of the use-cases that I’m aware of, since you can further slice and dice it to get the base file name out.  <br>&gt; <br>&gt; What other use cases exist, and how important are they?<br>&gt; <br>&gt; -Chris<br></p><p>Module-relative path seems to be most highly requested.<br></p><p>If you google for __FILE__ and lastPathComponent, clearly I&#39;m not the only one out there who would be happy for the convenience but so far I have not heard any voice on-list support the idea.<br></p><p>As for function, which returns a string, at a minimum, wouldn&#39;t it be better to return a GregorString (UIView.insertSubview(_:at:)) vs a __FUNCTION__ string (insertSubview).<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160314/b364091b/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
