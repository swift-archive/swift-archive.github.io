<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>mandatory &quot;?&quot; suffix for identifiers associated with optional types</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>December  4, 2015 at 10:00:00am</p></header><div class="content"><p>So for example the following (probable) bug would result in a compile error:<br></p><p>let f = x &lt; 5 // where x is optional and could be nil<br></p><p>If that was really what was intended, you would need to write:<br></p><p>let f = x? &lt; 5<br></p><p>Similarly, the rule would also apply for functions that return an optional type:<br></p><p>let f = x()? &lt; 5<br></p><p>A major advantage of this approach is it would encourage programmers to unwrap optionals early to avoid writing ??? and ??!&quot; frequently in their code.<br></p><p>Note that conditional chaining would just make use of the existing ??? suffix. There is no need to add another ??? after that.<br></p><p>let f = x?.g?.h<br>let f = x()?.g?.h<br></p><p>As for implicitly unwrapped optionals, a ??? suffix would only be used when you want to treat a value as an optional (e.g., when comparing it to nil). For example, for x of type Int?, one could write:<br></p><p>let y = (x? == nil) ? 0 : x<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>mandatory &quot;?&quot; suffix for identifiers associated with optional types</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>December  4, 2015 at 09:00:00am</p></header><div class="content"><p>This a little confusing, I don&#39;t think adding yet another question mark<br>helps. The ?? ( nil coalescing operator) already included in swift handles<br>checking for nil values. If anything, the ternary operator just makes<br>matters worse in this example.  If else would be better imo.<br></p><p>https://lists.swift.org/pipermail/swift-evolution/2015-December/000133.html<br></p><p><br>On Friday, December 4, 2015, Amir Michail &lt;a.michail at me.com&gt; wrote:<br></p><p>&gt; So for example the following (probable) bug would result in a compile<br>&gt; error:<br>&gt;<br>&gt; let f = x &lt; 5 // where x is optional and could be nil<br>&gt;<br>&gt; If that was really what was intended, you would need to write:<br>&gt;<br>&gt; let f = x? &lt; 5<br>&gt;<br>&gt; Similarly, the rule would also apply for functions that return an optional<br>&gt; type:<br>&gt;<br>&gt; let f = x()? &lt; 5<br>&gt;<br>&gt; A major advantage of this approach is it would encourage programmers to<br>&gt; unwrap optionals early to avoid writing ??? and ??!&quot; frequently in their<br>&gt; code.<br>&gt;<br>&gt; Note that conditional chaining would just make use of the existing ???<br>&gt; suffix. There is no need to add another ??? after that.<br>&gt;<br>&gt; let f = x?.g?.h<br>&gt; let f = x()?.g?.h<br>&gt;<br>&gt; As for implicitly unwrapped optionals, a ??? suffix would only be used<br>&gt; when you want to treat a value as an optional (e.g., when comparing it to<br>&gt; nil). For example, for x of type Int?, one could write:<br>&gt;<br>&gt; let y = (x? == nil) ? 0 : x<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;javascript:;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/ef0cd973/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>mandatory &quot;?&quot; suffix for identifiers associated with optional types</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>December  4, 2015 at 10:00:00am</p></header><div class="content"><p>&gt; On Dec 4, 2015, at 10:41 AM, J. Cheyo Jimenez &lt;cheyo at masters3d.com&gt; wrote:<br>&gt; <br>&gt; This a little confusing, I don&#39;t think adding yet another question mark helps. The ?? ( nil coalescing operator) already included in swift handles checking for nil values. If anything, the ternary operator just makes matters worse in this example.  If else would be better imo. <br>&gt; <br>&gt; https://lists.swift.org/pipermail/swift-evolution/2015-December/000133.html &lt;https://lists.swift.org/pipermail/swift-evolution/2015-December/000133.html&gt;<br>&gt; <br>&gt; <br></p><p>I don?t want to remember if a variable is optional. I want to see it in the variable name.<br></p><p>&gt; On Friday, December 4, 2015, Amir Michail &lt;a.michail at me.com &lt;mailto:a.michail at me.com&gt;&gt; wrote:<br>&gt; So for example the following (probable) bug would result in a compile error:<br>&gt; <br>&gt; let f = x &lt; 5 // where x is optional and could be nil<br>&gt; <br>&gt; If that was really what was intended, you would need to write:<br>&gt; <br>&gt; let f = x? &lt; 5<br>&gt; <br>&gt; Similarly, the rule would also apply for functions that return an optional type:<br>&gt; <br>&gt; let f = x()? &lt; 5<br>&gt; <br>&gt; A major advantage of this approach is it would encourage programmers to unwrap optionals early to avoid writing ??? and ??!&quot; frequently in their code.<br>&gt; <br>&gt; Note that conditional chaining would just make use of the existing ??? suffix. There is no need to add another ??? after that.<br>&gt; <br>&gt; let f = x?.g?.h<br>&gt; let f = x()?.g?.h<br>&gt; <br>&gt; As for implicitly unwrapped optionals, a ??? suffix would only be used when you want to treat a value as an optional (e.g., when comparing it to nil). For example, for x of type Int?, one could write:<br>&gt; <br>&gt; let y = (x? == nil) ? 0 : x<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;javascript:;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/efc382fe/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>mandatory &quot;?&quot; suffix for identifiers associated with optional types</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>December  4, 2015 at 08:00:00am</p></header><div class="content"><p>Ruby recently ran into a similar problem from the other direction - they wanted to support ?. syntax, but ??? was already legal in identifier names (and used) to represent result values which are meant to be considered ?truthy?. In the end, they went with a different ?&amp;.&quot; syntax because<br>1. This meant ??? was both a naming convention and an operation<br>2. Too many question marks made the code psychologically confusing<br>3. They already had to change the syntax (to ?.??) to make code unambiguous<br></p><p>An naming system or pattern indicating something optional isn?t a bad idea - but it probably shouldn?t use ??? for the same reason. A ??? is already used heavily to indicate actions against optionals, and every time you see that identifier you will have to think about whether you are just referencing it by name, or performing some operation on it.<br></p><p>I think you however are pushing for a mandatory naming system for optionals - to make it clear in your examples below that ?x? needs to be treated as an optional, not as the type contained within. This makes coming up with an acceptable system significantly harder.<br></p><p>-DW<br></p><p>&gt; On Dec 4, 2015, at 8:44 AM, Amir Michail &lt;a.michail at me.com&gt; wrote:<br>&gt; <br>&gt; I don?t want to remember if a variable is optional. I want to see it in the variable name.<br>&gt; <br>&gt;&gt; On Friday, December 4, 2015, Amir Michail &lt;a.michail at me.com &lt;mailto:a.michail at me.com&gt;&gt; wrote:<br>&gt;&gt; So for example the following (probable) bug would result in a compile error:<br>&gt;&gt; <br>&gt;&gt; let f = x &lt; 5 // where x is optional and could be nil<br>&gt;&gt; <br>&gt;&gt; If that was really what was intended, you would need to write:<br>&gt;&gt; <br>&gt;&gt; let f = x? &lt; 5<br>&gt;&gt; <br>&gt;&gt; Similarly, the rule would also apply for functions that return an optional type:<br>&gt;&gt; <br>&gt;&gt; let f = x()? &lt; 5<br>&gt;&gt; <br>&gt;&gt; A major advantage of this approach is it would encourage programmers to unwrap optionals early to avoid writing ??? and ??!&quot; frequently in their code.<br>&gt;&gt; <br>&gt;&gt; Note that conditional chaining would just make use of the existing ??? suffix. There is no need to add another ??? after that.<br>&gt;&gt; <br>&gt;&gt; let f = x?.g?.h<br>&gt;&gt; let f = x()?.g?.h<br>&gt;&gt; <br>&gt;&gt; As for implicitly unwrapped optionals, a ??? suffix would only be used when you want to treat a value as an optional (e.g., when comparing it to nil). For example, for x of type Int?, one could write:<br>&gt;&gt; <br>&gt;&gt; let y = (x? == nil) ? 0 : x<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/af8f54ea/attachment-0001.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: smime.p7s<br>Type: application/pkcs7-signature<br>Size: 4139 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/af8f54ea/attachment-0001.p7s&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>mandatory &quot;?&quot; suffix for identifiers associated with optional types</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>December  4, 2015 at 10:00:00am</p></header><div class="content"><p>Couldn?t this issue of remembering which variables are optional be solved in the IDE by using a different color for optionals or something like that?<br></p><p>l8r<br>Sean<br></p><p><br>&gt; On Dec 4, 2015, at 9:56 AM, David Waite &lt;david at alkaline-solutions.com&gt; wrote:<br>&gt; <br>&gt; Ruby recently ran into a similar problem from the other direction - they wanted to support ?. syntax, but ??? was already legal in identifier names (and used) to represent result values which are meant to be considered ?truthy?. In the end, they went with a different ?&amp;.&quot; syntax because<br>&gt; 1. This meant ??? was both a naming convention and an operation<br>&gt; 2. Too many question marks made the code psychologically confusing<br>&gt; 3. They already had to change the syntax (to ?.??) to make code unambiguous<br>&gt; <br>&gt; An naming system or pattern indicating something optional isn?t a bad idea - but it probably shouldn?t use ??? for the same reason. A ??? is already used heavily to indicate actions against optionals, and every time you see that identifier you will have to think about whether you are just referencing it by name, or performing some operation on it.<br>&gt; <br>&gt; I think you however are pushing for a mandatory naming system for optionals - to make it clear in your examples below that ?x? needs to be treated as an optional, not as the type contained within. This makes coming up with an acceptable system significantly harder.<br>&gt; <br>&gt; -DW<br>&gt; <br>&gt;&gt; On Dec 4, 2015, at 8:44 AM, Amir Michail &lt;a.michail at me.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I don?t want to remember if a variable is optional. I want to see it in the variable name.<br>&gt;&gt; <br>&gt;&gt;&gt; On Friday, December 4, 2015, Amir Michail &lt;a.michail at me.com&gt; wrote:<br>&gt;&gt;&gt; So for example the following (probable) bug would result in a compile error:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let f = x &lt; 5 // where x is optional and could be nil<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If that was really what was intended, you would need to write:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let f = x? &lt; 5<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Similarly, the rule would also apply for functions that return an optional type:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let f = x()? &lt; 5<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; A major advantage of this approach is it would encourage programmers to unwrap optionals early to avoid writing ??? and ??!&quot; frequently in their code.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Note that conditional chaining would just make use of the existing ??? suffix. There is no need to add another ??? after that.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let f = x?.g?.h<br>&gt;&gt;&gt; let f = x()?.g?.h<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As for implicitly unwrapped optionals, a ??? suffix would only be used when you want to treat a value as an optional (e.g., when comparing it to nil). For example, for x of type Int?, one could write:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let y = (x? == nil) ? 0 : x<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>mandatory &quot;?&quot; suffix for identifiers associated with optional types</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>December  4, 2015 at 11:00:00am</p></header><div class="content"><p>&gt; On Dec 4, 2015, at 11:01 AM, Sean Heber &lt;sean at fifthace.com&gt; wrote:<br>&gt; <br>&gt; Couldn?t this issue of remembering which variables are optional be solved in the IDE by using a different color for optionals or something like that?<br></p><p>It?s better in the language because it forces the programmer to think more about what they are doing and the compiler could generate more errors for possible bugs.<br></p><p>Also, the syntax highlighting you propose would not be supported in all contexts (e.g., email, mailing lists, github, etc.).<br></p><p>&gt; <br>&gt; l8r<br>&gt; Sean<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 4, 2015, at 9:56 AM, David Waite &lt;david at alkaline-solutions.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Ruby recently ran into a similar problem from the other direction - they wanted to support ?. syntax, but ??? was already legal in identifier names (and used) to represent result values which are meant to be considered ?truthy?. In the end, they went with a different ?&amp;.&quot; syntax because<br>&gt;&gt; 1. This meant ??? was both a naming convention and an operation<br>&gt;&gt; 2. Too many question marks made the code psychologically confusing<br>&gt;&gt; 3. They already had to change the syntax (to ?.??) to make code unambiguous<br>&gt;&gt; <br>&gt;&gt; An naming system or pattern indicating something optional isn?t a bad idea - but it probably shouldn?t use ??? for the same reason. A ??? is already used heavily to indicate actions against optionals, and every time you see that identifier you will have to think about whether you are just referencing it by name, or performing some operation on it.<br>&gt;&gt; <br>&gt;&gt; I think you however are pushing for a mandatory naming system for optionals - to make it clear in your examples below that ?x? needs to be treated as an optional, not as the type contained within. This makes coming up with an acceptable system significantly harder.<br>&gt;&gt; <br>&gt;&gt; -DW<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 4, 2015, at 8:44 AM, Amir Michail &lt;a.michail at me.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don?t want to remember if a variable is optional. I want to see it in the variable name.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Friday, December 4, 2015, Amir Michail &lt;a.michail at me.com&gt; wrote:<br>&gt;&gt;&gt;&gt; So for example the following (probable) bug would result in a compile error:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let f = x &lt; 5 // where x is optional and could be nil<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If that was really what was intended, you would need to write:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let f = x? &lt; 5<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Similarly, the rule would also apply for functions that return an optional type:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let f = x()? &lt; 5<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; A major advantage of this approach is it would encourage programmers to unwrap optionals early to avoid writing ??? and ??!&quot; frequently in their code.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Note that conditional chaining would just make use of the existing ??? suffix. There is no need to add another ??? after that.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let f = x?.g?.h<br>&gt;&gt;&gt;&gt; let f = x()?.g?.h<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; As for implicitly unwrapped optionals, a ??? suffix would only be used when you want to treat a value as an optional (e.g., when comparing it to nil). For example, for x of type Int?, one could write:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let y = (x? == nil) ? 0 : x<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3d3a2cce932eca144b8c13a63966404?s=50"></div><header><strong>mandatory &quot;?&quot; suffix for identifiers associated with optional types</strong> from <string>Alex Blewitt</string> &lt;alex.blewitt at gmail.com&gt;<p>December  4, 2015 at 04:00:00pm</p></header><div class="content"><p>&gt; On 4 Dec 2015, at 16:44, Amir Michail &lt;a.michail at me.com&gt; wrote:<br>&gt; <br>&gt; I don?t want to remember if a variable is optional. I want to see it in the variable name.<br></p><p>Optionality is associated with the type, not the identifier. In addition, how would you deal with type aliases to optional constructs?<br></p><p>typealias MaybeString = String?<br>var maybe:MaybeString<br></p><p>This doesn?t ?look? like an optional value (so would it deserve a ? at the end) but if you have MaybeString? you now have an Optional&lt;Optional&lt;String&gt;&gt;. Should you have ?? there now?<br></p><p>Alex<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/48445dda/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>mandatory &quot;?&quot; suffix for identifiers associated with optional types</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>December  4, 2015 at 11:00:00am</p></header><div class="content"><p>&gt; On Dec 4, 2015, at 10:57 AM, Alex Blewitt &lt;alex.blewitt at gmail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 4 Dec 2015, at 16:44, Amir Michail &lt;a.michail at me.com &lt;mailto:a.michail at me.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I don?t want to remember if a variable is optional. I want to see it in the variable name.<br>&gt; <br>&gt; Optionality is associated with the type, not the identifier. In addition, how would you deal with type aliases to optional constructs?<br>&gt; <br>&gt; typealias MaybeString = String?<br>&gt; var maybe:MaybeString<br>&gt; <br>&gt; This doesn?t ?look? like an optional value (so would it deserve a ? at the end) but if you have MaybeString? you now have an Optional&lt;Optional&lt;String&gt;&gt;. Should you have ?? there now?<br>&gt; <br>&gt; Alex<br></p><p>You would have:<br></p><p>typealias MaybeString? = String?<br>var maybe?:MaybeString?<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/43474a8c/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d30e546d655d1c7ece0464791a9a90d5?s=50"></div><header><strong>mandatory &quot;?&quot; suffix for identifiers associated with optional types</strong> from <string>Adrian Kashivskyy</string> &lt;adrian.kashivskyy at me.com&gt;<p>December  4, 2015 at 06:00:00pm</p></header><div class="content"><p>I agree with Alex, <br></p><p>&gt; Optionality is associated with the type, not the identifier.<br></p><p>Optionals are designed to provide null safety inside a program, not promote using nullables wherever possible. If you use optionals so extensively that you feel the need for special IDE support, maybe you should consider rethinking your API.<br></p><p>By the way,<br></p><p>&gt; So for example the following (probable) bug would result in a compile error:<br>&gt; let f = x &lt; 5 // where x is optional and could be nil<br></p><p>I believe nil being less than anything else is an expected behavior which has been introduced by design.<br></p><p>Pozdrawiam ? Regards,<br>Adrian Kashivskyy<br></p><p>&gt; Wiadomo?? napisana przez Amir Michail &lt;a.michail at me.com&gt; w dniu 04.12.2015, o godz. 17:17:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Dec 4, 2015, at 10:57 AM, Alex Blewitt &lt;alex.blewitt at gmail.com &lt;mailto:alex.blewitt at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 4 Dec 2015, at 16:44, Amir Michail &lt;a.michail at me.com &lt;mailto:a.michail at me.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don?t want to remember if a variable is optional. I want to see it in the variable name.<br>&gt;&gt; <br>&gt;&gt; Optionality is associated with the type, not the identifier. In addition, how would you deal with type aliases to optional constructs?<br>&gt;&gt; <br>&gt;&gt; typealias MaybeString = String?<br>&gt;&gt; var maybe:MaybeString<br>&gt;&gt; <br>&gt;&gt; This doesn?t ?look? like an optional value (so would it deserve a ? at the end) but if you have MaybeString? you now have an Optional&lt;Optional&lt;String&gt;&gt;. Should you have ?? there now?<br>&gt;&gt; <br>&gt;&gt; Alex<br>&gt; <br>&gt; You would have:<br>&gt; <br>&gt; typealias MaybeString? = String?<br>&gt; var maybe?:MaybeString?<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/be8e8c99/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>mandatory &quot;?&quot; suffix for identifiers associated with optional types</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>December  4, 2015 at 12:00:00pm</p></header><div class="content"><p>&gt; On Dec 4, 2015, at 12:27 PM, Adrian Kashivskyy &lt;adrian.kashivskyy at me.com&gt; wrote:<br>&gt; <br>&gt; I agree with Alex, <br>&gt; <br>&gt;&gt; Optionality is associated with the type, not the identifier.<br>&gt; <br>&gt; Optionals are designed to provide null safety inside a program, not promote using nullables wherever possible. If you use optionals so extensively that you feel the need for special IDE support, maybe you should consider rethinking your API.<br>&gt; <br>&gt; By the way,<br>&gt; <br>&gt;&gt; So for example the following (probable) bug would result in a compile error:<br>&gt;&gt; let f = x &lt; 5 // where x is optional and could be nil<br>&gt; <br>&gt; I believe nil being less than anything else is an expected behavior which has been introduced by design.<br>&gt; <br></p><p>It still leads to bugs that are hard to find though.<br></p><p>In any case, I proposed using this code for such a comparison: let f = x? &lt; 5<br></p><p>&gt; Pozdrawiam ? Regards,<br>&gt; Adrian Kashivskyy<br>&gt; <br>&gt;&gt; Wiadomo?? napisana przez Amir Michail &lt;a.michail at me.com &lt;mailto:a.michail at me.com&gt;&gt; w dniu 04.12.2015, o godz. 17:17:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Dec 4, 2015, at 10:57 AM, Alex Blewitt &lt;alex.blewitt at gmail.com &lt;mailto:alex.blewitt at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 4 Dec 2015, at 16:44, Amir Michail &lt;a.michail at me.com &lt;mailto:a.michail at me.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I don?t want to remember if a variable is optional. I want to see it in the variable name.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Optionality is associated with the type, not the identifier. In addition, how would you deal with type aliases to optional constructs?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; typealias MaybeString = String?<br>&gt;&gt;&gt; var maybe:MaybeString<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This doesn?t ?look? like an optional value (so would it deserve a ? at the end) but if you have MaybeString? you now have an Optional&lt;Optional&lt;String&gt;&gt;. Should you have ?? there now?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Alex<br>&gt;&gt; <br>&gt;&gt; You would have:<br>&gt;&gt; <br>&gt;&gt; typealias MaybeString? = String?<br>&gt;&gt; var maybe?:MaybeString?<br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/f2fdf9de/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d30e546d655d1c7ece0464791a9a90d5?s=50"></div><header><strong>mandatory &quot;?&quot; suffix for identifiers associated with optional types</strong> from <string>Adrian Kashivskyy</string> &lt;adrian.kashivskyy at me.com&gt;<p>December  4, 2015 at 06:00:00pm</p></header><div class="content"><p>I agree it may lead to unexpected bugs, but &quot;let f = x? &lt; 5&quot; is not a great alternative, either. We should consider rethinking the behavior of comparison function itself, rather than introduce a new language feature like an operator.<br></p><p>I suggest changing the comparison function&#39;s return value to an optional Bool? and consider the following implementation<br></p><p>&gt; func &lt; &lt;T: Comparable&gt;(lhs: T?, rhs: T?) -&gt; Bool? {<br>&gt; 	if let lhs = lhs, rhs = rhs {<br>&gt; 		return lhs &lt; rhs<br>&gt; 	} else {<br>&gt; 		return nil<br>&gt; 	}<br>&gt; }<br></p><p><br>That way,<br></p><p>&gt; // true<br>&gt; Optional(1) &lt; Optional(2)<br>&gt; <br>&gt; // nil<br>&gt; Optional(1) &lt; nil<br>&gt; <br>&gt; // nil<br>&gt; nil &lt; Optional(2)<br></p><p><br>Pozdrawiam ? Regards,<br>Adrian Kashivskyy<br></p><p>&gt; Wiadomo?? napisana przez Amir Michail &lt;a.michail at me.com&gt; w dniu 04.12.2015, o godz. 18:30:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Dec 4, 2015, at 12:27 PM, Adrian Kashivskyy &lt;adrian.kashivskyy at me.com &lt;mailto:adrian.kashivskyy at me.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I agree with Alex, <br>&gt;&gt; <br>&gt;&gt;&gt; Optionality is associated with the type, not the identifier.<br>&gt;&gt; <br>&gt;&gt; Optionals are designed to provide null safety inside a program, not promote using nullables wherever possible. If you use optionals so extensively that you feel the need for special IDE support, maybe you should consider rethinking your API.<br>&gt;&gt; <br>&gt;&gt; By the way,<br>&gt;&gt; <br>&gt;&gt;&gt; So for example the following (probable) bug would result in a compile error:<br>&gt;&gt;&gt; let f = x &lt; 5 // where x is optional and could be nil<br>&gt;&gt; <br>&gt;&gt; I believe nil being less than anything else is an expected behavior which has been introduced by design.<br>&gt;&gt; <br>&gt; <br>&gt; It still leads to bugs that are hard to find though.<br>&gt; <br>&gt; In any case, I proposed using this code for such a comparison: let f = x? &lt; 5<br>&gt; <br>&gt;&gt; Pozdrawiam ? Regards,<br>&gt;&gt; Adrian Kashivskyy<br>&gt;&gt; <br>&gt;&gt;&gt; Wiadomo?? napisana przez Amir Michail &lt;a.michail at me.com &lt;mailto:a.michail at me.com&gt;&gt; w dniu 04.12.2015, o godz. 17:17:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 4, 2015, at 10:57 AM, Alex Blewitt &lt;alex.blewitt at gmail.com &lt;mailto:alex.blewitt at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 4 Dec 2015, at 16:44, Amir Michail &lt;a.michail at me.com &lt;mailto:a.michail at me.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I don?t want to remember if a variable is optional. I want to see it in the variable name.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Optionality is associated with the type, not the identifier. In addition, how would you deal with type aliases to optional constructs?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; typealias MaybeString = String?<br>&gt;&gt;&gt;&gt; var maybe:MaybeString<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This doesn?t ?look? like an optional value (so would it deserve a ? at the end) but if you have MaybeString? you now have an Optional&lt;Optional&lt;String&gt;&gt;. Should you have ?? there now?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Alex<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; You would have:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; typealias MaybeString? = String?<br>&gt;&gt;&gt; var maybe?:MaybeString?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/3da0f958/attachment-0001.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>mandatory &quot;?&quot; suffix for identifiers associated with optional types</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>December  7, 2015 at 12:00:00am</p></header><div class="content"><p>On Fri, Dec 4, 2015, at 09:30 AM, Amir Michail wrote:<br>&gt;&gt; On Dec 4, 2015, at 12:27 PM, Adrian Kashivskyy<br>&gt;&gt; &lt;adrian.kashivskyy at me.com&gt; wrote: I believe nil being less than<br>&gt;&gt; anything else is an expected behavior which has been introduced by<br>&gt;&gt; design.<br>&gt;&gt;<br>&gt;<br>&gt; It still leads to bugs that are hard to find though.<br>&gt;<br>&gt; In any case, I proposed using this code for such a comparison: let f<br>&gt; = x? &lt; 5<br></p><p>There&#39;s lots and lots of ways to write bugs in Swift. That&#39;s part and<br>parcel with being a programming language. I disagree that this is a<br>bug that&#39;s hard to find. Do you commonly write code where you don&#39;t<br>understand the types you&#39;re working with? If you don&#39;t know the types<br>you&#39;re working with, this isn&#39;t the only way to accidentally write a<br>bug that still compiles. Personally, I find the ability to compare<br>optionals to be very valuable, almost as valuable as the ability to<br>use == with optionals (which I doubt anyone will argue is a<br>misfeature). And I don&#39;t think I&#39;ve ever accidentally compared an<br>optional with &lt; without realizing it. I know, everybody is different,<br>but deliberate uglification of the language to solve a subjective<br>issue encountered by some people at the expense of readable code by<br>everyone else does not seem to me to be a reasonable tradeoff.<br>Especially since the proposed syntax here is extremely confusing; the<br>postfix-? already means something else (in fact, it means 3 different<br>things depending on context).<br></p><p>-Kevin Ballard<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/549fe179/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/900e19fd7259c4962c14f7fee2cc9789?s=50"></div><header><strong>mandatory &quot;?&quot; suffix for identifiers associated with optional types</strong> from <string>Per Melin</string> &lt;p at greendale.se&gt;<p>December  7, 2015 at 12:00:00pm</p></header><div class="content"><p>On Mon, Dec 7, 2015 at 9:19 AM, Kevin Ballard via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Do you commonly write code where you don&#39;t understand the types you&#39;re<br>&gt; working with?<br>&gt;<br></p><p>Here is one type of mistake that I made long after that I should have known<br>better:<br></p><p>    var x: Int?<br></p><p>    // ...<br></p><p>    switch x {<br>    case let x where x &lt; 0: // x is still Optional<br>    default: // ...<br>    }<br></p><p>Since you write &#39;if let&#39; so often to unwrap, I kept forgetting that &#39;case<br>let&#39; does not, and that there is a special syntax for that: &#39;case let x?&#39;.<br></p><p><br></p><p>&gt; Personally, I find the ability to compare optionals to be very valuable,<br>&gt; almost as valuable as the ability to use == with optionals (which I doubt<br>&gt; anyone will argue is a misfeature).<br>&gt;<br></p><p>I have been trying to come up with situations where you would want to<br>compare two values, knowing that one or both may be nil, with &lt;, &lt;=, &gt; or<br>&gt;=. Other than as for sorting, I can&#39;t think of much. I doubt the Swift<br>team explicitly made this possible without good reason, so I must be<br>missing something.<br></p><p>Could you please share some examples? It doesn&#39;t necessarily have to be<br>code, just explain the context where this is valuable.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/9877dcac/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>mandatory &quot;?&quot; suffix for identifiers associated with optional types</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December  6, 2015 at 02:00:00pm</p></header><div class="content"><p>&gt; On Dec 4, 2015, at 7:20 AM, Amir Michail &lt;a.michail at me.com&gt; wrote:<br>&gt; <br>&gt; So for example the following (probable) bug would result in a compile error:<br>&gt; <br>&gt; let f = x &lt; 5 // where x is optional and could be nil<br>&gt; <br>&gt; If that was really what was intended, you would need to write:<br>&gt; <br>&gt; let f = x? &lt; 5<br></p><p>I don’t think this approach can work.<br></p><p>Consider the == operator for example: if optionals are are equatable then they will work with ==.  If they are not, they cannot be used as a dictionary key.  The former approach defeats your goals, the later approach defeats common problems from being solved.<br></p><p>-Chris<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
