<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14477c366d6ee4e41adf14837bc4f2f9?s=50"></div><header><strong>Build Error: Relocation R_X86_64_PC32</strong> from <string>Ryan Lovelett</string> &lt;swift-dev at ryan.lovelett.me&gt;<p>February 29, 2016 at 10:00:00pm</p></header><div class="content"><p>I have a daily build of Swift that I make on a Arch Linux box. On the<br>morning of February 23rd the build starting failing with the following<br>error:<br></p><p>/usr/bin/ld: stdlib/public/core/linux/x86_64/Swift.o: relocation<br>R_X86_64_PC32 against protected symbol `_TMPSa&#39; can not be used when<br>making a shared object<br>/usr/bin/ld: final link failed: Bad value<br>clang-3.7: error: linker command failed with exit code 1 (use -v to see<br>invocation)<br></p><p>I build with these arguments:<br></p><p>utils/build-script --assertions --no-swift-stdlib-assertions --llbuild<br>--swiftpm --xctest --build-subdir=buildbot_linux --lldb --release --test<br>--validation-test --foundation -- --swift-enable-ast-verifier=0<br>--install-swift --install-lldb --install-llbuild --install-swiftpm<br>--install-xctest --install-prefix=/usr<br>&#39;--swift-install-components=compiler;clang-builtin-headers;stdlib;sdk-overlay;license&#39;<br>--build-swift-static-stdlib=1 --build-swift-stdlib-unittest-extra=1<br>--skip-test-lldb=1 --test-installable-package=1<br>--install-destdir=/build/swiftc/pkg/swiftc/<br>--installable-package=/build/swiftc/swift-3.0.20160208a.r613.g0a87b5a.tar.xz<br>--install-foundation --reconfigure --skip-test-cmark=1<br>--skip-test-lldb=1 --skip-test-swift=1 --skip-test-llbuild=1<br>--skip-test-swiftpm=1 --skip-test-xctest=1 --skip-test-foundation=1<br>--skip-test-osx=1 --skip-test-ios=1 --skip-test-ios-simulator=1<br>--skip-test-tvos=1 --skip-test-tvos-simulator=1 --skip-test-watchos=1<br>--skip-test-watchos-simulator=1 --skip-test-validation=1<br>--skip-test-optimized=1 --reconfigure=1 --verbose-build=1<br></p><p>Would anyone have an idea of what could have gone wrong (before I spend<br>time running `git bisect` and building on all the different repos)?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Build Error: Relocation R_X86_64_PC32</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>February 29, 2016 at 07:00:00pm</p></header><div class="content"><p>On Mon, Feb 29, 2016 at 7:51 PM, Ryan Lovelett via swift-dev<br>&lt;swift-dev at swift.org&gt; wrote:<br>&gt; I have a daily build of Swift that I make on a Arch Linux box. On the<br>&gt; morning of February 23rd the build starting failing with the following<br>&gt; error:<br>&gt;<br>&gt; /usr/bin/ld: stdlib/public/core/linux/x86_64/Swift.o: relocation<br>&gt; R_X86_64_PC32 against protected symbol `_TMPSa&#39; can not be used when<br>&gt; making a shared object<br>&gt; /usr/bin/ld: final link failed: Bad value<br>&gt; clang-3.7: error: linker command failed with exit code 1 (use -v to see<br>&gt; invocation)<br></p><p>Hi Ryan,<br></p><p>If you are running binutils 2.26, this is a known issue.  A workaround<br>is to use the gold linker (build-script-impl has an option for this).<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14477c366d6ee4e41adf14837bc4f2f9?s=50"></div><header><strong>Build Error: Relocation R_X86_64_PC32</strong> from <string>Ryan Lovelett</string> &lt;swift-dev at ryan.lovelett.me&gt;<p>February 29, 2016 at 11:00:00pm</p></header><div class="content"><p>Perfect.<br></p><p>That corresponds with what I am seeing. On the morning of the 22nd (when<br>it built fine) it used binutils-2.25.1-3 and then on the morning of the<br>23rd (when it failed) it used binutils-2.26-1.<br></p><p>I&#39;ll look into the build flag for the gold linker<br></p><p>Out of curiosity is there a issue in the bug tracker for this that I<br>could follow; or should I file one?<br></p><p>Thanks again for the quick response.<br></p><p>On Mon, Feb 29, 2016, at 10:55 PM, Dmitri Gribenko wrote:<br>&gt; On Mon, Feb 29, 2016 at 7:51 PM, Ryan Lovelett via swift-dev<br>&gt; &lt;swift-dev at swift.org&gt; wrote:<br>&gt; &gt; I have a daily build of Swift that I make on a Arch Linux box. On the<br>&gt; &gt; morning of February 23rd the build starting failing with the following<br>&gt; &gt; error:<br>&gt; &gt;<br>&gt; &gt; /usr/bin/ld: stdlib/public/core/linux/x86_64/Swift.o: relocation<br>&gt; &gt; R_X86_64_PC32 against protected symbol `_TMPSa&#39; can not be used when<br>&gt; &gt; making a shared object<br>&gt; &gt; /usr/bin/ld: final link failed: Bad value<br>&gt; &gt; clang-3.7: error: linker command failed with exit code 1 (use -v to see<br>&gt; &gt; invocation)<br>&gt; <br>&gt; Hi Ryan,<br>&gt; <br>&gt; If you are running binutils 2.26, this is a known issue.  A workaround<br>&gt; is to use the gold linker (build-script-impl has an option for this).<br>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Build Error: Relocation R_X86_64_PC32</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>February 29, 2016 at 08:00:00pm</p></header><div class="content"><p>IIRC there is no issue in the bug tracker, please feel free to file one!<br></p><p>Also, if you are familiar with binutils internals, it might be helpful<br>to bisect the linker.<br></p><p>Meador Inge has also mentioned this bug:<br>https://llvm.org/bugs/show_bug.cgi?id=26580<br></p><p>Right now, it does not seem clear to me that we have an understanding<br>what the issue is, which component is broken (LLVM, Swift&#39;s IRGen, or<br>binutils), and if the breakage was accidental or intentional (e.g., to<br>fix something else).<br></p><p>Previous thread on this topic:<br></p><p>https://lists.swift.org/pipermail/swift-dev/Week-of-Mon-20160215/001176.html<br>https://lists.swift.org/pipermail/swift-dev/Week-of-Mon-20160222/001190.html<br></p><p>Dmitri<br></p><p>On Mon, Feb 29, 2016 at 8:04 PM, Ryan Lovelett<br>&lt;swift-dev at ryan.lovelett.me&gt; wrote:<br>&gt; Perfect.<br>&gt;<br>&gt; That corresponds with what I am seeing. On the morning of the 22nd (when<br>&gt; it built fine) it used binutils-2.25.1-3 and then on the morning of the<br>&gt; 23rd (when it failed) it used binutils-2.26-1.<br>&gt;<br>&gt; I&#39;ll look into the build flag for the gold linker<br>&gt;<br>&gt; Out of curiosity is there a issue in the bug tracker for this that I<br>&gt; could follow; or should I file one?<br>&gt;<br>&gt; Thanks again for the quick response.<br>&gt;<br>&gt; On Mon, Feb 29, 2016, at 10:55 PM, Dmitri Gribenko wrote:<br>&gt;&gt; On Mon, Feb 29, 2016 at 7:51 PM, Ryan Lovelett via swift-dev<br>&gt;&gt; &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt; &gt; I have a daily build of Swift that I make on a Arch Linux box. On the<br>&gt;&gt; &gt; morning of February 23rd the build starting failing with the following<br>&gt;&gt; &gt; error:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; /usr/bin/ld: stdlib/public/core/linux/x86_64/Swift.o: relocation<br>&gt;&gt; &gt; R_X86_64_PC32 against protected symbol `_TMPSa&#39; can not be used when<br>&gt;&gt; &gt; making a shared object<br>&gt;&gt; &gt; /usr/bin/ld: final link failed: Bad value<br>&gt;&gt; &gt; clang-3.7: error: linker command failed with exit code 1 (use -v to see<br>&gt;&gt; &gt; invocation)<br>&gt;&gt;<br>&gt;&gt; Hi Ryan,<br>&gt;&gt;<br>&gt;&gt; If you are running binutils 2.26, this is a known issue.  A workaround<br>&gt;&gt; is to use the gold linker (build-script-impl has an option for this).<br>&gt;&gt;<br>&gt;&gt; Dmitri<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p><p><br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ac6593beac2a4da1e518e5001dbb2adc?s=50"></div><header><strong>Build Error: Relocation R_X86_64_PC32</strong> from <string>Michael Buckley</string> &lt;michael at buckleyisms.com&gt;<p>March  2, 2016 at 10:00:00am</p></header><div class="content"><p>I have been trying to compile on a fresh Ubuntu 15.10 image since the 27th,<br>and have been unable to succeed, even when using the gold linker. Any<br>chance this is the same issue?<br></p><p>I installed the OS, and ran the following command.<br></p><p>sudo apt-get install git cmake ninja-build clang python uuid-dev<br>libicu-dev icu-devtools libbsd-dev libedit-dev libxml2-dev<br>libsqlite3-dev swig libpython-dev libncurses5-dev pkg-config<br></p><p>Then I ran<br></p><p>git clone https://github.com/apple/swift.git<br>cd swift<br>./utils/update-checkout --clone<br></p><p><br>Finally, I ran<br></p><p>cd ..<br>./swift/utils/build-script -c -R --llbuild --swiftpm --xctest --foundation<br>-- --reconfigure --use-gold-linker<br></p><p>Relevant output below.<br></p><p>Manually-specified variables were not used by the project:<br></p><p>    LLVM_TOOL_SWIFT_BUILD<br></p><p><br>-- Build files have been written to:<br>/home/buckley/swift/build/Ninja-ReleaseAssert/llvm-linux-x86_64<br>++ cmake_config_opt llvm<br>++ product=llvm<br>++ [[ Ninja == \X\c\o\d\e ]]<br>+ /usr/bin/cmake --build<br>/home/buckley/swift/build/Ninja-ReleaseAssert/llvm-linux-x86_64 -- -j4 all<br>[1484/2025] Building CXX object<br>tools/clang/lib/ASTMatchers/Dynamic/CMakeFiles/clangDynamicASTMatchers.dir/Registry.cpp.o<br>FAILED: /usr/bin/clang++   -DCLANG_ENABLE_ARCMT<br>-DCLANG_ENABLE_OBJC_REWRITER -DCLANG_ENABLE_STATIC_ANALYZER<br>-DGTEST_HAS_RTTI=0 -D_DEBUG -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS<br>-D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-stack-protector -fPIC<br>-fvisibility-inlines-hidden -Wall -W -Wno-unused-parameter -Wwrite-strings<br>-Wcast-qual -Wmissing-field-initializers -pedantic -Wno-long-long<br>-Wcovered-switch-default -Wnon-virtual-dtor -Wdelete-non-virtual-dtor<br>-std=c++11 -fcolor-diagnostics -ffunction-sections -fdata-sections<br>-fno-common -Woverloaded-virtual -Wno-nested-anon-types -O3<br>-Itools/clang/lib/ASTMatchers/Dynamic<br>-I/home/buckley/swift/llvm/tools/clang/lib/ASTMatchers/Dynamic<br>-I/home/buckley/swift/llvm/tools/clang/include -Itools/clang/include<br>-Iinclude -I/home/buckley/swift/llvm/include    -UNDEBUG  -fno-exceptions<br>-fno-rtti -MMD -MT<br>tools/clang/lib/ASTMatchers/Dynamic/CMakeFiles/clangDynamicASTMatchers.dir/Registry.cpp.o<br>-MF<br>tools/clang/lib/ASTMatchers/Dynamic/CMakeFiles/clangDynamicASTMatchers.dir/Registry.cpp.o.d<br>-o<br>tools/clang/lib/ASTMatchers/Dynamic/CMakeFiles/clangDynamicASTMatchers.dir/Registry.cpp.o<br>-c /home/buckley/swift/llvm/tools/clang/lib/ASTMatchers/Dynamic/Registry.cpp<br>clang: error: unable to execute command: Killed<br>clang: error: clang frontend command failed due to signal (use -v to see<br>invocation)<br>Ubuntu clang version 3.6.2-1 (tags/RELEASE_362/final) (based on LLVM 3.6.2)<br>Target: x86_64-pc-linux-gnu<br>Thread model: posix<br>clang: note: diagnostic msg: PLEASE submit a bug report to<br>http://bugs.debian.org/ and include the crash backtrace, preprocessed<br>source, and associated run script.<br>clang: note: diagnostic msg:<br>********************<br></p><p>PLEASE ATTACH THE FOLLOWING FILES TO THE BUG REPORT:<br>Preprocessed source(s) and associated run script(s) are located at:<br>clang: note: diagnostic msg: /tmp/Registry-1ff941.cpp<br>clang: note: diagnostic msg: /tmp/Registry-1ff941.sh<br>clang: note: diagnostic msg:<br></p><p>********************<br>[1484/2025] Building CXX object<br>tools/clang/lib/ASTMatchers/CMakeFiles/clangASTMatchers.dir/ASTMatchFinder.cpp.o<br>ninja: build stopped: subcommand failed.<br>./swift/utils/build-script: command terminated with a non-zero exit status<br>1, aborting<br></p><p><br>On Mon, Feb 29, 2016 at 8:16 PM, Dmitri Gribenko via swift-dev &lt;<br>swift-dev at swift.org&gt; wrote:<br></p><p>&gt; IIRC there is no issue in the bug tracker, please feel free to file one!<br>&gt;<br>&gt; Also, if you are familiar with binutils internals, it might be helpful<br>&gt; to bisect the linker.<br>&gt;<br>&gt; Meador Inge has also mentioned this bug:<br>&gt; https://llvm.org/bugs/show_bug.cgi?id=26580<br>&gt;<br>&gt; Right now, it does not seem clear to me that we have an understanding<br>&gt; what the issue is, which component is broken (LLVM, Swift&#39;s IRGen, or<br>&gt; binutils), and if the breakage was accidental or intentional (e.g., to<br>&gt; fix something else).<br>&gt;<br>&gt; Previous thread on this topic:<br>&gt;<br>&gt;<br>&gt; https://lists.swift.org/pipermail/swift-dev/Week-of-Mon-20160215/001176.html<br>&gt;<br>&gt; https://lists.swift.org/pipermail/swift-dev/Week-of-Mon-20160222/001190.html<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; On Mon, Feb 29, 2016 at 8:04 PM, Ryan Lovelett<br>&gt; &lt;swift-dev at ryan.lovelett.me&gt; wrote:<br>&gt; &gt; Perfect.<br>&gt; &gt;<br>&gt; &gt; That corresponds with what I am seeing. On the morning of the 22nd (when<br>&gt; &gt; it built fine) it used binutils-2.25.1-3 and then on the morning of the<br>&gt; &gt; 23rd (when it failed) it used binutils-2.26-1.<br>&gt; &gt;<br>&gt; &gt; I&#39;ll look into the build flag for the gold linker<br>&gt; &gt;<br>&gt; &gt; Out of curiosity is there a issue in the bug tracker for this that I<br>&gt; &gt; could follow; or should I file one?<br>&gt; &gt;<br>&gt; &gt; Thanks again for the quick response.<br>&gt; &gt;<br>&gt; &gt; On Mon, Feb 29, 2016, at 10:55 PM, Dmitri Gribenko wrote:<br>&gt; &gt;&gt; On Mon, Feb 29, 2016 at 7:51 PM, Ryan Lovelett via swift-dev<br>&gt; &gt;&gt; &lt;swift-dev at swift.org&gt; wrote:<br>&gt; &gt;&gt; &gt; I have a daily build of Swift that I make on a Arch Linux box. On the<br>&gt; &gt;&gt; &gt; morning of February 23rd the build starting failing with the following<br>&gt; &gt;&gt; &gt; error:<br>&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt; &gt; /usr/bin/ld: stdlib/public/core/linux/x86_64/Swift.o: relocation<br>&gt; &gt;&gt; &gt; R_X86_64_PC32 against protected symbol `_TMPSa&#39; can not be used when<br>&gt; &gt;&gt; &gt; making a shared object<br>&gt; &gt;&gt; &gt; /usr/bin/ld: final link failed: Bad value<br>&gt; &gt;&gt; &gt; clang-3.7: error: linker command failed with exit code 1 (use -v to<br>&gt; see<br>&gt; &gt;&gt; &gt; invocation)<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Hi Ryan,<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; If you are running binutils 2.26, this is a known issue.  A workaround<br>&gt; &gt;&gt; is to use the gold linker (build-script-impl has an option for this).<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Dmitri<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; --<br>&gt; &gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; &gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160302/715d94a3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Build Error: Relocation R_X86_64_PC32</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>March  2, 2016 at 10:00:00am</p></header><div class="content"><p>On Wed, Mar 2, 2016 at 10:13 AM, Michael Buckley via swift-dev<br>&lt;swift-dev at swift.org&gt; wrote:<br>&gt; I have been trying to compile on a fresh Ubuntu 15.10 image since the 27th,<br>&gt; and have been unable to succeed, even when using the gold linker. Any chance<br>&gt; this is the same issue?<br></p><p>This is an unrelated issue.  Your host clang crashes when compiling<br>the new clang.  I don&#39;t think there&#39;s much you can do except updating<br>your clang.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ac6593beac2a4da1e518e5001dbb2adc?s=50"></div><header><strong>Build Error: Relocation R_X86_64_PC32</strong> from <string>Michael Buckley</string> &lt;michael at buckleyisms.com&gt;<p>March  2, 2016 at 12:00:00pm</p></header><div class="content"><p>Thanks. Apt-get reports that my clang is up to date (Ubuntu clang version<br>3.6.2-1), but I&#39;m happy to wait for a newer version. I was just attempting<br>to compile it to make sure a change I made worked on Linux, but it&#39;s not<br>urgent.<br></p><p>I&#39;m running my Linux VM in VMWare. I&#39;ll give it a shot in VirtualBox to see<br>if it might be a virtualization issue with VMWare.<br></p><p>On Wed, Mar 2, 2016 at 10:28 AM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt;<br>wrote:<br></p><p>&gt; On Wed, Mar 2, 2016 at 10:13 AM, Michael Buckley via swift-dev<br>&gt; &lt;swift-dev at swift.org&gt; wrote:<br>&gt; &gt; I have been trying to compile on a fresh Ubuntu 15.10 image since the<br>&gt; 27th,<br>&gt; &gt; and have been unable to succeed, even when using the gold linker. Any<br>&gt; chance<br>&gt; &gt; this is the same issue?<br>&gt;<br>&gt; This is an unrelated issue.  Your host clang crashes when compiling<br>&gt; the new clang.  I don&#39;t think there&#39;s much you can do except updating<br>&gt; your clang.<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160302/56fad377/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Build Error: Relocation R_X86_64_PC32</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>March  2, 2016 at 12:00:00pm</p></header><div class="content"><p>On Wed, Mar 2, 2016 at 12:25 PM, Michael Buckley<br>&lt;michael at buckleyisms.com&gt; wrote:<br>&gt; Thanks. Apt-get reports that my clang is up to date (Ubuntu clang version<br>&gt; 3.6.2-1), but I&#39;m happy to wait for a newer version. I was just attempting<br>&gt; to compile it to make sure a change I made worked on Linux, but it&#39;s not<br>&gt; urgent.<br></p><p>There&#39;s clang-3.7 in the repo, could you try that?<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ac6593beac2a4da1e518e5001dbb2adc?s=50"></div><header><strong>Build Error: Relocation R_X86_64_PC32</strong> from <string>Michael Buckley</string> &lt;michael at buckleyisms.com&gt;<p>March  2, 2016 at 01:00:00pm</p></header><div class="content"><p>I switched to clang-3.7, and ran into the same problem<br></p><p>[1484/2025] Building CXX object<br>tools/clang/lib/ASTMatchers/Dynamic/CMakeFiles/clangDynamicASTMatchers.dir/Registry.cpp.o<br>FAILED: /usr/bin/clang++-3.7   -DCLANG_ENABLE_ARCMT<br>-DCLANG_ENABLE_OBJC_REWRITER -DCLANG_ENABLE_STATIC_ANALYZER<br>-DGTEST_HAS_RTTI=0 -D_DEBUG -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS<br>-D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-stack-protector -fPIC<br>-fvisibility-inlines-hidden -Wall -W -Wno-unused-parameter -Wwrite-strings<br>-Wcast-qual -Wmissing-field-initializers -pedantic -Wno-long-long<br>-Wcovered-switch-default -Wnon-virtual-dtor -Wdelete-non-virtual-dtor<br>-std=c++11 -fcolor-diagnostics -ffunction-sections -fdata-sections<br>-fno-common -Woverloaded-virtual -Wno-nested-anon-types -O3<br>-Itools/clang/lib/ASTMatchers/Dynamic<br>-I/home/buckley/swift/llvm/tools/clang/lib/ASTMatchers/Dynamic<br>-I/home/buckley/swift/llvm/tools/clang/include -Itools/clang/include<br>-Iinclude -I/home/buckley/swift/llvm/include    -UNDEBUG  -fno-exceptions<br>-fno-rtti -MMD -MT<br>tools/clang/lib/ASTMatchers/Dynamic/CMakeFiles/clangDynamicASTMatchers.dir/Registry.cpp.o<br>-MF<br>tools/clang/lib/ASTMatchers/Dynamic/CMakeFiles/clangDynamicASTMatchers.dir/Registry.cpp.o.d<br>-o<br>tools/clang/lib/ASTMatchers/Dynamic/CMakeFiles/clangDynamicASTMatchers.dir/Registry.cpp.o<br>-c /home/buckley/swift/llvm/tools/clang/lib/ASTMatchers/Dynamic/Registry.cpp<br>clang: error: unable to execute command: Killed<br>clang: error: clang frontend command failed due to signal (use -v to see<br>invocation)<br>Ubuntu clang version 3.7.0-2ubuntu4 (tags/RELEASE_370/final) (based on LLVM<br>3.7.0)<br>Target: x86_64-pc-linux-gnu<br>Thread model: posix<br>clang: note: diagnostic msg: PLEASE submit a bug report to<br>http://bugs.debian.org/ and include the crash backtrace, preprocessed<br>source, and associated run script.<br>clang: note: diagnostic msg:<br>********************<br></p><p>PLEASE ATTACH THE FOLLOWING FILES TO THE BUG REPORT:<br>Preprocessed source(s) and associated run script(s) are located at:<br>clang: note: diagnostic msg: /tmp/Registry-f30d0f.cpp<br>clang: note: diagnostic msg: /tmp/Registry-f30d0f.sh<br>clang: note: diagnostic msg:<br></p><p>********************<br>[1484/2025] Building CXX object<br>tools/clang/lib/ASTMatchers/CMakeFiles/clangASTMatchers.dir/ASTMatchFinder.cpp.o<br>ninja: build stopped: subcommand failed.<br>./swift/utils/build-script: command terminated with a non-zero exit status<br>1, aborting<br></p><p><br>On Wed, Mar 2, 2016 at 12:42 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt;<br>wrote:<br></p><p>&gt; On Wed, Mar 2, 2016 at 12:25 PM, Michael Buckley<br>&gt; &lt;michael at buckleyisms.com&gt; wrote:<br>&gt; &gt; Thanks. Apt-get reports that my clang is up to date (Ubuntu clang version<br>&gt; &gt; 3.6.2-1), but I&#39;m happy to wait for a newer version. I was just<br>&gt; attempting<br>&gt; &gt; to compile it to make sure a change I made worked on Linux, but it&#39;s not<br>&gt; &gt; urgent.<br>&gt;<br>&gt; There&#39;s clang-3.7 in the repo, could you try that?<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160302/29a18fd6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Build Error: Relocation R_X86_64_PC32</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>March  2, 2016 at 01:00:00pm</p></header><div class="content"><p>Thank you for checking!  It could be a different problem.  For<br>example, how many cores, and how much memory and swap does your<br>machine have?<br></p><p>Dmitri<br></p><p>On Wed, Mar 2, 2016 at 1:47 PM, Michael Buckley &lt;michael at buckleyisms.com&gt; wrote:<br>&gt; I switched to clang-3.7, and ran into the same problem<br>&gt;<br>&gt; [1484/2025] Building CXX object<br>&gt; tools/clang/lib/ASTMatchers/Dynamic/CMakeFiles/clangDynamicASTMatchers.dir/Registry.cpp.o<br>&gt; FAILED: /usr/bin/clang++-3.7   -DCLANG_ENABLE_ARCMT<br>&gt; -DCLANG_ENABLE_OBJC_REWRITER -DCLANG_ENABLE_STATIC_ANALYZER<br>&gt; -DGTEST_HAS_RTTI=0 -D_DEBUG -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS<br>&gt; -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-stack-protector -fPIC<br>&gt; -fvisibility-inlines-hidden -Wall -W -Wno-unused-parameter -Wwrite-strings<br>&gt; -Wcast-qual -Wmissing-field-initializers -pedantic -Wno-long-long<br>&gt; -Wcovered-switch-default -Wnon-virtual-dtor -Wdelete-non-virtual-dtor<br>&gt; -std=c++11 -fcolor-diagnostics -ffunction-sections -fdata-sections<br>&gt; -fno-common -Woverloaded-virtual -Wno-nested-anon-types -O3<br>&gt; -Itools/clang/lib/ASTMatchers/Dynamic<br>&gt; -I/home/buckley/swift/llvm/tools/clang/lib/ASTMatchers/Dynamic<br>&gt; -I/home/buckley/swift/llvm/tools/clang/include -Itools/clang/include<br>&gt; -Iinclude -I/home/buckley/swift/llvm/include    -UNDEBUG  -fno-exceptions<br>&gt; -fno-rtti -MMD -MT<br>&gt; tools/clang/lib/ASTMatchers/Dynamic/CMakeFiles/clangDynamicASTMatchers.dir/Registry.cpp.o<br>&gt; -MF<br>&gt; tools/clang/lib/ASTMatchers/Dynamic/CMakeFiles/clangDynamicASTMatchers.dir/Registry.cpp.o.d<br>&gt; -o<br>&gt; tools/clang/lib/ASTMatchers/Dynamic/CMakeFiles/clangDynamicASTMatchers.dir/Registry.cpp.o<br>&gt; -c /home/buckley/swift/llvm/tools/clang/lib/ASTMatchers/Dynamic/Registry.cpp<br>&gt; clang: error: unable to execute command: Killed<br>&gt; clang: error: clang frontend command failed due to signal (use -v to see<br>&gt; invocation)<br>&gt; Ubuntu clang version 3.7.0-2ubuntu4 (tags/RELEASE_370/final) (based on LLVM<br>&gt; 3.7.0)<br>&gt; Target: x86_64-pc-linux-gnu<br>&gt; Thread model: posix<br>&gt; clang: note: diagnostic msg: PLEASE submit a bug report to<br>&gt; http://bugs.debian.org/ and include the crash backtrace, preprocessed<br>&gt; source, and associated run script.<br>&gt; clang: note: diagnostic msg:<br>&gt; ********************<br>&gt;<br>&gt; PLEASE ATTACH THE FOLLOWING FILES TO THE BUG REPORT:<br>&gt; Preprocessed source(s) and associated run script(s) are located at:<br>&gt; clang: note: diagnostic msg: /tmp/Registry-f30d0f.cpp<br>&gt; clang: note: diagnostic msg: /tmp/Registry-f30d0f.sh<br>&gt; clang: note: diagnostic msg:<br>&gt;<br>&gt; ********************<br>&gt; [1484/2025] Building CXX object<br>&gt; tools/clang/lib/ASTMatchers/CMakeFiles/clangASTMatchers.dir/ASTMatchFinder.cpp.o<br>&gt; ninja: build stopped: subcommand failed.<br>&gt; ./swift/utils/build-script: command terminated with a non-zero exit status<br>&gt; 1, aborting<br>&gt;<br>&gt;<br>&gt; On Wed, Mar 2, 2016 at 12:42 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt;<br>&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On Wed, Mar 2, 2016 at 12:25 PM, Michael Buckley<br>&gt;&gt; &lt;michael at buckleyisms.com&gt; wrote:<br>&gt;&gt; &gt; Thanks. Apt-get reports that my clang is up to date (Ubuntu clang<br>&gt;&gt; &gt; version<br>&gt;&gt; &gt; 3.6.2-1), but I&#39;m happy to wait for a newer version. I was just<br>&gt;&gt; &gt; attempting<br>&gt;&gt; &gt; to compile it to make sure a change I made worked on Linux, but it&#39;s not<br>&gt;&gt; &gt; urgent.<br>&gt;&gt;<br>&gt;&gt; There&#39;s clang-3.7 in the repo, could you try that?<br>&gt;&gt;<br>&gt;&gt; Dmitri<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br>&gt;<br></p><p><br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ac6593beac2a4da1e518e5001dbb2adc?s=50"></div><header><strong>Build Error: Relocation R_X86_64_PC32</strong> from <string>Michael Buckley</string> &lt;michael at buckleyisms.com&gt;<p>March  2, 2016 at 02:00:00pm</p></header><div class="content"><p>So I&#39;m not running on real hardware. but in VM. I allowed VMWare Fusion<br>(version 7.1.1) to set the defaults for creating a new Ubuntu image. Here&#39;s<br>what the VM is currently set to.<br></p><p>RAM: 1 GB (The host system has 16 GB total, so I could allocate more)<br>Processors: 4 cores: The host system has 8 cores). However, I also tried<br>running the VM with only 1 core, and ran into the same issue.<br>Disk Image: 20 GB total, 9.5 GB Free. (The host system has a 1 TB drive,<br>but it&#39;s partitioned to boot multiple versions of OS X and Windows, each<br>with full development environments, to 20 GB was really all I could spare.)<br>Swap: VMWare seems to have created a 1.1 GB Swap partition (in addition to<br>the 20 GB disk), and a 1.1 GB extended partition)<br></p><p>On Wed, Mar 2, 2016 at 1:49 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br></p><p>&gt; Thank you for checking!  It could be a different problem.  For<br>&gt; example, how many cores, and how much memory and swap does your<br>&gt; machine have?<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; On Wed, Mar 2, 2016 at 1:47 PM, Michael Buckley &lt;michael at buckleyisms.com&gt;<br>&gt; wrote:<br>&gt; &gt; I switched to clang-3.7, and ran into the same problem<br>&gt; &gt;<br>&gt; &gt; [1484/2025] Building CXX object<br>&gt; &gt;<br>&gt; tools/clang/lib/ASTMatchers/Dynamic/CMakeFiles/clangDynamicASTMatchers.dir/Registry.cpp.o<br>&gt; &gt; FAILED: /usr/bin/clang++-3.7   -DCLANG_ENABLE_ARCMT<br>&gt; &gt; -DCLANG_ENABLE_OBJC_REWRITER -DCLANG_ENABLE_STATIC_ANALYZER<br>&gt; &gt; -DGTEST_HAS_RTTI=0 -D_DEBUG -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS<br>&gt; &gt; -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-stack-protector -fPIC<br>&gt; &gt; -fvisibility-inlines-hidden -Wall -W -Wno-unused-parameter<br>&gt; -Wwrite-strings<br>&gt; &gt; -Wcast-qual -Wmissing-field-initializers -pedantic -Wno-long-long<br>&gt; &gt; -Wcovered-switch-default -Wnon-virtual-dtor -Wdelete-non-virtual-dtor<br>&gt; &gt; -std=c++11 -fcolor-diagnostics -ffunction-sections -fdata-sections<br>&gt; &gt; -fno-common -Woverloaded-virtual -Wno-nested-anon-types -O3<br>&gt; &gt; -Itools/clang/lib/ASTMatchers/Dynamic<br>&gt; &gt; -I/home/buckley/swift/llvm/tools/clang/lib/ASTMatchers/Dynamic<br>&gt; &gt; -I/home/buckley/swift/llvm/tools/clang/include -Itools/clang/include<br>&gt; &gt; -Iinclude -I/home/buckley/swift/llvm/include    -UNDEBUG  -fno-exceptions<br>&gt; &gt; -fno-rtti -MMD -MT<br>&gt; &gt;<br>&gt; tools/clang/lib/ASTMatchers/Dynamic/CMakeFiles/clangDynamicASTMatchers.dir/Registry.cpp.o<br>&gt; &gt; -MF<br>&gt; &gt;<br>&gt; tools/clang/lib/ASTMatchers/Dynamic/CMakeFiles/clangDynamicASTMatchers.dir/Registry.cpp.o.d<br>&gt; &gt; -o<br>&gt; &gt;<br>&gt; tools/clang/lib/ASTMatchers/Dynamic/CMakeFiles/clangDynamicASTMatchers.dir/Registry.cpp.o<br>&gt; &gt; -c<br>&gt; /home/buckley/swift/llvm/tools/clang/lib/ASTMatchers/Dynamic/Registry.cpp<br>&gt; &gt; clang: error: unable to execute command: Killed<br>&gt; &gt; clang: error: clang frontend command failed due to signal (use -v to see<br>&gt; &gt; invocation)<br>&gt; &gt; Ubuntu clang version 3.7.0-2ubuntu4 (tags/RELEASE_370/final) (based on<br>&gt; LLVM<br>&gt; &gt; 3.7.0)<br>&gt; &gt; Target: x86_64-pc-linux-gnu<br>&gt; &gt; Thread model: posix<br>&gt; &gt; clang: note: diagnostic msg: PLEASE submit a bug report to<br>&gt; &gt; http://bugs.debian.org/ and include the crash backtrace, preprocessed<br>&gt; &gt; source, and associated run script.<br>&gt; &gt; clang: note: diagnostic msg:<br>&gt; &gt; ********************<br>&gt; &gt;<br>&gt; &gt; PLEASE ATTACH THE FOLLOWING FILES TO THE BUG REPORT:<br>&gt; &gt; Preprocessed source(s) and associated run script(s) are located at:<br>&gt; &gt; clang: note: diagnostic msg: /tmp/Registry-f30d0f.cpp<br>&gt; &gt; clang: note: diagnostic msg: /tmp/Registry-f30d0f.sh<br>&gt; &gt; clang: note: diagnostic msg:<br>&gt; &gt;<br>&gt; &gt; ********************<br>&gt; &gt; [1484/2025] Building CXX object<br>&gt; &gt;<br>&gt; tools/clang/lib/ASTMatchers/CMakeFiles/clangASTMatchers.dir/ASTMatchFinder.cpp.o<br>&gt; &gt; ninja: build stopped: subcommand failed.<br>&gt; &gt; ./swift/utils/build-script: command terminated with a non-zero exit<br>&gt; status<br>&gt; &gt; 1, aborting<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; On Wed, Mar 2, 2016 at 12:42 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt;<br>&gt; &gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; On Wed, Mar 2, 2016 at 12:25 PM, Michael Buckley<br>&gt; &gt;&gt; &lt;michael at buckleyisms.com&gt; wrote:<br>&gt; &gt;&gt; &gt; Thanks. Apt-get reports that my clang is up to date (Ubuntu clang<br>&gt; &gt;&gt; &gt; version<br>&gt; &gt;&gt; &gt; 3.6.2-1), but I&#39;m happy to wait for a newer version. I was just<br>&gt; &gt;&gt; &gt; attempting<br>&gt; &gt;&gt; &gt; to compile it to make sure a change I made worked on Linux, but it&#39;s<br>&gt; not<br>&gt; &gt;&gt; &gt; urgent.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; There&#39;s clang-3.7 in the repo, could you try that?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Dmitri<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; --<br>&gt; &gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; &gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt; &gt;<br>&gt; &gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160302/cc6b387f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Build Error: Relocation R_X86_64_PC32</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>March  2, 2016 at 02:00:00pm</p></header><div class="content"><p>On Wed, Mar 2, 2016 at 2:48 PM, Michael Buckley &lt;michael at buckleyisms.com&gt; wrote:<br>&gt; So I&#39;m not running on real hardware. but in VM. I allowed VMWare Fusion<br>&gt; (version 7.1.1) to set the defaults for creating a new Ubuntu image. Here&#39;s<br>&gt; what the VM is currently set to.<br>&gt;<br>&gt; RAM: 1 GB (The host system has 16 GB total, so I could allocate more)<br></p><p>You need at least 10 GB of RAM + swap in total to successfully finish<br>the compilation.  More if you are building with debug info.  Even more<br>if you have many cores.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ac6593beac2a4da1e518e5001dbb2adc?s=50"></div><header><strong>Build Error: Relocation R_X86_64_PC32</strong> from <string>Michael Buckley</string> &lt;michael at buckleyisms.com&gt;<p>March  2, 2016 at 03:00:00pm</p></header><div class="content"><p>That&#39;s very good to know, thanks. I&#39;ll try cranking up the RAM allocation<br>to my VM when I don&#39;t need to use my machine for a while and give it a shot<br>then.<br></p><p>On Wed, Mar 2, 2016 at 2:52 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br></p><p>&gt; On Wed, Mar 2, 2016 at 2:48 PM, Michael Buckley &lt;michael at buckleyisms.com&gt;<br>&gt; wrote:<br>&gt; &gt; So I&#39;m not running on real hardware. but in VM. I allowed VMWare Fusion<br>&gt; &gt; (version 7.1.1) to set the defaults for creating a new Ubuntu image.<br>&gt; Here&#39;s<br>&gt; &gt; what the VM is currently set to.<br>&gt; &gt;<br>&gt; &gt; RAM: 1 GB (The host system has 16 GB total, so I could allocate more)<br>&gt;<br>&gt; You need at least 10 GB of RAM + swap in total to successfully finish<br>&gt; the compilation.  More if you are building with debug info.  Even more<br>&gt; if you have many cores.<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160302/02d768eb/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14477c366d6ee4e41adf14837bc4f2f9?s=50"></div><header><strong>Build Error: Relocation R_X86_64_PC32</strong> from <string>Ryan Lovelett</string> &lt;swift-dev at ryan.lovelett.me&gt;<p>March 14, 2016 at 06:00:00pm</p></header><div class="content"><p>On Tue, Mar 1, 2016, at 12:16 AM, Dmitri Gribenko wrote:<br>&gt; IIRC there is no issue in the bug tracker, please feel free to file one!<br>&gt; <br>&gt; Also, if you are familiar with binutils internals, it might be helpful<br>&gt; to bisect the linker.<br></p><p>I&#39;m finally getting around to bisecting binutils. I&#39;m making some<br>progress but I&#39;m getting hung up on one thing. The build script keeps<br>finding the &quot;regular&quot; linker at `/usr/bin/ld` instead of mine<br>`/tmp/binutils/2.25/usr/local/bin/ld`.<br></p><p>I tried to update the PATH environment variable such that mine is before<br>`/usr/bin` but that doesn&#39;t seem to work. Is there an argument to send<br>that can force mine?<br></p><p>&gt; <br>&gt; Meador Inge has also mentioned this bug:<br>&gt; https://llvm.org/bugs/show_bug.cgi?id=26580<br>&gt; <br>&gt; Right now, it does not seem clear to me that we have an understanding<br>&gt; what the issue is, which component is broken (LLVM, Swift&#39;s IRGen, or<br>&gt; binutils), and if the breakage was accidental or intentional (e.g., to<br>&gt; fix something else).<br>&gt; <br>&gt; Previous thread on this topic:<br>&gt; <br>&gt; https://lists.swift.org/pipermail/swift-dev/Week-of-Mon-20160215/001176.html<br>&gt; https://lists.swift.org/pipermail/swift-dev/Week-of-Mon-20160222/001190.html<br>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; On Mon, Feb 29, 2016 at 8:04 PM, Ryan Lovelett<br>&gt; &lt;swift-dev at ryan.lovelett.me&gt; wrote:<br>&gt; &gt; Perfect.<br>&gt; &gt;<br>&gt; &gt; That corresponds with what I am seeing. On the morning of the 22nd (when<br>&gt; &gt; it built fine) it used binutils-2.25.1-3 and then on the morning of the<br>&gt; &gt; 23rd (when it failed) it used binutils-2.26-1.<br>&gt; &gt;<br>&gt; &gt; I&#39;ll look into the build flag for the gold linker<br>&gt; &gt;<br>&gt; &gt; Out of curiosity is there a issue in the bug tracker for this that I<br>&gt; &gt; could follow; or should I file one?<br>&gt; &gt;<br>&gt; &gt; Thanks again for the quick response.<br>&gt; &gt;<br>&gt; &gt; On Mon, Feb 29, 2016, at 10:55 PM, Dmitri Gribenko wrote:<br>&gt; &gt;&gt; On Mon, Feb 29, 2016 at 7:51 PM, Ryan Lovelett via swift-dev<br>&gt; &gt;&gt; &lt;swift-dev at swift.org&gt; wrote:<br>&gt; &gt;&gt; &gt; I have a daily build of Swift that I make on a Arch Linux box. On the<br>&gt; &gt;&gt; &gt; morning of February 23rd the build starting failing with the following<br>&gt; &gt;&gt; &gt; error:<br>&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt; &gt; /usr/bin/ld: stdlib/public/core/linux/x86_64/Swift.o: relocation<br>&gt; &gt;&gt; &gt; R_X86_64_PC32 against protected symbol `_TMPSa&#39; can not be used when<br>&gt; &gt;&gt; &gt; making a shared object<br>&gt; &gt;&gt; &gt; /usr/bin/ld: final link failed: Bad value<br>&gt; &gt;&gt; &gt; clang-3.7: error: linker command failed with exit code 1 (use -v to see<br>&gt; &gt;&gt; &gt; invocation)<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Hi Ryan,<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; If you are running binutils 2.26, this is a known issue.  A workaround<br>&gt; &gt;&gt; is to use the gold linker (build-script-impl has an option for this).<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Dmitri<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; --<br>&gt; &gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; &gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Build Error: Relocation R_X86_64_PC32</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>March 14, 2016 at 03:00:00pm</p></header><div class="content"><p>On Mon, Mar 14, 2016 at 3:38 PM, Ryan Lovelett<br>&lt;swift-dev at ryan.lovelett.me&gt; wrote:<br>&gt; On Tue, Mar 1, 2016, at 12:16 AM, Dmitri Gribenko wrote:<br>&gt;&gt; IIRC there is no issue in the bug tracker, please feel free to file one!<br>&gt;&gt;<br>&gt;&gt; Also, if you are familiar with binutils internals, it might be helpful<br>&gt;&gt; to bisect the linker.<br>&gt;<br>&gt; I&#39;m finally getting around to bisecting binutils. I&#39;m making some<br>&gt; progress but I&#39;m getting hung up on one thing. The build script keeps<br>&gt; finding the &quot;regular&quot; linker at `/usr/bin/ld` instead of mine<br>&gt; `/tmp/binutils/2.25/usr/local/bin/ld`.<br>&gt;<br>&gt; I tried to update the PATH environment variable such that mine is before<br>&gt; `/usr/bin` but that doesn&#39;t seem to work. Is there an argument to send<br>&gt; that can force mine?<br></p><p>I&#39;m afraid &#39;/usr/bin/ld&#39; is hardcoded in clang.  A few days ago Clang<br>added a command-line option to override that:<br></p><p>commit 635bc7fefc12cc1333ba6ec77e563b7c8af01265<br>Author: Peter Zotov &lt;whitequark at whitequark.org&gt;<br>Date:   Wed Mar 9 05:18:16 2016 +0000<br></p><p>    Accept absolute paths in the -fuse-ld option.<br></p><p>    This patch extends the -fuse-ld option to accept a full path to an<br>executable<br>    and use it verbatim to invoke the linker. There are generally two reasons<br>    to desire this.<br></p><p>    The first reason relates to the sad truth is that Clang is retargetable,<br>    Binutils are not.<br></p><p>    While any Clang from a binary distribution is sufficient to compile code<br>    for a wide range of architectures and prefixed BFD linkers (e.g.<br>    installed as /usr/bin/arm-none-linux-gnueabi-ld) as well as cross-compiled<br>    libc&#39;s (for non-bare-metal targets) are widely available, including on all<br>    Debian derivatives, it is impossible to use them together because<br>    the -fuse-ld= option allows to specify neither a linker prefix nor<br>    a full path to one.<br></p><p>    The second reason is linker development, both when porting existing linkers<br>    to new architectures and when working on a new linker such as LLD.<br></p><p>    Differential Revision: http://reviews.llvm.org/D17952<br></p><p>    git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk at 262996<br>91177308-0d34-0410-b5e6-96231b3b80d8<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14477c366d6ee4e41adf14837bc4f2f9?s=50"></div><header><strong>Build Error: Relocation R_X86_64_PC32</strong> from <string>Ryan Lovelett</string> &lt;swift-dev at ryan.lovelett.me&gt;<p>March 14, 2016 at 06:00:00pm</p></header><div class="content"><p>On Mon, Mar 14, 2016, at 06:42 PM, Dmitri Gribenko wrote:<br>&gt; On Mon, Mar 14, 2016 at 3:38 PM, Ryan Lovelett<br>&gt; &lt;swift-dev at ryan.lovelett.me&gt; wrote:<br>&gt; &gt; On Tue, Mar 1, 2016, at 12:16 AM, Dmitri Gribenko wrote:<br>&gt; &gt;&gt; IIRC there is no issue in the bug tracker, please feel free to file one!<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Also, if you are familiar with binutils internals, it might be helpful<br>&gt; &gt;&gt; to bisect the linker.<br>&gt; &gt;<br>&gt; &gt; I&#39;m finally getting around to bisecting binutils. I&#39;m making some<br>&gt; &gt; progress but I&#39;m getting hung up on one thing. The build script keeps<br>&gt; &gt; finding the &quot;regular&quot; linker at `/usr/bin/ld` instead of mine<br>&gt; &gt; `/tmp/binutils/2.25/usr/local/bin/ld`.<br>&gt; &gt;<br>&gt; &gt; I tried to update the PATH environment variable such that mine is before<br>&gt; &gt; `/usr/bin` but that doesn&#39;t seem to work. Is there an argument to send<br>&gt; &gt; that can force mine?<br>&gt; <br>&gt; I&#39;m afraid &#39;/usr/bin/ld&#39; is hardcoded in clang.  A few days ago Clang<br>&gt; added a command-line option to override that:<br></p><p>Interesting learned something new.<br></p><p>&gt; <br>&gt; commit 635bc7fefc12cc1333ba6ec77e563b7c8af01265<br>&gt; Author: Peter Zotov &lt;whitequark at whitequark.org&gt;<br>&gt; Date:   Wed Mar 9 05:18:16 2016 +0000<br>&gt; <br>&gt;     Accept absolute paths in the -fuse-ld option.<br>&gt; <br>&gt;     This patch extends the -fuse-ld option to accept a full path to an<br>&gt; executable<br>&gt;     and use it verbatim to invoke the linker. There are generally two<br>&gt;     reasons<br>&gt;     to desire this.<br>&gt; <br>&gt;     The first reason relates to the sad truth is that Clang is<br>&gt;     retargetable,<br>&gt;     Binutils are not.<br>&gt; <br>&gt;     While any Clang from a binary distribution is sufficient to compile<br>&gt;     code<br>&gt;     for a wide range of architectures and prefixed BFD linkers (e.g.<br>&gt;     installed as /usr/bin/arm-none-linux-gnueabi-ld) as well as<br>&gt;     cross-compiled<br>&gt;     libc&#39;s (for non-bare-metal targets) are widely available, including<br>&gt;     on all<br>&gt;     Debian derivatives, it is impossible to use them together because<br>&gt;     the -fuse-ld= option allows to specify neither a linker prefix nor<br>&gt;     a full path to one.<br>&gt; <br>&gt;     The second reason is linker development, both when porting existing<br>&gt;     linkers<br>&gt;     to new architectures and when working on a new linker such as LLD.<br>&gt; <br>&gt;     Differential Revision: http://reviews.llvm.org/D17952<br>&gt; <br>&gt;     git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk at 262996<br>&gt; 91177308-0d34-0410-b5e6-96231b3b80d8<br>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14477c366d6ee4e41adf14837bc4f2f9?s=50"></div><header><strong>Build Error: Relocation R_X86_64_PC32</strong> from <string>Ryan Lovelett</string> &lt;swift-dev at ryan.lovelett.me&gt;<p>March 22, 2016 at 12:00:00pm</p></header><div class="content"><p>On Mon, Mar 14, 2016, at 06:42 PM, Dmitri Gribenko wrote:<br>&gt; On Mon, Mar 14, 2016 at 3:38 PM, Ryan Lovelett<br>&gt; &lt;swift-dev at ryan.lovelett.me&gt; wrote:<br>&gt; &gt; On Tue, Mar 1, 2016, at 12:16 AM, Dmitri Gribenko wrote:<br>&gt; &gt;&gt; IIRC there is no issue in the bug tracker, please feel free to file one!<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Also, if you are familiar with binutils internals, it might be helpful<br>&gt; &gt;&gt; to bisect the linker.<br>&gt; &gt;<br>&gt; &gt; I&#39;m finally getting around to bisecting binutils. I&#39;m making some<br>&gt; &gt; progress but I&#39;m getting hung up on one thing. The build script keeps<br>&gt; &gt; finding the &quot;regular&quot; linker at `/usr/bin/ld` instead of mine<br>&gt; &gt; `/tmp/binutils/2.25/usr/local/bin/ld`.<br>&gt; &gt;<br>&gt; &gt; I tried to update the PATH environment variable such that mine is before<br>&gt; &gt; `/usr/bin` but that doesn&#39;t seem to work. Is there an argument to send<br>&gt; &gt; that can force mine?<br>&gt; <br>&gt; I&#39;m afraid &#39;/usr/bin/ld&#39; is hardcoded in clang.  A few days ago Clang<br>&gt; added a command-line option to override that:<br>&gt; <br>&gt; commit 635bc7fefc12cc1333ba6ec77e563b7c8af01265<br>&gt; Author: Peter Zotov &lt;whitequark at whitequark.org&gt;<br>&gt; Date:   Wed Mar 9 05:18:16 2016 +0000<br>&gt; <br>&gt;     Accept absolute paths in the -fuse-ld option.<br>&gt; <br>&gt;     This patch extends the -fuse-ld option to accept a full path to an<br>&gt; executable<br>&gt;     and use it verbatim to invoke the linker. There are generally two<br>&gt;     reasons<br>&gt;     to desire this.<br>&gt; <br>&gt;     The first reason relates to the sad truth is that Clang is<br>&gt;     retargetable,<br>&gt;     Binutils are not.<br>&gt; <br>&gt;     While any Clang from a binary distribution is sufficient to compile<br>&gt;     code<br>&gt;     for a wide range of architectures and prefixed BFD linkers (e.g.<br>&gt;     installed as /usr/bin/arm-none-linux-gnueabi-ld) as well as<br>&gt;     cross-compiled<br>&gt;     libc&#39;s (for non-bare-metal targets) are widely available, including<br>&gt;     on all<br>&gt;     Debian derivatives, it is impossible to use them together because<br>&gt;     the -fuse-ld= option allows to specify neither a linker prefix nor<br>&gt;     a full path to one.<br>&gt; <br>&gt;     The second reason is linker development, both when porting existing<br>&gt;     linkers<br>&gt;     to new architectures and when working on a new linker such as LLD.<br>&gt; <br>&gt;     Differential Revision: http://reviews.llvm.org/D17952<br>&gt; <br>&gt;     git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk at 262996<br>&gt; 91177308-0d34-0410-b5e6-96231b3b80d8<br>&gt; <br>&gt; Dmitri<br></p><p>Phew. Well I finally got everything ready to where I could bisect<br>binutils. I won&#39;t bore with the details of what it took to actually be<br>able to bisect binutils (unless someone actually wants to know).<br></p><p>I bisected from 71090e7a9dde8d28ff5c4b44d6d83e270d1088e4 to<br>2bd25930221dea4bf33c13a89c111514491440e2. 2bd259 was good and 71090 was<br>bad.<br></p><p>ca3fe95e469b9daec153caa2c90665f5daaec2b5 is the first bad commit<br>commit ca3fe95e469b9daec153caa2c90665f5daaec2b5<br>Author: H.J. Lu &lt;hjl.tools at gmail.com&gt;<br>Date:   Thu Mar 5 06:34:39 2015 -0800<br></p><p>    Add extern_protected_data and set it for x86<br>    <br>    With copy relocation, address of protected data defined in the<br>    shared<br>    library may be external.  This patch adds extern_protected_data and<br>    changes _bfd_elf_symbol_refs_local_p to return false for protected<br>    data<br>    if extern_protected_data is true.<br>    <br>    bfd/<br>    <br>    	PR ld/pr15228<br>    	PR ld/pr17709<br>    	* elf-bfd.h (elf_backend_data): Add extern_protected_data.<br>    	* elf32-i386.c (elf_backend_extern_protected_data): New.<br>    	Defined to 1.<br>    	* elf64-x86-64.c (elf_backend_extern_protected_data): Likewise.<br>    	* elflink.c (_bfd_elf_adjust_dynamic_copy): Don&#39;t error on<br>    	copy relocs against protected symbols if extern_protected_data<br>    	is true.<br>    	(_bfd_elf_symbol_refs_local_p): Don&#39;t return true on protected<br>    	non-function symbols if extern_protected_data is true.<br>    	* elfxx-target.h (elf_backend_extern_protected_data): New.<br>    	Default to 0.<br>    	(elfNN_bed): Initialize extern_protected_data with<br>    	elf_backend_extern_protected_data.<br>    <br>    ld/testsuite/<br>    <br>    	PR ld/pr15228<br>    	PR ld/pr17709<br>    	* ld-i386/i386.exp (i386tests): Add a test for PR ld/17709.<br>    	* ld-i386/pr17709-nacl.rd: New file.<br>    	* ld-i386/pr17709.rd: Likewise.<br>    	* ld-i386/pr17709a.s: Likewise.<br>    	* ld-i386/pr17709b.s: Likewise.<br>    	* ld-i386/protected3.d: Updated.<br>    	* ld-i386/protected3.s: Likewise.<br>    	* ld-x86-64/pr17709-nacl.rd: New file.<br>    	* ld-x86-64/pr17709.rd: Likewise.<br>    	* ld-x86-64/pr17709a.s: Likewise.<br>    	* ld-x86-64/pr17709b.s: Likewise.<br>    	* ld-x86-64/protected3.d: Updated.<br>    	* ld-x86-64/protected3.s: Likewise.<br>    	* ld-x86-64/x86-64.exp (x86_64tests): Add a test for PR<br>    	ld/17709.<br></p><p>:040000 040000 7fc861c288f9bed44c6444d1b04e2f6e688aeeaf<br>fca3f6ce979e7c00ed44c04f506880015235806d M      bfd<br>:040000 040000 a5e358abb99b2b4089765f16904f9ebc496c0f12<br>7ccba1e77448a0155e56e8155073b40804b00daa M      ld<br></p><p>I&#39;d like to write this up as an issue, if one has not been created in<br>the 8-days it took me to get this working, is that a good idea or a bad<br>one?<br></p><p>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Build Error: Relocation R_X86_64_PC32</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>March 22, 2016 at 09:00:00am</p></header><div class="content"><p>On Tue, Mar 22, 2016 at 9:55 AM, Ryan Lovelett<br>&lt;swift-dev at ryan.lovelett.me&gt; wrote:<br>&gt; I&#39;d like to write this up as an issue, if one has not been created in<br>&gt; the 8-days it took me to get this working, is that a good idea or a bad<br>&gt; one?<br></p><p>Thank you for the hard work!  It is definitely a good idea to create a<br>bug, I am not aware of one existing on bugs.swift.org.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14477c366d6ee4e41adf14837bc4f2f9?s=50"></div><header><strong>Build Error: Relocation R_X86_64_PC32</strong> from <string>Ryan Lovelett</string> &lt;swift-dev at ryan.lovelett.me&gt;<p>March 22, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; Thank you for the hard work!  It is definitely a good idea to create a<br>&gt; bug, I am not aware of one existing on bugs.swift.org.<br></p><p>Great, I&#39;ve reported this as: https://bugs.swift.org/browse/SR-1023.<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Build Error: Relocation R_X86_64_PC32</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>March 22, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Mar 22, 2016, at 9:55 AM, Ryan Lovelett &lt;swift-dev at ryan.lovelett.me&gt; wrote:<br>&gt; <br>&gt; On Mon, Mar 14, 2016, at 06:42 PM, Dmitri Gribenko wrote:<br>&gt;&gt; On Mon, Mar 14, 2016 at 3:38 PM, Ryan Lovelett<br>&gt;&gt; &lt;swift-dev at ryan.lovelett.me&gt; wrote:<br>&gt;&gt;&gt; On Tue, Mar 1, 2016, at 12:16 AM, Dmitri Gribenko wrote:<br>&gt;&gt;&gt;&gt; IIRC there is no issue in the bug tracker, please feel free to file one!<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Also, if you are familiar with binutils internals, it might be helpful<br>&gt;&gt;&gt;&gt; to bisect the linker.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m finally getting around to bisecting binutils. I&#39;m making some<br>&gt;&gt;&gt; progress but I&#39;m getting hung up on one thing. The build script keeps<br>&gt;&gt;&gt; finding the &quot;regular&quot; linker at `/usr/bin/ld` instead of mine<br>&gt;&gt;&gt; `/tmp/binutils/2.25/usr/local/bin/ld`.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I tried to update the PATH environment variable such that mine is before<br>&gt;&gt;&gt; `/usr/bin` but that doesn&#39;t seem to work. Is there an argument to send<br>&gt;&gt;&gt; that can force mine?<br>&gt;&gt; <br>&gt;&gt; I&#39;m afraid &#39;/usr/bin/ld&#39; is hardcoded in clang.  A few days ago Clang<br>&gt;&gt; added a command-line option to override that:<br>&gt;&gt; <br>&gt;&gt; commit 635bc7fefc12cc1333ba6ec77e563b7c8af01265<br>&gt;&gt; Author: Peter Zotov &lt;whitequark at whitequark.org&gt;<br>&gt;&gt; Date:   Wed Mar 9 05:18:16 2016 +0000<br>&gt;&gt; <br>&gt;&gt;    Accept absolute paths in the -fuse-ld option.<br>&gt;&gt; <br>&gt;&gt;    This patch extends the -fuse-ld option to accept a full path to an<br>&gt;&gt; executable<br>&gt;&gt;    and use it verbatim to invoke the linker. There are generally two<br>&gt;&gt;    reasons<br>&gt;&gt;    to desire this.<br>&gt;&gt; <br>&gt;&gt;    The first reason relates to the sad truth is that Clang is<br>&gt;&gt;    retargetable,<br>&gt;&gt;    Binutils are not.<br>&gt;&gt; <br>&gt;&gt;    While any Clang from a binary distribution is sufficient to compile<br>&gt;&gt;    code<br>&gt;&gt;    for a wide range of architectures and prefixed BFD linkers (e.g.<br>&gt;&gt;    installed as /usr/bin/arm-none-linux-gnueabi-ld) as well as<br>&gt;&gt;    cross-compiled<br>&gt;&gt;    libc&#39;s (for non-bare-metal targets) are widely available, including<br>&gt;&gt;    on all<br>&gt;&gt;    Debian derivatives, it is impossible to use them together because<br>&gt;&gt;    the -fuse-ld= option allows to specify neither a linker prefix nor<br>&gt;&gt;    a full path to one.<br>&gt;&gt; <br>&gt;&gt;    The second reason is linker development, both when porting existing<br>&gt;&gt;    linkers<br>&gt;&gt;    to new architectures and when working on a new linker such as LLD.<br>&gt;&gt; <br>&gt;&gt;    Differential Revision: http://reviews.llvm.org/D17952<br>&gt;&gt; <br>&gt;&gt;    git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk at 262996<br>&gt;&gt; 91177308-0d34-0410-b5e6-96231b3b80d8<br>&gt;&gt; <br>&gt;&gt; Dmitri<br>&gt; <br>&gt; Phew. Well I finally got everything ready to where I could bisect<br>&gt; binutils. I won&#39;t bore with the details of what it took to actually be<br>&gt; able to bisect binutils (unless someone actually wants to know).<br>&gt; <br>&gt; I bisected from 71090e7a9dde8d28ff5c4b44d6d83e270d1088e4 to<br>&gt; 2bd25930221dea4bf33c13a89c111514491440e2. 2bd259 was good and 71090 was<br>&gt; bad.<br>&gt; <br>&gt; ca3fe95e469b9daec153caa2c90665f5daaec2b5 is the first bad commit<br>&gt; commit ca3fe95e469b9daec153caa2c90665f5daaec2b5<br>&gt; Author: H.J. Lu &lt;hjl.tools at gmail.com &lt;mailto:hjl.tools at gmail.com&gt;&gt;<br>&gt; Date:   Thu Mar 5 06:34:39 2015 -0800<br>&gt; <br>&gt;    Add extern_protected_data and set it for x86<br>&gt; <br>&gt;    With copy relocation, address of protected data defined in the<br>&gt;    shared<br>&gt;    library may be external.  This patch adds extern_protected_data and<br>&gt;    changes _bfd_elf_symbol_refs_local_p to return false for protected<br>&gt;    data<br>&gt;    if extern_protected_data is true.<br>&gt; <br>&gt;    bfd/<br>&gt; <br>&gt;    	PR ld/pr15228<br>&gt;    	PR ld/pr17709<br>&gt;    	* elf-bfd.h (elf_backend_data): Add extern_protected_data.<br>&gt;    	* elf32-i386.c (elf_backend_extern_protected_data): New.<br>&gt;    	Defined to 1.<br>&gt;    	* elf64-x86-64.c (elf_backend_extern_protected_data): Likewise.<br>&gt;    	* elflink.c (_bfd_elf_adjust_dynamic_copy): Don&#39;t error on<br>&gt;    	copy relocs against protected symbols if extern_protected_data<br>&gt;    	is true.<br>&gt;    	(_bfd_elf_symbol_refs_local_p): Don&#39;t return true on protected<br>&gt;    	non-function symbols if extern_protected_data is true.<br>&gt;    	* elfxx-target.h (elf_backend_extern_protected_data): New.<br>&gt;    	Default to 0.<br>&gt;    	(elfNN_bed): Initialize extern_protected_data with<br>&gt;    	elf_backend_extern_protected_data.<br>&gt; <br>&gt;    ld/testsuite/<br>&gt; <br>&gt;    	PR ld/pr15228<br>&gt;    	PR ld/pr17709<br>&gt;    	* ld-i386/i386.exp (i386tests): Add a test for PR ld/17709.<br>&gt;    	* ld-i386/pr17709-nacl.rd: New file.<br>&gt;    	* ld-i386/pr17709.rd: Likewise.<br>&gt;    	* ld-i386/pr17709a.s: Likewise.<br>&gt;    	* ld-i386/pr17709b.s: Likewise.<br>&gt;    	* ld-i386/protected3.d: Updated.<br>&gt;    	* ld-i386/protected3.s: Likewise.<br>&gt;    	* ld-x86-64/pr17709-nacl.rd: New file.<br>&gt;    	* ld-x86-64/pr17709.rd: Likewise.<br>&gt;    	* ld-x86-64/pr17709a.s: Likewise.<br>&gt;    	* ld-x86-64/pr17709b.s: Likewise.<br>&gt;    	* ld-x86-64/protected3.d: Updated.<br>&gt;    	* ld-x86-64/protected3.s: Likewise.<br>&gt;    	* ld-x86-64/x86-64.exp (x86_64tests): Add a test for PR<br>&gt;    	ld/17709.<br>&gt; <br>&gt; :040000 040000 7fc861c288f9bed44c6444d1b04e2f6e688aeeaf<br>&gt; fca3f6ce979e7c00ed44c04f506880015235806d M      bfd<br>&gt; :040000 040000 a5e358abb99b2b4089765f16904f9ebc496c0f12<br>&gt; 7ccba1e77448a0155e56e8155073b40804b00daa M      ld<br>&gt; <br>&gt; I&#39;d like to write this up as an issue, if one has not been created in<br>&gt; the 8-days it took me to get this working, is that a good idea or a bad<br>&gt; one?<br></p><p>Does this mean we need to do something on our side to suppress &quot;extern_protected_data&quot;?<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160322/d1f16d56/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b9904260218b6d7942782c2b2355f2aa?s=50"></div><header><strong>Build Error: Relocation R_X86_64_PC32</strong> from <string>William Dillon</string> &lt;william at housedillon.com&gt;<p>March 22, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; <br>&gt; Phew. Well I finally got everything ready to where I could bisect<br>&gt; binutils. I won&#39;t bore with the details of what it took to actually be<br>&gt; able to bisect binutils (unless someone actually wants to know).<br>&gt; <br></p><p>I would be interested if it’s not too much trouble.  I’ve been in a similar predicament with LLVM before.  I’d love to have another tool in the chest in case I have to do such a thing again.<br></p><p>- Will<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160322/d9522624/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14477c366d6ee4e41adf14837bc4f2f9?s=50"></div><header><strong>Build Error: Relocation R_X86_64_PC32</strong> from <string>Ryan Lovelett</string> &lt;swift-dev at ryan.lovelett.me&gt;<p>March 22, 2016 at 04:00:00pm</p></header><div class="content"><p>On Tue, Mar 22, 2016, at 01:26 PM, William Dillon wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Phew. Well I finally got everything ready to where I could bisect<br>&gt;&gt; binutils. I won&#39;t bore with the details of what it took to actually be<br>&gt;&gt; able to bisect binutils (unless someone actually wants to know).<br>&gt; <br>&gt; I would be interested if it’s not too much trouble.  I’ve been in a similar predicament with LLVM before.  I’d love to have another tool in the chest in case I have to do such a thing again.<br>&gt; <br>&gt; - Will<br></p><p>Not too much trouble at all. In fact, I kind of just want to tell<br>someone; so I&#39;m glad you asked!<br></p><p>The biggest challenge of the whole thing was just getting reproducable<br>builds using binutils. For the better part of a week I was unable to<br>build a linker that could link even the most basic &quot;Hello World&quot; source.<br>Eventually I ended up contacting the binutils package maintainer, Allan<br>McRae.<br></p><p>He pointed out that in order to build binutils on Arch there was a<br>specific order of operations. You have to build the<br>linux-api-headers-&gt;glibc-&gt;binutils-&gt;gcc-&gt;binutils-&gt;glibc. This was<br>especially true because of the change in the way that relocations occurs<br>in the newer binutils. Since Arch is &quot;rolling release&quot; distribution I<br>ended up having to make a VM that had a configuration of Arch from early<br>February, when I knew all this stuff worked. Once I could compile newer<br>versions of binutils and that made all the difference.<br></p><p>Now that I had a stable process for building binutils the next parts<br>were relatively straight forward. When I set out to do this I had<br>_thought_ what I am about to describe would be all I&#39;d need to do.<br></p><p>Effectively I went back to a version/commit of binutils that I new<br>worked. I new the last version that worked was package 2.25.1-3; so I<br>got the commit hash from the PKGBUILD script [1] that was used to make<br>that package. Which turned out to be 2bd25930. Next I wanted the commit<br>hash of the package that I knew didn&#39;t work 2.26-3; so I got the commit<br>hash from PKGBUILD script [2] that was used to make that package. Which<br>turned out to be 71090e7a.<br></p><p>Generally speaking that would have been enough to actually do the<br>bisecting. However since I knew the compilation loops were going to be<br>long I realized this could take a few hours of compiling and rinse and<br>repeat to actually find the script. Luckily `git bisect run` exists.<br></p><p>`git bisect run` is effectively like manual `git bisect` except you can<br>write a script that performs the action you&#39;d perform at each step of<br>the bisect.<br></p><p>&gt;From there I wrote a script that provided the steps to build binutils<br>from source. Then install that new binutils and compile Swift with that<br>updated version. The actual script that I used is right here [3].<br></p><p>The script ensures that the system gets back to a &quot;pristine&quot; state<br>between bisection steps and then compiles and installs binutils. It then<br>compiles Swift.<br></p><p>If anything goes wrong compiling binutils then its considered a<br>skippable commit and the script returns 125. If Swift fails to compile<br>it was considered a &quot;bad&quot; commit and the script returns 1. If Swift<br>compiled cleanly it was a &quot;good&quot; commit and the script returns 0.<br></p><p>The most important advice I can give you is don&#39;t forget the 125 return<br>code. If something goes wrong and you prematurely mark a commit as &quot;bad&quot;<br>then the entire bisect can complete but erroneously tell you which<br>commit was actually the first bad commit. In my opinion its better to<br>skip than prematurely mark as bad.<br></p><p>Once the script was written the hard part was over.<br></p><p>$ cd /directory/with/binutils/source<br>$ git bisect start 71090e7a9dde8d28ff5c4b44d6d83e270d1088e4<br>2bd25930221dea4bf33c13a89c111514491440e2<br>$ git bisect run ~/binutils-bisect.sh |&amp; tee -a ~/bisect-output.log<br></p><p>I put all of the logs and scripts in a Gist just in-case I ever need<br>them again in the future [4].<br></p><p>Hope that was enough information Will.<br></p><p>[1]<br>https://projects.archlinux.org/svntogit/packages.git/diff/trunk/?h=packages%2Fbinutils&amp;id=d5de6c456d1391bf802b675b1b6227f5dd3b7073&amp;context=40&amp;ignorews=0&amp;dt=0<br>[2]<br>https://projects.archlinux.org/svntogit/packages.git/commit/trunk?h=packages/binutils&amp;id=97e6d52b49ff3882a3ec7a5833ceb4569ac5d914<br>[3]<br>https://gist.github.com/RLovelett/f73fb5f701035b33417c#file-binutils-bisect-sh<br>[4] https://gist.github.com/RLovelett/f73fb5f701035b33417c<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b9904260218b6d7942782c2b2355f2aa?s=50"></div><header><strong>Build Error: Relocation R_X86_64_PC32</strong> from <string>William Dillon</string> &lt;william at housedillon.com&gt;<p>March 22, 2016 at 01:00:00pm</p></header><div class="content"><p>WOW!  That is fantastic!  Thanks for sharing.<br></p><p>- Will<br></p><p>&gt; On Mar 22, 2016, at 1:36 PM, Ryan Lovelett &lt;swift-dev at ryan.lovelett.me&gt; wrote:<br>&gt; <br>&gt; On Tue, Mar 22, 2016, at 01:26 PM, William Dillon wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Phew. Well I finally got everything ready to where I could bisect<br>&gt;&gt;&gt; binutils. I won&#39;t bore with the details of what it took to actually be<br>&gt;&gt;&gt; able to bisect binutils (unless someone actually wants to know).<br>&gt;&gt; <br>&gt;&gt; I would be interested if it’s not too much trouble.  I’ve been in a similar predicament with LLVM before.  I’d love to have another tool in the chest in case I have to do such a thing again.<br>&gt;&gt; <br>&gt;&gt; - Will<br>&gt; <br>&gt; Not too much trouble at all. In fact, I kind of just want to tell<br>&gt; someone; so I&#39;m glad you asked!<br>&gt; <br>&gt; The biggest challenge of the whole thing was just getting reproducable<br>&gt; builds using binutils. For the better part of a week I was unable to<br>&gt; build a linker that could link even the most basic &quot;Hello World&quot; source.<br>&gt; Eventually I ended up contacting the binutils package maintainer, Allan<br>&gt; McRae.<br>&gt; <br>&gt; He pointed out that in order to build binutils on Arch there was a<br>&gt; specific order of operations. You have to build the<br>&gt; linux-api-headers-&gt;glibc-&gt;binutils-&gt;gcc-&gt;binutils-&gt;glibc. This was<br>&gt; especially true because of the change in the way that relocations occurs<br>&gt; in the newer binutils. Since Arch is &quot;rolling release&quot; distribution I<br>&gt; ended up having to make a VM that had a configuration of Arch from early<br>&gt; February, when I knew all this stuff worked. Once I could compile newer<br>&gt; versions of binutils and that made all the difference.<br>&gt; <br>&gt; Now that I had a stable process for building binutils the next parts<br>&gt; were relatively straight forward. When I set out to do this I had<br>&gt; _thought_ what I am about to describe would be all I&#39;d need to do.<br>&gt; <br>&gt; Effectively I went back to a version/commit of binutils that I new<br>&gt; worked. I new the last version that worked was package 2.25.1-3; so I<br>&gt; got the commit hash from the PKGBUILD script [1] that was used to make<br>&gt; that package. Which turned out to be 2bd25930. Next I wanted the commit<br>&gt; hash of the package that I knew didn&#39;t work 2.26-3; so I got the commit<br>&gt; hash from PKGBUILD script [2] that was used to make that package. Which<br>&gt; turned out to be 71090e7a.<br>&gt; <br>&gt; Generally speaking that would have been enough to actually do the<br>&gt; bisecting. However since I knew the compilation loops were going to be<br>&gt; long I realized this could take a few hours of compiling and rinse and<br>&gt; repeat to actually find the script. Luckily `git bisect run` exists.<br>&gt; <br>&gt; `git bisect run` is effectively like manual `git bisect` except you can<br>&gt; write a script that performs the action you&#39;d perform at each step of<br>&gt; the bisect.<br>&gt; <br>&gt; From there I wrote a script that provided the steps to build binutils<br>&gt; from source. Then install that new binutils and compile Swift with that<br>&gt; updated version. The actual script that I used is right here [3].<br>&gt; <br>&gt; The script ensures that the system gets back to a &quot;pristine&quot; state<br>&gt; between bisection steps and then compiles and installs binutils. It then<br>&gt; compiles Swift.<br>&gt; <br>&gt; If anything goes wrong compiling binutils then its considered a<br>&gt; skippable commit and the script returns 125. If Swift fails to compile<br>&gt; it was considered a &quot;bad&quot; commit and the script returns 1. If Swift<br>&gt; compiled cleanly it was a &quot;good&quot; commit and the script returns 0.<br>&gt; <br>&gt; The most important advice I can give you is don&#39;t forget the 125 return<br>&gt; code. If something goes wrong and you prematurely mark a commit as &quot;bad&quot;<br>&gt; then the entire bisect can complete but erroneously tell you which<br>&gt; commit was actually the first bad commit. In my opinion its better to<br>&gt; skip than prematurely mark as bad.<br>&gt; <br>&gt; Once the script was written the hard part was over.<br>&gt; <br>&gt; $ cd /directory/with/binutils/source<br>&gt; $ git bisect start 71090e7a9dde8d28ff5c4b44d6d83e270d1088e4<br>&gt; 2bd25930221dea4bf33c13a89c111514491440e2<br>&gt; $ git bisect run ~/binutils-bisect.sh |&amp; tee -a ~/bisect-output.log<br>&gt; <br>&gt; I put all of the logs and scripts in a Gist just in-case I ever need<br>&gt; them again in the future [4].<br>&gt; <br>&gt; Hope that was enough information Will.<br>&gt; <br>&gt; [1]<br>&gt; https://projects.archlinux.org/svntogit/packages.git/diff/trunk/?h=packages%2Fbinutils&amp;id=d5de6c456d1391bf802b675b1b6227f5dd3b7073&amp;context=40&amp;ignorews=0&amp;dt=0<br>&gt; [2]<br>&gt; https://projects.archlinux.org/svntogit/packages.git/commit/trunk?h=packages/binutils&amp;id=97e6d52b49ff3882a3ec7a5833ceb4569ac5d914<br>&gt; [3]<br>&gt; https://gist.github.com/RLovelett/f73fb5f701035b33417c#file-binutils-bisect-sh<br>&gt; [4] https://gist.github.com/RLovelett/f73fb5f701035b33417c<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f38cb038c3d9ae705c4db3b5b5272906?s=50"></div><header><strong>Build Error: Relocation R_X86_64_PC32</strong> from <string>Greg Parker</string> &lt;gparker at apple.com&gt;<p>March 14, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Mar 14, 2016, at 3:38 PM, Ryan Lovelett via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Tue, Mar 1, 2016, at 12:16 AM, Dmitri Gribenko wrote:<br>&gt;&gt; <br>&gt;&gt; IIRC there is no issue in the bug tracker, please feel free to file one!<br>&gt;&gt; <br>&gt;&gt; Also, if you are familiar with binutils internals, it might be helpful<br>&gt;&gt; to bisect the linker.<br>&gt; <br>&gt; I&#39;m finally getting around to bisecting binutils. I&#39;m making some<br>&gt; progress but I&#39;m getting hung up on one thing. The build script keeps<br>&gt; finding the &quot;regular&quot; linker at `/usr/bin/ld` instead of mine<br>&gt; `/tmp/binutils/2.25/usr/local/bin/ld`.<br>&gt; <br>&gt; I tried to update the PATH environment variable such that mine is before<br>&gt; `/usr/bin` but that doesn&#39;t seem to work. Is there an argument to send<br>&gt; that can force mine?<br></p><p>Dumb answer: temporarily move /usr/bin/ld aside and install your linker there?<br></p><p><br>-- <br>Greg Parker     gparker at apple.com     Runtime Wrangler<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14477c366d6ee4e41adf14837bc4f2f9?s=50"></div><header><strong>Build Error: Relocation R_X86_64_PC32</strong> from <string>Ryan Lovelett</string> &lt;swift-dev at ryan.lovelett.me&gt;<p>March 14, 2016 at 07:00:00pm</p></header><div class="content"><p>On Mon, Mar 14, 2016, at 06:44 PM, Greg Parker wrote:<br>&gt; <br>&gt; &gt; On Mar 14, 2016, at 3:38 PM, Ryan Lovelett via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; &gt; <br>&gt; &gt;&gt; On Tue, Mar 1, 2016, at 12:16 AM, Dmitri Gribenko wrote:<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; IIRC there is no issue in the bug tracker, please feel free to file one!<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; Also, if you are familiar with binutils internals, it might be helpful<br>&gt; &gt;&gt; to bisect the linker.<br>&gt; &gt; <br>&gt; &gt; I&#39;m finally getting around to bisecting binutils. I&#39;m making some<br>&gt; &gt; progress but I&#39;m getting hung up on one thing. The build script keeps<br>&gt; &gt; finding the &quot;regular&quot; linker at `/usr/bin/ld` instead of mine<br>&gt; &gt; `/tmp/binutils/2.25/usr/local/bin/ld`.<br>&gt; &gt; <br>&gt; &gt; I tried to update the PATH environment variable such that mine is before<br>&gt; &gt; `/usr/bin` but that doesn&#39;t seem to work. Is there an argument to send<br>&gt; &gt; that can force mine?<br>&gt; <br>&gt; Dumb answer: temporarily move /usr/bin/ld aside and install your linker<br>&gt; there?<br></p><p>Hopefully not dumb since that&#39;s what I&#39;ve been doing! 😆<br></p><p>I build other things on the machine and I was hoping not to pollute<br>those builds with my tinkering. If there was an easy flag to specify it<br>that would have been ideal.<br></p><p>Instead I&#39;ll just stop those builds while I tinker.<br></p><p>Thanks for the suggestions.<br></p><p>&gt; <br>&gt; <br>&gt; -- <br>&gt; Greg Parker     gparker at apple.com     Runtime Wrangler<br>&gt; <br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
