<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>[Idea] &quot;guard not let&quot; optional binding</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>May 14, 2016 at 07:00:00am</p></header><div class="content"><p>If we want to check that an optional has a value and bail if it doesn&#39;t, we have the helpful pattern:<br></p><p>    guard let x = x else { throw SomeError }<br></p><p>However, it is also fairly common that you want to check that an optional *is* nil, and still bail if it isn’t (maybe using the value that you now know exists), e.g:<br></p><p>    guard cachedValue == nil else { return cachedValue! }<br>    cachedValue = //… expensive calculation<br></p><p>It seems a little bit “unfair” that we have this lovely clean `let` syntax when checking for Optional.Some, but we to have to do this ugly manual check against nil and explicit unwrap when checking for Optional.None. There is literally no other way to satisfy the guard statement; our optional bindings only go one-way can’t be evaluated.<br></p><p>What about if we introduced a “not” modifier to optional bindings?<br></p><p>    guard not let cachedValue = _someExpensiveResult else { return cachedValue }<br></p><p>This obviously wouldn’t make sense for “if let…” switching, as the variables get bound in the ‘else’ block and the code wouldn’t be very readable. For the special case of a guard statement, though, which only has an ‘else’ block, it does make some sense.<br></p><p>If we had something like this, certainly in my code, I’d be able to eliminate almost all (maybe even all) remaining force-unwraps of optionals; that’s great! It’d be amazing if the language was expressive enough that you could go without ever having to force-unwrap an optional. And it just makes sense. <br></p><p>Thoughts?<br></p><p>Karl<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c74c15ba14b1096d4e42900ddd2dacd0?s=50"></div><header><strong>[Idea] &quot;guard not let&quot; optional binding</strong> from <string>Patrick Smith</string> &lt;pgwsmith at gmail.com&gt;<p>May 14, 2016 at 03:00:00pm</p></header><div class="content"><p>I’d probably write that as:<br></p><p>if let value = cachedValue { return value }<br></p><p>cachedValue = // … expensive calculation<br></p><p><br>&gt; On 14 May 2016, at 3:52 PM, Karl via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; If we want to check that an optional has a value and bail if it doesn&#39;t, we have the helpful pattern:<br>&gt; <br>&gt;    guard let x = x else { throw SomeError }<br>&gt; <br>&gt; However, it is also fairly common that you want to check that an optional *is* nil, and still bail if it isn’t (maybe using the value that you now know exists), e.g:<br>&gt; <br>&gt;    guard cachedValue == nil else { return cachedValue! }<br>&gt;    cachedValue = //… expensive calculation<br>&gt; <br>&gt; It seems a little bit “unfair” that we have this lovely clean `let` syntax when checking for Optional.Some, but we to have to do this ugly manual check against nil and explicit unwrap when checking for Optional.None. There is literally no other way to satisfy the guard statement; our optional bindings only go one-way can’t be evaluated.<br>&gt; <br>&gt; What about if we introduced a “not” modifier to optional bindings?<br>&gt; <br>&gt;    guard not let cachedValue = _someExpensiveResult else { return cachedValue }<br>&gt; <br>&gt; This obviously wouldn’t make sense for “if let…” switching, as the variables get bound in the ‘else’ block and the code wouldn’t be very readable. For the special case of a guard statement, though, which only has an ‘else’ block, it does make some sense.<br>&gt; <br>&gt; If we had something like this, certainly in my code, I’d be able to eliminate almost all (maybe even all) remaining force-unwraps of optionals; that’s great! It’d be amazing if the language was expressive enough that you could go without ever having to force-unwrap an optional. And it just makes sense. <br>&gt; <br>&gt; Thoughts?<br>&gt; <br>&gt; Karl<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>[Idea] &quot;guard not let&quot; optional binding</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>May 14, 2016 at 08:00:00am</p></header><div class="content"><p>You could do that with everything and never use the guard statement at all if you wanted.<br></p><p>But it&#39;s actually pretty useful. There have been times where I’ve been heavily editing code and forgotten to leave the scope after a guard condition failed. Just recently I was editing some async functions with a callback with a throwable argument, I called the callback with the error but forgot to return afterwards; guard caught it for me.<br></p><p>Lets say I had your code, but was editing it to make it asynchronous:<br></p><p>    if let value = cachedValue { return value }<br></p><p>    cachedValue = // … expensive calculation<br>    return cachedValue!<br></p><p>could become (if I was tired, in the middle of some big code changes):<br></p><p>    if let value = cachedValue { callback(value) } // Oops, forgot to return, redundant re-calculation (and unexpected second callback) follows<br></p><p>    cachedValue = // … expensive calculation<br>    callback(cachedValue!)<br></p><p>guard wouldn’t let that happen. I use it every time I intend to exit scope early; it’s a better semantic model of my intention, so the compiler will notice on the off-chance I do mess up. <br></p><p><br>&gt; On 14 May 2016, at 07:56, Patrick Smith &lt;pgwsmith at gmail.com&gt; wrote:<br>&gt; <br>&gt; I’d probably write that as:<br>&gt; <br>&gt; if let value = cachedValue { return value }<br>&gt; <br>&gt; cachedValue = // … expensive calculation<br>&gt; <br>&gt; <br>&gt;&gt; On 14 May 2016, at 3:52 PM, Karl via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; If we want to check that an optional has a value and bail if it doesn&#39;t, we have the helpful pattern:<br>&gt;&gt; <br>&gt;&gt;   guard let x = x else { throw SomeError }<br>&gt;&gt; <br>&gt;&gt; However, it is also fairly common that you want to check that an optional *is* nil, and still bail if it isn’t (maybe using the value that you now know exists), e.g:<br>&gt;&gt; <br>&gt;&gt;   guard cachedValue == nil else { return cachedValue! }<br>&gt;&gt;   cachedValue = //… expensive calculation<br>&gt;&gt; <br>&gt;&gt; It seems a little bit “unfair” that we have this lovely clean `let` syntax when checking for Optional.Some, but we to have to do this ugly manual check against nil and explicit unwrap when checking for Optional.None. There is literally no other way to satisfy the guard statement; our optional bindings only go one-way can’t be evaluated.<br>&gt;&gt; <br>&gt;&gt; What about if we introduced a “not” modifier to optional bindings?<br>&gt;&gt; <br>&gt;&gt;   guard not let cachedValue = _someExpensiveResult else { return cachedValue }<br>&gt;&gt; <br>&gt;&gt; This obviously wouldn’t make sense for “if let…” switching, as the variables get bound in the ‘else’ block and the code wouldn’t be very readable. For the special case of a guard statement, though, which only has an ‘else’ block, it does make some sense.<br>&gt;&gt; <br>&gt;&gt; If we had something like this, certainly in my code, I’d be able to eliminate almost all (maybe even all) remaining force-unwraps of optionals; that’s great! It’d be amazing if the language was expressive enough that you could go without ever having to force-unwrap an optional. And it just makes sense. <br>&gt;&gt; <br>&gt;&gt; Thoughts?<br>&gt;&gt; <br>&gt;&gt; Karl<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Idea] &quot;guard not let&quot; optional binding</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>May 14, 2016 at 10:00:00am</p></header><div class="content"><p>-1 as there IMO some confusion between all these `not` and `else` and the <br>meaning of the expression at all is not obvious for me: &quot;check that not <br>allowed to assign _someExpensiveResult to some instance cachedValue, <br>otherwise return something&quot;<br></p><p>This really looks nice, clean and obvious :<br></p><p>guard cachedValue == nil else {<br>	// here you need just to fast return unwrapped value of cachedValue<br>	// so, IMO unwrapping it in this block is OK<br>	return cachedValue!<br>}<br>// here you want to have cachedValue == nil, so you&#39;ll need to unwrap <br>it(after assignment) in any case.<br></p><p>What I can see as improvement in this direction, something like this:<br>guard cachedValue == nil else let cachedValue! {<br>	// here you can use unwrapped cachedValue<br>	return cachedValue<br>}<br></p><p><br>Hmm... Btw, what about improving in optional binding: It is common to <br>shadow optional value name with unwrapped value with same name:<br></p><p>if let value = value {...} // too much noise<br></p><p>What about introduce such syntax:<br></p><p>if let value! {<br>   // unwrapped value here<br>}<br></p><p>Seems like clear and obvious about what does this mean. Opinions? (before I <br>drop this to separate thread)<br></p><p><br>On 14.05.2016 8:52, Karl via swift-evolution wrote:<br>&gt; If we want to check that an optional has a value and bail if it doesn&#39;t, we have the helpful pattern:<br>&gt;<br>&gt;     guard let x = x else { throw SomeError }<br>&gt;<br>&gt; However, it is also fairly common that you want to check that an optional *is* nil, and still bail if it isn’t (maybe using the value that you now know exists), e.g:<br>&gt;<br>&gt;     guard cachedValue == nil else { return cachedValue! }<br>&gt;     cachedValue = //… expensive calculation<br>&gt;<br>&gt; It seems a little bit “unfair” that we have this lovely clean `let` syntax when checking for Optional.Some, but we to have to do this ugly manual check against nil and explicit unwrap when checking for Optional.None. There is literally no other way to satisfy the guard statement; our optional bindings only go one-way can’t be evaluated.<br>&gt;<br>&gt; What about if we introduced a “not” modifier to optional bindings?<br>&gt;<br>&gt;     guard not let cachedValue = _someExpensiveResult else { return cachedValue }<br>&gt;<br>&gt; This obviously wouldn’t make sense for “if let…” switching, as the variables get bound in the ‘else’ block and the code wouldn’t be very readable. For the special case of a guard statement, though, which only has an ‘else’ block, it does make some sense.<br>&gt;<br>&gt; If we had something like this, certainly in my code, I’d be able to eliminate almost all (maybe even all) remaining force-unwraps of optionals; that’s great! It’d be amazing if the language was expressive enough that you could go without ever having to force-unwrap an optional. And it just makes sense.<br>&gt;<br>&gt; Thoughts?<br>&gt;<br>&gt; Karl<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Idea] if let value!</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>May 17, 2016 at 04:00:00pm</p></header><div class="content"><p>It is common to shadow optional value name with unwrapped value with same name:<br></p><p>if let someGoodValue = someGoodValue {...}<br></p><p>What if we&#39;ll have a syntax to not repeat the variable name to achieve the <br>same target:<br></p><p>if let someGoodValue! {...}<br></p><p>What do you think?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/57885cfd0c4b4db16653e76d9e6f0266?s=50"></div><header><strong>[Idea] if let value!</strong> from <string>Johan Jensen</string> &lt;jj at johanjensen.dk&gt;<p>May 17, 2016 at 03:00:00pm</p></header><div class="content"><p>This was one of the first and most commonly suggested ideas, when the Swift<br>Evolution mailing list first started.<br>Chris Lattner sums it up<br>&lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html&gt;<br>in one of those threads:<br></p><p>&gt; This is commonly requested - the problem is that while it does help<br>reduce boilerplate, it runs counter to the goal of improving clarity.<br></p><p>— Johan<br></p><p>On Tue, May 17, 2016 at 3:43 PM, Vladimir.S via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; It is common to shadow optional value name with unwrapped value with same<br>&gt; name:<br>&gt;<br>&gt; if let someGoodValue = someGoodValue {...}<br>&gt;<br>&gt; What if we&#39;ll have a syntax to not repeat the variable name to achieve the<br>&gt; same target:<br>&gt;<br>&gt; if let someGoodValue! {...}<br>&gt;<br>&gt; What do you think?<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160517/f029355a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Idea] if let value!</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>May 17, 2016 at 06:00:00pm</p></header><div class="content"><p>On 17.05.2016 16:51, Johan Jensen wrote:<br> &gt; This was one of the first and most commonly suggested ideas, when the Swift<br> &gt; Evolution mailing list first started.<br> &gt; Chris Lattner sums it up<br> &gt; <br>&lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html&gt;<br> &gt; in one of those threads:<br> &gt;<br> &gt;&gt; This is commonly requested - the problem is that while it does help<br> &gt; reduce boilerplate, it runs counter to the goal of improving clarity.<br> &gt;<br> &gt; — Johan<br></p><p>Oh, thank you for letting this know.<br></p><p>Well, I totally disagree with Chris. And as soon as there was no &#39;official&#39; <br>proposal and &#39;official&#39; decision, I&#39;d like to discuss this more.<br></p><p>I saw a lot of code like<br>if let mySomeValue = mySomeValue {} in sources and even in books.<br>Plus, I really believe that<br>if let mySomeValue! {..} is better in any way: readability, less space for <br>errors(when you need to repeat the same name) etc<br></p><p>FWIW, I suggest more explicit variant:<br>if let value! {...} // with exclamation mark<br>In that &quot;old&quot; proposal there was `if let value {...}`, was not so clear.<br></p><p>I can&#39;t accept an argument that you can use another name - as usually <br>&#39;good&#39; name is already &#39;crafted&#39; for the instance and you want to use it in <br>next code.<br>Otherwise, we need a &#39;best practice&#39; to name optional variables with some <br>prefix or suffix like : mySomeValueOpt, then `if let mySomeValue = <br>mySomeValueOpt` will have a sense. But as I understand, we don&#39;t want to <br>use such approach.<br>Additionally, when you shadow optional value with same name - you are <br>*protecting* yourself from using optional value inside block of unwrapped <br>code. IMO it is a good idea.<br>And want we or don&#39;t want, we already have this practice widely. So I <br>believe this(my) proposal will improve the code.<br></p><p>I&#39;d like to get opinion of the community regarding this feature.<br></p><p>On 17.05.2016 16:51, Johan Jensen wrote:<br>&gt; This was one of the first and most commonly suggested ideas, when the Swift<br>&gt; Evolution mailing list first started.<br>&gt; Chris Lattner sums it up<br>&gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html&gt;<br>&gt; in one of those threads:<br>&gt;<br>&gt;&gt; This is commonly requested - the problem is that while it does help<br>&gt; reduce boilerplate, it runs counter to the goal of improving clarity.<br>&gt;<br>&gt; — Johan<br>&gt;<br>&gt; On Tue, May 17, 2016 at 3:43 PM, Vladimir.S via swift-evolution<br>&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;<br>&gt;     It is common to shadow optional value name with unwrapped value with<br>&gt;     same name:<br>&gt;<br>&gt;     if let someGoodValue = someGoodValue {...}<br>&gt;<br>&gt;     What if we&#39;ll have a syntax to not repeat the variable name to achieve<br>&gt;     the same target:<br>&gt;<br>&gt;     if let someGoodValue! {...}<br>&gt;<br>&gt;     What do you think?<br>&gt;     _______________________________________________<br>&gt;     swift-evolution mailing list<br>&gt;     swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e910871dda004717de19e83626308b5a?s=50"></div><header><strong>[Idea] if let value!</strong> from <string>Tony Allevato</string> &lt;allevato at google.com&gt;<p>May 17, 2016 at 03:00:00pm</p></header><div class="content"><p>While I&#39;ve sometimes (early on) wished for a shorter-hand syntax for that<br>construct, I&#39;ve never been able to think of something that I thought was<br>better. I&#39;ve gotten to the point where I don&#39;t particularly mind it anymore.<br></p><p>Regarding the exclamation point specifically, seeing one of those in an<br>expression context says to me &quot;this thing will die horribly if it is<br>nil/throws an error&quot;. Using it in this context where that&#39;s not the case<br>would probably go against users&#39; expectations.<br></p><p><br>On Tue, May 17, 2016 at 8:05 AM Vladimir.S via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On 17.05.2016 16:51, Johan Jensen wrote:<br>&gt;  &gt; This was one of the first and most commonly suggested ideas, when the<br>&gt; Swift<br>&gt;  &gt; Evolution mailing list first started.<br>&gt;  &gt; Chris Lattner sums it up<br>&gt;  &gt;<br>&gt; &lt;<br>&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html<br>&gt; &gt;<br>&gt;  &gt; in one of those threads:<br>&gt;  &gt;<br>&gt;  &gt;&gt; This is commonly requested - the problem is that while it does help<br>&gt;  &gt; reduce boilerplate, it runs counter to the goal of improving clarity.<br>&gt;  &gt;<br>&gt;  &gt; — Johan<br>&gt;<br>&gt; Oh, thank you for letting this know.<br>&gt;<br>&gt; Well, I totally disagree with Chris. And as soon as there was no &#39;official&#39;<br>&gt; proposal and &#39;official&#39; decision, I&#39;d like to discuss this more.<br>&gt;<br>&gt; I saw a lot of code like<br>&gt; if let mySomeValue = mySomeValue {} in sources and even in books.<br>&gt; Plus, I really believe that<br>&gt; if let mySomeValue! {..} is better in any way: readability, less space for<br>&gt; errors(when you need to repeat the same name) etc<br>&gt;<br>&gt; FWIW, I suggest more explicit variant:<br>&gt; if let value! {...} // with exclamation mark<br>&gt; In that &quot;old&quot; proposal there was `if let value {...}`, was not so clear.<br>&gt;<br>&gt; I can&#39;t accept an argument that you can use another name - as usually<br>&gt; &#39;good&#39; name is already &#39;crafted&#39; for the instance and you want to use it in<br>&gt; next code.<br>&gt; Otherwise, we need a &#39;best practice&#39; to name optional variables with some<br>&gt; prefix or suffix like : mySomeValueOpt, then `if let mySomeValue =<br>&gt; mySomeValueOpt` will have a sense. But as I understand, we don&#39;t want to<br>&gt; use such approach.<br>&gt; Additionally, when you shadow optional value with same name - you are<br>&gt; *protecting* yourself from using optional value inside block of unwrapped<br>&gt; code. IMO it is a good idea.<br>&gt; And want we or don&#39;t want, we already have this practice widely. So I<br>&gt; believe this(my) proposal will improve the code.<br>&gt;<br>&gt; I&#39;d like to get opinion of the community regarding this feature.<br>&gt;<br>&gt; On 17.05.2016 16:51, Johan Jensen wrote:<br>&gt; &gt; This was one of the first and most commonly suggested ideas, when the<br>&gt; Swift<br>&gt; &gt; Evolution mailing list first started.<br>&gt; &gt; Chris Lattner sums it up<br>&gt; &gt; &lt;<br>&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html<br>&gt; &gt;<br>&gt; &gt; in one of those threads:<br>&gt; &gt;<br>&gt; &gt;&gt; This is commonly requested - the problem is that while it does help<br>&gt; &gt; reduce boilerplate, it runs counter to the goal of improving clarity.<br>&gt; &gt;<br>&gt; &gt; — Johan<br>&gt; &gt;<br>&gt; &gt; On Tue, May 17, 2016 at 3:43 PM, Vladimir.S via swift-evolution<br>&gt; &gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;     It is common to shadow optional value name with unwrapped value with<br>&gt; &gt;     same name:<br>&gt; &gt;<br>&gt; &gt;     if let someGoodValue = someGoodValue {...}<br>&gt; &gt;<br>&gt; &gt;     What if we&#39;ll have a syntax to not repeat the variable name to<br>&gt; achieve<br>&gt; &gt;     the same target:<br>&gt; &gt;<br>&gt; &gt;     if let someGoodValue! {...}<br>&gt; &gt;<br>&gt; &gt;     What do you think?<br>&gt; &gt;     _______________________________________________<br>&gt; &gt;     swift-evolution mailing list<br>&gt; &gt;     swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160517/b06dea4f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>[Idea] if let value!</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>May 17, 2016 at 10:00:00am</p></header><div class="content"><p>Yep - same here. I think I was one of the first to propose we find some solution to this on the list back when it first started, and oddly enough, with more Swift experience comes less and less feeling of this even being a problem. I think as you start thinking more “in Swift” you start structuring your code differently, using guards, changing the nature of the flow, and suddenly these situations come up less often.<br></p><p>l8r<br>Sean<br></p><p><br>&gt; On May 17, 2016, at 10:13 AM, Tony Allevato via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; While I&#39;ve sometimes (early on) wished for a shorter-hand syntax for that construct, I&#39;ve never been able to think of something that I thought was better. I&#39;ve gotten to the point where I don&#39;t particularly mind it anymore.<br>&gt; <br>&gt; Regarding the exclamation point specifically, seeing one of those in an expression context says to me &quot;this thing will die horribly if it is nil/throws an error&quot;. Using it in this context where that&#39;s not the case would probably go against users&#39; expectations.<br>&gt; <br>&gt; <br>&gt; On Tue, May 17, 2016 at 8:05 AM Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; On 17.05.2016 16:51, Johan Jensen wrote:<br>&gt;  &gt; This was one of the first and most commonly suggested ideas, when the Swift<br>&gt;  &gt; Evolution mailing list first started.<br>&gt;  &gt; Chris Lattner sums it up<br>&gt;  &gt;<br>&gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html&gt;<br>&gt;  &gt; in one of those threads:<br>&gt;  &gt;<br>&gt;  &gt;&gt; This is commonly requested - the problem is that while it does help<br>&gt;  &gt; reduce boilerplate, it runs counter to the goal of improving clarity.<br>&gt;  &gt;<br>&gt;  &gt; — Johan<br>&gt; <br>&gt; Oh, thank you for letting this know.<br>&gt; <br>&gt; Well, I totally disagree with Chris. And as soon as there was no &#39;official&#39;<br>&gt; proposal and &#39;official&#39; decision, I&#39;d like to discuss this more.<br>&gt; <br>&gt; I saw a lot of code like<br>&gt; if let mySomeValue = mySomeValue {} in sources and even in books.<br>&gt; Plus, I really believe that<br>&gt; if let mySomeValue! {..} is better in any way: readability, less space for<br>&gt; errors(when you need to repeat the same name) etc<br>&gt; <br>&gt; FWIW, I suggest more explicit variant:<br>&gt; if let value! {...} // with exclamation mark<br>&gt; In that &quot;old&quot; proposal there was `if let value {...}`, was not so clear.<br>&gt; <br>&gt; I can&#39;t accept an argument that you can use another name - as usually<br>&gt; &#39;good&#39; name is already &#39;crafted&#39; for the instance and you want to use it in<br>&gt; next code.<br>&gt; Otherwise, we need a &#39;best practice&#39; to name optional variables with some<br>&gt; prefix or suffix like : mySomeValueOpt, then `if let mySomeValue =<br>&gt; mySomeValueOpt` will have a sense. But as I understand, we don&#39;t want to<br>&gt; use such approach.<br>&gt; Additionally, when you shadow optional value with same name - you are<br>&gt; *protecting* yourself from using optional value inside block of unwrapped<br>&gt; code. IMO it is a good idea.<br>&gt; And want we or don&#39;t want, we already have this practice widely. So I<br>&gt; believe this(my) proposal will improve the code.<br>&gt; <br>&gt; I&#39;d like to get opinion of the community regarding this feature.<br>&gt; <br>&gt; On 17.05.2016 16:51, Johan Jensen wrote:<br>&gt; &gt; This was one of the first and most commonly suggested ideas, when the Swift<br>&gt; &gt; Evolution mailing list first started.<br>&gt; &gt; Chris Lattner sums it up<br>&gt; &gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html&gt;<br>&gt; &gt; in one of those threads:<br>&gt; &gt;<br>&gt; &gt;&gt; This is commonly requested - the problem is that while it does help<br>&gt; &gt; reduce boilerplate, it runs counter to the goal of improving clarity.<br>&gt; &gt;<br>&gt; &gt; — Johan<br>&gt; &gt;<br>&gt; &gt; On Tue, May 17, 2016 at 3:43 PM, Vladimir.S via swift-evolution<br>&gt; &gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;     It is common to shadow optional value name with unwrapped value with<br>&gt; &gt;     same name:<br>&gt; &gt;<br>&gt; &gt;     if let someGoodValue = someGoodValue {...}<br>&gt; &gt;<br>&gt; &gt;     What if we&#39;ll have a syntax to not repeat the variable name to achieve<br>&gt; &gt;     the same target:<br>&gt; &gt;<br>&gt; &gt;     if let someGoodValue! {...}<br>&gt; &gt;<br>&gt; &gt;     What do you think?<br>&gt; &gt;     _______________________________________________<br>&gt; &gt;     swift-evolution mailing list<br>&gt; &gt;     swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Idea] if let value!</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>May 17, 2016 at 05:00:00pm</p></header><div class="content"><p>FWIW, agreed that more complex guard statements with shorter methods avoid the issue altogether (reminds me of using unless for similar purpose in perl).<br></p><p>Regards<br>LM<br>(From mobile)<br></p><p>&gt; On May 17, 2016, at 5:15 PM, Sean Heber via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Yep - same here. I think I was one of the first to propose we find some solution to this on the list back when it first started, and oddly enough, with more Swift experience comes less and less feeling of this even being a problem. I think as you start thinking more “in Swift” you start structuring your code differently, using guards, changing the nature of the flow, and suddenly these situations come up less often.<br>&gt; <br>&gt; l8r<br>&gt; Sean<br>&gt; <br>&gt; <br>&gt;&gt; On May 17, 2016, at 10:13 AM, Tony Allevato via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; While I&#39;ve sometimes (early on) wished for a shorter-hand syntax for that construct, I&#39;ve never been able to think of something that I thought was better. I&#39;ve gotten to the point where I don&#39;t particularly mind it anymore.<br>&gt;&gt; <br>&gt;&gt; Regarding the exclamation point specifically, seeing one of those in an expression context says to me &quot;this thing will die horribly if it is nil/throws an error&quot;. Using it in this context where that&#39;s not the case would probably go against users&#39; expectations.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Tue, May 17, 2016 at 8:05 AM Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; On 17.05.2016 16:51, Johan Jensen wrote:<br>&gt;&gt;&gt; This was one of the first and most commonly suggested ideas, when the Swift<br>&gt;&gt;&gt; Evolution mailing list first started.<br>&gt;&gt;&gt; Chris Lattner sums it up<br>&gt;&gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html&gt;<br>&gt;&gt;&gt; in one of those threads:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This is commonly requested - the problem is that while it does help<br>&gt;&gt;&gt; reduce boilerplate, it runs counter to the goal of improving clarity.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; — Johan<br>&gt;&gt; <br>&gt;&gt; Oh, thank you for letting this know.<br>&gt;&gt; <br>&gt;&gt; Well, I totally disagree with Chris. And as soon as there was no &#39;official&#39;<br>&gt;&gt; proposal and &#39;official&#39; decision, I&#39;d like to discuss this more.<br>&gt;&gt; <br>&gt;&gt; I saw a lot of code like<br>&gt;&gt; if let mySomeValue = mySomeValue {} in sources and even in books.<br>&gt;&gt; Plus, I really believe that<br>&gt;&gt; if let mySomeValue! {..} is better in any way: readability, less space for<br>&gt;&gt; errors(when you need to repeat the same name) etc<br>&gt;&gt; <br>&gt;&gt; FWIW, I suggest more explicit variant:<br>&gt;&gt; if let value! {...} // with exclamation mark<br>&gt;&gt; In that &quot;old&quot; proposal there was `if let value {...}`, was not so clear.<br>&gt;&gt; <br>&gt;&gt; I can&#39;t accept an argument that you can use another name - as usually<br>&gt;&gt; &#39;good&#39; name is already &#39;crafted&#39; for the instance and you want to use it in<br>&gt;&gt; next code.<br>&gt;&gt; Otherwise, we need a &#39;best practice&#39; to name optional variables with some<br>&gt;&gt; prefix or suffix like : mySomeValueOpt, then `if let mySomeValue =<br>&gt;&gt; mySomeValueOpt` will have a sense. But as I understand, we don&#39;t want to<br>&gt;&gt; use such approach.<br>&gt;&gt; Additionally, when you shadow optional value with same name - you are<br>&gt;&gt; *protecting* yourself from using optional value inside block of unwrapped<br>&gt;&gt; code. IMO it is a good idea.<br>&gt;&gt; And want we or don&#39;t want, we already have this practice widely. So I<br>&gt;&gt; believe this(my) proposal will improve the code.<br>&gt;&gt; <br>&gt;&gt; I&#39;d like to get opinion of the community regarding this feature.<br>&gt;&gt; <br>&gt;&gt;&gt; On 17.05.2016 16:51, Johan Jensen wrote:<br>&gt;&gt;&gt; This was one of the first and most commonly suggested ideas, when the Swift<br>&gt;&gt;&gt; Evolution mailing list first started.<br>&gt;&gt;&gt; Chris Lattner sums it up<br>&gt;&gt;&gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html&gt;<br>&gt;&gt;&gt; in one of those threads:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This is commonly requested - the problem is that while it does help<br>&gt;&gt;&gt; reduce boilerplate, it runs counter to the goal of improving clarity.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; — Johan<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Tue, May 17, 2016 at 3:43 PM, Vladimir.S via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    It is common to shadow optional value name with unwrapped value with<br>&gt;&gt;&gt;    same name:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    if let someGoodValue = someGoodValue {...}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    What if we&#39;ll have a syntax to not repeat the variable name to achieve<br>&gt;&gt;&gt;    the same target:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    if let someGoodValue! {...}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    What do you think?<br>&gt;&gt;&gt;    _______________________________________________<br>&gt;&gt;&gt;    swift-evolution mailing list<br>&gt;&gt;&gt;    swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;    https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Idea] if let value!</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 17, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On May 17, 2016, at 10:13 AM, Tony Allevato via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; While I&#39;ve sometimes (early on) wished for a shorter-hand syntax for that construct, I&#39;ve never been able to think of something that I thought was better. I&#39;ve gotten to the point where I don&#39;t particularly mind it anymore.<br>&gt; <br>&gt; Regarding the exclamation point specifically, seeing one of those in an expression context says to me &quot;this thing will die horribly if it is nil/throws an error&quot;. Using it in this context where that&#39;s not the case would probably go against users&#39; expectations.<br></p><p>Agree.  If we are going have syntax similar to pattern matching it should be the same as pattern matching.  This would mean using ‘?&#39; rather than ‘!’.  However, we already have generalized pattern matching with `if case` for that.  This topic has been debated extensively.<br></p><p>&gt; <br>&gt; <br>&gt; On Tue, May 17, 2016 at 8:05 AM Vladimir.S via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; On 17.05.2016 16:51, Johan Jensen wrote:<br>&gt;  &gt; This was one of the first and most commonly suggested ideas, when the Swift<br>&gt;  &gt; Evolution mailing list first started.<br>&gt;  &gt; Chris Lattner sums it up<br>&gt;  &gt;<br>&gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html&gt;&gt;<br>&gt;  &gt; in one of those threads:<br>&gt;  &gt;<br>&gt;  &gt;&gt; This is commonly requested - the problem is that while it does help<br>&gt;  &gt; reduce boilerplate, it runs counter to the goal of improving clarity.<br>&gt;  &gt;<br>&gt;  &gt; — Johan<br>&gt; <br>&gt; Oh, thank you for letting this know.<br>&gt; <br>&gt; Well, I totally disagree with Chris. And as soon as there was no &#39;official&#39;<br>&gt; proposal and &#39;official&#39; decision, I&#39;d like to discuss this more.<br>&gt; <br>&gt; I saw a lot of code like<br>&gt; if let mySomeValue = mySomeValue {} in sources and even in books.<br>&gt; Plus, I really believe that<br>&gt; if let mySomeValue! {..} is better in any way: readability, less space for<br>&gt; errors(when you need to repeat the same name) etc<br>&gt; <br>&gt; FWIW, I suggest more explicit variant:<br>&gt; if let value! {...} // with exclamation mark<br>&gt; In that &quot;old&quot; proposal there was `if let value {...}`, was not so clear.<br>&gt; <br>&gt; I can&#39;t accept an argument that you can use another name - as usually<br>&gt; &#39;good&#39; name is already &#39;crafted&#39; for the instance and you want to use it in<br>&gt; next code.<br>&gt; Otherwise, we need a &#39;best practice&#39; to name optional variables with some<br>&gt; prefix or suffix like : mySomeValueOpt, then `if let mySomeValue =<br>&gt; mySomeValueOpt` will have a sense. But as I understand, we don&#39;t want to<br>&gt; use such approach.<br>&gt; Additionally, when you shadow optional value with same name - you are<br>&gt; *protecting* yourself from using optional value inside block of unwrapped<br>&gt; code. IMO it is a good idea.<br>&gt; And want we or don&#39;t want, we already have this practice widely. So I<br>&gt; believe this(my) proposal will improve the code.<br>&gt; <br>&gt; I&#39;d like to get opinion of the community regarding this feature.<br>&gt; <br>&gt; On 17.05.2016 16:51, Johan Jensen wrote:<br>&gt; &gt; This was one of the first and most commonly suggested ideas, when the Swift<br>&gt; &gt; Evolution mailing list first started.<br>&gt; &gt; Chris Lattner sums it up<br>&gt; &gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html&gt;&gt;<br>&gt; &gt; in one of those threads:<br>&gt; &gt;<br>&gt; &gt;&gt; This is commonly requested - the problem is that while it does help<br>&gt; &gt; reduce boilerplate, it runs counter to the goal of improving clarity.<br>&gt; &gt;<br>&gt; &gt; — Johan<br>&gt; &gt;<br>&gt; &gt; On Tue, May 17, 2016 at 3:43 PM, Vladimir.S via swift-evolution<br>&gt; &gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;     It is common to shadow optional value name with unwrapped value with<br>&gt; &gt;     same name:<br>&gt; &gt;<br>&gt; &gt;     if let someGoodValue = someGoodValue {...}<br>&gt; &gt;<br>&gt; &gt;     What if we&#39;ll have a syntax to not repeat the variable name to achieve<br>&gt; &gt;     the same target:<br>&gt; &gt;<br>&gt; &gt;     if let someGoodValue! {...}<br>&gt; &gt;<br>&gt; &gt;     What do you think?<br>&gt; &gt;     _______________________________________________<br>&gt; &gt;     swift-evolution mailing list<br>&gt; &gt;     swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt; &gt;     https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160517/20a7de92/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c74c15ba14b1096d4e42900ddd2dacd0?s=50"></div><header><strong>[Idea] if let value!</strong> from <string>Patrick Smith</string> &lt;pgwsmith at gmail.com&gt;<p>May 18, 2016 at 01:00:00am</p></header><div class="content"><p>Here’s a idea, what if you could use a symbol to denote that you want the same name used?<br></p><p>Here’s an interesting sign from music: https://en.wikipedia.org/wiki/Repeat_sign<br></p><p>Then you can write (one) of these:<br></p><p>if let |: = mySomeValue {<br>  // Use unwrapped<br>}<br></p><p>if let mySomeValue = :| {<br>  // Use unwrapped<br>}<br></p><p>Not sure which one is more clear. Just a totally random idea! I’m not sure about the above symbols, but it would help in other places too from memory to not have to write the same variable name twice.<br></p><p>&gt; On 18 May 2016, at 1:18 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On May 17, 2016, at 10:13 AM, Tony Allevato via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; While I&#39;ve sometimes (early on) wished for a shorter-hand syntax for that construct, I&#39;ve never been able to think of something that I thought was better. I&#39;ve gotten to the point where I don&#39;t particularly mind it anymore.<br>&gt;&gt; <br>&gt;&gt; Regarding the exclamation point specifically, seeing one of those in an expression context says to me &quot;this thing will die horribly if it is nil/throws an error&quot;. Using it in this context where that&#39;s not the case would probably go against users&#39; expectations.<br>&gt; <br>&gt; Agree.  If we are going have syntax similar to pattern matching it should be the same as pattern matching.  This would mean using ‘?&#39; rather than ‘!’.  However, we already have generalized pattern matching with `if case` for that.  This topic has been debated extensively.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Tue, May 17, 2016 at 8:05 AM Vladimir.S via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; On 17.05.2016 16:51, Johan Jensen wrote:<br>&gt;&gt;  &gt; This was one of the first and most commonly suggested ideas, when the Swift<br>&gt;&gt;  &gt; Evolution mailing list first started.<br>&gt;&gt;  &gt; Chris Lattner sums it up<br>&gt;&gt;  &gt;<br>&gt;&gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html&gt;&gt;<br>&gt;&gt;  &gt; in one of those threads:<br>&gt;&gt;  &gt;<br>&gt;&gt;  &gt;&gt; This is commonly requested - the problem is that while it does help<br>&gt;&gt;  &gt; reduce boilerplate, it runs counter to the goal of improving clarity.<br>&gt;&gt;  &gt;<br>&gt;&gt;  &gt; — Johan<br>&gt;&gt; <br>&gt;&gt; Oh, thank you for letting this know.<br>&gt;&gt; <br>&gt;&gt; Well, I totally disagree with Chris. And as soon as there was no &#39;official&#39;<br>&gt;&gt; proposal and &#39;official&#39; decision, I&#39;d like to discuss this more.<br>&gt;&gt; <br>&gt;&gt; I saw a lot of code like<br>&gt;&gt; if let mySomeValue = mySomeValue {} in sources and even in books.<br>&gt;&gt; Plus, I really believe that<br>&gt;&gt; if let mySomeValue! {..} is better in any way: readability, less space for<br>&gt;&gt; errors(when you need to repeat the same name) etc<br>&gt;&gt; <br>&gt;&gt; FWIW, I suggest more explicit variant:<br>&gt;&gt; if let value! {...} // with exclamation mark<br>&gt;&gt; In that &quot;old&quot; proposal there was `if let value {...}`, was not so clear.<br>&gt;&gt; <br>&gt;&gt; I can&#39;t accept an argument that you can use another name - as usually<br>&gt;&gt; &#39;good&#39; name is already &#39;crafted&#39; for the instance and you want to use it in<br>&gt;&gt; next code.<br>&gt;&gt; Otherwise, we need a &#39;best practice&#39; to name optional variables with some<br>&gt;&gt; prefix or suffix like : mySomeValueOpt, then `if let mySomeValue =<br>&gt;&gt; mySomeValueOpt` will have a sense. But as I understand, we don&#39;t want to<br>&gt;&gt; use such approach.<br>&gt;&gt; Additionally, when you shadow optional value with same name - you are<br>&gt;&gt; *protecting* yourself from using optional value inside block of unwrapped<br>&gt;&gt; code. IMO it is a good idea.<br>&gt;&gt; And want we or don&#39;t want, we already have this practice widely. So I<br>&gt;&gt; believe this(my) proposal will improve the code.<br>&gt;&gt; <br>&gt;&gt; I&#39;d like to get opinion of the community regarding this feature.<br>&gt;&gt; <br>&gt;&gt; On 17.05.2016 16:51, Johan Jensen wrote:<br>&gt;&gt; &gt; This was one of the first and most commonly suggested ideas, when the Swift<br>&gt;&gt; &gt; Evolution mailing list first started.<br>&gt;&gt; &gt; Chris Lattner sums it up<br>&gt;&gt; &gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html&gt;&gt;<br>&gt;&gt; &gt; in one of those threads:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; This is commonly requested - the problem is that while it does help<br>&gt;&gt; &gt; reduce boilerplate, it runs counter to the goal of improving clarity.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; — Johan<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; On Tue, May 17, 2016 at 3:43 PM, Vladimir.S via swift-evolution<br>&gt;&gt; &gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;     It is common to shadow optional value name with unwrapped value with<br>&gt;&gt; &gt;     same name:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;     if let someGoodValue = someGoodValue {...}<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;     What if we&#39;ll have a syntax to not repeat the variable name to achieve<br>&gt;&gt; &gt;     the same target:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;     if let someGoodValue! {...}<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;     What do you think?<br>&gt;&gt; &gt;     _______________________________________________<br>&gt;&gt; &gt;     swift-evolution mailing list<br>&gt;&gt; &gt;     swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;     https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160518/00beaf23/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[Idea] if let value!</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>May 17, 2016 at 11:00:00am</p></header><div class="content"><p>I always thought a new keyword made more sense here:<br></p><p>if let rebind someValue { <br>	//use shadowed unwrapped value in here<br>}<br></p><p>if let bind someValue {<br>	//use shadowed unwrapped value in here<br>}<br></p><p><br>if let unwrapped someValue {<br></p><p>}<br></p><p>Something along those lines?<br></p><p>Brandon<br></p><p><br>&gt; On May 17, 2016, at 11:31 AM, Patrick Smith via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Here’s a idea, what if you could use a symbol to denote that you want the same name used?<br>&gt; <br>&gt; Here’s an interesting sign from music: https://en.wikipedia.org/wiki/Repeat_sign &lt;https://en.wikipedia.org/wiki/Repeat_sign&gt;<br>&gt; <br>&gt; Then you can write (one) of these:<br>&gt; <br>&gt; if let |: = mySomeValue {<br>&gt;   // Use unwrapped<br>&gt; }<br>&gt; <br>&gt; if let mySomeValue = :| {<br>&gt;   // Use unwrapped<br>&gt; }<br>&gt; <br>&gt; Not sure which one is more clear. Just a totally random idea! I’m not sure about the above symbols, but it would help in other places too from memory to not have to write the same variable name twice.<br>&gt; <br>&gt;&gt; On 18 May 2016, at 1:18 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On May 17, 2016, at 10:13 AM, Tony Allevato via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; While I&#39;ve sometimes (early on) wished for a shorter-hand syntax for that construct, I&#39;ve never been able to think of something that I thought was better. I&#39;ve gotten to the point where I don&#39;t particularly mind it anymore.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Regarding the exclamation point specifically, seeing one of those in an expression context says to me &quot;this thing will die horribly if it is nil/throws an error&quot;. Using it in this context where that&#39;s not the case would probably go against users&#39; expectations.<br>&gt;&gt; <br>&gt;&gt; Agree.  If we are going have syntax similar to pattern matching it should be the same as pattern matching.  This would mean using ‘?&#39; rather than ‘!’.  However, we already have generalized pattern matching with `if case` for that.  This topic has been debated extensively.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Tue, May 17, 2016 at 8:05 AM Vladimir.S via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; On 17.05.2016 16:51, Johan Jensen wrote:<br>&gt;&gt;&gt;  &gt; This was one of the first and most commonly suggested ideas, when the Swift<br>&gt;&gt;&gt;  &gt; Evolution mailing list first started.<br>&gt;&gt;&gt;  &gt; Chris Lattner sums it up<br>&gt;&gt;&gt;  &gt;<br>&gt;&gt;&gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html&gt;&gt;<br>&gt;&gt;&gt;  &gt; in one of those threads:<br>&gt;&gt;&gt;  &gt;<br>&gt;&gt;&gt;  &gt;&gt; This is commonly requested - the problem is that while it does help<br>&gt;&gt;&gt;  &gt; reduce boilerplate, it runs counter to the goal of improving clarity.<br>&gt;&gt;&gt;  &gt;<br>&gt;&gt;&gt;  &gt; — Johan<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Oh, thank you for letting this know.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Well, I totally disagree with Chris. And as soon as there was no &#39;official&#39;<br>&gt;&gt;&gt; proposal and &#39;official&#39; decision, I&#39;d like to discuss this more.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I saw a lot of code like<br>&gt;&gt;&gt; if let mySomeValue = mySomeValue {} in sources and even in books.<br>&gt;&gt;&gt; Plus, I really believe that<br>&gt;&gt;&gt; if let mySomeValue! {..} is better in any way: readability, less space for<br>&gt;&gt;&gt; errors(when you need to repeat the same name) etc<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; FWIW, I suggest more explicit variant:<br>&gt;&gt;&gt; if let value! {...} // with exclamation mark<br>&gt;&gt;&gt; In that &quot;old&quot; proposal there was `if let value {...}`, was not so clear.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I can&#39;t accept an argument that you can use another name - as usually<br>&gt;&gt;&gt; &#39;good&#39; name is already &#39;crafted&#39; for the instance and you want to use it in<br>&gt;&gt;&gt; next code.<br>&gt;&gt;&gt; Otherwise, we need a &#39;best practice&#39; to name optional variables with some<br>&gt;&gt;&gt; prefix or suffix like : mySomeValueOpt, then `if let mySomeValue =<br>&gt;&gt;&gt; mySomeValueOpt` will have a sense. But as I understand, we don&#39;t want to<br>&gt;&gt;&gt; use such approach.<br>&gt;&gt;&gt; Additionally, when you shadow optional value with same name - you are<br>&gt;&gt;&gt; *protecting* yourself from using optional value inside block of unwrapped<br>&gt;&gt;&gt; code. IMO it is a good idea.<br>&gt;&gt;&gt; And want we or don&#39;t want, we already have this practice widely. So I<br>&gt;&gt;&gt; believe this(my) proposal will improve the code.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;d like to get opinion of the community regarding this feature.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On 17.05.2016 16:51, Johan Jensen wrote:<br>&gt;&gt;&gt; &gt; This was one of the first and most commonly suggested ideas, when the Swift<br>&gt;&gt;&gt; &gt; Evolution mailing list first started.<br>&gt;&gt;&gt; &gt; Chris Lattner sums it up<br>&gt;&gt;&gt; &gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html&gt;&gt;<br>&gt;&gt;&gt; &gt; in one of those threads:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;&gt; This is commonly requested - the problem is that while it does help<br>&gt;&gt;&gt; &gt; reduce boilerplate, it runs counter to the goal of improving clarity.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; — Johan<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; On Tue, May 17, 2016 at 3:43 PM, Vladimir.S via swift-evolution<br>&gt;&gt;&gt; &gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;     It is common to shadow optional value name with unwrapped value with<br>&gt;&gt;&gt; &gt;     same name:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;     if let someGoodValue = someGoodValue {...}<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;     What if we&#39;ll have a syntax to not repeat the variable name to achieve<br>&gt;&gt;&gt; &gt;     the same target:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;     if let someGoodValue! {...}<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;     What do you think?<br>&gt;&gt;&gt; &gt;     _______________________________________________<br>&gt;&gt;&gt; &gt;     swift-evolution mailing list<br>&gt;&gt;&gt; &gt;     swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; &gt;     https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160517/eb0f1b5e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Idea] if let value!</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 17, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On May 17, 2016, at 10:41 AM, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt; <br>&gt; I always thought a new keyword made more sense here:<br>&gt; <br>&gt; if let rebind someValue { <br>&gt; 	//use shadowed unwrapped value in here<br>&gt; }<br>&gt; <br>&gt; if let bind someValue {<br>&gt; 	//use shadowed unwrapped value in here<br>&gt; }<br>&gt; <br>&gt; <br>&gt; if let unwrapped someValue {<br>&gt; <br>&gt; }<br>&gt; <br>&gt; Something along those lines?<br></p><p>I wouldn’t want to see something like this replace the existing `if let` because it doesn’t handle cases where you bind a new name to the result of an expression that returns an optional.<br></p><p>If we did consider something like this it would be simple syntactic sugar for `if let x = x`.  Being syntactic sugar for something that is already not too bad means it would need to be as concise as possible.  If you want to advocate something like this, maybe consider just `if unwrap`:<br></p><p>if unwrap someValue {<br>}<br></p><p><br></p><p>&gt; <br>&gt; Brandon<br>&gt; <br>&gt; <br>&gt;&gt; On May 17, 2016, at 11:31 AM, Patrick Smith via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Here’s a idea, what if you could use a symbol to denote that you want the same name used?<br>&gt;&gt; <br>&gt;&gt; Here’s an interesting sign from music: https://en.wikipedia.org/wiki/Repeat_sign &lt;https://en.wikipedia.org/wiki/Repeat_sign&gt;<br>&gt;&gt; <br>&gt;&gt; Then you can write (one) of these:<br>&gt;&gt; <br>&gt;&gt; if let |: = mySomeValue {<br>&gt;&gt;   // Use unwrapped<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; if let mySomeValue = :| {<br>&gt;&gt;   // Use unwrapped<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Not sure which one is more clear. Just a totally random idea! I’m not sure about the above symbols, but it would help in other places too from memory to not have to write the same variable name twice.<br>&gt;&gt; <br>&gt;&gt;&gt; On 18 May 2016, at 1:18 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 17, 2016, at 10:13 AM, Tony Allevato via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; While I&#39;ve sometimes (early on) wished for a shorter-hand syntax for that construct, I&#39;ve never been able to think of something that I thought was better. I&#39;ve gotten to the point where I don&#39;t particularly mind it anymore.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Regarding the exclamation point specifically, seeing one of those in an expression context says to me &quot;this thing will die horribly if it is nil/throws an error&quot;. Using it in this context where that&#39;s not the case would probably go against users&#39; expectations.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Agree.  If we are going have syntax similar to pattern matching it should be the same as pattern matching.  This would mean using ‘?&#39; rather than ‘!’.  However, we already have generalized pattern matching with `if case` for that.  This topic has been debated extensively.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Tue, May 17, 2016 at 8:05 AM Vladimir.S via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; On 17.05.2016 16:51, Johan Jensen wrote:<br>&gt;&gt;&gt;&gt;  &gt; This was one of the first and most commonly suggested ideas, when the Swift<br>&gt;&gt;&gt;&gt;  &gt; Evolution mailing list first started.<br>&gt;&gt;&gt;&gt;  &gt; Chris Lattner sums it up<br>&gt;&gt;&gt;&gt;  &gt;<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html&gt;&gt;<br>&gt;&gt;&gt;&gt;  &gt; in one of those threads:<br>&gt;&gt;&gt;&gt;  &gt;<br>&gt;&gt;&gt;&gt;  &gt;&gt; This is commonly requested - the problem is that while it does help<br>&gt;&gt;&gt;&gt;  &gt; reduce boilerplate, it runs counter to the goal of improving clarity.<br>&gt;&gt;&gt;&gt;  &gt;<br>&gt;&gt;&gt;&gt;  &gt; — Johan<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Oh, thank you for letting this know.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Well, I totally disagree with Chris. And as soon as there was no &#39;official&#39;<br>&gt;&gt;&gt;&gt; proposal and &#39;official&#39; decision, I&#39;d like to discuss this more.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I saw a lot of code like<br>&gt;&gt;&gt;&gt; if let mySomeValue = mySomeValue {} in sources and even in books.<br>&gt;&gt;&gt;&gt; Plus, I really believe that<br>&gt;&gt;&gt;&gt; if let mySomeValue! {..} is better in any way: readability, less space for<br>&gt;&gt;&gt;&gt; errors(when you need to repeat the same name) etc<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; FWIW, I suggest more explicit variant:<br>&gt;&gt;&gt;&gt; if let value! {...} // with exclamation mark<br>&gt;&gt;&gt;&gt; In that &quot;old&quot; proposal there was `if let value {...}`, was not so clear.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I can&#39;t accept an argument that you can use another name - as usually<br>&gt;&gt;&gt;&gt; &#39;good&#39; name is already &#39;crafted&#39; for the instance and you want to use it in<br>&gt;&gt;&gt;&gt; next code.<br>&gt;&gt;&gt;&gt; Otherwise, we need a &#39;best practice&#39; to name optional variables with some<br>&gt;&gt;&gt;&gt; prefix or suffix like : mySomeValueOpt, then `if let mySomeValue =<br>&gt;&gt;&gt;&gt; mySomeValueOpt` will have a sense. But as I understand, we don&#39;t want to<br>&gt;&gt;&gt;&gt; use such approach.<br>&gt;&gt;&gt;&gt; Additionally, when you shadow optional value with same name - you are<br>&gt;&gt;&gt;&gt; *protecting* yourself from using optional value inside block of unwrapped<br>&gt;&gt;&gt;&gt; code. IMO it is a good idea.<br>&gt;&gt;&gt;&gt; And want we or don&#39;t want, we already have this practice widely. So I<br>&gt;&gt;&gt;&gt; believe this(my) proposal will improve the code.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;d like to get opinion of the community regarding this feature.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 17.05.2016 16:51, Johan Jensen wrote:<br>&gt;&gt;&gt;&gt; &gt; This was one of the first and most commonly suggested ideas, when the Swift<br>&gt;&gt;&gt;&gt; &gt; Evolution mailing list first started.<br>&gt;&gt;&gt;&gt; &gt; Chris Lattner sums it up<br>&gt;&gt;&gt;&gt; &gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html&gt;&gt;<br>&gt;&gt;&gt;&gt; &gt; in one of those threads:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;&gt; This is commonly requested - the problem is that while it does help<br>&gt;&gt;&gt;&gt; &gt; reduce boilerplate, it runs counter to the goal of improving clarity.<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; — Johan<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; On Tue, May 17, 2016 at 3:43 PM, Vladimir.S via swift-evolution<br>&gt;&gt;&gt;&gt; &gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;     It is common to shadow optional value name with unwrapped value with<br>&gt;&gt;&gt;&gt; &gt;     same name:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;     if let someGoodValue = someGoodValue {...}<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;     What if we&#39;ll have a syntax to not repeat the variable name to achieve<br>&gt;&gt;&gt;&gt; &gt;     the same target:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;     if let someGoodValue! {...}<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;     What do you think?<br>&gt;&gt;&gt;&gt; &gt;     _______________________________________________<br>&gt;&gt;&gt;&gt; &gt;     swift-evolution mailing list<br>&gt;&gt;&gt;&gt; &gt;     swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;     https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160517/5888b0e9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[Idea] if let value!</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>May 17, 2016 at 11:00:00am</p></header><div class="content"><p>It’s not just about being concise, but reducing repeated code:<br></p><p>It would be syntactic sugar for this:<br>if case .Some(let optional) = optional {<br>    <br>}<br></p><p>But yes, unwrap makes much more sense.<br></p><p>At the end of the day, I am not too bothered by if let syntax, but if we could clear up some of the repetitive code and all the =’s while still remaining clear, I would not oppose it!<br></p><p>Brandon<br></p><p>&gt; On May 17, 2016, at 11:48 AM, Matthew Johnson &lt;matthew at anandabits.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On May 17, 2016, at 10:41 AM, Brandon Knope &lt;bknope at me.com &lt;mailto:bknope at me.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I always thought a new keyword made more sense here:<br>&gt;&gt; <br>&gt;&gt; if let rebind someValue { <br>&gt;&gt; 	//use shadowed unwrapped value in here<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; if let bind someValue {<br>&gt;&gt; 	//use shadowed unwrapped value in here<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; if let unwrapped someValue {<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Something along those lines?<br>&gt; <br>&gt; I wouldn’t want to see something like this replace the existing `if let` because it doesn’t handle cases where you bind a new name to the result of an expression that returns an optional.<br>&gt; <br>&gt; If we did consider something like this it would be simple syntactic sugar for `if let x = x`.  Being syntactic sugar for something that is already not too bad means it would need to be as concise as possible.  If you want to advocate something like this, maybe consider just `if unwrap`:<br>&gt; <br>&gt; if unwrap someValue {<br>&gt; }<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; Brandon<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On May 17, 2016, at 11:31 AM, Patrick Smith via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Here’s a idea, what if you could use a symbol to denote that you want the same name used?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Here’s an interesting sign from music: https://en.wikipedia.org/wiki/Repeat_sign &lt;https://en.wikipedia.org/wiki/Repeat_sign&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Then you can write (one) of these:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if let |: = mySomeValue {<br>&gt;&gt;&gt;   // Use unwrapped<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if let mySomeValue = :| {<br>&gt;&gt;&gt;   // Use unwrapped<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Not sure which one is more clear. Just a totally random idea! I’m not sure about the above symbols, but it would help in other places too from memory to not have to write the same variable name twice.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 18 May 2016, at 1:18 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On May 17, 2016, at 10:13 AM, Tony Allevato via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; While I&#39;ve sometimes (early on) wished for a shorter-hand syntax for that construct, I&#39;ve never been able to think of something that I thought was better. I&#39;ve gotten to the point where I don&#39;t particularly mind it anymore.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Regarding the exclamation point specifically, seeing one of those in an expression context says to me &quot;this thing will die horribly if it is nil/throws an error&quot;. Using it in this context where that&#39;s not the case would probably go against users&#39; expectations.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Agree.  If we are going have syntax similar to pattern matching it should be the same as pattern matching.  This would mean using ‘?&#39; rather than ‘!’.  However, we already have generalized pattern matching with `if case` for that.  This topic has been debated extensively.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Tue, May 17, 2016 at 8:05 AM Vladimir.S via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; On 17.05.2016 16:51, Johan Jensen wrote:<br>&gt;&gt;&gt;&gt;&gt;  &gt; This was one of the first and most commonly suggested ideas, when the Swift<br>&gt;&gt;&gt;&gt;&gt;  &gt; Evolution mailing list first started.<br>&gt;&gt;&gt;&gt;&gt;  &gt; Chris Lattner sums it up<br>&gt;&gt;&gt;&gt;&gt;  &gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;  &gt; in one of those threads:<br>&gt;&gt;&gt;&gt;&gt;  &gt;<br>&gt;&gt;&gt;&gt;&gt;  &gt;&gt; This is commonly requested - the problem is that while it does help<br>&gt;&gt;&gt;&gt;&gt;  &gt; reduce boilerplate, it runs counter to the goal of improving clarity.<br>&gt;&gt;&gt;&gt;&gt;  &gt;<br>&gt;&gt;&gt;&gt;&gt;  &gt; — Johan<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Oh, thank you for letting this know.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Well, I totally disagree with Chris. And as soon as there was no &#39;official&#39;<br>&gt;&gt;&gt;&gt;&gt; proposal and &#39;official&#39; decision, I&#39;d like to discuss this more.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I saw a lot of code like<br>&gt;&gt;&gt;&gt;&gt; if let mySomeValue = mySomeValue {} in sources and even in books.<br>&gt;&gt;&gt;&gt;&gt; Plus, I really believe that<br>&gt;&gt;&gt;&gt;&gt; if let mySomeValue! {..} is better in any way: readability, less space for<br>&gt;&gt;&gt;&gt;&gt; errors(when you need to repeat the same name) etc<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; FWIW, I suggest more explicit variant:<br>&gt;&gt;&gt;&gt;&gt; if let value! {...} // with exclamation mark<br>&gt;&gt;&gt;&gt;&gt; In that &quot;old&quot; proposal there was `if let value {...}`, was not so clear.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I can&#39;t accept an argument that you can use another name - as usually<br>&gt;&gt;&gt;&gt;&gt; &#39;good&#39; name is already &#39;crafted&#39; for the instance and you want to use it in<br>&gt;&gt;&gt;&gt;&gt; next code.<br>&gt;&gt;&gt;&gt;&gt; Otherwise, we need a &#39;best practice&#39; to name optional variables with some<br>&gt;&gt;&gt;&gt;&gt; prefix or suffix like : mySomeValueOpt, then `if let mySomeValue =<br>&gt;&gt;&gt;&gt;&gt; mySomeValueOpt` will have a sense. But as I understand, we don&#39;t want to<br>&gt;&gt;&gt;&gt;&gt; use such approach.<br>&gt;&gt;&gt;&gt;&gt; Additionally, when you shadow optional value with same name - you are<br>&gt;&gt;&gt;&gt;&gt; *protecting* yourself from using optional value inside block of unwrapped<br>&gt;&gt;&gt;&gt;&gt; code. IMO it is a good idea.<br>&gt;&gt;&gt;&gt;&gt; And want we or don&#39;t want, we already have this practice widely. So I<br>&gt;&gt;&gt;&gt;&gt; believe this(my) proposal will improve the code.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I&#39;d like to get opinion of the community regarding this feature.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 17.05.2016 16:51, Johan Jensen wrote:<br>&gt;&gt;&gt;&gt;&gt; &gt; This was one of the first and most commonly suggested ideas, when the Swift<br>&gt;&gt;&gt;&gt;&gt; &gt; Evolution mailing list first started.<br>&gt;&gt;&gt;&gt;&gt; &gt; Chris Lattner sums it up<br>&gt;&gt;&gt;&gt;&gt; &gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; in one of those threads:<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt; This is commonly requested - the problem is that while it does help<br>&gt;&gt;&gt;&gt;&gt; &gt; reduce boilerplate, it runs counter to the goal of improving clarity.<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; — Johan<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; On Tue, May 17, 2016 at 3:43 PM, Vladimir.S via swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;     It is common to shadow optional value name with unwrapped value with<br>&gt;&gt;&gt;&gt;&gt; &gt;     same name:<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;     if let someGoodValue = someGoodValue {...}<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;     What if we&#39;ll have a syntax to not repeat the variable name to achieve<br>&gt;&gt;&gt;&gt;&gt; &gt;     the same target:<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;     if let someGoodValue! {...}<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;     What do you think?<br>&gt;&gt;&gt;&gt;&gt; &gt;     _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; &gt;     swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; &gt;     swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;     https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160517/22a658f2/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Idea] if let value!</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>May 17, 2016 at 07:00:00pm</p></header><div class="content"><p>On 17.05.2016 18:48, Matthew Johnson via swift-evolution wrote:<br>&gt;  Being syntactic sugar for something that is already not too bad<br></p><p>Well.. Personally I feel like construction `if let someMyValue = <br>someMyValue` is bad exactly because of this the same repeated name. <br>Anywhere I see repeated code, I feel like this is not good.<br></p><p>&gt; means it<br>&gt; would need to be as concise as possible.  If you want to advocate something<br>&gt; like this, maybe consider just `if unwrap`:<br>&gt;<br>&gt; if unwrap someValue {<br>&gt; }<br>&gt;<br></p><p>Yes, IMO the best idea for this feature for this moment. Clear and <br>explicit. Why not?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Idea] if let value!</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 17, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On May 17, 2016, at 11:06 AM, Vladimir.S &lt;svabox at gmail.com&gt; wrote:<br>&gt; <br>&gt; On 17.05.2016 18:48, Matthew Johnson via swift-evolution wrote:<br>&gt;&gt; Being syntactic sugar for something that is already not too bad<br>&gt; <br>&gt; Well.. Personally I feel like construction `if let someMyValue = someMyValue` is bad exactly because of this the same repeated name. Anywhere I see repeated code, I feel like this is not good.<br></p><p>I generally agree, but it’s pretty trivial repetition in this case.  And like others have noted, if you need to do this often it might be worth looking at other aspects of how your code is structured.<br></p><p>&gt; <br>&gt;&gt; means it<br>&gt;&gt; would need to be as concise as possible.  If you want to advocate something<br>&gt;&gt; like this, maybe consider just `if unwrap`:<br>&gt;&gt; <br>&gt;&gt; if unwrap someValue {<br>&gt;&gt; }<br>&gt;&gt; <br>&gt; <br>&gt; Yes, IMO the best idea for this feature for this moment. Clear and explicit. Why not?<br></p><p>If immediate consensus forms, sure why not?  But I don’t think it’s worth extended discussion.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Idea] if let value!</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>May 17, 2016 at 07:00:00pm</p></header><div class="content"><p>On 17.05.2016 19:08, Matthew Johnson wrote:<br>&gt; it might be worth looking at other aspects of how your code is structured.<br></p><p>All is good, if it is in *my* code ;-) But I often see this pattern in <br>*others* code and I don&#39;t want to see it in others code :-)<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Idea] if let value!</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>May 17, 2016 at 06:00:00pm</p></header><div class="content"><p>Regards<br>LM<br>(From mobile)<br></p><p>&gt; On May 17, 2016, at 5:48 PM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On May 17, 2016, at 10:41 AM, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I always thought a new keyword made more sense here:<br>&gt;&gt; <br>&gt;&gt; if let rebind someValue { <br>&gt;&gt; 	//use shadowed unwrapped value in here<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; if let bind someValue {<br>&gt;&gt; 	//use shadowed unwrapped value in here<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; if let unwrapped someValue {<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Something along those lines?<br>&gt; <br>&gt; I wouldn’t want to see something like this replace the existing `if let` because it doesn’t handle cases where you bind a new name to the result of an expression that returns an optional.<br>&gt; <br>&gt; If we did consider something like this it would be simple syntactic sugar for `if let x = x`.  Being syntactic sugar for something that is already not too bad means it would need to be as concise as possible.  If you want to advocate something like this, maybe consider just `if unwrap`:<br>&gt; <br>&gt; if unwrap someValue {<br>&gt; }<br>&gt; <br>&gt; <br></p><p>+25. Will look at the parser to see what the impl cost is (although chris has clearly stated that pure sugaring is not yet on the agenda to prevent creating cruft rather than addressing the root causes)<br></p><p><br>&gt; <br>&gt;&gt; <br>&gt;&gt; Brandon<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On May 17, 2016, at 11:31 AM, Patrick Smith via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Here’s a idea, what if you could use a symbol to denote that you want the same name used?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Here’s an interesting sign from music: https://en.wikipedia.org/wiki/Repeat_sign<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Then you can write (one) of these:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if let |: = mySomeValue {<br>&gt;&gt;&gt;   // Use unwrapped<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if let mySomeValue = :| {<br>&gt;&gt;&gt;   // Use unwrapped<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Not sure which one is more clear. Just a totally random idea! I’m not sure about the above symbols, but it would help in other places too from memory to not have to write the same variable name twice.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 18 May 2016, at 1:18 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On May 17, 2016, at 10:13 AM, Tony Allevato via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; While I&#39;ve sometimes (early on) wished for a shorter-hand syntax for that construct, I&#39;ve never been able to think of something that I thought was better. I&#39;ve gotten to the point where I don&#39;t particularly mind it anymore.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Regarding the exclamation point specifically, seeing one of those in an expression context says to me &quot;this thing will die horribly if it is nil/throws an error&quot;. Using it in this context where that&#39;s not the case would probably go against users&#39; expectations.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Agree.  If we are going have syntax similar to pattern matching it should be the same as pattern matching.  This would mean using ‘?&#39; rather than ‘!’.  However, we already have generalized pattern matching with `if case` for that.  This topic has been debated extensively.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Tue, May 17, 2016 at 8:05 AM Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; On 17.05.2016 16:51, Johan Jensen wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;  &gt; This was one of the first and most commonly suggested ideas, when the Swift<br>&gt;&gt;&gt;&gt;&gt;&gt;  &gt; Evolution mailing list first started.<br>&gt;&gt;&gt;&gt;&gt;&gt;  &gt; Chris Lattner sums it up<br>&gt;&gt;&gt;&gt;&gt;&gt;  &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;  &gt; in one of those threads:<br>&gt;&gt;&gt;&gt;&gt;&gt;  &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;  &gt;&gt; This is commonly requested - the problem is that while it does help<br>&gt;&gt;&gt;&gt;&gt;&gt;  &gt; reduce boilerplate, it runs counter to the goal of improving clarity.<br>&gt;&gt;&gt;&gt;&gt;&gt;  &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;  &gt; — Johan<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Oh, thank you for letting this know.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Well, I totally disagree with Chris. And as soon as there was no &#39;official&#39;<br>&gt;&gt;&gt;&gt;&gt;&gt; proposal and &#39;official&#39; decision, I&#39;d like to discuss this more.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I saw a lot of code like<br>&gt;&gt;&gt;&gt;&gt;&gt; if let mySomeValue = mySomeValue {} in sources and even in books.<br>&gt;&gt;&gt;&gt;&gt;&gt; Plus, I really believe that<br>&gt;&gt;&gt;&gt;&gt;&gt; if let mySomeValue! {..} is better in any way: readability, less space for<br>&gt;&gt;&gt;&gt;&gt;&gt; errors(when you need to repeat the same name) etc<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; FWIW, I suggest more explicit variant:<br>&gt;&gt;&gt;&gt;&gt;&gt; if let value! {...} // with exclamation mark<br>&gt;&gt;&gt;&gt;&gt;&gt; In that &quot;old&quot; proposal there was `if let value {...}`, was not so clear.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I can&#39;t accept an argument that you can use another name - as usually<br>&gt;&gt;&gt;&gt;&gt;&gt; &#39;good&#39; name is already &#39;crafted&#39; for the instance and you want to use it in<br>&gt;&gt;&gt;&gt;&gt;&gt; next code.<br>&gt;&gt;&gt;&gt;&gt;&gt; Otherwise, we need a &#39;best practice&#39; to name optional variables with some<br>&gt;&gt;&gt;&gt;&gt;&gt; prefix or suffix like : mySomeValueOpt, then `if let mySomeValue =<br>&gt;&gt;&gt;&gt;&gt;&gt; mySomeValueOpt` will have a sense. But as I understand, we don&#39;t want to<br>&gt;&gt;&gt;&gt;&gt;&gt; use such approach.<br>&gt;&gt;&gt;&gt;&gt;&gt; Additionally, when you shadow optional value with same name - you are<br>&gt;&gt;&gt;&gt;&gt;&gt; *protecting* yourself from using optional value inside block of unwrapped<br>&gt;&gt;&gt;&gt;&gt;&gt; code. IMO it is a good idea.<br>&gt;&gt;&gt;&gt;&gt;&gt; And want we or don&#39;t want, we already have this practice widely. So I<br>&gt;&gt;&gt;&gt;&gt;&gt; believe this(my) proposal will improve the code.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I&#39;d like to get opinion of the community regarding this feature.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On 17.05.2016 16:51, Johan Jensen wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; This was one of the first and most commonly suggested ideas, when the Swift<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; Evolution mailing list first started.<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; Chris Lattner sums it up<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; in one of those threads:<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; This is commonly requested - the problem is that while it does help<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; reduce boilerplate, it runs counter to the goal of improving clarity.<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; — Johan<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; On Tue, May 17, 2016 at 3:43 PM, Vladimir.S via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;     It is common to shadow optional value name with unwrapped value with<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;     same name:<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;     if let someGoodValue = someGoodValue {...}<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;     What if we&#39;ll have a syntax to not repeat the variable name to achieve<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;     the same target:<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;     if let someGoodValue! {...}<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;     What do you think?<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;     _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;     swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;     swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160517/ef953e77/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Idea] if let value!</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>May 17, 2016 at 09:00:00pm</p></header><div class="content"><p>interestingly enough, it looks like a truly simple task... the grammar has 2 types of BindingKind at that location BK_Let and BK_Var, which means that a single shorthand notation will assume one of the other, which means that if it does assume one, then it better be explicit about it, or alternatively there ought to be 2 shorthands for the 2 binding kinds. i.e. :<br></p><p>if unwrapped_var xxxx {<br>}<br></p><p>and <br></p><p>if unwrapped_let xxxx {<br>}<br></p><p>or perhaps even easier to express as:<br></p><p>if let! xxxx {<br>   // xxxx is unwrapped LET<br>}<br></p><p>and <br></p><p>if var! xxxx {<br>   // xxxx is unwrapped VAR<br>}<br></p><p>From what I could understand of the compiler, these would seem like localized small scale changes, but unfortunately still entirely out of the scope of 3.0 ( not to mention probably still not bringing the clarity chris identified as main blocker).<br></p><p>Ideas like this one, that are both simple in scope but out of the main focus might still be worth collecting somewhere as a series of  “if you would like to get familiar with the compiler codebase to try and help at a future date with more serious items, we suggest that you look into finding the least intrusive way to implement any of these features.. we guaranty that there is a simple way to build them”. They might prove a good training ground for would be helpers.<br></p><p><br>Apologies for taking your time.<br>/LM<br></p><p><br>&gt; On May 17, 2016, at 5:48 PM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On May 17, 2016, at 10:41 AM, Brandon Knope &lt;bknope at me.com &lt;mailto:bknope at me.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I always thought a new keyword made more sense here:<br>&gt;&gt; <br>&gt;&gt; if let rebind someValue { <br>&gt;&gt; 	//use shadowed unwrapped value in here<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; if let bind someValue {<br>&gt;&gt; 	//use shadowed unwrapped value in here<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; if let unwrapped someValue {<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Something along those lines?<br>&gt; <br>&gt; I wouldn’t want to see something like this replace the existing `if let` because it doesn’t handle cases where you bind a new name to the result of an expression that returns an optional.<br>&gt; <br>&gt; If we did consider something like this it would be simple syntactic sugar for `if let x = x`.  Being syntactic sugar for something that is already not too bad means it would need to be as concise as possible.  If you want to advocate something like this, maybe consider just `if unwrap`:<br>&gt; <br>&gt; if unwrap someValue {<br>&gt; }<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; Brandon<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On May 17, 2016, at 11:31 AM, Patrick Smith via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Here’s a idea, what if you could use a symbol to denote that you want the same name used?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Here’s an interesting sign from music: https://en.wikipedia.org/wiki/Repeat_sign &lt;https://en.wikipedia.org/wiki/Repeat_sign&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Then you can write (one) of these:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if let |: = mySomeValue {<br>&gt;&gt;&gt;   // Use unwrapped<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if let mySomeValue = :| {<br>&gt;&gt;&gt;   // Use unwrapped<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Not sure which one is more clear. Just a totally random idea! I’m not sure about the above symbols, but it would help in other places too from memory to not have to write the same variable name twice.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 18 May 2016, at 1:18 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On May 17, 2016, at 10:13 AM, Tony Allevato via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; While I&#39;ve sometimes (early on) wished for a shorter-hand syntax for that construct, I&#39;ve never been able to think of something that I thought was better. I&#39;ve gotten to the point where I don&#39;t particularly mind it anymore.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Regarding the exclamation point specifically, seeing one of those in an expression context says to me &quot;this thing will die horribly if it is nil/throws an error&quot;. Using it in this context where that&#39;s not the case would probably go against users&#39; expectations.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Agree.  If we are going have syntax similar to pattern matching it should be the same as pattern matching.  This would mean using ‘?&#39; rather than ‘!’.  However, we already have generalized pattern matching with `if case` for that.  This topic has been debated extensively.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Tue, May 17, 2016 at 8:05 AM Vladimir.S via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; On 17.05.2016 16:51, Johan Jensen wrote:<br>&gt;&gt;&gt;&gt;&gt;  &gt; This was one of the first and most commonly suggested ideas, when the Swift<br>&gt;&gt;&gt;&gt;&gt;  &gt; Evolution mailing list first started.<br>&gt;&gt;&gt;&gt;&gt;  &gt; Chris Lattner sums it up<br>&gt;&gt;&gt;&gt;&gt;  &gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;  &gt; in one of those threads:<br>&gt;&gt;&gt;&gt;&gt;  &gt;<br>&gt;&gt;&gt;&gt;&gt;  &gt;&gt; This is commonly requested - the problem is that while it does help<br>&gt;&gt;&gt;&gt;&gt;  &gt; reduce boilerplate, it runs counter to the goal of improving clarity.<br>&gt;&gt;&gt;&gt;&gt;  &gt;<br>&gt;&gt;&gt;&gt;&gt;  &gt; — Johan<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Oh, thank you for letting this know.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Well, I totally disagree with Chris. And as soon as there was no &#39;official&#39;<br>&gt;&gt;&gt;&gt;&gt; proposal and &#39;official&#39; decision, I&#39;d like to discuss this more.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I saw a lot of code like<br>&gt;&gt;&gt;&gt;&gt; if let mySomeValue = mySomeValue {} in sources and even in books.<br>&gt;&gt;&gt;&gt;&gt; Plus, I really believe that<br>&gt;&gt;&gt;&gt;&gt; if let mySomeValue! {..} is better in any way: readability, less space for<br>&gt;&gt;&gt;&gt;&gt; errors(when you need to repeat the same name) etc<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; FWIW, I suggest more explicit variant:<br>&gt;&gt;&gt;&gt;&gt; if let value! {...} // with exclamation mark<br>&gt;&gt;&gt;&gt;&gt; In that &quot;old&quot; proposal there was `if let value {...}`, was not so clear.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I can&#39;t accept an argument that you can use another name - as usually<br>&gt;&gt;&gt;&gt;&gt; &#39;good&#39; name is already &#39;crafted&#39; for the instance and you want to use it in<br>&gt;&gt;&gt;&gt;&gt; next code.<br>&gt;&gt;&gt;&gt;&gt; Otherwise, we need a &#39;best practice&#39; to name optional variables with some<br>&gt;&gt;&gt;&gt;&gt; prefix or suffix like : mySomeValueOpt, then `if let mySomeValue =<br>&gt;&gt;&gt;&gt;&gt; mySomeValueOpt` will have a sense. But as I understand, we don&#39;t want to<br>&gt;&gt;&gt;&gt;&gt; use such approach.<br>&gt;&gt;&gt;&gt;&gt; Additionally, when you shadow optional value with same name - you are<br>&gt;&gt;&gt;&gt;&gt; *protecting* yourself from using optional value inside block of unwrapped<br>&gt;&gt;&gt;&gt;&gt; code. IMO it is a good idea.<br>&gt;&gt;&gt;&gt;&gt; And want we or don&#39;t want, we already have this practice widely. So I<br>&gt;&gt;&gt;&gt;&gt; believe this(my) proposal will improve the code.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I&#39;d like to get opinion of the community regarding this feature.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 17.05.2016 16:51, Johan Jensen wrote:<br>&gt;&gt;&gt;&gt;&gt; &gt; This was one of the first and most commonly suggested ideas, when the Swift<br>&gt;&gt;&gt;&gt;&gt; &gt; Evolution mailing list first started.<br>&gt;&gt;&gt;&gt;&gt; &gt; Chris Lattner sums it up<br>&gt;&gt;&gt;&gt;&gt; &gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; in one of those threads:<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt; This is commonly requested - the problem is that while it does help<br>&gt;&gt;&gt;&gt;&gt; &gt; reduce boilerplate, it runs counter to the goal of improving clarity.<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; — Johan<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; On Tue, May 17, 2016 at 3:43 PM, Vladimir.S via swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;     It is common to shadow optional value name with unwrapped value with<br>&gt;&gt;&gt;&gt;&gt; &gt;     same name:<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;     if let someGoodValue = someGoodValue {...}<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;     What if we&#39;ll have a syntax to not repeat the variable name to achieve<br>&gt;&gt;&gt;&gt;&gt; &gt;     the same target:<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;     if let someGoodValue! {...}<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;     What do you think?<br>&gt;&gt;&gt;&gt;&gt; &gt;     _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; &gt;     swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; &gt;     swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;     https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160517/c4f68bfb/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e2000c4913814c2ca9e16442ae908265?s=50"></div><header><strong>[Idea] if let value!</strong> from <string>Krishna Kumar</string> &lt;kkdevenda at gmail.com&gt;<p>May 18, 2016 at 01:00:00pm</p></header><div class="content"><p>Adding a keyword `unwrap` might reduce the code repetition but I think it will be confusing to use a keyword to unwrap something while we already have a way to do that.<br></p><p>I think two ways to do one thing impacts clarity.<br></p><p>I understand that `unwrap` is a replacement for Optional Binding and optional binding is slightly different from just unwrapping but look at it from the perspective of someone new coming to Swift. Keyword `unwrap` straight away gives a notion of unwrapping an optional instead of the underlying meaning of Optional Binding.<br></p><p>Opinion on `if let value!`<br></p><p>I am not convinced with this style as well and for the same reason of clarity. Here “!” gives a notion that you are just unwrapping “value” instead of optional binding value. Again look at it from the perspective of someone new coming to the Swift.<br></p><p>I think it is equally important to make Swift understandable for newcomers while making it convenient for experienced programmers. Sometimes these newcomers can be entirely new to the concept of programming. So, please keep it in mind while improving the language.<br></p><p>I might be absolutely wrong as I am one of the newcomers who is trying to understand basics from experienced ones here by reading these emails. If that is the case please correct me.<br></p><p>Thanks<br></p><p>-Krishna<br></p><p>&gt; On May 17, 2016, at 9:18 PM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On May 17, 2016, at 10:41 AM, Brandon Knope &lt;bknope at me.com &lt;mailto:bknope at me.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I always thought a new keyword made more sense here:<br>&gt;&gt; <br>&gt;&gt; if let rebind someValue { <br>&gt;&gt; 	//use shadowed unwrapped value in here<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; if let bind someValue {<br>&gt;&gt; 	//use shadowed unwrapped value in here<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; if let unwrapped someValue {<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Something along those lines?<br>&gt; <br>&gt; I wouldn’t want to see something like this replace the existing `if let` because it doesn’t handle cases where you bind a new name to the result of an expression that returns an optional.<br>&gt; <br>&gt; If we did consider something like this it would be simple syntactic sugar for `if let x = x`.  Being syntactic sugar for something that is already not too bad means it would need to be as concise as possible.  If you want to advocate something like this, maybe consider just `if unwrap`:<br>&gt; <br>&gt; if unwrap someValue {<br>&gt; }<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; Brandon<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On May 17, 2016, at 11:31 AM, Patrick Smith via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Here’s a idea, what if you could use a symbol to denote that you want the same name used?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Here’s an interesting sign from music: https://en.wikipedia.org/wiki/Repeat_sign &lt;https://en.wikipedia.org/wiki/Repeat_sign&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Then you can write (one) of these:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if let |: = mySomeValue {<br>&gt;&gt;&gt;   // Use unwrapped<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if let mySomeValue = :| {<br>&gt;&gt;&gt;   // Use unwrapped<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Not sure which one is more clear. Just a totally random idea! I’m not sure about the above symbols, but it would help in other places too from memory to not have to write the same variable name twice.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 18 May 2016, at 1:18 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On May 17, 2016, at 10:13 AM, Tony Allevato via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; While I&#39;ve sometimes (early on) wished for a shorter-hand syntax for that construct, I&#39;ve never been able to think of something that I thought was better. I&#39;ve gotten to the point where I don&#39;t particularly mind it anymore.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Regarding the exclamation point specifically, seeing one of those in an expression context says to me &quot;this thing will die horribly if it is nil/throws an error&quot;. Using it in this context where that&#39;s not the case would probably go against users&#39; expectations.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Agree.  If we are going have syntax similar to pattern matching it should be the same as pattern matching.  This would mean using ‘?&#39; rather than ‘!’.  However, we already have generalized pattern matching with `if case` for that.  This topic has been debated extensively.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Tue, May 17, 2016 at 8:05 AM Vladimir.S via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; On 17.05.2016 16:51, Johan Jensen wrote:<br>&gt;&gt;&gt;&gt;&gt;  &gt; This was one of the first and most commonly suggested ideas, when the Swift<br>&gt;&gt;&gt;&gt;&gt;  &gt; Evolution mailing list first started.<br>&gt;&gt;&gt;&gt;&gt;  &gt; Chris Lattner sums it up<br>&gt;&gt;&gt;&gt;&gt;  &gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;  &gt; in one of those threads:<br>&gt;&gt;&gt;&gt;&gt;  &gt;<br>&gt;&gt;&gt;&gt;&gt;  &gt;&gt; This is commonly requested - the problem is that while it does help<br>&gt;&gt;&gt;&gt;&gt;  &gt; reduce boilerplate, it runs counter to the goal of improving clarity.<br>&gt;&gt;&gt;&gt;&gt;  &gt;<br>&gt;&gt;&gt;&gt;&gt;  &gt; — Johan<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Oh, thank you for letting this know.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Well, I totally disagree with Chris. And as soon as there was no &#39;official&#39;<br>&gt;&gt;&gt;&gt;&gt; proposal and &#39;official&#39; decision, I&#39;d like to discuss this more.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I saw a lot of code like<br>&gt;&gt;&gt;&gt;&gt; if let mySomeValue = mySomeValue {} in sources and even in books.<br>&gt;&gt;&gt;&gt;&gt; Plus, I really believe that<br>&gt;&gt;&gt;&gt;&gt; if let mySomeValue! {..} is better in any way: readability, less space for<br>&gt;&gt;&gt;&gt;&gt; errors(when you need to repeat the same name) etc<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; FWIW, I suggest more explicit variant:<br>&gt;&gt;&gt;&gt;&gt; if let value! {...} // with exclamation mark<br>&gt;&gt;&gt;&gt;&gt; In that &quot;old&quot; proposal there was `if let value {...}`, was not so clear.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I can&#39;t accept an argument that you can use another name - as usually<br>&gt;&gt;&gt;&gt;&gt; &#39;good&#39; name is already &#39;crafted&#39; for the instance and you want to use it in<br>&gt;&gt;&gt;&gt;&gt; next code.<br>&gt;&gt;&gt;&gt;&gt; Otherwise, we need a &#39;best practice&#39; to name optional variables with some<br>&gt;&gt;&gt;&gt;&gt; prefix or suffix like : mySomeValueOpt, then `if let mySomeValue =<br>&gt;&gt;&gt;&gt;&gt; mySomeValueOpt` will have a sense. But as I understand, we don&#39;t want to<br>&gt;&gt;&gt;&gt;&gt; use such approach.<br>&gt;&gt;&gt;&gt;&gt; Additionally, when you shadow optional value with same name - you are<br>&gt;&gt;&gt;&gt;&gt; *protecting* yourself from using optional value inside block of unwrapped<br>&gt;&gt;&gt;&gt;&gt; code. IMO it is a good idea.<br>&gt;&gt;&gt;&gt;&gt; And want we or don&#39;t want, we already have this practice widely. So I<br>&gt;&gt;&gt;&gt;&gt; believe this(my) proposal will improve the code.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I&#39;d like to get opinion of the community regarding this feature.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 17.05.2016 16:51, Johan Jensen wrote:<br>&gt;&gt;&gt;&gt;&gt; &gt; This was one of the first and most commonly suggested ideas, when the Swift<br>&gt;&gt;&gt;&gt;&gt; &gt; Evolution mailing list first started.<br>&gt;&gt;&gt;&gt;&gt; &gt; Chris Lattner sums it up<br>&gt;&gt;&gt;&gt;&gt; &gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; in one of those threads:<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt; This is commonly requested - the problem is that while it does help<br>&gt;&gt;&gt;&gt;&gt; &gt; reduce boilerplate, it runs counter to the goal of improving clarity.<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; — Johan<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; On Tue, May 17, 2016 at 3:43 PM, Vladimir.S via swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;     It is common to shadow optional value name with unwrapped value with<br>&gt;&gt;&gt;&gt;&gt; &gt;     same name:<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;     if let someGoodValue = someGoodValue {...}<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;     What if we&#39;ll have a syntax to not repeat the variable name to achieve<br>&gt;&gt;&gt;&gt;&gt; &gt;     the same target:<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;     if let someGoodValue! {...}<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;     What do you think?<br>&gt;&gt;&gt;&gt;&gt; &gt;     _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; &gt;     swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; &gt;     swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;     https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160518/c5a30d31/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Idea] if let value!</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>May 17, 2016 at 05:00:00pm</p></header><div class="content"><p>Now *that* reminds me of the _ voodoo in perl... and i was under the impression that magic symbols are not highly regarded in swift (which I really appreciate!!)<br></p><p>Regards<br>LM<br>(From mobile)<br></p><p>&gt; On May 17, 2016, at 5:31 PM, Patrick Smith via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Here’s a idea, what if you could use a symbol to denote that you want the same name used?<br>&gt; <br>&gt; Here’s an interesting sign from music: https://en.wikipedia.org/wiki/Repeat_sign<br>&gt; <br>&gt; Then you can write (one) of these:<br>&gt; <br>&gt; if let |: = mySomeValue {<br>&gt;   // Use unwrapped<br>&gt; }<br>&gt; <br>&gt; if let mySomeValue = :| {<br>&gt;   // Use unwrapped<br>&gt; }<br>&gt; <br>&gt; Not sure which one is more clear. Just a totally random idea! I’m not sure about the above symbols, but it would help in other places too from memory to not have to write the same variable name twice.<br>&gt; <br>&gt;&gt;&gt; On 18 May 2016, at 1:18 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On May 17, 2016, at 10:13 AM, Tony Allevato via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; While I&#39;ve sometimes (early on) wished for a shorter-hand syntax for that construct, I&#39;ve never been able to think of something that I thought was better. I&#39;ve gotten to the point where I don&#39;t particularly mind it anymore.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Regarding the exclamation point specifically, seeing one of those in an expression context says to me &quot;this thing will die horribly if it is nil/throws an error&quot;. Using it in this context where that&#39;s not the case would probably go against users&#39; expectations.<br>&gt;&gt; <br>&gt;&gt; Agree.  If we are going have syntax similar to pattern matching it should be the same as pattern matching.  This would mean using ‘?&#39; rather than ‘!’.  However, we already have generalized pattern matching with `if case` for that.  This topic has been debated extensively.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Tue, May 17, 2016 at 8:05 AM Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; On 17.05.2016 16:51, Johan Jensen wrote:<br>&gt;&gt;&gt;&gt;  &gt; This was one of the first and most commonly suggested ideas, when the Swift<br>&gt;&gt;&gt;&gt;  &gt; Evolution mailing list first started.<br>&gt;&gt;&gt;&gt;  &gt; Chris Lattner sums it up<br>&gt;&gt;&gt;&gt;  &gt;<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html&gt;<br>&gt;&gt;&gt;&gt;  &gt; in one of those threads:<br>&gt;&gt;&gt;&gt;  &gt;<br>&gt;&gt;&gt;&gt;  &gt;&gt; This is commonly requested - the problem is that while it does help<br>&gt;&gt;&gt;&gt;  &gt; reduce boilerplate, it runs counter to the goal of improving clarity.<br>&gt;&gt;&gt;&gt;  &gt;<br>&gt;&gt;&gt;&gt;  &gt; — Johan<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Oh, thank you for letting this know.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Well, I totally disagree with Chris. And as soon as there was no &#39;official&#39;<br>&gt;&gt;&gt;&gt; proposal and &#39;official&#39; decision, I&#39;d like to discuss this more.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I saw a lot of code like<br>&gt;&gt;&gt;&gt; if let mySomeValue = mySomeValue {} in sources and even in books.<br>&gt;&gt;&gt;&gt; Plus, I really believe that<br>&gt;&gt;&gt;&gt; if let mySomeValue! {..} is better in any way: readability, less space for<br>&gt;&gt;&gt;&gt; errors(when you need to repeat the same name) etc<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; FWIW, I suggest more explicit variant:<br>&gt;&gt;&gt;&gt; if let value! {...} // with exclamation mark<br>&gt;&gt;&gt;&gt; In that &quot;old&quot; proposal there was `if let value {...}`, was not so clear.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I can&#39;t accept an argument that you can use another name - as usually<br>&gt;&gt;&gt;&gt; &#39;good&#39; name is already &#39;crafted&#39; for the instance and you want to use it in<br>&gt;&gt;&gt;&gt; next code.<br>&gt;&gt;&gt;&gt; Otherwise, we need a &#39;best practice&#39; to name optional variables with some<br>&gt;&gt;&gt;&gt; prefix or suffix like : mySomeValueOpt, then `if let mySomeValue =<br>&gt;&gt;&gt;&gt; mySomeValueOpt` will have a sense. But as I understand, we don&#39;t want to<br>&gt;&gt;&gt;&gt; use such approach.<br>&gt;&gt;&gt;&gt; Additionally, when you shadow optional value with same name - you are<br>&gt;&gt;&gt;&gt; *protecting* yourself from using optional value inside block of unwrapped<br>&gt;&gt;&gt;&gt; code. IMO it is a good idea.<br>&gt;&gt;&gt;&gt; And want we or don&#39;t want, we already have this practice widely. So I<br>&gt;&gt;&gt;&gt; believe this(my) proposal will improve the code.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;d like to get opinion of the community regarding this feature.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 17.05.2016 16:51, Johan Jensen wrote:<br>&gt;&gt;&gt;&gt; &gt; This was one of the first and most commonly suggested ideas, when the Swift<br>&gt;&gt;&gt;&gt; &gt; Evolution mailing list first started.<br>&gt;&gt;&gt;&gt; &gt; Chris Lattner sums it up<br>&gt;&gt;&gt;&gt; &gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html&gt;<br>&gt;&gt;&gt;&gt; &gt; in one of those threads:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;&gt; This is commonly requested - the problem is that while it does help<br>&gt;&gt;&gt;&gt; &gt; reduce boilerplate, it runs counter to the goal of improving clarity.<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; — Johan<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; On Tue, May 17, 2016 at 3:43 PM, Vladimir.S via swift-evolution<br>&gt;&gt;&gt;&gt; &gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;     It is common to shadow optional value name with unwrapped value with<br>&gt;&gt;&gt;&gt; &gt;     same name:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;     if let someGoodValue = someGoodValue {...}<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;     What if we&#39;ll have a syntax to not repeat the variable name to achieve<br>&gt;&gt;&gt;&gt; &gt;     the same target:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;     if let someGoodValue! {...}<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;     What do you think?<br>&gt;&gt;&gt;&gt; &gt;     _______________________________________________<br>&gt;&gt;&gt;&gt; &gt;     swift-evolution mailing list<br>&gt;&gt;&gt;&gt; &gt;     swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; &gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160517/1d6d2059/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Idea] if let value!</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>May 17, 2016 at 06:00:00pm</p></header><div class="content"><p>Could you clarify how to use `if case` to achieve the same target as <br>proposed `if let value!` ?<br>(btw, probably `if let value? {..}` will be better)<br></p><p>On 17.05.2016 18:18, Matthew Johnson wrote:<br>&gt;<br>&gt;&gt; On May 17, 2016, at 10:13 AM, Tony Allevato via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; While I&#39;ve sometimes (early on) wished for a shorter-hand syntax for that<br>&gt;&gt; construct, I&#39;ve never been able to think of something that I thought was<br>&gt;&gt; better. I&#39;ve gotten to the point where I don&#39;t particularly mind it anymore.<br>&gt;&gt;<br>&gt;&gt; Regarding the exclamation point specifically, seeing one of those in an<br>&gt;&gt; expression context says to me &quot;this thing will die horribly if it is<br>&gt;&gt; nil/throws an error&quot;. Using it in this context where that&#39;s not the case<br>&gt;&gt; would probably go against users&#39; expectations.<br>&gt;<br>&gt; Agree.  If we are going have syntax similar to pattern matching it should<br>&gt; be the same as pattern matching.  This would mean using ‘?&#39; rather than<br>&gt; ‘!’.  However, we already have generalized pattern matching with `if case`<br>&gt; for that.  This topic has been debated extensively.<br>&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Tue, May 17, 2016 at 8:05 AM Vladimir.S via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;     On 17.05.2016 16:51, Johan Jensen wrote:<br>&gt;&gt;      &gt; This was one of the first and most commonly suggested ideas, when<br>&gt;&gt;     the Swift<br>&gt;&gt;      &gt; Evolution mailing list first started.<br>&gt;&gt;      &gt; Chris Lattner sums it up<br>&gt;&gt;      &gt;<br>&gt;&gt;     &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html&gt;<br>&gt;&gt;      &gt; in one of those threads:<br>&gt;&gt;      &gt;<br>&gt;&gt;      &gt;&gt; This is commonly requested - the problem is that while it does help<br>&gt;&gt;      &gt; reduce boilerplate, it runs counter to the goal of improving clarity.<br>&gt;&gt;      &gt;<br>&gt;&gt;      &gt; — Johan<br>&gt;&gt;<br>&gt;&gt;     Oh, thank you for letting this know.<br>&gt;&gt;<br>&gt;&gt;     Well, I totally disagree with Chris. And as soon as there was no<br>&gt;&gt;     &#39;official&#39;<br>&gt;&gt;     proposal and &#39;official&#39; decision, I&#39;d like to discuss this more.<br>&gt;&gt;<br>&gt;&gt;     I saw a lot of code like<br>&gt;&gt;     if let mySomeValue = mySomeValue {} in sources and even in books.<br>&gt;&gt;     Plus, I really believe that<br>&gt;&gt;     if let mySomeValue! {..} is better in any way: readability, less<br>&gt;&gt;     space for<br>&gt;&gt;     errors(when you need to repeat the same name) etc<br>&gt;&gt;<br>&gt;&gt;     FWIW, I suggest more explicit variant:<br>&gt;&gt;     if let value! {...} // with exclamation mark<br>&gt;&gt;     In that &quot;old&quot; proposal there was `if let value {...}`, was not so clear.<br>&gt;&gt;<br>&gt;&gt;     I can&#39;t accept an argument that you can use another name - as usually<br>&gt;&gt;     &#39;good&#39; name is already &#39;crafted&#39; for the instance and you want to use<br>&gt;&gt;     it in<br>&gt;&gt;     next code.<br>&gt;&gt;     Otherwise, we need a &#39;best practice&#39; to name optional variables with some<br>&gt;&gt;     prefix or suffix like : mySomeValueOpt, then `if let mySomeValue =<br>&gt;&gt;     mySomeValueOpt` will have a sense. But as I understand, we don&#39;t want to<br>&gt;&gt;     use such approach.<br>&gt;&gt;     Additionally, when you shadow optional value with same name - you are<br>&gt;&gt;     *protecting* yourself from using optional value inside block of unwrapped<br>&gt;&gt;     code. IMO it is a good idea.<br>&gt;&gt;     And want we or don&#39;t want, we already have this practice widely. So I<br>&gt;&gt;     believe this(my) proposal will improve the code.<br>&gt;&gt;<br>&gt;&gt;     I&#39;d like to get opinion of the community regarding this feature.<br>&gt;&gt;<br>&gt;&gt;     On 17.05.2016 16:51, Johan Jensen wrote:<br>&gt;&gt;     &gt; This was one of the first and most commonly suggested ideas, when<br>&gt;&gt;     the Swift<br>&gt;&gt;     &gt; Evolution mailing list first started.<br>&gt;&gt;     &gt; Chris Lattner sums it up<br>&gt;&gt;     &gt;<br>&gt;&gt;     &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html&gt;<br>&gt;&gt;     &gt; in one of those threads:<br>&gt;&gt;     &gt;<br>&gt;&gt;     &gt;&gt; This is commonly requested - the problem is that while it does help<br>&gt;&gt;     &gt; reduce boilerplate, it runs counter to the goal of improving clarity.<br>&gt;&gt;     &gt;<br>&gt;&gt;     &gt; — Johan<br>&gt;&gt;     &gt;<br>&gt;&gt;     &gt; On Tue, May 17, 2016 at 3:43 PM, Vladimir.S via swift-evolution<br>&gt;&gt;     &gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;     &lt;mailto:swift-evolution at swift.org<br>&gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt; wrote:<br>&gt;&gt;     &gt;<br>&gt;&gt;     &gt;     It is common to shadow optional value name with unwrapped value<br>&gt;&gt;     with<br>&gt;&gt;     &gt;     same name:<br>&gt;&gt;     &gt;<br>&gt;&gt;     &gt;     if let someGoodValue = someGoodValue {...}<br>&gt;&gt;     &gt;<br>&gt;&gt;     &gt;     What if we&#39;ll have a syntax to not repeat the variable name to<br>&gt;&gt;     achieve<br>&gt;&gt;     &gt;     the same target:<br>&gt;&gt;     &gt;<br>&gt;&gt;     &gt;     if let someGoodValue! {...}<br>&gt;&gt;     &gt;<br>&gt;&gt;     &gt;     What do you think?<br>&gt;&gt;     &gt;     _______________________________________________<br>&gt;&gt;     &gt;     swift-evolution mailing list<br>&gt;&gt;     &gt;     swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;     &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;     &gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;     &gt;<br>&gt;&gt;     &gt;<br>&gt;&gt;     _______________________________________________<br>&gt;&gt;     swift-evolution mailing list<br>&gt;&gt;     swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Idea] if let value!</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 17, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On May 17, 2016, at 10:50 AM, Vladimir.S &lt;svabox at gmail.com&gt; wrote:<br>&gt; <br>&gt; Could you clarify how to use `if case` to achieve the same target as proposed `if let value!` ?<br>&gt; (btw, probably `if let value? {..}` will be better)<br></p><p>You don’t get the same implicit match that this idea proposes, but you do get the full power of pattern matching.  And you get to use the ? pattern. <br></p><p>let i: Int? = 42<br>if case let i? = i {<br>}<br></p><p>The differences in the suggestion here is to allow you to drop case and implicitly match on the value currently bound to the name in the pattern, rebinding using the pattern if a match happens.<br></p><p>If people really want to pursue further sugar here I think it would be worthwhile to explore a direction that hasn’t already been debated extensively.  That is why I suggested thinking about `if unwrap`.  That said, I really don’t think current state is too bad.  It’s definitely not worth expending community energy on this when we clearly have more important things to focus on (like completing generics and ABI).<br></p><p>&gt; <br>&gt; On 17.05.2016 18:18, Matthew Johnson wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On May 17, 2016, at 10:13 AM, Tony Allevato via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; While I&#39;ve sometimes (early on) wished for a shorter-hand syntax for that<br>&gt;&gt;&gt; construct, I&#39;ve never been able to think of something that I thought was<br>&gt;&gt;&gt; better. I&#39;ve gotten to the point where I don&#39;t particularly mind it anymore.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Regarding the exclamation point specifically, seeing one of those in an<br>&gt;&gt;&gt; expression context says to me &quot;this thing will die horribly if it is<br>&gt;&gt;&gt; nil/throws an error&quot;. Using it in this context where that&#39;s not the case<br>&gt;&gt;&gt; would probably go against users&#39; expectations.<br>&gt;&gt; <br>&gt;&gt; Agree.  If we are going have syntax similar to pattern matching it should<br>&gt;&gt; be the same as pattern matching.  This would mean using ‘?&#39; rather than<br>&gt;&gt; ‘!’.  However, we already have generalized pattern matching with `if case`<br>&gt;&gt; for that.  This topic has been debated extensively.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Tue, May 17, 2016 at 8:05 AM Vladimir.S via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    On 17.05.2016 16:51, Johan Jensen wrote:<br>&gt;&gt;&gt;     &gt; This was one of the first and most commonly suggested ideas, when<br>&gt;&gt;&gt;    the Swift<br>&gt;&gt;&gt;     &gt; Evolution mailing list first started.<br>&gt;&gt;&gt;     &gt; Chris Lattner sums it up<br>&gt;&gt;&gt;     &gt;<br>&gt;&gt;&gt;    &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html&gt;<br>&gt;&gt;&gt;     &gt; in one of those threads:<br>&gt;&gt;&gt;     &gt;<br>&gt;&gt;&gt;     &gt;&gt; This is commonly requested - the problem is that while it does help<br>&gt;&gt;&gt;     &gt; reduce boilerplate, it runs counter to the goal of improving clarity.<br>&gt;&gt;&gt;     &gt;<br>&gt;&gt;&gt;     &gt; — Johan<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    Oh, thank you for letting this know.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    Well, I totally disagree with Chris. And as soon as there was no<br>&gt;&gt;&gt;    &#39;official&#39;<br>&gt;&gt;&gt;    proposal and &#39;official&#39; decision, I&#39;d like to discuss this more.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    I saw a lot of code like<br>&gt;&gt;&gt;    if let mySomeValue = mySomeValue {} in sources and even in books.<br>&gt;&gt;&gt;    Plus, I really believe that<br>&gt;&gt;&gt;    if let mySomeValue! {..} is better in any way: readability, less<br>&gt;&gt;&gt;    space for<br>&gt;&gt;&gt;    errors(when you need to repeat the same name) etc<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    FWIW, I suggest more explicit variant:<br>&gt;&gt;&gt;    if let value! {...} // with exclamation mark<br>&gt;&gt;&gt;    In that &quot;old&quot; proposal there was `if let value {...}`, was not so clear.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    I can&#39;t accept an argument that you can use another name - as usually<br>&gt;&gt;&gt;    &#39;good&#39; name is already &#39;crafted&#39; for the instance and you want to use<br>&gt;&gt;&gt;    it in<br>&gt;&gt;&gt;    next code.<br>&gt;&gt;&gt;    Otherwise, we need a &#39;best practice&#39; to name optional variables with some<br>&gt;&gt;&gt;    prefix or suffix like : mySomeValueOpt, then `if let mySomeValue =<br>&gt;&gt;&gt;    mySomeValueOpt` will have a sense. But as I understand, we don&#39;t want to<br>&gt;&gt;&gt;    use such approach.<br>&gt;&gt;&gt;    Additionally, when you shadow optional value with same name - you are<br>&gt;&gt;&gt;    *protecting* yourself from using optional value inside block of unwrapped<br>&gt;&gt;&gt;    code. IMO it is a good idea.<br>&gt;&gt;&gt;    And want we or don&#39;t want, we already have this practice widely. So I<br>&gt;&gt;&gt;    believe this(my) proposal will improve the code.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    I&#39;d like to get opinion of the community regarding this feature.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    On 17.05.2016 16:51, Johan Jensen wrote:<br>&gt;&gt;&gt;    &gt; This was one of the first and most commonly suggested ideas, when<br>&gt;&gt;&gt;    the Swift<br>&gt;&gt;&gt;    &gt; Evolution mailing list first started.<br>&gt;&gt;&gt;    &gt; Chris Lattner sums it up<br>&gt;&gt;&gt;    &gt;<br>&gt;&gt;&gt;    &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003546.html&gt;<br>&gt;&gt;&gt;    &gt; in one of those threads:<br>&gt;&gt;&gt;    &gt;<br>&gt;&gt;&gt;    &gt;&gt; This is commonly requested - the problem is that while it does help<br>&gt;&gt;&gt;    &gt; reduce boilerplate, it runs counter to the goal of improving clarity.<br>&gt;&gt;&gt;    &gt;<br>&gt;&gt;&gt;    &gt; — Johan<br>&gt;&gt;&gt;    &gt;<br>&gt;&gt;&gt;    &gt; On Tue, May 17, 2016 at 3:43 PM, Vladimir.S via swift-evolution<br>&gt;&gt;&gt;    &gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;    &lt;mailto:swift-evolution at swift.org<br>&gt;&gt;&gt;    &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;    &gt;<br>&gt;&gt;&gt;    &gt;     It is common to shadow optional value name with unwrapped value<br>&gt;&gt;&gt;    with<br>&gt;&gt;&gt;    &gt;     same name:<br>&gt;&gt;&gt;    &gt;<br>&gt;&gt;&gt;    &gt;     if let someGoodValue = someGoodValue {...}<br>&gt;&gt;&gt;    &gt;<br>&gt;&gt;&gt;    &gt;     What if we&#39;ll have a syntax to not repeat the variable name to<br>&gt;&gt;&gt;    achieve<br>&gt;&gt;&gt;    &gt;     the same target:<br>&gt;&gt;&gt;    &gt;<br>&gt;&gt;&gt;    &gt;     if let someGoodValue! {...}<br>&gt;&gt;&gt;    &gt;<br>&gt;&gt;&gt;    &gt;     What do you think?<br>&gt;&gt;&gt;    &gt;     _______________________________________________<br>&gt;&gt;&gt;    &gt;     swift-evolution mailing list<br>&gt;&gt;&gt;    &gt;     swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;    &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;    &gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;    &gt;<br>&gt;&gt;&gt;    &gt;<br>&gt;&gt;&gt;    _______________________________________________<br>&gt;&gt;&gt;    swift-evolution mailing list<br>&gt;&gt;&gt;    swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;    https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[Idea] if let value!</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>May 17, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; <br>&gt; If people really want to pursue further sugar here I think it would be worthwhile to explore a direction that hasn’t already been debated extensively.  That is why I suggested thinking about `if unwrap`.  That said, I really don’t think current state is too bad.  It’s definitely not worth expending community energy on this when we clearly have more important things to focus on (like completing generics and ABI).<br>&gt; <br></p><p><br>I agree with Matthew. A marginal increase in developer convenience is, to me, not worth the additional complexity of special purpose syntax.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Idea] if let value!</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 17, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On May 17, 2016, at 11:18 AM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; If people really want to pursue further sugar here I think it would be worthwhile to explore a direction that hasn’t already been debated extensively.  That is why I suggested thinking about `if unwrap`.  That said, I really don’t think current state is too bad.  It’s definitely not worth expending community energy on this when we clearly have more important things to focus on (like completing generics and ABI).<br>&gt;&gt; <br>&gt; <br>&gt; <br>&gt; I agree with Matthew. A marginal increase in developer convenience is, to me, not worth the additional complexity of special purpose syntax.<br></p><p>I think it’s fair to make a case for the special purpose syntax (which may or may not be accepted).  I just don’t think now is the right time to have a debate about it.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[Idea] if let value!</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>May 17, 2016 at 09:00:00am</p></header><div class="content"><p>A case can be made, of course. My personal opinion is that I don&#39;t want to see it in the language at any point. Others are free to agree or disagree.<br></p><p>Austin<br></p><p>&gt; On May 17, 2016, at 9:21 AM, Matthew Johnson &lt;matthew at anandabits.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On May 17, 2016, at 11:18 AM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If people really want to pursue further sugar here I think it would be worthwhile to explore a direction that hasn’t already been debated extensively.  That is why I suggested thinking about `if unwrap`.  That said, I really don’t think current state is too bad.  It’s definitely not worth expending community energy on this when we clearly have more important things to focus on (like completing generics and ABI).<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I agree with Matthew. A marginal increase in developer convenience is, to me, not worth the additional complexity of special purpose syntax.<br>&gt; <br>&gt; I think it’s fair to make a case for the special purpose syntax (which may or may not be accepted).  I just don’t think now is the right time to have a debate about it.<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Idea] if let value!</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>May 17, 2016 at 07:00:00pm</p></header><div class="content"><p>On 17.05.2016 18:58, Matthew Johnson wrote:<br>&gt; That said, I really don’t think current state is too bad.  It’s<br>&gt; definitely not worth expending community energy on this when we clearly<br>&gt; have more important things to focus on (like completing generics and<br>&gt; ABI).<br></p><p>Well.. Although I agree that this is not &#39;big deal&#39; feature, I believe it <br>will slightly improve the experience of coding in Swift, similar to other <br>small features.<br></p><p>Must we stop to discuss anything else than &quot;completing generics and ABI&quot;?<br>Or it is worth to discuss interesting features even if it will not be <br>included in Swift 3.0 ? (I.e. probably can be included in later versions).<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3a02fb5c94ea077d3576e3e830309bee?s=50"></div><header><strong>[Idea] if let value!</strong> from <string>Daniel Höpfl</string> &lt;daniel at hoepfl.de&gt;<p>May 18, 2016 at 10:00:00am</p></header><div class="content"><p>Just an idea: Why don’t we think about it similar to try?<br></p><p>var anOptional : String?<br></p><p>let? anOptional { /* use it, but cannot change it */ }<br>let! anOptional { /* use it, without checking, cannot change it */ }<br></p><p>var? anOptional { /* use it, can also change it, */ }<br>var! anOptional { /* use it, without checking, can also change it */ }<br></p><p>Is it allowed to set it to nil in the var case? Hard to say.<br></p><p>On 17.05.16 15:43, Vladimir.S via swift-evolution wrote:<br>&gt; It is common to shadow optional value name with unwrapped value with<br>&gt; same name:<br>&gt; <br>&gt; if let someGoodValue = someGoodValue {...}<br>&gt; <br>&gt; What if we&#39;ll have a syntax to not repeat the variable name to achieve<br>&gt; the same target:<br>&gt; <br>&gt; if let someGoodValue! {...}<br>&gt; <br>&gt; What do you think?<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Idea] if let value!</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>May 18, 2016 at 11:00:00am</p></header><div class="content"><p>I am experimenting with this:<br></p><p>If var! anOptional {<br>   anOptional   // unwrapped, shadowing<br>}<br></p><p>if let! anOptional {<br>... // same<br>}<br></p><p><br>This compiler codebase is truly remarkable, so it should also works with<br></p><p>If var! opt1 where opt1 &lt; 27 {<br>}<br></p><p>or <br></p><p>if var! opt1, opt2 {<br>   // both unwrapped<br>}<br></p><p>LM/<br></p><p><br>&gt; On May 18, 2016, at 10:21 AM, Daniel Höpfl via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Just an idea: Why don’t we think about it similar to try?<br>&gt; <br>&gt; var anOptional : String?<br>&gt; <br>&gt; let? anOptional { /* use it, but cannot change it */ }<br>&gt; let! anOptional { /* use it, without checking, cannot change it */ }<br>&gt; <br>&gt; var? anOptional { /* use it, can also change it, */ }<br>&gt; var! anOptional { /* use it, without checking, can also change it */ }<br>&gt; <br>&gt; Is it allowed to set it to nil in the var case? Hard to say.<br>&gt; <br>&gt;&gt; On 17.05.16 15:43, Vladimir.S via swift-evolution wrote:<br>&gt;&gt; It is common to shadow optional value name with unwrapped value with<br>&gt;&gt; same name:<br>&gt;&gt; <br>&gt;&gt; if let someGoodValue = someGoodValue {...}<br>&gt;&gt; <br>&gt;&gt; What if we&#39;ll have a syntax to not repeat the variable name to achieve<br>&gt;&gt; the same target:<br>&gt;&gt; <br>&gt;&gt; if let someGoodValue! {...}<br>&gt;&gt; <br>&gt;&gt; What do you think?<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3a02fb5c94ea077d3576e3e830309bee?s=50"></div><header><strong>[Idea] if let value!</strong> from <string>Daniel Höpfl</string> &lt;daniel at hoepfl.de&gt;<p>May 18, 2016 at 02:00:00pm</p></header><div class="content"><p>Would it be possible to drop the &quot;if&quot;? I don&#39;t see why we need it.<br></p><p>On 2016-05-18 11:22, LM wrote:<br>&gt; I am experimenting with this:<br>&gt; <br>&gt; If var! anOptional {<br>&gt;    anOptional   // unwrapped, shadowing<br>&gt; }<br>&gt; <br>&gt; if let! anOptional {<br>&gt; ... // same<br>&gt; }<br>&gt; <br>&gt; <br>&gt; This compiler codebase is truly remarkable, so it should also works <br>&gt; with<br>&gt; <br>&gt; If var! opt1 where opt1 &lt; 27 {<br>&gt; }<br>&gt; <br>&gt; or<br>&gt; <br>&gt; if var! opt1, opt2 {<br>&gt;    // both unwrapped<br>&gt; }<br>&gt; <br>&gt; LM/<br>&gt; <br>&gt; <br>&gt;&gt; On May 18, 2016, at 10:21 AM, Daniel Höpfl via swift-evolution <br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Just an idea: Why don’t we think about it similar to try?<br>&gt;&gt; <br>&gt;&gt; var anOptional : String?<br>&gt;&gt; <br>&gt;&gt; let? anOptional { /* use it, but cannot change it */ }<br>&gt;&gt; let! anOptional { /* use it, without checking, cannot change it */ }<br>&gt;&gt; <br>&gt;&gt; var? anOptional { /* use it, can also change it, */ }<br>&gt;&gt; var! anOptional { /* use it, without checking, can also change it */ }<br>&gt;&gt; <br>&gt;&gt; Is it allowed to set it to nil in the var case? Hard to say.<br>&gt;&gt; <br>&gt;&gt;&gt; On 17.05.16 15:43, Vladimir.S via swift-evolution wrote:<br>&gt;&gt;&gt; It is common to shadow optional value name with unwrapped value with<br>&gt;&gt;&gt; same name:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if let someGoodValue = someGoodValue {...}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What if we&#39;ll have a syntax to not repeat the variable name to <br>&gt;&gt;&gt; achieve<br>&gt;&gt;&gt; the same target:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if let someGoodValue! {...}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What do you think?<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Idea] if let value!</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>May 18, 2016 at 03:00:00pm</p></header><div class="content"><p>The idea to process the &#39;if&#39; block only if anOptional is not null<br></p><p>In case of<br>let! anOptional {<br>}<br>IMO it is not clear that this block will be executed *only* if anOptional <br>is not null.<br></p><p>if let! anOptional {<br>  // here only if anOptional != null<br>}<br>- seems like similar to standard &#39;if let&#39; construction so should not <br>confuse too much and IMO will be remembered after the first appearance/using.<br></p><p>On 18.05.2016 15:15, Daniel Höpfl via swift-evolution wrote:<br>&gt; Would it be possible to drop the &quot;if&quot;? I don&#39;t see why we need it.<br>&gt;<br>&gt; On 2016-05-18 11:22, LM wrote:<br>&gt;&gt; I am experimenting with this:<br>&gt;&gt;<br>&gt;&gt; If var! anOptional {<br>&gt;&gt;    anOptional   // unwrapped, shadowing<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; if let! anOptional {<br>&gt;&gt; ... // same<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; This compiler codebase is truly remarkable, so it should also works with<br>&gt;&gt;<br>&gt;&gt; If var! opt1 where opt1 &lt; 27 {<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; or<br>&gt;&gt;<br>&gt;&gt; if var! opt1, opt2 {<br>&gt;&gt;    // both unwrapped<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; LM/<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; On May 18, 2016, at 10:21 AM, Daniel Höpfl via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Just an idea: Why don’t we think about it similar to try?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; var anOptional : String?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; let? anOptional { /* use it, but cannot change it */ }<br>&gt;&gt;&gt; let! anOptional { /* use it, without checking, cannot change it */ }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; var? anOptional { /* use it, can also change it, */ }<br>&gt;&gt;&gt; var! anOptional { /* use it, without checking, can also change it */ }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Is it allowed to set it to nil in the var case? Hard to say.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On 17.05.16 15:43, Vladimir.S via swift-evolution wrote:<br>&gt;&gt;&gt;&gt; It is common to shadow optional value name with unwrapped value with<br>&gt;&gt;&gt;&gt; same name:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; if let someGoodValue = someGoodValue {...}<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; What if we&#39;ll have a syntax to not repeat the variable name to achieve<br>&gt;&gt;&gt;&gt; the same target:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; if let someGoodValue! {...}<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; What do you think?<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3a02fb5c94ea077d3576e3e830309bee?s=50"></div><header><strong>[Idea] if let value!</strong> from <string>Daniel Höpfl</string> &lt;daniel at hoepfl.de&gt;<p>May 18, 2016 at 03:00:00pm</p></header><div class="content"><p>That&#39;s the idea of &quot;let?&quot;.<br>&quot;let!&quot; would always execute the block (and crash if the optional is <br>nil.)<br></p><p>&quot;if let!&quot; is meaningless: &quot;let!&quot; would be true (if the optional is set) <br>or crash (if the optional is nil).<br></p><p>On 2016-05-18 14:27, Vladimir.S wrote:<br>&gt; The idea to process the &#39;if&#39; block only if anOptional is not null<br>&gt; <br>&gt; In case of<br>&gt; let! anOptional {<br>&gt; }<br>&gt; IMO it is not clear that this block will be executed *only* if<br>&gt; anOptional is not null.<br>&gt; <br>&gt; if let! anOptional {<br>&gt;  // here only if anOptional != null<br>&gt; }<br>&gt; - seems like similar to standard &#39;if let&#39; construction so should not<br>&gt; confuse too much and IMO will be remembered after the first<br>&gt; appearance/using.<br>&gt; <br>&gt; On 18.05.2016 15:15, Daniel Höpfl via swift-evolution wrote:<br>&gt;&gt; Would it be possible to drop the &quot;if&quot;? I don&#39;t see why we need it.<br>&gt;&gt; <br>&gt;&gt; On 2016-05-18 11:22, LM wrote:<br>&gt;&gt;&gt; I am experimenting with this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If var! anOptional {<br>&gt;&gt;&gt;    anOptional   // unwrapped, shadowing<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if let! anOptional {<br>&gt;&gt;&gt; ... // same<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This compiler codebase is truly remarkable, so it should also works <br>&gt;&gt;&gt; with<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If var! opt1 where opt1 &lt; 27 {<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; or<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if var! opt1, opt2 {<br>&gt;&gt;&gt;    // both unwrapped<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; LM/<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 18, 2016, at 10:21 AM, Daniel Höpfl via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Just an idea: Why don’t we think about it similar to try?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; var anOptional : String?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let? anOptional { /* use it, but cannot change it */ }<br>&gt;&gt;&gt;&gt; let! anOptional { /* use it, without checking, cannot change it */ }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; var? anOptional { /* use it, can also change it, */ }<br>&gt;&gt;&gt;&gt; var! anOptional { /* use it, without checking, can also change it */ <br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Is it allowed to set it to nil in the var case? Hard to say.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 17.05.16 15:43, Vladimir.S via swift-evolution wrote:<br>&gt;&gt;&gt;&gt;&gt; It is common to shadow optional value name with unwrapped value <br>&gt;&gt;&gt;&gt;&gt; with<br>&gt;&gt;&gt;&gt;&gt; same name:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; if let someGoodValue = someGoodValue {...}<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; What if we&#39;ll have a syntax to not repeat the variable name to <br>&gt;&gt;&gt;&gt;&gt; achieve<br>&gt;&gt;&gt;&gt;&gt; the same target:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; if let someGoodValue! {...}<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; What do you think?<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Idea] if let value!</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>May 18, 2016 at 04:00:00pm</p></header><div class="content"><p>I understand *your* idea of let?/let! etc without &#39;if&#39;, but personally I <br>don&#39;t support it. I think `if` must be used in this feature.<br></p><p>In any case I feel like this idea is not accepted by community, so it seems <br>like there is no sense to discuss its details.<br></p><p>On 18.05.2016 16:12, Daniel Höpfl wrote:<br>&gt; That&#39;s the idea of &quot;let?&quot;.<br>&gt; &quot;let!&quot; would always execute the block (and crash if the optional is nil.)<br>&gt;<br>&gt; &quot;if let!&quot; is meaningless: &quot;let!&quot; would be true (if the optional is set) or<br>&gt; crash (if the optional is nil).<br>&gt;<br>&gt; On 2016-05-18 14:27, Vladimir.S wrote:<br>&gt;&gt; The idea to process the &#39;if&#39; block only if anOptional is not null<br>&gt;&gt;<br>&gt;&gt; In case of<br>&gt;&gt; let! anOptional {<br>&gt;&gt; }<br>&gt;&gt; IMO it is not clear that this block will be executed *only* if<br>&gt;&gt; anOptional is not null.<br>&gt;&gt;<br>&gt;&gt; if let! anOptional {<br>&gt;&gt;  // here only if anOptional != null<br>&gt;&gt; }<br>&gt;&gt; - seems like similar to standard &#39;if let&#39; construction so should not<br>&gt;&gt; confuse too much and IMO will be remembered after the first<br>&gt;&gt; appearance/using.<br>&gt;&gt;<br>&gt;&gt; On 18.05.2016 15:15, Daniel Höpfl via swift-evolution wrote:<br>&gt;&gt;&gt; Would it be possible to drop the &quot;if&quot;? I don&#39;t see why we need it.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On 2016-05-18 11:22, LM wrote:<br>&gt;&gt;&gt;&gt; I am experimenting with this:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; If var! anOptional {<br>&gt;&gt;&gt;&gt;    anOptional   // unwrapped, shadowing<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; if let! anOptional {<br>&gt;&gt;&gt;&gt; ... // same<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; This compiler codebase is truly remarkable, so it should also works with<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; If var! opt1 where opt1 &lt; 27 {<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; or<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; if var! opt1, opt2 {<br>&gt;&gt;&gt;&gt;    // both unwrapped<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; LM/<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On May 18, 2016, at 10:21 AM, Daniel Höpfl via swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Just an idea: Why don’t we think about it similar to try?<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; var anOptional : String?<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; let? anOptional { /* use it, but cannot change it */ }<br>&gt;&gt;&gt;&gt;&gt; let! anOptional { /* use it, without checking, cannot change it */ }<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; var? anOptional { /* use it, can also change it, */ }<br>&gt;&gt;&gt;&gt;&gt; var! anOptional { /* use it, without checking, can also change it */ }<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Is it allowed to set it to nil in the var case? Hard to say.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; On 17.05.16 15:43, Vladimir.S via swift-evolution wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; It is common to shadow optional value name with unwrapped value with<br>&gt;&gt;&gt;&gt;&gt;&gt; same name:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; if let someGoodValue = someGoodValue {...}<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; What if we&#39;ll have a syntax to not repeat the variable name to achieve<br>&gt;&gt;&gt;&gt;&gt;&gt; the same target:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; if let someGoodValue! {...}<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; What do you think?<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Idea] if let value!</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>May 18, 2016 at 03:00:00pm</p></header><div class="content"><p>Very interesting. But, as I can see, no community&#39;s support for this feature.<br></p><p>On 18.05.2016 12:22, LM wrote:<br>&gt; I am experimenting with this:<br>&gt;<br>&gt; If var! anOptional {<br>&gt;    anOptional   // unwrapped, shadowing<br>&gt; }<br>&gt;<br>&gt; if let! anOptional {<br>&gt; ... // same<br>&gt; }<br>&gt;<br>&gt;<br>&gt; This compiler codebase is truly remarkable, so it should also works with<br>&gt;<br>&gt; If var! opt1 where opt1 &lt; 27 {<br>&gt; }<br>&gt;<br>&gt; or<br>&gt;<br>&gt; if var! opt1, opt2 {<br>&gt;    // both unwrapped<br>&gt; }<br>&gt;<br>&gt; LM/<br>&gt;<br>&gt;<br>&gt;&gt; On May 18, 2016, at 10:21 AM, Daniel Höpfl via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Just an idea: Why don’t we think about it similar to try?<br>&gt;&gt;<br>&gt;&gt; var anOptional : String?<br>&gt;&gt;<br>&gt;&gt; let? anOptional { /* use it, but cannot change it */ }<br>&gt;&gt; let! anOptional { /* use it, without checking, cannot change it */ }<br>&gt;&gt;<br>&gt;&gt; var? anOptional { /* use it, can also change it, */ }<br>&gt;&gt; var! anOptional { /* use it, without checking, can also change it */ }<br>&gt;&gt;<br>&gt;&gt; Is it allowed to set it to nil in the var case? Hard to say.<br>&gt;&gt;<br>&gt;&gt;&gt; On 17.05.16 15:43, Vladimir.S via swift-evolution wrote:<br>&gt;&gt;&gt; It is common to shadow optional value name with unwrapped value with<br>&gt;&gt;&gt; same name:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; if let someGoodValue = someGoodValue {...}<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; What if we&#39;ll have a syntax to not repeat the variable name to achieve<br>&gt;&gt;&gt; the same target:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; if let someGoodValue! {...}<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; What do you think?<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Idea] if let value!</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>May 18, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On May 18, 2016, at 2:37 PM, Vladimir.S &lt;svabox at gmail.com&gt; wrote:<br>&gt; <br>&gt; Very interesting. But, as I can see, no community&#39;s support for this feature.<br>&gt; <br></p><p>I don&#39;t mind the lack of interest. chris was very clear that this kind of syntax sugaring is out of scope for 3.0 in general, and that he did not want this one in particular.<br></p><p>my goal is just to learn the compiler codebase, and over the last couple days its been a great teaching tool. I&#39;ll leave the code somewhere for others to play with it. It would be very nice of the core team to have a small list somewhere of little brain teasers like this one that they know are do-able in a couple days without their help, to learn to get familiar with what&#39;s what and where<br></p><p><br></p><p>&gt;&gt; On 18.05.2016 12:22, LM wrote:<br>&gt;&gt; I am experimenting with this:<br>&gt;&gt; <br>&gt;&gt; If var! anOptional {<br>&gt;&gt;   anOptional   // unwrapped, shadowing<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; if let! anOptional {<br>&gt;&gt; ... // same<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; This compiler codebase is truly remarkable, so it should also works with<br>&gt;&gt; <br>&gt;&gt; If var! opt1 where opt1 &lt; 27 {<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; or<br>&gt;&gt; <br>&gt;&gt; if var! opt1, opt2 {<br>&gt;&gt;   // both unwrapped<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; LM/<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On May 18, 2016, at 10:21 AM, Daniel Höpfl via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Just an idea: Why don’t we think about it similar to try?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; var anOptional : String?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let? anOptional { /* use it, but cannot change it */ }<br>&gt;&gt;&gt; let! anOptional { /* use it, without checking, cannot change it */ }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; var? anOptional { /* use it, can also change it, */ }<br>&gt;&gt;&gt; var! anOptional { /* use it, without checking, can also change it */ }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is it allowed to set it to nil in the var case? Hard to say.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 17.05.16 15:43, Vladimir.S via swift-evolution wrote:<br>&gt;&gt;&gt;&gt; It is common to shadow optional value name with unwrapped value with<br>&gt;&gt;&gt;&gt; same name:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; if let someGoodValue = someGoodValue {...}<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What if we&#39;ll have a syntax to not repeat the variable name to achieve<br>&gt;&gt;&gt;&gt; the same target:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; if let someGoodValue! {...}<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What do you think?<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
