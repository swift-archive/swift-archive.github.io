<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b0af287dec158eb39b139c1e1af73e78?s=50"></div><header><strong>Control Flow Expressions</strong> from <string>Sergey Shulepov</string> &lt;s.pepyakin at gmail.com&gt;<p>December  4, 2015 at 02:00:00pm</p></header><div class="content"><p>Hello. <br></p><p>It would be cool if control flow statements like &quot;switch&quot;, &quot;if&quot; can be used as expressions, such as in languages like Scala, Rust and Kotlin,<br>so instead of writing:<br></p><p>var message: String<br>if x % 2 == 0 {<br> message = &quot;x is even&quot;<br>} else {<br> message = &quot;x is odd&quot;<br>}<br></p><p>you can write:<br></p><p>let message: String = if x % 2 == 0 { &quot;x is even&quot; } else { &quot;x is odd&quot; }<br></p><p>I&#39;m not into any kind of compiler development, and don&#39;t know is it feasible to introduce such change at the moment, but at least, I would like to hear why not.<br>Thanks!<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/32d8eca60f1bbb516804a3857528b2e1?s=50"></div><header><strong>Control Flow Expressions</strong> from <string>ChanMaxthon</string> &lt;xcvista at me.com&gt;<p>December  4, 2015 at 07:00:00pm</p></header><div class="content"><p>I believe switch-as-an-expression can be implemented as a dictionary lookup, and if-as-an-expression is the ternary operator ?:<br></p><p>&gt; On Dec 4, 2015, at 19:05, Sergey Shulepov &lt;s.pepyakin at gmail.com&gt; wrote:<br>&gt; <br>&gt; Hello. <br>&gt; <br>&gt; It would be cool if control flow statements like &quot;switch&quot;, &quot;if&quot; can be used as expressions, such as in languages like Scala, Rust and Kotlin,<br>&gt; so instead of writing:<br>&gt; <br>&gt; var message: String<br>&gt; if x % 2 == 0 {<br>&gt; message = &quot;x is even&quot;<br>&gt; } else {<br>&gt; message = &quot;x is odd&quot;<br>&gt; }<br>&gt; <br>&gt; you can write:<br>&gt; <br>&gt; let message: String = if x % 2 == 0 { &quot;x is even&quot; } else { &quot;x is odd&quot; }<br>&gt; <br>&gt; I&#39;m not into any kind of compiler development, and don&#39;t know is it feasible to introduce such change at the moment, but at least, I would like to hear why not.<br>&gt; Thanks!<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: smime.p7s<br>Type: application/pkcs7-signature<br>Size: 4097 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/129ab465/attachment-0001.p7s&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b0af287dec158eb39b139c1e1af73e78?s=50"></div><header><strong>Control Flow Expressions</strong> from <string>Sergey Shulepov</string> &lt;s.pepyakin at gmail.com&gt;<p>December  4, 2015 at 02:00:00pm</p></header><div class="content"><p>Agree on the if-as-an-expression part, that is possible, but it can be cumbersome if branches contain more than few trivial expressions. <br>Whenever such situations occur you often have to break your expressions to separate methods just to split things up.<br></p><p>As for switch-as-an-expression, I&#39;m not sure I got it right, can you elaborate on this?<br></p><p>&gt; On 04 Dec 2015, at 14:07, Maxthon Chan &lt;xcvista at me.com&gt; wrote:<br>&gt; <br>&gt; I believe switch-as-an-expression can be implemented as a dictionary lookup, and if-as-an-expression is the ternary operator ?:<br>&gt; <br>&gt;&gt; On Dec 4, 2015, at 19:05, Sergey Shulepov &lt;s.pepyakin at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello. <br>&gt;&gt; <br>&gt;&gt; It would be cool if control flow statements like &quot;switch&quot;, &quot;if&quot; can be used as expressions, such as in languages like Scala, Rust and Kotlin,<br>&gt;&gt; so instead of writing:<br>&gt;&gt; <br>&gt;&gt; var message: String<br>&gt;&gt; if x % 2 == 0 {<br>&gt;&gt; message = &quot;x is even&quot;<br>&gt;&gt; } else {<br>&gt;&gt; message = &quot;x is odd&quot;<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; you can write:<br>&gt;&gt; <br>&gt;&gt; let message: String = if x % 2 == 0 { &quot;x is even&quot; } else { &quot;x is odd&quot; }<br>&gt;&gt; <br>&gt;&gt; I&#39;m not into any kind of compiler development, and don&#39;t know is it feasible to introduce such change at the moment, but at least, I would like to hear why not.<br>&gt;&gt; Thanks!<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Control Flow Expressions</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December  4, 2015 at 09:00:00am</p></header><div class="content"><p>&gt; On Dec 4, 2015, at 3:07 AM, Maxthon Chan &lt;xcvista at me.com&gt; wrote:<br>&gt; <br>&gt; I believe switch-as-an-expression can be implemented as a dictionary lookup, and if-as-an-expression is the ternary operator ?:<br></p><p>A dictionary lookup works in some cases, but is likely to be slower without optimizer heroics. Furthermore, you can&#39;t bind pattern variables or get exhaustiveness checking out of a dictionary.<br></p><p>-Joe<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>Control Flow Expressions</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>December  4, 2015 at 06:00:00am</p></header><div class="content"><p>I like it. Related.<br></p><p>https://lists.swift.org/pipermail/swift-evolution/2015-December/000098.html<br></p><p>The switch would be interesting if it could be done in one line.<br></p><p><br>On Friday, December 4, 2015, Sergey Shulepov &lt;s.pepyakin at gmail.com&gt; wrote:<br></p><p>&gt; Hello.<br>&gt;<br>&gt; It would be cool if control flow statements like &quot;switch&quot;, &quot;if&quot; can be<br>&gt; used as expressions, such as in languages like Scala, Rust and Kotlin,<br>&gt; so instead of writing:<br>&gt;<br>&gt; var message: String<br>&gt; if x % 2 == 0 {<br>&gt;  message = &quot;x is even&quot;<br>&gt; } else {<br>&gt;  message = &quot;x is odd&quot;<br>&gt; }<br>&gt;<br>&gt; you can write:<br>&gt;<br>&gt; let message: String = if x % 2 == 0 { &quot;x is even&quot; } else { &quot;x is odd&quot; }<br>&gt;<br>&gt; I&#39;m not into any kind of compiler development, and don&#39;t know is it<br>&gt; feasible to introduce such change at the moment, but at least, I would like<br>&gt; to hear why not.<br>&gt; Thanks!<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;javascript:;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/9b3a3a62/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>Control Flow Expressions</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>December  5, 2015 at 09:00:00am</p></header><div class="content"><p>Hi Sergey,<br></p><p>Are you thinking on writing the formal proposal for the if expression?<br></p><p>https://lists.swift.org/pipermail/swift-evolution/2015-December/000165.html<br></p><p><br>On Friday, December 4, 2015, Sergey Shulepov &lt;s.pepyakin at gmail.com&gt; wrote:<br></p><p>&gt; Hello.<br>&gt;<br>&gt; It would be cool if control flow statements like &quot;switch&quot;, &quot;if&quot; can be<br>&gt; used as expressions, such as in languages like Scala, Rust and Kotlin,<br>&gt; so instead of writing:<br>&gt;<br>&gt; var message: String<br>&gt; if x % 2 == 0 {<br>&gt;  message = &quot;x is even&quot;<br>&gt; } else {<br>&gt;  message = &quot;x is odd&quot;<br>&gt; }<br>&gt;<br>&gt; you can write:<br>&gt;<br>&gt; let message: String = if x % 2 == 0 { &quot;x is even&quot; } else { &quot;x is odd&quot; }<br>&gt;<br>&gt; I&#39;m not into any kind of compiler development, and don&#39;t know is it<br>&gt; feasible to introduce such change at the moment, but at least, I would like<br>&gt; to hear why not.<br>&gt; Thanks!<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;javascript:;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/29231e61/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c354b21edb9ba56fe6b42950e08195fa?s=50"></div><header><strong>Control Flow Expressions</strong> from <string>Jonathan Hull</string> &lt;jhull at gbis.com&gt;<p>December  5, 2015 at 07:00:00am</p></header><div class="content"><p>Don’t we already have the following?<br></p><p>let message:String = (x % 2) ? “x is even” : “x is odd&quot;<br> <br></p><p>&gt; On Dec 5, 2015, at 7:02 AM, J. Cheyo Jimenez &lt;cheyo at masters3d.com&gt; wrote:<br>&gt; <br>&gt; Hi Sergey,<br>&gt; <br>&gt; Are you thinking on writing the formal proposal for the if expression? <br>&gt; <br>&gt; https://lists.swift.org/pipermail/swift-evolution/2015-December/000165.html &lt;https://lists.swift.org/pipermail/swift-evolution/2015-December/000165.html&gt;<br>&gt; <br>&gt; <br>&gt; On Friday, December 4, 2015, Sergey Shulepov &lt;s.pepyakin at gmail.com &lt;mailto:s.pepyakin at gmail.com&gt;&gt; wrote:<br>&gt; Hello.<br>&gt; <br>&gt; It would be cool if control flow statements like &quot;switch&quot;, &quot;if&quot; can be used as expressions, such as in languages like Scala, Rust and Kotlin,<br>&gt; so instead of writing:<br>&gt; <br>&gt; var message: String<br>&gt; if x % 2 == 0 {<br>&gt;  message = &quot;x is even&quot;<br>&gt; } else {<br>&gt;  message = &quot;x is odd&quot;<br>&gt; }<br>&gt; <br>&gt; you can write:<br>&gt; <br>&gt; let message: String = if x % 2 == 0 { &quot;x is even&quot; } else { &quot;x is odd&quot; }<br>&gt; <br>&gt; I&#39;m not into any kind of compiler development, and don&#39;t know is it feasible to introduce such change at the moment, but at least, I would like to hear why not.<br>&gt; Thanks!<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;javascript:;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/09b73a83/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c354b21edb9ba56fe6b42950e08195fa?s=50"></div><header><strong>Control Flow Expressions</strong> from <string>Jonathan Hull</string> &lt;jhull at gbis.com&gt;<p>December  5, 2015 at 07:00:00am</p></header><div class="content"><p>Sorry, that should be:<br></p><p>let message:String = (x % 2 == 0) ? “x is even” : “x is odd”<br></p><p>&gt; On Dec 5, 2015, at 7:35 AM, Jonathan Hull &lt;jhull at gbis.com&gt; wrote:<br>&gt; <br>&gt; Don’t we already have the following?<br>&gt; <br>&gt; let message:String = (x % 2) ? “x is even” : “x is odd&quot;<br>&gt;  <br>&gt; <br>&gt;&gt; On Dec 5, 2015, at 7:02 AM, J. Cheyo Jimenez &lt;cheyo at masters3d.com &lt;mailto:cheyo at masters3d.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi Sergey,<br>&gt;&gt; <br>&gt;&gt; Are you thinking on writing the formal proposal for the if expression? <br>&gt;&gt; <br>&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/2015-December/000165.html &lt;https://lists.swift.org/pipermail/swift-evolution/2015-December/000165.html&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Friday, December 4, 2015, Sergey Shulepov &lt;s.pepyakin at gmail.com &lt;mailto:s.pepyakin at gmail.com&gt;&gt; wrote:<br>&gt;&gt; Hello.<br>&gt;&gt; <br>&gt;&gt; It would be cool if control flow statements like &quot;switch&quot;, &quot;if&quot; can be used as expressions, such as in languages like Scala, Rust and Kotlin,<br>&gt;&gt; so instead of writing:<br>&gt;&gt; <br>&gt;&gt; var message: String<br>&gt;&gt; if x % 2 == 0 {<br>&gt;&gt;  message = &quot;x is even&quot;<br>&gt;&gt; } else {<br>&gt;&gt;  message = &quot;x is odd&quot;<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; you can write:<br>&gt;&gt; <br>&gt;&gt; let message: String = if x % 2 == 0 { &quot;x is even&quot; } else { &quot;x is odd&quot; }<br>&gt;&gt; <br>&gt;&gt; I&#39;m not into any kind of compiler development, and don&#39;t know is it feasible to introduce such change at the moment, but at least, I would like to hear why not.<br>&gt;&gt; Thanks!<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;javascript:;&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/f6ed35d1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Control Flow Expressions</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>December  5, 2015 at 04:00:00pm</p></header><div class="content"><p>The ternary operator is indeed equivalent to an if expression but:<br></p><p>1) There is no equivalent for switch.<br>2) There is also a proposition to remove the ternary operator in favour of a if expression.<br></p><p>David.<br></p><p>&gt; On 05 Dec 2015, at 16:41, Jonathan Hull &lt;jhull at gbis.com&gt; wrote:<br>&gt; <br>&gt; Sorry, that should be:<br>&gt; <br>&gt; let message:String = (x % 2 == 0) ? “x is even” : “x is odd”<br>&gt; <br>&gt;&gt; On Dec 5, 2015, at 7:35 AM, Jonathan Hull &lt;jhull at gbis.com &lt;mailto:jhull at gbis.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Don’t we already have the following?<br>&gt;&gt; <br>&gt;&gt; let message:String = (x % 2) ? “x is even” : “x is odd&quot;<br>&gt;&gt;  <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 5, 2015, at 7:02 AM, J. Cheyo Jimenez &lt;cheyo at masters3d.com &lt;mailto:cheyo at masters3d.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi Sergey,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Are you thinking on writing the formal proposal for the if expression? <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/2015-December/000165.html &lt;https://lists.swift.org/pipermail/swift-evolution/2015-December/000165.html&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Friday, December 4, 2015, Sergey Shulepov &lt;s.pepyakin at gmail.com &lt;mailto:s.pepyakin at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; Hello.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It would be cool if control flow statements like &quot;switch&quot;, &quot;if&quot; can be used as expressions, such as in languages like Scala, Rust and Kotlin,<br>&gt;&gt;&gt; so instead of writing:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; var message: String<br>&gt;&gt;&gt; if x % 2 == 0 {<br>&gt;&gt;&gt;  message = &quot;x is even&quot;<br>&gt;&gt;&gt; } else {<br>&gt;&gt;&gt;  message = &quot;x is odd&quot;<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; you can write:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let message: String = if x % 2 == 0 { &quot;x is even&quot; } else { &quot;x is odd&quot; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m not into any kind of compiler development, and don&#39;t know is it feasible to introduce such change at the moment, but at least, I would like to hear why not.<br>&gt;&gt;&gt; Thanks!<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/e7773e40/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Control Flow Expressions</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December  5, 2015 at 10:00:00am</p></header><div class="content"><p>&gt; On Dec 4, 2015, at 3:05 AM, Sergey Shulepov &lt;s.pepyakin at gmail.com&gt; wrote:<br>&gt; <br>&gt; Hello. <br>&gt; <br>&gt; It would be cool if control flow statements like &quot;switch&quot;, &quot;if&quot; can be used as expressions, such as in languages like Scala, Rust and Kotlin,<br>&gt; so instead of writing:<br>&gt; <br>&gt; var message: String<br>&gt; if x % 2 == 0 {<br>&gt; message = &quot;x is even&quot;<br>&gt; } else {<br>&gt; message = &quot;x is odd&quot;<br>&gt; }<br>&gt; <br>&gt; you can write:<br>&gt; <br>&gt; let message: String = if x % 2 == 0 { &quot;x is even&quot; } else { &quot;x is odd&quot; }<br>&gt; <br>&gt; I&#39;m not into any kind of compiler development, and don&#39;t know is it feasible to introduce such change at the moment, but at least, I would like to hear why not.<br></p><p>FWIW, I (and many other people) would like to consider turning many statement-y things in swift into expressions.  I’d love to see the weird ?: ternary operator get nuked and replaced with an if/else expression of some sort.  This is an area that the apple team hasn’t had bandwidth to consider carefully.<br></p><p>That said, there are challenges here in the details.  How will the grammar work? Exactly which statements should be included (certainly if and switch, any others)?<br></p><p>Further, it is important to consider whether the code written using this will actually be *better* than the code written with these things as statements.  For example, the “switch” blocks tend to be very large, and turning them into expressions encourages additional indentation.  Swift already allows ‘let’ values to be initialized on multiple paths, so is the win actually that great?<br></p><p>Given that statements-as-expressions would provide another way to do things (they are a purely syntax extension) the barrier should high to add them.  They will add complexity and surface area to the language, so they need to pay that complexity.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/900e19fd7259c4962c14f7fee2cc9789?s=50"></div><header><strong>Control Flow Expressions</strong> from <string>Per Melin</string> &lt;p at greendale.se&gt;<p>December  6, 2015 at 09:00:00pm</p></header><div class="content"><p>On Sat, Dec 5, 2015 at 7:15 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br></p><p>&gt; Further, it is important to consider whether the code written using this<br>&gt; will actually be *better* than the code written with these things as<br>&gt; statements.  For example, the “switch” blocks tend to be very large, and<br>&gt; turning them into expressions encourages additional indentation.<br></p><p><br>If you give functions implicit return at the same time – as in Haskell,<br>Erlang, Scala, Rust, Ruby, Lisp/Scheme/Clojure, etc –  there would be no<br>need for additional indentation half of the time.<br></p><p>I really, really like it in many of the mentioned languages, but I expect<br>that the C crowd will vehemently disagree. And maybe Swift is sufficiently<br>different from those languages that it makes less sense here. For example,<br>regardless of project, my average function body size in Erlang hovers<br>around two lines. Not even Slava Pestov would factor Swift that<br>aggressively.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/97e28d5f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Control Flow Expressions</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December  6, 2015 at 02:00:00pm</p></header><div class="content"><p>&gt; On Dec 6, 2015, at 12:17 PM, Per Melin &lt;p at greendale.se&gt; wrote:<br>&gt; <br>&gt; On Sat, Dec 5, 2015 at 7:15 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt; Further, it is important to consider whether the code written using this will actually be *better* than the code written with these things as statements.  For example, the “switch” blocks tend to be very large, and turning them into expressions encourages additional indentation.<br>&gt; <br>&gt; If you give functions implicit return at the same time – as in Haskell, Erlang, Scala, Rust, Ruby, Lisp/Scheme/Clojure, etc –  there would be no need for additional indentation half of the time.<br></p><p>This isn’t something that I’m personally interested in.  I think that it is *feature* of swift that statements an declarations start with keywords.  This greatly simplifies the grammar in various ways, and allows declmodifiers to be introduced without taking keywords space.  <br></p><p>For example, relevant to this proposal, if/when we support “tail return foo()&quot; for example, you don’t want to take “tail” as a keyword to make “tail foo()” work.<br></p><p>&gt; Not even Slava Pestov would factor Swift that aggressively.<br></p><p>Underestimating Slava is not a good idea! :-)<br></p><p>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/8e87f6ef/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b7500f08a3dd8dd1e8f3a58965aab0fa?s=50"></div><header><strong>Control Flow Expressions</strong> from <string>Cameron Knight</string> &lt;camjknight at mac.com&gt;<p>December  7, 2015 at 01:00:00pm</p></header><div class="content"><p>Why not use a keyword? What if, the keyword &#39;returning&#39; (or something like that) was used to specify the control flow behavior.<br></p><p>// Replaces ternary operator<br>let paint.color = returning if door.color == .Red { .Black } else { door.color }<br></p><p>// Supports additional conditions<br>let paint.finish = returning switch paint.color {<br>	case .Black:<br>		.Matte<br>	case .White:<br>		.Eggshell<br>	default:<br>		.Gloss<br>}<br></p><p>// Removes ambiguity of single statement behavior<br>let ages: [Int] = people.map returning { $0.age }<br></p><p>// Perhaps overreaching a bit<br>let label = returning UILabel(frame: CGRect.zero) {<br>	.text = &quot;Hello World&quot;<br>	.color = UIColor.red<br>}<br></p><p>I think it adds clarity without too much syntax bloat. I haven&#39;t thought out all the corner cases though, so maybe I&#39;m missing something obvious.<br></p><p>&gt; On Dec 6, 2015, at 4:56 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 6, 2015, at 12:17 PM, Per Melin &lt;p at greendale.se &lt;mailto:p at greendale.se&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Sat, Dec 5, 2015 at 7:15 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt; Further, it is important to consider whether the code written using this will actually be *better* than the code written with these things as statements.  For example, the “switch” blocks tend to be very large, and turning them into expressions encourages additional indentation.<br>&gt;&gt; <br>&gt;&gt; If you give functions implicit return at the same time – as in Haskell, Erlang, Scala, Rust, Ruby, Lisp/Scheme/Clojure, etc –  there would be no need for additional indentation half of the time.<br>&gt; <br>&gt; This isn’t something that I’m personally interested in.  I think that it is *feature* of swift that statements an declarations start with keywords.  This greatly simplifies the grammar in various ways, and allows declmodifiers to be introduced without taking keywords space.  <br>&gt; <br>&gt; For example, relevant to this proposal, if/when we support “tail return foo()&quot; for example, you don’t want to take “tail” as a keyword to make “tail foo()” work.<br>&gt; <br>&gt;&gt; Not even Slava Pestov would factor Swift that aggressively.<br>&gt; <br>&gt; Underestimating Slava is not a good idea! :-)<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/c57b9bfc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>Control Flow Expressions</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>December  7, 2015 at 03:00:00pm</p></header><div class="content"><p>How about something like this?<br></p><p>let result = if bool return 1 else 2<br></p><p><br></p><p>On Monday, December 7, 2015, Cameron Knight via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Why not use a keyword? What if, the keyword &#39;returning&#39; (or something like<br>&gt; that) was used to specify the control flow behavior.<br>&gt;<br>&gt; // Replaces ternary operator<br>&gt; let paint.color = returning if door.color == .Red { .Black } else {<br>&gt; door.color }<br>&gt;<br>&gt; // Supports additional conditions<br>&gt; let paint.finish = returning switch paint.color {<br>&gt; case .Black:<br>&gt; .Matte<br>&gt; case .White:<br>&gt; .Eggshell<br>&gt; default:<br>&gt; .Gloss<br>&gt; }<br>&gt;<br>&gt; // Removes ambiguity of single statement behavior<br>&gt; let ages: [Int] = people.map returning { $0.age }<br>&gt;<br>&gt; // Perhaps overreaching a bit<br>&gt; let label = returning UILabel(frame: CGRect.zero) {<br>&gt; .text = &quot;Hello World&quot;<br>&gt; .color = UIColor.red<br>&gt; }<br>&gt;<br>&gt; I think it adds clarity without too much syntax bloat. I haven&#39;t thought<br>&gt; out all the corner cases though, so maybe I&#39;m missing something obvious.<br>&gt;<br>&gt; On Dec 6, 2015, at 4:56 PM, Chris Lattner via swift-evolution &lt;<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Dec 6, 2015, at 12:17 PM, Per Melin &lt;p at greendale.se<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;p at greendale.se&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt; On Sat, Dec 5, 2015 at 7:15 PM, Chris Lattner &lt;clattner at apple.com<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;clattner at apple.com&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt;&gt; Further, it is important to consider whether the code written using this<br>&gt;&gt; will actually be *better* than the code written with these things as<br>&gt;&gt; statements.  For example, the “switch” blocks tend to be very large, and<br>&gt;&gt; turning them into expressions encourages additional indentation.<br>&gt;<br>&gt;<br>&gt; If you give functions implicit return at the same time – as in Haskell,<br>&gt; Erlang, Scala, Rust, Ruby, Lisp/Scheme/Clojure, etc –  there would be no<br>&gt; need for additional indentation half of the time.<br>&gt;<br>&gt;<br>&gt; This isn’t something that I’m personally interested in.  I think that it<br>&gt; is *feature* of swift that statements an declarations start with keywords.<br>&gt; This greatly simplifies the grammar in various ways, and allows<br>&gt; declmodifiers to be introduced without taking keywords space.<br>&gt;<br>&gt; For example, relevant to this proposal, if/when we support “tail return<br>&gt; foo()&quot; for example, you don’t want to take “tail” as a keyword to make<br>&gt; “tail foo()” work.<br>&gt;<br>&gt; Not even Slava Pestov would factor Swift that aggressively.<br>&gt;<br>&gt;<br>&gt; Underestimating Slava is not a good idea! :-)<br>&gt;<br>&gt; -Chris<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/62231d07/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>Control Flow Expressions</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>December  7, 2015 at 03:00:00pm</p></header><div class="content"><p>Never mind, that would not work for returning from a function.<br></p><p>On Monday, December 7, 2015, J. Cheyo Jimenez &lt;cheyo at masters3d.com&gt; wrote:<br></p><p>&gt; How about something like this?<br>&gt;<br>&gt; let result = if bool return 1 else 2<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Monday, December 7, 2015, Cameron Knight via swift-evolution &lt;<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt;&gt; Why not use a keyword? What if, the keyword &#39;returning&#39; (or something<br>&gt;&gt; like that) was used to specify the control flow behavior.<br>&gt;&gt;<br>&gt;&gt; // Replaces ternary operator<br>&gt;&gt; let paint.color = returning if door.color == .Red { .Black } else {<br>&gt;&gt; door.color }<br>&gt;&gt;<br>&gt;&gt; // Supports additional conditions<br>&gt;&gt; let paint.finish = returning switch paint.color {<br>&gt;&gt; case .Black:<br>&gt;&gt; .Matte<br>&gt;&gt; case .White:<br>&gt;&gt; .Eggshell<br>&gt;&gt; default:<br>&gt;&gt; .Gloss<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; // Removes ambiguity of single statement behavior<br>&gt;&gt; let ages: [Int] = people.map returning { $0.age }<br>&gt;&gt;<br>&gt;&gt; // Perhaps overreaching a bit<br>&gt;&gt; let label = returning UILabel(frame: CGRect.zero) {<br>&gt;&gt; .text = &quot;Hello World&quot;<br>&gt;&gt; .color = UIColor.red<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; I think it adds clarity without too much syntax bloat. I haven&#39;t thought<br>&gt;&gt; out all the corner cases though, so maybe I&#39;m missing something obvious.<br>&gt;&gt;<br>&gt;&gt; On Dec 6, 2015, at 4:56 PM, Chris Lattner via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Dec 6, 2015, at 12:17 PM, Per Melin &lt;p at greendale.se&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On Sat, Dec 5, 2015 at 7:15 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Further, it is important to consider whether the code written using this<br>&gt;&gt;&gt; will actually be *better* than the code written with these things as<br>&gt;&gt;&gt; statements.  For example, the “switch” blocks tend to be very large, and<br>&gt;&gt;&gt; turning them into expressions encourages additional indentation.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; If you give functions implicit return at the same time – as in Haskell,<br>&gt;&gt; Erlang, Scala, Rust, Ruby, Lisp/Scheme/Clojure, etc –  there would be no<br>&gt;&gt; need for additional indentation half of the time.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; This isn’t something that I’m personally interested in.  I think that it<br>&gt;&gt; is *feature* of swift that statements an declarations start with keywords.<br>&gt;&gt; This greatly simplifies the grammar in various ways, and allows<br>&gt;&gt; declmodifiers to be introduced without taking keywords space.<br>&gt;&gt;<br>&gt;&gt; For example, relevant to this proposal, if/when we support “tail return<br>&gt;&gt; foo()&quot; for example, you don’t want to take “tail” as a keyword to make<br>&gt;&gt; “tail foo()” work.<br>&gt;&gt;<br>&gt;&gt; Not even Slava Pestov would factor Swift that aggressively.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Underestimating Slava is not a good idea! :-)<br>&gt;&gt;<br>&gt;&gt; -Chris<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/0330feaa/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/009173d589176cfd9c8146cc49849ff6?s=50"></div><header><strong>Control Flow Expressions</strong> from <string>Riley Testut</string> &lt;rileytestut at gmail.com&gt;<p>December  7, 2015 at 01:00:00pm</p></header><div class="content"><p>So instead of chaining convenience initializers to required ones via self.init(), you’d recommend instead assigning them directly to self? I think this would be a nice change; currently it can be hard to know the correct method of chaining initializers (at least as far as I’ve seen when attempting to explain it to newcomers).<br></p><p>Proposed new rules for initialization:<br></p><p>required initializers: must call super (unless base class)<br>convenience initializers: must assign to self via a required initializer<br></p><p>I think this also would help with the confusion of why convenience methods can’t call super, but required ones can, since now convenience methods can’t chain to any initializers directly. Thoughts from others?<br></p><p>&gt; On Dec 7, 2015, at 1:33 PM, J. Cheyo Jimenez via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; How about something like this? <br>&gt; <br>&gt; let result = if bool return 1 else 2<br>&gt; <br>&gt; <br>&gt; <br>&gt; On Monday, December 7, 2015, Cameron Knight via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Why not use a keyword? What if, the keyword &#39;returning&#39; (or something like that) was used to specify the control flow behavior.<br>&gt; <br>&gt; // Replaces ternary operator<br>&gt; let paint.color = returning if door.color == .Red { .Black } else { door.color }<br>&gt; <br>&gt; // Supports additional conditions<br>&gt; let paint.finish = returning switch paint.color {<br>&gt; 	case .Black:<br>&gt; 		.Matte<br>&gt; 	case .White:<br>&gt; 		.Eggshell<br>&gt; 	default:<br>&gt; 		.Gloss<br>&gt; }<br>&gt; <br>&gt; // Removes ambiguity of single statement behavior<br>&gt; let ages: [Int] = people.map returning { $0.age }<br>&gt; <br>&gt; // Perhaps overreaching a bit<br>&gt; let label = returning UILabel(frame: CGRect.zero) {<br>&gt; 	.text = &quot;Hello World&quot;<br>&gt; 	.color = UIColor.red<br>&gt; }<br>&gt; <br>&gt; I think it adds clarity without too much syntax bloat. I haven&#39;t thought out all the corner cases though, so maybe I&#39;m missing something obvious.<br>&gt; <br>&gt;&gt; On Dec 6, 2015, at 4:56 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 6, 2015, at 12:17 PM, Per Melin &lt;p at greendale.se &lt;&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Sat, Dec 5, 2015 at 7:15 PM, Chris Lattner &lt;clattner at apple.com &lt;&gt;&gt; wrote:<br>&gt;&gt;&gt; Further, it is important to consider whether the code written using this will actually be *better* than the code written with these things as statements.  For example, the “switch” blocks tend to be very large, and turning them into expressions encourages additional indentation.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If you give functions implicit return at the same time – as in Haskell, Erlang, Scala, Rust, Ruby, Lisp/Scheme/Clojure, etc –  there would be no need for additional indentation half of the time.<br>&gt;&gt; <br>&gt;&gt; This isn’t something that I’m personally interested in.  I think that it is *feature* of swift that statements an declarations start with keywords.  This greatly simplifies the grammar in various ways, and allows declmodifiers to be introduced without taking keywords space.  <br>&gt;&gt; <br>&gt;&gt; For example, relevant to this proposal, if/when we support “tail return foo()&quot; for example, you don’t want to take “tail” as a keyword to make “tail foo()” work.<br>&gt;&gt; <br>&gt;&gt;&gt; Not even Slava Pestov would factor Swift that aggressively.<br>&gt;&gt; <br>&gt;&gt; Underestimating Slava is not a good idea! :-)<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/25fac516/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/009173d589176cfd9c8146cc49849ff6?s=50"></div><header><strong>Control Flow Expressions</strong> from <string>Riley Testut</string> &lt;rileytestut at gmail.com&gt;<p>December  7, 2015 at 01:00:00pm</p></header><div class="content"><p>Sorry y’all, wrong thread. Ignore this past email.<br></p><p>&gt; On Dec 7, 2015, at 1:43 PM, Riley Testut &lt;rileytestut at gmail.com&gt; wrote:<br>&gt; <br>&gt; So instead of chaining convenience initializers to required ones via self.init(), you’d recommend instead assigning them directly to self? I think this would be a nice change; currently it can be hard to know the correct method of chaining initializers (at least as far as I’ve seen when attempting to explain it to newcomers).<br>&gt; <br>&gt; Proposed new rules for initialization:<br>&gt; <br>&gt; required initializers: must call super (unless base class)<br>&gt; convenience initializers: must assign to self via a required initializer<br>&gt; <br>&gt; I think this also would help with the confusion of why convenience methods can’t call super, but required ones can, since now convenience methods can’t chain to any initializers directly. Thoughts from others?<br>&gt; <br>&gt;&gt; On Dec 7, 2015, at 1:33 PM, J. Cheyo Jimenez via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; How about something like this? <br>&gt;&gt; <br>&gt;&gt; let result = if bool return 1 else 2<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Monday, December 7, 2015, Cameron Knight via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; Why not use a keyword? What if, the keyword &#39;returning&#39; (or something like that) was used to specify the control flow behavior.<br>&gt;&gt; <br>&gt;&gt; // Replaces ternary operator<br>&gt;&gt; let paint.color = returning if door.color == .Red { .Black } else { door.color }<br>&gt;&gt; <br>&gt;&gt; // Supports additional conditions<br>&gt;&gt; let paint.finish = returning switch paint.color {<br>&gt;&gt; 	case .Black:<br>&gt;&gt; 		.Matte<br>&gt;&gt; 	case .White:<br>&gt;&gt; 		.Eggshell<br>&gt;&gt; 	default:<br>&gt;&gt; 		.Gloss<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; // Removes ambiguity of single statement behavior<br>&gt;&gt; let ages: [Int] = people.map returning { $0.age }<br>&gt;&gt; <br>&gt;&gt; // Perhaps overreaching a bit<br>&gt;&gt; let label = returning UILabel(frame: CGRect.zero) {<br>&gt;&gt; 	.text = &quot;Hello World&quot;<br>&gt;&gt; 	.color = UIColor.red<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; I think it adds clarity without too much syntax bloat. I haven&#39;t thought out all the corner cases though, so maybe I&#39;m missing something obvious.<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 6, 2015, at 4:56 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 6, 2015, at 12:17 PM, Per Melin &lt;p at greendale.se &lt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Sat, Dec 5, 2015 at 7:15 PM, Chris Lattner &lt;clattner at apple.com &lt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; Further, it is important to consider whether the code written using this will actually be *better* than the code written with these things as statements.  For example, the “switch” blocks tend to be very large, and turning them into expressions encourages additional indentation.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If you give functions implicit return at the same time – as in Haskell, Erlang, Scala, Rust, Ruby, Lisp/Scheme/Clojure, etc –  there would be no need for additional indentation half of the time.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This isn’t something that I’m personally interested in.  I think that it is *feature* of swift that statements an declarations start with keywords.  This greatly simplifies the grammar in various ways, and allows declmodifiers to be introduced without taking keywords space.  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; For example, relevant to this proposal, if/when we support “tail return foo()&quot; for example, you don’t want to take “tail” as a keyword to make “tail foo()” work.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Not even Slava Pestov would factor Swift that aggressively.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Underestimating Slava is not a good idea! :-)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/bf9b1590/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
