<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4a300fb6ff17dc07df9be5e863e0c98a?s=50"></div><header><strong>FlatMap and Casting</strong> from <string>Nate Birkholz</string> &lt;nbirkholz at gmail.com&gt;<p>April 21, 2016 at 12:00:00pm</p></header><div class="content"><p>myView.layer.sublayers returns an array of CALayer objects. Some of my<br>sublayers are CAShapeLayers. I want to act on the CAShapeLayer objects.<br></p><p>Shouldn&#39;t flatMap allow me to conditionally cast CALayers to CAShapeLayers?<br>i.e.<br></p><p>let layers = myView.layer.sublayers.flatMap({ $0 as? CAShapeLayer })<br></p><p>The compiler warns &quot;Cast from &#39;[CALayer]&#39; to unrelated type &#39;CAShapeLayer&#39;<br>always fails&quot;<br></p><p>So it looks like $0 is the array itself.<br></p><p>This works:<br></p><p>let layers = myView.layer.sublayers?.filter({ $0 is CAShapeLayer }).map({<br>$0 as? CAShapeLayer })<br></p><p><br>But I thought FlatMap should do it in a single step.<br></p><p>-- <br>Nate Birkholz<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160421/95678b33/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ec8a60462a511e833c5c4a83b424c958?s=50"></div><header><strong>FlatMap and Casting</strong> from <string>Dennis Weissmann</string> &lt;dennis at dennisweissmann.me&gt;<p>April 21, 2016 at 10:00:00pm</p></header><div class="content"><p>Since sublayers are optional you’re calling the the flatMap function on Optionals, which behaves differently.<br></p><p>let layers = myView.layer.sublayers?.flatMap({ $0 as? CAShapeLayer })		// sublayers?. instead of sublayers.<br></p><p>should fix the problem :)<br></p><p>- Dennis<br></p><p>&gt; On Apr 21, 2016, at 9:53 PM, Nate Birkholz via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; myView.layer.sublayers returns an array of CALayer objects. Some of my sublayers are CAShapeLayers. I want to act on the CAShapeLayer objects.<br>&gt; <br>&gt; Shouldn&#39;t flatMap allow me to conditionally cast CALayers to CAShapeLayers? i.e. <br>&gt; let layers = myView.layer.sublayers.flatMap({ $0 as? CAShapeLayer })<br>&gt; <br>&gt; The compiler warns &quot;Cast from &#39;[CALayer]&#39; to unrelated type &#39;CAShapeLayer&#39; always fails&quot;<br>&gt; <br>&gt; So it looks like $0 is the array itself. <br>&gt; <br>&gt; This works: <br>&gt; let layers = myView.layer.sublayers?.filter({ $0 is CAShapeLayer }).map({ $0 as? CAShapeLayer }) <br>&gt; <br>&gt; But I thought FlatMap should do it in a single step.<br>&gt; <br>&gt; -- <br>&gt; Nate Birkholz<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160421/e3b6c052/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4a300fb6ff17dc07df9be5e863e0c98a?s=50"></div><header><strong>FlatMap and Casting</strong> from <string>Nate Birkholz</string> &lt;nbirkholz at gmail.com&gt;<p>April 21, 2016 at 01:00:00pm</p></header><div class="content"><p>I would swear I had marked the optional initially with the same result, but<br>it works, so apparently I didn&#39;t!<br></p><p>On Thu, Apr 21, 2016 at 1:49 PM, Dennis Weissmann &lt;dennis at dennisweissmann.me<br>&gt; wrote:<br></p><p>&gt; Since sublayers are optional you’re calling the the flatMap function on<br>&gt; Optionals, which behaves differently.<br>&gt;<br>&gt; let layers = myView.layer.sublayers?.flatMap({ $0 as? CAShapeLayer }) //<br>&gt; sublayers?. instead of sublayers.<br>&gt;<br>&gt; should fix the problem :)<br>&gt;<br>&gt; - Dennis<br>&gt;<br>&gt; On Apr 21, 2016, at 9:53 PM, Nate Birkholz via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; myView.layer.sublayers returns an array of CALayer objects. Some of my<br>&gt; sublayers are CAShapeLayers. I want to act on the CAShapeLayer objects.<br>&gt;<br>&gt; Shouldn&#39;t flatMap allow me to conditionally cast CALayers to<br>&gt; CAShapeLayers? i.e.<br>&gt;<br>&gt; let layers = myView.layer.sublayers.flatMap({ $0 as? CAShapeLayer })<br>&gt;<br>&gt; The compiler warns &quot;Cast from &#39;[CALayer]&#39; to unrelated type &#39;CAShapeLayer&#39;<br>&gt; always fails&quot;<br>&gt;<br>&gt; So it looks like $0 is the array itself.<br>&gt;<br>&gt; This works:<br>&gt;<br>&gt; let layers = myView.layer.sublayers?.filter({ $0 is CAShapeLayer }).map({<br>&gt; $0 as? CAShapeLayer })<br>&gt;<br>&gt;<br>&gt; But I thought FlatMap should do it in a single step.<br>&gt;<br>&gt; --<br>&gt; Nate Birkholz<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>&gt;<br></p><p><br>-- <br>Nate Birkholz<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160421/4ebf1686/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
