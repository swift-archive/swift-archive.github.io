<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0a299ea776456e5b490c6af93682926?s=50"></div><header><strong>Defer with local variable&#39;s state</strong> from <string>Sebastian Hagedorn</string> &lt;sebastian at iosphere.de&gt;<p>August 11, 2016 at 04:00:00pm</p></header><div class="content"><p>We often write code that returns early, but has to make sure a bit of code (e.g., a completion handler) is always called whenever we return, which seems like a great use case for defer. I started to write this:<br></p><p>func execute(with completion: ((Bool) -&gt; Void)?) {<br>	var success = false<br>	defer {<br>		// should always execute with the current state of success at that time<br>		completion?(success)<br>	}<br></p><p>	guard … else {<br>		// completion is expected to be executed with false<br>		return<br>	}<br></p><p>	success = true<br></p><p>	// completion is expected to be executed with true<br>}<br></p><p>However, it seems that defer copies the state of success, which means any update to the variable is not respected, and the completion block is always called with false.<br></p><p>Is there a way to make this work? I could image to call a function within the defer block that evaluates the success (e.g., depending on the state of an instance variable), but using a local variable seems to encapsulate this a lot better.<br></p><p>Thanks for reading and any advice in advance.<br>Sebastian<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Defer with local variable&#39;s state</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>August 11, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Aug 11, 2016, at 7:16 AM, Sebastian Hagedorn via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; We often write code that returns early, but has to make sure a bit of code (e.g., a completion handler) is always called whenever we return, which seems like a great use case for defer. I started to write this:<br>&gt; <br>&gt; func execute(with completion: ((Bool) -&gt; Void)?) {<br>&gt; 	var success = false<br>&gt; 	defer {<br>&gt; 		// should always execute with the current state of success at that time<br>&gt; 		completion?(success)<br>&gt; 	}<br>&gt; <br>&gt; 	guard … else {<br>&gt; 		// completion is expected to be executed with false<br>&gt; 		return<br>&gt; 	}<br>&gt; <br>&gt; 	success = true<br>&gt; <br>&gt; 	// completion is expected to be executed with true<br>&gt; }<br>&gt; <br>&gt; However, it seems that defer copies the state of success, which means any update to the variable is not respected, and the completion block is always called with false.<br>&gt; <br>&gt; Is there a way to make this work? I could image to call a function within the defer block that evaluates the success (e.g., depending on the state of an instance variable), but using a local variable seems to encapsulate this a lot better.<br></p><p>This is a bug. Defer should track updates of the variable. Would you mind filing this at bugs.swift.org? Do you happen to know whether it reproduces only in debug or release builds, or both?<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0a299ea776456e5b490c6af93682926?s=50"></div><header><strong>Defer with local variable&#39;s state</strong> from <string>Sebastian Hagedorn</string> &lt;sebastian at iosphere.de&gt;<p>August 11, 2016 at 05:00:00pm</p></header><div class="content"><p>My bad. After double-checking my code, I realized that some branches were dispatching their work, which of course breaks that model. Sorry, and thanks for clarification that this is how it should works.<br></p><p><br>&gt; On 11 Aug 2016, at 17:39, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Aug 11, 2016, at 7:16 AM, Sebastian Hagedorn via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; We often write code that returns early, but has to make sure a bit of code (e.g., a completion handler) is always called whenever we return, which seems like a great use case for defer. I started to write this:<br>&gt;&gt; <br>&gt;&gt; func execute(with completion: ((Bool) -&gt; Void)?) {<br>&gt;&gt; 	var success = false<br>&gt;&gt; 	defer {<br>&gt;&gt; 		// should always execute with the current state of success at that time<br>&gt;&gt; 		completion?(success)<br>&gt;&gt; 	}<br>&gt;&gt; <br>&gt;&gt; 	guard … else {<br>&gt;&gt; 		// completion is expected to be executed with false<br>&gt;&gt; 		return<br>&gt;&gt; 	}<br>&gt;&gt; <br>&gt;&gt; 	success = true<br>&gt;&gt; <br>&gt;&gt; 	// completion is expected to be executed with true<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; However, it seems that defer copies the state of success, which means any update to the variable is not respected, and the completion block is always called with false.<br>&gt;&gt; <br>&gt;&gt; Is there a way to make this work? I could image to call a function within the defer block that evaluates the success (e.g., depending on the state of an instance variable), but using a local variable seems to encapsulate this a lot better.<br>&gt; <br>&gt; This is a bug. Defer should track updates of the variable. Would you mind filing this at bugs.swift.org? Do you happen to know whether it reproduces only in debug or release builds, or both?<br>&gt; <br>&gt; -Joe<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
