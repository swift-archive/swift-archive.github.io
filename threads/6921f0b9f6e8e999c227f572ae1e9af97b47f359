<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Trouble constraining a generic type in an extension</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>April 12, 2016 at 09:00:00am</p></header><div class="content"><p>I’ve got a simple generic struct that wraps an instance of its parameter type.<br></p><p>public struct check&lt;T&gt; {<br>    let actual: T<br>    public init(_ a: T) {actual = a}<br>    ...<br></p><p>Now I want to add a method that only works with a specific type, Bool:<br>    public func isTrue()    {XCTAssertTrue(actual)}<br></p><p>As I’d expect, the compiler doesn’t allow this: “Cannot convert value of type ’T’ to expected argument type ‘Bool’”.<br>So I’m trying to put this method in an extension that constrains T:<br></p><p>public extension check&lt;Bool&gt; {<br>    public func isTrue()    {XCTAssertTrue(actual)}<br>}<br></p><p>This fails with &quot;Constrained extension must be declared on the unspecialized generic type &#39;check&#39; with constraints specified by a &#39;where’ clause”. OK, so I add a ‘where’ clause:<br></p><p>public extension check where T: Bool {<br>    public func isTrue()    {XCTAssertTrue(actual)}<br>}<br></p><p>This produces the error &quot;type &#39;T&#39; constrained to non-protocol type ‘Bool’”. This confuses me — why is constraining to a non-protocol type an error? The Swift Programming Language says “the ‘where’ clause … can express the constraints that a generic type T inherits from a class C”.<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160412/6921f359/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Trouble constraining a generic type in an extension</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>April 12, 2016 at 03:00:00pm</p></header><div class="content"><p>Bool isn’t a class (or protocol), so nothing can inherit from it.<br></p><p>Until Swift gains the ability to extend generic types where their parameters are *equal* to concrete types, as opposed to where they *inherit from or conform to* something, I think the best you can do is this:<br>public extension check where T: BooleanType {<br>    public func isTrue() { XCTAssertTrue(actual.boolValue) }<br>}<br></p><p>I *think* the feature you’re trying to use is on the todo list for Swift 3, but the last time I said that, I was completely wrong. The swift-evolution mailing list probably has more information.<br></p><p>Anyway, I hope that helps.<br></p><p>- Dave Sweeris<br></p><p>&gt; On Apr 12, 2016, at 11:11 AM, Jens Alfke via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; I’ve got a simple generic struct that wraps an instance of its parameter type.<br>&gt; <br>&gt; public struct check&lt;T&gt; {<br>&gt;     let actual: T<br>&gt;     public init(_ a: T) {actual = a}<br>&gt;     ...<br>&gt; <br>&gt; Now I want to add a method that only works with a specific type, Bool:<br>&gt;     public func isTrue()    {XCTAssertTrue(actual)}<br>&gt; <br>&gt; As I’d expect, the compiler doesn’t allow this: “Cannot convert value of type ’T’ to expected argument type ‘Bool’”.<br>&gt; So I’m trying to put this method in an extension that constrains T:<br>&gt; <br>&gt; public extension check&lt;Bool&gt; {<br>&gt;     public func isTrue()    {XCTAssertTrue(actual)}<br>&gt; }<br>&gt; <br>&gt; This fails with &quot;Constrained extension must be declared on the unspecialized generic type &#39;check&#39; with constraints specified by a &#39;where’ clause”. OK, so I add a ‘where’ clause:<br>&gt; <br>&gt; public extension check where T: Bool {<br>&gt;     public func isTrue()    {XCTAssertTrue(actual)}<br>&gt; }<br>&gt; <br>&gt; This produces the error &quot;type &#39;T&#39; constrained to non-protocol type ‘Bool’”. This confuses me — why is constraining to a non-protocol type an error? The Swift Programming Language says “the ‘where’ clause … can express the constraints that a generic type T inherits from a class C”.<br>&gt; <br>&gt; —Jens<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160412/5037af81/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Trouble constraining a generic type in an extension</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>April 12, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; I *think* the feature you’re trying to use is on the todo list for Swift 3, but the last time I said that, I was completely wrong. The swift-evolution mailing list probably has more information.<br></p><p>I think it&#39;s on the list of things they&#39;d like to do to generics in the future, but it&#39;s a very long list and they might not get to that particular one.<br></p><p>In short, though, my understanding is that there is no principled reason for this limitation; it simply isn&#39;t supported yet.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
