<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cf989483c6821ab6d44a4701bf8a907a?s=50"></div><header><strong>What are the various causes of &quot;shift amount is greater than or equal to type size in bits&quot;</strong> from <string>Joel Gerber</string> &lt;joel at grrbrr.ca&gt;<p>February 13, 2016 at 02:00:00pm</p></header><div class="content"><p>I have code that is giving the &quot;shift amount is greater than or equal to type size in bits” error when built in release mode but doesn’t in debug mode. I’m trying to understand all of the various causes of this error in order to better understand what’s happening.<br></p><p>Here’s a dumbed down version of the code that illustrates the issue:<br></p><p>/// Skeleton for actual UInt128 structure.<br>struct UInt128 {<br>  let value: (upperBits: UInt64, lowerBits: UInt64) = (0, 0)<br>}<br>/// Shifts `lhs`&#39; bits left by `rhs` bits and returns the result.<br>public func &lt;&lt;(lhs: UInt128, rhs: UInt128) -&gt; UInt128 {<br>    if rhs.value.upperBits &gt; 0 || rhs.value.lowerBits &gt; 128 {<br>        return UInt128(0)<br>    }<br>    switch rhs {<br>    case 0: return lhs // Do nothing shift.<br>    case 1...63:<br>        let upperBits = (lhs.value.upperBits &lt;&lt; rhs.value.lowerBits) + (lhs.value.lowerBits &gt;&gt; (64 - rhs.value.lowerBits))<br>        let lowerBits = lhs.value.lowerBits &lt;&lt; rhs.value.lowerBits<br>        return UInt128(upperBits: upperBits, lowerBits: lowerBits)<br>    case 64:<br>        // Shift 64 means move lower bits to upper bits.<br>        return UInt128(upperBits: lhs.value.lowerBits, lowerBits: 0)<br>    case 65...127:<br>        // This causes a &quot;shift amount is greater than or equal to type size in bits&quot; error<br>        // on release build but not debug build.<br>        let upperBits = lhs.value.lowerBits &lt;&lt; (rhs.value.lowerBits - 64)<br>        return UInt128(upperBits: upperBits, lowerBits: 0)<br>    default: return UInt128(0)<br>    }<br>}<br></p><p>I’ve walked through the Swift code, and while I see some things that might be flagging this error, I’m having a hard time understanding what the underlying causes are.<br></p><p>Joel Gerber<br>joel at grrbrr.ca<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>What are the various causes of &quot;shift amount is greater than or equal to type size in bits&quot;</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>February 13, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Feb 13, 2016, at 11:11 AM, Joel Gerber via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt;    switch rhs {<br>…<br>&gt;    case 65...127:<br>&gt;        // This causes a &quot;shift amount is greater than or equal to type size in bits&quot; error<br>&gt;        // on release build but not debug build.<br>&gt;        let upperBits = lhs.value.lowerBits &lt;&lt; (rhs.value.lowerBits - 64)<br></p><p>I suspect the problem is that you’re switching on `rhs` instead of `rhs.value.lowerBits`. You haven’t shown the conversion method that lets your struct be compared with an integer literal, but I’m guessing that the compiler isn’t smart enough to deduce that when rhs&lt;127, then rhs.value.lowerBits must also be &lt;127.<br></p><p>As for why this only happens in release builds, it’s probably because only release builds perform the control-flow analysis that’s necessary for detecting these types of errors when the RHS of `&lt;&lt;` isn’t a constant.<br></p><p>—Jens<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cf989483c6821ab6d44a4701bf8a907a?s=50"></div><header><strong>What are the various causes of &quot;shift amount is greater than or equal to type size in bits&quot;</strong> from <string>Joel Gerber</string> &lt;joel at grrbrr.ca&gt;<p>February 13, 2016 at 02:00:00pm</p></header><div class="content"><p>This whole library is at https://github.com/Jitsusama/UInt128. I tried simplifying the library down to the bare necessities and I couldn’t replicate the issue, so I’m guessing that it does have to do with integer literals somehow now that you mention it.<br></p><p>Here is my integerLiteralConvertible implementation:<br></p><p>extension UInt128: IntegerLiteralConvertible {<br>    public init(integerLiteral value: IntegerLiteralType) {<br>        self.init()<br>        self.value.lowerBits = UInt64(value)<br>    }<br>    public init(_builtinIntegerLiteral value: _MaxBuiltinIntegerType) {<br>        self.init()<br>        self.value.lowerBits = UInt64(_builtinIntegerLiteral: value)<br>    }<br>}<br></p><p>Joel Gerber<br>joel at grrbrr.ca<br></p><p><br></p><p>&gt; On Feb 13, 2016, at 2:47 PM, Jens Alfke &lt;jens at mooseyard.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 13, 2016, at 11:11 AM, Joel Gerber via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;   switch rhs {<br>&gt; …<br>&gt;&gt;   case 65...127:<br>&gt;&gt;       // This causes a &quot;shift amount is greater than or equal to type size in bits&quot; error<br>&gt;&gt;       // on release build but not debug build.<br>&gt;&gt;       let upperBits = lhs.value.lowerBits &lt;&lt; (rhs.value.lowerBits - 64)<br>&gt; <br>&gt; I suspect the problem is that you’re switching on `rhs` instead of `rhs.value.lowerBits`. You haven’t shown the conversion method that lets your struct be compared with an integer literal, but I’m guessing that the compiler isn’t smart enough to deduce that when rhs&lt;127, then rhs.value.lowerBits must also be &lt;127.<br>&gt; <br>&gt; As for why this only happens in release builds, it’s probably because only release builds perform the control-flow analysis that’s necessary for detecting these types of errors when the RHS of `&lt;&lt;` isn’t a constant.<br>&gt; <br>&gt; —Jens<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cf989483c6821ab6d44a4701bf8a907a?s=50"></div><header><strong>What are the various causes of &quot;shift amount is greater than or equal to type size in bits&quot;</strong> from <string>Joel Gerber</string> &lt;joel at grrbrr.ca&gt;<p>February 13, 2016 at 03:00:00pm</p></header><div class="content"><p>Taking what you said in mind, I switched “let upperBits = lhs.value.lowerBits &lt;&lt; (rhs.value.lowerBits - 64)” to &quot;let upperBits = lhs.value.lowerBits &lt;&lt; UInt64(rhs - 64)” and that compile error goes away. I wonder if Swift is just having an issue with dealing with the conversion when it involves a tuple.<br></p><p>Speaking of which, there is one other circumstance where a release build gives the same error, in my IntegerLiteralConvertible initializer!:<br></p><p>extension UInt128: IntegerLiteralConvertible {<br>    public init(integerLiteral value: IntegerLiteralType) {<br>        self.init()<br>        self.value.lowerBits = UInt64(value)<br>    }<br>    public init(_builtinIntegerLiteral value: _MaxBuiltinIntegerType) {<br>        self.init()<br>        // Gives “Shift amount is greater than or equal to type size in bits” error.<br>        self.value.lowerBits = UInt64(_builtinIntegerLiteral: value)<br>    }<br>}<br></p><p>I broke down my init(_bulterinIntegerLiteral:) function like so and it gave the same error:<br></p><p>extension UInt128: IntegerLiteralConvertible {<br>    public init(integerLiteral value: IntegerLiteralType) {<br>        self.init()<br>        self.value.lowerBits = UInt64(value)<br>    }<br>    public init(_builtinIntegerLiteral value: _MaxBuiltinIntegerType) {<br>        self.init()<br>        // Error happens on the below line.<br>        let temporaryHolder = UInt64(_builtinIntegerLiteral: value)<br>        self.value.lowerBits = temporaryHolder<br>    }<br>}<br></p><p>In this case, temporaryHolder seems to be resolving to a UInt64 type, so I have no clue why the compiler would have a problem with it.<br></p><p>Joel Gerber<br>joel at grrbrr.ca<br></p><p><br></p><p>&gt; On Feb 13, 2016, at 2:47 PM, Jens Alfke &lt;jens at mooseyard.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 13, 2016, at 11:11 AM, Joel Gerber via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;   switch rhs {<br>&gt; …<br>&gt;&gt;   case 65...127:<br>&gt;&gt;       // This causes a &quot;shift amount is greater than or equal to type size in bits&quot; error<br>&gt;&gt;       // on release build but not debug build.<br>&gt;&gt;       let upperBits = lhs.value.lowerBits &lt;&lt; (rhs.value.lowerBits - 64)<br>&gt; <br>&gt; I suspect the problem is that you’re switching on `rhs` instead of `rhs.value.lowerBits`. You haven’t shown the conversion method that lets your struct be compared with an integer literal, but I’m guessing that the compiler isn’t smart enough to deduce that when rhs&lt;127, then rhs.value.lowerBits must also be &lt;127.<br>&gt; <br>&gt; As for why this only happens in release builds, it’s probably because only release builds perform the control-flow analysis that’s necessary for detecting these types of errors when the RHS of `&lt;&lt;` isn’t a constant.<br>&gt; <br>&gt; —Jens<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>What are the various causes of &quot;shift amount is greater than or equal to type size in bits&quot;</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>February 15, 2016 at 10:00:00am</p></header><div class="content"><p>If you&#39;re seeing different diagnostic behavior in debug and release modes, that&#39;s a bug. If you have time, please file this on bugs.swift.org for us to take a look. Thanks!<br></p><p>-Joe<br></p><p>&gt; On Feb 13, 2016, at 11:11 AM, Joel Gerber via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; I have code that is giving the &quot;shift amount is greater than or equal to type size in bits” error when built in release mode but doesn’t in debug mode. I’m trying to understand all of the various causes of this error in order to better understand what’s happening.<br>&gt; <br>&gt; Here’s a dumbed down version of the code that illustrates the issue:<br>&gt; <br>&gt; /// Skeleton for actual UInt128 structure.<br>&gt; struct UInt128 {<br>&gt;  let value: (upperBits: UInt64, lowerBits: UInt64) = (0, 0)<br>&gt; }<br>&gt; /// Shifts `lhs`&#39; bits left by `rhs` bits and returns the result.<br>&gt; public func &lt;&lt;(lhs: UInt128, rhs: UInt128) -&gt; UInt128 {<br>&gt;    if rhs.value.upperBits &gt; 0 || rhs.value.lowerBits &gt; 128 {<br>&gt;        return UInt128(0)<br>&gt;    }<br>&gt;    switch rhs {<br>&gt;    case 0: return lhs // Do nothing shift.<br>&gt;    case 1...63:<br>&gt;        let upperBits = (lhs.value.upperBits &lt;&lt; rhs.value.lowerBits) + (lhs.value.lowerBits &gt;&gt; (64 - rhs.value.lowerBits))<br>&gt;        let lowerBits = lhs.value.lowerBits &lt;&lt; rhs.value.lowerBits<br>&gt;        return UInt128(upperBits: upperBits, lowerBits: lowerBits)<br>&gt;    case 64:<br>&gt;        // Shift 64 means move lower bits to upper bits.<br>&gt;        return UInt128(upperBits: lhs.value.lowerBits, lowerBits: 0)<br>&gt;    case 65...127:<br>&gt;        // This causes a &quot;shift amount is greater than or equal to type size in bits&quot; error<br>&gt;        // on release build but not debug build.<br>&gt;        let upperBits = lhs.value.lowerBits &lt;&lt; (rhs.value.lowerBits - 64)<br>&gt;        return UInt128(upperBits: upperBits, lowerBits: 0)<br>&gt;    default: return UInt128(0)<br>&gt;    }<br>&gt; }<br>&gt; <br>&gt; I’ve walked through the Swift code, and while I see some things that might be flagging this error, I’m having a hard time understanding what the underlying causes are.<br>&gt; <br>&gt; Joel Gerber<br>&gt; joel at grrbrr.ca<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cf989483c6821ab6d44a4701bf8a907a?s=50"></div><header><strong>What are the various causes of &quot;shift amount is greater than or equal to type size in bits&quot;</strong> from <string>Joel Gerber</string> &lt;joel at grrbrr.ca&gt;<p>February 15, 2016 at 03:00:00pm</p></header><div class="content"><p>I did a bugreport.apple.com one (26448395). I just created another on bugs.swift.org (SR-743). And yes, in debug mode, no error at all, release mode, error.<br></p><p>Joel Gerber<br>joel at grrbrr.ca<br></p><p><br></p><p>&gt; On Feb 15, 2016, at 1:17 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt; If you&#39;re seeing different diagnostic behavior in debug and release modes, that&#39;s a bug. If you have time, please file this on bugs.swift.org for us to take a look. Thanks!<br>&gt; <br>&gt; -Joe<br>&gt; <br>&gt;&gt; On Feb 13, 2016, at 11:11 AM, Joel Gerber via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I have code that is giving the &quot;shift amount is greater than or equal to type size in bits” error when built in release mode but doesn’t in debug mode. I’m trying to understand all of the various causes of this error in order to better understand what’s happening.<br>&gt;&gt; <br>&gt;&gt; Here’s a dumbed down version of the code that illustrates the issue:<br>&gt;&gt; <br>&gt;&gt; /// Skeleton for actual UInt128 structure.<br>&gt;&gt; struct UInt128 {<br>&gt;&gt; let value: (upperBits: UInt64, lowerBits: UInt64) = (0, 0)<br>&gt;&gt; }<br>&gt;&gt; /// Shifts `lhs`&#39; bits left by `rhs` bits and returns the result.<br>&gt;&gt; public func &lt;&lt;(lhs: UInt128, rhs: UInt128) -&gt; UInt128 {<br>&gt;&gt;   if rhs.value.upperBits &gt; 0 || rhs.value.lowerBits &gt; 128 {<br>&gt;&gt;       return UInt128(0)<br>&gt;&gt;   }<br>&gt;&gt;   switch rhs {<br>&gt;&gt;   case 0: return lhs // Do nothing shift.<br>&gt;&gt;   case 1...63:<br>&gt;&gt;       let upperBits = (lhs.value.upperBits &lt;&lt; rhs.value.lowerBits) + (lhs.value.lowerBits &gt;&gt; (64 - rhs.value.lowerBits))<br>&gt;&gt;       let lowerBits = lhs.value.lowerBits &lt;&lt; rhs.value.lowerBits<br>&gt;&gt;       return UInt128(upperBits: upperBits, lowerBits: lowerBits)<br>&gt;&gt;   case 64:<br>&gt;&gt;       // Shift 64 means move lower bits to upper bits.<br>&gt;&gt;       return UInt128(upperBits: lhs.value.lowerBits, lowerBits: 0)<br>&gt;&gt;   case 65...127:<br>&gt;&gt;       // This causes a &quot;shift amount is greater than or equal to type size in bits&quot; error<br>&gt;&gt;       // on release build but not debug build.<br>&gt;&gt;       let upperBits = lhs.value.lowerBits &lt;&lt; (rhs.value.lowerBits - 64)<br>&gt;&gt;       return UInt128(upperBits: upperBits, lowerBits: 0)<br>&gt;&gt;   default: return UInt128(0)<br>&gt;&gt;   }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; I’ve walked through the Swift code, and while I see some things that might be flagging this error, I’m having a hard time understanding what the underlying causes are.<br>&gt;&gt; <br>&gt;&gt; Joel Gerber<br>&gt;&gt; joel at grrbrr.ca<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160215/88d8de6c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>What are the various causes of &quot;shift amount is greater than or equal to type size in bits&quot;</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>February 15, 2016 at 12:00:00pm</p></header><div class="content"><p>Thank you!<br>-Joe<br></p><p>&gt; On Feb 15, 2016, at 12:04 PM, Joel Gerber &lt;joel at grrbrr.ca&gt; wrote:<br>&gt; <br>&gt; I did a bugreport.apple.com &lt;http://bugreport.apple.com/&gt; one (26448395). I just created another on bugs.swift.org &lt;http://bugs.swift.org/&gt; (SR-743). And yes, in debug mode, no error at all, release mode, error.<br>&gt; <br>&gt; Joel Gerber<br>&gt; joel at grrbrr.ca &lt;mailto:joel at grrbrr.ca&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Feb 15, 2016, at 1:17 PM, Joe Groff &lt;jgroff at apple.com &lt;mailto:jgroff at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; If you&#39;re seeing different diagnostic behavior in debug and release modes, that&#39;s a bug. If you have time, please file this on bugs.swift.org &lt;http://bugs.swift.org/&gt; for us to take a look. Thanks!<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 13, 2016, at 11:11 AM, Joel Gerber via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I have code that is giving the &quot;shift amount is greater than or equal to type size in bits” error when built in release mode but doesn’t in debug mode. I’m trying to understand all of the various causes of this error in order to better understand what’s happening.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Here’s a dumbed down version of the code that illustrates the issue:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; /// Skeleton for actual UInt128 structure.<br>&gt;&gt;&gt; struct UInt128 {<br>&gt;&gt;&gt; let value: (upperBits: UInt64, lowerBits: UInt64) = (0, 0)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; /// Shifts `lhs`&#39; bits left by `rhs` bits and returns the result.<br>&gt;&gt;&gt; public func &lt;&lt;(lhs: UInt128, rhs: UInt128) -&gt; UInt128 {<br>&gt;&gt;&gt;   if rhs.value.upperBits &gt; 0 || rhs.value.lowerBits &gt; 128 {<br>&gt;&gt;&gt;       return UInt128(0)<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt;   switch rhs {<br>&gt;&gt;&gt;   case 0: return lhs // Do nothing shift.<br>&gt;&gt;&gt;   case 1...63:<br>&gt;&gt;&gt;       let upperBits = (lhs.value.upperBits &lt;&lt; rhs.value.lowerBits) + (lhs.value.lowerBits &gt;&gt; (64 - rhs.value.lowerBits))<br>&gt;&gt;&gt;       let lowerBits = lhs.value.lowerBits &lt;&lt; rhs.value.lowerBits<br>&gt;&gt;&gt;       return UInt128(upperBits: upperBits, lowerBits: lowerBits)<br>&gt;&gt;&gt;   case 64:<br>&gt;&gt;&gt;       // Shift 64 means move lower bits to upper bits.<br>&gt;&gt;&gt;       return UInt128(upperBits: lhs.value.lowerBits, lowerBits: 0)<br>&gt;&gt;&gt;   case 65...127:<br>&gt;&gt;&gt;       // This causes a &quot;shift amount is greater than or equal to type size in bits&quot; error<br>&gt;&gt;&gt;       // on release build but not debug build.<br>&gt;&gt;&gt;       let upperBits = lhs.value.lowerBits &lt;&lt; (rhs.value.lowerBits - 64)<br>&gt;&gt;&gt;       return UInt128(upperBits: upperBits, lowerBits: 0)<br>&gt;&gt;&gt;   default: return UInt128(0)<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’ve walked through the Swift code, and while I see some things that might be flagging this error, I’m having a hard time understanding what the underlying causes are.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Joel Gerber<br>&gt;&gt;&gt; joel at grrbrr.ca &lt;mailto:joel at grrbrr.ca&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160215/e0e87392/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
