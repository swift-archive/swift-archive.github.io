<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>Delaying the enforcement of &quot;.self&quot; out of Swift 3?</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>June  2, 2016 at 01:00:00pm</p></header><div class="content"><p>Hi all,<br></p><p>While working on some unrelated refactoring, I stumbled across a minor fix that would make use properly enforce “.self” when we want to get the metatype of a named type. For example, the Swift compiler currently (incorrectly) allows<br></p><p>	sizeof(UInt)<br></p><p>which should be<br></p><p>	sizeof(UInt.self)<br></p><p>The fix for this is actually pretty simple (patch attached), but the question is… do we want to fix the problem, if we think that we’ll get SE-0090 that makes “.self” go away?<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0090-remove-dot-self.md<br></p><p>On the one hand, I want to fix the problem:<br></p><p>	* This came out of a desire to make the AST more sane. Essentially, the folding of expressions into TypeExprs—which will go away entirely if/when SE-0090 is implemented—is pulling in the parentheses describing call arguments. Without the fix, we still have weird AST.<br>	* SE-0090 is labeled as “deferred out of Swift 3”, so having the compiler not implement the stated language for an entire release cycle seems really unfortunate.<br></p><p>OTOH, I don’t want to jerk people’s code around, forcing them to add “.self” now only to remove it a year from now (or whenever).<br></p><p>Thoughts?<br></p><p>	- Doug<br></p><p>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: enforce-metatype-self.patch<br>Type: application/octet-stream<br>Size: 6032 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160602/2dae010a/attachment.obj&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Delaying the enforcement of &quot;.self&quot; out of Swift 3?</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June  2, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Jun 2, 2016, at 2:21 PM, Douglas Gregor via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; While working on some unrelated refactoring, I stumbled across a minor fix that would make use properly enforce “.self” when we want to get the metatype of a named type. For example, the Swift compiler currently (incorrectly) allows<br>&gt; <br>&gt; 	sizeof(UInt)<br>&gt; <br>&gt; which should be<br>&gt; <br>&gt; 	sizeof(UInt.self)<br>&gt; <br>&gt; The fix for this is actually pretty simple (patch attached), but the question is… do we want to fix the problem, if we think that we’ll get SE-0090 that makes “.self” go away?<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0090-remove-dot-self.md<br>&gt; <br>&gt; On the one hand, I want to fix the problem:<br>&gt; <br>&gt; 	* This came out of a desire to make the AST more sane. Essentially, the folding of expressions into TypeExprs—which will go away entirely if/when SE-0090 is implemented—is pulling in the parentheses describing call arguments. Without the fix, we still have weird AST.<br>&gt; 	* SE-0090 is labeled as “deferred out of Swift 3”, so having the compiler not implement the stated language for an entire release cycle seems really unfortunate.<br>&gt; <br>&gt; OTOH, I don’t want to jerk people’s code around, forcing them to add “.self” now only to remove it a year from now (or whenever).<br>&gt; <br>&gt; Thoughts?<br></p><p><br>1. You just caused me a bunch of extra work. (*shakes fist*)<br>2. Consistency and correctness are more important than concision.<br>3. If it can be fixed, fix it. (It is a bug.) And THEN change the language using the normal SE evolution process.<br>4. I&#39;d like you to settle this as quickly as possible.<br></p><p>-- E, not happy that she&#39;s answering this way because see point 1<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Delaying the enforcement of &quot;.self&quot; out of Swift 3?</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>June  2, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Jun 2, 2016, at 3:24 PM, Erica Sadun via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; 3. If it can be fixed, fix it. (It is a bug.) And THEN change the language using the normal SE evolution process.<br></p><p>I thought “Deferred out of Swift 3” meant that it was accepted, but there isn’t enough time to get it done. If so, and a bug lets it work anyway, why not undefer it, leave the bug in, and properly implement the change in 3.1? Assuming that the bug doesn’t affect anything else, of course... obviously that’d be bad.<br></p><p>- Dave Sweeris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160602/40bdf83f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>Delaying the enforcement of &quot;.self&quot; out of Swift 3?</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>June  2, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jun 2, 2016, at 1:38 PM, David Sweeris &lt;davesweeris at mac.com&gt; wrote:<br>&gt; <br>&gt;&gt; On Jun 2, 2016, at 3:24 PM, Erica Sadun via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; 3. If it can be fixed, fix it. (It is a bug.) And THEN change the language using the normal SE evolution process.<br>&gt; <br>&gt; I thought “Deferred out of Swift 3” meant that it was accepted, but there isn’t enough time to get it done. <br></p><p>No, “deferred” means we haven’t made a decision. The core team likes the direction of the proposal—we hope it succeeds—but there is nontrivial implementation work to do before it can be reconsidered and (hopefully) approved.<br></p><p>	- Doug<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160602/03129d4d/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Delaying the enforcement of &quot;.self&quot; out of Swift 3?</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>June  2, 2016 at 02:00:00pm</p></header><div class="content"><p>We have a bug for this, https://bugs.swift.org/browse/SR-899. I had pretty much the same reaction you did, which is that it&#39;s definitely a bug but it&#39;s probably not worth changing right now.<br></p><p>Jordan<br></p><p><br>&gt; On Jun 2, 2016, at 13:21, Douglas Gregor via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; While working on some unrelated refactoring, I stumbled across a minor fix that would make use properly enforce “.self” when we want to get the metatype of a named type. For example, the Swift compiler currently (incorrectly) allows<br>&gt; <br>&gt; 	sizeof(UInt)<br>&gt; <br>&gt; which should be<br>&gt; <br>&gt; 	sizeof(UInt.self)<br>&gt; <br>&gt; The fix for this is actually pretty simple (patch attached), but the question is… do we want to fix the problem, if we think that we’ll get SE-0090 that makes “.self” go away?<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0090-remove-dot-self.md<br>&gt; <br>&gt; On the one hand, I want to fix the problem:<br>&gt; <br>&gt; 	* This came out of a desire to make the AST more sane. Essentially, the folding of expressions into TypeExprs—which will go away entirely if/when SE-0090 is implemented—is pulling in the parentheses describing call arguments. Without the fix, we still have weird AST.<br>&gt; 	* SE-0090 is labeled as “deferred out of Swift 3”, so having the compiler not implement the stated language for an entire release cycle seems really unfortunate.<br>&gt; <br>&gt; OTOH, I don’t want to jerk people’s code around, forcing them to add “.self” now only to remove it a year from now (or whenever).<br>&gt; <br>&gt; Thoughts?<br>&gt; <br>&gt; 	- Doug<br>&gt; <br>&gt; &lt;enforce-metatype-self.patch&gt;_______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Delaying the enforcement of &quot;.self&quot; out of Swift 3?</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>June  2, 2016 at 02:00:00pm</p></header><div class="content"><p>As just a user of the language, as much as I hate churn I personally wouldn&#39;t mind seeing this fixed. In this case, I think the laxness can make it harder for developers to form the right mental model of the language; I know I have personally stumbled over this in the past.<br></p><p> - Daniel<br></p><p>&gt; On Jun 2, 2016, at 2:00 PM, Jordan Rose via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; We have a bug for this, https://bugs.swift.org/browse/SR-899. I had pretty much the same reaction you did, which is that it&#39;s definitely a bug but it&#39;s probably not worth changing right now.<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 2, 2016, at 13:21, Douglas Gregor via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi all,<br>&gt;&gt; <br>&gt;&gt; While working on some unrelated refactoring, I stumbled across a minor fix that would make use properly enforce “.self” when we want to get the metatype of a named type. For example, the Swift compiler currently (incorrectly) allows<br>&gt;&gt; <br>&gt;&gt; 	sizeof(UInt)<br>&gt;&gt; <br>&gt;&gt; which should be<br>&gt;&gt; <br>&gt;&gt; 	sizeof(UInt.self)<br>&gt;&gt; <br>&gt;&gt; The fix for this is actually pretty simple (patch attached), but the question is… do we want to fix the problem, if we think that we’ll get SE-0090 that makes “.self” go away?<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0090-remove-dot-self.md<br>&gt;&gt; <br>&gt;&gt; On the one hand, I want to fix the problem:<br>&gt;&gt; <br>&gt;&gt; 	* This came out of a desire to make the AST more sane. Essentially, the folding of expressions into TypeExprs—which will go away entirely if/when SE-0090 is implemented—is pulling in the parentheses describing call arguments. Without the fix, we still have weird AST.<br>&gt;&gt; 	* SE-0090 is labeled as “deferred out of Swift 3”, so having the compiler not implement the stated language for an entire release cycle seems really unfortunate.<br>&gt;&gt; <br>&gt;&gt; OTOH, I don’t want to jerk people’s code around, forcing them to add “.self” now only to remove it a year from now (or whenever).<br>&gt;&gt; <br>&gt;&gt; Thoughts?<br>&gt;&gt; <br>&gt;&gt; 	- Doug<br>&gt;&gt; <br>&gt;&gt; &lt;enforce-metatype-self.patch&gt;_______________________________________________<br>&gt;&gt; swift-dev mailing list<br>&gt;&gt; swift-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Delaying the enforcement of &quot;.self&quot; out of Swift 3?</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>June  5, 2016 at 11:00:00pm</p></header><div class="content"><p>On Thu, Jun 2, 2016 at 2:08 PM, Daniel Dunbar via swift-dev<br>&lt;swift-dev at swift.org&gt; wrote:<br>&gt; As just a user of the language, as much as I hate churn I personally wouldn&#39;t mind seeing this fixed. In this case, I think the laxness can make it harder for developers to form the right mental model of the language; I know I have personally stumbled over this in the past.<br></p><p>Fully agreed.  I would prefer this issue to be fixed.  When I read<br>code affected by it, I&#39;m always thinking &quot;does this code really<br>compile?  is this test accidentally disabled?&quot;<br></p><p>Also, fixing this bug would make &quot;.self&quot; appear in more places, which<br>can affect the decision on the proposal to remove &quot;.self&quot;.  If people<br>don&#39;t see &quot;.self&quot; everywhere where it would eventually appear if the<br>proposal is rejected, their opinion on the proposal might be biased by<br>the code they saw in the wild.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
