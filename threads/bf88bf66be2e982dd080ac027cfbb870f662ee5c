<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/da2902f997f2346924adbb2724d68a9d?s=50"></div><header><strong>Building fully static binaries on Linux</strong> from <string>Simon Evans</string> &lt;si at si.org&gt;<p>September  9, 2016 at 08:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>Ive been looking at SR-648 (producing static binaries using swiftPM) and Ive<br>managed to get a static binary built on Linux/ELF. It may also work on other ELF<br>platforms although Ive not tested them. It doesnt currently apply to COFF or MachO<br></p><p>There are 4 issues:<br></p><p>1. -static-stdlib links in libswiftCore.a as its help text says but nothing<br>   else. To link in all of the other .a files they need to be listed in the<br>   ld command line including libicudata.a which is used by libicu. The list<br>   is: libswiftCore.a, libicui18n.a, libicuuc.a, libicudata.a, libdl.a and  <br>   libpthread.a<br></p><p>2. The clang++ command line needs to be modified to use -static and remove<br>   the -rpath and other dynamic options<br></p><p>3. Some symbols have the weak attribute set and dont get linked in by gold<br>   so a stub is needed just to force the linker to link them, the function<br>   doesnt actually need to be run. I couldnt find a gold option that forced<br>   them to be resolved otherwise<br></p><p>4. Because the binary is static, libdl and the dl functions dlopen, dlsym<br>   etc dont actually work. A patch needs to be applied to swift<br>   (ProtocolConformance.cpp and MetadataLookup.cpp) that use some symbols<br>   set by the linker to access the swift2_protocol_conformances and<br>   swift2_type_metadata sections at startup. These would only be set when<br>   building a static binary and bypass the libdl functions at startup.<br></p><p>The only other issue is that libdl would still be linked in and in future<br>other code that uses dl* to load data etc would fail. So it be may that<br>a minimal replacement of these functions to log an error is used instead<br>of libdl. If this approach looks ok, I&#39;ll start working on a PR that adds<br>a &#39;-static&#39; option to swiftpm to try and resolve SR-648 (for Linux)<br></p><p>Ive done a rough patch for swift/stdlib with some debug fprintf()<br>@ https://gist.github.com/spevans/17d01a687c0648a8adc5021029b6d648<br></p><p><br>Example usage<br></p><p><br>$ cat main.swift<br>print(&quot;hello&quot;)<br></p><p>$ cat main.autolink <br>-Xlinker --defsym=__swift2_protocol_conformances_start=.swift2_protocol_conformances_start<br>-Xlinker --defsym=__swift2_type_metadata_start=.swift2_type_metadata_start<br>static_stub.o<br>-lswiftCore<br>-licui18n<br>-licuuc<br>-licudata<br>-ldl<br>-lpthread<br></p><p>$ cat static_stub.c<br>#include &lt;stdlib.h&gt;     // For NULL<br>#include &lt;bits/pthreadtypes.h&gt;<br></p><p>int pthread_once (pthread_once_t *once_control, void (*init_routine) (void));<br>int pthread_key_create (pthread_key_t *key, void (*destr) (void *));<br>pthread_t pthread_self (void);<br></p><p>void<br>_unused_func_to_force_linking()<br>{<br>        pthread_once(NULL, NULL);<br>        pthread_key_create(NULL, NULL);<br>        pthread_self();<br>}<br></p><p><br># Normal dynamic binary<br></p><p>$ swiftc -O -o main main.swift<br>$ ldd main<br>	linux-vdso.so.1 (0x00007ffdcfcca000)<br>	libswiftCore.so =&gt; /mnt/scratch/spse/builddir/swift-linux-x86_64/lib/swift/linux/x86_64/libswiftCore.so (0x00007fe776a38000)<br>	libstdc++.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007fe77672d000)<br>	libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007fe77642c000)<br>	libgcc_s.so.1 =&gt; /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007fe776216000)<br>	libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fe775e6b000)<br>	libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007fe775c4e000)<br>	libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007fe775a4a000)<br>	libicuuc.so.52 =&gt; /usr/lib/x86_64-linux-gnu/libicuuc.so.52 (0x00007fe7756cc000)<br>	libicui18n.so.52 =&gt; /usr/lib/x86_64-linux-gnu/libicui18n.so.52 (0x00007fe7752ba000)<br>	/lib64/ld-linux-x86-64.so.2 (0x00007fe776e61000)<br>	libicudata.so.52 =&gt; /usr/lib/x86_64-linux-gnu/libicudata.so.52 (0x00007fe773a4d000)<br>$ ./main<br>sectionName: .swift2_protocol_conformances_start sectionDataAddr: 0x7f16a16867f0 *sectionDataAddr: (nil)<br>Dynamic binary, using dl_iterate_phdr<br>hello<br></p><p><br># Dynamic binary with libswiftCore.a linked in<br></p><p>$ swiftc -O -static-stdlib -o main main.swift<br>$ ldd main<br>	linux-vdso.so.1 (0x00007ffeffb1a000)<br>	libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f68dfe62000)<br>	libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f68dfc45000)<br>	libbsd.so.0 =&gt; /lib/x86_64-linux-gnu/libbsd.so.0 (0x00007f68dfa35000)<br>	libicui18n.so.52 =&gt; /usr/lib/x86_64-linux-gnu/libicui18n.so.52 (0x00007f68df623000)<br>	libicuuc.so.52 =&gt; /usr/lib/x86_64-linux-gnu/libicuuc.so.52 (0x00007f68df2a5000)<br>	libstdc++.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007f68def9a000)<br>	libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007f68dec99000)<br>	libgcc_s.so.1 =&gt; /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007f68dea83000)<br>	libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f68de6d8000)<br>	/lib64/ld-linux-x86-64.so.2 (0x00007f68e0066000)<br>	libicudata.so.52 =&gt; /usr/lib/x86_64-linux-gnu/libicudata.so.52 (0x00007f68dce6b000)<br>$ ./main<br>sectionName: .swift2_protocol_conformances_start sectionDataAddr: 0x72d790 *sectionDataAddr: (nil)<br>Dynamic binary, using dl_iterate_phdr<br>hello<br></p><p><br># Static binary<br></p><p>$ swiftc -O -emit-object -o main.o main.swift<br>$ clang -Wall  -O3 -c static_stub.c -o static_stub.o<br>$ clang++ -g -static -fuse-ld=gold -target x86_64-unknown-linux-gnu $LIBDIR/swift/linux/x86_64/swift_begin.o main.o -L $LIBDIR/swift_static/linux -Xlinker -export-dynamic -Xlinker --exclude-libs -Xlinker ALL -Xlinker --no-undefined --target=x86_64-unknown-linux-gnu @main.autolink $LIBDIR/swift/linux/x86_64/swift_end.o -o main<br></p><p>/mnt/scratch/spse/builddir/swift-linux-x86_64/lib/swift_static/linux/libswiftCore.a(ProtocolConformance.cpp.o):/mnt/hgfs/src/swift/swift/stdlib/public/runtime/ProtocolConformance.cpp:function _addImageProtocolConformances(dl_phdr_info*, unsigned long, void*): warning: Using &#39;dlopen&#39; in statically linked applications requires at runtime the shared libraries from the glibc version used for linking<br>/usr/bin/../lib/gcc/x86_64-linux-gnu/4.9/../../../x86_64-linux-gnu/libicuuc.a(putil.ao):function uprv_dl_open_52: warning: Using &#39;dlopen&#39; in statically linked applications requires at runtime the shared libraries from the glibc version used for linking<br>$ ldd main<br>	not a dynamic executable<br>$ ./main<br>sectionName: .swift2_protocol_conformances_start sectionDataAddr: 0x1fb1588 *sectionDataAddr: 0x44f0<br>Static binary Adding blockAddr: 0x1fb1590, blockSize: 17648<br>hello<br>$<br></p><p>- Simon<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
