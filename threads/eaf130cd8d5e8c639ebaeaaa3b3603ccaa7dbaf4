<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0093: Adding a public base property to slices</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>May 19, 2016 at 04:00:00pm</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;SE-0093: Adding a public base property to slices&quot;<br>begins now and runs through May 23. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0093-slice-base.md<br></p><p>Reviews are an important part of the Swift evolution process. All<br>reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review<br>through constructive criticism and contribute to the direction of<br>Swift. When writing your review, here are some questions you might<br>want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br></p><p>	* Is the problem being addressed significant enough to warrant a<br>          change to Swift?<br></p><p>	* Does this proposal fit well with the feel and direction of<br>          Swift?<br></p><p>	* If you have used other languages or libraries with a similar<br>          feature, how do you feel that this proposal compares to those?<br></p><p>	* How much effort did you put into your review? A glance, a<br>          quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>Dave Abrahams<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Review] SE-0093: Adding a public base property to slices</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>May 23, 2016 at 03:00:00pm</p></header><div class="content"><p>On Thu, May 19, 2016, at 04:43 PM, Dave Abrahams via swift-evolution wrote:<br>&gt; 	* What is your evaluation of the proposal?<br></p><p>The motivation sounds reasonable, as does the solution. But it seems odd to expose a property `base` on MutableRandomAccessSlice without exposing it on any other slice type. I&#39;d much rather expose it everywhere, ideally by renaming the `_base` property as suggested in the alternatives section. Stdlib breakage can be handled on a temporary basis by providing the `_base` accessor as a computed property that returns `base`, though of course the goal should be to remove this entirely (or hopefully not have it at all if there&#39;s not too much stdlib breakage). And such a change should still be purely additive from the perspective of third-party code.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a<br>&gt;           change to Swift?<br></p><p>Yes. This is a relatively minor change but it allows for better performance.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of<br>&gt;           Swift?<br></p><p>Yes.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar<br>&gt;           feature, how do you feel that this proposal compares to those?<br></p><p>I can&#39;t think of any languages with this offhand.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a<br>&gt;           quick reading, or an in-depth study?<br></p><p>A quick reading.<br></p><p>-Kevin Ballard<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c53218a6524f4d644b6a75a4441ea631?s=50"></div><header><strong>[Review] SE-0093: Adding a public base property to slices</strong> from <string>Max Moiseev</string> &lt;moiseev at apple.com&gt;<p>May 23, 2016 at 03:00:00pm</p></header><div class="content"><p>Hi Kevin,<br></p><p>Thanks for reviewing this proposal.<br></p><p>It is my poor choice of words to be blamed for the confusion. There is definitely no reason for the new property to only be available for the MutableRandomAccessSlice type. Moreover, since all the slice types are generated with GYB now, it would be more code ;-)<br></p><p>The intention is to add the new property to ALL the slice types.<br></p><p>Regards,<br>Max<br></p><p><br>&gt; On May 23, 2016, at 3:08 PM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Thu, May 19, 2016, at 04:43 PM, Dave Abrahams via swift-evolution wrote:<br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt; <br>&gt; The motivation sounds reasonable, as does the solution. But it seems odd to expose a property `base` on MutableRandomAccessSlice without exposing it on any other slice type. I&#39;d much rather expose it everywhere, ideally by renaming the `_base` property as suggested in the alternatives section. Stdlib breakage can be handled on a temporary basis by providing the `_base` accessor as a computed property that returns `base`, though of course the goal should be to remove this entirely (or hopefully not have it at all if there&#39;s not too much stdlib breakage). And such a change should still be purely additive from the perspective of third-party code.<br>&gt; <br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a<br>&gt;&gt;          change to Swift?<br>&gt; <br>&gt; Yes. This is a relatively minor change but it allows for better performance.<br>&gt; <br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of<br>&gt;&gt;          Swift?<br>&gt; <br>&gt; Yes.<br>&gt; <br>&gt;&gt; 	* If you have used other languages or libraries with a similar<br>&gt;&gt;          feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; I can&#39;t think of any languages with this offhand.<br>&gt; <br>&gt;&gt; 	* How much effort did you put into your review? A glance, a<br>&gt;&gt;          quick reading, or an in-depth study?<br>&gt; <br>&gt; A quick reading.<br>&gt; <br>&gt; -Kevin Ballard<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Review] SE-0093: Adding a public base property to slices</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>May 23, 2016 at 03:00:00pm</p></header><div class="content"><p>On Mon, May 23, 2016, at 03:15 PM, Max Moiseev wrote:<br>&gt; Hi Kevin,<br>&gt; <br>&gt; Thanks for reviewing this proposal.<br>&gt; <br>&gt; It is my poor choice of words to be blamed for the confusion. There is definitely no reason for the new property to only be available for the MutableRandomAccessSlice type. Moreover, since all the slice types are generated with GYB now, it would be more code ;-)<br>&gt; <br>&gt; The intention is to add the new property to ALL the slice types.<br></p><p>Ah hah, you&#39;re right, I missed the following line when reading:<br></p><p>&gt; The same change is applicable to both mutable and immutable slice types.<br></p><p>So +1, though I&#39;m still in favor of renaming `_base` to `base` and then adding a computed `_base` property back if the stdlib breakage is too high.<br></p><p>-Kevin Ballard<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Review] SE-0093: Adding a public base property to slices</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>May 23, 2016 at 05:00:00pm</p></header><div class="content"><p>[Proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0093-slice-base.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0093-slice-base.md%5D&gt;]<br></p><p>Hey, Max. For clarification, this isn’t adding anything to the requirements for slice types, correct? That is, the result type of &#39;subscript(_: Range)&#39; has no additional requirements? (Why I ask: there would be plenty of implementations of slices that may not otherwise need a reference to the original collection.)<br></p><p>I’m vaguely uncomfortable with this because I feel like it’s violating some abstraction or allowing unsafe indexing, but of course that’s no more unsafe than with any other collection.<br></p><p>Jordan<br></p><p><br>&gt; On May 19, 2016, at 16:43, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0093: Adding a public base property to slices&quot;<br>&gt; begins now and runs through May 23. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0093-slice-base.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All<br>&gt; reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction of<br>&gt; Swift. When writing your review, here are some questions you might<br>&gt; want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; <br>&gt; 	* Is the problem being addressed significant enough to warrant a<br>&gt;          change to Swift?<br>&gt; <br>&gt; 	* Does this proposal fit well with the feel and direction of<br>&gt;          Swift?<br>&gt; <br>&gt; 	* If you have used other languages or libraries with a similar<br>&gt;          feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; 	* How much effort did you put into your review? A glance, a<br>&gt;          quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; Dave Abrahams<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160523/ecc32914/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c53218a6524f4d644b6a75a4441ea631?s=50"></div><header><strong>[Review] SE-0093: Adding a public base property to slices</strong> from <string>Max Moiseev</string> &lt;moiseev at apple.com&gt;<p>May 23, 2016 at 05:00:00pm</p></header><div class="content"><p>That is correct, the proposed change only applies to the concrete slice types that are provided by the standard library.<br></p><p>Max<br></p><p><br>&gt; On May 23, 2016, at 5:13 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; [Proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0093-slice-base.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0093-slice-base.md%5D&gt;]<br>&gt; <br>&gt; Hey, Max. For clarification, this isn’t adding anything to the requirements for slice types, correct? That is, the result type of &#39;subscript(_: Range)&#39; has no additional requirements? (Why I ask: there would be plenty of implementations of slices that may not otherwise need a reference to the original collection.)<br>&gt; <br>&gt; I’m vaguely uncomfortable with this because I feel like it’s violating some abstraction or allowing unsafe indexing, but of course that’s no more unsafe than with any other collection.<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; <br>&gt;&gt; On May 19, 2016, at 16:43, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0093: Adding a public base property to slices&quot;<br>&gt;&gt; begins now and runs through May 23. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0093-slice-base.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0093-slice-base.md&gt;<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All<br>&gt;&gt; reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review<br>&gt;&gt; through constructive criticism and contribute to the direction of<br>&gt;&gt; Swift. When writing your review, here are some questions you might<br>&gt;&gt; want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; <br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a<br>&gt;&gt;          change to Swift?<br>&gt;&gt; <br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of<br>&gt;&gt;          Swift?<br>&gt;&gt; <br>&gt;&gt; 	* If you have used other languages or libraries with a similar<br>&gt;&gt;          feature, how do you feel that this proposal compares to those?<br>&gt;&gt; <br>&gt;&gt; 	* How much effort did you put into your review? A glance, a<br>&gt;&gt;          quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; Dave Abrahams<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160523/12dcf180/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
