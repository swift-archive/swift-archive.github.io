<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/268e1090c88890a4ed2387a4d22c661c?s=50"></div><header><strong>[proposal] default func ==(_:_:)</strong> from <string>J.E. Schotsman</string> &lt;jeschot at xs4all.nl&gt;<p>January 30, 2016 at 10:00:00am</p></header><div class="content"><p>I would like some more discussion of the proposal for a default  <br>memberwise equality function for compound types.<br></p><p>It was suggested that some stored properties might be excluded from  <br>the comparison for equality.<br>Also calculated properties might be included (presumably if at least  <br>two stored properties are excluded).<br>Wouldn’t this complicate things too much (requiring two keywords?)<br>If only 9 properties  out of 10 are equatable should equality be based  <br>on that? What about 5 in 10?<br></p><p>Generalisation of the mechanism (applying a protocol to aggregates of  <br>types satisfying the protocol) was suggested using a ‘memberwise’  <br>annotation of the protocol.<br>Even in case of simple protocols like Equatable, SignedIntegerType  <br>this requires a specific implementation.<br>In case of Equatable the memberwise comparison results must be  <br>“anded”, for SignedIntegerType  the IntMax initializer must be  <br>replaced by a tuple.<br>IMHO in case of custom protocols it is unlikely that the compiler can  <br>guess (or be instructed in a simple way to provide) the intended  <br>implementation.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160130/e5cb6c6e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[proposal] default func ==(_:_:)</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>January 30, 2016 at 02:00:00am</p></header><div class="content"><p>I think the memberwise op would have to return an array of results. For ops where it’s obvious how to reduce the array (like ==), it seems like a protocol extension or something could automatically do the “.reduce(true) { $0 &amp;&amp; $1 }” part, and when the final answer isn’t so obvious, you could either provide the args for reduce(), or just call it yourself (maybe… depends on how it’s implemented).<br></p><p>I have absolutely no ideas regarding syntax.<br></p><p>&gt; On Jan 30, 2016, at 01:41, Jan E. Schotsman via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I would like some more discussion of the proposal for a default memberwise equality function for compound types.<br>&gt; <br>&gt; It was suggested that some stored properties might be excluded from the comparison for equality.<br>&gt; Also calculated properties might be included (presumably if at least two stored properties are excluded).<br>&gt; Wouldn’t this complicate things too much (requiring two keywords?)<br>&gt; If only 9 properties  out of 10 are equatable should equality be based on that? What about 5 in 10?<br>&gt; <br>&gt; Generalisation of the mechanism (applying a protocol to aggregates of types satisfying the protocol) was suggested using a ‘memberwise’ annotation of the protocol.<br>&gt; Even in case of simple protocols like Equatable, SignedIntegerType this requires a specific implementation.<br>&gt; In case of Equatable the memberwise comparison results must be “anded”, for SignedIntegerType  the IntMax initializer must be replaced by a tuple.<br>&gt; IMHO in case of custom protocols it is unlikely that the compiler can guess (or be instructed in a simple way to provide) the intended implementation.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>[proposal] default func ==(_:_:)</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>January 31, 2016 at 08:00:00am</p></header><div class="content"><p>+1 on this proposal. It would also be nice to have this on Comparable,<br>@memberwise would be a useful way to do it. I think how member wise could<br>be defined needs work.<br></p><p>Perhaps what Dave suggests would work like this:<br></p><p>extension Equatable {<br>    @memberwise(Equatable, each)<br>    func ==(lhs: Self, rhs: Self) -&gt; Bool<br>        return each.reduce(false, each: &amp;&amp;)<br>    }<br>}<br></p><p>Specifying &#39;each&#39; would be optional, it would default to memberResults, or<br>something equally explicit.<br></p><p>Specifying the protocol is necessary, in case it&#39;s not obvious from the<br>extension.<br></p><p>The function must have the same type, but may take Self for some or all<br>arguments.<br></p><p>On Saturday, 30 January 2016, Dave via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I think the memberwise op would have to return an array of results. For<br>&gt; ops where it’s obvious how to reduce the array (like ==), it seems like a<br>&gt; protocol extension or something could automatically do the “.reduce(true) {<br>&gt; $0 &amp;&amp; $1 }” part, and when the final answer isn’t so obvious, you could<br>&gt; either provide the args for reduce(), or just call it yourself (maybe…<br>&gt; depends on how it’s implemented).<br>&gt;<br>&gt; I have absolutely no ideas regarding syntax.<br>&gt;<br>&gt; &gt; On Jan 30, 2016, at 01:41, Jan E. Schotsman via swift-evolution &lt;<br>&gt; swift-evolution at swift.org &lt;javascript:;&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; I would like some more discussion of the proposal for a default<br>&gt; memberwise equality function for compound types.<br>&gt; &gt;<br>&gt; &gt; It was suggested that some stored properties might be excluded from the<br>&gt; comparison for equality.<br>&gt; &gt; Also calculated properties might be included (presumably if at least two<br>&gt; stored properties are excluded).<br>&gt; &gt; Wouldn’t this complicate things too much (requiring two keywords?)<br>&gt; &gt; If only 9 properties  out of 10 are equatable should equality be based<br>&gt; on that? What about 5 in 10?<br>&gt; &gt;<br>&gt; &gt; Generalisation of the mechanism (applying a protocol to aggregates of<br>&gt; types satisfying the protocol) was suggested using a ‘memberwise’<br>&gt; annotation of the protocol.<br>&gt; &gt; Even in case of simple protocols like Equatable, SignedIntegerType this<br>&gt; requires a specific implementation.<br>&gt; &gt; In case of Equatable the memberwise comparison results must be “anded”,<br>&gt; for SignedIntegerType  the IntMax initializer must be replaced by a tuple.<br>&gt; &gt; IMHO in case of custom protocols it is unlikely that the compiler can<br>&gt; guess (or be instructed in a simple way to provide) the intended<br>&gt; implementation.<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org &lt;javascript:;&gt;<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;javascript:;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160131/030463ae/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
