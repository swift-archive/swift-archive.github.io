<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>When to use argument labels, part DEUX (was: when to use argument labels (a new approach))</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February  5, 2016 at 01:00:00pm</p></header><div class="content"><p>Given all the awesome feedback I&#39;ve gotten on this thread, I went back<br>to the drawing board and came up with something new; I think this one<br>works.  The previously-stated goals still apply:<br></p><p>* describe when and where to use argument labels<br>* require labels in many of the cases people have asked for them<br>* are understandable by humans (this means relatively simple)<br>* preserve important semantics communicated by existing APIs.<br></p><p>Please keep in mind that it is a non-goal to capture considerations we<br>think have a bearing on good names (such as relatedness of parameters):<br>it&#39;s to create simple guidelines that have the right effect in nearly<br>all cases.<br></p><p>A. When arguments can&#39;t be usefully distinguished from one another, none<br>   should have argument labels, e.g. min(x,y), zip(x,y,z).  <br></p><p>B. Otherwise,<br></p><p>  1. At the call site, a first parameter that has no argument label must<br>     form part of a grammatical phrase that starts with the basename, less<br>     any trailing nouns.  <br></p><p>       print(x)<br>       a.contains(b)<br>       a.mergeWith(b)<br>       a.addGestureRecognizer(x)<br>            ^~~~~~~~~~~~~~~~~ trailing noun<br></p><p>     This phrase must have the correct semantic implications, so, e.g.<br></p><p>       a.dismiss(b)           // no, unless a is really dismissing b<br>       a.dismissAnimated(b)   // no, not grammatical<br>       a.dismiss(animated: b) // yes, using a label<br></p><p>  2. If the first argument is part of a prepositional phrase, put the<br>     parenthesis immediately after the preposition. <br></p><p>       a.encodeWith(b)<br>       a.moveFrom(b, to: c)<br></p><p>     Thus, if words are required for any reason between the preposition<br>     and the first argument, they go into the first argument label.<br></p><p>       a.tracksWith(mediaType: b, composer: c)<br>       a.moveTo(x: 22, y: 99)<br></p><p>Notes: <br></p><p>a. I would recommend prepositions other than &quot;with&quot; in nearly all<br>   cases, but that&#39;s not the point of these rules.<br>b. I can understand the aesthetic appeal of<br></p><p>    a.move(from: b, to: c)<br></p><p>   but I believe it is not a clear enough improvement to justify<br>   additional complexity in the guidelines.<br></p><p>Questions:<br></p><p>1. I&#39;m not expecting these guidelines to make everybody optimally happy,<br>   all the time, but they shouldn&#39;t be harmful.  Are there any cases for<br>   which they produce results you couldn&#39;t live with?<br></p><p>2. Are there any cases where you&#39;d be confused about how to apply these<br>   guidelines?<br>                               <br>Thanks in advance for all your valuable input!<br></p><p>P.S. Doug is presently working on generating new importer results, based<br>     on these guidelines, for your perusal.  They should be ready soon.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>When to use argument labels, part DEUX (was: when to use argument labels (a new approach))</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>February  5, 2016 at 10:00:00pm</p></header><div class="content"><p>Hello Dave,<br></p><p>This is really shaping up nicely. Unfortunately, I still have difficulties with:<br></p><p>a.moveFrom(b, to: c)<br></p><p>I understand the need to have simply guidelines, but this just reads wrong to me, especially because b and c have equal importance. This is so much better IMHO:<br></p><p>a.move(from: b, to: c)<br></p><p>But I’m not sure how to write a simple rule to explain this reasoning.<br></p><p>David.<br></p><p>&gt; On 05 Feb 2016, at 22:32, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Given all the awesome feedback I&#39;ve gotten on this thread, I went back<br>&gt; to the drawing board and came up with something new; I think this one<br>&gt; works.  The previously-stated goals still apply:<br>&gt; <br>&gt; * describe when and where to use argument labels<br>&gt; * require labels in many of the cases people have asked for them<br>&gt; * are understandable by humans (this means relatively simple)<br>&gt; * preserve important semantics communicated by existing APIs.<br>&gt; <br>&gt; Please keep in mind that it is a non-goal to capture considerations we<br>&gt; think have a bearing on good names (such as relatedness of parameters):<br>&gt; it&#39;s to create simple guidelines that have the right effect in nearly<br>&gt; all cases.<br>&gt; <br>&gt; A. When arguments can&#39;t be usefully distinguished from one another, none<br>&gt;   should have argument labels, e.g. min(x,y), zip(x,y,z).  <br>&gt; <br>&gt; B. Otherwise,<br>&gt; <br>&gt;  1. At the call site, a first parameter that has no argument label must<br>&gt;     form part of a grammatical phrase that starts with the basename, less<br>&gt;     any trailing nouns.  <br>&gt; <br>&gt;       print(x)<br>&gt;       a.contains(b)<br>&gt;       a.mergeWith(b)<br>&gt;       a.addGestureRecognizer(x)<br>&gt;            ^~~~~~~~~~~~~~~~~ trailing noun<br>&gt; <br>&gt;     This phrase must have the correct semantic implications, so, e.g.<br>&gt; <br>&gt;       a.dismiss(b)           // no, unless a is really dismissing b<br>&gt;       a.dismissAnimated(b)   // no, not grammatical<br>&gt;       a.dismiss(animated: b) // yes, using a label<br>&gt; <br>&gt;  2. If the first argument is part of a prepositional phrase, put the<br>&gt;     parenthesis immediately after the preposition. <br>&gt; <br>&gt;       a.encodeWith(b)<br>&gt;       a.moveFrom(b, to: c)<br>&gt; <br>&gt;     Thus, if words are required for any reason between the preposition<br>&gt;     and the first argument, they go into the first argument label.<br>&gt; <br>&gt;       a.tracksWith(mediaType: b, composer: c)<br>&gt;       a.moveTo(x: 22, y: 99)<br>&gt; <br>&gt; Notes: <br>&gt; <br>&gt; a. I would recommend prepositions other than &quot;with&quot; in nearly all<br>&gt;   cases, but that&#39;s not the point of these rules.<br>&gt; b. I can understand the aesthetic appeal of<br>&gt; <br>&gt;    a.move(from: b, to: c)<br>&gt; <br>&gt;   but I believe it is not a clear enough improvement to justify<br>&gt;   additional complexity in the guidelines.<br>&gt; <br>&gt; Questions:<br>&gt; <br>&gt; 1. I&#39;m not expecting these guidelines to make everybody optimally happy,<br>&gt;   all the time, but they shouldn&#39;t be harmful.  Are there any cases for<br>&gt;   which they produce results you couldn&#39;t live with?<br>&gt; <br>&gt; 2. Are there any cases where you&#39;d be confused about how to apply these<br>&gt;   guidelines?<br>&gt; <br>&gt; Thanks in advance for all your valuable input!<br>&gt; <br>&gt; P.S. Doug is presently working on generating new importer results, based<br>&gt;     on these guidelines, for your perusal.  They should be ready soon.<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>When to use argument labels, part DEUX (was: when to use argument labels (a new approach))</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>February  5, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Feb 5, 2016, at 1:42 PM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Dave,<br>&gt; <br>&gt; This is really shaping up nicely. Unfortunately, I still have difficulties with:<br>&gt; <br>&gt; a.moveFrom(b, to: c)<br>&gt; <br>&gt; I understand the need to have simply guidelines, but this just reads wrong to me, especially because b and c have equal importance. This is so much better IMHO:<br>&gt; <br>&gt; a.move(from: b, to: c)<br>&gt; <br>&gt; But I’m not sure how to write a simple rule to explain this reasoning.<br></p><p>I agree and I prefer `a.move(from: b, to: c)`. However, I think the rule is pretty clear already:<br></p><p>&gt; Rule: If the first argument is part of a prepositional phrase, put the parenthesis immediately after the preposition. <br></p><p>&quot;move from&quot; is the prepositional phrase for the function, so move the &quot;from&quot; label into the base name.<br></p><p>-David<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>When to use argument labels, part DEUX (was: when to use argument labels (a new approach))</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>February  5, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Feb 5, 2016, at 1:32 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Given all the awesome feedback I&#39;ve gotten on this thread, I went back<br>&gt; to the drawing board and came up with something new; I think this one<br>&gt; works.  The previously-stated goals still apply:<br>&gt; <br>&gt; * describe when and where to use argument labels<br>&gt; * require labels in many of the cases people have asked for them<br>&gt; * are understandable by humans (this means relatively simple)<br>&gt; * preserve important semantics communicated by existing APIs.<br>&gt; <br>&gt; Please keep in mind that it is a non-goal to capture considerations we<br>&gt; think have a bearing on good names (such as relatedness of parameters):<br>&gt; it&#39;s to create simple guidelines that have the right effect in nearly<br>&gt; all cases.<br>&gt; <br>&gt; A. When arguments can&#39;t be usefully distinguished from one another, none<br>&gt;   should have argument labels, e.g. min(x,y), zip(x,y,z).  <br></p><p>+1. Thanks for adding this set.<br></p><p>&gt; B. Otherwise,<br>&gt; <br>&gt;  1. At the call site, a first parameter that has no argument label must<br>&gt;     form part of a grammatical phrase that starts with the basename, less<br>&gt;     any trailing nouns.  <br>&gt; <br>&gt;       print(x)<br>&gt;       a.contains(b)<br>&gt;       a.mergeWith(b)<br>&gt;       a.addGestureRecognizer(x)<br>&gt;            ^~~~~~~~~~~~~~~~~ trailing noun<br>&gt; <br>&gt;     This phrase must have the correct semantic implications, so, e.g.<br>&gt; <br>&gt;       a.dismiss(b)           // no, unless a is really dismissing b<br>&gt;       a.dismissAnimated(b)   // no, not grammatical<br>&gt;       a.dismiss(animated: b) // yes, using a label<br></p><p>+1. Seems good.<br></p><p>&gt; <br>&gt;  2. If the first argument is part of a prepositional phrase, put the<br>&gt;     parenthesis immediately after the preposition. <br>&gt; <br>&gt;       a.encodeWith(b)<br>&gt;       a.moveFrom(b, to: c)<br>&gt; <br>&gt;     Thus, if words are required for any reason between the preposition<br>&gt;     and the first argument, they go into the first argument label.<br>&gt; <br>&gt;       a.tracksWith(mediaType: b, composer: c)<br>&gt;       a.moveTo(x: 22, y: 99)<br></p><p>+1. Looks good and I like the distinction, especially between `moveFrom` and `moveTo`.<br></p><p>&gt; Notes: <br>&gt; <br>&gt; a. I would recommend prepositions other than &quot;with&quot; in nearly all<br>&gt;   cases, but that&#39;s not the point of these rules.<br>&gt; b. I can understand the aesthetic appeal of<br>&gt; <br>&gt;    a.move(from: b, to: c)<br>&gt; <br>&gt;   but I believe it is not a clear enough improvement to justify<br>&gt;   additional complexity in the guidelines.<br>&gt; <br>&gt; Questions:<br>&gt; <br>&gt; 1. I&#39;m not expecting these guidelines to make everybody optimally happy,<br>&gt;   all the time, but they shouldn&#39;t be harmful.  Are there any cases for<br>&gt;   which they produce results you couldn&#39;t live with?<br>&gt; <br>&gt; 2. Are there any cases where you&#39;d be confused about how to apply these<br>&gt;   guidelines?<br>&gt; <br>&gt; Thanks in advance for all your valuable input!<br>&gt; <br>&gt; P.S. Doug is presently working on generating new importer results, based<br>&gt;     on these guidelines, for your perusal.  They should be ready soon.<br>&gt; <br>&gt; -- <br>&gt; -Dave<br></p><p>+1 to all of it. Great update.<br></p><p>-David<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>When to use argument labels, part DEUX (was: when to use argument labels (a new approach))</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>February  5, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Feb 5, 2016, at 2:32 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Given all the awesome feedback I&#39;ve gotten on this thread, I went back<br>&gt; to the drawing board and came up with something new; I think this one<br>&gt; works.  The previously-stated goals still apply:<br>&gt; <br>&gt; * describe when and where to use argument labels<br>&gt; * require labels in many of the cases people have asked for them<br>&gt; * are understandable by humans (this means relatively simple)<br>&gt; * preserve important semantics communicated by existing APIs.<br>&gt; <br>&gt; Please keep in mind that it is a non-goal to capture considerations we<br>&gt; think have a bearing on good names (such as relatedness of parameters):<br>&gt; it&#39;s to create simple guidelines that have the right effect in nearly<br>&gt; all cases.<br>&gt; <br>&gt; A. When arguments can&#39;t be usefully distinguished from one another, none<br>&gt;   should have argument labels, e.g. min(x,y), zip(x,y,z).  <br></p><p>Personal bugaboo. Guidance should guide: Avoid argument labels when arguments cannot be usefully distinguished from one another.<br></p><p>&gt; <br>&gt; B. Otherwise,<br>&gt; <br>&gt;  1. At the call site, a first parameter that has no argument label must<br>&gt;     form part of a grammatical phrase that starts with the basename, less<br>&gt;     any trailing nouns.  <br>&gt; <br>&gt;       print(x)<br>&gt;       a.contains(b)<br>&gt;       a.mergeWith(b)<br>&gt;       a.addGestureRecognizer(x)<br>&gt;            ^~~~~~~~~~~~~~~~~ trailing noun<br>&gt; <br>&gt;     This phrase must have the correct semantic implications, so, e.g.<br>&gt; <br>&gt;       a.dismiss(b)           // no, unless a is really dismissing b<br>&gt;       a.dismissAnimated(b)   // no, not grammatical<br>&gt;       a.dismiss(animated: b) // yes, using a label<br></p><p>Skip parameter labels when the first argument completes a grammatically meaningful phrase starting with the base name (and apart from trailing nouns).<br></p><p>&gt;       a.dismiss(b)           // Not unless a is really dismissing some instance of b<br></p><p><br></p><p>&gt; <br>&gt;  2. If the first argument is part of a prepositional phrase, put the<br>&gt;     parenthesis immediately after the preposition. <br>&gt; <br>&gt;       a.encodeWith(b)<br>&gt;       a.moveFrom(b, to: c)<br>&gt; <br>&gt;     Thus, if words are required for any reason between the preposition<br>&gt;     and the first argument, they go into the first argument label.<br>&gt; <br>&gt;       a.tracksWith(mediaType: b, composer: c)<br>&gt;       a.moveTo(x: 22, y: 99)<br></p><p>When using prepositional phrases, use parentheses after the preposition. Place any supporting words into first argument labels.<br></p><p>a.dismissUsing(animation: b)<br>a.tracksOf(mediaType: b, composer: c)<br>a.moveTo(x: 22, y: 99)<br></p><p><br>AGAINST: this worked better with your &quot;creating new instance rule&quot; and should probably be called out as such. I&#39;d like to see the &quot;if it works like an initializer it should be named with initializer label&quot; bits come back.<br></p><p>a.colorWith(red: r, green: g, blue: b, alpha: a)<br></p><p>I think this should probably be:<br></p><p>a.color(red:, green:, blue:, alpha:)<br></p><p>&gt; <br>&gt; Notes: <br>&gt; <br>&gt; a. I would recommend prepositions other than &quot;with&quot; in nearly all<br>&gt;   cases, but that&#39;s not the point of these rules.<br></p><p>When using &quot;with&quot; as your go-to preposition, carefully consider whether other more meaningful prepositions could apply. &quot;With&quot; tends to describe use at a call site rather than method or function semantics.<br></p><p>&gt; b. I can understand the aesthetic appeal of<br>&gt; <br>&gt;    a.move(from: b, to: c)<br>&gt; <br>&gt;   but I believe it is not a clear enough improvement to justify<br>&gt;   additional complexity in the guidelines.<br></p><p>When the natural semantic relationship between the arguments  is stronger than the relationship between the method name and the first argument, use first argument labels, whether the label is a noun or a preposition:<br></p><p>a.move(from: b, to: c)<br>a.login(username: b, password: c)<br></p><p>-- E, always attempting to be helpful, but understanding your frustration at getting this kind of feedback<br></p><p><br>&gt; <br>&gt; Questions:<br>&gt; <br>&gt; 1. I&#39;m not expecting these guidelines to make everybody optimally happy,<br>&gt;   all the time, but they shouldn&#39;t be harmful.  Are there any cases for<br>&gt;   which they produce results you couldn&#39;t live with?<br>&gt; <br>&gt; 2. Are there any cases where you&#39;d be confused about how to apply these<br>&gt;   guidelines?<br>&gt; <br>&gt; Thanks in advance for all your valuable input!<br>&gt; <br>&gt; P.S. Doug is presently working on generating new importer results, based<br>&gt;     on these guidelines, for your perusal.  They should be ready soon.<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>When to use argument labels, part DEUX (was: when to use argument labels (a new approach))</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>February  6, 2016 at 11:00:00am</p></header><div class="content"><p>Great points Erica.<br></p><p>I just wanted to chip in and say thanks to everyone participating.<br>Discussing it thoroughly is important, whether the individual discussions<br>result in changes to the proposal or not. Finding a clear, well reasoned<br>and thoroughly discussed guidelines will have a massive benefit to Swift.<br></p><p>The benefit of clear API guidelines on code quality is likely to have a<br>further reaching and longer lasting effect than even many of the more<br>concrete proposals to clean up syntax and improve the type system.<br></p><p><br>On Sat, Feb 6, 2016 at 11:29 AM, Erica Sadun via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Feb 5, 2016, at 2:32 PM, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; Given all the awesome feedback I&#39;ve gotten on this thread, I went back<br>&gt; &gt; to the drawing board and came up with something new; I think this one<br>&gt; &gt; works.  The previously-stated goals still apply:<br>&gt; &gt;<br>&gt; &gt; * describe when and where to use argument labels<br>&gt; &gt; * require labels in many of the cases people have asked for them<br>&gt; &gt; * are understandable by humans (this means relatively simple)<br>&gt; &gt; * preserve important semantics communicated by existing APIs.<br>&gt; &gt;<br>&gt; &gt; Please keep in mind that it is a non-goal to capture considerations we<br>&gt; &gt; think have a bearing on good names (such as relatedness of parameters):<br>&gt; &gt; it&#39;s to create simple guidelines that have the right effect in nearly<br>&gt; &gt; all cases.<br>&gt; &gt;<br>&gt; &gt; A. When arguments can&#39;t be usefully distinguished from one another, none<br>&gt; &gt;   should have argument labels, e.g. min(x,y), zip(x,y,z).<br>&gt;<br>&gt; Personal bugaboo. Guidance should guide: Avoid argument labels when<br>&gt; arguments cannot be usefully distinguished from one another.<br>&gt;<br>&gt; &gt;<br>&gt; &gt; B. Otherwise,<br>&gt; &gt;<br>&gt; &gt;  1. At the call site, a first parameter that has no argument label must<br>&gt; &gt;     form part of a grammatical phrase that starts with the basename, less<br>&gt; &gt;     any trailing nouns.<br>&gt; &gt;<br>&gt; &gt;       print(x)<br>&gt; &gt;       a.contains(b)<br>&gt; &gt;       a.mergeWith(b)<br>&gt; &gt;       a.addGestureRecognizer(x)<br>&gt; &gt;            ^~~~~~~~~~~~~~~~~ trailing noun<br>&gt; &gt;<br>&gt; &gt;     This phrase must have the correct semantic implications, so, e.g.<br>&gt; &gt;<br>&gt; &gt;       a.dismiss(b)           // no, unless a is really dismissing b<br>&gt; &gt;       a.dismissAnimated(b)   // no, not grammatical<br>&gt; &gt;       a.dismiss(animated: b) // yes, using a label<br>&gt;<br>&gt; Skip parameter labels when the first argument completes a grammatically<br>&gt; meaningful phrase starting with the base name (and apart from trailing<br>&gt; nouns).<br>&gt;<br>&gt; &gt;       a.dismiss(b)           // Not unless a is really dismissing some<br>&gt; instance of b<br>&gt;<br>&gt;<br>&gt;<br>&gt; &gt;<br>&gt; &gt;  2. If the first argument is part of a prepositional phrase, put the<br>&gt; &gt;     parenthesis immediately after the preposition.<br>&gt; &gt;<br>&gt; &gt;       a.encodeWith(b)<br>&gt; &gt;       a.moveFrom(b, to: c)<br>&gt; &gt;<br>&gt; &gt;     Thus, if words are required for any reason between the preposition<br>&gt; &gt;     and the first argument, they go into the first argument label.<br>&gt; &gt;<br>&gt; &gt;       a.tracksWith(mediaType: b, composer: c)<br>&gt; &gt;       a.moveTo(x: 22, y: 99)<br>&gt;<br>&gt; When using prepositional phrases, use parentheses after the preposition.<br>&gt; Place any supporting words into first argument labels.<br>&gt;<br>&gt; a.dismissUsing(animation: b)<br>&gt; a.tracksOf(mediaType: b, composer: c)<br>&gt; a.moveTo(x: 22, y: 99)<br>&gt;<br>&gt;<br>&gt; AGAINST: this worked better with your &quot;creating new instance rule&quot; and<br>&gt; should probably be called out as such. I&#39;d like to see the &quot;if it works<br>&gt; like an initializer it should be named with initializer label&quot; bits come<br>&gt; back.<br>&gt;<br>&gt; a.colorWith(red: r, green: g, blue: b, alpha: a)<br>&gt;<br>&gt; I think this should probably be:<br>&gt;<br>&gt; a.color(red:, green:, blue:, alpha:)<br>&gt;<br>&gt; &gt;<br>&gt; &gt; Notes:<br>&gt; &gt;<br>&gt; &gt; a. I would recommend prepositions other than &quot;with&quot; in nearly all<br>&gt; &gt;   cases, but that&#39;s not the point of these rules.<br>&gt;<br>&gt; When using &quot;with&quot; as your go-to preposition, carefully consider whether<br>&gt; other more meaningful prepositions could apply. &quot;With&quot; tends to describe<br>&gt; use at a call site rather than method or function semantics.<br>&gt;<br>&gt; &gt; b. I can understand the aesthetic appeal of<br>&gt; &gt;<br>&gt; &gt;    a.move(from: b, to: c)<br>&gt; &gt;<br>&gt; &gt;   but I believe it is not a clear enough improvement to justify<br>&gt; &gt;   additional complexity in the guidelines.<br>&gt;<br>&gt; When the natural semantic relationship between the arguments  is stronger<br>&gt; than the relationship between the method name and the first argument, use<br>&gt; first argument labels, whether the label is a noun or a preposition:<br>&gt;<br>&gt; a.move(from: b, to: c)<br>&gt; a.login(username: b, password: c)<br>&gt;<br>&gt; -- E, always attempting to be helpful, but understanding your frustration<br>&gt; at getting this kind of feedback<br>&gt;<br>&gt;<br>&gt; &gt;<br>&gt; &gt; Questions:<br>&gt; &gt;<br>&gt; &gt; 1. I&#39;m not expecting these guidelines to make everybody optimally happy,<br>&gt; &gt;   all the time, but they shouldn&#39;t be harmful.  Are there any cases for<br>&gt; &gt;   which they produce results you couldn&#39;t live with?<br>&gt; &gt;<br>&gt; &gt; 2. Are there any cases where you&#39;d be confused about how to apply these<br>&gt; &gt;   guidelines?<br>&gt; &gt;<br>&gt; &gt; Thanks in advance for all your valuable input!<br>&gt; &gt;<br>&gt; &gt; P.S. Doug is presently working on generating new importer results, based<br>&gt; &gt;     on these guidelines, for your perusal.  They should be ready soon.<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; -Dave<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160206/4b6f0c81/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76eb9711d45c1c9a71c0f24004072a22?s=50"></div><header><strong>When to use argument labels, part DEUX (was: when to use argument labels (a new approach))</strong> from <string>Zach Waldowski</string> &lt;zach at waldowski.me&gt;<p>February  5, 2016 at 09:00:00pm</p></header><div class="content"><p>+1 to all involved. These are great, and tie together the previous<br>revisions well.<br></p><p>I too am not entirely sold on `move(from:to:)`, but I don&#39;t think it&#39;ll<br>kill anyone to write it in their own projects.<br></p><p>Cheers!<br>Zach Waldowski<br>zach at waldowski.me<br></p><p>On Fri, Feb 5, 2016, at 04:32 PM, Dave Abrahams via swift-evolution<br>wrote:<br>&gt; <br>&gt; Given all the awesome feedback I&#39;ve gotten on this thread, I went back<br>&gt; to the drawing board and came up with something new; I think this one<br>&gt; works.  The previously-stated goals still apply:<br>&gt; <br>&gt; * describe when and where to use argument labels<br>&gt; * require labels in many of the cases people have asked for them<br>&gt; * are understandable by humans (this means relatively simple)<br>&gt; * preserve important semantics communicated by existing APIs.<br>&gt; <br>&gt; Please keep in mind that it is a non-goal to capture considerations we<br>&gt; think have a bearing on good names (such as relatedness of parameters):<br>&gt; it&#39;s to create simple guidelines that have the right effect in nearly<br>&gt; all cases.<br>&gt; <br>&gt; A. When arguments can&#39;t be usefully distinguished from one another, none<br>&gt;    should have argument labels, e.g. min(x,y), zip(x,y,z).  <br>&gt; <br>&gt; B. Otherwise,<br>&gt; <br>&gt;   1. At the call site, a first parameter that has no argument label must<br>&gt;      form part of a grammatical phrase that starts with the basename,<br>&gt;      less<br>&gt;      any trailing nouns.  <br>&gt; <br>&gt;        print(x)<br>&gt;        a.contains(b)<br>&gt;        a.mergeWith(b)<br>&gt;        a.addGestureRecognizer(x)<br>&gt;             ^~~~~~~~~~~~~~~~~ trailing noun<br>&gt; <br>&gt;      This phrase must have the correct semantic implications, so, e.g.<br>&gt; <br>&gt;        a.dismiss(b)           // no, unless a is really dismissing b<br>&gt;        a.dismissAnimated(b)   // no, not grammatical<br>&gt;        a.dismiss(animated: b) // yes, using a label<br>&gt; <br>&gt;   2. If the first argument is part of a prepositional phrase, put the<br>&gt;      parenthesis immediately after the preposition. <br>&gt; <br>&gt;        a.encodeWith(b)<br>&gt;        a.moveFrom(b, to: c)<br>&gt; <br>&gt;      Thus, if words are required for any reason between the preposition<br>&gt;      and the first argument, they go into the first argument label.<br>&gt; <br>&gt;        a.tracksWith(mediaType: b, composer: c)<br>&gt;        a.moveTo(x: 22, y: 99)<br>&gt; <br>&gt; Notes: <br>&gt; <br>&gt; a. I would recommend prepositions other than &quot;with&quot; in nearly all<br>&gt;    cases, but that&#39;s not the point of these rules.<br>&gt; b. I can understand the aesthetic appeal of<br>&gt; <br>&gt;     a.move(from: b, to: c)<br>&gt; <br>&gt;    but I believe it is not a clear enough improvement to justify<br>&gt;    additional complexity in the guidelines.<br>&gt; <br>&gt; Questions:<br>&gt; <br>&gt; 1. I&#39;m not expecting these guidelines to make everybody optimally happy,<br>&gt;    all the time, but they shouldn&#39;t be harmful.  Are there any cases for<br>&gt;    which they produce results you couldn&#39;t live with?<br>&gt; <br>&gt; 2. Are there any cases where you&#39;d be confused about how to apply these<br>&gt;    guidelines?<br>&gt;                                <br>&gt; Thanks in advance for all your valuable input!<br>&gt; <br>&gt; P.S. Doug is presently working on generating new importer results, based<br>&gt;      on these guidelines, for your perusal.  They should be ready soon.<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>When to use argument labels, part DEUX (was: when to use argument labels (a new approach))</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>February  5, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On Feb 5, 2016, at 1:32 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Given all the awesome feedback I&#39;ve gotten on this thread, I went back<br>&gt; to the drawing board and came up with something new; I think this one<br>&gt; works.  The previously-stated goals still apply:<br></p><p>&gt; [snip goals]<br></p><p>&gt; P.S. Doug is presently working on generating new importer results, based<br>&gt;     on these guidelines, for your perusal.  They should be ready soon.<br></p><p><br>Here’s a link:<br></p><p>	https://github.com/apple/swift-3-api-guidelines-review/pull/10/files &lt;https://github.com/apple/swift-3-api-guidelines-review/pull/10/files&gt;<br></p><p>Feedback welcome!<br></p><p>	- Doug<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160205/0a55cf21/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ece55ca3fe50dca9c70bcd914acb48a5?s=50"></div><header><strong>When to use argument labels, part DEUX (was: when to use argument labels (a new approach))</strong> from <string>Matthew Judge</string> &lt;matthew.judge at gmail.com&gt;<p>February  6, 2016 at 08:00:00am</p></header><div class="content"><p>Very first method<br></p><p>copyWith(zone: Zone = nil)<br></p><p>can be called as<br></p><p>copyWith()<br></p><p>I&#39;m assuming this is still something we don&#39;t want right?<br></p><p>&gt; On Feb 6, 2016, at 02:16, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 5, 2016, at 1:32 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Given all the awesome feedback I&#39;ve gotten on this thread, I went back<br>&gt;&gt; to the drawing board and came up with something new; I think this one<br>&gt;&gt; works.  The previously-stated goals still apply:<br>&gt; <br>&gt;&gt; [snip goals]<br>&gt; <br>&gt;&gt; P.S. Doug is presently working on generating new importer results, based<br>&gt;&gt;     on these guidelines, for your perusal.  They should be ready soon.<br>&gt; <br>&gt; <br>&gt; Here’s a link:<br>&gt; <br>&gt; 	https://github.com/apple/swift-3-api-guidelines-review/pull/10/files<br>&gt; <br>&gt; Feedback welcome!<br>&gt; <br>&gt; 	- Doug<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160206/56fb9df5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>When to use argument labels, part DEUX (was: when to use argument labels (a new approach))</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>February  6, 2016 at 06:00:00pm</p></header><div class="content"><p>So the preposition should move into the argument label if the argument is optional?<br></p><p>copy(withZone: zone = nil)<br></p><p>-Thorsten <br></p><p><br>&gt; Am 06.02.2016 um 14:45 schrieb Matthew Judge via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; Very first method<br>&gt; <br>&gt; copyWith(zone: Zone = nil)<br>&gt; <br>&gt; can be called as<br>&gt; <br>&gt; copyWith()<br>&gt; <br>&gt; I&#39;m assuming this is still something we don&#39;t want right?<br>&gt; <br>&gt;&gt; On Feb 6, 2016, at 02:16, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 5, 2016, at 1:32 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Given all the awesome feedback I&#39;ve gotten on this thread, I went back<br>&gt;&gt;&gt; to the drawing board and came up with something new; I think this one<br>&gt;&gt;&gt; works.  The previously-stated goals still apply:<br>&gt;&gt; <br>&gt;&gt;&gt; [snip goals]<br>&gt;&gt; <br>&gt;&gt;&gt; P.S. Doug is presently working on generating new importer results, based<br>&gt;&gt;&gt;     on these guidelines, for your perusal.  They should be ready soon.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Here’s a link:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-3-api-guidelines-review/pull/10/files<br>&gt;&gt; <br>&gt;&gt; Feedback welcome!<br>&gt;&gt; <br>&gt;&gt; 	- Doug<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160206/b0d7988b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ece55ca3fe50dca9c70bcd914acb48a5?s=50"></div><header><strong>When to use argument labels, part DEUX (was: when to use argument labels (a new approach))</strong> from <string>Matthew Judge</string> &lt;matthew.judge at gmail.com&gt;<p>February  6, 2016 at 12:00:00pm</p></header><div class="content"><p>If the argument has a default.<br></p><p>&gt; On Feb 6, 2016, at 12:21, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br>&gt; <br>&gt; So the preposition should move into the argument label if the argument is optional?<br>&gt; <br>&gt; copy(withZone: zone = nil)<br>&gt; <br>&gt; -Thorsten <br>&gt; <br>&gt; <br>&gt;&gt; Am 06.02.2016 um 14:45 schrieb Matthew Judge via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt; <br>&gt;&gt; Very first method<br>&gt;&gt; <br>&gt;&gt; copyWith(zone: Zone = nil)<br>&gt;&gt; <br>&gt;&gt; can be called as<br>&gt;&gt; <br>&gt;&gt; copyWith()<br>&gt;&gt; <br>&gt;&gt; I&#39;m assuming this is still something we don&#39;t want right?<br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 6, 2016, at 02:16, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 5, 2016, at 1:32 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Given all the awesome feedback I&#39;ve gotten on this thread, I went back<br>&gt;&gt;&gt;&gt; to the drawing board and came up with something new; I think this one<br>&gt;&gt;&gt;&gt; works.  The previously-stated goals still apply:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; [snip goals]<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; P.S. Doug is presently working on generating new importer results, based<br>&gt;&gt;&gt;&gt;     on these guidelines, for your perusal.  They should be ready soon.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Here’s a link:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-3-api-guidelines-review/pull/10/files<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Feedback welcome!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	- Doug<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160206/fc016feb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>When to use argument labels, part DEUX (was: when to use argument labels (a new approach))</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>February  6, 2016 at 07:00:00pm</p></header><div class="content"><p>Err, yes, that&#39;s what I meant. &#39;Optional&#39; at the call site due to the default, but of course &#39;optional&#39; is a bad choice of wording due to the optional type. Thanks.<br></p><p>-Thorsten <br></p><p>&gt; Am 06.02.2016 um 18:44 schrieb Matthew Judge &lt;matthew.judge at gmail.com&gt;:<br>&gt; <br>&gt; If the argument has a default.<br>&gt; <br>&gt;&gt; On Feb 6, 2016, at 12:21, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; So the preposition should move into the argument label if the argument is optional?<br>&gt;&gt; <br>&gt;&gt; copy(withZone: zone = nil)<br>&gt;&gt; <br>&gt;&gt; -Thorsten <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; Am 06.02.2016 um 14:45 schrieb Matthew Judge via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Very first method<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; copyWith(zone: Zone = nil)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; can be called as<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; copyWith()<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m assuming this is still something we don&#39;t want right?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 6, 2016, at 02:16, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Feb 5, 2016, at 1:32 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Given all the awesome feedback I&#39;ve gotten on this thread, I went back<br>&gt;&gt;&gt;&gt;&gt; to the drawing board and came up with something new; I think this one<br>&gt;&gt;&gt;&gt;&gt; works.  The previously-stated goals still apply:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; [snip goals]<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; P.S. Doug is presently working on generating new importer results, based<br>&gt;&gt;&gt;&gt;&gt;     on these guidelines, for your perusal.  They should be ready soon.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Here’s a link:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-3-api-guidelines-review/pull/10/files<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Feedback welcome!<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	- Doug<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160206/88ff32c6/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>When to use argument labels, part DEUX (was: when to use argument labels (a new approach))</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>February  6, 2016 at 12:00:00pm</p></header><div class="content"><p>Sent from my iPhone<br></p><p>&gt; On Feb 6, 2016, at 9:21 AM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br>&gt; <br>&gt; So the preposition should move into the argument label if the argument is optional?<br>&gt; <br>&gt; copy(withZone: zone = nil)<br></p><p>Zone is redundant with type information. <br></p><p>copy(with:)?<br>copy(withZone:)?<br></p><p><br>&gt; -Thorsten <br>&gt; <br>&gt; <br>&gt;&gt; Am 06.02.2016 um 14:45 schrieb Matthew Judge via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt; <br>&gt;&gt; Very first method<br>&gt;&gt; <br>&gt;&gt; copyWith(zone: Zone = nil)<br>&gt;&gt; <br>&gt;&gt; can be called as<br>&gt;&gt; <br>&gt;&gt; copyWith()<br>&gt;&gt; <br>&gt;&gt; I&#39;m assuming this is still something we don&#39;t want right?<br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 6, 2016, at 02:16, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 5, 2016, at 1:32 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Given all the awesome feedback I&#39;ve gotten on this thread, I went back<br>&gt;&gt;&gt;&gt; to the drawing board and came up with something new; I think this one<br>&gt;&gt;&gt;&gt; works.  The previously-stated goals still apply:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; [snip goals]<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; P.S. Doug is presently working on generating new importer results, based<br>&gt;&gt;&gt;&gt;     on these guidelines, for your perusal.  They should be ready soon.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Here’s a link:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-3-api-guidelines-review/pull/10/files<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Feedback welcome!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	- Doug<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160206/fee64de8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/73a38bb7bc9528e31098defe30e68ea4?s=50"></div><header><strong>When to use argument labels, part DEUX (was: when to use argument labels (a new approach))</strong> from <string>Jean-Daniel Dupas</string> &lt;mailing at xenonium.com&gt;<p>February  6, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; Le 6 févr. 2016 à 21:15, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; <br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt; On Feb 6, 2016, at 9:21 AM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br>&gt; <br>&gt;&gt; So the preposition should move into the argument label if the argument is optional?<br>&gt;&gt; <br>&gt;&gt; copy(withZone: zone = nil)<br>&gt; <br>&gt; Zone is redundant with type information. <br>&gt; <br>&gt; copy(with:)?<br>&gt; copy(withZone:)?<br></p><p>Wouldn’t it be possible to simply drop the copyWithZone: method that is deprecated for some times now (To quote the doc: Zones are ignored on iOS and 64-bit runtime on OS X. You should not use zones in current development).<br></p><p>&gt; <br>&gt;&gt; -Thorsten <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Am 06.02.2016 um 14:45 schrieb Matthew Judge via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt; <br>&gt;&gt;&gt; Very first method<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; copyWith(zone: Zone = nil)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; can be called as<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; copyWith()<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m assuming this is still something we don&#39;t want right?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Feb 6, 2016, at 02:16, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Feb 5, 2016, at 1:32 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Given all the awesome feedback I&#39;ve gotten on this thread, I went back<br>&gt;&gt;&gt;&gt;&gt; to the drawing board and came up with something new; I think this one<br>&gt;&gt;&gt;&gt;&gt; works.  The previously-stated goals still apply:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; [snip goals]<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; P.S. Doug is presently working on generating new importer results, based<br>&gt;&gt;&gt;&gt;&gt;     on these guidelines, for your perusal.  They should be ready soon.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Here’s a link:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-3-api-guidelines-review/pull/10/files<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Feedback welcome!<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	- Doug<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ece55ca3fe50dca9c70bcd914acb48a5?s=50"></div><header><strong>When to use argument labels, part DEUX (was: when to use argument labels (a new approach))</strong> from <string>Matthew Judge</string> &lt;matthew.judge at gmail.com&gt;<p>February  6, 2016 at 04:00:00pm</p></header><div class="content"><p>This issue is going to surface any time a method with a preposition and a single defaulted argument. I would say:<br></p><p>copy(with: )<br></p><p>Although I think we might have problematic results no matter what guidelines we use for<br></p><p>func doSomethingWith(completionHandler: (()-&gt;Void)? = nil)<br></p><p>since this can be called as<br></p><p>doSomethingWith() // doSomething()<br></p><p>Or<br></p><p>doSomethingWith {...} // doSomething {...}<br></p><p>&gt; On Feb 6, 2016, at 15:47, Jean-Daniel Dupas via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; Le 6 févr. 2016 à 21:15, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 6, 2016, at 9:21 AM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; So the preposition should move into the argument label if the argument is optional?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; copy(withZone: zone = nil)<br>&gt;&gt; <br>&gt;&gt; Zone is redundant with type information. <br>&gt;&gt; <br>&gt;&gt; copy(with:)?<br>&gt;&gt; copy(withZone:)?<br>&gt; <br>&gt; Wouldn’t it be possible to simply drop the copyWithZone: method that is deprecated for some times now (To quote the doc: Zones are ignored on iOS and 64-bit runtime on OS X. You should not use zones in current development).<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; -Thorsten <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Am 06.02.2016 um 14:45 schrieb Matthew Judge via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Very first method<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; copyWith(zone: Zone = nil)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; can be called as<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; copyWith()<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;m assuming this is still something we don&#39;t want right?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Feb 6, 2016, at 02:16, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Feb 5, 2016, at 1:32 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Given all the awesome feedback I&#39;ve gotten on this thread, I went back<br>&gt;&gt;&gt;&gt;&gt;&gt; to the drawing board and came up with something new; I think this one<br>&gt;&gt;&gt;&gt;&gt;&gt; works.  The previously-stated goals still apply:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; [snip goals]<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; P.S. Doug is presently working on generating new importer results, based<br>&gt;&gt;&gt;&gt;&gt;&gt;    on these guidelines, for your perusal.  They should be ready soon.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Here’s a link:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;    https://github.com/apple/swift-3-api-guidelines-review/pull/10/files<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Feedback welcome!<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;    - Doug<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2861bfeb71de9de58206bb6ae750bc2f?s=50"></div><header><strong>When to use argument labels, part DEUX (was: when to use argument labels (a new approach))</strong> from <string>ilya</string> &lt;ilya.nikokoshev at gmail.com&gt;<p>February  7, 2016 at 07:00:00pm</p></header><div class="content"><p>One can consider everything inside the parentheses to be an argument list<br>and read them as &quot;with/using an argument list&quot;. It works well if the<br>preceding part has a verb, such as<br></p><p>copy(zone: ...)<br>-&gt; &quot;Copy with [a single argument] zone equal to ...&quot;<br></p><p>func doSomethingWith(completionHandler: (()-&gt;Void)? = nil)<br>-&gt; &quot;doSomething with a given completion handler or do something with a<br>default argument list.&quot;<br></p><p>Not sure if there&#39;s any value in spelling it out. I believe we use &quot;with&quot;<br>so it in Objective-C mostly out of necessity and can easily omit it in<br>Swift.<br></p><p>Ilya.<br></p><p>On Sat, Feb 6, 2016 at 10:12 PM, Matthew Judge via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; This issue is going to surface any time a method with a preposition and a<br>&gt; single defaulted argument. I would say:<br>&gt;<br>&gt; copy(with: )<br>&gt;<br>&gt; Although I think we might have problematic results no matter what<br>&gt; guidelines we use for<br>&gt;<br>&gt; func doSomethingWith(completionHandler: (()-&gt;Void)? = nil)<br>&gt;<br>&gt; since this can be called as<br>&gt;<br>&gt; doSomethingWith() // doSomething()<br>&gt;<br>&gt; Or<br>&gt;<br>&gt; doSomethingWith {...} // doSomething {...}<br>&gt;<br>&gt; &gt; On Feb 6, 2016, at 15:47, Jean-Daniel Dupas via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;&gt; Le 6 févr. 2016 à 21:15, Douglas Gregor via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Sent from my iPhone<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; On Feb 6, 2016, at 9:21 AM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt;<br>&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; So the preposition should move into the argument label if the argument<br>&gt; is optional?<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; copy(withZone: zone = nil)<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Zone is redundant with type information.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; copy(with:)?<br>&gt; &gt;&gt; copy(withZone:)?<br>&gt; &gt;<br>&gt; &gt; Wouldn’t it be possible to simply drop the copyWithZone: method that is<br>&gt; deprecated for some times now (To quote the doc: Zones are ignored on iOS<br>&gt; and 64-bit runtime on OS X. You should not use zones in current<br>&gt; development).<br>&gt; &gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; -Thorsten<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; Am 06.02.2016 um 14:45 schrieb Matthew Judge via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt;:<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; Very first method<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; copyWith(zone: Zone = nil)<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; can be called as<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; copyWith()<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; I&#39;m assuming this is still something we don&#39;t want right?<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; On Feb 6, 2016, at 02:16, Douglas Gregor via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; On Feb 5, 2016, at 1:32 PM, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; Given all the awesome feedback I&#39;ve gotten on this thread, I went<br>&gt; back<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; to the drawing board and came up with something new; I think this<br>&gt; one<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; works.  The previously-stated goals still apply:<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; [snip goals]<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; P.S. Doug is presently working on generating new importer results,<br>&gt; based<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;    on these guidelines, for your perusal.  They should be ready<br>&gt; soon.<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; Here’s a link:<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; https://github.com/apple/swift-3-api-guidelines-review/pull/10/files<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; Feedback welcome!<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;    - Doug<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160207/79f3b688/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2861bfeb71de9de58206bb6ae750bc2f?s=50"></div><header><strong>When to use argument labels, part DEUX (was: when to use argument labels (a new approach))</strong> from <string>ilya</string> &lt;ilya.nikokoshev at gmail.com&gt;<p>February  7, 2016 at 07:00:00pm</p></header><div class="content"><p>Sorry, the second example was supposed to be<br></p><p>func doSomething(completionHandler completion: (()-&gt;Void)? = nil)<br></p><p><br>On Sun, Feb 7, 2016 at 7:51 PM, ilya &lt;ilya.nikokoshev at gmail.com&gt; wrote:<br></p><p>&gt; One can consider everything inside the parentheses to be an argument list<br>&gt; and read them as &quot;with/using an argument list&quot;. It works well if the<br>&gt; preceding part has a verb, such as<br>&gt;<br>&gt; copy(zone: ...)<br>&gt; -&gt; &quot;Copy with [a single argument] zone equal to ...&quot;<br>&gt;<br>&gt; func doSomethingWith(completionHandler: (()-&gt;Void)? = nil)<br>&gt; -&gt; &quot;doSomething with a given completion handler or do something with a<br>&gt; default argument list.&quot;<br>&gt;<br>&gt; Not sure if there&#39;s any value in spelling it out. I believe we use &quot;with&quot;<br>&gt; so it in Objective-C mostly out of necessity and can easily omit it in<br>&gt; Swift.<br>&gt;<br>&gt; Ilya.<br>&gt;<br>&gt; On Sat, Feb 6, 2016 at 10:12 PM, Matthew Judge via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; This issue is going to surface any time a method with a preposition and a<br>&gt;&gt; single defaulted argument. I would say:<br>&gt;&gt;<br>&gt;&gt; copy(with: )<br>&gt;&gt;<br>&gt;&gt; Although I think we might have problematic results no matter what<br>&gt;&gt; guidelines we use for<br>&gt;&gt;<br>&gt;&gt; func doSomethingWith(completionHandler: (()-&gt;Void)? = nil)<br>&gt;&gt;<br>&gt;&gt; since this can be called as<br>&gt;&gt;<br>&gt;&gt; doSomethingWith() // doSomething()<br>&gt;&gt;<br>&gt;&gt; Or<br>&gt;&gt;<br>&gt;&gt; doSomethingWith {...} // doSomething {...}<br>&gt;&gt;<br>&gt;&gt; &gt; On Feb 6, 2016, at 15:47, Jean-Daniel Dupas via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; Le 6 févr. 2016 à 21:15, Douglas Gregor via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Sent from my iPhone<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; On Feb 6, 2016, at 9:21 AM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; So the preposition should move into the argument label if the<br>&gt;&gt; argument is optional?<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; copy(withZone: zone = nil)<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Zone is redundant with type information.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; copy(with:)?<br>&gt;&gt; &gt;&gt; copy(withZone:)?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Wouldn’t it be possible to simply drop the copyWithZone: method that is<br>&gt;&gt; deprecated for some times now (To quote the doc: Zones are ignored on iOS<br>&gt;&gt; and 64-bit runtime on OS X. You should not use zones in current<br>&gt;&gt; development).<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; -Thorsten<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; Am 06.02.2016 um 14:45 schrieb Matthew Judge via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt;:<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; Very first method<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; copyWith(zone: Zone = nil)<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; can be called as<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; copyWith()<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; I&#39;m assuming this is still something we don&#39;t want right?<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Feb 6, 2016, at 02:16, Douglas Gregor via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; On Feb 5, 2016, at 1:32 PM, Dave Abrahams via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; Given all the awesome feedback I&#39;ve gotten on this thread, I went<br>&gt;&gt; back<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; to the drawing board and came up with something new; I think this<br>&gt;&gt; one<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; works.  The previously-stated goals still apply:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; [snip goals]<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; P.S. Doug is presently working on generating new importer results,<br>&gt;&gt; based<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;    on these guidelines, for your perusal.  They should be ready<br>&gt;&gt; soon.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Here’s a link:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-3-api-guidelines-review/pull/10/files<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Feedback welcome!<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;    - Doug<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160207/794a1f23/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>When to use argument labels, part DEUX (was: when to use argument labels (a new approach))</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>February  6, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On Feb 6, 2016, at 2:47 PM, Jean-Daniel Dupas via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Wouldn’t it be possible to simply drop the copyWithZone: method that is deprecated for some times now (To quote the doc: Zones are ignored on iOS and 64-bit runtime on OS X. You should not use zones in current development).<br></p><p>Unfortunately, the frameworks often call the copyWithZone() method directly on objects that support NSCopying, rather than copy(). For example, @property (copy) properties in Objective-C, and @NSCopying properties in Swift behave this way:<br></p><p>--<br></p><p>import Foundation<br></p><p>class Foo: NSObject, NSCopying {<br>	override func copy() -&gt; AnyObject {<br>		print(&quot;copy() called&quot;)<br>		return Foo()<br>	}<br>	<br>	func copyWithZone(zone: NSZone) -&gt; AnyObject {<br>		print(&quot;copyWithZone() called&quot;)<br>		return Foo()<br>	}<br>}<br></p><p>class Bar {<br>	@NSCopying var foo: Foo = Foo()<br>}<br></p><p>let bar = Bar()<br></p><p>bar.foo = Foo()<br></p><p>outputs:<br></p><p>copyWithZone() called<br></p><p>--<br></p><p>Even if this could be changed, and the frameworks completely audited to replace every call of copyWithZone() with a call to copy(), the fact that copyWithZone() has always been part of the API contract means that third-party libraries and frameworks could be calling it, which subsequently means that they would break if copyWithZone() were to go away. Calling copyWithZone() directly isn’t completely unheard of, actually; if an object is implementing its own copyWithZone() method and one of its properties conforms to NSCopying, it may well call copyWithZone() to do the copy, because it’s already got this zone pointer right here, and hey, why not. Add the fact that this was actually correct practice way back in the day when zones were still in use, and I’m sure there’s at least some amount of code like this out there.<br></p><p>One thing you could do, of course, is use compiler magic to turn override func copy() into func copyWithZone(_), but I’m not sure it’s worth it just for this.<br></p><p>Charles<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160206/7c7d7bba/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b6a0b6562cd412f587c69d192f335161?s=50"></div><header><strong>When to use argument labels, part DEUX (was: when to use argument labels (a new approach))</strong> from <string>plx</string> &lt;plxswift at icloud.com&gt;<p>February  6, 2016 at 09:00:00am</p></header><div class="content"><p>Quick remark: it looks like completion-handlers will benefit from a special-case rule to trim a trailing preposition, e.g. consider this:<br></p><p>extension AVAssetExportSession {<br>- func determineCompatibleFileTypesWithCompletionHandler(handler: ([String]) -&gt; Void)		<br>+  func determineCompatibleFileTypesWith(completionHandler handler: ([String]) -&gt; Void)<br>}<br></p><p>…which should probably be this:<br></p><p>func determineCompatibleFileTypes(completionHandler handler: ([String]) -&gt; Void)<br></p><p>&gt; On Feb 6, 2016, at 1:16 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 5, 2016, at 1:32 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Given all the awesome feedback I&#39;ve gotten on this thread, I went back<br>&gt;&gt; to the drawing board and came up with something new; I think this one<br>&gt;&gt; works.  The previously-stated goals still apply:<br>&gt; <br>&gt;&gt; [snip goals]<br>&gt; <br>&gt;&gt; P.S. Doug is presently working on generating new importer results, based<br>&gt;&gt;     on these guidelines, for your perusal.  They should be ready soon.<br>&gt; <br>&gt; <br>&gt; Here’s a link:<br>&gt; <br>&gt; 	https://github.com/apple/swift-3-api-guidelines-review/pull/10/files &lt;https://github.com/apple/swift-3-api-guidelines-review/pull/10/files&gt;<br>&gt; <br>&gt; Feedback welcome!<br>&gt; <br>&gt; 	- Doug<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160206/3068900a/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0089229ece6e648767cff4dc6c6d38ab?s=50"></div><header><strong>When to use argument labels, part DEUX (was: when to use argument labels (a new approach))</strong> from <string>Charles Kissinger</string> &lt;crk at akkyra.com&gt;<p>February  6, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Feb 5, 2016, at 11:16 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 5, 2016, at 1:32 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Given all the awesome feedback I&#39;ve gotten on this thread, I went back<br>&gt;&gt; to the drawing board and came up with something new; I think this one<br>&gt;&gt; works.  The previously-stated goals still apply:<br>&gt; <br>&gt;&gt; [snip goals]<br>&gt; <br>&gt;&gt; P.S. Doug is presently working on generating new importer results, based<br>&gt;&gt;     on these guidelines, for your perusal.  They should be ready soon.<br>&gt; <br>&gt; <br>&gt; Here’s a link:<br>&gt; <br>&gt; 	https://github.com/apple/swift-3-api-guidelines-review/pull/10/files &lt;https://github.com/apple/swift-3-api-guidelines-review/pull/10/files&gt;<br>Well, I might be the only one, but I don’t like these diffs. There are only a few cases where I don’t prefer the original function signature. Function names ending in prepositions with no objects look odd to me. It seems like a strange choice to make the split in the middle of the prepositional phrase.<br></p><p>If, as now proposed, the description of the main focus of the function call is going to be moved from the function name to a label for the first parameter, why not just drop the preposition entirely? As in:<br></p><p>func copy(zone zone: Zone = nil) -&gt; AnyObject<br>func loadValuesAsynchronously(keys keys: [String], completionHandler handler: (() -&gt; Void)? = nil)<br>func tracks(mediaType mediaType: String) -&gt; [AVAssetTrack]<br></p><p>Or put it in the argument label, to keep the prepositional phrase intact:<br></p><p>func copy(withZone zone: Zone = nil) -&gt; AnyObject<br>func loadValuesAsynchronously(forKeys keys: [String], completionHandler handler: (() -&gt; Void)? = nil)<br>func tracks(withMediaType mediaType: String) -&gt; [AVAssetTrack]<br></p><p>—CK<br></p><p>&gt; Feedback welcome!<br>&gt; <br>&gt; 	- Doug<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160206/89c5a535/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b6a0b6562cd412f587c69d192f335161?s=50"></div><header><strong>When to use argument labels, part DEUX (was: when to use argument labels (a new approach))</strong> from <string>plx</string> &lt;plxswift at icloud.com&gt;<p>February  6, 2016 at 09:00:00am</p></header><div class="content"><p>I like these revisions quite a bit.<br></p><p>&gt; On Feb 5, 2016, at 3:32 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Given all the awesome feedback I&#39;ve gotten on this thread, I went back<br>&gt; to the drawing board and came up with something new; I think this one<br>&gt; works.  The previously-stated goals still apply:<br>&gt; <br>&gt; * describe when and where to use argument labels<br>&gt; * require labels in many of the cases people have asked for them<br>&gt; * are understandable by humans (this means relatively simple)<br>&gt; * preserve important semantics communicated by existing APIs.<br>&gt; <br>&gt; Please keep in mind that it is a non-goal to capture considerations we<br>&gt; think have a bearing on good names (such as relatedness of parameters):<br>&gt; it&#39;s to create simple guidelines that have the right effect in nearly<br>&gt; all cases.<br>&gt; <br>&gt; A. When arguments can&#39;t be usefully distinguished from one another, none<br>&gt;   should have argument labels, e.g. min(x,y), zip(x,y,z).  <br>&gt; <br>&gt; B. Otherwise,<br>&gt; <br>&gt;  1. At the call site, a first parameter that has no argument label must<br>&gt;     form part of a grammatical phrase that starts with the basename, less<br>&gt;     any trailing nouns.  <br>&gt; <br>&gt;       print(x)<br>&gt;       a.contains(b)<br>&gt;       a.mergeWith(b)<br>&gt;       a.addGestureRecognizer(x)<br>&gt;            ^~~~~~~~~~~~~~~~~ trailing noun<br>&gt; <br>&gt;     This phrase must have the correct semantic implications, so, e.g.<br>&gt; <br>&gt;       a.dismiss(b)           // no, unless a is really dismissing b<br>&gt;       a.dismissAnimated(b)   // no, not grammatical<br>&gt;       a.dismiss(animated: b) // yes, using a label<br>&gt; <br>&gt;  2. If the first argument is part of a prepositional phrase, put the<br>&gt;     parenthesis immediately after the preposition. <br>&gt; <br>&gt;       a.encodeWith(b)<br>&gt;       a.moveFrom(b, to: c)<br>&gt; <br>&gt;     Thus, if words are required for any reason between the preposition<br>&gt;     and the first argument, they go into the first argument label.<br>&gt; <br>&gt;       a.tracksWith(mediaType: b, composer: c)<br>&gt;       a.moveTo(x: 22, y: 99)<br>&gt; <br>&gt; Notes: <br>&gt; <br>&gt; a. I would recommend prepositions other than &quot;with&quot; in nearly all<br>&gt;   cases, but that&#39;s not the point of these rules.<br>&gt; b. I can understand the aesthetic appeal of<br>&gt; <br>&gt;    a.move(from: b, to: c)<br></p><p>I agree with the aesthetic and also not wanting to complicate the rules to cover it. <br></p><p>I also think this is a bad example, though, b/c in practice one would *hope* that such calls would look more like:<br></p><p>container.move(element, from: currentIndex, to: destinationIndex)<br></p><p>…and whatnot; I suspect that the `move(from:to:)` case may be getting strong reactions in part b/c it’s actually an unusually-poorly-named method to begin with.<br></p><p>Also, as these are just guidelines, in third party code we can deviate from them (at our own peril, but we can...).<br></p><p>&gt; <br>&gt;   but I believe it is not a clear enough improvement to justify<br>&gt;   additional complexity in the guidelines.<br>&gt; <br>&gt; Questions:<br>&gt; <br>&gt; 1. I&#39;m not expecting these guidelines to make everybody optimally happy,<br>&gt;   all the time, but they shouldn&#39;t be harmful.  Are there any cases for<br>&gt;   which they produce results you couldn&#39;t live with?<br>&gt; <br>&gt; 2. Are there any cases where you&#39;d be confused about how to apply these<br>&gt;   guidelines?<br></p><p>I do find some of the rules worded in ways that are hard to apply in the presence of trailing nouns; I’m not sure the guidelines are strong enough here to force the “right” outcome.<br></p><p>Consider this example:<br></p><p>// not-intended: <br>a.tracksWithMediaCharacteristic(b, composer: c)<br></p><p>…applying our guidelines:<br></p><p>- `tracks with media characteristic b` is a grammatical phrase<br>- `tracks with b` is (arguably also) a grammatical phrase<br>- `b` is “part of” the &quot;noun phrase&quot; &quot;tracks with media characteristic b&quot;<br>- `b` is “part of” the “prepositional phrase” “with media characteristic b&quot;<br></p><p>…and although I think this is fine under a “strict” application of the guidelines—as `b` is part of a prepositional phrase, we *must* split the base name after the preposition, at which point we are allowed to “restore&quot; the `mediaCharacteristic:` label if we wish—I don’t know in practice that the “strict” interpretation will be what people naturally opt to use.<br></p><p>Taking it from the other direction, the way the guidelines are phrased I worry bit that you wind up with:<br></p><p>// not intended<br>a.add(subview: v) (or add(v)) // instead of `a.addSubview(v)`<br>a.add(layoutGuide: g) (or add(g)) // instead of `a.addLayoutGuide(g)`<br>a.add(gestureRecognizer: r) (or add(r)) // instead of `a.addGestureRecognizer(r)`<br></p><p>…b/c the rule that we should ignore such trailing nouns means those are *exactly* as-grammatical as the “intended” imports (it’s “add v” vs “add v”, after all, under the guidelines), so at least within the proposed guidelines there’s no apparent reason to prefer the `addSubview` form vis-a-vis the `add(subview:)` (or `add(_)`) form(s).<br></p><p>Perhaps I just overlooked something from the non-label guidelines in this response, but it’d seem the omit-needless-words would also steer you towards `add()`, with or without a first-argument label.<br></p><p>So overall these guidelines seem more than adequate to resolve labeling disputes if we are already dealing with &quot;well-named” functions but may be a bit weak to steer naming *decisions*.<br></p><p>But, for guidelines, that might still be OK?<br></p><p>&gt; <br>&gt; Thanks in advance for all your valuable input!<br>&gt; <br>&gt; P.S. Doug is presently working on generating new importer results, based<br>&gt;     on these guidelines, for your perusal.  They should be ready soon.<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5af07e950f10c7c1df1c44bed055c1eb?s=50"></div><header><strong>When to use argument labels, part DEUX (was: when to use argument labels (a new approach))</strong> from <string>Daniel Steinberg</string> &lt;daniel at dimsumthinking.com&gt;<p>February  6, 2016 at 10:00:00am</p></header><div class="content"><p>Thanks for this Dave - I really like this document.<br></p><p>I had a few nits but spent a day away from it and came back and think that this codifies much of what I’d love to see and I’d be happy following it.<br></p><p>What I particularly like is that it presents APIs from the perspective of the caller.<br></p><p>I don’t know if the following is part of this proposal, but I think one thing that might helpfully be discussed is how we refer to these methods when speaking or writing about them. To me this only matters in methods where there are argument labels - but it matters.<br></p><p>For example, in Objective-C, the selector would make it easy for us to agree that the method name is moveFrom:to:. How do we refer to moveFrom(a, to: b)? Is it the moveFrom method? This also helps me care less whether it is moveFrom(a, to: b) or move(from:a, to: b)  - I too prefer the second version but not enough to object and not at all if the “to&quot; is part of how we refer to this method.<br></p><p>Thoughts? Or is that out of scope?<br></p><p>Best,<br></p><p>Daniel<br></p><p>&gt; On Feb 5, 2016, at 4:32 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Given all the awesome feedback I&#39;ve gotten on this thread, I went back<br>&gt; to the drawing board and came up with something new; I think this one<br>&gt; works.  The previously-stated goals still apply:<br>&gt; <br>&gt; * describe when and where to use argument labels<br>&gt; * require labels in many of the cases people have asked for them<br>&gt; * are understandable by humans (this means relatively simple)<br>&gt; * preserve important semantics communicated by existing APIs.<br>&gt; <br>&gt; Please keep in mind that it is a non-goal to capture considerations we<br>&gt; think have a bearing on good names (such as relatedness of parameters):<br>&gt; it&#39;s to create simple guidelines that have the right effect in nearly<br>&gt; all cases.<br>&gt; <br>&gt; A. When arguments can&#39;t be usefully distinguished from one another, none<br>&gt;   should have argument labels, e.g. min(x,y), zip(x,y,z).  <br>&gt; <br>&gt; B. Otherwise,<br>&gt; <br>&gt;  1. At the call site, a first parameter that has no argument label must<br>&gt;     form part of a grammatical phrase that starts with the basename, less<br>&gt;     any trailing nouns.  <br>&gt; <br>&gt;       print(x)<br>&gt;       a.contains(b)<br>&gt;       a.mergeWith(b)<br>&gt;       a.addGestureRecognizer(x)<br>&gt;            ^~~~~~~~~~~~~~~~~ trailing noun<br>&gt; <br>&gt;     This phrase must have the correct semantic implications, so, e.g.<br>&gt; <br>&gt;       a.dismiss(b)           // no, unless a is really dismissing b<br>&gt;       a.dismissAnimated(b)   // no, not grammatical<br>&gt;       a.dismiss(animated: b) // yes, using a label<br>&gt; <br>&gt;  2. If the first argument is part of a prepositional phrase, put the<br>&gt;     parenthesis immediately after the preposition. <br>&gt; <br>&gt;       a.encodeWith(b)<br>&gt;       a.moveFrom(b, to: c)<br>&gt; <br>&gt;     Thus, if words are required for any reason between the preposition<br>&gt;     and the first argument, they go into the first argument label.<br>&gt; <br>&gt;       a.tracksWith(mediaType: b, composer: c)<br>&gt;       a.moveTo(x: 22, y: 99)<br>&gt; <br>&gt; Notes: <br>&gt; <br>&gt; a. I would recommend prepositions other than &quot;with&quot; in nearly all<br>&gt;   cases, but that&#39;s not the point of these rules.<br>&gt; b. I can understand the aesthetic appeal of<br>&gt; <br>&gt;    a.move(from: b, to: c)<br>&gt; <br>&gt;   but I believe it is not a clear enough improvement to justify<br>&gt;   additional complexity in the guidelines.<br>&gt; <br>&gt; Questions:<br>&gt; <br>&gt; 1. I&#39;m not expecting these guidelines to make everybody optimally happy,<br>&gt;   all the time, but they shouldn&#39;t be harmful.  Are there any cases for<br>&gt;   which they produce results you couldn&#39;t live with?<br>&gt; <br>&gt; 2. Are there any cases where you&#39;d be confused about how to apply these<br>&gt;   guidelines?<br>&gt; <br>&gt; Thanks in advance for all your valuable input!<br>&gt; <br>&gt; P.S. Doug is presently working on generating new importer results, based<br>&gt;     on these guidelines, for your perusal.  They should be ready soon.<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>When to use argument labels, part DEUX (was: when to use argument labels (a new approach))</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>February  6, 2016 at 07:00:00pm</p></header><div class="content"><p>It&#39;s a very long (and complicated) thread, so I guess the following thought isn&#39;t new:<br></p><p>&gt;   a.move(from: b, to: c)<br>In cases like this, where there are nouns that describe the parameters as good as &quot;from&quot; and &quot;to&quot;, so I would call the method<br></p><p>a.moveFile(source: b, destination: c)<br></p><p>(&quot;File&quot; is just a placeholder; I think move is to ambiguous)<br></p><p>The advantage of nouns is that they are well suited as variable names as well; the ability to have separate internal and external names is rather exotic, so I think it looks less strange to somebody without an Objective-C/Swift background.<br></p><p>Tino<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>When to use argument labels, part DEUX (was: when to use argument labels (a new approach))</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>February  6, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; Am 06.02.2016 um 19:27 schrieb Tino Heth via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; It&#39;s a very long (and complicated) thread, so I guess the following thought isn&#39;t new:<br>&gt; <br>&gt;&gt;  a.move(from: b, to: c)<br>&gt; In cases like this, where there are nouns that describe the parameters as good as &quot;from&quot; and &quot;to&quot;, so I would call the method<br>&gt; <br>&gt; a.moveFile(source: b, destination: c)<br>&gt; <br>&gt; (&quot;File&quot; is just a placeholder; I think move is to ambiguous)<br>&gt; <br>&gt; The advantage of nouns is that they are well suited as variable names as well; the ability to have separate internal and external names is rather exotic, so I think it looks less strange to somebody without an Objective-C/Swift background.<br></p><p>That feature is something I like very much in Swift and being able to name the method<br></p><p>a.moveFile(source: b, to destination: c)<br></p><p>is a great thing as it makes the call site read much better.<br></p><p>Not using a great feature of a language just because somebody might not be used to it because other languages domnot have this feature would make me sad.<br></p><p>-Thorsten <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160206/f511e22a/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0089229ece6e648767cff4dc6c6d38ab?s=50"></div><header><strong>When to use argument labels, part DEUX (was: when to use argument labels (a new approach))</strong> from <string>Charles Kissinger</string> &lt;crk at akkyra.com&gt;<p>February  7, 2016 at 03:00:00pm</p></header><div class="content"><p>Looking over these guidelines again, I think I would be quite happy with them given one very simple change to Rule 2:<br></p><p>If the first argument is part of a prepositional phrase WITH MULTIPLE OBJECTS, put the parenthesis immediately after the preposition.<br></p><p>This eliminates the need for:<br></p><p>a.tracksHaving(mediaType: b)<br></p><p>which I think is inferior to:<br></p><p>a.tracksHavingMediaType(b)<br></p><p>On the other hand, functions like:<br></p><p>a.tracksWith(mediaType: b, composer: c)<br>a.moveTo(x: 22, y: 99)<br></p><p>would remain as is, because there are multiple objects for the preposition.<br></p><p>This also neatly solves the ‘moveFrom(a to: b)’ problem. There are two separate prepositional phrases involved, &#39;from a&#39; and &#39;to b&#39;, each with a single object, so:<br></p><p>move(from: a to: b)<br></p><p>is, I believe, fully compatible with the guidelines.<br></p><p>—CK<br> <br>&gt; On Feb 5, 2016, at 1:32 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Given all the awesome feedback I&#39;ve gotten on this thread, I went back<br>&gt; to the drawing board and came up with something new; I think this one<br>&gt; works.  The previously-stated goals still apply:<br>&gt; <br>&gt; * describe when and where to use argument labels<br>&gt; * require labels in many of the cases people have asked for them<br>&gt; * are understandable by humans (this means relatively simple)<br>&gt; * preserve important semantics communicated by existing APIs.<br>&gt; <br>&gt; Please keep in mind that it is a non-goal to capture considerations we<br>&gt; think have a bearing on good names (such as relatedness of parameters):<br>&gt; it&#39;s to create simple guidelines that have the right effect in nearly<br>&gt; all cases.<br>&gt; <br>&gt; A. When arguments can&#39;t be usefully distinguished from one another, none<br>&gt;   should have argument labels, e.g. min(x,y), zip(x,y,z).  <br>&gt; <br>&gt; B. Otherwise,<br>&gt; <br>&gt;  1. At the call site, a first parameter that has no argument label must<br>&gt;     form part of a grammatical phrase that starts with the basename, less<br>&gt;     any trailing nouns.  <br>&gt; <br>&gt;       print(x)<br>&gt;       a.contains(b)<br>&gt;       a.mergeWith(b)<br>&gt;       a.addGestureRecognizer(x)<br>&gt;            ^~~~~~~~~~~~~~~~~ trailing noun<br>&gt; <br>&gt;     This phrase must have the correct semantic implications, so, e.g.<br>&gt; <br>&gt;       a.dismiss(b)           // no, unless a is really dismissing b<br>&gt;       a.dismissAnimated(b)   // no, not grammatical<br>&gt;       a.dismiss(animated: b) // yes, using a label<br>&gt; <br>&gt;  2. If the first argument is part of a prepositional phrase, put the<br>&gt;     parenthesis immediately after the preposition. <br>&gt; <br>&gt;       a.encodeWith(b)<br>&gt;       a.moveFrom(b, to: c)<br>&gt; <br>&gt;     Thus, if words are required for any reason between the preposition<br>&gt;     and the first argument, they go into the first argument label.<br>&gt; <br>&gt;       a.tracksWith(mediaType: b, composer: c)<br>&gt;       a.moveTo(x: 22, y: 99)<br>&gt; <br>&gt; Notes: <br>&gt; <br>&gt; a. I would recommend prepositions other than &quot;with&quot; in nearly all<br>&gt;   cases, but that&#39;s not the point of these rules.<br>&gt; b. I can understand the aesthetic appeal of<br>&gt; <br>&gt;    a.move(from: b, to: c)<br>&gt; <br>&gt;   but I believe it is not a clear enough improvement to justify<br>&gt;   additional complexity in the guidelines.<br>&gt; <br>&gt; Questions:<br>&gt; <br>&gt; 1. I&#39;m not expecting these guidelines to make everybody optimally happy,<br>&gt;   all the time, but they shouldn&#39;t be harmful.  Are there any cases for<br>&gt;   which they produce results you couldn&#39;t live with?<br>&gt; <br>&gt; 2. Are there any cases where you&#39;d be confused about how to apply these<br>&gt;   guidelines?<br>&gt; <br>&gt; Thanks in advance for all your valuable input!<br>&gt; <br>&gt; P.S. Doug is presently working on generating new importer results, based<br>&gt;     on these guidelines, for your perusal.  They should be ready soon.<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>When to use argument labels, part DEUX (was: when to use argument labels (a new approach))</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February  8, 2016 at 09:00:00pm</p></header><div class="content"><p>Dave,<br></p><p>First of all, thank you for enduring our nitpicks and complaints and continuing to explore the subject :) I think we’re all better off for it, and getting closer to the solution with each iteration.<br></p><p>You asked:<br></p><p>&gt; 1. I&#39;m not expecting these guidelines to make everybody optimally happy,<br>&gt;   all the time, but they shouldn&#39;t be harmful.  Are there any cases for<br>&gt;   which they produce results you couldn&#39;t live with?<br></p><p>And I think, by this standard, the guidelines you proposed seem to be a success. Looking through Doug’s diffs, I see a lot of method names that I don’t *love*, but I couldn’t find something I would hate.<br></p><p>* * *<br></p><p>&gt; -  subscript (key: String) -&gt; CKRecordValue?		+  subscript (keyedSubscript key: String) -&gt; CKRecordValue?<br></p><p>Huh?<br></p><p>&gt; -  func dateBySettingUnit(unit: CalendarUnit, value v: Int, of date: Date, options opts: CalendarOptions = []) -&gt; Date?		<br>&gt; +  func dateBy(settingUnit unit: CalendarUnit, value v: Int, of date: Date, options opts: CalendarOptions = []) -&gt; Date?<br></p><p>That doesn’t look like the intended result...<br></p><p>— Radek<br></p><p>&gt; On 05 Feb 2016, at 22:32, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Given all the awesome feedback I&#39;ve gotten on this thread, I went back<br>&gt; to the drawing board and came up with something new; I think this one<br>&gt; works.  The previously-stated goals still apply:<br>&gt; <br>&gt; * describe when and where to use argument labels<br>&gt; * require labels in many of the cases people have asked for them<br>&gt; * are understandable by humans (this means relatively simple)<br>&gt; * preserve important semantics communicated by existing APIs.<br>&gt; <br>&gt; Please keep in mind that it is a non-goal to capture considerations we<br>&gt; think have a bearing on good names (such as relatedness of parameters):<br>&gt; it&#39;s to create simple guidelines that have the right effect in nearly<br>&gt; all cases.<br>&gt; <br>&gt; A. When arguments can&#39;t be usefully distinguished from one another, none<br>&gt;   should have argument labels, e.g. min(x,y), zip(x,y,z).  <br>&gt; <br>&gt; B. Otherwise,<br>&gt; <br>&gt;  1. At the call site, a first parameter that has no argument label must<br>&gt;     form part of a grammatical phrase that starts with the basename, less<br>&gt;     any trailing nouns.  <br>&gt; <br>&gt;       print(x)<br>&gt;       a.contains(b)<br>&gt;       a.mergeWith(b)<br>&gt;       a.addGestureRecognizer(x)<br>&gt;            ^~~~~~~~~~~~~~~~~ trailing noun<br>&gt; <br>&gt;     This phrase must have the correct semantic implications, so, e.g.<br>&gt; <br>&gt;       a.dismiss(b)           // no, unless a is really dismissing b<br>&gt;       a.dismissAnimated(b)   // no, not grammatical<br>&gt;       a.dismiss(animated: b) // yes, using a label<br>&gt; <br>&gt;  2. If the first argument is part of a prepositional phrase, put the<br>&gt;     parenthesis immediately after the preposition. <br>&gt; <br>&gt;       a.encodeWith(b)<br>&gt;       a.moveFrom(b, to: c)<br>&gt; <br>&gt;     Thus, if words are required for any reason between the preposition<br>&gt;     and the first argument, they go into the first argument label.<br>&gt; <br>&gt;       a.tracksWith(mediaType: b, composer: c)<br>&gt;       a.moveTo(x: 22, y: 99)<br>&gt; <br>&gt; Notes: <br>&gt; <br>&gt; a. I would recommend prepositions other than &quot;with&quot; in nearly all<br>&gt;   cases, but that&#39;s not the point of these rules.<br>&gt; b. I can understand the aesthetic appeal of<br>&gt; <br>&gt;    a.move(from: b, to: c)<br>&gt; <br>&gt;   but I believe it is not a clear enough improvement to justify<br>&gt;   additional complexity in the guidelines.<br>&gt; <br>&gt; Questions:<br>&gt; <br>&gt; 1. I&#39;m not expecting these guidelines to make everybody optimally happy,<br>&gt;   all the time, but they shouldn&#39;t be harmful.  Are there any cases for<br>&gt;   which they produce results you couldn&#39;t live with?<br>&gt; <br>&gt; 2. Are there any cases where you&#39;d be confused about how to apply these<br>&gt;   guidelines?<br>&gt; <br>&gt; Thanks in advance for all your valuable input!<br>&gt; <br>&gt; P.S. Doug is presently working on generating new importer results, based<br>&gt;     on these guidelines, for your perusal.  They should be ready soon.<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
