<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[SR-933] Rename flatten to flattened</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>April 15, 2016 at 07:00:00pm</p></header><div class="content"><p>I&#39;ve already expressed these concerns, but nobody noticed, apparently. Here<br>is it:<br></p><p>I think current -ed/-ing convention is ugly. It breaks syntactic<br>correctness, experience from other languages, mathematical notation and<br>functional idioms.<br></p><p>`InPlace` suffix was so far more correct in these terms. We can make<br>anything a convention, but should we?<br>I liked the proposal about new naming conventions, but overlooked this<br>change.<br></p><p>Many people will agree with me. This still can be reviewed until Swift 3.<br>If so, I will create a proposal to correct &quot;the big three&quot; in this.<br></p><p>What do you think?<br></p><p>- Anton<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160415/fed7ce8b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[SR-933] Rename flatten to flattened</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>April 15, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Apr 15, 2016, at 10:17 AM, Антон Жилин via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;ve already expressed these concerns, but nobody noticed, apparently. Here is it:<br>&gt; <br>&gt; I think current -ed/-ing convention is ugly. It breaks syntactic correctness, experience from other languages, mathematical notation and functional idioms.<br>&gt; <br>&gt; `InPlace` suffix was so far more correct in these terms. We can make anything a convention, but should we?<br>&gt; I liked the proposal about new naming conventions, but overlooked this change.<br>&gt; <br>&gt; Many people will agree with me. This still can be reviewed until Swift 3.<br>&gt; If so, I will create a proposal to correct &quot;the big three&quot; in this.<br>&gt; <br>&gt; What do you think?<br></p><p>I would like to see a formal proposal along these lines. My other suggestions are here &lt;http://ericasadun.com/2016/04/13/stop-the-madness-and-fix-the-swift-api-guidelines/&gt;.<br></p><p>-- E<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160415/6b67a427/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[SR-933] Rename flatten to flattened</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>April 15, 2016 at 11:00:00pm</p></header><div class="content"><p>Thinking about it, `ed`/`ing` and even `form` prefix might not be that bad.<br>It&#39;s more a matter of what should be &quot;default&quot; in a specific domain.<br></p><p>In imperative domain, mutating version usually feels as the most natural<br>one.<br>Think `sort`. Everyone knows that sort must modify the array (usually<br>through a sequence of swaps) to be most efficient. (Heapsort is an<br>exception there, I guess.)<br>That&#39;s why it is mutating version should be the shorter one, and<br>non-mutating should have a prefix or a suffix.<br></p><p>In functional domain, non-mutating version usually feels as the most<br>natural one.<br>Think `filter`, `map`, `reduce`. This functions originated in functional<br>languages. Functional languages usually have immutability by default.<br>When we &quot;map&quot; these idioms to Swift, we should let non-mutating version be<br>the &quot;default&quot; one.<br>Of course, we can be strict with our own rules and inventive in terms of<br>function names, but we just shouldn&#39;t.<br></p><p>Think `union`, `intersection`. These terms originated from mathematics,<br>where mutability just doesn&#39;t exist.<br>Given such a domain area, it should be obvious that `union` on a set means<br>non-mutating version, unless stated otherwise.<br></p><p>So, I conclude that we should not enforce any guideline about naming<br>mutating/non-mutating versions of methods.<br>Correct me if this is a wrong conclusion.<br></p><p>- Anton<br></p><p>2016-04-15 19:31 GMT+03:00 Erica Sadun &lt;erica at ericasadun.com&gt;:<br></p><p>&gt;<br>&gt; On Apr 15, 2016, at 10:17 AM, Антон Жилин via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I&#39;ve already expressed these concerns, but nobody noticed, apparently.<br>&gt; Here is it:<br>&gt;<br>&gt; I think current -ed/-ing convention is ugly. It breaks syntactic<br>&gt; correctness, experience from other languages, mathematical notation and<br>&gt; functional idioms.<br>&gt;<br>&gt; `InPlace` suffix was so far more correct in these terms. We can make<br>&gt; anything a convention, but should we?<br>&gt; I liked the proposal about new naming conventions, but overlooked this<br>&gt; change.<br>&gt;<br>&gt; Many people will agree with me. This still can be reviewed until Swift 3.<br>&gt; If so, I will create a proposal to correct &quot;the big three&quot; in this.<br>&gt;<br>&gt; What do you think?<br>&gt;<br>&gt;<br>&gt; I would like to see a formal proposal along these lines. My other<br>&gt; suggestions are here<br>&gt; &lt;http://ericasadun.com/2016/04/13/stop-the-madness-and-fix-the-swift-api-guidelines/&gt;<br>&gt; .<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160415/051f3884/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[SR-933] Rename flatten to flattened</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>April 15, 2016 at 11:00:00pm</p></header><div class="content"><p>After hitting Send button, I remembered that &quot;Enhanced floating-point<br>protocols&quot; proposal uses `add`, `subtract`, `multiply` and `divide` names<br>for mutating versions.<br>They should be non-mutating by default, as well as other purely<br>mathematical terms. I don&#39;t know how it can be unobvious.<br></p><p>- Anton<br></p><p>2016-04-15 23:36 GMT+03:00 Антон Жилин &lt;antonyzhilin at gmail.com&gt;:<br></p><p>&gt; Thinking about it, `ed`/`ing` and even `form` prefix might not be that bad.<br>&gt; It&#39;s more a matter of what should be &quot;default&quot; in a specific domain.<br>&gt;<br>&gt; In imperative domain, mutating version usually feels as the most natural<br>&gt; one.<br>&gt; Think `sort`. Everyone knows that sort must modify the array (usually<br>&gt; through a sequence of swaps) to be most efficient. (Heapsort is an<br>&gt; exception there, I guess.)<br>&gt; That&#39;s why it is mutating version should be the shorter one, and<br>&gt; non-mutating should have a prefix or a suffix.<br>&gt;<br>&gt; In functional domain, non-mutating version usually feels as the most<br>&gt; natural one.<br>&gt; Think `filter`, `map`, `reduce`. This functions originated in functional<br>&gt; languages. Functional languages usually have immutability by default.<br>&gt; When we &quot;map&quot; these idioms to Swift, we should let non-mutating version be<br>&gt; the &quot;default&quot; one.<br>&gt; Of course, we can be strict with our own rules and inventive in terms of<br>&gt; function names, but we just shouldn&#39;t.<br>&gt;<br>&gt; Think `union`, `intersection`. These terms originated from mathematics,<br>&gt; where mutability just doesn&#39;t exist.<br>&gt; Given such a domain area, it should be obvious that `union` on a set means<br>&gt; non-mutating version, unless stated otherwise.<br>&gt;<br>&gt; So, I conclude that we should not enforce any guideline about naming<br>&gt; mutating/non-mutating versions of methods.<br>&gt; Correct me if this is a wrong conclusion.<br>&gt;<br>&gt; - Anton<br>&gt;<br>&gt; 2016-04-15 19:31 GMT+03:00 Erica Sadun &lt;erica at ericasadun.com&gt;:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On Apr 15, 2016, at 10:17 AM, Антон Жилин via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I&#39;ve already expressed these concerns, but nobody noticed, apparently.<br>&gt;&gt; Here is it:<br>&gt;&gt;<br>&gt;&gt; I think current -ed/-ing convention is ugly. It breaks syntactic<br>&gt;&gt; correctness, experience from other languages, mathematical notation and<br>&gt;&gt; functional idioms.<br>&gt;&gt;<br>&gt;&gt; `InPlace` suffix was so far more correct in these terms. We can make<br>&gt;&gt; anything a convention, but should we?<br>&gt;&gt; I liked the proposal about new naming conventions, but overlooked this<br>&gt;&gt; change.<br>&gt;&gt;<br>&gt;&gt; Many people will agree with me. This still can be reviewed until Swift 3.<br>&gt;&gt; If so, I will create a proposal to correct &quot;the big three&quot; in this.<br>&gt;&gt;<br>&gt;&gt; What do you think?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I would like to see a formal proposal along these lines. My other<br>&gt;&gt; suggestions are here<br>&gt;&gt; &lt;http://ericasadun.com/2016/04/13/stop-the-madness-and-fix-the-swift-api-guidelines/&gt;<br>&gt;&gt; .<br>&gt;&gt;<br>&gt;&gt; -- E<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160415/2fcb5ba4/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[SR-933] Rename flatten to flattened</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 18, 2016 at 05:00:00pm</p></header><div class="content"><p>+1, almost totally agree.<br></p><p>IMO sort/map/filter/reduce/etc &quot;belongs&quot; to the functional word, as I can <br>see Swift is moving to be more functional language, we like to use <br>functional features like some.filter{}.map{}.reduce{}, we like such <br>frameworks/libs like RxSwift/ReacriveCocoa, we are implementing <br>Future&lt;Result,Error&gt; pattern, trying &quot;Railway oriented programming&quot; etc.<br>I think it is some kind of standard of naming for such functions and their <br>behavior.<br></p><p>All this renaming is looking very strange for me, do we have more important <br>things? IMO this is not normal, if we have &quot;sort&quot; as non-mutating in <br>Swift2.0 (just like in other modern languages) but have &quot;sort&quot; as mutating <br>in 3.0. Are we programming here or writing some poems etc? So we need all <br>these &quot;ing&quot;/&quot;ed&quot;... Just can&#39;t understand and want some opinions from the <br>community. Are you really support all this renaming?<br></p><p>But I extremely against &quot;form&quot; prefix : we will always read it as &quot;from&quot; : <br>https://en.wikipedia.org/wiki/Typoglycemia<br></p><p><br>On 15.04.2016 23:36, Антон Жилин via swift-evolution wrote:<br>&gt; Thinking about it, `ed`/`ing` and even `form` prefix might not be that bad.<br>&gt; It&#39;s more a matter of what should be &quot;default&quot; in a specific domain.<br>&gt;<br>&gt; In imperative domain, mutating version usually feels as the most natural one.<br>&gt; Think `sort`. Everyone knows that sort must modify the array (usually<br>&gt; through a sequence of swaps) to be most efficient. (Heapsort is an<br>&gt; exception there, I guess.)<br>&gt; That&#39;s why it is mutating version should be the shorter one, and<br>&gt; non-mutating should have a prefix or a suffix.<br>&gt;<br>&gt; In functional domain, non-mutating version usually feels as the most<br>&gt; natural one.<br>&gt; Think `filter`, `map`, `reduce`. This functions originated in functional<br>&gt; languages. Functional languages usually have immutability by default.<br>&gt; When we &quot;map&quot; these idioms to Swift, we should let non-mutating version be<br>&gt; the &quot;default&quot; one.<br>&gt; Of course, we can be strict with our own rules and inventive in terms of<br>&gt; function names, but we just shouldn&#39;t.<br>&gt;<br>&gt; Think `union`, `intersection`. These terms originated from mathematics,<br>&gt; where mutability just doesn&#39;t exist.<br>&gt; Given such a domain area, it should be obvious that `union` on a set means<br>&gt; non-mutating version, unless stated otherwise.<br>&gt;<br>&gt; So, I conclude that we should not enforce any guideline about naming<br>&gt; mutating/non-mutating versions of methods.<br>&gt; Correct me if this is a wrong conclusion.<br>&gt;<br>&gt; - Anton<br>&gt;<br>&gt; 2016-04-15 19:31 GMT+03:00 Erica Sadun &lt;erica at ericasadun.com<br>&gt; &lt;mailto:erica at ericasadun.com&gt;&gt;:<br>&gt;<br>&gt;<br>&gt;&gt;     On Apr 15, 2016, at 10:17 AM, Антон Жилин via swift-evolution<br>&gt;&gt;     &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;     I&#39;ve already expressed these concerns, but nobody noticed,<br>&gt;&gt;     apparently. Here is it:<br>&gt;&gt;<br>&gt;&gt;     I think current -ed/-ing convention is ugly. It breaks syntactic<br>&gt;&gt;     correctness, experience from other languages, mathematical notation<br>&gt;&gt;     and functional idioms.<br>&gt;&gt;<br>&gt;&gt;     `InPlace` suffix was so far more correct in these terms. We can make<br>&gt;&gt;     anything a convention, but should we?<br>&gt;&gt;     I liked the proposal about new naming conventions, but overlooked<br>&gt;&gt;     this change.<br>&gt;&gt;<br>&gt;&gt;     Many people will agree with me. This still can be reviewed until Swift 3.<br>&gt;&gt;     If so, I will create a proposal to correct &quot;the big three&quot; in this.<br>&gt;&gt;<br>&gt;&gt;     What do you think?<br>&gt;<br>&gt;     I would like to see a formal proposal along these lines. My other<br>&gt;     suggestions are here<br>&gt;     &lt;http://ericasadun.com/2016/04/13/stop-the-madness-and-fix-the-swift-api-guidelines/&gt;.<br>&gt;<br>&gt;     -- E<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85f9b9a5c2d7cbaa85388ff1e0f571dc?s=50"></div><header><strong>[SR-933] Rename flatten to flattened</strong> from <string>David Rönnqvist</string> &lt;david.ronnqvist at me.com&gt;<p>April 16, 2016 at 12:00:00pm</p></header><div class="content"><p>By “the big three”, are you referring to only the naming of map, filter, and reduce? <br></p><p>I would also like to see a formal proposal along these lines, and possibly more. <br></p><p>I also feel that the `inPlace` suffix was very clear (most important) and very much liked that it made the immutable version the default (less important). It manages to describe the distinction between `union`/`unionInPlace` and `sort`/`sortInPlace` in the name itself. To me, the `ed`/`ing` difference is much more subtle and favors people who are familiar with English grammar. One can argue that `sort` is both imperative and functional, and that because of [either side] the default should be [mutable/immutable]. Both arguments are valid. <br></p><p>- David<br></p><p>&gt; On 15 Apr 2016, at 18:31, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Apr 15, 2016, at 10:17 AM, Антон Жилин via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I&#39;ve already expressed these concerns, but nobody noticed, apparently. Here is it:<br>&gt;&gt; <br>&gt;&gt; I think current -ed/-ing convention is ugly. It breaks syntactic correctness, experience from other languages, mathematical notation and functional idioms.<br>&gt;&gt; <br>&gt;&gt; `InPlace` suffix was so far more correct in these terms. We can make anything a convention, but should we?<br>&gt;&gt; I liked the proposal about new naming conventions, but overlooked this change.<br>&gt;&gt; <br>&gt;&gt; Many people will agree with me. This still can be reviewed until Swift 3.<br>&gt;&gt; If so, I will create a proposal to correct &quot;the big three&quot; in this.<br>&gt;&gt; <br>&gt;&gt; What do you think?<br>&gt; <br>&gt; I would like to see a formal proposal along these lines. My other suggestions are here &lt;http://ericasadun.com/2016/04/13/stop-the-madness-and-fix-the-swift-api-guidelines/&gt;.<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160416/62695e2a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c74c15ba14b1096d4e42900ddd2dacd0?s=50"></div><header><strong>[SR-933] Rename flatten to flattened</strong> from <string>Patrick Smith</string> &lt;pgwsmith at gmail.com&gt;<p>April 16, 2016 at 12:00:00pm</p></header><div class="content"><p>Yes, I agree. I think in the guidelines should be a recommendation for mutating methods are preferred, when nonmutating are preferred, and when to have both. If performance is a key goal of Swift, so much that it influences API design, then some details should be part of the guidelines also.<br>Patrick<br></p><p><br></p><p><br>On Sat, Apr 16, 2016 at 3:56 AM -0700, &quot;David Rönnqvist&quot; &lt;swift-evolution at swift.org&gt; wrote:<br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br>By “the big three”, are you referring to only the naming of map, filter, and reduce? <br>I would also like to see a formal proposal along these lines, and possibly more. <br>I also feel that the `inPlace` suffix was very clear (most important) and very much liked that it made the immutable version the default (less important). It manages to describe the distinction between `union`/`unionInPlace` and `sort`/`sortInPlace` in the name itself. To me, the `ed`/`ing` difference is much more subtle and favors people who are familiar with English grammar. One can argue that `sort` is both imperative and functional, and that because of [either side] the default should be [mutable/immutable]. Both arguments are valid. <br>- David<br>On 15 Apr 2016, at 18:31, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>On Apr 15, 2016, at 10:17 AM, Антон Жилин via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>I&#39;ve already expressed these concerns, but nobody noticed, apparently. Here is it:<br>I think current -ed/-ing convention is ugly. It breaks syntactic correctness, experience from other languages, mathematical notation and functional idioms.<br></p><p>`InPlace` suffix was so far more correct in these terms. We can make anything a convention, but should we?<br>I liked the proposal about new naming conventions, but overlooked this change.<br></p><p>Many people will agree with me. This still can be reviewed until Swift 3.<br>If so, I will create a proposal to correct &quot;the big three&quot; in this.<br></p><p>What do you think?<br>I would like to see a formal proposal along these lines. My other suggestions are here.<br>-- E<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160416/e637254d/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
