<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5f463dd4e7af28b64ad8f0e032ee82dc?s=50"></div><header><strong>[Draft] Fix the Collection Partition API</strong> from <string>Nate Cook</string> &lt;natecook at gmail.com&gt;<p>July  6, 2016 at 01:00:00am</p></header><div class="content"><p>Hi all,<br></p><p>This is a crack at a proposal to revise the API of the collection partition method, called out as an open issue in the standard library. What&#39;s below is a much shorter revision of a prior proposal, focused only on the partition method. I welcome any feedback you might have!<br></p><p>Thanks,<br>Nate<br></p><p><br>––––<br>This proposal revises the signature for the collection partition algorithm. Partitioning is a foundational API for sorting and for searching through sorted collections.<br></p><p>Swift-evolution thread: Feedback from standard library team &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160502/016729.html&gt;<br>Swift Bug: SR-1965 &lt;https://bugs.swift.org/browse/SR-1965&gt;<br>Motivation<br>Based on feedback during the review of proposal SE-0074, Implementation of Binary Search Functions &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0074-binary-search.md&gt; and the list of open issues affecting standard library API stability &lt;https://gist.github.com/gribozavr/37e811f12b27c6365fc88e6f9645634d&gt;, this is a revised proposal focused only on the existing collection partition method.<br></p><p>The standard library&#39;s current partition methods, which partition a mutable collection using a binary predicate based on the value of the first element of a collection, are used by the standard library&#39;s sorting algorithm but don&#39;t offer more general partitioning functionality. A more general partition algorithm using a unary (single-argument) predicate would be more flexible and generally useful.<br></p><p>Proposed solution<br>The standard library should replace the existing partition methods with a single method taking a unary predicate. This new method, partition(where:), is a mutating method that accepts a unary predicate. The elements of the collection are rearranged according to the predicate, so that there is a pivot index p where no element before p satisfies the predicate and every element at and after p does satisfy the predicate. <br></p><p>var n = [30, 40, 20, 30, 30, 60, 10]<br>let p = n.partition(where: { $0 &gt; 30 })<br>// n == [30, 10, 20, 30, 30, 60, 40]<br>// p == 5<br>After partitioning, the predicate returns false for every element in n.prefix(upTo: p)and true for every element in n.suffix(from: p).<br></p><p>Detailed design<br>partition(where:) should be added as a MutableCollection requirement with default implementations for mutable and bidirectional mutable collections. Any mutable collection can be partitioned, but the bidirectional algorithm generally performs far fewer copies. The other two methods can be provided in an extension of the Collection protocol.<br></p><p>The proposed APIs are collected here:<br></p><p>protocol MutableCollection {<br>    // existing requirements<br>    <br>    /// Reorders the elements of the collection such that all the<br>    /// elements that match the predicate are ordered after all the<br>    /// elements that do not match the predicate.<br>    ///<br>    /// - Returns: The index of the first element in the reordered<br>    ///   collection that matches the predicate.<br>    /// - Complexity: O(n)<br>    @discardableResult<br>    mutating func partition(<br>        where predicate: @noescape (Iterator.Element) throws-&gt; Bool<br>    ) rethrows -&gt; Index<br>}<br>    <br>extension MutableCollection {<br>    @discardableResult<br>    mutating func partition(<br>        where predicate: @noescape (Iterator.Element) throws-&gt; Bool<br>    ) rethrows -&gt; Index<br>}<br></p><p>extension MutableCollection where Self: BidirectionalCollection {<br>    @discardableResult<br>    mutating func partition(<br>        where predicate: @noescape (Iterator.Element) throws-&gt; Bool<br>    ) rethrows -&gt; Index<br>}<br>A full implementation of the two default implementations can be found in this gist &lt;https://gist.github.com/natecook1000/70f36608ecd6236552ce0e9f79b98cff&gt;.<br></p><p>Impact on existing code<br>The current sorting algorithms would need to be modified to use the new partition(where:) method. Other uses of the existing partition methods could be flagged or in theory could be replaced programmatically. The replacement code, on a mutable collection c:<br></p><p>// old<br>c.partition()<br></p><p>// new<br>if let first = c.first {<br>    c.partition(where: { $0 &gt;= first })<br>}<br>A thorough, though not exhaustive, search of GitHub for the existing partition method found no real evidence of its use. The evident uses of a partition method were mainly either tests from the Swift project or third-party implementations similar to the one proposed.<br></p><p>Alternatives considered<br>To more closely match the existing API, the partition(where:) method could be added only as a default implementation for mutable bidirectional collections. This would unnecessarily limit access to the algorithm for mutable forward collections.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160706/7773ccb7/attachment.html&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
