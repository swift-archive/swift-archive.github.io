<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>API Guidelines Update</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 17, 2016 at 03:00:00pm</p></header><div class="content"><p>on Wed Feb 17 2016, Jacob Bandes-Storch &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Question about how to interpret/apply the guidelines:<br>&gt;<br>&gt;     &quot;[functions/methods] without side-effects should read as noun phrases…&quot;<br>&gt;     &quot;Use the “ed/ing” rule to name the nonmutating counterpart of a<br>&gt; mutating method…&quot;<br>&gt;     &quot;The names of other types, properties, variables, and constants should<br>&gt; read as nouns.&quot;<br>&gt;<br>&gt; Within these guidelines, how do we explain why<br>&gt; *-stringByExpandingTildeInPath* becomes &quot;var *expandingTildeInPath*&quot;? I&#39;m<br>&gt; wondering if the guidelines should clarify that the &quot;ed/ing rule&quot; may apply<br>&gt; to more than just nonmutating methods with mutating counterparts.<br></p><p>Why should it?<br></p><p>&gt; I think that &quot;var expandingTildeInPath&quot; is probably the best choice for<br>&gt; this API, but I can&#39;t figure out how to reconcile it with the guidelines as<br>&gt; written.<br></p><p>The guidelines don&#39;t force you to spell it that way, but they allow it.<br></p><p>    “x, expanding the tilde in its path”<br></p><p>is a noun phrase.<br></p><p>&gt;<br>&gt; Jacob<br>&gt;<br>&gt; On Wed, Feb 17, 2016 at 11:55 AM, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; on Wed Feb 17 2016, Trent Nadeau &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; &gt; I saw that that Markdown file wasn&#39;t on master so I didn&#39;t think a PR was<br>&gt;&gt; &gt; appropriate. I just looked, and it appears that gh-pages is the only<br>&gt;&gt; branch<br>&gt;&gt; &gt; there.<br>&gt;&gt;<br>&gt;&gt; Nothing wrong with that; you can submit a PR against any branch.<br>&gt;&gt;<br>&gt;&gt; &gt; On Wed, Feb 17, 2016 at 1:01 PM, Dave Abrahams via swift-evolution &lt;<br>&gt;&gt; &gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; on Tue Feb 16 2016, Trent Nadeau &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; &gt; I like.<br>&gt;&gt; &gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; &gt; Minor grammar fix: Remove the comma in &quot;declared only once, but used<br>&gt;&gt; &gt;&gt; &gt; repeatedly&quot; in the first rule.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Thanks!<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; FYI, for the future, pull requests work great :-)<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; &gt; On Tue, Feb 16, 2016 at 9:31 PM, Dave Abrahams via swift-evolution &lt;<br>&gt;&gt; &gt;&gt; &gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt; I&#39;ve updated the API guidelines document to account for the review<br>&gt;&gt; &gt;&gt; &gt;&gt; feedback and other issues.  Please see<br>&gt;&gt; &gt;&gt; &gt;&gt; http://apple.github.io/swift-internals/api-design-guidelines/<br>&gt;&gt; &gt;&gt; &gt;&gt; (presentation view)<br>&gt;&gt; &gt;&gt; &gt;&gt; and<br>&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-internals/blob/gh-pages/api-design-guidelines/index.md<br>&gt;&gt; &gt;&gt; &gt;&gt; (source and commit history)<br>&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt; --<br>&gt;&gt; &gt;&gt; &gt;&gt; -Dave<br>&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; --<br>&gt;&gt; &gt;&gt; -Dave<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; -Dave<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>API Guidelines Update</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>February 17, 2016 at 05:00:00pm</p></header><div class="content"><p>On Wed, Feb 17, 2016 at 3:49 PM, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; on Wed Feb 17 2016, Jacob Bandes-Storch &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt; Question about how to interpret/apply the guidelines:<br>&gt; &gt;<br>&gt; &gt;     &quot;[functions/methods] without side-effects should read as noun<br>&gt; phrases…&quot;<br>&gt; &gt;     &quot;Use the “ed/ing” rule to name the nonmutating counterpart of a<br>&gt; &gt; mutating method…&quot;<br>&gt; &gt;     &quot;The names of other types, properties, variables, and constants<br>&gt; should<br>&gt; &gt; read as nouns.&quot;<br>&gt; &gt;<br>&gt; &gt; Within these guidelines, how do we explain why<br>&gt; &gt; *-stringByExpandingTildeInPath* becomes &quot;var *expandingTildeInPath*&quot;? I&#39;m<br>&gt; &gt; wondering if the guidelines should clarify that the &quot;ed/ing rule&quot; may<br>&gt; apply<br>&gt; &gt; to more than just nonmutating methods with mutating counterparts.<br>&gt;<br>&gt; Why should it?<br>&gt;<br></p><p>Otherwise, it seems a case like this isn&#39;t really covered by the guidelines.<br></p><p><br>&gt;<br>&gt; &gt; I think that &quot;var expandingTildeInPath&quot; is probably the best choice for<br>&gt; &gt; this API, but I can&#39;t figure out how to reconcile it with the guidelines<br>&gt; as<br>&gt; &gt; written.<br>&gt;<br>&gt; The guidelines don&#39;t force you to spell it that way, but they allow it.<br>&gt;<br>&gt;     “x, expanding the tilde in its path”<br>&gt;<br>&gt; is a noun phrase.<br>&gt;<br></p><p>OK, I see. I guess what&#39;s confusing me is that I&#39;m not sure why both the<br>&quot;ed/ing rule&quot; and &quot;read as noun&quot; guidelines need to exist.<br></p><p>Maybe it would be clearer if the sentence were something like &quot;The names of<br>other types, properties, variables, and constants should read as nouns *at<br>the point of use (possibly including the receiver in the noun phrase)*.&quot;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160217/55e93ec5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>API Guidelines Update</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 17, 2016 at 05:00:00pm</p></header><div class="content"><p>on Wed Feb 17 2016, Jacob Bandes-Storch &lt;jtbandes-AT-gmail.com&gt; wrote:<br></p><p>&gt; On Wed, Feb 17, 2016 at 3:49 PM, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; on Wed Feb 17 2016, Jacob Bandes-Storch &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; &gt; Question about how to interpret/apply the guidelines:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;     &quot;[functions/methods] without side-effects should read as noun<br>&gt;&gt; phrases…&quot;<br>&gt;&gt; &gt;     &quot;Use the “ed/ing” rule to name the nonmutating counterpart of a<br>&gt;&gt; &gt; mutating method…&quot;<br>&gt;&gt; &gt;     &quot;The names of other types, properties, variables, and constants<br>&gt;&gt; should<br>&gt;&gt; &gt; read as nouns.&quot;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Within these guidelines, how do we explain why<br>&gt;&gt; &gt; *-stringByExpandingTildeInPath* becomes &quot;var *expandingTildeInPath*&quot;? I&#39;m<br>&gt;&gt; &gt; wondering if the guidelines should clarify that the &quot;ed/ing rule&quot; may<br>&gt;&gt; apply<br>&gt;&gt; &gt; to more than just nonmutating methods with mutating counterparts.<br>&gt;&gt;<br>&gt;&gt; Why should it?<br>&gt;&gt;<br>&gt;<br>&gt; Otherwise, it seems a case like this isn&#39;t really covered by the guidelines.<br>&gt;<br>&gt;&gt;<br>&gt;&gt; &gt; I think that &quot;var expandingTildeInPath&quot; is probably the best choice for<br>&gt;&gt; &gt; this API, but I can&#39;t figure out how to reconcile it with the guidelines<br>&gt;&gt; as<br>&gt;&gt; &gt; written.<br>&gt;&gt;<br>&gt;&gt; The guidelines don&#39;t force you to spell it that way, but they allow it.<br>&gt;&gt;<br>&gt;&gt;     “x, expanding the tilde in its path”<br>&gt;&gt;<br>&gt;&gt; is a noun phrase.<br>&gt;&gt;<br>&gt;<br>&gt; OK, I see. I guess what&#39;s confusing me is that I&#39;m not sure why both the<br>&gt; &quot;ed/ing rule&quot; and &quot;read as noun&quot; guidelines need to exist.<br></p><p>Because many methods are like:<br></p><p>        x.tracks(havingTitle: &quot;foo&quot;)<br></p><p>That reads as a noun phrase, but is not an &quot;ed&quot; or &quot;ing&quot;.  The reason<br>for &quot;ed&quot;/&quot;ing&quot; is to maintain a name association between a method that<br>forms a verb phrase at the call site (the mutating one) and a method<br>that forms a noun phrase at the call site.<br></p><p>&gt; Maybe it would be clearer if the sentence were something like &quot;The names of<br>&gt; other types, properties, variables, and constants should read as nouns *at<br>&gt; the point of use (possibly including the receiver in the noun phrase)*.&quot;<br></p><p>I don&#39;t believe that&#39;s needed.  The guidelines consistently and<br>repeatedly emphasize use sites, and I can&#39;t think of an invocation that<br>reads as a noun phrase with the receiver but doesn&#39;t without.  Can you?<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>API Guidelines Update</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>February 17, 2016 at 06:00:00pm</p></header><div class="content"><p>On Wed, Feb 17, 2016 at 5:43 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; on Wed Feb 17 2016, Jacob Bandes-Storch &lt;jtbandes-AT-gmail.com&gt; wrote:<br>&gt;<br>&gt; &gt; On Wed, Feb 17, 2016 at 3:49 PM, Dave Abrahams via swift-evolution &lt;<br>&gt; &gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; on Wed Feb 17 2016, Jacob Bandes-Storch &lt;swift-evolution at swift.org&gt;<br>&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt; Question about how to interpret/apply the guidelines:<br>&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt; &gt;     &quot;[functions/methods] without side-effects should read as noun<br>&gt; &gt;&gt; phrases…&quot;<br>&gt; &gt;&gt; &gt;     &quot;Use the “ed/ing” rule to name the nonmutating counterpart of a<br>&gt; &gt;&gt; &gt; mutating method…&quot;<br>&gt; &gt;&gt; &gt;     &quot;The names of other types, properties, variables, and constants<br>&gt; &gt;&gt; should<br>&gt; &gt;&gt; &gt; read as nouns.&quot;<br>&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt; &gt; Within these guidelines, how do we explain why<br>&gt; &gt;&gt; &gt; *-stringByExpandingTildeInPath* becomes &quot;var *expandingTildeInPath*&quot;?<br>&gt; I&#39;m<br>&gt; &gt;&gt; &gt; wondering if the guidelines should clarify that the &quot;ed/ing rule&quot; may<br>&gt; &gt;&gt; apply<br>&gt; &gt;&gt; &gt; to more than just nonmutating methods with mutating counterparts.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Why should it?<br>&gt; &gt;&gt;<br>&gt; &gt;<br>&gt; &gt; Otherwise, it seems a case like this isn&#39;t really covered by the<br>&gt; guidelines.<br>&gt; &gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt; I think that &quot;var expandingTildeInPath&quot; is probably the best choice<br>&gt; for<br>&gt; &gt;&gt; &gt; this API, but I can&#39;t figure out how to reconcile it with the<br>&gt; guidelines<br>&gt; &gt;&gt; as<br>&gt; &gt;&gt; &gt; written.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; The guidelines don&#39;t force you to spell it that way, but they allow it.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;     “x, expanding the tilde in its path”<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; is a noun phrase.<br>&gt; &gt;&gt;<br>&gt; &gt;<br>&gt; &gt; OK, I see. I guess what&#39;s confusing me is that I&#39;m not sure why both the<br>&gt; &gt; &quot;ed/ing rule&quot; and &quot;read as noun&quot; guidelines need to exist.<br>&gt;<br>&gt; Because many methods are like:<br>&gt;<br>&gt;         x.tracks(havingTitle: &quot;foo&quot;)<br>&gt;<br>&gt; That reads as a noun phrase, but is not an &quot;ed&quot; or &quot;ing&quot;.  The reason<br>&gt; for &quot;ed&quot;/&quot;ing&quot; is to maintain a name association between a method that<br>&gt; forms a verb phrase at the call site (the mutating one) and a method<br>&gt; that forms a noun phrase at the call site.<br>&gt;<br>&gt; &gt; Maybe it would be clearer if the sentence were something like &quot;The names<br>&gt; of<br>&gt; &gt; other types, properties, variables, and constants should read as nouns<br>&gt; *at<br>&gt; &gt; the point of use (possibly including the receiver in the noun phrase)*.&quot;<br>&gt;<br>&gt; I don&#39;t believe that&#39;s needed.  The guidelines consistently and<br>&gt; repeatedly emphasize use sites, and I can&#39;t think of an invocation that<br>&gt; reads as a noun phrase with the receiver but doesn&#39;t without.  Can you?<br>&gt;<br></p><p>I&#39;ll have to think about it more. I&#39;m trying to figure out why this seems<br>incomplete/confusing to me in some cases. &quot;expandingTilde&quot; doesn&#39;t &quot;feel<br>like&quot; a noun to me, but probably just because I&#39;m not a linguist.<br></p><p>Also, you could infer &quot;x.expanding...&quot; alone to mean &quot;x, *by* expanding...&quot;<br>or &quot;*whether *x *is* expanding...&quot;, so there might be some cases where it&#39;s<br>easy to confuse Bool properties with non-Bools.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160217/b2bcef51/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
