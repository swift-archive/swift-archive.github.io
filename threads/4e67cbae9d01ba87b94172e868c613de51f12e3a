<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2861bfeb71de9de58206bb6ae750bc2f?s=50"></div><header><strong>Request for Discussion: Setup closures</strong> from <string>ilya</string> &lt;ilya.nikokoshev at gmail.com&gt;<p>December  6, 2015 at 03:00:00am</p></header><div class="content"><p>&gt; PROBLEM: With many Apple-supplied classes, typical initializers fail to<br>fully set up an instance for use.  Here&#39;s one example: ...<br></p><p>FWIW, I created a configuration operator more then a year ago, and use it<br>in all of my Swift projects:<br></p><p>let task = NSTask() +=+ {<br>    $0.launchPath = &quot;/usr/bin/mdfind&quot;<br>    $0.arguments = [&quot;kMDItemDisplayName == *.playground&quot;]<br>    $0.standardOutput = pipe<br>}<br></p><p>Note you can also use the configured object in the rhs:<br></p><p>let questionLabel = UILabel() +=+ {<br>    $0.textAlignment = .Center<br>    $0.font =  UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>    $0.text = currentQuestion.questionText<br>    $0.numberOfLines = 0<br>    view.addSubview($0)<br>}<br></p><p>This $0. certainly looks ugly and it would be great to be able to simplify<br>this. I don&#39;t llike the following much though (dot-syntax can be ambiguos<br>here, and using simply a method name is even worse):<br></p><p>let questionLabel = UILabel() +=+ {<br>    .textAlignment = .Center<br>    .font =  UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>    .text = currentQuestion.questionText<br>    .numberOfLines = 0<br>    view.addSubview($0)<br>}<br></p><p>Actually I would be happy with something like<br></p><p>let questionLabel = UILabel() .{<br>    ..textAlignment = .Center<br>    ..font = UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>    ..text = currentQuestion.questionText<br>    ..numberOfLines = 0<br>    view.addSubview($0)<br>}<br></p><p>Other thoughts?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/4e672e3a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Request for Discussion: Setup closures</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>December  5, 2015 at 10:00:00pm</p></header><div class="content"><p>As stated previously, I think a more specific solution is the best way to address the initialization / setup / configuration problem. While that is the case I did think some more about the ideas in this thread.<br></p><p>I believe two things are being proposed here:<br></p><p>1. The ability to append a trailing closure to any initializer (that doesn’t already declare one itself) that accepts a single argument of the initialized type.  If the caller supplies such a closure, the compiler performs a code transformation as follows:<br></p><p>let questionLabel = UILabel() {<br>	$0.textAlignment = .Center<br>	$0.font =  UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>	$0.numberOfLines = 0<br>}<br></p><p>becomes something like this (which is valid Swift today:<br></p><p>let questionLabel = UILabel(); {<br>	$0.textAlignment = .Center<br>	$0.font =  UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>	$0.numberOfLines = 0<br>}(questionLabel)<br></p><p>The code transformation doesn’t actually buy us much.  I’m a big believer in removing the need for clutter and boilerplate as much as possible, but even I must admit that the difference is really small and can be reduced a bit further using currently valid Swift code as demonstrated by the “configuration operator” mentioned in the previous post.<br></p><p>2. A new abbreviation of the $0 shorthand that would be valid only as the first characters on a line of code.  For consistency this shorthand should work in any closure, not just in “setup closures”.  I agree that $0 is uglier than necessary in this use case which would be relatively common in Cocoa code if this pattern becomes common.<br></p><p>The biggest drawback I can think of to a feature like this is that it is a feature specifically designed to make the use of var members more convenient.  It might be a good thing that “setup closures&quot; are a little bit ugly given that they are only able to “setup&quot; mutable members and require those members to be initialized to potentially meaningless default values (or worse, IUO members defaulted to nil!).  <br></p><p>Ideally an instance would be configured correctly when the initializer completes and we should work to find language solutions to make this safe and convenient.  Once we have the right language solutions ideally we can use them in new types and retrofit existing types to use them over time, thus eliminating the need for “setup closures” alltogether.<br></p><p><br>&gt; On Dec 5, 2015, at 6:16 PM, ilya via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; &gt; PROBLEM: With many Apple-supplied classes, typical initializers fail to fully set up an instance for use.  Here&#39;s one example: ...<br>&gt; <br>&gt; FWIW, I created a configuration operator more then a year ago, and use it in all of my Swift projects:<br>&gt; <br>&gt; let task = NSTask() +=+ {<br>&gt;     $0.launchPath = &quot;/usr/bin/mdfind&quot;<br>&gt;     $0.arguments = [&quot;kMDItemDisplayName == *.playground&quot;]<br>&gt;     $0.standardOutput = pipe<br>&gt; }<br>&gt; <br>&gt; Note you can also use the configured object in the rhs:<br>&gt; <br>&gt; let questionLabel = UILabel() +=+ {<br>&gt;     $0.textAlignment = .Center<br>&gt;     $0.font =  UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>&gt;     $0.text = currentQuestion.questionText<br>&gt;     $0.numberOfLines = 0<br>&gt;     view.addSubview($0)<br>&gt; }<br>&gt; <br>&gt; This $0. certainly looks ugly and it would be great to be able to simplify this. I don&#39;t llike the following much though (dot-syntax can be ambiguos here, and using simply a method name is even worse):<br>&gt; <br>&gt; let questionLabel = UILabel() +=+ {<br>&gt;     .textAlignment = .Center<br>&gt;     .font =  UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>&gt;     .text = currentQuestion.questionText<br>&gt;     .numberOfLines = 0<br>&gt;     view.addSubview($0)<br>&gt; }<br>&gt; <br>&gt; Actually I would be happy with something like<br>&gt; <br>&gt; let questionLabel = UILabel() .{<br>&gt;     ..textAlignment = .Center<br>&gt;     ..font = UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>&gt;     ..text = currentQuestion.questionText<br>&gt;     ..numberOfLines = 0<br>&gt;     view.addSubview($0)<br>&gt; }<br>&gt; <br>&gt; Other thoughts?<br>&gt; <br>&gt;   <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/639125f8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/706baf09e574d70814e4af2d54a315e0?s=50"></div><header><strong>Request for Discussion: Setup closures</strong> from <string>Vinicius Vendramini</string> &lt;vinivendra at gmail.com&gt;<p>December  6, 2015 at 11:00:00am</p></header><div class="content"><p>While I understand the motivation behind this change, I think it’s pretty far from paying the addition of a new language feature. Is this<br></p><p>let questionLabel = UILabel() {<br>    $0.textAlignment = .Center<br>    $0.font =  UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>    $0.text = currentQuestion.questionText<br>    $0.numberOfLines = 0<br>    view.addSubview($0)<br>}<br></p><p>really that much better than this?<br></p><p>let label = UILabel()<br></p><p>label.textAlignment = .Center<br>label.font =  UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>label.text = currentQuestion.questionText<br>label.numberOfLines = 0<br>view.addSubview(label)<br></p><p>To be honest, the second looks much more readable to me. I like the indentation of the first one, but that doesn’t sound like enough of a reason: one could easily re-indent the lines to one’s liking (which actually looks kinda good with 4-spaces indentation, since `var` or `let` plus a space equals 4 characters:)<br></p><p>let label = UILabel()<br>    label.textAlignment = .Center<br>    label.font =  UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>    label.text = currentQuestion.questionText<br>    label.numberOfLines = 0<br>    view.addSubview(label)<br></p><p>As far as I understand the proposals so far, this approach only changes the way we’d write the initialization, but doesn’t actually allow us to do something that couldn’t be done earlier (e.g. access internal members, change immutable variables…) right? <br></p><p><br>&gt; On Dec 5, 2015, at 11:31 PM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; As stated previously, I think a more specific solution is the best way to address the initialization / setup / configuration problem. While that is the case I did think some more about the ideas in this thread.<br>&gt; <br>&gt; I believe two things are being proposed here:<br>&gt; <br>&gt; 1. The ability to append a trailing closure to any initializer (that doesn’t already declare one itself) that accepts a single argument of the initialized type.  If the caller supplies such a closure, the compiler performs a code transformation as follows:<br>&gt; <br>&gt; let questionLabel = UILabel() {<br>&gt; 	$0.textAlignment = .Center<br>&gt; 	$0.font =  UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>&gt; 	$0.numberOfLines = 0<br>&gt; }<br>&gt; <br>&gt; becomes something like this (which is valid Swift today:<br>&gt; <br>&gt; let questionLabel = UILabel(); {<br>&gt; 	$0.textAlignment = .Center<br>&gt; 	$0.font =  UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>&gt; 	$0.numberOfLines = 0<br>&gt; }(questionLabel)<br>&gt; <br>&gt; The code transformation doesn’t actually buy us much.  I’m a big believer in removing the need for clutter and boilerplate as much as possible, but even I must admit that the difference is really small and can be reduced a bit further using currently valid Swift code as demonstrated by the “configuration operator” mentioned in the previous post.<br>&gt; <br>&gt; 2. A new abbreviation of the $0 shorthand that would be valid only as the first characters on a line of code.  For consistency this shorthand should work in any closure, not just in “setup closures”.  I agree that $0 is uglier than necessary in this use case which would be relatively common in Cocoa code if this pattern becomes common.<br>&gt; <br>&gt; The biggest drawback I can think of to a feature like this is that it is a feature specifically designed to make the use of var members more convenient.  It might be a good thing that “setup closures&quot; are a little bit ugly given that they are only able to “setup&quot; mutable members and require those members to be initialized to potentially meaningless default values (or worse, IUO members defaulted to nil!).  <br>&gt; <br>&gt; Ideally an instance would be configured correctly when the initializer completes and we should work to find language solutions to make this safe and convenient.  Once we have the right language solutions ideally we can use them in new types and retrofit existing types to use them over time, thus eliminating the need for “setup closures” alltogether.<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 5, 2015, at 6:16 PM, ilya via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &gt; PROBLEM: With many Apple-supplied classes, typical initializers fail to fully set up an instance for use.  Here&#39;s one example: ...<br>&gt;&gt; <br>&gt;&gt; FWIW, I created a configuration operator more then a year ago, and use it in all of my Swift projects:<br>&gt;&gt; <br>&gt;&gt; let task = NSTask() +=+ {<br>&gt;&gt;     $0.launchPath = &quot;/usr/bin/mdfind&quot;<br>&gt;&gt;     $0.arguments = [&quot;kMDItemDisplayName == *.playground&quot;]<br>&gt;&gt;     $0.standardOutput = pipe<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Note you can also use the configured object in the rhs:<br>&gt;&gt; <br>&gt;&gt; let questionLabel = UILabel() +=+ {<br>&gt;&gt;     $0.textAlignment = .Center<br>&gt;&gt;     $0.font =  UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>&gt;&gt;     $0.text = currentQuestion.questionText<br>&gt;&gt;     $0.numberOfLines = 0<br>&gt;&gt;     view.addSubview($0)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; This $0. certainly looks ugly and it would be great to be able to simplify this. I don&#39;t llike the following much though (dot-syntax can be ambiguos here, and using simply a method name is even worse):<br>&gt;&gt; <br>&gt;&gt; let questionLabel = UILabel() +=+ {<br>&gt;&gt;     .textAlignment = .Center<br>&gt;&gt;     .font =  UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>&gt;&gt;     .text = currentQuestion.questionText<br>&gt;&gt;     .numberOfLines = 0<br>&gt;&gt;     view.addSubview($0)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Actually I would be happy with something like<br>&gt;&gt; <br>&gt;&gt; let questionLabel = UILabel() .{<br>&gt;&gt;     ..textAlignment = .Center<br>&gt;&gt;     ..font = UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>&gt;&gt;     ..text = currentQuestion.questionText<br>&gt;&gt;     ..numberOfLines = 0<br>&gt;&gt;     view.addSubview($0)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Other thoughts?<br>&gt;&gt; <br>&gt;&gt;   <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/7966251b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Request for Discussion: Setup closures</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>December  6, 2015 at 10:00:00am</p></header><div class="content"><p>I agree that this is pretty far from paying for a language feature.  I much prefer the ideas we are discussing in the &quot;helpers for initializing properties of same name as parameters&quot; thread for reasons already stated.<br></p><p>Sent from my iPad<br></p><p>&gt; On Dec 6, 2015, at 10:36 AM, Vinicius Vendramini &lt;vinivendra at gmail.com&gt; wrote:<br>&gt; <br>&gt; While I understand the motivation behind this change, I think it’s pretty far from paying the addition of a new language feature. Is this<br>&gt; <br>&gt; let questionLabel = UILabel() {<br>&gt;     $0.textAlignment = .Center<br>&gt;     $0.font =  UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>&gt;     $0.text = currentQuestion.questionText<br>&gt;     $0.numberOfLines = 0<br>&gt;     view.addSubview($0)<br>&gt; }<br>&gt; <br>&gt; really that much better than this?<br>&gt; <br>&gt; let label = UILabel()<br>&gt; <br>&gt; label.textAlignment = .Center<br>&gt; label.font =  UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>&gt; label.text = currentQuestion.questionText<br>&gt; label.numberOfLines = 0<br>&gt; view.addSubview(label)<br>&gt; <br>&gt; To be honest, the second looks much more readable to me. I like the indentation of the first one, but that doesn’t sound like enough of a reason: one could easily re-indent the lines to one’s liking (which actually looks kinda good with 4-spaces indentation, since `var` or `let` plus a space equals 4 characters:)<br>&gt; <br>&gt; let label = UILabel()<br>&gt;     label.textAlignment = .Center<br>&gt;     label.font =  UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>&gt;     label.text = currentQuestion.questionText<br>&gt;     label.numberOfLines = 0<br>&gt;     view.addSubview(label)<br>&gt; <br>&gt; As far as I understand the proposals so far, this approach only changes the way we’d write the initialization, but doesn’t actually allow us to do something that couldn’t be done earlier (e.g. access internal members, change immutable variables…) right? <br>&gt; <br>&gt; <br>&gt;&gt; On Dec 5, 2015, at 11:31 PM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; As stated previously, I think a more specific solution is the best way to address the initialization / setup / configuration problem. While that is the case I did think some more about the ideas in this thread.<br>&gt;&gt; <br>&gt;&gt; I believe two things are being proposed here:<br>&gt;&gt; <br>&gt;&gt; 1. The ability to append a trailing closure to any initializer (that doesn’t already declare one itself) that accepts a single argument of the initialized type.  If the caller supplies such a closure, the compiler performs a code transformation as follows:<br>&gt;&gt; <br>&gt;&gt; let questionLabel = UILabel() {<br>&gt;&gt; 	$0.textAlignment = .Center<br>&gt;&gt; 	$0.font =  UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>&gt;&gt; 	$0.numberOfLines = 0<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; becomes something like this (which is valid Swift today:<br>&gt;&gt; <br>&gt;&gt; let questionLabel = UILabel(); {<br>&gt;&gt; 	$0.textAlignment = .Center<br>&gt;&gt; 	$0.font =  UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>&gt;&gt; 	$0.numberOfLines = 0<br>&gt;&gt; }(questionLabel)<br>&gt;&gt; <br>&gt;&gt; The code transformation doesn’t actually buy us much.  I’m a big believer in removing the need for clutter and boilerplate as much as possible, but even I must admit that the difference is really small and can be reduced a bit further using currently valid Swift code as demonstrated by the “configuration operator” mentioned in the previous post.<br>&gt;&gt; <br>&gt;&gt; 2. A new abbreviation of the $0 shorthand that would be valid only as the first characters on a line of code.  For consistency this shorthand should work in any closure, not just in “setup closures”.  I agree that $0 is uglier than necessary in this use case which would be relatively common in Cocoa code if this pattern becomes common.<br>&gt;&gt; <br>&gt;&gt; The biggest drawback I can think of to a feature like this is that it is a feature specifically designed to make the use of var members more convenient.  It might be a good thing that “setup closures&quot; are a little bit ugly given that they are only able to “setup&quot; mutable members and require those members to be initialized to potentially meaningless default values (or worse, IUO members defaulted to nil!).  <br>&gt;&gt; <br>&gt;&gt; Ideally an instance would be configured correctly when the initializer completes and we should work to find language solutions to make this safe and convenient.  Once we have the right language solutions ideally we can use them in new types and retrofit existing types to use them over time, thus eliminating the need for “setup closures” alltogether.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 5, 2015, at 6:16 PM, ilya via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt; PROBLEM: With many Apple-supplied classes, typical initializers fail to fully set up an instance for use.  Here&#39;s one example: ...<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; FWIW, I created a configuration operator more then a year ago, and use it in all of my Swift projects:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let task = NSTask() +=+ {<br>&gt;&gt;&gt;     $0.launchPath = &quot;/usr/bin/mdfind&quot;<br>&gt;&gt;&gt;     $0.arguments = [&quot;kMDItemDisplayName == *.playground&quot;]<br>&gt;&gt;&gt;     $0.standardOutput = pipe<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Note you can also use the configured object in the rhs:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let questionLabel = UILabel() +=+ {<br>&gt;&gt;&gt;     $0.textAlignment = .Center<br>&gt;&gt;&gt;     $0.font =  UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>&gt;&gt;&gt;     $0.text = currentQuestion.questionText<br>&gt;&gt;&gt;     $0.numberOfLines = 0<br>&gt;&gt;&gt;     view.addSubview($0)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This $0. certainly looks ugly and it would be great to be able to simplify this. I don&#39;t llike the following much though (dot-syntax can be ambiguos here, and using simply a method name is even worse):<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let questionLabel = UILabel() +=+ {<br>&gt;&gt;&gt;     .textAlignment = .Center<br>&gt;&gt;&gt;     .font =  UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>&gt;&gt;&gt;     .text = currentQuestion.questionText<br>&gt;&gt;&gt;     .numberOfLines = 0<br>&gt;&gt;&gt;     view.addSubview($0)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Actually I would be happy with something like<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let questionLabel = UILabel() .{<br>&gt;&gt;&gt;     ..textAlignment = .Center<br>&gt;&gt;&gt;     ..font = UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>&gt;&gt;&gt;     ..text = currentQuestion.questionText<br>&gt;&gt;&gt;     ..numberOfLines = 0<br>&gt;&gt;&gt;     view.addSubview($0)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Other thoughts?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   <br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/dbd3ca02/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>Request for Discussion: Setup closures</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>December  6, 2015 at 12:00:00pm</p></header><div class="content"><p>I come across this topic and I instantly was overwhelmed by this idea of the Setup Closures. I build a little extension just to test it with UIKit. I thought adding this keyword for Setup Closures was a good idea. If we also could remove this in from the closure it would look good on my opinion.<br></p><p>protocol SettableType {<br>     <br>    init() // designated initializer<br>}<br></p><p>extension SettableType {<br>     <br>    init(@noescape setup: (this: Self) -&gt; Void) {<br>         <br>        self.init()<br>        setup(this: self)<br>    }<br>}<br></p><p>extension UIView: SettableType {}<br></p><p>let view = UIView()<br></p><p>let questionLabel = UILabel() { this in /// &lt;- REMOVE  <br>     <br>    this.textAlignment = .Center<br>    this.font = UIFont(name:&quot;SomeFontName&quot;, size: 72)<br>    this.text = &quot;Hello World&quot;<br>    this.numberOfLines = 0<br>    view.addSubview(this)<br>}<br></p><p>— <br>Regards Adrian<br></p><p>Am 6. Dezember 2015 bei 01:16:31, ilya via swift-evolution (swift-evolution at swift.org) schrieb:<br></p><p>&gt; PROBLEM: With many Apple-supplied classes, typical initializers fail to fully set up an instance for use.  Here&#39;s one example: ...<br></p><p>FWIW, I created a configuration operator more then a year ago, and use it in all of my Swift projects:<br></p><p>let task = NSTask() +=+ {<br>    $0.launchPath = &quot;/usr/bin/mdfind&quot;<br>    $0.arguments = [&quot;kMDItemDisplayName == *.playground&quot;]<br>    $0.standardOutput = pipe<br>}<br></p><p>Note you can also use the configured object in the rhs:<br></p><p>let questionLabel = UILabel() +=+ {<br>    $0.textAlignment = .Center<br>    $0.font =  UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>    $0.text = currentQuestion.questionText<br>    $0.numberOfLines = 0<br>    view.addSubview($0)<br>}<br></p><p>This $0. certainly looks ugly and it would be great to be able to simplify this. I don&#39;t llike the following much though (dot-syntax can be ambiguos here, and using simply a method name is even worse):<br></p><p>let questionLabel = UILabel() +=+ {<br>    .textAlignment = .Center<br>    .font =  UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>    .text = currentQuestion.questionText<br>    .numberOfLines = 0<br>    view.addSubview($0)<br>}<br></p><p>Actually I would be happy with something like<br></p><p>let questionLabel = UILabel() .{<br>    ..textAlignment = .Center<br>    ..font = UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>    ..text = currentQuestion.questionText<br>    ..numberOfLines = 0<br>    view.addSubview($0)<br>}<br></p><p>Other thoughts?<br></p><p>  <br> _______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/8af1d99d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c354b21edb9ba56fe6b42950e08195fa?s=50"></div><header><strong>Request for Discussion: Setup closures</strong> from <string>Jonathan Hull</string> &lt;jhull at gbis.com&gt;<p>December  6, 2015 at 04:00:00am</p></header><div class="content"><p>I often do the following:<br></p><p>let questionLabel:UILabel = {<br>    let label = UILabel()<br>    label.textAlignment = .Center<br>    label.font = UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>    label.text = currentQuestion.questionText<br>    label.numberOfLines = 0<br>    view.addSubview(label)<br>    return label<br>}()<br></p><p><br>&gt; On Dec 6, 2015, at 3:59 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; let questionLabel = UILabel() .{<br>&gt;&gt;     ..textAlignment = .Center<br>&gt;&gt;     ..font = UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>&gt;&gt;     ..text = currentQuestion.questionText<br>&gt;&gt;     ..numberOfLines = 0<br>&gt;&gt;     view.addSubview($0)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Other thoughts?<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/cf916268/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d933552ea7fda10a4488a74223c00988?s=50"></div><header><strong>Request for Discussion: Setup closures</strong> from <string>Thorsten Seitz</string> &lt;thorsten.seitz at web.de&gt;<p>December  6, 2015 at 02:00:00pm</p></header><div class="content"><p>Nice!<br>Actually I don’t mind the argument of the closure at all and would probably just name it after the class, i.e. „label“ in the example:<br></p><p>let questionLabel = UILabel() { label in<br>     <br>    label.textAlignment = .Center<br>    label.font = UIFont(name:&quot;SomeFontName&quot;, size: 72)<br>    label.text = &quot;Hello World&quot;<br>    label.numberOfLines = 0<br>    view.addSubview(label)<br>}<br></p><p>-Thorsten<br></p><p><br></p><p>&gt; Am 06.12.2015 um 12:59 schrieb Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; let questionLabel = UILabel() { this in /// &lt;- REMOVE  <br>&gt;      <br>&gt;     this.textAlignment = .Center<br>&gt;     this.font = UIFont(name:&quot;SomeFontName&quot;, size: 72)<br>&gt;     this.text = &quot;Hello World&quot;<br>&gt;     this.numberOfLines = 0<br>&gt;     view.addSubview(this)<br>&gt; }<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/fb2366f7/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Request for Discussion: Setup closures</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>December  6, 2015 at 10:00:00am</p></header><div class="content"><p>I have developed something similar as well (http://ericasadun.com/2015/11/15/speeding-up-swift-playgrounds-with-closure-initialization-swiftlang/).<br></p><p>Is yours capable of handling enums and structs that would otherwise be let after declaration because mine is not.<br></p><p>-- E<br></p><p><br>&gt; On Dec 5, 2015, at 5:16 PM, ilya via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; &gt; PROBLEM: With many Apple-supplied classes, typical initializers fail to fully set up an instance for use.  Here&#39;s one example: ...<br>&gt; <br>&gt; FWIW, I created a configuration operator more then a year ago, and use it in all of my Swift projects:<br>&gt; <br>&gt; let task = NSTask() +=+ {<br>&gt;     $0.launchPath = &quot;/usr/bin/mdfind&quot;<br>&gt;     $0.arguments = [&quot;kMDItemDisplayName == *.playground&quot;]<br>&gt;     $0.standardOutput = pipe<br>&gt; }<br>&gt; <br>&gt; Note you can also use the configured object in the rhs:<br>&gt; <br>&gt; let questionLabel = UILabel() +=+ {<br>&gt;     $0.textAlignment = .Center<br>&gt;     $0.font =  UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>&gt;     $0.text = currentQuestion.questionText<br>&gt;     $0.numberOfLines = 0<br>&gt;     view.addSubview($0)<br>&gt; }<br>&gt; <br>&gt; This $0. certainly looks ugly and it would be great to be able to simplify this. I don&#39;t llike the following much though (dot-syntax can be ambiguos here, and using simply a method name is even worse):<br>&gt; <br>&gt; let questionLabel = UILabel() +=+ {<br>&gt;     .textAlignment = .Center<br>&gt;     .font =  UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>&gt;     .text = currentQuestion.questionText<br>&gt;     .numberOfLines = 0<br>&gt;     view.addSubview($0)<br>&gt; }<br>&gt; <br>&gt; Actually I would be happy with something like<br>&gt; <br>&gt; let questionLabel = UILabel() .{<br>&gt;     ..textAlignment = .Center<br>&gt;     ..font = UIFont(name:&quot;DnealianManuscript&quot;, size: 72)<br>&gt;     ..text = currentQuestion.questionText<br>&gt;     ..numberOfLines = 0<br>&gt;     view.addSubview($0)<br>&gt; }<br>&gt; <br>&gt; Other thoughts?<br>&gt; <br>&gt;   <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/444bab91/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
