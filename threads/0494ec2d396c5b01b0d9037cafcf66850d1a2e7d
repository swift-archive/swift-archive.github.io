<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d3c5f7382824133c2718c8effb5894fb?s=50"></div><header><strong>Objective-C’s @compatibility_alias =&gt; Swift’s typealias?</strong> from <string>Ayaka Nonaka</string> &lt;ayanonagon at gmail.com&gt;<p>June 30, 2016 at 03:00:00pm</p></header><div class="content"><p>Hi Swift community,<br></p><p><br>I was wondering if bridging Objective-C’s @compatibility_alias to Swift’s<br>typealias is something that we have considered adding support for.<br></p><p>For example, @compatibility_alias is useful for things like adding an alias<br>like DCColor for UIColor and NSColor depending on the target. Here’s an<br>example from our codebase:<br></p><p>// For color compatibility, we alias DCColor to the appropriate class<br>#if DC_TARGET_MOBILE<br>#import &lt;UIKit/UIKit.h&gt;<br>@compatibility_alias DCColor UIColor;<br>#else<br>#import &lt;Cocoa/Cocoa.h&gt;<br>@compatibility_alias DCColor NSColor;<br>#endif<br></p><p>We expected DCColor to be exposed to our Swift code, but it turns out that<br>it is not. I’d imagine that we’re not the only ones using<br>@compatibility_alias for similar things and other things that are useful.<br>It would be really cool to see seamless bridging between<br>@compatibility_alias and typealias, especially since we’ve seen a lot of<br>other great backwards compatibility features in Swift 3.0 like importing<br>lightweight-generics and #keyPath.<br></p><p>Thanks for reading! :D<br></p><p>Ayaka<br></p><p>-- <br>Ayaka Nonaka<br>@ayanonagon &lt;https://twitter.com/ayanonagon&gt; | www.ayaka.me<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160630/04942e7d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>Objective-C’s @compatibility_alias =&gt; Swift’s typealias?</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>June 30, 2016 at 05:00:00pm</p></header><div class="content"><p>Makes sense to me!<br></p><p>l8r<br>Sean<br></p><p>Sent from my iPad<br></p><p>&gt; On Jun 30, 2016, at 5:16 PM, Ayaka Nonaka via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Swift community,<br>&gt; <br>&gt; I was wondering if bridging Objective-C’s @compatibility_alias to Swift’s typealias is something that we have considered adding support for.<br>&gt; <br>&gt; For example, @compatibility_alias is useful for things like adding an alias like DCColor for UIColor and NSColor depending on the target. Here’s an example from our codebase:<br>&gt; <br>&gt; // For color compatibility, we alias DCColor to the appropriate class<br>&gt; #if DC_TARGET_MOBILE<br>&gt; #import &lt;UIKit/UIKit.h&gt;<br>&gt; @compatibility_alias DCColor UIColor;<br>&gt; #else<br>&gt; #import &lt;Cocoa/Cocoa.h&gt;<br>&gt; @compatibility_alias DCColor NSColor;<br>&gt; #endif<br>&gt; <br>&gt; We expected DCColor to be exposed to our Swift code, but it turns out that it is not. I’d imagine that we’re not the only ones using @compatibility_alias for similar things and other things that are useful. It would be really cool to see seamless bridging between @compatibility_alias and typealias, especially since we’ve seen a lot of other great backwards compatibility features in Swift 3.0 like importing lightweight-generics and #keyPath.<br>&gt; <br>&gt; Thanks for reading! :D<br>&gt; <br>&gt; Ayaka<br>&gt; <br>&gt; -- <br>&gt; Ayaka Nonaka<br>&gt; @ayanonagon | www.ayaka.me<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160630/14af4b79/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>Objective-C’s @compatibility_alias =&gt; Swift’s typealias?</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>July  1, 2016 at 09:00:00am</p></header><div class="content"><p>+1 I was just thinking the same thing a few days ago, thanks for bringing<br>it up!<br></p><p>On Friday, 1 July 2016, Sean Heber via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Makes sense to me!<br>&gt;<br>&gt; l8r<br>&gt; Sean<br>&gt;<br>&gt; Sent from my iPad<br>&gt;<br>&gt; On Jun 30, 2016, at 5:16 PM, Ayaka Nonaka via swift-evolution &lt;<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt; Hi Swift community,<br>&gt;<br>&gt;<br>&gt; I was wondering if bridging Objective-C’s @compatibility_alias to Swift’s<br>&gt; typealias is something that we have considered adding support for.<br>&gt;<br>&gt; For example, @compatibility_alias is useful for things like adding an<br>&gt; alias like DCColor for UIColor and NSColor depending on the target.<br>&gt; Here’s an example from our codebase:<br>&gt;<br>&gt; // For color compatibility, we alias DCColor to the appropriate class<br>&gt; #if DC_TARGET_MOBILE<br>&gt; #import &lt;UIKit/UIKit.h&gt;<br>&gt; @compatibility_alias DCColor UIColor;<br>&gt; #else<br>&gt; #import &lt;Cocoa/Cocoa.h&gt;<br>&gt; @compatibility_alias DCColor NSColor;<br>&gt; #endif<br>&gt;<br>&gt; We expected DCColor to be exposed to our Swift code, but it turns out<br>&gt; that it is not. I’d imagine that we’re not the only ones using<br>&gt; @compatibility_alias for similar things and other things that are useful.<br>&gt; It would be really cool to see seamless bridging between<br>&gt; @compatibility_alias and typealias, especially since we’ve seen a lot of<br>&gt; other great backwards compatibility features in Swift 3.0 like importing<br>&gt; lightweight-generics and #keyPath.<br>&gt;<br>&gt; Thanks for reading! :D<br>&gt;<br>&gt; Ayaka<br>&gt;<br>&gt; --<br>&gt; Ayaka Nonaka<br>&gt; @ayanonagon &lt;https://twitter.com/ayanonagon&gt; | www.ayaka.me<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/a338da85/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8ae34e6aaf28c0e1fe929f36897d107e?s=50"></div><header><strong>Objective-C’s @compatibility_alias =&gt; Swift’s typealias?</strong> from <string>Harlan Haskins</string> &lt;harlan at harlanhaskins.com&gt;<p>June 30, 2016 at 04:00:00pm</p></header><div class="content"><p>+1. Robert and I are toying with an implementation right now; it’s really straightforward.<br></p><p>— Harlan<br></p><p>&gt; On Jun 30, 2016, at 3:16 PM, Ayaka Nonaka via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Swift community,<br>&gt; <br>&gt; I was wondering if bridging Objective-C’s @compatibility_alias to Swift’s typealias is something that we have considered adding support for.<br>&gt; <br>&gt; For example, @compatibility_alias is useful for things like adding an alias like DCColor for UIColor and NSColor depending on the target. Here’s an example from our codebase:<br>&gt; <br>&gt; // For color compatibility, we alias DCColor to the appropriate class<br>&gt; #if DC_TARGET_MOBILE<br>&gt; #import &lt;UIKit/UIKit.h&gt;<br>&gt; @compatibility_alias DCColor UIColor;<br>&gt; #else<br>&gt; #import &lt;Cocoa/Cocoa.h&gt;<br>&gt; @compatibility_alias DCColor NSColor;<br>&gt; #endif<br>&gt; <br>&gt; We expected DCColor to be exposed to our Swift code, but it turns out that it is not. I’d imagine that we’re not the only ones using @compatibility_alias for similar things and other things that are useful. It would be really cool to see seamless bridging between @compatibility_alias and typealias, especially since we’ve seen a lot of other great backwards compatibility features in Swift 3.0 like importing lightweight-generics and #keyPath.<br>&gt; <br>&gt; Thanks for reading! :D<br>&gt; <br>&gt; Ayaka<br>&gt; <br>&gt; -- <br>&gt; Ayaka Nonaka<br>&gt; @ayanonagon &lt;https://twitter.com/ayanonagon&gt; | www.ayaka.me &lt;http://www.ayaka.me/&gt;_______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160630/c0fd9d23/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d3c5f7382824133c2718c8effb5894fb?s=50"></div><header><strong>Objective-C’s @compatibility_alias =&gt; Swift’s typealias?</strong> from <string>Ayaka Nonaka</string> &lt;ayanonagon at gmail.com&gt;<p>June 30, 2016 at 04:00:00pm</p></header><div class="content"><p>That’s so great to hear. Thank you! :)<br></p><p>On Thu, Jun 30, 2016 at 4:36 PM, Harlan Haskins &lt;harlan at harlanhaskins.com&gt;<br>wrote:<br></p><p>&gt; +1. Robert and I are toying with an implementation right now; it’s really<br>&gt; straightforward.<br>&gt;<br>&gt; — Harlan<br>&gt;<br>&gt; On Jun 30, 2016, at 3:16 PM, Ayaka Nonaka via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hi Swift community,<br>&gt;<br>&gt;<br>&gt; I was wondering if bridging Objective-C’s @compatibility_alias to Swift’s<br>&gt; typealias is something that we have considered adding support for.<br>&gt;<br>&gt; For example, @compatibility_alias is useful for things like adding an<br>&gt; alias like DCColor for UIColor and NSColor depending on the target.<br>&gt; Here’s an example from our codebase:<br>&gt;<br>&gt; // For color compatibility, we alias DCColor to the appropriate class<br>&gt; #if DC_TARGET_MOBILE<br>&gt; #import &lt;UIKit/UIKit.h&gt;<br>&gt; @compatibility_alias DCColor UIColor;<br>&gt; #else<br>&gt; #import &lt;Cocoa/Cocoa.h&gt;<br>&gt; @compatibility_alias DCColor NSColor;<br>&gt; #endif<br>&gt;<br>&gt; We expected DCColor to be exposed to our Swift code, but it turns out<br>&gt; that it is not. I’d imagine that we’re not the only ones using<br>&gt; @compatibility_alias for similar things and other things that are useful.<br>&gt; It would be really cool to see seamless bridging between<br>&gt; @compatibility_alias and typealias, especially since we’ve seen a lot of<br>&gt; other great backwards compatibility features in Swift 3.0 like importing<br>&gt; lightweight-generics and #keyPath.<br>&gt;<br>&gt; Thanks for reading! :D<br>&gt;<br>&gt; Ayaka<br>&gt;<br>&gt; --<br>&gt; Ayaka Nonaka<br>&gt; @ayanonagon &lt;https://twitter.com/ayanonagon&gt; | www.ayaka.me<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br></p><p><br>-- <br>Ayaka Nonaka<br>@ayanonagon &lt;https://twitter.com/ayanonagon&gt; | www.ayaka.me<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160630/d9866e6f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/881ccaf2edd00d9951f1cb8fe899d336?s=50"></div><header><strong>Objective-C’s @compatibility_alias =&gt; Swift’s typealias?</strong> from <string>Nicholas Maccharoli</string> &lt;nmaccharoli at gmail.com&gt;<p>July  1, 2016 at 10:00:00am</p></header><div class="content"><p>+1<br></p><p>On Fri, Jul 1, 2016 at 8:47 AM, Ayaka Nonaka via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; That’s so great to hear. Thank you! :)<br>&gt;<br>&gt; On Thu, Jun 30, 2016 at 4:36 PM, Harlan Haskins &lt;harlan at harlanhaskins.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; +1. Robert and I are toying with an implementation right now; it’s really<br>&gt;&gt; straightforward.<br>&gt;&gt;<br>&gt;&gt; — Harlan<br>&gt;&gt;<br>&gt;&gt; On Jun 30, 2016, at 3:16 PM, Ayaka Nonaka via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hi Swift community,<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I was wondering if bridging Objective-C’s @compatibility_alias to<br>&gt;&gt; Swift’s typealias is something that we have considered adding support<br>&gt;&gt; for.<br>&gt;&gt;<br>&gt;&gt; For example, @compatibility_alias is useful for things like adding an<br>&gt;&gt; alias like DCColor for UIColor and NSColor depending on the target.<br>&gt;&gt; Here’s an example from our codebase:<br>&gt;&gt;<br>&gt;&gt; // For color compatibility, we alias DCColor to the appropriate class<br>&gt;&gt; #if DC_TARGET_MOBILE<br>&gt;&gt; #import &lt;UIKit/UIKit.h&gt;<br>&gt;&gt; @compatibility_alias DCColor UIColor;<br>&gt;&gt; #else<br>&gt;&gt; #import &lt;Cocoa/Cocoa.h&gt;<br>&gt;&gt; @compatibility_alias DCColor NSColor;<br>&gt;&gt; #endif<br>&gt;&gt;<br>&gt;&gt; We expected DCColor to be exposed to our Swift code, but it turns out<br>&gt;&gt; that it is not. I’d imagine that we’re not the only ones using<br>&gt;&gt; @compatibility_alias for similar things and other things that are<br>&gt;&gt; useful. It would be really cool to see seamless bridging between<br>&gt;&gt; @compatibility_alias and typealias, especially since we’ve seen a lot of<br>&gt;&gt; other great backwards compatibility features in Swift 3.0 like importing<br>&gt;&gt; lightweight-generics and #keyPath.<br>&gt;&gt;<br>&gt;&gt; Thanks for reading! :D<br>&gt;&gt;<br>&gt;&gt; Ayaka<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Ayaka Nonaka<br>&gt;&gt; @ayanonagon &lt;https://twitter.com/ayanonagon&gt; | www.ayaka.me<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Ayaka Nonaka<br>&gt; @ayanonagon &lt;https://twitter.com/ayanonagon&gt; | www.ayaka.me<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/6e77ca73/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>Objective-C’s @compatibility_alias =&gt; Swift’s typealias?</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>June 30, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On Jun 30, 2016, at 3:16 PM, Ayaka Nonaka via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Swift community,<br>&gt; <br>&gt; I was wondering if bridging Objective-C’s @compatibility_alias to Swift’s typealias is something that we have considered adding support for.<br>&gt; <br>&gt; For example, @compatibility_alias is useful for things like adding an alias like DCColor for UIColor and NSColor depending on the target. Here’s an example from our codebase:<br>&gt; <br>&gt; // For color compatibility, we alias DCColor to the appropriate class<br>&gt; #if DC_TARGET_MOBILE<br>&gt; #import &lt;UIKit/UIKit.h&gt;<br>&gt; @compatibility_alias DCColor UIColor;<br>&gt; #else<br>&gt; #import &lt;Cocoa/Cocoa.h&gt;<br>&gt; @compatibility_alias DCColor NSColor;<br>&gt; #endif<br>&gt; <br>&gt; We expected DCColor to be exposed to our Swift code, but it turns out that it is not. I’d imagine that we’re not the only ones using @compatibility_alias for similar things and other things that are useful. It would be really cool to see seamless bridging between @compatibility_alias and typealias, especially since we’ve seen a lot of other great backwards compatibility features in Swift 3.0 like importing lightweight-generics and #keyPath.<br></p><p>It definitely makes sense for @compatibility_alias to map to ‘typealias’, and I’d consider it a bug fix that doesn’t need a proposal. Thanks for bringing this up! I had no idea anyone knew about or used @compatibility_alias...<br></p><p>	- Doug<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160630/6ce07bbd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>Objective-C’s @compatibility_alias =&gt; Swift’s typealias?</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>July  1, 2016 at 07:00:00am</p></header><div class="content"><p>+1 for Swift 3.<br></p><p>Sent from my iPhone<br></p><p>&gt; On 1 Jul 2016, at 04:08, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 30, 2016, at 3:16 PM, Ayaka Nonaka via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi Swift community,<br>&gt;&gt; <br>&gt;&gt; I was wondering if bridging Objective-C’s @compatibility_alias to Swift’s typealias is something that we have considered adding support for.<br>&gt;&gt; <br>&gt;&gt; For example, @compatibility_alias is useful for things like adding an alias like DCColor for UIColor and NSColor depending on the target. Here’s an example from our codebase:<br>&gt;&gt; <br>&gt;&gt; // For color compatibility, we alias DCColor to the appropriate class<br>&gt;&gt; #if DC_TARGET_MOBILE<br>&gt;&gt; #import &lt;UIKit/UIKit.h&gt;<br>&gt;&gt; @compatibility_alias DCColor UIColor;<br>&gt;&gt; #else<br>&gt;&gt; #import &lt;Cocoa/Cocoa.h&gt;<br>&gt;&gt; @compatibility_alias DCColor NSColor;<br>&gt;&gt; #endif<br>&gt;&gt; <br>&gt;&gt; We expected DCColor to be exposed to our Swift code, but it turns out that it is not. I’d imagine that we’re not the only ones using @compatibility_alias for similar things and other things that are useful. It would be really cool to see seamless bridging between @compatibility_alias and typealias, especially since we’ve seen a lot of other great backwards compatibility features in Swift 3.0 like importing lightweight-generics and #keyPath.<br>&gt; <br>&gt; It definitely makes sense for @compatibility_alias to map to ‘typealias’, and I’d consider it a bug fix that doesn’t need a proposal. Thanks for bringing this up! I had no idea anyone knew about or used @compatibility_alias...<br>&gt; <br>&gt; 	- Doug<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/780372ac/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
