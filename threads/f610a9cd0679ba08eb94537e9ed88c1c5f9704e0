<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Proposal draft] Introducing `indexed()` collections</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>October  4, 2016 at 01:00:00pm</p></header><div class="content"><p>on Mon Oct 03 2016, Kevin Ballard &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Mon, Oct 3, 2016, at 02:51 PM, Dave Abrahams via swift-evolution wrote:<br>&gt;&gt; <br>&gt;&gt; on Mon Oct 03 2016, Kevin Ballard &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &gt; On Fri, Sep 30, 2016, at 08:53 PM, Dave Abrahams via swift-evolution wrote:<br>&gt;&gt; &gt;&gt; <br>&gt;<br>&gt;&gt; &gt;&gt; on Wed Sep 28 2016, Erica Sadun &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt; <br>&gt;&gt; &gt;&gt; &gt; Indices have a specific, fixed meaning in Swift, which are used to create valid collection<br>&gt;&gt; &gt;&gt; &gt; subscripts. This proposal introduces indexed() to produce a more semantically relevant sequence<br>&gt;&gt; &gt; by<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; &gt; pairing a collection&#39;s indices with its members. While it is trivial to create a solution in Swift,<br>&gt;&gt; &gt;&gt; &gt; the most common developer approach shown here calculates indexes twice:<br>&gt;&gt; &gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; &gt; extension Collection {<br>&gt;&gt; &gt;&gt; &gt;     /// Returns a sequence of pairs (*idx*, *x*), where *idx* represents a<br>&gt;&gt; &gt;&gt; &gt;     /// consecutive collection index, and *x* represents an element of<br>&gt;&gt; &gt;&gt; &gt;     /// the sequence.<br>&gt;&gt; &gt;&gt; &gt;     func indexed() -&gt; Zip2Sequence&lt;Self.Indices, Self&gt; {<br>&gt;&gt; &gt;&gt; &gt;         return zip(indices, self)<br>&gt;&gt; &gt;&gt; &gt;     }<br>&gt;&gt; &gt;&gt; &gt; }<br>&gt;&gt; &gt;&gt; <br>&gt;&gt; &gt;&gt; How does this calculate indices twice?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; It calculates indices twice for any collection that uses<br>&gt;&gt; &gt; IndexingIterator as its iterator. <br>&gt;&gt; <br>&gt;&gt; Yes.  Not in general; just in that particular case.<br>&gt;&gt; <br>&gt;&gt; &gt; And for collections that doesn&#39;t, it still does the moral equivalent,<br>&gt;&gt; &gt; because it&#39;s calculating an index offset along with whatever work the<br>&gt;&gt; &gt; Iterator does to calculate the next element.<br>&gt;&gt; <br>&gt;&gt; Indexing is supposed to be cheap; almost free.  Lazy filtered<br>&gt;&gt; collections are an anomaly.  They&#39;re arguably not even legal<br>&gt;&gt; Collections, because advancing an index may not be O(1).  They exist<br>&gt;&gt; because they&#39;re useful, but you shouldn&#39;t pass them out without<br>&gt;&gt; understanding the consequences.<br>&gt;<br>&gt; Using an index is supposed to be cheap/free. Calculating the next<br>&gt; index is not guaranteed to be so. <br></p><p>It&#39;s supposed to be so.<br></p><p>&gt; If you want another example of something that&#39;s not lazy, try<br>&gt; String.CharacterView. Calculating the next index may be arbitrarily<br>&gt; complex since I can string as many combining marks together as I want,<br>&gt; though in practice it will be pretty cheap. But even this &quot;pretty<br>&gt; cheap&quot; is still work, and depending on what I&#39;m doing in the loop,<br>&gt; calculating character indexes may be a significant fraction of the<br>&gt; work performed.<br></p><p>Okay, you do have a point, here.  Also, Dictionary and Set can have<br>similar cost profiles for advancing an index.<br></p><p>&gt;&gt; &gt; As an example, if my collection is `someArray.lazy.filter(…)` then<br>&gt;&gt; &gt; zip(col.indices, col) will run the filter twice over the collection.<br>&gt;&gt; <br>&gt;&gt; Okay.<br>&gt;&gt; <br>&gt;&gt; &gt;&gt; &gt; Incrementing an index in some collections can be unnecessarily<br>&gt;&gt; &gt;&gt; &gt; costly. <br>&gt;&gt; &gt;&gt; <br>&gt;&gt; &gt;&gt; Seems like it&#39;s only *unnecessarily* costly in badly implemented<br>&gt;&gt; &gt;&gt; collections?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; A collection doesn&#39;t have to be badly-implemented to have a<br>&gt;&gt; &gt; non-trivial cost for calculating the next element. <br></p><p>To be clear, in those cases it is a necessary cost.<br></p><p>&gt;&gt; &gt; As above, someArray.lazy.filter(…) is a good example of such a<br>&gt;&gt; &gt; collection.<br>&gt;&gt; <br>&gt;&gt; Its conformance to Collection is quite sketchy.<br>&gt;<br>&gt; But it&#39;s not the only collection where calculating indexes is<br>&gt; non-trivial.<br></p><p>Okay.  Well, I suggest we bring this up again in phase 2, when it&#39;s<br>actionable.<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
