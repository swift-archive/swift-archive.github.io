<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ceee3416184656c101818713f1885af0?s=50"></div><header><strong>large dictionary literal overflows swiftc stack</strong> from <string>Jon Rafkind</string> &lt;jon.rafkind at hpe.com&gt;<p>March 23, 2016 at 06:00:00pm</p></header><div class="content"><p>I ran a test to see the maximum number of elements swift could handle before crashing and the numbers are<br></p><p>swift 2.2: 1213<br>swift 3-dev (mar 16 snapshot): 976<br></p><p>I don&#39;t know why swift 3 is lower than swift 2.2, but I&#39;m guessing its due to the same underlying cause, which is running out of stack space. If the swift 3 snapshot was compiled with different flags than 2.2 then swift 3 could have different stack usage properties, and thus run out of stack space quicker.<br></p><p>Here is a python script that generates a dictionary literal with some number of elements and runs swift on it, then does binary search to find the maximum number of elements before swift crashes.<br></p><p>#!/usr/bin/env python<br></p><p>def make_swift(n):<br>    def element(x):<br>        return &#39;&quot;x%d&quot;: &quot;0&quot;&#39; % x<br></p><p>    data = &quot;let n = [&quot;;<br>    data += &#39;,\n&#39;.join([element(x) for x in xrange(0, n)])<br>    data += &quot;]&quot;<br></p><p>    path = &#39;test-%d.swift&#39; % n<br>    file = open(path, &#39;w&#39;)<br>    file.write(data)<br>    file.write(&#39;\n&#39;)<br>    file.close()<br>    return path<br></p><p>def translate(path):<br>    print &quot;Testing %s&quot; % path<br>    import subprocess<br>    out = subprocess.call([&#39;swift&#39;, path])<br>    if out == 0:<br>        print &quot;  ok&quot;<br>    else:<br>        print &quot;  failed&quot;<br>    return out == 0<br></p><p>def test(n):<br>    path = make_swift(n)<br>    return translate(path)<br></p><p>def binary_search(low, high):<br>    while low &lt; high:<br>        middle = (low + high) / 2<br>        if middle == low:<br>            low = high<br>            middle = high<br>        if test(middle):<br>            low = middle<br>        else:<br>            high = middle<br>    return middle<br></p><p>#test(5000)<br></p><p>low = 1<br>high = 10<br>while test(high):<br>    low = high<br>    high *= 2<br></p><p>last_failed = binary_search(low, high)<br>print &quot;Failed at %d&quot; % last_failed<br></p><p>On 03/22/2016 09:03 PM, Kyle Jessup via swift-dev wrote:<br></p><p>Ok I will test with swift 3, but just to avoid any confusion I am not a developer on PerfectLib.<br></p><p><br></p><p>I am! Admittedly, that dictionary contains many obsolete mime type mappings which could be pruned (anyone serving Lotus 1-2-3 files?). However, 816 items is not an absurdly large number so it’s likely someone else would have run into this in the near future.<br></p><p>The code does successfully compile for me using the release 2.2 version on my VMWare based Ubuntu 15 system. It also compiles using 3.0.<br></p><p>-Kyle<br></p><p><br></p><p>I was just using that file as a test case for my application that is based on the swiftc code base. My application is designed to consume arbitrary swift 2.2 code. If there is a problem with swift 3 then I suppose it can be fixed, but if swift 3 has no issues then it looks like I have few options for remediation.<br></p><p>On 03/22/2016 12:56 PM, Dmitri Gribenko wrote:<br></p><p>On Tue, Mar 22, 2016 at 12:17 PM, Rafkind, Jon via swift-dev<br>&lt;swift-dev at swift.org&gt;&lt;mailto:swift-dev at swift.org&gt;&lt;mailto:swift-dev at swift.org&gt;&lt;mailto:swift-dev at swift.org&gt;wrote:<br></p><p><br>I have to support swift 2.2 for the time being because I have to support the current release of xcode. I will upgrade to swift 3 when it is released.<br></p><p><br></p><p>I understand your motivation, but I would still recommend trying to<br>update your code (on a branch) to Swift 3. This way you will get a<br>preview of the changes, would be able to provide feedback, and maybe<br>even find issues with the changes that we are making before Swift 3 is<br>finalized in a release. There is benefit for both your library and<br>the Swift community.<br></p><p>Dmitri<br></p><p><br></p><p>--<br></p><p><br></p><p><br></p><p>_______________________________________________<br>swift-dev mailing list<br>swift-dev at swift.org&lt;mailto:swift-dev at swift.org&gt;<br>https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p><br></p><p>--<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/64e7c3f106cb83b50891f5dcccde198b?s=50"></div><header><strong>large dictionary literal overflows swiftc stack</strong> from <string>Joe Pamer</string> &lt;jpamer at apple.com&gt;<p>March 23, 2016 at 12:00:00pm</p></header><div class="content"><p>Thanks for digging into this!<br></p><p>I’m seeing the same thing you are - in Swift 3, we’ve solved the problem for array literals, but dictionary literals are still susceptible. I’ll take a look to see why the current round of optimizations aren’t being applied to them.<br></p><p>- Joe<br></p><p>&gt; On Mar 23, 2016, at 11:56 AM, Rafkind, Jon via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; I ran a test to see the maximum number of elements swift could handle before crashing and the numbers are<br>&gt; <br>&gt; swift 2.2: 1213<br>&gt; swift 3-dev (mar 16 snapshot): 976<br>&gt; <br>&gt; I don&#39;t know why swift 3 is lower than swift 2.2, but I&#39;m guessing its due to the same underlying cause, which is running out of stack space. If the swift 3 snapshot was compiled with different flags than 2.2 then swift 3 could have different stack usage properties, and thus run out of stack space quicker.<br>&gt; <br>&gt; Here is a python script that generates a dictionary literal with some number of elements and runs swift on it, then does binary search to find the maximum number of elements before swift crashes.<br>&gt; <br>&gt; #!/usr/bin/env python<br>&gt; <br>&gt; def make_swift(n):<br>&gt;    def element(x):<br>&gt;        return &#39;&quot;x%d&quot;: &quot;0&quot;&#39; % x<br>&gt; <br>&gt;    data = &quot;let n = [&quot;;<br>&gt;    data += &#39;,\n&#39;.join([element(x) for x in xrange(0, n)])<br>&gt;    data += &quot;]&quot;<br>&gt; <br>&gt;    path = &#39;test-%d.swift&#39; % n<br>&gt;    file = open(path, &#39;w&#39;)<br>&gt;    file.write(data)<br>&gt;    file.write(&#39;\n&#39;)<br>&gt;    file.close()<br>&gt;    return path<br>&gt; <br>&gt; def translate(path):<br>&gt;    print &quot;Testing %s&quot; % path<br>&gt;    import subprocess<br>&gt;    out = subprocess.call([&#39;swift&#39;, path])<br>&gt;    if out == 0:<br>&gt;        print &quot;  ok&quot;<br>&gt;    else:<br>&gt;        print &quot;  failed&quot;<br>&gt;    return out == 0<br>&gt; <br>&gt; def test(n):<br>&gt;    path = make_swift(n)<br>&gt;    return translate(path)<br>&gt; <br>&gt; def binary_search(low, high):<br>&gt;    while low &lt; high:<br>&gt;        middle = (low + high) / 2<br>&gt;        if middle == low:<br>&gt;            low = high<br>&gt;            middle = high<br>&gt;        if test(middle):<br>&gt;            low = middle<br>&gt;        else:<br>&gt;            high = middle<br>&gt;    return middle<br>&gt; <br>&gt; #test(5000)<br>&gt; <br>&gt; low = 1<br>&gt; high = 10<br>&gt; while test(high):<br>&gt;    low = high<br>&gt;    high *= 2<br>&gt; <br>&gt; last_failed = binary_search(low, high)<br>&gt; print &quot;Failed at %d&quot; % last_failed<br>&gt; <br>&gt; On 03/22/2016 09:03 PM, Kyle Jessup via swift-dev wrote:<br>&gt; <br>&gt; Ok I will test with swift 3, but just to avoid any confusion I am not a developer on PerfectLib.<br>&gt; <br>&gt; <br>&gt; <br>&gt; I am! Admittedly, that dictionary contains many obsolete mime type mappings which could be pruned (anyone serving Lotus 1-2-3 files?). However, 816 items is not an absurdly large number so it’s likely someone else would have run into this in the near future.<br>&gt; <br>&gt; The code does successfully compile for me using the release 2.2 version on my VMWare based Ubuntu 15 system. It also compiles using 3.0.<br>&gt; <br>&gt; -Kyle<br>&gt; <br>&gt; <br>&gt; <br>&gt; I was just using that file as a test case for my application that is based on the swiftc code base. My application is designed to consume arbitrary swift 2.2 code. If there is a problem with swift 3 then I suppose it can be fixed, but if swift 3 has no issues then it looks like I have few options for remediation.<br>&gt; <br>&gt; On 03/22/2016 12:56 PM, Dmitri Gribenko wrote:<br>&gt; <br>&gt; On Tue, Mar 22, 2016 at 12:17 PM, Rafkind, Jon via swift-dev<br>&gt; &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt;&lt;mailto:swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt;&lt;mailto:swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt;&lt;mailto:swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt;wrote:<br>&gt; <br>&gt; <br>&gt; I have to support swift 2.2 for the time being because I have to support the current release of xcode. I will upgrade to swift 3 when it is released.<br>&gt; <br>&gt; <br>&gt; <br>&gt; I understand your motivation, but I would still recommend trying to<br>&gt; update your code (on a branch) to Swift 3. This way you will get a<br>&gt; preview of the changes, would be able to provide feedback, and maybe<br>&gt; even find issues with the changes that we are making before Swift 3 is<br>&gt; finalized in a release. There is benefit for both your library and<br>&gt; the Swift community.<br>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; <br>&gt; <br>&gt; --<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&lt;mailto:swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; --<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160323/60fcde63/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
