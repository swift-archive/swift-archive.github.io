<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0fc40f95a5c6b063df44b3bc136d764b?s=50"></div><header><strong>Dot notation as shorthand in subscripts and functions</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.com&gt;<p>January 16, 2016 at 09:00:00am</p></header><div class="content"><p>So there’s a discussion at the moment about dot notation in switch statements, and it reminds me that I actually would like to see the dot notation expanded beyond switches.<br></p><p>When used in a switch statement the dot notation is a kind of shorthand reference to the type of an enum, but it also seems like for non enums it could be a shorthand reference to self, allowing us to avoid having to write out variable references in a few common cases.<br></p><p>For example, consider the following:<br></p><p>myObject.myArray[myObject.myArray.startIndex] = 0<br>myObject.myFunction(myObject.someValue)<br></p><p>What I’d love to be able to do is simplify these to the following:<br></p><p>myObject.myArray[.startIndex] = 0<br>myObject.myFunction(.someValue)<br></p><p>In essence the dot in these cases represents a reference to the object or struct to which the subscript or function belongs, eliminating the need to enter that yet again (or extract into a variable just for neatness).<br></p><p>The only issue I see is if a parameter is an enum, as it could be ambiguous which shorthand is being used, though this is only really an issue if the type has a property with an identical name to an enum case:<br></p><p>enum MyEnum { .One, .Two }<br>class MyClass {<br>	var One = “this is a bad idea&quot;<br>	func myFunction(mode:MyEnum) { /* Do something */ }<br>}<br></p><p>var myObject = MyClass()<br>myObject.myFunction(.One) // Ambiguous, could be myObject.One or MyEnum.One<br></p><p>However, this is a pretty unlikely case since both the type needs to have a property with exactly the same name as one of the enum’s cases, so most of the time the compiler should be able to decide which was meant. It’s even less likely when considering that convention seems to be for enum cases to start with a capital letter, while properties begin with lowercase letters, though there may be an argument that the test for ambiguity should be case insensitive (to protect against typos). However, it’s also possible that when a property and enum case name conflicts that only one will be a valid argument for the subscript/function anyway, so that’s another way that ambiguity can be avoided too.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Dot notation as shorthand in subscripts and functions</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>January 16, 2016 at 02:00:00am</p></header><div class="content"><p>&gt; When used in a switch statement the dot notation is a kind of shorthand reference to the type of an enum, but it also seems like for non enums it could be a shorthand reference to self, allowing us to avoid having to write out variable references in a few common cases.<br></p><p>I think you don&#39;t realize how broad the existing leading-dot feature is.<br></p><p>Leading dot can be used in any place where a type can be inferred to access a static member of that type. For instance, it also allows this:<br></p><p>	textField.textColor = .whiteColor()<br></p><p>Because it&#39;s not limited to just enums, the existing meaning would almost *always* conflict with the meaning you propose.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0fc40f95a5c6b063df44b3bc136d764b?s=50"></div><header><strong>Dot notation as shorthand in subscripts and functions</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.com&gt;<p>January 16, 2016 at 11:00:00am</p></header><div class="content"><p>Hmm, that’s a shame, as other than switch cases I don’t use the leading-dot notation for anything else; personally I’d find it much more useful as a shorthand for cutting boilerplate around instances, as they can more easily become nested deeply than statics.<br></p><p>That said, I disagree that this behaviour would mean that it will “always” conflict; as with an enum argument it will still only conflict if the type has both a local and static item with exactly the same name.<br></p><p>In your example, textColor’s type would need to have both a static and local .whiteColor() that could result in ambiguity, which seems unlikely. If there’s only a static whiteColor then there’s no ambiguity.<br></p><p>&gt; On 16 Jan 2016, at 10:24, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt; When used in a switch statement the dot notation is a kind of shorthand reference to the type of an enum, but it also seems like for non enums it could be a shorthand reference to self, allowing us to avoid having to write out variable references in a few common cases.<br>&gt; <br>&gt; I think you don&#39;t realize how broad the existing leading-dot feature is.<br>&gt; <br>&gt; Leading dot can be used in any place where a type can be inferred to access a static member of that type. For instance, it also allows this:<br>&gt; <br>&gt; 	textField.textColor = .whiteColor()<br>&gt; <br>&gt; Because it&#39;s not limited to just enums, the existing meaning would almost *always* conflict with the meaning you propose.<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Dot notation as shorthand in subscripts and functions</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>January 16, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Jan 16, 2016, at 4:24 AM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; When used in a switch statement the dot notation is a kind of shorthand reference to the type of an enum, but it also seems like for non enums it could be a shorthand reference to self, allowing us to avoid having to write out variable references in a few common cases.<br>&gt; <br>&gt; I think you don&#39;t realize how broad the existing leading-dot feature is.<br>&gt; <br>&gt; Leading dot can be used in any place where a type can be inferred to access a static member of that type. For instance, it also allows this:<br>&gt; <br>&gt; 	textField.textColor = .whiteColor()<br>&gt; <br>&gt; Because it&#39;s not limited to just enums, the existing meaning would almost *always* conflict with the meaning you propose.<br></p><p>Not exactly what is discussed in this thread, but there is a way to expand the dot shorthand without overlapping the current shorthand: https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003269.html<br></p><p>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
