<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/17f3e4010ef1b1ed65d4926cbb191b2f?s=50"></div><header><strong>How to malloc in Swift 3</strong> from <string>Gerriet M. Denkmann</string> &lt;g at mdenkmann.de&gt;<p>September 23, 2016 at 03:00:00pm</p></header><div class="content"><p>This used to work in Swift 2.2:<br></p><p>var bitfield: UnsafeMutablePointer&lt;UInt8&gt;?<br>bitfield = UnsafeMutablePointer&lt;UInt8&gt;( malloc( 888 ) )<br></p><p>How is this written in Swift 3.0?<br></p><p>Gerriet.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6cceede6579cba5bf1f48581ea904f1b?s=50"></div><header><strong>How to malloc in Swift 3</strong> from <string>Svein Halvor Halvorsen</string> &lt;svein.h at lvor.halvorsen.cc&gt;<p>September 23, 2016 at 12:00:00pm</p></header><div class="content"><p>var bitfield: UnsafeMutablePointer&lt;UInt8&gt;?<br>bitfield = UnsafeMutablePointer&lt;UInt8&gt;.allocate(capacity: 888)<br></p><p><br>&gt; 23. sep. 2016 kl. 10.47 skrev Gerriet M. Denkmann via swift-users &lt;swift-users at swift.org&gt;:<br>&gt; <br>&gt; This used to work in Swift 2.2:<br>&gt; <br>&gt; var bitfield: UnsafeMutablePointer&lt;UInt8&gt;?<br>&gt; bitfield = UnsafeMutablePointer&lt;UInt8&gt;( malloc( 888 ) )<br>&gt; <br>&gt; How is this written in Swift 3.0?<br>&gt; <br>&gt; Gerriet.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160923/f7dcc1cd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/17f3e4010ef1b1ed65d4926cbb191b2f?s=50"></div><header><strong>How to malloc in Swift 3</strong> from <string>Gerriet M. Denkmann</string> &lt;g at mdenkmann.de&gt;<p>September 23, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On 23 Sep 2016, at 17:08, Svein Halvor Halvorsen via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; var bitfield: UnsafeMutablePointer&lt;UInt8&gt;?<br>&gt; bitfield = UnsafeMutablePointer&lt;UInt8&gt;.allocate(capacity: 888)<br>&gt; <br></p><p>Excellent! <br>I see that “- Postcondition: The pointee is allocated, but not initialized.”<br></p><p>What about calloc then? Or use allocate and do a memset afterwards?<br></p><p>Thanks a lot for your help!<br></p><p>Kind regards,<br></p><p>Gerriet.<br></p><p><br></p><p>&gt;&gt; 23. sep. 2016 kl. 10.47 skrev Gerriet M. Denkmann via swift-users &lt;swift-users at swift.org&gt;:<br>&gt;&gt; <br>&gt;&gt; This used to work in Swift 2.2:<br>&gt;&gt; <br>&gt;&gt; var bitfield: UnsafeMutablePointer&lt;UInt8&gt;?<br>&gt;&gt; bitfield = UnsafeMutablePointer&lt;UInt8&gt;( malloc( 888 ) )<br>&gt;&gt; <br>&gt;&gt; How is this written in Swift 3.0?<br>&gt;&gt; <br>&gt;&gt; Gerriet.<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2bc666e29724cd3bdf46b6cbbe4a07bb?s=50"></div><header><strong>How to malloc in Swift 3</strong> from <string>Quinn &quot;The Eskimo!&quot;</string> &lt;eskimo1 at apple.com&gt;<p>September 23, 2016 at 01:00:00pm</p></header><div class="content"><p>On 23 Sep 2016, at 11:29, Gerriet M. Denkmann via swift-users &lt;swift-users at swift.org&gt; wrote:<br></p><p>&gt; What about calloc then? Or use allocate and do a memset afterwards?<br></p><p>For trivial data types (like UInt8) this will work, but if you want to follow the rules I recommend reading the following:<br></p><p>* UnsafeRawPointer Migration<br></p><p>&lt;https://swift.org/migration-guide/se-0107-migrate.html&gt;<br></p><p>* SE-0107 “UnsafeRawPointer API”<br></p><p>&lt;https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md&gt;<br></p><p>Spoiler: that’ll point you to `initialize(to:count:)` (-:<br></p><p>                   *                   *                   *<br></p><p>Also, why are you manually allocating this rather than using [UInt8]?  The latter is easier, safer, and likely to have similar levels of efficiency.<br></p><p>Share and Enjoy<br>--<br>Quinn &quot;The Eskimo!&quot;                    &lt;http://www.apple.com/developer/&gt;<br>Apple Developer Relations, Developer Technical Support, Core OS/Hardware<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ae63137ea43dd2cf82a9917e8809e161?s=50"></div><header><strong>How to malloc in Swift 3</strong> from <string>Gerriet M. Denkmann</string> &lt;gerrietm at me.com&gt;<p>September 25, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On 23 Sep 2016, at 19:41, Quinn The Eskimo! via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; On 23 Sep 2016, at 11:29, Gerriet M. Denkmann via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; What about calloc then? Or use allocate and do a memset afterwards?<br>&gt; <br>&gt; For trivial data types (like UInt8) this will work, but if you want to follow the rules I recommend reading the following:<br>&gt; <br>&gt; * UnsafeRawPointer Migration<br>&gt; <br>&gt; &lt;https://swift.org/migration-guide/se-0107-migrate.html&gt;<br>&gt; <br>&gt; * SE-0107 “UnsafeRawPointer API”<br>&gt; <br>&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md&gt;<br>&gt; <br>&gt; Spoiler: that’ll point you to `initialize(to:count:)` (-:<br></p><p>Thanks for the links.<br>By the way: I had already tried to use `initialize(to:count:)` before, but I used it as a replacement of allocate, which the compiler did not really like.<br>Since reading these documents I know that I have to use it after allocate, not instead of.<br></p><p>In dealloc I had before:<br>	free( bitfield )<br>which, to my surprise, the compiler did NOT warn about (should there be a warning?)<br>I have since replace this with:<br>	bitfield.deallocate(capacity: numberUsedInAllocate )<br></p><p><br>&gt;                   *                   *                   *<br>&gt; <br>&gt; Also, why are you manually allocating this rather than using [UInt8]?  The latter is easier, safer, and likely to have similar levels of efficiency.<br></p><p>I just tried this:  [UInt8] turns out to be nearly 10% slower compared to: UnsafeMutablePointer&lt;UInt8&gt;.allocate(capacity:).<br></p><p>Probably depends on the use case, whether 10% less performance is worth the easier and safer.<br>I am trying to compare Swift to ObjC classes (which use malloc), so it would not be a fair comparison if the Swift class has to use an UInt8 array.<br></p><p><br>Kind regards,<br></p><p>Gerriet.<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ae63137ea43dd2cf82a9917e8809e161?s=50"></div><header><strong>How to malloc in Swift 3</strong> from <string>Gerriet M. Denkmann</string> &lt;gerrietm at me.com&gt;<p>September 23, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On 23 Sep 2016, at 15:47, Gerriet M. Denkmann via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; This used to work in Swift 2.2:<br>&gt; <br>&gt; var bitfield: UnsafeMutablePointer&lt;UInt8&gt;?<br>&gt; bitfield = UnsafeMutablePointer&lt;UInt8&gt;( malloc( 888 ) )<br>&gt; <br>&gt; How is this written in Swift 3.0?<br></p><p>To answer my own question:<br>This works:<br>var bitfield: UnsafeMutableRawPointer	<br>bitfield = UnsafeMutableRawPointer( malloc(888))<br></p><p>But then this stops working:<br>let theByte = self.bitfield[ 5 ] <br></p><p>Somehow the bitfield must know that it is a field of bytes (not shorts, ints or whatever). But how?<br></p><p>Gerriet.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>How to malloc in Swift 3</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>September 23, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Sep 23, 2016, at 1:55 AM, Gerriet M. Denkmann via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 23 Sep 2016, at 15:47, Gerriet M. Denkmann via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; This used to work in Swift 2.2:<br>&gt;&gt; <br>&gt;&gt; var bitfield: UnsafeMutablePointer&lt;UInt8&gt;?<br>&gt;&gt; bitfield = UnsafeMutablePointer&lt;UInt8&gt;( malloc( 888 ) )<br>&gt;&gt; <br>&gt;&gt; How is this written in Swift 3.0?<br>&gt; <br>&gt; To answer my own question:<br>&gt; This works:<br>&gt; var bitfield: UnsafeMutableRawPointer	<br>&gt; bitfield = UnsafeMutableRawPointer( malloc(888))<br>&gt; <br>&gt; But then this stops working:<br>&gt; let theByte = self.bitfield[ 5 ] <br>&gt; <br>&gt; Somehow the bitfield must know that it is a field of bytes (not shorts, ints or whatever). But how?<br></p><p>The RawPointer types provide methods that can load a value with a given offset and type for you. IIRC, `bitfield.load(fromByteOffset: 0, as: UInt8.self)` will do what you want.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d042be5dcfe90e649f760303af3e429?s=50"></div><header><strong>How to malloc in Swift 3</strong> from <string>Jens Persson</string> &lt;jens at bitcycle.com&gt;<p>September 23, 2016 at 11:00:00pm</p></header><div class="content"><p>What is the difference between:<br>ptr.storeBytes(of: x, toByteOffset: offset, as: type(of: x))<br>ptr.advanced(by: offset).assumingMemoryBound(to: type(of: x)).pointee = x<br>?<br>I noticed that the former traps if storing to a misaligned offset while the<br>latter is happy to do that, and I saw it mentioned as a requirement in the<br>documentation, but other than that I&#39;m not sure what would be the pros and<br>cons of using the former / latter?<br>/Jens<br></p><p><br>On Fri, Sep 23, 2016 at 10:23 PM, Joe Groff via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Sep 23, 2016, at 1:55 AM, Gerriet M. Denkmann via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;&gt; On 23 Sep 2016, at 15:47, Gerriet M. Denkmann via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; This used to work in Swift 2.2:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; var bitfield: UnsafeMutablePointer&lt;UInt8&gt;?<br>&gt; &gt;&gt; bitfield = UnsafeMutablePointer&lt;UInt8&gt;( malloc( 888 ) )<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; How is this written in Swift 3.0?<br>&gt; &gt;<br>&gt; &gt; To answer my own question:<br>&gt; &gt; This works:<br>&gt; &gt; var bitfield: UnsafeMutableRawPointer<br>&gt; &gt; bitfield = UnsafeMutableRawPointer( malloc(888))<br>&gt; &gt;<br>&gt; &gt; But then this stops working:<br>&gt; &gt; let theByte = self.bitfield[ 5 ]<br>&gt; &gt;<br>&gt; &gt; Somehow the bitfield must know that it is a field of bytes (not shorts,<br>&gt; ints or whatever). But how?<br>&gt;<br>&gt; The RawPointer types provide methods that can load a value with a given<br>&gt; offset and type for you. IIRC, `bitfield.load(fromByteOffset: 0, as:<br>&gt; UInt8.self)` will do what you want.<br>&gt;<br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160923/c56a7fe5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>How to malloc in Swift 3</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>September 23, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Sep 23, 2016, at 2:20 PM, Jens Persson &lt;jens at bitcycle.com&gt; wrote:<br>&gt; <br>&gt; What is the difference between:<br>&gt; ptr.storeBytes(of: x, toByteOffset: offset, as: type(of: x))<br>&gt; ptr.advanced(by: offset).assumingMemoryBound(to: type(of: x)).pointee = x<br>&gt; ?<br>&gt; I noticed that the former traps if storing to a misaligned offset while the latter is happy to do that, and I saw it mentioned as a requirement in the documentation, but other than that I&#39;m not sure what would be the pros and cons of using the former / latter?<br></p><p>cc&#39;ing Andy, who&#39;s the expert on this. AIUI, the former does not semantically bind the memory to the type being stored—informally, it has &quot;memcpy semantics&quot;—whereas the latter *will* bind the memory to a type, which will require all other loads and stores derived from the same pointer to remain of the same type. Neither API officially supports unaligned loads or stores yet; if one crashes and the other doesn&#39;t, that&#39;s an accident.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6fe87aed0d64cdbc46378bf7596a7553?s=50"></div><header><strong>How to malloc in Swift 3</strong> from <string>Andrew Trick</string> &lt;atrick at apple.com&gt;<p>September 23, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Sep 23, 2016, at 2:23 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Sep 23, 2016, at 2:20 PM, Jens Persson &lt;jens at bitcycle.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; What is the difference between:<br>&gt;&gt; ptr.storeBytes(of: x, toByteOffset: offset, as: type(of: x))<br>&gt;&gt; ptr.advanced(by: offset).assumingMemoryBound(to: type(of: x)).pointee = x<br>&gt;&gt; ?<br>&gt;&gt; I noticed that the former traps if storing to a misaligned offset while the latter is happy to do that, and I saw it mentioned as a requirement in the documentation, but other than that I&#39;m not sure what would be the pros and cons of using the former / latter?<br>&gt; <br>&gt; cc&#39;ing Andy, who&#39;s the expert on this. AIUI, the former does not semantically bind the memory to the type being stored—informally, it has &quot;memcpy semantics&quot;—whereas the latter *will* bind the memory to a type, which will require all other loads and stores derived from the same pointer to remain of the same type. Neither API officially supports unaligned loads or stores yet; if one crashes and the other doesn&#39;t, that&#39;s an accident.<br>&gt; <br>&gt; -Joe<br></p><p>storeBytes(of:as:) is an untyped memory operation. e.g. you could use it store a UInt32 to an Float’s location without binding memory.<br></p><p>assumingMemoryBound(to:) gives you a typed pointer, that you the programmer must guarantee is the correct type for that memory location. If you use this to get a UInt32 pointer into a Float’s location, you get undefined behavior as soon as you access the pointee.<br></p><p>storeBytes traps on misaligned access because memory is being reinterpreted making it easy to violate the alignment precondition.<br></p><p>UnsafePointer&lt;T&gt;.pointee never checked the alignment precondition because normally you wouldn’t need to and it’s supposed to be zero overhead.<br></p><p>assumingMemoryBound(to:) does not check alignment because it isn’t undefined behavior until the pointer is accessed and it’s supposed to be zero overhead.<br></p><p>Basically assumingMemoryBound(to:) is the one backdoor that we have for force casting pointers. The “assuming” should clue the programmer in that they really need to know what they’re doing before using it.<br></p><p>https://swift.org/migration-guide/se-0107-migrate.html#api-for-binding-memory-types-and-pointer-conversion &lt;https://swift.org/migration-guide/se-0107-migrate.html#api-for-binding-memory-types-and-pointer-conversion&gt;<br></p><p>-Andy<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160923/4b6f39c2/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
