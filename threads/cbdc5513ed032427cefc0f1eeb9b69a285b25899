<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fa2d084559728a52ed1028cd33c5dba8?s=50"></div><header><strong>Language syntax proposal - shorthand for super invocations</strong> from <string>Petroules Jake</string> &lt;Jake.Petroules at theqtcompany.com&gt;<p>February  9, 2016 at 05:00:00am</p></header><div class="content"><p>Hello,<br></p><p>I have a language syntax proposal. I&#39;ve read the Swift evolution guidelines and hopefully this is the proper way to start. So, my proposal is:<br></p><p>Permit a shorthand syntax for invoking the supertype implementation of a property or function. A single statement &#39;super&#39; is equivalent to invoking the supertype implementation, forwarding the arguments unchanged, and returning the result. For example, the following samples:<br></p><p>override func mouseEntered(theEvent: NSEvent) {<br>    super<br>    handleMouseEvent(theEvent)<br>}<br></p><p>override func specialValue(key: String) -&gt; Int {<br>    return super + 1<br>}<br></p><p>override var widgetCount: Int {<br>    return super + 5<br>}<br></p><p>are exactly equivalent to the following samples:<br></p><p>override func mouseEntered(theEvent: NSEvent) {<br>    super.mouseEntered(theEvent)<br>    handleMouseEvent(theEvent)<br>}<br></p><p>override func specialValue(key: String) -&gt; Int {<br>    return super.specialValue(key) + 1<br>}<br></p><p>override var widgetCount: Int {<br>    return super.widgetCount + 5<br>}<br></p><p>Alternatives/complementary ideas:<br></p><p>- Require `super()` or `super(...)` syntax for invocations which are function calls, for consistency with other function calls in the language and/or to indicate that arguments are forwarded<br></p><p>Looking forward to your feedback.<br></p><p>Thanks!<br>--<br>Jake Petroules - jake.petroules at theqtcompany.com&lt;mailto:jake.petroules at theqtcompany.com&gt;<br>Consulting Services Engineer - The Qt Company<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160209/cbdc5899/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>Language syntax proposal - shorthand for super invocations</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February  9, 2016 at 09:00:00am</p></header><div class="content"><p>I want to say +1.<br></p><p>Ruby does this and it works really nicely.  While not a big deal in simple cases, when a method has lots of arguments, it’s just really noisy.<br></p><p>There’s a problem though. If `super` means both “call the superclass’s implementation of this method”, and “the superclass”, there’s a potential for ambiguity.<br></p><p>Say:<br></p><p>&gt; override var widgetCount: Int {<br>&gt;     return super.widgetCount + 5<br>&gt; }<br></p><p>And:<br></p><p>extension Int {<br>    var widgetCount: Int { return 10 }<br>}<br></p><p>Does super.widgetCount call the superclass’s `widgetCount`, or does it call the superclass’s implementation of the same getter, then call `widgetCount` on the returned Int?<br></p><p>— Radek<br></p><p>&gt; On 09 Feb 2016, at 06:31, Petroules Jake via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello,<br>&gt; <br>&gt; I have a language syntax proposal. I&#39;ve read the Swift evolution guidelines and hopefully this is the proper way to start. So, my proposal is:<br>&gt; <br>&gt; Permit a shorthand syntax for invoking the supertype implementation of a property or function. A single statement &#39;super&#39; is equivalent to invoking the supertype implementation, forwarding the arguments unchanged, and returning the result. For example, the following samples:<br>&gt; <br>&gt; override func mouseEntered(theEvent: NSEvent) {<br>&gt;     super<br>&gt;     handleMouseEvent(theEvent)<br>&gt; }<br>&gt; <br>&gt; override func specialValue(key: String) -&gt; Int {<br>&gt;     return super + 1<br>&gt; }<br>&gt; <br>&gt; override var widgetCount: Int {<br>&gt;     return super + 5<br>&gt; }<br>&gt; <br>&gt; are exactly equivalent to the following samples:<br>&gt; <br>&gt; override func mouseEntered(theEvent: NSEvent) {<br>&gt;     super.mouseEntered(theEvent)<br>&gt;     handleMouseEvent(theEvent)<br>&gt; }<br>&gt; <br>&gt; override func specialValue(key: String) -&gt; Int {<br>&gt;     return super.specialValue(key) + 1<br>&gt; }<br>&gt; <br>&gt; override var widgetCount: Int {<br>&gt;     return super.widgetCount + 5<br>&gt; }<br>&gt; <br>&gt; Alternatives/complementary ideas:<br>&gt; <br>&gt; - Require `super()` or `super(...)` syntax for invocations which are function calls, for consistency with other function calls in the language and/or to indicate that arguments are forwarded<br>&gt; <br>&gt; Looking forward to your feedback.<br>&gt; <br>&gt; Thanks!<br>&gt; -- <br>&gt; Jake Petroules - jake.petroules at theqtcompany.com &lt;mailto:jake.petroules at theqtcompany.com&gt;<br>&gt; Consulting Services Engineer - The Qt Company<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160209/4a74b4cd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Language syntax proposal - shorthand for super invocations</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>February  9, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; Does super.widgetCount call the superclass’s `widgetCount`, or does it call the superclass’s implementation of the same getter, then call `widgetCount` on the returned Int?<br></p><p>Without offering an opinion either way on this proposal, I will note that the alternative suggestion of `super()` does not suffer from this ambiguity.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fa2d084559728a52ed1028cd33c5dba8?s=50"></div><header><strong>Language syntax proposal - shorthand for super invocations</strong> from <string>Petroules Jake</string> &lt;Jake.Petroules at theqtcompany.com&gt;<p>February  9, 2016 at 08:00:00am</p></header><div class="content"><p>`super` would only exhibit the proposed behavior when it is a standalone token. The expressions `super` and `super.widgetCount` are both permitted and both are exactly equivalent.<br></p><p>To express what you&#39;re suggesting with the extension (either with the current grammar or the proposed feature), it would be:<br></p><p>override var widgetCount: Int {<br>    return super.widgetCount.widgetCount + 5<br>}<br></p><p>Your example is not ambiguous because `super.widgetCount` only ever means the value of the widgetCount property in the superclass; `super` is not first evaluated to the aforementioned value and then `widgetCount` invoked on that result, since the entire `super.widgetCount` would be treated atomically, conceptually, as it is now.<br></p><p>I can see that the fact that `super` itself does refer to an instance of T could be problematic for properties. For functions, if written as `super()` or `super(...)` so this should be OK and unambiguous. Perhaps the shorthand syntax could be limited to functions since they tend to be longer and in greater need of something like this in the first place.<br></p><p>On Feb 9, 2016, at 12:28 AM, Radosław Pietruszewski &lt;radexpl at gmail.com&lt;mailto:radexpl at gmail.com&gt;&gt; wrote:<br></p><p>I want to say +1.<br></p><p>Ruby does this and it works really nicely.  While not a big deal in simple cases, when a method has lots of arguments, it’s just really noisy.<br></p><p>There’s a problem though. If `super` means both “call the superclass’s implementation of this method”, and “the superclass”, there’s a potential for ambiguity.<br></p><p>Say:<br></p><p>override var widgetCount: Int {<br>    return super.widgetCount + 5<br>}<br></p><p>And:<br></p><p>extension Int {<br>    var widgetCount: Int { return 10 }<br>}<br></p><p>Does super.widgetCount call the superclass’s `widgetCount`, or does it call the superclass’s implementation of the same getter, then call `widgetCount` on the returned Int?<br></p><p>— Radek<br></p><p>On 09 Feb 2016, at 06:31, Petroules Jake via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br></p><p>Hello,<br></p><p>I have a language syntax proposal. I&#39;ve read the Swift evolution guidelines and hopefully this is the proper way to start. So, my proposal is:<br></p><p>Permit a shorthand syntax for invoking the supertype implementation of a property or function. A single statement &#39;super&#39; is equivalent to invoking the supertype implementation, forwarding the arguments unchanged, and returning the result. For example, the following samples:<br></p><p>override func mouseEntered(theEvent: NSEvent) {<br>    super<br>    handleMouseEvent(theEvent)<br>}<br></p><p>override func specialValue(key: String) -&gt; Int {<br>    return super + 1<br>}<br></p><p>override var widgetCount: Int {<br>    return super + 5<br>}<br></p><p>are exactly equivalent to the following samples:<br></p><p>override func mouseEntered(theEvent: NSEvent) {<br>    super.mouseEntered(theEvent)<br>    handleMouseEvent(theEvent)<br>}<br></p><p>override func specialValue(key: String) -&gt; Int {<br>    return super.specialValue(key) + 1<br>}<br></p><p>override var widgetCount: Int {<br>    return super.widgetCount + 5<br>}<br></p><p>Alternatives/complementary ideas:<br></p><p>- Require `super()` or `super(...)` syntax for invocations which are function calls, for consistency with other function calls in the language and/or to indicate that arguments are forwarded<br></p><p>Looking forward to your feedback.<br></p><p>Thanks!<br>--<br>Jake Petroules - jake.petroules at theqtcompany.com&lt;mailto:jake.petroules at theqtcompany.com&gt;<br>Consulting Services Engineer - The Qt Company<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br>--<br>Jake Petroules - jake.petroules at theqtcompany.com&lt;mailto:jake.petroules at theqtcompany.com&gt;<br>Consulting Services Engineer - The Qt Company<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160209/3e891067/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>Language syntax proposal - shorthand for super invocations</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February  9, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; `super` would only exhibit the proposed behavior when it is a standalone token. The expressions `super` and `super.widgetCount` are both permitted and both are exactly equivalent.<br>&gt; <br>&gt; To express what you&#39;re suggesting with the extension (either with the current grammar or the proposed feature), it would be:<br>&gt; <br>&gt; override var widgetCount: Int {<br>&gt;     return super.widgetCount.widgetCount + 5<br>&gt; }<br>&gt; <br>&gt; Your example is not ambiguous because `super.widgetCount` only ever means the value of the widgetCount property in the superclass; `super` is not first evaluated to the aforementioned value and then `widgetCount` invoked on that result, since the entire `super.widgetCount` would be treated atomically, conceptually, as it is now.<br></p><p>Maybe, but I don’t like it. Even if the compiler can disambiguate, this will still be confusing.<br></p><p>&gt; Without offering an opinion either way on this proposal, I will note that the alternative suggestion of `super()` does not suffer from this ambiguity.<br></p><p><br>You’re right! I’d be cool with `super()`.<br></p><p>— Radek<br></p><p>&gt; On 09 Feb 2016, at 09:44, Petroules Jake &lt;Jake.Petroules at theqtcompany.com&gt; wrote:<br>&gt; <br>&gt; `super` would only exhibit the proposed behavior when it is a standalone token. The expressions `super` and `super.widgetCount` are both permitted and both are exactly equivalent.<br>&gt; <br>&gt; To express what you&#39;re suggesting with the extension (either with the current grammar or the proposed feature), it would be:<br>&gt; <br>&gt; override var widgetCount: Int {<br>&gt;     return super.widgetCount.widgetCount + 5<br>&gt; }<br>&gt; <br>&gt; Your example is not ambiguous because `super.widgetCount` only ever means the value of the widgetCount property in the superclass; `super` is not first evaluated to the aforementioned value and then `widgetCount` invoked on that result, since the entire `super.widgetCount` would be treated atomically, conceptually, as it is now.<br>&gt; <br>&gt; I can see that the fact that `super` itself does refer to an instance of T could be problematic for properties. For functions, if written as `super()` or `super(...)` so this should be OK and unambiguous. Perhaps the shorthand syntax could be limited to functions since they tend to be longer and in greater need of something like this in the first place.<br>&gt; <br>&gt;&gt; On Feb 9, 2016, at 12:28 AM, Radosław Pietruszewski &lt;radexpl at gmail.com &lt;mailto:radexpl at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I want to say +1.<br>&gt;&gt; <br>&gt;&gt; Ruby does this and it works really nicely.  While not a big deal in simple cases, when a method has lots of arguments, it’s just really noisy.<br>&gt;&gt; <br>&gt;&gt; There’s a problem though. If `super` means both “call the superclass’s implementation of this method”, and “the superclass”, there’s a potential for ambiguity.<br>&gt;&gt; <br>&gt;&gt; Say:<br>&gt;&gt; <br>&gt;&gt;&gt; override var widgetCount: Int {<br>&gt;&gt;&gt;     return super.widgetCount + 5<br>&gt;&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; And:<br>&gt;&gt; <br>&gt;&gt; extension Int {<br>&gt;&gt;     var widgetCount: Int { return 10 }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Does super.widgetCount call the superclass’s `widgetCount`, or does it call the superclass’s implementation of the same getter, then call `widgetCount` on the returned Int?<br>&gt;&gt; <br>&gt;&gt; — Radek<br>&gt;&gt; <br>&gt;&gt;&gt; On 09 Feb 2016, at 06:31, Petroules Jake via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I have a language syntax proposal. I&#39;ve read the Swift evolution guidelines and hopefully this is the proper way to start. So, my proposal is:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Permit a shorthand syntax for invoking the supertype implementation of a property or function. A single statement &#39;super&#39; is equivalent to invoking the supertype implementation, forwarding the arguments unchanged, and returning the result. For example, the following samples:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; override func mouseEntered(theEvent: NSEvent) {<br>&gt;&gt;&gt;     super<br>&gt;&gt;&gt;     handleMouseEvent(theEvent)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; override func specialValue(key: String) -&gt; Int {<br>&gt;&gt;&gt;     return super + 1<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; override var widgetCount: Int {<br>&gt;&gt;&gt;     return super + 5<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; are exactly equivalent to the following samples:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; override func mouseEntered(theEvent: NSEvent) {<br>&gt;&gt;&gt;     super.mouseEntered(theEvent)<br>&gt;&gt;&gt;     handleMouseEvent(theEvent)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; override func specialValue(key: String) -&gt; Int {<br>&gt;&gt;&gt;     return super.specialValue(key) + 1<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; override var widgetCount: Int {<br>&gt;&gt;&gt;     return super.widgetCount + 5<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Alternatives/complementary ideas:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Require `super()` or `super(...)` syntax for invocations which are function calls, for consistency with other function calls in the language and/or to indicate that arguments are forwarded<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Looking forward to your feedback.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks!<br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Jake Petroules - jake.petroules at theqtcompany.com &lt;mailto:jake.petroules at theqtcompany.com&gt;<br>&gt;&gt;&gt; Consulting Services Engineer - The Qt Company<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; <br>&gt; -- <br>&gt; Jake Petroules - jake.petroules at theqtcompany.com &lt;mailto:jake.petroules at theqtcompany.com&gt;<br>&gt; Consulting Services Engineer - The Qt Company<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160209/1a9f6697/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>Language syntax proposal - shorthand for super invocations</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>February  9, 2016 at 10:00:00am</p></header><div class="content"><p>What if we could use the compiler to help ?<br></p><p>super(#args)<br></p><p>#args being the arguments passed to the current function.<br></p><p>*___________________________________*<br></p><p>*James⎥Lead Engineer*<br></p><p>*james at supmenow.com &lt;james at supmenow.com&gt;⎥supmenow.com &lt;http://supmenow.com&gt;*<br></p><p>*Sup*<br></p><p>*Runway East *<br></p><p>*10 Finsbury Square*<br></p><p>*London*<br></p><p>* EC2A 1AF *<br></p><p>On Tue, Feb 9, 2016 at 9:09 AM, Radosław Pietruszewski &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; `super` would only exhibit the proposed behavior when it is a standalone<br>&gt; token. The expressions `super` and `super.widgetCount` are both permitted<br>&gt; and both are exactly equivalent.<br>&gt;<br>&gt; To express what you&#39;re suggesting with the extension (either with the<br>&gt; current grammar or the proposed feature), it would be:<br>&gt;<br>&gt; override var widgetCount: Int {<br>&gt;     return super.widgetCount.widgetCount + 5<br>&gt; }<br>&gt;<br>&gt; Your example is not ambiguous because `super.widgetCount` only ever means<br>&gt; the value of the widgetCount property in the superclass; `super` is not<br>&gt; first evaluated to the aforementioned value and then `widgetCount` invoked<br>&gt; on that result, since the entire `super.widgetCount` would be treated<br>&gt; atomically, conceptually, as it is now.<br>&gt;<br>&gt;<br>&gt; Maybe, but I don’t like it. Even if the compiler can disambiguate, this<br>&gt; will still be confusing.<br>&gt;<br>&gt; Without offering an opinion either way on this proposal, I will note that<br>&gt; the alternative suggestion of `super()` does not suffer from this ambiguity.<br>&gt;<br>&gt;<br>&gt; You’re right! I’d be cool with `super()`.<br>&gt;<br>&gt; — Radek<br>&gt;<br>&gt; On 09 Feb 2016, at 09:44, Petroules Jake &lt;Jake.Petroules at theqtcompany.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; `super` would only exhibit the proposed behavior when it is a standalone<br>&gt; token. The expressions `super` and `super.widgetCount` are both permitted<br>&gt; and both are exactly equivalent.<br>&gt;<br>&gt; To express what you&#39;re suggesting with the extension (either with the<br>&gt; current grammar or the proposed feature), it would be:<br>&gt;<br>&gt; override var widgetCount: Int {<br>&gt;     return super.widgetCount.widgetCount + 5<br>&gt; }<br>&gt;<br>&gt; Your example is not ambiguous because `super.widgetCount` only ever means<br>&gt; the value of the widgetCount property in the superclass; `super` is not<br>&gt; first evaluated to the aforementioned value and then `widgetCount` invoked<br>&gt; on that result, since the entire `super.widgetCount` would be treated<br>&gt; atomically, conceptually, as it is now.<br>&gt;<br>&gt; I can see that the fact that `super` itself does refer to an instance of T<br>&gt; could be problematic for properties. For functions, if written as `super()`<br>&gt; or `super(...)` so this should be OK and unambiguous. Perhaps the shorthand<br>&gt; syntax could be limited to functions since they tend to be longer and in<br>&gt; greater need of something like this in the first place.<br>&gt;<br>&gt; On Feb 9, 2016, at 12:28 AM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; I want to say +1.<br>&gt;<br>&gt; Ruby does this and it works really nicely.  While not a big deal in simple<br>&gt; cases, when a method has lots of arguments, it’s just really noisy.<br>&gt;<br>&gt; There’s a problem though. If `super` means both “call the superclass’s<br>&gt; implementation of this method”, and “the superclass”, there’s a potential<br>&gt; for ambiguity.<br>&gt;<br>&gt; Say:<br>&gt;<br>&gt; override var widgetCount: Int {<br>&gt;     return super.widgetCount + 5<br>&gt; }<br>&gt;<br>&gt;<br>&gt; And:<br>&gt;<br>&gt; extension Int {<br>&gt;     var widgetCount: Int { return 10 }<br>&gt; }<br>&gt;<br>&gt;<br>&gt; Does super.widgetCount call the superclass’s `widgetCount`, or does it<br>&gt; call the superclass’s implementation of the same getter, then call<br>&gt; `widgetCount` on the returned Int?<br>&gt;<br>&gt; — Radek<br>&gt;<br>&gt; On 09 Feb 2016, at 06:31, Petroules Jake via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hello,<br>&gt;<br>&gt; I have a language syntax proposal. I&#39;ve read the Swift evolution<br>&gt; guidelines and hopefully this is the proper way to start. So, my proposal<br>&gt; is:<br>&gt;<br>&gt; Permit a shorthand syntax for invoking the supertype implementation of a<br>&gt; property or function. A single statement &#39;super&#39; is equivalent to invoking<br>&gt; the supertype implementation, forwarding the arguments unchanged, and<br>&gt; returning the result. For example, the following samples:<br>&gt;<br>&gt; override func mouseEntered(theEvent: NSEvent) {<br>&gt;     super<br>&gt;     handleMouseEvent(theEvent)<br>&gt; }<br>&gt;<br>&gt; override func specialValue(key: String) -&gt; Int {<br>&gt;     return super + 1<br>&gt; }<br>&gt;<br>&gt; override var widgetCount: Int {<br>&gt;     return super + 5<br>&gt; }<br>&gt;<br>&gt; are exactly equivalent to the following samples:<br>&gt;<br>&gt; override func mouseEntered(theEvent: NSEvent) {<br>&gt;     super.mouseEntered(theEvent)<br>&gt;     handleMouseEvent(theEvent)<br>&gt; }<br>&gt;<br>&gt; override func specialValue(key: String) -&gt; Int {<br>&gt;     return super.specialValue(key) + 1<br>&gt; }<br>&gt;<br>&gt; override var widgetCount: Int {<br>&gt;     return super.widgetCount + 5<br>&gt; }<br>&gt;<br>&gt; Alternatives/complementary ideas:<br>&gt;<br>&gt; - Require `super()` or `super(...)` syntax for invocations which are<br>&gt; function calls, for consistency with other function calls in the language<br>&gt; and/or to indicate that arguments are forwarded<br>&gt;<br>&gt; Looking forward to your feedback.<br>&gt;<br>&gt; Thanks!<br>&gt; --<br>&gt; Jake Petroules - jake.petroules at theqtcompany.com<br>&gt; Consulting Services Engineer - The Qt Company<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Jake Petroules - jake.petroules at theqtcompany.com<br>&gt; Consulting Services Engineer - The Qt Company<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160209/aebd7e47/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>Language syntax proposal - shorthand for super invocations</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February  9, 2016 at 12:00:00pm</p></header><div class="content"><p>Now you have two new/magic behaviors:<br></p><p>- `super` meaning “super.thisMethod”, and<br>- #args copying the arguments of the current call<br></p><p>While `#args` may possibly be useful somewhere, it seems orthogonal to this proposal, and it seems simpler to go with `super()`.<br></p><p>— Radek<br></p><p>&gt; On 09 Feb 2016, at 11:39, James Campbell &lt;james at supmenow.com&gt; wrote:<br>&gt; <br>&gt; What if we could use the compiler to help ?<br>&gt; <br>&gt; super(#args) <br>&gt; <br>&gt; #args being the arguments passed to the current function.<br>&gt; <br>&gt; ___________________________________<br>&gt; <br>&gt; James⎥Lead Engineer<br>&gt; <br>&gt; james at supmenow.com &lt;mailto:james at supmenow.com&gt;⎥supmenow.com &lt;http://supmenow.com/&gt;<br>&gt; Sup<br>&gt; <br>&gt; Runway East &gt; <br>&gt; <br>&gt; 10 Finsbury Square<br>&gt; <br>&gt; London<br>&gt; <br>&gt;  &gt; EC2A 1AF <br>&gt; <br>&gt; <br>&gt; On Tue, Feb 9, 2016 at 9:09 AM, Radosław Pietruszewski &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; `super` would only exhibit the proposed behavior when it is a standalone token. The expressions `super` and `super.widgetCount` are both permitted and both are exactly equivalent.<br>&gt;&gt; <br>&gt;&gt; To express what you&#39;re suggesting with the extension (either with the current grammar or the proposed feature), it would be:<br>&gt;&gt; <br>&gt;&gt; override var widgetCount: Int {<br>&gt;&gt;     return super.widgetCount.widgetCount + 5<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Your example is not ambiguous because `super.widgetCount` only ever means the value of the widgetCount property in the superclass; `super` is not first evaluated to the aforementioned value and then `widgetCount` invoked on that result, since the entire `super.widgetCount` would be treated atomically, conceptually, as it is now.<br>&gt; <br>&gt; Maybe, but I don’t like it. Even if the compiler can disambiguate, this will still be confusing.<br>&gt; <br>&gt;&gt; Without offering an opinion either way on this proposal, I will note that the alternative suggestion of `super()` does not suffer from this ambiguity.<br>&gt; <br>&gt; <br>&gt; You’re right! I’d be cool with `super()`.<br>&gt; <br>&gt; — Radek<br>&gt; <br>&gt;&gt; On 09 Feb 2016, at 09:44, Petroules Jake &lt;Jake.Petroules at theqtcompany.com &lt;mailto:Jake.Petroules at theqtcompany.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; `super` would only exhibit the proposed behavior when it is a standalone token. The expressions `super` and `super.widgetCount` are both permitted and both are exactly equivalent.<br>&gt;&gt; <br>&gt;&gt; To express what you&#39;re suggesting with the extension (either with the current grammar or the proposed feature), it would be:<br>&gt;&gt; <br>&gt;&gt; override var widgetCount: Int {<br>&gt;&gt;     return super.widgetCount.widgetCount + 5<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Your example is not ambiguous because `super.widgetCount` only ever means the value of the widgetCount property in the superclass; `super` is not first evaluated to the aforementioned value and then `widgetCount` invoked on that result, since the entire `super.widgetCount` would be treated atomically, conceptually, as it is now.<br>&gt;&gt; <br>&gt;&gt; I can see that the fact that `super` itself does refer to an instance of T could be problematic for properties. For functions, if written as `super()` or `super(...)` so this should be OK and unambiguous. Perhaps the shorthand syntax could be limited to functions since they tend to be longer and in greater need of something like this in the first place.<br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 9, 2016, at 12:28 AM, Radosław Pietruszewski &lt;radexpl at gmail.com &lt;mailto:radexpl at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I want to say +1.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Ruby does this and it works really nicely.  While not a big deal in simple cases, when a method has lots of arguments, it’s just really noisy.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; There’s a problem though. If `super` means both “call the superclass’s implementation of this method”, and “the superclass”, there’s a potential for ambiguity.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Say:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; override var widgetCount: Int {<br>&gt;&gt;&gt;&gt;     return super.widgetCount + 5<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; And:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; extension Int {<br>&gt;&gt;&gt;     var widgetCount: Int { return 10 }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Does super.widgetCount call the superclass’s `widgetCount`, or does it call the superclass’s implementation of the same getter, then call `widgetCount` on the returned Int?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; — Radek<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 09 Feb 2016, at 06:31, Petroules Jake via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hello,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I have a language syntax proposal. I&#39;ve read the Swift evolution guidelines and hopefully this is the proper way to start. So, my proposal is:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Permit a shorthand syntax for invoking the supertype implementation of a property or function. A single statement &#39;super&#39; is equivalent to invoking the supertype implementation, forwarding the arguments unchanged, and returning the result. For example, the following samples:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; override func mouseEntered(theEvent: NSEvent) {<br>&gt;&gt;&gt;&gt;     super<br>&gt;&gt;&gt;&gt;     handleMouseEvent(theEvent)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; override func specialValue(key: String) -&gt; Int {<br>&gt;&gt;&gt;&gt;     return super + 1<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; override var widgetCount: Int {<br>&gt;&gt;&gt;&gt;     return super + 5<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; are exactly equivalent to the following samples:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; override func mouseEntered(theEvent: NSEvent) {<br>&gt;&gt;&gt;&gt;     super.mouseEntered(theEvent)<br>&gt;&gt;&gt;&gt;     handleMouseEvent(theEvent)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; override func specialValue(key: String) -&gt; Int {<br>&gt;&gt;&gt;&gt;     return super.specialValue(key) + 1<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; override var widgetCount: Int {<br>&gt;&gt;&gt;&gt;     return super.widgetCount + 5<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Alternatives/complementary ideas:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - Require `super()` or `super(...)` syntax for invocations which are function calls, for consistency with other function calls in the language and/or to indicate that arguments are forwarded<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Looking forward to your feedback.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks!<br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; Jake Petroules - jake.petroules at theqtcompany.com &lt;mailto:jake.petroules at theqtcompany.com&gt;<br>&gt;&gt;&gt;&gt; Consulting Services Engineer - The Qt Company<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Jake Petroules - jake.petroules at theqtcompany.com &lt;mailto:jake.petroules at theqtcompany.com&gt;<br>&gt;&gt; Consulting Services Engineer - The Qt Company<br>&gt;&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160209/50906f8e/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
