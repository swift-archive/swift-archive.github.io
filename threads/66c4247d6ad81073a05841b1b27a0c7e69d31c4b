<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/75f8396d91a35711f910866c8791c4df?s=50"></div><header><strong>Tuples as Named Types</strong> from <string>Muhammad Tahir Vali</string> &lt;tahir.vali13 at gmail.com&gt;<p>September 16, 2016 at 12:00:00am</p></header><div class="content"><p>The purpose of this proposal is to implement Tuples as a named typed in<br>Swift. Tuples can be extremely useful for pattern matching, returning<br>multiple values from a function, and destructing content to the list. C#<br>has tuples as a named type as well I believe. Currently, Tuples in Swift<br>are anonymous types that have limited functionality but this proposal can<br>help solve that.<br></p><p>The underlying implementations of this proposal can allow the following :<br></p><p>1) having parameters and return values of type : Tuple<br>- enforces much more intuitive and clean code<br>- less code too read<br></p><p>2) implicit &amp; explicit optionals with tuples !!!<br>- Can definitely take out many nested optional chains if tuples internally<br>checks for .Some or .None in each variable stored inside of an optional of<br>type Tuple.<br></p><p>3) making tuples variable declarations more popular for functional call<br>- parameter names in function calls within tuple variables can be used as<br>getter<br></p><p>My proposal was very brief but I hope its one worth embracing. I didnt get<br>to talk about applications but those are pretty self-explanatory. This<br>definitely widens the vision for Swift and could be a &quot;a-ha&quot; thing for<br>Swift developers. :)<br></p><p>-- <br>Best Regards,<br></p><p>Muhammad T. Vali<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160916/66c41c4b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>Tuples as Named Types</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>September 16, 2016 at 01:00:00am</p></header><div class="content"><p>A few notes<br></p><p>~Robert Widmann<br></p><p>2016/09/16 0:54、Muhammad Tahir Vali via swift-evolution &lt;swift-evolution at swift.org&gt; のメッセージ:<br></p><p>&gt; The purpose of this proposal is to implement Tuples as a named typed in Swift. Tuples can be extremely useful for pattern matching, returning multiple values from a function, and destructing content to the list. C# has tuples as a named type as well I believe. Currently, Tuples in Swift are anonymous types that have limited functionality but this proposal can help solve that.<br></p><p>Languages like C#, Scala, et al. that decided that Tuple should be a nominal type have, in my opinion, made the wrong choice.  A tuple is an anonymous product; its content and not its name is what is important otherwise you&#39;d just use a struct.<br></p><p>&gt; <br>&gt; The underlying implementations of this proposal can allow the following :<br>&gt; <br>&gt; 1) having parameters and return values of type : Tuple<br>&gt; - enforces much more intuitive and clean code <br>&gt; - less code too read <br></p><p>This is already valid in Swift.<br></p><p>func flip&lt;A, B&gt;(_ t : (A, B)) -&gt; (B, A) {<br>  return (t.1, t.0)<br>}<br></p><p>&gt; <br>&gt; 2) implicit &amp; explicit optionals with tuples !!! <br>&gt; - Can definitely take out many nested optional chains if tuples internally checks for .Some or .None in each variable stored inside of an optional of type Tuple.<br></p><p>This operation will not scale well without variadic generics.  Do you really want ~8 different functions in stdlib that examine the contents of tuples when it&#39;s much easier to just pattern match on the tuple in a `switch` or `case let` statement?<br></p><p>&gt; <br>&gt; 3) making tuples variable declarations more popular for functional call<br>&gt; - parameter names in function calls within tuple variables can be used as getter<br></p><p>This is, again, already supported.<br></p><p>func project(_ t : (l : String, r : Int)) -&gt; Int {<br>  return t.r<br>}<br></p><p>f((&quot;Hello World, 42))<br></p><p>&gt; <br>&gt; My proposal was very brief but I hope its one worth embracing. I didnt get to talk about applications but those are pretty self-explanatory. This definitely widens the vision for Swift and could be a &quot;a-ha&quot; thing for Swift developers. :)<br></p><p>In short, I don&#39;t really see how this achieves the goal of making tuples more flexible.  Perhaps you have concrete examples of what is wrong and what this proposal intends to fix?<br></p><p>&gt; <br>&gt; -- <br>&gt; Best Regards,<br>&gt; <br>&gt; Muhammad T. Vali<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160916/3d13100e/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
