<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/90628b2af62d311553611969a5c69cc4?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Yichen Cao</string> &lt;ycao at me.com&gt;<p>December 16, 2015 at 10:00:00pm</p></header><div class="content"><p>Instead, I prefer the force unwrap to be another character other than the negate operator. It makes no sense to have the negation operator be universal and suddenly introduce the force unwrap with the same character.<br></p><p>Yichen<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/87f3b2b0/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: smime.p7s<br>Type: application/pkcs7-signature<br>Size: 3557 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/87f3b2b0/attachment.p7s&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d47baf3a0f80c9fd13ece9c4b87c7fce?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Marc Knaup</string> &lt;marc at knaup.koeln&gt;<p>December 16, 2015 at 03:00:00pm</p></header><div class="content"><p>If we use &quot;~&quot; for negation then we&#39;d have to use &quot;~=&quot; and &quot;~==&quot; for<br>comparison which in turn conflicts with the pattern matching operator.<br></p><p>&quot;?&quot; and &quot;!&quot; for optionals and force unwrap are perfectly fine since the<br>former is for questions (&quot;is it nil or is it not?&quot;) and the latter is an<br>exclamation mark usually used to draw attention (&quot;yes I&#39;m sure it is<br>non-nil / not throwing!&quot;).<br></p><p>On Wed, Dec 16, 2015 at 3:03 PM, Yichen Cao via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Instead, I prefer the force unwrap to be another character other than the<br>&gt; negate operator. It makes no sense to have the negation operator be<br>&gt; universal and suddenly introduce the force unwrap with the same character.<br>&gt;<br>&gt; Yichen<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/50147560/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2861bfeb71de9de58206bb6ae750bc2f?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>ilya</string> &lt;ilya.nikokoshev at gmail.com&gt;<p>December 16, 2015 at 02:00:00pm</p></header><div class="content"><p>Well the best way to make sure there is no confusion is to discourage the<br>usage of both operators.<br></p><p>Every time there&#39;s an expression that contains an excessive number of !s it<br>can be refactored by extracting separate variables, using non forced<br>unwrapping, comparing with true and false etc.<br></p><p>Not sure a syntactic change is warranted.<br></p><p>On Wed, Dec 16, 2015 at 17:04 Yichen Cao via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Instead, I prefer the force unwrap to be another character other than the<br>&gt; negate operator. It makes no sense to have the negation operator be<br>&gt; universal and suddenly introduce the force unwrap with the same character.<br>&gt;<br>&gt;<br>&gt; Yichen<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/eefe2abe/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4de621aec7ff90a03f5b9b21e790bc66?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Dennis Lysenko</string> &lt;dennis.s.lysenko at gmail.com&gt;<p>December 16, 2015 at 03:00:00pm</p></header><div class="content"><p>Ilya, +1. I have seen maybe 3-4 force unwraps in a 20,000 lines-of-swift<br>codebase. There is no need for them in practice when you use optional<br>binding.<br></p><p>On Wed, Dec 16, 2015, 9:33 AM ilya via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Well the best way to make sure there is no confusion is to discourage the<br>&gt; usage of both operators.<br>&gt;<br>&gt; Every time there&#39;s an expression that contains an excessive number of !s<br>&gt; it can be refactored by extracting separate variables, using non forced<br>&gt; unwrapping, comparing with true and false etc.<br>&gt;<br>&gt; Not sure a syntactic change is warranted.<br>&gt;<br>&gt; On Wed, Dec 16, 2015 at 17:04 Yichen Cao via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Instead, I prefer the force unwrap to be another character other than the<br>&gt;&gt; negate operator. It makes no sense to have the negation operator be<br>&gt;&gt; universal and suddenly introduce the force unwrap with the same character.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Yichen<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/304d941b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9e4d699404cd63ebe76f6f9325e20cf4?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Rafael Costa</string> &lt;rafael at rafaelcosta.me&gt;<p>December 16, 2015 at 01:00:00pm</p></header><div class="content"><p>I think like Jeremy Pereira.<br></p><p>I also am quite surprised that the overloading of the meaning of symbols is<br>&gt; a serious issue. It’s natural for people to distinguish the meaning of<br>&gt; things by context. C programmers don’t complain that they are always<br>&gt; confusing pointer dereferencing with multiplication do they? No.<br></p><p><br>It is used for two meanings? Yes. Does it cause THAT much of confusion? No.<br>I really think the way we&#39;re going today is just fine. Just an opinion<br>though.<br></p><p>On Wed, Dec 16, 2015 at 1:28 PM Dennis Lysenko via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Ilya, +1. I have seen maybe 3-4 force unwraps in a 20,000 lines-of-swift<br>&gt; codebase. There is no need for them in practice when you use optional<br>&gt; binding.<br>&gt;<br>&gt; On Wed, Dec 16, 2015, 9:33 AM ilya via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Well the best way to make sure there is no confusion is to discourage the<br>&gt;&gt; usage of both operators.<br>&gt;&gt;<br>&gt;&gt; Every time there&#39;s an expression that contains an excessive number of !s<br>&gt;&gt; it can be refactored by extracting separate variables, using non forced<br>&gt;&gt; unwrapping, comparing with true and false etc.<br>&gt;&gt;<br>&gt;&gt; Not sure a syntactic change is warranted.<br>&gt;&gt;<br>&gt;&gt; On Wed, Dec 16, 2015 at 17:04 Yichen Cao via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Instead, I prefer the force unwrap to be another character other than<br>&gt;&gt;&gt; the negate operator. It makes no sense to have the negation operator be<br>&gt;&gt;&gt; universal and suddenly introduce the force unwrap with the same character.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Yichen<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/0b7a3f51/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>December 17, 2015 at 10:00:00am</p></header><div class="content"><p>+1 Ilya, if one was to be removed I&#39;d remove force unwrap (and implicitly<br>unwrapped optionals unless their type inference rules are fixed).<br></p><p>On Thursday, 17 December 2015, Rafael Costa via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I think like Jeremy Pereira.<br>&gt;<br>&gt; I also am quite surprised that the overloading of the meaning of symbols<br>&gt;&gt; is a serious issue. It’s natural for people to distinguish the meaning of<br>&gt;&gt; things by context. C programmers don’t complain that they are always<br>&gt;&gt; confusing pointer dereferencing with multiplication do they? No.<br>&gt;<br>&gt;<br>&gt; It is used for two meanings? Yes. Does it cause THAT much of confusion?<br>&gt; No. I really think the way we&#39;re going today is just fine. Just an opinion<br>&gt; though.<br>&gt;<br>&gt; On Wed, Dec 16, 2015 at 1:28 PM Dennis Lysenko via swift-evolution &lt;<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt;&gt; Ilya, +1. I have seen maybe 3-4 force unwraps in a 20,000 lines-of-swift<br>&gt;&gt; codebase. There is no need for them in practice when you use optional<br>&gt;&gt; binding.<br>&gt;&gt;<br>&gt;&gt; On Wed, Dec 16, 2015, 9:33 AM ilya via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Well the best way to make sure there is no confusion is to discourage<br>&gt;&gt;&gt; the usage of both operators.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Every time there&#39;s an expression that contains an excessive number of !s<br>&gt;&gt;&gt; it can be refactored by extracting separate variables, using non forced<br>&gt;&gt;&gt; unwrapping, comparing with true and false etc.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Not sure a syntactic change is warranted.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Wed, Dec 16, 2015 at 17:04 Yichen Cao via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Instead, I prefer the force unwrap to be another character other than<br>&gt;&gt;&gt;&gt; the negate operator. It makes no sense to have the negation operator be<br>&gt;&gt;&gt;&gt; universal and suddenly introduce the force unwrap with the same character.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Yichen<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151217/a0bb9376/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
