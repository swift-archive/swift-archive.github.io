<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ade0c334ecff1448bb96f5f733bf1f83?s=50"></div><header><strong>Warning when &quot;overriding&quot; an extension method that&#39;s not in the protocol?</strong> from <string>Chris Eidhof</string> &lt;chris at eidhof.nl&gt;<p>December 10, 2015 at 05:00:00pm</p></header><div class="content"><p>Let&#39;s consider some subtle behavior when dealing with protocol extensions. We have a simple protocol:<br></p><p>protocol Shareable {<br>    var myDescription: String { get }<br>}<br></p><p>Using an extension, we can add a quick function `share` that prints the social media description to the command line:<br></p><p>extension Shareable {<br>    func share() {<br>        print(&quot;Sharing: \(self.myDescription)&quot;)<br>    }<br></p><p>    func linesAndShare() {<br>      print(&quot;----------&quot;)<br>      share()<br>      print(&quot;----------&quot;)<br>    }<br>}<br></p><p>We can make string conform to `Shareable` by implementing the `myDescription`. This is all we need to do, we then automatically get the `share()` method for free. However, if we choose to, we can also create a custom variant of the `share` method. For example, if we make `String` conform to `Shareable`, we could do it like this:<br></p><p>extension String:  Shareable {<br>    var myDescription: String { return self }<br>    <br>    func share() {<br>        print(&quot;Special String Sharing: \(self.myDescription)&quot;)<br>    }<br>}<br></p><p>Now, if we create a string and call `share()` on it, it will use our custom `share` method:<br></p><p>&quot;hello&quot;.share()<br>// Prints &quot;Special String Sharing: hello&quot;<br></p><p>However, if we treat &quot;hello&quot; as a `Shareable` value, and then call `share()`, we get a very different result:<br></p><p>let hello: Shareable = &quot;hello&quot;<br>hello.share()<br>// Prints: &quot;Sharing: hello&quot;<br></p><p>Things get even more interesting. What happens if we call `linesAndShare` directly on a `String`?<br></p><p>&quot;hello&quot;.linesAndShare()<br>// Prints: <br>//<br>// ----------<br>// Sharing: hello<br>// ----------<br></p><p>Coming from dynamic languages, you might be very surprised by the output of the last two examples. Even though we defined `share` on `String`, it did not override our default implementation. If we want to allow types conforming to `Share` to provide their own custom implementations, we need to specify `share()` in the protocol as well:<br></p><p>protocol Shareable {<br>    var myDescription: String { get }<br>    func share()<br>}<br></p><p>Now, we can still provide a default implementation of `share()`, yet allow other types to override the `share()` function. <br></p><p>If you&#39;ve made it all the way through, I want to propose that we add a warning in case you override a protocol extension method that&#39;s visible in your scope (and has exactly the same type). For example, implementing `share()` in String could trigger a warning. In my experience, it&#39;s confusing that it looks like you&#39;re overriding it, but you&#39;re not really. I strongly believe the current behavior is correct, yet, it can be quite confusing, especially coming from ObjC.<br></p><p>Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Warning when &quot;overriding&quot; an extension method that&#39;s not in the protocol?</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>December 10, 2015 at 03:00:00pm</p></header><div class="content"><p>&gt; If you&#39;ve made it all the way through, I want to propose that we add a warning in case you override a protocol extension method that&#39;s visible in your scope (and has exactly the same type). For example, implementing `share()` in String could trigger a warning. In my experience, it&#39;s confusing that it looks like you&#39;re overriding it, but you&#39;re not really. I strongly believe the current behavior is correct, yet, it can be quite confusing, especially coming from ObjC.<br></p><p>We’re actually discussing this for the last few days in the threads &quot;Proposal: Require explicit modifier for statically dispatched extension methods” (newer) and &quot;Proposal: Universal dynamic dispatch for method calls” (older). You might want to dig into the list archives and take a look at them. &lt;https://lists.swift.org/pipermail/swift-evolution/&gt;<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>Warning when &quot;overriding&quot; an extension method that&#39;s not in the protocol?</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>December 11, 2015 at 03:00:00pm</p></header><div class="content"><p>&gt; On Dec 10, 2015, at 3:13 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; If you&#39;ve made it all the way through, I want to propose that we add a warning in case you override a protocol extension method that&#39;s visible in your scope (and has exactly the same type). For example, implementing `share()` in String could trigger a warning. In my experience, it&#39;s confusing that it looks like you&#39;re overriding it, but you&#39;re not really. I strongly believe the current behavior is correct, yet, it can be quite confusing, especially coming from ObjC.<br>&gt; <br>&gt; We’re actually discussing this for the last few days in the threads &quot;Proposal: Require explicit modifier for statically dispatched extension methods” (newer) and &quot;Proposal: Universal dynamic dispatch for method calls” (older). You might want to dig into the list archives and take a look at them. &lt;https://lists.swift.org/pipermail/swift-evolution/&gt;<br></p><p>FWIW, I consider adding a warning for this case to be a bug fix [*] that doesn’t need to go through the evolution process: it’s an area where users clearly get surprised, and even if we do end up making changes in Swift 3.0, we could help users of Swift 2 greatly in the interim.<br></p><p>	- Doug<br></p><p>[*] Not coincidentally, a bug has been on me for a long time to do this… sorry.<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
