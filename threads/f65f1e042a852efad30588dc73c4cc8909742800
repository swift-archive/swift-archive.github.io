<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5f7be7497edf9bdf1ca4013f13419016?s=50"></div><header><strong>Location of ! in Boolean negation expressions</strong> from <string>Phil Wigglesworth</string> &lt;philw at mythlandia.com&gt;<p>August  7, 2016 at 07:00:00pm</p></header><div class="content"><p>Moving the location of the ! will cause more readability problems,<br>particularly with confusion with the unwrap operator, and the fact that it<br>hides the negation operator in the middle of an expression.<br>A simple, very easily implemented solution needs not language change for<br>use with a guard statement: use a function against() that returns the<br>negated version of the express handed to it:<br></p><p>   func against(b:Bool)-&gt;Bool { return !b }.<br></p><p>For example:<br></p><p>   guard against( xyz == nil ) else { return }<br></p><p>This only partially works with the example:<br></p><p>guard !parameters.contains(where: { !validValueRange.contains($0) }) else …<br>&gt;<br></p><p><br>&gt; “Make sure parameters does not contain an element such that<br>&gt; validValueRange does not contain this element.”<br>&gt;<br></p><p>But after much thought, the author actually means &quot;Guard against parameters<br>where an element is not in the validValueRange&quot;<br></p><p>If we add a trivial function<br></p><p>   func isOutOfRange(element) { return !validValueRange.contains(element) }<br></p><p>then we can write a clearly readable and understandable piece of code:<br></p><p>   guard against( parameters.contains(where:  isOutOfRange($0) ) ) else {<br>return }<br></p><p>which reads: &quot;guard against parameters containing out of range elements.&quot;<br>Problem solved.<br></p><p>Here two helper functions-one general, one specific to this code-simplify<br>the code, without having to add to the complexity of the Swift Language.<br></p><p><br></p><p><br>From: Anton Zhilin &lt;antonyzhilin at gmail.com&gt;<br>To: Darren Mo &lt;darren.mo at me.com&gt;<br>Cc: swift-evolution &lt;swift-evolution at swift.org&gt;<br>Date: Sat, 6 Aug 2016 21:32:34 +0300<br>Subject: Re: [swift-evolution] Location of ! in Boolean negation expressions<br>2016-08-06 10:37 GMT+03:00 Darren Mo via swift-evolution &lt;<br>swift-evolution at swift.org&gt;:<br></p><p>&gt; Consider code like<br>&gt;<br>&gt; guard !parameters.contains(where: { !validValueRange.contains($0) }) else …<br>&gt;<br>&gt; Oftentimes I need to write negation expressions like this. The location of<br>&gt; the exclamation marks really bugs me when writing and reading this code.<br>&gt; The natural English ordering would be something like<br>&gt;<br>&gt; “Make sure parameters does not contain an element such that<br>&gt; validValueRange does not contain this element.”<br>&gt;<br>against a parameter that has a validValueRange that does not contain this<br>element<br>guard against( parameters.contains(where: { !validValueRange.contains($)} )<br>) else ..<br></p><p>&gt;<br>&gt; But the programming-language-imposed ordering is<br>&gt;<br>&gt; “Make sure NOT parameters contains an element such that NOT<br>&gt; validValueRange contains this element.”<br></p><p><br>One solution to this problem would be to add negative method versions<br>wherever possible. For example: &#39;all&#39;, &#39;any&#39;, &#39;some&#39;, &#39;none&#39; methods<br>instead of just &#39;contains(where:)&#39;.<br>Plus, we could add &#39;unless&#39; alongside &#39;guard&#39;. But these features were<br>postponed to Stage 2.<br></p><p>On Sat, Aug 6, 2016 at 2:37 AM, Darren Mo via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Consider code like<br>&gt;<br>&gt; guard !parameters.contains(where: { !validValueRange.contains($0) }) else …<br>&gt;<br>&gt; Oftentimes I need to write negation expressions like this. The location of<br>&gt; the exclamation marks really bugs me when writing and reading this code.<br>&gt; The natural English ordering would be something like<br>&gt;<br>&gt; “Make sure parameters does not contain an element such that<br>&gt; validValueRange does not contain this element.”<br>&gt;<br>&gt; But the programming-language-imposed ordering is<br>&gt;<br>&gt; “Make sure NOT parameters contains an element such that NOT<br>&gt; validValueRange contains this element.”<br>&gt;<br>&gt; See how much harder the programming language version is to understand?<br>&gt; Most of the time I write the positive version first because it comes out so<br>&gt; naturally, and then I add the exclamation marks afterwards. It really<br>&gt; burdens my mind every time I need to write code like this. Let’s come up<br>&gt; with a solution to address this!<br>&gt;<br>&gt; Here’s my zero-thought solution:<br>&gt;<br>&gt; guard parameters.!contains(where: { validValueRange.!contains($0) }) else …<br>&gt;<br>&gt; I’d love to hear alternate solutions and whether other people are having<br>&gt; this problem too!<br>&gt;<br>&gt; Darren<br>&gt; _______________________________________________<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160807/f65f2800/attachment.html&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
