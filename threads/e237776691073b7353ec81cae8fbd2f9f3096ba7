<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6e61814129bba30380909f8d172052e8?s=50"></div><header><strong>Proposal: Adding precedence option for prefix and postfix operators</strong> from <string>Jason Nielsen</string> &lt;drjdnielsen at gmail.com&gt;<p>January 16, 2016 at 10:00:00am</p></header><div class="content"><p>Hi all,<br></p><p>My proposal is to add a precedence option for prefix and postfix<br>operators.  It is great that swift allows for associativity and precedence<br>for binary operators but it hasn&#39;t quite gone all the way to make operator<br>overloading fully functional (just an opinion).  To illustrate consider the<br>following code:<br></p><p>import CoreFoundation<br></p><p>infix operator ** { associativity right precedence 200 }<br></p><p>func ** (base: Double, power: Double) -&gt; Double {<br>    return pow(base, power)<br>}<br></p><p>print(-3**2)<br>print(0-3**2)<br></p><p>which prints 9 and -9.  In the first case because unary minus has higher<br>precedence as a prefix operator it evaluates to (-3)*(-3) and the second<br>because - is viewed as a binary operator of lower precedence as (0-(3*3).<br>Exponentiation has higher precedence than subtraction so -3**2 should be -9<br>and the two expressions above are mathematically equivalent.  I originally<br>reported this as a bug (SR-552) as to me the point of operator overloading<br>is to allow you to write numerical expressions cleanly but should give you<br>the correct mathematical result.  The only really useful application I can<br>think of for operator overloading is basically as a DSL for numerical<br>expressions.  If it doesn&#39;t allow you to get correct results without having<br>to put brackets everywhere it sort of defeats the purpose (just my opinion<br>of course).<br></p><p>Best regards,<br>Jason<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160116/e2376ba7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4d13105de53a43ce1df97869ca6c140e?s=50"></div><header><strong>Proposal: Adding precedence option for prefix and postfix operators</strong> from <string>Maximilian Hünenberger</string> &lt;m.huenenberger at me.com&gt;<p>January 16, 2016 at 10:00:00pm</p></header><div class="content"><p>+1 for me and as far as values go:<br></p><p>prefix -<br>precedence 150, same as infix * since it is essentially (-1)*<br></p><p>prefix +<br>same as prefix -<br></p><p><br>To break the least amount of code:<br></p><p>prefix !<br>precedence 140, which is higher than any other Bool operator (== is highest with 130)<br></p><p>prefix ~<br>precedence 170, which is higher than any other binary operator (&lt;&lt; is highest with 160)<br></p><p>&gt; Am 16.01.2016 um 16:30 schrieb Jason Nielsen via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; My proposal is to add a precedence option for prefix and postfix operators.  It is great that swift allows for associativity and precedence for binary operators but it hasn&#39;t quite gone all the way to make operator overloading fully functional (just an opinion).  To illustrate consider the following code:<br>&gt; <br>&gt; import CoreFoundation<br>&gt; <br>&gt; infix operator ** { associativity right precedence 200 }<br>&gt; <br>&gt; func ** (base: Double, power: Double) -&gt; Double {<br>&gt;     return pow(base, power)<br>&gt; }<br>&gt; <br>&gt; print(-3**2)<br>&gt; print(0-3**2)<br>&gt; <br>&gt; which prints 9 and -9.  In the first case because unary minus has higher precedence as a prefix operator it evaluates to (-3)*(-3) and the second because - is viewed as a binary operator of lower precedence as (0-(3*3).  Exponentiation has higher precedence than subtraction so -3**2 should be -9 and the two expressions above are mathematically equivalent.  I originally reported this as a bug (SR-552) as to me the point of operator overloading is to allow you to write numerical expressions cleanly but should give you the correct mathematical result.  The only really useful application I can think of for operator overloading is basically as a DSL for numerical expressions.  If it doesn&#39;t allow you to get correct results without having to put brackets everywhere it sort of defeats the purpose (just my opinion of course).<br>&gt; <br>&gt; Best regards,<br>&gt; Jason<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>Proposal: Adding precedence option for prefix and postfix operators</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>January 17, 2016 at 09:00:00am</p></header><div class="content"><p>I think they are already the highest precedence. That why they need not to<br>be set this property.<br></p><p>Also, I think things like<br></p><p>print(-3**2)<br>&gt; print(0-3**2)<br></p><p><br>should never appear in Swift. As it is hard for human to read.<br></p><p>zhaoxin<br></p><p><br>On Sun, Jan 17, 2016 at 5:21 AM, Maximilian Hünenberger &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; +1 for me and as far as values go:<br>&gt;<br>&gt; prefix -<br>&gt; precedence 150, same as infix * since it is essentially (-1)*<br>&gt;<br>&gt; prefix +<br>&gt; same as prefix -<br>&gt;<br>&gt;<br>&gt; To break the least amount of code:<br>&gt;<br>&gt; prefix !<br>&gt; precedence 140, which is higher than any other Bool operator (== is<br>&gt; highest with 130)<br>&gt;<br>&gt; prefix ~<br>&gt; precedence 170, which is higher than any other binary operator (&lt;&lt; is<br>&gt; highest with 160)<br>&gt;<br>&gt; &gt; Am 16.01.2016 um 16:30 schrieb Jason Nielsen via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt;:<br>&gt; &gt;<br>&gt; &gt; Hi all,<br>&gt; &gt;<br>&gt; &gt; My proposal is to add a precedence option for prefix and postfix<br>&gt; operators.  It is great that swift allows for associativity and precedence<br>&gt; for binary operators but it hasn&#39;t quite gone all the way to make operator<br>&gt; overloading fully functional (just an opinion).  To illustrate consider the<br>&gt; following code:<br>&gt; &gt;<br>&gt; &gt; import CoreFoundation<br>&gt; &gt;<br>&gt; &gt; infix operator ** { associativity right precedence 200 }<br>&gt; &gt;<br>&gt; &gt; func ** (base: Double, power: Double) -&gt; Double {<br>&gt; &gt;     return pow(base, power)<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; print(-3**2)<br>&gt; &gt; print(0-3**2)<br>&gt; &gt;<br>&gt; &gt; which prints 9 and -9.  In the first case because unary minus has higher<br>&gt; precedence as a prefix operator it evaluates to (-3)*(-3) and the second<br>&gt; because - is viewed as a binary operator of lower precedence as (0-(3*3).<br>&gt; Exponentiation has higher precedence than subtraction so -3**2 should be -9<br>&gt; and the two expressions above are mathematically equivalent.  I originally<br>&gt; reported this as a bug (SR-552) as to me the point of operator overloading<br>&gt; is to allow you to write numerical expressions cleanly but should give you<br>&gt; the correct mathematical result.  The only really useful application I can<br>&gt; think of for operator overloading is basically as a DSL for numerical<br>&gt; expressions.  If it doesn&#39;t allow you to get correct results without having<br>&gt; to put brackets everywhere it sort of defeats the purpose (just my opinion<br>&gt; of course).<br>&gt; &gt;<br>&gt; &gt; Best regards,<br>&gt; &gt; Jason<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160117/8802cf8f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4d13105de53a43ce1df97869ca6c140e?s=50"></div><header><strong>Proposal: Adding precedence option for prefix and postfix operators</strong> from <string>Maximilian Hünenberger</string> &lt;m.huenenberger at me.com&gt;<p>January 17, 2016 at 05:00:00pm</p></header><div class="content"><p>It&#39;s true prefix operators have the highest precedence (like ∞) but it should be lower so `-3**2` gets mathematically correct evaluated to `-9` if such an expression appears.<br></p><p>- Maximilian<br></p><p>&gt; Am 17.01.2016 um 02:36 schrieb 肇鑫 &lt;owenzx at gmail.com&gt;:<br>&gt; <br>&gt; I think they are already the highest precedence. That why they need not to be set this property. <br>&gt; <br>&gt; Also, I think things like <br>&gt; <br>&gt;&gt; print(-3**2)<br>&gt;&gt; print(0-3**2)<br>&gt; <br>&gt; should never appear in Swift. As it is hard for human to read. <br>&gt; <br>&gt; zhaoxin<br>&gt; <br>&gt; <br>&gt;&gt; On Sun, Jan 17, 2016 at 5:21 AM, Maximilian Hünenberger &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; +1 for me and as far as values go:<br>&gt;&gt; <br>&gt;&gt; prefix -<br>&gt;&gt; precedence 150, same as infix * since it is essentially (-1)*<br>&gt;&gt; <br>&gt;&gt; prefix +<br>&gt;&gt; same as prefix -<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; To break the least amount of code:<br>&gt;&gt; <br>&gt;&gt; prefix !<br>&gt;&gt; precedence 140, which is higher than any other Bool operator (== is highest with 130)<br>&gt;&gt; <br>&gt;&gt; prefix ~<br>&gt;&gt; precedence 170, which is higher than any other binary operator (&lt;&lt; is highest with 160)<br>&gt;&gt; <br>&gt;&gt; &gt; Am 16.01.2016 um 16:30 schrieb Jason Nielsen via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Hi all,<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; My proposal is to add a precedence option for prefix and postfix operators.  It is great that swift allows for associativity and precedence for binary operators but it hasn&#39;t quite gone all the way to make operator overloading fully functional (just an opinion).  To illustrate consider the following code:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; import CoreFoundation<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; infix operator ** { associativity right precedence 200 }<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; func ** (base: Double, power: Double) -&gt; Double {<br>&gt;&gt; &gt;     return pow(base, power)<br>&gt;&gt; &gt; }<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; print(-3**2)<br>&gt;&gt; &gt; print(0-3**2)<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; which prints 9 and -9.  In the first case because unary minus has higher precedence as a prefix operator it evaluates to (-3)*(-3) and the second because - is viewed as a binary operator of lower precedence as (0-(3*3).  Exponentiation has higher precedence than subtraction so -3**2 should be -9 and the two expressions above are mathematically equivalent.  I originally reported this as a bug (SR-552) as to me the point of operator overloading is to allow you to write numerical expressions cleanly but should give you the correct mathematical result.  The only really useful application I can think of for operator overloading is basically as a DSL for numerical expressions.  If it doesn&#39;t allow you to get correct results without having to put brackets everywhere it sort of defeats the purpose (just my opinion of course).<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Best regards,<br>&gt;&gt; &gt; Jason<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160117/cd3433f0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Proposal: Adding precedence option for prefix and postfix operators</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>January 17, 2016 at 08:00:00am</p></header><div class="content"><p>In that context, I would say 9 is the correct answer. Mathematically speaking, the &quot;-&quot; is part of the number, not an operator.<br></p><p>At least I think that&#39;s how it worked last time I was in math class.<br></p><p>- Dave Sweeris<br></p><p>&gt; On Jan 17, 2016, at 08:24, Maximilian Hünenberger via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; It&#39;s true prefix operators have the highest precedence (like ∞) but it should be lower so `-3**2` gets mathematically correct evaluated to `-9` if such an expression appears.<br>&gt; <br>&gt; - Maximilian<br>&gt; <br>&gt;&gt; Am 17.01.2016 um 02:36 schrieb 肇鑫 &lt;owenzx at gmail.com&gt;:<br>&gt;&gt; <br>&gt;&gt; I think they are already the highest precedence. That why they need not to be set this property. <br>&gt;&gt; <br>&gt;&gt; Also, I think things like <br>&gt;&gt; <br>&gt;&gt;&gt; print(-3**2)<br>&gt;&gt;&gt; print(0-3**2)<br>&gt;&gt; <br>&gt;&gt; should never appear in Swift. As it is hard for human to read. <br>&gt;&gt; <br>&gt;&gt; zhaoxin<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Sun, Jan 17, 2016 at 5:21 AM, Maximilian Hünenberger &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; +1 for me and as far as values go:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; prefix -<br>&gt;&gt;&gt; precedence 150, same as infix * since it is essentially (-1)*<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; prefix +<br>&gt;&gt;&gt; same as prefix -<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; To break the least amount of code:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; prefix !<br>&gt;&gt;&gt; precedence 140, which is higher than any other Bool operator (== is highest with 130)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; prefix ~<br>&gt;&gt;&gt; precedence 170, which is higher than any other binary operator (&lt;&lt; is highest with 160)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt; Am 16.01.2016 um 16:30 schrieb Jason Nielsen via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; Hi all,<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; My proposal is to add a precedence option for prefix and postfix operators.  It is great that swift allows for associativity and precedence for binary operators but it hasn&#39;t quite gone all the way to make operator overloading fully functional (just an opinion).  To illustrate consider the following code:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; import CoreFoundation<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; infix operator ** { associativity right precedence 200 }<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; func ** (base: Double, power: Double) -&gt; Double {<br>&gt;&gt;&gt; &gt;     return pow(base, power)<br>&gt;&gt;&gt; &gt; }<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; print(-3**2)<br>&gt;&gt;&gt; &gt; print(0-3**2)<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; which prints 9 and -9.  In the first case because unary minus has higher precedence as a prefix operator it evaluates to (-3)*(-3) and the second because - is viewed as a binary operator of lower precedence as (0-(3*3).  Exponentiation has higher precedence than subtraction so -3**2 should be -9 and the two expressions above are mathematically equivalent.  I originally reported this as a bug (SR-552) as to me the point of operator overloading is to allow you to write numerical expressions cleanly but should give you the correct mathematical result.  The only really useful application I can think of for operator overloading is basically as a DSL for numerical expressions.  If it doesn&#39;t allow you to get correct results without having to put brackets everywhere it sort of defeats the purpose (just my opinion of course).<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; Best regards,<br>&gt;&gt;&gt; &gt; Jason<br>&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160117/29738e4c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4d13105de53a43ce1df97869ca6c140e?s=50"></div><header><strong>Proposal: Adding precedence option for prefix and postfix operators</strong> from <string>Maximilian Hünenberger</string> &lt;m.huenenberger at me.com&gt;<p>January 17, 2016 at 06:00:00pm</p></header><div class="content"><p>Even though `-3 ** 2` seems to equal 9 but see this result: http://m.wolframalpha.com/input/?i=-3+%5E+2&amp;x=0&amp;y=0<br></p><p>So this behavior forces you to set correct parenthesis around numbers with a minus sign: (-3) ** 2<br>In order to make -3 ** 2 visually less ambiguous we could allow (or even require) prefix operators to have a white space separator:<br>- 3 ** 2<br></p><p><br>Another example:<br></p><p>3 * -4<br>Would be in this case also ambiguous for the compiler since `*` and `-` have the same precedence and you are forced to write it as:<br>3 * (-4)<br>Which is also mathematically more correct<br></p><p><br>I just noticed that<br>3 - -4<br>Is still unambiguous.<br>If the precedence of prefix - would be the same as infix `+` and `-` all cases I can think of are ambiguous so you are forced to use correct mathematical syntax:<br>3 - (-4)<br></p><p>Which could also be an indicator to rewrite it to<br>3 + 4<br>And 3 + (-4) to 3 - 4<br></p><p><br>- Maximilian<br></p><p>&gt; Am 17.01.2016 um 17:48 schrieb David Sweeris &lt;davesweeris at mac.com&gt;:<br>&gt; <br>&gt; In that context, I would say 9 is the correct answer. Mathematically speaking, the &quot;-&quot; is part of the number, not an operator.<br>&gt; <br>&gt; At least I think that&#39;s how it worked last time I was in math class.<br>&gt; <br>&gt; - Dave Sweeris<br>&gt; <br>&gt;&gt; On Jan 17, 2016, at 08:24, Maximilian Hünenberger via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; It&#39;s true prefix operators have the highest precedence (like ∞) but it should be lower so `-3**2` gets mathematically correct evaluated to `-9` if such an expression appears.<br>&gt;&gt; <br>&gt;&gt; - Maximilian<br>&gt;&gt; <br>&gt;&gt;&gt; Am 17.01.2016 um 02:36 schrieb 肇鑫 &lt;owenzx at gmail.com&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think they are already the highest precedence. That why they need not to be set this property. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Also, I think things like <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; print(-3**2)<br>&gt;&gt;&gt;&gt; print(0-3**2)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; should never appear in Swift. As it is hard for human to read. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; zhaoxin<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Sun, Jan 17, 2016 at 5:21 AM, Maximilian Hünenberger &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; +1 for me and as far as values go:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; prefix -<br>&gt;&gt;&gt;&gt; precedence 150, same as infix * since it is essentially (-1)*<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; prefix +<br>&gt;&gt;&gt;&gt; same as prefix -<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; To break the least amount of code:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; prefix !<br>&gt;&gt;&gt;&gt; precedence 140, which is higher than any other Bool operator (== is highest with 130)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; prefix ~<br>&gt;&gt;&gt;&gt; precedence 170, which is higher than any other binary operator (&lt;&lt; is highest with 160)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; &gt; Am 16.01.2016 um 16:30 schrieb Jason Nielsen via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; Hi all,<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; My proposal is to add a precedence option for prefix and postfix operators.  It is great that swift allows for associativity and precedence for binary operators but it hasn&#39;t quite gone all the way to make operator overloading fully functional (just an opinion).  To illustrate consider the following code:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; import CoreFoundation<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; infix operator ** { associativity right precedence 200 }<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; func ** (base: Double, power: Double) -&gt; Double {<br>&gt;&gt;&gt;&gt; &gt;     return pow(base, power)<br>&gt;&gt;&gt;&gt; &gt; }<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; print(-3**2)<br>&gt;&gt;&gt;&gt; &gt; print(0-3**2)<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; which prints 9 and -9.  In the first case because unary minus has higher precedence as a prefix operator it evaluates to (-3)*(-3) and the second because - is viewed as a binary operator of lower precedence as (0-(3*3).  Exponentiation has higher precedence than subtraction so -3**2 should be -9 and the two expressions above are mathematically equivalent.  I originally reported this as a bug (SR-552) as to me the point of operator overloading is to allow you to write numerical expressions cleanly but should give you the correct mathematical result.  The only really useful application I can think of for operator overloading is basically as a DSL for numerical expressions.  If it doesn&#39;t allow you to get correct results without having to put brackets everywhere it sort of defeats the purpose (just my opinion of course).<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; Best regards,<br>&gt;&gt;&gt;&gt; &gt; Jason<br>&gt;&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160117/ad27e1d3/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6e61814129bba30380909f8d172052e8?s=50"></div><header><strong>Proposal: Adding precedence option for prefix and postfix operators</strong> from <string>Jason Nielsen</string> &lt;drjdnielsen at gmail.com&gt;<p>January 17, 2016 at 12:00:00pm</p></header><div class="content"><p>I&#39;m afraid that is not a correct statement.  There is no arguing that -3^2<br>is -9 and that -3^2 and 0-3^2 are equivalent mathematically.<br>Exponentiation has higher precedence than - and subtraction is definitely<br>an operator so -3^2 != (-3)^2.   That swift has decided that -3 is<br>different than 0 -3 (which is an error) is a language design choice which I<br>think is not a good one (just my opinion of course).  I can&#39;t think of any<br>other language that is used for numerics R, matlab, python etc. that makes<br>spacing like this significant).  I realize that you are saying that -3 is a<br>negative number but what is a negative number by definition?  This is all<br>strange to me.. if you type -3 at the REPL you get -3 if you type +3 you<br>get an error.  So +3 isn&#39;t a positive number?<br></p><p>Best regards,<br>Jason<br></p><p>On Sun, Jan 17, 2016 at 11:48 AM, David Sweeris via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; In that context, I would say 9 is the correct answer. Mathematically<br>&gt; speaking, the &quot;-&quot; is part of the number, not an operator.<br>&gt;<br>&gt; At least I think that&#39;s how it worked last time I was in math class.<br>&gt;<br>&gt; - Dave Sweeris<br>&gt;<br>&gt; On Jan 17, 2016, at 08:24, Maximilian Hünenberger via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; It&#39;s true prefix operators have the highest precedence (like ∞) but it<br>&gt; should be lower so `-3**2` gets mathematically correct evaluated to `-9` if<br>&gt; such an expression appears.<br>&gt;<br>&gt; - Maximilian<br>&gt;<br>&gt; Am 17.01.2016 um 02:36 schrieb 肇鑫 &lt;owenzx at gmail.com&gt;:<br>&gt;<br>&gt; I think they are already the highest precedence. That why they need not<br>&gt; to be set this property.<br>&gt;<br>&gt; Also, I think things like<br>&gt;<br>&gt; print(-3**2)<br>&gt;&gt; print(0-3**2)<br>&gt;<br>&gt;<br>&gt; should never appear in Swift. As it is hard for human to read.<br>&gt;<br>&gt; zhaoxin<br>&gt;<br>&gt;<br>&gt; On Sun, Jan 17, 2016 at 5:21 AM, Maximilian Hünenberger &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; +1 for me and as far as values go:<br>&gt;&gt;<br>&gt;&gt; prefix -<br>&gt;&gt; precedence 150, same as infix * since it is essentially (-1)*<br>&gt;&gt;<br>&gt;&gt; prefix +<br>&gt;&gt; same as prefix -<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; To break the least amount of code:<br>&gt;&gt;<br>&gt;&gt; prefix !<br>&gt;&gt; precedence 140, which is higher than any other Bool operator (== is<br>&gt;&gt; highest with 130)<br>&gt;&gt;<br>&gt;&gt; prefix ~<br>&gt;&gt; precedence 170, which is higher than any other binary operator (&lt;&lt; is<br>&gt;&gt; highest with 160)<br>&gt;&gt;<br>&gt;&gt; &gt; Am 16.01.2016 um 16:30 schrieb Jason Nielsen via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt;:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Hi all,<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; My proposal is to add a precedence option for prefix and postfix<br>&gt;&gt; operators.  It is great that swift allows for associativity and precedence<br>&gt;&gt; for binary operators but it hasn&#39;t quite gone all the way to make operator<br>&gt;&gt; overloading fully functional (just an opinion).  To illustrate consider the<br>&gt;&gt; following code:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; import CoreFoundation<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; infix operator ** { associativity right precedence 200 }<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; func ** (base: Double, power: Double) -&gt; Double {<br>&gt;&gt; &gt;     return pow(base, power)<br>&gt;&gt; &gt; }<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; print(-3**2)<br>&gt;&gt; &gt; print(0-3**2)<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; which prints 9 and -9.  In the first case because unary minus has<br>&gt;&gt; higher precedence as a prefix operator it evaluates to (-3)*(-3) and the<br>&gt;&gt; second because - is viewed as a binary operator of lower precedence as<br>&gt;&gt; (0-(3*3).  Exponentiation has higher precedence than subtraction so -3**2<br>&gt;&gt; should be -9 and the two expressions above are mathematically equivalent.<br>&gt;&gt; I originally reported this as a bug (SR-552) as to me the point of operator<br>&gt;&gt; overloading is to allow you to write numerical expressions cleanly but<br>&gt;&gt; should give you the correct mathematical result.  The only really useful<br>&gt;&gt; application I can think of for operator overloading is basically as a DSL<br>&gt;&gt; for numerical expressions.  If it doesn&#39;t allow you to get correct results<br>&gt;&gt; without having to put brackets everywhere it sort of defeats the purpose<br>&gt;&gt; (just my opinion of course).<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Best regards,<br>&gt;&gt; &gt; Jason<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160117/e5543569/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>Proposal: Adding precedence option for prefix and postfix operators</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>January 18, 2016 at 01:00:00pm</p></header><div class="content"><p>I think I disagree with you.<br></p><p>It is true that in mathematics people generally write (-x)^n to raise -x to the nth power but the notation of exponentiation (i.e. the n is a superscript to the x) makes it look like a postfix operator that binds more tightly than the negation. The general rule in Swift is that pre- and postfix have higher precedence and I don’t think this should be changed just because they do it slightly differently in maths. There’s no equivalent visual cue to superscripting that can make it look like ** binds more tightly than unary minus and I think people who are used to Swift conventions will find it confusing, especially considering that exponentiation is just one of an infinitude of possible binary operators. <br></p><p>Furthermore, many people including myself like to put spaces around our binary operators. So you can argue that <br></p><p>    -3**2 <br></p><p>should be -9 (although according to Swift conventions, it obviously is not) but what about <br></p><p>    -3 ** 2 <br></p><p>To me, that reads as (-3)**2 pretty unambiguously.<br></p><p>You could argue that I should change my formatting conventions in the case of higher-than-prefix-precedence binary operators but<br></p><p>    -3**-2 <br></p><p>and<br></p><p>    someOptional!**2<br></p><p>won’t even compile. You need to put the spaces in so that Swift can identify the operators. <br></p><p>&gt; On 17 Jan 2016, at 18:19, Jason Nielsen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;m afraid that is not a correct statement.  There is no arguing that -3^2 is -9 and that -3^2 and 0-3^2 are equivalent mathematically.  Exponentiation has higher precedence than - and subtraction is definitely an operator so -3^2 != (-3)^2.   That swift has decided that -3 is different than 0 -3 (which is an error) is a language design choice which I think is not a good one (just my opinion of course).  I can&#39;t think of any other language that is used for numerics R, matlab, python etc. that makes spacing like this significant).  I realize that you are saying that -3 is a negative number but what is a negative number by definition?  This is all strange to me.. if you type -3 at the REPL you get -3 if you type +3 you get an error.  So +3 isn&#39;t a positive number? <br>&gt; <br>&gt; Best regards,<br>&gt; Jason<br>&gt; <br>&gt; On Sun, Jan 17, 2016 at 11:48 AM, David Sweeris via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; In that context, I would say 9 is the correct answer. Mathematically speaking, the &quot;-&quot; is part of the number, not an operator.<br>&gt; <br>&gt; At least I think that&#39;s how it worked last time I was in math class.<br>&gt; <br>&gt; - Dave Sweeris<br>&gt; <br>&gt; On Jan 17, 2016, at 08:24, Maximilian Hünenberger via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; It&#39;s true prefix operators have the highest precedence (like ∞) but it should be lower so `-3**2` gets mathematically correct evaluated to `-9` if such an expression appears.<br>&gt;&gt; <br>&gt;&gt; - Maximilian<br>&gt;&gt; <br>&gt;&gt; Am 17.01.2016 um 02:36 schrieb 肇鑫 &lt;owenzx at gmail.com&gt;:<br>&gt;&gt; <br>&gt;&gt;&gt; I think they are already the highest precedence. That why they need not to be set this property. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Also, I think things like <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; print(-3**2)<br>&gt;&gt;&gt; print(0-3**2)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; should never appear in Swift. As it is hard for human to read. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; zhaoxin<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Sun, Jan 17, 2016 at 5:21 AM, Maximilian Hünenberger &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; +1 for me and as far as values go:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; prefix -<br>&gt;&gt;&gt; precedence 150, same as infix * since it is essentially (-1)*<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; prefix +<br>&gt;&gt;&gt; same as prefix -<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; To break the least amount of code:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; prefix !<br>&gt;&gt;&gt; precedence 140, which is higher than any other Bool operator (== is highest with 130)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; prefix ~<br>&gt;&gt;&gt; precedence 170, which is higher than any other binary operator (&lt;&lt; is highest with 160)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt; Am 16.01.2016 um 16:30 schrieb Jason Nielsen via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; Hi all,<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; My proposal is to add a precedence option for prefix and postfix operators.  It is great that swift allows for associativity and precedence for binary operators but it hasn&#39;t quite gone all the way to make operator overloading fully functional (just an opinion).  To illustrate consider the following code:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; import CoreFoundation<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; infix operator ** { associativity right precedence 200 }<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; func ** (base: Double, power: Double) -&gt; Double {<br>&gt;&gt;&gt; &gt;     return pow(base, power)<br>&gt;&gt;&gt; &gt; }<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; print(-3**2)<br>&gt;&gt;&gt; &gt; print(0-3**2)<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; which prints 9 and -9.  In the first case because unary minus has higher precedence as a prefix operator it evaluates to (-3)*(-3) and the second because - is viewed as a binary operator of lower precedence as (0-(3*3).  Exponentiation has higher precedence than subtraction so -3**2 should be -9 and the two expressions above are mathematically equivalent.  I originally reported this as a bug (SR-552) as to me the point of operator overloading is to allow you to write numerical expressions cleanly but should give you the correct mathematical result.  The only really useful application I can think of for operator overloading is basically as a DSL for numerical expressions.  If it doesn&#39;t allow you to get correct results without having to put brackets everywhere it sort of defeats the purpose (just my opinion of course).<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; Best regards,<br>&gt;&gt;&gt; &gt; Jason<br>&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6e61814129bba30380909f8d172052e8?s=50"></div><header><strong>Proposal: Adding precedence option for prefix and postfix operators</strong> from <string>Jason Nielsen</string> &lt;drjdnielsen at gmail.com&gt;<p>January 20, 2016 at 01:00:00am</p></header><div class="content"><p>That is the case because brackets have higher precedence... these are the<br>rules that you leaned in primary school (BEDMAS -- Brackets,<br>exponentiation, division, multiplication, addition and subtraction).  So<br>(-x)^n is expressed as (-x)*(-x)*....*(-x) n times (if n is even then<br>positive, if odd negative).  By the same logic -x^n  is -(x*x*...*x).<br>Swift doesn&#39;t consider spacing important in terms of precedence else 2+3 *<br>4  would equal 20 in which case I wouldn&#39;t have even made the original bug<br>report or started this e-mail.  There is no concept of spacing in<br>expressing an equation in math.  Again having negation (using computer<br>science speak unary minus aka the prefix operator - ) having precedence<br>over any other operator by default is a mistake and limits the utility of<br>operator overloading in the language.<br></p><p>Best regards,<br>Jason<br></p><p>On Mon, Jan 18, 2016 at 7:51 AM, Jeremy Pereira &lt;<br>jeremy.j.pereira at googlemail.com&gt; wrote:<br></p><p>&gt; I think I disagree with you.<br>&gt;<br>&gt; It is true that in mathematics people generally write (-x)^n to raise -x<br>&gt; to the nth power but the notation of exponentiation (i.e. the n is a<br>&gt; superscript to the x) makes it look like a postfix operator that binds more<br>&gt; tightly than the negation. The general rule in Swift is that pre- and<br>&gt; postfix have higher precedence and I don’t think this should be changed<br>&gt; just because they do it slightly differently in maths. There’s no<br>&gt; equivalent visual cue to superscripting that can make it look like ** binds<br>&gt; more tightly than unary minus and I think people who are used to Swift<br>&gt; conventions will find it confusing, especially considering that<br>&gt; exponentiation is just one of an infinitude of possible binary operators.<br>&gt;<br>&gt; Furthermore, many people including myself like to put spaces around our<br>&gt; binary operators. So you can argue that<br>&gt;<br>&gt;     -3**2<br>&gt;<br>&gt; should be -9 (although according to Swift conventions, it obviously is<br>&gt; not) but what about<br>&gt;<br>&gt;     -3 ** 2<br>&gt;<br>&gt; To me, that reads as (-3)**2 pretty unambiguously.<br>&gt;<br>&gt; You could argue that I should change my formatting conventions in the case<br>&gt; of higher-than-prefix-precedence binary operators but<br>&gt;<br>&gt;     -3**-2<br>&gt;<br>&gt; and<br>&gt;<br>&gt;     someOptional!**2<br>&gt;<br>&gt; won’t even compile. You need to put the spaces in so that Swift can<br>&gt; identify the operators.<br>&gt;<br>&gt; &gt; On 17 Jan 2016, at 18:19, Jason Nielsen via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; I&#39;m afraid that is not a correct statement.  There is no arguing that<br>&gt; -3^2 is -9 and that -3^2 and 0-3^2 are equivalent mathematically.<br>&gt; Exponentiation has higher precedence than - and subtraction is definitely<br>&gt; an operator so -3^2 != (-3)^2.   That swift has decided that -3 is<br>&gt; different than 0 -3 (which is an error) is a language design choice which I<br>&gt; think is not a good one (just my opinion of course).  I can&#39;t think of any<br>&gt; other language that is used for numerics R, matlab, python etc. that makes<br>&gt; spacing like this significant).  I realize that you are saying that -3 is a<br>&gt; negative number but what is a negative number by definition?  This is all<br>&gt; strange to me.. if you type -3 at the REPL you get -3 if you type +3 you<br>&gt; get an error.  So +3 isn&#39;t a positive number?<br>&gt; &gt;<br>&gt; &gt; Best regards,<br>&gt; &gt; Jason<br>&gt; &gt;<br>&gt; &gt; On Sun, Jan 17, 2016 at 11:48 AM, David Sweeris via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; In that context, I would say 9 is the correct answer. Mathematically<br>&gt; speaking, the &quot;-&quot; is part of the number, not an operator.<br>&gt; &gt;<br>&gt; &gt; At least I think that&#39;s how it worked last time I was in math class.<br>&gt; &gt;<br>&gt; &gt; - Dave Sweeris<br>&gt; &gt;<br>&gt; &gt; On Jan 17, 2016, at 08:24, Maximilian Hünenberger via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt; It&#39;s true prefix operators have the highest precedence (like ∞) but it<br>&gt; should be lower so `-3**2` gets mathematically correct evaluated to `-9` if<br>&gt; such an expression appears.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; - Maximilian<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Am 17.01.2016 um 02:36 schrieb 肇鑫 &lt;owenzx at gmail.com&gt;:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; I think they are already the highest precedence. That why they need<br>&gt; not to be set this property.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Also, I think things like<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; print(-3**2)<br>&gt; &gt;&gt;&gt; print(0-3**2)<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; should never appear in Swift. As it is hard for human to read.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; zhaoxin<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; On Sun, Jan 17, 2016 at 5:21 AM, Maximilian Hünenberger &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt; +1 for me and as far as values go:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; prefix -<br>&gt; &gt;&gt;&gt; precedence 150, same as infix * since it is essentially (-1)*<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; prefix +<br>&gt; &gt;&gt;&gt; same as prefix -<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; To break the least amount of code:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; prefix !<br>&gt; &gt;&gt;&gt; precedence 140, which is higher than any other Bool operator (== is<br>&gt; highest with 130)<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; prefix ~<br>&gt; &gt;&gt;&gt; precedence 170, which is higher than any other binary operator (&lt;&lt; is<br>&gt; highest with 160)<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt; Am 16.01.2016 um 16:30 schrieb Jason Nielsen via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt;:<br>&gt; &gt;&gt;&gt; &gt;<br>&gt; &gt;&gt;&gt; &gt; Hi all,<br>&gt; &gt;&gt;&gt; &gt;<br>&gt; &gt;&gt;&gt; &gt; My proposal is to add a precedence option for prefix and postfix<br>&gt; operators.  It is great that swift allows for associativity and precedence<br>&gt; for binary operators but it hasn&#39;t quite gone all the way to make operator<br>&gt; overloading fully functional (just an opinion).  To illustrate consider the<br>&gt; following code:<br>&gt; &gt;&gt;&gt; &gt;<br>&gt; &gt;&gt;&gt; &gt; import CoreFoundation<br>&gt; &gt;&gt;&gt; &gt;<br>&gt; &gt;&gt;&gt; &gt; infix operator ** { associativity right precedence 200 }<br>&gt; &gt;&gt;&gt; &gt;<br>&gt; &gt;&gt;&gt; &gt; func ** (base: Double, power: Double) -&gt; Double {<br>&gt; &gt;&gt;&gt; &gt;     return pow(base, power)<br>&gt; &gt;&gt;&gt; &gt; }<br>&gt; &gt;&gt;&gt; &gt;<br>&gt; &gt;&gt;&gt; &gt; print(-3**2)<br>&gt; &gt;&gt;&gt; &gt; print(0-3**2)<br>&gt; &gt;&gt;&gt; &gt;<br>&gt; &gt;&gt;&gt; &gt; which prints 9 and -9.  In the first case because unary minus has<br>&gt; higher precedence as a prefix operator it evaluates to (-3)*(-3) and the<br>&gt; second because - is viewed as a binary operator of lower precedence as<br>&gt; (0-(3*3).  Exponentiation has higher precedence than subtraction so -3**2<br>&gt; should be -9 and the two expressions above are mathematically equivalent.<br>&gt; I originally reported this as a bug (SR-552) as to me the point of operator<br>&gt; overloading is to allow you to write numerical expressions cleanly but<br>&gt; should give you the correct mathematical result.  The only really useful<br>&gt; application I can think of for operator overloading is basically as a DSL<br>&gt; for numerical expressions.  If it doesn&#39;t allow you to get correct results<br>&gt; without having to put brackets everywhere it sort of defeats the purpose<br>&gt; (just my opinion of course).<br>&gt; &gt;&gt;&gt; &gt;<br>&gt; &gt;&gt;&gt; &gt; Best regards,<br>&gt; &gt;&gt;&gt; &gt; Jason<br>&gt; &gt;&gt;&gt; &gt; _______________________________________________<br>&gt; &gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; &gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160120/42892296/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>Proposal: Adding precedence option for prefix and postfix operators</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>January 20, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On 20 Jan 2016, at 07:48, Jason Nielsen &lt;drjdnielsen at gmail.com&gt; wrote:<br>&gt; <br>&gt; That is the case because brackets have higher precedence... these are the rules that you leaned in primary school (BEDMAS -- Brackets, exponentiation, division, multiplication, addition and subtraction).  So (-x)^n is expressed as (-x)*(-x)*....*(-x) n times (if n is even then positive, if odd negative).  By the same logic -x^n  is -(x*x*...*x).  Swift doesn&#39;t consider spacing important in terms of precedence else 2+3 * 4  would equal 20 in which case I wouldn&#39;t have even made the original bug report or started this e-mail.  There is no concept of spacing in expressing an equation in math.  Again having negation (using computer science speak unary minus aka the prefix operator - ) having precedence over any other operator by default is a mistake and limits the utility of operator overloading in the language.<br></p><p>But here you are arguing a case only for exponentiation - which doesn’t exist natively in Swift - and the unary minus operator. <br></p><p>It’s also not true to say spacing is not important in Swift. As I said <br></p><p>    -3**-2<br></p><p>doesn’t even compile. Yes, putting spaces in does not alter precedence, but if you do <br></p><p>    -3 ** -2<br></p><p>it *looks* like the unary minus has higher precedence, and it does today. <br></p><p>What about other unary operators. How do you want the precedence of<br></p><p>   2 ** myExponent! <br></p><p>to go?<br></p><p>Swift today has a fairly simple rule which appears to fall down only in one case, where the unary operator is minus and the binary operator is exponentiation (which is something you’d have to define). I don’t think the additional complexity is worth it.<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Proposal: Adding precedence option for prefix and postfix operators</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>January 20, 2016 at 11:00:00am</p></header><div class="content"><p>For the record, I agree with Jeremy (and Dave, and Zhaoxin). I articulated most of the same thoughts on the bug Jason filed when he thought this would be uncontroversial. (This discussion is showing that it is controversial and I&#39;m perfectly glad to be having it.)<br></p><p>Jordan<br></p><p>&gt; On Jan 18, 2016, at 4:51, Jeremy Pereira via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I think I disagree with you.<br>&gt; <br>&gt; It is true that in mathematics people generally write (-x)^n to raise -x to the nth power but the notation of exponentiation (i.e. the n is a superscript to the x) makes it look like a postfix operator that binds more tightly than the negation. The general rule in Swift is that pre- and postfix have higher precedence and I don’t think this should be changed just because they do it slightly differently in maths. There’s no equivalent visual cue to superscripting that can make it look like ** binds more tightly than unary minus and I think people who are used to Swift conventions will find it confusing, especially considering that exponentiation is just one of an infinitude of possible binary operators. <br>&gt; <br>&gt; Furthermore, many people including myself like to put spaces around our binary operators. So you can argue that <br>&gt; <br>&gt;    -3**2 <br>&gt; <br>&gt; should be -9 (although according to Swift conventions, it obviously is not) but what about <br>&gt; <br>&gt;    -3 ** 2 <br>&gt; <br>&gt; To me, that reads as (-3)**2 pretty unambiguously.<br>&gt; <br>&gt; You could argue that I should change my formatting conventions in the case of higher-than-prefix-precedence binary operators but<br>&gt; <br>&gt;    -3**-2 <br>&gt; <br>&gt; and<br>&gt; <br>&gt;    someOptional!**2<br>&gt; <br>&gt; won’t even compile. You need to put the spaces in so that Swift can identify the operators. <br>&gt; <br>&gt;&gt; On 17 Jan 2016, at 18:19, Jason Nielsen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I&#39;m afraid that is not a correct statement.  There is no arguing that -3^2 is -9 and that -3^2 and 0-3^2 are equivalent mathematically.  Exponentiation has higher precedence than - and subtraction is definitely an operator so -3^2 != (-3)^2.   That swift has decided that -3 is different than 0 -3 (which is an error) is a language design choice which I think is not a good one (just my opinion of course).  I can&#39;t think of any other language that is used for numerics R, matlab, python etc. that makes spacing like this significant).  I realize that you are saying that -3 is a negative number but what is a negative number by definition?  This is all strange to me.. if you type -3 at the REPL you get -3 if you type +3 you get an error.  So +3 isn&#39;t a positive number? <br>&gt;&gt; <br>&gt;&gt; Best regards,<br>&gt;&gt; Jason<br>&gt;&gt; <br>&gt;&gt; On Sun, Jan 17, 2016 at 11:48 AM, David Sweeris via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; In that context, I would say 9 is the correct answer. Mathematically speaking, the &quot;-&quot; is part of the number, not an operator.<br>&gt;&gt; <br>&gt;&gt; At least I think that&#39;s how it worked last time I was in math class.<br>&gt;&gt; <br>&gt;&gt; - Dave Sweeris<br>&gt;&gt; <br>&gt;&gt; On Jan 17, 2016, at 08:24, Maximilian Hünenberger via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; It&#39;s true prefix operators have the highest precedence (like ∞) but it should be lower so `-3**2` gets mathematically correct evaluated to `-9` if such an expression appears.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Maximilian<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Am 17.01.2016 um 02:36 schrieb 肇鑫 &lt;owenzx at gmail.com&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think they are already the highest precedence. That why they need not to be set this property. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Also, I think things like <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; print(-3**2)<br>&gt;&gt;&gt;&gt; print(0-3**2)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; should never appear in Swift. As it is hard for human to read. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; zhaoxin<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Sun, Jan 17, 2016 at 5:21 AM, Maximilian Hünenberger &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; +1 for me and as far as values go:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; prefix -<br>&gt;&gt;&gt;&gt; precedence 150, same as infix * since it is essentially (-1)*<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; prefix +<br>&gt;&gt;&gt;&gt; same as prefix -<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; To break the least amount of code:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; prefix !<br>&gt;&gt;&gt;&gt; precedence 140, which is higher than any other Bool operator (== is highest with 130)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; prefix ~<br>&gt;&gt;&gt;&gt; precedence 170, which is higher than any other binary operator (&lt;&lt; is highest with 160)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Am 16.01.2016 um 16:30 schrieb Jason Nielsen via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Hi all,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; My proposal is to add a precedence option for prefix and postfix operators.  It is great that swift allows for associativity and precedence for binary operators but it hasn&#39;t quite gone all the way to make operator overloading fully functional (just an opinion).  To illustrate consider the following code:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; import CoreFoundation<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; infix operator ** { associativity right precedence 200 }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; func ** (base: Double, power: Double) -&gt; Double {<br>&gt;&gt;&gt;&gt;&gt;    return pow(base, power)<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; print(-3**2)<br>&gt;&gt;&gt;&gt;&gt; print(0-3**2)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; which prints 9 and -9.  In the first case because unary minus has higher precedence as a prefix operator it evaluates to (-3)*(-3) and the second because - is viewed as a binary operator of lower precedence as (0-(3*3).  Exponentiation has higher precedence than subtraction so -3**2 should be -9 and the two expressions above are mathematically equivalent.  I originally reported this as a bug (SR-552) as to me the point of operator overloading is to allow you to write numerical expressions cleanly but should give you the correct mathematical result.  The only really useful application I can think of for operator overloading is basically as a DSL for numerical expressions.  If it doesn&#39;t allow you to get correct results without having to put brackets everywhere it sort of defeats the purpose (just my opinion of course).<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Best regards,<br>&gt;&gt;&gt;&gt;&gt; Jason<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160120/ed1ed90b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6e61814129bba30380909f8d172052e8?s=50"></div><header><strong>Proposal: Adding precedence option for prefix and postfix operators</strong> from <string>Jason Nielsen</string> &lt;drjdnielsen at gmail.com&gt;<p>January 20, 2016 at 04:00:00pm</p></header><div class="content"><p>To be honest I am pretty surprised how this has evolved.  I&#39;m not trying to<br>ruffle any feathers either so I won&#39;t be pushing this any longer.  Allowing<br>for operator overloading to me is simply to allow the programmer to be able<br>to write concise numerical expressions for objects.  Mostly math object<br>(complex numbers, polynomials, tensors etc.) so that you can write<br>numerical expressions that look like those you would write down by hand on<br>paper (I&#39;m sure people can come up with many other uses of operator<br>overloading but this is the only application that seems very useful to<br>me).  That the swift devs decided to allow for overloading of operators,<br>and in the case of binary to include associativity and precedence (pretty<br>unusual in most languages I can think of or know) indicated to me that<br>drawing in the numerical computing crowd to have a look at swift was<br>intended (to be honest that is what caught my attention.. also a repl and a<br>nice looking syntax.. totally subjective of course).  That said though if<br>you are going to allow associativity and precedence in binary operators but<br>fix the precedence of postfix and prefix you will get the issue I pointed<br>out.  Floating point numbers, unary minus and exponentiation is the example<br>used but the problem with extend to any other mathematical structure that<br>you want to overload where a prefix symbol has any meaning.  Since swift<br>sets the precedence of prefix to be highest that means that the concise<br>numerical expression you are trying to achieve via operator overloading is<br>going to give you an incorrect mathematical result without sticking in<br>brackets.  To me this seems to defeat the intended purpose but that is just<br>one man&#39;s opinion.  Since the lexer and parser can handle precedence and<br>associativity for binary operators I&#39;d be very surprised if adding<br>precedence to prefix and postfix would be a serious job.  That it might<br>break code of course is a totally different matter.<br></p><p>Best regards,<br>Jason<br></p><p>On Wed, Jan 20, 2016 at 2:19 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br></p><p>&gt; For the record, I agree with Jeremy (and Dave, and Zhaoxin). I articulated<br>&gt; most of the same thoughts on the bug Jason filed when he thought this would<br>&gt; be uncontroversial. (This discussion is showing that it *is* controversial<br>&gt; and I&#39;m perfectly glad to be having it.)<br>&gt;<br>&gt; Jordan<br>&gt;<br>&gt; On Jan 18, 2016, at 4:51, Jeremy Pereira via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I think I disagree with you.<br>&gt;<br>&gt; It is true that in mathematics people generally write (-x)^n to raise -x<br>&gt; to the nth power but the notation of exponentiation (i.e. the n is a<br>&gt; superscript to the x) makes it look like a postfix operator that binds more<br>&gt; tightly than the negation. The general rule in Swift is that pre- and<br>&gt; postfix have higher precedence and I don’t think this should be changed<br>&gt; just because they do it slightly differently in maths. There’s no<br>&gt; equivalent visual cue to superscripting that can make it look like ** binds<br>&gt; more tightly than unary minus and I think people who are used to Swift<br>&gt; conventions will find it confusing, especially considering that<br>&gt; exponentiation is just one of an infinitude of possible binary operators.<br>&gt;<br>&gt; Furthermore, many people including myself like to put spaces around our<br>&gt; binary operators. So you can argue that<br>&gt;<br>&gt;    -3**2<br>&gt;<br>&gt; should be -9 (although according to Swift conventions, it obviously is<br>&gt; not) but what about<br>&gt;<br>&gt;    -3 ** 2<br>&gt;<br>&gt; To me, that reads as (-3)**2 pretty unambiguously.<br>&gt;<br>&gt; You could argue that I should change my formatting conventions in the case<br>&gt; of higher-than-prefix-precedence binary operators but<br>&gt;<br>&gt;    -3**-2<br>&gt;<br>&gt; and<br>&gt;<br>&gt;    someOptional!**2<br>&gt;<br>&gt; won’t even compile. You need to put the spaces in so that Swift can<br>&gt; identify the operators.<br>&gt;<br>&gt; On 17 Jan 2016, at 18:19, Jason Nielsen via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I&#39;m afraid that is not a correct statement.  There is no arguing that -3^2<br>&gt; is -9 and that -3^2 and 0-3^2 are equivalent mathematically.<br>&gt; Exponentiation has higher precedence than - and subtraction is definitely<br>&gt; an operator so -3^2 != (-3)^2.   That swift has decided that -3 is<br>&gt; different than 0 -3 (which is an error) is a language design choice which I<br>&gt; think is not a good one (just my opinion of course).  I can&#39;t think of any<br>&gt; other language that is used for numerics R, matlab, python etc. that makes<br>&gt; spacing like this significant).  I realize that you are saying that -3 is a<br>&gt; negative number but what is a negative number by definition?  This is all<br>&gt; strange to me.. if you type -3 at the REPL you get -3 if you type +3 you<br>&gt; get an error.  So +3 isn&#39;t a positive number?<br>&gt;<br>&gt; Best regards,<br>&gt; Jason<br>&gt;<br>&gt; On Sun, Jan 17, 2016 at 11:48 AM, David Sweeris via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; In that context, I would say 9 is the correct answer. Mathematically<br>&gt; speaking, the &quot;-&quot; is part of the number, not an operator.<br>&gt;<br>&gt; At least I think that&#39;s how it worked last time I was in math class.<br>&gt;<br>&gt; - Dave Sweeris<br>&gt;<br>&gt; On Jan 17, 2016, at 08:24, Maximilian Hünenberger via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; It&#39;s true prefix operators have the highest precedence (like ∞) but it<br>&gt; should be lower so `-3**2` gets mathematically correct evaluated to `-9` if<br>&gt; such an expression appears.<br>&gt;<br>&gt; - Maximilian<br>&gt;<br>&gt; Am 17.01.2016 um 02:36 schrieb 肇鑫 &lt;owenzx at gmail.com&gt;:<br>&gt;<br>&gt; I think they are already the highest precedence. That why they need not to<br>&gt; be set this property.<br>&gt;<br>&gt; Also, I think things like<br>&gt;<br>&gt; print(-3**2)<br>&gt; print(0-3**2)<br>&gt;<br>&gt; should never appear in Swift. As it is hard for human to read.<br>&gt;<br>&gt; zhaoxin<br>&gt;<br>&gt;<br>&gt; On Sun, Jan 17, 2016 at 5:21 AM, Maximilian Hünenberger &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; +1 for me and as far as values go:<br>&gt;<br>&gt; prefix -<br>&gt; precedence 150, same as infix * since it is essentially (-1)*<br>&gt;<br>&gt; prefix +<br>&gt; same as prefix -<br>&gt;<br>&gt;<br>&gt; To break the least amount of code:<br>&gt;<br>&gt; prefix !<br>&gt; precedence 140, which is higher than any other Bool operator (== is<br>&gt; highest with 130)<br>&gt;<br>&gt; prefix ~<br>&gt; precedence 170, which is higher than any other binary operator (&lt;&lt; is<br>&gt; highest with 160)<br>&gt;<br>&gt; Am 16.01.2016 um 16:30 schrieb Jason Nielsen via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt;:<br>&gt;<br>&gt; Hi all,<br>&gt;<br>&gt; My proposal is to add a precedence option for prefix and postfix<br>&gt; operators.  It is great that swift allows for associativity and precedence<br>&gt; for binary operators but it hasn&#39;t quite gone all the way to make operator<br>&gt; overloading fully functional (just an opinion).  To illustrate consider the<br>&gt; following code:<br>&gt;<br>&gt; import CoreFoundation<br>&gt;<br>&gt; infix operator ** { associativity right precedence 200 }<br>&gt;<br>&gt; func ** (base: Double, power: Double) -&gt; Double {<br>&gt;    return pow(base, power)<br>&gt; }<br>&gt;<br>&gt; print(-3**2)<br>&gt; print(0-3**2)<br>&gt;<br>&gt; which prints 9 and -9.  In the first case because unary minus has higher<br>&gt; precedence as a prefix operator it evaluates to (-3)*(-3) and the second<br>&gt; because - is viewed as a binary operator of lower precedence as (0-(3*3).<br>&gt; Exponentiation has higher precedence than subtraction so -3**2 should be -9<br>&gt; and the two expressions above are mathematically equivalent.  I originally<br>&gt; reported this as a bug (SR-552) as to me the point of operator overloading<br>&gt; is to allow you to write numerical expressions cleanly but should give you<br>&gt; the correct mathematical result.  The only really useful application I can<br>&gt; think of for operator overloading is basically as a DSL for numerical<br>&gt; expressions.  If it doesn&#39;t allow you to get correct results without having<br>&gt; to put brackets everywhere it sort of defeats the purpose (just my opinion<br>&gt; of course).<br>&gt;<br>&gt; Best regards,<br>&gt; Jason<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160120/6ddbdb40/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4ab486d7597af4cfe0be33a762150848?s=50"></div><header><strong>Proposal: Adding precedence option for prefix and postfix operators</strong> from <string>Dany St-Amant</string> &lt;dsa.mls at icloud.com&gt;<p>January 20, 2016 at 08:00:00pm</p></header><div class="content"><p>FWIW, Swift gives the same result as what you get from bash.<br></p><p>$ echo $[-3**2] $[0-3**2] $[0+-3**2] $[-1*3**2]<br>9 -9 9 -9<br></p><p>print(-3**2, 0-3**2, 0 + -3**2, -1*3**2)<br>9.0 -9.0 9.0 -9.0<br></p><p>My math class are quite far back, but I do read -3**2 as &quot;negative three to the power of two&quot;; the - is the negative sign which is part of the number (as Dave said), and not the binary operator for subtraction. By changing the example a little bit, the line is no longer as clear to me:<br></p><p>How does one read -(1+2)**2?<br>- the sum of one and two to the power of two, multiplied by negative one; so -9 (as Jason likely sees it)<br>- the sum of one and two multiplied by negative one, to the power of two; so 9 (Swift and bash result)<br></p><p>IMHO, I think that Swift and bash are right (sorry Jason). I’m having also trouble visualizing a need for allowing unary operator to have lower priority than binary ones, mainly because they are marked as prefix/postfix and these words rings like glued/attached to whatever token is before/after; a number, a variable, or a set of parenthesis.<br></p><p>I’m curious as to what a none immediate prefix/postfix unary operator would look like and be useful for, the only thing I came up with is:<br></p><p>let some_result : Bool = !!! a&amp;b|c // A &quot;leading unary operator (up to end of line)<br>let some_result : Bool = !(a&amp;b|c) // Equivalent in current Swift with &quot;ugly and annoying&quot; parenthesis.<br></p><p>Regards<br>Dany<br></p><p><br>&gt; Le 20 janv. 2016 à 16:29, Jason Nielsen via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; To be honest I am pretty surprised how this has evolved.  I&#39;m not trying to ruffle any feathers either so I won&#39;t be pushing this any longer.  Allowing for operator overloading to me is simply to allow the programmer to be able to write concise numerical expressions for objects.  Mostly math object (complex numbers, polynomials, tensors etc.) so that you can write numerical expressions that look like those you would write down by hand on paper (I&#39;m sure people can come up with many other uses of operator overloading but this is the only application that seems very useful to me).  That the swift devs decided to allow for overloading of operators, and in the case of binary to include associativity and precedence (pretty unusual in most languages I can think of or know) indicated to me that drawing in the numerical computing crowd to have a look at swift was intended (to be honest that is what caught my attention.. also a repl and a nice looking syntax.. totally subjective of course).  That said though if you are going to allow associativity and precedence in binary operators but fix the precedence of postfix and prefix you will get the issue I pointed out.  Floating point numbers, unary minus and exponentiation is the example used but the problem with extend to any other mathematical structure that you want to overload where a prefix symbol has any meaning.  Since swift sets the precedence of prefix to be highest that means that the concise numerical expression you are trying to achieve via operator overloading is going to give you an incorrect mathematical result without sticking in brackets.  To me this seems to defeat the intended purpose but that is just one man&#39;s opinion.  Since the lexer and parser can handle precedence and associativity for binary operators I&#39;d be very surprised if adding precedence to prefix and postfix would be a serious job.  That it might break code of course is a totally different matter. <br>&gt; <br>&gt; Best regards,<br>&gt; Jason<br>&gt; <br>&gt; On Wed, Jan 20, 2016 at 2:19 PM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt; For the record, I agree with Jeremy (and Dave, and Zhaoxin). I articulated most of the same thoughts on the bug Jason filed when he thought this would be uncontroversial. (This discussion is showing that it is controversial and I&#39;m perfectly glad to be having it.)<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt;&gt; On Jan 18, 2016, at 4:51, Jeremy Pereira via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I think I disagree with you.<br>&gt;&gt; <br>&gt;&gt; It is true that in mathematics people generally write (-x)^n to raise -x to the nth power but the notation of exponentiation (i.e. the n is a superscript to the x) makes it look like a postfix operator that binds more tightly than the negation. The general rule in Swift is that pre- and postfix have higher precedence and I don’t think this should be changed just because they do it slightly differently in maths. There’s no equivalent visual cue to superscripting that can make it look like ** binds more tightly than unary minus and I think people who are used to Swift conventions will find it confusing, especially considering that exponentiation is just one of an infinitude of possible binary operators. <br>&gt;&gt; <br>&gt;&gt; Furthermore, many people including myself like to put spaces around our binary operators. So you can argue that <br>&gt;&gt; <br>&gt;&gt;    -3**2 <br>&gt;&gt; <br>&gt;&gt; should be -9 (although according to Swift conventions, it obviously is not) but what about <br>&gt;&gt; <br>&gt;&gt;    -3 ** 2 <br>&gt;&gt; <br>&gt;&gt; To me, that reads as (-3)**2 pretty unambiguously.<br>&gt;&gt; <br>&gt;&gt; You could argue that I should change my formatting conventions in the case of higher-than-prefix-precedence binary operators but<br>&gt;&gt; <br>&gt;&gt;    -3**-2 <br>&gt;&gt; <br>&gt;&gt; and<br>&gt;&gt; <br>&gt;&gt;    someOptional!**2<br>&gt;&gt; <br>&gt;&gt; won’t even compile. You need to put the spaces in so that Swift can identify the operators. <br>&gt;&gt; <br>&gt;&gt;&gt; On 17 Jan 2016, at 18:19, Jason Nielsen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m afraid that is not a correct statement.  There is no arguing that -3^2 is -9 and that -3^2 and 0-3^2 are equivalent mathematically.  Exponentiation has higher precedence than - and subtraction is definitely an operator so -3^2 != (-3)^2.   That swift has decided that -3 is different than 0 -3 (which is an error) is a language design choice which I think is not a good one (just my opinion of course).  I can&#39;t think of any other language that is used for numerics R, matlab, python etc. that makes spacing like this significant).  I realize that you are saying that -3 is a negative number but what is a negative number by definition?  This is all strange to me.. if you type -3 at the REPL you get -3 if you type +3 you get an error.  So +3 isn&#39;t a positive number? <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Best regards,<br>&gt;&gt;&gt; Jason<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Sun, Jan 17, 2016 at 11:48 AM, David Sweeris via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; In that context, I would say 9 is the correct answer. Mathematically speaking, the &quot;-&quot; is part of the number, not an operator.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; At least I think that&#39;s how it worked last time I was in math class.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Dave Sweeris<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Jan 17, 2016, at 08:24, Maximilian Hünenberger via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It&#39;s true prefix operators have the highest precedence (like ∞) but it should be lower so `-3**2` gets mathematically correct evaluated to `-9` if such an expression appears.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - Maximilian<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; …snip...<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Sun, Jan 17, 2016 at 5:21 AM, Maximilian Hünenberger &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; +1 for me and as far as values go:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; prefix -<br>&gt;&gt;&gt;&gt;&gt; precedence 150, same as infix * since it is essentially (-1)*<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; prefix +<br>&gt;&gt;&gt;&gt;&gt; same as prefix -<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; To break the least amount of code:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; prefix !<br>&gt;&gt;&gt;&gt;&gt; precedence 140, which is higher than any other Bool operator (== is highest with 130)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; prefix ~<br>&gt;&gt;&gt;&gt;&gt; precedence 170, which is higher than any other binary operator (&lt;&lt; is highest with 160)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Am 16.01.2016 um 16:30 schrieb Jason Nielsen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Hi all,<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; My proposal is to add a precedence option for prefix and postfix operators.  It is great that swift allows for associativity and precedence for binary operators but it hasn&#39;t quite gone all the way to make operator overloading fully functional (just an opinion).  To illustrate consider the following code:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; import CoreFoundation<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; infix operator ** { associativity right precedence 200 }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; func ** (base: Double, power: Double) -&gt; Double {<br>&gt;&gt;&gt;&gt;&gt;&gt;    return pow(base, power)<br>&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; print(-3**2)<br>&gt;&gt;&gt;&gt;&gt;&gt; print(0-3**2)<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; which prints 9 and -9.  In the first case because unary minus has higher precedence as a prefix operator it evaluates to (-3)*(-3) and the second because - is viewed as a binary operator of lower precedence as (0-(3*3).  Exponentiation has higher precedence than subtraction so -3**2 should be -9 and the two expressions above are mathematically equivalent.  I originally reported this as a bug (SR-552) as to me the point of operator overloading is to allow you to write numerical expressions cleanly but should give you the correct mathematical result.  The only really useful application I can think of for operator overloading is basically as a DSL for numerical expressions.  If it doesn&#39;t allow you to get correct results without having to put brackets everywhere it sort of defeats the purpose (just my opinion of course).<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Best regards,<br>&gt;&gt;&gt;&gt;&gt;&gt; Jason<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160120/8f52fe29/attachment-0001.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1696913cf1335685a75e63e11b459ae3?s=50"></div><header><strong>Proposal: Adding precedence option for prefix and postfix operators</strong> from <string>Sune Foldager</string> &lt;cyano at me.com&gt;<p>January 18, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On 17 Jan 2016, at 18:19, Jason Nielsen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; I&#39;m afraid that is not a correct statement.  There is no arguing that -3^2 is -9 and that -3^2 and 0-3^2 are equivalent mathematically.  Exponentiation has higher precedence than - and subtraction is definitely an operator so -3^2 != (-3)^2.<br></p><p><br>A minus sign can represent both a part of an integer, a binary operator called subtraction and sometimes a prefix operator called negation, as far as mathematics go.<br></p><p>-Sune<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6e61814129bba30380909f8d172052e8?s=50"></div><header><strong>Proposal: Adding precedence option for prefix and postfix operators</strong> from <string>Jason Nielsen</string> &lt;drjdnielsen at gmail.com&gt;<p>January 20, 2016 at 01:00:00am</p></header><div class="content"><p>If you can find a mathematically oriented text that distinguishes between<br>binary and prefix in regards to &quot;-&quot; I&#39;ll buy you a salad.<br></p><p><br>On Mon, Jan 18, 2016 at 11:58 AM, Sune Foldager &lt;cyano at me.com&gt; wrote:<br></p><p>&gt; &gt; On 17 Jan 2016, at 18:19, Jason Nielsen via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; I&#39;m afraid that is not a correct statement.  There is no arguing that<br>&gt; -3^2 is -9 and that -3^2 and 0-3^2 are equivalent mathematically.<br>&gt; Exponentiation has higher precedence than - and subtraction is definitely<br>&gt; an operator so -3^2 != (-3)^2.<br>&gt;<br>&gt;<br>&gt; A minus sign can represent both a part of an integer, a binary operator<br>&gt; called subtraction and sometimes a prefix operator called negation, as far<br>&gt; as mathematics go.<br>&gt;<br>&gt; -Sune<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160120/042b274a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Proposal: Adding precedence option for prefix and postfix operators</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>January 20, 2016 at 12:00:00am</p></header><div class="content"><p>TI graphing calculators (at least the ones I&#39;ve used have different buttons for binary and prefix -, does that count? I&#39;m not sure if they behave differently WRT precedence, though.<br></p><p>What if an operator&#39;s precedence could be changed by specific functions? Like +(Int, Int) -&gt; Int is 100 (or whatever the default is), but +(MyType, MyType) has precedence 3?<br></p><p>Does that break anything?<br></p><p>&gt; On Jan 19, 2016, at 22:54, Jason Nielsen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; If you can find a mathematically oriented text that distinguishes between binary and prefix in regards to &quot;-&quot; I&#39;ll buy you a salad.<br>&gt; <br>&gt; <br>&gt;&gt; On Mon, Jan 18, 2016 at 11:58 AM, Sune Foldager &lt;cyano at me.com&gt; wrote:<br>&gt;&gt; &gt; On 17 Jan 2016, at 18:19, Jason Nielsen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt; I&#39;m afraid that is not a correct statement.  There is no arguing that -3^2 is -9 and that -3^2 and 0-3^2 are equivalent mathematically.  Exponentiation has higher precedence than - and subtraction is definitely an operator so -3^2 != (-3)^2.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; A minus sign can represent both a part of an integer, a binary operator called subtraction and sometimes a prefix operator called negation, as far as mathematics go.<br>&gt;&gt; <br>&gt;&gt; -Sune<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160120/43daae3d/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6e61814129bba30380909f8d172052e8?s=50"></div><header><strong>Proposal: Adding precedence option for prefix and postfix operators</strong> from <string>Jason Nielsen</string> &lt;drjdnielsen at gmail.com&gt;<p>January 17, 2016 at 11:00:00am</p></header><div class="content"><p>Yes, prefix and postfix operators have highest precedence with postfix<br>binding first if I recall correctly.  That is why I made the proposal so<br>that it could be modified so that pre- and postfix operators that are<br>mathematically meaningful can operate as one would expect.<br></p><p>As for statements like -3**2 not being allowed, or hard to read, that is a<br>personal opinion.  It looks perfectly readable to me, just syntactic sugar<br>for -pow(3,2).  I do not think your opinion it is shared by the swift devs<br>either else why allow operator overloading in the first place?<br></p><p>Best regards,<br>Jason<br></p><p><br>On Sat, Jan 16, 2016 at 8:36 PM, 肇鑫 &lt;owenzx at gmail.com&gt; wrote:<br></p><p>&gt; I think they are already the highest precedence. That why they need not<br>&gt; to be set this property.<br>&gt;<br>&gt; Also, I think things like<br>&gt;<br>&gt; print(-3**2)<br>&gt;&gt; print(0-3**2)<br>&gt;<br>&gt;<br>&gt; should never appear in Swift. As it is hard for human to read.<br>&gt;<br>&gt; zhaoxin<br>&gt;<br>&gt;<br>&gt; On Sun, Jan 17, 2016 at 5:21 AM, Maximilian Hünenberger &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; +1 for me and as far as values go:<br>&gt;&gt;<br>&gt;&gt; prefix -<br>&gt;&gt; precedence 150, same as infix * since it is essentially (-1)*<br>&gt;&gt;<br>&gt;&gt; prefix +<br>&gt;&gt; same as prefix -<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; To break the least amount of code:<br>&gt;&gt;<br>&gt;&gt; prefix !<br>&gt;&gt; precedence 140, which is higher than any other Bool operator (== is<br>&gt;&gt; highest with 130)<br>&gt;&gt;<br>&gt;&gt; prefix ~<br>&gt;&gt; precedence 170, which is higher than any other binary operator (&lt;&lt; is<br>&gt;&gt; highest with 160)<br>&gt;&gt;<br>&gt;&gt; &gt; Am 16.01.2016 um 16:30 schrieb Jason Nielsen via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt;:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Hi all,<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; My proposal is to add a precedence option for prefix and postfix<br>&gt;&gt; operators.  It is great that swift allows for associativity and precedence<br>&gt;&gt; for binary operators but it hasn&#39;t quite gone all the way to make operator<br>&gt;&gt; overloading fully functional (just an opinion).  To illustrate consider the<br>&gt;&gt; following code:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; import CoreFoundation<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; infix operator ** { associativity right precedence 200 }<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; func ** (base: Double, power: Double) -&gt; Double {<br>&gt;&gt; &gt;     return pow(base, power)<br>&gt;&gt; &gt; }<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; print(-3**2)<br>&gt;&gt; &gt; print(0-3**2)<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; which prints 9 and -9.  In the first case because unary minus has<br>&gt;&gt; higher precedence as a prefix operator it evaluates to (-3)*(-3) and the<br>&gt;&gt; second because - is viewed as a binary operator of lower precedence as<br>&gt;&gt; (0-(3*3).  Exponentiation has higher precedence than subtraction so -3**2<br>&gt;&gt; should be -9 and the two expressions above are mathematically equivalent.<br>&gt;&gt; I originally reported this as a bug (SR-552) as to me the point of operator<br>&gt;&gt; overloading is to allow you to write numerical expressions cleanly but<br>&gt;&gt; should give you the correct mathematical result.  The only really useful<br>&gt;&gt; application I can think of for operator overloading is basically as a DSL<br>&gt;&gt; for numerical expressions.  If it doesn&#39;t allow you to get correct results<br>&gt;&gt; without having to put brackets everywhere it sort of defeats the purpose<br>&gt;&gt; (just my opinion of course).<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Best regards,<br>&gt;&gt; &gt; Jason<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160117/794ecb21/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
