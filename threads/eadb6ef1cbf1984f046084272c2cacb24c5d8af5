<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0081: Move where clause to end of declaration</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May 10, 2016 at 11:00:00am</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;SE-0081: Move where clause to end of declaration&quot; begins now and runs through May 16. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0081: Move where clause to end of declaration</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 10, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>+1.  I think including constraints in the generic parameter list is clunky.  I am happy to see it move.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.  It significantly increases clarity IMO.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Followed the discussion and read the proposal.<br></p><p>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>[Review] SE-0081: Move where clause to end of declaration</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>May 10, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On May 10, 2016, at 11:51 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0081: Move where clause to end of declaration&quot; begins now and runs through May 16. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>+1 much much readable<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>yes<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>yes<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>n/a<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>read the proposal and followed the email chain<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>[Review] SE-0081: Move where clause to end of declaration</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>May 10, 2016 at 03:00:00pm</p></header><div class="content"><p>* What is your evaluation of the proposal?<br>+1<br>        * Is the problem being addressed significant enough to warrant a<br>change to Swift?<br>yes<br>        * Does this proposal fit well with the feel and direction of Swift?<br>yes<br>        * If you have used other languages or libraries with a similar<br>feature, how do you feel that this proposal compares to those?<br>It is on par with constraint declarations/relations in other languages<br>        * How much effort did you put into your review? A glance, a quick<br>reading, or an in-depth study?<br>quick reading but I have been following the discussions that this came out<br>of.<br></p><p>On Tue, May 10, 2016 at 2:42 PM, Jose Cheyo Jimenez via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On May 10, 2016, at 11:51 AM, Chris Lattner via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Hello Swift community,<br>&gt; &gt;<br>&gt; &gt; The review of &quot;SE-0081: Move where clause to end of declaration&quot; begins<br>&gt; now and runs through May 16. The proposal is available here:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md<br>&gt; &gt;<br>&gt; &gt; Reviews are an important part of the Swift evolution process. All<br>&gt; reviews should be sent to the swift-evolution mailing list at<br>&gt; &gt;<br>&gt; &gt;       https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt; &gt;<br>&gt; &gt; What goes into a review?<br>&gt; &gt;<br>&gt; &gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction of Swift.<br>&gt; When writing your review, here are some questions you might want to answer<br>&gt; in your review:<br>&gt; &gt;<br>&gt; &gt;       * What is your evaluation of the proposal?<br>&gt; +1 much much readable<br>&gt; &gt;       * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt; yes<br>&gt; &gt;       * Does this proposal fit well with the feel and direction of Swift?<br>&gt; yes<br>&gt; &gt;       * If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt; n/a<br>&gt; &gt;       * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt; read the proposal and followed the email chain<br>&gt; &gt;<br>&gt; &gt; More information about the Swift evolution process is available at<br>&gt; &gt;<br>&gt; &gt;       https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; &gt;<br>&gt; &gt; Thank you,<br>&gt; &gt;<br>&gt; &gt; -Chris Lattner<br>&gt; &gt; Review Manager<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/f8adb937/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] SE-0081: Move where clause to end of declaration</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>May 10, 2016 at 02:00:00pm</p></header><div class="content"><p>Yes please.<br></p><p>It is significant enough to warrant a change to Swift. http://ericasadun.com/2016/04/06/folding-generic-argument-lists/ &lt;http://ericasadun.com/2016/04/06/folding-generic-argument-lists/&gt;<br>It fits with the feel and direction of Swift. It makes Swift easier to format, read, and maintain. I particularly like that the type arguments are declared and used first, then constrained later. It feels like a more natural placement.<br>I have incited discussion on this, followed it from the start, and have been an excited cheerleader along the way.<br></p><p>-- E<br></p><p>&gt; On May 10, 2016, at 12:51 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0081: Move where clause to end of declaration&quot; begins now and runs through May 16. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/d5b95832/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0081: Move where clause to end of declaration</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>May 10, 2016 at 01:00:00pm</p></header><div class="content"><p>* What is your evaluation of the proposal?<br></p><p>Strong assent.<br></p><p>* Is the problem being addressed significant enough to warrant a change to<br>Swift?<br></p><p>Lots of people have complained about heavily parameterized generic code<br>being difficult to read and rather scary looking in general. While this<br>proposal makes no changes to the expressiveness of the language, it<br>improves developer ergonomics and helps keep people&#39;s eyes from glazing<br>over when they try reading through such functions.<br></p><p>* Does this proposal fit well with the feel and direction of Swift?<br></p><p>No loss of expressive power, an improvement overall. (There is also a<br>pleasing symmetry with the &#39;where&#39; clause syntax for protocol extensions.)<br>It feels more natural: the most important information (name, generic type<br>parameter decls, formal parameters, and return type/effects) are all<br>introduced to the reader before the subordinate constraint clause is<br>introduced with &#39;where&#39;. Before, the angle brackets portion of a function<br>declaration could become a huge multi-line symbol-rich blob separating the<br>function name from the parameters/return type, making it harder to visually<br>parse.<br></p><p>* If you have used other languages or libraries with a similar feature, how<br>do you feel that this proposal compares to those?<br></p><p>I believe Rust does something similar. This is probably another advantage,<br>a tiny bit of friction removed from people who want to move between these<br>two languages.<br></p><p>* How much effort did you put into your review? A glance, a quick reading,<br>or an in-depth study?<br></p><p>Close reading of the proposal; followed along within the proposal thread.<br></p><p>Best,<br>Austin<br></p><p>On Tue, May 10, 2016 at 11:51 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0081: Move where clause to end of declaration&quot; begins<br>&gt; now and runs through May 16. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction of Swift.<br>&gt; When writing your review, here are some questions you might want to answer<br>&gt; in your review:<br>&gt;<br>&gt;         * What is your evaluation of the proposal?<br>&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;         * If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/4898048b/attachment-0001.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c40db4457ab2c91a0d8006da31b177c6?s=50"></div><header><strong>[Review] SE-0081: Move where clause to end of declaration</strong> from <string>Trent Nadeau</string> &lt;tanadeau at gmail.com&gt;<p>May 10, 2016 at 04:00:00pm</p></header><div class="content"><p>- What is your evaluation of the proposal?<br>   - All the +1s. This is more consistent with `where` clauses elsewhere in<br>      the language and is much more readable.<br>   - Is the problem being addressed significant enough to warrant a change<br>   to Swift?<br>   - Yes.<br>   - Does this proposal fit well with the feel and direction of Swift?<br>   - Yes. Consistent and readability have been very important with Swift so<br>      far.<br>   - If you have used other languages or libraries with a similar feature,<br>   how do you feel that this proposal compares to those?<br>   - Rust is similar.<br>   - How much effort did you put into your review? A glance, a quick<br>   reading, or an in-depth study?<br>   - Read the proposal and followed the discussions.<br></p><p><br>On Tue, May 10, 2016 at 2:51 PM, Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0081: Move where clause to end of declaration&quot; begins<br>&gt; now and runs through May 16. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction of Swift.<br>&gt; When writing your review, here are some questions you might want to answer<br>&gt; in your review:<br>&gt;<br>&gt;         * What is your evaluation of the proposal?<br>&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;         * If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p><br></p><p>-- <br>Trent Nadeau<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/c60d1565/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[Review] SE-0081: Move where clause to end of declaration</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>May 10, 2016 at 04:00:00pm</p></header><div class="content"><p>What is your evaluation of the proposal?<br>A big +1<br>	<br>Is the problem being addressed significant enough to warrant a change to Swift?<br>Yes. This makes it much more natural to read methods and functions with generics. This also makes it more predictable to find where the method signature is without having to weed through a bunch of generic constraints.<br></p><p>Does this proposal fit well with the feel and direction of Swift?<br>Most definitely. Feels more natural and consistent with other uses of `where`<br></p><p>If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>N/A<br></p><p>How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>I’ve followed the evo thread since the beginning<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/b5dcb63c/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e7e554db1f80d7d6041d92edd5145698?s=50"></div><header><strong>[Review] SE-0081: Move where clause to end of declaration</strong> from <string>Hooman Mehr</string> &lt;hooman at mac.com&gt;<p>May 10, 2016 at 02:00:00pm</p></header><div class="content"><p>Although handy for now, I am a bit concerned about moving `where` clause to the end of declaration. This reserves and occupies this wide open space at the end of declarations. I think we might find a better use for this space later as the language evolves. Any thoughts?<br> <br>&gt; On May 10, 2016, at 11:51 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0081: Move where clause to end of declaration&quot; begins now and runs through May 16. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Review] SE-0081: Move where clause to end of declaration</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>May 10, 2016 at 03:00:00pm</p></header><div class="content"><p>I think actual keyword “where” provides enough of a delimiter that it won’t be hard to put something before it, and it seems unlikely to me that we would want to add anything after it without some other delimiter. So I’m not too concerned.<br></p><p>Jordan<br></p><p>&gt; On May 10, 2016, at 14:29, Hooman Mehr via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Although handy for now, I am a bit concerned about moving `where` clause to the end of declaration. This reserves and occupies this wide open space at the end of declarations. I think we might find a better use for this space later as the language evolves. Any thoughts?<br>&gt; <br>&gt;&gt; On May 10, 2016, at 11:51 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0081: Move where clause to end of declaration&quot; begins now and runs through May 16. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/7d77b23c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] SE-0081: Move where clause to end of declaration</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>May 10, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On May 10, 2016, at 3:46 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I think actual keyword “where” provides enough of a delimiter that it won’t be hard to put something before it, and it seems unlikely to me that we would want to add anything after it without some other delimiter. So I’m not too concerned.<br></p><p>Yeah, that’s my feeling as well.<br></p><p>	- Doug<br></p><p>&gt; <br>&gt; Jordan<br>&gt; <br>&gt;&gt; On May 10, 2016, at 14:29, Hooman Mehr via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Although handy for now, I am a bit concerned about moving `where` clause to the end of declaration. This reserves and occupies this wide open space at the end of declarations. I think we might find a better use for this space later as the language evolves. Any thoughts?<br>&gt;&gt; <br>&gt;&gt;&gt; On May 10, 2016, at 11:51 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The review of &quot;SE-0081: Move where clause to end of declaration&quot; begins now and runs through May 16. The proposal is available here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Chris Lattner<br>&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/31955f02/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/68d21c811b4f037d9cbd43013319f9b4?s=50"></div><header><strong>[Review] SE-0081: Move where clause to end of declaration</strong> from <string>Muse M</string> &lt;james.lei65 at gmail.com&gt;<p>May 11, 2016 at 09:00:00am</p></header><div class="content"><p>** What is your evaluation of the proposal?*<br>A novelty idea<br></p><p>** Is the problem being addressed significant enough to warrant a change to<br>Swift?*<br>Some programmers love compact code and make Swift no difference to other<br>languages, change is indeed easier and almost no barrier for all level of<br>readers.<br></p><p>** Does this proposal fit well with the feel and direction of Swift?*<br>It makes presentation slide and teaching readability and avoid information<br>overload when dealing large scale projects.<br></p><p>** If you have used other languages or libraries with a similar feature,<br>how do you feel that this proposal compares to those?*<br>NIL<br></p><p><br>** How much effort did you put into your review? A glance, a quick reading,<br>or an in-depth study?*<br>A glance at the code,<br></p><p><br>On Wed, May 11, 2016 at 7:19 AM, Douglas Gregor via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On May 10, 2016, at 3:46 PM, Jordan Rose via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I think actual keyword “where” provides enough of a delimiter that it<br>&gt; won’t be hard to put something before it, and it seems unlikely to me that<br>&gt; we would want to add anything *after* it without some *other* delimiter.<br>&gt; So I’m not too concerned.<br>&gt;<br>&gt;<br>&gt; Yeah, that’s my feeling as well.<br>&gt;<br>&gt; - Doug<br>&gt;<br>&gt;<br>&gt; Jordan<br>&gt;<br>&gt; On May 10, 2016, at 14:29, Hooman Mehr via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Although handy for now, I am a bit concerned about moving `where` clause<br>&gt; to the end of declaration. This reserves and occupies this wide open space<br>&gt; at the end of declarations. I think we might find a better use for this<br>&gt; space later as the language evolves. Any thoughts?<br>&gt;<br>&gt; On May 10, 2016, at 11:51 AM, Chris Lattner via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0081: Move where clause to end of declaration&quot; begins<br>&gt; now and runs through May 16. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction of Swift.<br>&gt; When writing your review, here are some questions you might want to answer<br>&gt; in your review:<br>&gt;<br>&gt; * What is your evaluation of the proposal?<br>&gt; * Is the problem being addressed significant enough to warrant a change to<br>&gt; Swift?<br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt; * If you have used other languages or libraries with a similar feature,<br>&gt; how do you feel that this proposal compares to those?<br>&gt; * How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160511/69e3659e/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Review] SE-0081: Move where clause to end of declaration</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May 10, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On May 10, 2016, at 4:19 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On May 10, 2016, at 3:46 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I think actual keyword “where” provides enough of a delimiter that it won’t be hard to put something before it, and it seems unlikely to me that we would want to add anything after it without some other delimiter. So I’m not too concerned.<br>&gt; <br>&gt; Yeah, that’s my feeling as well.<br></p><p>One conceivable use of `where` that this would shut the door on: infix `where` for generalized existentials, e.g. `Protocol where AssociatedType == Int` could be the Protocol existential with Self.AssociatedType constrained to Int.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Review] SE-0081: Move where clause to end of declaration</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>May 11, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; Am 11.05.2016 um 03:56 schrieb Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; <br>&gt;&gt;&gt; On May 10, 2016, at 4:19 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On May 10, 2016, at 3:46 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think actual keyword “where” provides enough of a delimiter that it won’t be hard to put something before it, and it seems unlikely to me that we would want to add anything after it without some other delimiter. So I’m not too concerned.<br>&gt;&gt; <br>&gt;&gt; Yeah, that’s my feeling as well.<br>&gt; <br>&gt; One conceivable use of `where` that this would shut the door on: infix `where` for generalized existentials, e.g. `Protocol where AssociatedType == Int` could be the Protocol existential with Self.AssociatedType constrained to Int.<br></p><p>Why do you think that?<br></p><p>-Thorsten<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Review] SE-0081: Move where clause to end of declaration</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May 11, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On May 11, 2016, at 6:54 AM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Am 11.05.2016 um 03:56 schrieb Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 10, 2016, at 4:19 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 10, 2016, at 3:46 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think actual keyword “where” provides enough of a delimiter that it won’t be hard to put something before it, and it seems unlikely to me that we would want to add anything after it without some other delimiter. So I’m not too concerned.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yeah, that’s my feeling as well.<br>&gt;&gt; <br>&gt;&gt; One conceivable use of `where` that this would shut the door on: infix `where` for generalized existentials, e.g. `Protocol where AssociatedType == Int` could be the Protocol existential with Self.AssociatedType constrained to Int.<br>&gt; <br>&gt; Why do you think that?<br></p><p>This proposal moves `where` after the return type, which would be ambiguous with any infix use of `where` in the type grammar.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e7e554db1f80d7d6041d92edd5145698?s=50"></div><header><strong>[Review] SE-0081: Move where clause to end of declaration</strong> from <string>Hooman Mehr</string> &lt;hooman at mac.com&gt;<p>May 11, 2016 at 01:00:00pm</p></header><div class="content"><p>How about a more radical change that eliminates this entire concern and keeps the whole generics declarations in one place: <br></p><p>Move the entire generic declaration with its brackets somewhere other than between function name and its parameters.<br></p><p>I know this breaks the “norm”, but what do you think?<br></p><p>&gt; On May 11, 2016, at 10:23 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On May 11, 2016, at 6:54 AM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Am 11.05.2016 um 03:56 schrieb Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On May 10, 2016, at 4:19 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On May 10, 2016, at 3:46 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I think actual keyword “where” provides enough of a delimiter that it won’t be hard to put something before it, and it seems unlikely to me that we would want to add anything after it without some other delimiter. So I’m not too concerned.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Yeah, that’s my feeling as well.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; One conceivable use of `where` that this would shut the door on: infix `where` for generalized existentials, e.g. `Protocol where AssociatedType == Int` could be the Protocol existential with Self.AssociatedType constrained to Int.<br>&gt;&gt; <br>&gt;&gt; Why do you think that?<br>&gt; <br>&gt; This proposal moves `where` after the return type, which would be ambiguous with any infix use of `where` in the type grammar.<br>&gt; <br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160511/e7402158/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[Review] SE-0081: Move where clause to end of declaration</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>May 11, 2016 at 02:00:00pm</p></header><div class="content"><p>Another idea: what about a comma separating the return type from the where<br>clause?<br></p><p>func myFunc&lt;A, B&gt;(arg1: A, arg2: B) -&gt; Bool, where A :<br>CustomStringConvertible { ... }<br></p><p>Best,<br>Austin<br></p><p>On Wed, May 11, 2016 at 1:56 PM, Hooman Mehr via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; How about a more radical change that eliminates this entire concern and<br>&gt; keeps the whole generics declarations in one place:<br>&gt;<br>&gt; Move the entire generic declaration with its brackets somewhere other than<br>&gt; between function name and its parameters.<br>&gt;<br>&gt; I know this breaks the “norm”, but what do you think?<br>&gt;<br>&gt;<br>&gt; On May 11, 2016, at 10:23 AM, Joe Groff via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On May 11, 2016, at 6:54 AM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt; Am 11.05.2016 um 03:56 schrieb Joe Groff via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt;:<br>&gt;<br>&gt;<br>&gt; On May 10, 2016, at 4:19 PM, Douglas Gregor via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On May 10, 2016, at 3:46 PM, Jordan Rose via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I think actual keyword “where” provides enough of a delimiter that it<br>&gt; won’t be hard to put something before it, and it seems unlikely to me that<br>&gt; we would want to add anything after it without some other delimiter. So I’m<br>&gt; not too concerned.<br>&gt;<br>&gt;<br>&gt; Yeah, that’s my feeling as well.<br>&gt;<br>&gt;<br>&gt; One conceivable use of `where` that this would shut the door on: infix<br>&gt; `where` for generalized existentials, e.g. `Protocol where AssociatedType<br>&gt; == Int` could be the Protocol existential with Self.AssociatedType<br>&gt; constrained to Int.<br>&gt;<br>&gt;<br>&gt; Why do you think that?<br>&gt;<br>&gt;<br>&gt; This proposal moves `where` after the return type, which would be<br>&gt; ambiguous with any infix use of `where` in the type grammar.<br>&gt;<br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160511/4602c04c/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Review] SE-0081: Move where clause to end of declaration</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>May 11, 2016 at 11:00:00pm</p></header><div class="content"><p>I’d find this very confusing because it would make declarations look the the declarations of the generic types comes after their uses.<br></p><p>&gt; On 11 May 2016, at 22:56, Hooman Mehr via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; How about a more radical change that eliminates this entire concern and keeps the whole generics declarations in one place: <br>&gt; <br>&gt; Move the entire generic declaration with its brackets somewhere other than between function name and its parameters.<br>&gt; <br>&gt; I know this breaks the “norm”, but what do you think?<br>&gt; <br>&gt;&gt; On May 11, 2016, at 10:23 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On May 11, 2016, at 6:54 AM, Thorsten Seitz &lt;tseitz42 at icloud.com &lt;mailto:tseitz42 at icloud.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Am 11.05.2016 um 03:56 schrieb Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On May 10, 2016, at 4:19 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On May 10, 2016, at 3:46 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I think actual keyword “where” provides enough of a delimiter that it won’t be hard to put something before it, and it seems unlikely to me that we would want to add anything after it without some other delimiter. So I’m not too concerned.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Yeah, that’s my feeling as well.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; One conceivable use of `where` that this would shut the door on: infix `where` for generalized existentials, e.g. `Protocol where AssociatedType == Int` could be the Protocol existential with Self.AssociatedType constrained to Int.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Why do you think that?<br>&gt;&gt; <br>&gt;&gt; This proposal moves `where` after the return type, which would be ambiguous with any infix use of `where` in the type grammar.<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160511/3b5da648/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Review] SE-0081: Move where clause to end of declaration</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>May 12, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; Am 11.05.2016 um 19:23 schrieb Joe Groff &lt;jgroff at apple.com&gt;:<br>&gt; <br>&gt; <br>&gt;&gt;&gt; On May 11, 2016, at 6:54 AM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Am 11.05.2016 um 03:56 schrieb Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On May 10, 2016, at 4:19 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On May 10, 2016, at 3:46 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I think actual keyword “where” provides enough of a delimiter that it won’t be hard to put something before it, and it seems unlikely to me that we would want to add anything after it without some other delimiter. So I’m not too concerned.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Yeah, that’s my feeling as well.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; One conceivable use of `where` that this would shut the door on: infix `where` for generalized existentials, e.g. `Protocol where AssociatedType == Int` could be the Protocol existential with Self.AssociatedType constrained to Int.<br>&gt;&gt; <br>&gt;&gt; Why do you think that?<br>&gt; <br>&gt; This proposal moves `where` after the return type, which would be ambiguous with any infix use of `where` in the type grammar.<br></p><p>Ah, I see. But wouldn&#39;t this already be a problem with the current syntax as well, because the `where` might come after a constraining type which might be an existential?<br></p><p>As an alternative to `where` we could use `with` for existentials.<br></p><p>-Thorsten<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Review] SE-0081: Move where clause to end of declaration</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May 12, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On May 11, 2016, at 10:23 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On May 11, 2016, at 6:54 AM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Am 11.05.2016 um 03:56 schrieb Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On May 10, 2016, at 4:19 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On May 10, 2016, at 3:46 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I think actual keyword “where” provides enough of a delimiter that it won’t be hard to put something before it, and it seems unlikely to me that we would want to add anything after it without some other delimiter. So I’m not too concerned.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Yeah, that’s my feeling as well.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; One conceivable use of `where` that this would shut the door on: infix `where` for generalized existentials, e.g. `Protocol where AssociatedType == Int` could be the Protocol existential with Self.AssociatedType constrained to Int.<br>&gt;&gt; <br>&gt;&gt; Why do you think that?<br>&gt; <br>&gt; This proposal moves `where` after the return type, which would be ambiguous with any infix use of `where` in the type grammar.<br></p><p>To be clear, I&#39;m not saying we *should* add infix `where` to the type grammar, only pointing out that this would prevent its use in the future.<br></p><p>-Joe<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b1fc4ed1ed8e138ef0a87fd3e91c83a4?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0081: Move where clause to end of declaration</strong> from <string>Ricardo Parada</string> &lt;rparada at mac.com&gt;<p>May 10, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On May 10, 2016, at 2:51 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0081: Move where clause to end of declaration&quot; begins now and runs through May 16. The proposal is available here:<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md<br>&gt; <br>&gt;    * What is your evaluation of the proposal?<br></p><p>+1<br></p><p>&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>I&#39;ll reserve that to others with a deeper understanding of the effect of this change. <br></p><p>&gt;    * Does this proposal fit well with the feel and direction of Swift?<br></p><p>I find the declarations with the where clause at the end so much easier to read and understand. For that reason alone I am In favor of this change. <br></p><p>This definitely goes well with what I expect of Swift. I love Swift&#39;s conciseness and expressiveness. This would continue to improve in that respect. <br></p><p>&gt;    * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Compare to other languages I think this would make Swift superior in regards to clarity of declarations. <br></p><p>&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>A quick reading. <br></p><p>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>[Review] SE-0081: Move where clause to end of declaration</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>May 10, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>+1, I like the syntax and think it can clean up some parser ambiguities.<br></p><p><br>Today, there are several formats using angle brackets:<br>- a parameter declaration as an ordered dictionary of names to type or type-decensent restrictions (or Any if not specified)<br>- an argument declaration as an ordered list of concrete types<br>- an unordered list of required protocol conformances<br></p><p>Eliminating the where clause sometimes available in parameter declarations simplifies understanding the generic syntaxes.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>Yes<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes, although I don’t know how it evaluates against possible future syntax for the generics manifesto feature lists<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>Followed discussion<br></p><p>-DW<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2b19ddab2d7de4523412c875c258e278?s=50"></div><header><strong>[Review] SE-0081: Move where clause to end of declaration</strong> from <string>Matt Whiteside</string> &lt;mwhiteside.dev at gmail.com&gt;<p>May 11, 2016 at 06:00:00am</p></header><div class="content"><p>+1, I like this one a lot.<br></p><p>-Matt<br></p><p>&gt; On May 10, 2016, at 21:25, David Waite via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt; +1, I like the syntax and think it can clean up some parser ambiguities.<br>&gt; <br>&gt; <br>&gt; Today, there are several formats using angle brackets:<br>&gt; - a parameter declaration as an ordered dictionary of names to type or type-decensent restrictions (or Any if not specified)<br>&gt; - an argument declaration as an ordered list of concrete types<br>&gt; - an unordered list of required protocol conformances<br>&gt; <br>&gt; Eliminating the where clause sometimes available in parameter declarations simplifies understanding the generic syntaxes.<br>&gt; <br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Yes<br>&gt; <br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; Yes, although I don’t know how it evaluates against possible future syntax for the generics manifesto feature lists<br>&gt; <br>&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; Followed discussion<br>&gt; <br>&gt; -DW<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2ff1daab58cd5e44a457908d1905c322?s=50"></div><header><strong>[Review] SE-0081: Move where clause to end of declaration</strong> from <string>Krzysztof Siejkowski</string> &lt;krzysztof at siejkowski.net&gt;<p>May 12, 2016 at 12:00:00pm</p></header><div class="content"><p>* What is your evaluation of the proposal?<br>+1<br></p><p>More readable.<br></p><p>* Is the problem being addressed significant enough to warrant a change to Swift?<br>Yes. Current form of defining requirements makes deciphering the signatures with high number of requirements a logical riddle.<br></p><p><br></p><p>* Does this proposal fit well with the feel and direction of Swift?<br>I do think so. It’ll further encourage the use of generics, which I see as one of the cornerstones of Swift.<br></p><p><br></p><p>* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>Not that I can think of, but now I’d like to see similar change in Scala :)<br></p><p><br></p><p>* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>I’ve read proposal and corresponding discussion.<br></p><p><br></p><p>All the best,<br></p><p>Krzysztof<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160512/e319b635/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2af8daf170a3ed693e577a9471ea1f10?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0081: Move where clause to end of declaration</strong> from <string>Ray Fix</string> &lt;rayfix at gmail.com&gt;<p>May 12, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; The review of &quot;SE-0081: Move where clause to end of declaration&quot; begins now and runs through May 16. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>+1<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes. Although this is (IIUC) syntax sweetener so needs to be prioritized with other changes.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes. The given example does look more readable and I can’t think of a situation where it becomes less readable.  Generics are difficult so anything that makes them easier to approach is welcome.  The fact that there is now greater consistency with extension declarations is also +1.<br></p><p>There was an objection raised that it would close the door on a future features or types of constraint. It is difficult for me to evaluate that, but the consensus seemed to be it could be handled with additional syntax and possible keywords.  The consistency and readability for these more common cases should be prioritized IMO.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>No<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>This morning.  Read proposal, pitch and current review thread.  [Tried to parse the proposed grammar changes, but didn’t spend a lot of time with it.] Thanks to the authors and contributors for thinking about this stuff and pushing it forward.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Review] SE-0081: Move where clause to end of declaration</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>May 12, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; Am 10.05.2016 um 20:51 schrieb Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0081: Move where clause to end of declaration&quot; begins now and runs through May 16. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md<br>&gt; <br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>+1<br></p><p>It increases readability of generics by a far margin.<br>I appreciate that the proposal allows to pull out the inheritance/conformance constraints into the where clause, too, very much!<br></p><p><br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes, as more complex generics are a powerful feature of Swift and the increased readability helps designing and using them very much.<br></p><p><br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Absolutely.<br></p><p><br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Ceylon uses a similar syntax to declare the constraints of generic parameters:<br>shared interface DirectedGraph&lt;V,E&gt; satisfies IncidenceGraph&lt;V,E&gt;<br>      given V satisfies Object<br>      given E satisfies DirectedEdge&lt;V, E&gt; { … }<br>I always found this very readable but with Swift’s ability to declare constraints between associated types of generic parameters this is even more important.<br></p><p><br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Read the proposal carefully and followed the discussion.<br></p><p>-Thorsten<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160512/58ba0af3/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Review] SE-0081: Move where clause to end of declaration</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>May 13, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On 10 May 2016, at 19:51, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>I’m a +1, however personally I’d prefer this to be optional my constraints aren’t that complex, for example:<br></p><p>	func someMethod&lt;T where T.Element == String&gt;(value:T) { … }<br></p><p>Personally I prefer to keep such simple cases as they are, but would happily use the new ability to move more complex ones (e.g- dealing with Generator.Element and multiple constraints) to the end as proposed.<br></p><p>So I’m +1, but I don’t think it should be one or the other, I’d prefer to have both options, with a recommendation that trailing constraints be used in complex cases for clarity.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Generic constraints are one of the most powerful, and daunting, features of Swift, so anything that makes them a bit neater and keeps function signatures tidy is an improvement. Of course there’s a lot more that can be done to simplify generic constraints further, but given the simple elegance of this improvement it easily justifies inclusion.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>I’d say yes, since the feature itself is unchanged and already part of Swift, it’s just the location that is being moved.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick read through, which is plenty since the proposal is fairly straightforward, I’ve also been following the discussion for a while.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160513/2fe1f0fd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Review] SE-0081: Move where clause to end of declaration</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>May 13, 2016 at 03:00:00am</p></header><div class="content"><p>&gt; I’m a +1, however personally I’d prefer this to be optional my constraints aren’t that complex, for example:<br>&gt; <br>&gt; 	func someMethod&lt;T where T.Element == String&gt;(value:T) { … }<br>&gt; <br>&gt; Personally I prefer to keep such simple cases as they are, but would happily use the new ability to move more complex ones (e.g- dealing with Generator.Element and multiple constraints) to the end as proposed.<br></p><p>The example you give isn&#39;t actually a legal constraint. (The legal version would be much longer—you&#39;d need to conform `T` to `Sequence` or `Collection` and test `T.Iterator.Element`, or their Swift 2 equivalents.) Can you provide a more realistic example where you think moving the `where` clause to the end of the declaration is overkill? I&#39;ve generally found that most where clauses are mind-numbingly long.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/44b9c3e92a40313850fdbc2cb0abdef7?s=50"></div><header><strong>[Review] SE-0081: Move where clause to end of declaration</strong> from <string>Jon Shier</string> &lt;jon at jonshier.com&gt;<p>May 14, 2016 at 01:00:00am</p></header><div class="content"><p>&gt; * What is your evaluation of the proposal?<br></p><p>-1<br></p><p>No one has been able to explain how this change improves readability, it just seems like it’s supposed to be self evident. I would argue that it makes the generic definitions less readable by separating declarations and their relevant where clauses. At best this change just moves the already unreadable mass of text elsewhere, where it’s still unreadable. Furthermore, it trades this supposed readability of generic parameters for decreased readability of the actual function signature, since that signature’s now buried between the generic definitions and the where clauses. This is especially bad when declaring a single generic type that can easily fit on a single line, such as:<br></p><p>func something&lt;T: Decodable where T == T.DecodedType&gt;(with something: T) -&gt; String <br></p><p>turns into this, which is less readable to me, as it hides important information between the generic information:<br></p><p>func something&lt;T: Decodable&gt;(with something: T) -&gt; String where T == T.DecodedType<br></p><p>Also, this proposal doesn’t explain how the definitions for generic types would change. Using the proposed grammar would be even worse on types. From:<br></p><p>final class NetworkOperation&lt;T: Decodable where T == T.DecodedType&gt;: Operation,… {<br></p><p>to:<br></p><p>final class NetworkOperation&lt;T: Decodable&gt;: Operation,… where T == T.DecodedType {<br></p><p>The additional conformances types can have make this an especially bad use case for this proposal. <br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>It can be a problem, but I don’t see how this proposal fixes it. Appropriate code styling, whether manual or provided by an IDE, could provide much better readability than this proposal ever could.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Changes proposed for “readability” need to be closely scrutinized, as one programmer’s readable and another’s Perl. I don’t think this proposal meets the high standard this list has tried to set for things to the language.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Java and C++’s generics, which are rather different. And despite what they may have intended, I don’t think generics in either language are used as much as in Swift.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Read the proposal, the thread thus far, and considered my response.<br></p><p><br></p><p>Jon<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160514/a80f432d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/44b9c3e92a40313850fdbc2cb0abdef7?s=50"></div><header><strong>[Review] SE-0081: Move where clause to end of declaration</strong> from <string>Jon Shier</string> &lt;jon at jonshier.com&gt;<p>May 14, 2016 at 02:00:00am</p></header><div class="content"><p>I notice now that the proposal does define how the change interacts with type declarations, in the grammar section. However, I still see that as an even worse change than in the function case.<br></p><p><br></p><p>Jon Shier<br></p><p><br>&gt; On May 14, 2016, at 1:05 AM, Jon Shier &lt;jon at jonshier.com&gt; wrote:<br>&gt; <br>&gt;&gt; * What is your evaluation of the proposal?<br>&gt; <br>&gt; -1<br>&gt; <br>&gt; No one has been able to explain how this change improves readability, it just seems like it’s supposed to be self evident. I would argue that it makes the generic definitions less readable by separating declarations and their relevant where clauses. At best this change just moves the already unreadable mass of text elsewhere, where it’s still unreadable. Furthermore, it trades this supposed readability of generic parameters for decreased readability of the actual function signature, since that signature’s now buried between the generic definitions and the where clauses. This is especially bad when declaring a single generic type that can easily fit on a single line, such as:<br>&gt; <br>&gt; func something&lt;T: Decodable where T == T.DecodedType&gt;(with something: T) -&gt; String <br>&gt; <br>&gt; turns into this, which is less readable to me, as it hides important information between the generic information:<br>&gt; <br>&gt; func something&lt;T: Decodable&gt;(with something: T) -&gt; String where T == T.DecodedType<br>&gt; <br>&gt; Also, this proposal doesn’t explain how the definitions for generic types would change. Using the proposed grammar would be even worse on types. From:<br>&gt; <br>&gt; final class NetworkOperation&lt;T: Decodable where T == T.DecodedType&gt;: Operation,… {<br>&gt; <br>&gt; to:<br>&gt; <br>&gt; final class NetworkOperation&lt;T: Decodable&gt;: Operation,… where T == T.DecodedType {<br>&gt; <br>&gt; The additional conformances types can have make this an especially bad use case for this proposal. <br>&gt; <br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; It can be a problem, but I don’t see how this proposal fixes it. Appropriate code styling, whether manual or provided by an IDE, could provide much better readability than this proposal ever could.<br>&gt; <br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; Changes proposed for “readability” need to be closely scrutinized, as one programmer’s readable and another’s Perl. I don’t think this proposal meets the high standard this list has tried to set for things to the language.<br>&gt; <br>&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; Java and C++’s generics, which are rather different. And despite what they may have intended, I don’t think generics in either language are used as much as in Swift.<br>&gt; <br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; Read the proposal, the thread thus far, and considered my response.<br>&gt; <br>&gt; <br>&gt; <br>&gt; Jon<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160514/efeb17c6/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>[Review] SE-0081: Move where clause to end of declaration</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>May 14, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>-1<br></p><p>&gt; * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More than a quick reading, but not really “in-depth” study…<br></p><p>&gt; * Does this proposal fit well with the feel and direction of Swift?<br></p><p>I don’t really think it does. I don’t remember anything in Swift that went through such a bizarre change just because it looks ugly. <br></p><p>I mean, the where clause isn’t a comment; it’s not documentation. It’s absolutely vital to anybody and everybody who uses anything with one. Really, I can’t see any logic to splitting the parameter name and constraints. It’s completely baffling, and if it wasn’t that they’re “ugly” I don’t think anybody would give this proposal a second thought. Besides, when I need to look up which parameters I need for a type, it’s nice to have them all in one place in a clearly delimited section of the declaration.<br></p><p>&gt; * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I’m with Jon Shier on this - it is a problem, but it’s one inherent to generics. In some languages, you have great big whoppers for type parameters and have to pass them around everywhere you go; we’re relatively clean with Swift. Nobody writing swift should complain about our type parameters being too messy:<br></p><p>interface Feeder&lt;F extends Food, A extends Animal&lt;F,?&gt;, S extends Store&lt;F&gt;&gt; { <br>  public void buyFoodAndFeed(A animal, S store); <br>} <br>class StoreFeeder implements Feeder&lt;Grass, Animal&lt;Grass, ?&gt;, Store&lt;Grass&gt;&gt; { <br>  public void buyFoodAndFeed(Animal&lt;Grass, ?&gt; animal, Store&lt;Grass&gt; store) { <br>    animal.eat(store.buyFood()); <br>  } <br>}<br></p><p>I have a counter-proposal to tackle the readability issue: that we extend SE-0048: Generic Typealiases [1] to include where clauses. The proposal already mentions this, and simply says &quot;If there is a compelling reason to add this, we can consider extending the model to support them in the future, based on the merits of those reasons.” If we did that, we could drastically shorten function/class declarations - using, say, “StringCollection” or “IntegerSequence” rather than &lt;C:Collection where C.Iterator.Element==String&gt;.<br></p><p>[1](https://github.com/apple/swift-evolution/blob/master/proposals/0048-generic-typealias.md)<br></p><p><br>&gt; On 10 May 2016, at 20:51, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0081: Move where clause to end of declaration&quot; begins now and runs through May 16. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>[Review] SE-0081: Move where clause to end of declaration</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>May 14, 2016 at 10:00:00am</p></header><div class="content"><p>Oops, StringCollection and IntegerSequence are bad examples, because we’d need to improve existentials before it could apply to those specific examples.<br></p><p>But that’s desperately needed anyway. I’d still recommend ‘Generalised Existentials’ (generics manifesto) + generic typealiases over moving the where clause.<br></p><p>&gt; On 14 May 2016, at 10:37, Karl Wagner &lt;razielim at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt; <br>&gt; -1<br>&gt; <br>&gt;&gt; * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More than a quick reading, but not really “in-depth” study…<br>&gt; <br>&gt;&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; I don’t really think it does. I don’t remember anything in Swift that went through such a bizarre change just because it looks ugly. <br>&gt; <br>&gt; I mean, the where clause isn’t a comment; it’s not documentation. It’s absolutely vital to anybody and everybody who uses anything with one. Really, I can’t see any logic to splitting the parameter name and constraints. It’s completely baffling, and if it wasn’t that they’re “ugly” I don’t think anybody would give this proposal a second thought. Besides, when I need to look up which parameters I need for a type, it’s nice to have them all in one place in a clearly delimited section of the declaration.<br>&gt; <br>&gt;&gt; * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; I’m with Jon Shier on this - it is a problem, but it’s one inherent to generics. In some languages, you have great big whoppers for type parameters and have to pass them around everywhere you go; we’re relatively clean with Swift. Nobody writing swift should complain about our type parameters being too messy:<br>&gt; <br>&gt; interface Feeder&lt;F extends Food, A extends Animal&lt;F,?&gt;, S extends Store&lt;F&gt;&gt; { <br>&gt;  public void buyFoodAndFeed(A animal, S store); <br>&gt; } <br>&gt; class StoreFeeder implements Feeder&lt;Grass, Animal&lt;Grass, ?&gt;, Store&lt;Grass&gt;&gt; { <br>&gt;  public void buyFoodAndFeed(Animal&lt;Grass, ?&gt; animal, Store&lt;Grass&gt; store) { <br>&gt;    animal.eat(store.buyFood()); <br>&gt;  } <br>&gt; }<br>&gt; <br>&gt; I have a counter-proposal to tackle the readability issue: that we extend SE-0048: Generic Typealiases [1] to include where clauses. The proposal already mentions this, and simply says &quot;If there is a compelling reason to add this, we can consider extending the model to support them in the future, based on the merits of those reasons.” If we did that, we could drastically shorten function/class declarations - using, say, “StringCollection” or “IntegerSequence” rather than &lt;C:Collection where C.Iterator.Element==String&gt;.<br>&gt; <br>&gt; [1](https://github.com/apple/swift-evolution/blob/master/proposals/0048-generic-typealias.md)<br>&gt; <br>&gt; <br>&gt;&gt; On 10 May 2016, at 20:51, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0081: Move where clause to end of declaration&quot; begins now and runs through May 16. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b6a0b6562cd412f587c69d192f335161?s=50"></div><header><strong>[Review] SE-0081: Move where clause to end of declaration</strong> from <string>plx</string> &lt;plxswift at icloud.com&gt;<p>May 17, 2016 at 08:00:00am</p></header><div class="content"><p>Late, but +1 *overall*.<br></p><p>For function signatures I am somewhat indifferent, honestly; I think having the option to move part of the `where` clause after the signature declaration is beneficial, but not hugely so.<br></p><p>The reasoning here is simple: currently functions look like `func $name&lt;$genericParameters&gt;($args) -&gt; $result`, and even though it’s difficult to *read* a lengthy `$genericParameters` the `($args) -&gt; $result` portion (e.g. signature) isn’t &quot;broken up&quot;. It’s good that it’s not broken up, but it means for *functions* the proposal is making only a minor readability improvement (by moving the “signature&quot; closer to the “name”).<br></p><p>But, I think we have a *significant* improvement here for *type* declarations — classes, structs, etc. — because they look like e.g. this for classes: `class $name&lt;$genericParameters&gt; : $base (, … $protocols )`. If one is writing classes that use a lot of generic parameters with a lot of relationships between their associated types, the key parts of the type declaration wound up “split up” b/c the `$name` is very far away from the `$base`.<br></p><p>It’s apparently a somewhat-uncommon use but it’s *a lot nicer* under this proposal than under current syntax.<br></p><p>I wouldn’t object if the proposal tried to be a bit less flexible and e.g. forced all `:`-style constraints into the initial `&lt;&gt;` segment and all `where X.Y == Z.Q`-style constraints into the subsequent `where` clause, but I also don’t feel that that would be an unqualified improvement.<br></p><p>&gt; On May 10, 2016, at 1:51 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0081: Move where clause to end of declaration&quot; begins now and runs through May 16. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
