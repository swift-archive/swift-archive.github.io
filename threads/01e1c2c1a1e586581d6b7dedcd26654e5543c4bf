<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9b7c9b023237138ccb67df539f11b50?s=50"></div><header><strong>[pitch] remove global sqrt&lt;T: FloatingPoint&gt;</strong> from <string>Stephen Canon</string> &lt;scanon at apple.com&gt;<p>July 11, 2016 at 05:00:00pm</p></header><div class="content"><p>Post SE-0067 FloatingPoint provides the usual global operators, as well as a single global function:<br></p><p>	func sqrt&lt;T: FloatingPoint&gt;(_: T) -&gt; T<br></p><p>It seems out of place and lonely, and it would be nice if we can keep the default members of the global namespace to a minimum.<br></p><p>I’d like to suggest removing this global from FloatingPoint while keeping the existing global functions for concrete types in the Darwin.C module.  The square root operation would still be available for all FloatingPoint types as `.squareRoot()`.<br></p><p>I would also plan to provide this and other math.h-ish globals in a future (post swift 3) Math module.<br></p><p>– Steve<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[pitch] remove global sqrt&lt;T: FloatingPoint&gt;</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July 11, 2016 at 09:00:00pm</p></header><div class="content"><p>Seems reasonable enough.<br></p><p><br>On Mon, Jul 11, 2016 at 16:28 Stephen Canon via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Post SE-0067 FloatingPoint provides the usual global operators, as well as<br>&gt; a single global function:<br>&gt;<br>&gt;         func sqrt&lt;T: FloatingPoint&gt;(_: T) -&gt; T<br>&gt;<br>&gt; It seems out of place and lonely, and it would be nice if we can keep the<br>&gt; default members of the global namespace to a minimum.<br>&gt;<br>&gt; I’d like to suggest removing this global from FloatingPoint while keeping<br>&gt; the existing global functions for concrete types in the Darwin.C module.<br>&gt; The square root operation would still be available for all FloatingPoint<br>&gt; types as `.squareRoot()`.<br>&gt;<br>&gt; I would also plan to provide this and other math.h-ish globals in a future<br>&gt; (post swift 3) Math module.<br>&gt;<br>&gt; – Steve<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160711/a128cb07/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/212199c56fae3d6b09dbf788f1c5e313?s=50"></div><header><strong>[pitch] remove global sqrt&lt;T: FloatingPoint&gt;</strong> from <string>G B</string> &lt;g.c.b.at.work at gmail.com&gt;<p>July 11, 2016 at 03:00:00pm</p></header><div class="content"><p>While I don’t have a strong opinion about what functions are in the global namespace and which are in a `Math` module, I’m not excited about the idea of delaying the availability of generic implementations of floating point functions.<br></p><p>How would this affect code intended to operate generically over Float and Double?  I’ve made the mistake of trying to do this with some of my code and it’s remarkably painful for what I’d hoped would be a simple abstraction.<br></p><p>Right now (pre SE-0067), it takes a surprising amount of tinkering to get code to work generically across those two types.  Provisions need to be added to provide `sqrt`, `sin`, `cos`, etc.  While it all compiles down to the same instructions, I don’t feel it is natural to call `squareRoot()` as a method.<br></p><p>I don’t necessarily care if these functions are in the global namespace, or if they’re imported from a `Math` module.  I’m also not convinced that they should be part of the core FloatingPoint protocol.  `sqrt` probably should be, but the trig functions would naturally fit together in a protocol that itself conforms to FloatingPoint.<br></p><p>&gt; On Jul 11, 2016, at 14:28 , Stephen Canon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Post SE-0067 FloatingPoint provides the usual global operators, as well as a single global function:<br>&gt; <br>&gt; 	func sqrt&lt;T: FloatingPoint&gt;(_: T) -&gt; T<br>&gt; <br>&gt; It seems out of place and lonely, and it would be nice if we can keep the default members of the global namespace to a minimum.<br>&gt; <br>&gt; I’d like to suggest removing this global from FloatingPoint while keeping the existing global functions for concrete types in the Darwin.C module.  The square root operation would still be available for all FloatingPoint types as `.squareRoot()`.<br>&gt; <br>&gt; I would also plan to provide this and other math.h-ish globals in a future (post swift 3) Math module.<br>&gt; <br>&gt; – Steve<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9b7c9b023237138ccb67df539f11b50?s=50"></div><header><strong>[pitch] remove global sqrt&lt;T: FloatingPoint&gt;</strong> from <string>Stephen Canon</string> &lt;scanon at apple.com&gt;<p>July 11, 2016 at 06:00:00pm</p></header><div class="content"><p>It wouldn’t delay code intended to operate generically at all.  That code can use .squareRoot( ).<br></p><p>&gt; On Jul 11, 2016, at 6:12 PM, G B &lt;g.c.b.at.work at gmail.com&gt; wrote:<br>&gt; <br>&gt; While I don’t have a strong opinion about what functions are in the global namespace and which are in a `Math` module, I’m not excited about the idea of delaying the availability of generic implementations of floating point functions.<br>&gt; <br>&gt; How would this affect code intended to operate generically over Float and Double?  I’ve made the mistake of trying to do this with some of my code and it’s remarkably painful for what I’d hoped would be a simple abstraction.<br>&gt; <br>&gt; Right now (pre SE-0067), it takes a surprising amount of tinkering to get code to work generically across those two types.  Provisions need to be added to provide `sqrt`, `sin`, `cos`, etc.  While it all compiles down to the same instructions, I don’t feel it is natural to call `squareRoot()` as a method.<br>&gt; <br>&gt; I don’t necessarily care if these functions are in the global namespace, or if they’re imported from a `Math` module.  I’m also not convinced that they should be part of the core FloatingPoint protocol.  `sqrt` probably should be, but the trig functions would naturally fit together in a protocol that itself conforms to FloatingPoint.<br>&gt; <br>&gt;&gt; On Jul 11, 2016, at 14:28 , Stephen Canon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Post SE-0067 FloatingPoint provides the usual global operators, as well as a single global function:<br>&gt;&gt; <br>&gt;&gt; 	func sqrt&lt;T: FloatingPoint&gt;(_: T) -&gt; T<br>&gt;&gt; <br>&gt;&gt; It seems out of place and lonely, and it would be nice if we can keep the default members of the global namespace to a minimum.<br>&gt;&gt; <br>&gt;&gt; I’d like to suggest removing this global from FloatingPoint while keeping the existing global functions for concrete types in the Darwin.C module.  The square root operation would still be available for all FloatingPoint types as `.squareRoot()`.<br>&gt;&gt; <br>&gt;&gt; I would also plan to provide this and other math.h-ish globals in a future (post swift 3) Math module.<br>&gt;&gt; <br>&gt;&gt; – Steve<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9b7c9b023237138ccb67df539f11b50?s=50"></div><header><strong>[pitch] remove global sqrt&lt;T: FloatingPoint&gt;</strong> from <string>Stephen Canon</string> &lt;scanon at apple.com&gt;<p>July 11, 2016 at 06:00:00pm</p></header><div class="content"><p>Expanding slightly:<br></p><p>A generic math module / protocol / whatever that provides all the math operations generically over the built-in floating point types is out of scope for the language/stdlib in Swift 3.  Everyone wants it, it’s simply too late to add it (as with many other features and ponies).<br></p><p>N.B. “Out of scope for the language/stdlib” does not mean “you can’t do it”.  This is a great opportunity for someone to provide a library solution (it is fairly simple to do so, even if there’s a good amount of boilerplate).  I would even suggest that if such a library were widely used and vetted, it would form an excellent base for proposing a math module once Swift 3 closes down.<br></p><p>– Steve<br></p><p>&gt; On Jul 11, 2016, at 6:13 PM, Stephen Canon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; It wouldn’t delay code intended to operate generically at all.  That code can use .squareRoot( ).<br>&gt; <br>&gt;&gt; On Jul 11, 2016, at 6:12 PM, G B &lt;g.c.b.at.work at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; While I don’t have a strong opinion about what functions are in the global namespace and which are in a `Math` module, I’m not excited about the idea of delaying the availability of generic implementations of floating point functions.<br>&gt;&gt; <br>&gt;&gt; How would this affect code intended to operate generically over Float and Double?  I’ve made the mistake of trying to do this with some of my code and it’s remarkably painful for what I’d hoped would be a simple abstraction.<br>&gt;&gt; <br>&gt;&gt; Right now (pre SE-0067), it takes a surprising amount of tinkering to get code to work generically across those two types.  Provisions need to be added to provide `sqrt`, `sin`, `cos`, etc.  While it all compiles down to the same instructions, I don’t feel it is natural to call `squareRoot()` as a method.<br>&gt;&gt; <br>&gt;&gt; I don’t necessarily care if these functions are in the global namespace, or if they’re imported from a `Math` module.  I’m also not convinced that they should be part of the core FloatingPoint protocol.  `sqrt` probably should be, but the trig functions would naturally fit together in a protocol that itself conforms to FloatingPoint.<br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 11, 2016, at 14:28 , Stephen Canon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Post SE-0067 FloatingPoint provides the usual global operators, as well as a single global function:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	func sqrt&lt;T: FloatingPoint&gt;(_: T) -&gt; T<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It seems out of place and lonely, and it would be nice if we can keep the default members of the global namespace to a minimum.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’d like to suggest removing this global from FloatingPoint while keeping the existing global functions for concrete types in the Darwin.C module.  The square root operation would still be available for all FloatingPoint types as `.squareRoot()`.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I would also plan to provide this and other math.h-ish globals in a future (post swift 3) Math module.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; – Steve<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/212199c56fae3d6b09dbf788f1c5e313?s=50"></div><header><strong>[pitch] remove global sqrt&lt;T: FloatingPoint&gt;</strong> from <string>G B</string> &lt;g.c.b.at.work at gmail.com&gt;<p>July 11, 2016 at 03:00:00pm</p></header><div class="content"><p>For certain functions (sqrt, sin, cos, log, etc) we’ve grown up in math class calling them as a function on an argument rather than viewing them as a property (or method) of the number.<br></p><p>Just like we prefer to use `a - b` rather than `a.sub(b)`, we (or at least I) prefer `sqrt(a)` over `a.squareRoot()`.<br></p><p>It seems this is dooming everyone to either reverse their internal math grammar or do what I’m doing now and write their own generic function for no other purpose than to wrap a method call to look like a function call.<br></p><p>I’d be less resistant if your proposed `Math` module was concurrent with the change.<br></p><p><br>&gt; On Jul 11, 2016, at 15:13 , Stephen Canon &lt;scanon at apple.com&gt; wrote:<br>&gt; <br>&gt; It wouldn’t delay code intended to operate generically at all.  That code can use .squareRoot( ).<br>&gt; <br>&gt;&gt; On Jul 11, 2016, at 6:12 PM, G B &lt;g.c.b.at.work at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; While I don’t have a strong opinion about what functions are in the global namespace and which are in a `Math` module, I’m not excited about the idea of delaying the availability of generic implementations of floating point functions.<br>&gt;&gt; <br>&gt;&gt; How would this affect code intended to operate generically over Float and Double?  I’ve made the mistake of trying to do this with some of my code and it’s remarkably painful for what I’d hoped would be a simple abstraction.<br>&gt;&gt; <br>&gt;&gt; Right now (pre SE-0067), it takes a surprising amount of tinkering to get code to work generically across those two types.  Provisions need to be added to provide `sqrt`, `sin`, `cos`, etc.  While it all compiles down to the same instructions, I don’t feel it is natural to call `squareRoot()` as a method.<br>&gt;&gt; <br>&gt;&gt; I don’t necessarily care if these functions are in the global namespace, or if they’re imported from a `Math` module.  I’m also not convinced that they should be part of the core FloatingPoint protocol.  `sqrt` probably should be, but the trig functions would naturally fit together in a protocol that itself conforms to FloatingPoint.<br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 11, 2016, at 14:28 , Stephen Canon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Post SE-0067 FloatingPoint provides the usual global operators, as well as a single global function:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	func sqrt&lt;T: FloatingPoint&gt;(_: T) -&gt; T<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It seems out of place and lonely, and it would be nice if we can keep the default members of the global namespace to a minimum.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’d like to suggest removing this global from FloatingPoint while keeping the existing global functions for concrete types in the Darwin.C module.  The square root operation would still be available for all FloatingPoint types as `.squareRoot()`.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I would also plan to provide this and other math.h-ish globals in a future (post swift 3) Math module.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; – Steve<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9b7c9b023237138ccb67df539f11b50?s=50"></div><header><strong>[pitch] remove global sqrt&lt;T: FloatingPoint&gt;</strong> from <string>Stephen Canon</string> &lt;scanon at apple.com&gt;<p>July 11, 2016 at 06:00:00pm</p></header><div class="content"><p>The problem with having the Math module concurrent with this change is that such a thing is necessarily post-swift 3, whereas this change should happen in Swift 3 if it’s going to happen at all.<br></p><p>Given that this only effects one function, and you already need your own wrappers for every other math operation, it seems like the right tradeoff to do it now.<br></p><p>– Steve<br></p><p>&gt; On Jul 11, 2016, at 6:20 PM, G B &lt;g.c.b.at.work at gmail.com&gt; wrote:<br>&gt; <br>&gt; For certain functions (sqrt, sin, cos, log, etc) we’ve grown up in math class calling them as a function on an argument rather than viewing them as a property (or method) of the number.<br>&gt; <br>&gt; Just like we prefer to use `a - b` rather than `a.sub(b)`, we (or at least I) prefer `sqrt(a)` over `a.squareRoot()`.<br>&gt; <br>&gt; It seems this is dooming everyone to either reverse their internal math grammar or do what I’m doing now and write their own generic function for no other purpose than to wrap a method call to look like a function call.<br>&gt; <br>&gt; I’d be less resistant if your proposed `Math` module was concurrent with the change.<br>&gt; <br>&gt;&gt; On Jul 11, 2016, at 15:13 , Stephen Canon &lt;scanon at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; It wouldn’t delay code intended to operate generically at all.  That code can use .squareRoot( ).<br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 11, 2016, at 6:12 PM, G B &lt;g.c.b.at.work at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; While I don’t have a strong opinion about what functions are in the global namespace and which are in a `Math` module, I’m not excited about the idea of delaying the availability of generic implementations of floating point functions.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; How would this affect code intended to operate generically over Float and Double?  I’ve made the mistake of trying to do this with some of my code and it’s remarkably painful for what I’d hoped would be a simple abstraction.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Right now (pre SE-0067), it takes a surprising amount of tinkering to get code to work generically across those two types.  Provisions need to be added to provide `sqrt`, `sin`, `cos`, etc.  While it all compiles down to the same instructions, I don’t feel it is natural to call `squareRoot()` as a method.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don’t necessarily care if these functions are in the global namespace, or if they’re imported from a `Math` module.  I’m also not convinced that they should be part of the core FloatingPoint protocol.  `sqrt` probably should be, but the trig functions would naturally fit together in a protocol that itself conforms to FloatingPoint.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 11, 2016, at 14:28 , Stephen Canon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Post SE-0067 FloatingPoint provides the usual global operators, as well as a single global function:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	func sqrt&lt;T: FloatingPoint&gt;(_: T) -&gt; T<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It seems out of place and lonely, and it would be nice if we can keep the default members of the global namespace to a minimum.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’d like to suggest removing this global from FloatingPoint while keeping the existing global functions for concrete types in the Darwin.C module.  The square root operation would still be available for all FloatingPoint types as `.squareRoot()`.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I would also plan to provide this and other math.h-ish globals in a future (post swift 3) Math module.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; – Steve<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/212199c56fae3d6b09dbf788f1c5e313?s=50"></div><header><strong>[pitch] remove global sqrt&lt;T: FloatingPoint&gt;</strong> from <string>G B</string> &lt;g.c.b.at.work at gmail.com&gt;<p>July 11, 2016 at 03:00:00pm</p></header><div class="content"><p>I understand that it’s only one function and that I’m probably being ever-so-slightly unreasonable but I’ve spent the last month going crazy that a language as expressive as Swift, with all of its support for protocols and generics and under-the-hood optimization, makes me do stuff like this to abstract the most typical of algorithms across functionally identical types:<br></p><p>protocol ScalarMathType  {<br>    func sqrt() -&gt; Self<br>    func sin() -&gt; Self<br>    func cos() -&gt; Self<br>    func asin() -&gt; Self<br>    func acos() -&gt; Self<br>    func atan2(x:Self) -&gt; Self<br>}<br></p><p><br>func sqrt&lt;T:ScalarMathType&gt; (x:T) -&gt; T {return x.sqrt()}<br>func sin&lt;T:ScalarMathType&gt; (x:T) -&gt; T {return x.sin()}<br>func cos&lt;T:ScalarMathType&gt; (x:T) -&gt; T {return x.cos()}<br>func asin&lt;T:ScalarMathType&gt;(x:T) -&gt; T {return x.asin()}<br>func acos&lt;T:ScalarMathType&gt;(x:T) -&gt; T {return x.acos()}<br>func atan2&lt;T:ScalarMathType&gt;(y:T,x:T) -&gt; T {return y.atan2(x)}<br></p><p><br></p><p>extension Float  : ScalarMathType {<br>    func sqrt() -&gt; Float {return Foundation.sqrt(self)}<br>    func sin() -&gt; Float {return Foundation.sin(self)}<br>    func cos() -&gt; Float {return Foundation.cos(self)}<br>    func asin() -&gt; Float {return Foundation.asin(self)}<br>    func acos() -&gt; Float {return Foundation.acos(self)}<br>    func atan2(x:Float) -&gt; Float {return Foundation.atan2(self,x)}<br>}<br></p><p>extension Double : ScalarMathType {<br>    func sqrt() -&gt; Double {return Foundation.sqrt(self)}<br>    func sin() -&gt; Double {return Foundation.sin(self)}<br>    func cos() -&gt; Double {return Foundation.cos(self)}<br>    func asin() -&gt; Double {return Foundation.asin(self)}<br>    func acos() -&gt; Double {return Foundation.acos(self)}<br>    func atan2(x:Double) -&gt; Double {return Foundation.atan2(self,x)}<br>}<br></p><p><br>That just seems so horribly hackish.<br></p><p>Even if the `Math` module only included this, it would be a win.  Otherwise, I’d almost prefer that we stuff these into the global namespace to keep `sqrt` company.  Right now every developer who wants to change between polar and cartesian coordinates, or calculate a radius from a circumference in a generic way needs to replicate this code…  <br></p><p>Hopefully we all do it the same way and in the same way that Swift4 implements it or we’re all going to have to deal with the conflicts later.<br></p><p><br></p><p>&gt; On Jul 11, 2016, at 15:28 , Stephen Canon &lt;scanon at apple.com&gt; wrote:<br>&gt; <br>&gt; The problem with having the Math module concurrent with this change is that such a thing is necessarily post-swift 3, whereas this change should happen in Swift 3 if it’s going to happen at all.<br>&gt; <br>&gt; Given that this only effects one function, and you already need your own wrappers for every other math operation, it seems like the right tradeoff to do it now.<br>&gt; <br>&gt; – Steve<br>&gt; <br>&gt;&gt; On Jul 11, 2016, at 6:20 PM, G B &lt;g.c.b.at.work at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; For certain functions (sqrt, sin, cos, log, etc) we’ve grown up in math class calling them as a function on an argument rather than viewing them as a property (or method) of the number.<br>&gt;&gt; <br>&gt;&gt; Just like we prefer to use `a - b` rather than `a.sub(b)`, we (or at least I) prefer `sqrt(a)` over `a.squareRoot()`.<br>&gt;&gt; <br>&gt;&gt; It seems this is dooming everyone to either reverse their internal math grammar or do what I’m doing now and write their own generic function for no other purpose than to wrap a method call to look like a function call.<br>&gt;&gt; <br>&gt;&gt; I’d be less resistant if your proposed `Math` module was concurrent with the change.<br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 11, 2016, at 15:13 , Stephen Canon &lt;scanon at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It wouldn’t delay code intended to operate generically at all.  That code can use .squareRoot( ).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 11, 2016, at 6:12 PM, G B &lt;g.c.b.at.work at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; While I don’t have a strong opinion about what functions are in the global namespace and which are in a `Math` module, I’m not excited about the idea of delaying the availability of generic implementations of floating point functions.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; How would this affect code intended to operate generically over Float and Double?  I’ve made the mistake of trying to do this with some of my code and it’s remarkably painful for what I’d hoped would be a simple abstraction.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Right now (pre SE-0067), it takes a surprising amount of tinkering to get code to work generically across those two types.  Provisions need to be added to provide `sqrt`, `sin`, `cos`, etc.  While it all compiles down to the same instructions, I don’t feel it is natural to call `squareRoot()` as a method.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I don’t necessarily care if these functions are in the global namespace, or if they’re imported from a `Math` module.  I’m also not convinced that they should be part of the core FloatingPoint protocol.  `sqrt` probably should be, but the trig functions would naturally fit together in a protocol that itself conforms to FloatingPoint.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jul 11, 2016, at 14:28 , Stephen Canon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Post SE-0067 FloatingPoint provides the usual global operators, as well as a single global function:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	func sqrt&lt;T: FloatingPoint&gt;(_: T) -&gt; T<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; It seems out of place and lonely, and it would be nice if we can keep the default members of the global namespace to a minimum.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I’d like to suggest removing this global from FloatingPoint while keeping the existing global functions for concrete types in the Darwin.C module.  The square root operation would still be available for all FloatingPoint types as `.squareRoot()`.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I would also plan to provide this and other math.h-ish globals in a future (post swift 3) Math module.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; – Steve<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[pitch] remove global sqrt&lt;T: FloatingPoint&gt;</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July 11, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Jul 11, 2016, at 2:28 PM, Stephen Canon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Post SE-0067 FloatingPoint provides the usual global operators, as well as a single global function:<br>&gt; <br>&gt; 	func sqrt&lt;T: FloatingPoint&gt;(_: T) -&gt; T<br>&gt; <br>&gt; It seems out of place and lonely, and it would be nice if we can keep the default members of the global namespace to a minimum.<br>&gt; <br>&gt; I’d like to suggest removing this global from FloatingPoint while keeping the existing global functions for concrete types in the Darwin.C module.  The square root operation would still be available for all FloatingPoint types as `.squareRoot()`.<br>&gt; <br>&gt; I would also plan to provide this and other math.h-ish globals in a future (post swift 3) Math module.<br></p><p>I’m very concerned with this.  Why not do exactly the opposite?  Remove the concrete operations from Darwin.C and replace it with a single generic one?<br></p><p>The rationale for using global functions here is that they are “terms of art” in numerics nomenclature.  If they aren’t, then we should consistently eradicate all the global operations:<br></p><p>	assert(Double.pi.sine == 0.0)<br></p><p>Is this the direction you want to go?<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e910871dda004717de19e83626308b5a?s=50"></div><header><strong>[pitch] remove global sqrt&lt;T: FloatingPoint&gt;</strong> from <string>Tony Allevato</string> &lt;allevato at google.com&gt;<p>July 11, 2016 at 10:00:00pm</p></header><div class="content"><p>Agreed. Imagine this:<br></p><p>let distance = (x * x + y * y).squareRoot()<br></p><p>That reads extremely foreign to me.<br></p><p>Why not provide this as a static function that takes Self on the protocol<br>so that conformances can specialize it, and have the protocol-constrained<br>global function sqrt&lt;T: FloatingPoint&gt; call T.sqrt?<br>On Mon, Jul 11, 2016 at 3:42 PM Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Jul 11, 2016, at 2:28 PM, Stephen Canon via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Post SE-0067 FloatingPoint provides the usual global operators, as well<br>&gt; as a single global function:<br>&gt; &gt;<br>&gt; &gt;       func sqrt&lt;T: FloatingPoint&gt;(_: T) -&gt; T<br>&gt; &gt;<br>&gt; &gt; It seems out of place and lonely, and it would be nice if we can keep<br>&gt; the default members of the global namespace to a minimum.<br>&gt; &gt;<br>&gt; &gt; I’d like to suggest removing this global from FloatingPoint while<br>&gt; keeping the existing global functions for concrete types in the Darwin.C<br>&gt; module.  The square root operation would still be available for all<br>&gt; FloatingPoint types as `.squareRoot()`.<br>&gt; &gt;<br>&gt; &gt; I would also plan to provide this and other math.h-ish globals in a<br>&gt; future (post swift 3) Math module.<br>&gt;<br>&gt; I’m very concerned with this.  Why not do exactly the opposite?  Remove<br>&gt; the concrete operations from Darwin.C and replace it with a single generic<br>&gt; one?<br>&gt;<br>&gt; The rationale for using global functions here is that they are “terms of<br>&gt; art” in numerics nomenclature.  If they aren’t, then we should consistently<br>&gt; eradicate all the global operations:<br>&gt;<br>&gt;         assert(Double.pi.sine == 0.0)<br>&gt;<br>&gt; Is this the direction you want to go?<br>&gt;<br>&gt; -Chris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160711/e1a7ade0/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9b7c9b023237138ccb67df539f11b50?s=50"></div><header><strong>[pitch] remove global sqrt&lt;T: FloatingPoint&gt;</strong> from <string>Stephen Canon</string> &lt;scanon at apple.com&gt;<p>July 11, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Jul 11, 2016, at 6:42 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jul 11, 2016, at 2:28 PM, Stephen Canon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Post SE-0067 FloatingPoint provides the usual global operators, as well as a single global function:<br>&gt;&gt; <br>&gt;&gt; 	func sqrt&lt;T: FloatingPoint&gt;(_: T) -&gt; T<br>&gt;&gt; <br>&gt;&gt; It seems out of place and lonely, and it would be nice if we can keep the default members of the global namespace to a minimum.<br>&gt;&gt; <br>&gt;&gt; I’d like to suggest removing this global from FloatingPoint while keeping the existing global functions for concrete types in the Darwin.C module.  The square root operation would still be available for all FloatingPoint types as `.squareRoot()`.<br>&gt;&gt; <br>&gt;&gt; I would also plan to provide this and other math.h-ish globals in a future (post swift 3) Math module.<br>&gt; <br>&gt; I’m very concerned with this.  Why not do exactly the opposite?  Remove the concrete operations from Darwin.C and replace it with a single generic one?<br>&gt; <br>&gt; The rationale for using global functions here is that they are “terms of art” in numerics nomenclature.  If they aren’t, then we should consistently eradicate all the global operations:<br>&gt; <br>&gt; 	assert(Double.pi.sine == 0.0)<br>&gt; <br>&gt; Is this the direction you want to go?<br></p><p>No, definitely not.<br></p><p>I’m fine with placing a generic implementation in Darwin.C.  I would include that as part of this change.  Post Swift 3, we should also have a Swift math module that provides the usual sqrt&lt;T: MathTypeOrWhatever&gt;(_: T) operations.<br></p><p>However, I’m not totally convinced we want every math operation we think of in the global namespace *by default*, and I’d like to avoid painting ourselves into a corner where sqrt( ) just sticks out like a sore thumb in the base stdlib for all time.<br></p><p>– Steve<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[pitch] remove global sqrt&lt;T: FloatingPoint&gt;</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July 11, 2016 at 03:00:00pm</p></header><div class="content"><p>On Jul 11, 2016, at 3:52 PM, Stephen Canon &lt;scanon at apple.com&gt; wrote:<br>&gt;&gt;&gt; I would also plan to provide this and other math.h-ish globals in a future (post swift 3) Math module.<br>&gt;&gt; <br>&gt;&gt; I’m very concerned with this.  Why not do exactly the opposite?  Remove the concrete operations from Darwin.C and replace it with a single generic one?<br>&gt;&gt; <br>&gt;&gt; The rationale for using global functions here is that they are “terms of art” in numerics nomenclature.  If they aren’t, then we should consistently eradicate all the global operations:<br>&gt;&gt; <br>&gt;&gt; 	assert(Double.pi.sine == 0.0)<br>&gt;&gt; <br>&gt;&gt; Is this the direction you want to go?<br>&gt; <br>&gt; No, definitely not.<br>&gt; <br>&gt; I’m fine with placing a generic implementation in Darwin.C.  I would include that as part of this change.  Post Swift 3, we should also have a Swift math module that provides the usual sqrt&lt;T: MathTypeOrWhatever&gt;(_: T) operations.<br>&gt; <br>&gt; However, I’m not totally convinced we want every math operation we think of in the global namespace *by default*, and I’d like to avoid painting ourselves into a corner where sqrt( ) just sticks out like a sore thumb in the base stdlib for all time.<br></p><p>I’m not sure what problem you’re trying to solve.  I think you agree that people should be able to write a generic function and use “sqrt(x)” where x is some FloatingPoint bound type, right?  If so, is it just the concern about it being injected into every program that imports (e.g.) Foundation?<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9b7c9b023237138ccb67df539f11b50?s=50"></div><header><strong>[pitch] remove global sqrt&lt;T: FloatingPoint&gt;</strong> from <string>Stephen Canon</string> &lt;scanon at apple.com&gt;<p>July 11, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On Jul 11, 2016, at 6:55 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; On Jul 11, 2016, at 3:52 PM, Stephen Canon &lt;scanon at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt; I would also plan to provide this and other math.h-ish globals in a future (post swift 3) Math module.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’m very concerned with this.  Why not do exactly the opposite?  Remove the concrete operations from Darwin.C and replace it with a single generic one?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The rationale for using global functions here is that they are “terms of art” in numerics nomenclature.  If they aren’t, then we should consistently eradicate all the global operations:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	assert(Double.pi.sine == 0.0)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is this the direction you want to go?<br>&gt;&gt; <br>&gt;&gt; No, definitely not.<br>&gt;&gt; <br>&gt;&gt; I’m fine with placing a generic implementation in Darwin.C.  I would include that as part of this change.  Post Swift 3, we should also have a Swift math module that provides the usual sqrt&lt;T: MathTypeOrWhatever&gt;(_: T) operations.<br>&gt;&gt; <br>&gt;&gt; However, I’m not totally convinced we want every math operation we think of in the global namespace *by default*, and I’d like to avoid painting ourselves into a corner where sqrt( ) just sticks out like a sore thumb in the base stdlib for all time.<br>&gt; <br>&gt; I’m not sure what problem you’re trying to solve.  I think you agree that people should be able to write a generic function and use “sqrt(x)” where x is some FloatingPoint bound type, right?  If so, is it just the concern about it being injected into every program that imports (e.g.) Foundation?<br></p><p>Right, this is only about the concern that it&#39;s injected into every program that doesn’t even import anything, under the assumption that folks may push back against doing that for *every* function in a future Math module.<br></p><p>This is a very minor issue, which would only change anything in the short term for most users, and which has already produced more discussion than I thought possible =)<br></p><p>– Steve<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[pitch] remove global sqrt&lt;T: FloatingPoint&gt;</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July 11, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Jul 11, 2016, at 4:00 PM, Stephen Canon &lt;scanon at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’m fine with placing a generic implementation in Darwin.C.  I would include that as part of this change.  Post Swift 3, we should also have a Swift math module that provides the usual sqrt&lt;T: MathTypeOrWhatever&gt;(_: T) operations.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; However, I’m not totally convinced we want every math operation we think of in the global namespace *by default*, and I’d like to avoid painting ourselves into a corner where sqrt( ) just sticks out like a sore thumb in the base stdlib for all time.<br>&gt;&gt; <br>&gt;&gt; I’m not sure what problem you’re trying to solve.  I think you agree that people should be able to write a generic function and use “sqrt(x)” where x is some FloatingPoint bound type, right?  If so, is it just the concern about it being injected into every program that imports (e.g.) Foundation?<br>&gt; <br>&gt; Right, this is only about the concern that it&#39;s injected into every program that doesn’t even import anything, under the assumption that folks may push back against doing that for *every* function in a future Math module.<br>&gt; <br>&gt; This is a very minor issue, which would only change anything in the short term for most users, and which has already produced more discussion than I thought possible =)<br></p><p>Ah, in that case, I agree that putting it into the overlay for Darwin.C (instead of in the stdlib) makes sense.<br></p><p>-Chris<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
