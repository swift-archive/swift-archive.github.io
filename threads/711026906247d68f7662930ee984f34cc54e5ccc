<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>mutating/non-mutating suggestion from a Rubyist</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>April 24, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; The idea of distinguishing all mutating/non-mutating functions with only the assignment operator did occur to me as I wrote that.<br>&gt; Using such a rule would allow automatic generation of mutating methods from non-mutating ones, since the naming would no longer need changing.<br>&gt; However, this would also mean scrapping half the Naming Guidelines, so I&#39;m hesitant to put that possibility forward as a serious proposal.<br>&gt; <br>&gt; I think union (verb) vs union (noun) would work as a one off, though, since it fits the guidelines as they currently stand. It would be a nice way to demonstrate that the compiler can make the distinction in a public API.<br>&gt; <br>&gt; &gt; From James F<br>&gt; On 24 Apr 2016, at 15:49, Tim Vermeulen&lt;tvermeulen at me.com&gt;wrote:<br>&gt; <br>&gt; &gt; &gt; The whole naming issue seems to be caused by the .union(_:) function. The Swift Guidelines say that mutating functions should use a verb, and non-mutating forms should use a noun, but in this case, the word union itself is a verb and a noun.<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; Have we considered this, then:<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; a.union(b) //mutating<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; _ = a.union(b) //non-mutating<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; There is no ambiguity in most situations, and the fact the Swift compiler can&#39;t disambiguate this at the moment is a bug I&#39;d like to see fixed in the Swift 3 timeframe. I think this wouldn&#39;t be such a bad compromise, and other functions could still use the standard -ed/-ing system alongside this without the API looking inconsistent, unlike with the form- prefix.<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; Admittedly, there is merit to the idea that functional methods should make non-mutating forms the primary form, but I feel like we should figure out what our stance is on this methodology in general. A mention in the Guidelines one way or the other would be nice, since the current rules seem to support this.<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; From James F<br>&gt; &gt; <br>&gt; &gt; Can’t we do this for every mutating method? i.e.<br>&gt; &gt; <br>&gt; &gt; var numbers = [1,3,2]<br>&gt; &gt; let sorted = numbers.sort()<br>&gt; &gt; // sorted is [1,2,3], numbers is [1,3,2]<br>&gt; &gt; numbers.sort()<br>&gt; &gt; // numbers is [1,2,3]<br>&gt; &gt; <br>&gt; &gt; I suppose this would require that the mutating version doesn’t return anything, and I don’t know if that’s ever a problem.<br>&gt; <br>&gt; <br>&gt; <br></p><p>Well, this change would render a big part of the naming guidelines meaningless, but isn’t that a good thing? Guidelines are often in place to prevent ambiguity, and this solution would do that without the need for guidelines.<br></p><p>Anyways, I wouldn’t be surprised if this idea has come up before and has been rejected, but to me it sounds like a good idea.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>mutating/non-mutating suggestion from a Rubyist</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>April 24, 2016 at 11:00:00am</p></header><div class="content"><p>On Sun, Apr 24, 2016 at 11:01 AM, Tim Vermeulen via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; &gt; The idea of distinguishing all mutating/non-mutating functions with only<br>&gt; the assignment operator did occur to me as I wrote that.<br>&gt; &gt; Using such a rule would allow automatic generation of mutating methods<br>&gt; from non-mutating ones, since the naming would no longer need changing.<br>&gt; &gt; However, this would also mean scrapping half the Naming Guidelines, so<br>&gt; I&#39;m hesitant to put that possibility forward as a serious proposal.<br>&gt; &gt;<br>&gt; &gt; I think union (verb) vs union (noun) would work as a one off, though,<br>&gt; since it fits the guidelines as they currently stand. It would be a nice<br>&gt; way to demonstrate that the compiler can make the distinction in a public<br>&gt; API.<br>&gt; &gt;<br>&gt; &gt; &gt; From James F<br>&gt; &gt; On 24 Apr 2016, at 15:49, Tim Vermeulen&lt;tvermeulen at me.com&gt;wrote:<br>&gt; &gt;<br>&gt; &gt; &gt; &gt; The whole naming issue seems to be caused by the .union(_:)<br>&gt; function. The Swift Guidelines say that mutating functions should use a<br>&gt; verb, and non-mutating forms should use a noun, but in this case, the word<br>&gt; union itself is a verb and a noun.<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; Have we considered this, then:<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; a.union(b) //mutating<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; _ = a.union(b) //non-mutating<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; There is no ambiguity in most situations, and the fact the Swift<br>&gt; compiler can&#39;t disambiguate this at the moment is a bug I&#39;d like to see<br>&gt; fixed in the Swift 3 timeframe. I think this wouldn&#39;t be such a bad<br>&gt; compromise, and other functions could still use the standard -ed/-ing<br>&gt; system alongside this without the API looking inconsistent, unlike with the<br>&gt; form- prefix.<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; Admittedly, there is merit to the idea that functional methods<br>&gt; should make non-mutating forms the primary form, but I feel like we should<br>&gt; figure out what our stance is on this methodology in general. A mention in<br>&gt; the Guidelines one way or the other would be nice, since the current rules<br>&gt; seem to support this.<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; &gt; From James F<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; Can’t we do this for every mutating method? i.e.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; var numbers = [1,3,2]<br>&gt; &gt; &gt; let sorted = numbers.sort()<br>&gt; &gt; &gt; // sorted is [1,2,3], numbers is [1,3,2]<br>&gt; &gt; &gt; numbers.sort()<br>&gt; &gt; &gt; // numbers is [1,2,3]<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; I suppose this would require that the mutating version doesn’t return<br>&gt; anything, and I don’t know if that’s ever a problem.<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt;<br>&gt; Well, this change would render a big part of the naming guidelines<br>&gt; meaningless, but isn’t that a good thing? Guidelines are often in place to<br>&gt; prevent ambiguity, and this solution would do that without the need for<br>&gt; guidelines.<br>&gt;<br>&gt; Anyways, I wouldn’t be surprised if this idea has come up before and has<br>&gt; been rejected, but to me it sounds like a good idea.<br>&gt;<br></p><p>Yes, I suggested this a while back, and it was rejected.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160424/f6b3e5ad/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
