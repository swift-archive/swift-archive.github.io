<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0098: Lowercase didSet and willSet for more consistent keyword casing</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May 24, 2016 at 11:00:00am</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;SE-0098: Lowercase didSet and willSet for more consistent keyword casing&quot; begins now and runs through May 30. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0098-didset-capitalization.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0098: Lowercase didSet and willSet for more consistent keyword casing</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May 24, 2016 at 11:00:00am</p></header><div class="content"><p>didSet and willSet are already contextual rather than formal keywords, and there&#39;s a conceivable future where didSet and willSet are no longer keywords at all if we run with the &quot;property behaviors&quot; feature again in the future. If we think that&#39;s likely, I&#39;m not sure this intermediate churn is really worth it.<br></p><p>-Joe<br></p><p>&gt; On May 24, 2016, at 11:07 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0098: Lowercase didSet and willSet for more consistent keyword casing&quot; begins now and runs through May 30. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0098-didset-capitalization.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0098: Lowercase didSet and willSet for more consistent keyword casing</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>May 24, 2016 at 11:00:00am</p></header><div class="content"><p>+1.<br></p><p>If Swift is going to state that keywords need to be lowercased, conjoined words, then there should be no exceptions to that rule without some fairly significant gain. <br></p><p>Itâ€™s also a fairly low-impact change for any fixit to be run.<br></p><p>-David<br></p><p><br>&gt; On May 24, 2016, at 11:21 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; didSet and willSet are already contextual rather than formal keywords, and there&#39;s a conceivable future where didSet and willSet are no longer keywords at all if we run with the &quot;property behaviors&quot; feature again in the future. If we think that&#39;s likely, I&#39;m not sure this intermediate churn is really worth it.<br>&gt; <br>&gt; -Joe<br>&gt; <br>&gt;&gt; On May 24, 2016, at 11:07 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0098: Lowercase didSet and willSet for more consistent keyword casing&quot; begins now and runs through May 30. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0098-didset-capitalization.md<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution-announce mailing list<br>&gt;&gt; swift-evolution-announce at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0098: Lowercase didSet and willSet for more consistent keyword casing</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 24, 2016 at 01:00:00pm</p></header><div class="content"><p>Sent from my iPad<br></p><p>&gt; On May 24, 2016, at 1:21 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; didSet and willSet are already contextual rather than formal keywords, and there&#39;s a conceivable future where didSet and willSet are no longer keywords at all if we run with the &quot;property behaviors&quot; feature again in the future. If we think that&#39;s likely, I&#39;m not sure this intermediate churn is really worth it.<br></p><p>+1.  If we may introduce property behaviors (I hope we do) the naming of &#39;didSet&#39; and &#39;willSet&#39; should match the convention for accessors.  As those are user-defined and it is not unreasonable to imaging accessorswithseveralwords in their name, I believe e appropriate convention would be lower camel case.  As this is the status quo, I believe it is preliminary to make a change.<br></p><p>If a time comes where we either decide against property behaviors and that these should match the all lowercase convention of keywords, or decide to introduce property behaviors with a convention that accessors should be all lowercase migration could easily provided.<br></p><p>&gt; <br>&gt; -Joe<br>&gt; <br>&gt;&gt; On May 24, 2016, at 11:07 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0098: Lowercase didSet and willSet for more consistent keyword casing&quot; begins now and runs through May 30. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt;    https://github.com/apple/swift-evolution/blob/master/proposals/0098-didset-capitalization.md<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt;    https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt;    * What is your evaluation of the proposal?<br>&gt;&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;    * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;    * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt;    https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution-announce mailing list<br>&gt;&gt; swift-evolution-announce at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0098: Lowercase didSet and willSet for more consistent keyword casing</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>May 24, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On May 24, 2016, at 11:21 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; didSet and willSet are already contextual rather than formal keywords, and there&#39;s a conceivable future where didSet and willSet are no longer keywords at all if we run with the &quot;property behaviors&quot; feature again in the future. If we think that&#39;s likely, I&#39;m not sure this intermediate churn is really worth it.<br></p><p>I agree.<br></p><p>The general principle here is that the language should always promote consistent conventions in the &quot;same place&quot;.  So e.g. if we wanted to add intrinsic operations to the language that are spelled exactly like function calls â€” imagine &quot;dynamicType(x)&quot; if that couldn&#39;t just be a library function â€” then we would use camelCase for those keywords because they fill the same space as a user-defined function call.  If we somehow find a way to allow user-provided declaration introducers, we would expect those to be lowercased for consistency with the language-provided ones.  And so on.<br></p><p>Since it&#39;s reasonable to anticipate that we will someday allow user-defined storage behaviors, and we expect it to be most sensible to name those accessors using camelCase conventions, we should use those conventions even for things that are currently built-in to the language.<br></p><p>This also avoids creating weird situations in five years where certain things are spelled inconsistently because they used to be builtins and no longer are (which may even apply to willSet / didSet).<br></p><p>John.<br></p><p>&gt; <br>&gt; -Joe<br>&gt; <br>&gt;&gt; On May 24, 2016, at 11:07 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0098: Lowercase didSet and willSet for more consistent keyword casing&quot; begins now and runs through May 30. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0098-didset-capitalization.md<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution-announce mailing list<br>&gt;&gt; swift-evolution-announce at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0098: Lowercase didSet and willSet for more consistent keyword casing</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>May 25, 2016 at 06:00:00am</p></header><div class="content"><p>I totally agree with the arguments brought forth by John and Joe.<br></p><p>Therefore -1 to the proposal<br></p><p>-Thorsten <br></p><p>Am 24.05.2016 um 20:39 schrieb John McCall via swift-evolution &lt;swift-evolution at swift.org&gt;:<br></p><p>&gt;&gt; On May 24, 2016, at 11:21 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; didSet and willSet are already contextual rather than formal keywords, and there&#39;s a conceivable future where didSet and willSet are no longer keywords at all if we run with the &quot;property behaviors&quot; feature again in the future. If we think that&#39;s likely, I&#39;m not sure this intermediate churn is really worth it.<br>&gt; <br>&gt; I agree.<br>&gt; <br>&gt; The general principle here is that the language should always promote consistent conventions in the &quot;same place&quot;.  So e.g. if we wanted to add intrinsic operations to the language that are spelled exactly like function calls â€” imagine &quot;dynamicType(x)&quot; if that couldn&#39;t just be a library function â€” then we would use camelCase for those keywords because they fill the same space as a user-defined function call.  If we somehow find a way to allow user-provided declaration introducers, we would expect those to be lowercased for consistency with the language-provided ones.  And so on.<br>&gt; <br>&gt; Since it&#39;s reasonable to anticipate that we will someday allow user-defined storage behaviors, and we expect it to be most sensible to name those accessors using camelCase conventions, we should use those conventions even for things that are currently built-in to the language.<br>&gt; <br>&gt; This also avoids creating weird situations in five years where certain things are spelled inconsistently because they used to be builtins and no longer are (which may even apply to willSet / didSet).<br>&gt; <br>&gt; John.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt;&gt; <br>&gt;&gt;&gt; On May 24, 2016, at 11:07 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The review of &quot;SE-0098: Lowercase didSet and willSet for more consistent keyword casing&quot; begins now and runs through May 30. The proposal is available here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    https://github.com/apple/swift-evolution/blob/master/proposals/0098-didset-capitalization.md<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    * What is your evaluation of the proposal?<br>&gt;&gt;&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt;    * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt;    * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Chris Lattner<br>&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution-announce mailing list<br>&gt;&gt;&gt; swift-evolution-announce at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0098: Lowercase didSet and willSet for more consistent keyword casing</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>May 25, 2016 at 01:00:00pm</p></header><div class="content"><p>-1<br>&gt; I&#39;m not sure this intermediate churn is really worth it.<br>That has been my opinion in the original thread, and I haven&#39;t read anything that changed my mind:<br>Better live with a tiny inconsistency now than deal with three different forms of didSet/willSet in the future.<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b1fc4ed1ed8e138ef0a87fd3e91c83a4?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0098: Lowercase didSet and willSet for more consistent keyword casing</strong> from <string>Ricardo Parada</string> &lt;rparada at mac.com&gt;<p>May 24, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On May 24, 2016, at 2:07 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0098: Lowercase didSet and willSet for more consistent keyword casing&quot; begins now and runs through May 30. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0098-didset-capitalization.md<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>-1.<br></p><p>I strongly believe that these should NOT be renamed to lowercase conjoined.  I anticipate these will become accessors when property behaviors are implemented in the future.  Accessors are defined by the implementor of the property behavior and they feel like calling a method or function.  They should be subject to lowerCamelCase, just like instance methods and properties.<br></p><p>In addition, lowercase conjoined does not look that good when you start having more than two words conjoined.  On the other hand lowerCameCase is richer and I find it easier to read.<br></p><p><br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>This change is not necessary.  I donâ€™t at these as keywords specially knowing that accessors and property behaviors will be arriving in the future.<br></p><p><br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>No.  I think whatâ€™s wrong with this proposal is that is based on the assumption that willSet, didSet are keywords.  <br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>In java for example, in an object-to-relational mapping framework, there are method hooks such as willRead() that are methods that get called when accessing properties of the object and makes sure the data is fetched from the database.  In this case, willRead() is just a method in the object.  I look at the willSet and didSet as playing similar roles.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Iâ€™ve been following the discussions prior to the proposal and Iâ€™m now reading the responses to the proposal.<br></p><p>Thanks<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>[Review] SE-0098: Lowercase didSet and willSet for more consistent keyword casing</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>May 24, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On May 24, 2016, at 11:07 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0098: Lowercase didSet and willSet for more consistent keyword casing&quot; begins now and runs through May 30. The proposal is available here:<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/proposals/0098-didset-capitalization.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt;    https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt;    * What is your evaluation of the proposal?<br></p><p>-1 bc it doesn&#39;t address the fact that property behaviors will have their own naming convention separate from keyboard naming in order to address 2+ word properly names; not to mention syntax changes that will be part of the name signature. <br>&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>No<br></p><p>&gt;    * Does this proposal fit well with the feel and direction of Swift?<br></p><p>No<br></p><p>&gt;    * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>n/a<br></p><p>&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick study. <br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7559ac465b184ec777f29d37c0e4b374?s=50"></div><header><strong>[Review] SE-0098: Lowercase didSet and willSet for more consistent keyword casing</strong> from <string>Michael Peternell</string> &lt;michael.peternell at gmx.at&gt;<p>May 24, 2016 at 10:00:00pm</p></header><div class="content"><p>(comments inline)<br>&gt; Am 24.05.2016 um 20:07 schrieb Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0098: Lowercase didSet and willSet for more consistent keyword casing&quot; begins now and runs through May 30. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0098-didset-capitalization.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>-1 . I don&#39;t like this. I don&#39;t find the consistency arguments convincing. Consistency has to be defined in terms of observable behavior of the language; If a word is a &quot;keyword&quot; or not is an implementation detail of the compiler IMHO(!), so there should be no rule regarding case-ness of keywords.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>No, I&#39;d rather see progress on static/dynamic dispatch rules of protocol extensions, for example. Changing the case-ness of just two random language keywords doesn&#39;t have any influence on the ABI or the API or the semantics of the language.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Don&#39;t think so.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>ObjC has -willSetValueForKey: and -didSetValueForKey: . It&#39;s not the same, because willSet and didSet are not related to KVO. But using the same camelCase syntax for didSet and willSet feels more consistent to me. At least, the semantic distance between didSet and -didSetValueForKey: is less than the semantic distance between didSet and associatedtype. (I compare them because associatedtype is also a keyword, and it&#39;s all lowercase.)<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Read the proposal, participated in the discussion.<br></p><p>-Michael<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0098: Lowercase didSet and willSet for more consistent keyword casing</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>May 24, 2016 at 07:00:00pm</p></header><div class="content"><p>On Tue, May 24, 2016, at 11:07 AM, Chris Lattner wrote:<br>&gt; 	* What is your evaluation of the proposal?<br></p><p>-1. The only real rationale here is &quot;other keywords that are compound words are all lowercase instead of camelCase&quot; (except for dynamicType). But that&#39;s not a very compelling argument. More generally, I think `willSet` and `didSet` just looks better, and I think this may be because they are different types of phrases entirely than associatedtype, typealias, and fallthrough (they&#39;re certainly classified differently grammatically; willSet and didSet are verb pharses, associatedtype is an adjective phrase, typealias is a noun modifier [which is like an adjective phrase], and fallthrough is a compound word with precedent in other languages). They&#39;re also companions to the `set` declaration. Since `set` is a distinct concept in its own right, `willSet` and `didSet` highlight the fact that they&#39;re modifiers on the word `set`. In fact, if we had a distinct `type` declaration, then I think I&#39;d want to change `associatedtype` into `associatedType`. The camel casing makes it more obvious that this is a variant on the root word, whereas all-lowercase implies that the entire conjoined phrase is a single standalone concept.<br></p><p>Also, as others have already pointed out, willSet and didSet will hopefully end up as property behaviors rather than language keywords, and in that case the stated rationale doesn&#39;t apply.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>No. The rationale for this can largely be summed up as aesthetic preference and it&#39;s pretty subjective.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Does bikeshedding syntax count as fitting with the feel and direction of Swift? ;)<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I&#39;m having trouble thinking of a relevant language that uses phrases for keywords. I believe all of the keywords in Rust are single words. Haskell actually uses phrases rather than conjoined keywords, e.g. `data instance`, `type family`, etc. Obj-C/C generally uses snake_case.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>A quick reading of the proposal and a reading of the review thread to date.<br></p><p>-Kevin Ballard<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c74c15ba14b1096d4e42900ddd2dacd0?s=50"></div><header><strong>[Review] SE-0098: Lowercase didSet and willSet for more consistent keyword casing</strong> from <string>Patrick Smith</string> &lt;pgwsmith at gmail.com&gt;<p>May 25, 2016 at 02:00:00pm</p></header><div class="content"><p>I agree with Joe, so -1 from me.<br></p><p>Thereâ€™s no hurry to pin down rules for a feature which hasnâ€™t been fully developed. Staying with the existing naming will reduce confusion. And I think camelCase will be the best fit for property behaviours, so this is an unnecessary move.<br></p><p><br>&gt; On 25 May 2016, at 4:07 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0098: Lowercase didSet and willSet for more consistent keyword casing&quot; begins now and runs through May 30. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0098-didset-capitalization.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0098: Lowercase didSet and willSet for more consistent keyword casing</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>May 25, 2016 at 02:00:00am</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>If we are absolutely, 100% sure that we are going to use lowercase naming for other accessors, including user-defined ones for property behaviors, then I see no reason not to do this now. If we are less than, say, 95% sure, I don&#39;t think we should do this yet. Changing from `willSet` to `willset` in Swift 3.2 or Swift 4 has a much smaller cost than changing to `willset` in Swift 3 and then back to `willSet` in a future version; jerking users around like that is likely to upset them.<br></p><p>And I don&#39;t think we should be 95% sure that all future accessors will be all-lowercase, because I think making them all-lowercase would be a *very* dubious decision, for several reasons:<br></p><p>1) `willset` and `didset` are less readable than `willSet` and `didSet`.<br></p><p>2) It is likely that many user-defined accessors will be impacted even more severely by all-lowercasing than `willset` and `didset`. Try to parse out names like `willlock` or `xmlid` or `enqueueforreading`, compared to the mixed-case `willLock`, `xmlID`, and `enqueueForReading`, and you&#39;ll see what I mean.<br></p><p>3) User-defined accessors will not only be defined; they will also be called. And these calls will look very strange indeed, given their keyword-like capitalization.<br></p><p>4) Keywords are all-lowercase because they are so familiar, and so intrinsic to the language&#39;s grammar, that an experienced Swift developer does not really read them so much as recognize them. But `willSet` and `didSet` *do* need to be read, because they are very similar keywords (one-character length difference) which both appear in the same context. And user-defined accessors will need to be read even more, because their names will be arbitrary and quite possibly used infrequently. The requirements of an accessor name are simply different from a declaration like `associatedtype`.<br></p><p>5) Keywords are *also* all-lowercase because they are rare multi-word examples of a class of names which are typically short and single-word. For instance, `associatedtype` and `typealias` belong to a class of declaration keywords which include `let`, `var`, `func`, `subscript`, `init`, `deinit`, `class`, `struct`, `enum`, `protocol`, and `extension`, all single-word keywords. `fallthrough` belongs to the same class as `break`, `continue`, `return`, `throw`, and `try`, as well as arguably `if`, `else`, `guard`, `switch`, `case`, `where`, `while`, `repeat`, `for`, `do`, and `catch`, again all single-word keywords. By contrast, I doubt that very many accessors will be single-word; currently we have two single-word ones and two multi-word ones, and most examples of user-defined accessors I&#39;ve seen have been multi-word.<br></p><p>Because I think we should probably not adopt all-lowercase user-defined accessor names, and because I think it is *much* better to make this change later than to make it now and undo it later, I think we probably should defer this proposal until the property behavior design has solidified.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes, but *only* if we are certain that this is the direction we want accessors to takeâ€”and I don&#39;t think we should be that certain.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Maybe. It depends on the design of future features.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>N/A.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Participated in previous discussions.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
