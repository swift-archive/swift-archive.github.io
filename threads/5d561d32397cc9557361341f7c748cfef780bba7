<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Pre-proposal] Fix function type grammar</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>July  3, 2016 at 02:00:00pm</p></header><div class="content"><p>You can view proposed function type grammar here:<br>https://gist.github.com/Anton3/9992aa565ff9d230dd4655b1b74a3326<br></p><p>Notion of tuple was removed; instead, parentheses are now merely part of <br>function type grammar.<br></p><p>An important implication is that types () -&gt; T  and  ( () ) -&gt; T become <br>completely different: the first accepts no parameters, and the second <br>accepts a single parameter of type ().<br></p><p>===copy of gist begins===<br>function-type → ( function-type-parameters opt ) throws-annotation opt -&gt; <br>type<br></p><p>function-type-parameters → function-type-parameter , function-type-<br>parameters<br></p><p>function-type-parameters → function-type-parameter ...opt<br></p><p>function-type-parameter → attributes opt inout opt type<br></p><p>throws-annotation → throws | rethrows<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Pre-proposal] Fix function type grammar</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July  3, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Jul 3, 2016, at 7:28 AM, Anton Zhilin via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; You can view proposed function type grammar here:<br>&gt; https://gist.github.com/Anton3/9992aa565ff9d230dd4655b1b74a3326<br></p><p>Hi Anton,<br></p><p>This looks correct, but what is the proposal “for”?  This seems like it is just encoding what SE-0066 was about.<br></p><p>-Chris<br></p><p>&gt; <br>&gt; Notion of tuple was removed; instead, parentheses are now merely part of <br>&gt; function type grammar.<br>&gt; <br>&gt; An important implication is that types () -&gt; T  and  ( () ) -&gt; T become <br>&gt; completely different: the first accepts no parameters, and the second <br>&gt; accepts a single parameter of type ().<br>&gt; <br>&gt; ===copy of gist begins===<br>&gt; function-type → ( function-type-parameters opt ) throws-annotation opt -&gt; <br>&gt; type<br>&gt; <br>&gt; function-type-parameters → function-type-parameter , function-type-<br>&gt; parameters<br>&gt; <br>&gt; function-type-parameters → function-type-parameter ...opt<br>&gt; <br>&gt; function-type-parameter → attributes opt inout opt type<br>&gt; <br>&gt; throws-annotation → throws | rethrows<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
