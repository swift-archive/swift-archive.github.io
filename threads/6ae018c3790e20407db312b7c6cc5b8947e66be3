<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Can&#39;t extend a generic type with a non-protocol constraint?</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>April 14, 2016 at 01:00:00pm</p></header><div class="content"><p>It appears that you can’t extend a generic class/struct with a requirement that a type parameter inherit from a non-protocol:<br>	extension Dictionary where Key : String { … }<br>The above produces the error “Type ‘Key’ constrained to non-protocol type ‘String’”.<br></p><p>So is there a way I can add a method to a class, where the method depends on one of the type parameters being a specific type? For example, let’s say I want a “concatenatedKeys” method that returns all the Dictionary’s keys concatenated into a string with commas between them.<br></p><p>(The actual reason I’m doing this is more complicated, but it has to do with JSON encoding — JSON dictionary keys have to be strings, so I want to be type-safe and make my encoding methods available only for Dictionary&lt;String, ___&gt;.)<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160414/6ae06be3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Can&#39;t extend a generic type with a non-protocol constraint?</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>April 14, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; It appears that you can’t extend a generic class/struct with a requirement that a type parameter inherit from a non-protocol:<br>&gt; 	extension Dictionary where Key : String { … }<br>&gt; The above produces the error “Type ‘Key’ constrained to non-protocol type ‘String’”.<br></p><p>You can&#39;t do `Key: String` because `String`, as a struct, cannot have any subtypes. `Key: NSString`, for instance, works.<br></p><p>What you really want to do is say `Key == String`, but this isn&#39;t supported right now. (My understanding is that this is basically just an implementation shortcut they took.)<br></p><p>One workaround is to define your own protocol and constrain to that:<br></p><p>	protocol _StringType: Hashable {<br>		// Include the String APIs you need to use here.<br>	}<br>	extension String: _StringType {}<br>	extension Dictionary where Key: _StringType { … }<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Can&#39;t extend a generic type with a non-protocol constraint?</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>April 14, 2016 at 04:00:00pm</p></header><div class="content"><p>You know… if protocols could define which types can implement them, that could be made to be the same thing:<br>    protocol _String {…} `syntax which restricts instances of _String to be a` String<br>    extension Dictionary where Key: _String {…} //Same as &quot;where Key == String”, because that’s the only type allowed to implement _String<br></p><p>Is that worth writing proposal over? Or is just saying this:<br>    protocol _String { func asString() -&gt; String }<br>    extension String : _String { func asString -&gt; String { return self } }<br>close enough?<br></p><p>- Dave Sweeris<br></p><p>&gt; On Apr 14, 2016, at 4:31 PM, Brent Royal-Gordon via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; It appears that you can’t extend a generic class/struct with a requirement that a type parameter inherit from a non-protocol:<br>&gt;&gt; 	extension Dictionary where Key : String { … }<br>&gt;&gt; The above produces the error “Type ‘Key’ constrained to non-protocol type ‘String’”.<br>&gt; <br>&gt; You can&#39;t do `Key: String` because `String`, as a struct, cannot have any subtypes. `Key: NSString`, for instance, works.<br>&gt; <br>&gt; What you really want to do is say `Key == String`, but this isn&#39;t supported right now. (My understanding is that this is basically just an implementation shortcut they took.)<br>&gt; <br>&gt; One workaround is to define your own protocol and constrain to that:<br>&gt; <br>&gt; 	protocol _StringType: Hashable {<br>&gt; 		// Include the String APIs you need to use here.<br>&gt; 	}<br>&gt; 	extension String: _StringType {}<br>&gt; 	extension Dictionary where Key: _StringType { … }<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/424a3f4fec228fa9e2ad948ca70f1791?s=50"></div><header><strong>Can&#39;t extend a generic type with a non-protocol constraint?</strong> from <string>davelist at mac.com</string> &lt;davelist at mac.com&gt;<p>April 18, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Apr 14, 2016, at 4:58 PM, Jens Alfke via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; It appears that you can’t extend a generic class/struct with a requirement that a type parameter inherit from a non-protocol:<br>&gt; 	extension Dictionary where Key : String { … }<br>&gt; The above produces the error “Type ‘Key’ constrained to non-protocol type ‘String’”.<br>&gt; <br>&gt; So is there a way I can add a method to a class, where the method depends on one of the type parameters being a specific type? For example, let’s say I want a “concatenatedKeys” method that returns all the Dictionary’s keys concatenated into a string with commas between them.<br>&gt; <br>&gt; (The actual reason I’m doing this is more complicated, but it has to do with JSON encoding — JSON dictionary keys have to be strings, so I want to be type-safe and make my encoding methods available only for Dictionary&lt;String, ___&gt;.)<br>&gt; <br>&gt; —Jens<br></p><p>I thought I replied last week but I don’t see it.<br></p><p>It looks like you can make it work using StringLiteralConvertible. Based on this:<br></p><p>http://stackoverflow.com/questions/32610150/extension-of-dictionary-where-string-anyobject<br></p><p>This works:<br></p><p>extension Dictionary where Key: StringLiteralConvertible, Value: Any {<br>    func testMethod() -&gt; String {<br>        return &quot;test&quot;<br>    }<br>}<br></p><p>var d: [String: Int] = [:]<br>d[&quot;abc&quot;] = 1<br>print(d.testMethod())<br></p><p>HTH,<br>Dave Reed<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
