<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>ed/ing, InPlace, Set/SetAlgebra naming resolution</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 11, 2016 at 05:00:00pm</p></header><div class="content"><p>on Thu Feb 11 2016, Xiaodi Wu &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Darn. Would have been nice. Thanks for explaining why though. Can I<br>&gt; try your patience with another naive question?<br>&gt;<br>&gt; Unless the functions also return an error, mutating/non-mutating pairs<br>&gt; of functions return Void/Self (or maybe Optional&lt;Self&gt;) respectively.<br>&gt; Are there other possibilities? But Swift is pretty unique among<br>&gt; C-family languages in allowing overloaded functions that differ only<br>&gt; by return type. Besides the loss of clarity to the reader at the call<br>&gt; site, what are downsides of simply naming both functions exactly the<br>&gt; same in today&#39;s Swift syntax?<br></p><p>I don&#39;t think it&#39;s really worth exploring much further once you<br>acknowledge the loss of clarity to the reader at the call site ;-)<br></p><p>&gt;<br>&gt;<br>&gt; ```<br>&gt; let foo: Foo<br>&gt; // suppose I can call a mutating or non-mutating foo.frobnicate()<br>&gt;<br>&gt; let bar = foo.frobnicate() // surely, I must mean the non-mutating form<br>&gt;<br>&gt; foo.frobnicate() // I must want to mutate `foo` unless I want only<br>&gt; side effects and an unused result<br>&gt; foo.frobnicate() as Foo // if so, I could always do this<br>&gt; ```<br>&gt;<br>&gt; On Thu, Feb 11, 2016 at 5:57 PM, Greg Parker &lt;gparker at apple.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; On Feb 11, 2016, at 3:54 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; This is an interesting bit of historical perspective. Dave--may I ask<br>&gt;&gt;&gt; a naive question?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The proposal as shown is extensive. Would it be within reach/easier to<br>&gt;&gt;&gt; pitch/feasible to implement a narrower set of changes to facilitate<br>&gt;&gt;&gt; naming convention only? Namely: alter Swift syntax to allow function<br>&gt;&gt;&gt; names to begin with &quot;=&quot; and adopt naming conventions that<br>&gt;&gt;&gt; mutating/non-mutating pairs of functions are named<br>&gt;&gt;&gt; =frobnicate()/frobnicate()? That would, it seems, go a long way.<br>&gt;&gt;<br>&gt;&gt; That would not be a small change. The strict separation between<br>&gt;&gt; operator characters and non-operator characters is deeply embedded<br>&gt;&gt; into Swift&#39;s grammar and compiler.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Greg Parker     gparker at apple.com     Runtime Wrangler<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
