<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14477c366d6ee4e41adf14837bc4f2f9?s=50"></div><header><strong>Generic protocol conformance bug</strong> from <string>Ryan Lovelett</string> &lt;swift-dev at ryan.lovelett.me&gt;<p>May 23, 2016 at 12:00:00pm</p></header><div class="content"><p>I think I&#39;ve discovered a few bugs/inconsistencies with generic protocol<br>conformance. I&#39;m mostly concerned with if these have been seen/reported<br>before. I&#39;m pretty sure they are all bugs but I could be wrong (I&#39;ve<br>been wrong before, it _will_ happen again ðŸ˜€).<br></p><p>All of the (possible?) bugs can be seen in this Gist [1]. I&#39;ll provide<br>some commentary on what I think is the bug/inconsistency.<br></p><p>`example_1.swift`: I expected this not to compile. The `Optional`<br>extension does not conform to the protocol. It returns a `String` when I<br>would have expected the returned type to be _required_ to have been<br>`Wrapped` (e.g., `Int`).<br></p><p>`example_2.swift`: I expected this also not compile. The function<br>signature is wrong. The protocol requires a function `bar(qux:)` but<br>allows the signature `bar(q:)` to conform.<br></p><p>`example_3.swift`: This one is probably the only &quot;correct&quot; one. This one<br>fails to compile with the error I would have expected from<br>`example_2.swift`.<br></p><p>All of this is from the &quot;Trunk Development (master)&quot; dated May 9th<br>currently available on Swift.org [2].<br></p><p># example_1.swift<br></p><p>public protocol Foo {<br>  associatedtype Bar = Self<br>  func bar(qux: String) -&gt; Bar<br>}<br></p><p>extension Int: Foo {<br>  public func bar(qux: String) -&gt; Int {<br>    return self<br>  }<br>}<br></p><p>extension Optional where Wrapped: Foo, Wrapped == Wrapped.Bar {<br>  public func bar(qux: String) -&gt; String {<br>    return #function<br>  }<br>}<br></p><p>let result = 3.bar(qux: &quot;metasyntactic&quot;)<br>print(result) // 3<br></p><p>let optional = Optional.some(3).bar(qux: &quot;metasyntactic&quot;)<br>print(optional) // bar(qux:)<br></p><p># example_2.swift<br></p><p>public protocol Foo {<br>  associatedtype Bar = Self<br>  func bar(qux: String) -&gt; Bar<br>}<br></p><p>extension Int: Foo {<br>  public func bar(qux: String) -&gt; Int {<br>    return self<br>  }<br>}<br></p><p>extension Optional where Wrapped: Foo, Wrapped == Wrapped.Bar {<br>  public func bar(q: String) -&gt; Wrapped? {<br>    return self<br>  }<br>}<br></p><p>let result = 3.bar(qux: &quot;metasyntactic&quot;)<br>print(result) // 3<br></p><p>let optional = Optional.some(3).bar(q: &quot;metasyntactic&quot;)<br>print(optional) // Optional(3)<br></p><p># example_3.swift<br></p><p>public protocol Foo {<br>  associatedtype Bar = Self<br>  func bar(qux: String) -&gt; Bar<br>}<br></p><p>extension Int: Foo {<br>  public func bar(q: String) -&gt; Int {<br>    return self<br>  }<br>}<br></p><p>extension Optional where Wrapped: Foo, Wrapped == Wrapped.Bar {<br>  public func bar(q: String) -&gt; Wrapped? {<br>    return self<br>  }<br>}<br></p><p>let result = 3.bar(q: &quot;metasyntactic&quot;)<br>print(result)<br></p><p>let optional = Optional.some(3).bar(q: &quot;metasyntactic&quot;)<br>print(optional)<br></p><p>[1] https://gist.github.com/RLovelett/8b7c5eb8976554ca359707445a9c86f0<br>[2] https://swift.org/download/#snapshots<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14477c366d6ee4e41adf14837bc4f2f9?s=50"></div><header><strong>Generic protocol conformance bug</strong> from <string>Ryan Lovelett</string> &lt;swift-dev at ryan.lovelett.me&gt;<p>May 23, 2016 at 12:00:00pm</p></header><div class="content"><p>Ugh. Can you un-send an email. I was wrong. See it happened AGAIN. ðŸ˜‚<br></p><p>On Mon, May 23, 2016, at 12:16 PM, Ryan Lovelett via swift-dev wrote:<br>&gt; I think I&#39;ve discovered a few bugs/inconsistencies with generic protocol<br>&gt; conformance. I&#39;m mostly concerned with if these have been seen/reported<br>&gt; before. I&#39;m pretty sure they are all bugs but I could be wrong (I&#39;ve<br>&gt; been wrong before, it _will_ happen again ðŸ˜€).<br>&gt; <br>&gt; All of the (possible?) bugs can be seen in this Gist [1]. I&#39;ll provide<br>&gt; some commentary on what I think is the bug/inconsistency.<br>&gt; <br>&gt; `example_1.swift`: I expected this not to compile. The `Optional`<br>&gt; extension does not conform to the protocol. It returns a `String` when I<br>&gt; would have expected the returned type to be _required_ to have been<br>&gt; `Wrapped` (e.g., `Int`).<br>&gt; <br>&gt; `example_2.swift`: I expected this also not compile. The function<br>&gt; signature is wrong. The protocol requires a function `bar(qux:)` but<br>&gt; allows the signature `bar(q:)` to conform.<br>&gt; <br>&gt; `example_3.swift`: This one is probably the only &quot;correct&quot; one. This one<br>&gt; fails to compile with the error I would have expected from<br>&gt; `example_2.swift`.<br>&gt; <br>&gt; All of this is from the &quot;Trunk Development (master)&quot; dated May 9th<br>&gt; currently available on Swift.org [2].<br>&gt; <br>&gt; # example_1.swift<br>&gt; <br>&gt; public protocol Foo {<br>&gt;   associatedtype Bar = Self<br>&gt;   func bar(qux: String) -&gt; Bar<br>&gt; }<br>&gt; <br>&gt; extension Int: Foo {<br>&gt;   public func bar(qux: String) -&gt; Int {<br>&gt;     return self<br>&gt;   }<br>&gt; }<br>&gt; <br>&gt; extension Optional where Wrapped: Foo, Wrapped == Wrapped.Bar {<br>&gt;   public func bar(qux: String) -&gt; String {<br>&gt;     return #function<br>&gt;   }<br>&gt; }<br>&gt; <br>&gt; let result = 3.bar(qux: &quot;metasyntactic&quot;)<br>&gt; print(result) // 3<br>&gt; <br>&gt; let optional = Optional.some(3).bar(qux: &quot;metasyntactic&quot;)<br>&gt; print(optional) // bar(qux:)<br>&gt; <br>&gt; # example_2.swift<br>&gt; <br>&gt; public protocol Foo {<br>&gt;   associatedtype Bar = Self<br>&gt;   func bar(qux: String) -&gt; Bar<br>&gt; }<br>&gt; <br>&gt; extension Int: Foo {<br>&gt;   public func bar(qux: String) -&gt; Int {<br>&gt;     return self<br>&gt;   }<br>&gt; }<br>&gt; <br>&gt; extension Optional where Wrapped: Foo, Wrapped == Wrapped.Bar {<br>&gt;   public func bar(q: String) -&gt; Wrapped? {<br>&gt;     return self<br>&gt;   }<br>&gt; }<br>&gt; <br>&gt; let result = 3.bar(qux: &quot;metasyntactic&quot;)<br>&gt; print(result) // 3<br>&gt; <br>&gt; let optional = Optional.some(3).bar(q: &quot;metasyntactic&quot;)<br>&gt; print(optional) // Optional(3)<br>&gt; <br>&gt; # example_3.swift<br>&gt; <br>&gt; public protocol Foo {<br>&gt;   associatedtype Bar = Self<br>&gt;   func bar(qux: String) -&gt; Bar<br>&gt; }<br>&gt; <br>&gt; extension Int: Foo {<br>&gt;   public func bar(q: String) -&gt; Int {<br>&gt;     return self<br>&gt;   }<br>&gt; }<br>&gt; <br>&gt; extension Optional where Wrapped: Foo, Wrapped == Wrapped.Bar {<br>&gt;   public func bar(q: String) -&gt; Wrapped? {<br>&gt;     return self<br>&gt;   }<br>&gt; }<br>&gt; <br>&gt; let result = 3.bar(q: &quot;metasyntactic&quot;)<br>&gt; print(result)<br>&gt; <br>&gt; let optional = Optional.some(3).bar(q: &quot;metasyntactic&quot;)<br>&gt; print(optional)<br>&gt; <br>&gt; [1] https://gist.github.com/RLovelett/8b7c5eb8976554ca359707445a9c86f0<br>&gt; [2] https://swift.org/download/#snapshots<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
