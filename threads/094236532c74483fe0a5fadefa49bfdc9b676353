<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>June  6, 2016 at 10:00:00pm</p></header><div class="content"><p>The functionality of the `where` clause in `for` loops also already can be mimicked using `filter`. Wouldn’t we have to get ride of the `where` clause by that logic?<br></p><p>&gt; The functionality being asked for here is already accepted for inclusion to Swift as a method on Sequence named `prefix(while:)` (SE-0045):<br>&gt; <br>&gt; `for element in array.prefix(while: { someCondition($0) }) { ... }`<br>&gt; On Mon, Jun 6, 2016 at 14:31 T.J. Usiyan via swift-evolution&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)&gt;wrote:<br>&gt; &gt; (As I said, I can live with `while`. I am simply presenting a potential point of confusion.)<br>&gt; &gt; You aren&#39;t evaluating the statements in the loop &#39;while&#39; the condition isn&#39;t met. The first time that the condition isn&#39;t met, evaluation of the loop stops. I get that this is technically true for the `while` construct but I suggest that the only reason that it works there is that &#39;stopping the first time that the condition isn&#39;t met&#39; *is* the construct. Here, we have a loop that we execute for each thing and we&#39;re tacking on/intermingling the `while` construct.<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; On Mon, Jun 6, 2016 at 2:19 PM, Thorsten Seitz&lt;tseitz42 at icloud.com(mailto:tseitz42 at icloud.com)&gt;wrote:<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; &gt;Am 06.06.2016 um 19:43 schrieb Tim Vermeulen via swift-evolution&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)&gt;:<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;I also considered `until`, but it would be a bit confusing that `where` makes sure a condition is met, while `until` makes sure the condition isn’t met. I think `while` makes more sense because it corresponds to `break` in the same way that `where` corresponds to `continue`.<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; That&#39;s a good argument! The only drawback is that `while` and `where` look quite similar at a glance.<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; -Thorsten<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;&gt;`while`, to me, actually reads like it should do what `where` does.<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;To me, `while` reads like it should stop the loop once the condition isn’t met, just like in a while loop.<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;&gt;I hadn&#39;t thought about `while` in this regard but wouldn&#39;t `until` make more sense? `while`, to me, actually reads like it should do what `where` does. In any case, whether it is `while` or `where`, this seems like a reasonable feature in my opinion.<br>&gt; &gt; &gt; &gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;TJ<br>&gt; &gt; &gt; &gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;On Mon, Jun 6, 2016 at 5:15 AM, Tim Vermeulen via swift-evolution&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)(mailto:swift-evolution at swift.org)&gt;wrote:<br>&gt; &gt; &gt; &gt;&gt;&gt;We can already use a where clause in a for loop like this:<br>&gt; &gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;for element in array where someCondition(element) {<br>&gt; &gt; &gt; &gt;&gt;&gt;// …<br>&gt; &gt; &gt; &gt;&gt;&gt;}<br>&gt; &gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;which basically acts like<br>&gt; &gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;for element in array {<br>&gt; &gt; &gt; &gt;&gt;&gt;guard someCondition(element) else { continue }<br>&gt; &gt; &gt; &gt;&gt;&gt;// …<br>&gt; &gt; &gt; &gt;&gt;&gt;}<br>&gt; &gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;Sometimes you want to break out of the loop when the condition isn’t met instead. I propose a while clause:<br>&gt; &gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;for element in array while someCondition(element) {<br>&gt; &gt; &gt; &gt;&gt;&gt;// …<br>&gt; &gt; &gt; &gt;&gt;&gt;}<br>&gt; &gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;which would be syntactic sugar for<br>&gt; &gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;for element in array {<br>&gt; &gt; &gt; &gt;&gt;&gt;guard someCondition(element) else { break }<br>&gt; &gt; &gt; &gt;&gt;&gt;…<br>&gt; &gt; &gt; &gt;&gt;&gt;}<br>&gt; &gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;I can see this particularly being useful if we have a sorted array and we already know that once the condition isn’t met, it won’t be met either for subsequent elements. Another use case could be an infinite sequence that we want to cut off somewhere (which is simply not possible using a where clause).<br>&gt; &gt; &gt; &gt;&gt;&gt;_______________________________________________<br>&gt; &gt; &gt; &gt;&gt;&gt;swift-evolution mailing list<br>&gt; &gt; &gt; &gt;&gt;&gt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)(mailto:swift-evolution at swift.org)<br>&gt; &gt; &gt; &gt;&gt;&gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; &gt; &gt;_______________________________________________<br>&gt; &gt; &gt; &gt;swift-evolution mailing list<br>&gt; &gt; &gt; &gt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)<br>&gt; &gt; &gt; &gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; <br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org(mailto:swift-evolution at swift.org)<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June  6, 2016 at 09:00:00pm</p></header><div class="content"><p>The burden of proof for adding new features is different from that for<br>taking away existing features.<br></p><p>If a feature doesn&#39;t yet exist, a successful proposal will show how it<br>provides additional and non-trivial utility. If a feature already exists, a<br>successful proposal to remove it will show how it is harmful to the<br>language or contrary to the direction in which it is evolving.<br></p><p>On Mon, Jun 6, 2016 at 15:38 Tim Vermeulen &lt;tvermeulen at me.com&gt; wrote:<br></p><p>&gt; The functionality of the `where` clause in `for` loops also already can be<br>&gt; mimicked using `filter`. Wouldn’t we have to get ride of the `where` clause<br>&gt; by that logic?<br>&gt;<br>&gt; &gt; The functionality being asked for here is already accepted for inclusion<br>&gt; to Swift as a method on Sequence named `prefix(while:)` (SE-0045):<br>&gt; &gt;<br>&gt; &gt; `for element in array.prefix(while: { someCondition($0) }) { ... }`<br>&gt; &gt; On Mon, Jun 6, 2016 at 14:31 T.J. Usiyan via swift-evolution&lt;<br>&gt; swift-evolution at swift.org(mailto:swift-evolution at swift.org)&gt;wrote:<br>&gt; &gt; &gt; (As I said, I can live with `while`. I am simply presenting a<br>&gt; potential point of confusion.)<br>&gt; &gt; &gt; You aren&#39;t evaluating the statements in the loop &#39;while&#39; the condition<br>&gt; isn&#39;t met. The first time that the condition isn&#39;t met, evaluation of the<br>&gt; loop stops. I get that this is technically true for the `while` construct<br>&gt; but I suggest that the only reason that it works there is that &#39;stopping<br>&gt; the first time that the condition isn&#39;t met&#39; *is* the construct. Here, we<br>&gt; have a loop that we execute for each thing and we&#39;re tacking<br>&gt; on/intermingling the `while` construct.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; On Mon, Jun 6, 2016 at 2:19 PM, Thorsten Seitz&lt;tseitz42 at icloud.com<br>&gt; (mailto:tseitz42 at icloud.com)&gt;wrote:<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; &gt;Am 06.06.2016 um 19:43 schrieb Tim Vermeulen via swift-evolution&lt;<br>&gt; swift-evolution at swift.org(mailto:swift-evolution at swift.org)&gt;:<br>&gt; &gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; &gt;I also considered `until`, but it would be a bit confusing that<br>&gt; `where` makes sure a condition is met, while `until` makes sure the<br>&gt; condition isn’t met. I think `while` makes more sense because it<br>&gt; corresponds to `break` in the same way that `where` corresponds to<br>&gt; `continue`.<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; That&#39;s a good argument! The only drawback is that `while` and<br>&gt; `where` look quite similar at a glance.<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; -Thorsten<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; &gt;&gt;`while`, to me, actually reads like it should do what `where` does.<br>&gt; &gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; &gt;To me, `while` reads like it should stop the loop once the<br>&gt; condition isn’t met, just like in a while loop.<br>&gt; &gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; &gt;&gt;I hadn&#39;t thought about `while` in this regard but wouldn&#39;t `until`<br>&gt; make more sense? `while`, to me, actually reads like it should do what<br>&gt; `where` does. In any case, whether it is `while` or `where`, this seems<br>&gt; like a reasonable feature in my opinion.<br>&gt; &gt; &gt; &gt; &gt;&gt;<br>&gt; &gt; &gt; &gt; &gt;&gt;TJ<br>&gt; &gt; &gt; &gt; &gt;&gt;<br>&gt; &gt; &gt; &gt; &gt;&gt;On Mon, Jun 6, 2016 at 5:15 AM, Tim Vermeulen via swift-evolution&lt;<br>&gt; swift-evolution at swift.org(mailto:swift-evolution at swift.org)(mailto:<br>&gt; swift-evolution at swift.org)&gt;wrote:<br>&gt; &gt; &gt; &gt; &gt;&gt;&gt;We can already use a where clause in a for loop like this:<br>&gt; &gt; &gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt; &gt; &gt;&gt;&gt;for element in array where someCondition(element) {<br>&gt; &gt; &gt; &gt; &gt;&gt;&gt;// …<br>&gt; &gt; &gt; &gt; &gt;&gt;&gt;}<br>&gt; &gt; &gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt; &gt; &gt;&gt;&gt;which basically acts like<br>&gt; &gt; &gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt; &gt; &gt;&gt;&gt;for element in array {<br>&gt; &gt; &gt; &gt; &gt;&gt;&gt;guard someCondition(element) else { continue }<br>&gt; &gt; &gt; &gt; &gt;&gt;&gt;// …<br>&gt; &gt; &gt; &gt; &gt;&gt;&gt;}<br>&gt; &gt; &gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt; &gt; &gt;&gt;&gt;Sometimes you want to break out of the loop when the condition<br>&gt; isn’t met instead. I propose a while clause:<br>&gt; &gt; &gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt; &gt; &gt;&gt;&gt;for element in array while someCondition(element) {<br>&gt; &gt; &gt; &gt; &gt;&gt;&gt;// …<br>&gt; &gt; &gt; &gt; &gt;&gt;&gt;}<br>&gt; &gt; &gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt; &gt; &gt;&gt;&gt;which would be syntactic sugar for<br>&gt; &gt; &gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt; &gt; &gt;&gt;&gt;for element in array {<br>&gt; &gt; &gt; &gt; &gt;&gt;&gt;guard someCondition(element) else { break }<br>&gt; &gt; &gt; &gt; &gt;&gt;&gt;…<br>&gt; &gt; &gt; &gt; &gt;&gt;&gt;}<br>&gt; &gt; &gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt; &gt; &gt;&gt;&gt;I can see this particularly being useful if we have a sorted<br>&gt; array and we already know that once the condition isn’t met, it won’t be<br>&gt; met either for subsequent elements. Another use case could be an infinite<br>&gt; sequence that we want to cut off somewhere (which is simply not possible<br>&gt; using a where clause).<br>&gt; &gt; &gt; &gt; &gt;&gt;&gt;_______________________________________________<br>&gt; &gt; &gt; &gt; &gt;&gt;&gt;swift-evolution mailing list<br>&gt; &gt; &gt; &gt; &gt;&gt;&gt;swift-evolution at swift.org(mailto:swift-evolution at swift.org<br>&gt; )(mailto:swift-evolution at swift.org)<br>&gt; &gt; &gt; &gt; &gt;&gt;&gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; &gt; &gt; &gt;_______________________________________________<br>&gt; &gt; &gt; &gt; &gt;swift-evolution mailing list<br>&gt; &gt; &gt; &gt; &gt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)<br>&gt; &gt; &gt; &gt; &gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; _______________________________________________<br>&gt; &gt; &gt; swift-evolution mailing list<br>&gt; &gt; &gt; swift-evolution at swift.org(mailto:swift-evolution at swift.org)<br>&gt; &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160606/40a7a4ae/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
