<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ade0c334ecff1448bb96f5f733bf1f83?s=50"></div><header><strong>Sort Descriptors</strong> from <string>Chris Eidhof</string> &lt;chris at eidhof.nl&gt;<p>November  3, 2016 at 07:00:00pm</p></header><div class="content"><p>Hey everyone,<br></p><p>I was wondering if there&#39;s any interest in adding Swift-like sort<br>descriptors to the language. Currently, we have `sort` and `sorted`, which<br>take a function of type `(A, A) -&gt; Bool`. Foundation has<br>`NSSortDescriptor`, which corresponds more to `(A, A) -&gt; ComparisonResult`.<br>NSSortDescriptor is a lot easier to work with than Swift&#39;s stdlib way: it&#39;s<br>more declarative, it&#39;s easy to combine multiple sort descriptors into one<br>(e.g. sort by last name, then sort by first name, and so on). However,<br>NSSortDescriptor uses runtime programming, and is not very typesafe.<br></p><p>We could do a lot better in Swift. There are at least a few possibilities:<br></p><p>typealias SortDescriptor&lt;A&gt; = (A, A) -&gt; Bool<br>typealias SortDescriptor&lt;A&gt; = (A, A) -&gt; ComparisonResult<br>struct SortDescriptor&lt;A&gt; { let compare: (A, A) -&gt; Bool }<br>struct SortDescriptor&lt;A&gt; { let compare: (A, A) -&gt; ComparisonResult }<br></p><p>I&#39;ve experimented a bit with this, and it seems like the `struct` based<br>version with `ComparisonResult` is quite nice, because then we can add<br>methods/properties on it (e.g. to reverse a sort descriptor, or to return a<br>`Bool` instead of a `ComparisonResult`).<br></p><p>My &quot;SortDescriptor&quot; could also be called &quot;Comparator&quot;, and in fact, there<br>is already something like that in Foundation (of type (Any,Any) -&gt; Bool).<br></p><p>Is there interest in adding support for this to the stdlib? If yes, is<br>anyone interested in writing a good proposal together?<br></p><p>-- <br>Chris Eidhof<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161103/4daf0763/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0735d3bf1d76c0385258ac7a2a22d6fe?s=50"></div><header><strong>Sort Descriptors</strong> from <string>Károly Lőrentey</string> &lt;karoly at lorentey.hu&gt;<p>November  3, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On 2016-11-03, at 19:39, Chris Eidhof via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; I was wondering if there&#39;s any interest in adding Swift-like sort descriptors to the language. Currently, we have `sort` and `sorted`, which take a function of type `(A, A) -&gt; Bool`. Foundation has `NSSortDescriptor`, which corresponds more to `(A, A) -&gt; ComparisonResult`. NSSortDescriptor is a lot easier to work with than Swift&#39;s stdlib way: it&#39;s more declarative, it&#39;s easy to combine multiple sort descriptors into one (e.g. sort by last name, then sort by first name, and so on). However, NSSortDescriptor uses runtime programming, and is not very typesafe.<br>&gt; <br>&gt; We could do a lot better in Swift. There are at least a few possibilities:<br>&gt; <br>&gt; typealias SortDescriptor&lt;A&gt; = (A, A) -&gt; Bool<br>&gt; typealias SortDescriptor&lt;A&gt; = (A, A) -&gt; ComparisonResult<br>&gt; struct SortDescriptor&lt;A&gt; { let compare: (A, A) -&gt; Bool }<br>&gt; struct SortDescriptor&lt;A&gt; { let compare: (A, A) -&gt; ComparisonResult }<br>&gt; <br>&gt; I&#39;ve experimented a bit with this, and it seems like the `struct` based version with `ComparisonResult` is quite nice, because then we can add methods/properties on it (e.g. to reverse a sort descriptor, or to return a `Bool` instead of a `ComparisonResult`). <br>&gt; <br>&gt; My &quot;SortDescriptor&quot; could also be called &quot;Comparator&quot;, and in fact, there is already something like that in Foundation (of type (Any,Any) -&gt; Bool).<br>&gt; <br>&gt; Is there interest in adding support for this to the stdlib? If yes, is anyone interested in writing a good proposal together?<br></p><p>There is definitely interest!<br></p><p>In fact, Robert Widmann, Jaden Geller, Harlan Haskins and Pyry Jahkola had previously worked on a draft proposal to clean up Comparable&#39;s semantics, and to move from a &lt; + == model to a single comparator operator called &quot;&lt;=&gt;”. Sadly this happened just before Swift 3 deadline, and the proposal was lost in the noise.<br></p><p>https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025466.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025466.html&gt;<br>https://github.com/pyrtsa/swift-evolution/blob/ca89e7b3a1dffc99baa695a03544fcba75afd0f3/proposals/NNNN-formalized-ordering.md &lt;https://github.com/pyrtsa/swift-evolution/blob/ca89e7b3a1dffc99baa695a03544fcba75afd0f3/proposals/NNNN-formalized-ordering.md&gt;<br></p><p>The new sort functions are included under Future Directions above, but it would also be possible to add them before resolving the general case. <br></p><p>If this is a good time to reopen this discussion, then I’m all for it! <br></p><p>-- <br>Karoly<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161103/4c8e0ee1/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
