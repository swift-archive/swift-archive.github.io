<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Comparing POP to OOP</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 25, 2016 at 04:00:00pm</p></header><div class="content"><p>on Sun Feb 14 2016, zhaoxin肇鑫 &lt;swift-users-AT-swift.org&gt; wrote:<br></p><p>&gt; I have not read your blog. But in my opinion, what Apple called protocol<br>&gt; programming is actually so called functional programming. It is not object<br>&gt; programming at all. It uses protocols and structs to avoid object<br>&gt; programming.<br></p><p>I don&#39;t think most functional programmers would recognize<br>protocol-oriented programming as what they do.  It is true that one of<br>the main benefits we see in protocol-oriented programming is that it<br>allows one to use *mutable* value types, instead of classes, in<br>polymorphic contexts.  Functional programming is largely concerned with<br>immutable data, where the distinction between value and reference<br>semantics disappears, and it doesn&#39;t matter if you&#39;re using classes or<br>not.  But the main thing in FP is the use of higher-order functions,<br>which Swift enthusiastically supports, but have nothing whatever to do<br>with protocol-oriented programming.<br></p><p>&gt;<br>&gt; zhaoxin<br>&gt;<br>&gt; On Mon, Feb 15, 2016 at 7:59 AM, Jon Hoffman via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Numerous tutorials that I have seen take a very Object-Oriented approach<br>&gt;&gt; to the protocol-oriented programming (POP) paradigm.  By this statement I<br>&gt;&gt; mean that they tell us that with POP we should begin our design with the<br>&gt;&gt; protocol rather than with the superclass as we did with OOP however the<br>&gt;&gt; protocol design tends to mirror the superclass design of OOP.   They also<br>&gt;&gt; tell us that we should use extensions to add common functionality to types<br>&gt;&gt; that conform to a protocol as we did with superclasses in OOP.  While<br>&gt;&gt; protocols and protocol extensions are arguably two of the most important<br>&gt;&gt; concepts of POP these tutorials seem to be missing some other very<br>&gt;&gt; important concepts.<br>&gt;&gt;<br>&gt;&gt; In this post I would like to compare Protocol-Oriented design to<br>&gt;&gt; Object-Oriented design to highlight some of the conceptual differences.<br>&gt;&gt; You can view the blog post here:<br>&gt;&gt; http://masteringswift.blogspot.com/2016/02/pop-and-oop.html<br>&gt;&gt;<br>&gt;&gt; Jon<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c8bc65b07027beac76b917624be47611?s=50"></div><header><strong>Comparing POP to OOP</strong> from <string>Jon Hoffman</string> &lt;hoffman.jon at gmail.com&gt;<p>March  5, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Feb 25, 2016, at 7:35 PM, Dave Abrahams via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Sun Feb 14 2016, zhaoxin肇鑫 &lt;swift-users-AT-swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; I have not read your blog. But in my opinion, what Apple called protocol<br>&gt;&gt; programming is actually so called functional programming. It is not object<br>&gt;&gt; programming at all. It uses protocols and structs to avoid object<br>&gt;&gt; programming.<br>&gt; <br>&gt; I don&#39;t think most functional programmers would recognize<br>&gt; protocol-oriented programming as what they do.  It is true that one of<br>&gt; the main benefits we see in protocol-oriented programming is that it<br>&gt; allows one to use *mutable* value types, instead of classes, in<br>&gt; polymorphic contexts.  Functional programming is largely concerned with<br>&gt; immutable data, where the distinction between value and reference<br>&gt; semantics disappears, and it doesn&#39;t matter if you&#39;re using classes or<br>&gt; not.  But the main thing in FP is the use of higher-order functions,<br>&gt; which Swift enthusiastically supports, but have nothing whatever to do<br>&gt; with protocol-oriented programming.<br></p><p>Your e-mail touches on one of the things that excites me the most about Swift.  As you say “But the main thing in FP is the use of higher-order functions, which Swift enthusiastically supports, but have nothing whatever to do with protocol-oriented programming”.  Swift isn’t just a Protocol-Oriented programming language or an Object-Oriented language or a functional programming language it is actually all of them and more.  While other languages attempt to support different paradigms, in my opinion, Swift is one of the few language that actually does a good job at supporting multiple paradigms. <br></p><p>In the conclusion section of my post, I mention that while I pointed out a lot of ways that I believe POP is superior to OOP I would not say that POP is a clear winner over OOP.  The winner is actually the programmer because we are not limited to one programming paradigm.  We can choose the paradigm that fits our needs.  Personally I have use POP in a number of projects and I definitely prefer it to OOP or FP but I would not criticize anyone that uses the other two because they are very valid paradigms that have proven over time.  <br></p><p><br>Jon<br></p><p>&gt; <br>&gt;&gt; <br>&gt;&gt; zhaoxin<br>&gt;&gt; <br>&gt;&gt; On Mon, Feb 15, 2016 at 7:59 AM, Jon Hoffman via swift-users &lt;<br>&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Numerous tutorials that I have seen take a very Object-Oriented approach<br>&gt;&gt;&gt; to the protocol-oriented programming (POP) paradigm.  By this statement I<br>&gt;&gt;&gt; mean that they tell us that with POP we should begin our design with the<br>&gt;&gt;&gt; protocol rather than with the superclass as we did with OOP however the<br>&gt;&gt;&gt; protocol design tends to mirror the superclass design of OOP.   They also<br>&gt;&gt;&gt; tell us that we should use extensions to add common functionality to types<br>&gt;&gt;&gt; that conform to a protocol as we did with superclasses in OOP.  While<br>&gt;&gt;&gt; protocols and protocol extensions are arguably two of the most important<br>&gt;&gt;&gt; concepts of POP these tutorials seem to be missing some other very<br>&gt;&gt;&gt; important concepts.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In this post I would like to compare Protocol-Oriented design to<br>&gt;&gt;&gt; Object-Oriented design to highlight some of the conceptual differences.<br>&gt;&gt;&gt; You can view the blog post here:<br>&gt;&gt;&gt; http://masteringswift.blogspot.com/2016/02/pop-and-oop.html<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jon<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160305/b11d1dcc/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
