<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>Illegal Instruction: 4 OS X libdispatch</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>May  1, 2016 at 11:00:00am</p></header><div class="content"><p>Hi everyone,<br></p><p>I’m creating a Swift package that uses Dispatch on OS X, but I am getting an Illegal Instruction error after I register my block for an event. Specifically, a UD2 instruction inside of libdispatch:<br></p><p>Process 16425 stopped<br>* thread #1: tid = 0x68d099, 0x00007fff814aa360 libdispatch.dylib`_dispatch_xref_dispose + 23, queue = &#39;com.apple.main-thread&#39;, stop reason = EXC_BAD_INSTRUCTION (code=EXC_I386_INVOP, subcode=0x0)<br>    frame #0: 0x00007fff814aa360 libdispatch.dylib`_dispatch_xref_dispose + 23<br>libdispatch.dylib`_dispatch_xref_dispose:<br>-&gt;  0x7fff814aa360 &lt;+23&gt;: ud2    <br></p><p><br>Does this look like a compiler error, or have I somehow configured my package wrong? I haven’t used any funky compiler flags. I do know that if I set my min version to 10.7 or 10.6 I do not get the error. This is the offending function:<br></p><p>public func listen(backlog: Int = 32, onConnect: (clientConnection: TCPServer) -&gt; ()) throws {<br>        let ret = system_listen(fd.rawValue, Int32(backlog))<br>        if ret != 0 {<br>            throw Error(rawValue: errno)<br>        }<br>        let dispatchSource = dispatch_source_create(DISPATCH_SOURCE_TYPE_READ, UInt(fd.rawValue), 0, dispatch_get_main_queue())<br>//        dispatch_source_cancel(dispatchSource)<br>//        dispatch_resume(dispatchSource)<br>        dispatch_source_set_event_handler(dispatchSource) { [fd = self.fd] in<br>            var socketAddress = sockaddr()<br>            var sockLen = socklen_t(SOCK_MAXADDRLEN)<br>            <br>            let ret = system_accept(fd.rawValue, &amp;socketAddress, &amp;sockLen)<br>            if ret == StandardFileDescriptor.invalid.rawValue {<br>                fatalError()<br>            }<br>            let clientFileDescriptor = SocketFileDescriptor(rawValue: ret, socketType: SocketType.stream, addressFamily: fd.addressFamily)<br>            let clientConnection = TCPServer(loop: self.loop, fd: clientFileDescriptor)<br>            onConnect(clientConnection: clientConnection)<br>        }<br>    }<br></p><p>If it is a bug, where should I file it? Any help would be much appreciated!<br></p><p>Thanks,<br></p><p>Tyler<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160501/aa4d0e7a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2bc666e29724cd3bdf46b6cbbe4a07bb?s=50"></div><header><strong>Illegal Instruction: 4 OS X libdispatch</strong> from <string>Quinn &quot;The Eskimo!&quot;</string> &lt;eskimo1 at apple.com&gt;<p>May  2, 2016 at 09:00:00am</p></header><div class="content"><p>On 1 May 2016, at 19:33, Tyler Fleming Cloutier via swift-users &lt;swift-users at swift.org&gt; wrote:<br></p><p>&gt; I’m creating a Swift package that uses Dispatch on OS X, but I am getting an Illegal Instruction error after I register my block for an event. Specifically, a UD2 instruction inside of libdispatch:<br></p><p>Intel code uses the `ud2` illegal instruction for `__builtin_trap`, that is, as a way for the code to stop when some sort of error has been detected.<br></p><p>In your case I believe that you’re using your dispatch source incorrectly.  Specifically:<br></p><p>* You should hold on to a reference to `dispatchSource`.<br></p><p>* You need to `dispatch_resume` the source before it’ll do anything.<br></p><p>Share and Enjoy<br>--<br>Quinn &quot;The Eskimo!&quot;                    &lt;http://www.apple.com/developer/&gt;<br>Apple Developer Relations, Developer Technical Support, Core OS/Hardware<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>Illegal Instruction: 4 OS X libdispatch</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>May  3, 2016 at 10:00:00am</p></header><div class="content"><p>Thanks for the reply, Quinn!<br></p><p>Yep, you’re spot on. The dispatchSource is immediately dealloc’d at the end of the function. The resume I had in there, but I forgot to move it back and uncomment it.<br></p><p>So here’s another interesting question, if I add<br></p><p> _ = dispatchSource<br></p><p> to my closure, I can have the closure keep a reference. However, I’ve two concerns with that. One is that looks like something that the compiler might try to optimize out, although in this case perhaps it can’t because of the effect on reference counting. And the second is that I don’t know if the dispatchSource holds a reference to the closure. It seems like it’s possible that it doesn’t, in which case I would avoid a retain cycle.<br></p><p>My motivation for doing something like that is that I would prefer not to make the listen function mutating inside my struct.<br></p><p>&gt; On May 2, 2016, at 1:16 AM, Quinn The Eskimo! via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; On 1 May 2016, at 19:33, Tyler Fleming Cloutier via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; I’m creating a Swift package that uses Dispatch on OS X, but I am getting an Illegal Instruction error after I register my block for an event. Specifically, a UD2 instruction inside of libdispatch:<br>&gt; <br>&gt; Intel code uses the `ud2` illegal instruction for `__builtin_trap`, that is, as a way for the code to stop when some sort of error has been detected.<br>&gt; <br>&gt; In your case I believe that you’re using your dispatch source incorrectly.  Specifically:<br>&gt; <br>&gt; * You should hold on to a reference to `dispatchSource`.<br>&gt; <br>&gt; * You need to `dispatch_resume` the source before it’ll do anything.<br>&gt; <br>&gt; Share and Enjoy<br>&gt; --<br>&gt; Quinn &quot;The Eskimo!&quot;                    &lt;http://www.apple.com/developer/&gt;<br>&gt; Apple Developer Relations, Developer Technical Support, Core OS/Hardware<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2bc666e29724cd3bdf46b6cbbe4a07bb?s=50"></div><header><strong>Illegal Instruction: 4 OS X libdispatch</strong> from <string>Quinn &quot;The Eskimo!&quot;</string> &lt;eskimo1 at apple.com&gt;<p>May  3, 2016 at 06:00:00pm</p></header><div class="content"><p>On 3 May 2016, at 18:02, Tyler Fleming Cloutier &lt;cloutiertyler at aol.com&gt; wrote:<br></p><p>&gt; My motivation for doing something like that is that I would prefer not to make the listen function mutating inside my struct.<br></p><p>I recommend that you be explicit about your source references.  If this struct owns the source, have it maintain a strong reference to the source.  In your case it seems that `fd` is an attribute of the struct, so you could create the source when the struct is initialised with `fd`.  You don’t have to configure or resume it at that point, just create it.<br></p><p>Share and Enjoy<br>--<br>Quinn &quot;The Eskimo!&quot;                    &lt;http://www.apple.com/developer/&gt;<br>Apple Developer Relations, Developer Technical Support, Core OS/Hardware<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>Illegal Instruction: 4 OS X libdispatch</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>May  3, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On May 3, 2016, at 10:11 AM, Quinn The Eskimo! via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; On 3 May 2016, at 18:02, Tyler Fleming Cloutier &lt;cloutiertyler at aol.com&gt; wrote:<br>&gt; <br>&gt;&gt; My motivation for doing something like that is that I would prefer not to make the listen function mutating inside my struct.<br>&gt; <br>&gt; I recommend that you be explicit about your source references.  If this struct owns the source, have it maintain a strong reference to the source.  In your case it seems that `fd` is an attribute of the struct, so you could create the source when the struct is initialised with `fd`.  You don’t have to configure or resume it at that point, just create it.<br>&gt; <br>&gt; Share and Enjoy<br></p><p>Yep that would work, however, it’s a little trickier if I want to have a protocol extension:<br></p><p>https://github.com/TheArtOfEngineering/Edge/blob/master/Sources/IOStream.swift &lt;https://github.com/TheArtOfEngineering/Edge/blob/master/Sources/IOStream.swift&gt;<br></p><p>I could just have a readonly var which just references the underlying dispatch_source_t though!<br></p><p>Thanks for the help!<br></p><p><br>&gt; --<br>&gt; Quinn &quot;The Eskimo!&quot;                    &lt;http://www.apple.com/developer/&gt;<br>&gt; Apple Developer Relations, Developer Technical Support, Core OS/Hardware<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160503/1c810fe2/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
