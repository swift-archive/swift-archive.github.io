<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Please remove your Swift build directory</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>May 31, 2016 at 09:00:00am</p></header><div class="content"><p>Hi,<br></p><p>We have merged a CMake and build-script refactoring that requires a<br>from-scratch build.  Trying to use an existing build directory will<br>result in strange errors in the middle of the build.<br></p><p>Excuse me for the inconvenience.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Please remove your Swift build directory</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May 31, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On May 31, 2016, at 9:37 AM, Dmitri Gribenko via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; We have merged a CMake and build-script refactoring that requires a<br>&gt; from-scratch build.  Trying to use an existing build directory will<br>&gt; result in strange errors in the middle of the build.<br>&gt; <br>&gt; Excuse me for the inconvenience.<br></p><p>This seems to have broken Xcode project generation, which in the default configuration now fails with:<br></p><p>	-- <br>	CMake Error at CMakeLists.txt:702 (message):<br>	  Unknown SDKs:<br>	  IOS;IOS_SIMULATOR;TVOS;TVOS_SIMULATOR;WATCHOS;WATCHOS_SIMULATOR<br></p><p>Probably easy to work around by manually configuring out those SDKs, since Xcode projects don&#39;t support cross-building to begin with, but this used to just work.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Please remove your Swift build directory</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May 31, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On May 31, 2016, at 10:20 AM, Joe Groff via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On May 31, 2016, at 9:37 AM, Dmitri Gribenko via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi,<br>&gt;&gt; <br>&gt;&gt; We have merged a CMake and build-script refactoring that requires a<br>&gt;&gt; from-scratch build.  Trying to use an existing build directory will<br>&gt;&gt; result in strange errors in the middle of the build.<br>&gt;&gt; <br>&gt;&gt; Excuse me for the inconvenience.<br>&gt; <br>&gt; This seems to have broken Xcode project generation, which in the default configuration now fails with:<br>&gt; <br>&gt; 	-- <br>&gt; 	CMake Error at CMakeLists.txt:702 (message):<br>&gt; 	  Unknown SDKs:<br>&gt; 	  IOS;IOS_SIMULATOR;TVOS;TVOS_SIMULATOR;WATCHOS;WATCHOS_SIMULATOR<br>&gt; <br>&gt; Probably easy to work around by manually configuring out those SDKs, since Xcode projects don&#39;t support cross-building to begin with, but this used to just work.<br></p><p>New build-script also appears to pass some CMake variables that aren&#39;t used in the ninja configuration:<br></p><p>	-- Generating done<br>	CMake Warning:<br>	  Manually-specified variables were not used by the project:<br>	<br>	    SWIFT_BUILD_EXAMPLES<br>	    SWIFT_HOST_TRIPLE<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>Please remove your Swift build directory</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>June  1, 2016 at 04:00:00pm</p></header><div class="content"><p>I’ll have a look in to the SWIFT_BUILD_EXAMPLES warning.<br></p><p>SWIFT_HOST_TRIPLE is a new flag used to override the triple we calculate in CMake (for Linux targets only, Darwin SDK configuration is too different right now). I would like it to one day replace SWIFT_HOST_VARIANT_ARCH and SWIFT_HOST_VARIANT_SDK (which will instead by derived from the triple). We will need SDKs to become architecture-specific at some point (so that we don’t need to hardcode ‘ANDROID’ as ‘armv7’, or so that you can compile multiple architecture variants of the same SDK such as ‘linux-i386’ and ‘linux-x86_64’), and we’re going to need to calculate triples for them, so it just makes sense to do the triple calculation in the build script and use them in place of SDK names to configure both the host and stdlib targets.<br></p><p>So that means instead of using these flags to configure swift:<br>- SWIFT_HOST_VARIANT_SDK (e.g. LINUX)<br>- SWIFT_HOST_VARIANT_ARCH (e.g. x86_64)<br>- SWIFT_SDKS (e.g. LINUX;ANDROID)<br></p><p>We’d configure it like this:<br>- SWIFT_HOST_TRIPLE (e.g x86_64-unknown-linux-gnu)<br>- SWIFT_DEPLOYMENT_TARGETS (e.g. x86_64-unknown-linux-gnu + armv7-linux-gnueabihf + armv7-none-linux-androideabi + i386-none-linux-androideabi + …)<br>(+ SWIFT_{platform}_{arch}_SYSROOT for all non-Darwin targets except host, but that’s new functionality)<br></p><p>I didn&#39;t want to change too much too quickly, but if we’re happy with this direction, I can do the triple-&gt;HOST_VARIANT_SDK/ARCH part for all platforms which would silence the warning. We’d still configure by SDK names and hardcoded architectures. Changing that part is less simple.<br></p><p>This was obviously a big patch and I apologise if it caused any problems. If there’s anything else I can help with please let me know.<br>On the other hand, that’s pretty much all we had to do to compile foreign hosts. The rest is tiny and fairly uncontroversial (https://github.com/karwa/swift/commit/d090724bd37dffe243d477fd0ffd1ba87a90c70b).<br></p><p>Karl<br></p><p>&gt; On 31 May 2016, at 19:49, Joe Groff via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On May 31, 2016, at 10:20 AM, Joe Groff via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On May 31, 2016, at 9:37 AM, Dmitri Gribenko via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We have merged a CMake and build-script refactoring that requires a<br>&gt;&gt;&gt; from-scratch build.  Trying to use an existing build directory will<br>&gt;&gt;&gt; result in strange errors in the middle of the build.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Excuse me for the inconvenience.<br>&gt;&gt; <br>&gt;&gt; This seems to have broken Xcode project generation, which in the default configuration now fails with:<br>&gt;&gt; <br>&gt;&gt; 	-- <br>&gt;&gt; 	CMake Error at CMakeLists.txt:702 (message):<br>&gt;&gt; 	  Unknown SDKs:<br>&gt;&gt; 	  IOS;IOS_SIMULATOR;TVOS;TVOS_SIMULATOR;WATCHOS;WATCHOS_SIMULATOR<br>&gt;&gt; <br>&gt;&gt; Probably easy to work around by manually configuring out those SDKs, since Xcode projects don&#39;t support cross-building to begin with, but this used to just work.<br>&gt; <br>&gt; New build-script also appears to pass some CMake variables that aren&#39;t used in the ninja configuration:<br>&gt; <br>&gt; 	-- Generating done<br>&gt; 	CMake Warning:<br>&gt; 	  Manually-specified variables were not used by the project:<br>&gt; 	<br>&gt; 	    SWIFT_BUILD_EXAMPLES<br>&gt; 	    SWIFT_HOST_TRIPLE<br>&gt; <br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Please remove your Swift build directory</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>June  1, 2016 at 09:00:00am</p></header><div class="content"><p>On Wed, Jun 1, 2016 at 7:17 AM, Karl via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; We’d configure it like this:<br>&gt; - SWIFT_HOST_TRIPLE (e.g x86_64-unknown-linux-gnu)<br>&gt; - SWIFT_DEPLOYMENT_TARGETS (e.g. x86_64-unknown-linux-gnu + armv7-linux-gnueabihf + armv7-none-linux-androideabi + i386-none-linux-androideabi + …)<br></p><p>Hi Karl,<br></p><p>One thing to keep in mind is that triples are not as useful as they<br>can seem to be, and trying to derive information from them can<br>sometimes be a futile exercise because the information just either<br>isn&#39;t there, or different vendors mean different things but use the<br>same triple.<br></p><p>This is an excellent thread on this topic from llvm-dev:<br></p><p>http://comments.gmane.org/gmane.comp.compilers.llvm.devel/87804<br></p><p>Also: https://wiki.debian.org/Multiarch/Tuples#Why_not_use_GNU_triplets.3F<br></p><p>I&#39;m not saying that SDK/ARCH is a better replacement (it isn&#39;t, it is<br>currently a strict subset of the information from the triple), but at<br>least it is not the triple itself, so people don&#39;t have the<br>expectation of being able to provide the triple and let the system<br>figure out the rest.  So I&#39;d be concerned about starting to treat the<br>triple as the primary piece of information, and the rest as secondary.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>Please remove your Swift build directory</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>June  2, 2016 at 02:00:00am</p></header><div class="content"><p>&gt; On 1 Jun 2016, at 18:16, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Wed, Jun 1, 2016 at 7:17 AM, Karl via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt; We’d configure it like this:<br>&gt;&gt; - SWIFT_HOST_TRIPLE (e.g x86_64-unknown-linux-gnu)<br>&gt;&gt; - SWIFT_DEPLOYMENT_TARGETS (e.g. x86_64-unknown-linux-gnu + armv7-linux-gnueabihf + armv7-none-linux-androideabi + i386-none-linux-androideabi + …)<br>&gt; <br>&gt; Hi Karl,<br>&gt; <br>&gt; One thing to keep in mind is that triples are not as useful as they<br>&gt; can seem to be, and trying to derive information from them can<br>&gt; sometimes be a futile exercise because the information just either<br>&gt; isn&#39;t there, or different vendors mean different things but use the<br>&gt; same triple.<br>&gt; <br>&gt; This is an excellent thread on this topic from llvm-dev:<br>&gt; <br>&gt; http://comments.gmane.org/gmane.comp.compilers.llvm.devel/87804<br>&gt; <br>&gt; Also: https://wiki.debian.org/Multiarch/Tuples#Why_not_use_GNU_triplets.3F<br>&gt; <br>&gt; I&#39;m not saying that SDK/ARCH is a better replacement (it isn&#39;t, it is<br>&gt; currently a strict subset of the information from the triple), but at<br>&gt; least it is not the triple itself, so people don&#39;t have the<br>&gt; expectation of being able to provide the triple and let the system<br>&gt; figure out the rest.  So I&#39;d be concerned about starting to treat the<br>&gt; triple as the primary piece of information, and the rest as secondary.<br>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p><p>Yes, I’m not really fond of using triples either. However, we need the triple for every stdlib target we build anyway, so even if we passed some kind of list of tuples from build-script &gt; CMake, we’d have to try and derive a triple from that information and it must always match the thing that was specified in the build-script to configure LLVM.<br></p><p>The build script still only works in terms of “deployment targets” (e.g. iphoneos-armv7, iphonesimulator-x86_64) and the triples are hardcoded in there, so it’s not like we expect CMake to just work with completely arbitrary triples. The host and all of the stdlib targets you build will come from that curated list of triples which we know can be detected.<br></p><p>We don’t need too much information, anyway. We only need the architecture, and enough pattern matching to disambiguate which SDK it’s referring to (e.g match “*-linux-gnu*&quot; for linux, “*-linux-android*&quot; for android, etc). We don’t really need to *completely* understand the triple.<br></p><p>@Austin: Could your issues be related to https://github.com/apple/swift/commit/06d8455cdf53f9196ae5d6a09bd8aadbb3c1c3d6 ?<br></p><p>Karl<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Please remove your Swift build directory</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>May 31, 2016 at 12:00:00pm</p></header><div class="content"><p>On Tue, May 31, 2016 at 10:20 AM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;<br>&gt;&gt; On May 31, 2016, at 9:37 AM, Dmitri Gribenko via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hi,<br>&gt;&gt;<br>&gt;&gt; We have merged a CMake and build-script refactoring that requires a<br>&gt;&gt; from-scratch build.  Trying to use an existing build directory will<br>&gt;&gt; result in strange errors in the middle of the build.<br>&gt;&gt;<br>&gt;&gt; Excuse me for the inconvenience.<br>&gt;<br>&gt; This seems to have broken Xcode project generation, which in the default configuration now fails with:<br>&gt;<br>&gt;         --<br>&gt;         CMake Error at CMakeLists.txt:702 (message):<br>&gt;           Unknown SDKs:<br>&gt;           IOS;IOS_SIMULATOR;TVOS;TVOS_SIMULATOR;WATCHOS;WATCHOS_SIMULATOR<br>&gt;<br>&gt; Probably easy to work around by manually configuring out those SDKs, since Xcode projects don&#39;t support cross-building to begin with, but this used to just work.<br></p><p>Should be fixed now, sorry for the disruption.<br></p><p>https://github.com/apple/swift/commit/d53b5b25498886c6a81401caa923cabd878ad105<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>Please remove your Swift build directory</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>June  1, 2016 at 12:00:00pm</p></header><div class="content"><p>Hello,<br></p><p>I&#39;m still seeing errors when I try invoking the build script with `-x`.<br>I&#39;ve updated all the repositories (everything that lives alongside the<br>&#39;swift&#39; repo, as well as that repo itself) and deleted my build folder<br>completely.<br></p><p>I see the following errors multiple times before the build terminates:<br></p><p>&quot;CMake Error at cmake/modules/AddSwift.cmake:578 (add_library):<br>  OBJECT library &quot;swiftRuntime-macosx-x86_64&quot; contains:<br></p><p>    RuntimeFunctions.def<br></p><p>  but may contain only sources that compile, header files, and other files<br>  that would not affect linking of a normal library.<br>Call Stack (most recent call first):<br>  cmake/modules/AddSwift.cmake:1159 (_add_swift_library_single)<br>  stdlib/public/runtime/CMakeLists.txt:68 (add_swift_library)&quot;<br></p><p>Am I doing something wrong?<br></p><p>Thanks,<br>Austin<br></p><p>On Tue, May 31, 2016 at 12:30 PM, Dmitri Gribenko via swift-dev &lt;<br>swift-dev at swift.org&gt; wrote:<br></p><p>&gt; On Tue, May 31, 2016 at 10:20 AM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt; On May 31, 2016, at 9:37 AM, Dmitri Gribenko via swift-dev &lt;<br>&gt; swift-dev at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Hi,<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; We have merged a CMake and build-script refactoring that requires a<br>&gt; &gt;&gt; from-scratch build.  Trying to use an existing build directory will<br>&gt; &gt;&gt; result in strange errors in the middle of the build.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Excuse me for the inconvenience.<br>&gt; &gt;<br>&gt; &gt; This seems to have broken Xcode project generation, which in the default<br>&gt; configuration now fails with:<br>&gt; &gt;<br>&gt; &gt;         --<br>&gt; &gt;         CMake Error at CMakeLists.txt:702 (message):<br>&gt; &gt;           Unknown SDKs:<br>&gt; &gt;           IOS;IOS_SIMULATOR;TVOS;TVOS_SIMULATOR;WATCHOS;WATCHOS_SIMULATOR<br>&gt; &gt;<br>&gt; &gt; Probably easy to work around by manually configuring out those SDKs,<br>&gt; since Xcode projects don&#39;t support cross-building to begin with, but this<br>&gt; used to just work.<br>&gt;<br>&gt; Should be fixed now, sorry for the disruption.<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift/commit/d53b5b25498886c6a81401caa923cabd878ad105<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160601/d4128ae8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Please remove your Swift build directory</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>June  2, 2016 at 02:00:00pm</p></header><div class="content"><p>On Wed, Jun 1, 2016 at 12:36 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt; Hello,<br>&gt;<br>&gt; I&#39;m still seeing errors when I try invoking the build script with `-x`. I&#39;ve<br>&gt; updated all the repositories (everything that lives alongside the &#39;swift&#39;<br>&gt; repo, as well as that repo itself) and deleted my build folder completely.<br>&gt;<br>&gt; I see the following errors multiple times before the build terminates:<br>&gt;<br>&gt; &quot;CMake Error at cmake/modules/AddSwift.cmake:578 (add_library):<br>&gt;   OBJECT library &quot;swiftRuntime-macosx-x86_64&quot; contains:<br>&gt;<br>&gt;     RuntimeFunctions.def<br></p><p>Hi Austin,<br></p><p>I&#39;m sorry for the breakage.  This issue should be fixed by<br>https://github.com/apple/swift/pull/2840.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>Please remove your Swift build directory</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>June  2, 2016 at 05:00:00pm</p></header><div class="content"><p>It works now. Thanks for fixing it so quickly!<br></p><p>Austin<br></p><p>On Thu, Jun 2, 2016 at 2:00 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br></p><p>&gt; On Wed, Jun 1, 2016 at 12:36 PM, Austin Zheng &lt;austinzheng at gmail.com&gt;<br>&gt; wrote:<br>&gt; &gt; Hello,<br>&gt; &gt;<br>&gt; &gt; I&#39;m still seeing errors when I try invoking the build script with `-x`.<br>&gt; I&#39;ve<br>&gt; &gt; updated all the repositories (everything that lives alongside the &#39;swift&#39;<br>&gt; &gt; repo, as well as that repo itself) and deleted my build folder<br>&gt; completely.<br>&gt; &gt;<br>&gt; &gt; I see the following errors multiple times before the build terminates:<br>&gt; &gt;<br>&gt; &gt; &quot;CMake Error at cmake/modules/AddSwift.cmake:578 (add_library):<br>&gt; &gt;   OBJECT library &quot;swiftRuntime-macosx-x86_64&quot; contains:<br>&gt; &gt;<br>&gt; &gt;     RuntimeFunctions.def<br>&gt;<br>&gt; Hi Austin,<br>&gt;<br>&gt; I&#39;m sorry for the breakage.  This issue should be fixed by<br>&gt; https://github.com/apple/swift/pull/2840.<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160602/32315ea1/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
