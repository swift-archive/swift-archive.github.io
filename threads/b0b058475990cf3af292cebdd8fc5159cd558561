<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Proposal] Remove force unwrapping in function signature.</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>June 10, 2016 at 05:00:00pm</p></header><div class="content"><p>on Thu Jun 09 2016, Saagar Jha &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Yes, that’s exactly my point. Force unwrapping optionals adds<br>&gt; confusion for new users; all too often I see newcomers ending up with<br>&gt; the assumption that the force unwrapping takes care of the check for<br>&gt; them.<br></p><p>...but, it *does*.<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ecdb231117dda838340bfcbb8873d28e?s=50"></div><header><strong>[Proposal] Remove force unwrapping in function signature.</strong> from <string>Paul Cantrell</string> &lt;cantrell at pobox.com&gt;<p>June 10, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Jun 10, 2016, at 7:43 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; on Thu Jun 09 2016, Saagar Jha &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; Yes, that’s exactly my point. Force unwrapping optionals adds<br>&gt;&gt; confusion for new users; all too often I see newcomers ending up with<br>&gt;&gt; the assumption that the force unwrapping takes care of the check for<br>&gt;&gt; them.<br>&gt; <br>&gt; ...but, it *does*.<br></p><p>I took Saagar to mean “the assumption that force unwrapping takes care of doing the right thing for them so they don’t ever have to think about nil at all.” Which is indeed quite common in beginner Swift code.<br></p><p>Sadly, there is no compile-time check for mindfulness.<br></p><p>Cheers, P<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2024f9524b1e51a54c4251abf0c34f50?s=50"></div><header><strong>[Proposal] Remove force unwrapping in function signature.</strong> from <string>Saagar Jha</string> &lt;saagarjha28 at gmail.com&gt;<p>June 11, 2016 at 02:00:00am</p></header><div class="content"><p>Yes, that’s what I meant. Basically, I see stuff like this:<br></p><p>func tripleForceUnwrapping(aString: String!) -&gt; String {<br>    return String(byRepeatingString: aString, count: 3)<br>}<br></p><p>and later users get a crash with this:<br></p><p>let possiblyNilString = someFunctionThatRetunsAnOptional()<br>tripleForceUnwrapping(possiblyNilString)<br></p><p>even though it compiles fine.<br></p><p>func tripleWithoutUnwrapping(aString: String?) -&gt; String {<br>    return String(byRepeatingString: aString, count: 3)<br>}<br></p><p>let possiblyNilString = someFunctionThatRetunsAnOptional()<br>tripleWithoutUnwrapping(possiblyNilString)<br></p><p>meanwhile, doesn’t compile and forces the user to think “huh, it’s not<br>compiling because there’s an Optional” and hopefully add a check<br></p><p><br>On Fri, Jun 10, 2016 at 7:18 PM Paul Cantrell via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Jun 10, 2016, at 7:43 PM, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; on Thu Jun 09 2016, Saagar Jha &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt; Yes, that’s exactly my point. Force unwrapping optionals adds<br>&gt; &gt;&gt; confusion for new users; all too often I see newcomers ending up with<br>&gt; &gt;&gt; the assumption that the force unwrapping takes care of the check for<br>&gt; &gt;&gt; them.<br>&gt; &gt;<br>&gt; &gt; ...but, it *does*.<br>&gt;<br>&gt; I took Saagar to mean “the assumption that force unwrapping takes care of<br>&gt; doing the right thing for them so they don’t ever have to think about nil<br>&gt; at all.” Which is indeed quite common in beginner Swift code.<br>&gt;<br>&gt; Sadly, there is no compile-time check for mindfulness.<br>&gt;<br>&gt; Cheers, P<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-- <br>-Saagar Jha<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160611/c543ad18/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2024f9524b1e51a54c4251abf0c34f50?s=50"></div><header><strong>[Proposal] Remove force unwrapping in function signature.</strong> from <string>Saagar Jha</string> &lt;saagarjha28 at gmail.com&gt;<p>June 11, 2016 at 02:00:00am</p></header><div class="content"><p>Wait, it looks like String(byRepeatingString: aString, count: 3) only works<br>on characters and was removed, replace it with aString + aString + aString.<br></p><p><br>On Fri, Jun 10, 2016 at 7:38 PM Saagar Jha &lt;saagarjha28 at gmail.com&gt; wrote:<br></p><p>&gt; Yes, that’s what I meant. Basically, I see stuff like this:<br>&gt;<br>&gt; func tripleForceUnwrapping(aString: String!) -&gt; String {<br>&gt;     return String(byRepeatingString: aString, count: 3)<br>&gt; }<br>&gt;<br>&gt; and later users get a crash with this:<br>&gt;<br>&gt; let possiblyNilString = someFunctionThatRetunsAnOptional()<br>&gt; tripleForceUnwrapping(possiblyNilString)<br>&gt;<br>&gt; even though it compiles fine.<br>&gt;<br>&gt; func tripleWithoutUnwrapping(aString: String?) -&gt; String {<br>&gt;     return String(byRepeatingString: aString, count: 3)<br>&gt; }<br>&gt;<br>&gt; let possiblyNilString = someFunctionThatRetunsAnOptional()<br>&gt; tripleWithoutUnwrapping(possiblyNilString)<br>&gt;<br>&gt; meanwhile, doesn’t compile and forces the user to think “huh, it’s not<br>&gt; compiling because there’s an Optional” and hopefully add a check<br>&gt;<br>&gt;<br>&gt; On Fri, Jun 10, 2016 at 7:18 PM Paul Cantrell via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; &gt; On Jun 10, 2016, at 7:43 PM, Dave Abrahams via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; on Thu Jun 09 2016, Saagar Jha &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; Yes, that’s exactly my point. Force unwrapping optionals adds<br>&gt;&gt; &gt;&gt; confusion for new users; all too often I see newcomers ending up with<br>&gt;&gt; &gt;&gt; the assumption that the force unwrapping takes care of the check for<br>&gt;&gt; &gt;&gt; them.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; ...but, it *does*.<br>&gt;&gt;<br>&gt;&gt; I took Saagar to mean “the assumption that force unwrapping takes care of<br>&gt;&gt; doing the right thing for them so they don’t ever have to think about nil<br>&gt;&gt; at all.” Which is indeed quite common in beginner Swift code.<br>&gt;&gt;<br>&gt;&gt; Sadly, there is no compile-time check for mindfulness.<br>&gt;&gt;<br>&gt;&gt; Cheers, P<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt; --<br>&gt; -Saagar Jha<br>&gt;<br>-- <br>-Saagar Jha<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160611/717cc27e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Proposal] Remove force unwrapping in function signature.</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>June 11, 2016 at 04:00:00pm</p></header><div class="content"><p>Yes please, current Swift 3 Snapshot translated a lot of C functions from not optionals to optionals just because let and var works correctly on UnsafeMutablePointer’s.<br></p><p>This is confusing and ugly:<br></p><p>public func freeaddrinfo(_: UnsafeMutablePointer&lt;addrinfo&gt;!)<br>public func gai_strerror(_: Int32) -&gt; UnsafePointer&lt;Int8&gt;!<br>public func getaddrinfo(_: UnsafePointer&lt;Int8&gt;!, _: UnsafePointer&lt;Int8&gt;!, _: UnsafePointer&lt;addrinfo&gt;!, _: UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;addrinfo&gt;?&gt;!) -&gt; Int32<br>public func gethostbyaddr(_: UnsafePointer&lt;Swift.Void&gt;!, _: socklen_t, _: Int32) -&gt; UnsafeMutablePointer&lt;hostent&gt;!<br>public func gethostbyname(_: UnsafePointer&lt;Int8&gt;!) -&gt; UnsafeMutablePointer&lt;hostent&gt;!<br>public func gethostent() -&gt; UnsafeMutablePointer&lt;hostent&gt;!<br>public func getnameinfo(_: UnsafePointer&lt;sockaddr&gt;!, _: socklen_t, _: UnsafeMutablePointer&lt;Int8&gt;!, _: socklen_t, _: UnsafeMutablePointer&lt;Int8&gt;!, _: socklen_t, _: Int32) -&gt; Int32<br>public func getnetbyaddr(_: UInt32, _: Int32) -&gt; UnsafeMutablePointer&lt;netent&gt;!<br>public func getnetbyname(_: UnsafePointer&lt;Int8&gt;!) -&gt; UnsafeMutablePointer&lt;netent&gt;!<br>public func getnetent() -&gt; UnsafeMutablePointer&lt;netent&gt;!<br>public func getprotobyname(_: UnsafePointer&lt;Int8&gt;!) -&gt; UnsafeMutablePointer&lt;protoent&gt;!<br>public func getprotobynumber(_: Int32) -&gt; UnsafeMutablePointer&lt;protoent&gt;!<br>public func getprotoent() -&gt; UnsafeMutablePointer&lt;protoent&gt;!<br>public func getservbyname(_: UnsafePointer&lt;Int8&gt;!, _: UnsafePointer&lt;Int8&gt;!) -&gt; UnsafeMutablePointer&lt;servent&gt;!<br>public func getservbyport(_: Int32, _: UnsafePointer&lt;Int8&gt;!) -&gt; UnsafeMutablePointer&lt;servent&gt;!<br>public func getservent() -&gt; UnsafeMutablePointer&lt;servent&gt;!<br>Look at this mess!<br></p><p><br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160611/660a015d/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
