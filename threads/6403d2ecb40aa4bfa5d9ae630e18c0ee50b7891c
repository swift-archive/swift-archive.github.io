<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f6b7154fd1d6a470d0b521a2e484bffc?s=50"></div><header><strong>[Discussion/Draft] Allow Precedence For Prefix And Postfix Operators</strong> from <string>Daniel Duan</string> &lt;daniel at duan.org&gt;<p>February 29, 2016 at 01:00:00am</p></header><div class="content"><p>Hi all,<br></p><p>I&#39;d like to be able to specify precedence for custom pre/postfix operators.<br>What&#39;s your opinion? I&#39;ll let a draft of my proposal say the rest.<br></p><p>---<br></p><p># Allow Specifying Precedence For Prefix And Postfix Operators<br></p><p>* Proposal: TBD<br>* Author(s): [Daniel Duan](https://github.com/dduan)<br>* Status: **Awaiting review**<br>* Review manager: TBD<br></p><p>## Introduction<br></p><p>Swift allows users to specify precedence for infix custom operators but not<br>for prefix and postfix operators. This Proposal extends prefix and postfix<br>operator declaration syntax to include a precedence specifier.<br></p><p>## Motivation<br></p><p>Operators compose expressions. Precedence affects the result of such<br>composition. Prefix and postfix operators are not different from infix<br>operator in this regard. Without the ability to specify a precedence, users<br>have to rely on understanding of default precedence value and parenthesis to<br>work with their costume prefix and postfix operators.<br></p><p>For example, user might need to extend the range operator `..&lt;` to support<br>a `OpenRange` type, which represent a range with only one end specified with<br>an integer:<br></p><p>```<br>prefix operator ..&lt; {}<br>prefix func ..&lt;(end: Int) -&gt; HalfRange { // … }<br>```<br></p><p>The user might want the following to mean `..&lt; (someNumber + 3)` instead of<br>`(..&lt; someNumber) + 3`, but they need the ability to say `..&lt;` has higher<br>precedence than `+`.<br></p><p><br>```<br>let x = ..&lt; someNumber + 3<br>```<br></p><p>Hence the need for enabling precedence specification for prefix and postfix<br>operators.<br></p><p>## Proposed solution<br></p><p>Modify syntax for specifying both prefix and postfix operators. Add the<br>*precedence* specifier, as it exists for infix operators.<br></p><p>## Detailed design<br></p><p>The Swift compiler will implement the updated prefix and postfix operation<br>declaration syntax as the following:<br>```<br>prefix-operator-declaration → prefix­operator­operator { [precedence-clause] }­<br>postfix-operator-declaration → prefix­operator­operator { [precedence-clause] }­<br>```<br></p><p>Omitting *precedence-clause* means giving the declared operator a default<br>precedence value.<br></p><p>## Impact on existing code<br></p><p>None. This change is purely additive.<br></p><p>## Alternatives considered<br></p><p>TBD<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Discussion/Draft] Allow Precedence For Prefix And Postfix Operators</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>February 29, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Feb 28, 2016, at 5:25 PM, Daniel Duan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; I&#39;d like to be able to specify precedence for custom pre/postfix operators.<br>&gt; What&#39;s your opinion? I&#39;ll let a draft of my proposal say the rest.<br></p><p>I’m supportive of solving this problem, but have a few comments below:<br></p><p>&gt; ## Motivation<br>&gt; <br>&gt; Operators compose expressions. Precedence affects the result of such<br>&gt; composition. Prefix and postfix operators are not different from infix<br>&gt; operator in this regard. Without the ability to specify a precedence, users<br>&gt; have to rely on understanding of default precedence value and parenthesis to<br>&gt; work with their costume prefix and postfix operators.<br>&gt; <br>&gt; For example, user might need to extend the range operator `..&lt;` to support<br>&gt; a `OpenRange` type, which represent a range with only one end specified with<br>&gt; an integer:<br>&gt; <br>&gt; ```<br>&gt; prefix operator ..&lt; {}<br>&gt; prefix func ..&lt;(end: Int) -&gt; HalfRange { // … }<br>&gt; ```<br>&gt; <br>&gt; The user might want the following to mean `..&lt; (someNumber + 3)` instead of<br>&gt; `(..&lt; someNumber) + 3`, but they need the ability to say `..&lt;` has higher<br>&gt; precedence than `+`.<br>&gt; <br>&gt; <br>&gt; ```<br>&gt; let x = ..&lt; someNumber + 3<br>&gt; ```<br></p><p>Keep in mind that prefix operators *must* be closely bound (without whitespace) to their operand.  Your example will produce &quot;error: unary operator cannot be separated from its operand”.<br></p><p>Given this, I’d strongly opposed to having:<br></p><p>	let x = ..&lt;someNumber + 3<br></p><p>parse with the unary operator less tightly bound than the binary operator it works with.  Also keep in mind that unspaced binary operators cannot be juxtaposed without whitespace next to a unary operator.  More specifically, this is not allowed:<br></p><p>	let x = someNumber+..&lt;3<br></p><p>you have to write it as:<br></p><p>	let x = someNumber + ..&lt;3<br></p><p>and again, I’d be pretty strongly opposed to having the unary operator bind looser than the infix operator.  This example also raises the issue of what this means for a prefix unary operator the on RHS of a tighter binding binary operator.<br></p><p>In any case, a proposal to add precedence to unary operators should tackle these issues.  If we allowed whitespace between a unary operator and its operand, that itself would introduce a different host of parsing issues that would have to be solved.<br></p><p>&gt; The Swift compiler will implement the updated prefix and postfix operation<br>&gt; declaration syntax as the following:<br>&gt; ```<br>&gt; prefix-operator-declaration → prefix­operator­operator { [precedence-clause] }­<br>&gt; postfix-operator-declaration → prefix­operator­operator { [precedence-clause] }­<br></p><p>This style is consistent with our existing stuff, but I’ll observe that our existing “magic number” approach to precedence levels is pretty sad in general :-).<br></p><p>We’ve talked about (but never had time to design and implement) an approach where operators are defined as a partial order (lattice), and the compiler sorted out their relative precedence levels from this declarative spec.<br></p><p>-Chris<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
