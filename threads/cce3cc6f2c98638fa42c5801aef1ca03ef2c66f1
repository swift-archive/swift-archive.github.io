<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ffe95d2e2584a3b4adda3ca0e19c375d?s=50"></div><header><strong>CChar vs Int8</strong> from <string>Luke Howard</string> &lt;lukeh at padl.com&gt;<p>January  3, 2016 at 03:00:00pm</p></header><div class="content"><p>Many Foundation APIs use Int8 instead of CChar when representing C strings, e.g.:<br>var UTF8String: UnsafePointer &lt;https://developer.apple.com/library/mac/documentation/Swift/Reference/Swift_UnsafePointer_Structure/index.html#//apple_ref/swift/struct/s:VSs13UnsafePointer&gt;&lt;Int8 &lt;https://developer.apple.com/library/mac/documentation/Swift/Reference/Swift_Int8_Structure/index.html#//apple_ref/swift/struct/s:VSs4Int8&gt;&gt; { get }<br>I don’t know if/when Swift will be ported to a platform where the character type is unsigned but perhaps it would be good to update these to take CChar instead?<br></p><p>— Luke<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160103/cce366f1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>CChar vs Int8</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>January  4, 2016 at 01:00:00pm</p></header><div class="content"><p>Hi Luke,<br></p><p>&gt; On Jan 2, 2016, at 8:28 PM, Luke Howard via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Many Foundation APIs use Int8 instead of CChar when representing C strings, e.g.:<br>&gt; var UTF8String: UnsafePointer &lt;https://developer.apple.com/library/mac/documentation/Swift/Reference/Swift_UnsafePointer_Structure/index.html#//apple_ref/swift/struct/s:VSs13UnsafePointer&gt;&lt;Int8 &lt;https://developer.apple.com/library/mac/documentation/Swift/Reference/Swift_Int8_Structure/index.html#//apple_ref/swift/struct/s:VSs4Int8&gt;&gt; { get }<br>&gt; I don’t know if/when Swift will be ported to a platform where the character type is unsigned but perhaps it would be good to update these to take CChar instead?<br>&gt; <br>&gt; — Luke<br>&gt; <br></p><p>I’m not really sure why it’s imported to Swift as an unsafe pointer to Int8 anyway. The Objective-C code uses char:<br></p><p>@property (nullable, readonly) __strong const char *UTF8String NS_RETURNS_INNER_POINTER;	// Convenience to return null-terminated UTF8 representation<br></p><p>- (nullable instancetype)initWithUTF8String:(const char *)nullTerminatedCString;<br></p><p>- Tony<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160104/742639a9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>CChar vs Int8</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>January  4, 2016 at 01:00:00pm</p></header><div class="content"><p>No C strings import as UnsafePointer&lt;CChar&gt; for some reason; they all import as Int8<br></p><p>e.g.<br>public func pthread_setname_np(_: UnsafePointer&lt;Int8&gt;) -&gt; Int32<br></p><p><br>&gt; On Jan 4, 2016, at 1:20 PM, Tony Parker via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Luke,<br>&gt; <br>&gt;&gt; On Jan 2, 2016, at 8:28 PM, Luke Howard via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Many Foundation APIs use Int8 instead of CChar when representing C strings, e.g.:<br>&gt;&gt; var UTF8String: UnsafePointer &lt;https://developer.apple.com/library/mac/documentation/Swift/Reference/Swift_UnsafePointer_Structure/index.html#//apple_ref/swift/struct/s:VSs13UnsafePointer&gt;&lt;Int8 &lt;https://developer.apple.com/library/mac/documentation/Swift/Reference/Swift_Int8_Structure/index.html#//apple_ref/swift/struct/s:VSs4Int8&gt;&gt; { get }<br>&gt;&gt; I don’t know if/when Swift will be ported to a platform where the character type is unsigned but perhaps it would be good to update these to take CChar instead?<br>&gt;&gt; <br>&gt;&gt; — Luke<br>&gt;&gt; <br>&gt; <br>&gt; I’m not really sure why it’s imported to Swift as an unsafe pointer to Int8 anyway. The Objective-C code uses char:<br>&gt; <br>&gt; @property (nullable, readonly) __strong const char *UTF8String NS_RETURNS_INNER_POINTER;	// Convenience to return null-terminated UTF8 representation<br>&gt; <br>&gt; - (nullable instancetype)initWithUTF8String:(const char *)nullTerminatedCString;<br>&gt; <br>&gt; - Tony<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160104/ecacb6ea/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ffe95d2e2584a3b4adda3ca0e19c375d?s=50"></div><header><strong>CChar vs Int8</strong> from <string>Luke Howard</string> &lt;lukeh at padl.com&gt;<p>January  5, 2016 at 08:00:00am</p></header><div class="content"><p>OK, I filed [SR-466] as a compiler issue. If the behaviour changes and that flows through to Darwin Foundation, we can update the open source one...<br></p><p>— Luke<br></p><p>&gt; On 5 Jan 2016, at 8:21 AM, Philippe Hausler &lt;phausler at apple.com&gt; wrote:<br>&gt; <br>&gt; No C strings import as UnsafePointer&lt;CChar&gt; for some reason; they all import as Int8<br>&gt; <br>&gt; e.g.<br>&gt; public func pthread_setname_np(_: UnsafePointer&lt;Int8&gt;) -&gt; Int32<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 4, 2016, at 1:20 PM, Tony Parker via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi Luke,<br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 2, 2016, at 8:28 PM, Luke Howard via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Many Foundation APIs use Int8 instead of CChar when representing C strings, e.g.:<br>&gt;&gt;&gt; var UTF8String: UnsafePointer &lt;https://developer.apple.com/library/mac/documentation/Swift/Reference/Swift_UnsafePointer_Structure/index.html#//apple_ref/swift/struct/s:VSs13UnsafePointer&gt;&lt;Int8 &lt;https://developer.apple.com/library/mac/documentation/Swift/Reference/Swift_Int8_Structure/index.html#//apple_ref/swift/struct/s:VSs4Int8&gt;&gt; { get }<br>&gt;&gt;&gt; I don’t know if/when Swift will be ported to a platform where the character type is unsigned but perhaps it would be good to update these to take CChar instead?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; — Luke<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I’m not really sure why it’s imported to Swift as an unsafe pointer to Int8 anyway. The Objective-C code uses char:<br>&gt;&gt; <br>&gt;&gt; @property (nullable, readonly) __strong const char *UTF8String NS_RETURNS_INNER_POINTER;	// Convenience to return null-terminated UTF8 representation<br>&gt;&gt; <br>&gt;&gt; - (nullable instancetype)initWithUTF8String:(const char *)nullTerminatedCString;<br>&gt;&gt; <br>&gt;&gt; - Tony<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt; <br></p><p>--<br>www.lukehoward.com<br>soundcloud.com/lukehoward<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160105/1e3dc8f7/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
