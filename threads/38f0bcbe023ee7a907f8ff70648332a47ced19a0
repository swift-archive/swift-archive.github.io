<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>May 27, 2016 at 07:00:00pm</p></header><div class="content"><p>The idea is simple:<br></p><p>Can we make return keyword optional in cases like this?<br>Shouldn’t this behave like @autoclosure or @noescape?<br>type A {<br>    var characters: [Character] = …<br>    var string: String { String(self.characters) }<br>    var count: Int { 42 }<br>}<br>Is this worth a proposal or Swifty enough, what do you think?<br></p><p>Sure I could write return, but why do we allow this behavior for @noescape functions like map!?<br></p><p><br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160527/38f019a0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>May 27, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; The idea is simple:<br>&gt; <br>&gt; 	• Can we make return keyword optional in cases like this?<br>&gt; 	• Shouldn’t this behave like @autoclosure or @noescape?<br></p><p>This actually doesn&#39;t have anything to do with @autoclosure or @noescape. Any one-expression closure can omit the `return` statement and have an inferred return type.<br></p><p>&gt; type A {<br>&gt;     var characters: [Character] = …<br>&gt;     var string: String { String(self.characters) }<br>&gt;     var count: Int { 42 }<br>&gt; }<br></p><p>Despite those inaccuracies, I do think that it&#39;s a good idea to permit single-expression accessors to omit the `return` statement; it will make them much less clunky. I would even extend this to cases where you use the `get` keyword:<br></p><p>	var string: String {<br>		get { String(self.characters) }<br>		set { characters = Array(newValue.characters) }<br>	}<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e9b374b9587bd8da1a1a027c8716ac0d?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>Rod Brown</string> &lt;rodney.brown6 at icloud.com&gt;<p>May 28, 2016 at 09:00:00am</p></header><div class="content"><p>+1. Completely agree with Brent&#39;s views here.<br></p><p>On 28 May 2016, at 9:15 AM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; The idea is simple:<br>&gt;&gt; <br>&gt;&gt;    • Can we make return keyword optional in cases like this?<br>&gt;&gt;    • Shouldn’t this behave like @autoclosure or @noescape?<br>&gt; <br>&gt; This actually doesn&#39;t have anything to do with @autoclosure or @noescape. Any one-expression closure can omit the `return` statement and have an inferred return type.<br>&gt; <br>&gt;&gt; type A {<br>&gt;&gt;    var characters: [Character] = …<br>&gt;&gt;    var string: String { String(self.characters) }<br>&gt;&gt;    var count: Int { 42 }<br>&gt;&gt; }<br>&gt; <br>&gt; Despite those inaccuracies, I do think that it&#39;s a good idea to permit single-expression accessors to omit the `return` statement; it will make them much less clunky. I would even extend this to cases where you use the `get` keyword:<br>&gt; <br>&gt;    var string: String {<br>&gt;        get { String(self.characters) }<br>&gt;        set { characters = Array(newValue.characters) }<br>&gt;    }<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 27, 2016 at 07:00:00pm</p></header><div class="content"><p>Sent from my iPad<br></p><p>On May 27, 2016, at 6:15 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; The idea is simple:<br>&gt;&gt; <br>&gt;&gt;    • Can we make return keyword optional in cases like this?<br>&gt;&gt;    • Shouldn’t this behave like @autoclosure or @noescape?<br>&gt; <br>&gt; This actually doesn&#39;t have anything to do with @autoclosure or @noescape. Any one-expression closure can omit the `return` statement and have an inferred return type.<br>&gt; <br>&gt;&gt; type A {<br>&gt;&gt;    var characters: [Character] = …<br>&gt;&gt;    var string: String { String(self.characters) }<br>&gt;&gt;    var count: Int { 42 }<br>&gt;&gt; }<br>&gt; <br>&gt; Despite those inaccuracies, I do think that it&#39;s a good idea to permit single-expression accessors to omit the `return` statement; it will make them much less clunky. I would even extend this to cases where you use the `get` keyword:<br>&gt; <br>&gt;    var string: String {<br>&gt;        get { String(self.characters) }<br>&gt;        set { characters = Array(newValue.characters) }<br>&gt;    }<br></p><p>+1.  And in single-expression functions as well.  This is something that should be consistent and allowed everywhere in the language.<br></p><p>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ec8a60462a511e833c5c4a83b424c958?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>Dennis Weissmann</string> &lt;dennis at dennisweissmann.me&gt;<p>May 28, 2016 at 07:00:00am</p></header><div class="content"><p>+ 1 from me as well for the already stated reasons.<br></p><p>- Dennis<br></p><p>&gt; On May 28, 2016, at 2:15 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; Sent from my iPad<br>&gt; <br>&gt; On May 27, 2016, at 6:15 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; The idea is simple:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   • Can we make return keyword optional in cases like this?<br>&gt;&gt;&gt;   • Shouldn’t this behave like @autoclosure or @noescape?<br>&gt;&gt; <br>&gt;&gt; This actually doesn&#39;t have anything to do with @autoclosure or @noescape. Any one-expression closure can omit the `return` statement and have an inferred return type.<br>&gt;&gt; <br>&gt;&gt;&gt; type A {<br>&gt;&gt;&gt;   var characters: [Character] = …<br>&gt;&gt;&gt;   var string: String { String(self.characters) }<br>&gt;&gt;&gt;   var count: Int { 42 }<br>&gt;&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Despite those inaccuracies, I do think that it&#39;s a good idea to permit single-expression accessors to omit the `return` statement; it will make them much less clunky. I would even extend this to cases where you use the `get` keyword:<br>&gt;&gt; <br>&gt;&gt;   var string: String {<br>&gt;&gt;       get { String(self.characters) }<br>&gt;&gt;       set { characters = Array(newValue.characters) }<br>&gt;&gt;   }<br>&gt; <br>&gt; +1.  And in single-expression functions as well.  This is something that should be consistent and allowed everywhere in the language.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160528/5726dcc9/attachment-0001.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/da44647c064e8b5d47880c40be6b323b?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>Brian Christensen</string> &lt;brian at briankc.com&gt;<p>May 28, 2016 at 03:00:00am</p></header><div class="content"><p>On May 27, 2016, at 13:57, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; The idea is simple:<br>&gt; <br>&gt; 	• Can we make return keyword optional in cases like this?<br>&gt; 	• Shouldn’t this behave like @autoclosure or @noescape?<br>&gt; type A {<br>&gt;     var characters: [Character] = …<br>&gt;     var string: String { String(self.characters) }<br>&gt;     var count: Int { 42 }<br>&gt; }<br>&gt; <br>&gt; Is this worth a proposal or Swifty enough, what do you think?<br>&gt; <br>&gt; Sure I could write return, but why do we allow this behavior for @noescape functions like map!?<br></p><p>While I am not necessarily against this idea, I do wonder if it’s worth making what’s going on here less obvious simply for the sake of being able to omit a six character keyword. As I understand it, one of the reasons ++/-- were removed was due to the increased &quot;burden to learn Swift as a first programming language.” This is the sort of thing that becomes another one of those special cases that has to be explained to someone new to Swift.<br></p><p>/brian<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>May 28, 2016 at 10:00:00am</p></header><div class="content"><p>It isn’t a special case because all other single-statement closures in the language work that way. It’s actually inconsistent now.<br></p><p>&gt; On 28 May 2016, at 09:03, Brian Christensen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On May 27, 2016, at 13:57, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; The idea is simple:<br>&gt;&gt; <br>&gt;&gt; 	• Can we make return keyword optional in cases like this?<br>&gt;&gt; 	• Shouldn’t this behave like @autoclosure or @noescape?<br>&gt;&gt; type A {<br>&gt;&gt;    var characters: [Character] = …<br>&gt;&gt;    var string: String { String(self.characters) }<br>&gt;&gt;    var count: Int { 42 }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Is this worth a proposal or Swifty enough, what do you think?<br>&gt;&gt; <br>&gt;&gt; Sure I could write return, but why do we allow this behavior for @noescape functions like map!?<br>&gt; <br>&gt; While I am not necessarily against this idea, I do wonder if it’s worth making what’s going on here less obvious simply for the sake of being able to omit a six character keyword. As I understand it, one of the reasons ++/-- were removed was due to the increased &quot;burden to learn Swift as a first programming language.” This is the sort of thing that becomes another one of those special cases that has to be explained to someone new to Swift.<br>&gt; <br>&gt; /brian<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>May 28, 2016 at 10:00:00am</p></header><div class="content"><p>I&#39;ll write a small proposal tomorrow for that behavior (not only for computed properties of course)! Today I&#39;m too busy.  <br></p><p>Thank you for your positive feedback.<br></p><p>--  <br>Adrian Zubarev<br>Sent with Airmail  <br></p><p>Am 28. Mai 2016 um 10:11:26, David Hart (david at hartbit.com(mailto:david at hartbit.com)) schrieb:<br></p><p>&gt;  <br>&gt; It isn’t a special case because all other single-statement closures in the language work that way. It’s actually inconsistent now.<br>&gt;  <br>&gt; &gt; On 28 May 2016, at 09:03, Brian Christensen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;  <br>&gt; &gt; On May 27, 2016, at 13:57, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;  <br>&gt; &gt; &gt; The idea is simple:<br>&gt; &gt; &gt;  <br>&gt; &gt; &gt; • Can we make return keyword optional in cases like this?<br>&gt; &gt; &gt; • Shouldn’t this behave like @autoclosure or @noescape?<br>&gt; &gt; &gt; type A {<br>&gt; &gt; &gt; var characters: [Character] = …<br>&gt; &gt; &gt; var string: String { String(self.characters) }<br>&gt; &gt; &gt; var count: Int { 42 }<br>&gt; &gt; &gt; }<br>&gt; &gt; &gt;  <br>&gt; &gt; &gt; Is this worth a proposal or Swifty enough, what do you think?<br>&gt; &gt; &gt;  <br>&gt; &gt; &gt; Sure I could write return, but why do we allow this behavior for @noescape functions like map!?<br>&gt; &gt;  <br>&gt; &gt; While I am not necessarily against this idea, I do wonder if it’s worth making what’s going on here less obvious simply for the sake of being able to omit a six character keyword. As I understand it, one of the reasons ++/-- were removed was due to the increased &quot;burden to learn Swift as a first programming language.” This is the sort of thing that becomes another one of those special cases that has to be explained to someone new to Swift.<br>&gt; &gt;  <br>&gt; &gt; /brian<br>&gt; &gt;  <br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;  <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160528/9cb56edf/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b18f20abb65f7760305797669c5bc77d?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>David Hart</string> &lt;davidhart at fastmail.com&gt;<p>May 28, 2016 at 10:00:00am</p></header><div class="content"><p>It isn’t a special case because all other single-statement closures in the language work that way. It’s actually inconsistent now.<br></p><p>&gt; On 28 May 2016, at 09:03, Brian Christensen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On May 27, 2016, at 13:57, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; The idea is simple:<br>&gt;&gt; <br>&gt;&gt; 	• Can we make return keyword optional in cases like this?<br>&gt;&gt; 	• Shouldn’t this behave like @autoclosure or @noescape?<br>&gt;&gt; type A {<br>&gt;&gt;    var characters: [Character] = …<br>&gt;&gt;    var string: String { String(self.characters) }<br>&gt;&gt;    var count: Int { 42 }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Is this worth a proposal or Swifty enough, what do you think?<br>&gt;&gt; <br>&gt;&gt; Sure I could write return, but why do we allow this behavior for @noescape functions like map!?<br>&gt; <br>&gt; While I am not necessarily against this idea, I do wonder if it’s worth making what’s going on here less obvious simply for the sake of being able to omit a six character keyword. As I understand it, one of the reasons ++/-- were removed was due to the increased &quot;burden to learn Swift as a first programming language.” This is the sort of thing that becomes another one of those special cases that has to be explained to someone new to Swift.<br>&gt; <br>&gt; /brian<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 31, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On May 28, 2016, at 3:09 AM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; It isn’t a special case because all other single-statement closures in the language work that way. It’s actually inconsistent now.<br></p><p>Computed properties aren’t closures so it’s not inconsistent in that sense.  But it is inconsistent in that closures are the *only* value-returning code blocks that are able to use this sugar.  It would be nice to see this sugar consistently allowed everywhere in the language.<br></p><p>&gt; <br>&gt;&gt; On 28 May 2016, at 09:03, Brian Christensen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On May 27, 2016, at 13:57, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; The idea is simple:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	• Can we make return keyword optional in cases like this?<br>&gt;&gt;&gt; 	• Shouldn’t this behave like @autoclosure or @noescape?<br>&gt;&gt;&gt; type A {<br>&gt;&gt;&gt;   var characters: [Character] = …<br>&gt;&gt;&gt;   var string: String { String(self.characters) }<br>&gt;&gt;&gt;   var count: Int { 42 }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is this worth a proposal or Swifty enough, what do you think?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sure I could write return, but why do we allow this behavior for @noescape functions like map!?<br>&gt;&gt; <br>&gt;&gt; While I am not necessarily against this idea, I do wonder if it’s worth making what’s going on here less obvious simply for the sake of being able to omit a six character keyword. As I understand it, one of the reasons ++/-- were removed was due to the increased &quot;burden to learn Swift as a first programming language.” This is the sort of thing that becomes another one of those special cases that has to be explained to someone new to Swift.<br>&gt;&gt; <br>&gt;&gt; /brian<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d02ed1b20fc3e0fa1592ce5982f24d2b?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>Leonardo Pessoa</string> &lt;me at lmpessoa.com&gt;<p>May 31, 2016 at 01:00:00pm</p></header><div class="content"><p>+1<br></p><p>L<br></p><p>On 31 May 2016 at 12:47, Matthew Johnson via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; On May 28, 2016, at 3:09 AM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; It isn’t a special case because all other single-statement closures in the language work that way. It’s actually inconsistent now.<br>&gt;<br>&gt; Computed properties aren’t closures so it’s not inconsistent in that sense.  But it is inconsistent in that closures are the *only* value-returning code blocks that are able to use this sugar.  It would be nice to see this sugar consistently allowed everywhere in the language.<br>&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; On 28 May 2016, at 09:03, Brian Christensen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On May 27, 2016, at 13:57, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; The idea is simple:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     • Can we make return keyword optional in cases like this?<br>&gt;&gt;&gt;&gt;     • Shouldn’t this behave like @autoclosure or @noescape?<br>&gt;&gt;&gt;&gt; type A {<br>&gt;&gt;&gt;&gt;   var characters: [Character] = …<br>&gt;&gt;&gt;&gt;   var string: String { String(self.characters) }<br>&gt;&gt;&gt;&gt;   var count: Int { 42 }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Is this worth a proposal or Swifty enough, what do you think?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Sure I could write return, but why do we allow this behavior for @noescape functions like map!?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; While I am not necessarily against this idea, I do wonder if it’s worth making what’s going on here less obvious simply for the sake of being able to omit a six character keyword. As I understand it, one of the reasons ++/-- were removed was due to the increased &quot;burden to learn Swift as a first programming language.” This is the sort of thing that becomes another one of those special cases that has to be explained to someone new to Swift.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; /brian<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>May 31, 2016 at 07:00:00pm</p></header><div class="content"><p>Here is the draft proposal: https://github.com/DevAndArtist/swift-evolution/blob/single_expression_optional_return/proposals/nnnn-single-expression-optional-return.md<br></p><p>Did I covered everything case? If you find some mistakes feel free to provide feedback so I can fix the proposal before I submit a PR.<br></p><p><br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 31. Mai 2016 um 18:33:09, Leonardo Pessoa via swift-evolution (swift-evolution at swift.org) schrieb:<br></p><p>+1<br></p><p>L<br></p><p>On 31 May 2016 at 12:47, Matthew Johnson via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; On May 28, 2016, at 3:09 AM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; It isn’t a special case because all other single-statement closures in the language work that way. It’s actually inconsistent now.<br>&gt;<br>&gt; Computed properties aren’t closures so it’s not inconsistent in that sense. But it is inconsistent in that closures are the *only* value-returning code blocks that are able to use this sugar. It would be nice to see this sugar consistently allowed everywhere in the language.<br>&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; On 28 May 2016, at 09:03, Brian Christensen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On May 27, 2016, at 13:57, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; The idea is simple:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; • Can we make return keyword optional in cases like this?<br>&gt;&gt;&gt;&gt; • Shouldn’t this behave like @autoclosure or @noescape?<br>&gt;&gt;&gt;&gt; type A {<br>&gt;&gt;&gt;&gt; var characters: [Character] = …<br>&gt;&gt;&gt;&gt; var string: String { String(self.characters) }<br>&gt;&gt;&gt;&gt; var count: Int { 42 }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Is this worth a proposal or Swifty enough, what do you think?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Sure I could write return, but why do we allow this behavior for @noescape functions like map!?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; While I am not necessarily against this idea, I do wonder if it’s worth making what’s going on here less obvious simply for the sake of being able to omit a six character keyword. As I understand it, one of the reasons ++/-- were removed was due to the increased &quot;burden to learn Swift as a first programming language.” This is the sort of thing that becomes another one of those special cases that has to be explained to someone new to Swift.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; /brian<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160531/35455076/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/15ed660cd9d971062f9dd5084932a698?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>David Rönnqvist</string> &lt;david.ronnqvist at gmail.com&gt;<p>May 31, 2016 at 07:00:00pm</p></header><div class="content"><p>Under &quot;Proposed solution&quot; you say (emphasis mine):<br></p><p>&quot;Make return optional and infer return type for single-expressions everywhere in the language:&quot;<br></p><p>However the return type isn&#39;t inferred for computed properties or functions, and I don&#39;t see type inference being discussed in the proposal (other than mentioning that closures have it). <br></p><p>- David<br></p><p>&gt; 31 maj 2016 kl. 19:35 skrev Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; Here is the draft proposal: https://github.com/DevAndArtist/swift-evolution/blob/single_expression_optional_return/proposals/nnnn-single-expression-optional-return.md<br>&gt; <br>&gt; Did I covered everything case? If you find some mistakes feel free to provide feedback so I can fix the proposal before I submit a PR.<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt; <br>&gt; Am 31. Mai 2016 um 18:33:09, Leonardo Pessoa via swift-evolution (swift-evolution at swift.org) schrieb:<br>&gt; <br>&gt;&gt; +1<br>&gt;&gt; <br>&gt;&gt; L<br>&gt;&gt; <br>&gt;&gt; On 31 May 2016 at 12:47, Matthew Johnson via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; On May 28, 2016, at 3:09 AM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; It isn’t a special case because all other single-statement closures in the language work that way. It’s actually inconsistent now.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Computed properties aren’t closures so it’s not inconsistent in that sense. But it is inconsistent in that closures are the *only* value-returning code blocks that are able to use this sugar. It would be nice to see this sugar consistently allowed everywhere in the language.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; On 28 May 2016, at 09:03, Brian Christensen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; On May 27, 2016, at 13:57, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; The idea is simple:<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; • Can we make return keyword optional in cases like this?<br>&gt;&gt; &gt;&gt;&gt;&gt; • Shouldn’t this behave like @autoclosure or @noescape?<br>&gt;&gt; &gt;&gt;&gt;&gt; type A {<br>&gt;&gt; &gt;&gt;&gt;&gt; var characters: [Character] = …<br>&gt;&gt; &gt;&gt;&gt;&gt; var string: String { String(self.characters) }<br>&gt;&gt; &gt;&gt;&gt;&gt; var count: Int { 42 }<br>&gt;&gt; &gt;&gt;&gt;&gt; }<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; Is this worth a proposal or Swifty enough, what do you think?<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; Sure I could write return, but why do we allow this behavior for @noescape functions like map!?<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; While I am not necessarily against this idea, I do wonder if it’s worth making what’s going on here less obvious simply for the sake of being able to omit a six character keyword. As I understand it, one of the reasons ++/-- were removed was due to the increased &quot;burden to learn Swift as a first programming language.” This is the sort of thing that becomes another one of those special cases that has to be explained to someone new to Swift.<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; /brian<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160531/a1700b31/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>May 31, 2016 at 12:00:00pm</p></header><div class="content"><p>I&#39;d interpret that as being able to write:<br>var x: Int8 { 20 }<br>as opposed to:<br>var x: Int8 { Int8(20) }<br></p><p>- Dave Sweeris<br></p><p>&gt; On May 31, 2016, at 12:47, David Rönnqvist via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Under &quot;Proposed solution&quot; you say (emphasis mine):<br>&gt; <br>&gt; &quot;Make return optional and infer return type for single-expressions everywhere in the language:&quot;<br>&gt; <br>&gt; However the return type isn&#39;t inferred for computed properties or functions, and I don&#39;t see type inference being discussed in the proposal (other than mentioning that closures have it). <br>&gt; <br>&gt; - David<br>&gt; <br>&gt; 31 maj 2016 kl. 19:35 skrev Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt;&gt; Here is the draft proposal: https://github.com/DevAndArtist/swift-evolution/blob/single_expression_optional_return/proposals/nnnn-single-expression-optional-return.md<br>&gt;&gt; <br>&gt;&gt; Did I covered everything case? If you find some mistakes feel free to provide feedback so I can fix the proposal before I submit a PR.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Adrian Zubarev<br>&gt;&gt; Sent with Airmail<br>&gt;&gt; <br>&gt;&gt; Am 31. Mai 2016 um 18:33:09, Leonardo Pessoa via swift-evolution (swift-evolution at swift.org) schrieb:<br>&gt;&gt; <br>&gt;&gt;&gt; +1<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; L<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On 31 May 2016 at 12:47, Matthew Johnson via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;&gt; On May 28, 2016, at 3:09 AM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; It isn’t a special case because all other single-statement closures in the language work that way. It’s actually inconsistent now.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; Computed properties aren’t closures so it’s not inconsistent in that sense. But it is inconsistent in that closures are the *only* value-returning code blocks that are able to use this sugar. It would be nice to see this sugar consistently allowed everywhere in the language.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; On 28 May 2016, at 09:03, Brian Christensen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; On May 27, 2016, at 13:57, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; The idea is simple:<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; • Can we make return keyword optional in cases like this?<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; • Shouldn’t this behave like @autoclosure or @noescape?<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; type A {<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; var characters: [Character] = …<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; var string: String { String(self.characters) }<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; var count: Int { 42 }<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; Is this worth a proposal or Swifty enough, what do you think?<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; Sure I could write return, but why do we allow this behavior for @noescape functions like map!?<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; While I am not necessarily against this idea, I do wonder if it’s worth making what’s going on here less obvious simply for the sake of being able to omit a six character keyword. As I understand it, one of the reasons ++/-- were removed was due to the increased &quot;burden to learn Swift as a first programming language.” This is the sort of thing that becomes another one of those special cases that has to be explained to someone new to Swift.<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; /brian<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160531/7f7df5df/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>May 31, 2016 at 09:00:00pm</p></header><div class="content"><p>I really like the proposal in case of properties and functions, but I <br>really don&#39;t want to have<br>guard boolean else { &quot;false&quot; }<br></p><p>I feel like `return` is very important part of `guard` statement.<br>I understand the requirement for consistency with <br>properties/closures/functions, but I&#39;ll prefer to have some inconsistency <br>in language in this case and require `return` for `guard`. And in case I&#39;ll <br>have to choose all-or-nothig, I&#39;ll give -1 for the proposal.<br></p><p>I.e. IMO current `return` in properties and functions is less evil than <br>absent of `return` in `guard`.<br></p><p>On 31.05.2016 20:35, Adrian Zubarev via swift-evolution wrote:<br>&gt; Here is the draft proposal:<br>&gt; https://github.com/DevAndArtist/swift-evolution/blob/single_expression_optional_return/proposals/nnnn-single-expression-optional-return.md<br>&gt;<br>&gt; Did I covered everything case? If you find some mistakes feel free to<br>&gt; provide feedback so I can fix the proposal before I submit a PR.<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt;<br>&gt; Am 31. Mai 2016 um 18:33:09, Leonardo Pessoa via swift-evolution<br>&gt; (swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;) schrieb:<br>&gt;<br>&gt;&gt; +1<br>&gt;&gt;<br>&gt;&gt; L<br>&gt;&gt;<br>&gt;&gt; On 31 May 2016 at 12:47, Matthew Johnson via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; On May 28, 2016, at 3:09 AM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; It isn’t a special case because all other single-statement closures in the language work that way. It’s actually inconsistent now.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Computed properties aren’t closures so it’s not inconsistent in that sense.  But it is inconsistent in that closures are the *only* value-returning code blocks that are able to use this sugar.  It would be nice to see this sugar consistently allowed everywhere in the language.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; On 28 May 2016, at 09:03, Brian Christensen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; On May 27, 2016, at 13:57, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; The idea is simple:<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;     • Can we make return keyword optional in cases like this?<br>&gt;&gt; &gt;&gt;&gt;&gt;     • Shouldn’t this behave like @autoclosure or @noescape?<br>&gt;&gt; &gt;&gt;&gt;&gt; type A {<br>&gt;&gt; &gt;&gt;&gt;&gt;   var characters: [Character] = …<br>&gt;&gt; &gt;&gt;&gt;&gt;   var string: String { String(self.characters) }<br>&gt;&gt; &gt;&gt;&gt;&gt;   var count: Int { 42 }<br>&gt;&gt; &gt;&gt;&gt;&gt; }<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; Is this worth a proposal or Swifty enough, what do you think?<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; Sure I could write return, but why do we allow this behavior for @noescape functions like map!?<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; While I am not necessarily against this idea, I do wonder if it’s worth making what’s going on here less obvious simply for the sake of being able to omit a six character keyword. As I understand it, one of the reasons ++/-- were removed was due to the increased &quot;burden to learn Swift as a first programming language.” This is the sort of thing that becomes another one of those special cases that has to be explained to someone new to Swift.<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; /brian<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>May 31, 2016 at 08:00:00pm</p></header><div class="content"><p>I feel like return is very important part of guard statement. I understand the requirement for consistency with properties/closures/functions, but I’ll prefer to have some inconsistency in language in this case and require return for guard. And in case I’ll have to choose all-or-nothig, I’ll give –1 for the proposal.<br>What’s the problem with single-expression guards? guard cannot fall trough and the type is inferred as the same as its parent closure has.<br></p><p>If we’d like to have this consistence everywhere in the language, guards will be part of that as well.<br></p><p>I’d interpret that as being able to write:<br></p><p>var x: Int8 { 20 }<br>as opposed to:<br>var x: Int8 { Int8(20) }<br>Comment:<br></p><p>Integer literals are untyped and pick up the type of their context.<br></p><p>Joe Groff<br>—<br></p><p>Under “Proposed solution” you say (emphasis mine):<br></p><p>“Make return optional and infer return type for single-expressions everywhere in the language:”<br></p><p>However the return type isn’t inferred for computed properties or functions, and I don’t see type inference being discussed in the proposal (other than mentioning that closures have it).<br>Is it worth discussing? I was using Brent’s words here, because my English isn’t that great:<br></p><p>This actually doesn’t have anything to do with @autoclosure or @noescape. Any one-expression closure can omit the return statement and have an inferred return type.<br>I could remove that from the proposal to sort out any confusion. It should be crystal clear that return should be optional for single-expressions.<br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160531/df9781d5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>May 31, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On May 31, 2016, at 8:45 PM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I feel like return is very important part of guard statement. I understand the requirement for consistency with properties/closures/functions, but I’ll prefer to have some inconsistency in language in this case and require return for guard. And in case I’ll have to choose all-or-nothig, I’ll give –1 for the proposal. <br>&gt; What’s the problem with single-expression guards? guard cannot fall trough and the type is inferred as the same as its parent closure has. <br>&gt; <br>&gt; If we’d like to have this consistence everywhere in the language, guards will be part of that as well.<br>&gt; <br>&gt; I’d interpret that as being able to write:<br>&gt; <br>&gt; var x: Int8 { 20 }<br>&gt; as opposed to:<br>&gt; var x: Int8 { Int8(20) }<br>&gt; Comment:<br>&gt; <br>&gt; Integer literals are untyped and pick up the type of their context.<br>&gt; <br>&gt; Joe Groff &lt;https://twitter.com/jckarter/status/649275500506955780&gt;<br>&gt; <br>so there is no way to draw a parallel between integer literals and say ‘value’ ?<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160531/280da470/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>May 31, 2016 at 09:00:00pm</p></header><div class="content"><p>so there is no way to draw a parallel between integer literals and say ‘value’ ?<br>Could you provide an example? I don’t understand what you might mean.<br></p><p><br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160531/8f697dae/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>May 31, 2016 at 08:00:00pm</p></header><div class="content"><p>I really like the proposal in case of properties and functions, but I <br>really don&#39;t want to have <br>guard boolean else { &quot;false&quot; } <br></p><p>I feel like `return` is very important part of `guard` statement. <br>I understand the requirement for consistency with <br>properties/closures/functions, but I&#39;ll prefer to have some inconsistency <br>in language in this case and require `return` for `guard`. And in case I&#39;ll <br>have to choose all-or-nothig, I&#39;ll give -1 for the proposal. <br></p><p>I.e. IMO current `return` in properties and functions is less evil than <br>absent of `return` in `guard`.<br>I could note in alternative section that `guard` might be left out from this consistency.<br></p><p><br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160531/ffffb95a/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 31, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On May 31, 2016, at 1:16 PM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I really like the proposal in case of properties and functions, but I really don&#39;t want to have<br>&gt; guard boolean else { &quot;false” }<br></p><p>+1.  This is example *is not* a single expression code block.  There are 3 expressions (the condition, the return value in the else block, and the primary return value).<br></p><p>&gt; <br>&gt; I feel like `return` is very important part of `guard` statement.<br>&gt; I understand the requirement for consistency with properties/closures/functions, but I&#39;ll prefer to have some inconsistency in language in this case and require `return` for `guard`. And in case I&#39;ll have to choose all-or-nothig, I&#39;ll give -1 for the proposal.<br>&gt; <br>&gt; I.e. IMO current `return` in properties and functions is less evil than absent of `return` in `guard`.<br>&gt; <br>&gt; On 31.05.2016 20:35, Adrian Zubarev via swift-evolution wrote:<br>&gt;&gt; Here is the draft proposal:<br>&gt;&gt; https://github.com/DevAndArtist/swift-evolution/blob/single_expression_optional_return/proposals/nnnn-single-expression-optional-return.md<br>&gt;&gt; <br>&gt;&gt; Did I covered everything case? If you find some mistakes feel free to<br>&gt;&gt; provide feedback so I can fix the proposal before I submit a PR.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; Adrian Zubarev<br>&gt;&gt; Sent with Airmail<br>&gt;&gt; <br>&gt;&gt; Am 31. Mai 2016 um 18:33:09, Leonardo Pessoa via swift-evolution<br>&gt;&gt; (swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;) schrieb:<br>&gt;&gt; <br>&gt;&gt;&gt; +1<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; L<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On 31 May 2016 at 12:47, Matthew Johnson via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;&gt; On May 28, 2016, at 3:09 AM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; It isn’t a special case because all other single-statement closures in the language work that way. It’s actually inconsistent now.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; Computed properties aren’t closures so it’s not inconsistent in that sense.  But it is inconsistent in that closures are the *only* value-returning code blocks that are able to use this sugar.  It would be nice to see this sugar consistently allowed everywhere in the language.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; On 28 May 2016, at 09:03, Brian Christensen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; On May 27, 2016, at 13:57, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; The idea is simple:<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;     • Can we make return keyword optional in cases like this?<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;     • Shouldn’t this behave like @autoclosure or @noescape?<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; type A {<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;   var characters: [Character] = …<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;   var string: String { String(self.characters) }<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;   var count: Int { 42 }<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; Is this worth a proposal or Swifty enough, what do you think?<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; Sure I could write return, but why do we allow this behavior for @noescape functions like map!?<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; While I am not necessarily against this idea, I do wonder if it’s worth making what’s going on here less obvious simply for the sake of being able to omit a six character keyword. As I understand it, one of the reasons ++/-- were removed was due to the increased &quot;burden to learn Swift as a first programming language.” This is the sort of thing that becomes another one of those special cases that has to be explained to someone new to Swift.<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; /brian<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>May 31, 2016 at 08:00:00pm</p></header><div class="content"><p>+1. This is example *is not* a single expression code block. There are 3 expressions (the condition, the return value in the else block, and the primary return value). <br>The `else` block is a returning single expression block. I can’t show the `guard` example without any returning scope.<br></p><p>You said it yourself &quot;everywhere in the language“. It’s not “everywhere“ if we would left out `guards` else-returning block.<br></p><p>If we’d allow this we could also write:<br></p><p>func test(boolean: Bool) {<br>    guard boolean else {}<br>    print(&quot;true&quot;)<br>}<br>This is useless and less readable.<br></p><p>But we already can do this with closures:<br></p><p>let nop = {} // useless<br></p><p>switch value {<br>   ...<br>   default: {}() // do nothing<br>}<br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160531/11c844d7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 31, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On May 31, 2016, at 1:59 PM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; +1. This is example *is not* a single expression code block. There are 3 expressions (the condition, the return value in the else block, and the primary return value). <br>&gt; <br>&gt; The `else` block is a returning single expression block. I can’t show the `guard` example without any returning scope.<br>&gt; <br>&gt; You said it yourself &quot;everywhere in the language“. It’s not “everywhere“ if we would left out `guards` else-returning block.<br></p><p>I was speaking casually and meant “top level code blocks that return a value”.  You are right that I wasn’t totally clear about that.  I replied to your initial post with the clarification I believe is necessary.<br></p><p>&gt; If we’d allow this we could also write:<br>&gt; <br>&gt; func test(boolean: Bool) {<br>&gt;     guard boolean else {}<br>&gt;     print(&quot;true&quot;)<br>&gt; }<br>&gt; <br>&gt; This is useless and less readable.<br>&gt; <br>&gt; But we already can do this with closures:<br>&gt; <br>&gt; let nop = {} // useless<br>&gt; <br>&gt; switch value {<br>&gt;    ...<br>&gt;    default: {}() // do nothing<br>&gt; }<br>&gt; <br>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160531/16eb055f/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d02ed1b20fc3e0fa1592ce5982f24d2b?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>Leonardo Pessoa</string> &lt;me at lmpessoa.com&gt;<p>May 31, 2016 at 04:00:00pm</p></header><div class="content"><p>I&#39;d actually like to see a change in guard so that I don&#39;t need those<br>braces. I&#39;d like something more readable like<br></p><p>|   guard cond1 or return nil<br>|   guard cond2 or throw MyError.IllegalValue<br>|   guard cond3 or do { ... }<br></p><p>It may add more cases for the compiler to handle but in all cases I<br>used guard so far the block was never really needed. But I think this<br>is out of the scope of this thread.<br></p><p>L<br></p><p>On 31 May 2016 at 15:59, Adrian Zubarev via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt; +1. This is example *is not* a single expression code block. There are 3<br>&gt; expressions (the condition, the return value in the else block, and the<br>&gt; primary return value).<br>&gt;<br>&gt; The `else` block is a returning single expression block. I can’t show the<br>&gt; `guard` example without any returning scope.<br>&gt;<br>&gt; You said it yourself &quot;everywhere in the language“. It’s not “everywhere“ if<br>&gt; we would left out `guards` else-returning block.<br>&gt;<br>&gt; If we’d allow this we could also write:<br>&gt;<br>&gt; func test(boolean: Bool) {<br>&gt;     guard boolean else {}<br>&gt;     print(&quot;true&quot;)<br>&gt; }<br>&gt;<br>&gt; This is useless and less readable.<br>&gt;<br>&gt; But we already can do this with closures:<br>&gt;<br>&gt; let nop = {} // useless<br>&gt;<br>&gt; switch value {<br>&gt;    ...<br>&gt;    default: {}() // do nothing<br>&gt; }<br>&gt;<br>&gt; --<br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>May 31, 2016 at 09:00:00pm</p></header><div class="content"><p>I&#39;d actually like to see a change in guard so that I don&#39;t need those <br>braces. I&#39;d like something more readable like <br></p><p>| guard cond1 or return nil <br>| guard cond2 or throw MyError.IllegalValue <br>| guard cond3 or do { ... } <br></p><p>It may add more cases for the compiler to handle but in all cases I <br>used guard so far the block was never really needed. But I think this <br>is out of the scope of this thread. <br>This is a different topic, because it would create an alternative for a single-expression guard-else-block. ;)<br></p><p>That looks good.  You might want to include more complex expressions just to make it clear that this isn’t limited to literal-returning expressions.  Otherwise I think it covers it.  Thanks for putting this together!  I’ve wanted this for a long time… :)<br>Is this example enough for you, what do you thing?<br></p><p>// Today:<br>public struct Character {<br>     <br>    private let _pointer: UnsafePointer&lt;Swift.Character&gt;<br>    public let source: Module.Source<br>    public var value: Swift.Character {<br>        return self._pointer.memory<br>    }<br>    ...<br>}<br></p><p>// Rewritten:<br>public struct Character {<br>    ...<br>    public var value: Swift.Character { self._pointer.memory }<br>    ...<br>}<br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160531/663b696e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>May 31, 2016 at 09:00:00pm</p></header><div class="content"><p>I apologize for the tons of typos I make. :/<br></p><p><br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 31. Mai 2016 um 21:55:53, Adrian Zubarev (adrian.zubarev at devandartist.com) schrieb:<br></p><p>I&#39;d actually like to see a change in guard so that I don&#39;t need those <br>braces. I&#39;d like something more readable like <br></p><p>| guard cond1 or return nil <br>| guard cond2 or throw MyError.IllegalValue <br>| guard cond3 or do { ... } <br></p><p>It may add more cases for the compiler to handle but in all cases I <br>used guard so far the block was never really needed. But I think this <br>is out of the scope of this thread. <br>This is a different topic, because it would create an alternative for a single-expression guard-else-block. ;)<br></p><p>That looks good.  You might want to include more complex expressions just to make it clear that this isn’t limited to literal-returning expressions.  Otherwise I think it covers it.  Thanks for putting this together!  I’ve wanted this for a long time… :)<br>Is this example enough for you, what do you thing?<br></p><p>// Today:<br>public struct Character {<br>      <br>    private let _pointer: UnsafePointer&lt;Swift.Character&gt;<br>    public let source: Module.Source<br>    public var value: Swift.Character {<br>        return self._pointer.memory<br>    }<br>    ...<br>}<br></p><p>// Rewritten:<br>public struct Character {<br>    ...<br>    public var value: Swift.Character { self._pointer.memory }<br>    ...<br>}<br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160531/f584d667/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>May 31, 2016 at 11:00:00pm</p></header><div class="content"><p>On 31.05.2016 22:42, Leonardo Pessoa via swift-evolution wrote:<br>&gt; I&#39;d actually like to see a change in guard so that I don&#39;t need those<br>&gt; braces. I&#39;d like something more readable like<br>&gt;<br>&gt; |   guard cond1 or return nil<br>&gt; |   guard cond2 or throw MyError.IllegalValue<br>&gt; |   guard cond3 or do { ... }<br></p><p>I partially support this, but don&#39;t like this &#39;or&#39;..<br>For me &#39;otherwise&#39; or &#39;else&#39; is better, but as soon as braces after `else` <br>is required in `if` statement, for `guard` we need another word to be able <br>to omit braces...<br></p><p>guard cond otherwise return<br>guard cond otherwise return nil<br>guard cond otherwise throw MyError.IllegalValue<br>guard cond otherwise do { ... }<br></p><p>But I feel like this will be inconsistent with other parts of language, <br>like `if` (don&#39;t you want to be able to do `if cond return nil`?), so I <br>don&#39;t think it&#39;s worth to discuss this.<br></p><p>Hmm.. just as thought experiment :<br></p><p>if cond return nil else do {...}<br></p><p>if cond do {...} else return nil<br></p><p>if cond throw MyError.IllegalValue else return nil<br></p><p>if cond do {...} else do {...}<br></p><p>&gt;<br>&gt; It may add more cases for the compiler to handle but in all cases I<br>&gt; used guard so far the block was never really needed. But I think this<br>&gt; is out of the scope of this thread.<br>&gt;<br>&gt; L<br>&gt;<br>&gt; On 31 May 2016 at 15:59, Adrian Zubarev via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; +1. This is example *is not* a single expression code block. There are 3<br>&gt;&gt; expressions (the condition, the return value in the else block, and the<br>&gt;&gt; primary return value).<br>&gt;&gt;<br>&gt;&gt; The `else` block is a returning single expression block. I can’t show the<br>&gt;&gt; `guard` example without any returning scope.<br>&gt;&gt;<br>&gt;&gt; You said it yourself &quot;everywhere in the language“. It’s not “everywhere“ if<br>&gt;&gt; we would left out `guards` else-returning block.<br>&gt;&gt;<br>&gt;&gt; If we’d allow this we could also write:<br>&gt;&gt;<br>&gt;&gt; func test(boolean: Bool) {<br>&gt;&gt;     guard boolean else {}<br>&gt;&gt;     print(&quot;true&quot;)<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; This is useless and less readable.<br>&gt;&gt;<br>&gt;&gt; But we already can do this with closures:<br>&gt;&gt;<br>&gt;&gt; let nop = {} // useless<br>&gt;&gt;<br>&gt;&gt; switch value {<br>&gt;&gt;    ...<br>&gt;&gt;    default: {}() // do nothing<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Adrian Zubarev<br>&gt;&gt; Sent with Airmail<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>May 31, 2016 at 10:00:00pm</p></header><div class="content"><p>I added the example I posted in my last reply and submitted a pull request. <br></p><p><br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160531/edaa3ccd/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>June  1, 2016 at 06:00:00am</p></header><div class="content"><p>+1<br></p><p>`return` in guards should stay, because there one has to use either `return`, `continue` or `break`. It would be ugly and inconsistent if one of these could be left out.<br></p><p>-Thorsten <br></p><p>&gt; Am 31.05.2016 um 20:16 schrieb Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; I really like the proposal in case of properties and functions, but I really don&#39;t want to have<br>&gt; guard boolean else { &quot;false&quot; }<br>&gt; <br>&gt; I feel like `return` is very important part of `guard` statement.<br>&gt; I understand the requirement for consistency with properties/closures/functions, but I&#39;ll prefer to have some inconsistency in language in this case and require `return` for `guard`. And in case I&#39;ll have to choose all-or-nothig, I&#39;ll give -1 for the proposal.<br>&gt; <br>&gt; I.e. IMO current `return` in properties and functions is less evil than absent of `return` in `guard`.<br>&gt; <br>&gt;&gt; On 31.05.2016 20:35, Adrian Zubarev via swift-evolution wrote:<br>&gt;&gt; Here is the draft proposal:<br>&gt;&gt; https://github.com/DevAndArtist/swift-evolution/blob/single_expression_optional_return/proposals/nnnn-single-expression-optional-return.md<br>&gt;&gt; <br>&gt;&gt; Did I covered everything case? If you find some mistakes feel free to<br>&gt;&gt; provide feedback so I can fix the proposal before I submit a PR.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; Adrian Zubarev<br>&gt;&gt; Sent with Airmail<br>&gt;&gt; <br>&gt;&gt; Am 31. Mai 2016 um 18:33:09, Leonardo Pessoa via swift-evolution<br>&gt;&gt; (swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;) schrieb:<br>&gt;&gt; <br>&gt;&gt;&gt; +1<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; L<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On 31 May 2016 at 12:47, Matthew Johnson via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;&gt; On May 28, 2016, at 3:09 AM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; It isn’t a special case because all other single-statement closures in the language work that way. It’s actually inconsistent now.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; Computed properties aren’t closures so it’s not inconsistent in that sense.  But it is inconsistent in that closures are the *only* value-returning code blocks that are able to use this sugar.  It would be nice to see this sugar consistently allowed everywhere in the language.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; On 28 May 2016, at 09:03, Brian Christensen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; On May 27, 2016, at 13:57, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; The idea is simple:<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;     • Can we make return keyword optional in cases like this?<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;     • Shouldn’t this behave like @autoclosure or @noescape?<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; type A {<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;   var characters: [Character] = …<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;   var string: String { String(self.characters) }<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;   var count: Int { 42 }<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; Is this worth a proposal or Swifty enough, what do you think?<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; Sure I could write return, but why do we allow this behavior for @noescape functions like map!?<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; While I am not necessarily against this idea, I do wonder if it’s worth making what’s going on here less obvious simply for the sake of being able to omit a six character keyword. As I understand it, one of the reasons ++/-- were removed was due to the increased &quot;burden to learn Swift as a first programming language.” This is the sort of thing that becomes another one of those special cases that has to be explained to someone new to Swift.<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; /brian<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>June  1, 2016 at 07:00:00pm</p></header><div class="content"><p>Given that Swift 3 is winding down, we are in a mode of declining PRs for proposals that don’t align with its goals. Please bring this back up for discussion this fall, thanks for understanding.<br>Closed by Chris. Sad but we’ll have to wait a little longer for this change.<br></p><p><br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 1. Juni 2016 um 06:58:27, Thorsten Seitz (tseitz42 at icloud.com) schrieb:<br></p><p>+1  <br></p><p>`return` in guards should stay, because there one has to use either `return`, `continue` or `break`. It would be ugly and inconsistent if one of these could be left out.  <br></p><p>-Thorsten  <br></p><p>&gt; Am 31.05.2016 um 20:16 schrieb Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt;:  <br>&gt;  <br>&gt; I really like the proposal in case of properties and functions, but I really don&#39;t want to have  <br>&gt; guard boolean else { &quot;false&quot; }  <br>&gt;  <br>&gt; I feel like `return` is very important part of `guard` statement.  <br>&gt; I understand the requirement for consistency with properties/closures/functions, but I&#39;ll prefer to have some inconsistency in language in this case and require `return` for `guard`. And in case I&#39;ll have to choose all-or-nothig, I&#39;ll give -1 for the proposal.  <br>&gt;  <br>&gt; I.e. IMO current `return` in properties and functions is less evil than absent of `return` in `guard`.  <br>&gt;  <br>&gt;&gt; On 31.05.2016 20:35, Adrian Zubarev via swift-evolution wrote:  <br>&gt;&gt; Here is the draft proposal:  <br>&gt;&gt; https://github.com/DevAndArtist/swift-evolution/blob/single_expression_optional_return/proposals/nnnn-single-expression-optional-return.md  <br>&gt;&gt;  <br>&gt;&gt; Did I covered everything case? If you find some mistakes feel free to  <br>&gt;&gt; provide feedback so I can fix the proposal before I submit a PR.  <br>&gt;&gt;  <br>&gt;&gt;  <br>&gt;&gt;  <br>&gt;&gt; --  <br>&gt;&gt; Adrian Zubarev  <br>&gt;&gt; Sent with Airmail  <br>&gt;&gt;  <br>&gt;&gt; Am 31. Mai 2016 um 18:33:09, Leonardo Pessoa via swift-evolution  <br>&gt;&gt; (swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;) schrieb:  <br>&gt;&gt;  <br>&gt;&gt;&gt; +1  <br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; L  <br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; On 31 May 2016 at 12:47, Matthew Johnson via swift-evolution  <br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:  <br>&gt;&gt;&gt; &gt;  <br>&gt;&gt;&gt; &gt;&gt; On May 28, 2016, at 3:09 AM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:  <br>&gt;&gt;&gt; &gt;&gt;  <br>&gt;&gt;&gt; &gt;&gt; It isn’t a special case because all other single-statement closures in the language work that way. It’s actually inconsistent now.  <br>&gt;&gt;&gt; &gt;  <br>&gt;&gt;&gt; &gt; Computed properties aren’t closures so it’s not inconsistent in that sense. But it is inconsistent in that closures are the *only* value-returning code blocks that are able to use this sugar. It would be nice to see this sugar consistently allowed everywhere in the language.  <br>&gt;&gt;&gt; &gt;  <br>&gt;&gt;&gt; &gt;&gt;  <br>&gt;&gt;&gt; &gt;&gt;&gt; On 28 May 2016, at 09:03, Brian Christensen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:  <br>&gt;&gt;&gt; &gt;&gt;&gt;  <br>&gt;&gt;&gt; &gt;&gt;&gt; On May 27, 2016, at 13:57, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:  <br>&gt;&gt;&gt; &gt;&gt;&gt;  <br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; The idea is simple:  <br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; • Can we make return keyword optional in cases like this?  <br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; • Shouldn’t this behave like @autoclosure or @noescape?  <br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; type A {  <br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; var characters: [Character] = …  <br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; var string: String { String(self.characters) }  <br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; var count: Int { 42 }  <br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; }  <br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; Is this worth a proposal or Swifty enough, what do you think?  <br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; Sure I could write return, but why do we allow this behavior for @noescape functions like map!?  <br>&gt;&gt;&gt; &gt;&gt;&gt;  <br>&gt;&gt;&gt; &gt;&gt;&gt; While I am not necessarily against this idea, I do wonder if it’s worth making what’s going on here less obvious simply for the sake of being able to omit a six character keyword. As I understand it, one of the reasons ++/-- were removed was due to the increased &quot;burden to learn Swift as a first programming language.” This is the sort of thing that becomes another one of those special cases that has to be explained to someone new to Swift.  <br>&gt;&gt;&gt; &gt;&gt;&gt;  <br>&gt;&gt;&gt; &gt;&gt;&gt; /brian  <br>&gt;&gt;&gt; &gt;&gt;&gt;  <br>&gt;&gt;&gt; &gt;&gt;&gt; _______________________________________________  <br>&gt;&gt;&gt; &gt;&gt;&gt; swift-evolution mailing list  <br>&gt;&gt;&gt; &gt;&gt;&gt; swift-evolution at swift.org  <br>&gt;&gt;&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution  <br>&gt;&gt;&gt; &gt;&gt;  <br>&gt;&gt;&gt; &gt;&gt; _______________________________________________  <br>&gt;&gt;&gt; &gt;&gt; swift-evolution mailing list  <br>&gt;&gt;&gt; &gt;&gt; swift-evolution at swift.org  <br>&gt;&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution  <br>&gt;&gt;&gt; &gt;  <br>&gt;&gt;&gt; &gt; _______________________________________________  <br>&gt;&gt;&gt; &gt; swift-evolution mailing list  <br>&gt;&gt;&gt; &gt; swift-evolution at swift.org  <br>&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution  <br>&gt;&gt;&gt; _______________________________________________  <br>&gt;&gt;&gt; swift-evolution mailing list  <br>&gt;&gt;&gt; swift-evolution at swift.org  <br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution  <br>&gt;&gt;  <br>&gt;&gt;  <br>&gt;&gt;  <br>&gt;&gt; _______________________________________________  <br>&gt;&gt; swift-evolution mailing list  <br>&gt;&gt; swift-evolution at swift.org  <br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution  <br>&gt; _______________________________________________  <br>&gt; swift-evolution mailing list  <br>&gt; swift-evolution at swift.org  <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution  <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160601/d940f4a7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June  1, 2016 at 08:00:00pm</p></header><div class="content"><p>Do we have any &#39;feature&#39; to not just throw away of proposals(and then scan <br>mail list and remember), but put them in queue of proposals that should be <br>reviewed after Swift 3 is released?<br></p><p>Probably some list of such proposals on site, don&#39;t know. So I believe any <br>proposal that would be raised now and got support from community - should <br>be added to that queue on some page somewhere on swift.org<br></p><p>On 01.06.2016 20:03, Adrian Zubarev via swift-evolution wrote:<br>&gt;     Given that Swift 3 is winding down, we are in a mode of declining PRs<br>&gt;     for proposals that don’t align with its goals. Please bring this back<br>&gt;     up for discussion this fall, thanks for understanding.<br>&gt;<br>&gt; Closed by Chris. Sad but we’ll have to wait a little longer for this change.<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt;<br>&gt; Am 1. Juni 2016 um 06:58:27, Thorsten Seitz (tseitz42 at icloud.com<br>&gt; &lt;mailto:tseitz42 at icloud.com&gt;) schrieb:<br>&gt;<br>&gt;&gt; +1<br>&gt;&gt;<br>&gt;&gt; `return` in guards should stay, because there one has to use either<br>&gt;&gt; `return`, `continue` or `break`. It would be ugly and inconsistent if one<br>&gt;&gt; of these could be left out.<br>&gt;&gt;<br>&gt;&gt; -Thorsten<br>&gt;&gt;<br>&gt;&gt; &gt; Am 31.05.2016 um 20:16 schrieb Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I really like the proposal in case of properties and functions, but I really don&#39;t want to have<br>&gt;&gt; &gt; guard boolean else { &quot;false&quot; }<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I feel like `return` is very important part of `guard` statement.<br>&gt;&gt; &gt; I understand the requirement for consistency with properties/closures/functions, but I&#39;ll prefer to have some inconsistency in language in this case and require `return` for `guard`. And in case I&#39;ll have to choose all-or-nothig, I&#39;ll give -1 for the proposal.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I.e. IMO current `return` in properties and functions is less evil than absent of `return` in `guard`.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; On 31.05.2016 20:35, Adrian Zubarev via swift-evolution wrote:<br>&gt;&gt; &gt;&gt; Here is the draft proposal:<br>&gt;&gt; &gt;&gt; https://github.com/DevAndArtist/swift-evolution/blob/single_expression_optional_return/proposals/nnnn-single-expression-optional-return.md<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Did I covered everything case? If you find some mistakes feel free to<br>&gt;&gt; &gt;&gt; provide feedback so I can fix the proposal before I submit a PR.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; --<br>&gt;&gt; &gt;&gt; Adrian Zubarev<br>&gt;&gt; &gt;&gt; Sent with Airmail<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Am 31. Mai 2016 um 18:33:09, Leonardo Pessoa via swift-evolution<br>&gt;&gt; &gt;&gt; (swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;) schrieb:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; +1<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; L<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; On 31 May 2016 at 12:47, Matthew Johnson via swift-evolution<br>&gt;&gt; &gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; On May 28, 2016, at 3:09 AM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; It isn’t a special case because all other single-statement closures in the language work that way. It’s actually inconsistent now.<br>&gt;&gt; &gt;&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;&gt; &gt; Computed properties aren’t closures so it’s not inconsistent in that sense.  But it is inconsistent in that closures are the *only* value-returning code blocks that are able to use this sugar.  It would be nice to see this sugar consistently allowed everywhere in the language.<br>&gt;&gt; &gt;&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; On 28 May 2016, at 09:03, Brian Christensen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; On May 27, 2016, at 13:57, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; The idea is simple:<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;     • Can we make return keyword optional in cases like this?<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;     • Shouldn’t this behave like @autoclosure or @noescape?<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; type A {<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;   var characters: [Character] = …<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;   var string: String { String(self.characters) }<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;   var count: Int { 42 }<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; }<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; Is this worth a proposal or Swifty enough, what do you think?<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; Sure I could write return, but why do we allow this behavior for @noescape functions like map!?<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; While I am not necessarily against this idea, I do wonder if it’s worth making what’s going on here less obvious simply for the sake of being able to omit a six character keyword. As I understand it, one of the reasons ++/-- were removed was due to the increased &quot;burden to learn Swift as a first programming language.” This is the sort of thing that becomes another one of those special cases that has to be explained to someone new to Swift.<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; /brian<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>June  1, 2016 at 07:00:00pm</p></header><div class="content"><p>Feel free to convince the core team to add such a list. ;)<br></p><p><br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 1. Juni 2016 um 19:17:25, Vladimir.S (svabox at gmail.com) schrieb:<br></p><p>Do we have any &#39;feature&#39; to not just throw away of proposals(and then scan  <br>mail list and remember), but put them in queue of proposals that should be  <br>reviewed after Swift 3 is released?  <br></p><p>Probably some list of such proposals on site, don&#39;t know. So I believe any  <br>proposal that would be raised now and got support from community - should  <br>be added to that queue on some page somewhere on swift.org  <br></p><p>On 01.06.2016 20:03, Adrian Zubarev via swift-evolution wrote:  <br>&gt; Given that Swift 3 is winding down, we are in a mode of declining PRs  <br>&gt; for proposals that don’t align with its goals. Please bring this back  <br>&gt; up for discussion this fall, thanks for understanding.  <br>&gt;  <br>&gt; Closed by Chris. Sad but we’ll have to wait a little longer for this change.  <br>&gt;  <br>&gt;  <br>&gt;  <br>&gt; --  <br>&gt; Adrian Zubarev  <br>&gt; Sent with Airmail  <br>&gt;  <br>&gt; Am 1. Juni 2016 um 06:58:27, Thorsten Seitz (tseitz42 at icloud.com  <br>&gt; &lt;mailto:tseitz42 at icloud.com&gt;) schrieb:  <br>&gt;  <br>&gt;&gt; +1  <br>&gt;&gt;  <br>&gt;&gt; `return` in guards should stay, because there one has to use either  <br>&gt;&gt; `return`, `continue` or `break`. It would be ugly and inconsistent if one  <br>&gt;&gt; of these could be left out.  <br>&gt;&gt;  <br>&gt;&gt; -Thorsten  <br>&gt;&gt;  <br>&gt;&gt; &gt; Am 31.05.2016 um 20:16 schrieb Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt;:  <br>&gt;&gt; &gt;  <br>&gt;&gt; &gt; I really like the proposal in case of properties and functions, but I really don&#39;t want to have  <br>&gt;&gt; &gt; guard boolean else { &quot;false&quot; }  <br>&gt;&gt; &gt;  <br>&gt;&gt; &gt; I feel like `return` is very important part of `guard` statement.  <br>&gt;&gt; &gt; I understand the requirement for consistency with properties/closures/functions, but I&#39;ll prefer to have some inconsistency in language in this case and require `return` for `guard`. And in case I&#39;ll have to choose all-or-nothig, I&#39;ll give -1 for the proposal.  <br>&gt;&gt; &gt;  <br>&gt;&gt; &gt; I.e. IMO current `return` in properties and functions is less evil than absent of `return` in `guard`.  <br>&gt;&gt; &gt;  <br>&gt;&gt; &gt;&gt; On 31.05.2016 20:35, Adrian Zubarev via swift-evolution wrote:  <br>&gt;&gt; &gt;&gt; Here is the draft proposal:  <br>&gt;&gt; &gt;&gt; https://github.com/DevAndArtist/swift-evolution/blob/single_expression_optional_return/proposals/nnnn-single-expression-optional-return.md  <br>&gt;&gt; &gt;&gt;  <br>&gt;&gt; &gt;&gt; Did I covered everything case? If you find some mistakes feel free to  <br>&gt;&gt; &gt;&gt; provide feedback so I can fix the proposal before I submit a PR.  <br>&gt;&gt; &gt;&gt;  <br>&gt;&gt; &gt;&gt;  <br>&gt;&gt; &gt;&gt;  <br>&gt;&gt; &gt;&gt; --  <br>&gt;&gt; &gt;&gt; Adrian Zubarev  <br>&gt;&gt; &gt;&gt; Sent with Airmail  <br>&gt;&gt; &gt;&gt;  <br>&gt;&gt; &gt;&gt; Am 31. Mai 2016 um 18:33:09, Leonardo Pessoa via swift-evolution  <br>&gt;&gt; &gt;&gt; (swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;) schrieb:  <br>&gt;&gt; &gt;&gt;  <br>&gt;&gt; &gt;&gt;&gt; +1  <br>&gt;&gt; &gt;&gt;&gt;  <br>&gt;&gt; &gt;&gt;&gt; L  <br>&gt;&gt; &gt;&gt;&gt;  <br>&gt;&gt; &gt;&gt;&gt; On 31 May 2016 at 12:47, Matthew Johnson via swift-evolution  <br>&gt;&gt; &gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:  <br>&gt;&gt; &gt;&gt;&gt; &gt;  <br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; On May 28, 2016, at 3:09 AM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:  <br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;  <br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; It isn’t a special case because all other single-statement closures in the language work that way. It’s actually inconsistent now.  <br>&gt;&gt; &gt;&gt;&gt; &gt;  <br>&gt;&gt; &gt;&gt;&gt; &gt; Computed properties aren’t closures so it’s not inconsistent in that sense. But it is inconsistent in that closures are the *only* value-returning code blocks that are able to use this sugar. It would be nice to see this sugar consistently allowed everywhere in the language.  <br>&gt;&gt; &gt;&gt;&gt; &gt;  <br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;  <br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; On 28 May 2016, at 09:03, Brian Christensen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:  <br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;  <br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; On May 27, 2016, at 13:57, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:  <br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;  <br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; The idea is simple:  <br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;  <br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; • Can we make return keyword optional in cases like this?  <br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; • Shouldn’t this behave like @autoclosure or @noescape?  <br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; type A {  <br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; var characters: [Character] = …  <br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; var string: String { String(self.characters) }  <br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; var count: Int { 42 }  <br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; }  <br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;  <br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; Is this worth a proposal or Swifty enough, what do you think?  <br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;  <br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; Sure I could write return, but why do we allow this behavior for @noescape functions like map!?  <br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;  <br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; While I am not necessarily against this idea, I do wonder if it’s worth making what’s going on here less obvious simply for the sake of being able to omit a six character keyword. As I understand it, one of the reasons ++/-- were removed was due to the increased &quot;burden to learn Swift as a first programming language.” This is the sort of thing that becomes another one of those special cases that has to be explained to someone new to Swift.  <br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;  <br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; /brian  <br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;  <br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; _______________________________________________  <br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; swift-evolution mailing list  <br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; swift-evolution at swift.org  <br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution  <br>&gt;&gt; &gt;&gt;&gt; &gt;&gt;  <br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; _______________________________________________  <br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; swift-evolution mailing list  <br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; swift-evolution at swift.org  <br>&gt;&gt; &gt;&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution  <br>&gt;&gt; &gt;&gt;&gt; &gt;  <br>&gt;&gt; &gt;&gt;&gt; &gt; _______________________________________________  <br>&gt;&gt; &gt;&gt;&gt; &gt; swift-evolution mailing list  <br>&gt;&gt; &gt;&gt;&gt; &gt; swift-evolution at swift.org  <br>&gt;&gt; &gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution  <br>&gt;&gt; &gt;&gt;&gt; _______________________________________________  <br>&gt;&gt; &gt;&gt;&gt; swift-evolution mailing list  <br>&gt;&gt; &gt;&gt;&gt; swift-evolution at swift.org  <br>&gt;&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution  <br>&gt;&gt; &gt;&gt;  <br>&gt;&gt; &gt;&gt;  <br>&gt;&gt; &gt;&gt;  <br>&gt;&gt; &gt;&gt; _______________________________________________  <br>&gt;&gt; &gt;&gt; swift-evolution mailing list  <br>&gt;&gt; &gt;&gt; swift-evolution at swift.org  <br>&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution  <br>&gt;&gt; &gt; _______________________________________________  <br>&gt;&gt; &gt; swift-evolution mailing list  <br>&gt;&gt; &gt; swift-evolution at swift.org  <br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution  <br>&gt;  <br>&gt;  <br>&gt;  <br>&gt; _______________________________________________  <br>&gt; swift-evolution mailing list  <br>&gt; swift-evolution at swift.org  <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution  <br>&gt;  <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160601/6fac031c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>June  2, 2016 at 07:00:00am</p></header><div class="content"><p>I imagine you can use a combination of:<br></p><p>*Deferred for Future Discussion*:<br>    https://github.com/apple/swift-evolution#deferred-for-future-discussion<br></p><p>*Accepted proposals which do not have a complete implementation:*<br></p><p>https://github.com/apple/swift-evolution#accepted-proposals-which-do-not-have-a-complete-implementation<br>*Pull requests:*<br>    https://github.com/apple/swift-evolution/pulls<br></p><p><br></p><p>On Thu, Jun 2, 2016 at 3:25 AM, Adrian Zubarev via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Feel free to convince the core team to add such a list. ;)<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt;<br>&gt; Am 1. Juni 2016 um 19:17:25, Vladimir.S (svabox at gmail.com) schrieb:<br>&gt;<br>&gt; Do we have any &#39;feature&#39; to not just throw away of proposals(and then scan<br>&gt; mail list and remember), but put them in queue of proposals that should be<br>&gt; reviewed after Swift 3 is released?<br>&gt;<br>&gt; Probably some list of such proposals on site, don&#39;t know. So I believe any<br>&gt; proposal that would be raised now and got support from community - should<br>&gt; be added to that queue on some page somewhere on swift.org<br>&gt;<br>&gt; On 01.06.2016 20:03, Adrian Zubarev via swift-evolution wrote:<br>&gt; &gt; Given that Swift 3 is winding down, we are in a mode of declining PRs<br>&gt; &gt; for proposals that don’t align with its goals. Please bring this back<br>&gt; &gt; up for discussion this fall, thanks for understanding.<br>&gt; &gt;<br>&gt; &gt; Closed by Chris. Sad but we’ll have to wait a little longer for this<br>&gt; change.<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; Adrian Zubarev<br>&gt; &gt; Sent with Airmail<br>&gt; &gt;<br>&gt; &gt; Am 1. Juni 2016 um 06:58:27, Thorsten Seitz (tseitz42 at icloud.com<br>&gt; &gt; &lt;mailto:tseitz42 at icloud.com&gt;) schrieb:<br>&gt; &gt;<br>&gt; &gt;&gt; +1<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; `return` in guards should stay, because there one has to use either<br>&gt; &gt;&gt; `return`, `continue` or `break`. It would be ugly and inconsistent if<br>&gt; one<br>&gt; &gt;&gt; of these could be left out.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; -Thorsten<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt; Am 31.05.2016 um 20:16 schrieb Vladimir.S via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt;:<br>&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt; &gt; I really like the proposal in case of properties and functions, but I<br>&gt; really don&#39;t want to have<br>&gt; &gt;&gt; &gt; guard boolean else { &quot;false&quot; }<br>&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt; &gt; I feel like `return` is very important part of `guard` statement.<br>&gt; &gt;&gt; &gt; I understand the requirement for consistency with<br>&gt; properties/closures/functions, but I&#39;ll prefer to have some inconsistency<br>&gt; in language in this case and require `return` for `guard`. And in case I&#39;ll<br>&gt; have to choose all-or-nothig, I&#39;ll give -1 for the proposal.<br>&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt; &gt; I.e. IMO current `return` in properties and functions is less evil<br>&gt; than absent of `return` in `guard`.<br>&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt; &gt;&gt; On 31.05.2016 20:35, Adrian Zubarev via swift-evolution wrote:<br>&gt; &gt;&gt; &gt;&gt; Here is the draft proposal:<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; https://github.com/DevAndArtist/swift-evolution/blob/single_expression_optional_return/proposals/nnnn-single-expression-optional-return.md<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; Did I covered everything case? If you find some mistakes feel free<br>&gt; to<br>&gt; &gt;&gt; &gt;&gt; provide feedback so I can fix the proposal before I submit a PR.<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; --<br>&gt; &gt;&gt; &gt;&gt; Adrian Zubarev<br>&gt; &gt;&gt; &gt;&gt; Sent with Airmail<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; Am 31. Mai 2016 um 18:33:09, Leonardo Pessoa via swift-evolution<br>&gt; &gt;&gt; &gt;&gt; (swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;)<br>&gt; schrieb:<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; +1<br>&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; L<br>&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; On 31 May 2016 at 12:47, Matthew Johnson via swift-evolution<br>&gt; &gt;&gt; &gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; On May 28, 2016, at 3:09 AM, David Hart via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; It isn’t a special case because all other single-statement<br>&gt; closures in the language work that way. It’s actually inconsistent now.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt; Computed properties aren’t closures so it’s not inconsistent in<br>&gt; that sense. But it is inconsistent in that closures are the *only*<br>&gt; value-returning code blocks that are able to use this sugar. It would be<br>&gt; nice to see this sugar consistently allowed everywhere in the language.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; On 28 May 2016, at 09:03, Brian Christensen via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; On May 27, 2016, at 13:57, Adrian Zubarev via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; The idea is simple:<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; • Can we make return keyword optional in cases like this?<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; • Shouldn’t this behave like @autoclosure or @noescape?<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; type A {<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; var characters: [Character] = …<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; var string: String { String(self.characters) }<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; var count: Int { 42 }<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; }<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; Is this worth a proposal or Swifty enough, what do you think?<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; Sure I could write return, but why do we allow this behavior<br>&gt; for @noescape functions like map!?<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; While I am not necessarily against this idea, I do wonder if<br>&gt; it’s worth making what’s going on here less obvious simply for the sake of<br>&gt; being able to omit a six character keyword. As I understand it, one of the<br>&gt; reasons ++/-- were removed was due to the increased &quot;burden to learn Swift<br>&gt; as a first programming language.” This is the sort of thing that becomes<br>&gt; another one of those special cases that has to be explained to someone new<br>&gt; to Swift.<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; /brian<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt; _______________________________________________<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt; swift-evolution at swift.org<br>&gt; &gt;&gt; &gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt; &gt; _______________________________________________<br>&gt; &gt;&gt; &gt; swift-evolution mailing list<br>&gt; &gt;&gt; &gt; swift-evolution at swift.org<br>&gt; &gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160602/488b0346/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 31, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On May 31, 2016, at 12:35 PM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Here is the draft proposal: https://github.com/DevAndArtist/swift-evolution/blob/single_expression_optional_return/proposals/nnnn-single-expression-optional-return.md &lt;https://github.com/DevAndArtist/swift-evolution/blob/single_expression_optional_return/proposals/nnnn-single-expression-optional-return.md&gt;<br>&gt; Did I covered everything case? If you find some mistakes feel free to provide feedback so I can fix the proposal before I submit a PR.<br>&gt; <br>&gt; <br></p><p>This is a good start.  <br></p><p>&quot;Make return optional and infer return type for single-expressions everywhere in the language:”<br></p><p>Everywhere in the language is too strong.  We should be more precise.  I believe we are talking about top level code blocks that only contain a single expression for the following constructs in the grammar:<br></p><p>function-body<br>getter-setter-block<br>getter-clause <br>variable-declaration<br>subscript-declaration<br></p><p>Please remove the section on guard as any of the preceding will never have single expression top level code blocks if they contain a guard clause.<br></p><p>-Matthew<br></p><p>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt; <br>&gt; Am 31. Mai 2016 um 18:33:09, Leonardo Pessoa via swift-evolution (swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;) schrieb:<br>&gt; <br>&gt;&gt; +1<br>&gt;&gt; <br>&gt;&gt; L<br>&gt;&gt; <br>&gt;&gt; On 31 May 2016 at 12:47, Matthew Johnson via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; On May 28, 2016, at 3:09 AM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; It isn’t a special case because all other single-statement closures in the language work that way. It’s actually inconsistent now.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Computed properties aren’t closures so it’s not inconsistent in that sense. But it is inconsistent in that closures are the *only* value-returning code blocks that are able to use this sugar. It would be nice to see this sugar consistently allowed everywhere in the language.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; On 28 May 2016, at 09:03, Brian Christensen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; On May 27, 2016, at 13:57, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; The idea is simple:<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; • Can we make return keyword optional in cases like this?<br>&gt;&gt; &gt;&gt;&gt;&gt; • Shouldn’t this behave like @autoclosure or @noescape?<br>&gt;&gt; &gt;&gt;&gt;&gt; type A {<br>&gt;&gt; &gt;&gt;&gt;&gt; var characters: [Character] = …<br>&gt;&gt; &gt;&gt;&gt;&gt; var string: String { String(self.characters) }<br>&gt;&gt; &gt;&gt;&gt;&gt; var count: Int { 42 }<br>&gt;&gt; &gt;&gt;&gt;&gt; }<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; Is this worth a proposal or Swifty enough, what do you think?<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; Sure I could write return, but why do we allow this behavior for @noescape functions like map!?<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; While I am not necessarily against this idea, I do wonder if it’s worth making what’s going on here less obvious simply for the sake of being able to omit a six character keyword. As I understand it, one of the reasons ++/-- were removed was due to the increased &quot;burden to learn Swift as a first programming language.” This is the sort of thing that becomes another one of those special cases that has to be explained to someone new to Swift.<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; /brian<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160531/94e040a8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>May 31, 2016 at 09:00:00pm</p></header><div class="content"><p>Please remove the section on guard as any of the preceding will never have single expression top level code blocks if they contain a guard clause.<br>I didn’t get this at first but now I see your point, it’s because the whole returning scope will need `return` at the very end so `guard` should follow that rule.<br></p><p><br>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 31. Mai 2016 um 21:00:43, Matthew Johnson (matthew at anandabits.com) schrieb:<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160531/dd77a615/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 31, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On May 31, 2016, at 2:13 PM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; Please remove the section on guard as any of the preceding will never have single expression top level code blocks if they contain a guard clause.<br>&gt; <br>&gt; I didn’t get this at first but now I see your point, it’s because the whole returning scope will need `return` at the very end so `guard` should follow that rule.<br>&gt; <br>&gt; <br></p><p>Exactly.  You are allowed to omit `return` if the entire body only consists of `return some().expression`<br></p><p>&gt; <br>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt; <br>&gt; Am 31. Mai 2016 um 21:00:43, Matthew Johnson (matthew at anandabits.com &lt;mailto:matthew at anandabits.com&gt;) schrieb:<br>&gt; <br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160531/bb809045/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>May 31, 2016 at 09:00:00pm</p></header><div class="content"><p>Exactly.  You are allowed to omit `return` if the entire body only consists of `return some().expression`<br>Thats where the useless example comes in (but we don’t need this behavior at all):<br></p><p>func foo(boolean: Bool) {<br></p><p>    guard boolean else {}<br></p><p>    print(&quot;true“)<br></p><p>}<br></p><p>I made some changes to the proposal: https://github.com/DevAndArtist/swift-evolution/blob/single_expression_optional_return/proposals/nnnn-single-expression-optional-return.md<br></p><p>Please review it again. :)<br>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160531/2aabdb80/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 31, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On May 31, 2016, at 2:36 PM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; Exactly.  You are allowed to omit `return` if the entire body only consists of `return some().expression`<br>&gt; <br>&gt; Thats where the useless example comes in (but we don’t need this behavior at all):<br>&gt; <br>&gt; func foo(boolean: Bool) {<br>&gt; <br>&gt;     guard boolean else {}<br>&gt; <br>&gt;     print(&quot;true“)<br>&gt; <br>&gt; }<br>&gt; <br>&gt; I made some changes to the proposal: https://github.com/DevAndArtist/swift-evolution/blob/single_expression_optional_return/proposals/nnnn-single-expression-optional-return.md &lt;https://github.com/DevAndArtist/swift-evolution/blob/single_expression_optional_return/proposals/nnnn-single-expression-optional-return.md&gt;<br>&gt; <br>&gt; Please review it again. :)<br></p><p>That looks good.  You might want to include more complex expressions just to make it clear that this isn’t limited to literal-returning expressions.  Otherwise I think it covers it.  Thanks for putting this together!  I’ve wanted this for a long time… :)<br></p><p>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160531/a374c7bc/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>May 31, 2016 at 11:00:00pm</p></header><div class="content"><p>+1 from me to this updated proposal. Now I like it very much :)<br></p><p>On 31.05.2016 22:36, Adrian Zubarev via swift-evolution wrote:<br>&gt;&gt; Exactly.  You are allowed to omit `return` if the entire body only<br>&gt;&gt; consists of `return some().expression`<br>&gt;<br>&gt; Thats where the useless example comes in (but we don’t need this behavior<br>&gt; at all):<br>&gt;<br>&gt; func foo(boolean: Bool) {<br>&gt;<br>&gt;     guard boolean else {}<br>&gt;<br>&gt;     print(&quot;true“)<br>&gt;<br>&gt; }<br>&gt;<br>&gt; I made some changes to the<br>&gt; proposal: https://github.com/DevAndArtist/swift-evolution/blob/single_expression_optional_return/proposals/nnnn-single-expression-optional-return.md<br>&gt;<br>&gt; Please review it again. :)<br>&gt; --<br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c74c15ba14b1096d4e42900ddd2dacd0?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>Patrick Smith</string> &lt;pgwsmith at gmail.com&gt;<p>May 28, 2016 at 05:00:00pm</p></header><div class="content"><p>+1. This has always tripped me up, I guess I felt there was a good reason for requiring you to add a `return`, but not sure what it would be.<br></p><p><br>&gt; On 28 May 2016, at 3:57 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The idea is simple:<br>&gt; <br>&gt; Can we make return keyword optional in cases like this?<br>&gt; Shouldn’t this behave like @autoclosure or @noescape?<br>&gt; type A {<br>&gt;     var characters: [Character] = …<br>&gt;     var string: String { String(self.characters) }<br>&gt;     var count: Int { 42 }<br>&gt; }<br>&gt; Is this worth a proposal or Swifty enough, what do you think?<br>&gt; <br>&gt; Sure I could write return, but why do we allow this behavior for @noescape functions like map!?<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160528/190f7d02/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Pitch] Make `return` optional in computed properties for a single case</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>May 28, 2016 at 11:00:00am</p></header><div class="content"><p>I’m a +1 to this, this is something that keeps catching me out as I’m so used to omitting return in other closures, and that’s essentially all a computer property is anyway so it makes sense for the behaviour to be consistent.<br></p><p>&gt; On 27 May 2016, at 18:57, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The idea is simple:<br>&gt; <br>&gt; Can we make return keyword optional in cases like this?<br>&gt; Shouldn’t this behave like @autoclosure or @noescape?<br>&gt; type A {<br>&gt;     var characters: [Character] = …<br>&gt;     var string: String { String(self.characters) }<br>&gt;     var count: Int { 42 }<br>&gt; }<br>&gt; Is this worth a proposal or Swifty enough, what do you think?<br>&gt; <br>&gt; Sure I could write return, but why do we allow this behavior for @noescape functions like map!?<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160528/4710803d/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
