<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e910871dda004717de19e83626308b5a?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0067: Enhanced Floating Point Protocols</strong> from <string>Tony Allevato</string> &lt;allevato at google.com&gt;<p>April 26, 2016 at 07:00:00pm</p></header><div class="content"><p>On 2016-04-26 22:32:16 +0000, Dave Abrahams via swift-evolution said:<br></p><p>&gt; The main reasons to route through a single generic operator<br>&gt; implementation are:<br>&gt; <br>&gt; * User experience; we want to cut down the number of overloads of any<br>&gt;   operator to a manageable set, in part because they live in the global<br>&gt;   namespace.  When you look at a list of functions in the global<br>&gt;   namespace, seeing fifty instances of `func +` is not helpful.<br>&gt; <br>&gt; * Type checker speed.  Having all of these overloads around has<br>&gt;   historically put a strain on the type checker and made compilation<br>&gt;   slow.  That may be less true today than it once was, though.<br></p><p>These are both completely understandable concerns (especially the type <br>checker speed, since I&#39;ve hit the &quot;expression too complex&quot; problem in a <br>couple odd places myself). I&#39;m hoping though that we can converge on a <br>solution other than &quot;pollute the public interface of a type with named <br>methods that duplicate the operators, which are trampolines to those <br>methods&quot;, since I think that actually detracts from the user experience <br>of using that type.<br></p><p>Would something like this be possible? Imagine protocols defined like this:<br></p><p>    public protocol Equatable {<br>        static func == (lhs: Self, rhs: Self) -&gt; Self<br>    }<br>    public protocol FloatingPoint: Equatable {<br>        static func + (lhs: Self, rhs: Self) -&gt; Self<br>    }<br></p><p>This would have the effect of automatically generating the following <br>generic trampoline global operators:<br></p><p>    public func == &lt;T: Equatable&gt;(lhs: T, rhs: T) -&gt; T {<br>        return T.==(lhs, rhs)<br>    }<br>    public func + &lt;T: FloatingPoint&gt;(lhs: T, rhs: T) -&gt; T {<br>        return T.+(lhs, rhs)<br>    }<br></p><p>Then, types that conform to FloatingPoint would define the method as <br>appropriate:<br></p><p>    public struct Double: FloatingPoint {<br>        public static func == (lhs: Double, rhs: Double) -&gt; Double { ... }<br>        public static func + (lhs: Double, rhs: Double) -&gt; Double { ... }<br>    }<br></p><p>If something like this worked, it has a number of advantages:<br></p><p>* It has the same lower overhead with respect to the global namespace <br>as the currently proposed strategy that uses an explicitly defined <br>generic operator that trampolines to a named add() method. This should <br>keep type checking fast and keeps the number of global instances of the <br>operator low.<br>* It increases consistency: the operator requirement is declared in the <br>protocol, and the concrete implementation is *in* the conforming type <br>(as opposed to a separate global function).<br>* There is no need to introduce arbitrarily named methods to implement <br>the operations that would pollute the public interface of the type.<br>* It doesn&#39;t affect the ability to pass operators as first-class <br>functions into other algorithms (like + into reduce). In fact, if an <br>algorithm needs to be explicit about the types (if they can&#39;t be <br>inferred for some reason), then for example `Float.+` would refer to <br>the appropriate `(Float, Float) -&gt; Float` function.<br></p><p>Some might argue that implicitly defining the generic global operator <br>under the covers is a drawback to this approach, but I think that&#39;s a <br>minor concern when weighed against the alternatives.<br></p><p>Individual elements of the syntax could be debated (an &quot;operator&quot; <br>keyword instead of &quot;static func&quot;? But that might just be syntactic <br>sugar), but overall, I&#39;d love to get feedback on the feasibility of an <br>approach like this. I&#39;m happy to take a stab at drawing this up in a <br>proposal, as well.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0067: Enhanced Floating Point Protocols</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>April 26, 2016 at 10:00:00pm</p></header><div class="content"><p>On Apr 26, 2016, at 7:34 PM, Tony Allevato via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; Would something like this be possible? Imagine protocols defined like this:<br>&gt; <br>&gt;   public protocol Equatable {<br>&gt;       static func == (lhs: Self, rhs: Self) -&gt; Self<br>&gt;   }<br></p><p>The problem is that every type that conforms to Equatable has to provide an overload of == in order to conform.  This is exactly what having named methods as requirements solves.<br></p><p>-Chris<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
