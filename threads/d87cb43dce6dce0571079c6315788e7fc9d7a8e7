<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0006 Apply API Guidelines to the Standard Library</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 30, 2016 at 08:00:00pm</p></header><div class="content"><p>on Fri Jan 29 2016, Erica Sadun &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Jan 29, 2016, at 2:14 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Fri Jan 29 2016, Erica Sadun &lt;erica-AT-ericasadun.com &lt;http://erica-at-ericasadun.com/&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; The &quot;too specific&quot; I&#39;m railing against is that naming guidance<br>&gt;&gt;&gt; should not depend on implementation details to<br>&gt;&gt;&gt; the point it creates Hungarian Swiftisms.<br>&gt;&gt; <br>&gt;&gt; I understand the overall concern, but I don&#39;t think these guidelines do<br>&gt;&gt; that.  Whether something has side effects is hardly an implementation<br>&gt;&gt; detail.  <br>&gt;<br>&gt; I&#39;ve been spending a ridiculous amount of time trying to hash out<br>&gt; exactly what I&#39;d prefer because this overlaps with another project I&#39;m<br>&gt; currently working on:<br>&gt;<br>&gt;   - use nouns for unambiguously functional items without side effects (distanceTo(), successor)<br>&gt;   - use verbs for unambiguously procedural items<br></p><p>This works great so far.  I think you can say<br></p><p>  - use nouns for methods with no side effects (or only incidental ones,<br>    like logging)<br>  - use verbs for methods with significant side-effects<br></p><p>and you can stop there.  Why does this have to be more complicated than<br>that?<br></p><p>&gt;   - prefer verbs for items with side effects, whether there&#39;s mutation or other real-world effects<br>&gt;   - Otherwise decide what the most relevant description of the member&#39;s purpose is: to return a value or to perform an action. In such cases, name nouny-things with nouns and verby-things with verbs.<br>&gt;<br>&gt; Under the current system, you could have:<br>&gt;<br>&gt; // This is a mutating version<br>&gt; mutating func login(credential: SomeCredentialType) <br>&gt; -&gt; LoginTokenType? {<br>&gt;     ...<br>&gt;     // store login time, etc in self<br>&gt;     ...<br>&gt;     return successToken<br>&gt; }<br>&gt; // This is a non-mutating version with side effects<br>&gt; func login(credential: SomeCredentialType) <br>&gt; -&gt; LoginTokenType? {<br>&gt;     ...<br>&gt;     // store login time, etc in a file on disk<br>&gt;     ...<br>&gt;     return successToken<br>&gt; }<br>&gt;<br>&gt; // This is a non-mutating version<br>&gt; func login(credential: SomeCredentialType) <br>&gt; -&gt; LoginTokenType? {<br>&gt;     ...<br>&gt;     return successToken<br>&gt; }<br>&gt;<br>&gt; All three versions are verb named as their primary purpose is to log<br>&gt; in. But what if they&#39;re recast as tokenForCredential, with their<br>&gt; primary purpose being to fetch a token?<br>&gt;<br>&gt; For the first example, you could refactor with a purely functional<br>&gt; tokenForCredential and a mutating login function that updates self.<br>&gt;<br>&gt; But what about the second example, that does not mutate, whose primary<br>&gt; purpose is to return a token, but that introduces side effects by<br>&gt; writing to disk? Should this be verb named and re-factored? (probably)<br>&gt; If so, using &quot;mutating&quot;/&quot;non-mutating&quot; is not sufficient to offer<br>&gt; guidance and overly specific as to implementation details. In other<br>&gt; words, &quot;hungarian&quot;.<br>&gt;<br>&gt; One final point: I think the -ed/-ing advice is wrong. Adding &quot;ed&quot;<br>&gt; isn&#39;t really creating a past tense verb (reversed). <br></p><p>No, it&#39;s creating the past participle.  We had this checked by a<br>linguist :-).<br></p><p>http://apple.github.io/swift-internals/api-design-guidelines/index.html<br>uses the correct terminology but apparently we haven&#39;t propagated the<br>changes up to Swift.org <br></p><p>*goes to fix up Swift.org*<br></p><p>&gt; It&#39;s creating an adjective with an implied noun. Same rule for<br>&gt; -ing. Like &quot;ed&quot;, applying &quot;ing&quot; can create an adjective form with an<br>&gt; implied subject. (Words ending with &quot;ing&quot; are not always gerunds. It<br>&gt; might sound daring and frightning but it&#39;s true.)<br></p><p>These are the present participles.  The linguist again :-)<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] SE-0006 Apply API Guidelines to the Standard Library</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>January 31, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; Canonical Dave:<br>&gt;&gt; Me:<br>&gt;&gt;  - use nouns for unambiguously functional items without side effects (distanceTo(), successor)<br>&gt;&gt;  - use verbs for unambiguously procedural items<br>&gt; <br>&gt; This works great so far.  I think you can say<br>&gt; <br>&gt;  - use nouns for methods with no side effects (or only incidental ones,<br>&gt;    like logging)<br>&gt;  - use verbs for methods with significant side-effects<br>&gt; <br>&gt; and you can stop there.  Why does this have to be more complicated than<br>&gt; that?<br>&gt; <br></p><p>Because *someone* put mutating/nonmutating  rules into the guidelines. And I&#39;m OCD enough that<br>they are irritating me. It&#39;s the mutating/nonmutating bits that I perceive as unneeded hungarianisms that push a <br>little too far into detailed advice by tying method naming to overly specific fancy rules. (Insert a joke here about<br>fancy cats and fussy linguistic grooming.)<br></p><p>&gt;&gt; One final point: I think the -ed/-ing advice is wrong. Adding &quot;ed&quot;<br>&gt;&gt; isn&#39;t really creating a past tense verb (reversed). <br>&gt; <br>&gt; No, it&#39;s creating the past participle.  We had this checked by a<br>&gt; linguist :-).<br></p><p>This is why I love you guys.<br></p><p>-- E, appreciative<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
