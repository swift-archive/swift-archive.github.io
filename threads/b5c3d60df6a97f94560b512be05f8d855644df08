<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b845945ff209e880da26415c37757417?s=50"></div><header><strong>Swift Package Manager – system-module and code</strong> from <string>Omri Mor</string> &lt;omri50 at gmail.com&gt;<p>July 15, 2016 at 10:00:00am</p></header><div class="content"><p>I’m trying to link some Swift code a C library. I have generated a Swift package for the library, but the library cannot be directly used from Swift – it relies on some complex macros that cannot be imported.<br>I’ve created C code and header files that replace these macros with variables and functions (where applicable). I’d like to be able to have this code within the package for the library and have the C code be compiled so that Swift code is linked with both it and the library.<br></p><p>I think I can have the C code be in a different package and have the library package depend on it, but I’d prefer to avoid that – using the library from Swift is impossible without the C bridge, so it should be part of the same package.<br></p><p>Is this possible?<br></p><p>Thanks,<br>Omri Mor<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160715/b5c3df08/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/835a02e14abc997b2c9c9a65f1d70732?s=50"></div><header><strong>Swift Package Manager – system-module and code</strong> from <string>Andrey Fidrya</string> &lt;af at zabiyaka.com&gt;<p>July 24, 2016 at 07:00:00pm</p></header><div class="content"><p>It&#39;s possible to declare multiple submodules in Package.swift. For example:<br></p><p>import PackageDescription<br></p><p>let package = Package(<br>    name: &quot;SQLite.swift&quot;,<br>    targets: [<br>        Target(<br>            name: &quot;SQLite&quot;,<br>            dependencies: [<br>                .Target(name: &quot;CSQLite&quot;)<br>            ]),<br>        Target(<br>            name: &quot;CSQLite&quot;)<br>    ]<br>)<br></p><p>Sources/CSQLite/ contains sqlite3.c, module.map etc<br>Source/SQLite/ - contains Swift code.<br></p><p>--<br>Andrey<br></p><p><br>&gt; On 15 Jul 2016, at 20:56, Omri Mor via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; I’m trying to link some Swift code a C library. I have generated a Swift package for the library, but the library cannot be directly used from Swift – it relies on some complex macros that cannot be imported.<br>&gt; I’ve created C code and header files that replace these macros with variables and functions (where applicable). I’d like to be able to have this code within the package for the library and have the C code be compiled so that Swift code is linked with both it and the library.<br>&gt; <br>&gt; I think I can have the C code be in a different package and have the library package depend on it, but I’d prefer to avoid that – using the library from Swift is impossible without the C bridge, so it should be part of the same package.<br>&gt; <br>&gt; Is this possible?<br>&gt; <br>&gt; Thanks,<br>&gt; Omri Mor<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160724/6d939f75/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b845945ff209e880da26415c37757417?s=50"></div><header><strong>Swift Package Manager – system-module and code</strong> from <string>Omri Mor</string> &lt;omri50 at gmail.com&gt;<p>August  1, 2016 at 08:00:00pm</p></header><div class="content"><p>That isn’t quite what I mean.<br></p><p>There’s a system-level library, in say /usr/local/lib/libfoo.dylib (or libfoo.so on Linux), with a header in /usr/local/include/foo.h.<br>foo.h has complex macros that cannot be imported into Swift, so they need a C wrapper/bridge.<br>This is, say, foo_bridge.c and foo_bridge.h, where the source code defines global variables and functions, as necessary, to replace the macros and the header file has extern variables and function declarations. This must be compiled into a library that itself links with libfoo.<br>To use libfoo from Swift, it must be linked with foo_bridge so that it can use the macro replacements.<br></p><p>Currently, I can create a package called CFoo and one called CFooBridge that depends on CFoo, and have Swift code (e.g. a Swift wrapper called Foo) depend on CFooBridge. However, this is not ideal. I would prefer that the bridging code is within the CFoo package, as using CFoo without the bridging code is impossible from Swift. It is this that I have not figured out how to do, or if it is possible.<br></p><p>Omri<br>&gt; On Jul 24, 2016, at 09:12, Andrey Fidrya &lt;af at zabiyaka.com&gt; wrote:<br>&gt; <br>&gt; It&#39;s possible to declare multiple submodules in Package.swift. For example:<br>&gt; <br>&gt; import PackageDescription<br>&gt; <br>&gt; let package = Package(<br>&gt;     name: &quot;SQLite.swift&quot;,<br>&gt;     targets: [<br>&gt;         Target(<br>&gt;             name: &quot;SQLite&quot;,<br>&gt;             dependencies: [<br>&gt;                 .Target(name: &quot;CSQLite&quot;)<br>&gt;             ]),<br>&gt;         Target(<br>&gt;             name: &quot;CSQLite&quot;)<br>&gt;     ]<br>&gt; )<br>&gt; <br>&gt; Sources/CSQLite/ contains sqlite3.c, module.map etc<br>&gt; Source/SQLite/ - contains Swift code.<br>&gt; <br>&gt; --<br>&gt; Andrey<br>&gt; <br>&gt; <br>&gt;&gt; On 15 Jul 2016, at 20:56, Omri Mor via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I’m trying to link some Swift code a C library. I have generated a Swift package for the library, but the library cannot be directly used from Swift – it relies on some complex macros that cannot be imported.<br>&gt;&gt; I’ve created C code and header files that replace these macros with variables and functions (where applicable). I’d like to be able to have this code within the package for the library and have the C code be compiled so that Swift code is linked with both it and the library.<br>&gt;&gt; <br>&gt;&gt; I think I can have the C code be in a different package and have the library package depend on it, but I’d prefer to avoid that – using the library from Swift is impossible without the C bridge, so it should be part of the same package.<br>&gt;&gt; <br>&gt;&gt; Is this possible?<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; Omri Mor<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160801/1cc06aa7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/835a02e14abc997b2c9c9a65f1d70732?s=50"></div><header><strong>Swift Package Manager – system-module and code</strong> from <string>Andrey Fidrya</string> &lt;af at zabiyaka.com&gt;<p>August  2, 2016 at 01:00:00pm</p></header><div class="content"><p>Imho CFooBridge is unnecessary, bridging code can be added to CFoo itself.<br>For example, in CCurl some methods which can&#39;t be called directly from Swift<br>have additional wrappers in shim.h:<br></p><p>https://github.com/IBM-Swift/CCurl<br></p><p>In module.modulemap shim.h is used instead of system header,<br>and the system header is included in shim.h.<br></p><p>Regards,<br>Andrey<br></p><p><br>&gt; On 02 Aug 2016, at 06:51, Omri Mor &lt;omri50 at gmail.com&gt; wrote:<br>&gt; <br>&gt; That isn’t quite what I mean.<br>&gt; <br>&gt; There’s a system-level library, in say /usr/local/lib/libfoo.dylib (or libfoo.so on Linux), with a header in /usr/local/include/foo.h.<br>&gt; foo.h has complex macros that cannot be imported into Swift, so they need a C wrapper/bridge.<br>&gt; This is, say, foo_bridge.c and foo_bridge.h, where the source code defines global variables and functions, as necessary, to replace the macros and the header file has extern variables and function declarations. This must be compiled into a library that itself links with libfoo.<br>&gt; To use libfoo from Swift, it must be linked with foo_bridge so that it can use the macro replacements.<br>&gt; <br>&gt; Currently, I can create a package called CFoo and one called CFooBridge that depends on CFoo, and have Swift code (e.g. a Swift wrapper called Foo) depend on CFooBridge. However, this is not ideal. I would prefer that the bridging code is within the CFoo package, as using CFoo without the bridging code is impossible from Swift. It is this that I have not figured out how to do, or if it is possible.<br>&gt; <br>&gt; Omri<br>&gt;&gt; On Jul 24, 2016, at 09:12, Andrey Fidrya &lt;af at zabiyaka.com &lt;mailto:af at zabiyaka.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; It&#39;s possible to declare multiple submodules in Package.swift. For example:<br>&gt;&gt; <br>&gt;&gt; import PackageDescription<br>&gt;&gt; <br>&gt;&gt; let package = Package(<br>&gt;&gt;     name: &quot;SQLite.swift&quot;,<br>&gt;&gt;     targets: [<br>&gt;&gt;         Target(<br>&gt;&gt;             name: &quot;SQLite&quot;,<br>&gt;&gt;             dependencies: [<br>&gt;&gt;                 .Target(name: &quot;CSQLite&quot;)<br>&gt;&gt;             ]),<br>&gt;&gt;         Target(<br>&gt;&gt;             name: &quot;CSQLite&quot;)<br>&gt;&gt;     ]<br>&gt;&gt; )<br>&gt;&gt; <br>&gt;&gt; Sources/CSQLite/ contains sqlite3.c, module.map etc<br>&gt;&gt; Source/SQLite/ - contains Swift code.<br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; Andrey<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 15 Jul 2016, at 20:56, Omri Mor via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’m trying to link some Swift code a C library. I have generated a Swift package for the library, but the library cannot be directly used from Swift – it relies on some complex macros that cannot be imported.<br>&gt;&gt;&gt; I’ve created C code and header files that replace these macros with variables and functions (where applicable). I’d like to be able to have this code within the package for the library and have the C code be compiled so that Swift code is linked with both it and the library.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think I can have the C code be in a different package and have the library package depend on it, but I’d prefer to avoid that – using the library from Swift is impossible without the C bridge, so it should be part of the same package.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is this possible?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt; Omri Mor<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160802/46dee7d2/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
