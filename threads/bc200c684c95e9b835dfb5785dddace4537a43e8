<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>How do you use protocol types?</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>July 14, 2016 at 03:00:00am</p></header><div class="content"><p>So I’m trying to work generically to construct things based on their conformance to a protocol with an initialiser. I’m sure this worked before; I’ve done it before. Maybe there have been some changes in the language or something, because I’ve tried everywhich-way and this just isn’t flying:<br></p><p>==================<br>protocol AProto {<br></p><p>	associatedtype ElementType<br>	func constructInstance(_: ElementType.Type) -&gt; ElementType<br>}<br></p><p>protocol SimpleConstructableElement {<br>	init()<br>}<br></p><p>extension Int : SimpleConstructableElement {}<br></p><p>class Factory : AProto {<br></p><p>	typealias ElementType = SimpleConstructableElement<br></p><p>	func constructInstance(_ t: SimpleConstructableElement.Type) -&gt; SimpleConstructableElement {<br>		return t.init()<br>	}<br>}<br></p><p>Factory().constructInstance(Int.self)<br>=================================<br></p><p>/tmp/MyPlayground.playground:15:7: Type &#39;Factory&#39; does not conform to protocol &#39;AProto&#39;<br>/tmp/MyPlayground.playground:6:7: Protocol requires function &#39;constructInstance&#39; with type &#39;(ElementType.Protocol) -&gt; ElementType&#39;<br>/tmp/MyPlayground.playground:19:7: Candidate has non-matching type &#39;(SimpleConstructableElement.Type) -&gt; SimpleConstructableElement’<br></p><p>=================================<br></p><p><br>The thing that gets me about this is that Xcode’s code-completion tells me that SimpleConstructableElement.Type is of type SimpleConstructableElement.Protocol, so it should be the same as ElementType.Protocol and should be accepted, right?<br></p><p>Karl<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0f0154768aeec561194e651b0bca02d9?s=50"></div><header><strong>How do you use protocol types?</strong> from <string>Dan Loewenherz</string> &lt;dan at lionheartsw.com&gt;<p>July 13, 2016 at 10:00:00pm</p></header><div class="content"><p>Unless you need to abstract what the Factory class does, I would eliminate<br>AProto.<br></p><p>class Factory {<br></p><p>    func constructInstance&lt;T: SimpleConstructableElement&gt;(_ t: T.Type) -&gt; T<br>{<br></p><p>        return t.init()<br></p><p>    }<br></p><p>}<br></p><p><br>If you truly want to genericize Factory, you can do the following:<br></p><p><br>class Factory&lt;T: SimpleConstructableElement&gt;: AProto {<br></p><p>    typealias ElementType = T<br></p><p><br>    func constructInstance(_ t: T.Type) -&gt; T {<br></p><p>        return t.init()<br></p><p>    }<br></p><p>}<br></p><p><br>However, ElementType can be inferred, so you can zap it, and then you get<br>this:<br></p><p><br>class Factory&lt;T: SimpleConstructableElement&gt;: AProto {<br></p><p>    func constructInstance(_ t: T.Type) -&gt; T {<br></p><p>        return t.init()<br></p><p>    }<br></p><p>}<br></p><p><br>…which compiles and I think does what you want it to. :)<br></p><p><br>Dan<br></p><p>On Wed, Jul 13, 2016 at 8:58 PM, Karl via swift-users &lt;swift-users at swift.org<br>&gt; wrote:<br></p><p>&gt; So I’m trying to work generically to construct things based on their<br>&gt; conformance to a protocol with an initialiser. I’m sure this worked before;<br>&gt; I’ve done it before. Maybe there have been some changes in the language or<br>&gt; something, because I’ve tried everywhich-way and this just isn’t flying:<br>&gt;<br>&gt; ==================<br>&gt; protocol AProto {<br>&gt;<br>&gt;         associatedtype ElementType<br>&gt;         func constructInstance(_: ElementType.Type) -&gt; ElementType<br>&gt; }<br>&gt;<br>&gt; protocol SimpleConstructableElement {<br>&gt;         init()<br>&gt; }<br>&gt;<br>&gt; extension Int : SimpleConstructableElement {}<br>&gt;<br>&gt; class Factory : AProto {<br>&gt;<br>&gt;         typealias ElementType = SimpleConstructableElement<br>&gt;<br>&gt;         func constructInstance(_ t: SimpleConstructableElement.Type) -&gt;<br>&gt; SimpleConstructableElement {<br>&gt;                 return t.init()<br>&gt;         }<br>&gt; }<br>&gt;<br>&gt; Factory().constructInstance(Int.self)<br>&gt; =================================<br>&gt;<br>&gt; /tmp/MyPlayground.playground:15:7: Type &#39;Factory&#39; does not conform to<br>&gt; protocol &#39;AProto&#39;<br>&gt; /tmp/MyPlayground.playground:6:7: Protocol requires function<br>&gt; &#39;constructInstance&#39; with type &#39;(ElementType.Protocol) -&gt; ElementType&#39;<br>&gt; /tmp/MyPlayground.playground:19:7: Candidate has non-matching type<br>&gt; &#39;(SimpleConstructableElement.Type) -&gt; SimpleConstructableElement’<br>&gt;<br>&gt; =================================<br>&gt;<br>&gt;<br>&gt; The thing that gets me about this is that Xcode’s code-completion tells me<br>&gt; that SimpleConstructableElement.Type is of type<br>&gt; SimpleConstructableElement.Protocol, so it should be the same as<br>&gt; ElementType.Protocol and should be accepted, right?<br>&gt;<br>&gt; Karl<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160713/3d9ab99e/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
