<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ac866bdd669c520f0063737ff53a351d?s=50"></div><header><strong>executing a string</strong> from <string>Ford Prefect</string> &lt;fordpre at mail.com&gt;<p>July 14, 2016 at 05:00:00pm</p></header><div class="content"><p>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160714/c0c942bf/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>executing a string</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>July 14, 2016 at 06:00:00pm</p></header><div class="content"><p>Turning strings into selectors is a powerful feature as well ;-) — but afaik, Swift doesn&#39;t use another sort of special dispatch besides what is known from other languages.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2024f9524b1e51a54c4251abf0c34f50?s=50"></div><header><strong>executing a string</strong> from <string>Saagar Jha</string> &lt;saagarjha28 at gmail.com&gt;<p>July 15, 2016 at 12:00:00am</p></header><div class="content"><p>Here’s<br>&lt;https://swift.org/blog/swift-2-2-new-features/#compile-time-checked-selectors&gt;<br>how selectors in Swift work, based on this<br>&lt;https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md&gt;<br>proposal. Swift’s selectors are a lot safer than Objective-C’s.<br></p><p>&gt; &gt; &gt; &gt; &gt; One of the major security flaws of Obj C is &gt; &gt; the ability to<br>convert a string into a selector, which &gt; &gt; permits using private methods<br>by constructing selectors &gt; &gt; at runtime long after the app store review<br>has been completed. &gt; &gt; Does Swift do away with that? I understand it<br>doesn&#39;t &gt; &gt; use selectors per se but is there an analogous mechanism? &gt; &gt; &gt;<br>&gt; &gt;<br></p><p>------------------------------<br></p><p>swift-evolution mailing list swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>On Thu, Jul 14, 2016 at 08:49 Ford Prefect via swift-evolution<br>swift-evolution at swift.org wrote:<br></p><p><br>-- <br>-Saagar Jha<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160715/b90d1143/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>executing a string</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>July 15, 2016 at 05:00:00am</p></header><div class="content"><p>&gt; On 14 Jul 2016, at 17:48, Ford Prefect via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; One of the major security flaws of Obj C is<br>&gt; the ability to convert a string into a selector, which<br>&gt; permits using private methods by constructing selectors<br>&gt; at runtime long after the app store review has been completed.<br>&gt; Does Swift do away with that? I understand it doesn&#39;t<br>&gt; use selectors per se but is there an analogous mechanism?<br>&gt;  <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>As has been pointed out, Swift selectors are already much safer. I believe you can still convert a string to a selector, but really…<br></p><p>I wouldn’t call it a security flaw. Objects in Obj-C are free to pass messages around fairly loosely - sometimes the method you are trying to call doesn’t even exist but will be dynamically created and hooked up at runtime when you call it. This is a good article to learn more about how powerful Obj-C’s messaging system is: https://www.mikeash.com/pyblog/friday-qa-2009-03-27-objective-c-message-forwarding.html<br></p><p>It’s only a security flaw if you can somehow perform privileged operations from doing that. I’m not sure how the jailbreak community actually implements it, but I’d assume that to write out to system/non-app files they would need to disable sandboxing, which is what really gives you the security that apps won’t grab your data or make persistent changes outside of their own containers, or talk to the network when they shouldn’t (see: iOS keyboard extensions).<br></p><p>Yeah, you can call non-public APIs. That’s true in basically all software. The reason Apple discourages it isn’t for security - it’s so they don’t have to maintain code they never promised to maintain. It leads to more stable and reliable software.<br></p><p>It’s not really an undocumented API (really an undocumented behaviour), but there’s a famous lesson from Microsoft about this:<br></p><p>&gt; Windows 95? No problem. Nice new 32 bit API, but it still ran old 16 bit software perfectly. Microsoft obsessed about this, spending a big chunk of change testing every old program they could find with Windows 95. Jon Ross, who wrote the original version of SimCity for Windows 3.x, told me that he accidentally left a bug in SimCity where he read memory that he had just freed. Yep. It worked fine on Windows 3.x, because the memory never went anywhere. Here&#39;s the amazing part: On beta versions of Windows 95, SimCity wasn&#39;t working in testing. Microsoft tracked down the bug and added specific code to Windows 95 that looks for SimCity. If it finds SimCity running, it runs the memory allocator in a special mode that doesn&#39;t free memory right away. That&#39;s the kind of obsession with backward compatibility that made people willing to upgrade to Windows 95.<br></p><p>If you like that, Raymond Chen’s oldnewthing is a great source of Microsoft technical war-stories (https://blogs.msdn.microsoft.com/oldnewthing/). But anyway, nobody wants that kind of headache, and then having to maintain those hacks for who-knows-how-long? That’s why they’re so strict about using official APIs and documented behaviour - because if you don’t, you’ll have to choose between breaking software and making users unhappy, or maintaining a collection of hacks to present the illusion of the old, never-intended-to-be-final behaviour.<br></p><p>Karl<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160715/5e2642d7/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>executing a string</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>July 14, 2016 at 10:00:00pm</p></header><div class="content"><p>I&#39;ve never heard of an app being exploited through selector abuse. Do you have any example of that?<br></p><p>Félix<br></p><p>&gt; Le 14 juil. 2016 à 08:48:53, Ford Prefect via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; One of the major security flaws of Obj C is<br>&gt; the ability to convert a string into a selector, which<br>&gt; permits using private methods by constructing selectors<br>&gt; at runtime long after the app store review has been completed.<br>&gt; Does Swift do away with that? I understand it doesn&#39;t<br>&gt; use selectors per se but is there an analogous mechanism?<br>&gt;  <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160714/f3e3dc7d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2b74cd4039f0c53145a186868ab569c0?s=50"></div><header><strong>executing a string</strong> from <string>Josh Parmenter</string> &lt;jparmenter at vectorform.com&gt;<p>July 15, 2016 at 05:00:00am</p></header><div class="content"><p>I could see a method being implemented that does something bad, but isn’t called directly anywhere in code. A code path analysis of a program may miss the problematic method (though unlikely?). But if the method signature is passed in dynamically as the result of a web call or something, it could then be called and cause a problem. However- the malicious code here really is already in the binary.<br></p><p>Since app store review is mentioned here, I can’t speak as to how a binary is inspected for review, or what tools the app store team has at its disposal. But I would be surprised if there isn’t at least some sort of automated step that would reveal the code block that might be problematic. And finding another instance where calling something by selector would also raise a flag (in fact, even Xcode points out the possibility of a leak in these cases). Yes - it MIGHT be problematic, but I think there are greater security holes in the iOS / Obj-C ecosystem than what is mentioned here. Since it is a compiled language, and apps don’t ship with compilers, it seems like the possibility for abuse here is not huge. However - many iOS apps can execute JavaScript or create WebViews with strings from just about any source - and this is where (it seems to mean) a strong sandboxing environment is really needed. But I am curious to know (like Félix) if there are examples of this happening.<br></p><p>Best,<br></p><p>Josh<br></p><p>On Jul 14, 2016, at 10:18 PM, Félix Cloutier via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br></p><p>I&#39;ve never heard of an app being exploited through selector abuse. Do you have any example of that?<br></p><p>Félix<br></p><p>Le 14 juil. 2016 à 08:48:53, Ford Prefect via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br></p><p>One of the major security flaws of Obj C is<br>the ability to convert a string into a selector, which<br>permits using private methods by constructing selectors<br>at runtime long after the app store review has been completed.<br>Does Swift do away with that? I understand it doesn&#39;t<br>use selectors per se but is there an analogous mechanism?<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
