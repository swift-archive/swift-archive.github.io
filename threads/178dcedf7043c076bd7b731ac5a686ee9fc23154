<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>March 10, 2016 at 03:00:00pm</p></header><div class="content"><p>on Wed Mar 09 2016, Jordan Rose &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; This is my concern too. Our guidelines often lead to the first<br>&gt; parameter having a label, but usually that name isn&#39;t the same as the<br>&gt; name of the parameter—one&#39;s a preposition, the other&#39;s a noun. I&#39;m<br>&gt; pretty sure the common case is still unlabeled. <br></p><p>It&#39;s about 50/50 (slight edge to labeled first parameters) in the<br>imported Cocoa APIs.<br></p><p>&gt; Does that justify the complexity of the current rule?<br>&gt;<br>&gt; (But because Objective-C methods will now often have labeled<br>&gt; arguments, it would at least no longer be a marker differentiating<br>&gt; &quot;pure Swift&quot; code from &quot;Cocoa&quot; code.)<br>&gt;<br>&gt; Jordan<br>&gt;<br>&gt;&gt; On Mar 9, 2016, at 14:32, Radosław Pietruszewski via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Looking at my code, the majority of methods should still have the first parameter unlabeled. <br>&gt;&gt; <br>&gt;&gt; I like the consistency of what you’re proposing and the fact that I<br>&gt;&gt; don’t have to write `func foo(someArgument someArgument: T)`<br>&gt;&gt; anymore. But I also fear people won’t get it that they can (and in<br>&gt;&gt; many, probably most, situations should) make the first parameter `_<br>&gt;&gt; foo`.<br>&gt;&gt; <br>&gt;&gt; — Radek<br>&gt;&gt; <br>&gt;&gt;&gt; On 09 Mar 2016, at 19:58, Joe Groff via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Our accepted naming guidelines have embraced first argument labels<br>&gt;&gt;&gt; for functions and methods. This weakens our justification for<br>&gt;&gt;&gt; making the first parameter declaration in a `func` declaration<br>&gt;&gt;&gt; behave differently from the others, implicitly being unlabeled. It<br>&gt;&gt;&gt; seems pretty clear to me we should make all of the parameter<br>&gt;&gt;&gt; declarations behave uniformly:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func foo(x: Int, y: Int) // Should declare foo(x:y:), instead of foo(_:y:)<br>&gt;&gt;&gt; func foo(_ x: Int, y: Int) // Explicitly declares foo(_:y:)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This would also make `init` and `func` parameters behave<br>&gt;&gt;&gt; consistently, which is nice. There may still be hope for our<br>&gt;&gt;&gt; keyword argument rules to one day be shorter than the Smalltalk<br>&gt;&gt;&gt; spec…<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>March 11, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Mar 10, 2016, at 15:34 , Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; on Wed Mar 09 2016, Jordan Rose &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; This is my concern too. Our guidelines often lead to the first<br>&gt;&gt; parameter having a label, but usually that name isn&#39;t the same as the<br>&gt;&gt; name of the parameter—one&#39;s a preposition, the other&#39;s a noun. I&#39;m<br>&gt;&gt; pretty sure the common case is still unlabeled. <br>&gt; <br>&gt; It&#39;s about 50/50 (slight edge to labeled first parameters) in the<br>&gt; imported Cocoa APIs.<br></p><p>If it&#39;s easy to get these numbers, how many of the first parameters have the same label as the parameter name?<br></p><p>Jordan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160311/8ca28c4d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>March 11, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Mar 11, 2016, at 11:20 AM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Mar 10, 2016, at 15:34 , Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; on Wed Mar 09 2016, Jordan Rose &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; This is my concern too. Our guidelines often lead to the first<br>&gt;&gt;&gt; parameter having a label, but usually that name isn&#39;t the same as the<br>&gt;&gt;&gt; name of the parameter—one&#39;s a preposition, the other&#39;s a noun. I&#39;m<br>&gt;&gt;&gt; pretty sure the common case is still unlabeled. <br>&gt;&gt; <br>&gt;&gt; It&#39;s about 50/50 (slight edge to labeled first parameters) in the<br>&gt;&gt; imported Cocoa APIs.<br>&gt; <br>&gt; If it&#39;s easy to get these numbers, how many of the first parameters have the same label as the parameter name?<br></p><p>If you&#39;re going to measure that, you should also measure it for second, third, ..., Nth parameters too for comparison.<br></p><p>-Joe<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160311/6ba541d6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>March 11, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Mar 11, 2016, at 11:27 AM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Mar 11, 2016, at 11:20 AM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Mar 10, 2016, at 15:34 , Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Wed Mar 09 2016, Jordan Rose &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This is my concern too. Our guidelines often lead to the first<br>&gt;&gt;&gt;&gt; parameter having a label, but usually that name isn&#39;t the same as the<br>&gt;&gt;&gt;&gt; name of the parameter—one&#39;s a preposition, the other&#39;s a noun. I&#39;m<br>&gt;&gt;&gt;&gt; pretty sure the common case is still unlabeled. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It&#39;s about 50/50 (slight edge to labeled first parameters) in the<br>&gt;&gt;&gt; imported Cocoa APIs.<br>&gt;&gt; <br>&gt;&gt; If it&#39;s easy to get these numbers, how many of the first parameters have the same label as the parameter name?<br>&gt; <br>&gt; If you&#39;re going to measure that, you should also measure it for second, third, ..., Nth parameters too for comparison.<br></p><p>Anyone who wants to measure is free to do so: simple regexps and wc generally work for this purpose.<br></p><p>https://github.com/apple/swift-3-api-guidelines-review/tree/swift-3/Platforms<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160311/b4c27b27/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>March 11, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Mar 11, 2016, at 13:30 , Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Mar 11, 2016, at 11:27 AM, Joe Groff &lt;jgroff at apple.com &lt;mailto:jgroff at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Mar 11, 2016, at 11:20 AM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Mar 10, 2016, at 15:34 , Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; on Wed Mar 09 2016, Jordan Rose &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; This is my concern too. Our guidelines often lead to the first<br>&gt;&gt;&gt;&gt;&gt; parameter having a label, but usually that name isn&#39;t the same as the<br>&gt;&gt;&gt;&gt;&gt; name of the parameter—one&#39;s a preposition, the other&#39;s a noun. I&#39;m<br>&gt;&gt;&gt;&gt;&gt; pretty sure the common case is still unlabeled. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It&#39;s about 50/50 (slight edge to labeled first parameters) in the<br>&gt;&gt;&gt;&gt; imported Cocoa APIs.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If it&#39;s easy to get these numbers, how many of the first parameters have the same label as the parameter name?<br>&gt;&gt; <br>&gt;&gt; If you&#39;re going to measure that, you should also measure it for second, third, ..., Nth parameters too for comparison.<br>&gt; <br>&gt; Anyone who wants to measure is free to do so: simple regexps and wc generally work for this purpose.<br>&gt; <br>&gt; https://github.com/apple/swift-3-api-guidelines-review/tree/swift-3/Platforms &lt;https://github.com/apple/swift-3-api-guidelines-review/tree/swift-3/Platforms&gt;<br>…in retrospect, probably more of the Cocoa names would match up if they had this shorthand before:<br></p><p>  func beginSheetModal(for window: NSWindow, modalDelegate delegate: AnyObject?, didEnd didEndSelector: Selector, contextInfo contextInfo: UnsafeMutablePointer&lt;Void&gt;)<br></p><p>- for/window is a true difference<br>- modalDelegate/delegate is just convenience inside the method; it could have easily been modalDelegate/modalDelegate<br>- didEnd/didEndSelector actually does match up in the original; the importer has (correctly) changed it to not match<br>- contextInfo/contextInfo is a match<br></p><p>So I&#39;m not convinced results for the later parameters are meaningful. Haven&#39;t looked at first parameters yet.<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160311/dc2f31b3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>March 11, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Mar 11, 2016, at 2:57 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Mar 11, 2016, at 13:30 , Dave Abrahams &lt;dabrahams at apple.com &lt;mailto:dabrahams at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Mar 11, 2016, at 11:27 AM, Joe Groff &lt;jgroff at apple.com &lt;mailto:jgroff at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Mar 11, 2016, at 11:20 AM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Mar 10, 2016, at 15:34 , Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; on Wed Mar 09 2016, Jordan Rose &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; This is my concern too. Our guidelines often lead to the first<br>&gt;&gt;&gt;&gt;&gt;&gt; parameter having a label, but usually that name isn&#39;t the same as the<br>&gt;&gt;&gt;&gt;&gt;&gt; name of the parameter—one&#39;s a preposition, the other&#39;s a noun. I&#39;m<br>&gt;&gt;&gt;&gt;&gt;&gt; pretty sure the common case is still unlabeled. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; It&#39;s about 50/50 (slight edge to labeled first parameters) in the<br>&gt;&gt;&gt;&gt;&gt; imported Cocoa APIs.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If it&#39;s easy to get these numbers, how many of the first parameters have the same label as the parameter name?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If you&#39;re going to measure that, you should also measure it for second, third, ..., Nth parameters too for comparison.<br>&gt;&gt; <br>&gt;&gt; Anyone who wants to measure is free to do so: simple regexps and wc generally work for this purpose.<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-3-api-guidelines-review/tree/swift-3/Platforms &lt;https://github.com/apple/swift-3-api-guidelines-review/tree/swift-3/Platforms&gt;<br>&gt; …in retrospect, probably more of the Cocoa names would match up if they had this shorthand before:<br>&gt; <br>&gt;   func beginSheetModal(for window: NSWindow, modalDelegate delegate: AnyObject?, didEnd didEndSelector: Selector, contextInfo contextInfo: UnsafeMutablePointer&lt;Void&gt;)<br>&gt; <br>&gt; - for/window is a true difference<br>&gt; - modalDelegate/delegate is just convenience inside the method; it could have easily been modalDelegate/modalDelegate<br>&gt; - didEnd/didEndSelector actually does match up in the original; the importer has (correctly) changed it to not match<br>&gt; - contextInfo/contextInfo is a match<br></p><p>Sorry, I don’t know what you are trying to assert here.  Which shorthand?  We haven’t introduced any, and nobody’s proposing to add one.<br></p><p>&gt; <br>&gt; So I&#39;m not convinced results for the later parameters are meaningful. Haven&#39;t looked at first parameters yet.<br>&gt; <br>&gt; Jordan<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160311/090e866a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>March 11, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Mar 11, 2016, at 16:01 , Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Mar 11, 2016, at 2:57 PM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Mar 11, 2016, at 13:30 , Dave Abrahams &lt;dabrahams at apple.com &lt;mailto:dabrahams at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Mar 11, 2016, at 11:27 AM, Joe Groff &lt;jgroff at apple.com &lt;mailto:jgroff at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Mar 11, 2016, at 11:20 AM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Mar 10, 2016, at 15:34 , Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; on Wed Mar 09 2016, Jordan Rose &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; This is my concern too. Our guidelines often lead to the first<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; parameter having a label, but usually that name isn&#39;t the same as the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; name of the parameter—one&#39;s a preposition, the other&#39;s a noun. I&#39;m<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; pretty sure the common case is still unlabeled. <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s about 50/50 (slight edge to labeled first parameters) in the<br>&gt;&gt;&gt;&gt;&gt;&gt; imported Cocoa APIs.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; If it&#39;s easy to get these numbers, how many of the first parameters have the same label as the parameter name?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If you&#39;re going to measure that, you should also measure it for second, third, ..., Nth parameters too for comparison.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Anyone who wants to measure is free to do so: simple regexps and wc generally work for this purpose.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/apple/swift-3-api-guidelines-review/tree/swift-3/Platforms &lt;https://github.com/apple/swift-3-api-guidelines-review/tree/swift-3/Platforms&gt;<br>&gt;&gt; …in retrospect, probably more of the Cocoa names would match up if they had this shorthand before:<br>&gt;&gt; <br>&gt;&gt;   func beginSheetModal(for window: NSWindow, modalDelegate delegate: AnyObject?, didEnd didEndSelector: Selector, contextInfo contextInfo: UnsafeMutablePointer&lt;Void&gt;)<br>&gt;&gt; <br>&gt;&gt; - for/window is a true difference<br>&gt;&gt; - modalDelegate/delegate is just convenience inside the method; it could have easily been modalDelegate/modalDelegate<br>&gt;&gt; - didEnd/didEndSelector actually does match up in the original; the importer has (correctly) changed it to not match<br>&gt;&gt; - contextInfo/contextInfo is a match<br>&gt; <br>&gt; Sorry, I don’t know what you are trying to assert here.  Which shorthand?  We haven’t introduced any, and nobody’s proposing to add one.<br></p><p>The &quot;shorthand&quot; of providing a single name that is used both as an argument label and a parameter name. (Sorry for being unclear about that.) Objective-C has no way to do that, and so there&#39;s no incentive to make selector pieces exactly match parameter names.<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160311/25a66207/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>March 13, 2016 at 10:00:00pm</p></header><div class="content"><p>On Fri, Mar 11, 2016 at 1:30 PM Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; Anyone who wants to measure is free to do so: simple regexps and wc<br>&gt; generally work for this purpose.<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-3-api-guidelines-review/tree/swift-3/Platforms<br>&gt;<br></p><p>Not sure if anyone actually got around to this so doing a basic set of<br>regex (includes class functions and overrides)...<br></p><p>func foo(bar baz:Baz... ---&gt; 10544<br>func foo(baz:Baz... ---&gt; 526<br>func foo(_:Baz... ---&gt; 92<br>func foo() ---&gt; 7392<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160313/0e04b44e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>March 14, 2016 at 11:00:00am</p></header><div class="content"><p>Interesting — but I don’t think framework APIs are necessarily representative of Swift usage at large. I suspect most Swift being done today is in application contexts. And, I don’t have the exact numbers, but when I played around with extracting method signatures from my projects, it seemed like the *majority* of methods should continue to be `func foo(bar: T)`, not `func foo(bar bar: T)`.<br></p><p>— Radek<br></p><p>&gt; On 13 Mar 2016, at 23:29, Shawn Erickson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Fri, Mar 11, 2016 at 1:30 PM Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; Anyone who wants to measure is free to do so: simple regexps and wc generally work for this purpose.<br>&gt; <br>&gt; https://github.com/apple/swift-3-api-guidelines-review/tree/swift-3/Platforms &lt;https://github.com/apple/swift-3-api-guidelines-review/tree/swift-3/Platforms&gt;<br>&gt; <br>&gt; Not sure if anyone actually got around to this so doing a basic set of regex (includes class functions and overrides)...<br>&gt; <br>&gt; func foo(bar baz:Baz... ---&gt; 10544<br>&gt; func foo(baz:Baz... ---&gt; 526<br>&gt; func foo(_:Baz... ---&gt; 92<br>&gt; func foo() ---&gt; 7392<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160314/c324c4e9/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
