<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d042be5dcfe90e649f760303af3e429?s=50"></div><header><strong>Missing warnings for unused literals (and results)?</strong> from <string>Jens Persson</string> &lt;jens at bitcycle.com&gt;<p>February  1, 2016 at 12:00:00pm</p></header><div class="content"><p>func perhapsConfusing() {<br>    let s =<br>    &quot;Since this function compiles fine. One might &quot;<br>    &quot;think that string literals in Swift can be &quot;<br>    &quot;written like this. But that is not the case. &quot;<br>    &quot;Only the first string literal will be printed.&quot;<br>    &quot;The rest (including eg this) will be silently &quot;<br>    &quot;ignored.&quot;<br>    12.34 // As will this.<br>    12 + 4 // And this.<br>    123 == 456 // And this.<br>    print(s) // Prints: &quot;Since this function compiles fine. One might &quot;<br>}<br></p><p>Besides being possibly surprising for newcomers (who may assume string<br>literals split across several lines as above will be joined), there are<br>some related inconsistencies in whether warnings are generated for unused<br>results or not, for example<br>123 == 456 // Unused result is silently ignored, while<br>1.2 == 3.4 // produces a warning: Result of call to &#39;==&#39; is unused.<br>(The following bug report is about unused results, but it doesn&#39;t mention<br>the IMHO similar unused-literals-case: https://bugs.swift.org/browse/SR-245<br>)<br></p><p>So my question is:<br>Should/could there be a warning for unused literals?<br></p><p>/Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160201/48131230/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>Missing warnings for unused literals (and results)?</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>February  1, 2016 at 12:00:00pm</p></header><div class="content"><p>I think that there should be a warning for unused literals. I can&#39;t think of any case where you would like to have a literal just hanging there in Swift.<br></p><p>Félix<br></p><p>&gt; Le 1 févr. 2016 à 06:15:32, Jens Persson via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; func perhapsConfusing() {<br>&gt;     let s =<br>&gt;     &quot;Since this function compiles fine. One might &quot;<br>&gt;     &quot;think that string literals in Swift can be &quot;<br>&gt;     &quot;written like this. But that is not the case. &quot;<br>&gt;     &quot;Only the first string literal will be printed.&quot;<br>&gt;     &quot;The rest (including eg this) will be silently &quot;<br>&gt;     &quot;ignored.&quot;<br>&gt;     12.34 // As will this.<br>&gt;     12 + 4 // And this.<br>&gt;     123 == 456 // And this.<br>&gt;     print(s) // Prints: &quot;Since this function compiles fine. One might &quot;<br>&gt; }<br>&gt; <br>&gt; Besides being possibly surprising for newcomers (who may assume string literals split across several lines as above will be joined), there are some related inconsistencies in whether warnings are generated for unused results or not, for example<br>&gt; 123 == 456 // Unused result is silently ignored, while<br>&gt; 1.2 == 3.4 // produces a warning: Result of call to &#39;==&#39; is unused.<br>&gt; (The following bug report is about unused results, but it doesn&#39;t mention the IMHO similar unused-literals-case: https://bugs.swift.org/browse/SR-245 &lt;https://bugs.swift.org/browse/SR-245&gt; )<br>&gt; <br>&gt; So my question is:<br>&gt; Should/could there be a warning for unused literals?<br>&gt; <br>&gt; /Jens<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160201/d79bb15c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Missing warnings for unused literals (and results)?</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>February  1, 2016 at 01:00:00pm</p></header><div class="content"><p>Yep. I&#39;d just consider this a bug, though someone from the standard library would have to confirm that they don&#39;t consider it an API change. Feel free to tack it on to SR-245; we might as well do them all at the same time.<br></p><p>Jordan<br></p><p>&gt; On Feb 1, 2016, at 9:44, Félix Cloutier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I think that there should be a warning for unused literals. I can&#39;t think of any case where you would like to have a literal just hanging there in Swift.<br>&gt; <br>&gt; Félix<br>&gt; <br>&gt;&gt; Le 1 févr. 2016 à 06:15:32, Jens Persson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; func perhapsConfusing() {<br>&gt;&gt;     let s =<br>&gt;&gt;     &quot;Since this function compiles fine. One might &quot;<br>&gt;&gt;     &quot;think that string literals in Swift can be &quot;<br>&gt;&gt;     &quot;written like this. But that is not the case. &quot;<br>&gt;&gt;     &quot;Only the first string literal will be printed.&quot;<br>&gt;&gt;     &quot;The rest (including eg this) will be silently &quot;<br>&gt;&gt;     &quot;ignored.&quot;<br>&gt;&gt;     12.34 // As will this.<br>&gt;&gt;     12 + 4 // And this.<br>&gt;&gt;     123 == 456 // And this.<br>&gt;&gt;     print(s) // Prints: &quot;Since this function compiles fine. One might &quot;<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Besides being possibly surprising for newcomers (who may assume string literals split across several lines as above will be joined), there are some related inconsistencies in whether warnings are generated for unused results or not, for example<br>&gt;&gt; 123 == 456 // Unused result is silently ignored, while<br>&gt;&gt; 1.2 == 3.4 // produces a warning: Result of call to &#39;==&#39; is unused.<br>&gt;&gt; (The following bug report is about unused results, but it doesn&#39;t mention the IMHO similar unused-literals-case: https://bugs.swift.org/browse/SR-245 &lt;https://bugs.swift.org/browse/SR-245&gt; )<br>&gt;&gt; <br>&gt;&gt; So my question is:<br>&gt;&gt; Should/could there be a warning for unused literals?<br>&gt;&gt; <br>&gt;&gt; /Jens<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160201/8249b8e7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d042be5dcfe90e649f760303af3e429?s=50"></div><header><strong>Missing warnings for unused literals (and results)?</strong> from <string>Jens Persson</string> &lt;jens at bitcycle.com&gt;<p>February  2, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; Feel free to tack it on to SR-245; we might as well do them all at the<br>same time.<br>Thanks, done.<br></p><p><br>On Mon, Feb 1, 2016 at 10:14 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br></p><p>&gt; Yep. I&#39;d just consider this a bug, though someone from the standard<br>&gt; library would have to confirm that they don&#39;t consider it an API change.<br>&gt; Feel free to tack it on to SR-245; we might as well do them all at the same<br>&gt; time.<br>&gt;<br>&gt; Jordan<br>&gt;<br>&gt; On Feb 1, 2016, at 9:44, Félix Cloutier via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I think that there should be a warning for unused literals. I can&#39;t think<br>&gt; of any case where you would like to have a literal just hanging there in<br>&gt; Swift.<br>&gt;<br>&gt; Félix<br>&gt;<br>&gt; Le 1 févr. 2016 à 06:15:32, Jens Persson via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;<br>&gt; func perhapsConfusing() {<br>&gt;     let s =<br>&gt;     &quot;Since this function compiles fine. One might &quot;<br>&gt;     &quot;think that string literals in Swift can be &quot;<br>&gt;     &quot;written like this. But that is not the case. &quot;<br>&gt;     &quot;Only the first string literal will be printed.&quot;<br>&gt;     &quot;The rest (including eg this) will be silently &quot;<br>&gt;     &quot;ignored.&quot;<br>&gt;     12.34 // As will this.<br>&gt;     12 + 4 // And this.<br>&gt;     123 == 456 // And this.<br>&gt;     print(s) // Prints: &quot;Since this function compiles fine. One might &quot;<br>&gt; }<br>&gt;<br>&gt; Besides being possibly surprising for newcomers (who may assume string<br>&gt; literals split across several lines as above will be joined), there are<br>&gt; some related inconsistencies in whether warnings are generated for unused<br>&gt; results or not, for example<br>&gt; 123 == 456 // Unused result is silently ignored, while<br>&gt; 1.2 == 3.4 // produces a warning: Result of call to &#39;==&#39; is unused.<br>&gt; (The following bug report is about unused results, but it doesn&#39;t mention<br>&gt; the IMHO similar unused-literals-case:<br>&gt; https://bugs.swift.org/browse/SR-245 )<br>&gt;<br>&gt; So my question is:<br>&gt; Should/could there be a warning for unused literals?<br>&gt;<br>&gt; /Jens<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br></p><p><br>-- <br>bitCycle AB | Smedjegatan 12 | 742 32 Östhammar | Sweden<br>http://www.bitcycle.com/<br>Phone: +46-73-753 24 62<br>E-mail: jens at bitcycle.com<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160202/e9a8a170/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5f463dd4e7af28b64ad8f0e032ee82dc?s=50"></div><header><strong>Missing warnings for unused literals (and results)?</strong> from <string>Nate Cook</string> &lt;natecook at gmail.com&gt;<p>February  2, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On Feb 1, 2016, at 3:14 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Yep. I&#39;d just consider this a bug, though someone from the standard library would have to confirm that they don&#39;t consider it an API change. Feel free to tack it on to SR-245; we might as well do them all at the same time.<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt;&gt; On Feb 1, 2016, at 9:44, Félix Cloutier via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I think that there should be a warning for unused literals. I can&#39;t think of any case where you would like to have a literal just hanging there in Swift.<br>&gt;&gt; <br>&gt;&gt; Félix<br></p><p>I.... do this all the time in Playgrounds, mainly to see if a conditional branch has been executed as I&#39;m testing or building:<br></p><p><br></p><p>But a warning is a good idea otherwise, and I can figure something else out. :)<br></p><p>&gt;&gt; <br>&gt;&gt;&gt; Le 1 févr. 2016 à 06:15:32, Jens Persson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func perhapsConfusing() {<br>&gt;&gt;&gt;     let s =<br>&gt;&gt;&gt;     &quot;Since this function compiles fine. One might &quot;<br>&gt;&gt;&gt;     &quot;think that string literals in Swift can be &quot;<br>&gt;&gt;&gt;     &quot;written like this. But that is not the case. &quot;<br>&gt;&gt;&gt;     &quot;Only the first string literal will be printed.&quot;<br>&gt;&gt;&gt;     &quot;The rest (including eg this) will be silently &quot;<br>&gt;&gt;&gt;     &quot;ignored.&quot;<br>&gt;&gt;&gt;     12.34 // As will this.<br>&gt;&gt;&gt;     12 + 4 // And this.<br>&gt;&gt;&gt;     123 == 456 // And this.<br>&gt;&gt;&gt;     print(s) // Prints: &quot;Since this function compiles fine. One might &quot;<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Besides being possibly surprising for newcomers (who may assume string literals split across several lines as above will be joined), there are some related inconsistencies in whether warnings are generated for unused results or not, for example<br>&gt;&gt;&gt; 123 == 456 // Unused result is silently ignored, while<br>&gt;&gt;&gt; 1.2 == 3.4 // produces a warning: Result of call to &#39;==&#39; is unused.<br>&gt;&gt;&gt; (The following bug report is about unused results, but it doesn&#39;t mention the IMHO similar unused-literals-case: https://bugs.swift.org/browse/SR-245 &lt;https://bugs.swift.org/browse/SR-245&gt; )<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; So my question is:<br>&gt;&gt;&gt; Should/could there be a warning for unused literals?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; /Jens<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160202/1ba6e5eb/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: PastedGraphic-1.png<br>Type: image/png<br>Size: 9446 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160202/1ba6e5eb/attachment.png&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Missing warnings for unused literals (and results)?</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>February  2, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On Feb 2, 2016, at 18:42 , Nate Cook &lt;natecook at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; On Feb 1, 2016, at 3:14 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Yep. I&#39;d just consider this a bug, though someone from the standard library would have to confirm that they don&#39;t consider it an API change. Feel free to tack it on to SR-245; we might as well do them all at the same time.<br>&gt;&gt; <br>&gt;&gt; Jordan<br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 1, 2016, at 9:44, Félix Cloutier via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think that there should be a warning for unused literals. I can&#39;t think of any case where you would like to have a literal just hanging there in Swift.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Félix<br>&gt; <br>&gt; I.... do this all the time in Playgrounds, mainly to see if a conditional branch has been executed as I&#39;m testing or building:<br>&gt; <br>&gt; &lt;PastedGraphic-1.png&gt;<br>&gt; <br>&gt; But a warning is a good idea otherwise, and I can figure something else out. :)<br></p><p>Playgrounds automatically suppress unused result warnings, exactly because of this. (Admittedly that can be probematic in the other direction, but still.)<br></p><p>Jordan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160202/0b561f44/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
