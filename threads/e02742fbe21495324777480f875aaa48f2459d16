<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0036: Requiring Leading Dot Prefixes for Enum Instance Member Implementations</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April  2, 2016 at 05:00:00pm</p></header><div class="content"><p>Matthew Johnson via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Apr 1, 2016, at 4:07 PM, Dave Abrahams via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Douglas Gregor via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The review of SE-0036 &quot;Requiring Leading Dot Prefixes for Enum Instance<br>&gt;&gt;&gt; Member Implementations&quot; begins now and runs throughApril 5, 2016. The<br>&gt;&gt;&gt; proposal is available here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0036-enum-dot.md<br>&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt;&gt;&gt; should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the<br>&gt;&gt;&gt; review manager. When replying, please try to keep the proposal link at<br>&gt;&gt;&gt; the top of the message:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Proposal link:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0036-enum-dot.md<br>&gt;&gt;&gt; Reply text<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Other replies<br>&gt;&gt;&gt; &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What<br>&gt;&gt;&gt; goes into a review?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The goal of the review process is to improve the proposal under review<br>&gt;&gt;&gt; through constructive criticism and, eventually, determine the direction<br>&gt;&gt;&gt; of Swift. When writing your review, here are some questions you might<br>&gt;&gt;&gt; want to answer in your review:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What is your evaluation of the proposal?<br>&gt;&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; If you have used other languages or libraries with a similar feature, how<br>&gt;&gt;&gt; do you feel that this proposal compares to those?<br>&gt;&gt;&gt; How much effort did you put into your review? A glance, a quick reading,<br>&gt;&gt;&gt; or an in-depth study?<br>&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Doug Gregor<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; This proposal seems to me like it&#39;s failing to fix the underlying problem,<br>&gt;&gt; which is that people don&#39;t understand the leading dot rules, and papering<br>&gt;&gt; over the problem by making the rule less consisten, with different behavior<br>&gt;&gt; for enums and other type-scoped (static/class) entities. It doesn&#39;t seem<br>&gt;&gt; like a principled solution to me. <br>&gt; <br>&gt; This proposal doesn’t change the leading dot rules at all.  What it does<br>&gt; is make the rules for referencing static members *more* consistent than<br>&gt; they are now, removing the special case for enum cases.<br>&gt; <br>&gt; &quot;Enumeration cases are essentially static not instance type members.<br>&gt; Unlike static members in structures and classes, enumeration cases can be<br>&gt; mentioned in initializers and instance methods without referencing a<br>&gt; fully qualified type. This makes little sense. In no other case can an<br>&gt; instance implementation directly access a static member.&quot;<br>&gt; <br>&gt; I believe at one point in Swift’s history all static members could be<br>&gt; referenced directly.  This proposal seems like it is cleaning up a case<br>&gt; that was missed when that changed. <br></p><p>I believe I misread the proposal and you are right.<br></p><p>I do have reservations about leading dot syntax that are highlighted by<br>this sentence in the proposal:<br></p><p>A leading dot has become a conventional shorthand for &quot;enumeration case&quot;<br>across the language.<br></p><p>That isn&#39;t in fact what it means, and if we have to play into that<br>misperception I think it indicates a bigger problem. But we can handle that<br>outside of this review. <br></p><p>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; -Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; <br></p><p><br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>[Review] SE-0036: Requiring Leading Dot Prefixes for Enum Instance Member Implementations</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>April  3, 2016 at 07:00:00am</p></header><div class="content"><p>As as been pointed out in the past, why not make a leading dot mean static<br>(including enum). This would be nice and consistent.<br></p><p>On Sunday, 3 April 2016, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Matthew Johnson via swift-evolution<br>&gt; &lt;swift-evolution at swift.org &lt;javascript:;&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt; On Apr 1, 2016, at 4:07 PM, Dave Abrahams via swift-evolution<br>&gt; &gt;&gt; &lt;swift-evolution at swift.org &lt;javascript:;&gt;&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Douglas Gregor via swift-evolution<br>&gt; &gt;&gt; &lt;swift-evolution at swift.org &lt;javascript:;&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt; Hello Swift community,<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; The review of SE-0036 &quot;Requiring Leading Dot Prefixes for Enum Instance<br>&gt; &gt;&gt;&gt; Member Implementations&quot; begins now and runs throughApril 5, 2016. The<br>&gt; &gt;&gt;&gt; proposal is available here:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0036-enum-dot.md<br>&gt; &gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All<br>&gt; reviews<br>&gt; &gt;&gt;&gt; should be sent to the swift-evolution mailing list at<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; &gt;&gt;&gt; review manager. When replying, please try to keep the proposal link at<br>&gt; &gt;&gt;&gt; the top of the message:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Proposal link:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0036-enum-dot.md<br>&gt; &gt;&gt;&gt; Reply text<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Other replies<br>&gt; &gt;&gt;&gt; &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1<br>&gt; &gt;What<br>&gt; &gt;&gt;&gt; goes into a review?<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; The goal of the review process is to improve the proposal under review<br>&gt; &gt;&gt;&gt; through constructive criticism and, eventually, determine the direction<br>&gt; &gt;&gt;&gt; of Swift. When writing your review, here are some questions you might<br>&gt; &gt;&gt;&gt; want to answer in your review:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; What is your evaluation of the proposal?<br>&gt; &gt;&gt;&gt; Is the problem being addressed significant enough to warrant a change<br>&gt; to Swift?<br>&gt; &gt;&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; &gt;&gt;&gt; If you have used other languages or libraries with a similar feature,<br>&gt; how<br>&gt; &gt;&gt;&gt; do you feel that this proposal compares to those?<br>&gt; &gt;&gt;&gt; How much effort did you put into your review? A glance, a quick<br>&gt; reading,<br>&gt; &gt;&gt;&gt; or an in-depth study?<br>&gt; &gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; &gt;&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; &gt;&gt;&gt; Thank you,<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Doug Gregor<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Review Manager<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; This proposal seems to me like it&#39;s failing to fix the underlying<br>&gt; problem,<br>&gt; &gt;&gt; which is that people don&#39;t understand the leading dot rules, and<br>&gt; papering<br>&gt; &gt;&gt; over the problem by making the rule less consisten, with different<br>&gt; behavior<br>&gt; &gt;&gt; for enums and other type-scoped (static/class) entities. It doesn&#39;t seem<br>&gt; &gt;&gt; like a principled solution to me.<br>&gt; &gt;<br>&gt; &gt; This proposal doesn’t change the leading dot rules at all.  What it does<br>&gt; &gt; is make the rules for referencing static members *more* consistent than<br>&gt; &gt; they are now, removing the special case for enum cases.<br>&gt; &gt;<br>&gt; &gt; &quot;Enumeration cases are essentially static not instance type members.<br>&gt; &gt; Unlike static members in structures and classes, enumeration cases can be<br>&gt; &gt; mentioned in initializers and instance methods without referencing a<br>&gt; &gt; fully qualified type. This makes little sense. In no other case can an<br>&gt; &gt; instance implementation directly access a static member.&quot;<br>&gt; &gt;<br>&gt; &gt; I believe at one point in Swift’s history all static members could be<br>&gt; &gt; referenced directly.  This proposal seems like it is cleaning up a case<br>&gt; &gt; that was missed when that changed.<br>&gt;<br>&gt; I believe I misread the proposal and you are right.<br>&gt;<br>&gt; I do have reservations about leading dot syntax that are highlighted by<br>&gt; this sentence in the proposal:<br>&gt;<br>&gt; A leading dot has become a conventional shorthand for &quot;enumeration case&quot;<br>&gt; across the language.<br>&gt;<br>&gt; That isn&#39;t in fact what it means, and if we have to play into that<br>&gt; misperception I think it indicates a bigger problem. But we can handle that<br>&gt; outside of this review.<br>&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; --<br>&gt; &gt;&gt; -Dave<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org &lt;javascript:;&gt;<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; -Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;javascript:;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p><br>-- <br>-- Howard.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160403/5f7ec92d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Review] SE-0036: Requiring Leading Dot Prefixes for Enum Instance Member Implementations</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>April  2, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; As as been pointed out in the past, why not make a leading dot mean static (including enum). This would be nice and consistent. <br></p><p>And it would break the common pattern of doing things like:<br></p><p>	string.compare(otherString, options: [.caseInsensitive, .numeric])<br></p><p>Leading dot can only mean one thing; if it means &quot;static member on the type of Self&quot;, it cannot mean &quot;static member on the inferred type of the expression&quot;.<br></p><p>Now, what might be nice is if you could say `Self.someCase` or `Type.someCase` to access a static member without retyping the type name. Alas, we are not so lucky as that.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>[Review] SE-0036: Requiring Leading Dot Prefixes for Enum Instance Member Implementations</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>April  3, 2016 at 07:00:00am</p></header><div class="content"><p>I meant any static member, inferred self or inferred other. So your example<br>would be unchanged.<br></p><p>On Sunday, 3 April 2016, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br></p><p>&gt; &gt; As as been pointed out in the past, why not make a leading dot mean<br>&gt; static (including enum). This would be nice and consistent.<br>&gt;<br>&gt; And it would break the common pattern of doing things like:<br>&gt;<br>&gt;         string.compare(otherString, options: [.caseInsensitive, .numeric])<br>&gt;<br>&gt; Leading dot can only mean one thing; if it means &quot;static member on the<br>&gt; type of Self&quot;, it cannot mean &quot;static member on the inferred type of the<br>&gt; expression&quot;.<br>&gt;<br>&gt; Now, what might be nice is if you could say `Self.someCase` or<br>&gt; `Type.someCase` to access a static member without retyping the type name.<br>&gt; Alas, we are not so lucky as that.<br>&gt;<br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br>&gt;<br></p><p>-- <br>-- Howard.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160403/fd09af42/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] SE-0036: Requiring Leading Dot Prefixes for Enum Instance Member Implementations</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>April  4, 2016 at 10:00:00am</p></header><div class="content"><p>On Apr 2, 2016, at 11:13 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; I believe I misread the proposal and you are right.<br>&gt; <br>&gt; I do have reservations about leading dot syntax that are highlighted by<br>&gt; this sentence in the proposal:<br>&gt; <br>&gt; A leading dot has become a conventional shorthand for &quot;enumeration case&quot;<br>&gt; across the language.<br>&gt; <br>&gt; That isn&#39;t in fact what it means, and if we have to play into that<br>&gt; misperception I think it indicates a bigger problem. But we can handle that<br>&gt; outside of this review. <br></p><p>Can you ping me off-list or in another thread and explain what the issues are?<br></p><p>Thank you,<br></p><p>-- Erica<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160404/ea4aba9a/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
