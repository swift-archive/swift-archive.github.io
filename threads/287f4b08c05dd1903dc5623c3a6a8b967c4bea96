<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7368211260540f80ae6a808787a21e59?s=50"></div><header><strong>How do generics interact with overloaded methods?</strong> from <string>Ryan Conway</string> &lt;theconmethod at gmail.com&gt;<p>January 13, 2016 at 11:00:00pm</p></header><div class="content"><p>Hey swift-users,<br></p><p>I&#39;m teaching myself Swift, coming from a mostly C and Python background,<br>and would like to understand generics more deeply. Right now, I&#39;m seeing<br>generic data types invoke overloaded methods in ways I do not understand,<br>and am seeking clarification why.<br></p><p>In an effort to model a data structure whose data can be represented as<br>multiple data types simultaneously, I&#39;ve made this class. Here its<br>implementation is mocked using constants.<br></p><p>class Bar {<br>    func read() -&gt; Int {<br>        return -1<br>    }<br>    func read() -&gt; UInt {<br>        return 1<br>    }<br>    func read&lt;T&gt;() -&gt; T {<br>        print(&quot;Unsupported data type requested&quot;)<br>        exit(1)<br>    }<br>}<br></p><p><br>Objects of that class return the requested type as expected when used like<br>so:<br></p><p>let thisWorks: Int = Bar().read() // returns -1<br>let thisAlsoWorks: UInt = Bar().read() // returns 1<br></p><p><br>However, when I introduce generics on top of that class, the expected<br>method (the &quot;most precise&quot; method) is not called. For example, given this<br>other class:<br></p><p>class Baz&lt;T&gt; {<br>    let myBar = Bar()<br></p><p>    func read() -&gt; T {<br>        return self.myBar.read()<br>    }<br>}<br></p><p><br>Both of these invocations call the generic read&lt;T&gt;() -&gt; T method rather<br>than the read() -&gt; UInt method:<br></p><p>let thisDoesntWork = Baz&lt;UInt&gt;().read()<br>let thisDoesntWorkEither: UInt = Baz&lt;UInt&gt;().read()<br></p><p><br>Am I using generics wrong here? Is there some other language feature I<br>should be using to capture this data? Any pointers would be greatly<br>appreciated.<br></p><p>Thank you,<br>Ryan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160113/287fea96/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>How do generics interact with overloaded methods?</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>January 14, 2016 at 03:00:00pm</p></header><div class="content"><p>Hi Ryan,<br></p><p>I just try to explain this to you. I don&#39;t know Python. That is my<br>background.<br></p><p>I think in you code<br></p><p>class Baz&lt;T&gt; {<br>    let myBar = Bar()<br></p><p>    func read() -&gt; T {<br>        return self.myBar.read()<br>    }<br>}<br></p><p>func read() -&gt; T means you want the return type T method other than the<br>other two. Swift will not try the return type Int as it choose the function<br>read() -&gt; T before it replaces the type T to type Int. That is my option.<br></p><p>Further more, if you change code as<br></p><p>class Baz&lt;T&gt; {<br>    let myBar = Bar()<br></p><p>    func read() -&gt; T {<br>        return self.myBar.read()<br>    }<br></p><p>    func read() -&gt; Int {<br>        return self.myBar.read()<br>    }<br>    func read() -&gt; UInt {<br>        return 1<br>    }<br>}<br></p><p>//let thisDoesntWork = Baz&lt;UInt&gt;().read() // ambitious code as swift does<br>not know which function to choose<br>let thisWillWork:Int = Baz&lt;UInt&gt;().read() // -1<br></p><p><br>zhaoxin<br></p><p>On Thu, Jan 14, 2016 at 3:04 PM, Ryan Conway via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Hey swift-users,<br>&gt;<br>&gt; I&#39;m teaching myself Swift, coming from a mostly C and Python background,<br>&gt; and would like to understand generics more deeply. Right now, I&#39;m seeing<br>&gt; generic data types invoke overloaded methods in ways I do not understand,<br>&gt; and am seeking clarification why.<br>&gt;<br>&gt; In an effort to model a data structure whose data can be represented as<br>&gt; multiple data types simultaneously, I&#39;ve made this class. Here its<br>&gt; implementation is mocked using constants.<br>&gt;<br>&gt; class Bar {<br>&gt;     func read() -&gt; Int {<br>&gt;         return -1<br>&gt;     }<br>&gt;     func read() -&gt; UInt {<br>&gt;         return 1<br>&gt;     }<br>&gt;     func read&lt;T&gt;() -&gt; T {<br>&gt;         print(&quot;Unsupported data type requested&quot;)<br>&gt;         exit(1)<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt;<br>&gt; Objects of that class return the requested type as expected when used like<br>&gt; so:<br>&gt;<br>&gt; let thisWorks: Int = Bar().read() // returns -1<br>&gt; let thisAlsoWorks: UInt = Bar().read() // returns 1<br>&gt;<br>&gt;<br>&gt; However, when I introduce generics on top of that class, the expected<br>&gt; method (the &quot;most precise&quot; method) is not called. For example, given this<br>&gt; other class:<br>&gt;<br>&gt; class Baz&lt;T&gt; {<br>&gt;     let myBar = Bar()<br>&gt;<br>&gt;     func read() -&gt; T {<br>&gt;         return self.myBar.read()<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt;<br>&gt; Both of these invocations call the generic read&lt;T&gt;() -&gt; T method rather<br>&gt; than the read() -&gt; UInt method:<br>&gt;<br>&gt; let thisDoesntWork = Baz&lt;UInt&gt;().read()<br>&gt; let thisDoesntWorkEither: UInt = Baz&lt;UInt&gt;().read()<br>&gt;<br>&gt;<br>&gt; Am I using generics wrong here? Is there some other language feature I<br>&gt; should be using to capture this data? Any pointers would be greatly<br>&gt; appreciated.<br>&gt;<br>&gt; Thank you,<br>&gt; Ryan<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br></p><p><br>-- <br></p><p>Owen Zhao<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160114/caa1978f/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7321934b88ca8da079d7b89926501a9c?s=50"></div><header><strong>How do generics interact with overloaded methods?</strong> from <string>David Turnbull</string> &lt;dturnbull at gmail.com&gt;<p>January 14, 2016 at 01:00:00am</p></header><div class="content"><p>You&#39;re using generics like they were templates. A lot of people coming from<br>C++ will make this mistake at first. Here&#39;s the secret: C++ templates are a<br>substitution at compile time. Swift generics have to satisfy the protocols.<br></p><p>Your example is contrived to show exactly how templates work and generics<br>don&#39;t work. It&#39;s not fixable. But here&#39;s some code to ponder that will lead<br>you down the right path...<br></p><p>func read&lt;T:UnsignedIntegerType&gt;() -&gt; T { return 1 }<br></p><p>func read&lt;T:SignedIntegerType&gt;() -&gt; T { return -1 }<br></p><p>let x:Int64 = read()<br></p><p>let y:UInt8 = read()<br></p><p>Protocols are essential to generics. Figure out how they work together and<br>you&#39;re good to go.<br></p><p>-david<br></p><p><br></p><p>On Wed, Jan 13, 2016 at 11:04 PM, Ryan Conway via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Hey swift-users,<br>&gt;<br>&gt; I&#39;m teaching myself Swift, coming from a mostly C and Python background,<br>&gt; and would like to understand generics more deeply. Right now, I&#39;m seeing<br>&gt; generic data types invoke overloaded methods in ways I do not understand,<br>&gt; and am seeking clarification why.<br>&gt;<br>&gt; In an effort to model a data structure whose data can be represented as<br>&gt; multiple data types simultaneously, I&#39;ve made this class. Here its<br>&gt; implementation is mocked using constants.<br>&gt;<br>&gt; class Bar {<br>&gt;     func read() -&gt; Int {<br>&gt;         return -1<br>&gt;     }<br>&gt;     func read() -&gt; UInt {<br>&gt;         return 1<br>&gt;     }<br>&gt;     func read&lt;T&gt;() -&gt; T {<br>&gt;         print(&quot;Unsupported data type requested&quot;)<br>&gt;         exit(1)<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt;<br>&gt; Objects of that class return the requested type as expected when used like<br>&gt; so:<br>&gt;<br>&gt; let thisWorks: Int = Bar().read() // returns -1<br>&gt; let thisAlsoWorks: UInt = Bar().read() // returns 1<br>&gt;<br>&gt;<br>&gt; However, when I introduce generics on top of that class, the expected<br>&gt; method (the &quot;most precise&quot; method) is not called. For example, given this<br>&gt; other class:<br>&gt;<br>&gt; class Baz&lt;T&gt; {<br>&gt;     let myBar = Bar()<br>&gt;<br>&gt;     func read() -&gt; T {<br>&gt;         return self.myBar.read()<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt;<br>&gt; Both of these invocations call the generic read&lt;T&gt;() -&gt; T method rather<br>&gt; than the read() -&gt; UInt method:<br>&gt;<br>&gt; let thisDoesntWork = Baz&lt;UInt&gt;().read()<br>&gt; let thisDoesntWorkEither: UInt = Baz&lt;UInt&gt;().read()<br>&gt;<br>&gt;<br>&gt; Am I using generics wrong here? Is there some other language feature I<br>&gt; should be using to capture this data? Any pointers would be greatly<br>&gt; appreciated.<br>&gt;<br>&gt; Thank you,<br>&gt; Ryan<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160114/45c2dec4/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2969f67fc010e956c71442148f3f6fc0?s=50"></div><header><strong>How do generics interact with overloaded methods?</strong> from <string>Wallacy</string> &lt;wallacyf at gmail.com&gt;<p>January 14, 2016 at 02:00:00pm</p></header><div class="content"><p>Generics are compile time feature, but like said, not like c++ templates.<br>Unconstrained generic T will be like Any. &quot; return self.myBar.read()&quot; can<br>only be translated to a &quot;function pointer&quot; to the generic version, because<br>is the only information available at compile time.<br>Has a talk on wwdc explaining this.<br>Swift can do generic specialization, but only when information enough to do<br>this. Usually constrained generic is the way to go.<br></p><p><br>Em qui, 14 de jan de 2016 às 05:05, Ryan Conway via swift-users &lt;<br>swift-users at swift.org&gt; escreveu:<br></p><p>&gt; Hey swift-users,<br>&gt;<br>&gt; I&#39;m teaching myself Swift, coming from a mostly C and Python background,<br>&gt; and would like to understand generics more deeply. Right now, I&#39;m seeing<br>&gt; generic data types invoke overloaded methods in ways I do not understand,<br>&gt; and am seeking clarification why.<br>&gt;<br>&gt; In an effort to model a data structure whose data can be represented as<br>&gt; multiple data types simultaneously, I&#39;ve made this class. Here its<br>&gt; implementation is mocked using constants.<br>&gt;<br>&gt; class Bar {<br>&gt;     func read() -&gt; Int {<br>&gt;         return -1<br>&gt;     }<br>&gt;     func read() -&gt; UInt {<br>&gt;         return 1<br>&gt;     }<br>&gt;     func read&lt;T&gt;() -&gt; T {<br>&gt;         print(&quot;Unsupported data type requested&quot;)<br>&gt;         exit(1)<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt;<br>&gt; Objects of that class return the requested type as expected when used like<br>&gt; so:<br>&gt;<br>&gt; let thisWorks: Int = Bar().read() // returns -1<br>&gt; let thisAlsoWorks: UInt = Bar().read() // returns 1<br>&gt;<br>&gt;<br>&gt; However, when I introduce generics on top of that class, the expected<br>&gt; method (the &quot;most precise&quot; method) is not called. For example, given this<br>&gt; other class:<br>&gt;<br>&gt; class Baz&lt;T&gt; {<br>&gt;     let myBar = Bar()<br>&gt;<br>&gt;     func read() -&gt; T {<br>&gt;         return self.myBar.read()<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt;<br>&gt; Both of these invocations call the generic read&lt;T&gt;() -&gt; T method rather<br>&gt; than the read() -&gt; UInt method:<br>&gt;<br>&gt; let thisDoesntWork = Baz&lt;UInt&gt;().read()<br>&gt; let thisDoesntWorkEither: UInt = Baz&lt;UInt&gt;().read()<br>&gt;<br>&gt;<br>&gt; Am I using generics wrong here? Is there some other language feature I<br>&gt; should be using to capture this data? Any pointers would be greatly<br>&gt; appreciated.<br>&gt;<br>&gt; Thank you,<br>&gt; Ryan<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160114/2a326132/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7368211260540f80ae6a808787a21e59?s=50"></div><header><strong>How do generics interact with overloaded methods?</strong> from <string>Ryan Conway</string> &lt;theconmethod at gmail.com&gt;<p>January 14, 2016 at 10:00:00am</p></header><div class="content"><p>Thank you for your responses. I&#39;m grateful for having been given several<br>different perspectives, especially in such a short time, and have some<br>ideas for things to try this weekend.<br></p><p>If I&#39;m understanding correctly, the salient point is that Swift will<br>resolve a call to an overloaded function to exactly one implementation of<br>that overloaded function, even if for all types of a generic class&#39; generic<br>function.<br></p><p>I&#39;d like to understand Swift&#39;s design philosophy better. Why were things<br>implemented this way? For example, in the following line of code:<br></p><p>let thisDoesntWork = Baz&lt;UInt&gt;().read()<br></p><p><br>The compiler knows that read() is being called on Baz&lt;UInt&gt;, so it could<br>know that read() must return a UInt, so it could know that it can safely<br>use the Bar.read() that returns a UInt. From what I&#39;m hearing, this is what<br>C++ would use, but not Swift, and I imagine there is a good reason for it.<br></p><p>Wallacy, if you&#39;re able to provide a link to this WWDC talk I would greatly<br>appreciate it.<br></p><p>Ryan<br></p><p>On Thu, Jan 14, 2016 at 6:07 AM, Wallacy &lt;wallacyf at gmail.com&gt; wrote:<br></p><p>&gt; Generics are compile time feature, but like said, not like c++ templates.<br>&gt; Unconstrained generic T will be like Any. &quot; return self.myBar.read()&quot; can<br>&gt; only be translated to a &quot;function pointer&quot; to the generic version, because<br>&gt; is the only information available at compile time.<br>&gt; Has a talk on wwdc explaining this.<br>&gt; Swift can do generic specialization, but only when information enough to<br>&gt; do this. Usually constrained generic is the way to go.<br>&gt;<br>&gt;<br>&gt; Em qui, 14 de jan de 2016 às 05:05, Ryan Conway via swift-users &lt;<br>&gt; swift-users at swift.org&gt; escreveu:<br>&gt;<br>&gt;&gt; Hey swift-users,<br>&gt;&gt;<br>&gt;&gt; I&#39;m teaching myself Swift, coming from a mostly C and Python background,<br>&gt;&gt; and would like to understand generics more deeply. Right now, I&#39;m seeing<br>&gt;&gt; generic data types invoke overloaded methods in ways I do not understand,<br>&gt;&gt; and am seeking clarification why.<br>&gt;&gt;<br>&gt;&gt; In an effort to model a data structure whose data can be represented as<br>&gt;&gt; multiple data types simultaneously, I&#39;ve made this class. Here its<br>&gt;&gt; implementation is mocked using constants.<br>&gt;&gt;<br>&gt;&gt; class Bar {<br>&gt;&gt;     func read() -&gt; Int {<br>&gt;&gt;         return -1<br>&gt;&gt;     }<br>&gt;&gt;     func read() -&gt; UInt {<br>&gt;&gt;         return 1<br>&gt;&gt;     }<br>&gt;&gt;     func read&lt;T&gt;() -&gt; T {<br>&gt;&gt;         print(&quot;Unsupported data type requested&quot;)<br>&gt;&gt;         exit(1)<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Objects of that class return the requested type as expected when used<br>&gt;&gt; like so:<br>&gt;&gt;<br>&gt;&gt; let thisWorks: Int = Bar().read() // returns -1<br>&gt;&gt; let thisAlsoWorks: UInt = Bar().read() // returns 1<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; However, when I introduce generics on top of that class, the expected<br>&gt;&gt; method (the &quot;most precise&quot; method) is not called. For example, given this<br>&gt;&gt; other class:<br>&gt;&gt;<br>&gt;&gt; class Baz&lt;T&gt; {<br>&gt;&gt;     let myBar = Bar()<br>&gt;&gt;<br>&gt;&gt;     func read() -&gt; T {<br>&gt;&gt;         return self.myBar.read()<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Both of these invocations call the generic read&lt;T&gt;() -&gt; T method rather<br>&gt;&gt; than the read() -&gt; UInt method:<br>&gt;&gt;<br>&gt;&gt; let thisDoesntWork = Baz&lt;UInt&gt;().read()<br>&gt;&gt; let thisDoesntWorkEither: UInt = Baz&lt;UInt&gt;().read()<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Am I using generics wrong here? Is there some other language feature I<br>&gt;&gt; should be using to capture this data? Any pointers would be greatly<br>&gt;&gt; appreciated.<br>&gt;&gt;<br>&gt;&gt; Thank you,<br>&gt;&gt; Ryan<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160114/bdb9c710/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>How do generics interact with overloaded methods?</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>January 15, 2016 at 03:00:00am</p></header><div class="content"><p>&gt;<br>&gt; The compiler knows that read() is being called on Baz&lt;UInt&gt;, so it could<br>&gt; know that read() must return a UInt,<br></p><p><br>I think there are two steps here.<br></p><p>   1. compiler choose func read&lt;T&gt;() -&gt; T base on the return type of func<br>   read() -&gt; T<br>   2. compiler replace T with UInt<br></p><p>In your mind, the steps are reversed.<br></p><p>In fact, there is no overload here.<br></p><p>Code:<br></p><p>let thisDoesntWork = Baz&lt;UInt&gt;().myBar.read() // error: ambiguous use of<br>&#39;read()&#39;<br></p><p>Compiler doesn&#39;t know which function to choose as there is no return type<br>to derive from。<br></p><p>z<br>​haoxin​<br></p><p>On Fri, Jan 15, 2016 at 2:13 AM, Ryan Conway via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Thank you for your responses. I&#39;m grateful for having been given several<br>&gt; different perspectives, especially in such a short time, and have some<br>&gt; ideas for things to try this weekend.<br>&gt;<br>&gt; If I&#39;m understanding correctly, the salient point is that Swift will<br>&gt; resolve a call to an overloaded function to exactly one implementation of<br>&gt; that overloaded function, even if for all types of a generic class&#39; generic<br>&gt; function.<br>&gt;<br>&gt; I&#39;d like to understand Swift&#39;s design philosophy better. Why were things<br>&gt; implemented this way? For example, in the following line of code:<br>&gt;<br>&gt; let thisDoesntWork = Baz&lt;UInt&gt;().read()<br>&gt;<br>&gt;<br>&gt; The compiler knows that read() is being called on Baz&lt;UInt&gt;, so it could<br>&gt; know that read() must return a UInt, so it could know that it can safely<br>&gt; use the Bar.read() that returns a UInt. From what I&#39;m hearing, this is what<br>&gt; C++ would use, but not Swift, and I imagine there is a good reason for it.<br>&gt;<br>&gt; Wallacy, if you&#39;re able to provide a link to this WWDC talk I would<br>&gt; greatly appreciate it.<br>&gt;<br>&gt; Ryan<br>&gt;<br>&gt; On Thu, Jan 14, 2016 at 6:07 AM, Wallacy &lt;wallacyf at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; Generics are compile time feature, but like said, not like c++ templates.<br>&gt;&gt; Unconstrained generic T will be like Any. &quot; return self.myBar.read()&quot; can<br>&gt;&gt; only be translated to a &quot;function pointer&quot; to the generic version, because<br>&gt;&gt; is the only information available at compile time.<br>&gt;&gt; Has a talk on wwdc explaining this.<br>&gt;&gt; Swift can do generic specialization, but only when information enough to<br>&gt;&gt; do this. Usually constrained generic is the way to go.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Em qui, 14 de jan de 2016 às 05:05, Ryan Conway via swift-users &lt;<br>&gt;&gt; swift-users at swift.org&gt; escreveu:<br>&gt;&gt;<br>&gt;&gt;&gt; Hey swift-users,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I&#39;m teaching myself Swift, coming from a mostly C and Python background,<br>&gt;&gt;&gt; and would like to understand generics more deeply. Right now, I&#39;m seeing<br>&gt;&gt;&gt; generic data types invoke overloaded methods in ways I do not understand,<br>&gt;&gt;&gt; and am seeking clarification why.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; In an effort to model a data structure whose data can be represented as<br>&gt;&gt;&gt; multiple data types simultaneously, I&#39;ve made this class. Here its<br>&gt;&gt;&gt; implementation is mocked using constants.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; class Bar {<br>&gt;&gt;&gt;     func read() -&gt; Int {<br>&gt;&gt;&gt;         return -1<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt;     func read() -&gt; UInt {<br>&gt;&gt;&gt;         return 1<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt;     func read&lt;T&gt;() -&gt; T {<br>&gt;&gt;&gt;         print(&quot;Unsupported data type requested&quot;)<br>&gt;&gt;&gt;         exit(1)<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Objects of that class return the requested type as expected when used<br>&gt;&gt;&gt; like so:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; let thisWorks: Int = Bar().read() // returns -1<br>&gt;&gt;&gt; let thisAlsoWorks: UInt = Bar().read() // returns 1<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; However, when I introduce generics on top of that class, the expected<br>&gt;&gt;&gt; method (the &quot;most precise&quot; method) is not called. For example, given this<br>&gt;&gt;&gt; other class:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; class Baz&lt;T&gt; {<br>&gt;&gt;&gt;     let myBar = Bar()<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     func read() -&gt; T {<br>&gt;&gt;&gt;         return self.myBar.read()<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Both of these invocations call the generic read&lt;T&gt;() -&gt; T method rather<br>&gt;&gt;&gt; than the read() -&gt; UInt method:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; let thisDoesntWork = Baz&lt;UInt&gt;().read()<br>&gt;&gt;&gt; let thisDoesntWorkEither: UInt = Baz&lt;UInt&gt;().read()<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Am I using generics wrong here? Is there some other language feature I<br>&gt;&gt;&gt; should be using to capture this data? Any pointers would be greatly<br>&gt;&gt;&gt; appreciated.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt; Ryan<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br></p><p><br>-- <br></p><p>Owen Zhao<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160115/0e28ecec/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2969f67fc010e956c71442148f3f6fc0?s=50"></div><header><strong>How do generics interact with overloaded methods?</strong> from <string>Wallacy</string> &lt;wallacyf at gmail.com&gt;<p>January 15, 2016 at 04:00:00pm</p></header><div class="content"><p>Sure,<br></p><p>Talk: https://developer.apple.com/videos/play/wwdc2015-409/<br></p><p>There is a part called: How Generics Work<br></p><p>There is another talk with other details, but cannot remember which.<br></p><p>And also is a doc:<br>https://github.com/apple/swift/blob/master/docs/Generics.rst<br></p><p>May you can see: Generics is more about protocols than &quot;type substitution&quot;.<br></p><p>The point is: Unconstrained T, can be anything, so when compiler try to<br>compile this:<br></p><p>func read() -&gt; T {<br>        return self.myBar.read()<br>}<br></p><p>self.myBar.read() can only point to generic version. The overload will be<br>resolved once.<br></p><p>The compiler will not generate another version of this read() -&gt; T for<br>every single call of Baz&lt;T&gt;.<br></p><p>Usually, unconstrained T and &quot;Any&quot; is the same thing. Generics is more<br>about &quot;which overload Im will call at this point&quot;.<br></p><p>Generic specialization is a optimization phase.<br></p><p><br>Em qui, 14 de jan de 2016 às 16:13, Ryan Conway &lt;theconmethod at gmail.com&gt;<br>escreveu:<br></p><p>&gt; Thank you for your responses. I&#39;m grateful for having been given several<br>&gt; different perspectives, especially in such a short time, and have some<br>&gt; ideas for things to try this weekend.<br>&gt;<br>&gt; If I&#39;m understanding correctly, the salient point is that Swift will<br>&gt; resolve a call to an overloaded function to exactly one implementation of<br>&gt; that overloaded function, even if for all types of a generic class&#39; generic<br>&gt; function.<br>&gt;<br>&gt; I&#39;d like to understand Swift&#39;s design philosophy better. Why were things<br>&gt; implemented this way? For example, in the following line of code:<br>&gt;<br>&gt;<br>&gt; let thisDoesntWork = Baz&lt;UInt&gt;().read()<br>&gt;<br>&gt;<br>&gt; The compiler knows that read() is being called on Baz&lt;UInt&gt;, so it could<br>&gt; know that read() must return a UInt, so it could know that it can safely<br>&gt; use the Bar.read() that returns a UInt. From what I&#39;m hearing, this is what<br>&gt; C++ would use, but not Swift, and I imagine there is a good reason for it.<br>&gt;<br>&gt; Wallacy, if you&#39;re able to provide a link to this WWDC talk I would<br>&gt; greatly appreciate it.<br>&gt;<br>&gt;<br>&gt; Ryan<br>&gt;<br>&gt; On Thu, Jan 14, 2016 at 6:07 AM, Wallacy &lt;wallacyf at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; Generics are compile time feature, but like said, not like c++ templates.<br>&gt;&gt; Unconstrained generic T will be like Any. &quot; return self.myBar.read()&quot; can<br>&gt;&gt; only be translated to a &quot;function pointer&quot; to the generic version, because<br>&gt;&gt; is the only information available at compile time.<br>&gt;&gt; Has a talk on wwdc explaining this.<br>&gt;&gt; Swift can do generic specialization, but only when information enough to<br>&gt;&gt; do this. Usually constrained generic is the way to go.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Em qui, 14 de jan de 2016 às 05:05, Ryan Conway via swift-users &lt;<br>&gt;&gt; swift-users at swift.org&gt; escreveu:<br>&gt;&gt;<br>&gt;&gt;&gt; Hey swift-users,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I&#39;m teaching myself Swift, coming from a mostly C and Python background,<br>&gt;&gt;&gt; and would like to understand generics more deeply. Right now, I&#39;m seeing<br>&gt;&gt;&gt; generic data types invoke overloaded methods in ways I do not understand,<br>&gt;&gt;&gt; and am seeking clarification why.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; In an effort to model a data structure whose data can be represented as<br>&gt;&gt;&gt; multiple data types simultaneously, I&#39;ve made this class. Here its<br>&gt;&gt;&gt; implementation is mocked using constants.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; class Bar {<br>&gt;&gt;&gt;     func read() -&gt; Int {<br>&gt;&gt;&gt;         return -1<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt;     func read() -&gt; UInt {<br>&gt;&gt;&gt;         return 1<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt;     func read&lt;T&gt;() -&gt; T {<br>&gt;&gt;&gt;         print(&quot;Unsupported data type requested&quot;)<br>&gt;&gt;&gt;         exit(1)<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Objects of that class return the requested type as expected when used<br>&gt;&gt;&gt; like so:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; let thisWorks: Int = Bar().read() // returns -1<br>&gt;&gt;&gt; let thisAlsoWorks: UInt = Bar().read() // returns 1<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; However, when I introduce generics on top of that class, the expected<br>&gt;&gt;&gt; method (the &quot;most precise&quot; method) is not called. For example, given this<br>&gt;&gt;&gt; other class:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; class Baz&lt;T&gt; {<br>&gt;&gt;&gt;     let myBar = Bar()<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     func read() -&gt; T {<br>&gt;&gt;&gt;         return self.myBar.read()<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Both of these invocations call the generic read&lt;T&gt;() -&gt; T method rather<br>&gt;&gt;&gt; than the read() -&gt; UInt method:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; let thisDoesntWork = Baz&lt;UInt&gt;().read()<br>&gt;&gt;&gt; let thisDoesntWorkEither: UInt = Baz&lt;UInt&gt;().read()<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Am I using generics wrong here? Is there some other language feature I<br>&gt;&gt;&gt; should be using to capture this data? Any pointers would be greatly<br>&gt;&gt;&gt; appreciated.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt; Ryan<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160115/a7db3b16/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
