<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c155243169db74a7787bab9d57a1c3d6?s=50"></div><header><strong>Location of ! in Boolean negation expressions</strong> from <string>Darren Mo</string> &lt;darren.mo at me.com&gt;<p>August  6, 2016 at 12:00:00am</p></header><div class="content"><p>Consider code like<br></p><p>guard !parameters.contains(where: { !validValueRange.contains($0) }) else …<br></p><p>Oftentimes I need to write negation expressions like this. The location of the exclamation marks really bugs me when writing and reading this code. The natural English ordering would be something like<br></p><p>“Make sure parameters does not contain an element such that validValueRange does not contain this element.”<br></p><p>But the programming-language-imposed ordering is<br></p><p>“Make sure NOT parameters contains an element such that NOT validValueRange contains this element.”<br></p><p>See how much harder the programming language version is to understand? Most of the time I write the positive version first because it comes out so naturally, and then I add the exclamation marks afterwards. It really burdens my mind every time I need to write code like this. Let’s come up with a solution to address this!<br></p><p>Here’s my zero-thought solution:<br></p><p>guard parameters.!contains(where: { validValueRange.!contains($0) }) else …<br></p><p>I’d love to hear alternate solutions and whether other people are having this problem too!<br></p><p>Darren<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Location of ! in Boolean negation expressions</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>August  6, 2016 at 12:00:00pm</p></header><div class="content"><p>Changes to Swift syntax aren&#39;t really in scope for the Swift 4 Stage 1<br>evolution process. See this list:<br>https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025676.html<br></p><p><br>On Sat, Aug 6, 2016 at 2:37 AM, Darren Mo via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Consider code like<br>&gt;<br>&gt; guard !parameters.contains(where: { !validValueRange.contains($0) }) else …<br>&gt;<br>&gt; Oftentimes I need to write negation expressions like this. The location of<br>&gt; the exclamation marks really bugs me when writing and reading this code.<br>&gt; The natural English ordering would be something like<br>&gt;<br>&gt; “Make sure parameters does not contain an element such that<br>&gt; validValueRange does not contain this element.”<br>&gt;<br>&gt; But the programming-language-imposed ordering is<br>&gt;<br>&gt; “Make sure NOT parameters contains an element such that NOT<br>&gt; validValueRange contains this element.”<br>&gt;<br>&gt; See how much harder the programming language version is to understand?<br>&gt; Most of the time I write the positive version first because it comes out so<br>&gt; naturally, and then I add the exclamation marks afterwards. It really<br>&gt; burdens my mind every time I need to write code like this. Let’s come up<br>&gt; with a solution to address this!<br>&gt;<br>&gt; Here’s my zero-thought solution:<br>&gt;<br>&gt; guard parameters.!contains(where: { validValueRange.!contains($0) }) else …<br>&gt;<br>&gt; I’d love to hear alternate solutions and whether other people are having<br>&gt; this problem too!<br>&gt;<br>&gt; Darren<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160806/ff2f8c97/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>Location of ! in Boolean negation expressions</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>August  6, 2016 at 09:00:00pm</p></header><div class="content"><p>2016-08-06 10:37 GMT+03:00 Darren Mo via swift-evolution &lt;<br>swift-evolution at swift.org&gt;:<br></p><p>&gt; Consider code like<br>&gt;<br>&gt; guard !parameters.contains(where: { !validValueRange.contains($0) }) else …<br>&gt;<br>&gt; Oftentimes I need to write negation expressions like this. The location of<br>&gt; the exclamation marks really bugs me when writing and reading this code.<br>&gt; The natural English ordering would be something like<br>&gt;<br>&gt; “Make sure parameters does not contain an element such that<br>&gt; validValueRange does not contain this element.”<br>&gt;<br>&gt; But the programming-language-imposed ordering is<br>&gt;<br>&gt; “Make sure NOT parameters contains an element such that NOT<br>&gt; validValueRange contains this element.”<br></p><p><br>One solution to this problem would be to add negative method versions<br>wherever possible. For example: &#39;all&#39;, &#39;any&#39;, &#39;some&#39;, &#39;none&#39; methods<br>instead of just &#39;contains(where:)&#39;.<br>Plus, we could add &#39;unless&#39; alongside &#39;guard&#39;. But these features were<br>postponed to Stage 2.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160806/dc395bb1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a9d2257812ec9c0a45414c06d8f544ee?s=50"></div><header><strong>Location of ! in Boolean negation expressions</strong> from <string>James Andrews</string> &lt;james at enigmanorth.com&gt;<p>August  8, 2016 at 04:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>The .! syntax is a bit gross I think.  The problem is that programmers<br>are very familiar with the NOT &lt;something&gt; semantics. So while changing<br>it might be pleasing from a natural language perspective, it will seem<br>strange from the programmer perspective. I guess you cant win!<br></p><p>I like the suggestion of adding a negative form of the method. However<br>syntax changes are not going to happen for a while now I believe.<br></p><p>Thanks,<br>James<br></p><p><br>On Sat, Aug 6, 2016, at 07:32 PM, Anton Zhilin via swift-evolution wrote:<br>&gt; 2016-08-06 10:37 GMT+03:00 Darren Mo via swift-evolution &lt;swift-<br>&gt; evolution at swift.org&gt;:<br>&gt;&gt; Consider code like<br>&gt;&gt;<br>&gt;&gt;  guard !parameters.contains(where: { !validValueRange.contains($0) })<br>&gt;&gt;  else …<br>&gt;&gt;<br>&gt;&gt;  Oftentimes I need to write negation expressions like this. The<br>&gt;&gt;  location of the exclamation marks really bugs me when writing and<br>&gt;&gt;  reading this code. The natural English ordering would be<br>&gt;&gt;  something like<br>&gt;&gt;<br>&gt;&gt;  “Make sure parameters does not contain an element such that<br>&gt;&gt;  validValueRange does not contain this element.”<br>&gt;&gt;<br>&gt;&gt;  But the programming-language-imposed ordering is<br>&gt;&gt;<br>&gt;&gt;  “Make sure NOT parameters contains an element such that NOT<br>&gt;&gt;  validValueRange contains this element.”<br>&gt;<br>&gt; One solution to this problem would be to add negative method versions<br>&gt; wherever possible. For example: &#39;all&#39;, &#39;any&#39;, &#39;some&#39;, &#39;none&#39; methods<br>&gt; instead of just &#39;contains(where:)&#39;.<br>&gt; Plus, we could add &#39;unless&#39; alongside &#39;guard&#39;. But these features were<br>&gt; postponed to Stage 2.<br>&gt; _________________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160808/6ecef757/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d5db2751088467d55d9bf0a187346ec5?s=50"></div><header><strong>Location of ! in Boolean negation expressions</strong> from <string>Johannes Neubauer</string> &lt;johannes.neubauer at udo.edu&gt;<p>August  7, 2016 at 12:00:00am</p></header><div class="content"><p>I think your syntax is too near to forced unwrapping. It&#39;s just do I put the ! Before or after the dot. This becomes even harder to read if you want to use both at the same time. Then you end up with !.!<br></p><p>Further on, if you want to negate a complete expression, the ! Is again before the parentheses. This will &quot;look&quot; inconsequent.<br></p><p>Last but not least it is uncommon.<br></p><p>All the best <br>Johannes<br></p><p>Von meinem iPhone gesendet<br></p><p>&gt; Am 06.08.2016 um 09:37 schrieb Darren Mo via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; Consider code like<br>&gt; <br>&gt; guard !parameters.contains(where: { !validValueRange.contains($0) }) else …<br>&gt; <br>&gt; Oftentimes I need to write negation expressions like this. The location of the exclamation marks really bugs me when writing and reading this code. The natural English ordering would be something like<br>&gt; <br>&gt; “Make sure parameters does not contain an element such that validValueRange does not contain this element.”<br>&gt; <br>&gt; But the programming-language-imposed ordering is<br>&gt; <br>&gt; “Make sure NOT parameters contains an element such that NOT validValueRange contains this element.”<br>&gt; <br>&gt; See how much harder the programming language version is to understand? Most of the time I write the positive version first because it comes out so naturally, and then I add the exclamation marks afterwards. It really burdens my mind every time I need to write code like this. Let’s come up with a solution to address this!<br>&gt; <br>&gt; Here’s my zero-thought solution:<br>&gt; <br>&gt; guard parameters.!contains(where: { validValueRange.!contains($0) }) else …<br>&gt; <br>&gt; I’d love to hear alternate solutions and whether other people are having this problem too!<br>&gt; <br>&gt; Darren<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
