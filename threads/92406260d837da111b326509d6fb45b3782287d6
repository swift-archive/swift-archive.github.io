<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ee593093b3a4aa721ad6979c752a9c9d?s=50"></div><header><strong>Proposal: disallow nil in favor of .None</strong> from <string>Paul Young</string> &lt;paulyoungonline at gmail.com&gt;<p>April 10, 2016 at 08:00:00pm</p></header><div class="content"><p>Please forgive me if this has already been discussed, but I couldn&#39;t find<br>reference to it anywhere.<br></p><p>My proposal is pretty simple – disallow the use of `nil` and require the<br>use of `.None` instead.<br></p><p>I would like to understand if there are any technical (or otherwise)<br>reasons for `nil` to remain, or if it simply a remnant of interop with<br>Objective-C.<br></p><p>Thanks,<br></p><p>Paul<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160410/924087d6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>Proposal: disallow nil in favor of .None</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>April 10, 2016 at 11:00:00pm</p></header><div class="content"><p>Pretty sure it has been discussed already.<br></p><p>MHO: much of the power of Optionals in Swift is that they’re more than just a .None/.Some(T) enum. They’re tightly integrated into the language. You never say .Some(value) — values are just lifted to optionals automatically. And if we never directly say .Some(T), why should we say .None? Let’s treat optionals as part of the language, and the enum an implementation detail. Let’s use automatic lifting to optionals, all the `if let`s and other helpful syntax, and say `nil` instead of .None — after all, it’s an important enough part of the language to deserve its own keyword. (A keyword, that, as an additional benefit, will be more immediately understood by someone new to Swift)<br></p><p>— Radek<br></p><p>&gt; On 10 Apr 2016, at 22:53, Paul Young via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Please forgive me if this has already been discussed, but I couldn&#39;t find reference to it anywhere.<br>&gt; <br>&gt; My proposal is pretty simple – disallow the use of `nil` and require the use of `.None` instead.<br>&gt; <br>&gt; I would like to understand if there are any technical (or otherwise) reasons for `nil` to remain, or if it simply a remnant of interop with Objective-C.<br>&gt; <br>&gt; Thanks,<br>&gt; <br>&gt; Paul<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>Proposal: disallow nil in favor of .None</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>April 10, 2016 at 05:00:00pm</p></header><div class="content"><p>What about adding a none keyword as a shortcut for .none?<br></p><p>Might be a little more consistent with optionals than nil which brings to mind pointers for most people <br></p><p>Sent from my iPad<br></p><p>&gt; On Apr 10, 2016, at 5:13 PM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Pretty sure it has been discussed already.<br>&gt; <br>&gt; MHO: much of the power of Optionals in Swift is that they’re more than just a .None/.Some(T) enum. They’re tightly integrated into the language. You never say .Some(value) — values are just lifted to optionals automatically. And if we never directly say .Some(T), why should we say .None? Let’s treat optionals as part of the language, and the enum an implementation detail. Let’s use automatic lifting to optionals, all the `if let`s and other helpful syntax, and say `nil` instead of .None — after all, it’s an important enough part of the language to deserve its own keyword. (A keyword, that, as an additional benefit, will be more immediately understood by someone new to Swift)<br>&gt; <br>&gt; — Radek<br>&gt; <br>&gt;&gt; On 10 Apr 2016, at 22:53, Paul Young via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Please forgive me if this has already been discussed, but I couldn&#39;t find reference to it anywhere.<br>&gt;&gt; <br>&gt;&gt; My proposal is pretty simple – disallow the use of `nil` and require the use of `.None` instead.<br>&gt;&gt; <br>&gt;&gt; I would like to understand if there are any technical (or otherwise) reasons for `nil` to remain, or if it simply a remnant of interop with Objective-C.<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; <br>&gt;&gt; Paul<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160410/f9bc64b2/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>Proposal: disallow nil in favor of .None</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>April 10, 2016 at 05:00:00pm</p></header><div class="content"><p>Just to be a little pedantic (with a point though):<br></p><p>This will actually become .none in swift 3 which actually makes me support this idea even more. <br></p><p>nil -&gt; .None looks goofy to me<br>nil -&gt; .none looks just right <br></p><p>But this is a bold change and is something people are use to from other languages, so I&#39;m sure this will be an uphill battle for you, but &quot;none&quot; does make more sense. Or even renaming nil to none would fit optionals even better <br></p><p>Brandon <br></p><p>Sent from my iPad<br></p><p>&gt; On Apr 10, 2016, at 4:53 PM, Paul Young via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Please forgive me if this has already been discussed, but I couldn&#39;t find reference to it anywhere.<br>&gt; <br>&gt; My proposal is pretty simple – disallow the use of `nil` and require the use of `.None` instead.<br>&gt; <br>&gt; I would like to understand if there are any technical (or otherwise) reasons for `nil` to remain, or if it simply a remnant of interop with Objective-C.<br>&gt; <br>&gt; Thanks,<br>&gt; <br>&gt; Paul<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Proposal: disallow nil in favor of .None</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>April 10, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Apr 10, 2016, at 1:53 PM, Paul Young via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Please forgive me if this has already been discussed, but I couldn&#39;t find reference to it anywhere.<br>&gt; <br>&gt; My proposal is pretty simple – disallow the use of `nil` and require the use of `.None` instead.<br>&gt; <br>&gt; I would like to understand if there are any technical (or otherwise) reasons for `nil` to remain, or if it simply a remnant of interop with Objective-C.<br></p><p>Hi Paul,<br></p><p>There never was a “technical” reason for including nil - it is simply sugar for constructs that you could form some other way.  It wasn’t related to Objective-C interop, and I’m not aware of other changes that would affect the balance of “nil&quot; in Swift.  If anything, “nil” is destined to become *more* simple, since only Optional will be NilLiteralConverible once the planned Swift 3 changes land (&quot;abolish IOU&quot; and “make nullability explicit for unsafe pointers”).<br></p><p>-Chris<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>Proposal: disallow nil in favor of .None</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>April 10, 2016 at 04:00:00pm</p></header><div class="content"><p>Paul,<br></p><p>Basically, nil is a literal and not a shortcut or alias for Optional.none.<br></p><p>Types which implement NilLiteralConvertible can have a new instance initialized by the ‘nil’ literal. There is an initializer on Optional that is used to generate an Optional.none in response to a nil literal when expecting an Optional type.<br></p><p>There are also similar Convertible protocols Boolean, String, Array, Dictionary, Floating point and Integer literals.<br></p><p>The use cases for the nil literal within the standard library are decreasing. However, I have used it for a few other rare cases (most notably a native JSON library).<br></p><p>-DW<br></p><p>&gt; On Apr 10, 2016, at 2:53 PM, Paul Young via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Please forgive me if this has already been discussed, but I couldn&#39;t find reference to it anywhere.<br>&gt; <br>&gt; My proposal is pretty simple – disallow the use of `nil` and require the use of `.None` instead.<br>&gt; <br>&gt; I would like to understand if there are any technical (or otherwise) reasons for `nil` to remain, or if it simply a remnant of interop with Objective-C.<br>&gt; <br>&gt; Thanks,<br>&gt; <br>&gt; Paul<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: signature.asc<br>Type: application/pgp-signature<br>Size: 496 bytes<br>Desc: Message signed with OpenPGP using GPGMail<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160410/21dce9b1/attachment.sig&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
