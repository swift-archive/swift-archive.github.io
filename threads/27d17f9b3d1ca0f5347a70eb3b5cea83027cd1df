<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/17d2af4afb70023e28e655d17471a018?s=50"></div><header><strong>[Proposal] Change some collection iterators to use custom types instead of IndexIterator&lt;T&gt;</strong> from <string>Michael Gottesman</string> &lt;mgottesman at apple.com&gt;<p>July 22, 2016 at 02:00:00pm</p></header><div class="content"><p>Hello everyone!<br></p><p>Iterators are very important for performance since we use them for for loops. By default collections if they do not provide a custom iterator use IndexingIterator as an iterator. IndexingIterator, while only supporting forward movement, is based on indices which possess the ability to go backwards and forwards. For some indices, backwards iteration adds unnecessary cost/complexity.<br>In order to preserve future flexibility, we want to change certain of the types to use custom types that are essentially just IndexingIterator&lt;T&gt;. Then later on when we want to implement these optimizations, we can do it on the custom type underneath the hood without changing the API/ABI.<br></p><p>The reason I use the phrase &quot;some iterators&quot; is that I already know that we definitely want to do this for StringCharacterView but there are potentially other containers in the standard library that this could apply to. I still need to audit these containers for potential applications. That being said given the place where we are in the schedule, I think it is important to start the discussion about the general concept and after I audit the various containers, I will post an update.<br></p><p>Thoughts, flames, etc?<br>Michael<br></p><p>https://bugs.swift.org/browse/SR-1961<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Proposal] Change some collection iterators to use custom types instead of IndexIterator&lt;T&gt;</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July 22, 2016 at 05:00:00pm</p></header><div class="content"><p>(thumbs up)<br></p><p><br>On Fri, Jul 22, 2016 at 4:35 PM, Michael Gottesman via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello everyone!<br>&gt;<br>&gt; Iterators are very important for performance since we use them for for<br>&gt; loops. By default collections if they do not provide a custom iterator use<br>&gt; IndexingIterator as an iterator. IndexingIterator, while only supporting<br>&gt; forward movement, is based on indices which possess the ability to go<br>&gt; backwards and forwards. For some indices, backwards iteration adds<br>&gt; unnecessary cost/complexity.<br>&gt; In order to preserve future flexibility, we want to change certain of the<br>&gt; types to use custom types that are essentially just IndexingIterator&lt;T&gt;.<br>&gt; Then later on when we want to implement these optimizations, we can do it<br>&gt; on the custom type underneath the hood without changing the API/ABI.<br>&gt;<br>&gt; The reason I use the phrase &quot;some iterators&quot; is that I already know that<br>&gt; we definitely want to do this for StringCharacterView but there are<br>&gt; potentially other containers in the standard library that this could apply<br>&gt; to. I still need to audit these containers for potential applications. That<br>&gt; being said given the place where we are in the schedule, I think it is<br>&gt; important to start the discussion about the general concept and after I<br>&gt; audit the various containers, I will post an update.<br>&gt;<br>&gt; Thoughts, flames, etc?<br>&gt; Michael<br>&gt;<br>&gt; https://bugs.swift.org/browse/SR-1961<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/9a837e5e/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/17d2af4afb70023e28e655d17471a018?s=50"></div><header><strong>[Proposal] Change some collection iterators to use custom types instead of IndexIterator&lt;T&gt;</strong> from <string>Michael Gottesman</string> &lt;mgottesman at apple.com&gt;<p>July 25, 2016 at 02:00:00pm</p></header><div class="content"><p>Submitted the following PR:<br></p><p>https://github.com/apple/swift-evolution/pull/469<br></p><p>Michael<br></p><p>&gt; On Jul 22, 2016, at 2:35 PM, Michael Gottesman via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello everyone!<br>&gt; <br>&gt; Iterators are very important for performance since we use them for for loops. By default collections if they do not provide a custom iterator use IndexingIterator as an iterator. IndexingIterator, while only supporting forward movement, is based on indices which possess the ability to go backwards and forwards. For some indices, backwards iteration adds unnecessary cost/complexity.<br>&gt; In order to preserve future flexibility, we want to change certain of the types to use custom types that are essentially just IndexingIterator&lt;T&gt;. Then later on when we want to implement these optimizations, we can do it on the custom type underneath the hood without changing the API/ABI.<br>&gt; <br>&gt; The reason I use the phrase &quot;some iterators&quot; is that I already know that we definitely want to do this for StringCharacterView but there are potentially other containers in the standard library that this could apply to. I still need to audit these containers for potential applications. That being said given the place where we are in the schedule, I think it is important to start the discussion about the general concept and after I audit the various containers, I will post an update.<br>&gt; <br>&gt; Thoughts, flames, etc?<br>&gt; Michael<br>&gt; <br>&gt; https://bugs.swift.org/browse/SR-1961<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
