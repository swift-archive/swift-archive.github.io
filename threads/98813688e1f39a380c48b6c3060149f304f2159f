<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e9b374b9587bd8da1a1a027c8716ac0d?s=50"></div><header><strong>Optional conformance warnings with Protocols</strong> from <string>Rod Brown</string> &lt;rodney.brown6 at icloud.com&gt;<p>July 24, 2016 at 02:00:00pm</p></header><div class="content"><p>Hi Swift Users,<br></p><p>I just ran across an issue where I had the following code:<br></p><p>class ManifestItem: NSObject {<br>    let value:    String<br>    let title:    String<br>    let subtitle: String?<br>    dynamic var coordinate: CLLocationCoordinate2D<br>}<br></p><p><br>As part of utilising this object, I needed it to conform to MKAnnotation, which declares:<br></p><p><br>public protocol MKAnnotation : NSObjectProtocol {<br>    <br>    // Center latitude and longitude of the annotation view.<br>    // The implementation of this property must be KVO compliant.<br>    public var coordinate: CLLocationCoordinate2D { get }<br>    <br>    // Title and subtitle for use by selection UI.<br>    optional public var title: String? { get }<br>    optional public var subtitle: String? { get }<br>}<br></p><p>I added the appropriate extension to “ManifestItem” and promptly got reminded with an error that MKAnnotation requires title be an optional.<br></p><p>To do this, I converted “title” in my ManifestItem class to be an implicitly unwrapped optional. This value can never be nil, and should be treated as such throughout my code. However, the compiler still emits a warning. &quot;Type of &#39;title&#39; has different optionality than expected by protocol ‘MKAnnotation&#39; &quot;<br></p><p>I’m wondering if this should be considered a bug? I am actually comforming correctly to the protocol - title is optional, though implicitly unwrapped. Should I have to make “title” optional, and every use of it optional or a force unwrap, when my code verifies that the manifest item is legitimately invalid if title property is nil?<br></p><p>I think this is valid use of the implicitly unwrapped optional. It allows you to say “this is optional for some reason, but should generally always be assumed to be non null.” This sounds remarkably similar to my use case &quot;this is optional for conformance reasons, but should generally always be assumed to be non null.”<br></p><p>Thanks for your opinions,<br></p><p>Rod<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160724/9881159f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>Optional conformance warnings with Protocols</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>July 24, 2016 at 09:00:00pm</p></header><div class="content"><p>I pasted you code into Xcode 8 beta3 playground, everything seemed fine<br>with below code.<br></p><p>import Cocoa<br></p><p>import CoreLocation<br></p><p><br>class ManifestItem: NSObject {<br></p><p>    let value:    String<br></p><p>    let title:    String<br></p><p>    let subtitle: String?<br></p><p>    dynamic var coordinate: CLLocationCoordinate2D<br></p><p><br></p><p>    init(value:String, title:String, subtitle:String? = nil, coordinate:<br>CLLocationCoordinate2D) {<br></p><p>        self.value = value<br></p><p>        self.title = title<br></p><p>        self.subtitle = subtitle<br></p><p>        self.coordinate = coordinate<br></p><p>    }<br></p><p>}<br></p><p><br>@objc public protocol MKAnnotation : NSObjectProtocol {<br></p><p><br></p><p>    // Center latitude and longitude of the annotation view.<br></p><p>    // The implementation of this property must be KVO compliant.<br></p><p>    var coordinate: CLLocationCoordinate2D { get }<br></p><p><br></p><p>    // Title and subtitle for use by selection UI.<br></p><p>    @objc optional var title: String? { get }<br></p><p>    @objc optional var subtitle: String? { get }<br></p><p>}<br></p><p>I didn&#39;t encounter the error you mentioned. But I had to remove public and<br>add @objc as Xcode asked.<br></p><p>Zhaoxin<br></p><p>On Sun, Jul 24, 2016 at 12:09 PM, Rod Brown via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Hi Swift Users,<br>&gt;<br>&gt; I just ran across an issue where I had the following code:<br>&gt;<br>&gt; class ManifestItem: NSObject {<br>&gt;     let value:    String<br>&gt;     let title:    String<br>&gt;     let subtitle: String?<br>&gt;     dynamic var coordinate: CLLocationCoordinate2D<br>&gt; }<br>&gt;<br>&gt;<br>&gt; As part of utilising this object, I needed it to conform to MKAnnotation,<br>&gt; which declares:<br>&gt;<br>&gt;<br>&gt; public protocol MKAnnotation : NSObjectProtocol {<br>&gt;<br>&gt;<br>&gt;     // Center latitude and longitude of the annotation view.<br>&gt;     // The implementation of this property must be KVO compliant.<br>&gt;     public var coordinate: CLLocationCoordinate2D { get }<br>&gt;<br>&gt;<br>&gt;     // Title and subtitle for use by selection UI.<br>&gt;     optional public var title: String? { get }<br>&gt;     optional public var subtitle: String? { get }<br>&gt; }<br>&gt;<br>&gt; I added the appropriate extension to “ManifestItem” and promptly got<br>&gt; reminded with an error that MKAnnotation requires title be an optional.<br>&gt;<br>&gt; To do this, I converted “title” in my ManifestItem class to be an<br>&gt; implicitly unwrapped optional. This value can never be nil, and should be<br>&gt; treated as such throughout my code. However, the compiler still emits a<br>&gt; warning. &quot;Type of &#39;title&#39; has different optionality than expected by<br>&gt; protocol ‘MKAnnotation&#39; &quot;<br>&gt;<br>&gt; I’m wondering if this should be considered a bug? I am actually comforming<br>&gt; correctly to the protocol - title is optional, though implicitly unwrapped.<br>&gt; Should I have to make “title” optional, and every use of it optional or a<br>&gt; force unwrap, when my code verifies that the manifest item is legitimately<br>&gt; invalid if title property is nil?<br>&gt;<br>&gt; I think this is valid use of the implicitly unwrapped optional. It allows<br>&gt; you to say “this is optional for some reason, but should generally always<br>&gt; be assumed to be non null.” This sounds remarkably similar to my use case &quot;this<br>&gt; is optional for conformance reasons, but should generally always be assumed<br>&gt; to be non null.”<br>&gt;<br>&gt; Thanks for your opinions,<br>&gt;<br>&gt; Rod<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160724/f70ce5dc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e9b374b9587bd8da1a1a027c8716ac0d?s=50"></div><header><strong>Optional conformance warnings with Protocols</strong> from <string>Rod Brown</string> &lt;rodney.brown6 at icloud.com&gt;<p>July 24, 2016 at 11:00:00pm</p></header><div class="content"><p>The final code to test this is:<br></p><p>import Foundation<br>import MapKit<br></p><p>class ManifestItem: NSObject {<br>    <br>    let title: String!<br>    let subtitle: String?<br>    dynamic var coordinate: CLLocationCoordinate2D<br>    <br>    init(title: String, subtitle: String?, coordinate: CLLocationCoordinate2D) {<br>        self.title = title<br>        self.subtitle = subtitle<br>        self.coordinate = coordinate<br>    }<br>}<br></p><p>extension ManifestItem: MKAnnotation {<br>}<br></p><p>This displays a warning in beta 3, as well as in Swift 2.2 in the current Xcode.<br></p><p>I understand why: MKAnnotation declares my title must be optional (“?”) but I am declaring it as an implicitly unwrapped optional (“!”). Still, I believe the fact is that they are both optional, and are a legitimate way of declaring “a protocol I conform to requires this to be optional, but it can be treated as implicitly inwrapped because it will never be nil”.<br></p><p>Thoughts?<br></p><p>- Rod<br></p><p><br></p><p>&gt; On 24 Jul 2016, at 11:09 PM, Zhao Xin &lt;owenzx at gmail.com&gt; wrote:<br>&gt; <br>&gt; I pasted you code into Xcode 8 beta3 playground, everything seemed fine with below code.<br>&gt; <br>&gt; import Cocoa<br>&gt; import CoreLocation<br>&gt; <br>&gt; class ManifestItem: NSObject {<br>&gt;     let value:    String<br>&gt;     let title:    String<br>&gt;     let subtitle: String?<br>&gt;     dynamic var coordinate: CLLocationCoordinate2D<br>&gt;     <br>&gt;     init(value:String, title:String, subtitle:String? = nil, coordinate:CLLocationCoordinate2D) {<br>&gt;         self.value = value<br>&gt;         self.title = title<br>&gt;         self.subtitle = subtitle<br>&gt;         self.coordinate = coordinate<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; @objc public protocol MKAnnotation : NSObjectProtocol {<br>&gt;     <br>&gt;     // Center latitude and longitude of the annotation view.<br>&gt;     // The implementation of this property must be KVO compliant.<br>&gt;     var coordinate: CLLocationCoordinate2D { get }<br>&gt;     <br>&gt;     // Title and subtitle for use by selection UI.<br>&gt;     @objc optional var title: String? { get }<br>&gt;     @objc optional var subtitle: String? { get }<br>&gt; }<br>&gt; <br>&gt; I didn&#39;t encounter the error you mentioned. But I had to remove public and add @objc as Xcode asked.<br>&gt; <br>&gt; Zhaoxin<br>&gt; <br>&gt; On Sun, Jul 24, 2016 at 12:09 PM, Rod Brown via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt; Hi Swift Users,<br>&gt; <br>&gt; I just ran across an issue where I had the following code:<br>&gt; <br>&gt; class ManifestItem: NSObject {<br>&gt;     let value:    String<br>&gt;     let title:    String<br>&gt;     let subtitle: String?<br>&gt;     dynamic var coordinate: CLLocationCoordinate2D<br>&gt; }<br>&gt; <br>&gt; <br>&gt; As part of utilising this object, I needed it to conform to MKAnnotation, which declares:<br>&gt; <br>&gt; <br>&gt; public protocol MKAnnotation : NSObjectProtocol {<br>&gt;     <br>&gt;     // Center latitude and longitude of the annotation view.<br>&gt;     // The implementation of this property must be KVO compliant.<br>&gt;     public var coordinate: CLLocationCoordinate2D { get }<br>&gt;     <br>&gt;     // Title and subtitle for use by selection UI.<br>&gt;     optional public var title: String? { get }<br>&gt;     optional public var subtitle: String? { get }<br>&gt; }<br>&gt; <br>&gt; I added the appropriate extension to “ManifestItem” and promptly got reminded with an error that MKAnnotation requires title be an optional.<br>&gt; <br>&gt; To do this, I converted “title” in my ManifestItem class to be an implicitly unwrapped optional. This value can never be nil, and should be treated as such throughout my code. However, the compiler still emits a warning. &quot;Type of &#39;title&#39; has different optionality than expected by protocol ‘MKAnnotation&#39; &quot;<br>&gt; <br>&gt; I’m wondering if this should be considered a bug? I am actually comforming correctly to the protocol - title is optional, though implicitly unwrapped. Should I have to make “title” optional, and every use of it optional or a force unwrap, when my code verifies that the manifest item is legitimately invalid if title property is nil?<br>&gt; <br>&gt; I think this is valid use of the implicitly unwrapped optional. It allows you to say “this is optional for some reason, but should generally always be assumed to be non null.” This sounds remarkably similar to my use case &quot;this is optional for conformance reasons, but should generally always be assumed to be non null.”<br>&gt; <br>&gt; Thanks for your opinions,<br>&gt; <br>&gt; Rod<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160724/ba798ef6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>Optional conformance warnings with Protocols</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>July 24, 2016 at 10:00:00pm</p></header><div class="content"><p>Implicitly unwrapped optionals and optionals are not equal.<br></p><p>struct X {<br></p><p>    let value:String = &quot;aa&quot;<br></p><p>}<br></p><p><br>let x:X? = nil<br></p><p>let y:X! = nil<br></p><p>x?.value // nil<br></p><p>y?.value // nil<br></p><p>y.value // fatal error: unexpectedly found nil while unwrapping an Optional<br>value. Unless you don&#39;t use this. As this is equal to y!.value.<br></p><p>Zhaoxin<br></p><p><br></p><p>On Sun, Jul 24, 2016 at 9:55 PM, Rod Brown &lt;rodney.brown6 at icloud.com&gt; wrote:<br></p><p>&gt; The final code to test this is:<br>&gt;<br>&gt; import Foundation<br>&gt; import MapKit<br>&gt;<br>&gt; class ManifestItem: NSObject {<br>&gt;<br>&gt;<br>&gt;     let title: String!<br>&gt;     let subtitle: String?<br>&gt;     dynamic var coordinate: CLLocationCoordinate2D<br>&gt;<br>&gt;<br>&gt;     init(title: String, subtitle: String?, coordinate:<br>&gt; CLLocationCoordinate2D) {<br>&gt;         self.title = title<br>&gt;         self.subtitle = subtitle<br>&gt;         self.coordinate = coordinate<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; extension ManifestItem: MKAnnotation {<br>&gt; }<br>&gt;<br>&gt; This displays a warning in beta 3, as well as in Swift 2.2 in the current<br>&gt; Xcode.<br>&gt;<br>&gt; I understand why: MKAnnotation declares my title must be optional (“?”)<br>&gt; but I am declaring it as an implicitly unwrapped optional (“!”). Still, I<br>&gt; believe the fact is that they are both optional, and are a legitimate way<br>&gt; of declaring “a protocol I conform to requires this to be optional, but it<br>&gt; can be treated as implicitly inwrapped because it will never be nil”.<br>&gt;<br>&gt; Thoughts?<br>&gt;<br>&gt; - Rod<br>&gt;<br>&gt;<br>&gt;<br>&gt; On 24 Jul 2016, at 11:09 PM, Zhao Xin &lt;owenzx at gmail.com&gt; wrote:<br>&gt;<br>&gt; I pasted you code into Xcode 8 beta3 playground, everything seemed fine<br>&gt; with below code.<br>&gt;<br>&gt; import Cocoa<br>&gt; import CoreLocation<br>&gt;<br>&gt; class ManifestItem: NSObject {<br>&gt;     let value:    String<br>&gt;     let title:    String<br>&gt;     let subtitle: String?<br>&gt;     dynamic var coordinate: CLLocationCoordinate2D<br>&gt;<br>&gt;<br>&gt;     init(value:String, title:String, subtitle:String? = nil, coordinate:<br>&gt; CLLocationCoordinate2D) {<br>&gt;         self.value = value<br>&gt;         self.title = title<br>&gt;         self.subtitle = subtitle<br>&gt;         self.coordinate = coordinate<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; @objc public protocol MKAnnotation : NSObjectProtocol {<br>&gt;<br>&gt;<br>&gt;     // Center latitude and longitude of the annotation view.<br>&gt;     // The implementation of this property must be KVO compliant.<br>&gt;     var coordinate: CLLocationCoordinate2D { get }<br>&gt;<br>&gt;<br>&gt;     // Title and subtitle for use by selection UI.<br>&gt;     @objc optional var title: String? { get }<br>&gt;     @objc optional var subtitle: String? { get }<br>&gt; }<br>&gt;<br>&gt; I didn&#39;t encounter the error you mentioned. But I had to remove public and<br>&gt; add @objc as Xcode asked.<br>&gt;<br>&gt; Zhaoxin<br>&gt;<br>&gt; On Sun, Jul 24, 2016 at 12:09 PM, Rod Brown via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Hi Swift Users,<br>&gt;&gt;<br>&gt;&gt; I just ran across an issue where I had the following code:<br>&gt;&gt;<br>&gt;&gt; class ManifestItem: NSObject {<br>&gt;&gt;     let value:    String<br>&gt;&gt;     let title:    String<br>&gt;&gt;     let subtitle: String?<br>&gt;&gt;     dynamic var coordinate: CLLocationCoordinate2D<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; As part of utilising this object, I needed it to conform to MKAnnotation,<br>&gt;&gt; which declares:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; public protocol MKAnnotation : NSObjectProtocol {<br>&gt;&gt;<br>&gt;&gt;     // Center latitude and longitude of the annotation view.<br>&gt;&gt;     // The implementation of this property must be KVO compliant.<br>&gt;&gt;     public var coordinate: CLLocationCoordinate2D { get }<br>&gt;&gt;<br>&gt;&gt;     // Title and subtitle for use by selection UI.<br>&gt;&gt;     optional public var title: String? { get }<br>&gt;&gt;     optional public var subtitle: String? { get }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; I added the appropriate extension to “ManifestItem” and promptly got<br>&gt;&gt; reminded with an error that MKAnnotation requires title be an optional.<br>&gt;&gt;<br>&gt;&gt; To do this, I converted “title” in my ManifestItem class to be an<br>&gt;&gt; implicitly unwrapped optional. This value can never be nil, and should be<br>&gt;&gt; treated as such throughout my code. However, the compiler still emits a<br>&gt;&gt; warning. &quot;Type of &#39;title&#39; has different optionality than expected by<br>&gt;&gt; protocol ‘MKAnnotation&#39; &quot;<br>&gt;&gt;<br>&gt;&gt; I’m wondering if this should be considered a bug? I am actually<br>&gt;&gt; comforming correctly to the protocol - title is optional, though implicitly<br>&gt;&gt; unwrapped. Should I have to make “title” optional, and every use of it<br>&gt;&gt; optional or a force unwrap, when my code verifies that the manifest item is<br>&gt;&gt; legitimately invalid if title property is nil?<br>&gt;&gt;<br>&gt;&gt; I think this is valid use of the implicitly unwrapped optional. It allows<br>&gt;&gt; you to say “this is optional for some reason, but should generally always<br>&gt;&gt; be assumed to be non null.” This sounds remarkably similar to my use case &quot;this<br>&gt;&gt; is optional for conformance reasons, but should generally always be assumed<br>&gt;&gt; to be non null.”<br>&gt;&gt;<br>&gt;&gt; Thanks for your opinions,<br>&gt;&gt;<br>&gt;&gt; Rod<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160724/c43f259f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e9b374b9587bd8da1a1a027c8716ac0d?s=50"></div><header><strong>Optional conformance warnings with Protocols</strong> from <string>Rod Brown</string> &lt;rodney.brown6 at icloud.com&gt;<p>July 25, 2016 at 12:00:00am</p></header><div class="content"><p>They are not equal only because the compiler performs the unwrap for you.<br></p><p>My point is the compiler should not emit a warning that I am not adhering to the protocol. The thing I am returning is an optional - implicitly unwrapped, but optional nonetheless.<br></p><p>The fact they are different in actual use by MY code is irrelevant when you conform to an external protocol, as long as the actual value (an optional) is the same, which they are.<br></p><p>Implicitly unwrapped optional are merely optionals that the compiler is told to implicitly unwrap because using the ! operator where it is not required because it should never (or almost never) be nil.<br></p><p>I believe this should not throw a warning.<br></p><p><br>&gt; On 25 Jul. 2016, at 12:16 am, Zhao Xin &lt;owenzx at gmail.com&gt; wrote:<br>&gt; <br>&gt; Implicitly unwrapped optionals and optionals are not equal.<br>&gt; <br>&gt; struct X {<br>&gt;     let value:String = &quot;aa&quot;<br>&gt; }<br>&gt; <br>&gt; let x:X? = nil<br>&gt; let y:X! = nil<br>&gt; x?.value // nil<br>&gt; y?.value // nil<br>&gt; y.value // fatal error: unexpectedly found nil while unwrapping an Optional value. Unless you don&#39;t use this. As this is equal to y!.value. <br>&gt; <br>&gt; Zhaoxin<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Sun, Jul 24, 2016 at 9:55 PM, Rod Brown &lt;rodney.brown6 at icloud.com&gt; wrote:<br>&gt;&gt; The final code to test this is:<br>&gt;&gt; <br>&gt;&gt; import Foundation<br>&gt;&gt; import MapKit<br>&gt;&gt; <br>&gt;&gt; class ManifestItem: NSObject {<br>&gt;&gt;     <br>&gt;&gt;     let title: String!<br>&gt;&gt;     let subtitle: String?<br>&gt;&gt;     dynamic var coordinate: CLLocationCoordinate2D<br>&gt;&gt;     <br>&gt;&gt;     init(title: String, subtitle: String?, coordinate: CLLocationCoordinate2D) {<br>&gt;&gt;         self.title = title<br>&gt;&gt;         self.subtitle = subtitle<br>&gt;&gt;         self.coordinate = coordinate<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; extension ManifestItem: MKAnnotation {<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; This displays a warning in beta 3, as well as in Swift 2.2 in the current Xcode.<br>&gt;&gt; <br>&gt;&gt; I understand why: MKAnnotation declares my title must be optional (“?”) but I am declaring it as an implicitly unwrapped optional (“!”). Still, I believe the fact is that they are both optional, and are a legitimate way of declaring “a protocol I conform to requires this to be optional, but it can be treated as implicitly inwrapped because it will never be nil”.<br>&gt;&gt; <br>&gt;&gt; Thoughts?<br>&gt;&gt; <br>&gt;&gt; - Rod<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 24 Jul 2016, at 11:09 PM, Zhao Xin &lt;owenzx at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I pasted you code into Xcode 8 beta3 playground, everything seemed fine with below code.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; import Cocoa<br>&gt;&gt;&gt; import CoreLocation<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; class ManifestItem: NSObject {<br>&gt;&gt;&gt;     let value:    String<br>&gt;&gt;&gt;     let title:    String<br>&gt;&gt;&gt;     let subtitle: String?<br>&gt;&gt;&gt;     dynamic var coordinate: CLLocationCoordinate2D<br>&gt;&gt;&gt;     <br>&gt;&gt;&gt;     init(value:String, title:String, subtitle:String? = nil, coordinate:CLLocationCoordinate2D) {<br>&gt;&gt;&gt;         self.value = value<br>&gt;&gt;&gt;         self.title = title<br>&gt;&gt;&gt;         self.subtitle = subtitle<br>&gt;&gt;&gt;         self.coordinate = coordinate<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; @objc public protocol MKAnnotation : NSObjectProtocol {<br>&gt;&gt;&gt;     <br>&gt;&gt;&gt;     // Center latitude and longitude of the annotation view.<br>&gt;&gt;&gt;     // The implementation of this property must be KVO compliant.<br>&gt;&gt;&gt;     var coordinate: CLLocationCoordinate2D { get }<br>&gt;&gt;&gt;     <br>&gt;&gt;&gt;     // Title and subtitle for use by selection UI.<br>&gt;&gt;&gt;     @objc optional var title: String? { get }<br>&gt;&gt;&gt;     @objc optional var subtitle: String? { get }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I didn&#39;t encounter the error you mentioned. But I had to remove public and add @objc as Xcode asked.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Zhaoxin<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Sun, Jul 24, 2016 at 12:09 PM, Rod Brown via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; Hi Swift Users,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I just ran across an issue where I had the following code:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; class ManifestItem: NSObject {<br>&gt;&gt;&gt;&gt;     let value:    String<br>&gt;&gt;&gt;&gt;     let title:    String<br>&gt;&gt;&gt;&gt;     let subtitle: String?<br>&gt;&gt;&gt;&gt;     dynamic var coordinate: CLLocationCoordinate2D<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; As part of utilising this object, I needed it to conform to MKAnnotation, which declares:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; public protocol MKAnnotation : NSObjectProtocol {<br>&gt;&gt;&gt;&gt;     <br>&gt;&gt;&gt;&gt;     // Center latitude and longitude of the annotation view.<br>&gt;&gt;&gt;&gt;     // The implementation of this property must be KVO compliant.<br>&gt;&gt;&gt;&gt;     public var coordinate: CLLocationCoordinate2D { get }<br>&gt;&gt;&gt;&gt;     <br>&gt;&gt;&gt;&gt;     // Title and subtitle for use by selection UI.<br>&gt;&gt;&gt;&gt;     optional public var title: String? { get }<br>&gt;&gt;&gt;&gt;     optional public var subtitle: String? { get }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I added the appropriate extension to “ManifestItem” and promptly got reminded with an error that MKAnnotation requires title be an optional.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; To do this, I converted “title” in my ManifestItem class to be an implicitly unwrapped optional. This value can never be nil, and should be treated as such throughout my code. However, the compiler still emits a warning. &quot;Type of &#39;title&#39; has different optionality than expected by protocol ‘MKAnnotation&#39; &quot;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’m wondering if this should be considered a bug? I am actually comforming correctly to the protocol - title is optional, though implicitly unwrapped. Should I have to make “title” optional, and every use of it optional or a force unwrap, when my code verifies that the manifest item is legitimately invalid if title property is nil?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think this is valid use of the implicitly unwrapped optional. It allows you to say “this is optional for some reason, but should generally always be assumed to be non null.” This sounds remarkably similar to my use case &quot;this is optional for conformance reasons, but should generally always be assumed to be non null.”<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks for your opinions,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Rod<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160725/b1e3ebea/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>Optional conformance warnings with Protocols</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>July 24, 2016 at 11:00:00pm</p></header><div class="content"><p>Yes. &quot;Implicitly unwrapped optional are merely optionals&quot;. That is why<br>Xcode gives you a warning instead of an error. In other situations, such as<br>protocol claims an implicitly unwrapped optional but you give an optional,<br>or protocol claims a non-optional but you give an implicitly unwrapped<br>optional, you will get errors.<br></p><p>Zhaoxin<br></p><p>On Sun, Jul 24, 2016 at 10:36 PM, Rod Brown &lt;rodney.brown6 at icloud.com&gt;<br>wrote:<br></p><p>&gt; They are not equal only because the compiler performs the unwrap for you.<br>&gt;<br>&gt; My point is the compiler should not emit a warning that I am not adhering<br>&gt; to the protocol. The thing I am returning is an optional - implicitly<br>&gt; unwrapped, but optional nonetheless.<br>&gt;<br>&gt;<br>&gt; The fact they are different in actual use by MY code is irrelevant when<br>&gt; you conform to an external protocol, as long as the actual value (an<br>&gt; optional) is the same, which they are.<br>&gt;<br>&gt; Implicitly unwrapped optional are merely optionals that the compiler is<br>&gt; told to implicitly unwrap because using the ! operator where it is not<br>&gt; required because it should never (or almost never) be nil.<br>&gt;<br>&gt; I believe this should not throw a warning.<br>&gt;<br>&gt;<br>&gt; On 25 Jul. 2016, at 12:16 am, Zhao Xin &lt;owenzx at gmail.com&gt; wrote:<br>&gt;<br>&gt; Implicitly unwrapped optionals and optionals are not equal.<br>&gt;<br>&gt; struct X {<br>&gt;<br>&gt;     let value:String = &quot;aa&quot;<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt; let x:X? = nil<br>&gt;<br>&gt; let y:X! = nil<br>&gt;<br>&gt; x?.value // nil<br>&gt;<br>&gt; y?.value // nil<br>&gt;<br>&gt; y.value // fatal error: unexpectedly found nil while unwrapping an<br>&gt; Optional value. Unless you don&#39;t use this. As this is equal to y!.value.<br>&gt;<br>&gt; Zhaoxin<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Sun, Jul 24, 2016 at 9:55 PM, Rod Brown &lt;rodney.brown6 at icloud.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; The final code to test this is:<br>&gt;&gt;<br>&gt;&gt; import Foundation<br>&gt;&gt; import MapKit<br>&gt;&gt;<br>&gt;&gt; class ManifestItem: NSObject {<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     let title: String!<br>&gt;&gt;     let subtitle: String?<br>&gt;&gt;     dynamic var coordinate: CLLocationCoordinate2D<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     init(title: String, subtitle: String?, coordinate:<br>&gt;&gt; CLLocationCoordinate2D) {<br>&gt;&gt;         self.title = title<br>&gt;&gt;         self.subtitle = subtitle<br>&gt;&gt;         self.coordinate = coordinate<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; extension ManifestItem: MKAnnotation {<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; This displays a warning in beta 3, as well as in Swift 2.2 in the current<br>&gt;&gt; Xcode.<br>&gt;&gt;<br>&gt;&gt; I understand why: MKAnnotation declares my title must be optional (“?”)<br>&gt;&gt; but I am declaring it as an implicitly unwrapped optional (“!”). Still, I<br>&gt;&gt; believe the fact is that they are both optional, and are a legitimate way<br>&gt;&gt; of declaring “a protocol I conform to requires this to be optional, but it<br>&gt;&gt; can be treated as implicitly inwrapped because it will never be nil”.<br>&gt;&gt;<br>&gt;&gt; Thoughts?<br>&gt;&gt;<br>&gt;&gt; - Rod<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On 24 Jul 2016, at 11:09 PM, Zhao Xin &lt;owenzx at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I pasted you code into Xcode 8 beta3 playground, everything seemed fine<br>&gt;&gt; with below code.<br>&gt;&gt;<br>&gt;&gt; import Cocoa<br>&gt;&gt; import CoreLocation<br>&gt;&gt;<br>&gt;&gt; class ManifestItem: NSObject {<br>&gt;&gt;     let value:    String<br>&gt;&gt;     let title:    String<br>&gt;&gt;     let subtitle: String?<br>&gt;&gt;     dynamic var coordinate: CLLocationCoordinate2D<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     init(value:String, title:String, subtitle:String? = nil, coordinate:<br>&gt;&gt; CLLocationCoordinate2D) {<br>&gt;&gt;         self.value = value<br>&gt;&gt;         self.title = title<br>&gt;&gt;         self.subtitle = subtitle<br>&gt;&gt;         self.coordinate = coordinate<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; @objc public protocol MKAnnotation : NSObjectProtocol {<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     // Center latitude and longitude of the annotation view.<br>&gt;&gt;     // The implementation of this property must be KVO compliant.<br>&gt;&gt;     var coordinate: CLLocationCoordinate2D { get }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     // Title and subtitle for use by selection UI.<br>&gt;&gt;     @objc optional var title: String? { get }<br>&gt;&gt;     @objc optional var subtitle: String? { get }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; I didn&#39;t encounter the error you mentioned. But I had to remove public<br>&gt;&gt; and add @objc as Xcode asked.<br>&gt;&gt;<br>&gt;&gt; Zhaoxin<br>&gt;&gt;<br>&gt;&gt; On Sun, Jul 24, 2016 at 12:09 PM, Rod Brown via swift-users &lt;<br>&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Hi Swift Users,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I just ran across an issue where I had the following code:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; class ManifestItem: NSObject {<br>&gt;&gt;&gt;     let value:    String<br>&gt;&gt;&gt;     let title:    String<br>&gt;&gt;&gt;     let subtitle: String?<br>&gt;&gt;&gt;     dynamic var coordinate: CLLocationCoordinate2D<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; As part of utilising this object, I needed it to conform to<br>&gt;&gt;&gt; MKAnnotation, which declares:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; public protocol MKAnnotation : NSObjectProtocol {<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     // Center latitude and longitude of the annotation view.<br>&gt;&gt;&gt;     // The implementation of this property must be KVO compliant.<br>&gt;&gt;&gt;     public var coordinate: CLLocationCoordinate2D { get }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     // Title and subtitle for use by selection UI.<br>&gt;&gt;&gt;     optional public var title: String? { get }<br>&gt;&gt;&gt;     optional public var subtitle: String? { get }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I added the appropriate extension to “ManifestItem” and promptly got<br>&gt;&gt;&gt; reminded with an error that MKAnnotation requires title be an optional.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; To do this, I converted “title” in my ManifestItem class to be an<br>&gt;&gt;&gt; implicitly unwrapped optional. This value can never be nil, and should be<br>&gt;&gt;&gt; treated as such throughout my code. However, the compiler still emits a<br>&gt;&gt;&gt; warning. &quot;Type of &#39;title&#39; has different optionality than expected by<br>&gt;&gt;&gt; protocol ‘MKAnnotation&#39; &quot;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I’m wondering if this should be considered a bug? I am actually<br>&gt;&gt;&gt; comforming correctly to the protocol - title is optional, though implicitly<br>&gt;&gt;&gt; unwrapped. Should I have to make “title” optional, and every use of it<br>&gt;&gt;&gt; optional or a force unwrap, when my code verifies that the manifest item is<br>&gt;&gt;&gt; legitimately invalid if title property is nil?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I think this is valid use of the implicitly unwrapped optional. It<br>&gt;&gt;&gt; allows you to say “this is optional for some reason, but should generally<br>&gt;&gt;&gt; always be assumed to be non null.” This sounds remarkably similar to my use<br>&gt;&gt;&gt; case &quot;this is optional for conformance reasons, but should generally<br>&gt;&gt;&gt; always be assumed to be non null.”<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Thanks for your opinions,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Rod<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160724/415ddad9/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Optional conformance warnings with Protocols</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>July 24, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jul 23, 2016, at 9:09 PM, Rod Brown via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; However, the compiler still emits a warning. &quot;Type of &#39;title&#39; has different optionality than expected by protocol ‘MKAnnotation&#39; &quot;<br></p><p>Yes, I&#39;ve encountered this error before. Example:<br></p><p>  1&gt; import Foundation<br>  2&gt; @objc protocol P { var x: String? { get } }<br>  3&gt; class X: NSObject, P { let x = &quot;&quot; }<br>error: repl.swift:3:28: error: type of &#39;x&#39; has different optionality than required by protocol &#39;P&#39;<br>class X: NSObject, P { let x = &quot;&quot; }<br>                           ^<br></p><p>Swift doesn&#39;t appear to allow covariance and contravariance when satisfying protocol requirements, or at least forbids it in optionals. It&#39;s a shame, because at least in a theoretical sense it&#39;s perfectly consistent.<br></p><p>Unfortunately, you&#39;ve pretty much just got to do what the compiler tells you in this case. I expect that you&#39;ll at least be able to use `!` instead of `?` once ImplicitlyUnwrappedOptional is fully removed, but I don&#39;t believe we&#39;ve gotten there yet.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e9b374b9587bd8da1a1a027c8716ac0d?s=50"></div><header><strong>Optional conformance warnings with Protocols</strong> from <string>Rod Brown</string> &lt;rodney.brown6 at icloud.com&gt;<p>July 25, 2016 at 06:00:00am</p></header><div class="content"><p>Thanks Brent,<br></p><p>Yes, I hope this is something that can get cleared up eventually. As you say, hopefully when ImplicitlyUnwrappedOptional goes away we can clear this up.<br></p><p>At least in the case you showed, the optionality is completely different. X will hand you back an object, rather than an Optional (enum) of that object. I understand why, semantically, they are different, and why the compiler may be unable/unwilling to vary the type on return.<br></p><p>In the case of an implicitly unwrapped optional, though, they should theoretically be the same type - Optional&lt;String&gt; - with only the unwrapping behaviour differing. I expect this is part of the reason Implicitly unwrapped optional is dying out as a separate type.<br></p><p>As Xin Zhang points out, this is only a warning, not an error, so I&#39;m gonna accept it. It works correctly, at least.<br></p><p>- Rod<br></p><p>On 25 Jul. 2016, at 2:05 am, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br></p><p>&gt;&gt; On Jul 23, 2016, at 9:09 PM, Rod Brown via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; However, the compiler still emits a warning. &quot;Type of &#39;title&#39; has different optionality than expected by protocol ‘MKAnnotation&#39; &quot;<br>&gt; <br>&gt; Yes, I&#39;ve encountered this error before. Example:<br>&gt; <br>&gt;  1&gt; import Foundation<br>&gt;  2&gt; @objc protocol P { var x: String? { get } }<br>&gt;  3&gt; class X: NSObject, P { let x = &quot;&quot; }<br>&gt; error: repl.swift:3:28: error: type of &#39;x&#39; has different optionality than required by protocol &#39;P&#39;<br>&gt; class X: NSObject, P { let x = &quot;&quot; }<br>&gt;                           ^<br>&gt; <br>&gt; Swift doesn&#39;t appear to allow covariance and contravariance when satisfying protocol requirements, or at least forbids it in optionals. It&#39;s a shame, because at least in a theoretical sense it&#39;s perfectly consistent.<br>&gt; <br>&gt; Unfortunately, you&#39;ve pretty much just got to do what the compiler tells you in this case. I expect that you&#39;ll at least be able to use `!` instead of `?` once ImplicitlyUnwrappedOptional is fully removed, but I don&#39;t believe we&#39;ve gotten there yet.<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160725/b87b526e/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
