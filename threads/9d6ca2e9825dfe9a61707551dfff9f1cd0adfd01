<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e5bf3a3d73345cfed6baf5241ec16a80?s=50"></div><header><strong>Optionals and nil in Switch statement</strong> from <string>Lucas Jordan</string> &lt;lucasjordan at gmail.com&gt;<p>June 28, 2016 at 09:00:00am</p></header><div class="content"><p>Forgive me if this was/is discussed already, I am new to the process<br>here....<br></p><p>(code is attached as a playground too)<br></p><p><br></p><p>Sometimes when I am working with a String? nil can be a reasonable value,<br>and what I want to do is something like the following:<br></p><p>import UIKit<br></p><p><br>var str:String? = &quot;Hello, playground&quot;<br></p><p><br>switch str{<br></p><p>case nil:<br></p><p>    print(&quot;Nil!&quot;)<br></p><p>case &quot;Hello, playground&quot;:  //it would be super nice if this worked.<br></p><p>    print(&quot;Match&quot;)<br></p><p>default:<br></p><p>    print(&quot;Some other non nil value?&quot;)<br></p><p>}<br></p><p><br>But it does not work, the orange  text is a compile time error, &quot;Expression<br>pattern of type &#39;String&#39; cannot match value of type &#39;String?&#39;. I realize<br>that this can be replaced with a let statement (case let s where s == &quot;Hello,<br>playground&quot;:), but that is verbose.<br></p><p>Seems like the compiler could be OK with the orange text, since it is<br>clearly not nil.<br></p><p>Thoughts?<br></p><p>-Lucas<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160628/9d6cfd01/attachment-0001.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: NilInSwitchStatements.playground.zip<br>Type: application/zip<br>Size: 7104 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160628/9d6cfd01/attachment-0001.zip&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a6729e3608691552bd1c61373d0e5b08?s=50"></div><header><strong>Optionals and nil in Switch statement</strong> from <string>Kevin Nattinger</string> &lt;swift at nattinger.net&gt;<p>June 28, 2016 at 08:00:00am</p></header><div class="content"><p>Case .none:<br>Case .some(&quot;string&quot;):<br></p><p><br>&gt; On Jun 28, 2016, at 06:40, Lucas Jordan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Forgive me if this was/is discussed already, I am new to the process here....<br>&gt; <br>&gt; (code is attached as a playground too)<br>&gt; <br>&gt; <br>&gt; <br>&gt; Sometimes when I am working with a String? nil can be a reasonable value, and what I want to do is something like the following:<br>&gt; <br>&gt; import UIKit<br>&gt; <br>&gt; <br>&gt; <br>&gt; var str:String? = &quot;Hello, playground&quot;<br>&gt; <br>&gt; <br>&gt; <br>&gt; switch str{<br>&gt; <br>&gt; case nil:<br>&gt; <br>&gt;     print(&quot;Nil!&quot;)<br>&gt; <br>&gt; case &quot;Hello, playground&quot;:  //it would be super nice if this worked.<br>&gt; <br>&gt;     print(&quot;Match&quot;)<br>&gt; <br>&gt; default:<br>&gt; <br>&gt;     print(&quot;Some other non nil value?&quot;)<br>&gt; <br>&gt; }<br>&gt; <br>&gt; <br>&gt; <br>&gt; But it does not work, the orange  text is a compile time error, &quot;Expression pattern of type &#39;String&#39; cannot match value of type &#39;String?&#39;. I realize that this can be replaced with a let statement (case let s where s == &quot;Hello, playground&quot;:), but that is verbose. <br>&gt; <br>&gt; Seems like the compiler could be OK with the orange text, since it is clearly not nil.<br>&gt; <br>&gt; Thoughts?<br>&gt; <br>&gt; -Lucas<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; &lt;NilInSwitchStatements.playground.zip&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160628/d9225454/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8149b5bd66abbc94babfda2995153481?s=50"></div><header><strong>Optionals and nil in Switch statement</strong> from <string>Nevin Brackett-Rozinsky</string> &lt;nevin.brackettrozinsky at gmail.com&gt;<p>June 28, 2016 at 12:00:00pm</p></header><div class="content"><p>Does `case &quot;text&quot;?` work?<br></p><p><br>On Tuesday, June 28, 2016, Kevin Nattinger via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Case .none:<br>&gt; Case .some(&quot;string&quot;):<br>&gt;<br>&gt;<br>&gt; On Jun 28, 2016, at 06:40, Lucas Jordan via swift-evolution &lt;<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt; Forgive me if this was/is discussed already, I am new to the process<br>&gt; here....<br>&gt;<br>&gt; (code is attached as a playground too)<br>&gt;<br>&gt;<br>&gt;<br>&gt; Sometimes when I am working with a String? nil can be a reasonable value,<br>&gt; and what I want to do is something like the following:<br>&gt;<br>&gt; import UIKit<br>&gt;<br>&gt;<br>&gt; var str:String? = &quot;Hello, playground&quot;<br>&gt;<br>&gt;<br>&gt; switch str{<br>&gt;<br>&gt; case nil:<br>&gt;<br>&gt;     print(&quot;Nil!&quot;)<br>&gt;<br>&gt; case &quot;Hello, playground&quot;:  //it would be super nice if this worked.<br>&gt;<br>&gt;     print(&quot;Match&quot;)<br>&gt;<br>&gt; default:<br>&gt;<br>&gt;     print(&quot;Some other non nil value?&quot;)<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt; But it does not work, the orange  text is a compile time error,<br>&gt; &quot;Expression pattern of type &#39;String&#39; cannot match value of type &#39;String?&#39;.<br>&gt; I realize that this can be replaced with a let statement (case let s where<br>&gt; s == &quot;Hello, playground&quot;:), but that is verbose.<br>&gt;<br>&gt; Seems like the compiler could be OK with the orange text, since it is<br>&gt; clearly not nil.<br>&gt;<br>&gt; Thoughts?<br>&gt;<br>&gt; -Lucas<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; &lt;NilInSwitchStatements.playground.zip&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160628/16c96abb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a6729e3608691552bd1c61373d0e5b08?s=50"></div><header><strong>Optionals and nil in Switch statement</strong> from <string>Kevin Nattinger</string> &lt;swift at nattinger.net&gt;<p>June 28, 2016 at 09:00:00am</p></header><div class="content"><p>No<br></p><p>  7&gt; switch str {<br>  8. case &quot;foo&quot;: print(&quot;case foo&quot;)<br>  9. case .none: print(&quot;(nil)&quot;)<br> 10. }<br>error: repl.swift:8:6: error: value of optional type &#39;String?&#39; not unwrapped; did you mean to use &#39;!&#39; or &#39;?&#39;?<br>case &quot;foo&quot;: print(&quot;case foo&quot;)<br>     ^<br>          !<br>Odd error, but at least it suggests itâ€™s an issue with optionaity.<br></p><p>&gt; On Jun 28, 2016, at 9:27 AM, Nevin Brackett-Rozinsky &lt;nevin.brackettrozinsky at gmail.com&gt; wrote:<br>&gt; <br>&gt; Does `case &quot;text&quot;?` work?<br>&gt; <br>&gt; <br>&gt; On Tuesday, June 28, 2016, Kevin Nattinger via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; Case .none:<br>&gt; Case .some(&quot;string&quot;):<br>&gt; <br>&gt; <br>&gt; On Jun 28, 2016, at 06:40, Lucas Jordan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; Forgive me if this was/is discussed already, I am new to the process here....<br>&gt;&gt; <br>&gt;&gt; (code is attached as a playground too)<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Sometimes when I am working with a String? nil can be a reasonable value, and what I want to do is something like the following:<br>&gt;&gt; <br>&gt;&gt; import UIKit<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; var str:String? = &quot;Hello, playground&quot;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; switch str{<br>&gt;&gt; <br>&gt;&gt; case nil:<br>&gt;&gt; <br>&gt;&gt;     print(&quot;Nil!&quot;)<br>&gt;&gt; <br>&gt;&gt; case &quot;Hello, playground&quot;:  //it would be super nice if this worked.<br>&gt;&gt; <br>&gt;&gt;     print(&quot;Match&quot;)<br>&gt;&gt; <br>&gt;&gt; default:<br>&gt;&gt; <br>&gt;&gt;     print(&quot;Some other non nil value?&quot;)<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; But it does not work, the orange  text is a compile time error, &quot;Expression pattern of type &#39;String&#39; cannot match value of type &#39;String?&#39;. I realize that this can be replaced with a let statement (case let s where s == &quot;Hello, playground&quot;:), but that is verbose. <br>&gt;&gt; <br>&gt;&gt; Seems like the compiler could be OK with the orange text, since it is clearly not nil.<br>&gt;&gt; <br>&gt;&gt; Thoughts?<br>&gt;&gt; <br>&gt;&gt; -Lucas<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; &lt;NilInSwitchStatements.playground.zip&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160628/f3ecec9e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e5bf3a3d73345cfed6baf5241ec16a80?s=50"></div><header><strong>Optionals and nil in Switch statement</strong> from <string>Lucas Jordan</string> &lt;lucasjordan at gmail.com&gt;<p>June 28, 2016 at 12:00:00pm</p></header><div class="content"><p>This is sort of weird right? because comparing nil to a non nil string is a<br>reasonable thing to do:<br></p><p>var nilString:String? = nil<br></p><p>if nilString == &quot;this always fails&quot; {}<br></p><p>is totally reasonable.<br></p><p>On Tue, Jun 28, 2016 at 12:33 PM, Kevin Nattinger &lt;swift at nattinger.net&gt;<br>wrote:<br></p><p>&gt; No<br>&gt;<br>&gt;   7&gt; switch str {<br>&gt;   8. case &quot;foo&quot;: print(&quot;case foo&quot;)<br>&gt;   9. case .none: print(&quot;(nil)&quot;)<br>&gt;  10. }<br>&gt; error: repl.swift:8:6: error: value of optional type &#39;String?&#39; not<br>&gt; unwrapped; did you mean to use &#39;!&#39; or &#39;?&#39;?<br>&gt; case &quot;foo&quot;: print(&quot;case foo&quot;)<br>&gt;      ^<br>&gt;           !<br>&gt; Odd error, but at least it suggests itâ€™s an issue with optionaity.<br>&gt;<br>&gt;<br>&gt; On Jun 28, 2016, at 9:27 AM, Nevin Brackett-Rozinsky &lt;<br>&gt; nevin.brackettrozinsky at gmail.com&gt; wrote:<br>&gt;<br>&gt; Does `case &quot;text&quot;?` work?<br>&gt;<br>&gt;<br>&gt; On Tuesday, June 28, 2016, Kevin Nattinger via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; Case .none:<br>&gt; Case .some(&quot;string&quot;):<br>&gt;<br>&gt;<br>&gt; On Jun 28, 2016, at 06:40, Lucas Jordan via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Forgive me if this was/is discussed already, I am new to the process<br>&gt; here....<br>&gt;<br>&gt; (code is attached as a playground too)<br>&gt;<br>&gt;<br>&gt;<br>&gt; Sometimes when I am working with a String? nil can be a reasonable value,<br>&gt; and what I want to do is something like the following:<br>&gt;<br>&gt; import UIKit<br>&gt;<br>&gt;<br>&gt;<br>&gt; var str:String? = &quot;Hello, playground&quot;<br>&gt;<br>&gt;<br>&gt;<br>&gt; switch str{<br>&gt;<br>&gt; case nil:<br>&gt;<br>&gt;     print(&quot;Nil!&quot;)<br>&gt;<br>&gt; case &quot;Hello, playground&quot;:  //it would be super nice if this worked.<br>&gt;<br>&gt;     print(&quot;Match&quot;)<br>&gt;<br>&gt; default:<br>&gt;<br>&gt;     print(&quot;Some other non nil value?&quot;)<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt;<br>&gt; But it does not work, the orange  text is a compile time error,<br>&gt; &quot;Expression pattern of type &#39;String&#39; cannot match value of type &#39;String?&#39;.<br>&gt; I realize that this can be replaced with a let statement<br>&gt; (case let s where s == &quot;Hello, playground&quot;:), but that is verbose.<br>&gt;<br>&gt; Seems like the compiler could be OK with the orange text, since it is<br>&gt; clearly not nil.<br>&gt;<br>&gt; Thoughts?<br>&gt;<br>&gt; -Lucas<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; &lt;NilInSwitchStatements.playground.zip&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160628/91ee39c7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a6729e3608691552bd1c61373d0e5b08?s=50"></div><header><strong>Optionals and nil in Switch statement</strong> from <string>Kevin Nattinger</string> &lt;swift at nattinger.net&gt;<p>June 28, 2016 at 11:00:00am</p></header><div class="content"><p>Iâ€™ve always thought itâ€™s a bit odd, but thatâ€™s the way it is. FWIW, if you define `T? ~= T?` (switch uses `~=` under the hood), you can use that syntax:<br></p><p>public func ~=&lt;T : Equatable&gt;(a: T?, b: T?) -&gt; Bool {<br>	return a == b<br>}<br></p><p>switch str {<br>case &quot;foo&quot;: print(&quot;foo&quot;)<br>case &quot;bar&quot;: print(&quot;bar&quot;)<br>case nil: print(&quot;nil&quot;)<br>default: print(&quot;other&quot;)<br>}<br></p><p>For better or worse, this prevents you from using the `.some(x)` / `.none` version.<br></p><p>You could propose adding this to the standard library to the swift-evolution list, see how they react.<br></p><p>&gt; On Jun 28, 2016, at 9:52 AM, Lucas Jordan &lt;lucasjordan at gmail.com&gt; wrote:<br>&gt; <br>&gt; This is sort of weird right? because comparing nil to a non nil string is a reasonable thing to do:<br>&gt; <br>&gt; var nilString:String? = nil<br>&gt; <br>&gt; if nilString == &quot;this always fails&quot; {}<br>&gt; <br>&gt; is totally reasonable.<br>&gt; <br>&gt; On Tue, Jun 28, 2016 at 12:33 PM, Kevin Nattinger &lt;swift at nattinger.net&gt; wrote:<br>&gt; No<br>&gt; <br>&gt;   7&gt; switch str {<br>&gt;   8. case &quot;foo&quot;: print(&quot;case foo&quot;)<br>&gt;   9. case .none: print(&quot;(nil)&quot;)<br>&gt;  10. }<br>&gt; error: repl.swift:8:6: error: value of optional type &#39;String?&#39; not unwrapped; did you mean to use &#39;!&#39; or &#39;?&#39;?<br>&gt; case &quot;foo&quot;: print(&quot;case foo&quot;)<br>&gt;      ^<br>&gt;           !<br>&gt; Odd error, but at least it suggests itâ€™s an issue with optionaity.<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 28, 2016, at 9:27 AM, Nevin Brackett-Rozinsky &lt;nevin.brackettrozinsky at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Does `case &quot;text&quot;?` work?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Tuesday, June 28, 2016, Kevin Nattinger via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; Case .none:<br>&gt;&gt; Case .some(&quot;string&quot;):<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Jun 28, 2016, at 06:40, Lucas Jordan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Forgive me if this was/is discussed already, I am new to the process here....<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; (code is attached as a playground too)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sometimes when I am working with a String? nil can be a reasonable value, and what I want to do is something like the following:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; import UIKit<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; var str:String? = &quot;Hello, playground&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; switch str{<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; case nil:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     print(&quot;Nil!&quot;)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; case &quot;Hello, playground&quot;:  //it would be super nice if this worked.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     print(&quot;Match&quot;)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; default:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     print(&quot;Some other non nil value?&quot;)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But it does not work, the orange  text is a compile time error, &quot;Expression pattern of type &#39;String&#39; cannot match value of type &#39;String?&#39;. I realize that this can be replaced with a let statement (case let s where s == &quot;Hello, playground&quot;:), but that is verbose. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Seems like the compiler could be OK with the orange text, since it is clearly not nil.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thoughts?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Lucas<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &lt;NilInSwitchStatements.playground.zip&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160628/267476b7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a6729e3608691552bd1c61373d0e5b08?s=50"></div><header><strong>Optionals and nil in Switch statement</strong> from <string>Kevin Nattinger</string> &lt;swift at nattinger.net&gt;<p>June 28, 2016 at 11:00:00am</p></header><div class="content"><p>Slight amendment for `let` case, which does evidently still require the explicit `.some`<br></p><p>switch str {<br>case &quot;foo&quot;: print(&quot;foo&quot;)<br>case .some(let string): print(string) // `case let .some(string)` also works<br>case nil: print(&quot;nil&quot;)<br>}<br></p><p>&gt; On Jun 28, 2016, at 11:10 AM, Kevin Nattinger via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Iâ€™ve always thought itâ€™s a bit odd, but thatâ€™s the way it is. FWIW, if you define `T? ~= T?` (switch uses `~=` under the hood), you can use that syntax:<br>&gt; <br>&gt; public func ~=&lt;T : Equatable&gt;(a: T?, b: T?) -&gt; Bool {<br>&gt; 	return a == b<br>&gt; }<br>&gt; <br>&gt; switch str {<br>&gt; case &quot;foo&quot;: print(&quot;foo&quot;)<br>&gt; case &quot;bar&quot;: print(&quot;bar&quot;)<br>&gt; case nil: print(&quot;nil&quot;)<br>&gt; default: print(&quot;other&quot;)<br>&gt; }<br>&gt; <br>&gt; For better or worse, this prevents you from using the `.some(x)` / `.none` version.<br>&gt; <br>&gt; You could propose adding this to the standard library to the swift-evolution list, see how they react.<br>&gt; <br>&gt;&gt; On Jun 28, 2016, at 9:52 AM, Lucas Jordan &lt;lucasjordan at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; This is sort of weird right? because comparing nil to a non nil string is a reasonable thing to do:<br>&gt;&gt; <br>&gt;&gt; var nilString:String? = nil<br>&gt;&gt; <br>&gt;&gt; if nilString == &quot;this always fails&quot; {}<br>&gt;&gt; <br>&gt;&gt; is totally reasonable.<br>&gt;&gt; <br>&gt;&gt; On Tue, Jun 28, 2016 at 12:33 PM, Kevin Nattinger &lt;swift at nattinger.net&gt; wrote:<br>&gt;&gt; No<br>&gt;&gt; <br>&gt;&gt;   7&gt; switch str {<br>&gt;&gt;   8. case &quot;foo&quot;: print(&quot;case foo&quot;)<br>&gt;&gt;   9. case .none: print(&quot;(nil)&quot;)<br>&gt;&gt;  10. }<br>&gt;&gt; error: repl.swift:8:6: error: value of optional type &#39;String?&#39; not unwrapped; did you mean to use &#39;!&#39; or &#39;?&#39;?<br>&gt;&gt; case &quot;foo&quot;: print(&quot;case foo&quot;)<br>&gt;&gt;      ^<br>&gt;&gt;           !<br>&gt;&gt; Odd error, but at least it suggests itâ€™s an issue with optionaity.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 28, 2016, at 9:27 AM, Nevin Brackett-Rozinsky &lt;nevin.brackettrozinsky at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Does `case &quot;text&quot;?` work?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Tuesday, June 28, 2016, Kevin Nattinger via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; Case .none:<br>&gt;&gt;&gt; Case .some(&quot;string&quot;):<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Jun 28, 2016, at 06:40, Lucas Jordan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Forgive me if this was/is discussed already, I am new to the process here....<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; (code is attached as a playground too)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sometimes when I am working with a String? nil can be a reasonable value, and what I want to do is something like the following:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; import UIKit<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; var str:String? = &quot;Hello, playground&quot;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; switch str{<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; case nil:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     print(&quot;Nil!&quot;)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; case &quot;Hello, playground&quot;:  //it would be super nice if this worked.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     print(&quot;Match&quot;)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; default:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     print(&quot;Some other non nil value?&quot;)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; But it does not work, the orange  text is a compile time error, &quot;Expression pattern of type &#39;String&#39; cannot match value of type &#39;String?&#39;. I realize that this can be replaced with a let statement (case let s where s == &quot;Hello, playground&quot;:), but that is verbose. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Seems like the compiler could be OK with the orange text, since it is clearly not nil.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thoughts?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Lucas<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; &lt;NilInSwitchStatements.playground.zip&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160628/4e085dd5/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8149b5bd66abbc94babfda2995153481?s=50"></div><header><strong>Optionals and nil in Switch statement</strong> from <string>Nevin Brackett-Rozinsky</string> &lt;nevin.brackettrozinsky at gmail.com&gt;<p>June 28, 2016 at 06:00:00pm</p></header><div class="content"><p>I just got home and tested. The answer is yes, `case &quot;text&quot;?` does work.<br></p><p>let optStr : String? = &quot;text&quot;<br>switch optStr {<br>case nil     : print(&quot;Nil&quot;)<br>case &quot;text&quot;? : print(&quot;Success&quot;)<br>default      : print(&quot;Default&quot;)<br>}<br>// Prints `Success`<br></p><p>Nevin<br></p><p>On Tue, Jun 28, 2016 at 12:27 PM, Nevin Brackett-Rozinsky &lt;<br>nevin.brackettrozinsky at gmail.com&gt; wrote:<br></p><p>&gt; Does `case &quot;text&quot;?` work?<br>&gt;<br>&gt;<br>&gt; On Tuesday, June 28, 2016, Kevin Nattinger via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Case .none:<br>&gt;&gt; Case .some(&quot;string&quot;):<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Jun 28, 2016, at 06:40, Lucas Jordan via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Forgive me if this was/is discussed already, I am new to the process<br>&gt;&gt; here....<br>&gt;&gt;<br>&gt;&gt; (code is attached as a playground too)<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Sometimes when I am working with a String? nil can be a reasonable value,<br>&gt;&gt; and what I want to do is something like the following:<br>&gt;&gt;<br>&gt;&gt; import UIKit<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; var str:String? = &quot;Hello, playground&quot;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; switch str{<br>&gt;&gt;<br>&gt;&gt; case nil:<br>&gt;&gt;<br>&gt;&gt;     print(&quot;Nil!&quot;)<br>&gt;&gt;<br>&gt;&gt; case &quot;Hello, playground&quot;:  //it would be super nice if this worked.<br>&gt;&gt;<br>&gt;&gt;     print(&quot;Match&quot;)<br>&gt;&gt;<br>&gt;&gt; default:<br>&gt;&gt;<br>&gt;&gt;     print(&quot;Some other non nil value?&quot;)<br>&gt;&gt;<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; But it does not work, the orange  text is a compile time error,<br>&gt;&gt; &quot;Expression pattern of type &#39;String&#39; cannot match value of type &#39;String?&#39;.<br>&gt;&gt; I realize that this can be replaced with a let statement (case let s<br>&gt;&gt; where s == &quot;Hello, playground&quot;:), but that is verbose.<br>&gt;&gt;<br>&gt;&gt; Seems like the compiler could be OK with the orange text, since it is<br>&gt;&gt; clearly not nil.<br>&gt;&gt;<br>&gt;&gt; Thoughts?<br>&gt;&gt;<br>&gt;&gt; -Lucas<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; &lt;NilInSwitchStatements.playground.zip&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160628/51c00d17/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>Optionals and nil in Switch statement</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June 29, 2016 at 07:00:00am</p></header><div class="content"><p>I nevertheless think that this is a bug and should be addressed. There is no reason where<br></p><p>if stringOptional == stringNonOptional { ... }<br></p><p>works, but pretty much the same construct doesn&#39;t work in the switch-case. It should be perhaps solved via a bugreport at http://bugs.swift.org &lt;http://bugs.swift.org/&gt; and via evolution, though...<br></p><p>&gt; On Jun 29, 2016, at 12:31 AM, Nevin Brackett-Rozinsky via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I just got home and tested. The answer is yes, `case &quot;text&quot;?` does work.<br>&gt; <br>&gt; let optStr : String? = &quot;text&quot;<br>&gt; switch optStr {<br>&gt; case nil     : print(&quot;Nil&quot;)<br>&gt; case &quot;text&quot;? : print(&quot;Success&quot;)<br>&gt; default      : print(&quot;Default&quot;)<br>&gt; }<br>&gt; // Prints `Success`<br>&gt; <br>&gt; <br>&gt; Nevin<br>&gt; <br>&gt; On Tue, Jun 28, 2016 at 12:27 PM, Nevin Brackett-Rozinsky &lt;nevin.brackettrozinsky at gmail.com &lt;mailto:nevin.brackettrozinsky at gmail.com&gt;&gt; wrote:<br>&gt; Does `case &quot;text&quot;?` work?<br>&gt; <br>&gt; <br>&gt; On Tuesday, June 28, 2016, Kevin Nattinger via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Case .none:<br>&gt; Case .some(&quot;string&quot;):<br>&gt; <br>&gt; <br>&gt; On Jun 28, 2016, at 06:40, Lucas Jordan via swift-evolution &lt;swift-evolution at swift.org &lt;&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Forgive me if this was/is discussed already, I am new to the process here....<br>&gt;&gt; <br>&gt;&gt; (code is attached as a playground too)<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Sometimes when I am working with a String? nil can be a reasonable value, and what I want to do is something like the following:<br>&gt;&gt; <br>&gt;&gt; import UIKit<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; var str:String? = &quot;Hello, playground&quot;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; switch str{<br>&gt;&gt; <br>&gt;&gt; case nil:<br>&gt;&gt; <br>&gt;&gt;     print(&quot;Nil!&quot;)<br>&gt;&gt; <br>&gt;&gt; case &quot;Hello, playground&quot;:  //it would be super nice if this worked.<br>&gt;&gt; <br>&gt;&gt;     print(&quot;Match&quot;)<br>&gt;&gt; <br>&gt;&gt; default:<br>&gt;&gt; <br>&gt;&gt;     print(&quot;Some other non nil value?&quot;)<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; But it does not work, the orange  text is a compile time error, &quot;Expression pattern of type &#39;String&#39; cannot match value of type &#39;String?&#39;. I realize that this can be replaced with a let statement (case let s where s == &quot;Hello, playground&quot;:), but that is verbose. <br>&gt;&gt; <br>&gt;&gt; Seems like the compiler could be OK with the orange text, since it is clearly not nil.<br>&gt;&gt; <br>&gt;&gt; Thoughts?<br>&gt;&gt; <br>&gt;&gt; -Lucas<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; &lt;NilInSwitchStatements.playground.zip&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160629/32b96f53/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Optionals and nil in Switch statement</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>June 29, 2016 at 08:00:00am</p></header><div class="content"><p>I don&#39;t see it as a bug. The if statement calls an equality function which promotes the lhs to an Optional (or that accepts a non optional as lhs - can&#39;t remember) but the switch statement does pattern matching. Does the the compiler warn you when pattern matching an optional with a non-optional case?<br></p><p>&gt; On 29 Jun 2016, at 07:16, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I nevertheless think that this is a bug and should be addressed. There is no reason where<br>&gt; <br>&gt; if stringOptional == stringNonOptional { ... }<br>&gt; <br>&gt; works, but pretty much the same construct doesn&#39;t work in the switch-case. It should be perhaps solved via a bugreport at http://bugs.swift.org and via evolution, though...<br>&gt; <br>&gt;&gt; On Jun 29, 2016, at 12:31 AM, Nevin Brackett-Rozinsky via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I just got home and tested. The answer is yes, `case &quot;text&quot;?` does work.<br>&gt;&gt; <br>&gt;&gt; let optStr : String? = &quot;text&quot;<br>&gt;&gt; switch optStr {<br>&gt;&gt; case nil     : print(&quot;Nil&quot;)<br>&gt;&gt; case &quot;text&quot;? : print(&quot;Success&quot;)<br>&gt;&gt; default      : print(&quot;Default&quot;)<br>&gt;&gt; }<br>&gt;&gt; // Prints `Success`<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Nevin<br>&gt;&gt; <br>&gt;&gt;&gt; On Tue, Jun 28, 2016 at 12:27 PM, Nevin Brackett-Rozinsky &lt;nevin.brackettrozinsky at gmail.com&gt; wrote:<br>&gt;&gt;&gt; Does `case &quot;text&quot;?` work?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Tuesday, June 28, 2016, Kevin Nattinger via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; Case .none:<br>&gt;&gt;&gt;&gt; Case .some(&quot;string&quot;):<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jun 28, 2016, at 06:40, Lucas Jordan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Forgive me if this was/is discussed already, I am new to the process here....<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; (code is attached as a playground too)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Sometimes when I am working with a String? nil can be a reasonable value, and what I want to do is something like the following:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; import UIKit<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; var str:String? = &quot;Hello, playground&quot;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; switch str{<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; case nil:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;     print(&quot;Nil!&quot;)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; case &quot;Hello, playground&quot;:  //it would be super nice if this worked.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;     print(&quot;Match&quot;)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; default:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;     print(&quot;Some other non nil value?&quot;)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; But it does not work, the orange  text is a compile time error, &quot;Expression pattern of type &#39;String&#39; cannot match value of type &#39;String?&#39;. I realize that this can be replaced with a let statement (case let s where s == &quot;Hello, playground&quot;:), but that is verbose. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Seems like the compiler could be OK with the orange text, since it is clearly not nil.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Thoughts?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -Lucas<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; &lt;NilInSwitchStatements.playground.zip&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160629/5b982b5c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>Optionals and nil in Switch statement</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June 29, 2016 at 08:00:00am</p></header><div class="content"><p>Yes, you get a warning. But I don&#39;t see why it should - when you&#39;re matching against an optional, it&#39;s evident that you mean .some(&quot;Hello&quot;)... This should be automatically inferred.<br></p><p>I find this a confusing part of the switch statement where <br></p><p>let obj: Any? = &quot;Hello&quot;<br></p><p>switch obj {<br>case let str as String:<br>    print(&quot;Hey, found String!&quot;)<br>default:<br>    print(&quot;No find.&quot;)<br>}<br></p><p>will print &quot;Hey found String&quot;, but it won&#39;t allow you to match against a string literal. This is one of the first things that I found confusing when I first learned Swift.<br></p><p>&gt; On Jun 29, 2016, at 8:49 AM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt; <br>&gt; I don&#39;t see it as a bug. The if statement calls an equality function which promotes the lhs to an Optional (or that accepts a non optional as lhs - can&#39;t remember) but the switch statement does pattern matching. Does the the compiler warn you when pattern matching an optional with a non-optional case?<br>&gt; <br>&gt; On 29 Jun 2016, at 07:16, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; I nevertheless think that this is a bug and should be addressed. There is no reason where<br>&gt;&gt; <br>&gt;&gt; if stringOptional == stringNonOptional { ... }<br>&gt;&gt; <br>&gt;&gt; works, but pretty much the same construct doesn&#39;t work in the switch-case. It should be perhaps solved via a bugreport at http://bugs.swift.org &lt;http://bugs.swift.org/&gt; and via evolution, though...<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 29, 2016, at 12:31 AM, Nevin Brackett-Rozinsky via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I just got home and tested. The answer is yes, `case &quot;text&quot;?` does work.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let optStr : String? = &quot;text&quot;<br>&gt;&gt;&gt; switch optStr {<br>&gt;&gt;&gt; case nil     : print(&quot;Nil&quot;)<br>&gt;&gt;&gt; case &quot;text&quot;? : print(&quot;Success&quot;)<br>&gt;&gt;&gt; default      : print(&quot;Default&quot;)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; // Prints `Success`<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Nevin<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Tue, Jun 28, 2016 at 12:27 PM, Nevin Brackett-Rozinsky &lt;nevin.brackettrozinsky at gmail.com &lt;mailto:nevin.brackettrozinsky at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; Does `case &quot;text&quot;?` work?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Tuesday, June 28, 2016, Kevin Nattinger via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; Case .none:<br>&gt;&gt;&gt; Case .some(&quot;string&quot;):<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Jun 28, 2016, at 06:40, Lucas Jordan via swift-evolution &lt;swift-evolution at swift.org &lt;&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Forgive me if this was/is discussed already, I am new to the process here....<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; (code is attached as a playground too)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sometimes when I am working with a String? nil can be a reasonable value, and what I want to do is something like the following:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; import UIKit<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; var str:String? = &quot;Hello, playground&quot;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; switch str{<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; case nil:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     print(&quot;Nil!&quot;)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; case &quot;Hello, playground&quot;:  //it would be super nice if this worked.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     print(&quot;Match&quot;)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; default:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     print(&quot;Some other non nil value?&quot;)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; But it does not work, the orange  text is a compile time error, &quot;Expression pattern of type &#39;String&#39; cannot match value of type &#39;String?&#39;. I realize that this can be replaced with a let statement (case let s where s == &quot;Hello, playground&quot;:), but that is verbose. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Seems like the compiler could be OK with the orange text, since it is clearly not nil.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thoughts?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Lucas<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; &lt;NilInSwitchStatements.playground.zip&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160629/97688047/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Optionals and nil in Switch statement</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>June 29, 2016 at 09:00:00am</p></header><div class="content"><p>Perhaps it should provide a Fix-It, but I don&#39;t see it as an an issue, more as an opportunity to understand the pattern matching behind it :)<br></p><p>&gt; On 29 Jun 2016, at 08:59, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt; <br>&gt; Yes, you get a warning. But I don&#39;t see why it should - when you&#39;re matching against an optional, it&#39;s evident that you mean .some(&quot;Hello&quot;)... This should be automatically inferred.<br>&gt; <br>&gt; I find this a confusing part of the switch statement where <br>&gt; <br>&gt; let obj: Any? = &quot;Hello&quot;<br>&gt; <br>&gt; switch obj {<br>&gt; case let str as String:<br>&gt;     print(&quot;Hey, found String!&quot;)<br>&gt; default:<br>&gt;     print(&quot;No find.&quot;)<br>&gt; }<br>&gt; <br>&gt; will print &quot;Hey found String&quot;, but it won&#39;t allow you to match against a string literal. This is one of the first things that I found confusing when I first learned Swift.<br>&gt; <br>&gt;&gt; On Jun 29, 2016, at 8:49 AM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I don&#39;t see it as a bug. The if statement calls an equality function which promotes the lhs to an Optional (or that accepts a non optional as lhs - can&#39;t remember) but the switch statement does pattern matching. Does the the compiler warn you when pattern matching an optional with a non-optional case?<br>&gt;&gt; <br>&gt;&gt;&gt; On 29 Jun 2016, at 07:16, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I nevertheless think that this is a bug and should be addressed. There is no reason where<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if stringOptional == stringNonOptional { ... }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; works, but pretty much the same construct doesn&#39;t work in the switch-case. It should be perhaps solved via a bugreport at http://bugs.swift.org and via evolution, though...<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 29, 2016, at 12:31 AM, Nevin Brackett-Rozinsky via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I just got home and tested. The answer is yes, `case &quot;text&quot;?` does work.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let optStr : String? = &quot;text&quot;<br>&gt;&gt;&gt;&gt; switch optStr {<br>&gt;&gt;&gt;&gt; case nil     : print(&quot;Nil&quot;)<br>&gt;&gt;&gt;&gt; case &quot;text&quot;? : print(&quot;Success&quot;)<br>&gt;&gt;&gt;&gt; default      : print(&quot;Default&quot;)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; // Prints `Success`<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Nevin<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Tue, Jun 28, 2016 at 12:27 PM, Nevin Brackett-Rozinsky &lt;nevin.brackettrozinsky at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; Does `case &quot;text&quot;?` work?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Tuesday, June 28, 2016, Kevin Nattinger via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; Case .none:<br>&gt;&gt;&gt;&gt;&gt;&gt; Case .some(&quot;string&quot;):<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 28, 2016, at 06:40, Lucas Jordan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Forgive me if this was/is discussed already, I am new to the process here....<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; (code is attached as a playground too)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sometimes when I am working with a String? nil can be a reasonable value, and what I want to do is something like the following:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; import UIKit<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; var str:String? = &quot;Hello, playground&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; switch str{<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; case nil:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     print(&quot;Nil!&quot;)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; case &quot;Hello, playground&quot;:  //it would be super nice if this worked.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     print(&quot;Match&quot;)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; default:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     print(&quot;Some other non nil value?&quot;)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; But it does not work, the orange  text is a compile time error, &quot;Expression pattern of type &#39;String&#39; cannot match value of type &#39;String?&#39;. I realize that this can be replaced with a let statement (case let s where s == &quot;Hello, playground&quot;:), but that is verbose. <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Seems like the compiler could be OK with the orange text, since it is clearly not nil.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Thoughts?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; -Lucas<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;NilInSwitchStatements.playground.zip&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160629/870d0fb5/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
