<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c354b21edb9ba56fe6b42950e08195fa?s=50"></div><header><strong>[Pitch] Replace the ternary operator with an in-language function</strong> from <string>Jonathan Hull</string> &lt;jhull at gbis.com&gt;<p>October 27, 2016 at 12:00:00pm</p></header><div class="content"><p>-1 to replacing this with the functions mentioned.<br></p><p>At some point, I would like to see an operator which lifts a value into an optional based on a boolean value (basically the opposite of ??).  That is it is either the value or nil based on some boolean value.  If we use ‘?’ as a binary operator which does this:<br></p><p>	let optional = boolVal ? value  //optional is value if boolVal is true, otherwise it is nil<br></p><p>…then the behavior of the Ternary operator behavior falls out without special casing in the compiler (using ‘??&#39; instead of ‘:’):<br></p><p>	let answer = boolVal ? “true” ?? “false&quot;<br></p><p>It also allows you to chain ‘else if’ style statements together ad infinum:<br></p><p>	let answer = (x ? “one”) ?? ( y ? “two”) ?? “three”<br></p><p><br>That may be too many question marks (as you can see I had to use parenthesis to clarify for myself), so we might want to choose some other similarly terse symbol.  I think the core idea is sound though.  I have used it in many DSLs (with different syntax: ‘?(bool) “true&quot; | “false&quot;&#39;) and it was enormously helpful/flexible.<br></p><p>Not sure what the best syntax would be (just throwing out ideas).  Maybe something like:<br>	<br>	let optional = value.?(boolVal)<br>	<br>	let answer = “one”.?(x) ?? “two.?(y) ?? “three&quot;<br></p><p><br>Even with it though, I would still favor a two-stage replacement, depreciating it for a while before removing it.  They could co-exist for as long as needed, until it makes sense to simplify the compiler by removing the ternary operator.<br></p><p><br></p><p>Honestly, I would really like to go the other way, adding some sort of terse operator which is to switch what the ternary operator is to if.  This would basically have the semantics similar to a dictionary, but being an operation.  Horrible throwaway syntax to get the basic point across:<br></p><p>	let answer = value ?{ .small: 5, .medium: 10, .large: 20} //Answer is 5, 10, or 20 depending upon the value in value<br></p><p>The compiler would force completeness the same way it does with switch.<br></p><p>Thanks,<br>Jon<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
