<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Issues with 0005-Better Translation of Objective-C APIs Into Swift</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February  2, 2016 at 04:00:00pm</p></header><div class="content"><p>on Tue Feb 02 2016, David Owens II &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Feb 2, 2016, at 12:48 PM, Jarod Long via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; This is definitely more clear when you completely separate these<br>&gt;&gt; lines from their context, but code isn&#39;t written or read in complete<br>&gt;&gt; isolation like this, so I think these examples significantly<br>&gt;&gt; exaggerate the ambiguity of the pattern in the real world.<br>&gt;&gt; <br>&gt;&gt; Even if you only make the minor change of renaming p to proximity<br>&gt;&gt; (which is really what it should be), the first example becomes<br>&gt;&gt; pretty clear:<br>&gt;&gt; <br>&gt;&gt;&gt; let next = current.updating(proximity)<br>&gt;&gt; <br>&gt;&gt; <br>&gt;<br>&gt; I just want to comment on this as I keep seeing this for arguments on<br>&gt; the lists. APIs themselves should not be relying on well named inputs<br>&gt; into them to create clear API signatures.<br></p><p><br>I don&#39;t think *anybody* on this list believes they should.<br></p><p>&gt;<br>&gt; The following version of the API is significantly more clear with no<br>&gt; requirement of the variable names to be matched to the expectations of<br>&gt; the API signature:<br>&gt;<br>&gt; let next = current.updating(proximity: p)<br></p><p>Either of these, IMO, clarify that API much better:<br></p><p>  let next = current.replacingProximityWith(p)<br>  let next = current.settingProximityTo(p)<br></p><p>but so what?  The example started with a poor API; there are any number<br>of things one could do to improve it.<br></p><p>&gt; Similarly,<br>&gt;<br>&gt; let content = listItemView.text.trimming(characters: .whitespaceAndNewlines)<br>&gt;<br>&gt; At least I have some context at the call site what the purpose of<br>&gt; .whitespaceAndNewlines.<br></p><p>You wouldn&#39;t say &quot;go to the garden and trim the plant: rhododendrons&quot;.<br>It isn&#39;t necessary for comprehension.  Why do you feel characters: is<br>necessary here?<br></p><p>&gt;&gt; Ultimately, I don&#39;t think this is a very difficult pattern to<br>&gt;&gt; learn. Maybe the first handful of times you see it you&#39;ll need to<br>&gt;&gt; read the documentation to know exactly what it&#39;s doing, but once<br>&gt;&gt; you&#39;ve seen it a few times, it&#39;s an instantly recognizable<br>&gt;&gt; pattern. If you see a gerund method, it returns a new thing by doing<br>&gt;&gt; the verb to the thing. Is it worth the redundancy and noise to save<br>&gt;&gt; new developers from possibly needing to look at a method&#39;s<br>&gt;&gt; documentation a few times?<br>&gt;<br>&gt; I really do not like the -ing form; it reads backwards. I intuitively<br>&gt; expected the object of the “trimming” to be the parameters, not the<br>&gt; instance invoking the method.<br>&gt;<br>&gt; let content = listItemView.text.trimmed(characters: .whitespaceAndNewlines)<br>&gt;<br>&gt; Whereas when I read the above, it’s natural to read that the &quot;text is<br>&gt; trimmed with” the parameter set. The former is, “the text is trimming<br>&gt; with” the parameter set.<br></p><p>This is why you&#39;re supposed to first try the &quot;ed&quot; form.  The &quot;ing&quot; form<br>only comes into play (quoting the guidelines):<br></p><p>     When adding “ed” is not grammatical because the verb has a direct<br>     object<br></p><p>and in those cases, it reads forwards.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>Issues with 0005-Better Translation of Objective-C APIs Into Swift</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>February  2, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Feb 2, 2016, at 4:54 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; The following version of the API is significantly more clear with no<br>&gt;&gt; requirement of the variable names to be matched to the expectations of<br>&gt;&gt; the API signature:<br>&gt;&gt; <br>&gt;&gt; let next = current.updating(proximity: p)<br>&gt; <br>&gt; Either of these, IMO, clarify that API much better:<br>&gt; <br>&gt;  let next = current.replacingProximityWith(p)<br>&gt;  let next = current.settingProximityTo(p)<br>&gt; <br>&gt; but so what?  The example started with a poor API; there are any number<br>&gt; of things one could do to improve it.<br></p><p>The point was to highlight that the clarity should be coming from the API, not the inputs to the API.<br></p><p>&gt; <br>&gt;&gt; Similarly,<br>&gt;&gt; <br>&gt;&gt; let content = listItemView.text.trimming(characters: .whitespaceAndNewlines)<br>&gt;&gt; <br>&gt;&gt; At least I have some context at the call site what the purpose of<br>&gt;&gt; .whitespaceAndNewlines.<br>&gt; <br>&gt; You wouldn&#39;t say &quot;go to the garden and trim the plant: rhododendrons&quot;.<br>&gt; It isn&#39;t necessary for comprehension.  Why do you feel characters: is<br>&gt; necessary here?<br></p><p>Because unlike the English phrase, &quot;trimming&quot; does not have an implicit object set based on the context of a string; what else would you typically trim in a garden other than plant life? I could naturally create an API that allows trimming by a line range or string content, as an example.<br></p><p>&quot;public func foo() {}&quot;.trimmed(text: &quot;public &quot;)<br>longContentWithKnownPreamble.trimmed(lines: 0..&lt;5)<br></p><p>We could make these different APIs as opposed to overloads, though I&#39;m not convinced that they are not simply different ways to trim content.<br></p><p>-David<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160202/c8c32577/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Issues with 0005-Better Translation of Objective-C APIs Into Swift</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>February  2, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Feb 2, 2016, at 17:28, David Owens II via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 2, 2016, at 4:54 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Similarly,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let content = listItemView.text.trimming(characters: .whitespaceAndNewlines)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; At least I have some context at the call site what the purpose of<br>&gt;&gt;&gt; .whitespaceAndNewlines.<br>&gt;&gt; <br>&gt;&gt; You wouldn&#39;t say &quot;go to the garden and trim the plant: rhododendrons&quot;.<br>&gt;&gt; It isn&#39;t necessary for comprehension.  Why do you feel characters: is<br>&gt;&gt; necessary here?<br>&gt; <br>&gt; Because unlike the English phrase, &quot;trimming&quot; does not have an implicit object set based on the context of a string; what else would you typically trim in a garden other than plant life? I could naturally create an API that allows trimming by a line range or string content, as an example.<br>&gt; <br>&gt; &quot;public func foo() {}&quot;.trimmed(text: &quot;public &quot;)<br>&gt; longContentWithKnownPreamble.trimmed(lines: 0..&lt;5)<br>&gt; <br>&gt; We could make these different APIs as opposed to overloads, though I&#39;m not convinced that they are not simply different ways to trim content.<br></p><p>That&#39;s actually why this one is &quot;trimming&quot;, not &quot;trimmed&quot;. &quot;trimming&quot; allows a direct object; &quot;trimmed&quot; does not.<br></p><p>I don&#39;t really have a problem with this overload set, although admittedly I can&#39;t tell if we&#39;re trimming prefixes, suffixes, or both, and I would hope that&#39;s consistent between the two.<br></p><p>inputText.trimming(.whitespaceAndNewlines)<br>inputText.trimming(&quot;public &quot;)<br></p><p>These are both perfectly good noun phrases in English, too: &quot;[get me] the inputText, trimming whitespace and newlines&quot; and &quot;[get me] the inputText, trimming &#39;public &#39;&quot;.<br></p><p>(But to play David&#39;s Advocate, it also seems perfectly reasonable in English to say &quot;[get me] the inputText, trimming whitespace and newline characters&quot; and &quot;[get me] the inputText, trimming the string &#39;public &#39;&quot;.)<br></p><p>Jordan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160202/5563c62f/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a06dd7924588141b9c907543798c2524?s=50"></div><header><strong>Issues with 0005-Better Translation of Objective-C APIs Into Swift</strong> from <string>Gwendal Roué</string> &lt;gwendal.roue at gmail.com&gt;<p>February  3, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; Le 3 févr. 2016 à 01:54, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; <br>&gt; on Tue Feb 02 2016, David Owens II &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On Feb 2, 2016, at 12:48 PM, Jarod Long via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is definitely more clear when you completely separate these<br>&gt;&gt;&gt; lines from their context, but code isn&#39;t written or read in complete<br>&gt;&gt;&gt; isolation like this, so I think these examples significantly<br>&gt;&gt;&gt; exaggerate the ambiguity of the pattern in the real world.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Even if you only make the minor change of renaming p to proximity<br>&gt;&gt;&gt; (which is really what it should be), the first example becomes<br>&gt;&gt;&gt; pretty clear:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let next = current.updating(proximity)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I just want to comment on this as I keep seeing this for arguments on<br>&gt;&gt; the lists. APIs themselves should not be relying on well named inputs<br>&gt;&gt; into them to create clear API signatures.<br>&gt; <br>&gt; I don&#39;t think *anybody* on this list believes they should.<br>&gt; <br>&gt; […]<br>&gt; <br>&gt;&gt; Similarly,<br>&gt;&gt; <br>&gt;&gt; let content = listItemView.text.trimming(characters: .whitespaceAndNewlines)<br>&gt;&gt; <br>&gt;&gt; At least I have some context at the call site what the purpose of<br>&gt;&gt; .whitespaceAndNewlines.<br>&gt; <br>&gt; You wouldn&#39;t say &quot;go to the garden and trim the plant: rhododendrons&quot;.<br>&gt; It isn&#39;t necessary for comprehension.  Why do you feel characters: is<br>&gt; necessary here?<br></p><p>Precisely because of what you stated a few lines above : &quot;I don&#39;t think *anybody* on this list believes [API] should [be relying on well named inputs »:<br></p><p>	let s: NSCharacterSet = .whitespaceAndNewlines<br>	let content = listItemView.text.trimming(s)	// what?<br></p><p>Gwendal<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Issues with 0005-Better Translation of Objective-C APIs Into Swift</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February  3, 2016 at 08:00:00am</p></header><div class="content"><p>on Wed Feb 03 2016, Gwendal Roué &lt;gwendal.roue-AT-gmail.com&gt; wrote:<br></p><p>&gt;&gt; Le 3 févr. 2016 à 01:54, Dave Abrahams via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Tue Feb 02 2016, David Owens II &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 2, 2016, at 12:48 PM, Jarod Long via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This is definitely more clear when you completely separate these<br>&gt;&gt;&gt;&gt; lines from their context, but code isn&#39;t written or read in complete<br>&gt;&gt;&gt;&gt; isolation like this, so I think these examples significantly<br>&gt;&gt;&gt;&gt; exaggerate the ambiguity of the pattern in the real world.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Even if you only make the minor change of renaming p to proximity<br>&gt;&gt;&gt;&gt; (which is really what it should be), the first example becomes<br>&gt;&gt;&gt;&gt; pretty clear:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; let next = current.updating(proximity)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I just want to comment on this as I keep seeing this for arguments on<br>&gt;&gt;&gt; the lists. APIs themselves should not be relying on well named inputs<br>&gt;&gt;&gt; into them to create clear API signatures.<br>&gt;&gt; <br>&gt;&gt; I don&#39;t think *anybody* on this list believes they should.<br>&gt;&gt; <br>&gt;&gt; […]<br>&gt;&gt; <br>&gt;&gt;&gt; Similarly,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let content = listItemView.text.trimming(characters: .whitespaceAndNewlines)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; At least I have some context at the call site what the purpose of<br>&gt;&gt;&gt; .whitespaceAndNewlines.<br>&gt;&gt; <br>&gt;&gt; You wouldn&#39;t say &quot;go to the garden and trim the plant: rhododendrons&quot;.<br>&gt;&gt; It isn&#39;t necessary for comprehension.  Why do you feel characters: is<br>&gt;&gt; necessary here?<br>&gt;<br>&gt; Precisely because of what you stated a few lines above : &quot;I don&#39;t<br>&gt; think *anybody* on this list believes [API] should [be relying on well<br>&gt; named inputs »:<br>&gt;<br>&gt; 	let s: NSCharacterSet = .whitespaceAndNewlines<br>&gt; 	let content = listItemView.text.trimming(s)	// what?<br></p><p>That&#39;s not relying on well named inputs; it&#39;s relying on context, and<br>*that* is perfectly alright.  We are never going to get to the point<br>that you can do without context in reading code.  Proof: there&#39;s no<br>label for the receiver, yet you&#39;re not complaining.  is<br></p><p>      v.text.trimming(characters: s)<br></p><p>somehow perfectly clear when<br></p><p>      listItemView.text.trimming(s)<br></p><p>is not?<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a06dd7924588141b9c907543798c2524?s=50"></div><header><strong>Issues with 0005-Better Translation of Objective-C APIs Into Swift</strong> from <string>Gwendal Roué</string> &lt;gwendal.roue at gmail.com&gt;<p>February  3, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt;&gt;&gt; You wouldn&#39;t say &quot;go to the garden and trim the plant: rhododendrons&quot;.<br>&gt;&gt;&gt; It isn&#39;t necessary for comprehension.  Why do you feel characters: is<br>&gt;&gt;&gt; necessary here?<br>&gt;&gt; <br>&gt;&gt; Precisely because of what you stated a few lines above : &quot;I don&#39;t<br>&gt;&gt; think *anybody* on this list believes [API] should [be relying on well<br>&gt;&gt; named inputs »:<br>&gt;&gt; <br>&gt;&gt; 	let s: NSCharacterSet = .whitespaceAndNewlines<br>&gt;&gt; 	let content = listItemView.text.trimming(s)	// what?<br>&gt; <br>&gt; That&#39;s not relying on well named inputs; it&#39;s relying on context, and<br>&gt; *that* is perfectly alright.  We are never going to get to the point<br>&gt; that you can do without context in reading code.  Proof: there&#39;s no<br>&gt; label for the receiver, yet you&#39;re not complaining.  is<br>&gt; <br>&gt;      v.text.trimming(characters: s)<br>&gt; <br>&gt; somehow perfectly clear when<br>&gt; <br>&gt;      listItemView.text.trimming(s)<br>&gt; <br>&gt; is not?<br></p><p>Well, Dave, despite all your efforts to make points, one version requires more context than the other, and is thus less clear.<br></p><p>You are in the brevity team, that’s pretty clear. I’m quite happy that the brevity team exists and is powerful, because that team has already done a great job. `a + [1]` is so much better to the eye than `[a arrayByAddingObject:@1]`.<br></p><p>Yet… maybe the brevity team should not win everything, leaving both code and people exhausted.<br></p><p>Gwendal<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Issues with 0005-Better Translation of Objective-C APIs Into Swift</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February  3, 2016 at 10:00:00am</p></header><div class="content"><p>on Wed Feb 03 2016, Gwendal Roué &lt;gwendal.roue-AT-gmail.com&gt; wrote:<br></p><p>&gt;&gt;&gt;&gt; You wouldn&#39;t say &quot;go to the garden and trim the plant: rhododendrons&quot;.<br>&gt;&gt;&gt;&gt; It isn&#39;t necessary for comprehension.  Why do you feel characters: is<br>&gt;&gt;&gt;&gt; necessary here?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Precisely because of what you stated a few lines above : &quot;I don&#39;t<br>&gt;<br>&gt;&gt;&gt; think *anybody* on this list believes [API] should [be relying on well<br>&gt;&gt;&gt; named inputs »:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	let s: NSCharacterSet = .whitespaceAndNewlines<br>&gt;&gt;&gt; 	let content = listItemView.text.trimming(s)	// what?<br>&gt;&gt; <br>&gt;&gt; That&#39;s not relying on well named inputs; it&#39;s relying on context, and<br>&gt;&gt; *that* is perfectly alright.  We are never going to get to the point<br>&gt;&gt; that you can do without context in reading code.  Proof: there&#39;s no<br>&gt;&gt; label for the receiver, yet you&#39;re not complaining.  is<br>&gt;&gt; <br>&gt;&gt;      v.text.trimming(characters: s)<br>&gt;&gt; <br>&gt;&gt; somehow perfectly clear when<br>&gt;&gt; <br>&gt;&gt;      listItemView.text.trimming(s)<br>&gt;&gt; <br>&gt;&gt; is not?<br>&gt;<br>&gt; Well, Dave, despite all your efforts to make points, one version<br>&gt; requires more context than the other, and is thus less clear.<br>&gt; You are in the brevity team, that’s pretty clear. <br></p><p>No, really, I&#39;m in the clarity team.  The same rules that go for English<br>go here.  Clarify what&#39;s ambiguous, or that you can&#39;t easily get from<br>context.  Clarifying things that are readily available from context just<br>makes code/prose/whatever *less* clear.<br></p><p>It is true that you can&#39;t know what context an API will be used in.<br>Does that mean you should preemptively build in as many clarifications<br>as possible in case the context leaves usage unclear?  IMO, no.  If each<br>of our words came pre-loaded with clarification, it would make ordinary<br>sentences unmanageable.  <br></p><p>The author of an API cannot guarantee clarity at the use-site.  The best<br>she can do is to provide the user of the API with the tools needed to<br>make use-sites clear.  But part of that is a responsibility not to force<br>detail into the use-site that isn&#39;t going to be helpful in most cases.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a06dd7924588141b9c907543798c2524?s=50"></div><header><strong>Issues with 0005-Better Translation of Objective-C APIs Into Swift</strong> from <string>Gwendal Roué</string> &lt;gwendal.roue at gmail.com&gt;<p>February  3, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; Le 3 févr. 2016 à 19:46, Dave Abrahams &lt;dabrahams at apple.com&gt; a écrit :<br>&gt; <br>&gt; <br>&gt; on Wed Feb 03 2016, Gwendal Roué &lt;gwendal.roue-AT-gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt;&gt;&gt;&gt; You wouldn&#39;t say &quot;go to the garden and trim the plant: rhododendrons&quot;.<br>&gt;&gt;&gt;&gt;&gt; It isn&#39;t necessary for comprehension.  Why do you feel characters: is<br>&gt;&gt;&gt;&gt;&gt; necessary here?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Precisely because of what you stated a few lines above : &quot;I don&#39;t<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; think *anybody* on this list believes [API] should [be relying on well<br>&gt;&gt;&gt;&gt; named inputs »:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	let s: NSCharacterSet = .whitespaceAndNewlines<br>&gt;&gt;&gt;&gt; 	let content = listItemView.text.trimming(s)	// what?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That&#39;s not relying on well named inputs; it&#39;s relying on context, and<br>&gt;&gt;&gt; *that* is perfectly alright.  We are never going to get to the point<br>&gt;&gt;&gt; that you can do without context in reading code.  Proof: there&#39;s no<br>&gt;&gt;&gt; label for the receiver, yet you&#39;re not complaining.  is<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     v.text.trimming(characters: s)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; somehow perfectly clear when<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     listItemView.text.trimming(s)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; is not?<br>&gt;&gt; <br>&gt;&gt; Well, Dave, despite all your efforts to make points, one version<br>&gt;&gt; requires more context than the other, and is thus less clear.<br>&gt;&gt; You are in the brevity team, that’s pretty clear. <br>&gt; <br>&gt; No, really, I&#39;m in the clarity team.<br></p><p>Well, I won’t be very wrong if I say that Cocoa APis have often been praised for their clarity, despite the fact that they are all but terse :-)<br></p><p>Gwendal<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Issues with 0005-Better Translation of Objective-C APIs Into Swift</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>February  4, 2016 at 01:00:00am</p></header><div class="content"><p>&gt; On 03 Feb 2016, at 18:21, Gwendal Roué via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Yet… maybe the brevity team should not win everything, leaving both code and people exhausted.<br></p><p>I&#39;m not necessarily in the brevity team myself, but I really enjoy the changes in the proposal. Swift still stays more verbose and clearer than a lot of languages that don&#39;t have argument labels.<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
