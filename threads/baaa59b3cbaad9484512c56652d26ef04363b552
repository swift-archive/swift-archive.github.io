<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bab03b11d4cd60804cf4a6ba68589430?s=50"></div><header><strong>Proposal: change infix operator attributes syntax to be more consistent with the rest of the language</strong> from <string>Kevin Lundberg</string> &lt;kevin at klundberg.com&gt;<p>March  5, 2016 at 11:00:00pm</p></header><div class="content"><p>Ever since Swift 1.0 I&#39;ve found the infix operator attribute syntax strange:<br></p><p>infix operator &lt;&gt; { associativity left precedence 100 }<br></p><p>The value of the attribute has no visual cue that ties it to the name of<br>the attribute. One could arguably read left as its own attribute name<br>rather than the value set to the associativity attribute, or could read<br>the wrong pair as one attribute, like &quot;left precedence&quot;.<br></p><p>In the spirit of Erica Sadun&#39;s recent proposal to make attribute syntax<br>uniform by using : over =, I&#39;d like to see operator declaration syntax<br>follow a similar structure:<br></p><p>infix operator &lt;&gt; { associativity: left, precedence: 100 }<br></p><p>In my opinion, this simple change makes operator attributes much more<br>readable. This also should help future proof readability in operator<br>attributes if operators gain more of them in the future. A longer list<br>of attributes with the current syntax would become much harder to read.<br></p><p>The only (minor) sticking point I&#39;ve noticed is the assignment attribute<br>in the standard library:<br>https://github.com/apple/swift/blob/12b793c87f160a0f18bb8762e425174205c5d80a/stdlib/public/core/Policy.swift#L427.<br>This attribute isn&#39;t documented in TSPL and it has no value associated<br>with it. Since user-defined operators are not meant to be assignment<br>operators, it may not matter much how these are represented, but<br>ostensibly some user-defined attribute that has no value may come about<br>in the future. We could make these attributes simply look like this:<br></p><p>infixoperator+={ associativity:right,precedence: 90,assignment }<br></p><p>or perhaps we could make it so that this attribute must now have a<br>Boolean value that defaults to false if it isn&#39;t provided:<br></p><p>infixoperator+={ associativity:right,precedence: 90,assignment: true }<br></p><p>Any thoughts?<br></p><p>- Kevin<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>Proposal: change infix operator attributes syntax to be more consistent with the rest of the language</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>March  5, 2016 at 10:00:00pm</p></header><div class="content"><p>I think there&#39;s something to this, but I&#39;d prefer it look a bit more like what happened in SE-40 (https://github.com/apple/swift-evolution/blob/714dd43863775705cebc77574287ab0974bfa615/proposals/0040-attributecolons.md) so &#39;associativity&#39; and &#39;precedence&#39; are made to look more compiler-construct-y.<br></p><p>infix operator &lt;&gt; { <br>  @associativity(left)<br>  @precedence(100)<br>}<br></p><p>As for assignment operators, if memory serves syntax for them was quickly deprecated because they can be subsumed by making the LHS of an infix operator inout.  I&#39;m not sure there needs to be much more at the declaration site than that.<br></p><p>~Robert Widmann<br></p><p>2016/03/05 21:54、Kevin Lundberg via swift-evolution &lt;swift-evolution at swift.org&gt; のメッセージ:<br></p><p>&gt; Ever since Swift 1.0 I&#39;ve found the infix operator attribute syntax strange:<br>&gt; <br>&gt; infix operator &lt;&gt; { associativity left precedence 100 }<br>&gt; <br>&gt; The value of the attribute has no visual cue that ties it to the name of<br>&gt; the attribute. One could arguably read left as its own attribute name<br>&gt; rather than the value set to the associativity attribute, or could read<br>&gt; the wrong pair as one attribute, like &quot;left precedence&quot;.<br>&gt; <br>&gt; In the spirit of Erica Sadun&#39;s recent proposal to make attribute syntax<br>&gt; uniform by using : over =, I&#39;d like to see operator declaration syntax<br>&gt; follow a similar structure:<br>&gt; <br>&gt; infix operator &lt;&gt; { associativity: left, precedence: 100 }<br>&gt; <br>&gt; In my opinion, this simple change makes operator attributes much more<br>&gt; readable. This also should help future proof readability in operator<br>&gt; attributes if operators gain more of them in the future. A longer list<br>&gt; of attributes with the current syntax would become much harder to read.<br>&gt; <br>&gt; The only (minor) sticking point I&#39;ve noticed is the assignment attribute<br>&gt; in the standard library:<br>&gt; https://github.com/apple/swift/blob/12b793c87f160a0f18bb8762e425174205c5d80a/stdlib/public/core/Policy.swift#L427.<br>&gt; This attribute isn&#39;t documented in TSPL and it has no value associated<br>&gt; with it. Since user-defined operators are not meant to be assignment<br>&gt; operators, it may not matter much how these are represented, but<br>&gt; ostensibly some user-defined attribute that has no value may come about<br>&gt; in the future. We could make these attributes simply look like this:<br>&gt; <br>&gt; infixoperator+={ associativity:right,precedence: 90,assignment }<br>&gt; <br>&gt; or perhaps we could make it so that this attribute must now have a<br>&gt; Boolean value that defaults to false if it isn&#39;t provided:<br>&gt; <br>&gt; infixoperator+={ associativity:right,precedence: 90,assignment: true }<br>&gt; <br>&gt; Any thoughts?<br>&gt; <br>&gt; - Kevin<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160305/43c5c7ea/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bab03b11d4cd60804cf4a6ba68589430?s=50"></div><header><strong>Proposal: change infix operator attributes syntax to be more consistent with the rest of the language</strong> from <string>Kevin Lundberg</string> &lt;kevin at klundberg.com&gt;<p>March  6, 2016 at 02:00:00pm</p></header><div class="content"><p>On 3/6/2016 12:21 AM, Developer wrote:<br>&gt; I think there&#39;s something to this, but I&#39;d prefer it look a bit more<br>&gt; like what happened in SE-40<br>&gt; (https://github.com/apple/swift-evolution/blob/714dd43863775705cebc77574287ab0974bfa615/proposals/0040-attributecolons.md)<br>&gt; so &#39;associativity&#39; and &#39;precedence&#39; are made to look more<br>&gt; compiler-construct-y.<br>&gt;<br>&gt; infix operator &lt;&gt; { <br>&gt;   @associativity(left)<br>&gt;   @precedence(100)<br>&gt; }<br>I&#39;m not opposed to something like this either, however having actual<br>attributes inside curly braces here looks strange. I don&#39;t think<br>attributes are used in this way anywhere else.<br>&gt; As for assignment operators, if memory serves syntax for them was<br>&gt; quickly deprecated because they can be subsumed by making the LHS of<br>&gt; an infix operator inout.  I&#39;m not sure there needs to be much more at<br>&gt; the declaration site than that.<br>If this is the case, then removing assignment from the declaration of<br>all the stdlib operators could also be part of this proposal, or broken<br>out into a separate one if necessary.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160306/6f57ec09/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>Proposal: change infix operator attributes syntax to be more consistent with the rest of the language</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>March  5, 2016 at 09:00:00pm</p></header><div class="content"><p>+1 for the discussion, I was just noticing that myself and was thinking along similar lines. <br></p><p><br>&gt; On Mar 5, 2016, at 8:54 PM, Kevin Lundberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Ever since Swift 1.0 I&#39;ve found the infix operator attribute syntax strange:<br>&gt; <br>&gt; infix operator &lt;&gt; { associativity left precedence 100 }<br>&gt; <br>&gt; The value of the attribute has no visual cue that ties it to the name of<br>&gt; the attribute. One could arguably read left as its own attribute name<br>&gt; rather than the value set to the associativity attribute, or could read<br>&gt; the wrong pair as one attribute, like &quot;left precedence&quot;.<br>&gt; <br>&gt; In the spirit of Erica Sadun&#39;s recent proposal to make attribute syntax<br>&gt; uniform by using : over =, I&#39;d like to see operator declaration syntax<br>&gt; follow a similar structure:<br>&gt; <br>&gt; infix operator &lt;&gt; { associativity: left, precedence: 100 }<br>&gt; <br>&gt; In my opinion, this simple change makes operator attributes much more<br>&gt; readable. This also should help future proof readability in operator<br>&gt; attributes if operators gain more of them in the future. A longer list<br>&gt; of attributes with the current syntax would become much harder to read.<br>&gt; <br>&gt; The only (minor) sticking point I&#39;ve noticed is the assignment attribute<br>&gt; in the standard library:<br>&gt; https://github.com/apple/swift/blob/12b793c87f160a0f18bb8762e425174205c5d80a/stdlib/public/core/Policy.swift#L427.<br>&gt; This attribute isn&#39;t documented in TSPL and it has no value associated<br>&gt; with it. Since user-defined operators are not meant to be assignment<br>&gt; operators, it may not matter much how these are represented, but<br>&gt; ostensibly some user-defined attribute that has no value may come about<br>&gt; in the future. We could make these attributes simply look like this:<br>&gt; <br>&gt; infixoperator+={ associativity:right,precedence: 90,assignment }<br>&gt; <br>&gt; or perhaps we could make it so that this attribute must now have a<br>&gt; Boolean value that defaults to false if it isn&#39;t provided:<br>&gt; <br>&gt; infixoperator+={ associativity:right,precedence: 90,assignment: true }<br>&gt; <br>&gt; Any thoughts?<br>&gt; <br>&gt; - Kevin<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Proposal: change infix operator attributes syntax to be more consistent with the rest of the language</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>March  5, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; infix operator += { associativity: right, precedence: 90, assignment: true }<br></p><p>I&#39;m a little uncomfortable putting what looks for all the world like a parameter list into curly brackets; it just doesn&#39;t feel in step with other declarations. (To be fair, I wasn&#39;t comfortable with the old way, either.)<br></p><p>Here&#39;s what I suggest. Usually, a bunch of parameters modifying a declaration would go in a parenthesized list after the particular keyword they modified, and in this case, `associativity` and `precedence` (and probably `assignment` too, though I don&#39;t know for sure since it&#39;s not documented) are only valid on an infix operator. That would suggest:<br></p><p>	infix(associativity: right, precedence: 90, assignment) operator +=<br>	prefix operator -<br>	postfix operator !<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Proposal: change infix operator attributes syntax to be more consistent with the rest of the language</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>March  5, 2016 at 10:00:00pm</p></header><div class="content"><p>I like this approach too BUT my only concern is how long it takes to get to the actual name. <br>I know I probably hate this already (give me time to sleep on it) and I&#39;m not wedded to the <br>approach, but I&#39;d like to see the operator move left for readability so that it&#39;s more like a <br>func declaration:<br></p><p>operator +=(infix, associativity: right, precedence: 90, assignment) <br>operator -(prefix)<br>operator !(postfix)<br></p><p>-- E<br></p><p>&gt; On Mar 5, 2016, at 10:24 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; infix operator += { associativity: right, precedence: 90, assignment: true }<br>&gt; <br>&gt; I&#39;m a little uncomfortable putting what looks for all the world like a parameter list into curly brackets; it just doesn&#39;t feel in step with other declarations. (To be fair, I wasn&#39;t comfortable with the old way, either.)<br>&gt; <br>&gt; Here&#39;s what I suggest. Usually, a bunch of parameters modifying a declaration would go in a parenthesized list after the particular keyword they modified, and in this case, `associativity` and `precedence` (and probably `assignment` too, though I don&#39;t know for sure since it&#39;s not documented) are only valid on an infix operator. That would suggest:<br>&gt; <br>&gt; 	infix(associativity: right, precedence: 90, assignment) operator +=<br>&gt; 	prefix operator -<br>&gt; 	postfix operator !<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160305/7fe63914/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>Proposal: change infix operator attributes syntax to be more consistent with the rest of the language</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>March  6, 2016 at 12:00:00am</p></header><div class="content"><p>I&#39;m not completely sold on the proposed change but, if we were to do<br>something like this, I suggest we include `fixity` as a parameter and come<br>up with something for `assignment` (`true` in my example is admittedly<br>suboptimal ). Those `operator -(prefix) seems strange to me.<br></p><p>```<br>operator +=(fixity: infix, associativity: right, precedence: 90,<br>assignment: true)<br>operator -(fixity: prefix)<br>operator !(fixity: postfix)<br>```<br></p><p>On Sun, Mar 6, 2016 at 12:35 AM, Erica Sadun via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I like this approach too BUT my only concern is how long it takes to get<br>&gt; to the actual name.<br>&gt; I know I probably hate this already (give me time to sleep on it) and I&#39;m<br>&gt; not wedded to the<br>&gt; approach, but I&#39;d like to see the operator move left for readability so<br>&gt; that it&#39;s more like a<br>&gt; func declaration:<br>&gt;<br>&gt; operator +=(infix, associativity: right, precedence: 90, assignment)<br>&gt; operator -(prefix)<br>&gt; operator !(postfix)<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt; On Mar 5, 2016, at 10:24 PM, Brent Royal-Gordon via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; infix operator += { associativity: right, precedence: 90, assignment: true<br>&gt; }<br>&gt;<br>&gt;<br>&gt; I&#39;m a little uncomfortable putting what looks for all the world like a<br>&gt; parameter list into curly brackets; it just doesn&#39;t feel in step with other<br>&gt; declarations. (To be fair, I wasn&#39;t comfortable with the old way, either.)<br>&gt;<br>&gt; Here&#39;s what I suggest. Usually, a bunch of parameters modifying a<br>&gt; declaration would go in a parenthesized list after the particular keyword<br>&gt; they modified, and in this case, `associativity` and `precedence` (and<br>&gt; probably `assignment` too, though I don&#39;t know for sure since it&#39;s not<br>&gt; documented) are only valid on an infix operator. That would suggest:<br>&gt;<br>&gt; infix(associativity: right, precedence: 90, assignment) operator +=<br>&gt; prefix operator -<br>&gt; postfix operator !<br>&gt;<br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160306/a464b45b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bab03b11d4cd60804cf4a6ba68589430?s=50"></div><header><strong>Proposal: change infix operator attributes syntax to be more consistent with the rest of the language</strong> from <string>Kevin Lundberg</string> &lt;kevin at klundberg.com&gt;<p>March  6, 2016 at 02:00:00pm</p></header><div class="content"><p>Personally I like the current way of declaring an operator&#39;s expected<br>&quot;fixity&quot; as it reads much more naturally:<br></p><p>infix operator += // reads &quot;an infix operator named +=&quot;<br></p><p>when compared to<br></p><p>operator += (infix)<br>// or<br>operator += (fixity: infix) // reads as &quot;an operator named += which has<br>a fixity of infix&quot;<br></p><p>Additionally, (pre|post|in)fix-ness of an operator has a much greater<br>impact on how the operator is used when compared to<br>associativity/precedence, and if that was designated as a behavioral<br>modification parameter like associativity/precedence, then it might lead<br>one to think that they could just alter the fixity and leave the other<br>attributes alone even though those attributes are only valid for one of<br>those fixity types:<br></p><p>operator +=(fixity: prefix, associativity: right, precedence: 90,<br>assignment: true) // compiler error!<br></p><p>I don&#39;t like having the value of one parameter in a list control whether<br>other parameters are even allowed to be present, since that as far as<br>I&#39;m aware isn&#39;t the case in any other aspect of Swift.<br></p><p>On 3/6/2016 12:51 AM, T.J. Usiyan via swift-evolution wrote:<br>&gt; I&#39;m not completely sold on the proposed change but, if we were to do<br>&gt; something like this, I suggest we include `fixity` as a parameter and<br>&gt; come up with something for `assignment` (`true` in my example is<br>&gt; admittedly suboptimal ). Those `operator -(prefix) seems strange to me.<br>&gt;<br>&gt; ```<br>&gt; operator +=(fixity: infix, associativity: right, precedence: 90,<br>&gt; assignment: true) <br>&gt; operator -(fixity: prefix)<br>&gt; operator !(fixity: postfix)<br>&gt; ```<br>&gt;<br>&gt; On Sun, Mar 6, 2016 at 12:35 AM, Erica Sadun via swift-evolution<br>&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;<br>&gt;     I like this approach too BUT my only concern is how long it takes<br>&gt;     to get to the actual name. <br>&gt;     I know I probably hate this already (give me time to sleep on it)<br>&gt;     and I&#39;m not wedded to the <br>&gt;     approach, but I&#39;d like to see the operator move left for<br>&gt;     readability so that it&#39;s more like a <br>&gt;     func declaration:<br>&gt;<br>&gt;     operator +=(infix, associativity: right, precedence: 90, assignment) <br>&gt;     operator -(prefix)<br>&gt;     operator !(postfix)<br>&gt;<br>&gt;     -- E<br>&gt;<br>&gt;&gt;     On Mar 5, 2016, at 10:24 PM, Brent Royal-Gordon via<br>&gt;&gt;     swift-evolution &lt;swift-evolution at swift.org<br>&gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt;     infix operator += { associativity: right, precedence: 90,<br>&gt;&gt;&gt;     assignment: true }<br>&gt;&gt;<br>&gt;&gt;     I&#39;m a little uncomfortable putting what looks for all the world<br>&gt;&gt;     like a parameter list into curly brackets; it just doesn&#39;t feel<br>&gt;&gt;     in step with other declarations. (To be fair, I wasn&#39;t<br>&gt;&gt;     comfortable with the old way, either.)<br>&gt;&gt;<br>&gt;&gt;     Here&#39;s what I suggest. Usually, a bunch of parameters modifying a<br>&gt;&gt;     declaration would go in a parenthesized list after the particular<br>&gt;&gt;     keyword they modified, and in this case, `associativity` and<br>&gt;&gt;     `precedence` (and probably `assignment` too, though I don&#39;t know<br>&gt;&gt;     for sure since it&#39;s not documented) are only valid on an infix<br>&gt;&gt;     operator. That would suggest:<br>&gt;&gt;<br>&gt;&gt;     infix(associativity: right, precedence: 90, assignment) operator +=<br>&gt;&gt;     prefix operator -<br>&gt;&gt;     postfix operator !<br>&gt;&gt;<br>&gt;&gt;     -- <br>&gt;&gt;     Brent Royal-Gordon<br>&gt;&gt;     Architechies<br>&gt;&gt;<br>&gt;&gt;     _______________________________________________<br>&gt;&gt;     swift-evolution mailing list<br>&gt;&gt;     swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;     _______________________________________________<br>&gt;     swift-evolution mailing list<br>&gt;     swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160306/0b87ffec/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>Proposal: change infix operator attributes syntax to be more consistent with the rest of the language</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>March  6, 2016 at 10:00:00pm</p></header><div class="content"><p>I agree “infix operator” reads more naturally, but I find it a bit strange to split operator configuration into fixity prefix and other parameters in curly braces/parentheses.<br></p><p>— Radek<br></p><p>&gt; On 06 Mar 2016, at 20:46, Kevin Lundberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Personally I like the current way of declaring an operator&#39;s expected &quot;fixity&quot; as it reads much more naturally:<br>&gt; <br>&gt; infix operator += // reads &quot;an infix operator named +=&quot;<br>&gt; <br>&gt; when compared to <br>&gt; <br>&gt; operator += (infix) <br>&gt; // or<br>&gt; operator += (fixity: infix) // reads as &quot;an operator named += which has a fixity of infix&quot;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160306/05a8d20a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bab03b11d4cd60804cf4a6ba68589430?s=50"></div><header><strong>Proposal: change infix operator attributes syntax to be more consistent with the rest of the language</strong> from <string>Kevin Lundberg</string> &lt;kevin at klundberg.com&gt;<p>March  7, 2016 at 08:00:00pm</p></header><div class="content"><p>If you think of modelling operator behavior representations like an<br>enum, then fixity naturally feels different compared to the other<br>behavioral parameters:<br></p><p>enum OpBehavior {<br>  case prefix<br>  case postfix<br>  case infix(associativity: OpAssociativity, precedence: UInt8)<br>}<br></p><p>enum OpAssociativity { case left, right, none }<br></p><p>The behavioral parameters only apply to infix; making them look like<br>they could apply to anything by making them syntactic siblings to fixity<br>may lead one to think they could all be applied everywhere.<br></p><p>What about a modification to what Erica suggested?:<br></p><p>operator += infix(associativity: left, precedence: 90, assignment) //<br>assuming that assignment needs to stay around for now<br></p><p><br>On 3/6/2016 4:55 PM, Radosław Pietruszewski wrote:<br>&gt; I agree “infix operator” reads more naturally, but I find it a bit<br>&gt; strange to split operator configuration into fixity prefix and other<br>&gt; parameters in curly braces/parentheses.<br>&gt;<br>&gt; — Radek<br>&gt;<br>&gt;&gt; On 06 Mar 2016, at 20:46, Kevin Lundberg via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Personally I like the current way of declaring an operator&#39;s expected<br>&gt;&gt; &quot;fixity&quot; as it reads much more naturally:<br>&gt;&gt;<br>&gt;&gt; infix operator += // reads &quot;an infix operator named +=&quot;<br>&gt;&gt;<br>&gt;&gt; when compared to <br>&gt;&gt;<br>&gt;&gt; operator += (infix) <br>&gt;&gt; // or<br>&gt;&gt; operator += (fixity: infix) // reads as &quot;an operator named += which<br>&gt;&gt; has a fixity of infix&quot;<br>&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160307/f1b6748c/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Proposal: change infix operator attributes syntax to be more consistent with the rest of the language</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>March  5, 2016 at 10:00:00pm</p></header><div class="content"><p>Personally, I really like this update.<br></p><p>-- Erica<br></p><p>&gt; On Mar 5, 2016, at 9:54 PM, Kevin Lundberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Ever since Swift 1.0 I&#39;ve found the infix operator attribute syntax strange:<br>&gt; <br>&gt; infix operator &lt;&gt; { associativity left precedence 100 }<br>&gt; <br>&gt; <br>&gt; infix operator &lt;&gt; { associativity: left, precedence: 100 }<br>&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>Proposal: change infix operator attributes syntax to be more consistent with the rest of the language</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>March  6, 2016 at 08:00:00pm</p></header><div class="content"><p>An improvement, but still seems strange to me to use the curly braces with argument-like syntax here. I don’t think there’s another instance of a syntax like this in Swift.<br></p><p>I’d be leaning more towards something like:<br></p><p>infix operator &lt;&gt; (associativity: left, precedence: 100)<br></p><p>or:<br></p><p>operator &lt;&gt; (infix, associativity: left, precedence: 100)<br></p><p>or even:<br></p><p>#operator &lt;&gt; (infix, associativity: left, precedence: 100)<br></p><p>to save up the “operator” keyword<br></p><p>— Radek<br></p><p>&gt; On 06 Mar 2016, at 05:54, Kevin Lundberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Ever since Swift 1.0 I&#39;ve found the infix operator attribute syntax strange:<br>&gt; <br>&gt; infix operator &lt;&gt; { associativity left precedence 100 }<br>&gt; <br>&gt; The value of the attribute has no visual cue that ties it to the name of<br>&gt; the attribute. One could arguably read left as its own attribute name<br>&gt; rather than the value set to the associativity attribute, or could read<br>&gt; the wrong pair as one attribute, like &quot;left precedence&quot;.<br>&gt; <br>&gt; In the spirit of Erica Sadun&#39;s recent proposal to make attribute syntax<br>&gt; uniform by using : over =, I&#39;d like to see operator declaration syntax<br>&gt; follow a similar structure:<br>&gt; <br>&gt; infix operator &lt;&gt; { associativity: left, precedence: 100 }<br>&gt; <br>&gt; In my opinion, this simple change makes operator attributes much more<br>&gt; readable. This also should help future proof readability in operator<br>&gt; attributes if operators gain more of them in the future. A longer list<br>&gt; of attributes with the current syntax would become much harder to read.<br>&gt; <br>&gt; The only (minor) sticking point I&#39;ve noticed is the assignment attribute<br>&gt; in the standard library:<br>&gt; https://github.com/apple/swift/blob/12b793c87f160a0f18bb8762e425174205c5d80a/stdlib/public/core/Policy.swift#L427.<br>&gt; This attribute isn&#39;t documented in TSPL and it has no value associated<br>&gt; with it. Since user-defined operators are not meant to be assignment<br>&gt; operators, it may not matter much how these are represented, but<br>&gt; ostensibly some user-defined attribute that has no value may come about<br>&gt; in the future. We could make these attributes simply look like this:<br>&gt; <br>&gt; infixoperator+={ associativity:right,precedence: 90,assignment }<br>&gt; <br>&gt; or perhaps we could make it so that this attribute must now have a<br>&gt; Boolean value that defaults to false if it isn&#39;t provided:<br>&gt; <br>&gt; infixoperator+={ associativity:right,precedence: 90,assignment: true }<br>&gt; <br>&gt; Any thoughts?<br>&gt; <br>&gt; - Kevin<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bab03b11d4cd60804cf4a6ba68589430?s=50"></div><header><strong>Proposal: change infix operator attributes syntax to be more consistent with the rest of the language</strong> from <string>Kevin Lundberg</string> &lt;kevin at klundberg.com&gt;<p>March  6, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; An improvement, but still seems strange to me to use the curly braces with argument-like syntax here. I don’t think there’s another instance of a syntax like this in Swift.<br>Absolutely, I feel the same way. Using parentheses does feel more<br>natural in this case.<br></p><p>&gt;<br>&gt; I’d be leaning more towards something like:<br>&gt;<br>&gt; infix operator &lt;&gt; (associativity: left, precedence: 100)<br>&gt;<br>&gt; or:<br>&gt;<br>&gt; operator &lt;&gt; (infix, associativity: left, precedence: 100)<br>&gt;<br>&gt; or even:<br>&gt;<br>&gt; #operator &lt;&gt; (infix, associativity: left, precedence: 100)<br>&gt;<br>&gt; to save up the “operator” keyword<br>I prefer the first option myself (my justification is in another reply<br>in this thread). Since operator is already a claimed keyword, I wonder<br>if there&#39;s any pressing need to relinquish it.<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Proposal: change infix operator attributes syntax to be more consistent with the rest of the language</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>March  7, 2016 at 06:00:00pm</p></header><div class="content"><p>IMO, simply repainting the bikeshed here doesn&#39;t carry much value, and since operators are purely compile-time syntax sugar, I don&#39;t think this is a priority to change for Swift 3.0. I see a couple deeper problems with how we model operators that deserve consideration for a deeper redesign, should you (or anyone else) dare to take them on. Coming up with a good solution to these problems might increase the value add here. For one, modeling relative precedence using a global integer table is bad and opaque, and not every operator makes sense to compose with every other. I think it would make more sense for operators to declare their precedence explicitly relative to the other operators they&#39;re intended to compose with. This would make operator declarations more self-documenting, operators more modular, and would also naturally give us the ability to raise errors for nonsensical operator combinations (similar to how C and C++ compilers complain about commonly-misunderstood operator combinations). Second, we don&#39;t handle operator conflicts between modules very well at all, giving essentially impossible-to-resolve conflict errors.<br></p><p>-Joe<br></p><p>&gt; On Mar 5, 2016, at 8:54 PM, Kevin Lundberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Ever since Swift 1.0 I&#39;ve found the infix operator attribute syntax strange:<br>&gt; <br>&gt; infix operator &lt;&gt; { associativity left precedence 100 }<br>&gt; <br>&gt; The value of the attribute has no visual cue that ties it to the name of<br>&gt; the attribute. One could arguably read left as its own attribute name<br>&gt; rather than the value set to the associativity attribute, or could read<br>&gt; the wrong pair as one attribute, like &quot;left precedence&quot;.<br>&gt; <br>&gt; In the spirit of Erica Sadun&#39;s recent proposal to make attribute syntax<br>&gt; uniform by using : over =, I&#39;d like to see operator declaration syntax<br>&gt; follow a similar structure:<br>&gt; <br>&gt; infix operator &lt;&gt; { associativity: left, precedence: 100 }<br>&gt; <br>&gt; In my opinion, this simple change makes operator attributes much more<br>&gt; readable. This also should help future proof readability in operator<br>&gt; attributes if operators gain more of them in the future. A longer list<br>&gt; of attributes with the current syntax would become much harder to read.<br>&gt; <br>&gt; The only (minor) sticking point I&#39;ve noticed is the assignment attribute<br>&gt; in the standard library:<br>&gt; https://github.com/apple/swift/blob/12b793c87f160a0f18bb8762e425174205c5d80a/stdlib/public/core/Policy.swift#L427.<br>&gt; This attribute isn&#39;t documented in TSPL and it has no value associated<br>&gt; with it. Since user-defined operators are not meant to be assignment<br>&gt; operators, it may not matter much how these are represented, but<br>&gt; ostensibly some user-defined attribute that has no value may come about<br>&gt; in the future. We could make these attributes simply look like this:<br>&gt; <br>&gt; infixoperator+={ associativity:right,precedence: 90,assignment }<br>&gt; <br>&gt; or perhaps we could make it so that this attribute must now have a<br>&gt; Boolean value that defaults to false if it isn&#39;t provided:<br>&gt; <br>&gt; infixoperator+={ associativity:right,precedence: 90,assignment: true }<br>&gt; <br>&gt; Any thoughts?<br>&gt; <br>&gt; - Kevin<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bab03b11d4cd60804cf4a6ba68589430?s=50"></div><header><strong>Proposal: change infix operator attributes syntax to be more consistent with the rest of the language</strong> from <string>Kevin Lundberg</string> &lt;kevin at klundberg.com&gt;<p>March  8, 2016 at 02:00:00pm</p></header><div class="content"><p>All good points, I&#39;ll hold off on this for now then. Would addressing the bigger picture issues you bring up be something feasible for Swift 3?<br></p><p>— Kevin<br></p><p><br>&gt; On Mar 7, 2016, at 9:08 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt; IMO, simply repainting the bikeshed here doesn&#39;t carry much value, and since operators are purely compile-time syntax sugar, I don&#39;t think this is a priority to change for Swift 3.0. I see a couple deeper problems with how we model operators that deserve consideration for a deeper redesign, should you (or anyone else) dare to take them on. Coming up with a good solution to these problems might increase the value add here. For one, modeling relative precedence using a global integer table is bad and opaque, and not every operator makes sense to compose with every other. I think it would make more sense for operators to declare their precedence explicitly relative to the other operators they&#39;re intended to compose with. This would make operator declarations more self-documenting, operators more modular, and would also naturally give us the ability to raise errors for nonsensical operator combinations (similar to how C and C++ compilers complain about commonly-misunderstood operator combinations). Second, we don&#39;t handle operator conflicts between modules very well at all, giving essentially impossible-to-resolve conflict errors.<br>&gt; <br>&gt; -Joe<br>&gt; <br>&gt;&gt; On Mar 5, 2016, at 8:54 PM, Kevin Lundberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Ever since Swift 1.0 I&#39;ve found the infix operator attribute syntax strange:<br>&gt;&gt; <br>&gt;&gt; infix operator &lt;&gt; { associativity left precedence 100 }<br>&gt;&gt; <br>&gt;&gt; The value of the attribute has no visual cue that ties it to the name of<br>&gt;&gt; the attribute. One could arguably read left as its own attribute name<br>&gt;&gt; rather than the value set to the associativity attribute, or could read<br>&gt;&gt; the wrong pair as one attribute, like &quot;left precedence&quot;.<br>&gt;&gt; <br>&gt;&gt; In the spirit of Erica Sadun&#39;s recent proposal to make attribute syntax<br>&gt;&gt; uniform by using : over =, I&#39;d like to see operator declaration syntax<br>&gt;&gt; follow a similar structure:<br>&gt;&gt; <br>&gt;&gt; infix operator &lt;&gt; { associativity: left, precedence: 100 }<br>&gt;&gt; <br>&gt;&gt; In my opinion, this simple change makes operator attributes much more<br>&gt;&gt; readable. This also should help future proof readability in operator<br>&gt;&gt; attributes if operators gain more of them in the future. A longer list<br>&gt;&gt; of attributes with the current syntax would become much harder to read.<br>&gt;&gt; <br>&gt;&gt; The only (minor) sticking point I&#39;ve noticed is the assignment attribute<br>&gt;&gt; in the standard library:<br>&gt;&gt; https://github.com/apple/swift/blob/12b793c87f160a0f18bb8762e425174205c5d80a/stdlib/public/core/Policy.swift#L427.<br>&gt;&gt; This attribute isn&#39;t documented in TSPL and it has no value associated<br>&gt;&gt; with it. Since user-defined operators are not meant to be assignment<br>&gt;&gt; operators, it may not matter much how these are represented, but<br>&gt;&gt; ostensibly some user-defined attribute that has no value may come about<br>&gt;&gt; in the future. We could make these attributes simply look like this:<br>&gt;&gt; <br>&gt;&gt; infixoperator+={ associativity:right,precedence: 90,assignment }<br>&gt;&gt; <br>&gt;&gt; or perhaps we could make it so that this attribute must now have a<br>&gt;&gt; Boolean value that defaults to false if it isn&#39;t provided:<br>&gt;&gt; <br>&gt;&gt; infixoperator+={ associativity:right,precedence: 90,assignment: true }<br>&gt;&gt; <br>&gt;&gt; Any thoughts?<br>&gt;&gt; <br>&gt;&gt; - Kevin<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
