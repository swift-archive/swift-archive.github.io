<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c56b98ce889653412aa0f3d6ab6a0263?s=50"></div><header><strong>[Draft Proposal] Refactor SILParser::parseSILInstruction</strong> from <string>Sergey Bolshedvorsky</string> &lt;sergey at bolshedvorsky.com&gt;<p>January 13, 2016 at 09:00:00pm</p></header><div class="content"><p>Hi everyone,<br></p><p>I’m interested in taking SR-340 &lt;https://bugs.swift.org/browse/SR-340&gt; issue:<br>&quot;parseSILInstruction is horrible and makes me cry every time I see it. It is a method that is ~1900 lines with a huge switch in it. We should refactor it into a visitor structure. In fact it is large enough that we should consider moving it into its own file if it is possible.&quot;<br></p><p>Here is the first draft of the myl idea, how it could be approached:<br></p><p>1. We will define an abstract method on ValueBase class:<br></p><p>    class ValueBase<br>    {<br>    public:<br>        virtual void parse(class SILParseInstruction*) = 0;<br>    };<br>    <br></p><p>2. Each of the SIL instruction classes will override this method and will provide the following implementation:<br>    <br>    class SILArgument: public ValueBase<br>    {<br>    public:<br>        /*virtual*/void parse(SILParseInstruction*);<br>    };<br>    void SILArgument::parse(SILParseInstruction *i) {<br>        i-&gt;parseInstruction(this);<br>    }<br>    <br>    class PartialApplyInst: public ValueBase<br>    {<br>    public:<br>        /*virtual*/void parse(SILParseInstruction*);<br>    };<br>    void PartialApplyInst::parse(SILParseInstruction *i)<br>    {<br>        i-&gt;parseInstruction(this);<br>    }<br>    <br></p><p>3. We will define an abstract class for the callbacks from each of the SIL instruction classes<br></p><p>    class SILParseInstruction<br>    {<br>    public:<br>        virtual void parseInstruction(SILArgument*) = 0;<br>        virtual void parseInstruction(PartialApplyInst*) = 0;<br>    };<br></p><p>4. SILParser will implement these callbacks with the actual handling operations for each instruction. <br>    <br>    class SILParser: public SILParseInstruction<br>    {<br>    public:<br>        /*virtual*/void parseInstruction(SILArgument *r)<br>        {<br>            // Parse StringLiteralInst instruction<br>        }<br>        /*virtual*/void parseInstruction(PartialApplyInst *b)<br>        {<br>            // Parse PartialApplyInst instruction<br>        }<br>    };<br>    <br>5. The huge switch statement will be replaced with a single call:<br>	Opcode-&gt;parse(this);<br></p><p>What are your thoughts?<br></p><p>Sergey<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160113/daf0caaf/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Draft Proposal] Refactor SILParser::parseSILInstruction</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>January 13, 2016 at 01:00:00pm</p></header><div class="content"><p>Sounds great, but SIL is an implementation detail of the compiler and not formally part of the language spec. swift-dev would be a better venue for this discussion.<br></p><p>-Joe<br></p><p>&gt; On Jan 13, 2016, at 1:07 PM, Sergey Bolshedvorsky via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi everyone,<br>&gt; <br>&gt; I’m interested in taking SR-340 &lt;https://bugs.swift.org/browse/SR-340&gt; issue:<br>&gt; &quot;parseSILInstruction is horrible and makes me cry every time I see it. It is a method that is ~1900 lines with a huge switch in it. We should refactor it into a visitor structure. In fact it is large enough that we should consider moving it into its own file if it is possible.&quot;<br>&gt; <br>&gt; Here is the first draft of the myl idea, how it could be approached:<br>&gt; <br>&gt; 1. We will define an abstract method on ValueBase class:<br>&gt; <br>&gt;     class ValueBase<br>&gt;     {<br>&gt;     public:<br>&gt;         virtual void parse(class SILParseInstruction*) = 0;<br>&gt;     };<br>&gt;     <br>&gt; <br>&gt; 2. Each of the SIL instruction classes will override this method and will provide the following implementation:<br>&gt;     <br>&gt;     class SILArgument: public ValueBase<br>&gt;     {<br>&gt;     public:<br>&gt;         /*virtual*/void parse(SILParseInstruction*);<br>&gt;     };<br>&gt;     void SILArgument::parse(SILParseInstruction *i) {<br>&gt;         i-&gt;parseInstruction(this);<br>&gt;     }<br>&gt;     <br>&gt;     class PartialApplyInst: public ValueBase<br>&gt;     {<br>&gt;     public:<br>&gt;         /*virtual*/void parse(SILParseInstruction*);<br>&gt;     };<br>&gt;     void PartialApplyInst::parse(SILParseInstruction *i)<br>&gt;     {<br>&gt;         i-&gt;parseInstruction(this);<br>&gt;     }<br>&gt;     <br>&gt; <br>&gt; 3. We will define an abstract class for the callbacks from each of the SIL instruction classes<br>&gt; <br>&gt;     class SILParseInstruction<br>&gt;     {<br>&gt;     public:<br>&gt;         virtual void parseInstruction(SILArgument*) = 0;<br>&gt;         virtual void parseInstruction(PartialApplyInst*) = 0;<br>&gt;     };<br>&gt; <br>&gt; 4. SILParser will implement these callbacks with the actual handling operations for each instruction. <br>&gt;     <br>&gt;     class SILParser: public SILParseInstruction<br>&gt;     {<br>&gt;     public:<br>&gt;         /*virtual*/void parseInstruction(SILArgument *r)<br>&gt;         {<br>&gt;             // Parse StringLiteralInst instruction<br>&gt;         }<br>&gt;         /*virtual*/void parseInstruction(PartialApplyInst *b)<br>&gt;         {<br>&gt;             // Parse PartialApplyInst instruction<br>&gt;         }<br>&gt;     };<br>&gt;     <br>&gt; 5. The huge switch statement will be replaced with a single call:<br>&gt; 	Opcode-&gt;parse(this);<br>&gt; <br>&gt; What are your thoughts?<br>&gt; <br>&gt; Sergey<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160113/8b3c54ab/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
