<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>function advancedBy() bugs</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>May 17, 2016 at 08:00:00pm</p></header><div class="content"><p>It seams that I encountered bugs in function advancedBy().<br></p><p>//: Playground - noun: a place where people can play<br></p><p><br>import Foundation<br></p><p><br>do {<br></p><p>    var str = &quot;abcdefg&quot;<br></p><p>    var range = str.startIndex..&lt;str.endIndex // 0..&lt;7<br></p><p>    str += &quot;hijklmn&quot;<br></p><p>    range.endIndex = str.endIndex // 0..&lt;14<br></p><p>    let index = range.startIndex.advancedBy(10)<br></p><p>    //fatal error: cannot increment endIndex<br></p><p>}<br></p><p><br>do {<br></p><p>    var str = &quot;abcdefg&quot;<br></p><p>    str += &quot;hijklmn&quot;<br></p><p><br></p><p>    var range = str.startIndex..&lt;str.endIndex // 0..&lt;14<br></p><p>    let index = range.startIndex.advancedBy(10)<br></p><p>    range // 0..&lt;14<br></p><p>}<br></p><p><br>do {<br></p><p>    var range = 0..&lt;7<br></p><p>    let index = range.startIndex.advancedBy(10)<br></p><p>    range // 0..&lt;7<br></p><p>}<br></p><p><br>There are three do blocks. All codes are similar.<br></p><p><br>First block and second block is the almost same. But I encounter an error<br>in the first block, saying &quot;fatal error: cannot increment endIndex&quot;. It<br>shouldn&#39;t appear as the endIndex of range is 14 instead 7.<br></p><p><br>Second block and third block both used function advancedBy, however, in the<br>second block, the method is from BidirectionalIndexType,<br></p><p><br>extension BidirectionalIndexType {<br></p><p>    @warn_unused_result<br></p><p>    public func advancedBy(n: Self.Distance) -&gt; Self<br></p><p>    @warn_unused_result<br></p><p>    public func advancedBy(n: Self.Distance, limit: Self) -&gt; Self<br></p><p>}<br></p><p><br>​in the ​third block, it is RandomAccessIndexType,<br></p><p><br>extension Int : RandomAccessIndexType {<br></p><p>    /// Returns the next consecutive value after `self`.<br></p><p>    ///<br></p><p>    /// - Requires: The next value is representable.<br></p><p>    public func successor() -&gt; Int<br></p><p>    /// Returns the previous consecutive value before `self`.<br></p><p>    ///<br></p><p>    /// - Requires: The previous value is representable.<br></p><p>    public func predecessor() -&gt; Int<br></p><p>    public func distanceTo(other: Int) -&gt; Distance<br></p><p>    public func advancedBy(n: Distance) -&gt; Int<br></p><p>}<br></p><p><br>​So the range in the third block after advancedBy is unchanged. It makes<br>sense here. But I think people may feel strange as one is a mutating<br>function and the other is not.<br></p><p>​Zh​aoxin<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160517/8a580460/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>function advancedBy() bugs</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>May 17, 2016 at 08:00:00pm</p></header><div class="content"><p>Xcode Version 7.3.1 (7D1014), swift 2.2 along with Xcode.<br></p><p>Zhaoxin<br></p><p>On Tue, May 17, 2016 at 8:46 PM, zh ao &lt;owenzx at gmail.com&gt; wrote:<br></p><p>&gt; It seams that I encountered bugs in function advancedBy().<br>&gt;<br>&gt; //: Playground - noun: a place where people can play<br>&gt;<br>&gt;<br>&gt; import Foundation<br>&gt;<br>&gt;<br>&gt; do {<br>&gt;<br>&gt;     var str = &quot;abcdefg&quot;<br>&gt;<br>&gt;     var range = str.startIndex..&lt;str.endIndex // 0..&lt;7<br>&gt;<br>&gt;     str += &quot;hijklmn&quot;<br>&gt;<br>&gt;     range.endIndex = str.endIndex // 0..&lt;14<br>&gt;<br>&gt;     let index = range.startIndex.advancedBy(10)<br>&gt;<br>&gt;     //fatal error: cannot increment endIndex<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt; do {<br>&gt;<br>&gt;     var str = &quot;abcdefg&quot;<br>&gt;<br>&gt;     str += &quot;hijklmn&quot;<br>&gt;<br>&gt;<br>&gt;<br>&gt;     var range = str.startIndex..&lt;str.endIndex // 0..&lt;14<br>&gt;<br>&gt;     let index = range.startIndex.advancedBy(10)<br>&gt;<br>&gt;     range // 0..&lt;14<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt; do {<br>&gt;<br>&gt;     var range = 0..&lt;7<br>&gt;<br>&gt;     let index = range.startIndex.advancedBy(10)<br>&gt;<br>&gt;     range // 0..&lt;7<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt; There are three do blocks. All codes are similar.<br>&gt;<br>&gt;<br>&gt; First block and second block is the almost same. But I encounter an error<br>&gt; in the first block, saying &quot;fatal error: cannot increment endIndex&quot;. It<br>&gt; shouldn&#39;t appear as the endIndex of range is 14 instead 7.<br>&gt;<br>&gt;<br>&gt; Second block and third block both used function advancedBy, however, in<br>&gt; the second block, the method is from BidirectionalIndexType,<br>&gt;<br>&gt;<br>&gt; extension BidirectionalIndexType {<br>&gt;<br>&gt;     @warn_unused_result<br>&gt;<br>&gt;     public func advancedBy(n: Self.Distance) -&gt; Self<br>&gt;<br>&gt;     @warn_unused_result<br>&gt;<br>&gt;     public func advancedBy(n: Self.Distance, limit: Self) -&gt; Self<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt; ​in the ​third block, it is RandomAccessIndexType,<br>&gt;<br>&gt;<br>&gt; extension Int : RandomAccessIndexType {<br>&gt;<br>&gt;     /// Returns the next consecutive value after `self`.<br>&gt;<br>&gt;     ///<br>&gt;<br>&gt;     /// - Requires: The next value is representable.<br>&gt;<br>&gt;     public func successor() -&gt; Int<br>&gt;<br>&gt;     /// Returns the previous consecutive value before `self`.<br>&gt;<br>&gt;     ///<br>&gt;<br>&gt;     /// - Requires: The previous value is representable.<br>&gt;<br>&gt;     public func predecessor() -&gt; Int<br>&gt;<br>&gt;     public func distanceTo(other: Int) -&gt; Distance<br>&gt;<br>&gt;     public func advancedBy(n: Distance) -&gt; Int<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt; ​So the range in the third block after advancedBy is unchanged. It makes<br>&gt; sense here. But I think people may feel strange as one is a mutating<br>&gt; function and the other is not.<br>&gt;<br>&gt; ​Zh​aoxin<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160517/c696a5f9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>function advancedBy() bugs</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>May 17, 2016 at 08:00:00pm</p></header><div class="content"><p>The second half on mutating is wrong. Please ignore that.<br></p><p>Zhaoxin<br></p><p>On Tue, May 17, 2016 at 8:47 PM, zh ao &lt;owenzx at gmail.com&gt; wrote:<br></p><p>&gt; Xcode Version 7.3.1 (7D1014), swift 2.2 along with Xcode.<br>&gt;<br>&gt; Zhaoxin<br>&gt;<br>&gt; On Tue, May 17, 2016 at 8:46 PM, zh ao &lt;owenzx at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; It seams that I encountered bugs in function advancedBy().<br>&gt;&gt;<br>&gt;&gt; //: Playground - noun: a place where people can play<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; import Foundation<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; do {<br>&gt;&gt;<br>&gt;&gt;     var str = &quot;abcdefg&quot;<br>&gt;&gt;<br>&gt;&gt;     var range = str.startIndex..&lt;str.endIndex // 0..&lt;7<br>&gt;&gt;<br>&gt;&gt;     str += &quot;hijklmn&quot;<br>&gt;&gt;<br>&gt;&gt;     range.endIndex = str.endIndex // 0..&lt;14<br>&gt;&gt;<br>&gt;&gt;     let index = range.startIndex.advancedBy(10)<br>&gt;&gt;<br>&gt;&gt;     //fatal error: cannot increment endIndex<br>&gt;&gt;<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; do {<br>&gt;&gt;<br>&gt;&gt;     var str = &quot;abcdefg&quot;<br>&gt;&gt;<br>&gt;&gt;     str += &quot;hijklmn&quot;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     var range = str.startIndex..&lt;str.endIndex // 0..&lt;14<br>&gt;&gt;<br>&gt;&gt;     let index = range.startIndex.advancedBy(10)<br>&gt;&gt;<br>&gt;&gt;     range // 0..&lt;14<br>&gt;&gt;<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; do {<br>&gt;&gt;<br>&gt;&gt;     var range = 0..&lt;7<br>&gt;&gt;<br>&gt;&gt;     let index = range.startIndex.advancedBy(10)<br>&gt;&gt;<br>&gt;&gt;     range // 0..&lt;7<br>&gt;&gt;<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; There are three do blocks. All codes are similar.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; First block and second block is the almost same. But I encounter an error<br>&gt;&gt; in the first block, saying &quot;fatal error: cannot increment endIndex&quot;. It<br>&gt;&gt; shouldn&#39;t appear as the endIndex of range is 14 instead 7.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Second block and third block both used function advancedBy, however, in<br>&gt;&gt; the second block, the method is from BidirectionalIndexType,<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; extension BidirectionalIndexType {<br>&gt;&gt;<br>&gt;&gt;     @warn_unused_result<br>&gt;&gt;<br>&gt;&gt;     public func advancedBy(n: Self.Distance) -&gt; Self<br>&gt;&gt;<br>&gt;&gt;     @warn_unused_result<br>&gt;&gt;<br>&gt;&gt;     public func advancedBy(n: Self.Distance, limit: Self) -&gt; Self<br>&gt;&gt;<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; ​in the ​third block, it is RandomAccessIndexType,<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; extension Int : RandomAccessIndexType {<br>&gt;&gt;<br>&gt;&gt;     /// Returns the next consecutive value after `self`.<br>&gt;&gt;<br>&gt;&gt;     ///<br>&gt;&gt;<br>&gt;&gt;     /// - Requires: The next value is representable.<br>&gt;&gt;<br>&gt;&gt;     public func successor() -&gt; Int<br>&gt;&gt;<br>&gt;&gt;     /// Returns the previous consecutive value before `self`.<br>&gt;&gt;<br>&gt;&gt;     ///<br>&gt;&gt;<br>&gt;&gt;     /// - Requires: The previous value is representable.<br>&gt;&gt;<br>&gt;&gt;     public func predecessor() -&gt; Int<br>&gt;&gt;<br>&gt;&gt;     public func distanceTo(other: Int) -&gt; Distance<br>&gt;&gt;<br>&gt;&gt;     public func advancedBy(n: Distance) -&gt; Int<br>&gt;&gt;<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; ​So the range in the third block after advancedBy is unchanged. It makes<br>&gt;&gt; sense here. But I think people may feel strange as one is a mutating<br>&gt;&gt; function and the other is not.<br>&gt;&gt;<br>&gt;&gt; ​Zh​aoxin<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160517/709353d9/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>function advancedBy() bugs</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>May 17, 2016 at 09:00:00am</p></header><div class="content"><p>On Tue, May 17, 2016 at 5:46 AM, zh ao via swift-users<br>&lt;swift-users at swift.org&gt; wrote:<br>&gt; It seams that I encountered bugs in function advancedBy().<br>&gt;<br>&gt; do {<br>&gt;     var str = &quot;abcdefg&quot;<br>&gt;     var range = str.startIndex..&lt;str.endIndex // 0..&lt;7<br>&gt;     str += &quot;hijklmn&quot;<br>&gt;     range.endIndex = str.endIndex // 0..&lt;14<br>&gt;     let index = range.startIndex.advancedBy(10)<br>&gt;     //fatal error: cannot increment endIndex<br>&gt; }<br></p><p>Hi,<br></p><p>Thank you for the report.  To me, this issue looks the same as<br>https://bugs.swift.org/browse/SR-1487.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>function advancedBy() bugs</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>May 18, 2016 at 10:00:00am</p></header><div class="content"><p>I just make a clearer example.<br></p><p>do {<br></p><p>    var str = &quot;abcdefg&quot;<br></p><p>    var str1 = str + &quot;hijklmn&quot;<br></p><p>    var range = str.startIndex..&lt;str1.endIndex<br></p><p>    range.startIndex = range.startIndex.advancedBy(10)<br></p><p>    //fatal error: cannot increment endIndex<br></p><p>}<br></p><p><br>It seams that range.startIndex internally contains a fault<br>endIndex(str.endIndex, it should be its own endIndex, range.endIndex),<br>which leads the issue.<br></p><p><br>Zhaoxin<br></p><p>On Wed, May 18, 2016 at 12:02 AM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt;<br>wrote:<br></p><p>&gt; On Tue, May 17, 2016 at 5:46 AM, zh ao via swift-users<br>&gt; &lt;swift-users at swift.org&gt; wrote:<br>&gt; &gt; It seams that I encountered bugs in function advancedBy().<br>&gt; &gt;<br>&gt; &gt; do {<br>&gt; &gt;     var str = &quot;abcdefg&quot;<br>&gt; &gt;     var range = str.startIndex..&lt;str.endIndex // 0..&lt;7<br>&gt; &gt;     str += &quot;hijklmn&quot;<br>&gt; &gt;     range.endIndex = str.endIndex // 0..&lt;14<br>&gt; &gt;     let index = range.startIndex.advancedBy(10)<br>&gt; &gt;     //fatal error: cannot increment endIndex<br>&gt; &gt; }<br>&gt;<br>&gt; Hi,<br>&gt;<br>&gt; Thank you for the report.  To me, this issue looks the same as<br>&gt; https://bugs.swift.org/browse/SR-1487.<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160518/7a7a9f30/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>function advancedBy() bugs</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>May 18, 2016 at 12:00:00pm</p></header><div class="content"><p>Work around:<br></p><p>do {<br></p><p>    var str = &quot;abcdefg&quot;<br></p><p>    var str1 = str + &quot;hijklmn&quot;<br></p><p>*    let startIndex =<br>str1.rangeOfComposedCharacterSequenceAtIndex(str.startIndex).startIndex*<br></p><p>*    var range = startIndex..&lt;str1.endIndex*<br></p><p>    range.startIndex = range.startIndex.advancedBy(10)<br></p><p>}<br></p><p><br>If you encounter this issue, you need to<br>use rangeOfComposedCharacterSequenceAtIndex to update to hidden endIndex.<br></p><p><br>do {<br></p><p>    var str = &quot;abcdefg&quot;<br></p><p>    var range = str.startIndex..&lt;str.endIndex // 0..&lt;7<br></p><p>    str += &quot;hijklmn&quot;<br></p><p>//    range.endIndex = str.endIndex // 0..&lt;14<br></p><p>    *range = str.**startIndex..&lt;str.endIndex*<br></p><p>    let index = range.startIndex.advancedBy(10)<br></p><p>}<br></p><p><br>Reassign the whole range instead of just set the endIndex.<br></p><p><br>Zhaoxin<br></p><p>On Wed, May 18, 2016 at 10:14 AM, zh ao &lt;owenzx at gmail.com&gt; wrote:<br></p><p>&gt; I just make a clearer example.<br>&gt;<br>&gt; do {<br>&gt;<br>&gt;     var str = &quot;abcdefg&quot;<br>&gt;<br>&gt;     var str1 = str + &quot;hijklmn&quot;<br>&gt;<br>&gt;     var range = str.startIndex..&lt;str1.endIndex<br>&gt;<br>&gt;     range.startIndex = range.startIndex.advancedBy(10)<br>&gt;<br>&gt;     //fatal error: cannot increment endIndex<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt; It seams that range.startIndex internally contains a fault<br>&gt; endIndex(str.endIndex, it should be its own endIndex, range.endIndex),<br>&gt; which leads the issue.<br>&gt;<br>&gt;<br>&gt; Zhaoxin<br>&gt;<br>&gt; On Wed, May 18, 2016 at 12:02 AM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; On Tue, May 17, 2016 at 5:46 AM, zh ao via swift-users<br>&gt;&gt; &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; &gt; It seams that I encountered bugs in function advancedBy().<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; do {<br>&gt;&gt; &gt;     var str = &quot;abcdefg&quot;<br>&gt;&gt; &gt;     var range = str.startIndex..&lt;str.endIndex // 0..&lt;7<br>&gt;&gt; &gt;     str += &quot;hijklmn&quot;<br>&gt;&gt; &gt;     range.endIndex = str.endIndex // 0..&lt;14<br>&gt;&gt; &gt;     let index = range.startIndex.advancedBy(10)<br>&gt;&gt; &gt;     //fatal error: cannot increment endIndex<br>&gt;&gt; &gt; }<br>&gt;&gt;<br>&gt;&gt; Hi,<br>&gt;&gt;<br>&gt;&gt; Thank you for the report.  To me, this issue looks the same as<br>&gt;&gt; https://bugs.swift.org/browse/SR-1487.<br>&gt;&gt;<br>&gt;&gt; Dmitri<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160518/52108f1a/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
