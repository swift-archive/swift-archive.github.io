<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/44b9c3e92a40313850fdbc2cb0abdef7?s=50"></div><header><strong>Reducing Array&lt;OptionSet&gt; to OptionSet</strong> from <string>Jon Shier</string> &lt;jon at jonshier.com&gt;<p>November  3, 2016 at 09:00:00pm</p></header><div class="content"><p>Swifters:<br>	I’m dealing with a JSON API where sets of options are returned as arrays of strings. Representing these as OptionSets seems ideal. I can decode the arrays of strings into an array of individual OptionSet values, but I’ve run into a dead end when trying generically reduce the array of OptionSets to a single OptionSet value. I’ve tried variety of ways of definition a Collection extension, even tried defining a global function, but I can’t seem to use the OptionSet sequence initializer or reduce itself (cannot invoke insert with argument of type (OptionSet) (or T)). Any guidance here? <br>	Here’s what I’ve tried:<br></p><p>extension Collection where Iterator.Element == OptionSet {<br>    <br>    func reduced() -&gt; Iterator.Element {<br>        return reduce(Iterator.Element()) {<br>            var newResult = $0<br>            newResult.insert($1)<br>            return newResult<br>        }<br>    }<br>    <br>}<br></p><p>extension Collection where Iterator.Element == OptionSet {<br>    <br>    func reduced&lt;T: OptionSet&gt;() -&gt; T {<br>        return reduce(T()) {<br>            var newResult = $0<br>            newResult.insert($1)<br>            return newResult<br>        }<br>    }<br>    <br>}<br></p><p><br>extension Collection where Iterator.Element == OptionSet {<br>    func reduced() -&gt; Iterator.Element {<br>        return Iterator.Element(self)<br>    }<br>}<br></p><p>func reduced&lt;T: OptionSet&gt;(_ options: [T]) -&gt; T {<br>    return options.reduce(T()) {<br>        var newResult = $0<br>        newResult.insert($1)<br>        <br>        return newResult<br>    }<br>}<br></p><p>Jon Shier<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Reducing Array&lt;OptionSet&gt; to OptionSet</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>November  3, 2016 at 07:00:00pm</p></header><div class="content"><p>Maybe something like this? Or you could just bitwise || individual sets. Or you could use a dictionary to lookup [string: rawValue]. etc.<br></p><p>public struct MyOptionSet: OptionSet {<br>    public static let one = MyOptionSet(rawValue: 1 &lt;&lt; 0)<br>    public static let two = MyOptionSet(rawValue: 1 &lt;&lt; 1)<br>    public static let three = MyOptionSet(rawValue: 1 &lt;&lt; 2)<br>    <br>    public var rawValue: Int { return _rawValue }<br>    public init(rawValue: Int) { self._rawValue = rawValue }<br>    private let _rawValue: Int<br>    <br>    private enum StringEnum: String { case one, two, three }<br>    public init(strings: [String]) {<br>        var set = MyOptionSet()<br>        strings.flatMap({ StringEnum(rawValue: $0) })<br>            .flatMap({ MyOptionSet(rawValue: 1 &lt;&lt; $0.hashValue) })<br>            .forEach { set.insert($0) }<br>        _rawValue = set.rawValue<br>    }<br>}<br></p><p>let stringArray: [String] = [&quot;one&quot;, &quot;three&quot;]<br>let stringOptions = MyOptionSet(strings: stringArray)<br>stringOptions.rawValue<br></p><p>&gt; On Nov 3, 2016, at 7:09 PM, Jon Shier via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Swifters:<br>&gt; 	I’m dealing with a JSON API where sets of options are returned as arrays of strings. Representing these as OptionSets seems ideal. I can decode the arrays of strings into an array of individual OptionSet values, but I’ve run into a dead end when trying generically reduce the array of OptionSets to a single OptionSet value. I’ve tried variety of ways of definition a Collection extension, even tried defining a global function, but I can’t seem to use the OptionSet sequence initializer or reduce itself (cannot invoke insert with argument of type (OptionSet) (or T)). Any guidance here? <br>&gt; 	Here’s what I’ve tried:<br>&gt; <br>&gt; extension Collection where Iterator.Element == OptionSet {<br>&gt; <br>&gt;    func reduced() -&gt; Iterator.Element {<br>&gt;        return reduce(Iterator.Element()) {<br>&gt;            var newResult = $0<br>&gt;            newResult.insert($1)<br>&gt;            return newResult<br>&gt;        }<br>&gt;    }<br>&gt; <br>&gt; }<br>&gt; <br>&gt; extension Collection where Iterator.Element == OptionSet {<br>&gt; <br>&gt;    func reduced&lt;T: OptionSet&gt;() -&gt; T {<br>&gt;        return reduce(T()) {<br>&gt;            var newResult = $0<br>&gt;            newResult.insert($1)<br>&gt;            return newResult<br>&gt;        }<br>&gt;    }<br>&gt; <br>&gt; }<br>&gt; <br>&gt; <br>&gt; extension Collection where Iterator.Element == OptionSet {<br>&gt;    func reduced() -&gt; Iterator.Element {<br>&gt;        return Iterator.Element(self)<br>&gt;    }<br>&gt; }<br>&gt; <br>&gt; func reduced&lt;T: OptionSet&gt;(_ options: [T]) -&gt; T {<br>&gt;    return options.reduce(T()) {<br>&gt;        var newResult = $0<br>&gt;        newResult.insert($1)<br>&gt; <br>&gt;        return newResult<br>&gt;    }<br>&gt; }<br>&gt; <br>&gt; Jon Shier<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161103/fdbcc4cf/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/44b9c3e92a40313850fdbc2cb0abdef7?s=50"></div><header><strong>Reducing Array&lt;OptionSet&gt; to OptionSet</strong> from <string>Jon Shier</string> &lt;jon at jonshier.com&gt;<p>November  3, 2016 at 09:00:00pm</p></header><div class="content"><p>Thanks Erica. I’ve been able to transform arrays of strings into arrays of my OptionSets using an enum approach like you describe. I was looking more for a generic approach that I could apply to all of the various OptionSets I have to decode from JSON. I suppose whether it’s from an array of strings or array of the OptionSet is less important, but getting to the array of the OptionSet itself is something I can already do. <br></p><p><br>Thanks,<br></p><p>Jon<br></p><p>&gt; On Nov 3, 2016, at 9:37 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; Maybe something like this? Or you could just bitwise || individual sets. Or you could use a dictionary to lookup [string: rawValue]. etc.<br>&gt; <br>&gt; public struct MyOptionSet: OptionSet {<br>&gt;     public static let one = MyOptionSet(rawValue: 1 &lt;&lt; 0)<br>&gt;     public static let two = MyOptionSet(rawValue: 1 &lt;&lt; 1)<br>&gt;     public static let three = MyOptionSet(rawValue: 1 &lt;&lt; 2)<br>&gt;     <br>&gt;     public var rawValue: Int { return _rawValue }<br>&gt;     public init(rawValue: Int) { self._rawValue = rawValue }<br>&gt;     private let _rawValue: Int<br>&gt;     <br>&gt;     private enum StringEnum: String { case one, two, three }<br>&gt;     public init(strings: [String]) {<br>&gt;         var set = MyOptionSet()<br>&gt;         strings.flatMap({ StringEnum(rawValue: $0) })<br>&gt;             .flatMap({ MyOptionSet(rawValue: 1 &lt;&lt; $0.hashValue) })<br>&gt;             .forEach { set.insert($0) }<br>&gt;         _rawValue = set.rawValue<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; let stringArray: [String] = [&quot;one&quot;, &quot;three&quot;]<br>&gt; let stringOptions = MyOptionSet(strings: stringArray)<br>&gt; stringOptions.rawValue<br>&gt; <br>&gt;&gt; On Nov 3, 2016, at 7:09 PM, Jon Shier via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Swifters:<br>&gt;&gt; 	I’m dealing with a JSON API where sets of options are returned as arrays of strings. Representing these as OptionSets seems ideal. I can decode the arrays of strings into an array of individual OptionSet values, but I’ve run into a dead end when trying generically reduce the array of OptionSets to a single OptionSet value. I’ve tried variety of ways of definition a Collection extension, even tried defining a global function, but I can’t seem to use the OptionSet sequence initializer or reduce itself (cannot invoke insert with argument of type (OptionSet) (or T)). Any guidance here? <br>&gt;&gt; 	Here’s what I’ve tried:<br>&gt;&gt; <br>&gt;&gt; extension Collection where Iterator.Element == OptionSet {<br>&gt;&gt; <br>&gt;&gt;    func reduced() -&gt; Iterator.Element {<br>&gt;&gt;        return reduce(Iterator.Element()) {<br>&gt;&gt;            var newResult = $0<br>&gt;&gt;            newResult.insert($1)<br>&gt;&gt;            return newResult<br>&gt;&gt;        }<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; extension Collection where Iterator.Element == OptionSet {<br>&gt;&gt; <br>&gt;&gt;    func reduced&lt;T: OptionSet&gt;() -&gt; T {<br>&gt;&gt;        return reduce(T()) {<br>&gt;&gt;            var newResult = $0<br>&gt;&gt;            newResult.insert($1)<br>&gt;&gt;            return newResult<br>&gt;&gt;        }<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; extension Collection where Iterator.Element == OptionSet {<br>&gt;&gt;    func reduced() -&gt; Iterator.Element {<br>&gt;&gt;        return Iterator.Element(self)<br>&gt;&gt;    }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; func reduced&lt;T: OptionSet&gt;(_ options: [T]) -&gt; T {<br>&gt;&gt;    return options.reduce(T()) {<br>&gt;&gt;        var newResult = $0<br>&gt;&gt;        newResult.insert($1)<br>&gt;&gt; <br>&gt;&gt;        return newResult<br>&gt;&gt;    }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Jon Shier<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161103/e51a8d4e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Reducing Array&lt;OptionSet&gt; to OptionSet</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>November  3, 2016 at 07:00:00pm</p></header><div class="content"><p>Like this?<br></p><p>let sets: [MyOptionSet] = [MyOptionSet(strings: [&quot;one&quot;]), MyOptionSet(strings: [&quot;two&quot;]), MyOptionSet(strings: [&quot;one&quot;, &quot;two&quot;])]<br>let unioned = sets.reduce(MyOptionSet(rawValue: 0)) {<br>    (result, set) in return result.union(set)<br>}<br>unioned.rawValue<br></p><p><br>&gt; On Nov 3, 2016, at 7:44 PM, Jon Shier &lt;jon at jonshier.com&gt; wrote:<br>&gt; <br>&gt; Thanks Erica. I’ve been able to transform arrays of strings into arrays of my OptionSets using an enum approach like you describe. I was looking more for a generic approach that I could apply to all of the various OptionSets I have to decode from JSON. I suppose whether it’s from an array of strings or array of the OptionSet is less important, but getting to the array of the OptionSet itself is something I can already do. <br>&gt; <br>&gt; <br>&gt; Thanks,<br>&gt; <br>&gt; Jon<br>&gt; <br>&gt;&gt; On Nov 3, 2016, at 9:37 PM, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Maybe something like this? Or you could just bitwise || individual sets. Or you could use a dictionary to lookup [string: rawValue]. etc.<br>&gt;&gt; <br>&gt;&gt; public struct MyOptionSet: OptionSet {<br>&gt;&gt;     public static let one = MyOptionSet(rawValue: 1 &lt;&lt; 0)<br>&gt;&gt;     public static let two = MyOptionSet(rawValue: 1 &lt;&lt; 1)<br>&gt;&gt;     public static let three = MyOptionSet(rawValue: 1 &lt;&lt; 2)<br>&gt;&gt;     <br>&gt;&gt;     public var rawValue: Int { return _rawValue }<br>&gt;&gt;     public init(rawValue: Int) { self._rawValue = rawValue }<br>&gt;&gt;     private let _rawValue: Int<br>&gt;&gt;     <br>&gt;&gt;     private enum StringEnum: String { case one, two, three }<br>&gt;&gt;     public init(strings: [String]) {<br>&gt;&gt;         var set = MyOptionSet()<br>&gt;&gt;         strings.flatMap({ StringEnum(rawValue: $0) })<br>&gt;&gt;             .flatMap({ MyOptionSet(rawValue: 1 &lt;&lt; $0.hashValue) })<br>&gt;&gt;             .forEach { set.insert($0) }<br>&gt;&gt;         _rawValue = set.rawValue<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; let stringArray: [String] = [&quot;one&quot;, &quot;three&quot;]<br>&gt;&gt; let stringOptions = MyOptionSet(strings: stringArray)<br>&gt;&gt; stringOptions.rawValue<br>&gt;&gt; <br>&gt;&gt;&gt; On Nov 3, 2016, at 7:09 PM, Jon Shier via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Swifters:<br>&gt;&gt;&gt; 	I’m dealing with a JSON API where sets of options are returned as arrays of strings. Representing these as OptionSets seems ideal. I can decode the arrays of strings into an array of individual OptionSet values, but I’ve run into a dead end when trying generically reduce the array of OptionSets to a single OptionSet value. I’ve tried variety of ways of definition a Collection extension, even tried defining a global function, but I can’t seem to use the OptionSet sequence initializer or reduce itself (cannot invoke insert with argument of type (OptionSet) (or T)). Any guidance here? <br>&gt;&gt;&gt; 	Here’s what I’ve tried:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; extension Collection where Iterator.Element == OptionSet {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    func reduced() -&gt; Iterator.Element {<br>&gt;&gt;&gt;        return reduce(Iterator.Element()) {<br>&gt;&gt;&gt;            var newResult = $0<br>&gt;&gt;&gt;            newResult.insert($1)<br>&gt;&gt;&gt;            return newResult<br>&gt;&gt;&gt;        }<br>&gt;&gt;&gt;    }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; extension Collection where Iterator.Element == OptionSet {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    func reduced&lt;T: OptionSet&gt;() -&gt; T {<br>&gt;&gt;&gt;        return reduce(T()) {<br>&gt;&gt;&gt;            var newResult = $0<br>&gt;&gt;&gt;            newResult.insert($1)<br>&gt;&gt;&gt;            return newResult<br>&gt;&gt;&gt;        }<br>&gt;&gt;&gt;    }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; extension Collection where Iterator.Element == OptionSet {<br>&gt;&gt;&gt;    func reduced() -&gt; Iterator.Element {<br>&gt;&gt;&gt;        return Iterator.Element(self)<br>&gt;&gt;&gt;    }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func reduced&lt;T: OptionSet&gt;(_ options: [T]) -&gt; T {<br>&gt;&gt;&gt;    return options.reduce(T()) {<br>&gt;&gt;&gt;        var newResult = $0<br>&gt;&gt;&gt;        newResult.insert($1)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;        return newResult<br>&gt;&gt;&gt;    }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jon Shier<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161103/5531773f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/44b9c3e92a40313850fdbc2cb0abdef7?s=50"></div><header><strong>Reducing Array&lt;OptionSet&gt; to OptionSet</strong> from <string>Jon Shier</string> &lt;jon at jonshier.com&gt;<p>November  3, 2016 at 09:00:00pm</p></header><div class="content"><p>Yes, just in a generic fashion. I don’t have so many OptionSets to decode that writing the typed reduce code over and over again is terrible, I just hoped there would be a way to write it generically. I just can’t seem to get the types to work out. I’m just missing the final step, generically reducing an array of OptionSet values to a single OptionSet value.<br></p><p><br>Jon<br></p><p>&gt; On Nov 3, 2016, at 9:48 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; Like this?<br>&gt; <br>&gt; let sets: [MyOptionSet] = [MyOptionSet(strings: [&quot;one&quot;]), MyOptionSet(strings: [&quot;two&quot;]), MyOptionSet(strings: [&quot;one&quot;, &quot;two&quot;])]<br>&gt; let unioned = sets.reduce(MyOptionSet(rawValue: 0)) {<br>&gt;     (result, set) in return result.union(set)<br>&gt; }<br>&gt; unioned.rawValue<br>&gt; <br>&gt; <br>&gt;&gt; On Nov 3, 2016, at 7:44 PM, Jon Shier &lt;jon at jonshier.com &lt;mailto:jon at jonshier.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Thanks Erica. I’ve been able to transform arrays of strings into arrays of my OptionSets using an enum approach like you describe. I was looking more for a generic approach that I could apply to all of the various OptionSets I have to decode from JSON. I suppose whether it’s from an array of strings or array of the OptionSet is less important, but getting to the array of the OptionSet itself is something I can already do. <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; <br>&gt;&gt; Jon<br>&gt;&gt; <br>&gt;&gt;&gt; On Nov 3, 2016, at 9:37 PM, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Maybe something like this? Or you could just bitwise || individual sets. Or you could use a dictionary to lookup [string: rawValue]. etc.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; public struct MyOptionSet: OptionSet {<br>&gt;&gt;&gt;     public static let one = MyOptionSet(rawValue: 1 &lt;&lt; 0)<br>&gt;&gt;&gt;     public static let two = MyOptionSet(rawValue: 1 &lt;&lt; 1)<br>&gt;&gt;&gt;     public static let three = MyOptionSet(rawValue: 1 &lt;&lt; 2)<br>&gt;&gt;&gt;     <br>&gt;&gt;&gt;     public var rawValue: Int { return _rawValue }<br>&gt;&gt;&gt;     public init(rawValue: Int) { self._rawValue = rawValue }<br>&gt;&gt;&gt;     private let _rawValue: Int<br>&gt;&gt;&gt;     <br>&gt;&gt;&gt;     private enum StringEnum: String { case one, two, three }<br>&gt;&gt;&gt;     public init(strings: [String]) {<br>&gt;&gt;&gt;         var set = MyOptionSet()<br>&gt;&gt;&gt;         strings.flatMap({ StringEnum(rawValue: $0) })<br>&gt;&gt;&gt;             .flatMap({ MyOptionSet(rawValue: 1 &lt;&lt; $0.hashValue) })<br>&gt;&gt;&gt;             .forEach { set.insert($0) }<br>&gt;&gt;&gt;         _rawValue = set.rawValue<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let stringArray: [String] = [&quot;one&quot;, &quot;three&quot;]<br>&gt;&gt;&gt; let stringOptions = MyOptionSet(strings: stringArray)<br>&gt;&gt;&gt; stringOptions.rawValue<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Nov 3, 2016, at 7:09 PM, Jon Shier via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Swifters:<br>&gt;&gt;&gt;&gt; 	I’m dealing with a JSON API where sets of options are returned as arrays of strings. Representing these as OptionSets seems ideal. I can decode the arrays of strings into an array of individual OptionSet values, but I’ve run into a dead end when trying generically reduce the array of OptionSets to a single OptionSet value. I’ve tried variety of ways of definition a Collection extension, even tried defining a global function, but I can’t seem to use the OptionSet sequence initializer or reduce itself (cannot invoke insert with argument of type (OptionSet) (or T)). Any guidance here? <br>&gt;&gt;&gt;&gt; 	Here’s what I’ve tried:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; extension Collection where Iterator.Element == OptionSet {<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;    func reduced() -&gt; Iterator.Element {<br>&gt;&gt;&gt;&gt;        return reduce(Iterator.Element()) {<br>&gt;&gt;&gt;&gt;            var newResult = $0<br>&gt;&gt;&gt;&gt;            newResult.insert($1)<br>&gt;&gt;&gt;&gt;            return newResult<br>&gt;&gt;&gt;&gt;        }<br>&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; extension Collection where Iterator.Element == OptionSet {<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;    func reduced&lt;T: OptionSet&gt;() -&gt; T {<br>&gt;&gt;&gt;&gt;        return reduce(T()) {<br>&gt;&gt;&gt;&gt;            var newResult = $0<br>&gt;&gt;&gt;&gt;            newResult.insert($1)<br>&gt;&gt;&gt;&gt;            return newResult<br>&gt;&gt;&gt;&gt;        }<br>&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; extension Collection where Iterator.Element == OptionSet {<br>&gt;&gt;&gt;&gt;    func reduced() -&gt; Iterator.Element {<br>&gt;&gt;&gt;&gt;        return Iterator.Element(self)<br>&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func reduced&lt;T: OptionSet&gt;(_ options: [T]) -&gt; T {<br>&gt;&gt;&gt;&gt;    return options.reduce(T()) {<br>&gt;&gt;&gt;&gt;        var newResult = $0<br>&gt;&gt;&gt;&gt;        newResult.insert($1)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;        return newResult<br>&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Jon Shier<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161103/3603fb54/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Reducing Array&lt;OptionSet&gt; to OptionSet</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>November  3, 2016 at 07:00:00pm</p></header><div class="content"><p>How about<br></p><p>func joinOptionSets&lt;OS: OptionSet&gt;(_ sets: [OS]) -&gt; OS {<br>    return sets.reduce([] as OS) {<br>        (result, set) in return result.union(set)<br>    }<br>}<br></p><p>joinOptionSets(sets).rawValue<br></p><p><br>-- E<br></p><p>&gt; On Nov 3, 2016, at 7:48 PM, Erica Sadun via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Like this?<br>&gt; <br>&gt; let sets: [MyOptionSet] = [MyOptionSet(strings: [&quot;one&quot;]), MyOptionSet(strings: [&quot;two&quot;]), MyOptionSet(strings: [&quot;one&quot;, &quot;two&quot;])]<br>&gt; let unioned = sets.reduce(MyOptionSet(rawValue: 0)) {<br>&gt;     (result, set) in return result.union(set)<br>&gt; }<br>&gt; unioned.rawValue<br>&gt; <br>&gt; <br>&gt;&gt; On Nov 3, 2016, at 7:44 PM, Jon Shier &lt;jon at jonshier.com &lt;mailto:jon at jonshier.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Thanks Erica. I’ve been able to transform arrays of strings into arrays of my OptionSets using an enum approach like you describe. I was looking more for a generic approach that I could apply to all of the various OptionSets I have to decode from JSON. I suppose whether it’s from an array of strings or array of the OptionSet is less important, but getting to the array of the OptionSet itself is something I can already do. <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; <br>&gt;&gt; Jon<br>&gt;&gt; <br>&gt;&gt;&gt; On Nov 3, 2016, at 9:37 PM, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Maybe something like this? Or you could just bitwise || individual sets. Or you could use a dictionary to lookup [string: rawValue]. etc.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; public struct MyOptionSet: OptionSet {<br>&gt;&gt;&gt;     public static let one = MyOptionSet(rawValue: 1 &lt;&lt; 0)<br>&gt;&gt;&gt;     public static let two = MyOptionSet(rawValue: 1 &lt;&lt; 1)<br>&gt;&gt;&gt;     public static let three = MyOptionSet(rawValue: 1 &lt;&lt; 2)<br>&gt;&gt;&gt;     <br>&gt;&gt;&gt;     public var rawValue: Int { return _rawValue }<br>&gt;&gt;&gt;     public init(rawValue: Int) { self._rawValue = rawValue }<br>&gt;&gt;&gt;     private let _rawValue: Int<br>&gt;&gt;&gt;     <br>&gt;&gt;&gt;     private enum StringEnum: String { case one, two, three }<br>&gt;&gt;&gt;     public init(strings: [String]) {<br>&gt;&gt;&gt;         var set = MyOptionSet()<br>&gt;&gt;&gt;         strings.flatMap({ StringEnum(rawValue: $0) })<br>&gt;&gt;&gt;             .flatMap({ MyOptionSet(rawValue: 1 &lt;&lt; $0.hashValue) })<br>&gt;&gt;&gt;             .forEach { set.insert($0) }<br>&gt;&gt;&gt;         _rawValue = set.rawValue<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let stringArray: [String] = [&quot;one&quot;, &quot;three&quot;]<br>&gt;&gt;&gt; let stringOptions = MyOptionSet(strings: stringArray)<br>&gt;&gt;&gt; stringOptions.rawValue<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Nov 3, 2016, at 7:09 PM, Jon Shier via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Swifters:<br>&gt;&gt;&gt;&gt; 	I’m dealing with a JSON API where sets of options are returned as arrays of strings. Representing these as OptionSets seems ideal. I can decode the arrays of strings into an array of individual OptionSet values, but I’ve run into a dead end when trying generically reduce the array of OptionSets to a single OptionSet value. I’ve tried variety of ways of definition a Collection extension, even tried defining a global function, but I can’t seem to use the OptionSet sequence initializer or reduce itself (cannot invoke insert with argument of type (OptionSet) (or T)). Any guidance here? <br>&gt;&gt;&gt;&gt; 	Here’s what I’ve tried:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; extension Collection where Iterator.Element == OptionSet {<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;    func reduced() -&gt; Iterator.Element {<br>&gt;&gt;&gt;&gt;        return reduce(Iterator.Element()) {<br>&gt;&gt;&gt;&gt;            var newResult = $0<br>&gt;&gt;&gt;&gt;            newResult.insert($1)<br>&gt;&gt;&gt;&gt;            return newResult<br>&gt;&gt;&gt;&gt;        }<br>&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; extension Collection where Iterator.Element == OptionSet {<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;    func reduced&lt;T: OptionSet&gt;() -&gt; T {<br>&gt;&gt;&gt;&gt;        return reduce(T()) {<br>&gt;&gt;&gt;&gt;            var newResult = $0<br>&gt;&gt;&gt;&gt;            newResult.insert($1)<br>&gt;&gt;&gt;&gt;            return newResult<br>&gt;&gt;&gt;&gt;        }<br>&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; extension Collection where Iterator.Element == OptionSet {<br>&gt;&gt;&gt;&gt;    func reduced() -&gt; Iterator.Element {<br>&gt;&gt;&gt;&gt;        return Iterator.Element(self)<br>&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func reduced&lt;T: OptionSet&gt;(_ options: [T]) -&gt; T {<br>&gt;&gt;&gt;&gt;    return options.reduce(T()) {<br>&gt;&gt;&gt;&gt;        var newResult = $0<br>&gt;&gt;&gt;&gt;        newResult.insert($1)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;        return newResult<br>&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Jon Shier<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161103/9db7e9ee/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/44b9c3e92a40313850fdbc2cb0abdef7?s=50"></div><header><strong>Reducing Array&lt;OptionSet&gt; to OptionSet</strong> from <string>Jon Shier</string> &lt;jon at jonshier.com&gt;<p>November  3, 2016 at 10:00:00pm</p></header><div class="content"><p>Yes indeed! Apparently union works with the generic but insert did not. Strange. Anyway, I ended up here:<br></p><p>func reducedOptions&lt;T: OptionSet&gt;(_ options: [T]) -&gt; T {<br>    return options.reduce(T()) { return $0.union($1) }<br>}<br></p><p>Thanks!<br></p><p>Jon<br></p><p>&gt; On Nov 3, 2016, at 9:56 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; How about<br>&gt; <br>&gt; func joinOptionSets&lt;OS: OptionSet&gt;(_ sets: [OS]) -&gt; OS {<br>&gt;     return sets.reduce([] as OS) {<br>&gt;         (result, set) in return result.union(set)<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; joinOptionSets(sets).rawValue<br>&gt; <br>&gt; <br>&gt; -- E<br>&gt; <br>&gt;&gt; On Nov 3, 2016, at 7:48 PM, Erica Sadun via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Like this?<br>&gt;&gt; <br>&gt;&gt; let sets: [MyOptionSet] = [MyOptionSet(strings: [&quot;one&quot;]), MyOptionSet(strings: [&quot;two&quot;]), MyOptionSet(strings: [&quot;one&quot;, &quot;two&quot;])]<br>&gt;&gt; let unioned = sets.reduce(MyOptionSet(rawValue: 0)) {<br>&gt;&gt;     (result, set) in return result.union(set)<br>&gt;&gt; }<br>&gt;&gt; unioned.rawValue<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Nov 3, 2016, at 7:44 PM, Jon Shier &lt;jon at jonshier.com &lt;mailto:jon at jonshier.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks Erica. I’ve been able to transform arrays of strings into arrays of my OptionSets using an enum approach like you describe. I was looking more for a generic approach that I could apply to all of the various OptionSets I have to decode from JSON. I suppose whether it’s from an array of strings or array of the OptionSet is less important, but getting to the array of the OptionSet itself is something I can already do. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jon<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Nov 3, 2016, at 9:37 PM, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Maybe something like this? Or you could just bitwise || individual sets. Or you could use a dictionary to lookup [string: rawValue]. etc.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; public struct MyOptionSet: OptionSet {<br>&gt;&gt;&gt;&gt;     public static let one = MyOptionSet(rawValue: 1 &lt;&lt; 0)<br>&gt;&gt;&gt;&gt;     public static let two = MyOptionSet(rawValue: 1 &lt;&lt; 1)<br>&gt;&gt;&gt;&gt;     public static let three = MyOptionSet(rawValue: 1 &lt;&lt; 2)<br>&gt;&gt;&gt;&gt;     <br>&gt;&gt;&gt;&gt;     public var rawValue: Int { return _rawValue }<br>&gt;&gt;&gt;&gt;     public init(rawValue: Int) { self._rawValue = rawValue }<br>&gt;&gt;&gt;&gt;     private let _rawValue: Int<br>&gt;&gt;&gt;&gt;     <br>&gt;&gt;&gt;&gt;     private enum StringEnum: String { case one, two, three }<br>&gt;&gt;&gt;&gt;     public init(strings: [String]) {<br>&gt;&gt;&gt;&gt;         var set = MyOptionSet()<br>&gt;&gt;&gt;&gt;         strings.flatMap({ StringEnum(rawValue: $0) })<br>&gt;&gt;&gt;&gt;             .flatMap({ MyOptionSet(rawValue: 1 &lt;&lt; $0.hashValue) })<br>&gt;&gt;&gt;&gt;             .forEach { set.insert($0) }<br>&gt;&gt;&gt;&gt;         _rawValue = set.rawValue<br>&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let stringArray: [String] = [&quot;one&quot;, &quot;three&quot;]<br>&gt;&gt;&gt;&gt; let stringOptions = MyOptionSet(strings: stringArray)<br>&gt;&gt;&gt;&gt; stringOptions.rawValue<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Nov 3, 2016, at 7:09 PM, Jon Shier via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Swifters:<br>&gt;&gt;&gt;&gt;&gt; 	I’m dealing with a JSON API where sets of options are returned as arrays of strings. Representing these as OptionSets seems ideal. I can decode the arrays of strings into an array of individual OptionSet values, but I’ve run into a dead end when trying generically reduce the array of OptionSets to a single OptionSet value. I’ve tried variety of ways of definition a Collection extension, even tried defining a global function, but I can’t seem to use the OptionSet sequence initializer or reduce itself (cannot invoke insert with argument of type (OptionSet) (or T)). Any guidance here? <br>&gt;&gt;&gt;&gt;&gt; 	Here’s what I’ve tried:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; extension Collection where Iterator.Element == OptionSet {<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;    func reduced() -&gt; Iterator.Element {<br>&gt;&gt;&gt;&gt;&gt;        return reduce(Iterator.Element()) {<br>&gt;&gt;&gt;&gt;&gt;            var newResult = $0<br>&gt;&gt;&gt;&gt;&gt;            newResult.insert($1)<br>&gt;&gt;&gt;&gt;&gt;            return newResult<br>&gt;&gt;&gt;&gt;&gt;        }<br>&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; extension Collection where Iterator.Element == OptionSet {<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;    func reduced&lt;T: OptionSet&gt;() -&gt; T {<br>&gt;&gt;&gt;&gt;&gt;        return reduce(T()) {<br>&gt;&gt;&gt;&gt;&gt;            var newResult = $0<br>&gt;&gt;&gt;&gt;&gt;            newResult.insert($1)<br>&gt;&gt;&gt;&gt;&gt;            return newResult<br>&gt;&gt;&gt;&gt;&gt;        }<br>&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; extension Collection where Iterator.Element == OptionSet {<br>&gt;&gt;&gt;&gt;&gt;    func reduced() -&gt; Iterator.Element {<br>&gt;&gt;&gt;&gt;&gt;        return Iterator.Element(self)<br>&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; func reduced&lt;T: OptionSet&gt;(_ options: [T]) -&gt; T {<br>&gt;&gt;&gt;&gt;&gt;    return options.reduce(T()) {<br>&gt;&gt;&gt;&gt;&gt;        var newResult = $0<br>&gt;&gt;&gt;&gt;&gt;        newResult.insert($1)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;        return newResult<br>&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Jon Shier<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161103/4b8815ec/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8941ad1d64fca59301084a03cb75956c?s=50"></div><header><strong>hashValue of enum cases (was Reducing Array&lt;OptionSet&gt; to OptionSet)</strong> from <string>Fritz Anderson</string> &lt;fritza at manoverboard.org&gt;<p>November  4, 2016 at 03:00:00pm</p></header><div class="content"><p>On 3 Nov 2016, at 8:37 PM, Erica Sadun via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br></p><p>&gt;     private enum StringEnum: String { case one, two, three }<br>&gt;     public init(strings: [String]) {<br>&gt;         var set = MyOptionSet()<br>&gt;         strings.flatMap({ StringEnum(rawValue: $0) })<br>&gt;             .flatMap({ MyOptionSet(rawValue: 1 &lt;&lt; $0.hashValue) })<br>&gt;             .forEach { set.insert($0) }<br>&gt;         _rawValue = set.rawValue<br>&gt;     }<br></p><p>I’m curious about relying on the hash value of an enum case being its declaration-order index. A sage (http://ericasadun.com/2015/07/12/swift-enumerations-or-how-to-annoy-tom/ &lt;http://ericasadun.com/2015/07/12/swift-enumerations-or-how-to-annoy-tom/&gt;) warns that this  is an implementation detail. I haven’t seen anything saying it is API. Has it been resolved?<br></p><p>It’s the most plausible implementation, but I’d think code that relies on case order would break silently (likely at widely-separated locations) if a case were inserted or removed. That suggests to me it’s not possible to regularize this behavior.<br></p><p>Folkloric API (like SEL ↔︎ char* in ObjC) makes me itch.<br></p><p>	— F<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161104/32d14870/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>hashValue of enum cases (was Reducing Array&lt;OptionSet&gt; to OptionSet)</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>November  4, 2016 at 03:00:00pm</p></header><div class="content"><p>It is absolutely an implementation detail and one you should never rely upon! <br></p><p>— Erica<br></p><p>Sent from my iPhone<br></p><p>&gt; On Nov 4, 2016, at 2:17 PM, Fritz Anderson &lt;fritza at manoverboard.org&gt; wrote:<br>&gt; <br>&gt;&gt; On 3 Nov 2016, at 8:37 PM, Erica Sadun via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;     private enum StringEnum: String { case one, two, three }<br>&gt;&gt;     public init(strings: [String]) {<br>&gt;&gt;         var set = MyOptionSet()<br>&gt;&gt;         strings.flatMap({ StringEnum(rawValue: $0) })<br>&gt;&gt;             .flatMap({ MyOptionSet(rawValue: 1 &lt;&lt; $0.hashValue) })<br>&gt;&gt;             .forEach { set.insert($0) }<br>&gt;&gt;         _rawValue = set.rawValue<br>&gt;&gt;     }<br>&gt; <br>&gt; I’m curious about relying on the hash value of an enum case being its declaration-order index. A sage (http://ericasadun.com/2015/07/12/swift-enumerations-or-how-to-annoy-tom/) warns that this  is an implementation detail. I haven’t seen anything saying it is API. Has it been resolved?<br>&gt; <br>&gt; It’s the most plausible implementation, but I’d think code that relies on case order would break silently (likely at widely-separated locations) if a case were inserted or removed. That suggests to me it’s not possible to regularize this behavior.<br>&gt; <br>&gt; Folkloric API (like SEL ↔︎ char* in ObjC) makes me itch.<br>&gt; <br>&gt; 	— F<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161104/741bd466/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
