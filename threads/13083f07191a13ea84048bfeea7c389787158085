<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a7309b94c3f2e629f39de3b2fe2a070b?s=50"></div><header><strong>[Proposal]: support disable to trailing closure syntax</strong> from <string>QQ Mail</string> &lt;286224043 at qq.com&gt;<p>January  4, 2016 at 09:00:00pm</p></header><div class="content"><p>Hi, All: <br>	trailing closure is good for most cases, but sometimes it is also make code unclear, for example: <br>	<br>UIView.animateWithDuration(0.3, animations: { () -&gt; Void in<br>    // animation code here<br>    }) { (Bool) -&gt; Void in<br>        // completion code here<br>}<br></p><p>the label been removed and the code also not aligned well. <br>I would like to write like this: <br></p><p>UIView.animateWithDuration(0.3,<br>    <br>    animations: { () -&gt; Void in<br>        // animation code here<br>    },<br>    completion: { Bool -&gt; Void in<br>        // completion code here<br>    }<br>)<br></p><p>It is possible, just every time you have to write it manually. It’s a little wast.<br>So I have a thought, since we already know this function is not well suit for trailing <br>closure, can we add a attribute to disable it, for example: <br></p><p>extension UIView {<br></p><p>    @disable_trailing_closure<br>    public static func animateWithDuration(duration:NSTimeInterval, animations:()-&gt;Void, completion:()-&gt;Void) {<br>        // implementations ...<br>    }<br>}<br></p><p>I also found another one have issue for this too. link: http://www.natashatherobot.com/swift-trailing-closure-syntax/ &lt;http://www.natashatherobot.com/swift-trailing-closure-syntax/&gt;<br>what do you think?<br></p><p>Best Regards<br></p><p>ChenYungui<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160104/13088085/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/357b710213d3c0e01356f7c90f78b9f2?s=50"></div><header><strong>[Proposal]: support disable to trailing closure syntax</strong> from <string>Vincent Esche</string> &lt;regexident.mailinglists at gmail.com&gt;<p>January  4, 2016 at 03:00:00pm</p></header><div class="content"><p>This should not be a keyword. Neither should it be part of the language.<br>Auto-completion (assuming you’re talking about that) is not a language feature.<br>It’s a feature of your editor/IDE. And thus it should be a default/setting therein if at all.<br></p><p>Similarly Xcode tends to auto-complete &quot;() -&gt; ()”-closures as { () -&gt; Void in … }.<br>The “() -&gt; Void in” not necessary in 99/100 cases. Still it shouldn’t have a language keyword.<br>Instead Xcode should be smart enough to omit the “… -&gt; Void in” or at least the “ -&gt; …”-part.<br>But again, this is a feature of your editor/IDE, not your language.<br></p><p>Thus I would recommend you to file a radar on it for Xcode to change its default auto-completion behavior. ;)<br></p><p>&gt; On 04 Jan 2016, at 13:45, QQ Mail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi, All: <br>&gt; 	trailing closure is good for most cases, but sometimes it is also make code unclear, for example: <br>&gt; 	<br>&gt; UIView.animateWithDuration(0.3, animations: { () -&gt; Void in<br>&gt;     // animation code here<br>&gt;     }) { (Bool) -&gt; Void in<br>&gt;         // completion code here<br>&gt; }<br>&gt; <br>&gt; the label been removed and the code also not aligned well. <br>&gt; I would like to write like this: <br>&gt; <br>&gt; UIView.animateWithDuration(0.3,<br>&gt;     <br>&gt;     animations: { () -&gt; Void in<br>&gt;         // animation code here<br>&gt;     },<br>&gt;     completion: { Bool -&gt; Void in<br>&gt;         // completion code here<br>&gt;     }<br>&gt; )<br>&gt; <br>&gt; It is possible, just every time you have to write it manually. It’s a little wast.<br>&gt; So I have a thought, since we already know this function is not well suit for trailing <br>&gt; closure, can we add a attribute to disable it, for example: <br>&gt; <br>&gt; extension UIView {<br>&gt; <br>&gt;     @disable_trailing_closure<br>&gt;     public static func animateWithDuration(duration:NSTimeInterval, animations:()-&gt;Void, completion:()-&gt;Void) {<br>&gt;         // implementations ...<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; I also found another one have issue for this too. link: http://www.natashatherobot.com/swift-trailing-closure-syntax/ &lt;http://www.natashatherobot.com/swift-trailing-closure-syntax/&gt;<br>&gt; what do you think?<br>&gt; <br>&gt; Best Regards<br>&gt; <br>&gt; ChenYungui<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160104/22fac2f6/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/78dda0d326b6c8eff7c2679f55346a7f?s=50"></div><header><strong>[Proposal]: support disable to trailing closure syntax</strong> from <string>Alex Migicovsky</string> &lt;migi at apple.com&gt;<p>January  4, 2016 at 09:00:00am</p></header><div class="content"><p>I think instead of an attribute I’d prefer rules that allow trailing closures at call sites. The most straightforward solution would be to only allow using trailing closures at the call site if the invoked function has a single closure that’s the last parameter. I think the only unfortunate aspect of that is it’s an implicit rule which makes it harder for new devs to learn (and experienced devs to remember!).<br></p><p>- Alex<br></p><p>&gt; On Jan 4, 2016, at 4:45 AM, QQ Mail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi, All: <br>&gt; 	trailing closure is good for most cases, but sometimes it is also make code unclear, for example: <br>&gt; 	<br>&gt; UIView.animateWithDuration(0.3, animations: { () -&gt; Void in<br>&gt;     // animation code here<br>&gt;     }) { (Bool) -&gt; Void in<br>&gt;         // completion code here<br>&gt; }<br>&gt; <br>&gt; the label been removed and the code also not aligned well. <br>&gt; I would like to write like this: <br>&gt; <br>&gt; UIView.animateWithDuration(0.3,<br>&gt;     <br>&gt;     animations: { () -&gt; Void in<br>&gt;         // animation code here<br>&gt;     },<br>&gt;     completion: { Bool -&gt; Void in<br>&gt;         // completion code here<br>&gt;     }<br>&gt; )<br>&gt; <br>&gt; It is possible, just every time you have to write it manually. It’s a little wast.<br>&gt; So I have a thought, since we already know this function is not well suit for trailing <br>&gt; closure, can we add a attribute to disable it, for example: <br>&gt; <br>&gt; extension UIView {<br>&gt; <br>&gt;     @disable_trailing_closure<br>&gt;     public static func animateWithDuration(duration:NSTimeInterval, animations:()-&gt;Void, completion:()-&gt;Void) {<br>&gt;         // implementations ...<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; I also found another one have issue for this too. link: http://www.natashatherobot.com/swift-trailing-closure-syntax/ &lt;http://www.natashatherobot.com/swift-trailing-closure-syntax/&gt;<br>&gt; what do you think?<br>&gt; <br>&gt; Best Regards<br>&gt; <br>&gt; ChenYungui<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160104/49542769/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/283bdc6ec76dd4d16b7a8234222e55d4?s=50"></div><header><strong>[Proposal]: support disable to trailing closure syntax</strong> from <string>Michel Fortin</string> &lt;michel.fortin at michelf.ca&gt;<p>January  4, 2016 at 12:00:00pm</p></header><div class="content"><p>Le 4 janv. 2016 à 7:45, QQ Mail via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; I would like to write like this: <br>&gt; <br>&gt; UIView.animateWithDuration(0.3,<br>&gt;     <br>&gt;     animations: { () -&gt; Void in<br>&gt;         // animation code here<br>&gt;     },<br>&gt;     completion: { Bool -&gt; Void in<br>&gt;         // completion code here<br>&gt;     }<br>&gt; )<br></p><p>Maybe, instead of disallowing trailing closures, we could allow consecutive closures to be expressed like that:<br></p><p>UIView.animateWithDuration(0.3) {<br>	// animation code here<br>} completion { success in<br>	// completion code here<br>}<br></p><p>-- <br>Michel Fortin<br>https://michelf.ca<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>[Proposal]: support disable to trailing closure syntax</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>January  4, 2016 at 01:00:00pm</p></header><div class="content"><p>I like this syntax, but I don&#39;t like that it could be ambiguous with successively calling animateWithDuration then some function called completion.<br></p><p>Other than that, I think that developers should be smart enough to exercise self-restraint with trailing closures when they&#39;re not appropriate. I don&#39;t understand what you (QQ Mail) mean with &quot;you have to write it manually&quot;.<br></p><p>Félix<br></p><p>&gt; Le 4 janv. 2016 à 12:50:15, Michel Fortin via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Le 4 janv. 2016 à 7:45, QQ Mail via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt; I would like to write like this: <br>&gt;&gt; <br>&gt;&gt; UIView.animateWithDuration(0.3,<br>&gt;&gt; <br>&gt;&gt;    animations: { () -&gt; Void in<br>&gt;&gt;        // animation code here<br>&gt;&gt;    },<br>&gt;&gt;    completion: { Bool -&gt; Void in<br>&gt;&gt;        // completion code here<br>&gt;&gt;    }<br>&gt;&gt; )<br>&gt; <br>&gt; Maybe, instead of disallowing trailing closures, we could allow consecutive closures to be expressed like that:<br>&gt; <br>&gt; UIView.animateWithDuration(0.3) {<br>&gt; 	// animation code here<br>&gt; } completion { success in<br>&gt; 	// completion code here<br>&gt; }<br>&gt; <br>&gt; -- <br>&gt; Michel Fortin<br>&gt; https://michelf.ca<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Proposal]: support disable to trailing closure syntax</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>January  4, 2016 at 10:00:00am</p></header><div class="content"><p>What&#39;s the point of this? What problem does it solve? If you don&#39;t want<br>a trailing closure, just don&#39;t use trailing closure syntax. I don&#39;t see<br>what benefit there is in explicitly annotating the function to disallow<br>trailing closure syntax with it; just because you don&#39;t want to use<br>trailing closure syntax doesn&#39;t mean nobody should be able to use it.<br>And other people using it shouldn&#39;t affect you.<br></p><p>-Kevin Ballard<br></p><p>On Mon, Jan 4, 2016, at 04:45 AM, QQ Mail via swift-evolution wrote:<br>&gt; Hi, All: trailing closure is good for most cases, but sometimes it is<br>&gt; also make code unclear, for example:<br>&gt;<br>&gt; UIView.animateWithDuration(0.3, animations: { () -&gt; Void in //<br>&gt; animation code here    }) { (Bool) -&gt; Void in // completion<br>&gt; code here }<br>&gt;<br>&gt; the label been removed and the code also not aligned well. I would<br>&gt; like to write like this:<br>&gt;<br>&gt; UIView.animateWithDuration(0.3,<br>&gt;<br></p><p><br>&gt; animations: { () -&gt; Void in // animation code here    },<br>&gt; completion: { Bool -&gt; Void in // completion code here    } )<br>&gt;<br>&gt; It is possible, just every time you have to write it manually. It’s a<br>&gt; little wast. So I have a thought, since we already know this function<br>&gt; is not well suit for trailing closure, can we add a attribute to<br>&gt; disable it, for example:<br>&gt;<br>&gt; extensionUIView {<br>&gt;<br>&gt; @disable_trailing_closure    public static func<br>&gt; animateWithDuration(duration:NSTimeInterval, animations:()-&gt;Void, completion:()-<br>&gt; &gt;Void) { // implementations ...    } }<br>&gt;<br>&gt; I also found another one have issue for this too. link:<br>&gt; http://www.natashatherobot.com/swift-trailing-closure-syntax/ what do<br>&gt; you think?<br>&gt;<br>&gt; Best Regards<br>&gt;<br>&gt; ChenYungui<br>&gt;<br>&gt; _________________________________________________<br>&gt; swift-evolution mailing list swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160104/bf482150/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8da0cba30fa0e47cf4fb26ebb968e552?s=50"></div><header><strong>[Proposal]: support disable to trailing closure syntax</strong> from <string>Jérôme Duquennoy</string> &lt;jerome+swift at duquennoy.fr&gt;<p>January  5, 2016 at 02:00:00pm</p></header><div class="content"><p>Hi everybody,<br></p><p>I do agree with Kevin : trailing closures is only a possibility offered by the language, you are not forced to use it.<br>In the case you show, I agree that the second syntax is more readable than the first one. Good news is : it does compile :-).<br></p><p>I think adding a specific keyword or annotation to locally forbid trailing closure would add complexity to the language for no real advantage.<br></p><p>-1 for me thus.<br></p><p>Jerome<br></p><p><br>&gt; On 04 Jan 2016, at 19:52, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; What&#39;s the point of this? What problem does it solve? If you don&#39;t want a trailing closure, just don&#39;t use trailing closure syntax. I don&#39;t see what benefit there is in explicitly annotating the function to disallow trailing closure syntax with it; just because you don&#39;t want to use trailing closure syntax doesn&#39;t mean nobody should be able to use it. And other people using it shouldn&#39;t affect you.<br>&gt;  <br>&gt; -Kevin Ballard<br>&gt;  <br>&gt; On Mon, Jan 4, 2016, at 04:45 AM, QQ Mail via swift-evolution wrote:<br>&gt;&gt; Hi, All: <br>&gt;&gt; trailing closure is good for most cases, but sometimes it is also make code unclear, for example: <br>&gt;&gt;  <br>&gt;&gt; UIView.animateWithDuration(0.3, animations: { () -&gt; Void in<br>&gt;&gt; // animation code here<br>&gt;&gt;     }) { (Bool) -&gt; Void in<br>&gt;&gt; // completion code here<br>&gt;&gt; }<br>&gt;&gt;  <br>&gt;&gt; the label been removed and the code also not aligned well. <br>&gt;&gt; I would like to write like this: <br>&gt;&gt;  <br>&gt;&gt; UIView.animateWithDuration(0.3,<br>&gt;&gt; <br>&gt;&gt;     animations: { () -&gt; Void in<br>&gt;&gt; // animation code here<br>&gt;&gt;     },<br>&gt;&gt;     completion: { Bool -&gt; Void in<br>&gt;&gt; // completion code here<br>&gt;&gt;     }<br>&gt;&gt; )<br>&gt;&gt;  <br>&gt;&gt; It is possible, just every time you have to write it manually. It’s a little wast.<br>&gt;&gt; So I have a thought, since we already know this function is not well suit for trailing <br>&gt;&gt; closure, can we add a attribute to disable it, for example: <br>&gt;&gt;  <br>&gt;&gt; extensionUIView {<br>&gt;&gt;  <br>&gt;&gt; @disable_trailing_closure<br>&gt;&gt;     public static func animateWithDuration(duration:NSTimeInterval, animations:()-&gt;Void, completion:()-&gt;Void) {<br>&gt;&gt; // implementations ...<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt;  <br>&gt;&gt; I also found another one have issue for this too. link: http://www.natashatherobot.com/swift-trailing-closure-syntax/ &lt;http://www.natashatherobot.com/swift-trailing-closure-syntax/&gt;<br>&gt;&gt; what do you think?<br>&gt;&gt;  <br>&gt;&gt; Best Regards<br>&gt;&gt;  <br>&gt;&gt; ChenYungui<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160105/840415bb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4de621aec7ff90a03f5b9b21e790bc66?s=50"></div><header><strong>[Proposal]: support disable to trailing closure syntax</strong> from <string>Dennis Lysenko</string> &lt;dennis.s.lysenko at gmail.com&gt;<p>January  5, 2016 at 04:00:00pm</p></header><div class="content"><p>Everyone,<br></p><p>The sticking point here is that xcode generates the first syntax<br>automatically.<br></p><p>Simply filing a radar about this would be useless, so I believe the<br>original proposal is meant to sort-of &quot;light a fire&quot; under the Xcode team;<br>by introducing a new language feature they would be forced to support it.<br></p><p>Personally, I think it should just be fixed in Xcode as well, but it&#39;s not<br>that simple.<br></p><p>On Tue, Jan 5, 2016, 8:35 AM Jérôme Duquennoy &lt;swift-evolution at swift.org&gt;<br>wrote:<br></p><p>&gt; Hi everybody,<br>&gt;<br>&gt; I do agree with Kevin : trailing closures is only a possibility offered by<br>&gt; the language, you are not forced to use it.<br>&gt; In the case you show, I agree that the second syntax is more readable than<br>&gt; the first one. Good news is : it does compile :-).<br>&gt;<br>&gt; I think adding a specific keyword or annotation to locally forbid trailing<br>&gt; closure would add complexity to the language for no real advantage.<br>&gt;<br>&gt; -1 for me thus.<br>&gt;<br>&gt; Jerome<br>&gt;<br>&gt;<br>&gt;<br>&gt; On 04 Jan 2016, at 19:52, Kevin Ballard via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; What&#39;s the point of this? What problem does it solve? If you don&#39;t want a<br>&gt; trailing closure, just don&#39;t use trailing closure syntax. I don&#39;t see what<br>&gt; benefit there is in explicitly annotating the function to disallow trailing<br>&gt; closure syntax with it; just because you don&#39;t want to use trailing closure<br>&gt; syntax doesn&#39;t mean nobody should be able to use it. And other people using<br>&gt; it shouldn&#39;t affect you.<br>&gt;<br>&gt; -Kevin Ballard<br>&gt;<br>&gt; On Mon, Jan 4, 2016, at 04:45 AM, QQ Mail via swift-evolution wrote:<br>&gt;<br>&gt; Hi, All:<br>&gt; trailing closure is good for most cases, but sometimes it is also make<br>&gt; code unclear, for example:<br>&gt;<br>&gt; UIView.animateWithDuration(0.3, animations: { () -&gt; Void in<br>&gt; // animation code here<br>&gt;     }) { (Bool) -&gt; Void in<br>&gt; // completion code here<br>&gt; }<br>&gt;<br>&gt; the label been removed and the code also not aligned well.<br>&gt; I would like to write like this:<br>&gt;<br>&gt; UIView.animateWithDuration(0.3,<br>&gt;<br>&gt;     animations: { () -&gt; Void in<br>&gt; // animation code here<br>&gt;     },<br>&gt;     completion: { Bool -&gt; Void in<br>&gt; // completion code here<br>&gt;     }<br>&gt; )<br>&gt;<br>&gt; It is possible, just every time you have to write it manually. It’s a<br>&gt; little wast.<br>&gt; So I have a thought, since we already know this function is not well suit<br>&gt; for trailing<br>&gt; closure, can we add a attribute to disable it, for example:<br>&gt;<br>&gt; extensionUIView {<br>&gt;<br>&gt; @disable_trailing_closure<br>&gt;     public static func animateWithDuration(duration:NSTimeInterval,<br>&gt; animations:()-&gt;Void, completion:()-&gt;Void) {<br>&gt; // implementations ...<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; I also found another one have issue for this too. link:<br>&gt; http://www.natashatherobot.com/swift-trailing-closure-syntax/<br>&gt; what do you think?<br>&gt;<br>&gt; Best Regards<br>&gt;<br>&gt; ChenYungui<br>&gt;<br>&gt; *_______________________________________________*<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160105/8037816f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Proposal]: support disable to trailing closure syntax</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>January  5, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jan 5, 2016, at 8:07 AM, Dennis Lysenko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Everyone, <br>&gt; <br>&gt; The sticking point here is that xcode generates the first syntax automatically. <br>&gt; <br>&gt; Simply filing a radar about this would be useless, so I believe the original proposal is meant to sort-of &quot;light a fire&quot; under the Xcode team; by introducing a new language feature they would be forced to support it. <br>&gt; <br>&gt; Personally, I think it should just be fixed in Xcode as well, but it&#39;s not that simple. <br></p><p>FWIW, the algorithms used by Swift’s code completion in Xcode are part of sourcekit, which is included in Swift.org.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4de621aec7ff90a03f5b9b21e790bc66?s=50"></div><header><strong>[Proposal]: support disable to trailing closure syntax</strong> from <string>Dennis Lysenko</string> &lt;dennis.s.lysenko at gmail.com&gt;<p>January  5, 2016 at 06:00:00pm</p></header><div class="content"><p>Chris, interesting tidbit. I wasn&#39;t aware of that. Is sourcekit considered<br>to be within the scope of the swift-evolution mailing list?<br></p><p>On Tue, Jan 5, 2016 at 1:47 PM Chris Lattner &lt;clattner at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Jan 5, 2016, at 8:07 AM, Dennis Lysenko via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Everyone,<br>&gt; &gt;<br>&gt; &gt; The sticking point here is that xcode generates the first syntax<br>&gt; automatically.<br>&gt; &gt;<br>&gt; &gt; Simply filing a radar about this would be useless, so I believe the<br>&gt; original proposal is meant to sort-of &quot;light a fire&quot; under the Xcode team;<br>&gt; by introducing a new language feature they would be forced to support it.<br>&gt; &gt;<br>&gt; &gt; Personally, I think it should just be fixed in Xcode as well, but it&#39;s<br>&gt; not that simple.<br>&gt;<br>&gt; FWIW, the algorithms used by Swift’s code completion in Xcode are part of<br>&gt; sourcekit, which is included in Swift.org.<br>&gt;<br>&gt; -Chris<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160105/a815f3e8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Proposal]: support disable to trailing closure syntax</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>January  6, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jan 5, 2016, at 10:57 AM, Dennis Lysenko &lt;dennis.s.lysenko at gmail.com&gt; wrote:<br>&gt; <br>&gt; Chris, interesting tidbit. I wasn&#39;t aware of that. Is sourcekit considered to be within the scope of the swift-evolution mailing list?<br></p><p>No, it would be better to discuss it on swift-dev.<br></p><p>-Chris<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Proposal]: support disable to trailing closure syntax</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>January  5, 2016 at 10:00:00am</p></header><div class="content"><p>On Tue, Jan 5, 2016, at 10:47 AM, Chris Lattner via swift-evolution wrote:<br>&gt; <br>&gt; &gt; On Jan 5, 2016, at 8:07 AM, Dennis Lysenko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; <br>&gt; &gt; Everyone, <br>&gt; &gt; <br>&gt; &gt; The sticking point here is that xcode generates the first syntax automatically. <br>&gt; &gt; <br>&gt; &gt; Simply filing a radar about this would be useless, so I believe the original proposal is meant to sort-of &quot;light a fire&quot; under the Xcode team; by introducing a new language feature they would be forced to support it. <br>&gt; &gt; <br>&gt; &gt; Personally, I think it should just be fixed in Xcode as well, but it&#39;s not that simple. <br>&gt; <br>&gt; FWIW, the algorithms used by Swift’s code completion in Xcode are part of sourcekit, which is included in Swift.org.<br></p><p>Oh really? So I could actually go in there and fix it to stop generating closures that look like<br></p><p>    foo { () -&gt; Void in<br>        &lt;#code#&gt;<br>    }<br></p><p>(the `() -&gt; Void in` is rather pointless)<br></p><p>In that case, I suppose it makes sense to actually discuss proposed code completion changes on this list. On the subject of disabling trailing closure syntax, it might make sense to have Xcode not use it automatically when the function has 2 closure parameters (sometimes I do want the second closure to be trailing-closure, sometimes I don&#39;t, but it seems reasonable to err on the side of not having it be trailing-closure if there&#39;s more than 1 closure in the call).<br></p><p>-Kevin Ballard<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
