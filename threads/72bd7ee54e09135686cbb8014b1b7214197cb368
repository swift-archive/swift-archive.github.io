<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Discussion] Enum Leading Dot Prefixes</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>February 11, 2016 at 08:00:00pm</p></header><div class="content"><p>https://gist.github.com/erica/e0b8a3a22ab716a19db4 &lt;https://gist.github.com/erica/e0b8a3a22ab716a19db4&gt;<br></p><p>Requiring Leading Dot Prefixes for Enum Instance Member Implementations<br></p><p>Proposal: TBD<br>Author(s): Erica Sadun &lt;http://github.com/erica&gt;, Chris Lattner &lt;https://github.com/lattner&gt;<br>Status: TBD<br>Review manager: TBD<br> &lt;https://gist.github.com/erica/e0b8a3a22ab716a19db4#introduction&gt;Introduction<br></p><p>Enumeration cases are essentially static not instance type members. Unlike static members in structures and classes, enumeration cases can be mentioned in initializers and instance methods without referencing a fully qualified type. This makes little sense. In no other case can an instance implementation directly access a static member. This proposal introduces a rule that requires leading dots or fully qualified references (EnumType.caseMember) to provide a more consistent developer experience to clearly disambiguate static cases from instance members. <br></p><p> &lt;https://gist.github.com/erica/e0b8a3a22ab716a19db4#motivation&gt;Motivation<br></p><p>Swift infers the enclosing type for a case on a developer&#39;s behalf when the use is unambiguously of a single enumeration type. Inference enables you to craft switch statements like this:<br></p><p>switch Coin() {<br>case .Heads: print(&quot;Heads&quot;)<br>case .Tails: print(&quot;Tails&quot;)<br>}<br>A leading dot has become a conventional shorthand for &quot;enumeration case&quot; across the language. When used internally in enum implementations, a leading dot is not required, nor is a type name to access the static case member. The following code is legal in Swift.<br></p><p>enum Coin {<br>    case Heads, Tails<br>    func printMe() {<br>        switch self {<br>        case Heads: print(&quot;Heads&quot;)  // no leading dot<br>        case .Tails: print(&quot;Tails&quot;) // leading dot<br>        }<br></p><p>        if self == Heads {          // no leading dot<br>            print(&quot;This is a head&quot;)<br>        }<br></p><p>        if self == .Tails {         // leading dot<br>            print(&quot;This is a tail&quot;)<br>        }<br>    }<br></p><p>    init() {<br>        let cointoss = arc4random_uniform(2) == 0<br>        self = cointoss ? .Heads : Tails // mix and match leading dots<br>    }<br>}<br>This quirk produces a language inconsistency that can confuse developers and contravenes the guiding Principle of Least Astonishment. We propose to mandate a leading dot. This will bring case mentions into lock-step with the conventions used to reference them outside of enumeration type implementations.<br></p><p> &lt;https://gist.github.com/erica/e0b8a3a22ab716a19db4#detail-design&gt;Detail Design<br></p><p>Under this rule, the compiler will require a leading dot for all case members. The change will not affect other static members, which require fully qualified references from instance methods and infer self from static methods.<br></p><p>enum Coin {<br>    case Heads, Tails<br>    static func doSomething() { print(&quot;Something&quot;) }<br>    static func staticFunc() { doSomething() } // does not require leading dot<br>    static func staticFunc2() { let foo = .Tails } // requires leading dot<br>    func instanceFunc() { self.dynamicType.doSomething() } // requires full qualification<br>    func otherFunc() { if self == .Heads ... } // requires leading dot, also initializers<br></p><p>    /// ...<br>} <br> &lt;https://gist.github.com/erica/e0b8a3a22ab716a19db4#alternatives-considered&gt;Alternatives Considered<br></p><p>Other than leaving the status quo, the language could force instance members to refer to cases using a fully qualified type, as with other static members.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/72bdb368/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5a72880ffed1a30cb9b8e3f372507145?s=50"></div><header><strong>[Discussion] Enum Leading Dot Prefixes</strong> from <string>Rob Mayoff</string> &lt;mayoff at dqd.com&gt;<p>February 11, 2016 at 09:00:00pm</p></header><div class="content"><p>On Thu, Feb 11, 2016 at 9:00 PM, Erica Sadun via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Unlike static members in structures and classes, enumeration cases can be<br>&gt; mentioned in initializers and instance methods without referencing a fully<br>&gt; qualified type.<br>&gt;<br></p><p>Why not go the other way then and allow instance methods to refer to static<br>members (or class members) directly, without the type name prefix?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/24917ac5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Discussion] Enum Leading Dot Prefixes</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>February 11, 2016 at 08:00:00pm</p></header><div class="content"><p>Your modification would affect the language on a large scale rather than creating a small tweak to become less out of sync with existing behavior. Technically, you&#39;d have to introduce name conflict resolution, among other things. And for a community that defeated &quot;required self&quot; only after a large scale heated debate, any change that would make the language less precise and less readable would be a hard sell.<br></p><p>-- E<br></p><p>&gt; On Feb 11, 2016, at 8:17 PM, Rob Mayoff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Thu, Feb 11, 2016 at 9:00 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Unlike static members in structures and classes, enumeration cases can be mentioned in initializers and instance methods without referencing a fully qualified type.<br>&gt; <br>&gt; Why not go the other way then and allow instance methods to refer to static members (or class members) directly, without the type name prefix?<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/1774313c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1696913cf1335685a75e63e11b459ae3?s=50"></div><header><strong>[Discussion] Enum Leading Dot Prefixes</strong> from <string>Sune Foldager</string> &lt;cyano at me.com&gt;<p>February 12, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On 12 Feb 2016, at 04:26, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; And for a community that defeated &quot;required self&quot; only after a large scale heated debate,<br></p><p>I think wording it like that misleadingly suggests that the proposal was in any way near passing, which certainly didn’t seem to be the case.<br></p><p>-Sune<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Discussion] Enum Leading Dot Prefixes</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>February 11, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On Feb 11, 2016, at 7:17 PM, Rob Mayoff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Thu, Feb 11, 2016 at 9:00 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Unlike static members in structures and classes, enumeration cases can be mentioned in initializers and instance methods without referencing a fully qualified type.<br>&gt; <br>&gt; Why not go the other way then and allow instance methods to refer to static members (or class members) directly, without the type name prefix?<br></p><p>As Erica says, this is a worthwhile topic to discuss, but orthogonal from the proposal.  Among other things we’d have to have a way to resolve the conflict that comes up when you have both a static and instance method with the same name (this occurs a few places in ObjC APIs).<br></p><p>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/07d9a4c1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>[Discussion] Enum Leading Dot Prefixes</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>February 11, 2016 at 11:00:00pm</p></header><div class="content"><p>Would it be worthwhile to expand this (or create another proposal) to deal with switch cases only allowing dot syntax for use with enum cases?<br></p><p>Luckily OptionSetType is ArrayLiteralConvertable, because &quot;case .True” fails because .True is not an enum case. AFAICT, this is the one case where dot prefixed values and methods are different than switch cases.<br></p><p>-DW<br></p><p>struct Decision : OptionSetType {<br>    typealias RawValue = UInt8<br>    <br>    let rawValue:RawValue<br>    <br>    internal init(rawValue: UInt8) {<br>        self.rawValue = rawValue<br>    }<br>    <br>    static let True = Decision(rawValue: 1)<br>    static let False = Decision(rawValue: 2)<br>}<br></p><p>let godel:Decision = [.True, .False]<br></p><p>switch godel {<br>case [.True]:<br>    print (&quot;true!&quot;)<br>case [.False]:<br>    print (&quot;false!&quot;)<br>case [.True, .False]:<br>    print (&quot;both true and false!&quot;)<br>default:<br>    print (&quot;neither true nor false!&quot;)<br>}<br></p><p>&gt; On Feb 11, 2016, at 9:28 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 11, 2016, at 7:17 PM, Rob Mayoff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Thu, Feb 11, 2016 at 9:00 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; Unlike static members in structures and classes, enumeration cases can be mentioned in initializers and instance methods without referencing a fully qualified type.<br>&gt;&gt; <br>&gt;&gt; Why not go the other way then and allow instance methods to refer to static members (or class members) directly, without the type name prefix?<br>&gt; <br>&gt; As Erica says, this is a worthwhile topic to discuss, but orthogonal from the proposal.  Among other things we’d have to have a way to resolve the conflict that comes up when you have both a static and instance method with the same name (this occurs a few places in ObjC APIs).<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/672ab86c/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Discussion] Enum Leading Dot Prefixes</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>February 12, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Feb 11, 2016, at 22:27 , David Waite via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Would it be worthwhile to expand this (or create another proposal) to deal with switch cases only allowing dot syntax for use with enum cases?<br></p><p>I would be against that. I like being able to use static members with shorthand.<br></p><p>textField.font = .systemFontOfSize(48)<br></p><p>switch point {<br>case .zero:<br>  print(&quot;origin&quot;)<br>case _ where point.x &lt; 0:<br>  print(&quot;negative x&quot;)<br>default:<br>  print(&quot;uninteresting&quot;)<br>}<br></p><p>Jordan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160212/4eccdf2e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>[Discussion] Enum Leading Dot Prefixes</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>February 12, 2016 at 11:00:00am</p></header><div class="content"><p>I think you may have misunderstood - I’m asking if we can make your switch example into legal code :-)<br></p><p>var point = CGPoint.zero<br></p><p>switch point {<br>case .zero: // Error: Enum case &#39;zero&#39; not found in type &#39;CGPoint&#39;<br></p><p>-DW<br></p><p>&gt; On Feb 12, 2016, at 10:57 AM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 11, 2016, at 22:27 , David Waite via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Would it be worthwhile to expand this (or create another proposal) to deal with switch cases only allowing dot syntax for use with enum cases?<br>&gt; <br>&gt; I would be against that. I like being able to use static members with shorthand.<br>&gt; <br>&gt; textField.font = .systemFontOfSize(48)<br>&gt; <br>&gt; switch point {<br>&gt; case .zero:<br>&gt;   print(&quot;origin&quot;)<br>&gt; case _ where point.x &lt; 0:<br>&gt;   print(&quot;negative x&quot;)<br>&gt; default:<br>&gt;   print(&quot;uninteresting&quot;)<br>&gt; }<br>&gt; <br>&gt; Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160212/db7531d7/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: signature.asc<br>Type: application/pgp-signature<br>Size: 496 bytes<br>Desc: Message signed with OpenPGP using GPGMail<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160212/db7531d7/attachment.sig&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Discussion] Enum Leading Dot Prefixes</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>February 12, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Feb 12, 2016, at 10:24 AM, David Waite via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I think you may have misunderstood - I’m asking if we can make your switch example into legal code :-)<br>&gt; <br>&gt; var point = CGPoint.zero<br>&gt; <br>&gt; switch point {<br>&gt; case .zero: // Error: Enum case &#39;zero&#39; not found in type &#39;CGPoint&#39;<br></p><p>That&#39;s a bug.<br></p><p>-Joe<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160212/1f8fabb1/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Discussion] Enum Leading Dot Prefixes</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>February 12, 2016 at 11:00:00am</p></header><div class="content"><p>Ah, I misread that as you wanting to enforce it rather than allow it! I&#39;m with Joe; we can just consider that a bug. Mind filing it on bugs.swift.org?<br></p><p>Jordan<br></p><p>&gt; On Feb 12, 2016, at 10:24, David Waite &lt;david at alkaline-solutions.com&gt; wrote:<br>&gt; <br>&gt; I think you may have misunderstood - I’m asking if we can make your switch example into legal code :-)<br>&gt; <br>&gt; var point = CGPoint.zero<br>&gt; <br>&gt; switch point {<br>&gt; case .zero: // Error: Enum case &#39;zero&#39; not found in type &#39;CGPoint&#39;<br>&gt; <br>&gt; -DW<br>&gt; <br>&gt;&gt; On Feb 12, 2016, at 10:57 AM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 11, 2016, at 22:27 , David Waite via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Would it be worthwhile to expand this (or create another proposal) to deal with switch cases only allowing dot syntax for use with enum cases?<br>&gt;&gt; <br>&gt;&gt; I would be against that. I like being able to use static members with shorthand.<br>&gt;&gt; <br>&gt;&gt; textField.font = .systemFontOfSize(48)<br>&gt;&gt; <br>&gt;&gt; switch point {<br>&gt;&gt; case .zero:<br>&gt;&gt;   print(&quot;origin&quot;)<br>&gt;&gt; case _ where point.x &lt; 0:<br>&gt;&gt;   print(&quot;negative x&quot;)<br>&gt;&gt; default:<br>&gt;&gt;   print(&quot;uninteresting&quot;)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Jordan<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160212/8ece8b67/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d042be5dcfe90e649f760303af3e429?s=50"></div><header><strong>[Discussion] Enum Leading Dot Prefixes</strong> from <string>Jens Persson</string> &lt;jens at bitcycle.com&gt;<p>February 12, 2016 at 08:00:00pm</p></header><div class="content"><p>+1 for this proposal.<br>/Jens<br></p><p>On Fri, Feb 12, 2016 at 8:18 PM, Jordan Rose via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Ah, I misread that as you wanting to *enforce* it rather than *allow* it!<br>&gt; I&#39;m with Joe; we can just consider that a bug. Mind filing it on<br>&gt; bugs.swift.org?<br>&gt;<br>&gt; Jordan<br>&gt;<br>&gt; On Feb 12, 2016, at 10:24, David Waite &lt;david at alkaline-solutions.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; I think you may have misunderstood - I’m asking if we can make your switch<br>&gt; example into legal code :-)<br>&gt;<br>&gt; var point = CGPoint.zero<br>&gt;<br>&gt; switch point {<br>&gt; case .zero: // Error: Enum case &#39;zero&#39; not found in type &#39;CGPoint&#39;<br>&gt;<br>&gt; -DW<br>&gt;<br>&gt; On Feb 12, 2016, at 10:57 AM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Feb 11, 2016, at 22:27 , David Waite via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Would it be worthwhile to expand this (or create another proposal) to deal<br>&gt; with switch cases only allowing dot syntax for use with enum cases?<br>&gt;<br>&gt;<br>&gt; I would be against that. I like being able to use static members with<br>&gt; shorthand.<br>&gt;<br>&gt; textField.font = .systemFontOfSize(48)<br>&gt;<br>&gt;<br>&gt; switch point {<br>&gt; case .zero:<br>&gt;   print(&quot;origin&quot;)<br>&gt; case _ where point.x &lt; 0:<br>&gt;   print(&quot;negative x&quot;)<br>&gt; default:<br>&gt;   print(&quot;uninteresting&quot;)<br>&gt; }<br>&gt;<br>&gt;<br>&gt; Jordan<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p><p><br>-- <br>bitCycle AB | Smedjegatan 12 | 742 32 Östhammar | Sweden<br>http://www.bitcycle.com/<br>Phone: +46-73-753 24 62<br>E-mail: jens at bitcycle.com<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160212/e554e0b0/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>[Discussion] Enum Leading Dot Prefixes</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>February 12, 2016 at 01:00:00pm</p></header><div class="content"><p>You got it. SR-719 and also SR-720.<br></p><p>-DW<br></p><p>&gt; On Feb 12, 2016, at 12:18 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; Ah, I misread that as you wanting to enforce it rather than allow it! I&#39;m with Joe; we can just consider that a bug. Mind filing it on bugs.swift.org &lt;http://bugs.swift.org/&gt;?<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt;&gt; On Feb 12, 2016, at 10:24, David Waite &lt;david at alkaline-solutions.com &lt;mailto:david at alkaline-solutions.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I think you may have misunderstood - I’m asking if we can make your switch example into legal code :-)<br>&gt;&gt; <br>&gt;&gt; var point = CGPoint.zero<br>&gt;&gt; <br>&gt;&gt; switch point {<br>&gt;&gt; case .zero: // Error: Enum case &#39;zero&#39; not found in type &#39;CGPoint&#39;<br>&gt;&gt; <br>&gt;&gt; -DW<br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 12, 2016, at 10:57 AM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 11, 2016, at 22:27 , David Waite via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Would it be worthwhile to expand this (or create another proposal) to deal with switch cases only allowing dot syntax for use with enum cases?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I would be against that. I like being able to use static members with shorthand.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; textField.font = .systemFontOfSize(48)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; switch point {<br>&gt;&gt;&gt; case .zero:<br>&gt;&gt;&gt;   print(&quot;origin&quot;)<br>&gt;&gt;&gt; case _ where point.x &lt; 0:<br>&gt;&gt;&gt;   print(&quot;negative x&quot;)<br>&gt;&gt;&gt; default:<br>&gt;&gt;&gt;   print(&quot;uninteresting&quot;)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jordan<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160212/3622be2f/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: smime.p7s<br>Type: application/pkcs7-signature<br>Size: 4139 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160212/3622be2f/attachment.p7s&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>[Discussion] Enum Leading Dot Prefixes</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>February 15, 2016 at 09:00:00am</p></header><div class="content"><p>+1 for the proposal, it is wierd to use `.` in some places and not others.<br></p><p>On the subject of static methods and properties in general, would it be<br>possible for `.name` to be a reference to a static and `name` a reference<br>to an instance? EG:<br></p><p>    .name = x // static<br>    name = x // instance<br>    x = name + .name // instance + static<br>    r = name ... .name // instance ... static, needs space<br>    r = name...Type.name // Can still qualify with type name<br></p><p>On Friday, 12 February 2016, Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On Feb 11, 2016, at 7:17 PM, Rob Mayoff via swift-evolution &lt;<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt; On Thu, Feb 11, 2016 at 9:00 PM, Erica Sadun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt;&gt; Unlike static members in structures and classes, enumeration cases can be<br>&gt;&gt; mentioned in initializers and instance methods without referencing a fully<br>&gt;&gt; qualified type.<br>&gt;&gt;<br>&gt;<br>&gt; Why not go the other way then and allow instance methods to refer to<br>&gt; static members (or class members) directly, without the type name prefix?<br>&gt;<br>&gt;<br>&gt; As Erica says, this is a worthwhile topic to discuss, but orthogonal from<br>&gt; the proposal.  Among other things we’d have to have a way to resolve the<br>&gt; conflict that comes up when you have both a static and instance method with<br>&gt; the same name (this occurs a few places in ObjC APIs).<br>&gt;<br>&gt; -Chris<br>&gt;<br>&gt;<br></p><p>-- <br>-- Howard.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160215/d8917538/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Discussion] Enum Leading Dot Prefixes</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>February 11, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; https://gist.github.com/erica/e0b8a3a22ab716a19db4<br>&gt; <br>&gt; Requiring Leading Dot Prefixes for Enum Instance Member Implementations<br>&gt; <br>&gt; 	• Proposal: TBD<br>&gt; 	• Author(s): Erica Sadun, Chris Lattner<br>&gt; 	• Status: TBD<br>&gt; 	• Review manager: TBD<br></p><p>+1. I&#39;ve always found this slightly bizarre.<br></p><p>I assume, though, that if you&#39;re writing a static member of an enum, the unprefixed form is fine?<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Discussion] Enum Leading Dot Prefixes</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>February 11, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Feb 11, 2016, at 9:09 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt; https://gist.github.com/erica/e0b8a3a22ab716a19db4<br>&gt;&gt; <br>&gt;&gt; Requiring Leading Dot Prefixes for Enum Instance Member Implementations<br>&gt;&gt; <br>&gt;&gt; 	• Proposal: TBD<br>&gt;&gt; 	• Author(s): Erica Sadun, Chris Lattner<br>&gt;&gt; 	• Status: TBD<br>&gt;&gt; 	• Review manager: TBD<br>&gt; <br>&gt; +1. I&#39;ve always found this slightly bizarre.<br>&gt; <br>&gt; I assume, though, that if you&#39;re writing a static member of an enum, the unprefixed form is fine?<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br></p><p>In this write-up I recommend using a prefixed form there too for consistency (staticFunc2), but I&#39;m not married to it.<br></p><p>-- E<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Discussion] Enum Leading Dot Prefixes</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>February 12, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Feb 11, 2016, at 8:09 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; https://gist.github.com/erica/e0b8a3a22ab716a19db4<br>&gt;&gt; <br>&gt;&gt; Requiring Leading Dot Prefixes for Enum Instance Member Implementations<br>&gt;&gt; <br>&gt;&gt; 	• Proposal: TBD<br>&gt;&gt; 	• Author(s): Erica Sadun, Chris Lattner<br>&gt;&gt; 	• Status: TBD<br>&gt;&gt; 	• Review manager: TBD<br>&gt; <br>&gt; +1. I&#39;ve always found this slightly bizarre.<br>&gt; <br>&gt; I assume, though, that if you&#39;re writing a static member of an enum, the unprefixed form is fine?<br></p><p>Yes, that makes sense to me.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Discussion] Enum Leading Dot Prefixes</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>February 12, 2016 at 02:00:00pm</p></header><div class="content"><p>Pull request: https://github.com/apple/swift-evolution/pull/153/files &lt;https://github.com/apple/swift-evolution/pull/153/files&gt;<br></p><p><br>&gt; On Feb 12, 2016, at 10:23 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 11, 2016, at 8:09 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; https://gist.github.com/erica/e0b8a3a22ab716a19db4<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Requiring Leading Dot Prefixes for Enum Instance Member Implementations<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	• Proposal: TBD<br>&gt;&gt;&gt; 	• Author(s): Erica Sadun, Chris Lattner<br>&gt;&gt;&gt; 	• Status: TBD<br>&gt;&gt;&gt; 	• Review manager: TBD<br>&gt;&gt; <br>&gt;&gt; +1. I&#39;ve always found this slightly bizarre.<br>&gt;&gt; <br>&gt;&gt; I assume, though, that if you&#39;re writing a static member of an enum, the unprefixed form is fine?<br>&gt; <br>&gt; Yes, that makes sense to me.<br>&gt; <br>&gt; -Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160212/c0c5ebca/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5964fd17efcebf88154b1fba66f1c198?s=50"></div><header><strong>[Discussion] Enum Leading Dot Prefixes</strong> from <string>Carlos Parada</string> &lt;carlosparada at me.com&gt;<p>February 11, 2016 at 10:00:00pm</p></header><div class="content"><p>Taking consistency further, should the definition also use dot prefixes? For example:<br></p><p>&gt; enum Coin {<br>&gt;     case .Heads, .Tails<br>&gt;     func printMe() {<br>&gt;         switch self {<br>&gt;         case .Heads: print(&quot;Heads&quot;)<br>&gt;         case .Tails: print(&quot;Tails&quot;)<br>&gt;         }<br>&gt;     }<br>&gt; }<br></p><p>— Carlos Parada<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/1ce4fd4f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Discussion] Enum Leading Dot Prefixes</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>February 12, 2016 at 08:00:00am</p></header><div class="content"><p>Are there any reasons why it makes sense to add them to the declaration? There&#39;s no other place in the language where a member is declared (vs referenced) using a dot prefix so I&#39;d personally lean towards &quot;no&quot;. <br></p><p>-- Erica<br></p><p>&gt; On Feb 11, 2016, at 11:41 PM, Carlos Parada &lt;carlosparada at me.com&gt; wrote:<br>&gt; <br>&gt; Taking consistency further, should the definition also use dot prefixes? For example:<br>&gt; <br>&gt;&gt; enum Coin {<br>&gt;&gt;     case .Heads, .Tails<br>&gt;&gt;     func printMe() {<br>&gt;&gt;         switch self {<br>&gt;&gt;         case .Heads: print(&quot;Heads&quot;)<br>&gt;&gt;         case .Tails: print(&quot;Tails&quot;)<br>&gt;&gt;         }<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt; <br>&gt; — Carlos Parada<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160212/ba815afd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>[Discussion] Enum Leading Dot Prefixes</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>February 12, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Feb 12, 2016, at 7:57 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Are there any reasons why it makes sense to add them to the declaration? There&#39;s no other place in the language where a member is declared (vs referenced) using a dot prefix so I&#39;d personally lean towards &quot;no&quot;.<br></p><p>Completely agree with this.<br></p><p>-David<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5964fd17efcebf88154b1fba66f1c198?s=50"></div><header><strong>[Discussion] Enum Leading Dot Prefixes</strong> from <string>Carlos Parada</string> &lt;carlosparada at me.com&gt;<p>February 12, 2016 at 09:00:00am</p></header><div class="content"><p>I see your point and I agree. I agree with the proposal as it. Thanks Erica.<br></p><p>— Carlos Parada<br></p><p>&gt; On Feb 12, 2016, at 7:57 AM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; Are there any reasons why it makes sense to add them to the declaration? There&#39;s no other place in the language where a member is declared (vs referenced) using a dot prefix so I&#39;d personally lean towards &quot;no&quot;. <br>&gt; <br>&gt; -- Erica<br>&gt; <br>&gt;&gt; On Feb 11, 2016, at 11:41 PM, Carlos Parada &lt;carlosparada at me.com &lt;mailto:carlosparada at me.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Taking consistency further, should the definition also use dot prefixes? For example:<br>&gt;&gt; <br>&gt;&gt;&gt; enum Coin {<br>&gt;&gt;&gt;     case .Heads, .Tails<br>&gt;&gt;&gt;     func printMe() {<br>&gt;&gt;&gt;         switch self {<br>&gt;&gt;&gt;         case .Heads: print(&quot;Heads&quot;)<br>&gt;&gt;&gt;         case .Tails: print(&quot;Tails&quot;)<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; — Carlos Parada<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160212/c3b0c7ef/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>[Discussion] Enum Leading Dot Prefixes</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>February 13, 2016 at 01:00:00pm</p></header><div class="content"><p>The honest and lazy truth? Muscle memory.  I type `case .&lt;Foo&gt;` much more<br>than `case &lt;Foo&gt;` so I tend to pause during declaration more often than I<br>would like. I can let it go now that I have floated the idea but that was<br>the reason I pitched it.<br>TJ<br></p><p>On Fri, Feb 12, 2016 at 10:57 AM, Erica Sadun via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Are there any reasons why it makes sense to add them to the declaration?<br>&gt; There&#39;s no other place in the language where a member is declared (vs<br>&gt; referenced) using a dot prefix so I&#39;d personally lean towards &quot;no&quot;.<br>&gt;<br>&gt; -- Erica<br>&gt;<br>&gt; On Feb 11, 2016, at 11:41 PM, Carlos Parada &lt;carlosparada at me.com&gt; wrote:<br>&gt;<br>&gt; Taking consistency further, should the definition also use dot prefixes?<br>&gt; For example:<br>&gt;<br>&gt; enum Coin {<br>&gt;     case .Heads, .Tails<br>&gt;     func printMe() {<br>&gt;         switch self {<br>&gt;         case .Heads: print(&quot;Heads&quot;)<br>&gt;         case .Tails: print(&quot;Tails&quot;)<br>&gt;         }<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; — Carlos Parada<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160213/dda48b9c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Discussion] Enum Leading Dot Prefixes</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>February 14, 2016 at 05:00:00pm</p></header><div class="content"><p>But the dot prefix is not a specificity of enum cases: it’s the case (no pun intended) for all static members. So I don’t understand why you would suggest using it for the declaration of enum cases. It would un-necessarily tie dot prefix with Enums and hide for newcomers the fact it can also be used for other static members.<br></p><p>&gt; On 13 Feb 2016, at 19:02, T.J. Usiyan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The honest and lazy truth? Muscle memory.  I type `case .&lt;Foo&gt;` much more than `case &lt;Foo&gt;` so I tend to pause during declaration more often than I would like. I can let it go now that I have floated the idea but that was the reason I pitched it.<br>&gt; TJ<br>&gt; <br>&gt; On Fri, Feb 12, 2016 at 10:57 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Are there any reasons why it makes sense to add them to the declaration? There&#39;s no other place in the language where a member is declared (vs referenced) using a dot prefix so I&#39;d personally lean towards &quot;no&quot;. <br>&gt; <br>&gt; -- Erica<br>&gt; <br>&gt;&gt; On Feb 11, 2016, at 11:41 PM, Carlos Parada &lt;carlosparada at me.com &lt;mailto:carlosparada at me.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Taking consistency further, should the definition also use dot prefixes? For example:<br>&gt;&gt; <br>&gt;&gt;&gt; enum Coin {<br>&gt;&gt;&gt;     case .Heads, .Tails<br>&gt;&gt;&gt;     func printMe() {<br>&gt;&gt;&gt;         switch self {<br>&gt;&gt;&gt;         case .Heads: print(&quot;Heads&quot;)<br>&gt;&gt;&gt;         case .Tails: print(&quot;Tails&quot;)<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; — Carlos Parada<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160214/afe9c761/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Discussion] Enum Leading Dot Prefixes</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>February 12, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Feb 11, 2016, at 10:41 PM, Carlos Parada via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Taking consistency further, should the definition also use dot prefixes?<br></p><p>I agree with others’ comments downthread.  The goal here is to make enum cases more similar to static members, since that is how they behave.  Both static members and enum cases can be referred to with the leading dot syntax already, and we wouldn’t add dot to the declaration of static members.<br></p><p>-Chris<br></p><p><br>&gt; For example:<br>&gt; <br>&gt;&gt; enum Coin {<br>&gt;&gt;     case .Heads, .Tails<br>&gt;&gt;     func printMe() {<br>&gt;&gt;         switch self {<br>&gt;&gt;         case .Heads: print(&quot;Heads&quot;)<br>&gt;&gt;         case .Tails: print(&quot;Tails&quot;)<br>&gt;&gt;         }<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt; <br>&gt; — Carlos Parada<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160212/3944219a/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5af07e950f10c7c1df1c44bed055c1eb?s=50"></div><header><strong>[Discussion] Enum Leading Dot Prefixes</strong> from <string>Daniel Steinberg</string> &lt;daniel at dimsumthinking.com&gt;<p>February 12, 2016 at 09:00:00am</p></header><div class="content"><p>+1 for consistency reasons<br></p><p>&gt; On Feb 11, 2016, at 10:00 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; https://gist.github.com/erica/e0b8a3a22ab716a19db4 &lt;https://gist.github.com/erica/e0b8a3a22ab716a19db4&gt;<br>&gt; <br>&gt; Requiring Leading Dot Prefixes for Enum Instance Member Implementations<br>&gt; <br>&gt; Proposal: TBD<br>&gt; Author(s): Erica Sadun &lt;http://github.com/erica&gt;, Chris Lattner &lt;https://github.com/lattner&gt;<br>&gt; Status: TBD<br>&gt; Review manager: TBD<br>&gt;  &lt;https://gist.github.com/erica/e0b8a3a22ab716a19db4#introduction&gt;Introduction<br>&gt; <br>&gt; Enumeration cases are essentially static not instance type members. Unlike static members in structures and classes, enumeration cases can be mentioned in initializers and instance methods without referencing a fully qualified type. This makes little sense. In no other case can an instance implementation directly access a static member. This proposal introduces a rule that requires leading dots or fully qualified references (EnumType.caseMember) to provide a more consistent developer experience to clearly disambiguate static cases from instance members. <br>&gt; <br>&gt;  &lt;https://gist.github.com/erica/e0b8a3a22ab716a19db4#motivation&gt;Motivation<br>&gt; <br>&gt; Swift infers the enclosing type for a case on a developer&#39;s behalf when the use is unambiguously of a single enumeration type. Inference enables you to craft switch statements like this:<br>&gt; <br>&gt; switch Coin() {<br>&gt; case .Heads: print(&quot;Heads&quot;)<br>&gt; case .Tails: print(&quot;Tails&quot;)<br>&gt; }<br>&gt; A leading dot has become a conventional shorthand for &quot;enumeration case&quot; across the language. When used internally in enum implementations, a leading dot is not required, nor is a type name to access the static case member. The following code is legal in Swift.<br>&gt; <br>&gt; enum Coin {<br>&gt;     case Heads, Tails<br>&gt;     func printMe() {<br>&gt;         switch self {<br>&gt;         case Heads: print(&quot;Heads&quot;)  // no leading dot<br>&gt;         case .Tails: print(&quot;Tails&quot;) // leading dot<br>&gt;         }<br>&gt; <br>&gt;         if self == Heads {          // no leading dot<br>&gt;             print(&quot;This is a head&quot;)<br>&gt;         }<br>&gt; <br>&gt;         if self == .Tails {         // leading dot<br>&gt;             print(&quot;This is a tail&quot;)<br>&gt;         }<br>&gt;     }<br>&gt; <br>&gt;     init() {<br>&gt;         let cointoss = arc4random_uniform(2) == 0<br>&gt;         self = cointoss ? .Heads : Tails // mix and match leading dots<br>&gt;     }<br>&gt; }<br>&gt; This quirk produces a language inconsistency that can confuse developers and contravenes the guiding Principle of Least Astonishment. We propose to mandate a leading dot. This will bring case mentions into lock-step with the conventions used to reference them outside of enumeration type implementations.<br>&gt; <br>&gt;  &lt;https://gist.github.com/erica/e0b8a3a22ab716a19db4#detail-design&gt;Detail Design<br>&gt; <br>&gt; Under this rule, the compiler will require a leading dot for all case members. The change will not affect other static members, which require fully qualified references from instance methods and infer self from static methods.<br>&gt; <br>&gt; enum Coin {<br>&gt;     case Heads, Tails<br>&gt;     static func doSomething() { print(&quot;Something&quot;) }<br>&gt;     static func staticFunc() { doSomething() } // does not require leading dot<br>&gt;     static func staticFunc2() { let foo = .Tails } // requires leading dot<br>&gt;     func instanceFunc() { self.dynamicType.doSomething() } // requires full qualification<br>&gt;     func otherFunc() { if self == .Heads ... } // requires leading dot, also initializers<br>&gt; <br>&gt;     /// ...<br>&gt; } <br>&gt;  &lt;https://gist.github.com/erica/e0b8a3a22ab716a19db4#alternatives-considered&gt;Alternatives Considered<br>&gt; <br>&gt; Other than leaving the status quo, the language could force instance members to refer to cases using a fully qualified type, as with other static members.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160212/c6ca5b16/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>[Discussion] Enum Leading Dot Prefixes</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>February 12, 2016 at 10:00:00am</p></header><div class="content"><p>+1 and I would not object to requiring the leading dot for enum<br>declarations.<br></p><p>On Fri, Feb 12, 2016 at 9:23 AM, Daniel Steinberg via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; +1 for consistency reasons<br>&gt;<br>&gt; On Feb 11, 2016, at 10:00 PM, Erica Sadun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; https://gist.github.com/erica/e0b8a3a22ab716a19db4<br>&gt;<br>&gt; Requiring Leading Dot Prefixes for Enum Instance Member Implementations<br>&gt;<br>&gt;    - Proposal: TBD<br>&gt;    - Author(s): Erica Sadun &lt;http://github.com/erica&gt;, Chris Lattner<br>&gt;    &lt;https://github.com/lattner&gt;<br>&gt;    - Status: TBD<br>&gt;    - Review manager: TBD<br>&gt;<br>&gt; &lt;https://gist.github.com/erica/e0b8a3a22ab716a19db4#introduction&gt;<br>&gt; Introduction<br>&gt;<br>&gt; Enumeration cases are essentially static not instance type members. Unlike<br>&gt; static members in structures and classes, enumeration cases can be<br>&gt; mentioned in initializers and instance methods without referencing a fully<br>&gt; qualified type. This makes little sense. In no other case can an instance<br>&gt; implementation directly access a static member. This proposal introduces a<br>&gt; rule that requires leading dots or fully qualified references<br>&gt; (EnumType.caseMember) to provide a more consistent developer experience to<br>&gt; clearly disambiguate static cases from instance members.<br>&gt; &lt;https://gist.github.com/erica/e0b8a3a22ab716a19db4#motivation&gt;Motivation<br>&gt;<br>&gt; Swift infers the enclosing type for a case on a developer&#39;s behalf when<br>&gt; the use is unambiguously of a single enumeration type. Inference enables<br>&gt; you to craft switch statements like this:<br>&gt;<br>&gt; switch Coin() {case .Heads: print(&quot;Heads&quot;)case .Tails: print(&quot;Tails&quot;)<br>&gt; }<br>&gt;<br>&gt; A leading dot has become a conventional shorthand for &quot;enumeration case&quot;<br>&gt; across the language. When used internally in enum implementations, a<br>&gt; leading dot is not required, nor is a type name to access the static case<br>&gt; member. The following code is legal in Swift.<br>&gt;<br>&gt; enum Coin {<br>&gt;     case Heads, Tails<br>&gt;     func printMe() {<br>&gt;         switch self {<br>&gt;         case Heads: print(&quot;Heads&quot;)  // no leading dot<br>&gt;         case .Tails: print(&quot;Tails&quot;) // leading dot<br>&gt;         }<br>&gt;<br>&gt;         if self == Heads {          // no leading dot<br>&gt;             print(&quot;This is a head&quot;)<br>&gt;         }<br>&gt;<br>&gt;         if self == .Tails {         // leading dot<br>&gt;             print(&quot;This is a tail&quot;)<br>&gt;         }<br>&gt;     }<br>&gt;<br>&gt;     init() {<br>&gt;         let cointoss = arc4random_uniform(2) == 0<br>&gt;         self = cointoss ? .Heads : Tails // mix and match leading dots<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; This quirk produces a language inconsistency that can confuse developers<br>&gt; and contravenes the guiding *Principle of Least Astonishment*. We propose<br>&gt; to mandate a leading dot. This will bring case mentions into lock-step with<br>&gt; the conventions used to reference them outside of enumeration type<br>&gt; implementations.<br>&gt; &lt;https://gist.github.com/erica/e0b8a3a22ab716a19db4#detail-design&gt;Detail<br>&gt; Design<br>&gt;<br>&gt; Under this rule, the compiler will require a leading dot for all case<br>&gt; members. The change will not affect other static members, which require<br>&gt; fully qualified references from instance methods and infer self from<br>&gt; static methods.<br>&gt;<br>&gt; enum Coin {<br>&gt;     case Heads, Tails<br>&gt;     static func doSomething() { print(&quot;Something&quot;) }<br>&gt;     static func staticFunc() { doSomething() } // does not require leading dot<br>&gt;     static func staticFunc2() { let foo = .Tails } // requires leading dot<br>&gt;     func instanceFunc() { self.dynamicType.doSomething() } // requires full qualification<br>&gt;     func otherFunc() { if self == .Heads ... } // requires leading dot, also initializers<br>&gt;<br>&gt;     /// ...<br>&gt; }<br>&gt;<br>&gt;<br>&gt; &lt;https://gist.github.com/erica/e0b8a3a22ab716a19db4#alternatives-considered&gt;Alternatives<br>&gt; Considered<br>&gt; Other than leaving the status quo, the language could force instance<br>&gt; members to refer to cases using a fully qualified type, as with other<br>&gt; static members.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160212/5a554b57/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>[Discussion] Enum Leading Dot Prefixes</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>February 12, 2016 at 09:00:00am</p></header><div class="content"><p>I like this, but I think it needs to handle more cases to truly promote consistency.<br></p><p>In static contexts, use of the case is consistent with that of a static variable or function (value directly in scope, so no dot prefix shortcut necessary).<br></p><p>enum Booly {<br>    case truth<br>    case falsehood<br>    <br>    static let yes = truth<br>    static let no = falsehood<br></p><p>    static func defaulted() -&gt; Booly {<br>        return truth<br>    }<br></p><p>    static func workingAlternative() -&gt; Booly {<br>        return yes<br>    }<br></p><p>It is however a special case in the non-static context:<br></p><p>extension Booly {<br>    func isDefault() -&gt; Bool {<br>        return self == truth<br>    }<br>    <br>    func brokenYesVersion() -&gt; Bool {<br>        // return self == yes // Error: Static member &#39;yes&#39; cannot be used on instance of type &#39;Booly&#39;<br>        return self == .yes<br>    }<br>}<br></p><p>And case usage is inconsistent in the body of a switch statement. In situations like an OptionSetType implementation, the compiler will complain about use of dot syntax w.r.t. not being an enumeration member. <br></p><p>import Foundation<br></p><p>let flags:CFStringCompareFlags = [.CompareAnchored]<br></p><p>switch flags {<br>// case .CompareAnchored: // Error: Enum case &#39;CompareAnchored&#39; ont found in type &#39;CFStringCompareFlags&#39;<br>case CFStringCompareFlags.CompareAnchored:<br>    print(&quot;Anchored&quot;)<br>default:<br>    ()<br>}<br></p><p>In the case of enumerations, it will complain about anything from the enumerated type other than the case label!<br></p><p>let b:Booly = .yes<br></p><p>// switch b {<br>// case yes:  // Error: Use of unresolved identifier ‘yes’<br>// case .yes: // Error: Enum case &#39;yes&#39; not found in type &#39;Booly&#39;<br>// case Booly.yes: // Error: Enum case &#39;yes&#39; not found in type &#39;Booly&#39;<br>//}<br></p><p>let externalYes = Booly.truth<br></p><p>switch b {<br>case externalYes:<br>    print (&quot;finally, yes!&quot;)<br>default:<br>    ()<br>}<br></p><p>IMHO, the *only* thing that the compiler should do special with case variable usage is that, when the type beings switched over is an enum and the cases of that enum are all specified as possible cases of the switch, not require the use of a default section.<br></p><p>(playground code copied to https://gist.github.com/dwaite/60c8dc05e498b747d0f2 )<br></p><p>-DW<br></p><p>&gt; On Feb 12, 2016, at 7:23 AM, Daniel Steinberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1 for consistency reasons<br>&gt; <br>&gt;&gt; On Feb 11, 2016, at 10:00 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; https://gist.github.com/erica/e0b8a3a22ab716a19db4 &lt;https://gist.github.com/erica/e0b8a3a22ab716a19db4&gt;<br>&gt;&gt; <br>&gt;&gt; Requiring Leading Dot Prefixes for Enum Instance Member Implementations<br>&gt;&gt; <br>&gt;&gt; Proposal: TBD<br>&gt;&gt; Author(s): Erica Sadun &lt;http://github.com/erica&gt;, Chris Lattner &lt;https://github.com/lattner&gt;<br>&gt;&gt; Status: TBD<br>&gt;&gt; Review manager: TBD<br>&gt;&gt;  &lt;https://gist.github.com/erica/e0b8a3a22ab716a19db4#introduction&gt;Introduction<br>&gt;&gt; <br>&gt;&gt; Enumeration cases are essentially static not instance type members. Unlike static members in structures and classes, enumeration cases can be mentioned in initializers and instance methods without referencing a fully qualified type. This makes little sense. In no other case can an instance implementation directly access a static member. This proposal introduces a rule that requires leading dots or fully qualified references (EnumType.caseMember) to provide a more consistent developer experience to clearly disambiguate static cases from instance members. <br>&gt;&gt; <br>&gt;&gt;  &lt;https://gist.github.com/erica/e0b8a3a22ab716a19db4#motivation&gt;Motivation<br>&gt;&gt; <br>&gt;&gt; Swift infers the enclosing type for a case on a developer&#39;s behalf when the use is unambiguously of a single enumeration type. Inference enables you to craft switch statements like this:<br>&gt;&gt; <br>&gt;&gt; switch Coin() {<br>&gt;&gt; case .Heads: print(&quot;Heads&quot;)<br>&gt;&gt; case .Tails: print(&quot;Tails&quot;)<br>&gt;&gt; }<br>&gt;&gt; A leading dot has become a conventional shorthand for &quot;enumeration case&quot; across the language. When used internally in enum implementations, a leading dot is not required, nor is a type name to access the static case member. The following code is legal in Swift.<br>&gt;&gt; <br>&gt;&gt; enum Coin {<br>&gt;&gt;     case Heads, Tails<br>&gt;&gt;     func printMe() {<br>&gt;&gt;         switch self {<br>&gt;&gt;         case Heads: print(&quot;Heads&quot;)  // no leading dot<br>&gt;&gt;         case .Tails: print(&quot;Tails&quot;) // leading dot<br>&gt;&gt;         }<br>&gt;&gt; <br>&gt;&gt;         if self == Heads {          // no leading dot<br>&gt;&gt;             print(&quot;This is a head&quot;)<br>&gt;&gt;         }<br>&gt;&gt; <br>&gt;&gt;         if self == .Tails {         // leading dot<br>&gt;&gt;             print(&quot;This is a tail&quot;)<br>&gt;&gt;         }<br>&gt;&gt;     }<br>&gt;&gt; <br>&gt;&gt;     init() {<br>&gt;&gt;         let cointoss = arc4random_uniform(2) == 0<br>&gt;&gt;         self = cointoss ? .Heads : Tails // mix and match leading dots<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; This quirk produces a language inconsistency that can confuse developers and contravenes the guiding Principle of Least Astonishment. We propose to mandate a leading dot. This will bring case mentions into lock-step with the conventions used to reference them outside of enumeration type implementations.<br>&gt;&gt; <br>&gt;&gt;  &lt;https://gist.github.com/erica/e0b8a3a22ab716a19db4#detail-design&gt;Detail Design<br>&gt;&gt; <br>&gt;&gt; Under this rule, the compiler will require a leading dot for all case members. The change will not affect other static members, which require fully qualified references from instance methods and infer self from static methods.<br>&gt;&gt; <br>&gt;&gt; enum Coin {<br>&gt;&gt;     case Heads, Tails<br>&gt;&gt;     static func doSomething() { print(&quot;Something&quot;) }<br>&gt;&gt;     static func staticFunc() { doSomething() } // does not require leading dot<br>&gt;&gt;     static func staticFunc2() { let foo = .Tails } // requires leading dot<br>&gt;&gt;     func instanceFunc() { self.dynamicType.doSomething() } // requires full qualification<br>&gt;&gt;     func otherFunc() { if self == .Heads ... } // requires leading dot, also initializers<br>&gt;&gt; <br>&gt;&gt;     /// ...<br>&gt;&gt; } <br>&gt;&gt;  &lt;https://gist.github.com/erica/e0b8a3a22ab716a19db4#alternatives-considered&gt;Alternatives Considered<br>&gt;&gt; <br>&gt;&gt; Other than leaving the status quo, the language could force instance members to refer to cases using a fully qualified type, as with other static members.<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160212/a426a9d6/attachment-0001.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/05e222e6ef4d84013bb3baeb0e25c90b?s=50"></div><header><strong>[Discussion] Enum Leading Dot Prefixes</strong> from <string>Patrick Gili</string> &lt;gili.patrick.r at gili-labs.com&gt;<p>February 13, 2016 at 12:00:00pm</p></header><div class="content"><p>+1, as it adds consistency to the language.<br></p><p>&gt; On Feb 11, 2016, at 10:00 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; https://gist.github.com/erica/e0b8a3a22ab716a19db4 &lt;https://gist.github.com/erica/e0b8a3a22ab716a19db4&gt;<br>&gt; <br>&gt; Requiring Leading Dot Prefixes for Enum Instance Member Implementations<br>&gt; <br>&gt; Proposal: TBD<br>&gt; Author(s): Erica Sadun &lt;http://github.com/erica&gt;, Chris Lattner &lt;https://github.com/lattner&gt;<br>&gt; Status: TBD<br>&gt; Review manager: TBD<br>&gt;  &lt;https://gist.github.com/erica/e0b8a3a22ab716a19db4#introduction&gt;Introduction<br>&gt; <br>&gt; Enumeration cases are essentially static not instance type members. Unlike static members in structures and classes, enumeration cases can be mentioned in initializers and instance methods without referencing a fully qualified type. This makes little sense. In no other case can an instance implementation directly access a static member. This proposal introduces a rule that requires leading dots or fully qualified references (EnumType.caseMember) to provide a more consistent developer experience to clearly disambiguate static cases from instance members. <br>&gt; <br>&gt;  &lt;https://gist.github.com/erica/e0b8a3a22ab716a19db4#motivation&gt;Motivation<br>&gt; <br>&gt; Swift infers the enclosing type for a case on a developer&#39;s behalf when the use is unambiguously of a single enumeration type. Inference enables you to craft switch statements like this:<br>&gt; <br>&gt; switch Coin() {<br>&gt; case .Heads: print(&quot;Heads&quot;)<br>&gt; case .Tails: print(&quot;Tails&quot;)<br>&gt; }<br>&gt; A leading dot has become a conventional shorthand for &quot;enumeration case&quot; across the language. When used internally in enum implementations, a leading dot is not required, nor is a type name to access the static case member. The following code is legal in Swift.<br>&gt; <br>&gt; enum Coin {<br>&gt;     case Heads, Tails<br>&gt;     func printMe() {<br>&gt;         switch self {<br>&gt;         case Heads: print(&quot;Heads&quot;)  // no leading dot<br>&gt;         case .Tails: print(&quot;Tails&quot;) // leading dot<br>&gt;         }<br>&gt; <br>&gt;         if self == Heads {          // no leading dot<br>&gt;             print(&quot;This is a head&quot;)<br>&gt;         }<br>&gt; <br>&gt;         if self == .Tails {         // leading dot<br>&gt;             print(&quot;This is a tail&quot;)<br>&gt;         }<br>&gt;     }<br>&gt; <br>&gt;     init() {<br>&gt;         let cointoss = arc4random_uniform(2) == 0<br>&gt;         self = cointoss ? .Heads : Tails // mix and match leading dots<br>&gt;     }<br>&gt; }<br>&gt; This quirk produces a language inconsistency that can confuse developers and contravenes the guiding Principle of Least Astonishment. We propose to mandate a leading dot. This will bring case mentions into lock-step with the conventions used to reference them outside of enumeration type implementations.<br>&gt; <br>&gt;  &lt;https://gist.github.com/erica/e0b8a3a22ab716a19db4#detail-design&gt;Detail Design<br>&gt; <br>&gt; Under this rule, the compiler will require a leading dot for all case members. The change will not affect other static members, which require fully qualified references from instance methods and infer self from static methods.<br>&gt; <br>&gt; enum Coin {<br>&gt;     case Heads, Tails<br>&gt;     static func doSomething() { print(&quot;Something&quot;) }<br>&gt;     static func staticFunc() { doSomething() } // does not require leading dot<br>&gt;     static func staticFunc2() { let foo = .Tails } // requires leading dot<br>&gt;     func instanceFunc() { self.dynamicType.doSomething() } // requires full qualification<br>&gt;     func otherFunc() { if self == .Heads ... } // requires leading dot, also initializers<br>&gt; <br>&gt;     /// ...<br>&gt; } <br>&gt;  &lt;https://gist.github.com/erica/e0b8a3a22ab716a19db4#alternatives-considered&gt;Alternatives Considered<br>&gt; <br>&gt; Other than leaving the status quo, the language could force instance members to refer to cases using a fully qualified type, as with other static members.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160213/1021ca05/attachment-0001.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5818a8a9211c31af95d6db8974457683?s=50"></div><header><strong>[Discussion] Enum Leading Dot Prefixes</strong> from <string>Joseph Lord</string> &lt;joseph at human-friendly.com&gt;<p>February 13, 2016 at 05:00:00pm</p></header><div class="content"><p>+1<br></p><p>Didn&#39;t even know it was legal. Definitely increases consistency and simplifies the language. <br></p><p>J<br></p><p>&gt; On Feb 12, 2016, at 3:00 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; https://gist.github.com/erica/e0b8a3a22ab716a19db4<br>&gt; <br>&gt; Requiring Leading Dot Prefixes for Enum Instance Member Implementations<br>&gt; <br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160213/cd61c7b4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>[Discussion] Enum Leading Dot Prefixes</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>February 13, 2016 at 09:00:00am</p></header><div class="content"><p>I am assuming there would be no dot in front of _? <br></p><p><br>switch value {<br>	case .A: “A”<br>	case .B: “B”<br>	case ._:”D” // this is not correct?<br>}<br></p><p><br>&gt; On Feb 13, 2016, at 9:18 AM, Joseph Lord via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1<br>&gt; <br>&gt; Didn&#39;t even know it was legal. Definitely increases consistency and simplifies the language. <br>&gt; <br>&gt; J<br>&gt; <br>&gt; On Feb 12, 2016, at 3:00 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; https://gist.github.com/erica/e0b8a3a22ab716a19db4 &lt;https://gist.github.com/erica/e0b8a3a22ab716a19db4&gt;<br>&gt;&gt; <br>&gt;&gt; Requiring Leading Dot Prefixes for Enum Instance Member Implementations<br>&gt;&gt; <br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160213/3a7c9dde/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Discussion] Enum Leading Dot Prefixes</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>February 13, 2016 at 12:00:00pm</p></header><div class="content"><p>No. The wildcard match does not require a dot prefix.<br></p><p>-- E<br></p><p><br>&gt; On Feb 13, 2016, at 10:40 AM, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I am assuming there would be no dot in front of _? <br>&gt; <br>&gt; <br>&gt; switch value {<br>&gt; 	case .A: “A”<br>&gt; 	case .B: “B”<br>&gt; 	case ._:”D” // this is not correct?<br>&gt; }<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 13, 2016, at 9:18 AM, Joseph Lord via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; +1<br>&gt;&gt; <br>&gt;&gt; Didn&#39;t even know it was legal. Definitely increases consistency and simplifies the language. <br>&gt;&gt; <br>&gt;&gt; J<br>&gt;&gt; <br>&gt;&gt; On Feb 12, 2016, at 3:00 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; https://gist.github.com/erica/e0b8a3a22ab716a19db4 &lt;https://gist.github.com/erica/e0b8a3a22ab716a19db4&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Requiring Leading Dot Prefixes for Enum Instance Member Implementations<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160213/074e0ec7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>[Discussion] Enum Leading Dot Prefixes</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>February 13, 2016 at 01:00:00pm</p></header><div class="content"><p>Erica,<br></p><p>The current spec has the following line:<br></p><p>&gt; static func staticFunc2() { let foo = .Tails } // requires leading dot<br></p><p>The leading dot requirement does not exist today for references to static properties and functions from a static function.<br></p><p>Is your proposal to:<br>- require a dot in front of static properties/functions in this case as well for consistency across all static things<br>- require a dot only in front of the case statements, to promote consistency only for use of cases within an enum<br>- or, do you wish to change your mind about this particular case?<br></p><p>-DW<br></p><p>&gt; On Feb 13, 2016, at 12:31 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; No. The wildcard match does not require a dot prefix.<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 13, 2016, at 10:40 AM, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I am assuming there would be no dot in front of _? <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; switch value {<br>&gt;&gt; 	case .A: “A”<br>&gt;&gt; 	case .B: “B”<br>&gt;&gt; 	case ._:”D” // this is not correct?<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 13, 2016, at 9:18 AM, Joseph Lord via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; +1<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Didn&#39;t even know it was legal. Definitely increases consistency and simplifies the language. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; J<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Feb 12, 2016, at 3:00 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; https://gist.github.com/erica/e0b8a3a22ab716a19db4 &lt;https://gist.github.com/erica/e0b8a3a22ab716a19db4&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Requiring Leading Dot Prefixes for Enum Instance Member Implementations<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160213/394ca378/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: smime.p7s<br>Type: application/pkcs7-signature<br>Size: 4139 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160213/394ca378/attachment.p7s&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Discussion] Enum Leading Dot Prefixes</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>February 13, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; The current spec has the following line:<br>&gt; <br>&gt;&gt; static func staticFunc2() { let foo = .Tails } // requires leading dot<br>&gt; The leading dot requirement does not exist today for references to static properties and functions from a static function.<br>&gt; <br>&gt; Is your proposal to:<br>&gt; - require a dot in front of static properties/functions in this case as well for consistency across all static things<br>&gt; - require a dot only in front of the case statements, to promote consistency only for use of cases within an enum<br>&gt; - or, do you wish to change your mind about this particular case?<br></p><p>Yeah, I don&#39;t like this either. You require leading dots in instance members to promote simple, clear rules…then require them in static members too, making a muddy, complicated rule there. Just treat enum cases like any other static member.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Discussion] Enum Leading Dot Prefixes</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>February 13, 2016 at 04:00:00pm</p></header><div class="content"><p>This was the one place I went back and forth a few times: include it for consistency in referencing enum cases *everywhere* or leave it as is to match static behavior. I can argue it either way.<br></p><p>-- E<br></p><p><br>&gt; On Feb 13, 2016, at 1:39 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt; The current spec has the following line:<br>&gt;&gt; <br>&gt;&gt;&gt; static func staticFunc2() { let foo = .Tails } // requires leading dot<br>&gt;&gt; The leading dot requirement does not exist today for references to static properties and functions from a static function.<br>&gt;&gt; <br>&gt;&gt; Is your proposal to:<br>&gt;&gt; - require a dot in front of static properties/functions in this case as well for consistency across all static things<br>&gt;&gt; - require a dot only in front of the case statements, to promote consistency only for use of cases within an enum<br>&gt;&gt; - or, do you wish to change your mind about this particular case?<br>&gt; <br>&gt; Yeah, I don&#39;t like this either. You require leading dots in instance members to promote simple, clear rules…then require them in static members too, making a muddy, complicated rule there. Just treat enum cases like any other static member.<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4ab486d7597af4cfe0be33a762150848?s=50"></div><header><strong>[Discussion] Enum Leading Dot Prefixes</strong> from <string>Dany St-Amant</string> &lt;dsa.mls at icloud.com&gt;<p>February 14, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; Le 13 févr. 2016 à 15:29, David Waite via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Erica,<br>&gt; <br>&gt; The current spec has the following line:<br>&gt; <br>&gt;&gt; static func staticFunc2() { let foo = .Tails } // requires leading dot<br>&gt; <br>&gt; The leading dot requirement does not exist today for references to static properties and functions from a static function.<br></p><p>After focusing on this line and on the error we get back when trying it now in playground, I no longer see the reported inconsistent as such, but just as a clash of two permissible syntax, which if changed as proposed will just swap an inconsistency for another one.<br></p><p>For those wondering, the reported error is: type of expression is ambiguous without more context<br></p><p>The shorthand syntax is to be used when the compiler, and the programmer knows what the type is. In the above example, why should the compile infer that variable foo is of type Coin. It would make more sense for that particular function to be:<br></p><p>static func staticFunc2() { let foo = Coin.Tails }<br>static func staticFunc2() { let foo:Coin = .Tails }<br> <br>And be consistent with (both at a global scope or as static inside the enum):<br></p><p>let firstCoin:Coin = .Heads<br>let secondCoin = Coin.Tails<br>let thirdCoin = .Heads // not allowed<br></p><p>The apparent inconsistency seems to stem from the compiler doing an implicit equivalent of:<br></p><p>let heads = Coin.heads<br>let tails = Coin.tails<br></p><p>If one define these on its own at a global level, the same inconsistent use of the leading dot is present everywhere.<br></p><p>I’m thinking that the proposal as stated &quot;mandate leading dot&quot; is wrong, it should be redone as &quot;prevent direct access to the implicit static let auto-generated for the enum case within the enum declaration&quot;. Unfortunately, I do not know if there are legit use of this implicit static let in the wild.<br></p><p>This way, for the staticFunc2 we get:<br></p><p>static func staticFunc2() { let foo = Coin.Tails }  // Acceptable<br>static func staticFunc2() { let foo:Coin = .Tails } // Acceptable<br>static func staticFunc2() { let foo = Tails }  // New error, no longer accessible<br>static func staticFunc2() { let foo = .Tails } // Current error, ambiguous<br></p><p><br>Dany<br></p><p>&gt; Is your proposal to:<br>&gt; - require a dot in front of static properties/functions in this case as well for consistency across all static things<br>&gt; - require a dot only in front of the case statements, to promote consistency only for use of cases within an enum<br>&gt; - or, do you wish to change your mind about this particular case?<br>&gt; <br>&gt; -DW<br>&gt; <br>&gt;&gt; On Feb 13, 2016, at 12:31 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; No. The wildcard match does not require a dot prefix.<br>&gt;&gt; <br>&gt;&gt; -- E<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 13, 2016, at 10:40 AM, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I am assuming there would be no dot in front of _? <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; switch value {<br>&gt;&gt;&gt; 	case .A: “A”<br>&gt;&gt;&gt; 	case .B: “B”<br>&gt;&gt;&gt; 	case ._:”D” // this is not correct?<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 13, 2016, at 9:18 AM, Joseph Lord via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; +1<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Didn&#39;t even know it was legal. Definitely increases consistency and simplifies the language. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; J<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 12, 2016, at 3:00 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; https://gist.github.com/erica/e0b8a3a22ab716a19db4 &lt;https://gist.github.com/erica/e0b8a3a22ab716a19db4&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Requiring Leading Dot Prefixes for Enum Instance Member Implementations<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160214/528f464e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Discussion] Enum Leading Dot Prefixes</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>February 14, 2016 at 08:00:00am</p></header><div class="content"><p>Dany,<br></p><p>I&#39;ve already updated my working copy of the proposal to change that to not requiring the leading dot based on feedback.<br></p><p>-- E<br></p><p>&gt; On Feb 14, 2016, at 6:24 AM, Dany St-Amant via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Le 13 févr. 2016 à 15:29, David Waite via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; Erica,<br>&gt;&gt; <br>&gt;&gt; The current spec has the following line:<br>&gt;&gt; <br>&gt;&gt;&gt; static func staticFunc2() { let foo = .Tails } // requires leading dot<br>&gt;&gt; <br>&gt;&gt; The leading dot requirement does not exist today for references to static properties and functions from a static function.<br>&gt; <br>&gt; After focusing on this line and on the error we get back when trying it now in playground, I no longer see the reported inconsistent as such, but just as a clash of two permissible syntax, which if changed as proposed will just swap an inconsistency for another one.<br>&gt; <br>&gt; For those wondering, the reported error is: type of expression is ambiguous without more context<br>&gt; <br>&gt; The shorthand syntax is to be used when the compiler, and the programmer knows what the type is. In the above example, why should the compile infer that variable foo is of type Coin. It would make more sense for that particular function to be:<br>&gt; <br>&gt; static func staticFunc2() { let foo = Coin.Tails }<br>&gt; static func staticFunc2() { let foo:Coin = .Tails }<br>&gt;  <br>&gt; And be consistent with (both at a global scope or as static inside the enum):<br>&gt; <br>&gt; let firstCoin:Coin = .Heads<br>&gt; let secondCoin = Coin.Tails<br>&gt; let thirdCoin = .Heads // not allowed<br>&gt; <br>&gt; The apparent inconsistency seems to stem from the compiler doing an implicit equivalent of:<br>&gt; <br>&gt; let heads = Coin.heads<br>&gt; let tails = Coin.tails<br>&gt; <br>&gt; If one define these on its own at a global level, the same inconsistent use of the leading dot is present everywhere.<br>&gt; <br>&gt; I’m thinking that the proposal as stated &quot;mandate leading dot&quot; is wrong, it should be redone as &quot;prevent direct access to the implicit static let auto-generated for the enum case within the enum declaration&quot;. Unfortunately, I do not know if there are legit use of this implicit static let in the wild.<br>&gt; <br>&gt; This way, for the staticFunc2 we get:<br>&gt; <br>&gt; static func staticFunc2() { let foo = Coin.Tails }  // Acceptable<br>&gt; static func staticFunc2() { let foo:Coin = .Tails } // Acceptable<br>&gt; static func staticFunc2() { let foo = Tails }  // New error, no longer accessible<br>&gt; static func staticFunc2() { let foo = .Tails } // Current error, ambiguous<br>&gt; <br>&gt; <br>&gt; Dany<br>&gt; <br>&gt;&gt; Is your proposal to:<br>&gt;&gt; - require a dot in front of static properties/functions in this case as well for consistency across all static things<br>&gt;&gt; - require a dot only in front of the case statements, to promote consistency only for use of cases within an enum<br>&gt;&gt; - or, do you wish to change your mind about this particular case?<br>&gt;&gt; <br>&gt;&gt; -DW<br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 13, 2016, at 12:31 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; No. The wildcard match does not require a dot prefix.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- E<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 13, 2016, at 10:40 AM, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I am assuming there would be no dot in front of _? <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; switch value {<br>&gt;&gt;&gt;&gt; 	case .A: “A”<br>&gt;&gt;&gt;&gt; 	case .B: “B”<br>&gt;&gt;&gt;&gt; 	case ._:”D” // this is not correct?<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Feb 13, 2016, at 9:18 AM, Joseph Lord via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; +1<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Didn&#39;t even know it was legal. Definitely increases consistency and simplifies the language. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; J<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Feb 12, 2016, at 3:00 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; https://gist.github.com/erica/e0b8a3a22ab716a19db4 &lt;https://gist.github.com/erica/e0b8a3a22ab716a19db4&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Requiring Leading Dot Prefixes for Enum Instance Member Implementations<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160214/2f5b16c1/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Discussion] Enum Leading Dot Prefixes</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>February 14, 2016 at 08:00:00am</p></header><div class="content"><p>p.s. https://github.com/erica/swift-evolution/blob/master/proposals/00XX-enum-dot.md &lt;https://github.com/erica/swift-evolution/blob/master/proposals/00XX-enum-dot.md&gt;<br></p><p>-- E<br></p><p>&gt; On Feb 14, 2016, at 8:29 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Dany,<br>&gt; <br>&gt; I&#39;ve already updated my working copy of the proposal to change that to not requiring the leading dot based on feedback.<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt;&gt; On Feb 14, 2016, at 6:24 AM, Dany St-Amant via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Le 13 févr. 2016 à 15:29, David Waite via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Erica,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The current spec has the following line:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; static func staticFunc2() { let foo = .Tails } // requires leading dot<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The leading dot requirement does not exist today for references to static properties and functions from a static function.<br>&gt;&gt; <br>&gt;&gt; After focusing on this line and on the error we get back when trying it now in playground, I no longer see the reported inconsistent as such, but just as a clash of two permissible syntax, which if changed as proposed will just swap an inconsistency for another one.<br>&gt;&gt; <br>&gt;&gt; For those wondering, the reported error is: type of expression is ambiguous without more context<br>&gt;&gt; <br>&gt;&gt; The shorthand syntax is to be used when the compiler, and the programmer knows what the type is. In the above example, why should the compile infer that variable foo is of type Coin. It would make more sense for that particular function to be:<br>&gt;&gt; <br>&gt;&gt; static func staticFunc2() { let foo = Coin.Tails }<br>&gt;&gt; static func staticFunc2() { let foo:Coin = .Tails }<br>&gt;&gt;  <br>&gt;&gt; And be consistent with (both at a global scope or as static inside the enum):<br>&gt;&gt; <br>&gt;&gt; let firstCoin:Coin = .Heads<br>&gt;&gt; let secondCoin = Coin.Tails<br>&gt;&gt; let thirdCoin = .Heads // not allowed<br>&gt;&gt; <br>&gt;&gt; The apparent inconsistency seems to stem from the compiler doing an implicit equivalent of:<br>&gt;&gt; <br>&gt;&gt; let heads = Coin.heads<br>&gt;&gt; let tails = Coin.tails<br>&gt;&gt; <br>&gt;&gt; If one define these on its own at a global level, the same inconsistent use of the leading dot is present everywhere.<br>&gt;&gt; <br>&gt;&gt; I’m thinking that the proposal as stated &quot;mandate leading dot&quot; is wrong, it should be redone as &quot;prevent direct access to the implicit static let auto-generated for the enum case within the enum declaration&quot;. Unfortunately, I do not know if there are legit use of this implicit static let in the wild.<br>&gt;&gt; <br>&gt;&gt; This way, for the staticFunc2 we get:<br>&gt;&gt; <br>&gt;&gt; static func staticFunc2() { let foo = Coin.Tails }  // Acceptable<br>&gt;&gt; static func staticFunc2() { let foo:Coin = .Tails } // Acceptable<br>&gt;&gt; static func staticFunc2() { let foo = Tails }  // New error, no longer accessible<br>&gt;&gt; static func staticFunc2() { let foo = .Tails } // Current error, ambiguous<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Dany<br>&gt;&gt; <br>&gt;&gt;&gt; Is your proposal to:<br>&gt;&gt;&gt; - require a dot in front of static properties/functions in this case as well for consistency across all static things<br>&gt;&gt;&gt; - require a dot only in front of the case statements, to promote consistency only for use of cases within an enum<br>&gt;&gt;&gt; - or, do you wish to change your mind about this particular case?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -DW<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 13, 2016, at 12:31 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; No. The wildcard match does not require a dot prefix.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- E<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Feb 13, 2016, at 10:40 AM, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I am assuming there would be no dot in front of _? <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; switch value {<br>&gt;&gt;&gt;&gt;&gt; 	case .A: “A”<br>&gt;&gt;&gt;&gt;&gt; 	case .B: “B”<br>&gt;&gt;&gt;&gt;&gt; 	case ._:”D” // this is not correct?<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Feb 13, 2016, at 9:18 AM, Joseph Lord via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; +1<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Didn&#39;t even know it was legal. Definitely increases consistency and simplifies the language. <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; J<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Feb 12, 2016, at 3:00 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://gist.github.com/erica/e0b8a3a22ab716a19db4 &lt;https://gist.github.com/erica/e0b8a3a22ab716a19db4&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Requiring Leading Dot Prefixes for Enum Instance Member Implementations<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160214/ec485c5d/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
