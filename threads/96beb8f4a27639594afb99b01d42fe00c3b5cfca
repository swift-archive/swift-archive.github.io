<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Discussion] Type for matching a closure</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>May 31, 2016 at 12:00:00pm</p></header><div class="content"><p>AFAIK there isn&#39;t currently a way of matching if an Any instance is a closure:<br></p><p>func something&lt;T&gt;(x: T) -&gt; String {<br>    /// is x a function? We want to support Any (Int, Int32, Float, Double,<br>    ///  AnyObject, ...), but disallow functions.<br>    ...<br>}<br></p><p>let myClosure = { print(&quot;Hello&quot;) }<br>something(myClosure) // Don&#39;t allow this.<br></p><p><br>I propose adding a protocol Function - all closures would conform to it. See the code on <br></p><p>https://gist.github.com/charlieMonroe/655f2b5e25cc0b4ba06c0ddafa41c73b &lt;https://gist.github.com/charlieMonroe/655f2b5e25cc0b4ba06c0ddafa41c73b&gt;<br></p><p>which outlines the API and possible usage of it:<br></p><p>- Allowing to match a function from an Any instance.<br>- Inspect the function object - arguments, captured values, return type. This may help debugging retain cycles by printing the catputred variables - you will be able to see `self` within these.<br>- Invocation - creating something as NSInvocation, since you&#39;d be able to call the function with a list of arguments.<br>- This could also become a basis for some RPC in Swift.<br></p><p>I know this is partially something for the Reflection discussion going on here as well as something for the existentials, but since it kind of overlapses both discussions, I thought creating a new thread would perhaps be beneficial.<br></p><p>Charlie<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160531/96becfca/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Discussion] Type for matching a closure</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>May 31, 2016 at 02:00:00pm</p></header><div class="content"><p>+1, I also think we need a special protocol for function/closure.<br></p><p>On 31.05.2016 13:12, Charlie Monroe via swift-evolution wrote:<br>&gt; AFAIK there isn&#39;t currently a way of matching if an Any instance is a closure:<br>&gt;<br>&gt; funcsomething&lt;T&gt;(x: T) -&gt; String{<br>&gt;     /// is x a function? We want to support Any (Int, Int32, Float, Double,<br>&gt;     ///  AnyObject, ...), but disallow functions.<br>&gt;     ...<br>&gt; }<br>&gt;<br>&gt; letmyClosure = { print(&quot;Hello&quot;) }<br>&gt; something(myClosure) // Don&#39;t allow this.<br>&gt;<br>&gt;<br>&gt; I propose adding a protocol Function - all closures would conform to it.<br>&gt; See the code on<br>&gt;<br>&gt; https://gist.github.com/charlieMonroe/655f2b5e25cc0b4ba06c0ddafa41c73b<br>&gt;<br>&gt; which outlines the API and possible usage of it:<br>&gt;<br>&gt; - Allowing to match a function from an Any instance.<br>&gt; - Inspect the function object - arguments, captured values, return type.<br>&gt; This may help debugging retain cycles by printing the catputred variables -<br>&gt; you will be able to see `self` within these.<br>&gt; - Invocation - creating something as NSInvocation, since you&#39;d be able to<br>&gt; call the function with a list of arguments.<br>&gt; - This could also become a basis for some RPC in Swift.<br>&gt;<br>&gt; I know this is partially something for the Reflection discussion going on<br>&gt; here as well as something for the existentials, but since it kind of<br>&gt; overlapses both discussions, I thought creating a new thread would perhaps<br>&gt; be beneficial.<br>&gt;<br>&gt; Charlie<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Discussion] Type for matching a closure</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>May 31, 2016 at 01:00:00pm</p></header><div class="content"><p>I’m a +1 for being able to detect them, a protocol would also be useful for defining methods and such on them in future.<br></p><p>I’m curious why you’re hoping to deny functions in your example though; there’s nothing you can really do with T without testing/casting it, in which case a default case or branch will allow functions to either fall through or throw some kind of unknown type error, e.g-<br></p><p>func something&lt;T&gt;(x:T) -&gt; String {<br>    switch (x) {<br>        case is Int32:<br>            return &quot;Int32&quot;<br>        case is AnyObject:<br>            return &quot;AnyObject&quot;<br>        default:<br>            fatalError(&quot;Unexpected type&quot;)<br>    }<br>}<br></p><p>But yeah, either way, being able to specifically detect or require functions/closures would be nice.<br></p><p>&gt; On 31 May 2016, at 11:12, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; AFAIK there isn&#39;t currently a way of matching if an Any instance is a closure:<br>&gt; <br>&gt; func something&lt;T&gt;(x: T) -&gt; String {<br>&gt;     /// is x a function? We want to support Any (Int, Int32, Float, Double,<br>&gt;     ///  AnyObject, ...), but disallow functions.<br>&gt;     ...<br>&gt; }<br>&gt; <br>&gt; let myClosure = { print(&quot;Hello&quot;) }<br>&gt; something(myClosure) // Don&#39;t allow this.<br>&gt; <br>&gt; <br>&gt; I propose adding a protocol Function - all closures would conform to it. See the code on <br>&gt; <br>&gt; https://gist.github.com/charlieMonroe/655f2b5e25cc0b4ba06c0ddafa41c73b &lt;https://gist.github.com/charlieMonroe/655f2b5e25cc0b4ba06c0ddafa41c73b&gt;<br>&gt; <br>&gt; which outlines the API and possible usage of it:<br>&gt; <br>&gt; - Allowing to match a function from an Any instance.<br>&gt; - Inspect the function object - arguments, captured values, return type. This may help debugging retain cycles by printing the catputred variables - you will be able to see `self` within these.<br>&gt; - Invocation - creating something as NSInvocation, since you&#39;d be able to call the function with a list of arguments.<br>&gt; - This could also become a basis for some RPC in Swift.<br>&gt; <br>&gt; I know this is partially something for the Reflection discussion going on here as well as something for the existentials, but since it kind of overlapses both discussions, I thought creating a new thread would perhaps be beneficial.<br>&gt; <br>&gt; Charlie<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160531/c8922da4/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Discussion] Type for matching a closure</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>May 31, 2016 at 02:00:00pm</p></header><div class="content"><p>This looks more like a reflection api than like strictly speaking conformance. <br></p><p>But following along, by analogy, to the executeWithArgs, there should be a way to discover the structure of types on AnyClass.<br></p><p>At this point, it is not the road swift has travelled. Right now they opted for Mirrors to expose the structure of subjects.. all except the functions&amp;closures. At this point Mirrors miss this discoverability, but doing what you propose would make things even more lobsided by having 2 unfinished parts of the language. So I think they don&#39;t quite belong today. But runtime reflection goes quite deep in the runtime.<br></p><p>&gt; On May 31, 2016, at 2:07 PM, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I’m a +1 for being able to detect them, a protocol would also be useful for defining methods and such on them in future.<br>&gt; <br>&gt; I’m curious why you’re hoping to deny functions in your example though; there’s nothing you can really do with T without testing/casting it, in which case a default case or branch will allow functions to either fall through or throw some kind of unknown type error, e.g-<br>&gt; <br>&gt; func something&lt;T&gt;(x:T) -&gt; String {<br>&gt;     switch (x) {<br>&gt;         case is Int32:<br>&gt;             return &quot;Int32&quot;<br>&gt;         case is AnyObject:<br>&gt;             return &quot;AnyObject&quot;<br>&gt;         default:<br>&gt;             fatalError(&quot;Unexpected type&quot;)<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; But yeah, either way, being able to specifically detect or require functions/closures would be nice.<br>&gt; <br>&gt;&gt; On 31 May 2016, at 11:12, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; AFAIK there isn&#39;t currently a way of matching if an Any instance is a closure:<br>&gt;&gt; <br>&gt;&gt; func something&lt;T&gt;(x: T) -&gt; String {<br>&gt;&gt;     /// is x a function? We want to support Any (Int, Int32, Float, Double,<br>&gt;&gt;     ///  AnyObject, ...), but disallow functions.<br>&gt;&gt;     ...<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; let myClosure = { print(&quot;Hello&quot;) }<br>&gt;&gt; something(myClosure) // Don&#39;t allow this.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I propose adding a protocol Function - all closures would conform to it. See the code on <br>&gt;&gt; <br>&gt;&gt; https://gist.github.com/charlieMonroe/655f2b5e25cc0b4ba06c0ddafa41c73b<br>&gt;&gt; <br>&gt;&gt; which outlines the API and possible usage of it:<br>&gt;&gt; <br>&gt;&gt; - Allowing to match a function from an Any instance.<br>&gt;&gt; - Inspect the function object - arguments, captured values, return type. This may help debugging retain cycles by printing the catputred variables - you will be able to see `self` within these.<br>&gt;&gt; - Invocation - creating something as NSInvocation, since you&#39;d be able to call the function with a list of arguments.<br>&gt;&gt; - This could also become a basis for some RPC in Swift.<br>&gt;&gt; <br>&gt;&gt; I know this is partially something for the Reflection discussion going on here as well as something for the existentials, but since it kind of overlapses both discussions, I thought creating a new thread would perhaps be beneficial.<br>&gt;&gt; <br>&gt;&gt; Charlie<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160531/079c2a70/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
