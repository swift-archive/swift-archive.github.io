<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0eaab3d5d1d4428f74a711f724f2eb47?s=50"></div><header><strong>Using NSObject subclass instance as key in Dictionary</strong> from <string>Etan Kissling</string> &lt;kissling at oberon.ch&gt;<p>December 17, 2015 at 10:00:00pm</p></header><div class="content"><p>I want to use instances of a custom class as Dictionary key.<br>This requires the class to conform to Hashable.<br></p><p>func ==(lhs: KeyType1, rhs: KeyType1) -&gt; Bool { return lhs.id == rhs.id }<br></p><p>final class KeyType1: Hashable, CustomStringConvertible {<br>    let id: String<br>    init(id: String) { self.id = id }<br>    var hashValue: Int { return id.hashValue }<br>    var description: String { return id }<br>}<br></p><p><br>Now I can use KeyType1 instances as key in Dictionary.<br></p><p>var collection1 = [KeyType1(id: &quot;foo&quot;) : NSObject()]<br></p><p><br>Testing works fine:<br></p><p>    let key = collection1.first!.0<br>    print(&quot;        Key stored in collection: \(unsafeAddressOf(key)) -- \(key)&quot;)<br></p><p><br></p><p>    let keyCopy = KeyType1(id: key.id)<br>    print(&quot;                        Key copy: \(unsafeAddressOf(keyCopy)) -- \(keyCopy)&quot;)<br></p><p><br></p><p>    print(&quot;                      Keys equal: \(key == keyCopy)&quot;)<br>    print(&quot;               Hash values equal: \(key.hashValue == keyCopy.hashValue)&quot;)<br>    print(&quot;     Collection has item for key: \(collection1[key] != nil)&quot;)<br>    print(&quot;Collection has item for key copy: \(collection1[keyCopy] != nil)&quot;)<br></p><p>        Key stored in collection: 0x0000608000043d80 -- foo<br>                        Key copy: 0x00006080000440b0 -- foo<br>                      Keys equal: true<br>               Hash values equal: true<br>     Collection has item for key: true<br>Collection has item for key copy: true<br></p><p><br></p><p>Next, I repeat the same set up -- but this time KeyType is a descendant of NSObject.<br></p><p>func ==(lhs: KeyType2, rhs: KeyType2) -&gt; Bool { return lhs.id == rhs.id }<br></p><p>final class KeyType2: NSObject { // NSObject conforms to Hashable and CustomStringConvertible.<br>    let id: String<br>    init(id: String) { self.id = id; super.init() }<br>    override var hashValue: Int { return id.hashValue }<br>    override var description: String { return id }<br>}<br></p><p>Again, I create a Dictionary based on this key class.<br></p><p>var collection2 = [KeyType2(id: &quot;foo&quot;) : NSObject()]<br></p><p>Using the same tests, they fail now.<br></p><p>    let key = collection2.first!.0<br>    print(&quot;        Key stored in collection: \(unsafeAddressOf(key)) -- \(key)&quot;)<br></p><p>    let keyCopy = KeyType2(id: key.id)<br>    print(&quot;                        Key copy: \(unsafeAddressOf(keyCopy)) -- \(keyCopy)&quot;)<br></p><p>    print(&quot;                      Keys equal: \(key == keyCopy)&quot;)<br>    print(&quot;               Hash values equal: \(key.hashValue == keyCopy.hashValue)&quot;)<br>    print(&quot;     Collection has item for key: \(collection2[key] != nil)&quot;)<br>    print(&quot;Collection has item for key copy: \(collection2[keyCopy] != nil)&quot;)<br></p><p>        Key stored in collection: 0x0000608000044080 -- foo<br>                        Key copy: 0x00006080000440e0 -- foo<br>                      Keys equal: true<br>               Hash values equal: true<br>     Collection has item for key: true<br>Collection has item for key copy: false<br></p><p><br>What am I missing here?<br></p><p><br>Thanks<br></p><p>Etan<br></p><p><br></p><p><br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151217/356ace5e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Using NSObject subclass instance as key in Dictionary</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December 17, 2015 at 02:00:00pm</p></header><div class="content"><p>On Thu, Dec 17, 2015 at 2:17 PM, Etan Kissling via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; I want to use instances of a custom class as Dictionary key.<br>&gt; This requires the class to conform to Hashable.<br>&gt;<br>&gt; func ==(lhs: KeyType1, rhs: KeyType1) -&gt; Bool { return lhs.id == rhs.id }<br>&gt;<br>&gt; final class KeyType1: Hashable, CustomStringConvertible {<br>&gt;     let id: String<br>&gt;     init(id: String) { self.id = id }<br>&gt;     var hashValue: Int { return id.hashValue }<br>&gt;     var description: String { return id }<br>&gt; }<br>&gt;<br>&gt;<br>&gt; Now I can use KeyType1 instances as key in Dictionary.<br>&gt;<br>&gt; var collection1 = [KeyType1(id: &quot;foo&quot;) : NSObject()]<br>&gt;<br>&gt;<br>&gt; Testing works fine:<br>&gt;<br>&gt;     let key = collection1.first!.0<br>&gt;     print(&quot;        Key stored in collection: \(unsafeAddressOf(key)) -- \(<br>&gt; key)&quot;)<br>&gt;<br>&gt;<br>&gt;     let keyCopy = KeyType1(id: key.id)<br>&gt;     print(&quot;                        Key copy: \(unsafeAddressOf(keyCopy))<br>&gt; -- \(keyCopy)&quot;)<br>&gt;<br>&gt;<br>&gt;     print(&quot;                      Keys equal: \(key == keyCopy)&quot;)<br>&gt;     print(&quot;               Hash values equal: \(key.hashValue == keyCopy.<br>&gt; hashValue)&quot;)<br>&gt;     print(&quot;     Collection has item for key: \(collection1[key] != nil)&quot;)<br>&gt;     print(&quot;Collection has item for key copy: \(collection1[keyCopy] != nil<br>&gt; )&quot;)<br>&gt;<br>&gt; *        Key stored in collection: 0x0000608000043d80 -- foo*<br>&gt; *                        Key copy: 0x00006080000440b0 -- foo*<br>&gt; *                      Keys equal: true*<br>&gt; *               Hash values equal: true*<br>&gt; *     Collection has item for key: true*<br>&gt; *Collection has item for key copy: true*<br>&gt;<br>&gt;<br>&gt;<br>&gt; Next, I repeat the same set up -- but this time KeyType is a descendant of<br>&gt; NSObject.<br>&gt;<br>&gt; func ==(lhs: KeyType2, rhs: KeyType2) -&gt; Bool { return lhs.id == rhs.id }<br>&gt;<br>&gt; final class KeyType2: NSObject { // NSObject conforms to Hashable and<br>&gt; CustomStringConvertible.<br>&gt;     let id: String<br>&gt;     init(id: String) { self.id = id; super.init() }<br>&gt;     override var hashValue: Int { return id.hashValue }<br>&gt;     override var description: String { return id }<br>&gt; }<br>&gt;<br>&gt; Again, I create a Dictionary based on this key class.<br>&gt;<br>&gt; var collection2 = [KeyType2(id: &quot;foo&quot;) : NSObject()]<br>&gt;<br>&gt; Using the same tests, they fail now.<br>&gt;<br>&gt;     let key = collection2.first!.0<br>&gt;     print(&quot;        Key stored in collection: \(unsafeAddressOf(key)) -- \(<br>&gt; key)&quot;)<br>&gt;<br>&gt;     let keyCopy = KeyType2(id: key.id)<br>&gt;     print(&quot;                        Key copy: \(unsafeAddressOf(keyCopy))<br>&gt; -- \(keyCopy)&quot;)<br>&gt;<br>&gt;     print(&quot;                      Keys equal: \(key == keyCopy)&quot;)<br>&gt;     print(&quot;               Hash values equal: \(key.hashValue == keyCopy.<br>&gt; hashValue)&quot;)<br>&gt;     print(&quot;     Collection has item for key: \(collection2[key] != nil)&quot;)<br>&gt;     print(&quot;Collection has item for key copy: \(collection2[keyCopy] != nil<br>&gt; )&quot;)<br>&gt;<br>&gt; *        Key stored in collection: 0x0000608000044080 -- foo*<br>&gt; *                        Key copy: 0x00006080000440e0 -- foo*<br>&gt; *                      Keys equal: true*<br>&gt; *               Hash values equal: true*<br>&gt; *     Collection has item for key: true*<br>&gt; *Collection has item for key copy: false*<br>&gt;<br>&gt;<br>&gt; What am I missing here?<br>&gt;<br></p><p>The == overload in the second case is not the one that gets put into the<br>protocol witness table.  When you call == on two instances of your type,<br>upcast to NSObject, the isEqual() method is called.<br></p><p>We are aware of this issue and it will be fixed when we move operators into<br>types.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151217/a21a70cb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0eaab3d5d1d4428f74a711f724f2eb47?s=50"></div><header><strong>Using NSObject subclass instance as key in Dictionary</strong> from <string>Etan Kissling</string> &lt;kissling at oberon.ch&gt;<p>December 17, 2015 at 10:00:00pm</p></header><div class="content"><p>Thanks for the fast response!<br></p><p>Replacing the == definition with<br></p><p>    override func isEqual(object: AnyObject?) -&gt; Bool {<br>        guard let object = object as? KeyType2 else { return false }<br>        return id == object.id<br>    }<br></p><p><br>fixed this issue!<br></p><p>Etan<br></p><p><br>On 17 Dec 2015, at 23:48, Dmitri Gribenko &lt;gribozavr at gmail.com&lt;mailto:gribozavr at gmail.com&gt;&gt; wrote:<br></p><p>On Thu, Dec 17, 2015 at 2:17 PM, Etan Kissling via swift-users &lt;swift-users at swift.org&lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>I want to use instances of a custom class as Dictionary key.<br>This requires the class to conform to Hashable.<br></p><p>func ==(lhs: KeyType1, rhs: KeyType1) -&gt; Bool { return lhs.id == rhs.id }<br></p><p>final class KeyType1: Hashable, CustomStringConvertible {<br>    let id: String<br>    init(id: String) { self.id = id }<br>    var hashValue: Int { return id.hashValue }<br>    var description: String { return id }<br>}<br></p><p><br>Now I can use KeyType1 instances as key in Dictionary.<br></p><p>var collection1 = [KeyType1(id: &quot;foo&quot;) : NSObject()]<br></p><p><br>Testing works fine:<br></p><p>    let key = collection1.first!.0<br>    print(&quot;        Key stored in collection: \(unsafeAddressOf(key)) -- \(key)&quot;)<br></p><p>    let keyCopy = KeyType1(id: key.id)<br>    print(&quot;                        Key copy: \(unsafeAddressOf(keyCopy)) -- \(keyCopy)&quot;)<br></p><p>    print(&quot;                      Keys equal: \(key == keyCopy)&quot;)<br>    print(&quot;               Hash values equal: \(key.hashValue == keyCopy.hashValue)&quot;)<br>    print(&quot;     Collection has item for key: \(collection1[key] != nil)&quot;)<br>    print(&quot;Collection has item for key copy: \(collection1[keyCopy] != nil)&quot;)<br></p><p>        Key stored in collection: 0x0000608000043d80 -- foo<br>                        Key copy: 0x00006080000440b0 -- foo<br>                      Keys equal: true<br>               Hash values equal: true<br>     Collection has item for key: true<br>Collection has item for key copy: true<br></p><p><br></p><p>Next, I repeat the same set up -- but this time KeyType is a descendant of NSObject.<br></p><p>func ==(lhs: KeyType2, rhs: KeyType2) -&gt; Bool { return lhs.id == rhs.id }<br></p><p>final class KeyType2: NSObject { // NSObject conforms to Hashable and CustomStringConvertible.<br>    let id: String<br>    init(id: String) { self.id = id; super.init() }<br>    override var hashValue: Int { return id.hashValue }<br>    override var description: String { return id }<br>}<br></p><p>Again, I create a Dictionary based on this key class.<br></p><p>var collection2 = [KeyType2(id: &quot;foo&quot;) : NSObject()]<br></p><p>Using the same tests, they fail now.<br></p><p>    let key = collection2.first!.0<br>    print(&quot;        Key stored in collection: \(unsafeAddressOf(key)) -- \(key)&quot;)<br></p><p>    let keyCopy = KeyType2(id: key.id)<br>    print(&quot;                        Key copy: \(unsafeAddressOf(keyCopy)) -- \(keyCopy)&quot;)<br></p><p>    print(&quot;                      Keys equal: \(key == keyCopy)&quot;)<br>    print(&quot;               Hash values equal: \(key.hashValue == keyCopy.hashValue)&quot;)<br>    print(&quot;     Collection has item for key: \(collection2[key] != nil)&quot;)<br>    print(&quot;Collection has item for key copy: \(collection2[keyCopy] != nil)&quot;)<br></p><p>        Key stored in collection: 0x0000608000044080 -- foo<br>                        Key copy: 0x00006080000440e0 -- foo<br>                      Keys equal: true<br>               Hash values equal: true<br>     Collection has item for key: true<br>Collection has item for key copy: false<br></p><p><br>What am I missing here?<br></p><p>The == overload in the second case is not the one that gets put into the protocol witness table.  When you call == on two instances of your type, upcast to NSObject, the isEqual() method is called.<br></p><p>We are aware of this issue and it will be fixed when we move operators into types.<br></p><p>Dmitri<br></p><p>--<br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&lt;mailto:gribozavr at gmail.com&gt;&gt;*/<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151217/2517df39/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
