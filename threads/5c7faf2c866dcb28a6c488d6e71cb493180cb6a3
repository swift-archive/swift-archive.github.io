<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d30e546d655d1c7ece0464791a9a90d5?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Adrian Kashivskyy</string> &lt;adrian.kashivskyy at me.com&gt;<p>December 10, 2015 at 11:00:00pm</p></header><div class="content"><p>I think non-void functions should warn about their return value being unused by default, thus eliminating the need to attribute them with @warn_unused_result.<br></p><p>Motivation<br></p><p>It is a rare case for a result of a function to be unused – and most often it&#39;s caused by programmer having too little knowledge of the API. This, in my opinion, is a reasonable area of improvement for the compiler.<br></p><p>I also noticed that many of stdlib&#39;s functions are marked with this attribute, which supports my point of this being the default behavior.<br></p><p>Example code<br></p><p>The following should be default behavior:<br></p><p>&gt; func square(x: Int) -&gt; Int { return x * x }<br>&gt; square(2) // warning: result of call to &#39;square&#39; unused<br></p><p>Currently, unless annotated by @warn_unused_result, the compiler will not trigger any warnings.<br></p><p>Supporting old behavior<br></p><p>If, sometimes, it is okay to not use the result, an opposite @suppress_unused_result attribute could be used instead.<br></p><p>&gt; @suppress_unused_result func square(x: Int) -&gt; Int { return x * x }<br>&gt; square(2) // no warning<br></p><p>Impact on existing code<br></p><p>The existing bare @warn_unused_result attributes will become redundant and can be easily removed by migrator. However, if an existing attribute uses message or mutable_variant argument, it may be left intact, since it provides non-obvious informational value.<br></p><p>Implementing the above proposal would definitely make the code clearer and intentional, without compromising any major use cases.<br></p><p>I would be happy to hear your thought on this.<br> <br></p><p>Regards,<br>Adrian Kashivskyy<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/5c7fb6a3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December 10, 2015 at 03:00:00pm</p></header><div class="content"><p>&gt; On Dec 10, 2015, at 2:58 PM, Adrian Kashivskyy via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I think non-void functions should warn about their return value being unused by default, thus eliminating the need to attribute them with @warn_unused_result.<br></p><p>+1, this would be great.  It would also be a great starter project for someone who wants to get into hacking on the Swift compiler.<br></p><p>-Chris<br></p><p>&gt; <br>&gt; Motivation<br>&gt; <br>&gt; It is a rare case for a result of a function to be unused – and most often it&#39;s caused by programmer having too little knowledge of the API. This, in my opinion, is a reasonable area of improvement for the compiler.<br>&gt; <br>&gt; I also noticed that many of stdlib&#39;s functions are marked with this attribute, which supports my point of this being the default behavior.<br>&gt; <br>&gt; Example code<br>&gt; <br>&gt; The following should be default behavior:<br>&gt; <br>&gt;&gt; func square(x: Int) -&gt; Int { return x * x }<br>&gt;&gt; square(2) // warning: result of call to &#39;square&#39; unused<br>&gt; <br>&gt; Currently, unless annotated by @warn_unused_result, the compiler will not trigger any warnings.<br>&gt; <br>&gt; Supporting old behavior<br>&gt; <br>&gt; If, sometimes, it is okay to not use the result, an opposite @suppress_unused_result attribute could be used instead.<br>&gt; <br>&gt;&gt; @suppress_unused_result func square(x: Int) -&gt; Int { return x * x }<br>&gt;&gt; square(2) // no warning<br>&gt; <br>&gt; Impact on existing code<br>&gt; <br>&gt; The existing bare @warn_unused_result attributes will become redundant and can be easily removed by migrator. However, if an existing attribute uses message or mutable_variant argument, it may be left intact, since it provides non-obvious informational value.<br>&gt; <br>&gt; Implementing the above proposal would definitely make the code clearer and intentional, without compromising any major use cases.<br>&gt; <br>&gt; I would be happy to hear your thought on this.<br>&gt;  <br>&gt; <br>&gt; Regards,<br>&gt; Adrian Kashivskyy<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/1a939830/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7abf2ce34651dd5e97cd97b16ce21bae?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Guillaume Lessard</string> &lt;glessard at tffenterprises.com&gt;<p>December 10, 2015 at 04:00:00pm</p></header><div class="content"><p>&gt; On 10 déc. 2015, at 15:58, Adrian Kashivskyy via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I think non-void functions should warn about their return value being unused by default, thus eliminating the need to attribute them with @warn_unused_result.<br></p><p>I strongly don’t like this idea. This being said, if it happens ann attribute that says &quot;unused result are acceptable&quot; must be created. Makes me wince.<br></p><p>Guillaume Lessard<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>December 10, 2015 at 05:00:00pm</p></header><div class="content"><p>Why should unused results be acceptable?  Why not require callers to explicitly throw away the result:<br></p><p>let _ = funcReturningValueThatIsIgnored()<br></p><p>Yes this is extra syntax, but it also makes it clear that the value was intended to be ignored and the function was only executed for side-effects.  <br></p><p>&gt; On Dec 10, 2015, at 5:23 PM, Guillaume Lessard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 10 déc. 2015, at 15:58, Adrian Kashivskyy via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I think non-void functions should warn about their return value being unused by default, thus eliminating the need to attribute them with @warn_unused_result.<br>&gt; <br>&gt; I strongly don’t like this idea. This being said, if it happens ann attribute that says &quot;unused result are acceptable&quot; must be created. Makes me wince.<br>&gt; <br>&gt; Guillaume Lessard<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d30e546d655d1c7ece0464791a9a90d5?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Adrian Kashivskyy</string> &lt;adrian.kashivskyy at me.com&gt;<p>December 11, 2015 at 12:00:00am</p></header><div class="content"><p>Matthew, I actually like your idea better than using an opposite &quot;@suppress_unused_result&quot; attribute. In addition, it will even be easier to implement, since &quot;let _&quot; syntax is already supported in the language.<br></p><p>Pozdrawiam – Regards,<br>Adrian Kashivskyy<br></p><p>&gt; Wiadomość napisana przez Matthew Johnson &lt;matthew at anandabits.com&gt; w dniu 11.12.2015, o godz. 00:28:<br>&gt; <br>&gt; Why should unused results be acceptable?  Why not require callers to explicitly throw away the result:<br>&gt; <br>&gt; let _ = funcReturningValueThatIsIgnored()<br>&gt; <br>&gt; Yes this is extra syntax, but it also makes it clear that the value was intended to be ignored and the function was only executed for side-effects.  <br>&gt; <br>&gt;&gt; On Dec 10, 2015, at 5:23 PM, Guillaume Lessard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 10 déc. 2015, at 15:58, Adrian Kashivskyy via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think non-void functions should warn about their return value being unused by default, thus eliminating the need to attribute them with @warn_unused_result.<br>&gt;&gt; <br>&gt;&gt; I strongly don’t like this idea. This being said, if it happens ann attribute that says &quot;unused result are acceptable&quot; must be created. Makes me wince.<br>&gt;&gt; <br>&gt;&gt; Guillaume Lessard<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151211/d8d40474/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/009173d589176cfd9c8146cc49849ff6?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Riley Testut</string> &lt;rileytestut at gmail.com&gt;<p>December 10, 2015 at 03:00:00pm</p></header><div class="content"><p>My initial gut reaction is that I don’t mind this change happening, but I would much prefer using a @suppress_unused_result attribute than forcing the user to &quot;let _ = “. The API designer should know whether the return value is necessary or not, and make it easy for the consumer to decide whether they want to use it or not.<br></p><p>&gt; On Dec 10, 2015, at 3:30 PM, Adrian Kashivskyy via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Matthew, I actually like your idea better than using an opposite &quot;@suppress_unused_result&quot; attribute. In addition, it will even be easier to implement, since &quot;let _&quot; syntax is already supported in the language.<br>&gt; <br>&gt; Pozdrawiam – Regards,<br>&gt; Adrian Kashivskyy<br>&gt; <br>&gt;&gt; Wiadomość napisana przez Matthew Johnson &lt;matthew at anandabits.com &lt;mailto:matthew at anandabits.com&gt;&gt; w dniu 11.12.2015, o godz. 00:28:<br>&gt;&gt; <br>&gt;&gt; Why should unused results be acceptable?  Why not require callers to explicitly throw away the result:<br>&gt;&gt; <br>&gt;&gt; let _ = funcReturningValueThatIsIgnored()<br>&gt;&gt; <br>&gt;&gt; Yes this is extra syntax, but it also makes it clear that the value was intended to be ignored and the function was only executed for side-effects.  <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 10, 2015, at 5:23 PM, Guillaume Lessard via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 10 déc. 2015, at 15:58, Adrian Kashivskyy via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think non-void functions should warn about their return value being unused by default, thus eliminating the need to attribute them with @warn_unused_result.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I strongly don’t like this idea. This being said, if it happens ann attribute that says &quot;unused result are acceptable&quot; must be created. Makes me wince.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Guillaume Lessard<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/6fc6c0b1/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f9e638540251a5a2a70ae516ad544281?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Frederick Kellison-Linn</string> &lt;fred.kl at me.com&gt;<p>December 10, 2015 at 06:00:00pm</p></header><div class="content"><p>I’m in favor of this change, and I would rather see this go the route of an ‘@suppress_unused_result&#39; attribute.<br></p><p>I’m in agreement that it makes sense to let the designer of the API determine whether they want to let people ignore the return value. Ignoring the return value need not be made explicit at the point of use with `let _ = …` if it is already established in the documentation that the return value may not need to be used.<br></p><p>FKL<br>&gt; On Dec 10, 2015, at 6:30 PM, Adrian Kashivskyy via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Matthew, I actually like your idea better than using an opposite &quot;@suppress_unused_result&quot; attribute. In addition, it will even be easier to implement, since &quot;let _&quot; syntax is already supported in the language.<br>&gt; <br>&gt; Pozdrawiam – Regards,<br>&gt; Adrian Kashivskyy<br>&gt; <br>&gt;&gt; Wiadomość napisana przez Matthew Johnson &lt;matthew at anandabits.com &lt;mailto:matthew at anandabits.com&gt;&gt; w dniu 11.12.2015, o godz. 00:28:<br>&gt;&gt; <br>&gt;&gt; Why should unused results be acceptable?  Why not require callers to explicitly throw away the result:<br>&gt;&gt; <br>&gt;&gt; let _ = funcReturningValueThatIsIgnored()<br>&gt;&gt; <br>&gt;&gt; Yes this is extra syntax, but it also makes it clear that the value was intended to be ignored and the function was only executed for side-effects.  <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 10, 2015, at 5:23 PM, Guillaume Lessard via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 10 déc. 2015, at 15:58, Adrian Kashivskyy via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think non-void functions should warn about their return value being unused by default, thus eliminating the need to attribute them with @warn_unused_result.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I strongly don’t like this idea. This being said, if it happens ann attribute that says &quot;unused result are acceptable&quot; must be created. Makes me wince.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Guillaume Lessard<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/0f81c948/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December 10, 2015 at 04:00:00pm</p></header><div class="content"><p>&gt; On Dec 10, 2015, at 3:28 PM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Why should unused results be acceptable?  Why not require callers to explicitly throw away the result:<br>&gt; <br>&gt; let _ = funcReturningValueThatIsIgnored()<br>&gt; <br>&gt; Yes this is extra syntax, but it also makes it clear that the value was intended to be ignored and the function was only executed for side-effects.  <br></p><p>There are a number of operations that sensibly return values, but are frequently used only for side effects, such as `pop` on a stack. I agree they&#39;re in the minority, and @warn_unused_result&#39;s polarity is backwards, but they&#39;re a big enough minority that the inverse attribute is valuable.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>December 10, 2015 at 06:00:00pm</p></header><div class="content"><p>&gt; <br>&gt; There are a number of operations that sensibly return values, but are frequently used only for side effects, such as `pop` on a stack. I agree they&#39;re in the minority, and @warn_unused_result&#39;s polarity is backwards, but they&#39;re a big enough minority that the inverse attribute is valuable.<br></p><p>Sure, that makes sense as long as it’s used relatively sparingly! :)<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December 10, 2015 at 05:00:00pm</p></header><div class="content"><p>&gt; On Dec 10, 2015, at 3:28 PM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Why should unused results be acceptable?  Why not require callers to explicitly throw away the result:<br>&gt; <br>&gt; let _ = funcReturningValueThatIsIgnored()<br>&gt; <br>&gt; Yes this is extra syntax, but it also makes it clear that the value was intended to be ignored and the function was only executed for side-effects.  <br></p><p>FWIW, since patterns can exist on the left side of an assignment - a common example would be &quot;(x,y) = foo()&quot;, you don’t need the let.  This is sufficient:<br></p><p>	_ = funcReturningValueThatIsIgnored()<br></p><p>-Chris<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December 10, 2015 at 04:00:00pm</p></header><div class="content"><p>On Thu, Dec 10, 2015 at 2:58 PM, Adrian Kashivskyy via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I think non-void functions should warn about their return value being<br>&gt; unused *by default*, thus eliminating the need to attribute them with<br>&gt; @warn_unused_result.<br>&gt;<br>&gt; *Motivation*<br>&gt;<br>&gt; It is a rare case for a result of a function to be unused – and most often<br>&gt; it&#39;s caused by programmer having too little knowledge of the API. This, in<br>&gt; my opinion, is a reasonable area of improvement for the compiler.<br>&gt;<br>&gt; I also noticed that many of stdlib&#39;s functions are marked with this<br>&gt; attribute, which supports my point of this being the default behavior.<br>&gt;<br>&gt;<br>&gt; *Example code*<br>&gt; The following should be default behavior:<br>&gt;<br>&gt; func square(x: Int) -&gt; Int { return x * x }<br>&gt; square(2) // warning: result of call to &#39;square&#39; unused<br>&gt;<br>&gt;<br>&gt; Currently, unless annotated by @warn_unused_result, the compiler will not<br>&gt; trigger any warnings.<br>&gt;<br></p><p>We have discussed this internally in the past, and we found that<br>non-mutating methods on structs and enums are usually @warn_unused_result,<br>it is a quite strong heuristic.  With classes, especially Cocoa ones, it<br>might not be the case.  It would be good if someone investigated how this<br>change would affect a class-heavy library, e.g., Foundation.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/4e5cbf94/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d30e546d655d1c7ece0464791a9a90d5?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Adrian Kashivskyy</string> &lt;adrian.kashivskyy at me.com&gt;<p>December 11, 2015 at 01:00:00am</p></header><div class="content"><p>I&#39;m sure there are plenty of methods in Foundation that return a value which can be ignored. However, as Joe noticed, such functions are generally in minority.<br></p><p>I&#39;d rather see a couple of `@allow_unused_result` than a dozen of `@warn_unused_result`.<br></p><p>Pozdrawiam – Regards,<br>Adrian Kashivskyy<br></p><p>&gt; Wiadomość napisana przez Dmitri Gribenko &lt;gribozavr at gmail.com&gt; w dniu 11.12.2015, o godz. 01:41:<br>&gt; <br>&gt; On Thu, Dec 10, 2015 at 2:58 PM, Adrian Kashivskyy via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; I think non-void functions should warn about their return value being unused by default, thus eliminating the need to attribute them with @warn_unused_result.<br>&gt; <br>&gt; Motivation<br>&gt; <br>&gt; It is a rare case for a result of a function to be unused – and most often it&#39;s caused by programmer having too little knowledge of the API. This, in my opinion, is a reasonable area of improvement for the compiler.<br>&gt; <br>&gt; I also noticed that many of stdlib&#39;s functions are marked with this attribute, which supports my point of this being the default behavior.<br>&gt; <br>&gt; Example code<br>&gt; <br>&gt; The following should be default behavior:<br>&gt; <br>&gt;&gt; func square(x: Int) -&gt; Int { return x * x }<br>&gt;&gt; square(2) // warning: result of call to &#39;square&#39; unused<br>&gt; <br>&gt; Currently, unless annotated by @warn_unused_result, the compiler will not trigger any warnings.<br>&gt; <br>&gt; We have discussed this internally in the past, and we found that non-mutating methods on structs and enums are usually @warn_unused_result, it is a quite strong heuristic.  With classes, especially Cocoa ones, it might not be the case.  It would be good if someone investigated how this change would affect a class-heavy library, e.g., Foundation.<br>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com &lt;mailto:gribozavr at gmail.com&gt;&gt;*/<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151211/5c47b2e9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December 10, 2015 at 04:00:00pm</p></header><div class="content"><p>On Thu, Dec 10, 2015 at 4:47 PM, Adrian Kashivskyy<br>&lt;adrian.kashivskyy at me.com&gt; wrote:<br>&gt; I&#39;m sure there are plenty of methods in Foundation that return a value which<br>&gt; can be ignored. However, as Joe noticed, such functions are generally in<br>&gt; minority.<br>&gt;<br>&gt; I&#39;d rather see a couple of `@allow_unused_result` than a dozen of<br>&gt; `@warn_unused_result`.<br></p><p>We are interested in seeing the actual data.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d30e546d655d1c7ece0464791a9a90d5?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Adrian Kashivskyy</string> &lt;adrian.kashivskyy at me.com&gt;<p>December 11, 2015 at 02:00:00am</p></header><div class="content"><p>Sure, I will be happy to conduct an investigation of iOS Foundation framework over the weekend and come back with numeric results.<br></p><p>Pozdrawiam – Regards,<br>Adrian Kashivskyy<br></p><p>&gt; Wiadomość napisana przez Dmitri Gribenko &lt;gribozavr at gmail.com&gt; w dniu 11.12.2015, o godz. 01:49:<br>&gt; <br>&gt; On Thu, Dec 10, 2015 at 4:47 PM, Adrian Kashivskyy<br>&gt; &lt;adrian.kashivskyy at me.com&gt; wrote:<br>&gt;&gt; I&#39;m sure there are plenty of methods in Foundation that return a value which<br>&gt;&gt; can be ignored. However, as Joe noticed, such functions are generally in<br>&gt;&gt; minority.<br>&gt;&gt; <br>&gt;&gt; I&#39;d rather see a couple of `@allow_unused_result` than a dozen of<br>&gt;&gt; `@warn_unused_result`.<br>&gt; <br>&gt; We are interested in seeing the actual data.<br>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151211/e6475cb6/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December 10, 2015 at 05:00:00pm</p></header><div class="content"><p>&gt; On Dec 10, 2015, at 4:49 PM, Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Thu, Dec 10, 2015 at 4:47 PM, Adrian Kashivskyy<br>&gt; &lt;adrian.kashivskyy at me.com&gt; wrote:<br>&gt;&gt; I&#39;m sure there are plenty of methods in Foundation that return a value which<br>&gt;&gt; can be ignored. However, as Joe noticed, such functions are generally in<br>&gt;&gt; minority.<br>&gt;&gt; <br>&gt;&gt; I&#39;d rather see a couple of `@allow_unused_result` than a dozen of<br>&gt;&gt; `@warn_unused_result`.<br>&gt; <br>&gt; We are interested in seeing the actual data.<br></p><p>FWIW, if there was a widespread problem, we could have the importer slap @suppress_unused_result on all imported decls (at least, ones that didn’t have the clang warn_unused_result attribute).<br></p><p>This would allow swift code to have the “right” default policy without causing a ton of noise from imported APIs.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4548eb4f3cff0c2a1cd388161f0ba001?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Kametrixom Tikara</string> &lt;kametrixom at icloud.com&gt;<p>December 11, 2015 at 07:00:00am</p></header><div class="content"><p>I think we actually have two things colliding here: Think about it, why would we need a @suppress_unused_result attribute? Because of side effects! That&#39;s the only reason we would ever need to have this attribute. Now we already have the @effects(readnone) attribute to enable optimizations for pure functions. Now we can combine both of those into one: @pure. This attribute does this:<br>- It indicates that the function is purely functional (= no side-effects, same result for same input)<br>- It implicitly adds the @effects(readnone) attribute to enable such optimizations<br>- It implicitly adds the @warn_unused_result attribute<br></p><p>To make sure that the function actually is pure we need to check that every called function within is pure itself and no external variables get accessed.<br></p><p>Now the only thing to do is to make the compiler implicitly add the @pure keyword where the conditions are satisfied.<br></p><p>Something I haven&#39;t thought about yet: Not being able to read external variables (@effects(readonly)) are also functions without side effects, but they&#39;re not pure, since the result doesn&#39;t have to be the same for the same input. I don&#39;t want to suggest another keyword for that (we have too many already) but I believe this is actually what we want here.<br></p><p>Let me know what you think, FP ftw<br></p><p>– Kame<br></p><p>&gt; On 11 Dec 2015, at 02:31, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 10, 2015, at 4:49 PM, Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Thu, Dec 10, 2015 at 4:47 PM, Adrian Kashivskyy<br>&gt;&gt; &lt;adrian.kashivskyy at me.com&gt; wrote:<br>&gt;&gt;&gt; I&#39;m sure there are plenty of methods in Foundation that return a value which<br>&gt;&gt;&gt; can be ignored. However, as Joe noticed, such functions are generally in<br>&gt;&gt;&gt; minority.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;d rather see a couple of `@allow_unused_result` than a dozen of<br>&gt;&gt;&gt; `@warn_unused_result`.<br>&gt;&gt; <br>&gt;&gt; We are interested in seeing the actual data.<br>&gt; <br>&gt; FWIW, if there was a widespread problem, we could have the importer slap @suppress_unused_result on all imported decls (at least, ones that didn’t have the clang warn_unused_result attribute).<br>&gt; <br>&gt; This would allow swift code to have the “right” default policy without causing a ton of noise from imported APIs.<br>&gt; <br>&gt; -Chris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December 10, 2015 at 10:00:00pm</p></header><div class="content"><p>&gt; On Dec 10, 2015, at 10:23 PM, Kametrixom Tikara &lt;kametrixom at icloud.com&gt; wrote:<br>&gt; <br>&gt; I think we actually have two things colliding here: Think about it, why would we need a @suppress_unused_result attribute? Because of side effects! That&#39;s the only reason we would ever need to have this attribute. Now we already have the @effects(readnone) attribute to enable optimizations for pure functions. Now we can combine both of those into one: @pure. This attribute does this:<br>&gt; - It indicates that the function is purely functional (= no side-effects, same result for same input)<br>&gt; - It implicitly adds the @effects(readnone) attribute to enable such optimizations<br>&gt; - It implicitly adds the @warn_unused_result attribute<br>&gt; <br>&gt; To make sure that the function actually is pure we need to check that every called function within is pure itself and no external variables get accessed.<br>&gt; <br>&gt; Now the only thing to do is to make the compiler implicitly add the @pure keyword where the conditions are satisfied.<br>&gt; <br>&gt; Something I haven&#39;t thought about yet: Not being able to read external variables (@effects(readonly)) are also functions without side effects, but they&#39;re not pure, since the result doesn&#39;t have to be the same for the same input. I don&#39;t want to suggest another keyword for that (we have too many already) but I believe this is actually what we want here.<br></p><p>Discussions of @pure-like attributes are different, and complicated.  We also lack a mutability model for classes at the moment.<br></p><p>-Chris<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>December 11, 2015 at 03:00:00pm</p></header><div class="content"><p>&gt; On Dec 10, 2015, at 4:49 PM, Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Thu, Dec 10, 2015 at 4:47 PM, Adrian Kashivskyy<br>&gt; &lt;adrian.kashivskyy at me.com&gt; wrote:<br>&gt;&gt; I&#39;m sure there are plenty of methods in Foundation that return a value which<br>&gt;&gt; can be ignored. However, as Joe noticed, such functions are generally in<br>&gt;&gt; minority.<br>&gt;&gt; <br>&gt;&gt; I&#39;d rather see a couple of `@allow_unused_result` than a dozen of<br>&gt;&gt; `@warn_unused_result`.<br>&gt; <br>&gt; We are interested in seeing the actual data.<br></p><p><br>Indeed, this change has the potential to produce a huge number of warnings that would not be appreciated by the majority of Swift programmers. One can go ahead and hack the Swift compiler fairly easily and go build some apps to see just how often the warning fires. The place to change in the source is in<br></p><p>	https://github.com/apple/swift/blob/master/lib/Sema/TypeCheckDecl.cpp &lt;https://github.com/apple/swift/blob/master/lib/Sema/TypeCheckDecl.cpp&gt;<br></p><p>so that we always diagnose calls to non-Void functions. It should be an easy one-off change to gather data.<br></p><p>	- Doug<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151211/c0715a0c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d47baf3a0f80c9fd13ece9c4b87c7fce?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Marc Knaup</string> &lt;marc at knaup.koeln&gt;<p>December 12, 2015 at 12:00:00am</p></header><div class="content"><p>Related to this change it would be great when ignoring a closure returned<br>by a function would become a warning instead of an error.<br></p><p>On Sat, Dec 12, 2015 at 12:26 AM, Douglas Gregor via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On Dec 10, 2015, at 4:49 PM, Dmitri Gribenko via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On Thu, Dec 10, 2015 at 4:47 PM, Adrian Kashivskyy<br>&gt; &lt;adrian.kashivskyy at me.com&gt; wrote:<br>&gt;<br>&gt; I&#39;m sure there are plenty of methods in Foundation that return a value<br>&gt; which<br>&gt; can be ignored. However, as Joe noticed, such functions are generally in<br>&gt; minority.<br>&gt;<br>&gt; I&#39;d rather see a couple of `@allow_unused_result` than a dozen of<br>&gt; `@warn_unused_result`.<br>&gt;<br>&gt;<br>&gt; We are interested in seeing the actual data.<br>&gt;<br>&gt;<br>&gt; Indeed, this change has the potential to produce a huge number of warnings<br>&gt; that would not be appreciated by the majority of Swift programmers. One can<br>&gt; go ahead and hack the Swift compiler fairly easily and go build some apps<br>&gt; to see just how often the warning fires. The place to change in the source<br>&gt; is in<br>&gt;<br>&gt; https://github.com/apple/swift/blob/master/lib/Sema/TypeCheckDecl.cpp<br>&gt;<br>&gt; so that we always diagnose calls to non-Void functions. It should be an<br>&gt; easy one-off change to gather data.<br>&gt;<br>&gt; - Doug<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151212/47febfbf/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December 11, 2015 at 06:00:00pm</p></header><div class="content"><p>That makes sense to me.<br></p><p>-Chris<br></p><p>&gt; On Dec 11, 2015, at 3:36 PM, Marc Knaup via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Related to this change it would be great when ignoring a closure returned by a function would become a warning instead of an error.<br>&gt; <br>&gt;&gt; On Sat, Dec 12, 2015 at 12:26 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 10, 2015, at 4:49 PM, Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Thu, Dec 10, 2015 at 4:47 PM, Adrian Kashivskyy<br>&gt;&gt;&gt; &lt;adrian.kashivskyy at me.com&gt; wrote:<br>&gt;&gt;&gt;&gt; I&#39;m sure there are plenty of methods in Foundation that return a value which<br>&gt;&gt;&gt;&gt; can be ignored. However, as Joe noticed, such functions are generally in<br>&gt;&gt;&gt;&gt; minority.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;d rather see a couple of `@allow_unused_result` than a dozen of<br>&gt;&gt;&gt;&gt; `@warn_unused_result`.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We are interested in seeing the actual data.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Indeed, this change has the potential to produce a huge number of warnings that would not be appreciated by the majority of Swift programmers. One can go ahead and hack the Swift compiler fairly easily and go build some apps to see just how often the warning fires. The place to change in the source is in<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift/blob/master/lib/Sema/TypeCheckDecl.cpp<br>&gt;&gt; <br>&gt;&gt; so that we always diagnose calls to non-Void functions. It should be an easy one-off change to gather data.<br>&gt;&gt; <br>&gt;&gt; 	- Doug<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151211/5f9c71a9/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>December 11, 2015 at 11:00:00pm</p></header><div class="content"><p>On Thu, Dec 10, 2015, at 04:41 PM, Dmitri Gribenko via swift-evolution wrote:<br>&gt; We have discussed this internally in the past, and we found that non-<br>&gt; mutating methods on structs and enums are usually @warn_unused_result,<br>&gt; it is a quite strong heuristic.  With classes, especially Cocoa ones,<br>&gt; it might not be the case.  It would be good if someone investigated<br>&gt; how this change would affect a class-heavy library, e.g., Foundation.<br></p><p>I&#39;m curious, what code did you look at to develop this heuristic? I&#39;ve<br>noticed that the stdlib uses a lot of @warn_unused_result, but I don&#39;t<br>think I&#39;ve ever actually seen anyone bother to use it in any of the third-<br>party Swift code that I&#39;ve inspected.<br></p><p>My general feeling here is that, while most non-mutating functions that<br>return results probably aren&#39;t worth calling if you ignore the results,<br>that doesn&#39;t mean that @warn_unused_result is actually something that<br>should necessarily be expected to put on the declaration. Where it would<br>primarily be expected is on functions that look like they might be<br>mutating but aren&#39;t (think `sort()` vs `sortInPlace()`), or on functions<br>that return an object whose deinit triggers behavior that negates the<br>function call (e.g. some sort of `open()` that returns a File object). I<br>think the stdlib uses it a disproportionate amount because the stdlib is<br>used by everybody, and adding the attribute to stdlib declarations<br>therefore has a huge reach for little effort and in particular it may<br>help neophyte programmers.<br></p><p>I will accept that most calls to nonmutating methods on structs and<br>enums are probably good candidates for @warn_unused_result, I&#39;m just<br>arguing that in most cases outside of the stdlib there&#39;s low reward for<br>adding it, and I worry that if we make it the default then we run the<br>risk of punishing users of side-effectful APIs where the API designer<br>never actually tried ignoring the results.<br></p><p>I do support Kametrixom&#39;s idea of a @pure attribute that implies both<br>@effects(readnone) and @warn_unused_result.<br></p><p>-Kevin Ballard<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151211/76615df7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December 12, 2015 at 01:00:00am</p></header><div class="content"><p>On Fri, Dec 11, 2015 at 11:11 PM, Kevin Ballard via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Thu, Dec 10, 2015, at 04:41 PM, Dmitri Gribenko via swift-evolution<br>&gt; wrote:<br>&gt;<br>&gt; We have discussed this internally in the past, and we found that<br>&gt; non-mutating methods on structs and enums are usually @warn_unused_result,<br>&gt; it is a quite strong heuristic.  With classes, especially Cocoa ones, it<br>&gt; might not be the case.  It would be good if someone investigated how this<br>&gt; change would affect a class-heavy library, e.g., Foundation.<br>&gt;<br>&gt;<br>&gt; I&#39;m curious, what code did you look at to develop this heuristic? I&#39;ve<br>&gt; noticed that the stdlib uses a lot of @warn_unused_result, but I don&#39;t<br>&gt; think I&#39;ve ever actually seen anyone bother to use it in any of the<br>&gt; third-party Swift code that I&#39;ve inspected.<br>&gt;<br></p><p>Primarily standard library code, yes, and we took a quick look at a few<br>third-party projects from github.<br></p><p><br>&gt; My general feeling here is that, while most non-mutating functions that<br>&gt; return results probably aren&#39;t worth calling if you ignore the results,<br>&gt; that doesn&#39;t mean that @warn_unused_result is actually something that<br>&gt; should necessarily be expected to put on the declaration.<br>&gt;<br></p><p>Exactly -- so if the compiler just inferred the attribute in those cases<br>where we have a strong heuristic, it would be a win-win situation.<br></p><p><br>&gt; I do support Kametrixom&#39;s idea of a @pure attribute that implies both<br>&gt; @effects(readnone) and @warn_unused_result.<br>&gt;<br></p><p>@pure and @effects are both attributes with ABI implications.  The compiler<br>can&#39;t infer them without constraining future library evolution.  So while I<br>agree in general that something like @pure is a good direction to explore,<br>it won&#39;t necessarily cover all usecases of @warn_unused_result (of course,<br>depending on the semantics of @pure, which we have yet to define).<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151212/16e6bf01/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>December 18, 2015 at 12:00:00am</p></header><div class="content"><p>&gt; It is a rare case for a result of a function to be unused – and most often it&#39;s caused by programmer having too little knowledge of the API. <br>I don&#39;t think this is a real life problem. When you have a class with something like &quot;append&quot; that doesn&#39;t change the receiver but returns a new object, it could be a valuable hint, but I don&#39;t like systems which assume that their users don&#39;t know what they are doing; and if this is actually the case, you are fighting a tough battle where a little warning wont help.<br></p><p>Please also note that ignoring a non-void return value can be absolutely ok in many situations: One example is returning self instead of useless void, which allows to build fluent interfaces - just because Cocoa didn&#39;t adopt the concept of method chaining from Smalltalk, it is still a interesting pattern which is used by other frameworks.<br></p><p>Imho warnings should be reserved for things that can be dangerous, and not to educate programmers...<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/fc17c90f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>December 18, 2015 at 10:00:00am</p></header><div class="content"><p>I like this proposal, I&#39;d also like it if using array.append warned you<br>that you didn&#39;t actually call it (maybe it does in swift 2.2).<br></p><p>My only cornern is whether the following is ambiguous or not:<br>    func pop() {}<br>    func pop() -&gt; Int { return 1 }<br>    pop()<br></p><p>In my opinion that should call the first pop. Without the first pop that<br>would probably have a warning, yet it is a common case to pop and ignore<br>the value. I know I could do this:<br></p><p>let _ = pop()<br></p><p>However that&#39;s ugly just to remove the warning.<br></p><p>I agree with Tino, returning Self should probably not have a warning.<br></p><p>On Friday, 18 December 2015, Tino Heth via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; It is a rare case for a result of a function to be unused – and most often<br>&gt; it&#39;s caused by programmer having too little knowledge of the API.<br>&gt;<br>&gt; I don&#39;t think this is a real life problem. When you have a class with<br>&gt; something like &quot;append&quot; that doesn&#39;t change the receiver but returns a new<br>&gt; object, it could be a valuable hint, but I don&#39;t like systems which assume<br>&gt; that their users don&#39;t know what they are doing; and if this is actually<br>&gt; the case, you are fighting a tough battle where a little warning wont help.<br>&gt;<br>&gt; Please also note that ignoring a non-void return value can be absolutely<br>&gt; ok in many situations: One example is returning self instead of useless<br>&gt; void, which allows to build fluent interfaces - just because Cocoa didn&#39;t<br>&gt; adopt the concept of method chaining from Smalltalk, it is still a<br>&gt; interesting pattern which is used by other frameworks.<br>&gt;<br>&gt; Imho warnings should be reserved for things that can be dangerous, and not<br>&gt; to educate programmers...<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/58ea98db/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d042be5dcfe90e649f760303af3e429?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Jens Persson</string> &lt;jens at bitcycle.com&gt;<p>December 18, 2015 at 02:00:00am</p></header><div class="content"><p>&gt; let _ = pop()<br>&gt; However that&#39;s ugly just to remove the warning.<br></p><p>As noted previously, the let is not necessary:<br>_ = pop()<br></p><p><br></p><p>On Fri, Dec 18, 2015 at 12:46 AM, Andrew Bennett via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I like this proposal, I&#39;d also like it if using array.append warned you<br>&gt; that you didn&#39;t actually call it (maybe it does in swift 2.2).<br>&gt;<br>&gt; My only cornern is whether the following is ambiguous or not:<br>&gt;     func pop() {}<br>&gt;     func pop() -&gt; Int { return 1 }<br>&gt;     pop()<br>&gt;<br>&gt; In my opinion that should call the first pop. Without the first pop that<br>&gt; would probably have a warning, yet it is a common case to pop and ignore<br>&gt; the value. I know I could do this:<br>&gt;<br>&gt; let _ = pop()<br>&gt;<br>&gt; However that&#39;s ugly just to remove the warning.<br>&gt;<br>&gt; I agree with Tino, returning Self should probably not have a warning.<br>&gt;<br>&gt;<br>&gt; On Friday, 18 December 2015, Tino Heth via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; It is a rare case for a result of a function to be unused – and most<br>&gt;&gt; often it&#39;s caused by programmer having too little knowledge of the API.<br>&gt;&gt;<br>&gt;&gt; I don&#39;t think this is a real life problem. When you have a class with<br>&gt;&gt; something like &quot;append&quot; that doesn&#39;t change the receiver but returns a new<br>&gt;&gt; object, it could be a valuable hint, but I don&#39;t like systems which assume<br>&gt;&gt; that their users don&#39;t know what they are doing; and if this is actually<br>&gt;&gt; the case, you are fighting a tough battle where a little warning wont help.<br>&gt;&gt;<br>&gt;&gt; Please also note that ignoring a non-void return value can be absolutely<br>&gt;&gt; ok in many situations: One example is returning self instead of useless<br>&gt;&gt; void, which allows to build fluent interfaces - just because Cocoa didn&#39;t<br>&gt;&gt; adopt the concept of method chaining from Smalltalk, it is still a<br>&gt;&gt; interesting pattern which is used by other frameworks.<br>&gt;&gt;<br>&gt;&gt; Imho warnings should be reserved for things that can be dangerous, and<br>&gt;&gt; not to educate programmers...<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p><p><br>-- <br>bitCycle AB | Smedjegatan 12 | 742 32 Östhammar | Sweden<br>http://www.bitcycle.com/<br>Phone: +46-73-753 24 62<br>E-mail: jens at bitcycle.com<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/ac423f9e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>December 18, 2015 at 12:00:00pm</p></header><div class="content"><p>&gt; _ = pop()<br></p><p>Now that&#39;s what I&#39;d call ugly - I vote against everything that forces me to use more underscores ;-)<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>December 18, 2015 at 12:00:00pm</p></header><div class="content"><p>&gt; On Dec 18, 2015, at 3:47 AM, Tino Heth via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; _ = pop()<br>&gt; <br>&gt; Now that&#39;s what I&#39;d call ugly - I vote against everything that forces me to use more underscores ;-)<br></p><p>“pop()” is an example of the comparatively-rare method that one might want to annotate to avoid the warning: the side-effect is useful even if you’re dropping the result.  We’re only talking about making warn_unused_result the default, not making it the only option.<br></p><p>-Dave<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/193f31b1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>December 18, 2015 at 01:00:00pm</p></header><div class="content"><p>I vote +1 in favor of making warn_unused_result the default. It&#39;s simple, elegant, logical, functional, and will reduce stdlib clutter.<br></p><p>As for replacing it? Although I&#39;d probably be okay with suppress_unused_warning, please consider optional hey_no_worries_mate_on_unused, unused_is_mellow, or dont_harsh_my_unused. Supporting _ = pop() without further warning is icing on the cake, as it enables the behavior to be established at either the API or consuming end.<br></p><p>-- E<br></p><p><br>&gt; On Dec 18, 2015, at 1:25 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 18, 2015, at 3:47 AM, Tino Heth via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; _ = pop()<br>&gt;&gt; <br>&gt;&gt; Now that&#39;s what I&#39;d call ugly - I vote against everything that forces me to use more underscores ;-)<br>&gt; <br>&gt; “pop()” is an example of the comparatively-rare method that one might want to annotate to avoid the warning: the side-effect is useful even if you’re dropping the result.  We’re only talking about making warn_unused_result the default, not making it the only option.<br>&gt; <br>&gt; -Dave<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/cd7aa1cf/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b660eecceda60138f137d353b8289925?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Janosch Hildebrand</string> &lt;jnosh at jnosh.com&gt;<p>December 18, 2015 at 11:00:00pm</p></header><div class="content"><p>I am also strongly in favor of this proposal.<br></p><p>There are probably enough valid use cases for a @suppress_unused_warning but personally I don&#39;t think pop() is a great example.<br></p><p>I think a second method à la dropFirst/Last/... that returns Void would be better at communicating intent and allows pop() to retain the warning.<br></p><p>- Janosch<br></p><p>&gt; On 18 Dec 2015, at 21:48, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I vote +1 in favor of making warn_unused_result the default. It&#39;s simple, elegant, logical, functional, and will reduce stdlib clutter.<br>&gt; <br>&gt; As for replacing it? Although I&#39;d probably be okay with suppress_unused_warning, please consider optional hey_no_worries_mate_on_unused, unused_is_mellow, or dont_harsh_my_unused. Supporting _ = pop() without further warning is icing on the cake, as it enables the behavior to be established at either the API or consuming end.<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt;&gt; On Dec 18, 2015, at 1:25 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 18, 2015, at 3:47 AM, Tino Heth via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _ = pop()<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Now that&#39;s what I&#39;d call ugly - I vote against everything that forces me to use more underscores ;-)<br>&gt;&gt; <br>&gt;&gt; “pop()” is an example of the comparatively-rare method that one might want to annotate to avoid the warning: the side-effect is useful even if you’re dropping the result.  We’re only talking about making warn_unused_result the default, not making it the only option.<br>&gt;&gt; <br>&gt;&gt; -Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/4c66b86c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>December 18, 2015 at 02:00:00pm</p></header><div class="content"><p>Not that it seems highly contested, but +1 from me as well.<br></p><p>Jacob<br></p><p>On Fri, Dec 18, 2015 at 2:01 PM, Janosch Hildebrand via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I am also strongly in favor of this proposal.<br>&gt;<br>&gt; There are probably enough valid use cases for a @suppress_unused_warning but<br>&gt; personally I don&#39;t think pop() is a great example.<br>&gt;<br>&gt; I think a second method à la dropFirst/Last/... that returns Void would<br>&gt; be better at communicating intent and allows pop() to retain the warning.<br>&gt;<br>&gt; - Janosch<br>&gt;<br>&gt; On 18 Dec 2015, at 21:48, Erica Sadun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I vote +1 in favor of making warn_unused_result the default. It&#39;s simple,<br>&gt; elegant, logical, functional, and will reduce stdlib clutter.<br>&gt;<br>&gt; As for replacing it? Although I&#39;d probably be okay with<br>&gt; suppress_unused_warning, please consider optional<br>&gt; hey_no_worries_mate_on_unused, unused_is_mellow, or dont_harsh_my_unused.<br>&gt; Supporting _ = pop() without further warning is icing on the cake, as it<br>&gt; enables the behavior to be established at either the API or consuming end.<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt; On Dec 18, 2015, at 1:25 PM, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On Dec 18, 2015, at 3:47 AM, Tino Heth via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; _ = pop()<br>&gt;<br>&gt;<br>&gt; Now that&#39;s what I&#39;d call ugly - I vote against everything that forces me<br>&gt; to use more underscores ;-)<br>&gt;<br>&gt;<br>&gt; “pop()” is an example of the comparatively-rare method that one might want<br>&gt; to annotate to avoid the warning: the side-effect is useful even if you’re<br>&gt; dropping the result.  We’re only talking about making warn_unused_result<br>&gt; the *default*, not making it the only option.<br>&gt;<br>&gt; -Dave<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/d6e3c47d/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>December 18, 2015 at 02:00:00pm</p></header><div class="content"><p>&gt; On Dec 18, 2015, at 2:01 PM, Janosch Hildebrand via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I am also strongly in favor of this proposal.<br>&gt; <br>&gt; There are probably enough valid use cases for a @suppress_unused_warning but personally I don&#39;t think pop() is a great example.<br>&gt; <br>&gt; I think a second method à la dropFirst/Last/... that returns Void would be better at communicating intent and allows pop() to retain the warning.<br></p><p>Those are non-mutating methods that don’t return Void, FWIW.  Names to be adjusted accordingly… ;-)<br></p><p>&gt; <br>&gt; - Janosch<br>&gt; <br>&gt;&gt; On 18 Dec 2015, at 21:48, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I vote +1 in favor of making warn_unused_result the default. It&#39;s simple, elegant, logical, functional, and will reduce stdlib clutter.<br>&gt;&gt; <br>&gt;&gt; As for replacing it? Although I&#39;d probably be okay with suppress_unused_warning, please consider optional hey_no_worries_mate_on_unused, unused_is_mellow, or dont_harsh_my_unused. Supporting _ = pop() without further warning is icing on the cake, as it enables the behavior to be established at either the API or consuming end.<br>&gt;&gt; <br>&gt;&gt; -- E<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 18, 2015, at 1:25 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 18, 2015, at 3:47 AM, Tino Heth via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _ = pop()<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Now that&#39;s what I&#39;d call ugly - I vote against everything that forces me to use more underscores ;-)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; “pop()” is an example of the comparatively-rare method that one might want to annotate to avoid the warning: the side-effect is useful even if you’re dropping the result.  We’re only talking about making warn_unused_result the default, not making it the only option.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-Dave<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/acc612fb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b660eecceda60138f137d353b8289925?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Janosch Hildebrand</string> &lt;jnosh at jnosh.com&gt;<p>December 18, 2015 at 11:00:00pm</p></header><div class="content"><p>&gt; On 18 Dec 2015, at 23:23, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I think a second method à la dropFirst/Last/... that returns Void would be better at communicating intent and allows pop() to retain the warning.<br>&gt; <br>&gt; Those are non-mutating methods that don’t return Void, FWIW.  Names to be adjusted accordingly… ;-)<br></p><p>Fair point :-)<br></p><p><br>&gt;&gt;&gt; On 18 Dec 2015, at 21:48, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I vote +1 in favor of making warn_unused_result the default. It&#39;s simple, elegant, logical, functional, and will reduce stdlib clutter.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As for replacing it? Although I&#39;d probably be okay with suppress_unused_warning, please consider optional hey_no_worries_mate_on_unused, unused_is_mellow, or dont_harsh_my_unused. Supporting _ = pop() without further warning is icing on the cake, as it enables the behavior to be established at either the API or consuming end.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- E<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 18, 2015, at 1:25 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 18, 2015, at 3:47 AM, Tino Heth via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _ = pop()<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Now that&#39;s what I&#39;d call ugly - I vote against everything that forces me to use more underscores ;-)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; “pop()” is an example of the comparatively-rare method that one might want to annotate to avoid the warning: the side-effect is useful even if you’re dropping the result.  We’re only talking about making warn_unused_result the default, not making it the only option.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; -Dave<br></p><p>- Janosch<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/8170fa1f/attachment-0001.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>December 21, 2015 at 10:00:00am</p></header><div class="content"><p>At this point I think it&#39;s worth actually finding out how much code this<br>would impact in practice. Not just in the stdlib, but in third-party<br>applications and libraries.<br></p><p>This could be done by putting this feature into the language, but<br>requiring a swiftc flag to turn it on. The stdlib would have to be<br>annotated with @allow_unused_result (or whatever we call it) in the<br>right places, such as in pop(), but I suspect that there&#39;s relatively<br>few APIs in the stdlib that need this annotation.<br></p><p>We can then tell people to try adding the flag and seeing how many<br>warnings they get in their code, and to then figure out how many of the<br>warnings are potentially useful (e.g. methods where it&#39;s reasonable to<br>have the warning even if the code wants to ignore it at that moment) vs<br>how many are bad (such as pop(), where ignoring the return value is<br>perfectly reasonable in many cases). Similarly, someone could run this<br>flag against same projects for popular third-party libraries and see<br>what pops up.<br></p><p>-Kevin Ballard<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151221/c507bef5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>December 21, 2015 at 10:00:00am</p></header><div class="content"><p>Also, one question that I haven&#39;t seen come up yet: Would this behavior change affect closures? I&#39;m inclined to say that closures that declare a type explicitly should get this behavior (because it&#39;s easy to add @allow_unused_result to those), but closures whose type is inferred should not have this behavior.<br></p><p>And that brings to mind a second question: How about functions that are<br>generic in their return type? For example,<br>`withExtendedLifetime&lt;T,Result&gt;(_: T, _: T throws -&gt; Result) rethrows -&gt;<br>Result`. The return type may be Void in many cases, but when it&#39;s not<br>Void it still may not be meaningful. It&#39;s hard to know from the generic<br>function whether the compiler should warn if the return type is unused;<br>my inclination is to say it shouldn&#39;t warn by default, because it&#39;s<br>rather common to execute these sorts of functions for their side-<br>effects. Which is to say, if the function is capable of returning Void,<br>then it should not warn without an explicit @warn_unused_result<br>attribute (which does mean we need to keep that attribute even if that<br>becomes the default). The rationale being that a Void return type means<br>the function is executed for its side-effects, and so a non-Void return<br>type may also be executed for side-effects, and functions that are<br>executed for their side-effects shouldn&#39;t warn.<br></p><p>-Kevin Ballard<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151221/faaae71a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>December 21, 2015 at 11:00:00pm</p></header><div class="content"><p>&gt; And that brings to mind a second question: How about functions that are generic in their return type? For example, `withExtendedLifetime&lt;T,Result&gt;(_: T, _: T throws -&gt; Result) rethrows -&gt; Result`. The return type may be Void in many cases, but when it&#39;s not Void it still may not be meaningful. It&#39;s hard to know from the generic function whether the compiler should warn if the return type is unused; my inclination is to say it shouldn&#39;t warn by default, because it&#39;s rather common to execute these sorts of functions for their side-effects. Which is to say, if the function is capable of returning Void, then it should not warn without an explicit @warn_unused_result attribute (which does mean we need to keep that attribute even if that becomes the default). The rationale being that a Void return type means the function is executed for its side-effects, and so a non-Void return type may also be executed for side-effects, and functions that are executed for their side-effects shouldn&#39;t warn. <br></p><p>`withExtendedLifetime()` is generic on its return type and makes sense to ignore, but `CollectionType.reduce()` is also generic on its return type and *doesn&#39;t* make sense to ignore. I think these should follow the same rules as any other function, with the obvious exception that, if the return type *does* happen to be Void, ignoring the return value is fine.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>December 22, 2015 at 11:00:00am</p></header><div class="content"><p>On Mon, Dec 21, 2015, at 11:17 PM, Brent Royal-Gordon wrote:<br>&gt; &gt; And that brings to mind a second question: How about functions that are generic in their return type? For example, `withExtendedLifetime&lt;T,Result&gt;(_: T, _: T throws -&gt; Result) rethrows -&gt; Result`. The return type may be Void in many cases, but when it&#39;s not Void it still may not be meaningful. It&#39;s hard to know from the generic function whether the compiler should warn if the return type is unused; my inclination is to say it shouldn&#39;t warn by default, because it&#39;s rather common to execute these sorts of functions for their side-effects. Which is to say, if the function is capable of returning Void, then it should not warn without an explicit @warn_unused_result attribute (which does mean we need to keep that attribute even if that becomes the default). The rationale being that a Void return type means the function is executed for its side-effects, and so a non-Void return type may also be executed for side-effects, and functions that are executed for their side-effects shouldn&#39;t warn. <br>&gt; <br>&gt; `withExtendedLifetime()` is generic on its return type and makes sense to ignore, but `CollectionType.reduce()` is also generic on its return type and *doesn&#39;t* make sense to ignore. I think these should follow the same rules as any other function, with the obvious exception that, if the return type *does* happen to be Void, ignoring the return value is fine.<br></p><p>Good point. It&#39;s worth cataloging all the stdlib functions with generic return types to find out how many want to allow unused result and how many want to warn on it. That would inform the decision as to how to behave here (because either way we&#39;d have an attribute to pick the opposite behavior).<br></p><p>-Kevin Ballard<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>December 17, 2015 at 03:00:00pm</p></header><div class="content"><p>&gt; On Dec 10, 2015, at 2:58 PM, Adrian Kashivskyy via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I think non-void functions should warn about their return value being unused by default, thus eliminating the need to attribute them with @warn_unused_result.<br>&gt; <br>&gt; Motivation<br>&gt; <br>&gt; It is a rare case for a result of a function to be unused – and most often it&#39;s caused by programmer having too little knowledge of the API. This, in my opinion, is a reasonable area of improvement for the compiler.<br>&gt; <br>&gt; I also noticed that many of stdlib&#39;s functions are marked with this attribute, which supports my point of this being the default behavior.<br>&gt; <br>&gt; Example code<br>&gt; <br>&gt; The following should be default behavior:<br>&gt; <br>&gt;&gt; func square(x: Int) -&gt; Int { return x * x }<br>&gt;&gt; square(2) // warning: result of call to &#39;square&#39; unused<br>&gt; <br>&gt; Currently, unless annotated by @warn_unused_result, the compiler will not trigger any warnings.<br>&gt; <br>&gt; Supporting old behavior<br>&gt; <br>&gt; If, sometimes, it is okay to not use the result, an opposite @suppress_unused_result attribute could be used instead.<br>&gt; <br>&gt;&gt; @suppress_unused_result func square(x: Int) -&gt; Int { return x * x }<br>&gt;&gt; square(2) // no warning<br>&gt; <br>&gt; Impact on existing code<br>&gt; <br>&gt; The existing bare @warn_unused_result attributes will become redundant and can be easily removed by migrator. However, if an existing attribute uses message or mutable_variant argument, it may be left intact, since it provides non-obvious informational value.<br>&gt; <br>&gt; Implementing the above proposal would definitely make the code clearer and intentional, without compromising any major use cases.<br>&gt; <br>&gt; I would be happy to hear your thought on this.<br>&gt;  <br>&gt; <br>&gt; Regards,<br>&gt; Adrian Kashivskyy<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>strong +1 from me.  @warn_unused_result is almost always the right answer in the standard library, and the few cases where it isn’t are very easy to notice (when the call has side-effects and the return value is incidental).<br></p><p>-Dave<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151217/a79dc394/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d042be5dcfe90e649f760303af3e429?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Jens Persson</string> &lt;jens at bitcycle.com&gt;<p>December 18, 2015 at 10:00:00am</p></header><div class="content"><p>&gt;<br>&gt; strong +1 from me.  @warn_unused_result is almost always the right answer<br>&gt; in the standard library, and the few cases where it isn’t are very easy to<br>&gt; notice (when the call has side-effects and the return value is incidental).<br>&gt;<br>&gt; -Dave<br>&gt;<br></p><p>I&#39;m also in favour of this proposal.<br></p><p>Some days ago, in the swift-dev list (<br>https://lists.swift.org/pipermail/swift-dev/Week-of-Mon-20151214/000385.html<br>) I was advised by Chris Lattner to bring a related issue into this<br>discussion:<br></p><p>It&#39;s about the lack of a warning for simple statements that are unused and<br>thus meaningless (so most probably unintentional). To demonstrate what I<br>mean, here&#39;s a short example that currently compiles without any warnings:<br></p><p>func thisFuncHasNoWarnings(a: Int) {<br>    a<br>    &quot;b&quot;<br>    &quot;c&quot; as Character<br>    1.0<br>    [2.0, 3.0]<br>    [&quot;four&quot;, 5, 6.7] as [Any]<br>    &quot;Is this&quot;; a; &quot;problem?&quot;<br>}<br></p><p>I think it might be reasonable to expect a warning on every single line of<br>that function, no?<br>/Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/45497780/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8b9f0c10986385f3c7f50615d6176be3?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Pierre Monod-Broca</string> &lt;pierre at monod-broca.fr&gt;<p>December 18, 2015 at 01:00:00pm</p></header><div class="content"><p>I&#39;m also in favor of this proposal.<br></p><p>I&#39;d like to add we would still need a way to define a specific warning message. And sometimes it would make sense to define it for a type. I&#39;m thinking of ReactiveCocoa, where every method returning a Signal as the same @warn_unused_result(&quot;did you forget to call &#39;observe&#39;&quot;). It would be nice to declare this message on the Signal type, and avoid repetition.<br></p><p>Pierre<br></p><p>&gt; Le 18 déc. 2015 à 10:32, Jens Persson via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; strong +1 from me.  @warn_unused_result is almost always the right answer in the standard library, and the few cases where it isn’t are very easy to notice (when the call has side-effects and the return value is incidental).<br>&gt; <br>&gt; -Dave<br>&gt; <br>&gt; I&#39;m also in favour of this proposal.<br>&gt; <br>&gt; Some days ago, in the swift-dev list ( https://lists.swift.org/pipermail/swift-dev/Week-of-Mon-20151214/000385.html &lt;https://lists.swift.org/pipermail/swift-dev/Week-of-Mon-20151214/000385.html&gt; ) I was advised by Chris Lattner to bring a related issue into this discussion:<br>&gt; <br>&gt; It&#39;s about the lack of a warning for simple statements that are unused and thus meaningless (so most probably unintentional). To demonstrate what I mean, here&#39;s a short example that currently compiles without any warnings:<br>&gt; <br>&gt; func thisFuncHasNoWarnings(a: Int) {<br>&gt;     a<br>&gt;     &quot;b&quot;<br>&gt;     &quot;c&quot; as Character<br>&gt;     1.0<br>&gt;     [2.0, 3.0]<br>&gt;     [&quot;four&quot;, 5, 6.7] as [Any]<br>&gt;     &quot;Is this&quot;; a; &quot;problem?&quot;<br>&gt; }<br>&gt; <br>&gt; I think it might be reasonable to expect a warning on every single line of that function, no?<br>&gt; /Jens<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/994b82a2/attachment-0001.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>December 18, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt; here&#39;s a short example that currently compiles without any warnings:<br>&gt; <br>&gt; func thisFuncHasNoWarnings(a: Int) {<br>&gt;     a<br>&gt;     &quot;b&quot;<br>&gt;     &quot;c&quot; as Character<br>&gt;     1.0<br>&gt;     [2.0, 3.0]<br>&gt;     [&quot;four&quot;, 5, 6.7] as [Any]<br>&gt;     &quot;Is this&quot;; a; &quot;problem?&quot;<br>&gt; }<br></p><p>And what would be the benefit of those warnings?<br>How about<br>for i in 1…1000000 {}<br>Equally stupid - should we have a warning for this as well?<br></p><p>Or<br>if (answer == true) {<br>…<br>} else if (answer == false) {<br>…<br>}<br>(really have seen something similar in the wild - I just don&#39;t remember if there has been an else clause as well ;-)<br></p><p>It is fine to aid inexperienced coders with concise warnings, but for me, the proposal is merely a burden for those who know what they are doing.<br>I wouldn&#39;t object against having the analyzer generate such warnings, though.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/fbadbe96/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e01e37acbfad671da1b94a61cf819d82?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Kenny Leung</string> &lt;kenny_leung at pobox.com&gt;<p>December 19, 2015 at 12:00:00am</p></header><div class="content"><p>Hi All.<br></p><p>Being naive here (also very difficult to say this clearly and succinctly), but why is this the choice of the writer of the function rather than the person using the function? <br></p><p>That is, I would think that if I were worried about unused return results in my code, I would have some kind of flag on the client side, and not on the provider side.<br></p><p>Does this question make any sense?<br></p><p>-Kenny<br></p><p><br>&gt; On Dec 10, 2015, at 2:58 PM, Adrian Kashivskyy via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I think non-void functions should warn about their return value being unused by default, thus eliminating the need to attribute them with @warn_unused_result.<br>&gt; <br>&gt; Motivation<br>&gt; <br>&gt; It is a rare case for a result of a function to be unused – and most often it&#39;s caused by programmer having too little knowledge of the API. This, in my opinion, is a reasonable area of improvement for the compiler.<br>&gt; <br>&gt; I also noticed that many of stdlib&#39;s functions are marked with this attribute, which supports my point of this being the default behavior.<br>&gt; <br>&gt; Example code<br>&gt; <br>&gt; The following should be default behavior:<br>&gt; <br>&gt;&gt; func square(x: Int) -&gt; Int { return x * x }<br>&gt;&gt; square(2) // warning: result of call to &#39;square&#39; unused<br>&gt; <br>&gt; Currently, unless annotated by @warn_unused_result, the compiler will not trigger any warnings.<br>&gt; <br>&gt; Supporting old behavior<br>&gt; <br>&gt; If, sometimes, it is okay to not use the result, an opposite @suppress_unused_result attribute could be used instead.<br>&gt; <br>&gt;&gt; @suppress_unused_result func square(x: Int) -&gt; Int { return x * x }<br>&gt;&gt; square(2) // no warning<br>&gt; <br>&gt; Impact on existing code<br>&gt; <br>&gt; The existing bare @warn_unused_result attributes will become redundant and can be easily removed by migrator. However, if an existing attribute uses message or mutable_variant argument, it may be left intact, since it provides non-obvious informational value.<br>&gt; <br>&gt; Implementing the above proposal would definitely make the code clearer and intentional, without compromising any major use cases.<br>&gt; <br>&gt; I would be happy to hear your thought on this.<br>&gt;  <br>&gt; <br>&gt; Regards,<br>&gt; Adrian Kashivskyy<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f9e638540251a5a2a70ae516ad544281?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Frederick Kellison-Linn</string> &lt;fred.kl at me.com&gt;<p>December 19, 2015 at 03:00:00am</p></header><div class="content"><p>The idea is that the writer of the function is the one who can decide whether or not the result of their function can be safely ignored. Imagine you wrote a function in Swift:<br></p><p>func times(x: Int, y: Int) -&gt; Int {<br>    return x * y;<br>}<br></p><p>At the point of writing this function (though it may be a trivial example), you know that any code which ignores the return value is doing something wrong. OTOH, in the case of a method like pop(), you might have:<br></p><p>func pop() -&gt; T {<br>    let tmp: T = stack[top]<br>    top -= 1<br>    return tmp<br>}<br></p><p>Here, the writer of this method knows that sometimes the method may be called without needing to use the return value. The only case in which a return value might need to be ignored is in a function or method which has some sort of side effect. The writer of the function knows whether or not a side effect exists, so it is safe to allow them to annotate whether or not a return value can be ignored.<br></p><p>FKL<br></p><p>&gt; On Dec 19, 2015, at 3:04 AM, Kenny Leung via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi All.<br>&gt; <br>&gt; Being naive here (also very difficult to say this clearly and succinctly), but why is this the choice of the writer of the function rather than the person using the function? <br>&gt; <br>&gt; That is, I would think that if I were worried about unused return results in my code, I would have some kind of flag on the client side, and not on the provider side.<br>&gt; <br>&gt; Does this question make any sense?<br>&gt; <br>&gt; -Kenny<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 10, 2015, at 2:58 PM, Adrian Kashivskyy via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I think non-void functions should warn about their return value being unused by default, thus eliminating the need to attribute them with @warn_unused_result.<br>&gt;&gt; <br>&gt;&gt; Motivation<br>&gt;&gt; <br>&gt;&gt; It is a rare case for a result of a function to be unused – and most often it&#39;s caused by programmer having too little knowledge of the API. This, in my opinion, is a reasonable area of improvement for the compiler.<br>&gt;&gt; <br>&gt;&gt; I also noticed that many of stdlib&#39;s functions are marked with this attribute, which supports my point of this being the default behavior.<br>&gt;&gt; <br>&gt;&gt; Example code<br>&gt;&gt; <br>&gt;&gt; The following should be default behavior:<br>&gt;&gt; <br>&gt;&gt;&gt; func square(x: Int) -&gt; Int { return x * x }<br>&gt;&gt;&gt; square(2) // warning: result of call to &#39;square&#39; unused<br>&gt;&gt; <br>&gt;&gt; Currently, unless annotated by @warn_unused_result, the compiler will not trigger any warnings.<br>&gt;&gt; <br>&gt;&gt; Supporting old behavior<br>&gt;&gt; <br>&gt;&gt; If, sometimes, it is okay to not use the result, an opposite @suppress_unused_result attribute could be used instead.<br>&gt;&gt; <br>&gt;&gt;&gt; @suppress_unused_result func square(x: Int) -&gt; Int { return x * x }<br>&gt;&gt;&gt; square(2) // no warning<br>&gt;&gt; <br>&gt;&gt; Impact on existing code<br>&gt;&gt; <br>&gt;&gt; The existing bare @warn_unused_result attributes will become redundant and can be easily removed by migrator. However, if an existing attribute uses message or mutable_variant argument, it may be left intact, since it provides non-obvious informational value.<br>&gt;&gt; <br>&gt;&gt; Implementing the above proposal would definitely make the code clearer and intentional, without compromising any major use cases.<br>&gt;&gt; <br>&gt;&gt; I would be happy to hear your thought on this.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Regards,<br>&gt;&gt; Adrian Kashivskyy<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e01e37acbfad671da1b94a61cf819d82?s=50"></div><header><strong>Make non-void functions @warn_unused_result by default</strong> from <string>Kenny Leung</string> &lt;kenny_leung at pobox.com&gt;<p>December 19, 2015 at 12:00:00am</p></header><div class="content"><p>Hi Frederick.<br></p><p>Thanks for the explanation. This makes sense.<br></p><p>Since I’m on the side of simplicity and deliberateness - I like the fact that Swift makes you say, “I meant to do that” - I vote for making @warn_unused_result the default with no opposite-sense replacement. You would have to do _ = blah() to tell the reader you know that there’s a return value and you don’t care.<br></p><p>-Kenny<br></p><p><br>&gt; On Dec 19, 2015, at 12:13 AM, Frederick Kellison-Linn via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The idea is that the writer of the function is the one who can decide whether or not the result of their function can be safely ignored. Imagine you wrote a function in Swift:<br>&gt; <br>&gt; func times(x: Int, y: Int) -&gt; Int {<br>&gt;    return x * y;<br>&gt; }<br>&gt; <br>&gt; At the point of writing this function (though it may be a trivial example), you know that any code which ignores the return value is doing something wrong. OTOH, in the case of a method like pop(), you might have:<br>&gt; <br>&gt; func pop() -&gt; T {<br>&gt;    let tmp: T = stack[top]<br>&gt;    top -= 1<br>&gt;    return tmp<br>&gt; }<br>&gt; <br>&gt; Here, the writer of this method knows that sometimes the method may be called without needing to use the return value. The only case in which a return value might need to be ignored is in a function or method which has some sort of side effect. The writer of the function knows whether or not a side effect exists, so it is safe to allow them to annotate whether or not a return value can be ignored.<br>&gt; <br>&gt; FKL<br>&gt; <br>&gt;&gt; On Dec 19, 2015, at 3:04 AM, Kenny Leung via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi All.<br>&gt;&gt; <br>&gt;&gt; Being naive here (also very difficult to say this clearly and succinctly), but why is this the choice of the writer of the function rather than the person using the function? <br>&gt;&gt; <br>&gt;&gt; That is, I would think that if I were worried about unused return results in my code, I would have some kind of flag on the client side, and not on the provider side.<br>&gt;&gt; <br>&gt;&gt; Does this question make any sense?<br>&gt;&gt; <br>&gt;&gt; -Kenny<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 10, 2015, at 2:58 PM, Adrian Kashivskyy via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think non-void functions should warn about their return value being unused by default, thus eliminating the need to attribute them with @warn_unused_result.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Motivation<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It is a rare case for a result of a function to be unused – and most often it&#39;s caused by programmer having too little knowledge of the API. This, in my opinion, is a reasonable area of improvement for the compiler.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I also noticed that many of stdlib&#39;s functions are marked with this attribute, which supports my point of this being the default behavior.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Example code<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The following should be default behavior:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func square(x: Int) -&gt; Int { return x * x }<br>&gt;&gt;&gt;&gt; square(2) // warning: result of call to &#39;square&#39; unused<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Currently, unless annotated by @warn_unused_result, the compiler will not trigger any warnings.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Supporting old behavior<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If, sometimes, it is okay to not use the result, an opposite @suppress_unused_result attribute could be used instead.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; @suppress_unused_result func square(x: Int) -&gt; Int { return x * x }<br>&gt;&gt;&gt;&gt; square(2) // no warning<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Impact on existing code<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The existing bare @warn_unused_result attributes will become redundant and can be easily removed by migrator. However, if an existing attribute uses message or mutable_variant argument, it may be left intact, since it provides non-obvious informational value.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Implementing the above proposal would definitely make the code clearer and intentional, without compromising any major use cases.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I would be happy to hear your thought on this.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Regards,<br>&gt;&gt;&gt; Adrian Kashivskyy<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
