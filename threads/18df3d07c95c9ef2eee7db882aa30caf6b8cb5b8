<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2b38d2b59a2dfdd3d78493f206827917?s=50"></div><header><strong>Testing Assertions</strong> from <string>Mohamed Ebrahim Afifi</string> &lt;mohamede1945 at gmail.com&gt;<p>December 31, 2015 at 11:00:00am</p></header><div class="content"><p>Right now, we cannot easily test failed assertions (assert,<br>assertionFailure, precondition, preconditionFailure, fatalError) in our own<br>code without some hacks in the code under test. Like this example<br>https://github.com/mohamede1945/AssertionsTestingExample<br></p><p>So, my suggestion is to add for XCTest something very similar to<br>*expectCrashLater* that is defined here<br>https://github.com/apple/swift/blob/9b15d03b73b9e8a6dbd3f71b5c78660a359e8e26/stdlib/private/StdlibUnittest/StdlibUnittest.swift.gyb<br>and used in tests like this example<br>https://github.com/apple/swift/blob/master/validation-test/stdlib/Assert.swift<br></p><p>What do you think?<br></p><p>Best Regards,<br>Mohamed Afifi<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151231/18dfb5b8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Testing Assertions</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>January  4, 2016 at 04:00:00pm</p></header><div class="content"><p>Hi Mohamed,<br></p><p>I agree it’s very difficult to test assertions in XCTest today. This approach looks interesting, but I’m not sure how it’s possible to implement within XCTest’s current architecture. Do you have any idea how this would be implemented? <br></p><p>- Tony<br></p><p>&gt; On Dec 31, 2015, at 1:35 AM, Mohamed Ebrahim Afifi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Right now, we cannot easily test failed assertions (assert, assertionFailure, precondition, preconditionFailure, fatalError) in our own code without some hacks in the code under test. Like this example https://github.com/mohamede1945/AssertionsTestingExample &lt;https://github.com/mohamede1945/AssertionsTestingExample&gt;<br>&gt; <br>&gt; So, my suggestion is to add for XCTest something very similar to expectCrashLater that is defined here https://github.com/apple/swift/blob/9b15d03b73b9e8a6dbd3f71b5c78660a359e8e26/stdlib/private/StdlibUnittest/StdlibUnittest.swift.gyb &lt;https://github.com/apple/swift/blob/9b15d03b73b9e8a6dbd3f71b5c78660a359e8e26/stdlib/private/StdlibUnittest/StdlibUnittest.swift.gyb&gt;<br>&gt; and used in tests like this example https://github.com/apple/swift/blob/master/validation-test/stdlib/Assert.swift &lt;https://github.com/apple/swift/blob/master/validation-test/stdlib/Assert.swift&gt;<br>&gt; <br>&gt; What do you think?<br>&gt; <br>&gt; Best Regards,<br>&gt; Mohamed Afifi<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160104/93b5edcd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8da0cba30fa0e47cf4fb26ebb968e552?s=50"></div><header><strong>Testing Assertions</strong> from <string>Jérôme Duquennoy</string> &lt;jerome+swift at duquennoy.fr&gt;<p>January  5, 2016 at 04:00:00pm</p></header><div class="content"><p>It is true that testing an assert is not really possible, as it basically crashes the app.<br></p><p>But we have to take into account that the behaviour of the assert method is not strait-forward : it depends on what is the optimisation level. Here is an extract of the inline doc of the assert method :<br></p><p>* In playgrounds and -Onone builds (the default for Xcode&#39;s Debug<br>  configuration): if `condition` evaluates to false, stop program<br>  execution in a debuggable state after printing `message`.<br>* In -O builds (the default for Xcode&#39;s Release configuration),<br>  `condition` is not evaluated, and there are no effects.<br>* In -Ounchecked builds, `condition` is not evaluated, but the<br>  optimizer may assume that it *would* evaluate to `true`. Failure<br>  to satisfy that assumption in -Ounchecked builds is a serious<br>  programming error.<br></p><p>I have the feeling that assertions are not meant to be tested, as they are not meant to be executed in production code.<br>And I have to add that writing tests that would not behave the same depending on the optimisation level would make me feel rather uncomfortable.<br></p><p>Maybe throwing an error would be more adapted for a validation that must also occur on production builds ?<br>Then, testing it would be pretty easy, with an extension to XCTestCase like that :<br></p><p>extension XCTestCase {<br></p><p>  func XCTAssertThrows(file: String = __FILE__, line: UInt = __LINE__, _ closure:() throws -&gt; Void) {<br>    do {<br>      try closure();<br>      XCTFail(&quot;Closure did not throw an error&quot;, file: file, line: line);<br>    } catch {<br>      // expected, nothing to do<br>    }<br>  }<br>  <br>  func XCTAssertNoThrow&lt;T&gt;(file: String = __FILE__, line: UInt = __LINE__, _ closure:() throws -&gt; T) -&gt; T? {<br>    do {<br>      return try closure();<br>    } catch let error {<br>      XCTFail(&quot;Closure throw unexpected error \(error)&quot;, file: file, line: line);<br>    }<br>    return nil;<br>  }<br>  <br>}<br></p><p>Jérôme<br></p><p><br>&gt; On 05 Jan 2016, at 01:42, Tony Parker via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Mohamed,<br>&gt; <br>&gt; I agree it’s very difficult to test assertions in XCTest today. This approach looks interesting, but I’m not sure how it’s possible to implement within XCTest’s current architecture. Do you have any idea how this would be implemented? <br>&gt; <br>&gt; - Tony<br>&gt; <br>&gt;&gt; On Dec 31, 2015, at 1:35 AM, Mohamed Ebrahim Afifi via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Right now, we cannot easily test failed assertions (assert, assertionFailure, precondition, preconditionFailure, fatalError) in our own code without some hacks in the code under test. Like this example https://github.com/mohamede1945/AssertionsTestingExample &lt;https://github.com/mohamede1945/AssertionsTestingExample&gt;<br>&gt;&gt; <br>&gt;&gt; So, my suggestion is to add for XCTest something very similar to expectCrashLater that is defined here https://github.com/apple/swift/blob/9b15d03b73b9e8a6dbd3f71b5c78660a359e8e26/stdlib/private/StdlibUnittest/StdlibUnittest.swift.gyb &lt;https://github.com/apple/swift/blob/9b15d03b73b9e8a6dbd3f71b5c78660a359e8e26/stdlib/private/StdlibUnittest/StdlibUnittest.swift.gyb&gt;<br>&gt;&gt; and used in tests like this example https://github.com/apple/swift/blob/master/validation-test/stdlib/Assert.swift &lt;https://github.com/apple/swift/blob/master/validation-test/stdlib/Assert.swift&gt;<br>&gt;&gt; <br>&gt;&gt; What do you think?<br>&gt;&gt; <br>&gt;&gt; Best Regards,<br>&gt;&gt; Mohamed Afifi<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160105/b04bbfbe/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
