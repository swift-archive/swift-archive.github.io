<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Case conventions for mixed-case words (like &quot;iPad&quot; and &quot;NaN&quot;)</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>May  5, 2016 at 08:00:00am</p></header><div class="content"><p>Hi, everyone. Today in the API Design Guidelines &lt;https://swift.org/documentation/api-design-guidelines/&gt; we have this section on case:<br></p><p>&gt; Follow case conventions. Names of types and protocols are UpperCamelCase. Everything else is lowerCamelCase.<br>&gt; <br>&gt; Acronyms and initialisms that commonly appear as all upper case in American English should be uniformly up- or down-cased according to case conventions:<br>&gt; <br>&gt; var utf8Bytes: [UTF8.CodeUnit]<br>&gt; var isRepresentableAsASCII = true<br>&gt; var userSMTPServer: SecureSMTPServer<br>&gt; <br>&gt; Other acronyms should be treated as ordinary words:<br>&gt; <br>&gt; var radarDetector: RadarScanner<br>&gt; var enjoysScubaDiving = true<br></p><p>However, this doesn&#39;t directly address words that are conventionally written with mixed case. Usually these are names, such as &quot;iPad&quot;, &quot;LaTeX&quot;, or “NeXT”, but sometimes they’re just acronyms or initialisms with very strong conventions, like “NaN”. (Yes, the FloatingPoint proposal is what prompted this whole thing.)<br></p><p>There are a few options for what we could do with these words to make them consistent with our existing rules for words that are all-uppercase, all-lowercase, or capitalized (first letter uppercase, remaining letters lowercase). It’s pretty clear from the “utf8Bytes” example above that use at the start of a “lowerCamelCase” identifier means uniformly downcasing all of the letters: “ipad”, “latex”, “next”, “nan”. However, it’s unclear exactly what operation is being applied to subsequent words in an identifier:<br></p><p>Option 1: Upcase the first letter, leave all the other letters alone. This is consistent with all of the examples shown in the API design guidelines, and produces “IPad”, “LaTeX”, “NeXT”, and “NaN”. (In context, that might be “supportsIPad”, “LaTeXRenderer”, “isNeXTPlatform”, and “signalingNaN”, alongside “ipadIcon”, “latexSource”, “nextLogo”, and “nanValue”.)<br></p><p>Option 2: If any letters are lowercase, upcase the first letter and downcase all other letters. This is also consistent with all of the examples shown in the API design guidelines, and produces “Ipad”, “Latex”, “Next”, and “Nan”. (In context, that’s “supportsIpad”, “LatexRenderer”, “isNextPlatform”, and “signalingNan”, alongside “ipadIcon”, “latexSource”, “nextLogo”, and “nanValue”.)<br></p><p>I prefer option 1 because I think it’s easier to recognize the original form of the word; DaveA notes that under option 2 it’s easier to find the word boundaries.<br></p><p>(“NeXT” is an especially tricky case because without case it’s not distinguishable from the normal word “next”. This situation is rare but not nonexistent. Then again, “Apple” is not distinguishable from the normal word “apple” either, and we seem to do fine there.)<br></p><p>Thoughts?<br>Jordan<br></p><p>P.S. The rules also don’t special-case all-lowercase initialisms, like “mph” (for “miles per hour”). Under either option above, we’d get “Mph”. If we want some other behavior, <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160505/fa474594/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Case conventions for mixed-case words (like &quot;iPad&quot; and &quot;NaN&quot;)</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>May  5, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On May 5, 2016, at 10:26 AM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; (“NeXT” is an especially tricky case because without case it’s not distinguishable from the normal word “next”. This situation is rare but not nonexistent. Then again, “Apple” is not distinguishable from the normal word “apple” either, and we seem to do fine there.)<br>“Apple” isn’t the name of a common function for dealing with collections &amp; sequences.<br></p><p>“NeXT” is probably rare enough that we could keep it as-written regardless of whatever we settle on for the rest. Personally, I prefer to use the correct (that is, whatever you’d normally use in written communication) camel case, capitalizing the first letter when necessary (such as “foo.isIPad”) and not bother worrying about it more than that unless doing so would make for an ambiguous name.<br></p><p>That said, I’ve never tried to take part in defining standard library naming conventions before... There’s a fair chance I’m not seeing an obvious problem, rather than merely disagreeing.<br></p><p>- Dave Sweeris<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
