<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cf171dfe30dbc1104f2c6cf2ef83fb38?s=50"></div><header><strong>Calling default implementation of protocols</strong> from <string>Mateusz Zając</string> &lt;cojoj at icloud.com&gt;<p>December  8, 2015 at 06:00:00pm</p></header><div class="content"><p>If you define a simple protocol like:<br>protocol Foo {<br>    func testPrint()<br>}<br>And than you provide a default implementation for testPrint() method in protocol extensions like:<br>extension Foo {<br>    func testPrint() {<br>        print(&quot;Protocol extension call&quot;)<br>    }<br>}<br>You aren&#39;t allowed to call the fault implementation from the structure eg.<br>struct Bar: Foo {<br>    func testPrint() {<br>        self.testPrint()<br>        print(&quot;Call from struct&quot;)<br>    }<br>}<br>This is some sort of limitation as often happens that a default implementation is providing a major part of implementation and only one, simple line is changed in actual struct implementation. If you&#39;re using classes you can achieve this by creating a base class and calling a method on super. If you consider structs, there&#39;s no such possibility and you always have to write a whole implementation from scratch in each structure which conforms to the protocol.<br>You can use composition by creating nested structure, but it&#39;s neither logical nor clean... It&#39;s rather a hack...<br>struct Bar: Foo {<br>    func testPrint() {<br>        // Calling default implementation<br>        struct Dummy : Foo {}<br>        let dummy = Dummy()<br>        dummy.testPrint()<br>        print(&quot;Call from struct&quot;)<br>    }<br>}<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151208/ff991ad5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a06dd7924588141b9c907543798c2524?s=50"></div><header><strong>Calling default implementation of protocols</strong> from <string>Gwendal Roué</string> &lt;gwendal.roue at gmail.com&gt;<p>December  8, 2015 at 08:00:00pm</p></header><div class="content"><p>I totally agree.<br></p><p>Yes this limitation only applies to methods declared in the protocol, that are always dynamically dispatched.<br></p><p>For functions that are only declared in the protocol extension, but not in the protocol itself, you can use the static dispatch:<br></p><p>    protocol P {<br>        func dyn()<br>    }<br></p><p>    extension P {<br>        func dyn() {<br>            print(&quot;P.dyn&quot;)<br>        }<br>        func ext() {<br>            print(&quot;P.ext&quot;)<br>        }<br>    }<br></p><p>    struct C : P {<br>        func dyn() {<br>            // No way to call P.dyn because of dynamic dispatch<br>            print(&quot;C.dyn&quot;)<br>        }<br>        func ext() {<br>            (self as P).ext()<br>            print(&quot;C.ext&quot;)<br>        }<br>    }<br></p><p>    C().ext() // prints P.Ext, C.ext<br></p><p>Gwendal Roué<br></p><p><br></p><p><br>&gt; Le 8 déc. 2015 à 18:43, Mateusz Zajac via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; If you define a simple protocol like:<br>&gt; protocol Foo {<br>&gt;     func testPrint()<br>&gt; }<br>&gt; And than you provide a default implementation for testPrint() method in protocol extensions like:<br>&gt; extension Foo {<br>&gt;     func testPrint() {<br>&gt;         print(&quot;Protocol extension call&quot;)<br>&gt;     }<br>&gt; }<br>&gt; You aren&#39;t allowed to call the fault implementation from the structure eg.<br>&gt; struct Bar: Foo {<br>&gt;     func testPrint() {<br>&gt;         self.testPrint()<br>&gt;         print(&quot;Call from struct&quot;)<br>&gt;     }<br>&gt; }<br>&gt; This is some sort of limitation as often happens that a default implementation is providing a major part of implementation and only one, simple line is changed in actual struct implementation. If you&#39;re using classes you can achieve this by creating a base class and calling a method on super. If you consider structs, there&#39;s no such possibility and you always have to write a whole implementation from scratch in each structure which conforms to the protocol.<br>&gt; You can use composition by creating nested structure, but it&#39;s neither logical nor clean... It&#39;s rather a hack...<br>&gt; struct Bar: Foo {<br>&gt;     func testPrint() {<br>&gt;         // Calling default implementation<br>&gt;         struct Dummy : Foo {}<br>&gt;         let dummy = Dummy()<br>&gt;         dummy.testPrint()<br>&gt;         print(&quot;Call from struct&quot;)<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151208/d0908360/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: open.gif<br>Type: image/gif<br>Size: 43 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151208/d0908360/attachment.gif&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Calling default implementation of protocols</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>December  8, 2015 at 03:00:00pm</p></header><div class="content"><p>I do think this would indeed be a feature worth having, but it would need design. There&#39;s also a simple workaround for now: put the default implementation in another method or a free function.<br></p><p>Jordan<br></p><p><br>&gt; On Dec 8, 2015, at 9:43, Mateusz Zajac via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; If you define a simple protocol like:<br>&gt; protocol Foo {<br>&gt;     func testPrint()<br>&gt; }<br>&gt; And than you provide a default implementation for testPrint() method in protocol extensions like:<br>&gt; extension Foo {<br>&gt;     func testPrint() {<br>&gt;         print(&quot;Protocol extension call&quot;)<br>&gt;     }<br>&gt; }<br>&gt; You aren&#39;t allowed to call the fault implementation from the structure eg.<br>&gt; struct Bar: Foo {<br>&gt;     func testPrint() {<br>&gt;         self.testPrint()<br>&gt;         print(&quot;Call from struct&quot;)<br>&gt;     }<br>&gt; }<br>&gt; This is some sort of limitation as often happens that a default implementation is providing a major part of implementation and only one, simple line is changed in actual struct implementation. If you&#39;re using classes you can achieve this by creating a base class and calling a method on super. If you consider structs, there&#39;s no such possibility and you always have to write a whole implementation from scratch in each structure which conforms to the protocol.<br>&gt; You can use composition by creating nested structure, but it&#39;s neither logical nor clean... It&#39;s rather a hack...<br>&gt; struct Bar: Foo {<br>&gt;     func testPrint() {<br>&gt;         // Calling default implementation<br>&gt;         struct Dummy : Foo {}<br>&gt;         let dummy = Dummy()<br>&gt;         dummy.testPrint()<br>&gt;         print(&quot;Call from struct&quot;)<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151208/d6ab401d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cf171dfe30dbc1104f2c6cf2ef83fb38?s=50"></div><header><strong>Calling default implementation of protocols</strong> from <string>Mateusz Zając</string> &lt;cojoj at icloud.com&gt;<p>December  9, 2015 at 05:00:00am</p></header><div class="content"><p>I really love the workaround with another method used as a super method - looks really clean and easy to use compared to nested struct.<br></p><p>Mateusz<br></p><p>Dnia 09.12.2015 o godz. 00:58 Jordan Rose &lt;jordan_rose at apple.com&gt; napisał(a):<br></p><p>&gt; I do think this would indeed be a feature worth having, but it would need design. There&#39;s also a simple workaround for now: put the default implementation in another method or a free function.<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 8, 2015, at 9:43, Mateusz Zajac via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; If you define a simple protocol like:<br>&gt;&gt; protocol Foo {<br>&gt;&gt;     func testPrint()<br>&gt;&gt; }<br>&gt;&gt; And than you provide a default implementation for testPrint() method in protocol extensions like:<br>&gt;&gt; extension Foo {<br>&gt;&gt;     func testPrint() {<br>&gt;&gt;         print(&quot;Protocol extension call&quot;)<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; You aren&#39;t allowed to call the fault implementation from the structure eg.<br>&gt;&gt; struct Bar: Foo {<br>&gt;&gt;     func testPrint() {<br>&gt;&gt;         self.testPrint()<br>&gt;&gt;         print(&quot;Call from struct&quot;)<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; This is some sort of limitation as often happens that a default implementation is providing a major part of implementation and only one, simple line is changed in actual struct implementation. If you&#39;re using classes you can achieve this by creating a base class and calling a method on super. If you consider structs, there&#39;s no such possibility and you always have to write a whole implementation from scratch in each structure which conforms to the protocol.<br>&gt;&gt; You can use composition by creating nested structure, but it&#39;s neither logical nor clean... It&#39;s rather a hack...<br>&gt;&gt; struct Bar: Foo {<br>&gt;&gt;     func testPrint() {<br>&gt;&gt;         // Calling default implementation<br>&gt;&gt;         struct Dummy : Foo {}<br>&gt;&gt;         let dummy = Dummy()<br>&gt;&gt;         dummy.testPrint()<br>&gt;&gt;         print(&quot;Call from struct&quot;)<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151209/28afdfc3/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
