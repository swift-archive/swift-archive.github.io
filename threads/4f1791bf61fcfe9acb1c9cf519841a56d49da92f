<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>mutating/non-mutating suggestion from a Rubyist</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>April 24, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; The whole naming issue seems to be caused by the .union(_:) function. The Swift Guidelines say that mutating functions should use a verb, and non-mutating forms should use a noun, but in this case, the word union itself is a verb and a noun.<br>&gt; <br>&gt; Have we considered this, then:<br>&gt; <br>&gt; a.union(b) //mutating<br>&gt; <br>&gt; _ = a.union(b) //non-mutating<br>&gt; <br>&gt; There is no ambiguity in most situations, and the fact the Swift compiler can&#39;t disambiguate this at the moment is a bug I&#39;d like to see fixed in the Swift 3 timeframe. I think this wouldn&#39;t be such a bad compromise, and other functions could still use the standard -ed/-ing system alongside this without the API looking inconsistent, unlike with the form- prefix.<br>&gt; <br>&gt; Admittedly, there is merit to the idea that functional methods should make non-mutating forms the primary form, but I feel like we should figure out what our stance is on this methodology in general. A mention in the Guidelines one way or the other would be nice, since the current rules seem to support this.<br>&gt; <br>&gt; &gt; From James F<br>&gt; <br>&gt; <br>&gt; <br></p><p>Can’t we do this for every mutating method? i.e.<br></p><p>var numbers = [1,3,2]<br>let sorted = numbers.sort()<br>// sorted is [1,2,3], numbers is [1,3,2]<br>numbers.sort()<br>// numbers is [1,2,3]<br></p><p>I suppose this would require that the mutating version doesn’t return anything, and I don’t know if that’s ever a problem.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2679e7a28cb46e207a562ad4e7fc45fc?s=50"></div><header><strong>mutating/non-mutating suggestion from a Rubyist</strong> from <string>James F</string> &lt;conductator at ntlworld.com&gt;<p>April 24, 2016 at 04:00:00pm</p></header><div class="content"><p>The idea of distinguishing all mutating/non-mutating functions with only the assignment operator did occur to me as I wrote that.<br>Using such a rule would allow automatic generation of mutating methods from non-mutating ones, since the naming would no longer need changing.<br>However, this would also mean scrapping half the Naming Guidelines, so I&#39;m hesitant to put that possibility forward as a serious proposal.<br></p><p>I think union (verb) vs union (noun) would work as a one off, though, since it fits the guidelines as they currently stand. It would be a nice way to demonstrate that the compiler can make the distinction in a public API.<br></p><p>From James F<br></p><p>On 24 Apr 2016, at 15:49, Tim Vermeulen &lt;tvermeulen at me.com&gt; wrote:<br></p><p>&gt;&gt; The whole naming issue seems to be caused by the .union(_:) function. The Swift Guidelines say that mutating functions should use a verb, and non-mutating forms should use a noun, but in this case, the word union itself is a verb and a noun.<br>&gt;&gt; <br>&gt;&gt; Have we considered this, then:<br>&gt;&gt; <br>&gt;&gt; a.union(b) //mutating<br>&gt;&gt; <br>&gt;&gt; _ = a.union(b) //non-mutating<br>&gt;&gt; <br>&gt;&gt; There is no ambiguity in most situations, and the fact the Swift compiler can&#39;t disambiguate this at the moment is a bug I&#39;d like to see fixed in the Swift 3 timeframe. I think this wouldn&#39;t be such a bad compromise, and other functions could still use the standard -ed/-ing system alongside this without the API looking inconsistent, unlike with the form- prefix.<br>&gt;&gt; <br>&gt;&gt; Admittedly, there is merit to the idea that functional methods should make non-mutating forms the primary form, but I feel like we should figure out what our stance is on this methodology in general. A mention in the Guidelines one way or the other would be nice, since the current rules seem to support this.<br>&gt;&gt; <br>&gt;&gt;&gt; From James F<br>&gt; <br>&gt; Can’t we do this for every mutating method? i.e.<br>&gt; <br>&gt; var numbers = [1,3,2]<br>&gt; let sorted = numbers.sort()<br>&gt; // sorted is [1,2,3], numbers is [1,3,2]<br>&gt; numbers.sort()<br>&gt; // numbers is [1,2,3]<br>&gt; <br>&gt; I suppose this would require that the mutating version doesn’t return anything, and I don’t know if that’s ever a problem.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>mutating/non-mutating suggestion from a Rubyist</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 25, 2016 at 03:00:00pm</p></header><div class="content"><p>On 24.04.2016 17:49, Tim Vermeulen via swift-evolution wrote:<br>&gt; Can’t we do this for every mutating method? i.e.<br>&gt;<br>&gt; var numbers = [1,3,2]<br>&gt; let sorted = numbers.sort()<br>&gt; // sorted is [1,2,3], numbers is [1,3,2]<br>&gt; numbers.sort()<br>&gt; // numbers is [1,2,3]<br>&gt;<br>&gt; I suppose this would require that the mutating version doesn’t return anything, and I don’t know if that’s ever a problem.<br></p><p>Well, right now(Swift 2) we can have such code (yes, it will raise <br>warnings, but will compile and run without errors. i.e. this is a valid code):<br></p><p>var a = [1,2,3]<br>let a1 = a.sortInPlace(&gt;) // a1 == ()<br>let a2 = a.sort(&gt;) // a2 == [3,2,1]<br></p><p>Note, how sortInPlace is explicit. Now, change to sort/sorted:<br></p><p>var a = [1,2,3]<br>let a1 = a.sorted(&gt;) // IMO not explicit about the result<br>let a2 = a.sort(&gt;)<br></p><p>For your proposal we need to disallow assignment of Void to variable, <br>otherwise compiller can&#39;t choose which one to use. Or, in case of your <br>proposal, documentation should explicitly say(and compiler implemented in <br>this way) that non-mutating function should be selected if result is used.<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
