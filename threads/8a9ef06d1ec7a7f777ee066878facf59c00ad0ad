<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>Proposal: Replace ?? by an (optional)	argument to ?</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>January 29, 2016 at 10:00:00am</p></header><div class="content"><p>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/8a9ed0ad/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Proposal: Replace ?? by an (optional) argument to ?</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>January 29, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Jan 29, 2016, at 5:03 AM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br>&gt; <br>&gt; I agree with Erica. The ?? operator is very readable IMO.<br>&gt; <br>&gt; Furthermore x?(false).isEmpty looks like it would evaluate false.isEmpty when x is nil which is certainly not what is intended.<br></p><p>What about this then: ??(false, x?.isEmpty)<br></p><p>&gt; In addition it would not be clear which default should be used in case of multiple optional chainings happening, i.e. what should be the result of person?(false).address?.(true).isEmpty<br>&gt; <br>&gt; -Thorsten<br>&gt; <br>&gt; <br>&gt; Am 26. Januar 2016 um 03:29 schrieb Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt;&gt; Not loving this. I&#39;m quite happy with ??-coalescing and don&#39;t see<br>&gt;&gt; a compelling reason it needs to be &quot;cleaner&quot;. I find your suggested<br>&gt;&gt; enhancement less readable. Looks like an optional chaining across <br>&gt;&gt; a function.<br>&gt;&gt; <br>&gt;&gt; -- E<br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 25, 2016, at 7:03 PM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Examples:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * instead of x ?? false, you would have x?(false)<br>&gt;&gt;&gt; * instead of x?.isEmpty ?? false, you would have x?(false).isEmpty<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think this change would result in cleaner looking code.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/13e9bfb2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d118cdf2fe31053bc7032466c4da282?s=50"></div><header><strong>Proposal: Replace ?? by an (optional) argument to ?</strong> from <string>Craig Cruden</string> &lt;ccruden at novafore.com&gt;<p>January 29, 2016 at 08:00:00pm</p></header><div class="content"><p>still much worse.<br></p><p><br>&gt; On 2016-01-29, at 20:41:06, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 29, 2016, at 5:03 AM, Thorsten Seitz &lt;tseitz42 at icloud.com &lt;mailto:tseitz42 at icloud.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I agree with Erica. The ?? operator is very readable IMO.<br>&gt;&gt; <br>&gt;&gt; Furthermore x?(false).isEmpty looks like it would evaluate false.isEmpty when x is nil which is certainly not what is intended.<br>&gt; <br>&gt; What about this then: ??(false, x?.isEmpty)<br>&gt; <br>&gt;&gt; In addition it would not be clear which default should be used in case of multiple optional chainings happening, i.e. what should be the result of person?(false).address?.(true).isEmpty<br>&gt;&gt; <br>&gt;&gt; -Thorsten<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Am 26. Januar 2016 um 03:29 schrieb Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt;&gt; <br>&gt;&gt;&gt; Not loving this. I&#39;m quite happy with ??-coalescing and don&#39;t see<br>&gt;&gt;&gt; a compelling reason it needs to be &quot;cleaner&quot;. I find your suggested<br>&gt;&gt;&gt; enhancement less readable. Looks like an optional chaining across <br>&gt;&gt;&gt; a function.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- E<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 25, 2016, at 7:03 PM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Examples:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; * instead of x ?? false, you would have x?(false)<br>&gt;&gt;&gt;&gt; * instead of x?.isEmpty ?? false, you would have x?(false).isEmpty<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think this change would result in cleaner looking code.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/5f34a009/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Proposal: Replace ?? by an (optional) argument to ?</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>January 29, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Jan 29, 2016, at 8:42 AM, Craig Cruden &lt;ccruden at novafore.com&gt; wrote:<br>&gt; <br>&gt; still much worse.<br>&gt; <br></p><p>What about: Bool(x?.isEmpty) // nil and false =&gt; false<br></p><p>&gt; <br>&gt;&gt; On 2016-01-29, at 20:41:06, Amir Michail via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 29, 2016, at 5:03 AM, Thorsten Seitz &lt;tseitz42 at icloud.com &lt;mailto:tseitz42 at icloud.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I agree with Erica. The ?? operator is very readable IMO.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Furthermore x?(false).isEmpty looks like it would evaluate false.isEmpty when x is nil which is certainly not what is intended.<br>&gt;&gt; <br>&gt;&gt; What about this then: ??(false, x?.isEmpty)<br>&gt;&gt; <br>&gt;&gt;&gt; In addition it would not be clear which default should be used in case of multiple optional chainings happening, i.e. what should be the result of person?(false).address?.(true).isEmpty<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Thorsten<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Am 26. Januar 2016 um 03:29 schrieb Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Not loving this. I&#39;m quite happy with ??-coalescing and don&#39;t see<br>&gt;&gt;&gt;&gt; a compelling reason it needs to be &quot;cleaner&quot;. I find your suggested<br>&gt;&gt;&gt;&gt; enhancement less readable. Looks like an optional chaining across <br>&gt;&gt;&gt;&gt; a function.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- E<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jan 25, 2016, at 7:03 PM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Examples:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; * instead of x ?? false, you would have x?(false)<br>&gt;&gt;&gt;&gt;&gt; * instead of x?.isEmpty ?? false, you would have x?(false).isEmpty<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I think this change would result in cleaner looking code.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/32fb4cd3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d172fa3c47108d84ee35a68e8d675c1?s=50"></div><header><strong>Proposal: Replace ?? by an (optional) argument to ?</strong> from <string>Ross O&#39;Brien</string> &lt;narrativium+swift at gmail.com&gt;<p>January 29, 2016 at 02:00:00pm</p></header><div class="content"><p>What about it?<br></p><p>&quot;x ?? false&quot; is simple. If x isn&#39;t nil, return x; if x is nil, return false.<br>&quot;x?.isEmpty ?? false&quot; again is already readable; if x isn&#39;t nil, return<br>x.isEmpty; if x is nil, return false.<br></p><p>&quot;Bool(x?.isEmpty)&quot; seems be suggesting that the Bool type has a failable<br>initialiser &quot;init?(_: Bool?)&quot;. If x is nil, x.isEmpty would be nil, so the<br>resulting Bool would be nil, not false - this code returns a Bool?, which<br>you already had.<br></p><p>&quot;??(false, x?.isEmpty)&quot; ... uses an operator as an identifier, for a start.<br>At best I&#39;d try to interpret this like reduce - take a collection or<br>variadic list of optionals, return the value of the first non-nil else<br>return the &quot;default&quot;. Except I&#39;d still put the default at the end, because<br>I can&#39;t think why it would be at the start.<br></p><p>So, if the given problem is taking the nil-coalescing and putting it up<br>front, perhaps there should be a global generic function:<br></p><p>func firstNonOptional&lt;T&gt;(possibles:T?..., failsafe:T) -&gt; T<br>{<br>    return possibles.reduce(nil, combine:{ $0 ?? $1 }) ?? failsafe<br>}<br></p><p><br></p><p>On Fri, Jan 29, 2016 at 1:48 PM, Amir Michail via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On Jan 29, 2016, at 8:42 AM, Craig Cruden &lt;ccruden at novafore.com&gt; wrote:<br>&gt;<br>&gt; still much worse.<br>&gt;<br>&gt;<br>&gt; What about: Bool(x?.isEmpty) // nil and false =&gt; false<br>&gt;<br>&gt;<br>&gt; On 2016-01-29, at 20:41:06, Amir Michail via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Jan 29, 2016, at 5:03 AM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br>&gt;<br>&gt; I agree with Erica. The ?? operator is very readable IMO.<br>&gt;<br>&gt; Furthermore x?(false).isEmpty looks like it would evaluate false.isEmpty<br>&gt; when x is nil which is certainly not what is intended.<br>&gt;<br>&gt;<br>&gt; What about this then: ??(false, x?.isEmpty)<br>&gt;<br>&gt; In addition it would not be clear which default should be used in case of<br>&gt; multiple optional chainings happening, i.e. what should be the result of<br>&gt; person?(false).address?.(true).isEmpty<br>&gt;<br>&gt; -Thorsten<br>&gt;<br>&gt;<br>&gt; Am 26. Januar 2016 um 03:29 schrieb Erica Sadun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt;:<br>&gt;<br>&gt; Not loving this. I&#39;m quite happy with ??-coalescing and don&#39;t see<br>&gt; a compelling reason it needs to be &quot;cleaner&quot;. I find your suggested<br>&gt; enhancement less readable. Looks like an optional chaining across<br>&gt; a function.<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt; On Jan 25, 2016, at 7:03 PM, Amir Michail via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; Examples:<br>&gt;<br>&gt;<br>&gt; * instead of x ?? false, you would have x?(false)<br>&gt;<br>&gt; * instead of x?.isEmpty ?? false, you would have x?(false).isEmpty<br>&gt;<br>&gt;<br>&gt; I think this change would result in cleaner looking code.<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt;<br>&gt; swift-evolution mailing list<br>&gt;<br>&gt; swift-evolution at swift.org<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/6cdfb2c1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6e4479b6097e171f8f46de71f35764ba?s=50"></div><header><strong>Proposal: Replace ?? by an (optional) argument to ?</strong> from <string>Nikolai Vazquez</string> &lt;nvazquez1297 at gmail.com&gt;<p>January 29, 2016 at 09:00:00am</p></header><div class="content"><p>The ?? operator is overloaded to take an optional as the second parameter already. So you can simply chain the ?? over and over with the the last being non optional, which will be the value of all others fail.<br></p><p>With that in mind, a firstNonOptional function wouldn&#39;t be hard to implement.<br></p><p>Sent from my iPad<br></p><p>&gt; On Jan 29, 2016, at 9:25 AM, Ross O&#39;Brien via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; What about it?<br>&gt; <br>&gt; &quot;x ?? false&quot; is simple. If x isn&#39;t nil, return x; if x is nil, return false.<br>&gt; &quot;x?.isEmpty ?? false&quot; again is already readable; if x isn&#39;t nil, return x.isEmpty; if x is nil, return false.<br>&gt; <br>&gt; &quot;Bool(x?.isEmpty)&quot; seems be suggesting that the Bool type has a failable initialiser &quot;init?(_: Bool?)&quot;. If x is nil, x.isEmpty would be nil, so the resulting Bool would be nil, not false - this code returns a Bool?, which you already had.<br>&gt; <br>&gt; &quot;??(false, x?.isEmpty)&quot; ... uses an operator as an identifier, for a start. At best I&#39;d try to interpret this like reduce - take a collection or variadic list of optionals, return the value of the first non-nil else return the &quot;default&quot;. Except I&#39;d still put the default at the end, because I can&#39;t think why it would be at the start.<br>&gt; <br>&gt; So, if the given problem is taking the nil-coalescing and putting it up front, perhaps there should be a global generic function:<br>&gt; <br>&gt; func firstNonOptional&lt;T&gt;(possibles:T?..., failsafe:T) -&gt; T<br>&gt; {<br>&gt;     return possibles.reduce(nil, combine:{ $0 ?? $1 }) ?? failsafe<br>&gt; }<br>&gt; <br>&gt;  <br>&gt; <br>&gt;&gt; On Fri, Jan 29, 2016 at 1:48 PM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 29, 2016, at 8:42 AM, Craig Cruden &lt;ccruden at novafore.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; still much worse.<br>&gt;&gt; <br>&gt;&gt; What about: Bool(x?.isEmpty) // nil and false =&gt; false<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 2016-01-29, at 20:41:06, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jan 29, 2016, at 5:03 AM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I agree with Erica. The ?? operator is very readable IMO.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Furthermore x?(false).isEmpty looks like it would evaluate false.isEmpty when x is nil which is certainly not what is intended.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What about this then: ??(false, x?.isEmpty)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; In addition it would not be clear which default should be used in case of multiple optional chainings happening, i.e. what should be the result of person?(false).address?.(true).isEmpty<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -Thorsten<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Am 26. Januar 2016 um 03:29 schrieb Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Not loving this. I&#39;m quite happy with ??-coalescing and don&#39;t see<br>&gt;&gt;&gt;&gt;&gt;&gt; a compelling reason it needs to be &quot;cleaner&quot;. I find your suggested<br>&gt;&gt;&gt;&gt;&gt;&gt; enhancement less readable. Looks like an optional chaining across <br>&gt;&gt;&gt;&gt;&gt;&gt; a function.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; -- E<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jan 25, 2016, at 7:03 PM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Examples:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; * instead of x ?? false, you would have x?(false)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; * instead of x?.isEmpty ?? false, you would have x?(false).isEmpty<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think this change would result in cleaner looking code.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/0caf613b/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Proposal: Replace ?? by an (optional) argument to ?</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>January 29, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Jan 29, 2016, at 9:25 AM, Ross O&#39;Brien &lt;narrativium+swift at gmail.com&gt; wrote:<br>&gt; <br>&gt; What about it?<br>&gt; <br>&gt; &quot;x ?? false&quot; is simple. If x isn&#39;t nil, return x; if x is nil, return false.<br>&gt; &quot;x?.isEmpty ?? false&quot; again is already readable; if x isn&#39;t nil, return x.isEmpty; if x is nil, return false.<br>&gt; <br>&gt; &quot;Bool(x?.isEmpty)&quot; seems be suggesting that the Bool type has a failable initialiser &quot;init?(_: Bool?)&quot;. If x is nil, x.isEmpty would be nil, so the resulting Bool would be nil, not false - this code returns a Bool?, which you already had.<br>&gt; <br></p><p>How about this:<br></p><p>if? !x?.isEmpty { … } // if? nil { … } = if false { … }<br>while? !x?.isEmpty { … }<br>etc.<br></p><p>&gt; &quot;??(false, x?.isEmpty)&quot; ... uses an operator as an identifier, for a start. At best I&#39;d try to interpret this like reduce - take a collection or variadic list of optionals, return the value of the first non-nil else return the &quot;default&quot;. Except I&#39;d still put the default at the end, because I can&#39;t think why it would be at the start.<br>&gt; <br>&gt; So, if the given problem is taking the nil-coalescing and putting it up front, perhaps there should be a global generic function:<br>&gt; <br>&gt; func firstNonOptional&lt;T&gt;(possibles:T?..., failsafe:T) -&gt; T<br>&gt; {<br>&gt;     return possibles.reduce(nil, combine:{ $0 ?? $1 }) ?? failsafe<br>&gt; }<br>&gt; <br>&gt;  <br>&gt; <br>&gt; On Fri, Jan 29, 2016 at 1:48 PM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Jan 29, 2016, at 8:42 AM, Craig Cruden &lt;ccruden at novafore.com &lt;mailto:ccruden at novafore.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; still much worse.<br>&gt;&gt; <br>&gt; <br>&gt; What about: Bool(x?.isEmpty) // nil and false =&gt; false<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 2016-01-29, at 20:41:06, Amir Michail via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 29, 2016, at 5:03 AM, Thorsten Seitz &lt;tseitz42 at icloud.com &lt;mailto:tseitz42 at icloud.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I agree with Erica. The ?? operator is very readable IMO.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Furthermore x?(false).isEmpty looks like it would evaluate false.isEmpty when x is nil which is certainly not what is intended.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What about this then: ??(false, x?.isEmpty)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; In addition it would not be clear which default should be used in case of multiple optional chainings happening, i.e. what should be the result of person?(false).address?.(true).isEmpty<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Thorsten<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Am 26. Januar 2016 um 03:29 schrieb Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Not loving this. I&#39;m quite happy with ??-coalescing and don&#39;t see<br>&gt;&gt;&gt;&gt;&gt; a compelling reason it needs to be &quot;cleaner&quot;. I find your suggested<br>&gt;&gt;&gt;&gt;&gt; enhancement less readable. Looks like an optional chaining across <br>&gt;&gt;&gt;&gt;&gt; a function.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -- E<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jan 25, 2016, at 7:03 PM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Examples:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; * instead of x ?? false, you would have x?(false)<br>&gt;&gt;&gt;&gt;&gt;&gt; * instead of x?.isEmpty ?? false, you would have x?(false).isEmpty<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I think this change would result in cleaner looking code.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/80b0bab5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>Proposal: Replace ?? by an (optional) argument to ?</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>January 30, 2016 at 12:00:00pm</p></header><div class="content"><p>Hi Amir,<br></p><p>I confess that I’m not really understanding what you don’t like about the operator ??.<br></p><p>Personally I find it very clear and read it as „or else“. The only worthwhile alternative to ?? would be a method on Optional called `orElse()` like e.g. Java has which expresses the notion quite clearly but with a bit more visual clutter than ??:<br></p><p>(x?.isEmpty).orElse(false)		// same as x?.isEmpty ?? false<br></p><p>Besides having less visual clutter I see another advantage to the operator ??: when I want to do something similar on the level of functions of type T -&gt; U? instead of values of type U? I could define an operator ??? which works similar to ??<br>This would not be possible with a method orElse() because AFAIK it is not possible to add methods to functions.<br>(This idea relates to the thread about having first class partial functions).<br></p><p>Example:<br></p><p>infix operator ??? {}<br></p><p>func ???&lt;T,U&gt;(lhs: T -&gt; U?, rhs: T -&gt; U?) -&gt; T -&gt; U? {<br>    func result(x: T) -&gt; U? {<br>        if let res = lhs(x) {<br>            return res<br>        }<br>        else {<br>            return rhs(x)<br>        }<br>    }<br>    return result<br>}<br></p><p>func isEven(x: Int) -&gt; String? {<br>    switch x {<br>    case x where x % 2 == 0: return &quot;\(x) is even&quot;<br>    default: return nil<br>    }<br>}<br></p><p>func isOdd(x: Int) -&gt; String? {<br>    switch x {<br>    case x where x % 2 == 1: return &quot;\(x) is odd&quot;<br>    default: return nil<br>    }<br>}<br></p><p>let f = isEven ??? isOdd<br></p><p>f(3) // =&gt; &quot;3 is odd&quot;<br></p><p><br>-Thorsten<br></p><p><br></p><p>&gt; Am 29.01.2016 um 17:58 schrieb Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 29, 2016, at 9:25 AM, Ross O&#39;Brien &lt;narrativium+swift at gmail.com &lt;mailto:narrativium+swift at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; What about it?<br>&gt;&gt; <br>&gt;&gt; &quot;x ?? false&quot; is simple. If x isn&#39;t nil, return x; if x is nil, return false.<br>&gt;&gt; &quot;x?.isEmpty ?? false&quot; again is already readable; if x isn&#39;t nil, return x.isEmpty; if x is nil, return false.<br>&gt;&gt; <br>&gt;&gt; &quot;Bool(x?.isEmpty)&quot; seems be suggesting that the Bool type has a failable initialiser &quot;init?(_: Bool?)&quot;. If x is nil, x.isEmpty would be nil, so the resulting Bool would be nil, not false - this code returns a Bool?, which you already had.<br>&gt;&gt; <br>&gt; <br>&gt; How about this:<br>&gt; <br>&gt; if? !x?.isEmpty { … } // if? nil { … } = if false { … }<br>&gt; while? !x?.isEmpty { … }<br>&gt; etc.<br>&gt; <br>&gt;&gt; &quot;??(false, x?.isEmpty)&quot; ... uses an operator as an identifier, for a start. At best I&#39;d try to interpret this like reduce - take a collection or variadic list of optionals, return the value of the first non-nil else return the &quot;default&quot;. Except I&#39;d still put the default at the end, because I can&#39;t think why it would be at the start.<br>&gt;&gt; <br>&gt;&gt; So, if the given problem is taking the nil-coalescing and putting it up front, perhaps there should be a global generic function:<br>&gt;&gt; <br>&gt;&gt; func firstNonOptional&lt;T&gt;(possibles:T?..., failsafe:T) -&gt; T<br>&gt;&gt; {<br>&gt;&gt;     return possibles.reduce(nil, combine:{ $0 ?? $1 }) ?? failsafe<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt;  <br>&gt;&gt; <br>&gt;&gt; On Fri, Jan 29, 2016 at 1:48 PM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 29, 2016, at 8:42 AM, Craig Cruden &lt;ccruden at novafore.com &lt;mailto:ccruden at novafore.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; still much worse.<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; What about: Bool(x?.isEmpty) // nil and false =&gt; false<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 2016-01-29, at 20:41:06, Amir Michail via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jan 29, 2016, at 5:03 AM, Thorsten Seitz &lt;tseitz42 at icloud.com &lt;mailto:tseitz42 at icloud.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I agree with Erica. The ?? operator is very readable IMO.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Furthermore x?(false).isEmpty looks like it would evaluate false.isEmpty when x is nil which is certainly not what is intended.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What about this then: ??(false, x?.isEmpty)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; In addition it would not be clear which default should be used in case of multiple optional chainings happening, i.e. what should be the result of person?(false).address?.(true).isEmpty<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -Thorsten<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Am 26. Januar 2016 um 03:29 schrieb Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Not loving this. I&#39;m quite happy with ??-coalescing and don&#39;t see<br>&gt;&gt;&gt;&gt;&gt;&gt; a compelling reason it needs to be &quot;cleaner&quot;. I find your suggested<br>&gt;&gt;&gt;&gt;&gt;&gt; enhancement less readable. Looks like an optional chaining across <br>&gt;&gt;&gt;&gt;&gt;&gt; a function.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; -- E<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jan 25, 2016, at 7:03 PM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Examples:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; * instead of x ?? false, you would have x?(false)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; * instead of x?.isEmpty ?? false, you would have x?(false).isEmpty<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think this change would result in cleaner looking code.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160130/0163640d/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Proposal: Replace ?? by an (optional) argument to ?</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>January 29, 2016 at 10:00:00am</p></header><div class="content"><p>I know how frustrating it is to throw ideas out and not hear back. So here&#39;s my answer: I don&#39;t love this either. <br>I think you&#39;re trying to fix something that is fundamentally not only not broken but pretty solid as it is currently deployed.<br></p><p>-- Erica<br></p><p>&gt; On Jan 29, 2016, at 6:41 AM, Amir Michail &lt;a.michail at me.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 29, 2016, at 5:03 AM, Thorsten Seitz &lt;tseitz42 at icloud.com &lt;mailto:tseitz42 at icloud.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I agree with Erica. The ?? operator is very readable IMO.<br>&gt;&gt; <br>&gt;&gt; Furthermore x?(false).isEmpty looks like it would evaluate false.isEmpty when x is nil which is certainly not what is intended.<br>&gt; <br>&gt; What about this then: ??(false, x?.isEmpty)<br>&gt; <br>&gt;&gt; In addition it would not be clear which default should be used in case of multiple optional chainings happening, i.e. what should be the result of person?(false).address?.(true).isEmpty<br>&gt;&gt; <br>&gt;&gt; -Thorsten<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Am 26. Januar 2016 um 03:29 schrieb Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt;&gt; <br>&gt;&gt;&gt; Not loving this. I&#39;m quite happy with ??-coalescing and don&#39;t see<br>&gt;&gt;&gt; a compelling reason it needs to be &quot;cleaner&quot;. I find your suggested<br>&gt;&gt;&gt; enhancement less readable. Looks like an optional chaining across <br>&gt;&gt;&gt; a function.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- E<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 25, 2016, at 7:03 PM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Examples:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; * instead of x ?? false, you would have x?(false)<br>&gt;&gt;&gt;&gt; * instead of x?.isEmpty ?? false, you would have x?(false).isEmpty<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think this change would result in cleaner looking code.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/26b7c2d4/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
