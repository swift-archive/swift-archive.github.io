<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>[Review] SE-0135: Package Manager Support for Differentiating Packages by Swift version</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>July 29, 2016 at 11:00:00am</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;SE-0135: Package Manager Support for Differentiating Packages by Swift version&quot; begins now and runs through August 3rd. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0135-package-manager-support-for-differentiating-packages-by-swift-version.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-build-dev and swift-evolution mailing lists at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-build-dev<br>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>- Daniel Dunbar<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ad5d998258bab37d23bc9555b0d6c237?s=50"></div><header><strong>[Review] SE-0135: Package Manager Support for Differentiating Packages by Swift version</strong> from <string>Max Desiatov</string> &lt;max.desiatov at gmail.com&gt;<p>August  4, 2016 at 04:00:00pm</p></header><div class="content"><p>Hi Daniel,<br></p><p>I hope this proposal really is still in active review, as it is marked as such in the swift-evolution Git repository.<br></p><p>I did a quick reading of this proposal and I like it very much. I think that it provides a solution that is additive and doesn&#39;t break any existing package specifications.<br></p><p>With the amount of source-breaking changes in Swift, I think this proposal is really important and I hope that it still will be implemented in Swift 3 timeframe. Especially as SwiftPM is not as tightly coupled with the core compiler infrastructure, this would be a good timing to introduce this to help people in transitioning from Swift 2.2 to Swift 3.<br></p><p>Have you previously considered also adding a field to manifests, that will allow to declare the supported version in the dependency manifest itself? As in:<br></p><p>let package =<br> Package(<br>    name: &quot;Foo&quot;,<br>    swiftVersions: [&quot;3.0&quot;, &quot;2.1&quot;]<br>)<br></p><p>This would make it impossible to even try to build this module with Swift 2.1, thus saving time by not doing a build that will inevitably fail. This would also help packages supporting both versions in the same source tree with #ifdef swift version conditionals. I do realise that my suggestion will not be considered for Swift 3, but I look forward to your feedback on this.<br></p><p>Thanks!<br></p><p>---<br>With best regards, Max.<br></p><p>&gt; On 29 Jul 2016, at 21:36, Daniel Dunbar via swift-build-dev &lt;swift-build-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0135: Package Manager Support for Differentiating Packages by Swift version&quot; begins now and runs through August 3rd. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0135-package-manager-support-for-differentiating-packages-by-swift-version.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-build-dev and swift-evolution mailing lists at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; - Daniel Dunbar<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>[Review] SE-0135: Package Manager Support for Differentiating Packages by Swift version</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>August  4, 2016 at 08:00:00am</p></header><div class="content"><p>Hi Max,<br></p><p>&gt; On Aug 4, 2016, at 6:46 AM, Max Desiatov &lt;max.desiatov at gmail.com&gt; wrote:<br>&gt; <br>&gt; Hi Daniel,<br>&gt; <br>&gt; I hope this proposal really is still in active review, as it is marked as such in the swift-evolution Git repository.<br></p><p>It was supposed to close yesterday, but I haven&#39;t gotten to the paperwork. We have received very little feedback on the proposal so I appreciate your reply.<br></p><p>&gt; I did a quick reading of this proposal and I like it very much. I think that it provides a solution that is additive and doesn&#39;t break any existing package specifications.<br>&gt; <br>&gt; With the amount of source-breaking changes in Swift, I think this proposal is really important and I hope that it still will be implemented in Swift 3 timeframe. Especially as SwiftPM is not as tightly coupled with the core compiler infrastructure, this would be a good timing to introduce this to help people in transitioning from Swift 2.2 to Swift 3.<br>&gt; <br>&gt; Have you previously considered also adding a field to manifests, that will allow to declare the supported version in the dependency manifest itself? As in:<br></p><p>We did consider this, but it has two major problems:<br></p><p>1. The list is cumbersome to maintain, particularly when the expectation is that new Swift versions do not break the package, and thus it remains compatible. A feature like this has the problem that once added, it requires maintenance in every package even once it has outlived its utility: As long as some package is used by SwiftPM-3.0 it has to keep the annotations, even if just to tell that version to look elsewhere.<br></p><p>2. This doesn&#39;t handle situations where we change the APIs within the manifest itself -- older SwiftPM versions won&#39;t be able to parse them and won&#39;t know what to do.<br></p><p> - Daniel<br></p><p>&gt; <br>&gt; let package =<br>&gt; Package(<br>&gt;    name: &quot;Foo&quot;,<br>&gt;    swiftVersions: [&quot;3.0&quot;, &quot;2.1&quot;]<br>&gt; )<br>&gt; <br>&gt; This would make it impossible to even try to build this module with Swift 2.1, thus saving time by not doing a build that will inevitably fail. This would also help packages supporting both versions in the same source tree with #ifdef swift version conditionals. I do realise that my suggestion will not be considered for Swift 3, but I look forward to your feedback on this.<br>&gt; <br>&gt; Thanks!<br>&gt; <br>&gt; ---<br>&gt; With best regards, Max.<br>&gt; <br>&gt;&gt; On 29 Jul 2016, at 21:36, Daniel Dunbar via swift-build-dev &lt;swift-build-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0135: Package Manager Support for Differentiating Packages by Swift version&quot; begins now and runs through August 3rd. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0135-package-manager-support-for-differentiating-packages-by-swift-version.md<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-build-dev and swift-evolution mailing lists at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; - Daniel Dunbar<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-build-dev mailing list<br>&gt;&gt; swift-build-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fd5bd4566ee1f286333b7dbf2df6fadb?s=50"></div><header><strong>[Review] SE-0135: Package Manager Support for Differentiating Packages by Swift version</strong> from <string>Anders Bertelrud</string> &lt;anders at apple.com&gt;<p>August  4, 2016 at 02:00:00pm</p></header><div class="content"><p>On 2016-08-04, at 08.57, Daniel Dunbar via swift-build-dev &lt;swift-build-dev at swift.org&gt; wrote:<br></p><p>&gt; 2. This doesn&#39;t handle situations where we change the APIs within the manifest itself -- older SwiftPM versions won&#39;t be able to parse them and won&#39;t know what to do.<br></p><p>Also:  In discussing this, we also considered doing something like putting the version number in a comment line at the very top of the `Package.swift`, so that it could always be string-searched even in cases in which a new-format manifest isn&#39;t parseable by an older SwiftPM.<br></p><p>But that feels quite hacky, and we didn&#39;t want to do that if we could avoid it.  For one thing, we want to make newly created packages that support just the latest Swift not start out with a bunch of cruft in the form of specially formatted comments etc.  And secondly, well, it&#39;s just ugly.<br></p><p>Anders<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160804/29f5e622/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/79d9ba388d6b6cf4ec7310cad9fa8c8a?s=50"></div><header><strong>[swift-evolution] [Review] SE-0135: Package Manager Support for Differentiating Packages by Swift version</strong> from <string>Rob Allen</string> &lt;rob at akrabat.com&gt;<p>August  4, 2016 at 06:00:00pm</p></header><div class="content"><p>I appreciate that I&#39;m late on this, but I&#39;m on vacation. <br></p><p><br>&gt; On 29 Jul 2016, at 20:36, Daniel Dunbar via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0135: Package Manager Support for Differentiating Packages by Swift version&quot; begins now and runs through August 3rd. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0135-package-manager-support-for-differentiating-packages-by-swift-version.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-build-dev and swift-evolution mailing lists at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>The solution is quite clear. I particularly like the concept of version specific git tags. I&#39;m less keen on version specific Package.swift files as I feel that tags are meta data, but Package.swift isn&#39;t.<br></p><p>Personally, I&#39;d prefer to only have version specific git tags, but acknowledge that version-specific Package.swift files simplify the work for some package maintainers. If you need different source code in Package.swift and #if doesn&#39;t work, then I feel that you should use version specific git tags as you would do for the rest of your code.<br></p><p>I&#39;m pleased that this proposal is backwards compatible as both options can be completely ignored for packages that don&#39;t need it. <br></p><p>On the whole, +1.<br></p><p><br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Most definitely.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>It certainly acknowledges the current state of Swift language differences :)<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>This is quite elegant and more flexible than what I&#39;ve seen elsewhere.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I read the proposal in detail.<br></p><p>Regards,<br></p><p>Rob..<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>[swift-evolution] [Review] SE-0135: Package Manager Support for Differentiating Packages by Swift version</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>August  4, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Aug 4, 2016, at 9:16 AM, Rob Allen &lt;rob at akrabat.com&gt; wrote:<br>&gt; <br>&gt; I appreciate that I&#39;m late on this, but I&#39;m on vacation. <br></p><p>Thanks for the response, I&#39;m glad to be getting some additional feedback.<br></p><p>&gt;&gt; On 29 Jul 2016, at 20:36, Daniel Dunbar via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0135: Package Manager Support for Differentiating Packages by Swift version&quot; begins now and runs through August 3rd. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0135-package-manager-support-for-differentiating-packages-by-swift-version.md<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-build-dev and swift-evolution mailing lists at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt; <br>&gt; The solution is quite clear. I particularly like the concept of version specific git tags. I&#39;m less keen on version specific Package.swift files as I feel that tags are meta data, but Package.swift isn&#39;t.<br>&gt; <br>&gt; Personally, I&#39;d prefer to only have version specific git tags, but acknowledge that version-specific Package.swift files simplify the work for some package maintainers. If you need different source code in Package.swift and #if doesn&#39;t work, then I feel that you should use version specific git tags as you would do for the rest of your code.<br></p><p>One primary motivation here was we wanted to encourage the use of packages which work across all modern Swift versions. That doesn&#39;t work out too well once you move to version specific tags if you are actively maintaining the compatibility as you would need to constantly retag and update Package.swift across the &quot;branches&quot; for each new version. We do agree it is unfortunate... the hope is this problem will go away quickly once the manifest API stabilizes.<br></p><p> - Daniel<br></p><p>&gt; <br>&gt; I&#39;m pleased that this proposal is backwards compatible as both options can be completely ignored for packages that don&#39;t need it. <br>&gt; <br>&gt; On the whole, +1.<br>&gt; <br>&gt; <br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; Most definitely.<br>&gt; <br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; It certainly acknowledges the current state of Swift language differences :)<br>&gt; <br>&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; This is quite elegant and more flexible than what I&#39;ve seen elsewhere.<br>&gt; <br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; I read the proposal in detail.<br>&gt; <br>&gt; Regards,<br>&gt; <br>&gt; Rob..<br>&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
