<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a39ef1491768b90e7de8e0ec4d0b0091?s=50"></div><header><strong>Equatable auto-write func == Proposal</strong> from <string>Daniel Tartaglia</string> &lt;danielt1263 at gmail.com&gt;<p>September 10, 2016 at 08:00:00am</p></header><div class="content"><p>Now that Swift 3 is out the door, I’m going to float this proposal again…<br></p><p>Given that every value type should be equatable (rational here): https://www.andrewcbancroft.com/2015/07/01/every-swift-value-type-should-be-equatable/<br>And that many, if not most, value types consist of properties that are value types.<br>Then the language should make it easy to conform to the Equatable protocol.<br></p><p>In other words, if I declare my value type as Equatable, and it is exclusively composed of value types that are already equatable, then implementing the actual == function should be optional (or maybe even forbidden.)<br></p><p>Implementing == in such cases is tedious boilerplate that the compiler should be able to infer on its own.<br></p><p>Does anybody want to help me write up an official proposal?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e910871dda004717de19e83626308b5a?s=50"></div><header><strong>Equatable auto-write func == Proposal</strong> from <string>Tony Allevato</string> &lt;allevato at google.com&gt;<p>September 12, 2016 at 03:00:00pm</p></header><div class="content"><p>I started on an early-draft proposal for something like this a while back:<br>https://gist.github.com/allevato/2fd10290bfa84accfbe977d8ac07daad<br></p><p>Most of the discussion in the e-mail thread (I don&#39;t have time to fetch the<br>link right now, unfortunately) was around how implicit/explicit such<br>behavior should be (i.e., should there be a keyword that you have to use to<br>buy into the automated implementation).<br></p><p>Given that it&#39;s additive, it&#39;s unlikely that it would be discussed now, but<br>I&#39;d like to revisit it when the time is right.<br></p><p>On Mon, Sep 12, 2016 at 8:36 AM Daniel Tartaglia via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Now that Swift 3 is out the door, I’m going to float this proposal again…<br>&gt;<br>&gt; Given that every value type should be equatable (rational here):<br>&gt; https://www.andrewcbancroft.com/2015/07/01/every-swift-value-type-should-be-equatable/<br>&gt; And that many, if not most, value types consist of properties that are<br>&gt; value types.<br>&gt; Then the language should make it easy to conform to the Equatable protocol.<br>&gt;<br>&gt; In other words, if I declare my value type as Equatable, and it is<br>&gt; exclusively composed of value types that are already equatable, then<br>&gt; implementing the actual == function should be optional (or maybe even<br>&gt; forbidden.)<br>&gt;<br>&gt; Implementing == in such cases is tedious boilerplate that the compiler<br>&gt; should be able to infer on its own.<br>&gt;<br>&gt; Does anybody want to help me write up an official proposal?<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160912/ecf5033c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7a6e4cc366f8f533b056936cf9bcb85d?s=50"></div><header><strong>Equatable auto-write func == Proposal</strong> from <string>Mark Sands</string> &lt;marksands07 at gmail.com&gt;<p>September 13, 2016 at 04:00:00pm</p></header><div class="content"><p>I&#39;m very interested in this moving forward. Is the swift team still holding<br>off on reviewing additive changes?<br></p><p>On Mon, Sep 12, 2016 at 10:43 AM, Tony Allevato via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I started on an early-draft proposal for something like this a while back:<br>&gt;  https://gist.github.com/allevato/2fd10290bfa84accfbe977d8ac07daad<br>&gt;<br>&gt; Most of the discussion in the e-mail thread (I don&#39;t have time to fetch<br>&gt; the link right now, unfortunately) was around how implicit/explicit such<br>&gt; behavior should be (i.e., should there be a keyword that you have to use to<br>&gt; buy into the automated implementation).<br>&gt;<br>&gt; Given that it&#39;s additive, it&#39;s unlikely that it would be discussed now,<br>&gt; but I&#39;d like to revisit it when the time is right.<br>&gt;<br>&gt; On Mon, Sep 12, 2016 at 8:36 AM Daniel Tartaglia via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Now that Swift 3 is out the door, I’m going to float this proposal again…<br>&gt;&gt;<br>&gt;&gt; Given that every value type should be equatable (rational here):<br>&gt;&gt; https://www.andrewcbancroft.com/2015/07/01/every-swift-<br>&gt;&gt; value-type-should-be-equatable/<br>&gt;&gt; And that many, if not most, value types consist of properties that are<br>&gt;&gt; value types.<br>&gt;&gt; Then the language should make it easy to conform to the Equatable<br>&gt;&gt; protocol.<br>&gt;&gt;<br>&gt;&gt; In other words, if I declare my value type as Equatable, and it is<br>&gt;&gt; exclusively composed of value types that are already equatable, then<br>&gt;&gt; implementing the actual == function should be optional (or maybe even<br>&gt;&gt; forbidden.)<br>&gt;&gt;<br>&gt;&gt; Implementing == in such cases is tedious boilerplate that the compiler<br>&gt;&gt; should be able to infer on its own.<br>&gt;&gt;<br>&gt;&gt; Does anybody want to help me write up an official proposal?<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160913/b7d2d84f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Equatable auto-write func == Proposal</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>September 13, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Sep 13, 2016, at 2:11 PM, Mark Sands via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;m very interested in this moving forward. Is the swift team still holding off on reviewing additive changes?<br></p><p>Yep, we’re still focused on finishing Swift 3 and moving on to Swift 4 stage 1, as described here:<br>https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025676.html<br></p><p>-Chris<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>Equatable auto-write func == Proposal</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>September 12, 2016 at 12:00:00pm</p></header><div class="content"><p>Please be careful when wording this proposal.  You want derived conformances, but don&#39;t obscure that message with the claim that every type admits a useful Equatable instance. It is most certainly not the case that every value type has a useful (read [mostly]: decidable) equality.  A few counterexamples, the type of lazy streams (https://github.com/typelift/Swiftz/blob/swift-develop/Swiftz/Stream.swift#L24) requires infinite space to evaluate a useful answer.  The type of functions [without a modulus of continuity] also don&#39;t admit a useful, or even canonical, equality (in Swift at least).  <br></p><p>~Robert Widmann<br></p><p>2016/09/10 8:24、Daniel Tartaglia via swift-evolution &lt;swift-evolution at swift.org&gt; のメッセージ:<br></p><p>&gt; Now that Swift 3 is out the door, I’m going to float this proposal again…<br>&gt; <br>&gt; Given that every value type should be equatable (rational here): https://www.andrewcbancroft.com/2015/07/01/every-swift-value-type-should-be-equatable/<br>&gt; And that many, if not most, value types consist of properties that are value types.<br>&gt; Then the language should make it easy to conform to the Equatable protocol.<br>&gt; <br>&gt; In other words, if I declare my value type as Equatable, and it is exclusively composed of value types that are already equatable, then implementing the actual == function should be optional (or maybe even forbidden.)<br>&gt; <br>&gt; Implementing == in such cases is tedious boilerplate that the compiler should be able to infer on its own.<br>&gt; <br>&gt; Does anybody want to help me write up an official proposal?<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160912/06b20fdb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a39ef1491768b90e7de8e0ec4d0b0091?s=50"></div><header><strong>Equatable auto-write func == Proposal</strong> from <string>Daniel Tartaglia</string> &lt;danielt1263 at gmail.com&gt;<p>September 12, 2016 at 01:00:00pm</p></header><div class="content"><p>Good point.<br></p><p>The real push here is that when the programmer *does* declare a type Equatable and the op == has an obvious implementation, that the programmer shouldn’t have to manually implement it him/herself. This would apply only to types that have been declared Equatable and that consist of exclusively properties which have all also been declared Equatable.<br></p><p>This would work much like the Haskell Eq class.<br></p><p>&gt; On Sep 12, 2016, at 12:03 PM, Robert Widmann &lt;devteam.codafi at gmail.com&gt; wrote:<br>&gt; <br>&gt; Please be careful when wording this proposal.  You want derived conformances, but don&#39;t obscure that message with the claim that every type admits a useful Equatable instance. It is most certainly not the case that every value type has a useful (read [mostly]: decidable) equality.  A few counterexamples, the type of lazy streams (https://github.com/typelift/Swiftz/blob/swift-develop/Swiftz/Stream.swift#L24 &lt;https://github.com/typelift/Swiftz/blob/swift-develop/Swiftz/Stream.swift#L24&gt;) requires infinite space to evaluate a useful answer.  The type of functions [without a modulus of continuity] also don&#39;t admit a useful, or even canonical, equality (in Swift at least).  <br>&gt; <br>&gt; ~Robert Widmann<br>&gt; <br>&gt; 2016/09/10 8:24、Daniel Tartaglia via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; のメッセージ:<br>&gt; <br>&gt;&gt; Now that Swift 3 is out the door, I’m going to float this proposal again…<br>&gt;&gt; <br>&gt;&gt; Given that every value type should be equatable (rational here): https://www.andrewcbancroft.com/2015/07/01/every-swift-value-type-should-be-equatable/ &lt;https://www.andrewcbancroft.com/2015/07/01/every-swift-value-type-should-be-equatable/&gt;<br>&gt;&gt; And that many, if not most, value types consist of properties that are value types.<br>&gt;&gt; Then the language should make it easy to conform to the Equatable protocol.<br>&gt;&gt; <br>&gt;&gt; In other words, if I declare my value type as Equatable, and it is exclusively composed of value types that are already equatable, then implementing the actual == function should be optional (or maybe even forbidden.)<br>&gt;&gt; <br>&gt;&gt; Implementing == in such cases is tedious boilerplate that the compiler should be able to infer on its own.<br>&gt;&gt; <br>&gt;&gt; Does anybody want to help me write up an official proposal?<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160912/57af2f0b/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
