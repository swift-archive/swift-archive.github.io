<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5daa1633e5f933f7901a26b0329015cd?s=50"></div><header><strong>SequenceType vs. CollectionType</strong> from <string>Aaron Bohannon</string> &lt;aaron678 at gmail.com&gt;<p>June 14, 2016 at 03:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>I find the SequenceType protocol a bit confusing.  My confusion is best<br>explained in the context of a specific, real-world example.  Let&#39;s say that<br>I wanted to extend a protocol with a method &quot;repeated(Int)&quot; that would<br>allow me to iterate over a collection of items multiple times, like this:<br></p><p>for x in [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;].repeated(3) {<br>  print(x, terminator: &quot;&quot;)<br>}<br></p><p>That would be expected to print the string &quot;abcabcabc&quot;.<br></p><p>Implementing the extension is simple enough.  Here&#39;s my main question: is<br>it more appropriate to implement it by extending SequenceType or extending<br>CollectionType?  I&#39;m not imagining an implementation that does any<br>buffering, so one could argue that the operation would not have predictable<br>behavior in the context of an arbitrary SequenceType -- however, a likely<br>implementation would rely upon nothing more than the the generate() method,<br>which is available in the SequenceType protocol.<br></p><p>- Aaron<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160614/1fc6fc5a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>SequenceType vs. CollectionType</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>June 14, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; I find the SequenceType protocol a bit confusing.  My confusion is best explained in the context of a specific, real-world example.  Let&#39;s say that I wanted to extend a protocol with a method &quot;repeated(Int)&quot; that would allow me to iterate over a collection of items multiple times, like this:<br>&gt; <br>&gt; for x in [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;].repeated(3) {<br>&gt;   print(x, terminator: &quot;&quot;)<br>&gt; }<br>&gt; <br>&gt; That would be expected to print the string &quot;abcabcabc&quot;.<br>&gt; <br>&gt; Implementing the extension is simple enough.  Here&#39;s my main question: is it more appropriate to implement it by extending SequenceType or extending CollectionType?  I&#39;m not imagining an implementation that does any buffering, so one could argue that the operation would not have predictable behavior in the context of an arbitrary SequenceType -- however, a likely implementation would rely upon nothing more than the the generate() method, which is available in the SequenceType protocol.<br></p><p>A protocol is not merely a collection of required members; it is a set of promises about a conforming type&#39;s behavior. Some of them can be expressed in code, like that a `SequenceType` provides a `generate()` method returning an instance conforming to `GeneratorType`. Others can only be described in documentation, like that the generator returned by `generate()` returns all of the elements in the sequence, rather than skipping some of them.<br></p><p>In the case of `SequenceType`, the documentation says:<br></p><p>&gt; SequenceType makes no requirement on conforming types regarding whether they will be destructively &quot;consumed&quot; by iteration. To ensure non-destructive iteration, constrain your sequence to CollectionType.<br>&gt; …<br>&gt; It is not correct to assume that a sequence will either be &quot;consumable&quot; and will resume iteration, or that a sequence is a collection and will restart iteration from the first element. A conforming sequence that is not a collection is allowed to produce an arbitrary sequence of elements from the second generator.<br></p><p>So even though the `SequenceType` protocol provides all of the calls your `repeated(_:)` method will use, it explicitly does *not* promise that those calls will behave in the way needed for `repeated(_:)` to work correctly. Your code will be making exactly the sort of assumption the documentation warns you not to make. The fact that the compiler cannot detect this mistake doesn&#39;t make it any less of a mistake.<br></p><p>Therefore, I would say you should put `repeated(_:)` on `CollectionType`. If you put it on `SequenceType`, it will malfunction on some of the sequences which claim to support it.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>SequenceType vs. CollectionType</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>June 17, 2016 at 06:00:00am</p></header><div class="content"><p>&gt; On 15 Jun 2016, at 01:59, Brent Royal-Gordon via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; I find the SequenceType protocol a bit confusing.  My confusion is best explained in the context of a specific, real-world example.  Let&#39;s say that I wanted to extend a protocol with a method &quot;repeated(Int)&quot; that would allow me to iterate over a collection of items multiple times, like this:<br>&gt;&gt; <br>&gt;&gt; for x in [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;].repeated(3) {<br>&gt;&gt;  print(x, terminator: &quot;&quot;)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; That would be expected to print the string &quot;abcabcabc&quot;.<br>&gt;&gt; <br>&gt;&gt; Implementing the extension is simple enough.  Here&#39;s my main question: is it more appropriate to implement it by extending SequenceType or extending CollectionType?  I&#39;m not imagining an implementation that does any buffering, so one could argue that the operation would not have predictable behavior in the context of an arbitrary SequenceType -- however, a likely implementation would rely upon nothing more than the the generate() method, which is available in the SequenceType protocol.<br>&gt; <br>&gt; A protocol is not merely a collection of required members; it is a set of promises about a conforming type&#39;s behavior. Some of them can be expressed in code, like that a `SequenceType` provides a `generate()` method returning an instance conforming to `GeneratorType`. Others can only be described in documentation, like that the generator returned by `generate()` returns all of the elements in the sequence, rather than skipping some of them.<br>&gt; <br>&gt; In the case of `SequenceType`, the documentation says:<br>&gt; <br>&gt;&gt; SequenceType makes no requirement on conforming types regarding whether they will be destructively &quot;consumed&quot; by iteration. To ensure non-destructive iteration, constrain your sequence to CollectionType.<br>&gt;&gt; …<br>&gt;&gt; It is not correct to assume that a sequence will either be &quot;consumable&quot; and will resume iteration, or that a sequence is a collection and will restart iteration from the first element. A conforming sequence that is not a collection is allowed to produce an arbitrary sequence of elements from the second generator.<br>&gt; <br>&gt; So even though the `SequenceType` protocol provides all of the calls your `repeated(_:)` method will use, it explicitly does *not* promise that those calls will behave in the way needed for `repeated(_:)` to work correctly. Your code will be making exactly the sort of assumption the documentation warns you not to make. The fact that the compiler cannot detect this mistake doesn&#39;t make it any less of a mistake.<br>&gt; <br>&gt; Therefore, I would say you should put `repeated(_:)` on `CollectionType`. If you put it on `SequenceType`, it will malfunction on some of the sequences which claim to support it.<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>Well you could do it, but you’d need to build up a non-consuming sequence as you go so it wouldn’t be a transparent wrapper.<br>You could specialise for sequences which also implement CollectionType and handle that case more efficiently.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>SequenceType vs. CollectionType</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>June 17, 2016 at 04:00:00am</p></header><div class="content"><p>&gt; Well you could do it, but you’d need to build up a non-consuming sequence as you go so it wouldn’t be a transparent wrapper.<br></p><p>You could, but the original post said:<br></p><p>&gt;&gt; I&#39;m not imagining an implementation that does any buffering<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
