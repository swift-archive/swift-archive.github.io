<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3cecf05f244d864ab95a990649136af6?s=50"></div><header><strong>NSMutableData&#39;s init?(length length: Int) initializer</strong> from <string>soyer</string> &lt;soyer at irl.hu&gt;<p>April 14, 2016 at 07:00:00pm</p></header><div class="content"><p>Hello Guys, Girls,<br></p><p>Do you know why is the init?(length length: Int) NSMutableData&#39;s initializer failable?<br>The memory allocation can fail, but I think Swift doesn&#39;t handle that cases. (it is not a real issue in a modern OS)<br>The code on github calls a non failable initializer.<br>https://github.com/apple/swift-corelibs-foundation/blob/master/Foundation/NSData.swift#L904<br></p><p>public convenience init?(length: Int) {<br>	let memory = malloc(length)<br>	self.init(bytes: memory, length: length, copy: false) { buffer, amount in<br>		free(buffer)<br>	}<br>}<br></p><p>Thanks<br>s<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>NSMutableData&#39;s init?(length length: Int) initializer</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>April 14, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Apr 14, 2016, at 10:45 AM, soyer via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Do you know why is the init?(length length: Int) NSMutableData&#39;s initializer failable?<br></p><p>Because the Objective-C declaration in &lt;Foundation/NSData.h&gt; declares the return type as ‘nullable’:<br></p><p>- (nullable instancetype)initWithLength:(NSUInteger)length;<br></p><p>&gt; The memory allocation can fail, but I think Swift doesn&#39;t handle that cases. (it is not a real issue in a modern OS)<br></p><p>Not on a modern 64-bit desktop OS, but it can be an issue on some other platforms. In a 32-bit process (still supported on iOS and Mac OS) malloc can fail if the process&#39;s address space is fragmented enough that there are no free blocks large enough for the allocation. On an OS without a VM pager, like many embedded systems, malloc can fail if physical RAM is exhausted.<br></p><p>(I’m actually not sure if this is the reason why that initializer is failable. It’s possible this is a mistake, or Apple’s frameworks team had some other architectural reason for allowing it to fail. Historically, the design pattern for initializers in Objective-C always allows them to return nil.)<br></p><p>&gt; The code on github calls a non failable initializer.<br></p><p>That’s for the native-Swift Foundation framework coming in Swift 3. I’d guess they’ve adopted the same method signature as in Apple’s Foundation, for compatibility.<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160414/4a7d5f1b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>NSMutableData&#39;s init?(length length: Int) initializer</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>April 14, 2016 at 03:00:00pm</p></header><div class="content"><p>It&#39;s easy to test this in a playground on OS X:<br></p><p>    NSMutableData(length: 1000000000000000)   // returns nil<br></p><p>It makes sense that the swift-corelibs-foundation version of NSMutableData<br>should work the same way.<br>Jacob<br></p><p>On Thu, Apr 14, 2016 at 11:56 AM, Jens Alfke via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On Apr 14, 2016, at 10:45 AM, soyer via swift-users &lt;swift-users at swift.org&gt;<br>&gt; wrote:<br>&gt;<br>&gt; Do you know why is the init?(length length: Int) NSMutableData&#39;s<br>&gt; initializer failable?<br>&gt;<br>&gt;<br>&gt; Because the Objective-C declaration in &lt;Foundation/NSData.h&gt; declares the<br>&gt; return type as ‘nullable’:<br>&gt;<br>&gt; - (nullable instancetype)initWithLength:(NSUInteger)length;<br>&gt;<br>&gt; The memory allocation can fail, but I think Swift doesn&#39;t handle that<br>&gt; cases. (it is not a real issue in a modern OS)<br>&gt;<br>&gt;<br>&gt; Not on a modern 64-bit desktop OS, but it can be an issue on some other<br>&gt; platforms. In a 32-bit process (still supported on iOS and Mac OS) malloc<br>&gt; can fail if the process&#39;s address space is fragmented enough that there are<br>&gt; no free blocks large enough for the allocation. On an OS without a VM<br>&gt; pager, like many embedded systems, malloc can fail if physical RAM is<br>&gt; exhausted.<br>&gt;<br>&gt; (I’m actually not sure if this is the reason why that initializer is<br>&gt; failable. It’s possible this is a mistake, or Apple’s frameworks team had<br>&gt; some other architectural reason for allowing it to fail. Historically, the<br>&gt; design pattern for initializers in Objective-C always allows them to return<br>&gt; nil.)<br>&gt;<br>&gt; The code on github calls a non failable initializer.<br>&gt;<br>&gt;<br>&gt; That’s for the native-Swift Foundation framework coming in Swift 3. I’d<br>&gt; guess they’ve adopted the same method signature as in Apple’s Foundation,<br>&gt; for compatibility.<br>&gt;<br>&gt; —Jens<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160414/4dbd8ea2/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>NSMutableData&#39;s init?(length length: Int) initializer</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>April 14, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On Apr 14, 2016, at 10:45 AM, soyer via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Guys, Girls,<br>&gt; <br>&gt; Do you know why is the init?(length length: Int) NSMutableData&#39;s initializer failable?<br>&gt; The memory allocation can fail, but I think Swift doesn&#39;t handle that cases. (it is not a real issue in a modern OS)<br>&gt; The code on github calls a non failable initializer.<br>&gt; https://github.com/apple/swift-corelibs-foundation/blob/master/Foundation/NSData.swift#L904<br></p><p>Swift’s policy on memory allocation failure is that fixed-size object allocation is considered to be a runtime failure if it cannot be handled.  OTOH, APIs that can take a variable and arbitrarily large amount to allocate should be failable.  NSData falls into the later category.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>NSMutableData&#39;s init?(length length: Int) initializer</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>April 14, 2016 at 11:00:00pm</p></header><div class="content"><p>On Thu, Apr 14, 2016 at 11:16 PM, Chris Lattner via swift-users<br>&lt;swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; On Apr 14, 2016, at 10:45 AM, soyer via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hello Guys, Girls,<br>&gt;&gt;<br>&gt;&gt; Do you know why is the init?(length length: Int) NSMutableData&#39;s initializer failable?<br>&gt;&gt; The memory allocation can fail, but I think Swift doesn&#39;t handle that cases. (it is not a real issue in a modern OS)<br>&gt;&gt; The code on github calls a non failable initializer.<br>&gt;&gt; https://github.com/apple/swift-corelibs-foundation/blob/master/Foundation/NSData.swift#L904<br>&gt;<br>&gt; Swift’s policy on memory allocation failure is that fixed-size object allocation is considered to be a runtime failure if it cannot be handled.  OTOH, APIs that can take a variable and arbitrarily large amount to allocate should be failable.  NSData falls into the later category.<br></p><p>Does this principle apply to Array(repeating:count:)?<br>Array.append(contentsOf:)?<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>NSMutableData&#39;s init?(length length: Int) initializer</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>April 15, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Apr 14, 2016, at 11:22 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Thu, Apr 14, 2016 at 11:16 PM, Chris Lattner via swift-users<br>&gt; &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Apr 14, 2016, at 10:45 AM, soyer via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello Guys, Girls,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Do you know why is the init?(length length: Int) NSMutableData&#39;s initializer failable?<br>&gt;&gt;&gt; The memory allocation can fail, but I think Swift doesn&#39;t handle that cases. (it is not a real issue in a modern OS)<br>&gt;&gt;&gt; The code on github calls a non failable initializer.<br>&gt;&gt;&gt; https://github.com/apple/swift-corelibs-foundation/blob/master/Foundation/NSData.swift#L904<br>&gt;&gt; <br>&gt;&gt; Swift’s policy on memory allocation failure is that fixed-size object allocation is considered to be a runtime failure if it cannot be handled.  OTOH, APIs that can take a variable and arbitrarily large amount to allocate should be failable.  NSData falls into the later category.<br>&gt; <br>&gt; Does this principle apply to Array(repeating:count:)?<br>&gt; Array.append(contentsOf:)?<br></p><p>As you know well enough, “no”. :-)<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>NSMutableData&#39;s init?(length length: Int) initializer</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>April 15, 2016 at 10:00:00am</p></header><div class="content"><p>On Fri, Apr 15, 2016 at 10:34 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;<br>&gt;&gt; On Apr 14, 2016, at 11:22 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On Thu, Apr 14, 2016 at 11:16 PM, Chris Lattner via swift-users<br>&gt;&gt; &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Apr 14, 2016, at 10:45 AM, soyer via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Hello Guys, Girls,<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Do you know why is the init?(length length: Int) NSMutableData&#39;s initializer failable?<br>&gt;&gt;&gt;&gt; The memory allocation can fail, but I think Swift doesn&#39;t handle that cases. (it is not a real issue in a modern OS)<br>&gt;&gt;&gt;&gt; The code on github calls a non failable initializer.<br>&gt;&gt;&gt;&gt; https://github.com/apple/swift-corelibs-foundation/blob/master/Foundation/NSData.swift#L904<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Swift’s policy on memory allocation failure is that fixed-size object allocation is considered to be a runtime failure if it cannot be handled.  OTOH, APIs that can take a variable and arbitrarily large amount to allocate should be failable.  NSData falls into the later category.<br>&gt;&gt;<br>&gt;&gt; Does this principle apply to Array(repeating:count:)?<br>&gt;&gt; Array.append(contentsOf:)?<br>&gt;<br>&gt; As you know well enough, “no”. :-)<br></p><p>Why?  These APIs also &quot;take a variable and arbitrarily large amount to<br>allocate&quot;.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>NSMutableData&#39;s init?(length length: Int) initializer</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>April 15, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Apr 15, 2016, at 10:36, Dmitri Gribenko via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; On Fri, Apr 15, 2016 at 10:34 AM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Apr 14, 2016, at 11:22 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Thu, Apr 14, 2016 at 11:16 PM, Chris Lattner via swift-users<br>&gt;&gt;&gt; &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Apr 14, 2016, at 10:45 AM, soyer via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Hello Guys, Girls,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Do you know why is the init?(length length: Int) NSMutableData&#39;s initializer failable?<br>&gt;&gt;&gt;&gt;&gt; The memory allocation can fail, but I think Swift doesn&#39;t handle that cases. (it is not a real issue in a modern OS)<br>&gt;&gt;&gt;&gt;&gt; The code on github calls a non failable initializer.<br>&gt;&gt;&gt;&gt;&gt; https://github.com/apple/swift-corelibs-foundation/blob/master/Foundation/NSData.swift#L904<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Swift’s policy on memory allocation failure is that fixed-size object allocation is considered to be a runtime failure if it cannot be handled.  OTOH, APIs that can take a variable and arbitrarily large amount to allocate should be failable.  NSData falls into the later category.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Does this principle apply to Array(repeating:count:)?<br>&gt;&gt;&gt; Array.append(contentsOf:)?<br>&gt;&gt; <br>&gt;&gt; As you know well enough, “no”. :-)<br>&gt; <br>&gt; Why?  These APIs also &quot;take a variable and arbitrarily large amount to<br>&gt; allocate&quot;.<br></p><p>I might split the difference here: trying to append a very large sequence would be a programmer error, but trying to allocate a very large array might not be.<br></p><p>UnsafeMutablePointer.init(allocatingCapacity:) is also currently non-failable.<br></p><p>Jordan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160415/ad9f6103/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
