<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Pitch] Rename `AnyObject` to `AnyClass` and drop current `AnyClass`</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>May 22, 2016 at 11:00:00am</p></header><div class="content"><p>on Fri May 20 2016, Adrian Zubarev &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I’d like to discuss with the community to see their reactions on that topic.<br>&gt;<br>&gt; Basically from the beginning of Swift I thought it was just confusing how these typealiases were used and named.<br>&gt; As we know from Apply API Guidelines to the Standard Library the Type suffix will be dropped.<br>&gt;<br>&gt; Currently we also discuss about the `Any&lt;…&gt;` existential which may<br>&gt; contain Any-type requirement one day (by ’type’ I mean `class`,<br>&gt; `struct`, `enum` in a way like this: `Any&lt;class&gt;`).<br>&gt;<br>&gt; The Any-class requirement could replace the current `AnyObject`<br>&gt; protocol with a typealias like this: `typealias AnyObject =<br>&gt; Any&lt;class&gt;`<br>&gt;<br>&gt; Assume Swift would introduce Any-struct and Any-enum requirement one<br>&gt; day. How would one name a typealias for these, where `AnyClass` means<br>&gt; `AnyObject.Type`?<br>&gt;<br>&gt; I suggest we drop the current `AnyClass` and rename `AnyObject` to<br>&gt; `AnyClass`. If one would need the old `AnyClass` behavior it will<br>&gt; become `AnyClass.Type`.<br>&gt;<br>&gt; In the future we could have typealiases like this, which are more clear:<br>&gt;<br>&gt; `typealias AnyClass = Any&lt;class&gt;`<br>&gt; `typealias AnyStruct = Any&lt;struct&gt;`<br>&gt; `typealias AnyEnum = Any&lt;enum&gt;`<br></p><p>I would oppose this, since the distinction between AnyStruct and AnyEnum<br>is not a useful one.  There&#39;s no observable semantic difference between<br>a struct that conforms to a protocol P and an enum that conforms to the<br>same protocol.<br></p><p>&gt; I don’t know how the migration process works but I can assume that this should be done in the right order:<br>&gt;<br>&gt; - migrate every `AnyClass` to `AnyClass.Type`<br>&gt; - at the end migrate `AnyObject` to `AnyClass`<br>&gt;<br>&gt; What do you think? I’d write a small proposal if the community reaction is positive. <br>&gt;<br>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
