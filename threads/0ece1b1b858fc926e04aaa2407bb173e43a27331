<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a49c2b8a7e2ffa1339ac013f4cf9b6ff?s=50"></div><header><strong>Compiler can&#39;t infer map transfer closure return type?</strong> from <string>Neil Faiman</string> &lt;neil.swift at faiman.org&gt;<p>March  6, 2016 at 06:00:00pm</p></header><div class="content"><p>Using the version of Swift in Xcode 7.2.1, I compile the following program:<br></p><p>    let x1 = [1,2].map { _ in<br>        return &quot;abc&quot;<br>    }<br></p><p>    let x2 = [1,2].map { _ in<br>        let x = &quot;abc&quot;<br>        return x<br>    }<br></p><p>The assignment to x1 compiles successfully, but the assignment to x2 produces this error:<br></p><p>    Cannot invoke &#39;map&#39; with an argument list of type &#39;(@noescape (Int) throws -&gt; _)&#39;<br>    Expected an argument list of type &#39;(@noescape (Self.Generator.Element) throws -&gt; T)&#39;<br></p><p>It seems that in both calls, the transform closure is returning a String, so I don’t see why the compiler can infer the return type in one case, but not in the other. Am I missing something obvious?<br></p><p>Thanks,<br></p><p>	Neil Faiman<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ec8a60462a511e833c5c4a83b424c958?s=50"></div><header><strong>Compiler can&#39;t infer map transfer closure return type?</strong> from <string>Dennis Weissmann</string> &lt;dennis at dennisweissmann.me&gt;<p>March  7, 2016 at 10:00:00am</p></header><div class="content"><p>Hi Neil,<br></p><p>indeed the compiler should be able to infer the type here.<br></p><p>The error message in the latest development snapshot (swift-DEVELOPMENT-SNAPSHOT-2016-03-01-a) is a little better:<br></p><p>&gt; Expression type &#39;[_]&#39; is ambiguous without more context<br></p><p><br>You can work around like this:<br></p><p>let x2 = [1,2].map { _ -&gt; String in<br>  let x = &quot;abc&quot;<br>  return x<br>}<br></p><p>or<br></p><p>let x2: [String] = [1,2].map { _ in<br>  let x = &quot;abc&quot;<br>  return x<br>}<br></p><p>- Dennis<br></p><p>&gt; On Mar 7, 2016, at 12:55 AM, Neil Faiman via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Using the version of Swift in Xcode 7.2.1, I compile the following program:<br>&gt; <br>&gt;    let x1 = [1,2].map { _ in<br>&gt;        return &quot;abc&quot;<br>&gt;    }<br>&gt; <br>&gt;    let x2 = [1,2].map { _ in<br>&gt;        let x = &quot;abc&quot;<br>&gt;        return x<br>&gt;    }<br>&gt; <br>&gt; The assignment to x1 compiles successfully, but the assignment to x2 produces this error:<br>&gt; <br>&gt;    Cannot invoke &#39;map&#39; with an argument list of type &#39;(@noescape (Int) throws -&gt; _)&#39;<br>&gt;    Expected an argument list of type &#39;(@noescape (Self.Generator.Element) throws -&gt; T)&#39;<br>&gt; <br>&gt; It seems that in both calls, the transform closure is returning a String, so I don’t see why the compiler can infer the return type in one case, but not in the other. Am I missing something obvious?<br>&gt; <br>&gt; Thanks,<br>&gt; <br>&gt; 	Neil Faiman<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160307/f7ae16bc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Compiler can&#39;t infer map transfer closure return type?</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>March  7, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Mar 7, 2016, at 1:44 AM, Dennis Weissmann via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Neil,<br>&gt; <br>&gt; indeed the compiler should be able to infer the type here.<br>&gt; <br>&gt; The error message in the latest development snapshot (swift-DEVELOPMENT-SNAPSHOT-2016-03-01-a) is a little better:<br></p><p>Yep, further improvements are tracked by:<br>&lt;rdar://problem/24209966&gt; QoI: When a non-single-expression closure type can&#39;t be inferred, say that we didn&#39;t look at the body<br>&lt;rdar://problem/22123191&gt; QoI: multi-line closure with failure to infer result type should add a fixit<br></p><p>-Chris<br></p><p>&gt; <br>&gt;&gt; Expression type &#39;[_]&#39; is ambiguous without more context<br>&gt; <br>&gt; <br>&gt; You can work around like this:<br>&gt; <br>&gt; let x2 = [1,2].map { _ -&gt; String in<br>&gt;   let x = &quot;abc&quot;<br>&gt;   return x<br>&gt; }<br>&gt; <br>&gt; or<br>&gt; <br>&gt; let x2: [String] = [1,2].map { _ in<br>&gt;   let x = &quot;abc&quot;<br>&gt;   return x<br>&gt; }<br>&gt; <br>&gt; - Dennis<br>&gt; <br>&gt;&gt; On Mar 7, 2016, at 12:55 AM, Neil Faiman via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Using the version of Swift in Xcode 7.2.1, I compile the following program:<br>&gt;&gt; <br>&gt;&gt;    let x1 = [1,2].map { _ in<br>&gt;&gt;        return &quot;abc&quot;<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt;    let x2 = [1,2].map { _ in<br>&gt;&gt;        let x = &quot;abc&quot;<br>&gt;&gt;        return x<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt; The assignment to x1 compiles successfully, but the assignment to x2 produces this error:<br>&gt;&gt; <br>&gt;&gt;    Cannot invoke &#39;map&#39; with an argument list of type &#39;(@noescape (Int) throws -&gt; _)&#39;<br>&gt;&gt;    Expected an argument list of type &#39;(@noescape (Self.Generator.Element) throws -&gt; T)&#39;<br>&gt;&gt; <br>&gt;&gt; It seems that in both calls, the transform closure is returning a String, so I don’t see why the compiler can infer the return type in one case, but not in the other. Am I missing something obvious?<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; <br>&gt;&gt; 	Neil Faiman<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160307/44e2b060/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Compiler can&#39;t infer map transfer closure return type?</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>March  7, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Mar 7, 2016, at 10:06 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Mar 7, 2016, at 1:44 AM, Dennis Weissmann via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi Neil,<br>&gt;&gt; <br>&gt;&gt; indeed the compiler should be able to infer the type here.<br>&gt;&gt; <br>&gt;&gt; The error message in the latest development snapshot (swift-DEVELOPMENT-SNAPSHOT-2016-03-01-a) is a little better:<br>&gt; <br>&gt; Yep, further improvements are tracked by:<br>&gt; &lt;rdar://problem/24209966 &lt;rdar://problem/24209966&gt;&gt; QoI: When a non-single-expression closure type can&#39;t be inferred, say that we didn&#39;t look at the body<br>&gt; &lt;rdar://problem/22123191 &lt;rdar://problem/22123191&gt;&gt; QoI: multi-line closure with failure to infer result type should add a fixit<br></p><p>Oops, sorry, those are internal bugs, not external ones.  In any case, the intent is clear: we should say why we failed to infer the type, and do further analysis in the error case to produce a fixit when we can tell what was “meant”.<br></p><p>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160307/e4146336/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Compiler can&#39;t infer map transfer closure return type?</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>March  7, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Mar 7, 2016, at 1:44, Dennis Weissmann via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; indeed the compiler should be able to infer the type here.<br></p><p>Swift very deliberately does not infer types across multiple statements in closure bodies. This is mostly an implementation restriction (our type-checking system can&#39;t handle it very well), but it&#39;s also a simple rule that explains the implementation restriction, rather than having type inference in closure bodies working some of the time but not all.<br></p><p>As Chris pointed out, the compiler could definitely do a better job communicating the problem, but actually changing the behavior here would require significant implementation work. So this is not considered a &quot;bug&quot;, just an implementation-driven design choice.<br></p><p>Jordan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160307/9bea383d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a49c2b8a7e2ffa1339ac013f4cf9b6ff?s=50"></div><header><strong>Compiler can&#39;t infer map transfer closure return type?</strong> from <string>Neil Faiman</string> &lt;neil.swift at faiman.org&gt;<p>March  7, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Mar 7, 2016, at 4:33 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; Swift very deliberately does not infer types across multiple statements in closure bodies. This is mostly an implementation restriction (our type-checking system can&#39;t handle it very well), but it&#39;s also a simple rule that explains the implementation restriction, rather than having type inference in closure bodies working some of the time but not all.<br></p><p>OK. I understand the reasoning, and agree that it makes perfect sense. Thanks for the explanation.<br></p><p>That said … I’ll note that Swift already must have logic to infer a single result type from multiple expressions, to wit, the ?: handling logic. In principle, one could collect all the return expressions in a closure and apply the same logic to them. This would have the happy consequence that common trivial cases like “only one return statement” would work as expected.<br></p><p>But I understand that this is an enhancement request rather than a bug to be fixed, and won’t hold my breath. :-)<br></p><p>Regards,<br></p><p>	Neil Faiman<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160307/09f2a380/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Compiler can&#39;t infer map transfer closure return type?</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>March  7, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Mar 7, 2016, at 15:08, Neil Faiman &lt;neil.swift at faiman.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Mar 7, 2016, at 4:33 PM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Swift very deliberately does not infer types across multiple statements in closure bodies. This is mostly an implementation restriction (our type-checking system can&#39;t handle it very well), but it&#39;s also a simple rule that explains the implementation restriction, rather than having type inference in closure bodies working some of the time but not all.<br>&gt; <br>&gt; OK. I understand the reasoning, and agree that it makes perfect sense. Thanks for the explanation.<br>&gt; <br>&gt; That said … I’ll note that Swift already must have logic to infer a single result type from multiple expressions, to wit, the ?: handling logic. In principle, one could collect all the return expressions in a closure and apply the same logic to them. This would have the happy consequence that common trivial cases like “only one return statement” would work as expected.<br></p><p>Multiple expressions and multiple statements aren&#39;t the same thing. You&#39;d really want something like this to be inferrable too:<br></p><p>let names = enumValues.map {<br>  switch $0 {<br>  case .Foo:<br>    return &quot;.Foo&quot;<br>  case .Bar:<br>    return &quot;.Bar&quot;<br>  case .Baz<br>    return .Baz<br>  }<br>}<br></p><p>…but note that I messed up in that last return statement, and now it&#39;s not clear what the return type is supposed to be. (Maybe the first two are the mistakes.)<br></p><p>(Okay, so can we collect all the expressions? No, their types may depend on previous lines, which in turn may depend on the types of the arguments, which may also not be inferrable, although in this case they are.)<br></p><p>There are certainly ways to handle more cases than what we handle today, but then we start getting into a weird territory where it&#39;s not clear what&#39;s handled and what isn&#39;t. (Arguably we&#39;re already there given how often people ask the question.) Today there&#39;s at least a simple rule: if the closure consists of a single expression (or a single return statement), the compiler will look at the body; otherwise it won&#39;t.<br></p><p>Best,<br>Jordan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160307/bac594b3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Compiler can&#39;t infer map transfer closure return type?</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>March  7, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Mar 7, 2016, at 6:15 PM, Jordan Rose via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;  Today there&#39;s at least a simple rule: if the closure consists of a single expression (or a single return statement), the compiler will look at the body; otherwise it won&#39;t.<br></p><p>Would it be so hard to have a rule that if there&#39;s an unambiguous expression as the last line of a closure that<br>it automagically acts as a default warn-on-unused-result return? So many of my two-line closures would<br>benefit from this.<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160307/ed341685/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Compiler can&#39;t infer map transfer closure return type?</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>March  7, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Mar 7, 2016, at 17:21, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Mar 7, 2016, at 6:15 PM, Jordan Rose via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;  Today there&#39;s at least a simple rule: if the closure consists of a single expression (or a single return statement), the compiler will look at the body; otherwise it won&#39;t.<br>&gt; <br>&gt; Would it be so hard to have a rule that if there&#39;s an unambiguous expression as the last line of a closure that<br>&gt; it automagically acts as a default warn-on-unused-result return? So many of my two-line closures would<br>&gt; benefit from this.<br></p><p>What does that mean? You can&#39;t see how the closure is being called, so how do you know if the result is used or unused?<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160307/cbd2dd1d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Compiler can&#39;t infer map transfer closure return type?</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>March  7, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Mar 7, 2016, at 6:24 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Mar 7, 2016, at 17:21, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Mar 7, 2016, at 6:15 PM, Jordan Rose via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;  Today there&#39;s at least a simple rule: if the closure consists of a single expression (or a single return statement), the compiler will look at the body; otherwise it won&#39;t.<br>&gt;&gt; <br>&gt;&gt; Would it be so hard to have a rule that if there&#39;s an unambiguous expression as the last line of a closure that<br>&gt;&gt; it automagically acts as a default warn-on-unused-result return? So many of my two-line closures would<br>&gt;&gt; benefit from this.<br>&gt; <br>&gt; What does that mean? You can&#39;t see how the closure is being called, so how do you know if the result is used or unused?<br>&gt; <br>&gt; Jordan<br>&gt; <br></p><p>Okay, fine.<br></p><p>Would it be so hard to have a rule when there&#39;s an unambiguous expression as the last line of a closure that<br>it automagically acts as a default return? So many of my two-line closures would benefit from this.<br></p><p>-- E, clarifying<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160307/1d46c95a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Compiler can&#39;t infer map transfer closure return type?</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>March  8, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Mar 7, 2016, at 17:37, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Mar 7, 2016, at 6:24 PM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Mar 7, 2016, at 17:21, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Mar 7, 2016, at 6:15 PM, Jordan Rose via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;  Today there&#39;s at least a simple rule: if the closure consists of a single expression (or a single return statement), the compiler will look at the body; otherwise it won&#39;t.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Would it be so hard to have a rule that if there&#39;s an unambiguous expression as the last line of a closure that<br>&gt;&gt;&gt; it automagically acts as a default warn-on-unused-result return? So many of my two-line closures would<br>&gt;&gt;&gt; benefit from this.<br>&gt;&gt; <br>&gt;&gt; What does that mean? You can&#39;t see how the closure is being called, so how do you know if the result is used or unused?<br>&gt;&gt; <br>&gt;&gt; Jordan<br>&gt;&gt; <br>&gt; <br>&gt; Okay, fine.<br>&gt; <br>&gt; Would it be so hard to have a rule when there&#39;s an unambiguous expression as the last line of a closure that<br>&gt; it automagically acts as a default return? So many of my two-line closures would benefit from this.<br></p><p>Ah, I see what you mean now. I still think it&#39;s a bad idea, though—once you&#39;re in &quot;statement mode&quot;, flow control ought to be explicit. Other languages have definitely had problems with fall-off-the-end returns &lt;http://programmaticallyspeaking.com/why-i-hate-implicit-return-in-coffeescript.html&gt; when it&#39;s not something people use or expect all the time.<br></p><p>Per my (old) discussion on the thread Javier just brought back, @warn_unused_result ought to be catching these for you, and if not then (IMHO) that&#39;s the place to be fixing things.<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160308/c1a81833/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Compiler can&#39;t infer map transfer closure return type?</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>March  8, 2016 at 06:00:00pm</p></header><div class="content"><p>Honestly, I can probably type the entire 8 extra characters.<br></p><p>-- E, who would rather pick better battles<br>p.s. Pull Request: https://github.com/apple/swift-evolution/pull/191 &lt;https://github.com/apple/swift-evolution/pull/191&gt;<br></p><p><br>&gt; On Mar 8, 2016, at 6:24 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; Ah, I see what you mean now. I still think it&#39;s a bad idea, though—once you&#39;re in &quot;statement mode&quot;, flow control ought to be explicit. Other languages have definitely had problems with fall-off-the-end returns &lt;http://programmaticallyspeaking.com/why-i-hate-implicit-return-in-coffeescript.html&gt; when it&#39;s not something people use or expect all the time.<br>&gt; <br>&gt; Per my (old) discussion on the thread Javier just brought back, @warn_unused_result ought to be catching these for you, and if not then (IMHO) that&#39;s the place to be fixing things.<br>&gt; <br>&gt; Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160308/d4cbfdd4/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
