<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Pitch] Parse expressions after &#39;as&#39; and &#39;is&#39; instead of just types</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May 16, 2016 at 02:00:00pm</p></header><div class="content"><p>Currently, we parse a type after &#39;as[?!]&#39; and &#39;is&#39;. This is mostly what you&#39;d expect, but does lead to problems when an &#39;as&#39; expression appears as part of a comparison:<br></p><p>	20 as Int64 &lt; y as Int64 // error, &#39;&gt;&#39; expected to close generic parameter list Int64&lt;y&gt;<br></p><p>Looking to the future, many people have also expressed interest in the ability to do dynamic type checks against metatype values, not only static types, as in:<br></p><p>	class Base {}<br>	class DerivedA {}<br>	class DerivedB {}<br></p><p>	var x: Base.Type = DerivedA<br></p><p>	DerivedA() as? x // succeeds<br>	DerivedB() as? x // fails<br>	<br>If we accept https://github.com/apple/swift-evolution/blob/master/proposals/0090-remove-dot-self.md, dropping the &#39;.self&#39; requirement to refer to type objects, then I think we should also change &#39;is&#39; and &#39;as&#39; to parse the expression grammar on their right-hand side, leaving it up to the normal expression disambiguation rule to handle angle brackets. This solves the &#39;20 as Int64 &lt; x&#39; problem, and prepares us to support dynamic is/as queries in the future. (To be clear, designing dynamic queries should be its own discussion.) What do you all think?<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[Pitch] Parse expressions after &#39;as&#39; and &#39;is&#39; instead of just types</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>May 16, 2016 at 04:00:00pm</p></header><div class="content"><p>+1<br></p><p>- Dave Sweeris<br></p><p>&gt; On May 16, 2016, at 4:06 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Currently, we parse a type after &#39;as[?!]&#39; and &#39;is&#39;. This is mostly what you&#39;d expect, but does lead to problems when an &#39;as&#39; expression appears as part of a comparison:<br>&gt; <br>&gt; 	20 as Int64 &lt; y as Int64 // error, &#39;&gt;&#39; expected to close generic parameter list Int64&lt;y&gt;<br>&gt; <br>&gt; Looking to the future, many people have also expressed interest in the ability to do dynamic type checks against metatype values, not only static types, as in:<br>&gt; <br>&gt; 	class Base {}<br>&gt; 	class DerivedA {}<br>&gt; 	class DerivedB {}<br>&gt; <br>&gt; 	var x: Base.Type = DerivedA<br>&gt; <br>&gt; 	DerivedA() as? x // succeeds<br>&gt; 	DerivedB() as? x // fails<br>&gt; 	<br>&gt; If we accept https://github.com/apple/swift-evolution/blob/master/proposals/0090-remove-dot-self.md, dropping the &#39;.self&#39; requirement to refer to type objects, then I think we should also change &#39;is&#39; and &#39;as&#39; to parse the expression grammar on their right-hand side, leaving it up to the normal expression disambiguation rule to handle angle brackets. This solves the &#39;20 as Int64 &lt; x&#39; problem, and prepares us to support dynamic is/as queries in the future. (To be clear, designing dynamic queries should be its own discussion.) What do you all think?<br>&gt; <br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06130940a44c84dfc6c5aeabfd8482f8?s=50"></div><header><strong>[Pitch] Parse expressions after &#39;as&#39; and &#39;is&#39; instead of just types</strong> from <string>Timothy Wood</string> &lt;tjw at me.com&gt;<p>May 16, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On May 16, 2016, at 2:06 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Looking to the future, many people have also expressed interest in the ability to do dynamic type checks against metatype values, not only static types, as in:<br></p><p>+1 -- I’ve definitely needed this before, and ended up having to escape out to Obj-C (which worked for my particular case, but maybe wouldn’t have if the type I wanted to check against was a Swift protocol?).<br></p><p>-tim<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Pitch] Parse expressions after &#39;as&#39; and &#39;is&#39; instead of just types</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 16, 2016 at 06:00:00pm</p></header><div class="content"><p>+1<br></p><p>Sent from my iPhone<br></p><p>&gt; On May 16, 2016, at 4:06 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Currently, we parse a type after &#39;as[?!]&#39; and &#39;is&#39;. This is mostly what you&#39;d expect, but does lead to problems when an &#39;as&#39; expression appears as part of a comparison:<br>&gt; <br>&gt;    20 as Int64 &lt; y as Int64 // error, &#39;&gt;&#39; expected to close generic parameter list Int64&lt;y&gt;<br>&gt; <br>&gt; Looking to the future, many people have also expressed interest in the ability to do dynamic type checks against metatype values, not only static types, as in:<br>&gt; <br>&gt;    class Base {}<br>&gt;    class DerivedA {}<br>&gt;    class DerivedB {}<br>&gt; <br>&gt;    var x: Base.Type = DerivedA<br>&gt; <br>&gt;    DerivedA() as? x // succeeds<br>&gt;    DerivedB() as? x // fails<br>&gt;    <br>&gt; If we accept https://github.com/apple/swift-evolution/blob/master/proposals/0090-remove-dot-self.md, dropping the &#39;.self&#39; requirement to refer to type objects, then I think we should also change &#39;is&#39; and &#39;as&#39; to parse the expression grammar on their right-hand side, leaving it up to the normal expression disambiguation rule to handle angle brackets. This solves the &#39;20 as Int64 &lt; x&#39; problem, and prepares us to support dynamic is/as queries in the future. (To be clear, designing dynamic queries should be its own discussion.) What do you all think?<br>&gt; <br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c8f823910f180809a2420a8be5460be3?s=50"></div><header><strong>[Pitch] Parse expressions after &#39;as&#39; and &#39;is&#39; instead of just types</strong> from <string>Dan Appel</string> &lt;dan.appel00 at gmail.com&gt;<p>May 17, 2016 at 12:00:00am</p></header><div class="content"><p>Just to clarify: in your example, did you mean for DerivedA and DerivedB to<br>inherit from Base?<br></p><p>On Mon, May 16, 2016 at 4:18 PM Matthew Johnson via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; +1<br>&gt;<br>&gt; Sent from my iPhone<br>&gt;<br>&gt; &gt; On May 16, 2016, at 4:06 PM, Joe Groff via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Currently, we parse a type after &#39;as[?!]&#39; and &#39;is&#39;. This is mostly what<br>&gt; you&#39;d expect, but does lead to problems when an &#39;as&#39; expression appears as<br>&gt; part of a comparison:<br>&gt; &gt;<br>&gt; &gt;    20 as Int64 &lt; y as Int64 // error, &#39;&gt;&#39; expected to close generic<br>&gt; parameter list Int64&lt;y&gt;<br>&gt; &gt;<br>&gt; &gt; Looking to the future, many people have also expressed interest in the<br>&gt; ability to do dynamic type checks against metatype values, not only static<br>&gt; types, as in:<br>&gt; &gt;<br>&gt; &gt;    class Base {}<br>&gt; &gt;    class DerivedA {}<br>&gt; &gt;    class DerivedB {}<br>&gt; &gt;<br>&gt; &gt;    var x: Base.Type = DerivedA<br>&gt; &gt;<br>&gt; &gt;    DerivedA() as? x // succeeds<br>&gt; &gt;    DerivedB() as? x // fails<br>&gt; &gt;<br>&gt; &gt; If we accept<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0090-remove-dot-self.md,<br>&gt; dropping the &#39;.self&#39; requirement to refer to type objects, then I think we<br>&gt; should also change &#39;is&#39; and &#39;as&#39; to parse the expression grammar on their<br>&gt; right-hand side, leaving it up to the normal expression disambiguation rule<br>&gt; to handle angle brackets. This solves the &#39;20 as Int64 &lt; x&#39; problem, and<br>&gt; prepares us to support dynamic is/as queries in the future. (To be clear,<br>&gt; designing dynamic queries should be its own discussion.) What do you all<br>&gt; think?<br>&gt; &gt;<br>&gt; &gt; -Joe<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-- <br>Dan Appel<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160517/49f43804/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Pitch] Parse expressions after &#39;as&#39; and &#39;is&#39; instead of just types</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May 16, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On May 16, 2016, at 5:49 PM, Dan Appel &lt;dan.appel00 at gmail.com&gt; wrote:<br>&gt; <br>&gt; Just to clarify: in your example, did you mean for DerivedA and DerivedB to inherit from Base?<br></p><p>Yeah, sorry about that.<br></p><p>-Joe<br></p><p>&gt; <br>&gt; On Mon, May 16, 2016 at 4:18 PM Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; +1<br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt; &gt; On May 16, 2016, at 4:06 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Currently, we parse a type after &#39;as[?!]&#39; and &#39;is&#39;. This is mostly what you&#39;d expect, but does lead to problems when an &#39;as&#39; expression appears as part of a comparison:<br>&gt; &gt;<br>&gt; &gt;    20 as Int64 &lt; y as Int64 // error, &#39;&gt;&#39; expected to close generic parameter list Int64&lt;y&gt;<br>&gt; &gt;<br>&gt; &gt; Looking to the future, many people have also expressed interest in the ability to do dynamic type checks against metatype values, not only static types, as in:<br>&gt; &gt;<br>&gt; &gt;    class Base {}<br>&gt; &gt;    class DerivedA {}<br>&gt; &gt;    class DerivedB {}<br>&gt; &gt;<br>&gt; &gt;    var x: Base.Type = DerivedA<br>&gt; &gt;<br>&gt; &gt;    DerivedA() as? x // succeeds<br>&gt; &gt;    DerivedB() as? x // fails<br>&gt; &gt;<br>&gt; &gt; If we accept https://github.com/apple/swift-evolution/blob/master/proposals/0090-remove-dot-self.md, dropping the &#39;.self&#39; requirement to refer to type objects, then I think we should also change &#39;is&#39; and &#39;as&#39; to parse the expression grammar on their right-hand side, leaving it up to the normal expression disambiguation rule to handle angle brackets. This solves the &#39;20 as Int64 &lt; x&#39; problem, and prepares us to support dynamic is/as queries in the future. (To be clear, designing dynamic queries should be its own discussion.) What do you all think?<br>&gt; &gt;<br>&gt; &gt; -Joe<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; -- <br>&gt; Dan Appel<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d02ed1b20fc3e0fa1592ce5982f24d2b?s=50"></div><header><strong>[Pitch] Parse expressions after &#39;as&#39; and &#39;is&#39;instead of just types</strong> from <string>Leonardo Pessoa</string> &lt;me at lmpessoa.com&gt;<p>May 17, 2016 at 07:00:00am</p></header><div class="content"><p>+1<br></p><p>-----Original Message-----<br>From: &quot;Joe Groff via swift-evolution&quot; &lt;swift-evolution at swift.org&gt;<br>Sent: ‎16/‎05/‎2016 06:06 PM<br>To: &quot;swift-evolution&quot; &lt;swift-evolution at swift.org&gt;<br>Subject: [swift-evolution] [Pitch] Parse expressions after &#39;as&#39; and &#39;is&#39;instead of just types<br></p><p>Currently, we parse a type after &#39;as[?!]&#39; and &#39;is&#39;. This is mostly what you&#39;d expect, but does lead to problems when an &#39;as&#39; expression appears as part of a comparison:<br></p><p>	20 as Int64 &lt; y as Int64 // error, &#39;&gt;&#39; expected to close generic parameter list Int64&lt;y&gt;<br></p><p>Looking to the future, many people have also expressed interest in the ability to do dynamic type checks against metatype values, not only static types, as in:<br></p><p>	class Base {}<br>	class DerivedA {}<br>	class DerivedB {}<br></p><p>	var x: Base.Type = DerivedA<br></p><p>	DerivedA() as? x // succeeds<br>	DerivedB() as? x // fails<br>	<br>If we accept https://github.com/apple/swift-evolution/blob/master/proposals/0090-remove-dot-self.md, dropping the &#39;.self&#39; requirement to refer to type objects, then I think we should also change &#39;is&#39; and &#39;as&#39; to parse the expression grammar on their right-hand side, leaving it up to the normal expression disambiguation rule to handle angle brackets. This solves the &#39;20 as Int64 &lt; x&#39; problem, and prepares us to support dynamic is/as queries in the future. (To be clear, designing dynamic queries should be its own discussion.) What do you all think?<br></p><p>-Joe<br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160517/1279274a/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Pitch] Parse expressions after &#39;as&#39; and &#39;is&#39; instead of just types</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>May 17, 2016 at 04:00:00pm</p></header><div class="content"><p>+1 Seems like it could enable very powerful behaviour going forward<br></p><p>&gt; On 16 May 2016, at 23:06, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Currently, we parse a type after &#39;as[?!]&#39; and &#39;is&#39;. This is mostly what you&#39;d expect, but does lead to problems when an &#39;as&#39; expression appears as part of a comparison:<br>&gt; <br>&gt; 	20 as Int64 &lt; y as Int64 // error, &#39;&gt;&#39; expected to close generic parameter list Int64&lt;y&gt;<br>&gt; <br>&gt; Looking to the future, many people have also expressed interest in the ability to do dynamic type checks against metatype values, not only static types, as in:<br>&gt; <br>&gt; 	class Base {}<br>&gt; 	class DerivedA {}<br>&gt; 	class DerivedB {}<br>&gt; <br>&gt; 	var x: Base.Type = DerivedA<br>&gt; <br>&gt; 	DerivedA() as? x // succeeds<br>&gt; 	DerivedB() as? x // fails<br>&gt; 	<br>&gt; If we accept https://github.com/apple/swift-evolution/blob/master/proposals/0090-remove-dot-self.md, dropping the &#39;.self&#39; requirement to refer to type objects, then I think we should also change &#39;is&#39; and &#39;as&#39; to parse the expression grammar on their right-hand side, leaving it up to the normal expression disambiguation rule to handle angle brackets. This solves the &#39;20 as Int64 &lt; x&#39; problem, and prepares us to support dynamic is/as queries in the future. (To be clear, designing dynamic queries should be its own discussion.) What do you all think?<br>&gt; <br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Pitch] Parse expressions after &#39;as&#39; and &#39;is&#39; instead of just types</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>May 17, 2016 at 05:00:00pm</p></header><div class="content"><p>+1 Missed this one for a long time :) <br></p><p>-- <br>Adrian Zubarev <br></p><p>Am 17. Mai 2016 um 16:25:10, David Hart via swift-evolution (swift-evolution at swift.org(mailto:swift-evolution at swift.org)) schrieb:<br></p><p>&gt; <br>&gt; +1 Seems like it could enable very powerful behaviour going forward<br>&gt; <br>&gt; &gt; On 16 May 2016, at 23:06, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; <br>&gt; &gt; Currently, we parse a type after &#39;as[?!]&#39; and &#39;is&#39;. This is mostly what you&#39;d expect, but does lead to problems when an &#39;as&#39; expression appears as part of a comparison:<br>&gt; &gt; <br>&gt; &gt; 20 as Int64 &lt; y as Int64 // error, &#39;&gt;&#39; expected to close generic parameter list Int64&lt;y&gt;<br>&gt; &gt; <br>&gt; &gt; Looking to the future, many people have also expressed interest in the ability to do dynamic type checks against metatype values, not only static types, as in:<br>&gt; &gt; <br>&gt; &gt; class Base {}<br>&gt; &gt; class DerivedA {}<br>&gt; &gt; class DerivedB {}<br>&gt; &gt; <br>&gt; &gt; var x: Base.Type = DerivedA<br>&gt; &gt; <br>&gt; &gt; DerivedA() as? x // succeeds<br>&gt; &gt; DerivedB() as? x // fails<br>&gt; &gt; <br>&gt; &gt; If we accept https://github.com/apple/swift-evolution/blob/master/proposals/0090-remove-dot-self.md, dropping the &#39;.self&#39; requirement to refer to type objects, then I think we should also change &#39;is&#39; and &#39;as&#39; to parse the expression grammar on their right-hand side, leaving it up to the normal expression disambiguation rule to handle angle brackets. This solves the &#39;20 as Int64 &lt; x&#39; problem, and prepares us to support dynamic is/as queries in the future. (To be clear, designing dynamic queries should be its own discussion.) What do you all think?<br>&gt; &gt; <br>&gt; &gt; -Joe<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160517/67a23729/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Pitch] Parse expressions after &#39;as&#39; and &#39;is&#39; instead of just types</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>May 18, 2016 at 06:00:00am</p></header><div class="content"><p>+1<br></p><p>-Thorsten <br></p><p>&gt; Am 16.05.2016 um 23:06 schrieb Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; Currently, we parse a type after &#39;as[?!]&#39; and &#39;is&#39;. This is mostly what you&#39;d expect, but does lead to problems when an &#39;as&#39; expression appears as part of a comparison:<br>&gt; <br>&gt;    20 as Int64 &lt; y as Int64 // error, &#39;&gt;&#39; expected to close generic parameter list Int64&lt;y&gt;<br>&gt; <br>&gt; Looking to the future, many people have also expressed interest in the ability to do dynamic type checks against metatype values, not only static types, as in:<br>&gt; <br>&gt;    class Base {}<br>&gt;    class DerivedA {}<br>&gt;    class DerivedB {}<br>&gt; <br>&gt;    var x: Base.Type = DerivedA<br>&gt; <br>&gt;    DerivedA() as? x // succeeds<br>&gt;    DerivedB() as? x // fails<br>&gt;    <br>&gt; If we accept https://github.com/apple/swift-evolution/blob/master/proposals/0090-remove-dot-self.md, dropping the &#39;.self&#39; requirement to refer to type objects, then I think we should also change &#39;is&#39; and &#39;as&#39; to parse the expression grammar on their right-hand side, leaving it up to the normal expression disambiguation rule to handle angle brackets. This solves the &#39;20 as Int64 &lt; x&#39; problem, and prepares us to support dynamic is/as queries in the future. (To be clear, designing dynamic queries should be its own discussion.) What do you all think?<br>&gt; <br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e910871dda004717de19e83626308b5a?s=50"></div><header><strong>[Pitch] Parse expressions after &#39;as&#39; and &#39;is&#39; instead of just types</strong> from <string>Tony Allevato</string> &lt;allevato at google.com&gt;<p>May 18, 2016 at 06:00:00pm</p></header><div class="content"><p>+1<br></p><p>On Mon, May 16, 2016 at 2:07 PM Joe Groff via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Currently, we parse a type after &#39;as[?!]&#39; and &#39;is&#39;. This is mostly what<br>&gt; you&#39;d expect, but does lead to problems when an &#39;as&#39; expression appears as<br>&gt; part of a comparison:<br>&gt;<br>&gt;         20 as Int64 &lt; y as Int64 // error, &#39;&gt;&#39; expected to close generic<br>&gt; parameter list Int64&lt;y&gt;<br>&gt;<br>&gt; Looking to the future, many people have also expressed interest in the<br>&gt; ability to do dynamic type checks against metatype values, not only static<br>&gt; types, as in:<br>&gt;<br>&gt;         class Base {}<br>&gt;         class DerivedA {}<br>&gt;         class DerivedB {}<br>&gt;<br>&gt;         var x: Base.Type = DerivedA<br>&gt;<br>&gt;         DerivedA() as? x // succeeds<br>&gt;         DerivedB() as? x // fails<br>&gt;<br>&gt; If we accept<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0090-remove-dot-self.md,<br>&gt; dropping the &#39;.self&#39; requirement to refer to type objects, then I think we<br>&gt; should also change &#39;is&#39; and &#39;as&#39; to parse the expression grammar on their<br>&gt; right-hand side, leaving it up to the normal expression disambiguation rule<br>&gt; to handle angle brackets. This solves the &#39;20 as Int64 &lt; x&#39; problem, and<br>&gt; prepares us to support dynamic is/as queries in the future. (To be clear,<br>&gt; designing dynamic queries should be its own discussion.) What do you all<br>&gt; think?<br>&gt;<br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160518/1b62c07e/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Pitch] Parse expressions after &#39;as&#39; and &#39;is&#39; instead of just types</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 18, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On May 16, 2016, at 4:06 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Currently, we parse a type after &#39;as[?!]&#39; and &#39;is&#39;. This is mostly what you&#39;d expect, but does lead to problems when an &#39;as&#39; expression appears as part of a comparison:<br>&gt; <br>&gt; 	20 as Int64 &lt; y as Int64 // error, &#39;&gt;&#39; expected to close generic parameter list Int64&lt;y&gt;<br>&gt; <br>&gt; Looking to the future, many people have also expressed interest in the ability to do dynamic type checks against metatype values, not only static types, as in:<br>&gt; <br>&gt; 	class Base {}<br>&gt; 	class DerivedA {}<br>&gt; 	class DerivedB {}<br>&gt; <br>&gt; 	var x: Base.Type = DerivedA<br>&gt; <br>&gt; 	DerivedA() as? x // succeeds<br>&gt; 	DerivedB() as? x // fails<br></p><p>The dynamic check itself makes sense but it isn’t clear what type these expressions should return?  It can’t be `DerivedA?` like it would in the equivalent static expression as the type is not known statically:<br></p><p>DerivedA() as? DerivedA // succeeds with value Optional&lt;DerivedA&gt;.Some<br>DerivedB() as? DerivedA // fails with value Optional&lt;DerivedA&gt;.None<br></p><p><br></p><p>&gt; 	<br>&gt; If we accept https://github.com/apple/swift-evolution/blob/master/proposals/0090-remove-dot-self.md, dropping the &#39;.self&#39; requirement to refer to type objects, then I think we should also change &#39;is&#39; and &#39;as&#39; to parse the expression grammar on their right-hand side, leaving it up to the normal expression disambiguation rule to handle angle brackets. This solves the &#39;20 as Int64 &lt; x&#39; problem, and prepares us to support dynamic is/as queries in the future. (To be clear, designing dynamic queries should be its own discussion.) What do you all think?<br>&gt; <br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Pitch] Parse expressions after &#39;as&#39; and &#39;is&#39; instead of just types</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May 18, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On May 18, 2016, at 12:54 PM, Matthew Johnson &lt;matthew at anandabits.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On May 16, 2016, at 4:06 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Currently, we parse a type after &#39;as[?!]&#39; and &#39;is&#39;. This is mostly what you&#39;d expect, but does lead to problems when an &#39;as&#39; expression appears as part of a comparison:<br>&gt;&gt; <br>&gt;&gt; 	20 as Int64 &lt; y as Int64 // error, &#39;&gt;&#39; expected to close generic parameter list Int64&lt;y&gt;<br>&gt;&gt; <br>&gt;&gt; Looking to the future, many people have also expressed interest in the ability to do dynamic type checks against metatype values, not only static types, as in:<br>&gt;&gt; <br>&gt;&gt; 	class Base {}<br>&gt;&gt; 	class DerivedA {}<br>&gt;&gt; 	class DerivedB {}<br>&gt;&gt; <br>&gt;&gt; 	var x: Base.Type = DerivedA<br>&gt;&gt; <br>&gt;&gt; 	DerivedA() as? x // succeeds<br>&gt;&gt; 	DerivedB() as? x // fails<br>&gt; <br>&gt; The dynamic check itself makes sense but it isn’t clear what type these expressions should return?  It can’t be `DerivedA?` like it would in the equivalent static expression as the type is not known statically:<br>&gt; <br>&gt; DerivedA() as? DerivedA // succeeds with value Optional&lt;DerivedA&gt;.Some<br>&gt; DerivedB() as? DerivedA // fails with value Optional&lt;DerivedA&gt;.None<br></p><p>Right, the static type of a cast like this would still have to be the upper bound type of the metatype value. (Unless we introduce some sort of path-dependent types to allow `x.Self` to be a type.)<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Pitch] Parse expressions after &#39;as&#39; and &#39;is&#39; instead of just types</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 18, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On May 18, 2016, at 2:55 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On May 18, 2016, at 12:54 PM, Matthew Johnson &lt;matthew at anandabits.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On May 16, 2016, at 4:06 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Currently, we parse a type after &#39;as[?!]&#39; and &#39;is&#39;. This is mostly what you&#39;d expect, but does lead to problems when an &#39;as&#39; expression appears as part of a comparison:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	20 as Int64 &lt; y as Int64 // error, &#39;&gt;&#39; expected to close generic parameter list Int64&lt;y&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Looking to the future, many people have also expressed interest in the ability to do dynamic type checks against metatype values, not only static types, as in:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	class Base {}<br>&gt;&gt;&gt; 	class DerivedA {}<br>&gt;&gt;&gt; 	class DerivedB {}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	var x: Base.Type = DerivedA<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	DerivedA() as? x // succeeds<br>&gt;&gt;&gt; 	DerivedB() as? x // fails<br>&gt;&gt; <br>&gt;&gt; The dynamic check itself makes sense but it isn’t clear what type these expressions should return?  It can’t be `DerivedA?` like it would in the equivalent static expression as the type is not known statically:<br>&gt;&gt; <br>&gt;&gt; DerivedA() as? DerivedA // succeeds with value Optional&lt;DerivedA&gt;.Some<br>&gt;&gt; DerivedB() as? DerivedA // fails with value Optional&lt;DerivedA&gt;.None<br>&gt; <br>&gt; Right, the static type of a cast like this would still have to be the upper bound type of the metatype value. (Unless we introduce some sort of path-dependent types to allow `x.Self` to be a type.)<br></p><p>So `Base?` in this case?  That makes sense.  Thanks for clarifying.<br></p><p>&gt; <br>&gt; -Joe<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160518/ba26c5f5/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
