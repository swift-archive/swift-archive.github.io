<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c354b21edb9ba56fe6b42950e08195fa?s=50"></div><header><strong>[Draft] Apply -ed/-ing rule to core functional methods (e.g. filter =&gt; filtered)</strong> from <string>Jonathan Hull</string> &lt;jhull at gbis.com&gt;<p>June 16, 2016 at 04:00:00pm</p></header><div class="content"><p>+1<br></p><p>I was definitely surprised when these weren&#39;t changed with the other methods.  They will still be easily found with the new names, and the current inconsistency makes the -ed/-ing rule much harder to grok / trust (especially considering how often these are used).<br></p><p>I do understand David Waite’s objections, but I think that issue needs to be solved separately, as it is also a problem for things like ‘sorted’.  It basically affects all “non-mutating” methods on Sequence, and we should come up with a fix for that situation as a whole (in a separate proposal).<br></p><p>Thanks,<br>Jon<br></p><p>&gt; Due to considerably support on this thread<br>&gt; &lt;http://news.gmane.org/find-root.php?group=gmane.comp.lang.swift.evolution&amp;article=20783 &lt;http://news.gmane.org/find-root.php?group=gmane.comp.lang.swift.evolution&amp;article=20783&gt;&gt;,<br>&gt; a draft proposal to revisit the core functional method exceptions to the<br>&gt; -ed/-ing rule.<br>&gt; <br>&gt; Online version:<br>&gt; https://github.com/PatrickPijnappel/swift-evolution/blob/functional-methods-ed-ing/proposals/XXXX-functional-methods-ed-ing.md &lt;https://github.com/PatrickPijnappel/swift-evolution/blob/functional-methods-ed-ing/proposals/XXXX-functional-methods-ed-ing.md&gt;<br>&gt; <br>&gt; Apply -ed/-ing rule to core functional methods<br>&gt; <br>&gt;    - Proposal: SE-NNNN<br>&gt;    &lt;https://github.com/PatrickPijnappel/swift-evolution/blob/functional-methods-ed-ing/proposals/NNNN-functional-methods-ed-ing.md &lt;https://github.com/PatrickPijnappel/swift-evolution/blob/functional-methods-ed-ing/proposals/NNNN-functional-methods-ed-ing.md&gt;&gt;<br>&gt;    - Author: Patrick Pijnappel &lt;https://github.com/PatrickPijnappel &lt;https://github.com/PatrickPijnappel&gt;&gt;<br>&gt;    - Status: Awaiting review<br>&gt;    - Review manager: TBD<br>&gt; <br>&gt; &lt;https://github.com/PatrickPijnappel/swift-evolution/blob/functional-methods-ed-ing/proposals/XXXX-functional-methods-ed-ing.md#introduction &lt;https://github.com/PatrickPijnappel/swift-evolution/blob/functional-methods-ed-ing/proposals/XXXX-functional-methods-ed-ing.md#introduction&gt;&gt;<br>&gt; Introduction<br>&gt; <br>&gt; The Swift API Guidelines standardizes non-mutating method forms on verbs<br>&gt; ending in -ed/-ing (or nouns). However, a few non-mutating forms have been<br>&gt; kept as &quot;Terms of Art&quot;: map, flatMap, filter, reduce, dropFirst and dropLast.<br>&gt; This proposal proposes to bring these in line with all other non-mutating<br>&gt; forms (e.g. filter =&gt; filtered).<br>&gt; <br>&gt; Swift-evolution threads: Source<br>&gt; &lt;http://news.gmane.org/find-root.php?group=gmane.comp.lang.swift.evolution&amp;article=20783 &lt;http://news.gmane.org/find-root.php?group=gmane.comp.lang.swift.evolution&amp;article=20783&gt;&gt;<br>&gt; &lt;https://github.com/PatrickPijnappel/swift-evolution/blob/functional-methods-ed-ing/proposals/XXXX-functional-methods-ed-ing.md#motivation &lt;https://github.com/PatrickPijnappel/swift-evolution/blob/functional-methods-ed-ing/proposals/XXXX-functional-methods-ed-ing.md#motivation&gt;&gt;<br>&gt; Motivation<br>&gt; <br>&gt; These method have been kept to preserve the terms of art. Generally, this<br>&gt; can have significant benefits:<br>&gt; <br>&gt;    - Anyone familiar with the term will immediately understand it, and use<br>&gt;    their assumptions about how it works.<br>&gt;    - Users learning the term from Swift can use their knowledge when<br>&gt;    encountering it elsewhere.<br>&gt;    - Experienced users will be able to use the mental pattern matching<br>&gt;    they&#39;ve built-up for quickly recognizing common programming patterns.<br>&gt; <br>&gt; However, basically all of the benefits of using a term of art still apply<br>&gt; to the modified forms: – For recognition, the modified forms are still very<br>&gt; close to the traditional terms of art. So both coming to and from Swift<br>&gt; you&#39;ll be able to use your knowledge pretty much unaffected.<br>&gt; <br>&gt;    - If the user looks for e.g. filter they are pretty much guaranteed to<br>&gt;    quickly find the correct form, be it through code-completion, google or a<br>&gt;    fix-it.<br>&gt;    - There isn&#39;t really any violation of assumptions that might cause<br>&gt;    problems in this case.<br>&gt;    - Any mental pattern matching will likely transfer quickly due to the<br>&gt;    minimal difference.<br>&gt; <br>&gt; &lt;https://github.com/PatrickPijnappel/swift-evolution/blob/functional-methods-ed-ing/proposals/XXXX-functional-methods-ed-ing.md#proposed-solution &lt;https://github.com/PatrickPijnappel/swift-evolution/blob/functional-methods-ed-ing/proposals/XXXX-functional-methods-ed-ing.md#proposed-solution&gt;&gt;Proposed<br>&gt; solution<br>&gt; <br>&gt; The proposed solution modifies the method verbs to their -ed/-ing forms<br>&gt; (preferring the former).<br>&gt; <br>&gt; It removes the last clear exceptions to the -ed/-ing rule from the standard<br>&gt; library, which previously were exactly the opposite of what one would<br>&gt; expect based on the API guidelines (and the rest of the language).<br>&gt; <br>&gt; It also aids users in learning to pattern match on the -ed/-ing rule and<br>&gt; internalizing the API guidelines, since now all methods are named this way<br>&gt; – instead of the most commonly used methods defying the normal pattern.<br>&gt; &lt;https://github.com/PatrickPijnappel/swift-evolution/blob/functional-methods-ed-ing/proposals/XXXX-functional-methods-ed-ing.md#detailed-design &lt;https://github.com/PatrickPijnappel/swift-evolution/blob/functional-methods-ed-ing/proposals/XXXX-functional-methods-ed-ing.md#detailed-design&gt;&gt;Detailed<br>&gt; design<br>&gt; <br>&gt; The change would rename the following method families:<br>&gt; <br>&gt; map       =&gt; mapped<br>&gt; flatMap   =&gt; flatMapped<br>&gt; filter    =&gt; filtered<br>&gt; reduce    =&gt; reduced<br>&gt; dropFirst =&gt; droppingFirst<br>&gt; dropLast  =&gt; droppingLast<br>&gt; <br>&gt; &lt;https://github.com/PatrickPijnappel/swift-evolution/blob/functional-methods-ed-ing/proposals/XXXX-functional-methods-ed-ing.md#impact-on-existing-code &lt;https://github.com/PatrickPijnappel/swift-evolution/blob/functional-methods-ed-ing/proposals/XXXX-functional-methods-ed-ing.md#impact-on-existing-code&gt;&gt;Impact<br>&gt; on existing code<br>&gt; <br>&gt; The Swift migrator and fix-its would be provided for the change.<br>&gt; &lt;https://github.com/PatrickPijnappel/swift-evolution/blob/functional-methods-ed-ing/proposals/XXXX-functional-methods-ed-ing.md#alternatives-considered &lt;https://github.com/PatrickPijnappel/swift-evolution/blob/functional-methods-ed-ing/proposals/XXXX-functional-methods-ed-ing.md#alternatives-considered&gt;&gt;Alternatives<br>&gt; considered<br>&gt; <br>&gt;    - Alternatively -ing suffixes could be used for map/flatMap/filter/reduce.<br>&gt;    However, these are normally reserved for when -ed doesn&#39;t really work (e.g.<br>&gt;    droppedFirst).<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160616/283c553d/attachment.html&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
