<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3283e69dac603660e4abad5fef6f538?s=50"></div><header><strong>[Proposal] Remove force unwrapping in function signature.</strong> from <string>Spromicky</string> &lt;spromicky at gmail.com&gt;<p>June  8, 2016 at 02:00:00pm</p></header><div class="content"><p>Hello, everyone!<br></p><p>I wanna propose to you to remove force unwrapping in fuction signature for swift code. That no sense in clear swift code. If we wanna use some optional value as function param, that is not optional, we must unwrap it before function call.<br>People who new in swift look at how they old Obj-C code (without nullability modifiers) translate in to swift: <br></p><p>Obj-C:<br>- (void)foo:(NSInteger)bar {<br>    //...<br>}<br></p><p>Swift transaliton:<br>func foo(bar: Int!) {<br>    //...<br>}<br></p><p>And think that force unwrapping in signature is good practice. And start write functions in clear swift code like this:<br></p><p>func newFoo(bar: Int!) {<br>    //...<br>}<br></p><p>and use it like this:<br></p><p>let bar: Int? = 1<br>newFoo(bar)<br></p><p>And it really work, and they does not think that this can crash in case if `bar` will be `nil`.<br>But in clear swift we wanna work with parametrs in function that clearly or optional, or not.<br></p><p>func newFoo(bar: Int) {<br>    //...<br>}<br></p><p>or <br></p><p>func newFoo(bar: Int?) {<br>    //...<br>}<br></p><p>When we write a new function we know what we need in this case and use optional params or not. <br></p><p>So my proposal is remove force unwrapping(`!`) from function signatures, cause it have no sense, and that confuse new users.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f64d9558601ff253a2faf75455059df6?s=50"></div><header><strong>[Proposal] Remove force unwrapping in function signature.</strong> from <string>J. Charles M. N.</string> &lt;jcharles.nmbiada at me.com&gt;<p>June  8, 2016 at 09:00:00pm</p></header><div class="content"><p>This confused me at the beginning.<br></p><p>But doesn&#39;t Int! In parameter type means the function is awaiting an unwrapped value so the user should ensure that it data parameter is available, valid, and unwrapped?<br></p><p>--<br>J. Charles <br></p><p>&gt; Le 8 juin 2016 à 13:30, Spromicky via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Hello, everyone!<br>&gt; <br>&gt; I wanna propose to you to remove force unwrapping in fuction signature for swift code. That no sense in clear swift code. If we wanna use some optional value as function param, that is not optional, we must unwrap it before function call.<br>&gt; People who new in swift look at how they old Obj-C code (without nullability modifiers) translate in to swift: <br>&gt; <br>&gt; Obj-C:<br>&gt; - (void)foo:(NSInteger)bar {<br>&gt;    //...<br>&gt; }<br>&gt; <br>&gt; Swift transaliton:<br>&gt; func foo(bar: Int!) {<br>&gt;    //...<br>&gt; }<br>&gt; <br>&gt; And think that force unwrapping in signature is good practice. And start write functions in clear swift code like this:<br>&gt; <br>&gt; func newFoo(bar: Int!) {<br>&gt;    //...<br>&gt; }<br>&gt; <br>&gt; and use it like this:<br>&gt; <br>&gt; let bar: Int? = 1<br>&gt; newFoo(bar)<br>&gt; <br>&gt; And it really work, and they does not think that this can crash in case if `bar` will be `nil`.<br>&gt; But in clear swift we wanna work with parametrs in function that clearly or optional, or not.<br>&gt; <br>&gt; func newFoo(bar: Int) {<br>&gt;    //...<br>&gt; }<br>&gt; <br>&gt; or <br>&gt; <br>&gt; func newFoo(bar: Int?) {<br>&gt;    //...<br>&gt; }<br>&gt; <br>&gt; When we write a new function we know what we need in this case and use optional params or not. <br>&gt; <br>&gt; So my proposal is remove force unwrapping(`!`) from function signatures, cause it have no sense, and that confuse new users.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2024f9524b1e51a54c4251abf0c34f50?s=50"></div><header><strong>[Proposal] Remove force unwrapping in function signature.</strong> from <string>Saagar Jha</string> &lt;saagarjha28 at gmail.com&gt;<p>June  8, 2016 at 09:00:00pm</p></header><div class="content"><p>+1 I agree. Unwrapping in the functional signature is confusing for the<br>user; many don’t realize that it puts the burden of checking on them.<br>Non-optional function parameters make this explicit by preventing passing<br>in Optional types, forcing the user to check, which they should be doing<br>anyway.<br></p><p>On Wed, Jun 8, 2016 at 12:22 PM J. Charles M. N. via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; This confused me at the beginning.<br>&gt;<br>&gt; But doesn&#39;t Int! In parameter type means the function is awaiting an<br>&gt; unwrapped value so the user should ensure that it data parameter is<br>&gt; available, valid, and unwrapped?<br>&gt;<br>&gt; --<br>&gt; J. Charles<br>&gt;<br>&gt; &gt; Le 8 juin 2016 à 13:30, Spromicky via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt; &gt;<br>&gt; &gt; Hello, everyone!<br>&gt; &gt;<br>&gt; &gt; I wanna propose to you to remove force unwrapping in fuction signature<br>&gt; for swift code. That no sense in clear swift code. If we wanna use some<br>&gt; optional value as function param, that is not optional, we must unwrap it<br>&gt; before function call.<br>&gt; &gt; People who new in swift look at how they old Obj-C code (without<br>&gt; nullability modifiers) translate in to swift:<br>&gt; &gt;<br>&gt; &gt; Obj-C:<br>&gt; &gt; - (void)foo:(NSInteger)bar {<br>&gt; &gt;    //...<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; Swift transaliton:<br>&gt; &gt; func foo(bar: Int!) {<br>&gt; &gt;    //...<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; And think that force unwrapping in signature is good practice. And start<br>&gt; write functions in clear swift code like this:<br>&gt; &gt;<br>&gt; &gt; func newFoo(bar: Int!) {<br>&gt; &gt;    //...<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; and use it like this:<br>&gt; &gt;<br>&gt; &gt; let bar: Int? = 1<br>&gt; &gt; newFoo(bar)<br>&gt; &gt;<br>&gt; &gt; And it really work, and they does not think that this can crash in case<br>&gt; if `bar` will be `nil`.<br>&gt; &gt; But in clear swift we wanna work with parametrs in function that clearly<br>&gt; or optional, or not.<br>&gt; &gt;<br>&gt; &gt; func newFoo(bar: Int) {<br>&gt; &gt;    //...<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; or<br>&gt; &gt;<br>&gt; &gt; func newFoo(bar: Int?) {<br>&gt; &gt;    //...<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; When we write a new function we know what we need in this case and use<br>&gt; optional params or not.<br>&gt; &gt;<br>&gt; &gt; So my proposal is remove force unwrapping(`!`) from function signatures,<br>&gt; cause it have no sense, and that confuse new users.<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-- <br>-Saagar Jha<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160608/be39c3b0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c0eafab7106ab63b8db4025e57c1a8d2?s=50"></div><header><strong>[Proposal] Remove force unwrapping in function signature.</strong> from <string>Javier Soto</string> &lt;javier.api at gmail.com&gt;<p>June  9, 2016 at 02:00:00am</p></header><div class="content"><p>I agree we could disallow explicitly declaring implicitly unwrapped<br>function parameters, but this will be needed for the clang importer since<br>there will still be many C and ObjC APIs not tagged for nullability.<br>On Wed, Jun 8, 2016 at 2:46 PM Saagar Jha via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; +1 I agree. Unwrapping in the functional signature is confusing for the<br>&gt; user; many don’t realize that it puts the burden of checking on them.<br>&gt; Non-optional function parameters make this explicit by preventing passing<br>&gt; in Optional types, forcing the user to check, which they should be doing<br>&gt; anyway.<br>&gt;<br>&gt; On Wed, Jun 8, 2016 at 12:22 PM J. Charles M. N. via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; This confused me at the beginning.<br>&gt;&gt;<br>&gt;&gt; But doesn&#39;t Int! In parameter type means the function is awaiting an<br>&gt;&gt; unwrapped value so the user should ensure that it data parameter is<br>&gt;&gt; available, valid, and unwrapped?<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; J. Charles<br>&gt;&gt;<br>&gt;&gt; &gt; Le 8 juin 2016 à 13:30, Spromicky via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Hello, everyone!<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I wanna propose to you to remove force unwrapping in fuction signature<br>&gt;&gt; for swift code. That no sense in clear swift code. If we wanna use some<br>&gt;&gt; optional value as function param, that is not optional, we must unwrap it<br>&gt;&gt; before function call.<br>&gt;&gt; &gt; People who new in swift look at how they old Obj-C code (without<br>&gt;&gt; nullability modifiers) translate in to swift:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Obj-C:<br>&gt;&gt; &gt; - (void)foo:(NSInteger)bar {<br>&gt;&gt; &gt;    //...<br>&gt;&gt; &gt; }<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Swift transaliton:<br>&gt;&gt; &gt; func foo(bar: Int!) {<br>&gt;&gt; &gt;    //...<br>&gt;&gt; &gt; }<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; And think that force unwrapping in signature is good practice. And<br>&gt;&gt; start write functions in clear swift code like this:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; func newFoo(bar: Int!) {<br>&gt;&gt; &gt;    //...<br>&gt;&gt; &gt; }<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; and use it like this:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; let bar: Int? = 1<br>&gt;&gt; &gt; newFoo(bar)<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; And it really work, and they does not think that this can crash in case<br>&gt;&gt; if `bar` will be `nil`.<br>&gt;&gt; &gt; But in clear swift we wanna work with parametrs in function that<br>&gt;&gt; clearly or optional, or not.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; func newFoo(bar: Int) {<br>&gt;&gt; &gt;    //...<br>&gt;&gt; &gt; }<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; or<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; func newFoo(bar: Int?) {<br>&gt;&gt; &gt;    //...<br>&gt;&gt; &gt; }<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; When we write a new function we know what we need in this case and use<br>&gt;&gt; optional params or not.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; So my proposal is remove force unwrapping(`!`) from function<br>&gt;&gt; signatures, cause it have no sense, and that confuse new users.<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt; --<br>&gt; -Saagar Jha<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-- <br>Javier Soto<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/6494f51e/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
