<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Discussion] API Guidelines</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>October 14, 2016 at 07:00:00am</p></header><div class="content"><p>Hi there,<br></p><p>I am really grateful for the API guidelines that were created as part of Swift 3, however, I&#39;m having trouble with distinguishing which part of the method name should be already an argument. To illustrate this, here are two examples:<br></p><p>// On Array<br>public mutating func append(contentsOf newElements: S)<br></p><p>// On Foundation.URL<br>public func appendingPathComponent(_ pathComponent: String) -&gt; URL<br></p><p><br>Is there a particular reason why it&#39;s not<br></p><p>public func appending(pathComponent: String) -&gt; URL<br></p><p>?<br></p><p>In my opinion the entire stdlib and Foundation is full of such discrepancies which make it hard to decide when you name your own methods since there are preceding cases in the language itself (or Foundation) that go both ways.<br></p><p>The same goes for why don&#39;t the replace methods (this is on String) follow the same - when there is append(contentsOf:):<br></p><p>public mutating func replaceSubrange(_ bounds: ClosedRange&lt;String.Index&gt;, with newElements: String)<br></p><p>instead of<br></p><p>public mutating func replace(subrange bounds: ClosedRange&lt;String.Index&gt;, with newElements: String)<br></p><p><br></p><p>I know there was an extensive discussion about this here when the stdlib names were discussed. And given that these would be breaking changes, I don&#39;t necessarily want to start a lengthy discussion about renaming those again - I&#39;m just wondering what are the reasons behind this and what should be the correct naming conventions.<br></p><p>Thanks!<br></p><p>Charlie<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76eb9711d45c1c9a71c0f24004072a22?s=50"></div><header><strong>[Discussion] API Guidelines</strong> from <string>Zach Waldowski</string> &lt;zach at waldowski.me&gt;<p>October 14, 2016 at 07:00:00am</p></header><div class="content"><p>The base name of the function describes its core purpose.<br></p><p>There is no ambiguity instructing an Array to &quot;append&quot; something, but<br>there is context needed: &quot;what are we appending? The contents of the<br>newElements parameter.&quot; But there is ambiguity asking URL to &quot;give me a<br>new URL by appending&quot;. Appending what? Similarly, telling a collection<br>to &quot;replace&quot;. Replace what?<br></p><p>A rule of thumb my team has applied is to put the parameter parens where<br>you would have put `with` in ObjC. This is instructive for your<br>questions as well. &quot;URLByAppendingWithPathComponent&quot; and<br>&quot;replaceWithSubrange&quot; wouldn&#39;t make sense, but &quot;appendWithContentsOf&quot;<br>does.<br></p><p>Cheers!<br>  Zachary Waldowski<br>  zach at waldowski.me<br></p><p>On Thu, Oct 13, 2016, at 10:30 PM, Charlie Monroe via swift-evolution<br>wrote:<br>&gt; Hi there,<br>&gt; <br>&gt; I am really grateful for the API guidelines that were created as part of<br>&gt; Swift 3, however, I&#39;m having trouble with distinguishing which part of<br>&gt; the method name should be already an argument. To illustrate this, here<br>&gt; are two examples:<br>&gt; <br>&gt; // On Array<br>&gt; public mutating func append(contentsOf newElements: S)<br>&gt; <br>&gt; // On Foundation.URL<br>&gt; public func appendingPathComponent(_ pathComponent: String) -&gt; URL<br>&gt; <br>&gt; <br>&gt; Is there a particular reason why it&#39;s not<br>&gt; <br>&gt; public func appending(pathComponent: String) -&gt; URL<br>&gt; <br>&gt; ?<br>&gt; <br>&gt; In my opinion the entire stdlib and Foundation is full of such<br>&gt; discrepancies which make it hard to decide when you name your own methods<br>&gt; since there are preceding cases in the language itself (or Foundation)<br>&gt; that go both ways.<br>&gt; <br>&gt; The same goes for why don&#39;t the replace methods (this is on String)<br>&gt; follow the same - when there is append(contentsOf:):<br>&gt; <br>&gt; public mutating func replaceSubrange(_ bounds: ClosedRange&lt;String.Index&gt;,<br>&gt; with newElements: String)<br>&gt; <br>&gt; instead of<br>&gt; <br>&gt; public mutating func replace(subrange bounds: ClosedRange&lt;String.Index&gt;,<br>&gt; with newElements: String)<br>&gt; <br>&gt; <br>&gt; <br>&gt; I know there was an extensive discussion about this here when the stdlib<br>&gt; names were discussed. And given that these would be breaking changes, I<br>&gt; don&#39;t necessarily want to start a lengthy discussion about renaming those<br>&gt; again - I&#39;m just wondering what are the reasons behind this and what<br>&gt; should be the correct naming conventions.<br>&gt; <br>&gt; Thanks!<br>&gt; <br>&gt; Charlie<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Discussion] API Guidelines</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>October 14, 2016 at 04:00:00pm</p></header><div class="content"><p>I’m still not convinced in some cases.<br></p><p>Take a look at UIViews and its method addSubview.<br></p><p>open func addSubview(_ view: UIView)<br>Personally I’d change or write this function like so:<br></p><p>open func add(subview: UIView)<br>This reduces unnecessary noise _ view for both the implementation and usage.<br></p><p>// Implementation<br>open func add(subview: UIView) {<br>    // `subview` is descriptive and just fine here<br>}<br></p><p>// Usage<br></p><p>self.view.add(subview: someOtherView)<br></p><p><br>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 14. Oktober 2016 um 16:42:06, Zach Waldowski via swift-evolution (swift-evolution at swift.org) schrieb:<br></p><p>The base name of the function describes its core purpose.<br></p><p>There is no ambiguity instructing an Array to &quot;append&quot; something, but<br>there is context needed: &quot;what are we appending? The contents of the<br>newElements parameter.&quot; But there is ambiguity asking URL to &quot;give me a<br>new URL by appending&quot;. Appending what? Similarly, telling a collection<br>to &quot;replace&quot;. Replace what?<br></p><p>A rule of thumb my team has applied is to put the parameter parens where<br>you would have put `with` in ObjC. This is instructive for your<br>questions as well. &quot;URLByAppendingWithPathComponent&quot; and<br>&quot;replaceWithSubrange&quot; wouldn&#39;t make sense, but &quot;appendWithContentsOf&quot;<br>does.<br></p><p>Cheers!<br>  Zachary Waldowski<br>  zach at waldowski.me<br></p><p>On Thu, Oct 13, 2016, at 10:30 PM, Charlie Monroe via swift-evolution<br>wrote:<br>&gt; Hi there,<br>&gt;  <br>&gt; I am really grateful for the API guidelines that were created as part of<br>&gt; Swift 3, however, I&#39;m having trouble with distinguishing which part of<br>&gt; the method name should be already an argument. To illustrate this, here<br>&gt; are two examples:<br>&gt;  <br>&gt; // On Array<br>&gt; public mutating func append(contentsOf newElements: S)<br>&gt;  <br>&gt; // On Foundation.URL<br>&gt; public func appendingPathComponent(_ pathComponent: String) -&gt; URL<br>&gt;  <br>&gt;  <br>&gt; Is there a particular reason why it&#39;s not<br>&gt;  <br>&gt; public func appending(pathComponent: String) -&gt; URL<br>&gt;  <br>&gt; ?<br>&gt;  <br>&gt; In my opinion the entire stdlib and Foundation is full of such<br>&gt; discrepancies which make it hard to decide when you name your own methods<br>&gt; since there are preceding cases in the language itself (or Foundation)<br>&gt; that go both ways.<br>&gt;  <br>&gt; The same goes for why don&#39;t the replace methods (this is on String)<br>&gt; follow the same - when there is append(contentsOf:):<br>&gt;  <br>&gt; public mutating func replaceSubrange(_ bounds: ClosedRange&lt;String.Index&gt;,<br>&gt; with newElements: String)<br>&gt;  <br>&gt; instead of<br>&gt;  <br>&gt; public mutating func replace(subrange bounds: ClosedRange&lt;String.Index&gt;,<br>&gt; with newElements: String)<br>&gt;  <br>&gt;  <br>&gt;  <br>&gt; I know there was an extensive discussion about this here when the stdlib<br>&gt; names were discussed. And given that these would be breaking changes, I<br>&gt; don&#39;t necessarily want to start a lengthy discussion about renaming those<br>&gt; again - I&#39;m just wondering what are the reasons behind this and what<br>&gt; should be the correct naming conventions.<br>&gt;  <br>&gt; Thanks!<br>&gt;  <br>&gt; Charlie<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161014/86d3a35b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b0a8a8751387599c6d98c36808e8916c?s=50"></div><header><strong>[Discussion] API Guidelines</strong> from <string>William Sumner</string> &lt;prestonsumner at me.com&gt;<p>October 14, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Oct 14, 2016, at 8:49 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I’m still not convinced in some cases.<br>&gt; <br>&gt; Take a look at UIViews and its method addSubview.<br>&gt; <br>&gt; open func addSubview(_ view: UIView)<br>&gt; Personally I’d change or write this function like so:<br>&gt; <br>&gt; open func add(subview: UIView)<br>&gt; This reduces unnecessary noise _ view for both the implementation and usage.<br>&gt; <br>&gt; // Implementation<br>&gt; open func add(subview: UIView) {<br>&gt;     // `subview` is descriptive and just fine here<br>&gt; }<br>&gt; <br>&gt; // Usage<br>&gt; <br>&gt; self.view.add(subview: someOtherView)<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br></p><p>This conforms to the following rule from the Argument Labels section of the naming guidelines:<br></p><p>“[I]f the first argument forms part of a grammatical phrase, omit its label, appending any preceding words to the base name, e.g. x.addSubview(y)&quot;<br></p><p>Preston<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161014/e8b53547/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>[Discussion] API Guidelines</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>October 14, 2016 at 09:00:00am</p></header><div class="content"><p>Hi Adrian, Charlie,<br></p><p>One additional thing that we considered when naming methods like this was how central the operation described in the method was to the overall purpose of the type.<br></p><p>For example, the core purpose of an array is to store things. Having functions with a base name of ‘add’ or ‘remove’ makes sense. Also, the array(contentsOf:) is a special case. Array could store other Arrays (Array&lt;Array&lt;T&gt;&gt;), and we needed to disambiguate between appending the stuff in the array vs the array itself.<br></p><p>We decided that this was not the case for URL (although clearly reasonable people could disagree — we made a decision and stuck with it). Therefore: appendingPathComponent instead of appending(pathComponent:).<br></p><p>There is no doubt in my mind that these guidelines leave a lot more flexibility to the API designer than similar guidelines for Objective-C. That is probably best at this point. I think we, as a community, are still evolving the best practices. I hope we can learn new patterns and idioms over time as we write more and more Swift API. The Objective-C guidelines have evolved dramatically from when Objective-C was as young as Swift (think about things like not even declaring a method return type and assuming ‘id’, or extending NSObject for so-called “informal protocols”, or even the relatively recent addition of property syntax).<br></p><p>- Tony<br></p><p>&gt; On Oct 14, 2016, at 7:49 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I’m still not convinced in some cases.<br>&gt; <br>&gt; Take a look at UIViews and its method addSubview.<br>&gt; <br>&gt; open func addSubview(_ view: UIView)<br>&gt; Personally I’d change or write this function like so:<br>&gt; <br>&gt; open func add(subview: UIView)<br>&gt; This reduces unnecessary noise _ view for both the implementation and usage.<br>&gt; <br>&gt; // Implementation<br>&gt; open func add(subview: UIView) {<br>&gt;     // `subview` is descriptive and just fine here<br>&gt; }<br>&gt; <br>&gt; // Usage<br>&gt; <br>&gt; self.view.add(subview: someOtherView)<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt; <br>&gt; Am 14. Oktober 2016 um 16:42:06, Zach Waldowski via swift-evolution (swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;) schrieb:<br>&gt; <br>&gt;&gt; The base name of the function describes its core purpose.<br>&gt;&gt; <br>&gt;&gt; There is no ambiguity instructing an Array to &quot;append&quot; something, but<br>&gt;&gt; there is context needed: &quot;what are we appending? The contents of the<br>&gt;&gt; newElements parameter.&quot; But there is ambiguity asking URL to &quot;give me a<br>&gt;&gt; new URL by appending&quot;. Appending what? Similarly, telling a collection<br>&gt;&gt; to &quot;replace&quot;. Replace what?<br>&gt;&gt; <br>&gt;&gt; A rule of thumb my team has applied is to put the parameter parens where<br>&gt;&gt; you would have put `with` in ObjC. This is instructive for your<br>&gt;&gt; questions as well. &quot;URLByAppendingWithPathComponent&quot; and<br>&gt;&gt; &quot;replaceWithSubrange&quot; wouldn&#39;t make sense, but &quot;appendWithContentsOf&quot;<br>&gt;&gt; does.<br>&gt;&gt; <br>&gt;&gt; Cheers!<br>&gt;&gt;   Zachary Waldowski<br>&gt;&gt;   zach at waldowski.me<br>&gt;&gt; <br>&gt;&gt; On Thu, Oct 13, 2016, at 10:30 PM, Charlie Monroe via swift-evolution<br>&gt;&gt; wrote:<br>&gt;&gt; &gt; Hi there,<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; I am really grateful for the API guidelines that were created as part of<br>&gt;&gt; &gt; Swift 3, however, I&#39;m having trouble with distinguishing which part of<br>&gt;&gt; &gt; the method name should be already an argument. To illustrate this, here<br>&gt;&gt; &gt; are two examples:<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; // On Array<br>&gt;&gt; &gt; public mutating func append(contentsOf newElements: S)<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; // On Foundation.URL<br>&gt;&gt; &gt; public func appendingPathComponent(_ pathComponent: String) -&gt; URL<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; <br>&gt;&gt; &gt; Is there a particular reason why it&#39;s not<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; public func appending(pathComponent: String) -&gt; URL<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; ?<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; In my opinion the entire stdlib and Foundation is full of such<br>&gt;&gt; &gt; discrepancies which make it hard to decide when you name your own methods<br>&gt;&gt; &gt; since there are preceding cases in the language itself (or Foundation)<br>&gt;&gt; &gt; that go both ways.<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; The same goes for why don&#39;t the replace methods (this is on String)<br>&gt;&gt; &gt; follow the same - when there is append(contentsOf:):<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; public mutating func replaceSubrange(_ bounds: ClosedRange&lt;String.Index&gt;,<br>&gt;&gt; &gt; with newElements: String)<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; instead of<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; public mutating func replace(subrange bounds: ClosedRange&lt;String.Index&gt;,<br>&gt;&gt; &gt; with newElements: String)<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; <br>&gt;&gt; &gt; <br>&gt;&gt; &gt; I know there was an extensive discussion about this here when the stdlib<br>&gt;&gt; &gt; names were discussed. And given that these would be breaking changes, I<br>&gt;&gt; &gt; don&#39;t necessarily want to start a lengthy discussion about renaming those<br>&gt;&gt; &gt; again - I&#39;m just wondering what are the reasons behind this and what<br>&gt;&gt; &gt; should be the correct naming conventions.<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; Thanks!<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; Charlie<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161014/9db82281/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
