<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7321934b88ca8da079d7b89926501a9c?s=50"></div><header><strong>Learning OpenGL with Swift</strong> from <string>David Turnbull</string> &lt;dturnbull at gmail.com&gt;<p>February 23, 2016 at 10:00:00am</p></header><div class="content"><p>There&#39;s many tutorials for learning OpenGL with C++, and at least one for<br>learning OpenGL with Objective-C, but I couldn&#39;t find more than a few small<br>blog posts about OpenGL with Swift. So I fixed that for you.<br></p><p>http://swiftgl.org/<br></p><p>The first few tutorials are done. It will to take a very long time to<br>finish the rest. But it&#39;s ready for feedback and I&#39;m going to need some<br>encouragement to continue.<br></p><p>In addition, the SwiftGL libraries have been split apart. While they were<br>always meant to work together, none of them depended on each other.<br>Specifically, this addresses software that uses Apple libraries but also<br>wants to use enhanced syntax of the SwiftGL Loader.<br></p><p>-david  http://swiftgl.org/<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160223/a38fa91a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/11df0828473d6c162b9c8572c37f9146?s=50"></div><header><strong>Learning OpenGL with Swift</strong> from <string>Marco Feltmann</string> &lt;coding at marcofeltmann.de&gt;<p>February 23, 2016 at 10:00:00pm</p></header><div class="content"><p>Hey David,<br></p><p>I really appreciate this idea!<br></p><p>Unfortunately when I try to build the `Hello Window` tutorial Linux<br>tells me the linker couldn&#39;t find -lglfw3 although I installed it<br>properly.<br></p><p>Well, since I&#39;m on Linux I modified the Package.swift and removed the<br>Dependency Adding stuff since I only need the CGLFW3Linux.git<br></p><p>I have no clue where this linking is done so I&#39;m unable to optimize the<br>`3` out of the linking. My distribution does only support GLFW3 and has<br>no support for GLFW2, so maybe they simply renamed it?<br></p><p>If you could point me to the right direction I&#39;d like to dig deeper into<br>your tutorials.<br></p><p>Cheers<br>Marco<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7321934b88ca8da079d7b89926501a9c?s=50"></div><header><strong>Learning OpenGL with Swift</strong> from <string>David Turnbull</string> &lt;dturnbull at gmail.com&gt;<p>February 23, 2016 at 01:00:00pm</p></header><div class="content"><p>Marco,<br></p><p>I test that Ubuntu 14 can build the project. Beyond that I plan to depend<br>on feedback like yours to smooth out Linux.<br></p><p>Check out the modulemap for the Linux GLFW. What you need to fix is likely<br>in there. Honestly, I built it with trial and error.<br></p><p>https://github.com/SwiftGL/CGLFW3Linux/blob/master/module.modulemap<br></p><p>If you get it working, please let me know what Linux you are using and send<br>me the code. (github ticket, email, carrier pigeon, whatever).<br></p><p>I looked for something with less friction than GLFW but came up empty. It&#39;s<br>possible to make a pure Swift replacement, but I don&#39;t have the resources<br>to make that happen any time soon.<br></p><p>-david<br></p><p><br></p><p><br></p><p>On Tue, Feb 23, 2016 at 1:00 PM, Marco Feltmann &lt;coding at marcofeltmann.de&gt;<br>wrote:<br></p><p>&gt; Hey David,<br>&gt;<br>&gt; I really appreciate this idea!<br>&gt;<br>&gt; Unfortunately when I try to build the `Hello Window` tutorial Linux<br>&gt; tells me the linker couldn&#39;t find -lglfw3 although I installed it<br>&gt; properly.<br>&gt;<br>&gt; Well, since I&#39;m on Linux I modified the Package.swift and removed the<br>&gt; Dependency Adding stuff since I only need the CGLFW3Linux.git<br>&gt;<br>&gt; I have no clue where this linking is done so I&#39;m unable to optimize the<br>&gt; `3` out of the linking. My distribution does only support GLFW3 and has<br>&gt; no support for GLFW2, so maybe they simply renamed it?<br>&gt;<br>&gt; If you could point me to the right direction I&#39;d like to dig deeper into<br>&gt; your tutorials.<br>&gt;<br>&gt; Cheers<br>&gt; Marco<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160223/4b53f557/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6186ddb1eb3c1a9a722a87630834d036?s=50"></div><header><strong>Learning OpenGL with Swift</strong> from <string>Luz Violeta</string> &lt;luzvioleta at zoho.com&gt;<p>February 23, 2016 at 09:00:00pm</p></header><div class="content"><p>In my case, I&#39;ve solved it by making a swift build and then editing the <br>recently downloaded file (Packages/CGLFW3Linux-1.0.0/module.modulemap). <br>Changing out the link statement from glfw3 to glfw.<br></p><p>TBH, I think there should be a way to specify fallbacks for a link <br>declaration to tackle these awkward moments where lack of standarization <br>across distros comes to bite at compile time (or even, across release <br>versions). Like, try X and if it doesn&#39;t exist try Y and so on (grabbing <br>whatever matchs first)<br></p><p>Otherwise, it&#39;s gonna be rough using stuff from the swift ecosystem and <br>editing modulemaps and writing instruction for users to do that.<br></p><p>Hugs.<br></p><p>On 02/23/2016 06:00 PM, Marco Feltmann via swift-users wrote:<br>&gt; Hey David,<br>&gt;<br>&gt; I really appreciate this idea!<br>&gt;<br>&gt; Unfortunately when I try to build the `Hello Window` tutorial Linux<br>&gt; tells me the linker couldn&#39;t find -lglfw3 although I installed it<br>&gt; properly.<br>&gt;<br>&gt; Well, since I&#39;m on Linux I modified the Package.swift and removed the<br>&gt; Dependency Adding stuff since I only need the CGLFW3Linux.git<br>&gt;<br>&gt; I have no clue where this linking is done so I&#39;m unable to optimize the<br>&gt; `3` out of the linking. My distribution does only support GLFW3 and has<br>&gt; no support for GLFW2, so maybe they simply renamed it?<br>&gt;<br>&gt; If you could point me to the right direction I&#39;d like to dig deeper into<br>&gt; your tutorials.<br>&gt;<br>&gt; Cheers<br>&gt; Marco<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/11df0828473d6c162b9c8572c37f9146?s=50"></div><header><strong>Learning OpenGL with Swift</strong> from <string>Marco Feltmann</string> &lt;coding at marcofeltmann.de&gt;<p>February 24, 2016 at 10:00:00pm</p></header><div class="content"><p>On Tue, Feb 23, 2016 at 09:03:42PM -0300, Luz Violeta via swift-users wrote:<br>&gt; In my case, I&#39;ve solved it by making a swift build and then editing the<br>&gt; recently downloaded file (Packages/CGLFW3Linux-1.0.0/module.modulemap).<br>&gt; Changing out the link statement from glfw3 to glfw. <br>Perfect, thank you! :)<br>Changed, `swift build --clean; swift build`, works.<br></p><p>Now I&#39;m ready to fly.<br></p><p>&gt; Like, try X and if it doesn&#39;t exist try Y and so on (grabbing<br>&gt; whatever matchs first)<br>I have no clue how to realize that kind of logic.<br>There is a `link` command in the modulemap, but a `link if exists`<br>doesn&#39;t sound like it is implemented now. <br></p><p>&gt; Otherwise, it&#39;s gonna be rough using stuff from the swift ecosystem and<br>&gt; editing modulemaps and writing instruction for users to do that.<br>As long as you point the Swift users to the direction where they can<br>tweak this behaviour this feels fine for me.<br></p><p>But when providing OSS this really is a no-go.<br>At least on Linux this whole ./configure; make; make install; stuff was<br>created to wrestle down these distribution-depending things.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6186ddb1eb3c1a9a722a87630834d036?s=50"></div><header><strong>Learning OpenGL with Swift</strong> from <string>Luz Violeta</string> &lt;luzvioleta at zoho.com&gt;<p>February 25, 2016 at 02:00:00am</p></header><div class="content"><p>&gt;&gt; Like, try X and if it doesn&#39;t exist try Y and so on (grabbing<br>&gt;&gt; whatever matchs first)<br>&gt; I have no clue how to realize that kind of logic.<br>&gt; There is a `link` command in the modulemap, but a `link if exists`<br>&gt; doesn&#39;t sound like it is implemented now.<br></p><p>It&#39;s not implemented yet, but it should. Actually, more than &quot;link if <br>exists&quot; i was thinking of a &quot;link this, preferably ... if it&#39;s not <br>there, here&#39;s a list of alternative names of this library and link <br>whatever is available first off that list&quot;<br></p><p>&gt;&gt; Otherwise, it&#39;s gonna be rough using stuff from the swift ecosystem and<br>&gt;&gt; editing modulemaps and writing instruction for users to do that.<br>&gt; As long as you point the Swift users to the direction where they can<br>&gt; tweak this behaviour this feels fine for me.<br></p><p>Well, demanding that to a developer consuming code or worst, to a final <br>user ... for me, it feels like demanding arcanery or something <br>alpha-looking.<br></p><p>&gt; But when providing OSS this really is a no-go.<br>&gt; At least on Linux this whole ./configure; make; make install; stuff was<br>&gt; created to wrestle down these distribution-depending things.<br></p><p>Well, I&#39;ll differ in considering autotools like a reference or standard <br>when you implement a build system from scratch (which is the case of <br>swift-build). At the end, it all boils down to repeating old and <br>terrible designs, or making something cool (easy to set up, no forced <br>fiddling to initially build and something pretty much distraction-less <br>during development process ... I think a build system should aim for <br>something like that, because we all benefit from something like that :D)<br></p><p>At my work, we&#39;re not married to any particular language and we have <br>space to -judiciously- involve with new tech. Would love that to be the <br>case with swift (I mainly write backend software with rust -which was a <br>recent addition alongside the existing python codebase- and also code <br>that does require it&#39;s share of C interop), but the whole build system <br>story is the biggest deterrent at the moment (for now, swift is only <br>used specifically for iOS development through xcode)<br></p><p>My two cents there,<br>Hugs.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7321934b88ca8da079d7b89926501a9c?s=50"></div><header><strong>Learning OpenGL with Swift</strong> from <string>David Turnbull</string> &lt;dturnbull at gmail.com&gt;<p>February 25, 2016 at 03:00:00pm</p></header><div class="content"><p>On Wed, Feb 24, 2016 at 9:55 PM, Luz Violeta via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; ... the whole build system story is the biggest deterrent at the moment<br>&gt; (for now, swift is only used specifically for iOS development through xcode)<br>&gt;<br></p><p>You should try to get your package manager issues in front of the right<br>people. It&#39;s possible they won&#39;t see it here with the subject line being<br>&quot;OpenGL&quot;.<br></p><p>The snapshots released today fix the bug which was preventing SwiftGL from<br>working with Swift 3.0. I switched the tutorial over to 3.0. Since I&#39;m no<br>longer documenting an old 2.2, it&#39;s now reasonable to use the tutorial as<br>an example when talking about some of the package manager changes you want.<br></p><p>-david<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160225/c65fc767/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7321934b88ca8da079d7b89926501a9c?s=50"></div><header><strong>Learning OpenGL with Swift</strong> from <string>David Turnbull</string> &lt;dturnbull at gmail.com&gt;<p>February 25, 2016 at 11:00:00am</p></header><div class="content"><p>On Wed, Feb 24, 2016 at 1:59 PM, Marco Feltmann via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; On Tue, Feb 23, 2016 at 09:03:42PM -0300, Luz Violeta via swift-users<br>&gt; wrote:<br>&gt; &gt; In my case, I&#39;ve solved it by making a swift build and then editing the<br>&gt; &gt; recently downloaded file (Packages/CGLFW3Linux-1.0.0/module.modulemap).<br>&gt; &gt; Changing out the link statement from glfw3 to glfw.<br>&gt; Perfect, thank you! :)<br>&gt; Changed, `swift build --clean; swift build`, works.<br>&gt;<br>&gt; Now I&#39;m ready to fly.<br>&gt;<br></p><p>Renaming to drop the 3 should be filed as a bug in your distro. To<br>workaround this easier, I created a module with the 3 already removed. It&#39;s<br>documented in the tutorial too.<br></p><p>-david<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160225/50560f3b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/11df0828473d6c162b9c8572c37f9146?s=50"></div><header><strong>Learning OpenGL with Swift</strong> from <string>Marco Feltmann</string> &lt;coding at marcofeltmann.de&gt;<p>February 28, 2016 at 08:00:00pm</p></header><div class="content"><p>On Thu, Feb 25, 2016 at 11:35:26AM -0800, David Turnbull wrote:<br>&gt; On Wed, Feb 24, 2016 at 1:59 PM, Marco Feltmann via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Renaming to drop the 3 should be filed as a bug in your distro. <br></p><p>I don&#39;t think so.<br>IMHO it is the correct way to _not_ label the current version of a library. I&#39;d prefer GLFW whichever version is the current one.<br>When there was a heavy API change from GLFW 2.x to GLFW 3.x the older<br>version still used should be labelled GLFW2 instead of labelling the new<br>one GLFW3. <br>Otherwise noone will ever likely be updating their sources to the<br>current library version.<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ae51ca494b37cc270597830da66f089f?s=50"></div><header><strong>Learning OpenGL with Swift</strong> from <string>Max Howell</string> &lt;max.howell at apple.com&gt;<p>February 26, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; TBH, I think there should be a way to specify fallbacks for a link declaration to tackle these awkward moments where lack of standarization across distros comes to bite at compile time (or even, across release versions). Like, try X and if it doesn&#39;t exist try Y and so on (grabbing whatever matchs first)<br></p><p>We intend to improve this area.<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
