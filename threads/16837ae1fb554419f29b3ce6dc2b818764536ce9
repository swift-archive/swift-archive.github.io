<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4ca02c0ca5c5d6a28bc48eebb3b000c7?s=50"></div><header><strong>Proposal: Allow for/in to take GeneratorType in addition to SequenceType</strong> from <string>Michael Henson</string> &lt;mikehenson at gmail.com&gt;<p>December 13, 2015 at 03:00:00pm</p></header><div class="content"><p>Currently, the construct:<br></p><p>for x in something {}<br></p><p>expects &quot;something&quot; to be a SequenceType. From that variable, the<br>underlying code retrieves a generator by calling something.generate(). The<br>resulting GeneratorType instance is unavailable to calling code.<br></p><p>Unless there is a reason for the language to require a SequenceType, it<br>seems like there are good use cases for accepting a caller-provided<br>GeneratorType, too.<br></p><p>For example, it would allow continuable iterations, or more generally, the<br>results of the loop contruct to maintain state.<br></p><p>struct ExampleGenerator: GeneratorType {<br>   typealias Element = Int<br></p><p>   var current: Int<br>   private var initial: Int<br></p><p>   mutating func next() -&gt; Element? {<br>      guard self.current &lt;= self.initial + 10 else {<br>        return nil<br>      }<br></p><p>      self.current += 1<br></p><p>      return self.current<br>    }<br>}<br></p><p>struct ExampleSequence: SequenceType {<br>    let start: Int<br></p><p>    func generate() -&gt; ExampleGenerator {<br>      return ExampleGenerator(start: self.start)<br>    }<br>}<br></p><p>With the current mechanism:<br></p><p>var seq = ExampleSequence(start: 5)<br>for x in seq {<br>  if (x &gt; 7) {<br>    break<br>  }<br>  print(x)<br>}<br></p><p>result:<br>5<br>6<br>7<br></p><p>for y in seq {<br>  print(y)<br>}<br></p><p>result:<br>5<br>6<br>7<br>8<br>9<br>10<br>... etc<br></p><p><br>If we could pass a Generator:<br></p><p>var gen = ExampleGenerator(start: 5)<br></p><p>for x in gen {<br>  if(x &gt; 7) {<br>    break<br>  }<br>  print(x)<br>}<br></p><p>result:<br>5<br>6<br>7<br></p><p>for y in gen {<br>  print(y)<br>}<br></p><p>result:<br>8<br>9<br>10<br>... etc<br></p><p><br>Given that the provided generator also is a persistent data structure, it<br>could easily be used as the sink for the results of one or multiple for/in<br>loops, such as to aggregate statistics about the iterated items, count the<br>number of iterations, etc.<br></p><p>Are there downsides in the implementation or design that make this a bad<br>idea?<br></p><p>Mike<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/16836ce9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Proposal: Allow for/in to take GeneratorType in addition to SequenceType</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December 13, 2015 at 04:00:00pm</p></header><div class="content"><p>On Sun, Dec 13, 2015 at 3:43 PM, Michael Henson via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Currently, the construct:<br>&gt;<br>&gt; for x in something {}<br>&gt;<br>&gt; expects &quot;something&quot; to be a SequenceType. From that variable, the<br>&gt; underlying code retrieves a generator by calling something.generate(). The<br>&gt; resulting GeneratorType instance is unavailable to calling code.<br>&gt;<br>&gt; Unless there is a reason for the language to require a SequenceType, it<br>&gt; seems like there are good use cases for accepting a caller-provided<br>&gt; GeneratorType, too.<br>&gt;<br></p><p>I support this.  We would need to define what happens when the expression<br>is both a generator and a sequence, but otherwise I don&#39;t see why not.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/ba46b8fe/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Proposal: Allow for/in to take GeneratorType in addition to SequenceType</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>December 13, 2015 at 09:00:00pm</p></header><div class="content"><p>&gt; On Dec 13, 2015, at 4:24 PM, Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Sun, Dec 13, 2015 at 3:43 PM, Michael Henson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Currently, the construct:<br>&gt; <br>&gt; for x in something {}<br>&gt; <br>&gt; expects &quot;something&quot; to be a SequenceType. From that variable, the underlying code retrieves a generator by calling something.generate(). The resulting GeneratorType instance is unavailable to calling code.<br>&gt; <br>&gt; Unless there is a reason for the language to require a SequenceType, it seems like there are good use cases for accepting a caller-provided GeneratorType, too.<br>&gt; <br>&gt; I support this.  We would need to define what happens when the expression is both a generator and a sequence, but otherwise I don&#39;t see why not.<br></p><p>When the language is able to handle recursive protocol requirements, this will become redundant, because GeneratorType will refine SequenceType (with generate returning self).  So, IMO, this isn&#39;t a problem worth solving separately.<br></p><p>-Dave<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/19e320e1/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
