<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[SHORT Review] SE-0133: Rename `flatten()` to `joined()`</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July 24, 2016 at 11:00:00pm</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;SE-0133: Rename `flatten()` to `joined()`&quot; begins now and runs through July 26.  Apologies for the short review cycle, but we’re right up against the end of source breaking changes for Swift 3.  The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0133-rename-flatten-to-joined.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[SHORT Review] SE-0133: Rename `flatten()` to `joined()`</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July 25, 2016 at 01:00:00am</p></header><div class="content"><p>On Mon, Jul 25, 2016 at 1:10 AM, Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0133: Rename `flatten()` to `joined()`&quot; begins now and<br>&gt; runs through July 26.  Apologies for the short review cycle, but we’re<br>&gt; right up against the end of source breaking changes for Swift 3.  The<br>&gt; proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0133-rename-flatten-to-joined.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction of Swift.<br>&gt; When writing your review, here are some questions you might want to answer<br>&gt; in your review:<br>&gt;<br>&gt;         * What is your evaluation of the proposal?<br>&gt;<br></p><p>+1. A sensible simplification of the public API. Moreover, `flatten()` was<br>apparently treated as a term-of-art and doesn&#39;t observe the noun/verb<br>guidelines for non-mutating vs. mutating methods. So `joined()` is the<br>superior choice.<br></p><p><br>&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;<br></p><p>Sure; unnecessary inconsistency in the stdlib APIs are best reduced or<br>eliminated where possible.<br></p><p><br>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br></p><p>Yes.<br></p><p><br>&gt;         * If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;<br></p><p>It reminds me of Python `join`, although in that language the default<br>separator for joining strings is &quot; &quot;. Arguably, a more convenient default<br>for Western languages, but a more universally appropriate default would<br>indeed be &quot;&quot; as proposed.<br></p><p><br>&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br></p><p>A quick reading, but followed the original discussion.<br></p><p><br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160725/07a269d4/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[SHORT Review] SE-0133: Rename `flatten()` to `joined()`</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>July 25, 2016 at 09:00:00am</p></header><div class="content"><p>Shouldn&#39;t the proposal also mention renaming FlattenCollection, FlattenBidirectionalCollection and FlattenSequence to Joined*(Collection|Sequence)? Or are these going to keep their name?<br></p><p>&gt; On Jul 25, 2016, at 8:10 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0133: Rename `flatten()` to `joined()`&quot; begins now and runs through July 26.  Apologies for the short review cycle, but we’re right up against the end of source breaking changes for Swift 3.  The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0133-rename-flatten-to-joined.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[SHORT Review] SE-0133: Rename `flatten()` to `joined()`</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>July 25, 2016 at 01:00:00am</p></header><div class="content"><p>I wasn&#39;t explicit about that in the proposal, but I was intending that<br>these should be renamed too. There&#39;s a minor snag: JoinedSequence already<br>exists. I haven&#39;t taken a close look at both implementations yet, but it&#39;s<br>possible we could just combine them.<br></p><p>On Mon, Jul 25, 2016 at 12:46 AM, Charlie Monroe via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Shouldn&#39;t the proposal also mention renaming FlattenCollection,<br>&gt; FlattenBidirectionalCollection and FlattenSequence to<br>&gt; Joined*(Collection|Sequence)? Or are these going to keep their name?<br>&gt;<br>&gt; &gt; On Jul 25, 2016, at 8:10 AM, Chris Lattner via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Hello Swift community,<br>&gt; &gt;<br>&gt; &gt; The review of &quot;SE-0133: Rename `flatten()` to `joined()`&quot; begins now and<br>&gt; runs through July 26.  Apologies for the short review cycle, but we’re<br>&gt; right up against the end of source breaking changes for Swift 3.  The<br>&gt; proposal is available here:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0133-rename-flatten-to-joined.md<br>&gt; &gt;<br>&gt; &gt; Reviews are an important part of the Swift evolution process. All<br>&gt; reviews should be sent to the swift-evolution mailing list at<br>&gt; &gt;<br>&gt; &gt;       https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt; &gt;<br>&gt; &gt; What goes into a review?<br>&gt; &gt;<br>&gt; &gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction of Swift.<br>&gt; When writing your review, here are some questions you might want to answer<br>&gt; in your review:<br>&gt; &gt;<br>&gt; &gt;       * What is your evaluation of the proposal?<br>&gt; &gt;       * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt; &gt;       * Does this proposal fit well with the feel and direction of Swift?<br>&gt; &gt;       * If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt; &gt;       * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt; &gt;<br>&gt; &gt; More information about the Swift evolution process is available at<br>&gt; &gt;<br>&gt; &gt;       https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; &gt;<br>&gt; &gt; Thank you,<br>&gt; &gt;<br>&gt; &gt; -Chris Lattner<br>&gt; &gt; Review Manager<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160725/0b38a99b/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e9b374b9587bd8da1a1a027c8716ac0d?s=50"></div><header><strong>[SHORT Review] SE-0133: Rename `flatten()` to `joined()`</strong> from <string>Rod Brown</string> &lt;rodney.brown6 at icloud.com&gt;<p>July 25, 2016 at 09:00:00pm</p></header><div class="content"><p>* What is your evaluation of the proposal?<br>+1. It&#39;s consistent with the new language guidelines, and though &#39;flatten&#39; seemed a term-of-art there are multiple arguments here that would clear up things, like the string combination.<br></p><p>   * Is the problem being addressed significant enough to warrant a change to Swift?<br>Yes.<br></p><p>   * Does this proposal fit well with the feel and direction of Swift?<br>Yes. It is consistent with the direction of things, and streamlines APIs.<br></p><p>   * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>N/A<br></p><p>   * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>A quick reading.<br></p><p>&gt; On 25 Jul. 2016, at 4:10 pm, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;    * What is your evaluation of the proposal?<br>&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;    * Does this proposal fit well with the feel and direction of Swift?<br>&gt;    * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e0a5152b275c43b493a94b5a6a868905?s=50"></div><header><strong>[SHORT Review] SE-0133: Rename `flatten()` to `joined()`</strong> from <string>Pyry Jahkola</string> &lt;pyry.jahkola at iki.fi&gt;<p>July 25, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On 25 Jul 2016, at 09:10, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The review of &quot;SE-0133: Rename `flatten()` to `joined()`&quot; begins now and runs through July 26.  Apologies for the short review cycle, but we’re right up against the end of source breaking changes for Swift 3.  The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0133-rename-flatten-to-joined.md<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>+1, this makes sense. The functions are very closely related, and while we have &quot;flatten&quot; in `flatMap`, is isn&#39;t unprecedented to call the joining operation `join` instead of `flatten`.<br></p><p>Flatten also somewhat suffers from the expectation that it would flatten arbitrary depths of nestings down to just one. (That would be absurd in Swift&#39;s type system, but is precedented in e.g. Clojure &lt;http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/flatten&gt;.) The word &quot;join&quot; instead sounds like a more 1-dimensional operation, and thus decreases the minor surprise factor.<br></p><p>It&#39;s also nice that `.joined(separator:)` can be simplified down to `.joined()` when the default separator is wanted. And I&#39;d say the empty collection is an obvious choice for default in here.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes, it makes the function easier to find.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Yes. E.g. Haskell calls it `join` &lt;https://hackage.haskell.org/package/base-4.9.0.0/docs/Control-Monad.html#v:join&gt;.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick reading.<br></p><p>— Pyry<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160725/7418b306/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[SHORT Review] SE-0133: Rename `flatten()` to `joined()`</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>July 25, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>+1 This makes total sense. I was going to voice my disagreement until I saw that I did not understand what the APIs did because of their names :D The renaming makes things much clearer.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Even if some languages have flatten, it does seem like a special case of joined.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick read.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>[SHORT Review] SE-0133: Rename `flatten()` to `joined()`</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>July 25, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; On Jul 24, 2016, at 11:10 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0133: Rename `flatten()` to `joined()`&quot; begins now and runs through July 26.  Apologies for the short review cycle, but we’re right up against the end of source breaking changes for Swift 3.  The proposal is available here:<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/proposals/0133-rename-flatten-to-joined.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt;    https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt;    * What is your evaluation of the proposal?<br>-1<br>&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>I don&#39;t thinks so. <br></p><p>&gt;    * Does this proposal fit well with the feel and direction of Swift?<br></p><p>I think we would loose readability. I appreciate having flatten() specially when I have to combine it with joined().<br></p><p>This to me would be unfortunate when reading:<br>[[&quot;hey&quot;], [&quot;what&quot;]].joined().joined()<br></p><p><br>&gt;    * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Participated in thread. <br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c031541ed3d92869414857dfef853de?s=50"></div><header><strong>[SHORT Review] SE-0133: Rename `flatten()` to `joined()`</strong> from <string>Yuta Koshizawa</string> &lt;koher at koherent.org&gt;<p>July 25, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; What is your evaluation of the proposal?<br></p><p>-1<br></p><p>- Certainly `flatten` and `joined` work similarly. I think, however,<br>the concepts behind them are different. When I use `flatten`, I want<br>to make nested monads flat. When I use `joined`, I want to concatenate<br>sequences, mainly `String`s, with a separator. So it is clearer for me<br>that `flatten` is separated from `joined`.<br>- `flatMap` means `map` + `flatten`. I feel `flatMap` with `joined`<br>does not make sense.<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>No. It is not a problem for me as described above.<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br></p><p>I think proposed `joined` itself fits with the feel of Swift but it is<br>not the direction of Swift. It can cause problems to unite things<br>which just look similar ignoring the concepts behind them.<br></p><p>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Kotlin has `flatten` and `flatMap`. Although Haskell has `join` as<br>`flatten`, it&#39;s `flatMap` is named `&gt;&gt;=` (bind).<br></p><p>I don&#39;t know any languages which have a combination of `joined` and<br>`flatMap`. I feel it is strange.<br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>A quick reading the thread.<br></p><p>-- Yuta Koshizawa<br></p><p>2016-07-25 15:10 GMT+09:00 Chris Lattner via swift-evolution<br>&lt;swift-evolution at swift.org&gt;:<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0133: Rename `flatten()` to `joined()`&quot; begins now and runs through July 26.  Apologies for the short review cycle, but we’re right up against the end of source breaking changes for Swift 3.  The proposal is available here:<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/proposals/0133-rename-flatten-to-joined.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;<br>&gt;         * What is your evaluation of the proposal?<br>&gt;         * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;         * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;         * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c72bd3ba434ad651a5d8d3d79f2d4c49?s=50"></div><header><strong>[swift-evolution-announce] [SHORT Review] SE-0133: Rename `flatten()` to `joined()`</strong> from <string>Scott James Remnant</string> &lt;scott at netsplit.com&gt;<p>July 25, 2016 at 09:00:00am</p></header><div class="content"><p>+1<br></p><p>Simple obvious improvement.<br></p><p>Scott<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f6b7154fd1d6a470d0b521a2e484bffc?s=50"></div><header><strong>[SHORT Review] SE-0133: Rename `flatten()` to `joined()`</strong> from <string>Daniel Duan</string> &lt;daniel at duan.org&gt;<p>July 25, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jul 24, 2016, at 11:10 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>-1. I find the motivation section troubling. It’s simply an assertion that this “should” happen. From reading the rest of the proposed text as well as others reviews in support, I get the impression that combining flatten and joined results in an API that’s more “pleasing” to some because they do similar things.<br></p><p>IMO, the fact that they are similar is why we should *not* give them the same name. In summary, we would be trading 2 simpler APIs to a complex one. I don’t believe that’s a goal for Swift.<br></p><p>Both methods returns a corresponding Sequence, FlattenSequence and JoinedSequence. Creating a FlattenSequence is always lazy and has O(1) complexity, iterating over it is also a simple and efficient process. JoinedSequence on the other hand, has O(length_of_separator) complexity at init, and involves additional state juggling at iteration. Yes, if the separator is skipped, we could make the new `joined` behave exactly like `flatten`, and put its merits in the documentation, and warn them about the complexity difference, and explain whether/how it’s different to provide “” and nil when calling this on a string…<br></p><p>Hopefully, you can see why I’d rather give user `flatten` when that’s all they are looking for.  <br></p><p><br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>No.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>Maybe. Less sometimes is good. But in this case it incurs a cost.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>flatten is a well understood and commonly used operation in many PLs.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>read the proposal and posts on this list.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160725/b6b4365b/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/15ed660cd9d971062f9dd5084932a698?s=50"></div><header><strong>[SHORT Review] SE-0133: Rename `flatten()` to `joined()`</strong> from <string>David Rönnqvist</string> &lt;david.ronnqvist at gmail.com&gt;<p>July 25, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt;    * What is your evaluation of the proposal?<br></p><p>-1. I think that there might be something to this idea, but am against the proposal in its current form for the same reasons that have already been stated: flatten has a broader use than just joining sequences/collections, and flatten as a name is strongly related to flatMap.<br></p><p>Not merging &quot;flatten&quot; and &quot;joined&quot; but still adding the default arguments would make the similarities between the two even more confusing. <br></p><p>The name of the merged function (if any) needs more consideration, taking into account it&#39;s broader context and future use.<br></p><p>&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Not sure.<br></p><p>&gt;    * Does this proposal fit well with the feel and direction of Swift?<br></p><p>No. In its current form it&#39;s almost an oversimplification.<br></p><p>&gt;    * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Haskell calls the general m (m a) -&gt; m a function for &quot;join&quot;, but also has a specialized [[a]] -&gt; [a] function called &quot;concat&quot;. (The function corresponding to &quot;flatMap&quot; is called &quot;bind&quot; in Haskell (although used as an operator), so since neither is called flatten or flatMap it doesn&#39;t have the confusion where one of them would be named so).<br></p><p>&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Read the proposal.  <br></p><p>- David<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160725/f4dcd2f5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[SHORT Review] SE-0133: Rename `flatten()` to `joined()`</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>July 25, 2016 at 02:00:00pm</p></header><div class="content"><p>On Mon, Jul 25, 2016 at 2:09 PM, David Rönnqvist &lt;swift-evolution at swift.org&gt;<br>wrote:<br>&gt;<br>&gt; Haskell calls the general *m (m a) -&gt; m a* function for &quot;join&quot;, but also<br>&gt; has a specialized *[[a]] -&gt; [a]* function called &quot;concat&quot;. (The function<br>&gt; corresponding to &quot;flatMap&quot; is called &quot;bind&quot; in Haskell (although used as an<br>&gt; operator), so since neither is called flatten or flatMap it doesn&#39;t have<br>&gt; the confusion where one of them would be named so).<br>&gt;<br></p><p>There&#39;s also mapMaybe<br>&lt;http://hackage.haskell.org/package/base-4.9.0.0/docs/Data-Maybe.html#v:mapMaybe&gt;<br>and concatMap<br>&lt;http://hackage.haskell.org/package/base-4.9.0.0/docs/Prelude.html#v:concatMap&gt;<br>and<br>mapM<br>&lt;http://hackage.haskell.org/package/base-4.9.0.0/docs/Prelude.html#v:mapM&gt; and<br>probably others. &quot;concat&quot; is just &quot;concatMap id&quot;. Similarly, concatMap can<br>be seen as equivalent to bind with its arguments reversed, &quot;flip (&gt;&gt;=)&quot;. I<br>personally find the plethora of similar functions confusing, but I&#39;m not<br>totally fluent in Haskell&#39;s standard libraries.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160725/332393ad/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
