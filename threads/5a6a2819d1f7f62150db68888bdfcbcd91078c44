<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dbefca1948defb75c917225e62d321a5?s=50"></div><header><strong>[Proposal] Add keyword &quot;by&quot; as syntactic sugar to streamline For-In-loop</strong> from <string>Hans Huck</string> &lt;gutgedacht at gmx.de&gt;<p>April 13, 2016 at 04:00:00pm</p></header><div class="content"><p>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160413/5a6a8c44/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Proposal] Add keyword &quot;by&quot; as syntactic sugar to streamline For-In-loop</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>April 13, 2016 at 09:00:00am</p></header><div class="content"><p>You may want to take a peek here: https://gist.github.com/erica/a51a981ee0352235204692affa959307<br></p><p>-- E<br></p><p>&gt; On Apr 13, 2016, at 8:52 AM, Hans Huck via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Rationale:<br>&gt;  <br>&gt; Swift&#39;s For-In-loop is fine, as long as you don&#39;t need an iteration step size other than 1/-1, in which case it becomes unexpectedly inconsistent and unwieldy.<br>&gt;  <br>&gt; for i in 1...10<br>&gt; for i in reverse(10...1)<br>&gt; for i in stride(from:1, through:10, by:3)<br>&gt; or even<br>&gt; for i in 1.stride(through:10, by:3)<br>&gt;  <br>&gt; The above sequence is not only confusing for teaching purposes/beginners (first lesson: protocols. really?), but also unnecessarily bulky for everyday use. It&#39;s a For-loop, one of the most basic and frequently used structures in any language -- please let&#39;s make it pithy.<br>&gt;  <br>&gt; <br>&gt; Comparison:<br>&gt;  <br>&gt; Currently, even the C-style For-loop we are just about to get rid of could be argued to be more concise and consistent, but significantly more so are the likes of<br>&gt;  <br>&gt; # Python<br>&gt; for i in range(1, 10, 3):<br>&gt;  <br>&gt; -- Lua<br>&gt; for i = 1, 10, 3<br>&gt;  <br>&gt; &#39; Basic<br>&gt; for i = 1 to 10 step 3<br>&gt;  <br>&gt; (* Modula-2 *)<br>&gt; for i := 1 to 10 by 3<br>&gt;  <br>&gt; // Chapel<br>&gt; for i in 1..10 by 3<br>&gt;  <br>&gt; or any other remotely relevant non-C-style language that allows For-loops with an altered step size.<br>&gt;  <br>&gt; While there are other issues like having to use reverse(1...10) instead of simply 10...1, (which compiles, but doesn&#39;t run, even when using literals -- why?) none of it goes against the grain as much as being forced to type out stride(boiboiboilerplate) for a simple iteration.<br>&gt;  <br>&gt; <br>&gt; Suggestion(s):<br>&gt;  <br>&gt; A) Add keyword &quot;by&quot; as syntactic sugar, used as in Modula/Chapel (and tip our hat to Algol 68):<br>&gt;  <br>&gt; // Swift<br>&gt; for i in 1...10 by 3<br>&gt; for i in reverse(1...10) by -3<br>&gt;  <br>&gt; or even better yet (if feasible):<br>&gt;  <br>&gt; B)<br>&gt; for i in 1...10 by 3<br>&gt; for i in 10...1 by -3<br>&gt; <br>&gt; Please comment, and thanks everyone for reading.<br>&gt;  <br>&gt; -- Hans<br>&gt;  <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160413/f79d6406/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dbefca1948defb75c917225e62d321a5?s=50"></div><header><strong>[Proposal] Add keyword &quot;by&quot; as syntactic sugar to streamline For-In-loop</strong> from <string>Hans Huck</string> &lt;gutgedacht at gmx.de&gt;<p>April 14, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; You may want to take a peek here: https://gist.github.com/erica/a51a981ee0352235204692affa959307<br>&gt;  <br>&gt; -- E<br>&gt;<br></p><p>Thanks for the link, Erica, very informative. The striding(by:) method combined with the (as of yet) non-canonical range types looks great; it also tackles half the problem, since it makes the use of reverse() no longer required in For-loops.<br></p><p>However, my main point remains unresolved, because<br></p><p>for i in (1...10).striding(by: -3)<br></p><p>is simply not as concise, readable, intuitive or elegant as<br></p><p>for i in 1...10 by -3<br></p><p>The &quot;by&quot; keyword is specifically meant to be syntactic sugar for the For-In-loop, and, as Vladimir pointed out, can easily be mapped onto the new striding() construct internally.<br></p><p>-- Hans<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Proposal] Add keyword &quot;by&quot; as syntactic sugar to streamline For-In-loop</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 13, 2016 at 07:00:00pm</p></header><div class="content"><p>as @Erica just noted, we probably will have this in Swift3 :<br></p><p>for i in (1...10).striding(by: 3) {..}<br>for i in (1...10).striding(by: -3) {..}<br></p><p>But.. compare how the next is more clear and nice looking, has less noise, <br>how faster this will be typed.. :<br></p><p>for i in 1...10 by 3 {...}<br>for i in 1...10 by -3 {...}<br></p><p>just beautiful :-)<br>My opinion: this .striding is about Range type. Range type is used in many <br>places, not just in for-in loop. It is important to have handy and clear <br>methods for Range. But. If we are talking about loop - why(why?) can&#39;t we <br>have such a great syntax for such a common loop task? It is explicit, it <br>can generate the same (1...10).striding(by: 3) code internally.<br>IMO I&#39;d love to have such syntax in Swift for for-in loop<br></p><p>On 13.04.2016 17:52, Hans Huck via swift-evolution wrote:<br>&gt; Rationale:<br>&gt; Swift&#39;s For-In-loop is fine, as long as you don&#39;t need an iteration step<br>&gt; size other than 1/-1, in which case it becomes unexpectedly inconsistent<br>&gt; and unwieldy.<br>&gt; for i in 1...10<br>&gt; for i in reverse(10...1)<br>&gt; for i in stride(from:1, through:10, by:3)<br>&gt; or even<br>&gt; for i in 1.stride(through:10, by:3)<br>&gt; The above sequence is not only confusing for teaching purposes/beginners<br>&gt; (first lesson: protocols. really?), but also unnecessarily bulky for<br>&gt; everyday use. It&#39;s a For-loop, one of the most basic and frequently used<br>&gt; structures in any language -- please let&#39;s make it pithy.<br>&gt;<br>&gt; Comparison:<br>&gt; Currently, even the C-style For-loop we are just about to get rid of could<br>&gt; be argued to be more concise and consistent, but significantly more so are<br>&gt; the likes of<br>&gt; # Python<br>&gt; for i in range(1, 10, 3):<br>&gt; -- Lua<br>&gt; for i = 1, 10, 3<br>&gt; &#39; Basic<br>&gt; for i = 1 to 10 step 3<br>&gt; (* Modula-2 *)<br>&gt; for i := 1 to 10 by 3<br>&gt; // Chapel<br>&gt; for i in 1..10 by 3<br>&gt; or any other remotely relevant non-C-style language that allows For-loops<br>&gt; with an altered step size.<br>&gt; While there are other issues like having to use reverse(1...10) instead of<br>&gt; simply 10...1, (which compiles, but doesn&#39;t run, even when using literals<br>&gt; -- why?) none of it goes against the grain as much as being forced to type<br>&gt; out stride(boiboiboilerplate) for a simple iteration.<br>&gt;<br>&gt; Suggestion(s):<br>&gt; A) Add keyword &quot;by&quot; as syntactic sugar, used as in Modula/Chapel (and tip<br>&gt; our hat to Algol 68):<br>&gt; // Swift<br>&gt; for i in 1...10 by 3<br>&gt; for i in reverse(1...10) by -3<br>&gt; or even better yet (if feasible):<br>&gt; B)<br>&gt; for i in 1...10 by 3<br>&gt; for i in 10...1 by -3<br>&gt;<br>&gt; Please comment, and thanks everyone for reading.<br>&gt; -- Hans<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
