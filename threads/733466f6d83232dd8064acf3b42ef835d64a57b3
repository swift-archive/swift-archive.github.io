<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/44b9c3e92a40313850fdbc2cb0abdef7?s=50"></div><header><strong>Two Obj-C visible functions no longer overload?</strong> from <string>Jon Shier</string> &lt;jon at jonshier.com&gt;<p>August  5, 2016 at 05:00:00pm</p></header><div class="content"><p>Swifters:<br>	I’m attempting to update some library code to beta 4 and I’ve run into something that’s either a bug or a deliberate change. In a class that’s a Foundation.Operation subclass, there are two finish() functions:<br></p><p>final func finish(_ receivedErrors: [Error] = []) {<br>    _finish(receivedErrors, fromCancel: false)<br>}<br></p><p>/// Convenience method to simplify finishing when there is only one error.<br>final func finish(_ receivedError: Error?) {<br>    finish(receivedError.map { [$0]} ?? [])<br>}<br></p><p>Prior to beta 4 these functions lived side by side quite happily. In beta 4, however, their existence produces this error:<br></p><p>method &#39;finish&#39; with Objective-C selector &#39;finish:&#39; conflicts with previous declaration with the same Objective-C selector<br></p><p>Now, if I mark one of the functions @nonobjc, it compiles. So is this a bug or change in behavior?<br></p><p><br></p><p>Jon Shier<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160805/733457b3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2bc666e29724cd3bdf46b6cbbe4a07bb?s=50"></div><header><strong>Two Obj-C visible functions no longer overload?</strong> from <string>Quinn &quot;The Eskimo!&quot;</string> &lt;eskimo1 at apple.com&gt;<p>August  8, 2016 at 11:00:00am</p></header><div class="content"><p>On 5 Aug 2016, at 22:57, Jon Shier via swift-users &lt;swift-users at swift.org&gt; wrote:<br></p><p>&gt; Now, if I mark one of the functions @nonobjc, it compiles. So is this a bug or change in behavior?<br></p><p>NSOperation has a property with `-finished:` as the setter and `-isFinished` as the getter.  It’s not uncommon for method names used by an operation’s author to collide with these, depending on exactly how the importing is importing those methods, how the overlays are set up, and so on.<br></p><p>IMO the best way to fix your specific issue is to adopt Swift 3 naming for your methods:<br></p><p>    final func finish(receivedErrors: [Error])    <br>    final func finish(receivedError: Error?)<br></p><p>which lifts you out of the ‘finish’ space entirely.<br></p><p>Share and Enjoy<br>--<br>Quinn &quot;The Eskimo!&quot;                    &lt;http://www.apple.com/developer/&gt;<br>Apple Developer Relations, Developer Technical Support, Core OS/Hardware<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Two Obj-C visible functions no longer overload?</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>August  8, 2016 at 02:00:00pm</p></header><div class="content"><p>I would definitely expect these two to conflict, so if they previously compiled happily I would guess that’s a bug we fixed. The most likely possibility is that we didn’t allow making arrays of errors and now we do.<br></p><p>Jordan<br></p><p><br>&gt; On Aug 5, 2016, at 14:57, Jon Shier via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Swifters:<br>&gt; 	I’m attempting to update some library code to beta 4 and I’ve run into something that’s either a bug or a deliberate change. In a class that’s a Foundation.Operation subclass, there are two finish() functions:<br>&gt; <br>&gt; final func finish(_ receivedErrors: [Error] = []) {<br>&gt;     _finish(receivedErrors, fromCancel: false)<br>&gt; }<br>&gt; <br>&gt; /// Convenience method to simplify finishing when there is only one error.<br>&gt; final func finish(_ receivedError: Error?) {<br>&gt;     finish(receivedError.map { [$0]} ?? [])<br>&gt; }<br>&gt; <br>&gt; Prior to beta 4 these functions lived side by side quite happily. In beta 4, however, their existence produces this error:<br>&gt; <br>&gt; method &#39;finish&#39; with Objective-C selector &#39;finish:&#39; conflicts with previous declaration with the same Objective-C selector<br>&gt; <br>&gt; Now, if I mark one of the functions @nonobjc, it compiles. So is this a bug or change in behavior?<br>&gt; <br>&gt; <br>&gt; <br>&gt; Jon Shier<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160808/60456e1b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/44b9c3e92a40313850fdbc2cb0abdef7?s=50"></div><header><strong>Two Obj-C visible functions no longer overload?</strong> from <string>Jon Shier</string> &lt;jon at jonshier.com&gt;<p>August  8, 2016 at 07:00:00pm</p></header><div class="content"><p>Jordan:<br>	Could you expand on allowing making arrays of errors? AFAIK, making arrays of ErrorProtocol/ErrorType/Error has always been possible. And somewhat coincidentally I ran into a runtime issue with the same library, fixed in the latest Swift trunk package, that would result in a crash when attempting to access an array of Errors through an intermediate derived property, but only in Objective-C derived classes. Perhaps that’s related?<br>	In any event, if we wished to maintain Objective-C visibility here, I would expect adding different external labels to fix the issue, right?<br></p><p><br>Jon<br></p><p>&gt; On Aug 8, 2016, at 5:04 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; I would definitely expect these two to conflict, so if they previously compiled happily I would guess that’s a bug we fixed. The most likely possibility is that we didn’t allow making arrays of errors and now we do.<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; <br>&gt;&gt; On Aug 5, 2016, at 14:57, Jon Shier via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Swifters:<br>&gt;&gt; 	I’m attempting to update some library code to beta 4 and I’ve run into something that’s either a bug or a deliberate change. In a class that’s a Foundation.Operation subclass, there are two finish() functions:<br>&gt;&gt; <br>&gt;&gt; final func finish(_ receivedErrors: [Error] = []) {<br>&gt;&gt;     _finish(receivedErrors, fromCancel: false)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; /// Convenience method to simplify finishing when there is only one error.<br>&gt;&gt; final func finish(_ receivedError: Error?) {<br>&gt;&gt;     finish(receivedError.map { [$0]} ?? [])<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Prior to beta 4 these functions lived side by side quite happily. In beta 4, however, their existence produces this error:<br>&gt;&gt; <br>&gt;&gt; method &#39;finish&#39; with Objective-C selector &#39;finish:&#39; conflicts with previous declaration with the same Objective-C selector<br>&gt;&gt; <br>&gt;&gt; Now, if I mark one of the functions @nonobjc, it compiles. So is this a bug or change in behavior?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Jon Shier<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160808/e15defa1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Two Obj-C visible functions no longer overload?</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>August  9, 2016 at 09:00:00am</p></header><div class="content"><p>It’s always been possing to make arrays of Error, but exposing those arrays back to Objective-C may or may not have worked correctly (as you noticed).<br></p><p>And yes, your solutions are either adding different labels, or using the ‘objc’ attribute to explicitly specify a selector for one or the other.<br></p><p>Jordan<br></p><p><br>&gt; On Aug 8, 2016, at 16:35, Jon Shier &lt;jon at jonshier.com&gt; wrote:<br>&gt; <br>&gt; Jordan:<br>&gt; 	Could you expand on allowing making arrays of errors? AFAIK, making arrays of ErrorProtocol/ErrorType/Error has always been possible. And somewhat coincidentally I ran into a runtime issue with the same library, fixed in the latest Swift trunk package, that would result in a crash when attempting to access an array of Errors through an intermediate derived property, but only in Objective-C derived classes. Perhaps that’s related?<br>&gt; 	In any event, if we wished to maintain Objective-C visibility here, I would expect adding different external labels to fix the issue, right?<br>&gt; <br>&gt; <br>&gt; Jon<br>&gt; <br>&gt;&gt; On Aug 8, 2016, at 5:04 PM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I would definitely expect these two to conflict, so if they previously compiled happily I would guess that’s a bug we fixed. The most likely possibility is that we didn’t allow making arrays of errors and now we do.<br>&gt;&gt; <br>&gt;&gt; Jordan<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Aug 5, 2016, at 14:57, Jon Shier via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Swifters:<br>&gt;&gt;&gt; 	I’m attempting to update some library code to beta 4 and I’ve run into something that’s either a bug or a deliberate change. In a class that’s a Foundation.Operation subclass, there are two finish() functions:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; final func finish(_ receivedErrors: [Error] = []) {<br>&gt;&gt;&gt;     _finish(receivedErrors, fromCancel: false)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; /// Convenience method to simplify finishing when there is only one error.<br>&gt;&gt;&gt; final func finish(_ receivedError: Error?) {<br>&gt;&gt;&gt;     finish(receivedError.map { [$0]} ?? [])<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Prior to beta 4 these functions lived side by side quite happily. In beta 4, however, their existence produces this error:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; method &#39;finish&#39; with Objective-C selector &#39;finish:&#39; conflicts with previous declaration with the same Objective-C selector<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Now, if I mark one of the functions @nonobjc, it compiles. So is this a bug or change in behavior?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jon Shier<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160809/95b3e8d3/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
