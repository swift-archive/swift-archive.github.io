<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>API Guidelines Update</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 19, 2016 at 10:00:00am</p></header><div class="content"><p>on Thu Feb 18 2016, Charles Kissinger &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Feb 18, 2016, at 4:30 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Hi again Charles,<br>&gt;&gt; <br>&gt;&gt; I&#39;ve been thinking about this response and I realized it might have left<br>&gt;&gt; you feeling that you hadn&#39;t been heard.  If that&#39;s the case I apologize,<br>&gt;&gt; and ask that you try again to make your point.  I *think* I understood<br>&gt;&gt; you, but of course it&#39;s impossible to be sure.<br>&gt;<br>&gt; Hi Dave,<br>&gt;<br>&gt; The only motivation for my post was that I thought the discussion<br>&gt; around “-ing” method names had gotten complex and somewhat<br>&gt; contentious, and it seemed like no one had successfully, succinctly<br>&gt; communicated the reason for the unease some of us have with those<br>&gt; names.<br>&gt;<br>&gt; I don’t think I succeeded any better than anyone else, but in<br>&gt; retrospect, there really isn’t any value in continuing to argue the<br>&gt; merits unless someone can suggest something better. (Which I<br>&gt; can’t. :-))<br></p><p>Well, I&#39;d still like to understand the actual problem.  Leaving aside<br>the whole “Set mess,” do you see a problem with guidelines that lead to<br>pairs like:<br></p><p>    x.trim(.WhitespaceAndNewlines)<br>    y = z.trimming(.WhitespaceAndNewlines)<br></p><p>? Are they hard to read?  Is it hard to arrive at these names, somehow?<br>Are the guidelines simply not clear enough about the procedure for<br>producing names mutating/non-mutating pairs?  Is it too easy to confuse<br>that part of the guidelines with the general direction regarding methods<br>with/without side-effects?<br></p><p>&gt; The fact that this one issue is the only one that anybody seems to<br>&gt; have any remaining complaints about has to be a very good sign.  I<br>&gt; think those of us on the outside do tend to forget that there has been<br>&gt; much sacred cow slaughtering and other mayhem required to get to this<br>&gt; point. :-)<br>&gt;<br>&gt; —CK<br>&gt;<br>&gt; P.S. And I cheerfully accept some mockery regarding the choices in my<br>&gt; own personal “API guidelines”, <br></p><p>Not at all.  I just think it&#39;s really sad that we&#39;ve pushed you into<br>using such a verbose and cumbersome notation for things that should be<br>the simplest: non-mutating transformations.<br></p><p>&gt; I’ll admit that some of my opinions about common practice in object<br>&gt; oriented programming, and the entire OO paradigm itself, are not<br>&gt; mainstream.<br></p><p>Join the club.  I remember someone gave a pretty cool talk at WWDC about<br>how OOP wasn&#39;t the be-all and end-all. ;-)<br></p><p>&gt;&gt; on Thu Feb 18 2016, Dave Abrahams &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; on Thu Feb 18 2016, Charles Kissinger &lt;crk-AT-akkyra.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’m not arguing the importance of this objection, just that I<br>&gt;&gt;&gt;&gt; understand it and think it’s valid.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Though “ing” is a relatively uncommon usage, when used as<br>&gt;&gt;&gt; prescribed IMO it reads pretty naturally, and is a good match for<br>&gt;&gt;&gt; some important criteria:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * it associates mutating and non-mutating forms<br>&gt;&gt;&gt; * it&#39;s a syntactic match for method invocation, with the receiver on the<br>&gt;&gt;&gt;  left<br>&gt;&gt;&gt; * it preserves “fluency,” making code “read like English”<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If you have better ideas for how to satisfy these criteria, I&#39;d be happy<br>&gt;&gt;&gt; to hear them.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We could debate the value of fluency in APIs, but I&#39;d like to point out<br>&gt;&gt;&gt; two things:<br>&gt;&gt; <br>&gt;&gt; or three.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1. This API guidelines and renaming effort skewers many heretofore<br>&gt;&gt;&gt;   sacred cows, which has been incredibly difficult to achieve<br>&gt;&gt;&gt;   politically.  A year ago, the idea that we would ever apply “omit<br>&gt;&gt;&gt;   needless words” to Cocoa was unthinkable.  IMO we&#39;ve targeted the<br>&gt;&gt;&gt;   cows that do definitive damage.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 2. Fluency is itself deeply valued by many in our community, and has<br>&gt;&gt;&gt;   influenced the design of core Swift at a fundamental level<br>&gt;&gt;&gt;   (e.g. argument labels that are mandatory at the call site).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 3. Properly applied (thus, no fair bringing up “unioning”), fluency does<br>&gt;&gt;&gt;   no damage and in many cases improves clarity.  Connecting words like<br>&gt;&gt;&gt;   prepositions can make the difference in implied meaning,<br>&gt;&gt;&gt;   e.g. x.update(y) vs x.update(using: y).<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; -Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0089229ece6e648767cff4dc6c6d38ab?s=50"></div><header><strong>API Guidelines Update</strong> from <string>Charles Kissinger</string> &lt;crk at akkyra.com&gt;<p>February 19, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Feb 19, 2016, at 10:39 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Thu Feb 18 2016, Charles Kissinger &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On Feb 18, 2016, at 4:30 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi again Charles,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;ve been thinking about this response and I realized it might have left<br>&gt;&gt;&gt; you feeling that you hadn&#39;t been heard.  If that&#39;s the case I apologize,<br>&gt;&gt;&gt; and ask that you try again to make your point.  I *think* I understood<br>&gt;&gt;&gt; you, but of course it&#39;s impossible to be sure.<br>&gt;&gt; <br>&gt;&gt; Hi Dave,<br>&gt;&gt; <br>&gt;&gt; The only motivation for my post was that I thought the discussion<br>&gt;&gt; around “-ing” method names had gotten complex and somewhat<br>&gt;&gt; contentious, and it seemed like no one had successfully, succinctly<br>&gt;&gt; communicated the reason for the unease some of us have with those<br>&gt;&gt; names.<br>&gt;&gt; <br>&gt;&gt; I don’t think I succeeded any better than anyone else, but in<br>&gt;&gt; retrospect, there really isn’t any value in continuing to argue the<br>&gt;&gt; merits unless someone can suggest something better. (Which I<br>&gt;&gt; can’t. :-))<br>&gt; <br>&gt; Well, I&#39;d still like to understand the actual problem.  Leaving aside<br>&gt; the whole “Set mess,” do you see a problem with guidelines that lead to<br>&gt; pairs like:<br>&gt; <br>&gt;    x.trim(.WhitespaceAndNewlines)<br>&gt;    y = z.trimming(.WhitespaceAndNewlines)<br></p><p>As I think you’ve said previously, it’s probably just a case where people (including me) need to get used to the idiom. There is a huge leap from:<br></p><p>a.stringByTrimmingCharactersInSet(b)<br>to:<br>a.trimming(b)<br></p><p>A couple of cognitive crutches that people have depended on are gone. <br></p><p>There are things that make “-ing” function names more of an adjustment for some people, I think:<br></p><p>- It’s an idiom (if that’s the right word) for function naming that a lot of people haven’t been exposed to before.<br></p><p>- The expression at the call-site is grammatical, but perhaps not common usage, so people might still have to stop and think about what the function is doing until they get used to it.<br></p><p>- Though not a problem unique to “-ing”s, the function&#39;s primary purpose is to return something, but the function name by itself doesn’t reflect that (though the full expression at the call site does).<br></p><p>None of these are necessarily flaws, just things that people react to. So it might be reasonable to conclude there isn’t actually a problem. ;-)<br></p><p>&gt; ? Are they hard to read?<br></p><p>In the limited sense of being unfamiliar usage for some people. It doesn’t seem grammatically awkward to me.<br></p><p>&gt; Is it hard to arrive at these names, somehow?<br></p><p>Not IMO.<br></p><p>&gt; Are the guidelines simply not clear enough about the procedure for<br>&gt; producing names mutating/non-mutating pairs?<br></p><p>I think the people who have raised concerns are reacting to the aesthetics of particular examples and not to the difficultly of using the naming conventions.<br></p><p>&gt;  Is it too easy to confuse that part of the guidelines with the general direction regarding methods with/without side-effects?<br></p><p>Without the examples, I think it might be confusing because you’re sorting through grammar rules. The examples provide the clarity.<br></p><p>&gt; <br>&gt;&gt; The fact that this one issue is the only one that anybody seems to<br>&gt;&gt; have any remaining complaints about has to be a very good sign.  I<br>&gt;&gt; think those of us on the outside do tend to forget that there has been<br>&gt;&gt; much sacred cow slaughtering and other mayhem required to get to this<br>&gt;&gt; point. :-)<br>&gt;&gt; <br>&gt;&gt; —CK<br>&gt;&gt; <br>&gt;&gt; P.S. And I cheerfully accept some mockery regarding the choices in my<br>&gt;&gt; own personal “API guidelines”, <br>&gt; <br>&gt; Not at all.  I just think it&#39;s really sad that we&#39;ve pushed you into<br>&gt; using such a verbose and cumbersome notation for things that should be<br>&gt; the simplest: non-mutating transformations.<br></p><p>It was a mis-statement there on my part anyway. I certainly didn’t mean I would resort to static methods just to avoid naming a function with “-ing&quot;! (It hardly ever comes up.) I actually intended to say that in *“unioning”* cases — where there is a naming problem that is really problematic — I would be inclined to just punt and solve it with static methods or free functions. (And “let c = Set.union(a, b)&quot; isn’t *that* bad, is it? ;-))<br></p><p>&gt; <br>&gt;&gt; I’ll admit that some of my opinions about common practice in object<br>&gt;&gt; oriented programming, and the entire OO paradigm itself, are not<br>&gt;&gt; mainstream.<br>&gt; <br>&gt; Join the club.  I remember someone gave a pretty cool talk at WWDC about<br>&gt; how OOP wasn&#39;t the be-all and end-all. ;-)<br></p><p>FWIW, that talk spurred me to totally rewrite one application from the ground up, and the results have been fantastic.<br></p><p>—CK<br></p><p>&gt; <br>&gt;&gt;&gt; on Thu Feb 18 2016, Dave Abrahams &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; on Thu Feb 18 2016, Charles Kissinger &lt;crk-AT-akkyra.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I’m not arguing the importance of this objection, just that I<br>&gt;&gt;&gt;&gt;&gt; understand it and think it’s valid.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Though “ing” is a relatively uncommon usage, when used as<br>&gt;&gt;&gt;&gt; prescribed IMO it reads pretty naturally, and is a good match for<br>&gt;&gt;&gt;&gt; some important criteria:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; * it associates mutating and non-mutating forms<br>&gt;&gt;&gt;&gt; * it&#39;s a syntactic match for method invocation, with the receiver on the<br>&gt;&gt;&gt;&gt; left<br>&gt;&gt;&gt;&gt; * it preserves “fluency,” making code “read like English”<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If you have better ideas for how to satisfy these criteria, I&#39;d be happy<br>&gt;&gt;&gt;&gt; to hear them.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; We could debate the value of fluency in APIs, but I&#39;d like to point out<br>&gt;&gt;&gt;&gt; two things:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; or three.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 1. This API guidelines and renaming effort skewers many heretofore<br>&gt;&gt;&gt;&gt;  sacred cows, which has been incredibly difficult to achieve<br>&gt;&gt;&gt;&gt;  politically.  A year ago, the idea that we would ever apply “omit<br>&gt;&gt;&gt;&gt;  needless words” to Cocoa was unthinkable.  IMO we&#39;ve targeted the<br>&gt;&gt;&gt;&gt;  cows that do definitive damage.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 2. Fluency is itself deeply valued by many in our community, and has<br>&gt;&gt;&gt;&gt;  influenced the design of core Swift at a fundamental level<br>&gt;&gt;&gt;&gt;  (e.g. argument labels that are mandatory at the call site).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 3. Properly applied (thus, no fair bringing up “unioning”), fluency does<br>&gt;&gt;&gt;&gt;  no damage and in many cases improves clarity.  Connecting words like<br>&gt;&gt;&gt;&gt;  prepositions can make the difference in implied meaning,<br>&gt;&gt;&gt;&gt;  e.g. x.update(y) vs x.update(using: y).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d118cdf2fe31053bc7032466c4da282?s=50"></div><header><strong>API Guidelines Update</strong> from <string>Craig Cruden</string> &lt;ccruden at novafore.com&gt;<p>February 20, 2016 at 08:00:00am</p></header><div class="content"><p>Neither really feel right - I am not against long names, but sometimes people have long names because <br>they are unfocused and the API to a class/type has too many unfocused methods on it.  <br>Then it gets applied to other classes/types with less methods since it is more consistent with the naming <br>of the class/types that they have already completed.  <br></p><p>Whereas “ing”/“ed” is against all the naming conventions (closer to opposite of what was acceptable) of <br>any development environment I have worked in the last 30 years.  It is not that I don’t accept and embrace<br>change — if that were the case I would not be constantly learning.  <br></p><p>“ing” (the worst of the two) to me infers that something is in progress… i.e. “process”.isRunning or “process”.running.  <br></p><p>“ed” (least worst) to me infers that you are querying the state of something “process”.completed.  <br></p><p>Both mutable and immutable execute and complete and results are either returned or applied.<br></p><p>I have generally (maybe always) kept things that “mutate” separate from things that don’t (unless I am working in a <br>system where immutable vs mutable never entered the mind of the developer).  It feels more focused.  In most cases<br>it is fairly easy to do, and cleaner.  I don’t know if there is some performance reason why the mixing of the <br>two (across the whole API) is more advantageous.  But even in that case it will constantly be nagging me, and <br>giving me the feeling that something went horribly wrong and it is something that needs to be looked at to <br>see if it needs to be refactored and simplified.  <br></p><p>So for me it is not just that it is grammatically awkward, it will constantly be giving me a feeling that something went<br>horribly wrong and that it needs to be looked at again to see if it could have been done in a more simplified<br>and focused way.<br></p><p><br></p><p><br>&gt; <br>&gt; As I think you’ve said previously, it’s probably just a case where people (including me) need to get used to the idiom. There is a huge leap from:<br>&gt; <br>&gt; a.stringByTrimmingCharactersInSet(b)<br>&gt; to:<br>&gt; a.trimming(b)<br>&gt; <br>&gt; A couple of cognitive crutches that people have depended on are gone. <br>&gt; <br>&gt; There are things that make “-ing” function names more of an adjustment for some people, I think:<br>&gt; <br>&gt; - It’s an idiom (if that’s the right word) for function naming that a lot of people haven’t been exposed to before.<br>&gt; <br>&gt; - The expression at the call-site is grammatical, but perhaps not common usage, so people might still have to stop and think about what the function is doing until they get used to it.<br>&gt; <br>&gt; - Though not a problem unique to “-ing”s, the function&#39;s primary purpose is to return something, but the function name by itself doesn’t reflect that (though the full expression at the call site does).<br>&gt; <br>&gt; None of these are necessarily flaws, just things that people react to. So it might be reasonable to conclude there isn’t actually a problem. ;-)<br>&gt; <br>&gt;&gt; ? Are they hard to read?<br>&gt; <br>&gt; In the limited sense of being unfamiliar usage for some people. It doesn’t seem grammatically awkward to me.<br>&gt; <br>&gt;&gt; Is it hard to arrive at these names, somehow?<br>&gt; <br>&gt; Not IMO.<br>&gt; <br>&gt;&gt; Are the guidelines simply not clear enough about the procedure for<br>&gt;&gt; producing names mutating/non-mutating pairs?<br>&gt; <br>&gt; I think the people who have raised concerns are reacting to the aesthetics of particular examples and not to the difficultly of using the naming conventions.<br>&gt; <br>&gt;&gt; Is it too easy to confuse that part of the guidelines with the general direction regarding methods with/without side-effects?<br>&gt; <br>&gt; Without the examples, I think it might be confusing because you’re sorting through grammar rules. The examples provide the clarity.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160220/b05dffcb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0089229ece6e648767cff4dc6c6d38ab?s=50"></div><header><strong>API Guidelines Update</strong> from <string>Charles Kissinger</string> &lt;crk at akkyra.com&gt;<p>February 20, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Feb 19, 2016, at 5:20 PM, Craig Cruden &lt;ccruden at novafore.com&gt; wrote:<br>&gt; <br>&gt; Neither really feel right - I am not against long names, but sometimes people have long names because they are unfocused and the API to a class/type has too many unfocused methods on it.  Then it gets applied to other classes/types with less methods since it is more consistent with the naming of the class/types that they have already completed.  <br>&gt; <br>&gt; Whereas “ing”/“ed” is against all the naming conventions (closer to opposite of what was acceptable) of any development environment I have worked in the last 30 years.<br></p><p>Hi Craig,<br></p><p>I just haven’t been able to come up with a convention that meets Dave’s requirements and is consistently better. The best “-ing” alternative to my eye is “with-&quot;:<br></p><p>s.expandTilde()                       // mutating<br>let t = s.withExpandedTilde()   // non-mutating<br></p><p>x.append(y)<br>let z = x.withAppended(y)         // Meh<br></p><p>a.trim(.whitespaceAndNewlines)<br>let b = a.withTrimmed(.whitespaceAndNewlines)<br></p><p>—CK<br></p><p>&gt; It is not that I don’t accept and embrace<br>&gt; change — if that were the case I would not be constantly learning.  <br>&gt; <br>&gt; “ing” (the worst of the two) to me infers that something is in progress… i.e. “process”.isRunning or “process”.running.  <br>&gt; <br>&gt; “ed” (least worst) to me infers that you are querying the state of something “process”.completed.  <br>&gt; <br>&gt; Both mutable and immutable execute and complete and results are either returned or applied.<br>&gt; <br>&gt; I have generally (maybe always) kept things that “mutate” separate from things that don’t (unless I am working in a <br>&gt; system where immutable vs mutable never entered the mind of the developer).  It feels more focused.  In most cases<br>&gt; it is fairly easy to do, and cleaner.  I don’t know if there is some performance reason why the mixing of the <br>&gt; two (across the whole API) is more advantageous.  But even in that case it will constantly be nagging me, and <br>&gt; giving me the feeling that something went horribly wrong and it is something that needs to be looked at to <br>&gt; see if it needs to be refactored and simplified.  <br>&gt; <br>&gt; So for me it is not just that it is grammatically awkward, it will constantly be giving me a feeling that something went<br>&gt; horribly wrong and that it needs to be looked at again to see if it could have been done in a more simplified<br>&gt; and focused way.<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; As I think you’ve said previously, it’s probably just a case where people (including me) need to get used to the idiom. There is a huge leap from:<br>&gt;&gt; <br>&gt;&gt; a.stringByTrimmingCharactersInSet(b)<br>&gt;&gt; to:<br>&gt;&gt; a.trimming(b)<br>&gt;&gt; <br>&gt;&gt; A couple of cognitive crutches that people have depended on are gone. <br>&gt;&gt; <br>&gt;&gt; There are things that make “-ing” function names more of an adjustment for some people, I think:<br>&gt;&gt; <br>&gt;&gt; - It’s an idiom (if that’s the right word) for function naming that a lot of people haven’t been exposed to before.<br>&gt;&gt; <br>&gt;&gt; - The expression at the call-site is grammatical, but perhaps not common usage, so people might still have to stop and think about what the function is doing until they get used to it.<br>&gt;&gt; <br>&gt;&gt; - Though not a problem unique to “-ing”s, the function&#39;s primary purpose is to return something, but the function name by itself doesn’t reflect that (though the full expression at the call site does).<br>&gt;&gt; <br>&gt;&gt; None of these are necessarily flaws, just things that people react to. So it might be reasonable to conclude there isn’t actually a problem. ;-)<br>&gt;&gt; <br>&gt;&gt;&gt; ? Are they hard to read?<br>&gt;&gt; <br>&gt;&gt; In the limited sense of being unfamiliar usage for some people. It doesn’t seem grammatically awkward to me.<br>&gt;&gt; <br>&gt;&gt;&gt; Is it hard to arrive at these names, somehow?<br>&gt;&gt; <br>&gt;&gt; Not IMO.<br>&gt;&gt; <br>&gt;&gt;&gt; Are the guidelines simply not clear enough about the procedure for<br>&gt;&gt;&gt; producing names mutating/non-mutating pairs?<br>&gt;&gt; <br>&gt;&gt; I think the people who have raised concerns are reacting to the aesthetics of particular examples and not to the difficultly of using the naming conventions.<br>&gt;&gt; <br>&gt;&gt;&gt; Is it too easy to confuse that part of the guidelines with the general direction regarding methods with/without side-effects?<br>&gt;&gt; <br>&gt;&gt; Without the examples, I think it might be confusing because you’re sorting through grammar rules. The examples provide the clarity.<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160220/3c915472/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>API Guidelines Update</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>February 22, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Feb 20, 2016, at 13:26, Charles Kissinger via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 19, 2016, at 5:20 PM, Craig Cruden &lt;ccruden at novafore.com &lt;mailto:ccruden at novafore.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Neither really feel right - I am not against long names, but sometimes people have long names because they are unfocused and the API to a class/type has too many unfocused methods on it.  Then it gets applied to other classes/types with less methods since it is more consistent with the naming of the class/types that they have already completed.  <br>&gt;&gt; <br>&gt;&gt; Whereas “ing”/“ed” is against all the naming conventions (closer to opposite of what was acceptable) of any development environment I have worked in the last 30 years.<br>&gt; <br>&gt; Hi Craig,<br>&gt; <br>&gt; I just haven’t been able to come up with a convention that meets Dave’s requirements and is consistently better. The best “-ing” alternative to my eye is “with-&quot;:<br>&gt; <br>&gt; s.expandTilde()                       // mutating<br>&gt; let t = s.withExpandedTilde()   // non-mutating<br>&gt; <br>&gt; x.append(y)<br>&gt; let z = x.withAppended(y)         // Meh<br>&gt; <br>&gt; a.trim(.whitespaceAndNewlines)<br>&gt; let b = a.withTrimmed(.whitespaceAndNewlines)<br></p><p>I&#39;ll second that. &quot;a.withTrimmed(.whitespaceAndNewlines)&quot; makes no sense to me, i.e. the name &quot;withTrimmed&quot; is hurting comprehension. I tried to figure out why this is and eventually decided my brain was grouping it as &quot;a with [trimmed whitespace]&quot;, as if &quot;trimmed whitespace&quot; were a thing. &quot;havingTrimmed&quot; would have been okay (a participle form), but feels clunky.<br></p><p>In case it&#39;s been lost in all the discussion, the -ing/-ed rule is essentially the rule Objective-C uses, minus the noun labels for the return value and types and the word &quot;by&quot;. It&#39;s definitely very different grammatically from most other API guidelines, but so are Objective-C&#39;s guidelines.<br></p><p>Jordan<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160222/69be0247/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>API Guidelines Update</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>February 24, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Feb 22, 2016, at 11:02 AM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; In case it&#39;s been lost in all the discussion, the -ing/-ed rule is essentially the rule Objective-C uses, minus the noun labels for the return value and types and the word &quot;by&quot;. It&#39;s definitely very different grammatically from most other API guidelines, but so are Objective-C&#39;s guidelines.<br>&gt; <br></p><p>Sure, but I&#39;d actually argue that the noun-labels in ObjC are what actually provide the context of the non-mutating nature of the function. The -ed/-ing suffixes are a by-product of the preceding noun-phrase and/or trailing preposition.<br></p><p>stringByTrimmingCharactersInSet(_:)<br></p><p>We are taking information about the returned data out of the function name and assuming that the return type makes up for it.<br></p><p>trimming(_:)<br></p><p>For a string-type, that may be ok, but I&#39;d argue that `trimming` is significantly more ambiguous that the ObjC version. There is no reasonable assumption that `stringByTrimmingCharactersInSet` would ever mutate the caller. However, `trimming` carries no such implication _unless_ you are well versed in the API guidelines, and even then, I&#39;d still argue that your confidence level between the two versions is not equal.<br></p><p>A counter example for -ing usage: if we have a streaming-type and `trimming` is actually the process for continually removing those characters from the stream. The likely implementation of this is going to be a mutating function that fires events, or maybe it&#39;s a promise-like API that wraps the event handling differently. The corollary is that `trim` would actually be the one that produces no side-effects as it would be able to give a snapshot of the current state of a trimmed stream.<br></p><p>I think we are opening ourselves up to the potential of many confusing APIs when an -ed/-ing form of a function name is an appropriate candidate with the opposite meaning that the guidelines set out.<br></p><p>The -ed/-ing suffix choice doesn&#39;t seem outright bad, but it does seem to be &quot;death by paper cuts&quot; bad, at least to me. The guidelines are already a bit complicated in this area. Also, like others, I find the -ing suffix to imply a state of work to be done that will be completed later or cover an extended amount of time; mutation has no bearing on the implementation choice here.<br></p><p>Side note: the guidelines are also unintentionally narrow: &quot;Use the “ed/ing” rule to name the nonmutating counterpart of a mutating method.&quot;<br></p><p>We should *always* be following this pattern regardless of the existence of a nonmutating counterpart. Otherwise, if you implement just a non-mutating function for sorting without the counterpart, you need to use a noun-phrase, like `sortBy`. Then if you later add a mutating version, you need to rename the `sortBy` to `sorted`. That seems like the wrong outcome of the guidelines. <br></p><p>-David<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160224/49e13ba9/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
