<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76eb9711d45c1c9a71c0f24004072a22?s=50"></div><header><strong>[Draft proposal] Faster/lower-level external String initialization</strong> from <string>Zach Waldowski</string> &lt;zach at waldowski.me&gt;<p>January 14, 2016 at 06:00:00pm</p></header><div class="content"><p>In response to some recommendations from the Swift 3 plans, the proposed API has been made more comprehensive, and the proposal updated to fit.<br></p><p>The proposal is now PR&#39;ed:<br></p><p>    https://github.com/apple/swift-evolution/pull/101<br></p><p>The code is still where it was before:<br></p><p>    https://github.com/apple/swift/compare/master...zwaldowski:string-from-code-units<br></p><p>Sent from my iPhone<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0089229ece6e648767cff4dc6c6d38ab?s=50"></div><header><strong>[Draft proposal] Faster/lower-level external String initialization</strong> from <string>Charles Kissinger</string> &lt;crk at akkyra.com&gt;<p>January 14, 2016 at 11:00:00pm</p></header><div class="content"><p>Zach, Max:<br></p><p>Just a comment on the function and parameter names: decodeCString() doesn’t seem right for the factory function that takes a CollectionType since we aren’t passing in a null-terminated string there. Likewise, the first argument to the corresponding initializer that takes a CollectionType is currently called cString. Should the factory method just be called decode() perhaps, and the argument to the initializer be codeUnits rather than cString?<br></p><p>-CK<br></p><p>&gt; On Jan 14, 2016, at 6:02 PM, Zachary Waldowski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; In response to some recommendations from the Swift 3 plans, the proposed API has been made more comprehensive, and the proposal updated to fit.<br>&gt; <br>&gt; The proposal is now PR&#39;ed:<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/pull/101<br>&gt; <br>&gt; The code is still where it was before:<br>&gt; <br>&gt;    https://github.com/apple/swift/compare/master...zwaldowski:string-from-code-units<br>&gt; <br>&gt; Sent from my iPhone<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76eb9711d45c1c9a71c0f24004072a22?s=50"></div><header><strong>[Draft proposal] Faster/lower-level external String initialization</strong> from <string>Zach Waldowski</string> &lt;zach at waldowski.me&gt;<p>January 15, 2016 at 12:00:00pm</p></header><div class="content"><p>Charles -<br></p><p>I shared the same concern, and mention them in the proposal. I thought<br>`decode(_:as:)` to be too simple to the point of being non-descriptive,<br>so punted on the issue for now. I was going to circle back today and<br>revisit it.<br></p><p>Cheers!<br>Zachary Waldowski<br>zach at waldowski.me<br></p><p>On Fri, Jan 15, 2016, at 02:09 AM, Charles Kissinger wrote:<br>&gt; Zach, Max:<br>&gt; <br>&gt; Just a comment on the function and parameter names: decodeCString()<br>&gt; doesn’t seem right for the factory function that takes a CollectionType<br>&gt; since we aren’t passing in a null-terminated string there. Likewise, the<br>&gt; first argument to the corresponding initializer that takes a<br>&gt; CollectionType is currently called cString. Should the factory method<br>&gt; just be called decode() perhaps, and the argument to the initializer be<br>&gt; codeUnits rather than cString?<br>&gt; <br>&gt; -CK<br>&gt; <br>&gt; &gt; On Jan 14, 2016, at 6:02 PM, Zachary Waldowski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; <br>&gt; &gt; In response to some recommendations from the Swift 3 plans, the proposed API has been made more comprehensive, and the proposal updated to fit.<br>&gt; &gt; <br>&gt; &gt; The proposal is now PR&#39;ed:<br>&gt; &gt; <br>&gt; &gt;    https://github.com/apple/swift-evolution/pull/101<br>&gt; &gt; <br>&gt; &gt; The code is still where it was before:<br>&gt; &gt; <br>&gt; &gt;    https://github.com/apple/swift/compare/master...zwaldowski:string-from-code-units<br>&gt; &gt; <br>&gt; &gt; Sent from my iPhone<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c53218a6524f4d644b6a75a4441ea631?s=50"></div><header><strong>[Draft proposal] Faster/lower-level external String initialization</strong> from <string>Max Moiseev</string> &lt;moiseev at apple.com&gt;<p>January 15, 2016 at 10:00:00am</p></header><div class="content"><p>Good catch!<br></p><p>I would not be too worried about `decode`, as it will be called qualified as `String.decode(_:as:)`.<br></p><p>After a quick discussion with @gribozavr, I think we’re ok with having String.decode(_:as:) accepting a CollectionType (with a name recommended by Charles, i.e. codeUnits) and String.decodeCString(_:as:) accepting an UnsafePointer. The difference between the two functions is significant enough to warrant different names even though, for now, one can be implemented using the other.<br></p><p>max<br></p><p>&gt; On Jan 15, 2016, at 9:09 AM, Zach Waldowski &lt;zach at waldowski.me&gt; wrote:<br>&gt; <br>&gt; Charles -<br>&gt; <br>&gt; I shared the same concern, and mention them in the proposal. I thought<br>&gt; `decode(_:as:)` to be too simple to the point of being non-descriptive,<br>&gt; so punted on the issue for now. I was going to circle back today and<br>&gt; revisit it.<br>&gt; <br>&gt; Cheers!<br>&gt; Zachary Waldowski<br>&gt; zach at waldowski.me<br>&gt; <br>&gt; On Fri, Jan 15, 2016, at 02:09 AM, Charles Kissinger wrote:<br>&gt;&gt; Zach, Max:<br>&gt;&gt; <br>&gt;&gt; Just a comment on the function and parameter names: decodeCString()<br>&gt;&gt; doesn’t seem right for the factory function that takes a CollectionType<br>&gt;&gt; since we aren’t passing in a null-terminated string there. Likewise, the<br>&gt;&gt; first argument to the corresponding initializer that takes a<br>&gt;&gt; CollectionType is currently called cString. Should the factory method<br>&gt;&gt; just be called decode() perhaps, and the argument to the initializer be<br>&gt;&gt; codeUnits rather than cString?<br>&gt;&gt; <br>&gt;&gt; -CK<br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 14, 2016, at 6:02 PM, Zachary Waldowski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In response to some recommendations from the Swift 3 plans, the proposed API has been made more comprehensive, and the proposal updated to fit.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The proposal is now PR&#39;ed:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   https://github.com/apple/swift-evolution/pull/101<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The code is still where it was before:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   https://github.com/apple/swift/compare/master...zwaldowski:string-from-code-units<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0089229ece6e648767cff4dc6c6d38ab?s=50"></div><header><strong>[Draft proposal] Faster/lower-level external String initialization</strong> from <string>Charles Kissinger</string> &lt;crk at akkyra.com&gt;<p>January 15, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jan 15, 2016, at 9:09 AM, Zach Waldowski &lt;zach at waldowski.me&gt; wrote:<br>&gt; <br>&gt; Charles -<br>&gt; <br>&gt; I shared the same concern, and mention them in the proposal. I thought<br>&gt; `decode(_:as:)` to be too simple to the point of being non-descriptive,<br>&gt; so punted on the issue for now. I was going to circle back today and<br>&gt; revisit it.<br></p><p>The only other decent alternative I’ve been able to come up with is decodeUTF(). <br>-CK<br></p><p>&gt; Cheers!<br>&gt; Zachary Waldowski<br>&gt; zach at waldowski.me<br>&gt; <br>&gt; On Fri, Jan 15, 2016, at 02:09 AM, Charles Kissinger wrote:<br>&gt;&gt; Zach, Max:<br>&gt;&gt; <br>&gt;&gt; Just a comment on the function and parameter names: decodeCString()<br>&gt;&gt; doesn’t seem right for the factory function that takes a CollectionType<br>&gt;&gt; since we aren’t passing in a null-terminated string there. Likewise, the<br>&gt;&gt; first argument to the corresponding initializer that takes a<br>&gt;&gt; CollectionType is currently called cString. Should the factory method<br>&gt;&gt; just be called decode() perhaps, and the argument to the initializer be<br>&gt;&gt; codeUnits rather than cString?<br>&gt;&gt; <br>&gt;&gt; -CK<br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 14, 2016, at 6:02 PM, Zachary Waldowski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In response to some recommendations from the Swift 3 plans, the proposed API has been made more comprehensive, and the proposal updated to fit.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The proposal is now PR&#39;ed:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   https://github.com/apple/swift-evolution/pull/101<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The code is still where it was before:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   https://github.com/apple/swift/compare/master...zwaldowski:string-from-code-units<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c53218a6524f4d644b6a75a4441ea631?s=50"></div><header><strong>[Draft proposal] Faster/lower-level external String initialization</strong> from <string>Max Moiseev</string> &lt;moiseev at apple.com&gt;<p>January 15, 2016 at 10:00:00am</p></header><div class="content"><p>For that there is a counter-example, consider an invocation: String.decodeUTF(whatever, as: UTF8.self). There is clear duplication of ‘UTF’ here.<br></p><p><br>&gt; On Jan 15, 2016, at 10:41 AM, Charles Kissinger &lt;crk at akkyra.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 15, 2016, at 9:09 AM, Zach Waldowski &lt;zach at waldowski.me&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Charles -<br>&gt;&gt; <br>&gt;&gt; I shared the same concern, and mention them in the proposal. I thought<br>&gt;&gt; `decode(_:as:)` to be too simple to the point of being non-descriptive,<br>&gt;&gt; so punted on the issue for now. I was going to circle back today and<br>&gt;&gt; revisit it.<br>&gt; <br>&gt; The only other decent alternative I’ve been able to come up with is decodeUTF(). <br>&gt; -CK<br>&gt; <br>&gt;&gt; Cheers!<br>&gt;&gt; Zachary Waldowski<br>&gt;&gt; zach at waldowski.me<br>&gt;&gt; <br>&gt;&gt; On Fri, Jan 15, 2016, at 02:09 AM, Charles Kissinger wrote:<br>&gt;&gt;&gt; Zach, Max:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Just a comment on the function and parameter names: decodeCString()<br>&gt;&gt;&gt; doesn’t seem right for the factory function that takes a CollectionType<br>&gt;&gt;&gt; since we aren’t passing in a null-terminated string there. Likewise, the<br>&gt;&gt;&gt; first argument to the corresponding initializer that takes a<br>&gt;&gt;&gt; CollectionType is currently called cString. Should the factory method<br>&gt;&gt;&gt; just be called decode() perhaps, and the argument to the initializer be<br>&gt;&gt;&gt; codeUnits rather than cString?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -CK<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 14, 2016, at 6:02 PM, Zachary Waldowski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; In response to some recommendations from the Swift 3 plans, the proposed API has been made more comprehensive, and the proposal updated to fit.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The proposal is now PR&#39;ed:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  https://github.com/apple/swift-evolution/pull/101<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The code is still where it was before:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  https://github.com/apple/swift/compare/master...zwaldowski:string-from-code-units<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7abf2ce34651dd5e97cd97b16ce21bae?s=50"></div><header><strong>[Draft proposal] Faster/lower-level external String initialization</strong> from <string>Guillaume Lessard</string> &lt;glessard at tffenterprises.com&gt;<p>January 15, 2016 at 01:00:00pm</p></header><div class="content"><p>I mostly like the proposal.<br>However, it seems to me that a single constructor could do the job of both:<br></p><p>init?(cString: UnsafePointer&lt;CChar&gt;, repairingUTF8: Bool = false)<br></p><p>(and similarly for the generic constructor.)<br></p><p>I agree that the static function could be called `decode(_:as:)`.<br></p><p><br>As for the implementation, I don’t like that the `UnsafePointer&lt;CChar&gt;` constructors choose to crash on a null pointer, when String.fromCString politely returned nil in that situation.<br></p><p>Cheers,<br>Guillaume Lessard<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c53218a6524f4d644b6a75a4441ea631?s=50"></div><header><strong>[Draft proposal] Faster/lower-level external String initialization</strong> from <string>Max Moiseev</string> &lt;moiseev at apple.com&gt;<p>January 15, 2016 at 02:00:00pm</p></header><div class="content"><p>Hi Guillaume,<br></p><p>If we squash initializer with a default Bool = false, it will mean that the most common use case (i.e. repairing a cstring) will result in String? and will have to be (most of the time blindly) unwrapped.<br></p><p>As for passing nil, there are plans to make UnsafePointer non nil (and represent a nil case by Optional&lt;UnsafePointer&gt;.None), so an explicit nullness check is preferred before the call.<br></p><p>max<br></p><p><br></p><p><br>&gt; On Jan 15, 2016, at 12:03 PM, Guillaume Lessard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I mostly like the proposal.<br>&gt; However, it seems to me that a single constructor could do the job of both:<br>&gt; <br>&gt; init?(cString: UnsafePointer&lt;CChar&gt;, repairingUTF8: Bool = false)<br></p><p>&gt; (and similarly for the generic constructor.)<br>&gt; <br>&gt; I agree that the static function could be called `decode(_:as:)`.<br>&gt; <br>&gt; <br>&gt; As for the implementation, I don’t like that the `UnsafePointer&lt;CChar&gt;` constructors choose to crash on a null pointer, when String.fromCString politely returned nil in that situation.<br>&gt; <br>&gt; Cheers,<br>&gt; Guillaume Lessard<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7abf2ce34651dd5e97cd97b16ce21bae?s=50"></div><header><strong>[Draft proposal] Faster/lower-level external String initialization</strong> from <string>Guillaume Lessard</string> &lt;glessard at tffenterprises.com&gt;<p>January 15, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On 15 janv. 2016, at 15:56, Max Moiseev &lt;moiseev at apple.com&gt; wrote:<br>&gt; <br>&gt; Hi Guillaume,<br>&gt; <br>&gt; If we squash initializer with a default Bool = false, it will mean that the most common use case (i.e. repairing a cstring) will result in String? and will have to be (most of the time blindly) unwrapped.<br>&gt; <br>&gt; As for passing nil, there are plans to make UnsafePointer non nil (and represent a nil case by Optional&lt;UnsafePointer&gt;.None), so an explicit nullness check is preferred before the call.<br></p><p>With pointers, there some kind of nullness check either way; I would personally prefer to do it on an optional String than a probable Pointer. I guess it’s just a matter of picking a poison.<br></p><p>As an aside, is the planned non-nilness also to become a rule for UnsafeMutablePointer?<br></p><p>Guillaume Lessard<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c53218a6524f4d644b6a75a4441ea631?s=50"></div><header><strong>[Draft proposal] Faster/lower-level external String initialization</strong> from <string>Max Moiseev</string> &lt;moiseev at apple.com&gt;<p>January 15, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Jan 15, 2016, at 3:06 PM, Guillaume Lessard &lt;glessard at tffenterprises.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 15 janv. 2016, at 15:56, Max Moiseev &lt;moiseev at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi Guillaume,<br>&gt;&gt; <br>&gt;&gt; If we squash initializer with a default Bool = false, it will mean that the most common use case (i.e. repairing a cstring) will result in String? and will have to be (most of the time blindly) unwrapped.<br>&gt;&gt; <br>&gt;&gt; As for passing nil, there are plans to make UnsafePointer non nil (and represent a nil case by Optional&lt;UnsafePointer&gt;.None), so an explicit nullness check is preferred before the call.<br>&gt; <br>&gt; With pointers, there some kind of nullness check either way; I would personally prefer to do it on an optional String than a probable Pointer. I guess it’s just a matter of picking a poison.<br>Another point is, you will have 2 checks then: one inside the function and one outside of it. Versus a single check upfront.<br>&gt; <br>&gt; As an aside, is the planned non-nilness also to become a rule for UnsafeMutablePointer?<br>Right now UnsafePointer and UnsafeMutablePointer are the same thing essentially. So I would expect...<br></p><p>&gt; <br>&gt; Guillaume Lessard<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7abf2ce34651dd5e97cd97b16ce21bae?s=50"></div><header><strong>[Draft proposal] Faster/lower-level external String initialization</strong> from <string>Guillaume Lessard</string> &lt;glessard at tffenterprises.com&gt;<p>January 15, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On 15 janv. 2016, at 16:15, Max Moiseev &lt;moiseev at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; On Jan 15, 2016, at 3:06 PM, Guillaume Lessard &lt;glessard at tffenterprises.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; With pointers, there some kind of nullness check either way; I would personally prefer to do it on an optional String than a probable Pointer. I guess it’s just a matter of picking a poison.<br>&gt; Another point is, you will have 2 checks then: one inside the function and one outside of it. Versus a single check upfront.<br></p><p>The precondition involves a check, so there’s 2 checks either way. Either a) you check for a null pointer before, then the function does it again before deciding whether to crash, or b) the function checks it before deciding whether to return Optional.None, and then you have to unwrap the optional...<br></p><p>Cheers,<br>Guillaume Lessard<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c53218a6524f4d644b6a75a4441ea631?s=50"></div><header><strong>[Draft proposal] Faster/lower-level external String initialization</strong> from <string>Max Moiseev</string> &lt;moiseev at apple.com&gt;<p>January 15, 2016 at 03:00:00pm</p></header><div class="content"><p>Zach,<br></p><p>A quick note on usage of @available attribute in your code.<br></p><p>@available(*, deprecated, renamed=&quot;init(validatingCString:)”)<br></p><p>`renamed` provides a hint to XCode on how to actually rewrite the code in order for it to compile. It is quite unfortunate really that `renamed` accepts the syntax in a snippet above.<br>Please change `renamed` to `message`. Message will simply be displayed and expect some action from the developer.<br></p><p>thanks,<br>max<br></p><p>&gt; On Jan 14, 2016, at 6:02 PM, Zachary Waldowski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; In response to some recommendations from the Swift 3 plans, the proposed API has been made more comprehensive, and the proposal updated to fit.<br>&gt; <br>&gt; The proposal is now PR&#39;ed:<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/pull/101<br>&gt; <br>&gt; The code is still where it was before:<br>&gt; <br>&gt;    https://github.com/apple/swift/compare/master...zwaldowski:string-from-code-units<br>&gt; <br>&gt; Sent from my iPhone<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160115/8b68020c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76eb9711d45c1c9a71c0f24004072a22?s=50"></div><header><strong>[Draft proposal] Faster/lower-level external String initialization</strong> from <string>Zach Waldowski</string> &lt;zach at waldowski.me&gt;<p>January 15, 2016 at 07:00:00pm</p></header><div class="content"><p>I&#39;ve made that change and the `codeUnits` split, but am waiting on<br>the tests before I update the branch. The proposal has been updated<br>and pushed.<br></p><p>Happy Friday! Zach Waldowski zach at waldowski.me<br></p><p><br>On Fri, Jan 15, 2016, at 06:15 PM, Max Moiseev wrote:<br>&gt; Zach,<br>&gt;<br>&gt; A quick note on usage of @available attribute in your code.<br>&gt;<br>&gt; @available(*, deprecated, renamed=&quot;init(validatingCString:)”)<br>&gt;<br>&gt; `renamed` provides a hint to XCode on how to actually rewrite the code<br>&gt; in order for it to compile. It is quite unfortunate really that<br>&gt; `renamed` accepts the syntax in a snippet above. Please change<br>&gt; `renamed` to `message`. Message will simply be displayed and expect<br>&gt; some action from the developer.<br>&gt;<br>&gt; thanks, max<br>&gt;<br>&gt;&gt; On Jan 14, 2016, at 6:02 PM, Zachary Waldowski via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; In response to some recommendations from the Swift 3 plans, the<br>&gt;&gt; proposed API has been made more comprehensive, and the proposal<br>&gt;&gt; updated to fit.<br>&gt;&gt;<br>&gt;&gt; The proposal is now PR&#39;ed:<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-evolution/pull/101<br>&gt;&gt;<br>&gt;&gt; The code is still where it was before:<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift/compare/master...zwaldowski:string-from-code-units<br>&gt;&gt;<br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160115/759db47f/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
