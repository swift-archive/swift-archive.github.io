<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2679e7a28cb46e207a562ad4e7fc45fc?s=50"></div><header><strong>mutating/non-mutating suggestion from a Rubyist</strong> from <string>James F</string> &lt;conductator at ntlworld.com&gt;<p>April 24, 2016 at 10:00:00am</p></header><div class="content"><p>The whole naming issue seems to be caused by the .union(_:) function. The Swift Guidelines say that mutating functions should use a verb, and non-mutating forms should use a noun, but in this case, the word union itself is a verb and a noun.<br></p><p>Have we considered this, then:<br></p><p>a.union(b) //mutating<br></p><p>_ = a.union(b) //non-mutating<br></p><p>There is no ambiguity in most situations, and the fact the Swift compiler can&#39;t disambiguate this at the moment is a bug I&#39;d like to see fixed in the Swift 3 timeframe. I think this wouldn&#39;t be such a bad compromise, and other functions could still use the standard -ed/-ing system alongside this without the API looking inconsistent, unlike with the form- prefix.<br></p><p>Admittedly, there is merit to the idea that functional methods should make non-mutating forms the primary form, but I feel like we should figure out what our stance is on this methodology in general. A mention in the Guidelines one way or the other would be nice, since the current rules seem to support this.<br></p><p>From James F<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c74c15ba14b1096d4e42900ddd2dacd0?s=50"></div><header><strong>mutating/non-mutating suggestion from a Rubyist</strong> from <string>Patrick Smith</string> &lt;pgwsmith at gmail.com&gt;<p>April 24, 2016 at 12:00:00pm</p></header><div class="content"><p>Yes +1 I think how the compiler canâ€™t work with two methods with the same name, where one has a result, and other mutating, needs to be fixed to enable nice APIs.<br></p><p>Patrick<br></p><p><br></p><p><br>On Sun, Apr 24, 2016 at 2:33 AM -0700, &quot;James Froggatt via swift-evolution&quot; &lt;swift-evolution at swift.org&gt; wrote:<br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br>The whole naming issue seems to be caused by the .union(_:) function. The Swift Guidelines say that mutating functions should use a verb, and non-mutating forms should use a noun, but in this case, the word union itself is a verb and a noun.<br></p><p>Have we considered this, then:<br></p><p>a.union(b) //mutating<br></p><p>_ = a.union(b) //non-mutating<br></p><p>There is no ambiguity in most situations, and the fact the Swift compiler can&#39;t disambiguate this at the moment is a bug I&#39;d like to see fixed in the Swift 3 timeframe. I think this wouldn&#39;t be such a bad compromise, and other functions could still use the standard -ed/-ing system alongside this without the API looking inconsistent, unlike with the form- prefix.<br></p><p>Admittedly, there is merit to the idea that functional methods should make non-mutating forms the primary form, but I feel like we should figure out what our stance is on this methodology in general. A mention in the Guidelines one way or the other would be nice, since the current rules seem to support this.<br></p><p>&gt;From James F<br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160424/97812291/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
