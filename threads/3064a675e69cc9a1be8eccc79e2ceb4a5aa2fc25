<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0035 Limiting inout capture to @noescape contexts</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>February 16, 2016 at 05:00:00pm</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;Limiting inout capture to @noescape contexts&quot; begins now and runs through February 19th. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0035-limit-inout-capture.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at:<br>	https://lists.swift.org/mailman/listinfo/swift-evolution<br>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p><br>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5818a8a9211c31af95d6db8974457683?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0035 Limiting inout capture to @noescape contexts</strong> from <string>Joseph Lord</string> &lt;Joseph at human-friendly.com&gt;<p>February 17, 2016 at 02:00:00am</p></header><div class="content"><p>+1<br></p><p>Rare case with complicated semantics. I approve of changing it to compile time error. <br></p><p>Gave the proposal a quick read and gave it a quick thought.<br></p><p>Joseph<br></p><p><br></p><p>Sent from my phone<br>&gt; On 17 Feb 2016, at 01:30, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;Limiting inout capture to @noescape<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>[Review] SE-0035 Limiting inout capture to @noescape contexts</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>February 17, 2016 at 01:00:00pm</p></header><div class="content"><p>+1 from me. I have been caught out :(<br></p><p>I would go further and make all captured variables read only unless marked<br>by inout, i.e.:<br></p><p>func example(inout x: Int) {<br>    escape { _ = x } // OK, immutable capture<br>    noEscape { _ = x } // OK, immutable capture<br>    noEscape {[inout x] in _ = x } // OK, closure is @noescape<br>    escape {[inout x] in _ = x } // error: closure cannot implicitly<br>capture an inout parameter unless @noescape<br>}<br></p><p><br>Which would make closures consistent with functions.<br></p><p>Even though I would go further it is still a +1 for me for this proposal<br>since it is a step in the right direction.<br></p><p>  -- Howard.<br></p><p>On 17 February 2016 at 12:30, Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;Limiting inout capture to @noescape contexts&quot; begins now<br>&gt; and runs through February 19th. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0035-limit-inout-capture.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at:<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt;         * What is your evaluation of the proposal?<br>&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;         * If you have you used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160217/c75a915f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c40db4457ab2c91a0d8006da31b177c6?s=50"></div><header><strong>[Review] SE-0035 Limiting inout capture to @noescape contexts</strong> from <string>Trent Nadeau</string> &lt;tanadeau at gmail.com&gt;<p>February 16, 2016 at 10:00:00pm</p></header><div class="content"><p>- What is your evaluation of the proposal?<br>      - +1. This seems like a reasonable way to prevent an existing<br>      problematic behavior in Swift.<br>   - Is the problem being addressed significant enough to warrant a change<br>   to Swift?<br>      - Yes. If the problem is enough to make it into multiple foot-gun<br>      lists, then I think it&#39;s significant enough.<br>   - Does this proposal fit well with the feel and direction of Swift?<br>   - Yes<br>   - If you have you used other languages or libraries with a similar<br>   feature, how do you feel that this proposal compares to those?<br>   - N/A<br>   - How much effort did you put into your review? A glance, a quick<br>   reading, or an in-depth study?<br>   - I followed the swift-evolution thread and read the proposal.<br></p><p><br>On Tue, Feb 16, 2016 at 9:56 PM, Howard Lovatt via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; +1 from me. I have been caught out :(<br>&gt;<br>&gt; I would go further and make all captured variables read only unless marked<br>&gt; by inout, i.e.:<br>&gt;<br>&gt; func example(inout x: Int) {<br>&gt;     escape { _ = x } // OK, immutable capture<br>&gt;     noEscape { _ = x } // OK, immutable capture<br>&gt;     noEscape {[inout x] in _ = x } // OK, closure is @noescape<br>&gt;     escape {[inout x] in _ = x } // error: closure cannot implicitly<br>&gt; capture an inout parameter unless @noescape<br>&gt; }<br>&gt;<br>&gt;<br>&gt; Which would make closures consistent with functions.<br>&gt;<br>&gt; Even though I would go further it is still a +1 for me for this proposal<br>&gt; since it is a step in the right direction.<br>&gt;<br>&gt;   -- Howard.<br>&gt;<br>&gt; On 17 February 2016 at 12:30, Chris Lattner via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Hello Swift community,<br>&gt;&gt;<br>&gt;&gt; The review of &quot;Limiting inout capture to @noescape contexts&quot; begins now<br>&gt;&gt; and runs through February 19th. The proposal is available here:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0035-limit-inout-capture.md<br>&gt;&gt;<br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt;&gt; should be sent to the swift-evolution mailing list at:<br>&gt;&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; or, if you would like to keep your feedback private, directly to the<br>&gt;&gt; review manager.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; What goes into a review?<br>&gt;&gt;<br>&gt;&gt; The goal of the review process is to improve the proposal under review<br>&gt;&gt; through constructive criticism and, eventually, determine the direction of<br>&gt;&gt; Swift. When writing your review, here are some questions you might want to<br>&gt;&gt; answer in your review:<br>&gt;&gt;<br>&gt;&gt;         * What is your evaluation of the proposal?<br>&gt;&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt;&gt; change to Swift?<br>&gt;&gt;         * Does this proposal fit well with the feel and direction of<br>&gt;&gt; Swift?<br>&gt;&gt;         * If you have you used other languages or libraries with a<br>&gt;&gt; similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt;&gt; reading, or an in-depth study?<br>&gt;&gt;<br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;<br>&gt;&gt;         https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;<br>&gt;&gt; Thank you,<br>&gt;&gt;<br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p><p><br>-- <br>Trent Nadeau<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160216/3cd212b1/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>[Review] SE-0035 Limiting inout capture to @noescape contexts</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>February 17, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt;<br>&gt; * What is your evaluation of the proposal?<br></p><p>+1. It makes an surprising edge case no longer surprising and favors being<br>explicit about it when needed.<br></p><p><br>&gt; * Is the problem being addressed significant enough to warrant a change to<br>&gt; Swift?<br></p><p>Yes, the edge case has surprised folks and I could see my own code<br>mistakenly running across this (hasn&#39;t yet).<br></p><p><br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes I believe so.<br></p><p><br>&gt; * If you have you used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br></p><p>N/A<br></p><p>* How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br></p><p>I missed the discussion but fully read and understood the proposal.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160217/004c9b62/attachment-0001.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/05e222e6ef4d84013bb3baeb0e25c90b?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0035 Limiting inout capture to @noescape contexts</strong> from <string>Patrick Gili</string> &lt;gili.patrick.r at gili-labs.com&gt;<p>February 18, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Feb 16, 2016, at 8:30 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;Limiting inout capture to @noescape contexts&quot; begins now and runs through February 19th. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0035-limit-inout-capture.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at:<br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>Looks good to me, especially if it eliminates a use case that simply doesn&#39;t work anymore.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I don&#39;t think this applies, but I have never used this use case when employing closures in any other language I have used.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick read.<br></p><p>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0035 Limiting inout capture to @noescape contexts</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>February 18, 2016 at 02:00:00pm</p></header><div class="content"><p>On Tue, Feb 16, 2016, at 05:30 PM, Chris Lattner wrote:<br>&gt; 	* What is your evaluation of the proposal?<br></p><p>+1. Seems like a good idea. Shadow copies of inout parameters are confusing.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes, it&#39;s a surprising edge case that can be hard to understand if you don&#39;t know what&#39;s going on.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>I think it&#39;s fairly neutral.<br></p><p>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>The only language that comes to mind that might have a similar situation is C++ with pass-by-ref parameters and C++11 lambdas, and I&#39;m not quite sure how those interact. I assume that if you capture the parameter by-ref in the lambda, it&#39;ll capture the original reference, but in that case it would not be safe to have the lambda out-live the reference (i.e. there&#39;d be no shadow copy made). But I&#39;ve not actually researched this topic.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>A quick reading.<br></p><p>-Kevin Ballard<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0035 Limiting inout capture to @noescape contexts</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>February 19, 2016 at 12:00:00am</p></header><div class="content"><p>+1 from me. The &quot;shadow copy&quot; behavior was a tricky problem to explain.<br></p><p>On Thu, Feb 18, 2016 at 5:09 PM, Kevin Ballard via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Tue, Feb 16, 2016, at 05:30 PM, Chris Lattner wrote:<br>&gt; &gt;       * What is your evaluation of the proposal?<br>&gt;<br>&gt; +1. Seems like a good idea. Shadow copies of inout parameters are<br>&gt; confusing.<br>&gt;<br>&gt; &gt;       * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;<br>&gt; Yes, it&#39;s a surprising edge case that can be hard to understand if you<br>&gt; don&#39;t know what&#39;s going on.<br>&gt;<br>&gt; &gt;       * Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>&gt; I think it&#39;s fairly neutral.<br>&gt;<br>&gt; &gt;       * If you have you used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;<br>&gt; The only language that comes to mind that might have a similar situation<br>&gt; is C++ with pass-by-ref parameters and C++11 lambdas, and I&#39;m not quite<br>&gt; sure how those interact. I assume that if you capture the parameter by-ref<br>&gt; in the lambda, it&#39;ll capture the original reference, but in that case it<br>&gt; would not be safe to have the lambda out-live the reference (i.e. there&#39;d<br>&gt; be no shadow copy made). But I&#39;ve not actually researched this topic.<br>&gt;<br>&gt; &gt;       * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br>&gt; A quick reading.<br>&gt;<br>&gt; -Kevin Ballard<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160219/7d76be89/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
