<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1b54c2d366bbc31b41cf7dcbc77324f9?s=50"></div><header><strong>swiftpm macOS target override</strong> from <string>Keith Smiley</string> &lt;k at keith.so&gt;<p>September 20, 2016 at 05:00:00pm</p></header><div class="content"><p>Hey everyone,<br></p><p>I noticed today that currently it doesn&#39;t seem possible to build to a macOS<br>target with a deployment target greater than 10.10 with swiftpm, since 10.10 is<br>currently hardcoded in the swiftpm source[0].<br></p><p>This means that right now if you attempt to do something like:<br></p><p>$ swift build --verbose -Xswiftc -target -Xswiftc x86_64-apple-macosx10.11<br></p><p>You&#39;ll notice that this target is not sent to the first invocation of swiftc<br>(I&#39;m not sure if this is a problem or not):<br></p><p>```<br>/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swiftc --driver-mode=swift -I /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/pm -L /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/pm -lPackageDescription -target x86_64-apple-macosx10.10 ...<br>```<br></p><p>And you&#39;ll see that the 10.11 target specification is overridden with the<br>default value when sent to swift-build-tool:<br></p><p>```<br>/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift-build-tool -f ... -v /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swiftc ... -target x86_64-apple-macosx10.11 -target x86_64-apple-macosx10.10 ...<br>```<br></p><p>I have a few questions about this:<br></p><p>- In the long term what&#39;s the plan for moving this out of being hard coded in<br>  swiftpm? If there is one, are there some starter tasks I could grab?<br>- In the short term would it make sense for us to reorder the user&#39;s args vs the<br>  default args in the few[1] uses[2] of these hardcoded args?<br></p><p>Lastly if there has been any discussion about this previously I&#39;d love to see it!<br></p><p>[0]: https://github.com/apple/swift-package-manager/blob/57c5be1db1c1e12e089dff02241ffbce5722fb0e/Sources/Commands/UserToolchain.swift#L34-L39<br>[1]: https://github.com/apple/swift-package-manager/blob/64a4183e83f41e0c54791b03b86ab17f95fb93d4/Sources/Build/describe().swift#L41<br>[2]: https://github.com/apple/swift-package-manager/blob/64a4183e83f41e0c54791b03b86ab17f95fb93d4/Sources/Build/describe().swift#L76<br></p><p><br>Thanks for reading!<br></p><p>--<br>Keith Smiley<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>swiftpm macOS target override</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>September 20, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Sep 20, 2016, at 2:44 PM, Keith Smiley via swift-build-dev &lt;swift-build-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hey everyone,<br>&gt; <br>&gt; I noticed today that currently it doesn&#39;t seem possible to build to a macOS<br>&gt; target with a deployment target greater than 10.10 with swiftpm, since 10.10 is<br>&gt; currently hardcoded in the swiftpm source[0].<br>&gt; <br>&gt; This means that right now if you attempt to do something like:<br>&gt; <br>&gt; $ swift build --verbose -Xswiftc -target -Xswiftc x86_64-apple-macosx10.11<br>&gt; <br>&gt; You&#39;ll notice that this target is not sent to the first invocation of swiftc<br>&gt; (I&#39;m not sure if this is a problem or not):<br>&gt; <br>&gt; ```<br>&gt; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swiftc --driver-mode=swift -I /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/pm -L /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/pm -lPackageDescription -target x86_64-apple-macosx10.10 ...<br>&gt; ```<br>&gt; <br>&gt; And you&#39;ll see that the 10.11 target specification is overridden with the<br>&gt; default value when sent to swift-build-tool:<br>&gt; <br>&gt; ```<br>&gt; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift-build-tool -f ... -v /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swiftc ... -target x86_64-apple-macosx10.11 -target x86_64-apple-macosx10.10 ...<br>&gt; ```<br>&gt; <br>&gt; I have a few questions about this:<br>&gt; <br></p><p>&lt;reordered your questions :) /&gt;<br></p><p>&gt; Lastly if there has been any discussion about this previously I&#39;d love to see it!<br>&gt; <br></p><p>This is covered partly in https://bugs.swift.org/browse/SR-2535, but there hasn&#39;t really been any discussion about how to fix it, other than that we know it is very broken and needs to be dealt with.<br></p><p>We haven&#39;t really tackled the problem of what is the &quot;right&quot; way to handle configurable compiler arguments in general (this also just came up on swift-dev w.r.t. custom C defines), and its.<br></p><p>&gt; - In the long term what&#39;s the plan for moving this out of being hard coded in<br>&gt;  swiftpm? If there is one, are there some starter tasks I could grab?<br></p><p>Unfortunately, the honest answer is we don&#39;t really have one yet.<br></p><p>The starter task is perhaps starting the discussion? We know we want to do something better than just arbitrary configurability through a &quot;build settings&quot; like model (which among other problems, doesn&#39;t compose well in a package-based world). We have some idea we want to have good modeling for flags which tie into important semantic concepts (like deployment targets), especially when they relate to the language, or the viability of particular packages or features. Beyond that, we don&#39;t have anything resembling a concrete design.<br></p><p>&gt; - In the short term would it make sense for us to reorder the user&#39;s args vs the<br>&gt;  default args in the few[1] uses[2] of these hardcoded args?<br></p><p>I would be fine with that, I can&#39;t think of a reason not to.<br></p><p> - Daniel<br></p><p>&gt; [0]: https://github.com/apple/swift-package-manager/blob/57c5be1db1c1e12e089dff02241ffbce5722fb0e/Sources/Commands/UserToolchain.swift#L34-L39<br>&gt; [1]: https://github.com/apple/swift-package-manager/blob/64a4183e83f41e0c54791b03b86ab17f95fb93d4/Sources/Build/describe().swift#L41<br>&gt; [2]: https://github.com/apple/swift-package-manager/blob/64a4183e83f41e0c54791b03b86ab17f95fb93d4/Sources/Build/describe().swift#L76<br>&gt; <br>&gt; <br>&gt; Thanks for reading!<br>&gt; <br>&gt; --<br>&gt; Keith Smiley<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1b54c2d366bbc31b41cf7dcbc77324f9?s=50"></div><header><strong>swiftpm macOS target override</strong> from <string>Keith Smiley</string> &lt;k at keith.so&gt;<p>September 30, 2016 at 02:00:00pm</p></header><div class="content"><p>I submitted a PR for the argument re-ordering here: https://github.com/apple/swift-package-manager/pull/715<br></p><p>--<br>Keith Smiley<br></p><p>On 09/20, Daniel Dunbar wrote:<br>&gt; &gt; On Sep 20, 2016, at 2:44 PM, Keith Smiley via swift-build-dev &lt;swift-build-dev at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Hey everyone,<br>&gt; &gt;<br>&gt; &gt; I noticed today that currently it doesn&#39;t seem possible to build to a macOS<br>&gt; &gt; target with a deployment target greater than 10.10 with swiftpm, since 10.10 is<br>&gt; &gt; currently hardcoded in the swiftpm source[0].<br>&gt; &gt;<br>&gt; &gt; This means that right now if you attempt to do something like:<br>&gt; &gt;<br>&gt; &gt; $ swift build --verbose -Xswiftc -target -Xswiftc x86_64-apple-macosx10.11<br>&gt; &gt;<br>&gt; &gt; You&#39;ll notice that this target is not sent to the first invocation of swiftc<br>&gt; &gt; (I&#39;m not sure if this is a problem or not):<br>&gt; &gt;<br>&gt; &gt; ```<br>&gt; &gt; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swiftc --driver-mode=swift -I /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/pm -L /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/pm -lPackageDescription -target x86_64-apple-macosx10.10 ...<br>&gt; &gt; ```<br>&gt; &gt;<br>&gt; &gt; And you&#39;ll see that the 10.11 target specification is overridden with the<br>&gt; &gt; default value when sent to swift-build-tool:<br>&gt; &gt;<br>&gt; &gt; ```<br>&gt; &gt; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift-build-tool -f ... -v /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swiftc ... -target x86_64-apple-macosx10.11 -target x86_64-apple-macosx10.10 ...<br>&gt; &gt; ```<br>&gt; &gt;<br>&gt; &gt; I have a few questions about this:<br>&gt; &gt;<br>&gt;<br>&gt; &lt;reordered your questions :) /&gt;<br>&gt;<br>&gt; &gt; Lastly if there has been any discussion about this previously I&#39;d love to see it!<br>&gt; &gt;<br>&gt;<br>&gt; This is covered partly in https://bugs.swift.org/browse/SR-2535, but there hasn&#39;t really been any discussion about how to fix it, other than that we know it is very broken and needs to be dealt with.<br>&gt;<br>&gt; We haven&#39;t really tackled the problem of what is the &quot;right&quot; way to handle configurable compiler arguments in general (this also just came up on swift-dev w.r.t. custom C defines), and its.<br>&gt;<br>&gt; &gt; - In the long term what&#39;s the plan for moving this out of being hard coded in<br>&gt; &gt;  swiftpm? If there is one, are there some starter tasks I could grab?<br>&gt;<br>&gt; Unfortunately, the honest answer is we don&#39;t really have one yet.<br>&gt;<br>&gt; The starter task is perhaps starting the discussion? We know we want to do something better than just arbitrary configurability through a &quot;build settings&quot; like model (which among other problems, doesn&#39;t compose well in a package-based world). We have some idea we want to have good modeling for flags which tie into important semantic concepts (like deployment targets), especially when they relate to the language, or the viability of particular packages or features. Beyond that, we don&#39;t have anything resembling a concrete design.<br>&gt;<br>&gt; &gt; - In the short term would it make sense for us to reorder the user&#39;s args vs the<br>&gt; &gt;  default args in the few[1] uses[2] of these hardcoded args?<br>&gt;<br>&gt; I would be fine with that, I can&#39;t think of a reason not to.<br>&gt;<br>&gt;  - Daniel<br>&gt;<br>&gt; &gt; [0]: https://github.com/apple/swift-package-manager/blob/57c5be1db1c1e12e089dff02241ffbce5722fb0e/Sources/Commands/UserToolchain.swift#L34-L39<br>&gt; &gt; [1]: https://github.com/apple/swift-package-manager/blob/64a4183e83f41e0c54791b03b86ab17f95fb93d4/Sources/Build/describe().swift#L41<br>&gt; &gt; [2]: https://github.com/apple/swift-package-manager/blob/64a4183e83f41e0c54791b03b86ab17f95fb93d4/Sources/Build/describe().swift#L76<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; Thanks for reading!<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; Keith Smiley<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-build-dev mailing list<br>&gt; &gt; swift-build-dev at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1b54c2d366bbc31b41cf7dcbc77324f9?s=50"></div><header><strong>swiftpm macOS target override</strong> from <string>Keith Smiley</string> &lt;k at keith.so&gt;<p>October  9, 2016 at 03:00:00pm</p></header><div class="content"><p>The flag ordering change is now, so for now if you pass platform target<br>overrides from the command line, it can be newer than the hard coded value.<br></p><p>https://github.com/apple/swift-package-manager/pull/715<br></p><p>--<br>Keith Smiley<br></p><p>On 09/20, Daniel Dunbar wrote:<br>&gt; &gt; On Sep 20, 2016, at 2:44 PM, Keith Smiley via swift-build-dev &lt;swift-build-dev at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Hey everyone,<br>&gt; &gt;<br>&gt; &gt; I noticed today that currently it doesn&#39;t seem possible to build to a macOS<br>&gt; &gt; target with a deployment target greater than 10.10 with swiftpm, since 10.10 is<br>&gt; &gt; currently hardcoded in the swiftpm source[0].<br>&gt; &gt;<br>&gt; &gt; This means that right now if you attempt to do something like:<br>&gt; &gt;<br>&gt; &gt; $ swift build --verbose -Xswiftc -target -Xswiftc x86_64-apple-macosx10.11<br>&gt; &gt;<br>&gt; &gt; You&#39;ll notice that this target is not sent to the first invocation of swiftc<br>&gt; &gt; (I&#39;m not sure if this is a problem or not):<br>&gt; &gt;<br>&gt; &gt; ```<br>&gt; &gt; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swiftc --driver-mode=swift -I /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/pm -L /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/pm -lPackageDescription -target x86_64-apple-macosx10.10 ...<br>&gt; &gt; ```<br>&gt; &gt;<br>&gt; &gt; And you&#39;ll see that the 10.11 target specification is overridden with the<br>&gt; &gt; default value when sent to swift-build-tool:<br>&gt; &gt;<br>&gt; &gt; ```<br>&gt; &gt; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift-build-tool -f ... -v /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swiftc ... -target x86_64-apple-macosx10.11 -target x86_64-apple-macosx10.10 ...<br>&gt; &gt; ```<br>&gt; &gt;<br>&gt; &gt; I have a few questions about this:<br>&gt; &gt;<br>&gt;<br>&gt; &lt;reordered your questions :) /&gt;<br>&gt;<br>&gt; &gt; Lastly if there has been any discussion about this previously I&#39;d love to see it!<br>&gt; &gt;<br>&gt;<br>&gt; This is covered partly in https://bugs.swift.org/browse/SR-2535, but there hasn&#39;t really been any discussion about how to fix it, other than that we know it is very broken and needs to be dealt with.<br>&gt;<br>&gt; We haven&#39;t really tackled the problem of what is the &quot;right&quot; way to handle configurable compiler arguments in general (this also just came up on swift-dev w.r.t. custom C defines), and its.<br>&gt;<br>&gt; &gt; - In the long term what&#39;s the plan for moving this out of being hard coded in<br>&gt; &gt;  swiftpm? If there is one, are there some starter tasks I could grab?<br>&gt;<br>&gt; Unfortunately, the honest answer is we don&#39;t really have one yet.<br>&gt;<br>&gt; The starter task is perhaps starting the discussion? We know we want to do something better than just arbitrary configurability through a &quot;build settings&quot; like model (which among other problems, doesn&#39;t compose well in a package-based world). We have some idea we want to have good modeling for flags which tie into important semantic concepts (like deployment targets), especially when they relate to the language, or the viability of particular packages or features. Beyond that, we don&#39;t have anything resembling a concrete design.<br>&gt;<br>&gt; &gt; - In the short term would it make sense for us to reorder the user&#39;s args vs the<br>&gt; &gt;  default args in the few[1] uses[2] of these hardcoded args?<br>&gt;<br>&gt; I would be fine with that, I can&#39;t think of a reason not to.<br>&gt;<br>&gt;  - Daniel<br>&gt;<br>&gt; &gt; [0]: https://github.com/apple/swift-package-manager/blob/57c5be1db1c1e12e089dff02241ffbce5722fb0e/Sources/Commands/UserToolchain.swift#L34-L39<br>&gt; &gt; [1]: https://github.com/apple/swift-package-manager/blob/64a4183e83f41e0c54791b03b86ab17f95fb93d4/Sources/Build/describe().swift#L41<br>&gt; &gt; [2]: https://github.com/apple/swift-package-manager/blob/64a4183e83f41e0c54791b03b86ab17f95fb93d4/Sources/Build/describe().swift#L76<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; Thanks for reading!<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; Keith Smiley<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-build-dev mailing list<br>&gt; &gt; swift-build-dev at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
