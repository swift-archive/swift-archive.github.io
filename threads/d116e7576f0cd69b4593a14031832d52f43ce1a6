<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4226542ea69d5b28efdf689104a49c6c?s=50"></div><header><strong>Testing fails in GYBUnicodeDataUtils.py</strong> from <string>Tom Gall</string> &lt;tom.gall at linaro.org&gt;<p>January  4, 2016 at 02:00:00pm</p></header><div class="content"><p>Building with: ./swift/utils/build-script -R -t --foundation<br></p><p>on Linux (gentoo amd64) fails with<br></p><p>+ /usr/bin/cmake --build<br>/home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64 -- -j4<br>SwiftUnitTests<br></p><p>[6/29] Generating UnicodeGraphemeBreakTest.cpp from<br>UnicodeGraphemeBreakTest.cpp.gyb with ptr size = 8<br></p><p>FAILED: cd /home/tgall/swift/swift/unittests/Basic &amp;&amp; /usr/bin/cmake<br>-E make_directory<br>/home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8<br>&amp;&amp; /home/tgall/swift/swift/utils/gyb --test<br>-DunicodeGraphemeBreakPropertyFile=/home/tgall/swift/swift/utils/UnicodeData/GraphemeBreakProperty.txt<br>-DunicodeGraphemeBreakTestFile=/home/tgall/swift/swift/utils/UnicodeData/GraphemeBreakTest.txt<br>-DCMAKE_SIZEOF_VOID_P=8 -o<br>/home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8/UnicodeGraphemeBreakTest.cpp.tmp<br>UnicodeGraphemeBreakTest.cpp.gyb &amp;&amp; /usr/bin/cmake -E<br>copy_if_different<br>/home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8/UnicodeGraphemeBreakTest.cpp.tmp<br>/home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8/UnicodeGraphemeBreakTest.cpp<br>&amp;&amp; /usr/bin/cmake -E remove<br>/home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8/UnicodeGraphemeBreakTest.cpp.tmp<br></p><p>Traceback (most recent call last):<br></p><p>  File &quot;/home/tgall/swift/swift/utils/gyb&quot;, line 3, in &lt;module&gt;<br>    gyb.main()<br>  File &quot;/home/tgall/swift/swift/utils/gyb.py&quot;, line 1071, in main<br>    args.target.write(executeTemplate(ast, args.line_directive, **bindings))<br>  File &quot;/home/tgall/swift/swift/utils/gyb.py&quot;, line 974, in executeTemplate<br>    ast.execute(executionContext)<br>  File &quot;/home/tgall/swift/swift/utils/gyb.py&quot;, line 591, in execute<br>    x.execute(context)<br>  File &quot;/home/tgall/swift/swift/utils/gyb.py&quot;, line 667, in execute<br>    result = eval(self.code, context.localBindings)<br>  File &quot;/home/tgall/swift/swift/unittests/Basic/UnicodeGraphemeBreakTest.cpp.gyb&quot;,<br>line 23, in &lt;module&gt;<br>    get_grapheme_cluster_break_tests_as_UTF8(unicodeGraphemeBreakTestFile)<br>  File &quot;/home/tgall/swift/swift/utils/GYBUnicodeDataUtils.py&quot;, line<br>553, in get_grapheme_cluster_break_tests_as_UTF8<br>    for line in f:<br>  File &quot;/usr/lib64/python2.7/codecs.py&quot;, line 687, in next<br>    return self.reader.next()<br>  File &quot;/usr/lib64/python2.7/codecs.py&quot;, line 618, in next<br>    line = self.readline()<br>  File &quot;/usr/lib64/python2.7/codecs.py&quot;, line 533, in readline<br>    data = self.read(readsize, firstline=True)<br>  File &quot;/usr/lib64/python2.7/codecs.py&quot;, line 480, in read<br>    newchars, decodedbytes = self.decode(data, self.errors)<br>UnicodeDecodeError: &#39;ascii&#39; codec can&#39;t decode byte 0xc3 in position<br>0: ordinal not in range(128)<br>[6/29] Building CXX object<br>unittests/Parse/CMakeFiles/SwiftParseTests.dir/LexerTests.cpp.o<br>ninja: build stopped: subcommand failed.<br></p><p>Ah yes ... the joys of python stack dumps...  anyway, tracing this a bit:<br></p><p>in swift/utils/GYBUnicodeDataUtils.py there is:<br></p><p>with codecs.open(grapheme_break_test_file_name,<br>encoding=sys.getfilesystemencoding(), errors=&#39;strict&#39;) as f:<br></p><p>It appears to be our offending bit of python code. Now my unicode &amp;<br>python foo isn&#39;t the strongest, but if I change what is passed as<br>encoding to : encoding=&#39;utf-8&#39;, the swift testcases seem to run quite<br>a bit better and end up reporting :<br></p><p>Testing Time: 65.82s<br>  Expected Passes    : 1748<br>  Expected Failures  : 83<br>  Unsupported Tests  : 585<br>-- check-swift-linux-x86_64 finished --<br>--- Finished tests for swift ---<br></p><p>Question is, is that little fix the &#39;right thing&#39; (TM) ?  If so happy<br>to submit this as my first &#39;lame&#39; patch.<br></p><p>Thanks<br></p><p>-- <br>Regards,<br>Tom<br></p><p>&quot;Where&#39;s the kaboom!? There was supposed to be an earth-shattering<br>kaboom!&quot; Marvin Martian<br>Director, Linaro Mobile Group<br>Tech Lead, GPGPU<br>Linaro.org │ Open source software for ARM SoCs<br>irc: tgall_foo | skype : tom_gall<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Testing fails in GYBUnicodeDataUtils.py</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>January  4, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Jan 4, 2016, at 12:40, Tom Gall via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Building with: ./swift/utils/build-script -R -t --foundation<br>&gt; <br>&gt; on Linux (gentoo amd64) fails with<br>&gt; <br>&gt; + /usr/bin/cmake --build<br>&gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64 -- -j4<br>&gt; SwiftUnitTests<br>&gt; <br>&gt; [6/29] Generating UnicodeGraphemeBreakTest.cpp from<br>&gt; UnicodeGraphemeBreakTest.cpp.gyb with ptr size = 8<br>&gt; <br>&gt; FAILED: cd /home/tgall/swift/swift/unittests/Basic &amp;&amp; /usr/bin/cmake<br>&gt; -E make_directory<br>&gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8<br>&gt; &amp;&amp; /home/tgall/swift/swift/utils/gyb --test<br>&gt; -DunicodeGraphemeBreakPropertyFile=/home/tgall/swift/swift/utils/UnicodeData/GraphemeBreakProperty.txt<br>&gt; -DunicodeGraphemeBreakTestFile=/home/tgall/swift/swift/utils/UnicodeData/GraphemeBreakTest.txt<br>&gt; -DCMAKE_SIZEOF_VOID_P=8 -o<br>&gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8/UnicodeGraphemeBreakTest.cpp.tmp<br>&gt; UnicodeGraphemeBreakTest.cpp.gyb &amp;&amp; /usr/bin/cmake -E<br>&gt; copy_if_different<br>&gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8/UnicodeGraphemeBreakTest.cpp.tmp<br>&gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8/UnicodeGraphemeBreakTest.cpp<br>&gt; &amp;&amp; /usr/bin/cmake -E remove<br>&gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8/UnicodeGraphemeBreakTest.cpp.tmp<br>&gt; <br>&gt; Traceback (most recent call last):<br>&gt; <br>&gt;  File &quot;/home/tgall/swift/swift/utils/gyb&quot;, line 3, in &lt;module&gt;<br>&gt;    gyb.main()<br>&gt;  File &quot;/home/tgall/swift/swift/utils/gyb.py&quot;, line 1071, in main<br>&gt;    args.target.write(executeTemplate(ast, args.line_directive, **bindings))<br>&gt;  File &quot;/home/tgall/swift/swift/utils/gyb.py&quot;, line 974, in executeTemplate<br>&gt;    ast.execute(executionContext)<br>&gt;  File &quot;/home/tgall/swift/swift/utils/gyb.py&quot;, line 591, in execute<br>&gt;    x.execute(context)<br>&gt;  File &quot;/home/tgall/swift/swift/utils/gyb.py&quot;, line 667, in execute<br>&gt;    result = eval(self.code, context.localBindings)<br>&gt;  File &quot;/home/tgall/swift/swift/unittests/Basic/UnicodeGraphemeBreakTest.cpp.gyb&quot;,<br>&gt; line 23, in &lt;module&gt;<br>&gt;    get_grapheme_cluster_break_tests_as_UTF8(unicodeGraphemeBreakTestFile)<br>&gt;  File &quot;/home/tgall/swift/swift/utils/GYBUnicodeDataUtils.py&quot;, line<br>&gt; 553, in get_grapheme_cluster_break_tests_as_UTF8<br>&gt;    for line in f:<br>&gt;  File &quot;/usr/lib64/python2.7/codecs.py&quot;, line 687, in next<br>&gt;    return self.reader.next()<br>&gt;  File &quot;/usr/lib64/python2.7/codecs.py&quot;, line 618, in next<br>&gt;    line = self.readline()<br>&gt;  File &quot;/usr/lib64/python2.7/codecs.py&quot;, line 533, in readline<br>&gt;    data = self.read(readsize, firstline=True)<br>&gt;  File &quot;/usr/lib64/python2.7/codecs.py&quot;, line 480, in read<br>&gt;    newchars, decodedbytes = self.decode(data, self.errors)<br>&gt; UnicodeDecodeError: &#39;ascii&#39; codec can&#39;t decode byte 0xc3 in position<br>&gt; 0: ordinal not in range(128)<br>&gt; [6/29] Building CXX object<br>&gt; unittests/Parse/CMakeFiles/SwiftParseTests.dir/LexerTests.cpp.o<br>&gt; ninja: build stopped: subcommand failed.<br>&gt; <br>&gt; Ah yes ... the joys of python stack dumps...  anyway, tracing this a bit:<br>&gt; <br>&gt; in swift/utils/GYBUnicodeDataUtils.py there is:<br>&gt; <br>&gt; with codecs.open(grapheme_break_test_file_name,<br>&gt; encoding=sys.getfilesystemencoding(), errors=&#39;strict&#39;) as f:<br>&gt; <br>&gt; It appears to be our offending bit of python code. Now my unicode &amp;<br>&gt; python foo isn&#39;t the strongest, but if I change what is passed as<br>&gt; encoding to : encoding=&#39;utf-8&#39;, the swift testcases seem to run quite<br>&gt; a bit better and end up reporting :<br>&gt; <br>&gt; Testing Time: 65.82s<br>&gt;  Expected Passes    : 1748<br>&gt;  Expected Failures  : 83<br>&gt;  Unsupported Tests  : 585<br>&gt; -- check-swift-linux-x86_64 finished --<br>&gt; --- Finished tests for swift ---<br>&gt; <br>&gt; Question is, is that little fix the &#39;right thing&#39; (TM) ?  If so happy<br>&gt; to submit this as my first &#39;lame&#39; patch.<br></p><p>Hi, Tom. That seems right to me: these files should always be UTF-8. And getting the build working on more platforms definitely isn&#39;t &quot;lame&quot;. :-) Please send us a pull request on GitHub!<br></p><p>Jordan<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14477c366d6ee4e41adf14837bc4f2f9?s=50"></div><header><strong>Testing fails in GYBUnicodeDataUtils.py</strong> from <string>Ryan Lovelett</string> &lt;swift-dev at ryan.lovelett.me&gt;<p>January  4, 2016 at 05:00:00pm</p></header><div class="content"><p>On Mon, Jan 4, 2016, at 03:40 PM, Tom Gall via swift-dev wrote:<br>&gt; Building with: ./swift/utils/build-script -R -t --foundation<br>&gt; <br>&gt; on Linux (gentoo amd64) fails with<br>&gt; <br>&gt; + /usr/bin/cmake --build<br>&gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64 -- -j4<br>&gt; SwiftUnitTests<br>&gt; <br>&gt; [6/29] Generating UnicodeGraphemeBreakTest.cpp from<br>&gt; UnicodeGraphemeBreakTest.cpp.gyb with ptr size = 8<br>&gt; <br>&gt; FAILED: cd /home/tgall/swift/swift/unittests/Basic &amp;&amp; /usr/bin/cmake<br>&gt; -E make_directory<br>&gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8<br>&gt; &amp;&amp; /home/tgall/swift/swift/utils/gyb --test<br>&gt; -DunicodeGraphemeBreakPropertyFile=/home/tgall/swift/swift/utils/UnicodeData/GraphemeBreakProperty.txt<br>&gt; -DunicodeGraphemeBreakTestFile=/home/tgall/swift/swift/utils/UnicodeData/GraphemeBreakTest.txt<br>&gt; -DCMAKE_SIZEOF_VOID_P=8 -o<br>&gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8/UnicodeGraphemeBreakTest.cpp.tmp<br>&gt; UnicodeGraphemeBreakTest.cpp.gyb &amp;&amp; /usr/bin/cmake -E<br>&gt; copy_if_different<br>&gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8/UnicodeGraphemeBreakTest.cpp.tmp<br>&gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8/UnicodeGraphemeBreakTest.cpp<br>&gt; &amp;&amp; /usr/bin/cmake -E remove<br>&gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8/UnicodeGraphemeBreakTest.cpp.tmp<br>&gt; <br>&gt; Traceback (most recent call last):<br>&gt; <br>&gt;   File &quot;/home/tgall/swift/swift/utils/gyb&quot;, line 3, in &lt;module&gt;<br>&gt;     gyb.main()<br>&gt;   File &quot;/home/tgall/swift/swift/utils/gyb.py&quot;, line 1071, in main<br>&gt;     args.target.write(executeTemplate(ast, args.line_directive,<br>&gt;     **bindings))<br>&gt;   File &quot;/home/tgall/swift/swift/utils/gyb.py&quot;, line 974, in<br>&gt;   executeTemplate<br>&gt;     ast.execute(executionContext)<br>&gt;   File &quot;/home/tgall/swift/swift/utils/gyb.py&quot;, line 591, in execute<br>&gt;     x.execute(context)<br>&gt;   File &quot;/home/tgall/swift/swift/utils/gyb.py&quot;, line 667, in execute<br>&gt;     result = eval(self.code, context.localBindings)<br>&gt;   File<br>&gt;   &quot;/home/tgall/swift/swift/unittests/Basic/UnicodeGraphemeBreakTest.cpp.gyb&quot;,<br>&gt; line 23, in &lt;module&gt;<br>&gt;     get_grapheme_cluster_break_tests_as_UTF8(unicodeGraphemeBreakTestFile)<br>&gt;   File &quot;/home/tgall/swift/swift/utils/GYBUnicodeDataUtils.py&quot;, line<br>&gt; 553, in get_grapheme_cluster_break_tests_as_UTF8<br>&gt;     for line in f:<br>&gt;   File &quot;/usr/lib64/python2.7/codecs.py&quot;, line 687, in next<br>&gt;     return self.reader.next()<br>&gt;   File &quot;/usr/lib64/python2.7/codecs.py&quot;, line 618, in next<br>&gt;     line = self.readline()<br>&gt;   File &quot;/usr/lib64/python2.7/codecs.py&quot;, line 533, in readline<br>&gt;     data = self.read(readsize, firstline=True)<br>&gt;   File &quot;/usr/lib64/python2.7/codecs.py&quot;, line 480, in read<br>&gt;     newchars, decodedbytes = self.decode(data, self.errors)<br>&gt; UnicodeDecodeError: &#39;ascii&#39; codec can&#39;t decode byte 0xc3 in position<br>&gt; 0: ordinal not in range(128)<br>&gt; [6/29] Building CXX object<br>&gt; unittests/Parse/CMakeFiles/SwiftParseTests.dir/LexerTests.cpp.o<br>&gt; ninja: build stopped: subcommand failed.<br>&gt; <br>&gt; Ah yes ... the joys of python stack dumps...  anyway, tracing this a bit:<br>&gt; <br>&gt; in swift/utils/GYBUnicodeDataUtils.py there is:<br>&gt; <br>&gt; with codecs.open(grapheme_break_test_file_name,<br>&gt; encoding=sys.getfilesystemencoding(), errors=&#39;strict&#39;) as f:<br>&gt; <br></p><p>I wrote that code and patch (see:<br>https://github.com/apple/swift/commit/7dbb4127f55022bca7b191d448652b5decf8626e).<br>The change was in service of adding Python 3 support to GYB. So first of<br>all let me say: I&#39;m sorry. 😏<br></p><p>Open up your python interpreter and figure out what your filesystem is<br>reporting its encoding to be (e.g., `sys.getfilesystemencoding()`). On<br>OS X and my copy of Arch linux it reports `&#39;utf-8&#39;` which is why it<br>doesn&#39;t have an issue. Worst case scenario we can just force it to be<br>`with codecs.open(grapheme_break_test_file_name, encoding=&#39;utf-8&#39;,<br>errors=&#39;strict&#39;) as f:` but I went with the filesystem encoding because<br>hopefully it is always UTF-8.<br></p><p>&gt; It appears to be our offending bit of python code. Now my unicode &amp;<br>&gt; python foo isn&#39;t the strongest, but if I change what is passed as<br>&gt; encoding to : encoding=&#39;utf-8&#39;, the swift testcases seem to run quite<br>&gt; a bit better and end up reporting :<br>&gt; <br>&gt; Testing Time: 65.82s<br>&gt;   Expected Passes    : 1748<br>&gt;   Expected Failures  : 83<br>&gt;   Unsupported Tests  : 585<br>&gt; -- check-swift-linux-x86_64 finished --<br>&gt; --- Finished tests for swift ---<br>&gt; <br>&gt; Question is, is that little fix the &#39;right thing&#39; (TM) ?  If so happy<br>&gt; to submit this as my first &#39;lame&#39; patch.<br>&gt; <br>&gt; Thanks<br>&gt; <br>&gt; -- <br>&gt; Regards,<br>&gt; Tom<br>&gt; <br>&gt; &quot;Where&#39;s the kaboom!? There was supposed to be an earth-shattering<br>&gt; kaboom!&quot; Marvin Martian<br>&gt; Director, Linaro Mobile Group<br>&gt; Tech Lead, GPGPU<br>&gt; Linaro.org │ Open source software for ARM SoCs<br>&gt; irc: tgall_foo | skype : tom_gall<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14477c366d6ee4e41adf14837bc4f2f9?s=50"></div><header><strong>Testing fails in GYBUnicodeDataUtils.py</strong> from <string>Ryan Lovelett</string> &lt;swift-dev at ryan.lovelett.me&gt;<p>January  4, 2016 at 05:00:00pm</p></header><div class="content"><p>I wonder what the value of LC_ALL, LC_CTYPE, LANG are set to in your<br>environment? On my system LC_CTYPE=en_US.UTF-8 and LANG=en_US.UTF-8. My<br>understand of Python on Linux is that it reads these environment<br>variables to set `sys.getfilesystemencoding()`. This has to do with<br>configuring Python to consistently read filenames and such with the way<br>the OS is presenting them.<br></p><p>https://docs.python.org/2/library/sys.html#sys.getfilesystemencoding<br></p><p>On Mon, Jan 4, 2016, at 05:12 PM, Ryan Lovelett via swift-dev wrote:<br>&gt; On Mon, Jan 4, 2016, at 03:40 PM, Tom Gall via swift-dev wrote:<br>&gt; &gt; Building with: ./swift/utils/build-script -R -t --foundation<br>&gt; &gt; <br>&gt; &gt; on Linux (gentoo amd64) fails with<br>&gt; &gt; <br>&gt; &gt; + /usr/bin/cmake --build<br>&gt; &gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64 -- -j4<br>&gt; &gt; SwiftUnitTests<br>&gt; &gt; <br>&gt; &gt; [6/29] Generating UnicodeGraphemeBreakTest.cpp from<br>&gt; &gt; UnicodeGraphemeBreakTest.cpp.gyb with ptr size = 8<br>&gt; &gt; <br>&gt; &gt; FAILED: cd /home/tgall/swift/swift/unittests/Basic &amp;&amp; /usr/bin/cmake<br>&gt; &gt; -E make_directory<br>&gt; &gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8<br>&gt; &gt; &amp;&amp; /home/tgall/swift/swift/utils/gyb --test<br>&gt; &gt; -DunicodeGraphemeBreakPropertyFile=/home/tgall/swift/swift/utils/UnicodeData/GraphemeBreakProperty.txt<br>&gt; &gt; -DunicodeGraphemeBreakTestFile=/home/tgall/swift/swift/utils/UnicodeData/GraphemeBreakTest.txt<br>&gt; &gt; -DCMAKE_SIZEOF_VOID_P=8 -o<br>&gt; &gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8/UnicodeGraphemeBreakTest.cpp.tmp<br>&gt; &gt; UnicodeGraphemeBreakTest.cpp.gyb &amp;&amp; /usr/bin/cmake -E<br>&gt; &gt; copy_if_different<br>&gt; &gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8/UnicodeGraphemeBreakTest.cpp.tmp<br>&gt; &gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8/UnicodeGraphemeBreakTest.cpp<br>&gt; &gt; &amp;&amp; /usr/bin/cmake -E remove<br>&gt; &gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8/UnicodeGraphemeBreakTest.cpp.tmp<br>&gt; &gt; <br>&gt; &gt; Traceback (most recent call last):<br>&gt; &gt; <br>&gt; &gt;   File &quot;/home/tgall/swift/swift/utils/gyb&quot;, line 3, in &lt;module&gt;<br>&gt; &gt;     gyb.main()<br>&gt; &gt;   File &quot;/home/tgall/swift/swift/utils/gyb.py&quot;, line 1071, in main<br>&gt; &gt;     args.target.write(executeTemplate(ast, args.line_directive,<br>&gt; &gt;     **bindings))<br>&gt; &gt;   File &quot;/home/tgall/swift/swift/utils/gyb.py&quot;, line 974, in<br>&gt; &gt;   executeTemplate<br>&gt; &gt;     ast.execute(executionContext)<br>&gt; &gt;   File &quot;/home/tgall/swift/swift/utils/gyb.py&quot;, line 591, in execute<br>&gt; &gt;     x.execute(context)<br>&gt; &gt;   File &quot;/home/tgall/swift/swift/utils/gyb.py&quot;, line 667, in execute<br>&gt; &gt;     result = eval(self.code, context.localBindings)<br>&gt; &gt;   File<br>&gt; &gt;   &quot;/home/tgall/swift/swift/unittests/Basic/UnicodeGraphemeBreakTest.cpp.gyb&quot;,<br>&gt; &gt; line 23, in &lt;module&gt;<br>&gt; &gt;     get_grapheme_cluster_break_tests_as_UTF8(unicodeGraphemeBreakTestFile)<br>&gt; &gt;   File &quot;/home/tgall/swift/swift/utils/GYBUnicodeDataUtils.py&quot;, line<br>&gt; &gt; 553, in get_grapheme_cluster_break_tests_as_UTF8<br>&gt; &gt;     for line in f:<br>&gt; &gt;   File &quot;/usr/lib64/python2.7/codecs.py&quot;, line 687, in next<br>&gt; &gt;     return self.reader.next()<br>&gt; &gt;   File &quot;/usr/lib64/python2.7/codecs.py&quot;, line 618, in next<br>&gt; &gt;     line = self.readline()<br>&gt; &gt;   File &quot;/usr/lib64/python2.7/codecs.py&quot;, line 533, in readline<br>&gt; &gt;     data = self.read(readsize, firstline=True)<br>&gt; &gt;   File &quot;/usr/lib64/python2.7/codecs.py&quot;, line 480, in read<br>&gt; &gt;     newchars, decodedbytes = self.decode(data, self.errors)<br>&gt; &gt; UnicodeDecodeError: &#39;ascii&#39; codec can&#39;t decode byte 0xc3 in position<br>&gt; &gt; 0: ordinal not in range(128)<br>&gt; &gt; [6/29] Building CXX object<br>&gt; &gt; unittests/Parse/CMakeFiles/SwiftParseTests.dir/LexerTests.cpp.o<br>&gt; &gt; ninja: build stopped: subcommand failed.<br>&gt; &gt; <br>&gt; &gt; Ah yes ... the joys of python stack dumps...  anyway, tracing this a bit:<br>&gt; &gt; <br>&gt; &gt; in swift/utils/GYBUnicodeDataUtils.py there is:<br>&gt; &gt; <br>&gt; &gt; with codecs.open(grapheme_break_test_file_name,<br>&gt; &gt; encoding=sys.getfilesystemencoding(), errors=&#39;strict&#39;) as f:<br>&gt; &gt; <br>&gt; <br>&gt; I wrote that code and patch (see:<br>&gt; https://github.com/apple/swift/commit/7dbb4127f55022bca7b191d448652b5decf8626e).<br>&gt; The change was in service of adding Python 3 support to GYB. So first of<br>&gt; all let me say: I&#39;m sorry. 😏<br>&gt; <br>&gt; Open up your python interpreter and figure out what your filesystem is<br>&gt; reporting its encoding to be (e.g., `sys.getfilesystemencoding()`). On<br>&gt; OS X and my copy of Arch linux it reports `&#39;utf-8&#39;` which is why it<br>&gt; doesn&#39;t have an issue. Worst case scenario we can just force it to be<br>&gt; `with codecs.open(grapheme_break_test_file_name, encoding=&#39;utf-8&#39;,<br>&gt; errors=&#39;strict&#39;) as f:` but I went with the filesystem encoding because<br>&gt; hopefully it is always UTF-8.<br>&gt; <br>&gt; &gt; It appears to be our offending bit of python code. Now my unicode &amp;<br>&gt; &gt; python foo isn&#39;t the strongest, but if I change what is passed as<br>&gt; &gt; encoding to : encoding=&#39;utf-8&#39;, the swift testcases seem to run quite<br>&gt; &gt; a bit better and end up reporting :<br>&gt; &gt; <br>&gt; &gt; Testing Time: 65.82s<br>&gt; &gt;   Expected Passes    : 1748<br>&gt; &gt;   Expected Failures  : 83<br>&gt; &gt;   Unsupported Tests  : 585<br>&gt; &gt; -- check-swift-linux-x86_64 finished --<br>&gt; &gt; --- Finished tests for swift ---<br>&gt; &gt; <br>&gt; &gt; Question is, is that little fix the &#39;right thing&#39; (TM) ?  If so happy<br>&gt; &gt; to submit this as my first &#39;lame&#39; patch.<br>&gt; &gt; <br>&gt; &gt; Thanks<br>&gt; &gt; <br>&gt; &gt; -- <br>&gt; &gt; Regards,<br>&gt; &gt; Tom<br>&gt; &gt; <br>&gt; &gt; &quot;Where&#39;s the kaboom!? There was supposed to be an earth-shattering<br>&gt; &gt; kaboom!&quot; Marvin Martian<br>&gt; &gt; Director, Linaro Mobile Group<br>&gt; &gt; Tech Lead, GPGPU<br>&gt; &gt; Linaro.org │ Open source software for ARM SoCs<br>&gt; &gt; irc: tgall_foo | skype : tom_gall<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-dev mailing list<br>&gt; &gt; swift-dev at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4226542ea69d5b28efdf689104a49c6c?s=50"></div><header><strong>Testing fails in GYBUnicodeDataUtils.py</strong> from <string>Tom Gall</string> &lt;tom.gall at linaro.org&gt;<p>January  4, 2016 at 04:00:00pm</p></header><div class="content"><p>Hi Ryan,<br></p><p>In my case I&#39;m on Python 2.7.  Your comment is interesting as I was<br>just tracking down why python-config --libs and python-config<br>--includes doesn&#39;t seem to be used to determine what is the system<br>python install. I was just starting to trace through the build tool to<br>figure out how build-script works it&#39;s initial magic.<br></p><p>In my case I have both python 3.4 and 2.7 installed but python 2.7 is<br>the system default.  This ends up causing some interesting brand of<br>hurt, when trying to build swift&#39;s lldb. (Test Case<br>&#39;TestNSTimer.test_timerTickOnce&#39; is freezing so was looking to debug<br>that)<br></p><p>To answer some of your questions:<br></p><p>tgall at mars ~/swift $ locale<br></p><p>LANG=en_US<br>LC_CTYPE=C<br>LC_NUMERIC=&quot;en_US&quot;<br>LC_TIME=&quot;en_US&quot;<br>LC_COLLATE=&quot;en_US&quot;<br>LC_MONETARY=&quot;en_US&quot;<br>LC_MESSAGES=&quot;en_US&quot;<br>LC_PAPER=&quot;en_US&quot;<br>LC_NAME=&quot;en_US&quot;<br>LC_ADDRESS=&quot;en_US&quot;<br>LC_TELEPHONE=&quot;en_US&quot;<br>LC_MEASUREMENT=&quot;en_US&quot;<br>LC_IDENTIFICATION=&quot;en_US&quot;<br>LC_ALL=<br></p><p>&gt;&gt;&gt; import sys<br>&gt;&gt;&gt; x=sys.getfilesystemencoding()<br>&gt;&gt;&gt; print x<br>ANSI_X3.4-1968<br></p><p>That explains some things :-)<br></p><p>On Mon, Jan 4, 2016 at 4:12 PM, Ryan Lovelett via swift-dev<br>&lt;swift-dev at swift.org&gt; wrote:<br>&gt; On Mon, Jan 4, 2016, at 03:40 PM, Tom Gall via swift-dev wrote:<br>&gt;&gt; Building with: ./swift/utils/build-script -R -t --foundation<br>&gt;&gt;<br>&gt;&gt; on Linux (gentoo amd64) fails with<br>&gt;&gt;<br>&gt;&gt; + /usr/bin/cmake --build<br>&gt;&gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64 -- -j4<br>&gt;&gt; SwiftUnitTests<br>&gt;&gt;<br>&gt;&gt; [6/29] Generating UnicodeGraphemeBreakTest.cpp from<br>&gt;&gt; UnicodeGraphemeBreakTest.cpp.gyb with ptr size = 8<br>&gt;&gt;<br>&gt;&gt; FAILED: cd /home/tgall/swift/swift/unittests/Basic &amp;&amp; /usr/bin/cmake<br>&gt;&gt; -E make_directory<br>&gt;&gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8<br>&gt;&gt; &amp;&amp; /home/tgall/swift/swift/utils/gyb --test<br>&gt;&gt; -DunicodeGraphemeBreakPropertyFile=/home/tgall/swift/swift/utils/UnicodeData/GraphemeBreakProperty.txt<br>&gt;&gt; -DunicodeGraphemeBreakTestFile=/home/tgall/swift/swift/utils/UnicodeData/GraphemeBreakTest.txt<br>&gt;&gt; -DCMAKE_SIZEOF_VOID_P=8 -o<br>&gt;&gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8/UnicodeGraphemeBreakTest.cpp.tmp<br>&gt;&gt; UnicodeGraphemeBreakTest.cpp.gyb &amp;&amp; /usr/bin/cmake -E<br>&gt;&gt; copy_if_different<br>&gt;&gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8/UnicodeGraphemeBreakTest.cpp.tmp<br>&gt;&gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8/UnicodeGraphemeBreakTest.cpp<br>&gt;&gt; &amp;&amp; /usr/bin/cmake -E remove<br>&gt;&gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8/UnicodeGraphemeBreakTest.cpp.tmp<br>&gt;&gt;<br>&gt;&gt; Traceback (most recent call last):<br>&gt;&gt;<br>&gt;&gt;   File &quot;/home/tgall/swift/swift/utils/gyb&quot;, line 3, in &lt;module&gt;<br>&gt;&gt;     gyb.main()<br>&gt;&gt;   File &quot;/home/tgall/swift/swift/utils/gyb.py&quot;, line 1071, in main<br>&gt;&gt;     args.target.write(executeTemplate(ast, args.line_directive,<br>&gt;&gt;     **bindings))<br>&gt;&gt;   File &quot;/home/tgall/swift/swift/utils/gyb.py&quot;, line 974, in<br>&gt;&gt;   executeTemplate<br>&gt;&gt;     ast.execute(executionContext)<br>&gt;&gt;   File &quot;/home/tgall/swift/swift/utils/gyb.py&quot;, line 591, in execute<br>&gt;&gt;     x.execute(context)<br>&gt;&gt;   File &quot;/home/tgall/swift/swift/utils/gyb.py&quot;, line 667, in execute<br>&gt;&gt;     result = eval(self.code, context.localBindings)<br>&gt;&gt;   File<br>&gt;&gt;   &quot;/home/tgall/swift/swift/unittests/Basic/UnicodeGraphemeBreakTest.cpp.gyb&quot;,<br>&gt;&gt; line 23, in &lt;module&gt;<br>&gt;&gt;     get_grapheme_cluster_break_tests_as_UTF8(unicodeGraphemeBreakTestFile)<br>&gt;&gt;   File &quot;/home/tgall/swift/swift/utils/GYBUnicodeDataUtils.py&quot;, line<br>&gt;&gt; 553, in get_grapheme_cluster_break_tests_as_UTF8<br>&gt;&gt;     for line in f:<br>&gt;&gt;   File &quot;/usr/lib64/python2.7/codecs.py&quot;, line 687, in next<br>&gt;&gt;     return self.reader.next()<br>&gt;&gt;   File &quot;/usr/lib64/python2.7/codecs.py&quot;, line 618, in next<br>&gt;&gt;     line = self.readline()<br>&gt;&gt;   File &quot;/usr/lib64/python2.7/codecs.py&quot;, line 533, in readline<br>&gt;&gt;     data = self.read(readsize, firstline=True)<br>&gt;&gt;   File &quot;/usr/lib64/python2.7/codecs.py&quot;, line 480, in read<br>&gt;&gt;     newchars, decodedbytes = self.decode(data, self.errors)<br>&gt;&gt; UnicodeDecodeError: &#39;ascii&#39; codec can&#39;t decode byte 0xc3 in position<br>&gt;&gt; 0: ordinal not in range(128)<br>&gt;&gt; [6/29] Building CXX object<br>&gt;&gt; unittests/Parse/CMakeFiles/SwiftParseTests.dir/LexerTests.cpp.o<br>&gt;&gt; ninja: build stopped: subcommand failed.<br>&gt;&gt;<br>&gt;&gt; Ah yes ... the joys of python stack dumps...  anyway, tracing this a bit:<br>&gt;&gt;<br>&gt;&gt; in swift/utils/GYBUnicodeDataUtils.py there is:<br>&gt;&gt;<br>&gt;&gt; with codecs.open(grapheme_break_test_file_name,<br>&gt;&gt; encoding=sys.getfilesystemencoding(), errors=&#39;strict&#39;) as f:<br>&gt;&gt;<br>&gt;<br>&gt; I wrote that code and patch (see:<br>&gt; https://github.com/apple/swift/commit/7dbb4127f55022bca7b191d448652b5decf8626e).<br>&gt; The change was in service of adding Python 3 support to GYB. So first of<br>&gt; all let me say: I&#39;m sorry. 😏<br>&gt;<br>&gt; Open up your python interpreter and figure out what your filesystem is<br>&gt; reporting its encoding to be (e.g., `sys.getfilesystemencoding()`). On<br>&gt; OS X and my copy of Arch linux it reports `&#39;utf-8&#39;` which is why it<br>&gt; doesn&#39;t have an issue. Worst case scenario we can just force it to be<br>&gt; `with codecs.open(grapheme_break_test_file_name, encoding=&#39;utf-8&#39;,<br>&gt; errors=&#39;strict&#39;) as f:` but I went with the filesystem encoding because<br>&gt; hopefully it is always UTF-8.<br>&gt;<br>&gt;&gt; It appears to be our offending bit of python code. Now my unicode &amp;<br>&gt;&gt; python foo isn&#39;t the strongest, but if I change what is passed as<br>&gt;&gt; encoding to : encoding=&#39;utf-8&#39;, the swift testcases seem to run quite<br>&gt;&gt; a bit better and end up reporting :<br>&gt;&gt;<br>&gt;&gt; Testing Time: 65.82s<br>&gt;&gt;   Expected Passes    : 1748<br>&gt;&gt;   Expected Failures  : 83<br>&gt;&gt;   Unsupported Tests  : 585<br>&gt;&gt; -- check-swift-linux-x86_64 finished --<br>&gt;&gt; --- Finished tests for swift ---<br>&gt;&gt;<br>&gt;&gt; Question is, is that little fix the &#39;right thing&#39; (TM) ?  If so happy<br>&gt;&gt; to submit this as my first &#39;lame&#39; patch.<br>&gt;&gt;<br>&gt;&gt; Thanks<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Regards,<br>&gt;&gt; Tom<br>&gt;&gt;<br>&gt;&gt; &quot;Where&#39;s the kaboom!? There was supposed to be an earth-shattering<br>&gt;&gt; kaboom!&quot; Marvin Martian<br>&gt;&gt; Director, Linaro Mobile Group<br>&gt;&gt; Tech Lead, GPGPU<br>&gt;&gt; Linaro.org │ Open source software for ARM SoCs<br>&gt;&gt; irc: tgall_foo | skype : tom_gall<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-dev mailing list<br>&gt;&gt; swift-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p><br></p><p>-- <br>Regards,<br>Tom<br></p><p>&quot;Where&#39;s the kaboom!? There was supposed to be an earth-shattering<br>kaboom!&quot; Marvin Martian<br>Director, Linaro Mobile Group<br>Tech Lead, GPGPU<br>Linaro.org │ Open source software for ARM SoCs<br>irc: tgall_foo | skype : tom_gall<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14477c366d6ee4e41adf14837bc4f2f9?s=50"></div><header><strong>Testing fails in GYBUnicodeDataUtils.py</strong> from <string>Ryan Lovelett</string> &lt;swift-dev at ryan.lovelett.me&gt;<p>January  4, 2016 at 05:00:00pm</p></header><div class="content"><p>I would suggest setting the environment variables and re-running but<br>that is just my opinion.<br></p><p>I went through many of the same issues on Arch as well. Arch uses Python<br>2.7.11 and Python 3.5.1; with 3.5.1 being default.<br></p><p>I can _maybe_ give you a clue on the lldb issue. Check out SR-14 [1]<br>which links to the upstream LLDB Bug 25744 [2]. That report seems to<br>indicate there is a known bug compiling on Gentoo. They&#39;ve even created<br>a specific bug Bug 25866 [3] which Bug 25744 depends on to track fixing<br>it in Gentoo.<br></p><p>Unfortunately, it seems that the experimental patch submitted there<br>(which I use to build on Arch) seems to only work on Arch. However,<br>maybe your just the person to fix that bug! Anyways food for thought.<br>Happy compiling. 🍻<br></p><p>[1] https://bugs.swift.org/browse/SR-14<br>[2] https://llvm.org/bugs/show_bug.cgi?id=25744<br>[3] https://llvm.org/bugs/show_bug.cgi?id=25866<br></p><p>On Mon, Jan 4, 2016, at 05:29 PM, Tom Gall wrote:<br>&gt; Hi Ryan,<br>&gt; <br>&gt; In my case I&#39;m on Python 2.7.  Your comment is interesting as I was<br>&gt; just tracking down why python-config --libs and python-config<br>&gt; --includes doesn&#39;t seem to be used to determine what is the system<br>&gt; python install. I was just starting to trace through the build tool to<br>&gt; figure out how build-script works it&#39;s initial magic.<br>&gt; <br>&gt; In my case I have both python 3.4 and 2.7 installed but python 2.7 is<br>&gt; the system default.  This ends up causing some interesting brand of<br>&gt; hurt, when trying to build swift&#39;s lldb. (Test Case<br>&gt; &#39;TestNSTimer.test_timerTickOnce&#39; is freezing so was looking to debug<br>&gt; that)<br>&gt; <br>&gt; To answer some of your questions:<br>&gt; <br>&gt; tgall at mars ~/swift $ locale<br>&gt; <br>&gt; LANG=en_US<br>&gt; LC_CTYPE=C<br>&gt; LC_NUMERIC=&quot;en_US&quot;<br>&gt; LC_TIME=&quot;en_US&quot;<br>&gt; LC_COLLATE=&quot;en_US&quot;<br>&gt; LC_MONETARY=&quot;en_US&quot;<br>&gt; LC_MESSAGES=&quot;en_US&quot;<br>&gt; LC_PAPER=&quot;en_US&quot;<br>&gt; LC_NAME=&quot;en_US&quot;<br>&gt; LC_ADDRESS=&quot;en_US&quot;<br>&gt; LC_TELEPHONE=&quot;en_US&quot;<br>&gt; LC_MEASUREMENT=&quot;en_US&quot;<br>&gt; LC_IDENTIFICATION=&quot;en_US&quot;<br>&gt; LC_ALL=<br>&gt; <br>&gt; &gt;&gt;&gt; import sys<br>&gt; &gt;&gt;&gt; x=sys.getfilesystemencoding()<br>&gt; &gt;&gt;&gt; print x<br>&gt; ANSI_X3.4-1968<br>&gt; <br>&gt; That explains some things :-)<br>&gt; <br>&gt; On Mon, Jan 4, 2016 at 4:12 PM, Ryan Lovelett via swift-dev<br>&gt; &lt;swift-dev at swift.org&gt; wrote:<br>&gt; &gt; On Mon, Jan 4, 2016, at 03:40 PM, Tom Gall via swift-dev wrote:<br>&gt; &gt;&gt; Building with: ./swift/utils/build-script -R -t --foundation<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; on Linux (gentoo amd64) fails with<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; + /usr/bin/cmake --build<br>&gt; &gt;&gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64 -- -j4<br>&gt; &gt;&gt; SwiftUnitTests<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; [6/29] Generating UnicodeGraphemeBreakTest.cpp from<br>&gt; &gt;&gt; UnicodeGraphemeBreakTest.cpp.gyb with ptr size = 8<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; FAILED: cd /home/tgall/swift/swift/unittests/Basic &amp;&amp; /usr/bin/cmake<br>&gt; &gt;&gt; -E make_directory<br>&gt; &gt;&gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8<br>&gt; &gt;&gt; &amp;&amp; /home/tgall/swift/swift/utils/gyb --test<br>&gt; &gt;&gt; -DunicodeGraphemeBreakPropertyFile=/home/tgall/swift/swift/utils/UnicodeData/GraphemeBreakProperty.txt<br>&gt; &gt;&gt; -DunicodeGraphemeBreakTestFile=/home/tgall/swift/swift/utils/UnicodeData/GraphemeBreakTest.txt<br>&gt; &gt;&gt; -DCMAKE_SIZEOF_VOID_P=8 -o<br>&gt; &gt;&gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8/UnicodeGraphemeBreakTest.cpp.tmp<br>&gt; &gt;&gt; UnicodeGraphemeBreakTest.cpp.gyb &amp;&amp; /usr/bin/cmake -E<br>&gt; &gt;&gt; copy_if_different<br>&gt; &gt;&gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8/UnicodeGraphemeBreakTest.cpp.tmp<br>&gt; &gt;&gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8/UnicodeGraphemeBreakTest.cpp<br>&gt; &gt;&gt; &amp;&amp; /usr/bin/cmake -E remove<br>&gt; &gt;&gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8/UnicodeGraphemeBreakTest.cpp.tmp<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Traceback (most recent call last):<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;   File &quot;/home/tgall/swift/swift/utils/gyb&quot;, line 3, in &lt;module&gt;<br>&gt; &gt;&gt;     gyb.main()<br>&gt; &gt;&gt;   File &quot;/home/tgall/swift/swift/utils/gyb.py&quot;, line 1071, in main<br>&gt; &gt;&gt;     args.target.write(executeTemplate(ast, args.line_directive,<br>&gt; &gt;&gt;     **bindings))<br>&gt; &gt;&gt;   File &quot;/home/tgall/swift/swift/utils/gyb.py&quot;, line 974, in<br>&gt; &gt;&gt;   executeTemplate<br>&gt; &gt;&gt;     ast.execute(executionContext)<br>&gt; &gt;&gt;   File &quot;/home/tgall/swift/swift/utils/gyb.py&quot;, line 591, in execute<br>&gt; &gt;&gt;     x.execute(context)<br>&gt; &gt;&gt;   File &quot;/home/tgall/swift/swift/utils/gyb.py&quot;, line 667, in execute<br>&gt; &gt;&gt;     result = eval(self.code, context.localBindings)<br>&gt; &gt;&gt;   File<br>&gt; &gt;&gt;   &quot;/home/tgall/swift/swift/unittests/Basic/UnicodeGraphemeBreakTest.cpp.gyb&quot;,<br>&gt; &gt;&gt; line 23, in &lt;module&gt;<br>&gt; &gt;&gt;     get_grapheme_cluster_break_tests_as_UTF8(unicodeGraphemeBreakTestFile)<br>&gt; &gt;&gt;   File &quot;/home/tgall/swift/swift/utils/GYBUnicodeDataUtils.py&quot;, line<br>&gt; &gt;&gt; 553, in get_grapheme_cluster_break_tests_as_UTF8<br>&gt; &gt;&gt;     for line in f:<br>&gt; &gt;&gt;   File &quot;/usr/lib64/python2.7/codecs.py&quot;, line 687, in next<br>&gt; &gt;&gt;     return self.reader.next()<br>&gt; &gt;&gt;   File &quot;/usr/lib64/python2.7/codecs.py&quot;, line 618, in next<br>&gt; &gt;&gt;     line = self.readline()<br>&gt; &gt;&gt;   File &quot;/usr/lib64/python2.7/codecs.py&quot;, line 533, in readline<br>&gt; &gt;&gt;     data = self.read(readsize, firstline=True)<br>&gt; &gt;&gt;   File &quot;/usr/lib64/python2.7/codecs.py&quot;, line 480, in read<br>&gt; &gt;&gt;     newchars, decodedbytes = self.decode(data, self.errors)<br>&gt; &gt;&gt; UnicodeDecodeError: &#39;ascii&#39; codec can&#39;t decode byte 0xc3 in position<br>&gt; &gt;&gt; 0: ordinal not in range(128)<br>&gt; &gt;&gt; [6/29] Building CXX object<br>&gt; &gt;&gt; unittests/Parse/CMakeFiles/SwiftParseTests.dir/LexerTests.cpp.o<br>&gt; &gt;&gt; ninja: build stopped: subcommand failed.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Ah yes ... the joys of python stack dumps...  anyway, tracing this a bit:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; in swift/utils/GYBUnicodeDataUtils.py there is:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; with codecs.open(grapheme_break_test_file_name,<br>&gt; &gt;&gt; encoding=sys.getfilesystemencoding(), errors=&#39;strict&#39;) as f:<br>&gt; &gt;&gt;<br>&gt; &gt;<br>&gt; &gt; I wrote that code and patch (see:<br>&gt; &gt; https://github.com/apple/swift/commit/7dbb4127f55022bca7b191d448652b5decf8626e).<br>&gt; &gt; The change was in service of adding Python 3 support to GYB. So first of<br>&gt; &gt; all let me say: I&#39;m sorry. 😏<br>&gt; &gt;<br>&gt; &gt; Open up your python interpreter and figure out what your filesystem is<br>&gt; &gt; reporting its encoding to be (e.g., `sys.getfilesystemencoding()`). On<br>&gt; &gt; OS X and my copy of Arch linux it reports `&#39;utf-8&#39;` which is why it<br>&gt; &gt; doesn&#39;t have an issue. Worst case scenario we can just force it to be<br>&gt; &gt; `with codecs.open(grapheme_break_test_file_name, encoding=&#39;utf-8&#39;,<br>&gt; &gt; errors=&#39;strict&#39;) as f:` but I went with the filesystem encoding because<br>&gt; &gt; hopefully it is always UTF-8.<br>&gt; &gt;<br>&gt; &gt;&gt; It appears to be our offending bit of python code. Now my unicode &amp;<br>&gt; &gt;&gt; python foo isn&#39;t the strongest, but if I change what is passed as<br>&gt; &gt;&gt; encoding to : encoding=&#39;utf-8&#39;, the swift testcases seem to run quite<br>&gt; &gt;&gt; a bit better and end up reporting :<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Testing Time: 65.82s<br>&gt; &gt;&gt;   Expected Passes    : 1748<br>&gt; &gt;&gt;   Expected Failures  : 83<br>&gt; &gt;&gt;   Unsupported Tests  : 585<br>&gt; &gt;&gt; -- check-swift-linux-x86_64 finished --<br>&gt; &gt;&gt; --- Finished tests for swift ---<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Question is, is that little fix the &#39;right thing&#39; (TM) ?  If so happy<br>&gt; &gt;&gt; to submit this as my first &#39;lame&#39; patch.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Thanks<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; --<br>&gt; &gt;&gt; Regards,<br>&gt; &gt;&gt; Tom<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; &quot;Where&#39;s the kaboom!? There was supposed to be an earth-shattering<br>&gt; &gt;&gt; kaboom!&quot; Marvin Martian<br>&gt; &gt;&gt; Director, Linaro Mobile Group<br>&gt; &gt;&gt; Tech Lead, GPGPU<br>&gt; &gt;&gt; Linaro.org │ Open source software for ARM SoCs<br>&gt; &gt;&gt; irc: tgall_foo | skype : tom_gall<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-dev mailing list<br>&gt; &gt;&gt; swift-dev at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-dev mailing list<br>&gt; &gt; swift-dev at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Regards,<br>&gt; Tom<br>&gt; <br>&gt; &quot;Where&#39;s the kaboom!? There was supposed to be an earth-shattering<br>&gt; kaboom!&quot; Marvin Martian<br>&gt; Director, Linaro Mobile Group<br>&gt; Tech Lead, GPGPU<br>&gt; Linaro.org │ Open source software for ARM SoCs<br>&gt; irc: tgall_foo | skype : tom_gall<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4226542ea69d5b28efdf689104a49c6c?s=50"></div><header><strong>Testing fails in GYBUnicodeDataUtils.py</strong> from <string>Tom Gall</string> &lt;tom.gall at linaro.org&gt;<p>January  4, 2016 at 05:00:00pm</p></header><div class="content"><p>On Mon, Jan 4, 2016 at 4:44 PM, Ryan Lovelett<br>&lt;swift-dev at ryan.lovelett.me&gt; wrote:<br>&gt; I would suggest setting the environment variables and re-running but<br>&gt; that is just my opinion.<br>&gt;<br>&gt; I went through many of the same issues on Arch as well. Arch uses Python<br>&gt; 2.7.11 and Python 3.5.1; with 3.5.1 being default.<br></p><p>Well point I was suggesting is that with the use of python-config the<br>version of python, include and libs location is easily determined.[4]<br>Looking at CMakeCache.txt in<br>build/Ninja-ReleaseAssert/swift-linux-x86_64, it&#39;s pretty obvious the<br>build environment isn&#39;t using it but seems to respect the PYTHON env<br>variable. I find this curious.<br></p><p>&gt; I can _maybe_ give you a clue on the lldb issue. Check out SR-14 [1]<br>&gt; which links to the upstream LLDB Bug 25744 [2]. That report seems to<br>&gt; indicate there is a known bug compiling on Gentoo. They&#39;ve even created<br>&gt; a specific bug Bug 25866 [3] which Bug 25744 depends on to track fixing<br>&gt; it in Gentoo.<br></p><p>Fixing CMakeCache.txt by hand to use the system&#39;s python2.7 default<br>lldb builds successfully on gentoo, no changes necessary.<br></p><p>Still a good data point would be to switch my default python over to<br>3.x and see what kind of trouble i can find. Easy enough to do.<br></p><p>&gt; Unfortunately, it seems that the experimental patch submitted there<br>&gt; (which I use to build on Arch) seems to only work on Arch. However,<br>&gt; maybe your just the person to fix that bug! Anyways food for thought.<br>&gt; Happy compiling. 🍻<br></p><p>&gt; [1] https://bugs.swift.org/browse/SR-14<br>&gt; [2] https://llvm.org/bugs/show_bug.cgi?id=25744<br>&gt; [3] https://llvm.org/bugs/show_bug.cgi?id=25866<br></p><p>[4] https://www.python.org/dev/peps/pep-0394/<br></p><p>Back to the original issue. Do you want to require unicode locales?<br></p><p>Cheers!<br></p><p>&gt; On Mon, Jan 4, 2016, at 05:29 PM, Tom Gall wrote:<br>&gt;&gt; Hi Ryan,<br>&gt;&gt;<br>&gt;&gt; In my case I&#39;m on Python 2.7.  Your comment is interesting as I was<br>&gt;&gt; just tracking down why python-config --libs and python-config<br>&gt;&gt; --includes doesn&#39;t seem to be used to determine what is the system<br>&gt;&gt; python install. I was just starting to trace through the build tool to<br>&gt;&gt; figure out how build-script works it&#39;s initial magic.<br>&gt;&gt;<br>&gt;&gt; In my case I have both python 3.4 and 2.7 installed but python 2.7 is<br>&gt;&gt; the system default.  This ends up causing some interesting brand of<br>&gt;&gt; hurt, when trying to build swift&#39;s lldb. (Test Case<br>&gt;&gt; &#39;TestNSTimer.test_timerTickOnce&#39; is freezing so was looking to debug<br>&gt;&gt; that)<br>&gt;&gt;<br>&gt;&gt; To answer some of your questions:<br>&gt;&gt;<br>&gt;&gt; tgall at mars ~/swift $ locale<br>&gt;&gt;<br>&gt;&gt; LANG=en_US<br>&gt;&gt; LC_CTYPE=C<br>&gt;&gt; LC_NUMERIC=&quot;en_US&quot;<br>&gt;&gt; LC_TIME=&quot;en_US&quot;<br>&gt;&gt; LC_COLLATE=&quot;en_US&quot;<br>&gt;&gt; LC_MONETARY=&quot;en_US&quot;<br>&gt;&gt; LC_MESSAGES=&quot;en_US&quot;<br>&gt;&gt; LC_PAPER=&quot;en_US&quot;<br>&gt;&gt; LC_NAME=&quot;en_US&quot;<br>&gt;&gt; LC_ADDRESS=&quot;en_US&quot;<br>&gt;&gt; LC_TELEPHONE=&quot;en_US&quot;<br>&gt;&gt; LC_MEASUREMENT=&quot;en_US&quot;<br>&gt;&gt; LC_IDENTIFICATION=&quot;en_US&quot;<br>&gt;&gt; LC_ALL=<br>&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; import sys<br>&gt;&gt; &gt;&gt;&gt; x=sys.getfilesystemencoding()<br>&gt;&gt; &gt;&gt;&gt; print x<br>&gt;&gt; ANSI_X3.4-1968<br>&gt;&gt;<br>&gt;&gt; That explains some things :-)<br>&gt;&gt;<br>&gt;&gt; On Mon, Jan 4, 2016 at 4:12 PM, Ryan Lovelett via swift-dev<br>&gt;&gt; &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt; &gt; On Mon, Jan 4, 2016, at 03:40 PM, Tom Gall via swift-dev wrote:<br>&gt;&gt; &gt;&gt; Building with: ./swift/utils/build-script -R -t --foundation<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; on Linux (gentoo amd64) fails with<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; + /usr/bin/cmake --build<br>&gt;&gt; &gt;&gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64 -- -j4<br>&gt;&gt; &gt;&gt; SwiftUnitTests<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; [6/29] Generating UnicodeGraphemeBreakTest.cpp from<br>&gt;&gt; &gt;&gt; UnicodeGraphemeBreakTest.cpp.gyb with ptr size = 8<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; FAILED: cd /home/tgall/swift/swift/unittests/Basic &amp;&amp; /usr/bin/cmake<br>&gt;&gt; &gt;&gt; -E make_directory<br>&gt;&gt; &gt;&gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8<br>&gt;&gt; &gt;&gt; &amp;&amp; /home/tgall/swift/swift/utils/gyb --test<br>&gt;&gt; &gt;&gt; -DunicodeGraphemeBreakPropertyFile=/home/tgall/swift/swift/utils/UnicodeData/GraphemeBreakProperty.txt<br>&gt;&gt; &gt;&gt; -DunicodeGraphemeBreakTestFile=/home/tgall/swift/swift/utils/UnicodeData/GraphemeBreakTest.txt<br>&gt;&gt; &gt;&gt; -DCMAKE_SIZEOF_VOID_P=8 -o<br>&gt;&gt; &gt;&gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8/UnicodeGraphemeBreakTest.cpp.tmp<br>&gt;&gt; &gt;&gt; UnicodeGraphemeBreakTest.cpp.gyb &amp;&amp; /usr/bin/cmake -E<br>&gt;&gt; &gt;&gt; copy_if_different<br>&gt;&gt; &gt;&gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8/UnicodeGraphemeBreakTest.cpp.tmp<br>&gt;&gt; &gt;&gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8/UnicodeGraphemeBreakTest.cpp<br>&gt;&gt; &gt;&gt; &amp;&amp; /usr/bin/cmake -E remove<br>&gt;&gt; &gt;&gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8/UnicodeGraphemeBreakTest.cpp.tmp<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Traceback (most recent call last):<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;   File &quot;/home/tgall/swift/swift/utils/gyb&quot;, line 3, in &lt;module&gt;<br>&gt;&gt; &gt;&gt;     gyb.main()<br>&gt;&gt; &gt;&gt;   File &quot;/home/tgall/swift/swift/utils/gyb.py&quot;, line 1071, in main<br>&gt;&gt; &gt;&gt;     args.target.write(executeTemplate(ast, args.line_directive,<br>&gt;&gt; &gt;&gt;     **bindings))<br>&gt;&gt; &gt;&gt;   File &quot;/home/tgall/swift/swift/utils/gyb.py&quot;, line 974, in<br>&gt;&gt; &gt;&gt;   executeTemplate<br>&gt;&gt; &gt;&gt;     ast.execute(executionContext)<br>&gt;&gt; &gt;&gt;   File &quot;/home/tgall/swift/swift/utils/gyb.py&quot;, line 591, in execute<br>&gt;&gt; &gt;&gt;     x.execute(context)<br>&gt;&gt; &gt;&gt;   File &quot;/home/tgall/swift/swift/utils/gyb.py&quot;, line 667, in execute<br>&gt;&gt; &gt;&gt;     result = eval(self.code, context.localBindings)<br>&gt;&gt; &gt;&gt;   File<br>&gt;&gt; &gt;&gt;   &quot;/home/tgall/swift/swift/unittests/Basic/UnicodeGraphemeBreakTest.cpp.gyb&quot;,<br>&gt;&gt; &gt;&gt; line 23, in &lt;module&gt;<br>&gt;&gt; &gt;&gt;     get_grapheme_cluster_break_tests_as_UTF8(unicodeGraphemeBreakTestFile)<br>&gt;&gt; &gt;&gt;   File &quot;/home/tgall/swift/swift/utils/GYBUnicodeDataUtils.py&quot;, line<br>&gt;&gt; &gt;&gt; 553, in get_grapheme_cluster_break_tests_as_UTF8<br>&gt;&gt; &gt;&gt;     for line in f:<br>&gt;&gt; &gt;&gt;   File &quot;/usr/lib64/python2.7/codecs.py&quot;, line 687, in next<br>&gt;&gt; &gt;&gt;     return self.reader.next()<br>&gt;&gt; &gt;&gt;   File &quot;/usr/lib64/python2.7/codecs.py&quot;, line 618, in next<br>&gt;&gt; &gt;&gt;     line = self.readline()<br>&gt;&gt; &gt;&gt;   File &quot;/usr/lib64/python2.7/codecs.py&quot;, line 533, in readline<br>&gt;&gt; &gt;&gt;     data = self.read(readsize, firstline=True)<br>&gt;&gt; &gt;&gt;   File &quot;/usr/lib64/python2.7/codecs.py&quot;, line 480, in read<br>&gt;&gt; &gt;&gt;     newchars, decodedbytes = self.decode(data, self.errors)<br>&gt;&gt; &gt;&gt; UnicodeDecodeError: &#39;ascii&#39; codec can&#39;t decode byte 0xc3 in position<br>&gt;&gt; &gt;&gt; 0: ordinal not in range(128)<br>&gt;&gt; &gt;&gt; [6/29] Building CXX object<br>&gt;&gt; &gt;&gt; unittests/Parse/CMakeFiles/SwiftParseTests.dir/LexerTests.cpp.o<br>&gt;&gt; &gt;&gt; ninja: build stopped: subcommand failed.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Ah yes ... the joys of python stack dumps...  anyway, tracing this a bit:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; in swift/utils/GYBUnicodeDataUtils.py there is:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; with codecs.open(grapheme_break_test_file_name,<br>&gt;&gt; &gt;&gt; encoding=sys.getfilesystemencoding(), errors=&#39;strict&#39;) as f:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I wrote that code and patch (see:<br>&gt;&gt; &gt; https://github.com/apple/swift/commit/7dbb4127f55022bca7b191d448652b5decf8626e).<br>&gt;&gt; &gt; The change was in service of adding Python 3 support to GYB. So first of<br>&gt;&gt; &gt; all let me say: I&#39;m sorry. 😏<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Open up your python interpreter and figure out what your filesystem is<br>&gt;&gt; &gt; reporting its encoding to be (e.g., `sys.getfilesystemencoding()`). On<br>&gt;&gt; &gt; OS X and my copy of Arch linux it reports `&#39;utf-8&#39;` which is why it<br>&gt;&gt; &gt; doesn&#39;t have an issue. Worst case scenario we can just force it to be<br>&gt;&gt; &gt; `with codecs.open(grapheme_break_test_file_name, encoding=&#39;utf-8&#39;,<br>&gt;&gt; &gt; errors=&#39;strict&#39;) as f:` but I went with the filesystem encoding because<br>&gt;&gt; &gt; hopefully it is always UTF-8.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; It appears to be our offending bit of python code. Now my unicode &amp;<br>&gt;&gt; &gt;&gt; python foo isn&#39;t the strongest, but if I change what is passed as<br>&gt;&gt; &gt;&gt; encoding to : encoding=&#39;utf-8&#39;, the swift testcases seem to run quite<br>&gt;&gt; &gt;&gt; a bit better and end up reporting :<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Testing Time: 65.82s<br>&gt;&gt; &gt;&gt;   Expected Passes    : 1748<br>&gt;&gt; &gt;&gt;   Expected Failures  : 83<br>&gt;&gt; &gt;&gt;   Unsupported Tests  : 585<br>&gt;&gt; &gt;&gt; -- check-swift-linux-x86_64 finished --<br>&gt;&gt; &gt;&gt; --- Finished tests for swift ---<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Question is, is that little fix the &#39;right thing&#39; (TM) ?  If so happy<br>&gt;&gt; &gt;&gt; to submit this as my first &#39;lame&#39; patch.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Thanks<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; --<br>&gt;&gt; &gt;&gt; Regards,<br>&gt;&gt; &gt;&gt; Tom<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; &quot;Where&#39;s the kaboom!? There was supposed to be an earth-shattering<br>&gt;&gt; &gt;&gt; kaboom!&quot; Marvin Martian<br>&gt;&gt; &gt;&gt; Director, Linaro Mobile Group<br>&gt;&gt; &gt;&gt; Tech Lead, GPGPU<br>&gt;&gt; &gt;&gt; Linaro.org │ Open source software for ARM SoCs<br>&gt;&gt; &gt;&gt; irc: tgall_foo | skype : tom_gall<br>&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt; swift-dev mailing list<br>&gt;&gt; &gt;&gt; swift-dev at swift.org<br>&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-dev mailing list<br>&gt;&gt; &gt; swift-dev at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Regards,<br>&gt;&gt; Tom<br>&gt;&gt;<br>&gt;&gt; &quot;Where&#39;s the kaboom!? There was supposed to be an earth-shattering<br>&gt;&gt; kaboom!&quot; Marvin Martian<br>&gt;&gt; Director, Linaro Mobile Group<br>&gt;&gt; Tech Lead, GPGPU<br>&gt;&gt; Linaro.org │ Open source software for ARM SoCs<br>&gt;&gt; irc: tgall_foo | skype : tom_gall<br></p><p><br></p><p>-- <br>Regards,<br>Tom<br></p><p>&quot;Where&#39;s the kaboom!? There was supposed to be an earth-shattering<br>kaboom!&quot; Marvin Martian<br>Director, Linaro Mobile Group<br>Tech Lead, GPGPU<br>Linaro.org │ Open source software for ARM SoCs<br>irc: tgall_foo | skype : tom_gall<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14477c366d6ee4e41adf14837bc4f2f9?s=50"></div><header><strong>Testing fails in GYBUnicodeDataUtils.py</strong> from <string>Ryan Lovelett</string> &lt;swift-dev at ryan.lovelett.me&gt;<p>January  4, 2016 at 06:00:00pm</p></header><div class="content"><p>On Mon, Jan 4, 2016, at 06:09 PM, Tom Gall wrote:<br>&gt; On Mon, Jan 4, 2016 at 4:44 PM, Ryan Lovelett<br>&gt; &lt;swift-dev at ryan.lovelett.me&gt; wrote:<br>&gt; &gt; I would suggest setting the environment variables and re-running but<br>&gt; &gt; that is just my opinion.<br>&gt; &gt;<br>&gt; &gt; I went through many of the same issues on Arch as well. Arch uses Python<br>&gt; &gt; 2.7.11 and Python 3.5.1; with 3.5.1 being default.<br>&gt; <br>&gt; Well point I was suggesting is that with the use of python-config the<br>&gt; version of python, include and libs location is easily determined.[4]<br>&gt; Looking at CMakeCache.txt in<br>&gt; build/Ninja-ReleaseAssert/swift-linux-x86_64, it&#39;s pretty obvious the<br>&gt; build environment isn&#39;t using it but seems to respect the PYTHON env<br>&gt; variable. I find this curious.<br></p><p>To me that sounds exactly what those bugs I talked about are trying to<br>solve; the system selecting the wrong Python from the environment.<br></p><p>https://bugs.swift.org/browse/SR-14?focusedCommentId=10432&amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-10432<br></p><p>Of course, you are right I digress.<br></p><p>&gt; <br>&gt; &gt; I can _maybe_ give you a clue on the lldb issue. Check out SR-14 [1]<br>&gt; &gt; which links to the upstream LLDB Bug 25744 [2]. That report seems to<br>&gt; &gt; indicate there is a known bug compiling on Gentoo. They&#39;ve even created<br>&gt; &gt; a specific bug Bug 25866 [3] which Bug 25744 depends on to track fixing<br>&gt; &gt; it in Gentoo.<br>&gt; <br>&gt; Fixing CMakeCache.txt by hand to use the system&#39;s python2.7 default<br>&gt; lldb builds successfully on gentoo, no changes necessary.<br>&gt; <br>&gt; Still a good data point would be to switch my default python over to<br>&gt; 3.x and see what kind of trouble i can find. Easy enough to do.<br>&gt; <br>&gt; &gt; Unfortunately, it seems that the experimental patch submitted there<br>&gt; &gt; (which I use to build on Arch) seems to only work on Arch. However,<br>&gt; &gt; maybe your just the person to fix that bug! Anyways food for thought.<br>&gt; &gt; Happy compiling. 🍻<br>&gt; <br>&gt; &gt; [1] https://bugs.swift.org/browse/SR-14<br>&gt; &gt; [2] https://llvm.org/bugs/show_bug.cgi?id=25744<br>&gt; &gt; [3] https://llvm.org/bugs/show_bug.cgi?id=25866<br>&gt; <br>&gt; [4] https://www.python.org/dev/peps/pep-0394/<br>&gt; <br>&gt; Back to the original issue. Do you want to require unicode locales?<br></p><p>tl;dr If you hard coded it I certainly would not object and I doubt it<br>would break anything. If you think its necessary than I say: go for it!<br></p><p>In my opinion you&#39;ve already illustrated that your locale setup is in<br>need of tweaking and that Python is behaving as designed. Therefore, to<br>me, hard-coding the encoding to be UTF-8 is a work around for an<br>improperly configured system. But I&#39;m not in charge of anything.<br></p><p>Like Jordan said those specific files will always be UTF-8 (because they<br>are testing unicode encoding in Swift) so it should not break anything<br>to force the encoding as UTF-8.<br></p><p>&gt; <br>&gt; Cheers!<br>&gt; <br>&gt; &gt; On Mon, Jan 4, 2016, at 05:29 PM, Tom Gall wrote:<br>&gt; &gt;&gt; Hi Ryan,<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; In my case I&#39;m on Python 2.7.  Your comment is interesting as I was<br>&gt; &gt;&gt; just tracking down why python-config --libs and python-config<br>&gt; &gt;&gt; --includes doesn&#39;t seem to be used to determine what is the system<br>&gt; &gt;&gt; python install. I was just starting to trace through the build tool to<br>&gt; &gt;&gt; figure out how build-script works it&#39;s initial magic.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; In my case I have both python 3.4 and 2.7 installed but python 2.7 is<br>&gt; &gt;&gt; the system default.  This ends up causing some interesting brand of<br>&gt; &gt;&gt; hurt, when trying to build swift&#39;s lldb. (Test Case<br>&gt; &gt;&gt; &#39;TestNSTimer.test_timerTickOnce&#39; is freezing so was looking to debug<br>&gt; &gt;&gt; that)<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; To answer some of your questions:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; tgall at mars ~/swift $ locale<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; LANG=en_US<br>&gt; &gt;&gt; LC_CTYPE=C<br>&gt; &gt;&gt; LC_NUMERIC=&quot;en_US&quot;<br>&gt; &gt;&gt; LC_TIME=&quot;en_US&quot;<br>&gt; &gt;&gt; LC_COLLATE=&quot;en_US&quot;<br>&gt; &gt;&gt; LC_MONETARY=&quot;en_US&quot;<br>&gt; &gt;&gt; LC_MESSAGES=&quot;en_US&quot;<br>&gt; &gt;&gt; LC_PAPER=&quot;en_US&quot;<br>&gt; &gt;&gt; LC_NAME=&quot;en_US&quot;<br>&gt; &gt;&gt; LC_ADDRESS=&quot;en_US&quot;<br>&gt; &gt;&gt; LC_TELEPHONE=&quot;en_US&quot;<br>&gt; &gt;&gt; LC_MEASUREMENT=&quot;en_US&quot;<br>&gt; &gt;&gt; LC_IDENTIFICATION=&quot;en_US&quot;<br>&gt; &gt;&gt; LC_ALL=<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;&gt; import sys<br>&gt; &gt;&gt; &gt;&gt;&gt; x=sys.getfilesystemencoding()<br>&gt; &gt;&gt; &gt;&gt;&gt; print x<br>&gt; &gt;&gt; ANSI_X3.4-1968<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; That explains some things :-)<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; On Mon, Jan 4, 2016 at 4:12 PM, Ryan Lovelett via swift-dev<br>&gt; &gt;&gt; &lt;swift-dev at swift.org&gt; wrote:<br>&gt; &gt;&gt; &gt; On Mon, Jan 4, 2016, at 03:40 PM, Tom Gall via swift-dev wrote:<br>&gt; &gt;&gt; &gt;&gt; Building with: ./swift/utils/build-script -R -t --foundation<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; on Linux (gentoo amd64) fails with<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; + /usr/bin/cmake --build<br>&gt; &gt;&gt; &gt;&gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64 -- -j4<br>&gt; &gt;&gt; &gt;&gt; SwiftUnitTests<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; [6/29] Generating UnicodeGraphemeBreakTest.cpp from<br>&gt; &gt;&gt; &gt;&gt; UnicodeGraphemeBreakTest.cpp.gyb with ptr size = 8<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; FAILED: cd /home/tgall/swift/swift/unittests/Basic &amp;&amp; /usr/bin/cmake<br>&gt; &gt;&gt; &gt;&gt; -E make_directory<br>&gt; &gt;&gt; &gt;&gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8<br>&gt; &gt;&gt; &gt;&gt; &amp;&amp; /home/tgall/swift/swift/utils/gyb --test<br>&gt; &gt;&gt; &gt;&gt; -DunicodeGraphemeBreakPropertyFile=/home/tgall/swift/swift/utils/UnicodeData/GraphemeBreakProperty.txt<br>&gt; &gt;&gt; &gt;&gt; -DunicodeGraphemeBreakTestFile=/home/tgall/swift/swift/utils/UnicodeData/GraphemeBreakTest.txt<br>&gt; &gt;&gt; &gt;&gt; -DCMAKE_SIZEOF_VOID_P=8 -o<br>&gt; &gt;&gt; &gt;&gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8/UnicodeGraphemeBreakTest.cpp.tmp<br>&gt; &gt;&gt; &gt;&gt; UnicodeGraphemeBreakTest.cpp.gyb &amp;&amp; /usr/bin/cmake -E<br>&gt; &gt;&gt; &gt;&gt; copy_if_different<br>&gt; &gt;&gt; &gt;&gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8/UnicodeGraphemeBreakTest.cpp.tmp<br>&gt; &gt;&gt; &gt;&gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8/UnicodeGraphemeBreakTest.cpp<br>&gt; &gt;&gt; &gt;&gt; &amp;&amp; /usr/bin/cmake -E remove<br>&gt; &gt;&gt; &gt;&gt; /home/tgall/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/unittests/Basic/8/UnicodeGraphemeBreakTest.cpp.tmp<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; Traceback (most recent call last):<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;   File &quot;/home/tgall/swift/swift/utils/gyb&quot;, line 3, in &lt;module&gt;<br>&gt; &gt;&gt; &gt;&gt;     gyb.main()<br>&gt; &gt;&gt; &gt;&gt;   File &quot;/home/tgall/swift/swift/utils/gyb.py&quot;, line 1071, in main<br>&gt; &gt;&gt; &gt;&gt;     args.target.write(executeTemplate(ast, args.line_directive,<br>&gt; &gt;&gt; &gt;&gt;     **bindings))<br>&gt; &gt;&gt; &gt;&gt;   File &quot;/home/tgall/swift/swift/utils/gyb.py&quot;, line 974, in<br>&gt; &gt;&gt; &gt;&gt;   executeTemplate<br>&gt; &gt;&gt; &gt;&gt;     ast.execute(executionContext)<br>&gt; &gt;&gt; &gt;&gt;   File &quot;/home/tgall/swift/swift/utils/gyb.py&quot;, line 591, in execute<br>&gt; &gt;&gt; &gt;&gt;     x.execute(context)<br>&gt; &gt;&gt; &gt;&gt;   File &quot;/home/tgall/swift/swift/utils/gyb.py&quot;, line 667, in execute<br>&gt; &gt;&gt; &gt;&gt;     result = eval(self.code, context.localBindings)<br>&gt; &gt;&gt; &gt;&gt;   File<br>&gt; &gt;&gt; &gt;&gt;   &quot;/home/tgall/swift/swift/unittests/Basic/UnicodeGraphemeBreakTest.cpp.gyb&quot;,<br>&gt; &gt;&gt; &gt;&gt; line 23, in &lt;module&gt;<br>&gt; &gt;&gt; &gt;&gt;     get_grapheme_cluster_break_tests_as_UTF8(unicodeGraphemeBreakTestFile)<br>&gt; &gt;&gt; &gt;&gt;   File &quot;/home/tgall/swift/swift/utils/GYBUnicodeDataUtils.py&quot;, line<br>&gt; &gt;&gt; &gt;&gt; 553, in get_grapheme_cluster_break_tests_as_UTF8<br>&gt; &gt;&gt; &gt;&gt;     for line in f:<br>&gt; &gt;&gt; &gt;&gt;   File &quot;/usr/lib64/python2.7/codecs.py&quot;, line 687, in next<br>&gt; &gt;&gt; &gt;&gt;     return self.reader.next()<br>&gt; &gt;&gt; &gt;&gt;   File &quot;/usr/lib64/python2.7/codecs.py&quot;, line 618, in next<br>&gt; &gt;&gt; &gt;&gt;     line = self.readline()<br>&gt; &gt;&gt; &gt;&gt;   File &quot;/usr/lib64/python2.7/codecs.py&quot;, line 533, in readline<br>&gt; &gt;&gt; &gt;&gt;     data = self.read(readsize, firstline=True)<br>&gt; &gt;&gt; &gt;&gt;   File &quot;/usr/lib64/python2.7/codecs.py&quot;, line 480, in read<br>&gt; &gt;&gt; &gt;&gt;     newchars, decodedbytes = self.decode(data, self.errors)<br>&gt; &gt;&gt; &gt;&gt; UnicodeDecodeError: &#39;ascii&#39; codec can&#39;t decode byte 0xc3 in position<br>&gt; &gt;&gt; &gt;&gt; 0: ordinal not in range(128)<br>&gt; &gt;&gt; &gt;&gt; [6/29] Building CXX object<br>&gt; &gt;&gt; &gt;&gt; unittests/Parse/CMakeFiles/SwiftParseTests.dir/LexerTests.cpp.o<br>&gt; &gt;&gt; &gt;&gt; ninja: build stopped: subcommand failed.<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; Ah yes ... the joys of python stack dumps...  anyway, tracing this a bit:<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; in swift/utils/GYBUnicodeDataUtils.py there is:<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; with codecs.open(grapheme_break_test_file_name,<br>&gt; &gt;&gt; &gt;&gt; encoding=sys.getfilesystemencoding(), errors=&#39;strict&#39;) as f:<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt; &gt; I wrote that code and patch (see:<br>&gt; &gt;&gt; &gt; https://github.com/apple/swift/commit/7dbb4127f55022bca7b191d448652b5decf8626e).<br>&gt; &gt;&gt; &gt; The change was in service of adding Python 3 support to GYB. So first of<br>&gt; &gt;&gt; &gt; all let me say: I&#39;m sorry. 😏<br>&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt; &gt; Open up your python interpreter and figure out what your filesystem is<br>&gt; &gt;&gt; &gt; reporting its encoding to be (e.g., `sys.getfilesystemencoding()`). On<br>&gt; &gt;&gt; &gt; OS X and my copy of Arch linux it reports `&#39;utf-8&#39;` which is why it<br>&gt; &gt;&gt; &gt; doesn&#39;t have an issue. Worst case scenario we can just force it to be<br>&gt; &gt;&gt; &gt; `with codecs.open(grapheme_break_test_file_name, encoding=&#39;utf-8&#39;,<br>&gt; &gt;&gt; &gt; errors=&#39;strict&#39;) as f:` but I went with the filesystem encoding because<br>&gt; &gt;&gt; &gt; hopefully it is always UTF-8.<br>&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt; &gt;&gt; It appears to be our offending bit of python code. Now my unicode &amp;<br>&gt; &gt;&gt; &gt;&gt; python foo isn&#39;t the strongest, but if I change what is passed as<br>&gt; &gt;&gt; &gt;&gt; encoding to : encoding=&#39;utf-8&#39;, the swift testcases seem to run quite<br>&gt; &gt;&gt; &gt;&gt; a bit better and end up reporting :<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; Testing Time: 65.82s<br>&gt; &gt;&gt; &gt;&gt;   Expected Passes    : 1748<br>&gt; &gt;&gt; &gt;&gt;   Expected Failures  : 83<br>&gt; &gt;&gt; &gt;&gt;   Unsupported Tests  : 585<br>&gt; &gt;&gt; &gt;&gt; -- check-swift-linux-x86_64 finished --<br>&gt; &gt;&gt; &gt;&gt; --- Finished tests for swift ---<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; Question is, is that little fix the &#39;right thing&#39; (TM) ?  If so happy<br>&gt; &gt;&gt; &gt;&gt; to submit this as my first &#39;lame&#39; patch.<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; Thanks<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; --<br>&gt; &gt;&gt; &gt;&gt; Regards,<br>&gt; &gt;&gt; &gt;&gt; Tom<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &quot;Where&#39;s the kaboom!? There was supposed to be an earth-shattering<br>&gt; &gt;&gt; &gt;&gt; kaboom!&quot; Marvin Martian<br>&gt; &gt;&gt; &gt;&gt; Director, Linaro Mobile Group<br>&gt; &gt;&gt; &gt;&gt; Tech Lead, GPGPU<br>&gt; &gt;&gt; &gt;&gt; Linaro.org │ Open source software for ARM SoCs<br>&gt; &gt;&gt; &gt;&gt; irc: tgall_foo | skype : tom_gall<br>&gt; &gt;&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; &gt;&gt; swift-dev mailing list<br>&gt; &gt;&gt; &gt;&gt; swift-dev at swift.org<br>&gt; &gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; &gt;&gt; &gt; _______________________________________________<br>&gt; &gt;&gt; &gt; swift-dev mailing list<br>&gt; &gt;&gt; &gt; swift-dev at swift.org<br>&gt; &gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; --<br>&gt; &gt;&gt; Regards,<br>&gt; &gt;&gt; Tom<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; &quot;Where&#39;s the kaboom!? There was supposed to be an earth-shattering<br>&gt; &gt;&gt; kaboom!&quot; Marvin Martian<br>&gt; &gt;&gt; Director, Linaro Mobile Group<br>&gt; &gt;&gt; Tech Lead, GPGPU<br>&gt; &gt;&gt; Linaro.org │ Open source software for ARM SoCs<br>&gt; &gt;&gt; irc: tgall_foo | skype : tom_gall<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Regards,<br>&gt; Tom<br>&gt; <br>&gt; &quot;Where&#39;s the kaboom!? There was supposed to be an earth-shattering<br>&gt; kaboom!&quot; Marvin Martian<br>&gt; Director, Linaro Mobile Group<br>&gt; Tech Lead, GPGPU<br>&gt; Linaro.org │ Open source software for ARM SoCs<br>&gt; irc: tgall_foo | skype : tom_gall<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
