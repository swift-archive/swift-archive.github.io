<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7edc0cf41bada7a000ca80712e36a14a?s=50"></div><header><strong>Linux: module for &lt;dispatch/dispatch.h&gt; needs -fblocks to compile</strong> from <string>Tom Sheffler</string> &lt;tom.sheffler at gmail.com&gt;<p>December 17, 2015 at 12:00:00pm</p></header><div class="content"><p>I’m learning about Swift on Linux and using modules to wrap C libraries.  One of the things I wanted to do was use libdispatch with blocks from Swift.  I thought it would be easy to use a module to wrap &lt;dispatch/dispatch.h&gt;.<br></p><p>I made a module called “CDispatch” with a module.modulemap like this<br></p><p>=======<br>module CDispatch [system] {<br>    header &quot;/usr/include/dispatch/dispatch.h&quot;<br>    export *<br>    link &quot;dispatch&quot;<br>}<br>========<br></p><p>Then I created a little demo project called gcd4 whose Source/main.swift prints some things and then uses a dispatch queue and a block to print a message after 2 seconds delay.<br></p><p>=========<br>CDispatch.dispatch_after(time, queue, {<br>    print(&quot;Delayed!&quot;)<br>})<br>========<br></p><p>The entire project is checked in at https://github.com/sheffler/gcd4 &lt;https://github.com/sheffler/gcd4&gt;<br>and the CDispatch module is checked in at https://github.com/sheffler/CDispatch &lt;https://github.com/sheffler/CDispatch&gt;<br></p><p>If I try to “swift build” the project, it almost works but reports that dispatch_after is not found.  It seems that this function is not defined if the “blocks&quot; feature is not provided at compilation time.<br></p><p>========<br>Compiling Swift Module &#39;gcd4&#39; (1 sources)<br>/home/sheffler/swift/gcd4/Sources/main.swift:42:1: error: module &#39;CDispatch&#39; has no member named &#39;dispatch_after&#39;<br>CDispatch.dispatch_after(time, queue, {<br>^~~~~~~~~ ~~~~~~~~~~~~~~<br>&lt;unknown&gt;:0: error: build had 1 command failures<br>swift-build: exit(1): [&quot;/home/sheffler/src/swift-2.2-SNAPSHOT-2015-12-01-b-ubuntu14.04/usr/bin/swift-build-tool&quot;, &quot;-f&quot;, &quot;/home/sheffler/swift/gcd4/.build/debug/gcd4.o/llbuild.yaml”]<br>========<br></p><p>I got the demo program to work by first using “swift build” to retrieve the CDispatch module, and then manually running the compiler like this (and including the “-Xcc -fblocks” arguments)<br></p><p>swiftc -v -o gcd4 Sources/main.swift -I .build/debug -j8 -Onone -g -Xcc -fblocks -Xcc -F-module-map=Packages/CDispatch-1.0.0/module.modulemap -I Packages/CDispatch-1.0.0 -I /usr/local/include<br></p><p>This is all pretty neat!  I’ve got blocks, dispatch queues and ARC on Ubuntu.  I have one question and one remark.<br></p><p>- Am i missing something about how to create the CDispatch module?  Why can’t “swift build” build this?<br></p><p>- Creating Git repositories for simple modules that wrap a single library and include a header file or two seems like too much.  I would love to have been able to create a sub-directory in my project with a modulemap that includes &lt;dispatch/dispatch.h&gt; and links libdispatch.so<br></p><p>Thanks<br>Tom<br></p><p>P.S. - I tried to make this easy to check out and compile<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151217/b742727e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Linux: module for &lt;dispatch/dispatch.h&gt; needs -fblocks to compile</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>December 20, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt; On Dec 17, 2015, at 1:40 PM, Tom Sheffler via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; I’m learning about Swift on Linux and using modules to wrap C libraries.  One of the things I wanted to do was use libdispatch with blocks from Swift.  I thought it would be easy to use a module to wrap &lt;dispatch/dispatch.h&gt;.<br>&gt; <br>&gt; I made a module called “CDispatch” with a module.modulemap like this<br>&gt; <br>&gt; =======<br>&gt; module CDispatch [system] {<br>&gt;     header &quot;/usr/include/dispatch/dispatch.h&quot;<br>&gt;     export *<br>&gt;     link &quot;dispatch&quot;<br>&gt; }<br>&gt; ========<br>&gt; <br>&gt; Then I created a little demo project called gcd4 whose Source/main.swift prints some things and then uses a dispatch queue and a block to print a message after 2 seconds delay.<br>&gt; <br>&gt; =========<br>&gt; CDispatch.dispatch_after(time, queue, {<br>&gt;     print(&quot;Delayed!&quot;)<br>&gt; })<br>&gt; ========<br>&gt; <br>&gt; The entire project is checked in at https://github.com/sheffler/gcd4 &lt;https://github.com/sheffler/gcd4&gt;<br>&gt; and the CDispatch module is checked in at https://github.com/sheffler/CDispatch &lt;https://github.com/sheffler/CDispatch&gt;<br>&gt; <br>&gt; If I try to “swift build” the project, it almost works but reports that dispatch_after is not found.  It seems that this function is not defined if the “blocks&quot; feature is not provided at compilation time.<br>&gt; <br>&gt; ========<br>&gt; Compiling Swift Module &#39;gcd4&#39; (1 sources)<br>&gt; /home/sheffler/swift/gcd4/Sources/main.swift:42:1: error: module &#39;CDispatch&#39; has no member named &#39;dispatch_after&#39;<br>&gt; CDispatch.dispatch_after(time, queue, {<br>&gt; ^~~~~~~~~ ~~~~~~~~~~~~~~<br>&gt; &lt;unknown&gt;:0: error: build had 1 command failures<br>&gt; swift-build: exit(1): [&quot;/home/sheffler/src/swift-2.2-SNAPSHOT-2015-12-01-b-ubuntu14.04/usr/bin/swift-build-tool&quot;, &quot;-f&quot;, &quot;/home/sheffler/swift/gcd4/.build/debug/gcd4.o/llbuild.yaml”]<br>&gt; ========<br>&gt; <br>&gt; I got the demo program to work by first using “swift build” to retrieve the CDispatch module, and then manually running the compiler like this (and including the “-Xcc -fblocks” arguments)<br>&gt; <br>&gt; swiftc -v -o gcd4 Sources/main.swift -I .build/debug -j8 -Onone -g -Xcc -fblocks -Xcc -F-module-map=Packages/CDispatch-1.0.0/module.modulemap -I Packages/CDispatch-1.0.0 -I /usr/local/include<br>&gt; <br>&gt; This is all pretty neat!  I’ve got blocks, dispatch queues and ARC on Ubuntu.  I have one question and one remark.<br>&gt; <br>&gt; - Am i missing something about how to create the CDispatch module?  Why can’t “swift build” build this?<br></p><p>This is mostly an oversight, the libdispatch port has been coming up and you are perhaps the first person to try to integrate all of these things.<br></p><p>I&#39;m not sure yet exactly how we should resolve this, it might be the case that swiftc should just default to enabling blocks support in the Clang importer. In any case, can you open a specific bug in JIRA for this issue?<br></p><p>&gt; - Creating Git repositories for simple modules that wrap a single library and include a header file or two seems like too much.  I would love to have been able to create a sub-directory in my project with a modulemap that includes &lt;dispatch/dispatch.h&gt; and links libdispatch.so<br></p><p>There will be an easier avenue to getting this working once we have some amount of C support in the package manager.<br></p><p>Even then, one pro of encouraging the separate definition of module map packages is so that they can be used by other people. It is cumbersome until we have a the ecosystem of those packages (and easy ways for people to find them), but it would be worse if they never ever ended up being shared.<br></p><p> - Daniel<br></p><p>&gt; <br>&gt; Thanks<br>&gt; Tom<br>&gt; <br>&gt; P.S. - I tried to make this easy to check out and compile<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151220/4fab6f9d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7edc0cf41bada7a000ca80712e36a14a?s=50"></div><header><strong>Linux: module for &lt;dispatch/dispatch.h&gt; needs -fblocks to compile</strong> from <string>Tom Sheffler</string> &lt;tom.sheffler at gmail.com&gt;<p>December 21, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt; On Dec 20, 2015, at 3:51 PM, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Dec 17, 2015, at 1:40 PM, Tom Sheffler via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I’m learning about Swift on Linux and using modules to wrap C libraries.  One of the things I wanted to do was use libdispatch with blocks from Swift.  I thought it would be easy to use a module to wrap &lt;dispatch/dispatch.h&gt;.<br>&gt;&gt; <br>&gt;&gt; I made a module called “CDispatch” with a module.modulemap like this<br>&gt;&gt; <br>&gt;&gt; =======<br>&gt;&gt; module CDispatch [system] {<br>&gt;&gt;     header &quot;/usr/include/dispatch/dispatch.h&quot;<br>&gt;&gt;     export *<br>&gt;&gt;     link &quot;dispatch&quot;<br>&gt;&gt; }<br>&gt;&gt; ========<br>&gt;&gt; <br>&gt;&gt; Then I created a little demo project called gcd4 whose Source/main.swift prints some things and then uses a dispatch queue and a block to print a message after 2 seconds delay.<br>&gt;&gt; <br>&gt;&gt; =========<br>&gt;&gt; CDispatch.dispatch_after(time, queue, {<br>&gt;&gt;     print(&quot;Delayed!&quot;)<br>&gt;&gt; })<br>&gt;&gt; ========<br>&gt;&gt; <br>&gt;&gt; The entire project is checked in at https://github.com/sheffler/gcd4 &lt;https://github.com/sheffler/gcd4&gt;<br>&gt;&gt; and the CDispatch module is checked in at https://github.com/sheffler/CDispatch &lt;https://github.com/sheffler/CDispatch&gt;<br>&gt;&gt; <br>&gt;&gt; If I try to “swift build” the project, it almost works but reports that dispatch_after is not found.  It seems that this function is not defined if the “blocks&quot; feature is not provided at compilation time.<br>&gt;&gt; <br>&gt;&gt; ========<br>&gt;&gt; Compiling Swift Module &#39;gcd4&#39; (1 sources)<br>&gt;&gt; /home/sheffler/swift/gcd4/Sources/main.swift:42:1: error: module &#39;CDispatch&#39; has no member named &#39;dispatch_after&#39;<br>&gt;&gt; CDispatch.dispatch_after(time, queue, {<br>&gt;&gt; ^~~~~~~~~ ~~~~~~~~~~~~~~<br>&gt;&gt; &lt;unknown&gt;:0: error: build had 1 command failures<br>&gt;&gt; swift-build: exit(1): [&quot;/home/sheffler/src/swift-2.2-SNAPSHOT-2015-12-01-b-ubuntu14.04/usr/bin/swift-build-tool&quot;, &quot;-f&quot;, &quot;/home/sheffler/swift/gcd4/.build/debug/gcd4.o/llbuild.yaml”]<br>&gt;&gt; ========<br>&gt;&gt; <br>&gt;&gt; I got the demo program to work by first using “swift build” to retrieve the CDispatch module, and then manually running the compiler like this (and including the “-Xcc -fblocks” arguments)<br>&gt;&gt; <br>&gt;&gt; swiftc -v -o gcd4 Sources/main.swift -I .build/debug -j8 -Onone -g -Xcc -fblocks -Xcc -F-module-map=Packages/CDispatch-1.0.0/module.modulemap -I Packages/CDispatch-1.0.0 -I /usr/local/include<br>&gt;&gt; <br>&gt;&gt; This is all pretty neat!  I’ve got blocks, dispatch queues and ARC on Ubuntu.  I have one question and one remark.<br>&gt;&gt; <br>&gt;&gt; - Am i missing something about how to create the CDispatch module?  Why can’t “swift build” build this?<br>&gt; <br>&gt; This is mostly an oversight, the libdispatch port has been coming up and you are perhaps the first person to try to integrate all of these things.<br></p><p>It’s not normal, i know.  I’m looking forward to using blocks/dispatch on Linux for a media project.<br></p><p>&gt; <br>&gt; I&#39;m not sure yet exactly how we should resolve this, it might be the case that swiftc should just default to enabling blocks support in the Clang importer. In any case, can you open a specific bug in JIRA for this issue?<br></p><p>I’ll add the issue.<br></p><p>&gt; <br>&gt;&gt; - Creating Git repositories for simple modules that wrap a single library and include a header file or two seems like too much.  I would love to have been able to create a sub-directory in my project with a modulemap that includes &lt;dispatch/dispatch.h&gt; and links libdispatch.so<br>&gt; <br>&gt; There will be an easier avenue to getting this working once we have some amount of C support in the package manager.<br>&gt; <br>&gt; Even then, one pro of encouraging the separate definition of module map packages is so that they can be used by other people. It is cumbersome until we have a the ecosystem of those packages (and easy ways for people to find them), but it would be worse if they never ever ended up being shared.<br></p><p>I think the package manager direction for Swift is great actually.  I just took the opportunity to share some of my early experiences whil I had the chance.<br></p><p>&gt; <br>&gt;  - Daniel<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Thanks<br>&gt;&gt; Tom<br>&gt;&gt; <br>&gt;&gt; P.S. - I tried to make this easy to check out and compile<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151221/598a38b8/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
