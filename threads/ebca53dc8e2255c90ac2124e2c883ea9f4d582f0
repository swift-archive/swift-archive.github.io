<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Optional &quot;endfor&quot;, &quot;endif&quot;, etc after closing &quot;}&quot;</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>December  8, 2015 at 08:00:00am</p></header><div class="content"><p>Unlike something like “} // if”, the compiler would actually check &quot;} endif” and report an error if “}” doesn’t close the expected construct.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Optional &quot;endfor&quot;, &quot;endif&quot;, etc after closing &quot;}&quot;</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>December  8, 2015 at 09:00:00am</p></header><div class="content"><p>&gt; On Dec 8, 2015, at 8:42 AM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Unlike something like “} // if”, the compiler would actually check &quot;} endif” and report an error if “}” doesn’t close the expected construct.<br></p><p>Or perhaps more elegantly (again, it’s optional): <br></p><p>if ... {<br>   …<br>if }<br></p><p>for ... {<br>   …<br>for }<br>etc.<br></p><p><br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f98dc2a5a610100f8528eeeb2ff3c282?s=50"></div><header><strong>Optional &quot;endfor&quot;, &quot;endif&quot;, etc after closing &quot;}&quot;</strong> from <string>Andrew Brown</string> &lt;a.br at me.com&gt;<p>December 12, 2015 at 12:00:00pm</p></header><div class="content"><p>+1<br></p><p>Anything that supports developers is worth it.<br>Can&#39;t say I like the syntax but I&#39;ll take whatever is agreed.<br></p><p>ABR.<br></p><p>&gt; On 8 Dec 2015, at 14:43, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 8, 2015, at 8:42 AM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Unlike something like “} // if”, the compiler would actually check &quot;} endif” and report an error if “}” doesn’t close the expected construct.<br>&gt; <br>&gt; Or perhaps more elegantly (again, it’s optional): <br>&gt; <br>&gt; if ... {<br>&gt;   …<br>&gt; if }<br>&gt; <br>&gt; for ... {<br>&gt;   …<br>&gt; for }<br>&gt; etc.<br>&gt; <br>&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d68c97e8e2f1653b54c24493caf236ae?s=50"></div><header><strong>Optional &quot;endfor&quot;, &quot;endif&quot;, etc after closing &quot;}&quot;</strong> from <string>Stephen Celis</string> &lt;stephen.celis at gmail.com&gt;<p>December 12, 2015 at 08:00:00am</p></header><div class="content"><p>I’m against such a change. It creates a lot of visual noise and ceremony around the creation of every scope.<br></p><p>It would be possible for a custom linter to enforce “// if” comments, though I’ve never found these kinds of annotations useful—they seem to be added as code grows where refactoring/reorganization would probably be the better route.<br></p><p>Stephen<br></p><p>&gt; On Dec 12, 2015, at 7:54 AM, Andrew Brown via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1<br>&gt; <br>&gt; Anything that supports developers is worth it.<br>&gt; Can&#39;t say I like the syntax but I&#39;ll take whatever is agreed.<br>&gt; <br>&gt; ABR.<br>&gt; <br>&gt;&gt; On 8 Dec 2015, at 14:43, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 8, 2015, at 8:42 AM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Unlike something like “} // if”, the compiler would actually check &quot;} endif” and report an error if “}” doesn’t close the expected construct.<br>&gt;&gt; <br>&gt;&gt; Or perhaps more elegantly (again, it’s optional): <br>&gt;&gt; <br>&gt;&gt; if ... {<br>&gt;&gt;  …<br>&gt;&gt; if }<br>&gt;&gt; <br>&gt;&gt; for ... {<br>&gt;&gt;  …<br>&gt;&gt; for }<br>&gt;&gt; etc.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Optional &quot;endfor&quot;, &quot;endif&quot;, etc after closing &quot;}&quot;</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>December 12, 2015 at 08:00:00am</p></header><div class="content"><p>&gt; On Dec 12, 2015, at 7:54 AM, Andrew Brown &lt;a.br at me.com&gt; wrote:<br>&gt; <br>&gt; +1<br>&gt; <br>&gt; Anything that supports developers is worth it.<br>&gt; Can&#39;t say I like the syntax but I&#39;ll take whatever is agreed.<br></p><p>What about this syntax?<br></p><p>for … {<br>  if … {<br>    …<br>  } /if<br>} /for<br></p><p><br>&gt; <br>&gt; ABR.<br>&gt; <br>&gt;&gt; On 8 Dec 2015, at 14:43, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 8, 2015, at 8:42 AM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Unlike something like “} // if”, the compiler would actually check &quot;} endif” and report an error if “}” doesn’t close the expected construct.<br>&gt;&gt; <br>&gt;&gt; Or perhaps more elegantly (again, it’s optional): <br>&gt;&gt; <br>&gt;&gt; if ... {<br>&gt;&gt;  …<br>&gt;&gt; if }<br>&gt;&gt; <br>&gt;&gt; for ... {<br>&gt;&gt;  …<br>&gt;&gt; for }<br>&gt;&gt; etc.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d47baf3a0f80c9fd13ece9c4b87c7fce?s=50"></div><header><strong>Optional &quot;endfor&quot;, &quot;endif&quot;, etc after closing &quot;}&quot;</strong> from <string>Marc Knaup</string> &lt;marc at knaup.koeln&gt;<p>December 12, 2015 at 02:00:00pm</p></header><div class="content"><p>I&#39;m also against any kind of markers to annotate the end of a block.<br></p><p>If the code inside a if/guard/loop/do/func/var/… block is so long that the<br>developer thinks about annotating the closing curly brace then they should<br>instead break it down into smaller pieces. Move parts into separate<br>functions and replace it with calls to these functions.<br>This makes the block shorter, much easier to understand and the function<br>names will aid as additional documentation.<br></p><p>On Sat, Dec 12, 2015 at 2:19 PM, Amir Michail via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Dec 12, 2015, at 7:54 AM, Andrew Brown &lt;a.br at me.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; +1<br>&gt; &gt;<br>&gt; &gt; Anything that supports developers is worth it.<br>&gt; &gt; Can&#39;t say I like the syntax but I&#39;ll take whatever is agreed.<br>&gt;<br>&gt; What about this syntax?<br>&gt;<br>&gt; for … {<br>&gt;   if … {<br>&gt;     …<br>&gt;   } /if<br>&gt; } /for<br>&gt;<br>&gt;<br>&gt; &gt;<br>&gt; &gt; ABR.<br>&gt; &gt;<br>&gt; &gt;&gt; On 8 Dec 2015, at 14:43, Amir Michail via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; On Dec 8, 2015, at 8:42 AM, Amir Michail via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Unlike something like “} // if”, the compiler would actually check &quot;}<br>&gt; endif” and report an error if “}” doesn’t close the expected construct.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Or perhaps more elegantly (again, it’s optional):<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; if ... {<br>&gt; &gt;&gt;  …<br>&gt; &gt;&gt; if }<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; for ... {<br>&gt; &gt;&gt;  …<br>&gt; &gt;&gt; for }<br>&gt; &gt;&gt; etc.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151212/6c90162b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/abf891ba571d5a819ddf547917abe1e1?s=50"></div><header><strong>Optional &quot;endfor&quot;, &quot;endif&quot;, etc after closing &quot;}&quot;</strong> from <string>Al Skipp</string> &lt;al_skipp at fastmail.fm&gt;<p>December 12, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt; On 12 Dec 2015, at 13:31, Marc Knaup via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;m also against any kind of markers to annotate the end of a block.<br>&gt; <br>&gt; If the code inside a if/guard/loop/do/func/var/… block is so long that the developer thinks about annotating the closing curly brace then they should instead break it down into smaller pieces. Move parts into separate functions and replace it with calls to these functions.<br>&gt; This makes the block shorter, much easier to understand and the function names will aid as additional documentation.<br></p><p>I completely agree. <br></p><p>If code becomes so impenetrable that you need to annotate the end of blocks to assist comprehension, then the code needs refactoring. Adding a syntactical crutch that encourages you to chop off your own leg, doesn’t seem like a good idea.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151212/c28f401d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>Optional &quot;endfor&quot;, &quot;endif&quot;, etc after closing &quot;}&quot;</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>December 12, 2015 at 06:00:00pm</p></header><div class="content"><p>&gt; Am 12.12.2015 um 14:41 schrieb Al Skipp via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; <br>&gt;&gt; On 12 Dec 2015, at 13:31, Marc Knaup via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I&#39;m also against any kind of markers to annotate the end of a block.<br>&gt;&gt; <br>&gt;&gt; If the code inside a if/guard/loop/do/func/var/… block is so long that the developer thinks about annotating the closing curly brace then they should instead break it down into smaller pieces. Move parts into separate functions and replace it with calls to these functions.<br>&gt;&gt; This makes the block shorter, much easier to understand and the function names will aid as additional documentation.<br>&gt; <br>&gt; I completely agree. <br>&gt; <br>&gt; If code becomes so impenetrable that you need to annotate the end of blocks to assist comprehension, then the code needs refactoring. Adding a syntactical crutch that encourages you to chop off your own leg, doesn’t seem like a good idea.<br></p><p>I completely agree with Marc and Al.<br></p><p>-Thorsten<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151212/23b622b6/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f38cb038c3d9ae705c4db3b5b5272906?s=50"></div><header><strong>Optional &quot;endfor&quot;, &quot;endif&quot;, etc after closing &quot;}&quot;</strong> from <string>Greg Parker</string> &lt;gparker at apple.com&gt;<p>December 12, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt; On Dec 12, 2015, at 5:41 AM, Al Skipp via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On 12 Dec 2015, at 13:31, Marc Knaup via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I&#39;m also against any kind of markers to annotate the end of a block.<br>&gt;&gt; <br>&gt;&gt; If the code inside a if/guard/loop/do/func/var/… block is so long that the developer thinks about annotating the closing curly brace then they should instead break it down into smaller pieces. Move parts into separate functions and replace it with calls to these functions.<br>&gt;&gt; This makes the block shorter, much easier to understand and the function names will aid as additional documentation.<br>&gt; <br>&gt; I completely agree. <br>&gt; <br>&gt; If code becomes so impenetrable that you need to annotate the end of blocks to assist comprehension, then the code needs refactoring.<br></p><p>Or a better editor. Modern code editors have affordances to improve readability of such code, such as highlighting matching braces, coloring nested scopes, or folding and unfolding scopes.<br></p><p>One advantage of the editor-based approaches is that they don&#39;t make editing more difficult. You don&#39;t need to write any scope annotations and you don&#39;t need to keep them up to date as the code changes.<br></p><p><br>-- <br>Greg Parker     gparker at apple.com &lt;mailto:gparker at apple.com&gt;     Runtime Wrangler<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151212/fd912cc4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0eaab3d5d1d4428f74a711f724f2eb47?s=50"></div><header><strong>Optional &quot;endfor&quot;, &quot;endif&quot;, etc after closing &quot;}&quot;</strong> from <string>Etan Kissling</string> &lt;kissling at oberon.ch&gt;<p>December 14, 2015 at 11:00:00am</p></header><div class="content"><p>Counter-proposal that eliminates the nested ifs.<br></p><p>If I have functions with long if blocks, I typically use switches on named tuples.<br></p><p>switch (condition1: ..., condition2: ...) {<br>    case (condition1: false, condition2: true):<br>        ...<br></p><p>    case (condition1: _, condition2: false):<br>        ...<br></p><p>    case (condition1: true, condition2: true) where condition3:<br>        ...<br></p><p>    case (condition1: true, condition2: true):<br>        ...<br>}<br></p><p>This way, you are reminded after each long block about your current scope, and the compiler checks for unhandled cases.<br></p><p>Etan<br></p><p><br>&gt; On 12 Dec 2015, at 22:35, Greg Parker via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 12, 2015, at 5:41 AM, Al Skipp via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On 12 Dec 2015, at 13:31, Marc Knaup via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m also against any kind of markers to annotate the end of a block.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If the code inside a if/guard/loop/do/func/var/… block is so long that the developer thinks about annotating the closing curly brace then they should instead break it down into smaller pieces. Move parts into separate functions and replace it with calls to these functions.<br>&gt;&gt;&gt; This makes the block shorter, much easier to understand and the function names will aid as additional documentation.<br>&gt;&gt; <br>&gt;&gt; I completely agree.<br>&gt;&gt; <br>&gt;&gt; If code becomes so impenetrable that you need to annotate the end of blocks to assist comprehension, then the code needs refactoring.<br>&gt; <br>&gt; Or a better editor. Modern code editors have affordances to improve readability of such code, such as highlighting matching braces, coloring nested scopes, or folding and unfolding scopes.<br>&gt; <br>&gt; One advantage of the editor-based approaches is that they don&#39;t make editing more difficult. You don&#39;t need to write any scope annotations and you don&#39;t need to keep them up to date as the code changes.<br>&gt; <br>&gt; <br>&gt; --<br>&gt; Greg Parker     gparker at apple.com &lt;mailto:gparker at apple.com&gt;     Runtime Wrangler<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151214/d519e962/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: signature.asc<br>Type: application/pgp-signature<br>Size: 801 bytes<br>Desc: Message signed with OpenPGP using GPGMail<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151214/d519e962/attachment.sig&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d47baf3a0f80c9fd13ece9c4b87c7fce?s=50"></div><header><strong>Optional &quot;endfor&quot;, &quot;endif&quot;, etc after closing &quot;}&quot;</strong> from <string>Marc Knaup</string> &lt;marc at knaup.koeln&gt;<p>December 14, 2015 at 12:00:00pm</p></header><div class="content"><p>This changes the behavior though.<br></p><p>In &quot;if cond1 &amp;&amp; cond2&quot; cond2 is only evaluated iff cond1 is true.<br>Using switch both conditions will be evaluated right away unconditionally.<br></p><p>On Mon, Dec 14, 2015 at 12:48 PM, Etan Kissling via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Counter-proposal that eliminates the nested ifs.<br>&gt;<br>&gt; If I have functions with long if blocks, I typically use switches on named<br>&gt; tuples.<br>&gt;<br>&gt; switch (condition1: ..., condition2: ...) {<br>&gt;     case (condition1: false, condition2: true):<br>&gt;         ...<br>&gt;<br>&gt;     case (condition1: _, condition2: false):<br>&gt;         ...<br>&gt;<br>&gt;     case (condition1: true, condition2: true) where condition3:<br>&gt;         ...<br>&gt;<br>&gt;     case (condition1: true, condition2: true):<br>&gt;         ...<br>&gt; }<br>&gt;<br>&gt; This way, you are reminded after each long block about your current scope,<br>&gt; and the compiler checks for unhandled cases.<br>&gt;<br>&gt; Etan<br>&gt;<br>&gt;<br>&gt; On 12 Dec 2015, at 22:35, Greg Parker via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Dec 12, 2015, at 5:41 AM, Al Skipp via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On 12 Dec 2015, at 13:31, Marc Knaup via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I&#39;m also against any kind of markers to annotate the end of a block.<br>&gt;<br>&gt; If the code inside a if/guard/loop/do/func/var/… block is so long that the<br>&gt; developer thinks about annotating the closing curly brace then they should<br>&gt; instead break it down into smaller pieces. Move parts into separate<br>&gt; functions and replace it with calls to these functions.<br>&gt; This makes the block shorter, much easier to understand and the function<br>&gt; names will aid as additional documentation.<br>&gt;<br>&gt;<br>&gt; I completely agree.<br>&gt;<br>&gt; If code becomes so impenetrable that you need to annotate the end of<br>&gt; blocks to assist comprehension, then the code needs refactoring.<br>&gt;<br>&gt;<br>&gt; Or a better editor. Modern code editors have affordances to improve<br>&gt; readability of such code, such as highlighting matching braces, coloring<br>&gt; nested scopes, or folding and unfolding scopes.<br>&gt;<br>&gt; One advantage of the editor-based approaches is that they don&#39;t make<br>&gt; editing more difficult. You don&#39;t need to write any scope annotations and<br>&gt; you don&#39;t need to keep them up to date as the code changes.<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Greg Parker     gparker at apple.com     Runtime Wrangler<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151214/e6538e18/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0eaab3d5d1d4428f74a711f724f2eb47?s=50"></div><header><strong>Optional &quot;endfor&quot;, &quot;endif&quot;, etc after closing &quot;}&quot;</strong> from <string>Etan Kissling</string> &lt;kissling at oberon.ch&gt;<p>December 14, 2015 at 01:00:00pm</p></header><div class="content"><p>That&#39;s why I&#39;ve included the &quot;case ... where&quot; case :) condition3 is only evaluated after 1/2.<br></p><p>On 14 Dec 2015, at 12:59, Marc Knaup &lt;marc at knaup.koeln&lt;mailto:marc at knaup.koeln&gt;&gt; wrote:<br></p><p>This changes the behavior though.<br></p><p>In &quot;if cond1 &amp;&amp; cond2&quot; cond2 is only evaluated iff cond1 is true.<br>Using switch both conditions will be evaluated right away unconditionally.<br></p><p>On Mon, Dec 14, 2015 at 12:48 PM, Etan Kissling via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>Counter-proposal that eliminates the nested ifs.<br></p><p>If I have functions with long if blocks, I typically use switches on named tuples.<br></p><p>switch (condition1: ..., condition2: ...) {<br>    case (condition1: false, condition2: true):<br>        ...<br></p><p>    case (condition1: _, condition2: false):<br>        ...<br></p><p>    case (condition1: true, condition2: true) where condition3:<br>        ...<br></p><p>    case (condition1: true, condition2: true):<br>        ...<br>}<br></p><p>This way, you are reminded after each long block about your current scope, and the compiler checks for unhandled cases.<br></p><p>Etan<br></p><p><br>On 12 Dec 2015, at 22:35, Greg Parker via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br></p><p><br>On Dec 12, 2015, at 5:41 AM, Al Skipp via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br></p><p>On 12 Dec 2015, at 13:31, Marc Knaup via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br></p><p>I&#39;m also against any kind of markers to annotate the end of a block.<br></p><p>If the code inside a if/guard/loop/do/func/var/… block is so long that the developer thinks about annotating the closing curly brace then they should instead break it down into smaller pieces. Move parts into separate functions and replace it with calls to these functions.<br>This makes the block shorter, much easier to understand and the function names will aid as additional documentation.<br></p><p>I completely agree.<br></p><p>If code becomes so impenetrable that you need to annotate the end of blocks to assist comprehension, then the code needs refactoring.<br></p><p>Or a better editor. Modern code editors have affordances to improve readability of such code, such as highlighting matching braces, coloring nested scopes, or folding and unfolding scopes.<br></p><p>One advantage of the editor-based approaches is that they don&#39;t make editing more difficult. You don&#39;t need to write any scope annotations and you don&#39;t need to keep them up to date as the code changes.<br></p><p><br>--<br>Greg Parker     gparker at apple.com&lt;mailto:gparker at apple.com&gt;     Runtime Wrangler<br></p><p><br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151214/52f7c949/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>Optional &quot;endfor&quot;, &quot;endif&quot;, etc after closing &quot;}&quot;</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>December 15, 2015 at 12:00:00am</p></header><div class="content"><p>I agree with Stephen, I think it will probably just make more clutter.<br>However if you did want to do it a linter is probably a better option.<br></p><p>I haven&#39;t used it yet, but I&#39;ve heard this one is good:<br> * https://github.com/realm/SwiftLint<br> * Another alternative: http://swiftcleanapp.com<br></p><p>Among other really things it would allow you to enforce style choices on<br>your code. You could make it a compile time error if an if-statement wasn&#39;t<br>followed by a &quot;} // if&quot;.<br></p><p>I&#39;m not sure about the second tool, but you can add custom rules to the<br>first. This may be a good starting point:<br>https://github.com/realm/SwiftLint/blob/master/Source/SwiftLintFramework/Rules/ControlStatementRule.swift<br></p><p><br></p><p><br>On Tue, Dec 15, 2015 at 12:22 AM, Etan Kissling via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; That&#39;s why I&#39;ve included the &quot;case ... where&quot; case :) condition3 is only<br>&gt; evaluated after 1/2.<br>&gt;<br>&gt; On 14 Dec 2015, at 12:59, Marc Knaup &lt;marc at knaup.koeln&gt; wrote:<br>&gt;<br>&gt; This changes the behavior though.<br>&gt;<br>&gt; In &quot;if cond1 &amp;&amp; cond2&quot; cond2 is only evaluated iff cond1 is true.<br>&gt; Using switch both conditions will be evaluated right away unconditionally.<br>&gt;<br>&gt; On Mon, Dec 14, 2015 at 12:48 PM, Etan Kissling via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Counter-proposal that eliminates the nested ifs.<br>&gt;&gt;<br>&gt;&gt; If I have functions with long if blocks, I typically use switches on<br>&gt;&gt; named tuples.<br>&gt;&gt;<br>&gt;&gt; switch (condition1: ..., condition2: ...) {<br>&gt;&gt;     case (condition1: false, condition2: true):<br>&gt;&gt;         ...<br>&gt;&gt;<br>&gt;&gt;     case (condition1: _, condition2: false):<br>&gt;&gt;         ...<br>&gt;&gt;<br>&gt;&gt;     case (condition1: true, condition2: true) where condition3:<br>&gt;&gt;         ...<br>&gt;&gt;<br>&gt;&gt;     case (condition1: true, condition2: true):<br>&gt;&gt;         ...<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; This way, you are reminded after each long block about your current<br>&gt;&gt; scope, and the compiler checks for unhandled cases.<br>&gt;&gt;<br>&gt;&gt; Etan<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On 12 Dec 2015, at 22:35, Greg Parker via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Dec 12, 2015, at 5:41 AM, Al Skipp via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On 12 Dec 2015, at 13:31, Marc Knaup via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I&#39;m also against any kind of markers to annotate the end of a block.<br>&gt;&gt;<br>&gt;&gt; If the code inside a if/guard/loop/do/func/var/… block is so long that<br>&gt;&gt; the developer thinks about annotating the closing curly brace then they<br>&gt;&gt; should instead break it down into smaller pieces. Move parts into separate<br>&gt;&gt; functions and replace it with calls to these functions.<br>&gt;&gt; This makes the block shorter, much easier to understand and the function<br>&gt;&gt; names will aid as additional documentation.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I completely agree.<br>&gt;&gt;<br>&gt;&gt; If code becomes so impenetrable that you need to annotate the end of<br>&gt;&gt; blocks to assist comprehension, then the code needs refactoring.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Or a better editor. Modern code editors have affordances to improve<br>&gt;&gt; readability of such code, such as highlighting matching braces, coloring<br>&gt;&gt; nested scopes, or folding and unfolding scopes.<br>&gt;&gt;<br>&gt;&gt; One advantage of the editor-based approaches is that they don&#39;t make<br>&gt;&gt; editing more difficult. You don&#39;t need to write any scope annotations and<br>&gt;&gt; you don&#39;t need to keep them up to date as the code changes.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Greg Parker     gparker at apple.com     Runtime Wrangler<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/85d730d1/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8da0cba30fa0e47cf4fb26ebb968e552?s=50"></div><header><strong>Optional &quot;endfor&quot;, &quot;endif&quot;, etc after closing &quot;}&quot;</strong> from <string>Jérôme Duquennoy</string> &lt;jerome+swift at duquennoy.fr&gt;<p>December 12, 2015 at 09:00:00pm</p></header><div class="content"><p>&gt; What about this syntax?<br>&gt; <br>&gt; for … {<br>&gt;  if … {<br>&gt;    …<br>&gt;  } /if<br>&gt; } /for<br>&gt; <br></p><p>I have the feeling we are double defining the blocs here :<br>for ... /for is enough to have the beginning and the end if the bloc, and so is { ... }.<br></p><p>So I think that syntax is redundant.<br></p><p>I also think that such a solution would only solve half of the readability problem in a complex code.<br></p><p>Consider for exemple this piece of pseudo code : <br>------------------------------------------------------<br>if (...) {<br>  if (...) {<br>    for (...) {<br>      // insert here a big number of lines<br>    }<br>  }<br>  <br>  if (...) {<br>    for (...) {<br>      // insert here a big number of lines<br>    }<br>  }<br>}<br>------------------------------------------------------<br>This thing end up with 3 closing block in the end, and if you have enough lines of code instead of the two comments, you don&#39;t see the beginning of those any more.<br>Considering the proposed syntax, you end up with that :<br></p><p>------------------------------------------------------<br>if (...) {<br>  if (...) {<br>    for (...) {<br>      // insert here a big number of lines<br>    } /for<br>  } /if<br>  <br>  if (...) {<br>    for (...) {<br>      // insert here a big number of lines<br>    } /for<br>  } / if<br>} /if<br>------------------------------------------------------<br></p><p>You have a bit more info, for sure. But not yet enough to clearly identify what bloc is being closed by a given line. To have it all, you would have to copy the whole condition ... but that would be copy / past.<br></p><p>In the end I have the feeling the advantage of the proposal is not huge, whatever the syntax. Not enough to add new keywords.<br>I agree with Marc that refactoring seems a good solution when it becomes hard to know what block ends where.<br></p><p>Jerome<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151212/77637774/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
