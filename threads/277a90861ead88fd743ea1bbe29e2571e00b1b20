<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/445f7147a679f34736a99f61a76ae6dc?s=50"></div><header><strong>Extensions-visible &quot;private&quot; Access Level</strong> from <string>Uros Krkic</string> &lt;uros.krkic at gmail.com&gt;<p>October 31, 2016 at 02:00:00pm</p></header><div class="content"><p>*Introduction*<br>In order to follow Single Responsibility Principle, I break my types (but<br>let&#39;s talk about classes) into smaller pieces, decouple it and try to give<br>every single piece a separate functionality.<br></p><p>*Motivation*<br>Extensions, as a mechanism to extend an existing type, improve this kind of<br>decoupling and make it possible to keep an extension in a separate compile<br>unit (file).<br></p><p>*Additional observation is that I personally don&#39;t see any purpose or value<br>of an extension put in the same file as the type it extends. Ultimately, we<br>will finish with a large class, with a lot lines of code, as if we put<br>extensions&#39; implementation directly in the type.*<br></p><p>So, let&#39;s consider the cases when we want to put extensions in a separate<br>file (separated of the original type file).<br></p><p>But here, I find the problem to access private members of my original type.<br>If I define it to be &quot;private&quot; (which is my intention), unfortunately, I<br>cannot access these members in the extension, but I need them.<br></p><p>Also, I see it very regular and useful to access original type members in<br>an extension. As the name implies, we extend it. Why not to have full<br>access to original type? We cannot break any logic or violet something.<br></p><p>*Example*<br>Let&#39;s consider an example where we have UsersViewController which has a<br>stored property &quot;users&quot; (let&#39; say it is our model) and we want to keep it<br>private. Let&#39;s suppose that UsersViewController uses UITableView and it<br>handles datasource/delegate implementation. But, let&#39;s move<br>datasource/delegate protocols implementation in an extension in a separate<br>file named UsersViewController+TableView (Obj-C category naming style).<br>This extension cannot access &quot;users&quot; property, because it is private.<br>There are many other examples where we can apply the same approach.<br></p><p>*Solutions*<br>- Add another access level modifier (but it would be too much to have only<br>one for extensions):<br>For example *extensionprivate var users = [User]()*<br>This looks bad and complicates general understanding of access levels<br>modifiers.<br></p><p>- Keep the existing access levels to work as-is, but allow marking original<br>type with something like *@extension-internal*. *This will just allow<br>&quot;private&quot; access level to be visible inside any extension of the type.* (*I<br>personally like this approach*, because all Swift access level modifiers<br>will work as it is designed, but if a developer mark the original type with<br>@extension-internal, it will just make private modifier visible inside the<br>extension, but it is clearly stated it was the developer&#39;s intention).<br></p><p>- Modify &quot;private&quot; access level to be visible in an extension. I suppose it<br>is now not possible, because it will break your private vs fileprivate<br>functionally.<br></p><p>*Benefits*<br>We (developers) can follow SRP, keep our classes smaller, keep our files<br>smaller, without mixing different levels of abstraction, keep class (file)<br>cohesion very high. Accessing private members of original type does not<br>break SRP or violate a good design, especially in most cases when we are<br>talking of an extension, we are talking about behavior extension (functions<br>or protocol implementations). We will continue to encapsulate our<br>functionalities in well defined types, keeping private all the things we<br>don&#39;t want to share with outside world, but allowing it to be used directly<br>in our type extensions.<br></p><p>Best regards,<br></p><p>-- <br>Uros Krkic<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161031/277a1b20/attachment.html&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
