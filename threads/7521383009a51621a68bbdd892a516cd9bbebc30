<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f5367c4897b54259e57ff45c12148b77?s=50"></div><header><strong>Can&#39;t get Error pattern matching to work cross framework and command line tool</strong> from <string>Joakim Hassila</string> &lt;joj at mac.com&gt;<p>May 31, 2016 at 06:00:00am</p></header><div class="content"><p>Ok, I am stumped and wanted to see if anyone had any ideas on how to troubleshoot this.<br></p><p>Short background:<br>First off, I do have throwing/do/catch working perfectly fine in Playgrounds as well as in standalone apps as well as in an app that links with one of my own test frameworks, so I would hope this is not a simple user error.<br></p><p>I’m testing this on OS X w. XCode 7.3.1 using Swift 2.2 all with Debug builds.<br></p><p>I have a command line tool project &quot;X&quot; that links with two of my own Swift frameworks, “Y&quot; and “Z&quot;. Z also links with a pure C-language library, “W” using a module map.<br>All of this works fine, as X can use entities from both Y and Z perfectly fine, including indirect access of the C-library beneath.<br></p><p>So the issue is when I am looking at throwing errors from Z, as X can’t properly pattern match the errors.<br></p><p>Short snippet showing relevant code and output from a testrun:<br></p><p>From the command line tool X:<br>——<br>func localThrow () throws -&gt; Void<br>{<br>    throw Transaction.Error.NotFound<br>}<br></p><p>do{<br>    try localThrow() // try throwing from embedded local function<br>} catch Transaction.Error.NotFound { // this matches as expectd<br>    print(&quot;Transaction not found (local)&quot;)<br>} catch  {<br>    print(&quot;Unknown error (local)&quot;)<br>}<br></p><p>let transaction2 = Transaction() <br></p><p>do {<br>    try transaction2.errorNow() // try throwing from framework<br>} catch Transaction.Error.NotFound { // this never matches!<br>    print(&quot;Transaction not found (framework)&quot;)<br>} catch {<br>    print(&quot;Unknown error (framework)&quot;)<br>}<br>——<br></p><p>In the framework Z, we have:<br>——<br>import W<br></p><p>public class Transaction {<br>// ...<br>}<br></p><p>public extension Transaction {<br>    <br>    public final func errorNow() throws -&gt; Void<br>    {<br>        throw Transaction.Error.NotFound<br>    }<br>}<br>——<br></p><p>and the output when run is:<br>——<br>Transaction not found (local)<br>Unknown error (framework) <br>——<br></p><p>Setting a breakpoint and inspecting ‘error’ shows the following when stepping over the call, and single stepping in the debugger shows that it throws properly, it is just the matching that seems to fail. The Xcode lldb inspector shows the error value as:<br></p><p>error = (Z.Transaction.Error) NotFound<br></p><p>When single-stepping the local call, ‘error’ does not seem to be populated properly but it matches as it should.<br></p><p>I tried minimizing it with a simple app (not command line though) and framework, but there it works as expected of course…<br></p><p>Anyone have any ideas what might be the problem?<br></p><p>Cheers,<br></p><p>Joakim<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d159199cf75f783132c7274752896e3?s=50"></div><header><strong>Can&#39;t get Error pattern matching to work cross framework and command line tool</strong> from <string>Ian Terrell</string> &lt;ian.terrell at gmail.com&gt;<p>May 31, 2016 at 11:00:00am</p></header><div class="content"><p>Is this a naming collision? Do multiple modules defined a<br>Transaction.Error.NotFound?<br></p><p>For instance, in your passing case, is the Transaction.Error.NotFound that<br>is caught a Z.Transaction.Error.NotFound, or one in your local app module<br>(i.e. CLI.Transaction.Error.NotFound).<br></p><p>If your CLI module has that defined, then that is what you are looking for<br>in the catch statement. And since a Z.Transaction is not a CLI.Transaction<br>it fails to catch it appropriately.<br></p><p>Just a thought.<br></p><p>Ian<br></p><p>On Tue, May 31, 2016 at 12:44 AM, Joakim Hassila via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Ok, I am stumped and wanted to see if anyone had any ideas on how to<br>&gt; troubleshoot this.<br>&gt;<br>&gt; Short background:<br>&gt; First off, I do have throwing/do/catch working perfectly fine in<br>&gt; Playgrounds as well as in standalone apps as well as in an app that links<br>&gt; with one of my own test frameworks, so I would hope this is not a simple<br>&gt; user error.<br>&gt;<br>&gt; I’m testing this on OS X w. XCode 7.3.1 using Swift 2.2 all with Debug<br>&gt; builds.<br>&gt;<br>&gt; I have a command line tool project &quot;X&quot; that links with two of my own Swift<br>&gt; frameworks, “Y&quot; and “Z&quot;. Z also links with a pure C-language library, “W”<br>&gt; using a module map.<br>&gt; All of this works fine, as X can use entities from both Y and Z perfectly<br>&gt; fine, including indirect access of the C-library beneath.<br>&gt;<br>&gt; So the issue is when I am looking at throwing errors from Z, as X can’t<br>&gt; properly pattern match the errors.<br>&gt;<br>&gt; Short snippet showing relevant code and output from a testrun:<br>&gt;<br>&gt; From the command line tool X:<br>&gt; ——<br>&gt; func localThrow () throws -&gt; Void<br>&gt; {<br>&gt;     throw Transaction.Error.NotFound<br>&gt; }<br>&gt;<br>&gt; do{<br>&gt;     try localThrow() // try throwing from embedded local function<br>&gt; } catch Transaction.Error.NotFound { // this matches as expectd<br>&gt;     print(&quot;Transaction not found (local)&quot;)<br>&gt; } catch  {<br>&gt;     print(&quot;Unknown error (local)&quot;)<br>&gt; }<br>&gt;<br>&gt; let transaction2 = Transaction()<br>&gt;<br>&gt; do {<br>&gt;     try transaction2.errorNow() // try throwing from framework<br>&gt; } catch Transaction.Error.NotFound { // this never matches!<br>&gt;     print(&quot;Transaction not found (framework)&quot;)<br>&gt; } catch {<br>&gt;     print(&quot;Unknown error (framework)&quot;)<br>&gt; }<br>&gt; ——<br>&gt;<br>&gt; In the framework Z, we have:<br>&gt; ——<br>&gt; import W<br>&gt;<br>&gt; public class Transaction {<br>&gt; // ...<br>&gt; }<br>&gt;<br>&gt; public extension Transaction {<br>&gt;<br>&gt;     public final func errorNow() throws -&gt; Void<br>&gt;     {<br>&gt;         throw Transaction.Error.NotFound<br>&gt;     }<br>&gt; }<br>&gt; ——<br>&gt;<br>&gt; and the output when run is:<br>&gt; ——<br>&gt; Transaction not found (local)<br>&gt; Unknown error (framework)<br>&gt; ——<br>&gt;<br>&gt; Setting a breakpoint and inspecting ‘error’ shows the following when<br>&gt; stepping over the call, and single stepping in the debugger shows that it<br>&gt; throws properly, it is just the matching that seems to fail. The Xcode lldb<br>&gt; inspector shows the error value as:<br>&gt;<br>&gt; error = (Z.Transaction.Error) NotFound<br>&gt;<br>&gt; When single-stepping the local call, ‘error’ does not seem to be populated<br>&gt; properly but it matches as it should.<br>&gt;<br>&gt; I tried minimizing it with a simple app (not command line though) and<br>&gt; framework, but there it works as expected of course…<br>&gt;<br>&gt; Anyone have any ideas what might be the problem?<br>&gt;<br>&gt; Cheers,<br>&gt;<br>&gt; Joakim<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160531/b5551033/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f5367c4897b54259e57ff45c12148b77?s=50"></div><header><strong>Can&#39;t get Error pattern matching to work cross framework and command line tool</strong> from <string>Joakim Hassila</string> &lt;joj at mac.com&gt;<p>May 31, 2016 at 05:00:00pm</p></header><div class="content"><p>Hi Ian,<br></p><p>Nope, it is the only definition - I also actually have tried to fully qualify it as Z.Transaction.Error.NotFound without any difference both at the throw and catch sides.<br></p><p>I do believe the compiler would have warned if the enum was ambigious also...<br></p><p>Thanks,<br></p><p>Joakim<br></p><p>&gt; On 31 maj 2016, at 17:23, Ian Terrell &lt;ian.terrell at gmail.com&gt; wrote:<br>&gt; <br>&gt; Is this a naming collision? Do multiple modules defined a Transaction.Error.NotFound?<br>&gt; <br>&gt; For instance, in your passing case, is the Transaction.Error.NotFound that is caught a Z.Transaction.Error.NotFound, or one in your local app module (i.e. CLI.Transaction.Error.NotFound).<br>&gt; <br>&gt; If your CLI module has that defined, then that is what you are looking for in the catch statement. And since a Z.Transaction is not a CLI.Transaction it fails to catch it appropriately.<br>&gt; <br>&gt; Just a thought.<br>&gt; <br>&gt; Ian<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160531/6314f43a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Can&#39;t get Error pattern matching to work cross framework and command line tool</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May 31, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On May 31, 2016, at 8:50 AM, Joakim Hassila via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Ian,<br>&gt; <br>&gt; Nope, it is the only definition - I also actually have tried to fully qualify it as Z.Transaction.Error.NotFound without any difference both at the throw and catch sides.<br>&gt; <br>&gt; I do believe the compiler would have warned if the enum was ambigious also...<br></p><p>Would you be able to file a bug with the project that displays this behavior?<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f5367c4897b54259e57ff45c12148b77?s=50"></div><header><strong>Can&#39;t get Error pattern matching to work cross framework and command line tool</strong> from <string>Joakim Hassila</string> &lt;joj at mac.com&gt;<p>June  1, 2016 at 06:00:00am</p></header><div class="content"><p>Hi Joe,<br></p><p>Absolutely, I just filed rdar://26569913 (used Radar according to community guidelines of putting projects requiring Xcode to reproduce there).<br></p><p>I hope I captured the dependencies / reproduction steps properly in the report, let me know if anything else is needed.<br></p><p>Cheers,<br></p><p>Joakim<br></p><p>&gt; On 31 maj 2016, at 23:23, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On May 31, 2016, at 8:50 AM, Joakim Hassila via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi Ian,<br>&gt;&gt; <br>&gt;&gt; Nope, it is the only definition - I also actually have tried to fully qualify it as Z.Transaction.Error.NotFound without any difference both at the throw and catch sides.<br>&gt;&gt; <br>&gt;&gt; I do believe the compiler would have warned if the enum was ambigious also...<br>&gt; <br>&gt; Would you be able to file a bug with the project that displays this behavior?<br>&gt; <br>&gt; -Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Can&#39;t get Error pattern matching to work cross framework and command line tool</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>June  1, 2016 at 06:00:00am</p></header><div class="content"><p>Thank you!<br></p><p>-Joe<br></p><p>&gt; On May 31, 2016, at 9:49 PM, Joakim Hassila &lt;joj at mac.com&gt; wrote:<br>&gt; <br>&gt; Hi Joe,<br>&gt; <br>&gt; Absolutely, I just filed rdar://26569913 (used Radar according to community guidelines of putting projects requiring Xcode to reproduce there).<br>&gt; <br>&gt; I hope I captured the dependencies / reproduction steps properly in the report, let me know if anything else is needed.<br>&gt; <br>&gt; Cheers,<br>&gt; <br>&gt; Joakim<br>&gt; <br>&gt;&gt; On 31 maj 2016, at 23:23, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On May 31, 2016, at 8:50 AM, Joakim Hassila via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi Ian,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Nope, it is the only definition - I also actually have tried to fully qualify it as Z.Transaction.Error.NotFound without any difference both at the throw and catch sides.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I do believe the compiler would have warned if the enum was ambigious also...<br>&gt;&gt; <br>&gt;&gt; Would you be able to file a bug with the project that displays this behavior?<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
