<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>SE-0138 UnsafeBytes</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>September  2, 2016 at 11:00:00am</p></header><div class="content"><p>on Fri Sep 02 2016, Andrew Trick &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Sep 1, 2016, at 5:37 PM, Andrew Trick &lt;atrick at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The proposal is available here:<br>&gt;&gt; <br>&gt;&gt;  &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0138-unsafebytes.md<br>&gt;<br>&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0138-unsafebytes.md&gt;&gt;<br>&gt;&gt; <br>&gt;&gt;&gt; On Sep 1, 2016, at 4:59 PM, Drew Crawford<br>&gt;&gt;&gt; &lt;drew at sealedabstract.com<br>&gt;&gt;&gt; &lt;mailto:drew at sealedabstract.com&gt;&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; I&#39;m possibly one of the larger users of raw byte stuff in Swift as<br>&gt;&gt;&gt; I maintain an entire client/server network protocol stack in Swift<br>&gt;&gt;&gt; userspace, similar in spirit to one of the examples drawn out a lot<br>&gt;&gt;&gt; longer.  Grepping my code produces over 200 individual uses of<br>&gt;&gt;&gt; unsafe byte accesses.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I definitely agree that the problem is significant enough to warrant a last-minute change.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; To a first approximation I agree with all the implementation<br>&gt;&gt;&gt; choices.  The naming, the choice of UInt8, length tracking, and<br>&gt;&gt;&gt; debug-bounds checking are all correct IMO.  We have been using<br>&gt;&gt;&gt; something similar for a long time internally [have you been reading<br>&gt;&gt;&gt; my code? :-) ] so I can speak from experience that the basic plan<br>&gt;&gt;&gt; here is sound.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; One thing I would like to see is an (opt-in)<br>&gt;&gt;&gt; release-mode-bounds-check.  Networking is a core use case for this<br>&gt;&gt;&gt; feature, but when you are reading from a socket, production is<br>&gt;&gt;&gt; where you need a guard against out-of-bounds UB the most.  If we<br>&gt;&gt;&gt; can&#39;t solve it for Swift 3, affected users can write a wrapper to<br>&gt;&gt;&gt; implement the boundscheck, but I think we should at very least take<br>&gt;&gt;&gt; it up again for Swift 4.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Drew<br>&gt;&gt; <br>&gt;&gt; In my current implementation:<br>&gt;&gt; https://github.com/atrick/swift/blob/unsafebytes/stdlib/public/core/UnsafeBytes.swift.gyb<br>&gt;&gt; &lt;https://github.com/atrick/swift/blob/unsafebytes/stdlib/public/core/UnsafeBytes.swift.gyb&gt;<br>&gt;&gt; <br>&gt;&gt; The bounds checks in `copyBytes(from:)` are release mode preconditions.<br>&gt;&gt; <br>&gt;&gt; The bounds checks for `subscript`, `load(as:)`, and<br>&gt;&gt; `storeBytes(of:as:)` are debug only because it’s likely they occur<br>&gt;&gt; in some loop that could be covered by a single bounds check. By<br>&gt;&gt; extension, the sequence iterator is only bounds checked in debug<br>&gt;&gt; mode.<br>&gt;&gt; <br>&gt;&gt; One possibility would be different names for the bounds checked<br>&gt;&gt; forms of those methods: getByte(atOffset:), setByte(atOffset:),<br>&gt;&gt; load(fromCheckedOffset:as:),<br>&gt;&gt; storeBytes(of:toCheckedOffset:as:). Along with some kind of bounds<br>&gt;&gt; checked Iterator.<br>&gt;&gt; <br>&gt;&gt; I don’t think makes a lot of sense as generic Collection though. Alternatively, we just have an UnsafeBoundsCheckedBytes wrapper.<br>&gt;&gt; <br>&gt;&gt; This would a good thing to experiment with in your project. We may<br>&gt;&gt; be able to follow-up with a Swift 4 proposal. The important thing<br>&gt;&gt; now is to determine whether the proposed Swift 3 design will make<br>&gt;&gt; that wrapper difficult in any way.<br>&gt;<br>&gt; After thinking about this for a moment, I like the approach of<br>&gt; extending UnsafeBytes with release-mode bounds checked versions of<br>&gt; subscript, load, and storeBytes. <br></p><p>I agree, but would like to carefully design how we do this in<br>conjunction with Unsafe[Mutable]BufferPointer.  For example, maybe<br></p><p>      p.boundsChecked<br></p><p>gives you an UnsafeBoundsChecked[Mutable][Raw]BufferPointer.<br></p><p>So I think this should be a separate proposal.<br></p><p>&gt; It’s not actually meaningful to have a bounds checked iterator for<br>&gt; UnsafeBytes. A wrapper would only be useful to guard against<br>&gt; accidentally circumventing the bounds checks, but I’m not sure that’s<br>&gt; really helpful in practice. It seems that a framework would want to<br>&gt; provide more abstract Socket I/O or network message abstractions and<br>&gt; those wrappers would just call the bounds checked version of the<br>&gt; UnsafeBytes APIs.<br>&gt;<br>&gt; -Andy<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
