<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d3a2e43276a7051960a44d28c326fb0?s=50"></div><header><strong>C compatible structs</strong> from <string>KS Sreeram</string> &lt;ks at claylabs.com&gt;<p>August  1, 2016 at 04:00:00pm</p></header><div class="content"><p>Hello<br></p><p>Is it possible to declare Swift structs that have C compatible memory layout?<br></p><p>In the code below, Foo and Bar have different sizes in Swift and C. Is it possible to make the Swift structs have the same layout as their C counterparts?<br></p><p><br>// Swift<br></p><p>struct Foo {<br>    var x: Int32;<br>    var a: Int8;<br>}<br></p><p>struct Bar {<br>    var foo: Foo;<br>    var b: Int8;<br>}<br></p><p>print(sizeof(Foo)); // output: 5<br>print(sizeof(Bar)); // output: 6<br></p><p><br>// C<br></p><p>typedef struct {<br>    int x;<br>    char a;<br>} Foo;<br></p><p>typedef struct {<br>    Foo foo;<br>    char b;<br>} Bar;<br></p><p>int main() {<br>    printf(&quot;%lu\n&quot;, sizeof(Foo)); // output: 8<br>    printf(&quot;%lu\n&quot;, sizeof(Bar)); // output: 12<br>    return 0;<br>}<br></p><p><br>Best<br>KS Sreeram<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160801/be6e103e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>C compatible structs</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>August  1, 2016 at 09:00:00am</p></header><div class="content"><p>On Mon, Aug 1, 2016 at 4:20 AM, KS Sreeram via swift-users<br>&lt;swift-users at swift.org&gt; wrote:<br>&gt; Hello<br>&gt;<br>&gt; Is it possible to declare Swift structs that have C compatible memory<br>&gt; layout?<br></p><p>The only supported way to do this is to declare your structs in a C<br>header that you import in Swift as a module, and #include in your C<br>libraries.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>C compatible structs</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>August  2, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Aug 1, 2016, at 9:12 AM, Dmitri Gribenko via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; On Mon, Aug 1, 2016 at 4:20 AM, KS Sreeram via swift-users<br>&gt; &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; Hello<br>&gt;&gt; <br>&gt;&gt; Is it possible to declare Swift structs that have C compatible memory<br>&gt;&gt; layout?<br>&gt; <br>&gt; The only supported way to do this is to declare your structs in a C<br>&gt; header that you import in Swift as a module, and #include in your C<br>&gt; libraries.<br></p><p>Right.  In the future we will probably add the ability to put explicit alignment/layout information on structure fields.  This would be useful for this, as well as other cases where you’re trying to match a specific layout used in an on-disk file format or memory mapped device.  That said, this doesn’t fit in the scope for Swift 4 stage 1.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d3a2e43276a7051960a44d28c326fb0?s=50"></div><header><strong>C compatible structs</strong> from <string>KS Sreeram</string> &lt;ks at claylabs.com&gt;<p>August  3, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On 03-Aug-2016, at 10:02 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; Right.  In the future we will probably add the ability to put explicit alignment/layout information on structure fields. This would be useful for this, as well as other cases where you’re trying to match a specific layout used in an on-disk file format or memory mapped device.<br></p><p>That was exactly my use case. I’m storing raw structs in LMDB.<br></p><p>&gt; That said, this doesn’t fit in the scope for Swift 4 stage 1.<br></p><p>Though a bit cumbersome, Dmitri’s solution is good enough for now. It’ll be great to have this directly supported in Swift.<br></p><p>Thanks<br>KS Sreeram<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
