<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1b54c2d366bbc31b41cf7dcbc77324f9?s=50"></div><header><strong>Shipping sourcekitd-test/repl with Swift</strong> from <string>Keith Smiley</string> &lt;k at keith.so&gt;<p>July 31, 2016 at 09:00:00pm</p></header><div class="content"><p>Hey everyone,<br></p><p>Recently I&#39;ve been working on making Swift autocomplete outside of Xcode<br>(specifically vim). Of course to do this, I&#39;ve been using [SourceKitten][0],<br>which is a great bridge for interacting with `sourcekitd`.<br></p><p>While working on this, I also ran across `sourcekitd-test` and `sourcekitd-repl`<br>from the Swift repo. These tools are also awesome for working with `sourcekitd`.<br>`sourcekitd-test` even has practically the same command line interface as<br>SourceKitten&#39;s complete command.<br></p><p>With `sourcekitd-test`:<br></p><p>```<br>$ sourcekitd-test -req=complete -offset=x file.swift -- [compiler args]<br>```<br></p><p>With SourceKitten:<br></p><p>```<br>$ sourcekitten complete --offset x --file file.swift -- [compiler args]<br>```<br></p><p>These 2 commands of course call through to `sourcekitd` in the same way, so this<br>ends up with the same output as well.<br></p><p>All of this is just to show that I think these tools would be extremely valuable<br>to have shipped with whichever Swift toolchains are bundled with Xcode, so users<br>would automatically have tools for completion installed.<br></p><p>I&#39;d love to hear some thoughts on this, and also if it&#39;s even a feasible thing<br>to ask for. Also let me know if this post would be better suited for another<br>list. I didn&#39;t feel like this was particularly appropriate for swift-evolution<br>since there aren&#39;t really any implementation details in question here.<br></p><p><br>[0]: https://github.com/jpsim/SourceKitten<br></p><p><br>Thanks for reading!<br></p><p>--<br>Keith Smiley<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1b54c2d366bbc31b41cf7dcbc77324f9?s=50"></div><header><strong>Shipping sourcekitd-test/repl with Swift</strong> from <string>Keith Smiley</string> &lt;k at keith.so&gt;<p>August 29, 2016 at 08:00:00pm</p></header><div class="content"><p>Sorry to bump this thread, just wondering if anyone has any thoughts on<br>this now that (some) of the Swift 3.0 craziness is done.<br></p><p>-- <br>Keith Smiley<br></p><p>On Sun, Jul 31, 2016, at 21:46, Keith Smiley via swift-dev wrote:<br>&gt; Hey everyone,<br>&gt; <br>&gt; Recently I&#39;ve been working on making Swift autocomplete outside of Xcode<br>&gt; (specifically vim). Of course to do this, I&#39;ve been using<br>&gt; [SourceKitten][0],<br>&gt; which is a great bridge for interacting with `sourcekitd`.<br>&gt; <br>&gt; While working on this, I also ran across `sourcekitd-test` and<br>&gt; `sourcekitd-repl`<br>&gt; from the Swift repo. These tools are also awesome for working with<br>&gt; `sourcekitd`.<br>&gt; `sourcekitd-test` even has practically the same command line interface as<br>&gt; SourceKitten&#39;s complete command.<br>&gt; <br>&gt; With `sourcekitd-test`:<br>&gt; <br>&gt; ```<br>&gt; $ sourcekitd-test -req=complete -offset=x file.swift -- [compiler args]<br>&gt; ```<br>&gt; <br>&gt; With SourceKitten:<br>&gt; <br>&gt; ```<br>&gt; $ sourcekitten complete --offset x --file file.swift -- [compiler args]<br>&gt; ```<br>&gt; <br>&gt; These 2 commands of course call through to `sourcekitd` in the same way,<br>&gt; so this<br>&gt; ends up with the same output as well.<br>&gt; <br>&gt; All of this is just to show that I think these tools would be extremely<br>&gt; valuable<br>&gt; to have shipped with whichever Swift toolchains are bundled with Xcode,<br>&gt; so users<br>&gt; would automatically have tools for completion installed.<br>&gt; <br>&gt; I&#39;d love to hear some thoughts on this, and also if it&#39;s even a feasible<br>&gt; thing<br>&gt; to ask for. Also let me know if this post would be better suited for<br>&gt; another<br>&gt; list. I didn&#39;t feel like this was particularly appropriate for<br>&gt; swift-evolution<br>&gt; since there aren&#39;t really any implementation details in question here.<br>&gt; <br>&gt; <br>&gt; [0]: https://github.com/jpsim/SourceKitten<br>&gt; <br>&gt; <br>&gt; Thanks for reading!<br>&gt; <br>&gt; --<br>&gt; Keith Smiley<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3a0ae72b2f6bdc4476f1fcb63396e717?s=50"></div><header><strong>Shipping sourcekitd-test/repl with Swift</strong> from <string>Jean-Pierre Simard</string> &lt;jp at jpsim.com&gt;<p>August 30, 2016 at 04:00:00am</p></header><div class="content"><p>Before SourceKit-related functionality can be considered for inclusion in<br>release packages for Linux, it needs to be able to be built during &quot;normal&quot;<br>invocation of the build script. I say normal because it&#39;s possible to build<br>SourceKit with two (simple) invocations of the build script at the moment:<br>https://github.com/apple/swift/pull/3594#issuecomment-234169759<br></p><p>The reason SourceKit can&#39;t currently be built in a single pass is that it<br>depends on libdispatch, which has a dependency on Swift for its overlay and<br>so is built _after_ Swift, but SourceKit is part of the Swift project. This<br>is only a problem on Linux because SourceKit can use the system&#39;s<br>libdispatch rather than the corelibs one when building on OS X.<br></p><p>Here are different ideas for addressing this circular dependency:<br></p><p>1. Break SourceKit out into a different CMake &quot;project&quot;. This way, the<br>build script would build Swift -&gt; libdispatch -&gt; SourceKit. This is<br>probably the most elegant solution.<br>2. Build libdispatch twice: once before building Swift (without its<br>overlay) and again with its overlay. This is probably the easiest and most<br>naive way to solve this, but is potentially wasteful since we&#39;re building<br>it twice. Actually probably not, assuming the build cache is reused<br>effectively. But it&#39;s certainly not pretty.<br>3. Remove SourceKit&#39;s dependency on libdispatch. I dislike this option<br>because rewriting the libdispatch parts of SK with libpthread or C++14<br>builtins would be a sizable undertaking and the codebase would suffer for<br>it.<br></p><p>I&#39;m sure there are other approaches that could work but I&#39;m not aware of<br>them.<br></p><p>This is being tracked as SR-1676, which is currently unassigned:<br>https://bugs.swift.org/browse/SR-1676<br></p><p>On Mon, 29 Aug 2016 at 20:25 Keith Smiley via swift-dev &lt;swift-dev at swift.org&gt;<br>wrote:<br></p><p>&gt; Sorry to bump this thread, just wondering if anyone has any thoughts on<br>&gt; this now that (some) of the Swift 3.0 craziness is done.<br>&gt;<br>&gt; --<br>&gt; Keith Smiley<br>&gt;<br>&gt; On Sun, Jul 31, 2016, at 21:46, Keith Smiley via swift-dev wrote:<br>&gt; &gt; Hey everyone,<br>&gt; &gt;<br>&gt; &gt; Recently I&#39;ve been working on making Swift autocomplete outside of Xcode<br>&gt; &gt; (specifically vim). Of course to do this, I&#39;ve been using<br>&gt; &gt; [SourceKitten][0],<br>&gt; &gt; which is a great bridge for interacting with `sourcekitd`.<br>&gt; &gt;<br>&gt; &gt; While working on this, I also ran across `sourcekitd-test` and<br>&gt; &gt; `sourcekitd-repl`<br>&gt; &gt; from the Swift repo. These tools are also awesome for working with<br>&gt; &gt; `sourcekitd`.<br>&gt; &gt; `sourcekitd-test` even has practically the same command line interface as<br>&gt; &gt; SourceKitten&#39;s complete command.<br>&gt; &gt;<br>&gt; &gt; With `sourcekitd-test`:<br>&gt; &gt;<br>&gt; &gt; ```<br>&gt; &gt; $ sourcekitd-test -req=complete -offset=x file.swift -- [compiler args]<br>&gt; &gt; ```<br>&gt; &gt;<br>&gt; &gt; With SourceKitten:<br>&gt; &gt;<br>&gt; &gt; ```<br>&gt; &gt; $ sourcekitten complete --offset x --file file.swift -- [compiler args]<br>&gt; &gt; ```<br>&gt; &gt;<br>&gt; &gt; These 2 commands of course call through to `sourcekitd` in the same way,<br>&gt; &gt; so this<br>&gt; &gt; ends up with the same output as well.<br>&gt; &gt;<br>&gt; &gt; All of this is just to show that I think these tools would be extremely<br>&gt; &gt; valuable<br>&gt; &gt; to have shipped with whichever Swift toolchains are bundled with Xcode,<br>&gt; &gt; so users<br>&gt; &gt; would automatically have tools for completion installed.<br>&gt; &gt;<br>&gt; &gt; I&#39;d love to hear some thoughts on this, and also if it&#39;s even a feasible<br>&gt; &gt; thing<br>&gt; &gt; to ask for. Also let me know if this post would be better suited for<br>&gt; &gt; another<br>&gt; &gt; list. I didn&#39;t feel like this was particularly appropriate for<br>&gt; &gt; swift-evolution<br>&gt; &gt; since there aren&#39;t really any implementation details in question here.<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; [0]: https://github.com/jpsim/SourceKitten<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; Thanks for reading!<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; Keith Smiley<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-dev mailing list<br>&gt; &gt; swift-dev at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160830/b38145b1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1b54c2d366bbc31b41cf7dcbc77324f9?s=50"></div><header><strong>Shipping sourcekitd-test/repl with Swift</strong> from <string>Keith Smiley</string> &lt;k at keith.so&gt;<p>August 29, 2016 at 09:00:00pm</p></header><div class="content"><p>Thanks for the context JP! Maybe we should circle back once that has been<br>figured out then.<br></p><p>--<br>Keith Smiley<br></p><p>On 08/30, Jean-Pierre Simard wrote:<br>&gt; Before SourceKit-related functionality can be considered for inclusion in<br>&gt; release packages for Linux, it needs to be able to be built during &quot;normal&quot;<br>&gt; invocation of the build script. I say normal because it&#39;s possible to build<br>&gt; SourceKit with two (simple) invocations of the build script at the moment:<br>&gt; https://github.com/apple/swift/pull/3594#issuecomment-234169759<br>&gt;<br>&gt; The reason SourceKit can&#39;t currently be built in a single pass is that it<br>&gt; depends on libdispatch, which has a dependency on Swift for its overlay and<br>&gt; so is built _after_ Swift, but SourceKit is part of the Swift project. This<br>&gt; is only a problem on Linux because SourceKit can use the system&#39;s<br>&gt; libdispatch rather than the corelibs one when building on OS X.<br>&gt;<br>&gt; Here are different ideas for addressing this circular dependency:<br>&gt;<br>&gt; 1. Break SourceKit out into a different CMake &quot;project&quot;. This way, the<br>&gt; build script would build Swift -&gt; libdispatch -&gt; SourceKit. This is<br>&gt; probably the most elegant solution.<br>&gt; 2. Build libdispatch twice: once before building Swift (without its<br>&gt; overlay) and again with its overlay. This is probably the easiest and most<br>&gt; naive way to solve this, but is potentially wasteful since we&#39;re building<br>&gt; it twice. Actually probably not, assuming the build cache is reused<br>&gt; effectively. But it&#39;s certainly not pretty.<br>&gt; 3. Remove SourceKit&#39;s dependency on libdispatch. I dislike this option<br>&gt; because rewriting the libdispatch parts of SK with libpthread or C++14<br>&gt; builtins would be a sizable undertaking and the codebase would suffer for<br>&gt; it.<br>&gt;<br>&gt; I&#39;m sure there are other approaches that could work but I&#39;m not aware of<br>&gt; them.<br>&gt;<br>&gt; This is being tracked as SR-1676, which is currently unassigned:<br>&gt; https://bugs.swift.org/browse/SR-1676<br>&gt;<br>&gt; On Mon, 29 Aug 2016 at 20:25 Keith Smiley via swift-dev &lt;swift-dev at swift.org&gt;<br>&gt; wrote:<br>&gt;<br>&gt; &gt; Sorry to bump this thread, just wondering if anyone has any thoughts on<br>&gt; &gt; this now that (some) of the Swift 3.0 craziness is done.<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; Keith Smiley<br>&gt; &gt;<br>&gt; &gt; On Sun, Jul 31, 2016, at 21:46, Keith Smiley via swift-dev wrote:<br>&gt; &gt; &gt; Hey everyone,<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; Recently I&#39;ve been working on making Swift autocomplete outside of Xcode<br>&gt; &gt; &gt; (specifically vim). Of course to do this, I&#39;ve been using<br>&gt; &gt; &gt; [SourceKitten][0],<br>&gt; &gt; &gt; which is a great bridge for interacting with `sourcekitd`.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; While working on this, I also ran across `sourcekitd-test` and<br>&gt; &gt; &gt; `sourcekitd-repl`<br>&gt; &gt; &gt; from the Swift repo. These tools are also awesome for working with<br>&gt; &gt; &gt; `sourcekitd`.<br>&gt; &gt; &gt; `sourcekitd-test` even has practically the same command line interface as<br>&gt; &gt; &gt; SourceKitten&#39;s complete command.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; With `sourcekitd-test`:<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; ```<br>&gt; &gt; &gt; $ sourcekitd-test -req=complete -offset=x file.swift -- [compiler args]<br>&gt; &gt; &gt; ```<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; With SourceKitten:<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; ```<br>&gt; &gt; &gt; $ sourcekitten complete --offset x --file file.swift -- [compiler args]<br>&gt; &gt; &gt; ```<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; These 2 commands of course call through to `sourcekitd` in the same way,<br>&gt; &gt; &gt; so this<br>&gt; &gt; &gt; ends up with the same output as well.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; All of this is just to show that I think these tools would be extremely<br>&gt; &gt; &gt; valuable<br>&gt; &gt; &gt; to have shipped with whichever Swift toolchains are bundled with Xcode,<br>&gt; &gt; &gt; so users<br>&gt; &gt; &gt; would automatically have tools for completion installed.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; I&#39;d love to hear some thoughts on this, and also if it&#39;s even a feasible<br>&gt; &gt; &gt; thing<br>&gt; &gt; &gt; to ask for. Also let me know if this post would be better suited for<br>&gt; &gt; &gt; another<br>&gt; &gt; &gt; list. I didn&#39;t feel like this was particularly appropriate for<br>&gt; &gt; &gt; swift-evolution<br>&gt; &gt; &gt; since there aren&#39;t really any implementation details in question here.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; [0]: https://github.com/jpsim/SourceKitten<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; Thanks for reading!<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; --<br>&gt; &gt; &gt; Keith Smiley<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; _______________________________________________<br>&gt; &gt; &gt; swift-dev mailing list<br>&gt; &gt; &gt; swift-dev at swift.org<br>&gt; &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-dev mailing list<br>&gt; &gt; swift-dev at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; &gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
