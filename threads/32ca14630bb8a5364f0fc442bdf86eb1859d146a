<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Idea] &quot;Add needless words&quot; to Objective-C method names</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 24, 2016 at 11:00:00am</p></header><div class="content"><p>on Tue Feb 23 2016, Douglas Gregor &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hi all,<br>&gt;<br>&gt; One interesting aspect of the Swift API guidelines is that the obvious<br>&gt; mapping from Swift method names to Objective-C selectors produces poor<br>&gt; method names for Objective-C code. For example, this<br>&gt;<br>&gt; 	func object(at index: Int) -&gt; AnyObject { /* … */ }<br>&gt;<br>&gt; will produce the Objective-C selector “objectAt:”, which is not great<br>&gt; for Objective-C, where one rarely has a preposition at the end of a<br>&gt; selector piece.<br>&gt;<br>&gt; This will, in general, be an issue because the naming guidelines for<br>&gt; Swift and Objective-C differ so much. We could potentially improve<br>&gt; those cases where we have an argument label that ends in a preposition<br>&gt; (like this example) by appending the parameter name when we’re forming<br>&gt; the selector. For the object(at:) method above, it would produce the<br>&gt; selector “objectAtIndex:”.<br></p><p>I think maybe you want to take the noun from the type name, with special rules<br>like s/atInt/atIndex/ applied as a postprocessing step.<br></p><p>&gt; We would probably want to strip a leading article (a/an/the) from the parameter name, so that:<br>&gt;<br>&gt; 	func conforms(to aProtocol: Protocol) -&gt; Bool { /* … */ }<br>&gt;<br>&gt; ends up with the selector “conformsToProtocol:” (good) rather than “conformsToAProtocol:” (not so good).<br></p><p>I really don&#39;t like using the parameter name to derive these nouns<br>because it will result in suboptimal Swift code (and especially doc<br>comments) as people try to tune their interfaces for ObjC export.<br></p><p>&gt; The primary benefit to doing this is that we’ll produce slightly<br>&gt; better Objective-C selectors in cases where we would be producing very<br>&gt; bad ones (trailing prepositions are *rarely* used in Objective-C), so<br>&gt; (potentially) fewer Swift methods will need to provide Objective-C<br>&gt; method names explicitly via @objc(…).<br>&gt;<br>&gt; The major downsides are that it is a breaking change for anyone using<br>&gt; prepositions as argument labels now (and living with the poor<br>&gt; Objective-C names) and that developers won’t be able to guess what<br>&gt; Objective-C selector will be formed from a given Swift method without<br>&gt; having read this message.<br>&gt;<br>&gt; Thoughts?<br></p><p>I&#39;m not sure this is a problem we need to fix.  Are you?<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
