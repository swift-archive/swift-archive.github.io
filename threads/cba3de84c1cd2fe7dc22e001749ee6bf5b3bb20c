<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>Allow a typealias to be named after the corresponding type</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>June 15, 2016 at 10:00:00am</p></header><div class="content"><p>public struct BinarySearchTree&lt;Key: Comparable, Value&gt; {<br>    typealias Node = Node&lt;Key, Value&gt;<br>    var root: Node?<br>}<br></p><p>private class Node&lt;Key: Comparable, Value&gt; { }<br></p><p>This code currently doesn’t compile because the Node typealias circularly references itself. I’d like this syntax to just work, because this are the alternatives:<br>- rename the typealias to something like `TheNode`<br>- rename the Node class<br>- don’t use a typealias at all<br></p><p>None of them are very favorable. Allowing this proposed syntax will (in my opinion) lead to more readable code. In fact, inside the BinarySearchTree struct, BinarySearchTree is already an implicit typealias of BinarySearchTree&lt;Key, Value&gt;.<br></p><p>The only problem I foresee is that a generic typealias could cause confusion, so perhaps that shouldn’t be allowed here.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160615/cba3b20c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Allow a typealias to be named after the corresponding type</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>June 15, 2016 at 01:00:00am</p></header><div class="content"><p>&gt; public struct BinarySearchTree&lt;Key: Comparable, Value&gt; {<br>&gt;     typealias Node = Node&lt;Key, Value&gt;<br>&gt;     var root: Node?<br>&gt; }<br>&gt; <br>&gt; private class Node&lt;Key: Comparable, Value&gt; { }<br>&gt; <br>&gt; This code currently doesn’t compile because the Node typealias circularly references itself. I’d like this syntax to just work, because this are the alternatives:<br>&gt; - rename the typealias to something like `TheNode`<br>&gt; - rename the Node class<br>&gt; - don’t use a typealias at all<br></p><p>- fully qualify the class name with the name of the module:<br></p><p>	typealias Node = DataStructureKit.Node&lt;Key, Value&gt;<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>Allow a typealias to be named after the corresponding type</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>June 15, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On 15 Jun 2016, at 09:35, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; public struct BinarySearchTree&lt;Key: Comparable, Value&gt; {<br>&gt;&gt;    typealias Node = Node&lt;Key, Value&gt;<br>&gt;&gt;    var root: Node?<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; private class Node&lt;Key: Comparable, Value&gt; { }<br>&gt;&gt; <br>&gt;&gt; This code currently doesn’t compile because the Node typealias circularly references itself. I’d like this syntax to just work, because this are the alternatives:<br>&gt;&gt; - rename the typealias to something like `TheNode`<br>&gt;&gt; - rename the Node class<br>&gt;&gt; - don’t use a typealias at all<br>&gt; <br>&gt; - fully qualify the class name with the name of the module:<br>&gt; <br>&gt; 	typealias Node = DataStructureKit.Node&lt;Key, Value&gt;<br></p><p>This. Though I do sympathise with the issue, as it’s kind of strange that a circular reference is assumed rather than searching for something else in scope, as this differs from how things like variable shadowing behave.<br></p><p>That said, I think fully qualifying the type is the right solution in this case, but I wonder if we might consider a fixit capable of suggesting possible matching types?<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
