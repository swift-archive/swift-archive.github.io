<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Idea] Switching Comparable types: a new operator</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February  4, 2016 at 04:00:00pm</p></header><div class="content"><p>on Thu Feb 04 2016, Jonathan Tang &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Can&#39;t you define this yourself?  This worked in a Playground using Swift<br>&gt; 2.1:<br>&gt;<br>&gt; enum Ordering {<br>&gt;     case OrderedSame, OrderedAscending, OrderedDescending<br>&gt; }<br>&gt;<br>&gt; infix operator &lt;=&gt; {}<br>&gt; func &lt;=&gt; &lt;T: Comparable&gt;(x: T, y: T) -&gt; Ordering {<br>&gt;     if x &lt; y {<br>&gt;         return .OrderedAscending<br>&gt;     } else if x &gt; y {<br>&gt;         return .OrderedDescending<br>&gt;     } else {<br>&gt;         return .OrderedSame<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; let x = 3<br>&gt; let y = 4<br>&gt; switch x &lt;=&gt; y {<br>&gt; case .OrderedSame:<br>&gt;     print(3)<br>&gt; case .OrderedAscending:<br>&gt;     print(4)  // Executed<br>&gt; case .OrderedDescending:<br>&gt;     print(5)<br>&gt; }<br></p><p>The problem is that the stdlib algorithms don&#39;t use this, so sorting,<br>e.g., an array of arrays of strings ends up being more expensive than<br>necessary.  What you really want is for the &quot;spaceship operator&quot; to be<br>the primary implementation hook that gets called from the comparison<br>predicates.<br></p><p>It&#39;s on the agenda for swift 3 to add the spaceship operator, and make<br>the algorithms use it, and solve the migration problems for old code,<br>and solve the interop problems with foundation.  However, we have a lot<br>of other work on our hands, and there&#39;s always a chance we won&#39;t fit it<br>in the schedule.  This could make a great after-starter project for<br>someone out there who wanted to take it on (hint, hint).<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fa2575f192bfdb93dd4cb043545a5df4?s=50"></div><header><strong>[Idea] Switching Comparable types: a new operator</strong> from <string>Ross O&#39;Brien</string> &lt;narrativium at gmail.com&gt;<p>February  5, 2016 at 12:00:00am</p></header><div class="content"><p>In answer to Jonathan:<br>I can define it myself - and did, in the original post. I don&#39;t know how<br>common a use-case it is, but it&#39;s a small annoyance with switch statements<br>to write &#39;default: break // this is impossible&#39;. This is a specific<br>scenario where case pattern-matching pattern seemed inadequate, so I pitch<br>it here for more discussion, my thinking being that: perhaps if it&#39;s in<br>Core, it can be implemented more efficiently than I&#39;ve done here. Perhaps<br>there are better choices of characters for the specific operator. Perhaps<br>there&#39;s a reason why converting this comparison into an NSComparisonResult<br>isn&#39;t already there. I only find out if I ask!<br></p><p>In answer to Dave:<br>That&#39;s interesting to hear (and possibly saved everyone the bother of a<br>review!). I wasn&#39;t aware it was already a named operator (and in use in<br>other languages, now I&#39;ve looked it up). I hope it makes it into the<br>schedule, as I&#39;m not sure I know enough to take on that hint!<br></p><p>On Fri, Feb 5, 2016 at 12:10 AM, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; on Thu Feb 04 2016, Jonathan Tang &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt; Can&#39;t you define this yourself?  This worked in a Playground using Swift<br>&gt; &gt; 2.1:<br>&gt; &gt;<br>&gt; &gt; enum Ordering {<br>&gt; &gt;     case OrderedSame, OrderedAscending, OrderedDescending<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; infix operator &lt;=&gt; {}<br>&gt; &gt; func &lt;=&gt; &lt;T: Comparable&gt;(x: T, y: T) -&gt; Ordering {<br>&gt; &gt;     if x &lt; y {<br>&gt; &gt;         return .OrderedAscending<br>&gt; &gt;     } else if x &gt; y {<br>&gt; &gt;         return .OrderedDescending<br>&gt; &gt;     } else {<br>&gt; &gt;         return .OrderedSame<br>&gt; &gt;     }<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; let x = 3<br>&gt; &gt; let y = 4<br>&gt; &gt; switch x &lt;=&gt; y {<br>&gt; &gt; case .OrderedSame:<br>&gt; &gt;     print(3)<br>&gt; &gt; case .OrderedAscending:<br>&gt; &gt;     print(4)  // Executed<br>&gt; &gt; case .OrderedDescending:<br>&gt; &gt;     print(5)<br>&gt; &gt; }<br>&gt;<br>&gt; The problem is that the stdlib algorithms don&#39;t use this, so sorting,<br>&gt; e.g., an array of arrays of strings ends up being more expensive than<br>&gt; necessary.  What you really want is for the &quot;spaceship operator&quot; to be<br>&gt; the primary implementation hook that gets called from the comparison<br>&gt; predicates.<br>&gt;<br>&gt; It&#39;s on the agenda for swift 3 to add the spaceship operator, and make<br>&gt; the algorithms use it, and solve the migration problems for old code,<br>&gt; and solve the interop problems with foundation.  However, we have a lot<br>&gt; of other work on our hands, and there&#39;s always a chance we won&#39;t fit it<br>&gt; in the schedule.  This could make a great after-starter project for<br>&gt; someone out there who wanted to take it on (hint, hint).<br>&gt;<br>&gt; --<br>&gt; -Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160205/2c3c5563/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
