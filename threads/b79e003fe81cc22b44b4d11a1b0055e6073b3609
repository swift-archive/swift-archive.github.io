<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>Default lazy constructor</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>January  5, 2016 at 01:00:00pm</p></header><div class="content"><p>When creating a lazy variable, maybe we should allow for default closures,<br>i.e<br></p><p>lazy var userSession: UserSession<br></p><p>Which will construct that object for you<br>instead of having to do:<br></p><p>lazy var object: MyObject {<br></p><p>        let userSession = UserSession()<br></p><p>        return userSession<br></p><p>}()<br></p><p>If the initializer requires parameter values then as an extension of this<br>we could pass them in psuedo C++ style:<br></p><p>lazy var object: UserSession(otherVariable)<br></p><p>Potentially otherVariable in this case could be lazily processed, so that<br>its the equivalent of:<br></p><p>lazy var object: MyObject {<br></p><p>        let userSession = UserSession(otherVariable)<br></p><p>        return userSession<br></p><p>}()<br></p><p>-- <br> Wizard<br>james at supmenow.com<br>+44 7523 279 698<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160105/b79e3609/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>Default lazy constructor</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>January  5, 2016 at 12:00:00pm</p></header><div class="content"><p>Have you heard of the property behaviors proposal?<br></p><p>Félix<br></p><p>&gt; Le 5 janv. 2016 à 08:48:03, James Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; When creating a lazy variable, maybe we should allow for default closures, i.e<br>&gt; <br>&gt; lazy var userSession: UserSession<br>&gt; <br>&gt; Which will construct that object for you<br>&gt; instead of having to do:<br>&gt; <br>&gt; lazy var object: MyObject {<br>&gt;         let userSession = UserSession()<br>&gt; <br>&gt;         return userSession<br>&gt; <br>&gt; }()<br>&gt; <br>&gt; If the initializer requires parameter values then as an extension of this we could pass them in psuedo C++ style:<br>&gt; <br>&gt; lazy var object: UserSession(otherVariable) <br>&gt; <br>&gt; Potentially otherVariable in this case could be lazily processed, so that its the equivalent of:<br>&gt; <br>&gt; <br>&gt; lazy var object: MyObject {<br>&gt;         let userSession = UserSession(otherVariable)<br>&gt; <br>&gt;         return userSession<br>&gt; <br>&gt; }()<br>&gt; <br>&gt; <br>&gt; -- <br>&gt;  Wizard<br>&gt; james at supmenow.com &lt;mailto:james at supmenow.com&gt;<br>&gt; +44 7523 279 698<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160105/c8cd46b0/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
