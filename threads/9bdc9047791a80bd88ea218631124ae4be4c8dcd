<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Rejected] SE-0009 Require self for accessing instance members</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>January  5, 2016 at 11:00:00pm</p></header><div class="content"><p>The review of SE-0009 &quot;Require self for accessing instance members`&quot; ran from December 16–20, 2015. The proposal has been rejected.<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md&gt;<br></p><p>This proposal spawned a massive, polarized discussion with 200+ messages involving 80+ participants. We’re thrilled at the enthusiasm and thank all who participated. There were many, many interesting points made, along with experience reports from various Swift code bases, ideas to help mitigate the concerns that motivated the proposal, and so on. Quantitatively, the overall community assessment of the proposal was roughly 5:2 against requiring “self.”.<br></p><p>The core team agreed that this proposal is not the right direction for Swift. There are a number of reasons for this decision:<br></p><p>* Mandatory “self.” introduces a significant amount of verbosity that does not justify itself with added clarity. While it is true that mandatory “self.” may prevent a class of bugs, the cost of eliminating those bugs is fairly high in terms of visual clutter, which goes against the generally uncluttered feel of Swift. Paul Cantrell put it well in his review &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/002910.html&gt; when he said, “anything that is widely repeated becomes invisible.” Swift aims to avoid such boilerplate and repetition in its design, a principle also espoused by the Swift API Design Guidelines &lt;https://swift.org/documentation/api-design-guidelines.html&gt;.<br></p><p>* The requirement to use “self.” within potentially-escaping closures is a useful indicator of the potential for retain cycles that we don’t want to lose. Additionally, developers can optionally use “self.” when they feel it improves clarity (e.g., when similar operations are being performed on several different instances, of which “self” is one).<br></p><p>* The name-shadowing concerns behind the mandatory “self.” apply equally well to anything found by unqualified name lookup, including names found in the global scope. To call out members of types as requiring qualification while global names do not (even when global names tend to be far more numerous) feels inconsistent, but requiring qualification for everything (e.g., “Swift.print”, “self.name”) exacerbates the problem of visual clutter. <br></p><p>* Individuals or teams that feel that explicit “self.” is beneficial for their own code bases can enforce such a coding convention via tooling with the status quo. If this proposal were accepted, those opposed to the proposal would effectively have no recourse because the language itself would be enforcing “self.”.<br></p><p>	Doug Gregor<br>	Review Manager<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution-announce/attachments/20160105/9bdc8dcd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc38aef146f886571b3c445851add884?s=50"></div><header><strong>[Rejected] SE-0009 Require self for accessing instance members</strong> from <string>Honza Dvorsky</string> &lt;jan.dvorsky at me.com&gt;<p>January  6, 2016 at 02:00:00pm</p></header><div class="content"><p>Hi all,<br></p><p>since you mentioned:<br>&gt; Individuals or teams that feel that explicit “self.” is beneficial for<br>their own code bases can enforce such a coding convention via tooling with<br>the status quo.<br></p><p>Are there any existing tools that already do that? I was hoping for a<br>compiler flag where one could disable implicit self to keep the code more<br>readable in out-of-Xcode scenarios, is there one? Or does the above just<br>mean that it&#39;s &quot;theoretically&quot; possible to enforce it, even though there&#39;s<br>no existing tool for it yet?<br></p><p>I remember this being discussed in the conversation about this proposal and<br>I haven&#39;t seen anyone being *against* there being a compiler flag, assuming<br>it&#39;s off by default. To push that forwards, would we have to create a new<br>proposal or could that be taken as an action coming out of this one<br>(considering how many people still were *for* required self, even if we<br>were in a minority)?<br></p><p>Grateful for any advice, thanks.<br>Honza Dvorsky<br></p><p>On Wed, Jan 6, 2016 at 8:08 AM Douglas Gregor via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; The review of SE-0009 &quot;Require self for accessing instance members`&quot; ran<br>&gt; from December 16–20, 2015. The proposal has been *rejected*.<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md<br>&gt;<br>&gt; This proposal spawned a massive, polarized discussion with 200+ messages<br>&gt; involving 80+ participants. We’re thrilled at the enthusiasm and thank all<br>&gt; who participated. There were many, many interesting points made, along with<br>&gt; experience reports from various Swift code bases, ideas to help mitigate<br>&gt; the concerns that motivated the proposal, and so on. Quantitatively, the<br>&gt; overall community assessment of the proposal was roughly 5:2 against<br>&gt; requiring “self.”.<br>&gt;<br>&gt; The core team agreed that this proposal is not the right direction for<br>&gt; Swift. There are a number of reasons for this decision:<br>&gt;<br>&gt; * Mandatory “self.” introduces a significant amount of verbosity that does<br>&gt; not justify itself with added clarity. While it is true that mandatory<br>&gt; “self.” may prevent a class of bugs, the cost of eliminating those bugs is<br>&gt; fairly high in terms of visual clutter, which goes against the generally<br>&gt; uncluttered feel of Swift. Paul Cantrell put it well in his review<br>&gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/002910.html&gt; when<br>&gt; he said, “anything that is widely repeated becomes invisible.” Swift aims<br>&gt; to avoid such boilerplate and repetition in its design, a principle also<br>&gt; espoused by the Swift API Design Guidelines<br>&gt; &lt;https://swift.org/documentation/api-design-guidelines.html&gt;.<br>&gt;<br>&gt; * The requirement to use “self.” within potentially-escaping closures is a<br>&gt; useful indicator of the potential for retain cycles that we don’t want to<br>&gt; lose. Additionally, developers can optionally use “self.” when they feel it<br>&gt; improves clarity (e.g., when similar operations are being performed on<br>&gt; several different instances, of which “self” is one).<br>&gt;<br>&gt; * The name-shadowing concerns behind the mandatory “self.” apply equally<br>&gt; well to anything found by unqualified name lookup, including names found in<br>&gt; the global scope. To call out members of types as requiring qualification<br>&gt; while global names do not (even when global names tend to be far more<br>&gt; numerous) feels inconsistent, but requiring qualification for everything<br>&gt; (e.g., “Swift.print”, “self.name”) exacerbates the problem of visual<br>&gt; clutter.<br>&gt;<br>&gt; * Individuals or teams that feel that explicit “self.” is beneficial for<br>&gt; their own code bases can enforce such a coding convention via tooling with<br>&gt; the status quo. If this proposal were accepted, those opposed to the<br>&gt; proposal would effectively have no recourse because the language itself<br>&gt; would be enforcing “self.”.<br>&gt;<br>&gt; Doug Gregor<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/e33f74a7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c40db4457ab2c91a0d8006da31b177c6?s=50"></div><header><strong>[Rejected] SE-0009 Require self for accessing instance members</strong> from <string>Trent Nadeau</string> &lt;tanadeau at gmail.com&gt;<p>January  6, 2016 at 09:00:00am</p></header><div class="content"><p>You can probably use SwiftLint (https://github.com/realm/SwiftLint) and<br>create a new rule.<br></p><p>On Wed, Jan 6, 2016 at 9:17 AM, Honza Dvorsky via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hi all,<br>&gt;<br>&gt; since you mentioned:<br>&gt; &gt; Individuals or teams that feel that explicit “self.” is beneficial for<br>&gt; their own code bases can enforce such a coding convention via tooling with<br>&gt; the status quo.<br>&gt;<br>&gt; Are there any existing tools that already do that? I was hoping for a<br>&gt; compiler flag where one could disable implicit self to keep the code more<br>&gt; readable in out-of-Xcode scenarios, is there one? Or does the above just<br>&gt; mean that it&#39;s &quot;theoretically&quot; possible to enforce it, even though there&#39;s<br>&gt; no existing tool for it yet?<br>&gt;<br>&gt; I remember this being discussed in the conversation about this proposal<br>&gt; and I haven&#39;t seen anyone being *against* there being a compiler flag,<br>&gt; assuming it&#39;s off by default. To push that forwards, would we have to<br>&gt; create a new proposal or could that be taken as an action coming out of<br>&gt; this one (considering how many people still were *for* required self, even<br>&gt; if we were in a minority)?<br>&gt;<br>&gt; Grateful for any advice, thanks.<br>&gt; Honza Dvorsky<br>&gt;<br>&gt; On Wed, Jan 6, 2016 at 8:08 AM Douglas Gregor via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; The review of SE-0009 &quot;Require self for accessing instance members`&quot; ran<br>&gt;&gt; from December 16–20, 2015. The proposal has been *rejected*.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md<br>&gt;&gt;<br>&gt;&gt; This proposal spawned a massive, polarized discussion with 200+ messages<br>&gt;&gt; involving 80+ participants. We’re thrilled at the enthusiasm and thank all<br>&gt;&gt; who participated. There were many, many interesting points made, along with<br>&gt;&gt; experience reports from various Swift code bases, ideas to help mitigate<br>&gt;&gt; the concerns that motivated the proposal, and so on. Quantitatively, the<br>&gt;&gt; overall community assessment of the proposal was roughly 5:2 against<br>&gt;&gt; requiring “self.”.<br>&gt;&gt;<br>&gt;&gt; The core team agreed that this proposal is not the right direction for<br>&gt;&gt; Swift. There are a number of reasons for this decision:<br>&gt;&gt;<br>&gt;&gt; * Mandatory “self.” introduces a significant amount of verbosity that<br>&gt;&gt; does not justify itself with added clarity. While it is true that mandatory<br>&gt;&gt; “self.” may prevent a class of bugs, the cost of eliminating those bugs is<br>&gt;&gt; fairly high in terms of visual clutter, which goes against the generally<br>&gt;&gt; uncluttered feel of Swift. Paul Cantrell put it well in his review<br>&gt;&gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/002910.html&gt; when<br>&gt;&gt; he said, “anything that is widely repeated becomes invisible.” Swift<br>&gt;&gt; aims to avoid such boilerplate and repetition in its design, a principle<br>&gt;&gt; also espoused by the Swift API Design Guidelines<br>&gt;&gt; &lt;https://swift.org/documentation/api-design-guidelines.html&gt;.<br>&gt;&gt;<br>&gt;&gt; * The requirement to use “self.” within potentially-escaping closures is<br>&gt;&gt; a useful indicator of the potential for retain cycles that we don’t want to<br>&gt;&gt; lose. Additionally, developers can optionally use “self.” when they feel it<br>&gt;&gt; improves clarity (e.g., when similar operations are being performed on<br>&gt;&gt; several different instances, of which “self” is one).<br>&gt;&gt;<br>&gt;&gt; * The name-shadowing concerns behind the mandatory “self.” apply equally<br>&gt;&gt; well to anything found by unqualified name lookup, including names found in<br>&gt;&gt; the global scope. To call out members of types as requiring qualification<br>&gt;&gt; while global names do not (even when global names tend to be far more<br>&gt;&gt; numerous) feels inconsistent, but requiring qualification for everything<br>&gt;&gt; (e.g., “Swift.print”, “self.name”) exacerbates the problem of visual<br>&gt;&gt; clutter.<br>&gt;&gt;<br>&gt;&gt; * Individuals or teams that feel that explicit “self.” is beneficial for<br>&gt;&gt; their own code bases can enforce such a coding convention via tooling with<br>&gt;&gt; the status quo. If this proposal were accepted, those opposed to the<br>&gt;&gt; proposal would effectively have no recourse because the language itself<br>&gt;&gt; would be enforcing “self.”.<br>&gt;&gt;<br>&gt;&gt; Doug Gregor<br>&gt;&gt; Review Manager<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p><p><br>-- <br>Trent Nadeau<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/82cfb233/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f38cb038c3d9ae705c4db3b5b5272906?s=50"></div><header><strong>[Rejected] SE-0009 Require self for accessing instance members</strong> from <string>Greg Parker</string> &lt;gparker at apple.com&gt;<p>January  6, 2016 at 06:00:00am</p></header><div class="content"><p>&gt; On Jan 6, 2016, at 6:17 AM, Honza Dvorsky via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I remember this being discussed in the conversation about this proposal and I haven&#39;t seen anyone being *against* there being a compiler flag, assuming it&#39;s off by default.<br></p><p>We don&#39;t want language-changing compiler flags. swiftc doesn&#39;t even have flags to control warnings today, though I don&#39;t know if we&#39;ll be able to preserve that forever.<br></p><p>Style rules should be enforced by tools other than the compiler. <br></p><p><br>-- <br>Greg Parker     gparker at apple.com     Runtime Wrangler<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Rejected] SE-0009 Require self for accessing instance members</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>January  6, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jan 6, 2016, at 6:56 AM, Greg Parker via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 6, 2016, at 6:17 AM, Honza Dvorsky via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I remember this being discussed in the conversation about this proposal and I haven&#39;t seen anyone being *against* there being a compiler flag, assuming it&#39;s off by default.<br>&gt; <br>&gt; We don&#39;t want language-changing compiler flags. swiftc doesn&#39;t even have flags to control warnings today, though I don&#39;t know if we&#39;ll be able to preserve that forever.<br>&gt; <br>&gt; Style rules should be enforced by tools other than the compiler. <br></p><p>I tend to agree with Greg, in part because I don’t like the idea of having a cornucopia of potentially-conflicting warning flags for different coding conventions within the compiler proper (e.g., -Wimplicit-self vs. -Wunnecessarily-qualified-self, for the opposite ends of the spectrum in this particular debate).<br></p><p>The core team did talk about such a warning flag briefly, and there was no consensus either way. We think this needs more discussion in the community, but not as a discussion specific to requiring “self.”. Rather, the question is “does checking of coding conventions belong in the Swift compiler or in a separate tool?” and “how do we decide which coding conventions are important/popular/useful enough to include?”<br></p><p>	- Doug<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Rejected] SE-0009 Require self for accessing instance members</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>January  6, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Jan 6, 2016, at 11:47 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 6, 2016, at 6:56 AM, Greg Parker via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 6, 2016, at 6:17 AM, Honza Dvorsky via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I remember this being discussed in the conversation about this proposal and I haven&#39;t seen anyone being *against* there being a compiler flag, assuming it&#39;s off by default.<br>&gt;&gt; <br>&gt;&gt; We don&#39;t want language-changing compiler flags. swiftc doesn&#39;t even have flags to control warnings today, though I don&#39;t know if we&#39;ll be able to preserve that forever.<br>&gt;&gt; <br>&gt;&gt; Style rules should be enforced by tools other than the compiler. <br>&gt; <br>&gt; I tend to agree with Greg, in part because I don’t like the idea of having a cornucopia of potentially-conflicting warning flags for different coding conventions within the compiler proper (e.g., -Wimplicit-self vs. -Wunnecessarily-qualified-self, for the opposite ends of the spectrum in this particular debate).<br>&gt; <br>&gt; The core team did talk about such a warning flag briefly, and there was no consensus either way. We think this needs more discussion in the community, but not as a discussion specific to requiring “self.”. Rather, the question is “does checking of coding conventions belong in the Swift compiler or in a separate tool?” and “how do we decide which coding conventions are important/popular/useful enough to include?”<br></p><p>I agree that this is an important discussion to have.  <br></p><p>A possible middle ground might be an external tool that is also available during compilation with a single  -Wstyle-violation warning.  The “style definition” for a module would need to be specified somewhere available to both.  This would definitely be preferable to a long list of style-specific warning flags IMO and would allow different teams to adopt different workflows.<br></p><p>Matthew<br></p><p>&gt; <br>&gt; 	- Doug<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc38aef146f886571b3c445851add884?s=50"></div><header><strong>[Rejected] SE-0009 Require self for accessing instance members</strong> from <string>Honza Dvorsky</string> &lt;jan.dvorsky at me.com&gt;<p>January  6, 2016 at 06:00:00pm</p></header><div class="content"><p>Thanks Trent, I created an issue an there seems to be will to add it as an<br>opt-in rule: https://github.com/realm/SwiftLint/issues/321<br></p><p>Greg and Doug, thanks for the details, I didn&#39;t realize that there aren&#39;t<br>any language flags yet. In that case, I agree that moving this<br>responsibility to a tool higher up the chain makes sense. And hopefully<br>having to install a linter won&#39;t be an issue for developers going forward.<br>On Wed, Jan 6, 2016 at 6:47 PM Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Jan 6, 2016, at 6:56 AM, Greg Parker via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;&gt; On Jan 6, 2016, at 6:17 AM, Honza Dvorsky via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I remember this being discussed in the conversation about this proposal<br>&gt; and I haven&#39;t seen anyone being *against* there being a compiler flag,<br>&gt; assuming it&#39;s off by default.<br>&gt; &gt;<br>&gt; &gt; We don&#39;t want language-changing compiler flags. swiftc doesn&#39;t even have<br>&gt; flags to control warnings today, though I don&#39;t know if we&#39;ll be able to<br>&gt; preserve that forever.<br>&gt; &gt;<br>&gt; &gt; Style rules should be enforced by tools other than the compiler.<br>&gt;<br>&gt; I tend to agree with Greg, in part because I don’t like the idea of having<br>&gt; a cornucopia of potentially-conflicting warning flags for different coding<br>&gt; conventions within the compiler proper (e.g., -Wimplicit-self vs.<br>&gt; -Wunnecessarily-qualified-self, for the opposite ends of the spectrum in<br>&gt; this particular debate).<br>&gt;<br>&gt; The core team did talk about such a warning flag briefly, and there was no<br>&gt; consensus either way. We think this needs more discussion in the community,<br>&gt; but not as a discussion specific to requiring “self.”. Rather, the question<br>&gt; is “does checking of coding conventions belong in the Swift compiler or in<br>&gt; a separate tool?” and “how do we decide which coding conventions are<br>&gt; important/popular/useful enough to include?”<br>&gt;<br>&gt;         - Doug<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/9e9cd80b/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>[Rejected] SE-0009 Require self for accessing instance members</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>January  6, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jan 6, 2016, at 8:56 AM, Greg Parker via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Jan 6, 2016, at 6:17 AM, Honza Dvorsky via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I remember this being discussed in the conversation about this proposal and I haven&#39;t seen anyone being *against* there being a compiler flag, assuming it&#39;s off by default.<br>&gt; <br>&gt; We don&#39;t want language-changing compiler flags. swiftc doesn&#39;t even have flags to control warnings today, though I don&#39;t know if we&#39;ll be able to preserve that forever.<br>&gt; <br>&gt; Style rules should be enforced by tools other than the compiler. <br></p><p>I just spent a half hour last night debugging an issue that turned out to be caused by something getting written to a property which I thought was being written to a local variable, due to implicit self.<br></p><p>Clang had compiler flags to enforce specific stylistic rules, such as -Wobjc-missing-property-synthesis for those who disliked the auto-synthesis feature (and I never even understood that particular objection). It seems to me that this compiler warning would be at least as acceptable as that.<br></p><p>Charles<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/934945ae/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>[Rejected] SE-0009 Require self for accessing instance members</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>January  6, 2016 at 02:00:00pm</p></header><div class="content"><p>On Wed, Jan 6, 2016 at 2:18 PM, Charles Srstka via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; I just spent a half hour last night debugging an issue that turned out to<br>&gt; be caused by something getting written to a property which I thought was<br>&gt; being written to a local variable, due to implicit self.<br>&gt;<br>&gt;<br>One point to make is that requiring self is *not* the only fix for that<br>problem. You could also avoid shadowing. Which choice you make is up to you.<br>TJ<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/59381794/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>[Rejected] SE-0009 Require self for accessing instance members</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>January  6, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Jan 6, 2016, at 1:34 PM, T.J. Usiyan &lt;griotspeak at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Wed, Jan 6, 2016 at 2:18 PM, Charles Srstka via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; I just spent a half hour last night debugging an issue that turned out to be caused by something getting written to a property which I thought was being written to a local variable, due to implicit self.<br>&gt; <br>&gt; <br>&gt; One point to make is that requiring self is *not* the only fix for that problem. You could also avoid shadowing. Which choice you make is up to you.<br></p><p>Avoiding shadowing (or avoiding anything else for that matter) is also possible to flub accidentally. There’s no optional warning about shadowing either, AFAICT.<br></p><p>Charles<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/8aecfba2/attachment-0001.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
