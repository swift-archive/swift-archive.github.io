<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5cb216f14329ffeb7bd3a6bed45277e5?s=50"></div><header><strong>Range that goes both ways</strong> from <string>Mr Bee</string> &lt;pak.lebah at yahoo.com&gt;<p>September 21, 2016 at 07:00:00am</p></header><div class="content"><p>Hi,<br>I&#39;m a Swift newbie so forgive me if my question sounds a bit silly, or perhaps had been asked previously. My question is, why Swift doesn&#39;t have built-in operator for backward or decremented range? Especially to be used in for-in loop.<br>Swift only has ... (closed range) and ..&lt; (half-opened range) that both go forward (incremented). To use backward (decremented) range, we have to use several techniques (stride, sequence, etc). Of course those techniques work well. But I don&#39;t think they&#39;re very swifty, so to say.<br>So, is it possible to propose a new operator and a modification to existing operator regarding range? Would such proposal be considered and implemented after Swift 3? If it is, here&#39;s my pre-proposal about it.<br>1. Add new ..&gt; operator that goes backward (decremented) as companion to ..&lt; operator that goes forward (incremented).<br>Example:  for i in 1 ..&lt; 5 { print(i) }will prints: 1 2 3 4  for i in 5 ..&gt; 1 { print(i) }will prints: 5 4 3 2<br>2. Modify the ... operator to be able to go both ways. If the left operand is greater than the right, it goes backward (decremented). While if the left operand is less than the right, it goes forward (incremented).<br>Example:  for i in 1 ... 5 { print(i) }will prints: 1 2 3 4 5  for i in 5 ... 1 { print(i) }will prints: 5 4 3 2 1<br>3. Add new pair of operator to accompany the ..&gt; and ..&lt; (half opened range on the right side) pair operator. It&#39;s &gt;.. and &lt;.. operators which are half opened range on the left side. As you might guess, the &gt;.. is the opposite of ..&gt; operator and the &lt;.. is the opposite of the ..&lt; operator.<br>Example:  for i in 1 &lt;.. 5 { print(i) }will prints: 2 3 4 5  for i in 5 &gt;.. 1 { print(i) }will prints: 4 3 2 1<br>4. I would like to go even further by introducing a new attribute into for-in loop syntax. It&#39;s `step` keyword which is used to define the interval of the loop (like BASIC). Of course this additional attribute only works if the range is countable or indexable. If not, the compiler should complain.<br>Example:  for i in 1 ... 10 step 2 { print(i) }will prints: 1 3 5 7 9  for i in 10 ... 0 step 2 { print(i) }will prints: 10 8 6 4 2 0  for i in 1 ..&lt; 9 step 3 { print(i) }will prints: 1 3 6   // note: 9 is omitted since it&#39;s on the opened side.  for i in 9 &gt;.. 1 step 2 { print(i) }will prints: 7 5 3 1  // note: 9 is omitted since it&#39;s on the opened side.<br>I hope you get the idea. I think such a rich for-in loop syntax would make Swift smarter, more robust, and easier to be learned and understood. They&#39;re also required since the flexibiliy of c-style for-loop is no longer available from Swift 3 and on. Decremented or backward range is sometimes needed in some algorithms. Making it built into the language would be better, instead of using non-language solutions. This proposal also doesn&#39;t break old codes since it doesn&#39;t change the old behavior.<br>If such proposal is possible to be implemented —or at least considered— in the next version of Swift, I&#39;ll do the work of the formal proposal on GitHub. If it&#39;s not, well, I don&#39;t want to spend my time doing something that will be ignored.<br>Thank you.<br>Regards, <br>–Mr Bee<br>PS. I apologize if my English isn&#39;t well enough. I hope you all understand what I meant. :)<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160921/0f97a36e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>Range that goes both ways</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>September 21, 2016 at 11:00:00am</p></header><div class="content"><p>Hi,<br></p><p>AFAIK, these all would be very much sugar for:<br></p><p>1) (1 ..&lt; 5).reversed()<br>2) The same as above: (1 ... 5).reversed() does exactly what you want.<br>3) Kind of makes sense to me to include &gt;..,  though to be thorough, you&#39;d need to add &gt;.&lt; as well - that&#39;s a weird looking operator...<br>4) There&#39;s a global function for this: stride(from: 1, to: 10, by: 2)<br></p><p>Charlie<br></p><p><br>&gt; On Sep 21, 2016, at 9:49 AM, Mr Bee via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; I&#39;m a Swift newbie so forgive me if my question sounds a bit silly, or perhaps had been asked previously. My question is, why Swift doesn&#39;t have built-in operator for backward or decremented range? Especially to be used in for-in loop.<br>&gt; <br>&gt; Swift only has ... (closed range) and ..&lt; (half-opened range) that both go forward (incremented). To use backward (decremented) range, we have to use several techniques (stride, sequence, etc). Of course those techniques work well. But I don&#39;t think they&#39;re very swifty, so to say.<br>&gt; <br>&gt; So, is it possible to propose a new operator and a modification to existing operator regarding range? Would such proposal be considered and implemented after Swift 3? If it is, here&#39;s my pre-proposal about it.<br>&gt; <br>&gt; 1. Add new ..&gt; operator that goes backward (decremented) as companion to ..&lt; operator that goes forward (incremented).<br>&gt; <br>&gt; Example:<br>&gt;   for i in 1 ..&lt; 5 { print(i) }<br>&gt; will prints: 1 2 3 4<br>&gt;   for i in 5 ..&gt; 1 { print(i) }<br>&gt; will prints: 5 4 3 2<br>&gt; <br>&gt; 2. Modify the ... operator to be able to go both ways. If the left operand is greater than the right, it goes backward (decremented). While if the left operand is less than the right, it goes forward (incremented).<br>&gt; <br>&gt; Example:<br>&gt;   for i in 1 ... 5 { print(i) }<br>&gt; will prints: 1 2 3 4 5<br>&gt;   for i in 5 ... 1 { print(i) }<br>&gt; will prints: 5 4 3 2 1<br>&gt; <br>&gt; 3. Add new pair of operator to accompany the ..&gt; and ..&lt; (half opened range on the right side) pair operator. It&#39;s &gt;.. and &lt;.. operators which are half opened range on the left side. As you might guess, the &gt;.. is the opposite of ..&gt; operator and the &lt;.. is the opposite of the ..&lt; operator.<br>&gt; <br>&gt; Example:<br>&gt;   for i in 1 &lt;.. 5 { print(i) }<br>&gt; will prints: 2 3 4 5<br>&gt;   for i in 5 &gt;.. 1 { print(i) }<br>&gt; will prints: 4 3 2 1<br>&gt; <br>&gt; 4. I would like to go even further by introducing a new attribute into for-in loop syntax. It&#39;s `step` keyword which is used to define the interval of the loop (like BASIC). Of course this additional attribute only works if the range is countable or indexable. If not, the compiler should complain.<br>&gt; <br>&gt; Example:<br>&gt;   for i in 1 ... 10 step 2 { print(i) }<br>&gt; will prints: 1 3 5 7 9<br>&gt;   for i in 10 ... 0 step 2 { print(i) }<br>&gt; will prints: 10 8 6 4 2 0<br>&gt;   for i in 1 ..&lt; 9 step 3 { print(i) }<br>&gt; will prints: 1 3 6 <br>&gt;   // note: 9 is omitted since it&#39;s on the opened side.<br>&gt;   for i in 9 &gt;.. 1 step 2 { print(i) }<br>&gt; will prints: 7 5 3 1<br>&gt;   // note: 9 is omitted since it&#39;s on the opened side.<br>&gt; <br>&gt; I hope you get the idea. I think such a rich for-in loop syntax would make Swift smarter, more robust, and easier to be learned and understood. They&#39;re also required since the flexibiliy of c-style for-loop is no longer available from Swift 3 and on. Decremented or backward range is sometimes needed in some algorithms. Making it built into the language would be better, instead of using non-language solutions. This proposal also doesn&#39;t break old codes since it doesn&#39;t change the old behavior.<br>&gt; <br>&gt; If such proposal is possible to be implemented —or at least considered— in the next version of Swift, I&#39;ll do the work of the formal proposal on GitHub. If it&#39;s not, well, I don&#39;t want to spend my time doing something that will be ignored.<br>&gt; <br>&gt; Thank you.<br>&gt; <br>&gt; Regards, <br>&gt; <br>&gt; –Mr Bee<br>&gt; <br>&gt; PS. I apologize if my English isn&#39;t well enough. I hope you all understand what I meant. :)<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160921/069b3925/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5cb216f14329ffeb7bd3a6bed45277e5?s=50"></div><header><strong>Bls: Range that goes both ways</strong> from <string>Mr Bee</string> &lt;pak.lebah at yahoo.com&gt;<p>September 21, 2016 at 10:00:00am</p></header><div class="content"><p>Just to make myself (more) clear, I don&#39;t ask for any solutions because I&#39;ve known them already. I even have made my own custom operators for all the purposes so I have balance operators. Of course they&#39;re sugar candy syntax, but isn&#39;t that one of the reasons why Swift is great? If you look at previously accepted proposals, some of them are sugar syntax as well. So, I don&#39;t think I&#39;m the first one here.<br>I&#39;m proposing solutions that is built right into the language syntax so everybody else who need such operations doesn&#39;t have to make their own custom operators (like me) again and again and again. After all, if there is ..&lt; operator, why can&#39;t we have ..&gt; operator too, right? Why should we use the ugly `reversed()` and `stride()` function? If we have to use such `stride()` function that is able to create any possible variations of range, why do we have ... operator in the first place? Isn&#39;t it just sugar syntax?<br>But after I thought about it again, I think half-opened range doesn&#39;t really make any senses. The ..&lt; operator (and my proposed ..&gt; operator) should be removed. Or we have to accept the consequences that we also need the other accompanying operators. The … operator with optional `step` attribute that is able to go both ways is more important that half-opened range operator. <br>This is all because the lack of c-style for-loop syntax in Swift. Well, I&#39;m not against it, I like it in fact. It makes Swift syntax more elegant. However, I think the range syntax needs to be more flexible and complete as well, so we don&#39;t miss the old c-style for-loop syntax.<br>Regards, <br>–Mr Bee<br> <br></p><p>    Pada Rabu, 21 September 2016 16:11, Charlie Monroe &lt;charlie at charliemonroe.net&gt; menulis:<br> <br></p><p> Hi,<br>AFAIK, these all would be very much sugar for:<br>1) (1 ..&lt; 5).reversed()2) The same as above: (1 ... 5).reversed() does exactly what you want.3) Kind of makes sense to me to include &gt;..,  though to be thorough, you&#39;d need to add &gt;.&lt; as well - that&#39;s a weird looking operator...4) There&#39;s a global function for this: stride(from: 1, to: 10, by: 2)<br>Charlie<br></p><p><br>On Sep 21, 2016, at 9:49 AM, Mr Bee via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>Hi,<br>I&#39;m a Swift newbie so forgive me if my question sounds a bit silly, or perhaps had been asked previously. My question is, why Swift doesn&#39;t have built-in operator for backward or decremented range? Especially to be used in for-in loop.<br>Swift only has ... (closed range) and ..&lt; (half-opened range) that both go forward (incremented). To use backward (decremented) range, we have to use several techniques (stride, sequence, etc). Of course those techniques work well. But I don&#39;t think they&#39;re very swifty, so to say.<br>So, is it possible to propose a new operator and a modification to existing operator regarding range? Would such proposal be considered and implemented after Swift 3? If it is, here&#39;s my pre-proposal about it.<br>1. Add new ..&gt; operator that goes backward (decremented) as companion to ..&lt; operator that goes forward (incremented).<br>Example:  for i in 1 ..&lt; 5 { print(i) }will prints: 1 2 3 4  for i in 5 ..&gt; 1 { print(i) }will prints: 5 4 3 2<br>2. Modify the ... operator to be able to go both ways. If the left operand is greater than the right, it goes backward (decremented). While if the left operand is less than the right, it goes forward (incremented).<br>Example:  for i in 1 ... 5 { print(i) }will prints: 1 2 3 4 5  for i in 5 ... 1 { print(i) }will prints: 5 4 3 2 1<br>3. Add new pair of operator to accompany the ..&gt; and ..&lt; (half opened range on the right side) pair operator. It&#39;s &gt;.. and &lt;.. operators which are half opened range on the left side. As you might guess, the &gt;.. is the opposite of ..&gt; operator and the &lt;.. is the opposite of the ..&lt; operator.<br>Example:  for i in 1 &lt;.. 5 { print(i) }will prints: 2 3 4 5  for i in 5 &gt;.. 1 { print(i) }will prints: 4 3 2 1<br>4. I would like to go even further by introducing a new attribute into for-in loop syntax. It&#39;s `step` keyword which is used to define the interval of the loop (like BASIC). Of course this additional attribute only works if the range is countable or indexable. If not, the compiler should complain.<br>Example:  for i in 1 ... 10 step 2 { print(i) }will prints: 1 3 5 7 9  for i in 10 ... 0 step 2 { print(i) }will prints: 10 8 6 4 2 0  for i in 1 ..&lt; 9 step 3 { print(i) }will prints: 1 3 6   // note: 9 is omitted since it&#39;s on the opened side.  for i in 9 &gt;.. 1 step 2 { print(i) }will prints: 7 5 3 1  // note: 9 is omitted since it&#39;s on the opened side.<br>I hope you get the idea. I think such a rich for-in loop syntax would make Swift smarter, more robust, and easier to be learned and understood. They&#39;re also required since the flexibiliy of c-style for-loop is no longer available from Swift 3 and on. Decremented or backward range is sometimes needed in some algorithms. Making it built into the language would be better, instead of using non-language solutions. This proposal also doesn&#39;t break old codes since it doesn&#39;t change the old behavior.<br>If such proposal is possible to be implemented —or at least considered— in the next version of Swift, I&#39;ll do the work of the formal proposal on GitHub. If it&#39;s not, well, I don&#39;t want to spend my time doing something that will be ignored.<br>Thank you.<br>Regards, <br>–Mr Bee<br>PS. I apologize if my English isn&#39;t well enough. I hope you all understand what I meant. :)<br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br></p><p><br>   <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160921/6edd11d5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>Bls: Range that goes both ways</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>September 21, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On 21 Sep 2016, at 11:44, Mr Bee via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; But after I thought about it again, I think half-opened range doesn&#39;t really make any senses. The ..&lt; operator (and my proposed ..&gt; operator) should be removed. Or we have to accept the consequences that we also need the other accompanying operators. The … operator with optional `step` attribute that is able to go both ways is more important that half-opened range operator. <br>&gt; <br></p><p>This came up before on the list from whence I get the link<br></p><p>https://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html<br></p><p>which justifies both why numbering starts at 0 and why the ..&lt; operator is the most useful one. Th tl;dr version is that in a..&lt; b you can find out how many integers are in the range with a - b and easily specify an empty range. With a … b you have to do a - b + 1 which is ugly and it is also problematic if you want to specify an empty range.<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
