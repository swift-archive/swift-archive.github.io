<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>SE-0025: Scoped Access Level, next steps</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>March 28, 2016 at 11:00:00pm</p></header><div class="content"><p>Hello Joanna, seems you are quite new to programming, just kidding, so sad you’ve missed the punch card era,<br>a lot of fun, but I cannot take you back there because my Delorean is broken :o)<br></p><p>Seriously, thank you for writing this, I share your opinion:<br></p><p>&gt; In the light of the preceding paragraphs, I would, respectfully, suggest that &quot;protected&quot; should be allowed for exclusive use in the case of classes that really have to derive from each other, but for no other reason.<br>Exactly !<br>&gt; Likewise, &quot;private&quot; should mean what it has meant and still means in most other languages, members of classes only, since, like &quot;protected&quot;, that is its true nature.<br>Yes.<br>&gt; <br>&gt; What Swift presently calls &quot;internal&quot; seems to equate more to the C# concept of &quot;internal&quot; and, in my mind, needs no further discussion or change.<br>&gt; <br>&gt; Just as I was never happy with the Delphi concept of private and protected members being accessible, not just in the class or its derived types, but also from any code in the same code unit, I feel uneasy about the present definition of the private scope in Swift.<br>&gt; <br>Me too.<br>&gt; I have seen some horrendous abuses of that privileged access, with the gradual growth of single code units to truly gargantuan proportions, just because someone felt that certain classes needed to violate all the rules of common sense and be able to access each others&#39; private parts (if you&#39;ll pardon the vernacular).<br>&gt; <br>&gt; <br>&gt; <br>Especially this, couldn’t agree more:<br>&gt; Personally, I would like to see the end of the file based scope and, instead, see more clearly defined &quot;privileged&quot; access between types, even if they are in the same code unit.<br></p><p>I would suggest the (true) use of “namespaces”, instead of file based scope,<br>so that entities  *must*  be imported or qualified by namespace.<br></p><p>When I started with Swift, i was under the false impression that Swift concatenates all the sources in a project and simply treat this<br>as one single source file…<br></p><p>To my knowledge there is no way to hide class members. This is not good !<br>I’d like to show how i prefer it in this example: <br></p><p>“private” here means: only visible within the scope where it was declared!  Imho what private does now in Swift is<br>completely wrong. <br>“Protected” is here: like private but visible in descendants as well <br></p><p>namespace Eriador<br>{<br>class Mithril       // This class is not visible outside the namespace.                 <br>{                   // a + b<br>    var a = 0.0     // should not visible outside this class/instance<br>    private var b = 1.0    // “private”is the default<br>    public var c = 1.0     // is visible outside the class<br>    protected var d = “My precious…”  // is also visible in descendants<br>    <br>    init()<br>    {<br>        forgeRing()<br>    }<br>    <br>    // to use this function outside, it should be preceeded<br>    // by a &quot;public&quot; keyword, like it is in Java:<br></p><p>    public func stridingToMordor() -&gt; Double<br>    {<br>        return a + b + c<br>    }<br>}<br></p><p>} // end namespace Eriador<br>--------------------------------------------------------<br>//in another file<br>#import Foundation<br></p><p>namespace Rohan<br>{<br>  #import namespace Eradior<br></p><p>func quest()<br> {<br>   var mi = Mithril()<br>   mi.a = 10.0          // Error:  “a&quot; and “b&quot; are <br>   mi.b = 10.0          // not public members of Aragorn      <br>   mi.c = 12345.67      // ok <br></p><p>   print(ar.stridingToMordor()) // ok<br> }<br>}<br></p><p>Just my two cents to this ever lasting theme:<br>can’t see the wood for the trees anymore.<br>TedvG<br></p><p><br></p><p><br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160328/00268dcb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>SE-0025: Scoped Access Level, next steps</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>March 29, 2016 at 12:00:00am</p></header><div class="content"><p>Oops here it is again: error in example <br>On 28.03.2016, at 23:52, Ted F.A. van Gaalen &lt;tedvgiosdev at gmail.com&gt; wrote:<br></p><p>Hello Joanna, seems you are quite new to programming, just kidding, so sad you’ve missed the punch card era,<br>a lot of fun, but I cannot take you back there because my Delorean is broken :o)<br></p><p>Seriously, thank you for writing this, I share your opinion:<br></p><p>&gt; In the light of the preceding paragraphs, I would, respectfully, suggest that &quot;protected&quot; should be allowed for exclusive use in the case of classes that really have to derive from each other, but for no other reason.<br>Exactly !<br>&gt; Likewise, &quot;private&quot; should mean what it has meant and still means in most other languages, members of classes only, since, like &quot;protected&quot;, that is its true nature.<br>Yes.<br>&gt; <br>&gt; What Swift presently calls &quot;internal&quot; seems to equate more to the C# concept of &quot;internal&quot; and, in my mind, needs no further discussion or change.<br>&gt; <br>&gt; Just as I was never happy with the Delphi concept of private and protected members being accessible, not just in the class or its derived types, but also from any code in the same code unit, I feel uneasy about the present definition of the private scope in Swift.<br>&gt; <br>Me too.<br>&gt; I have seen some horrendous abuses of that privileged access, with the gradual growth of single code units to truly gargantuan proportions, just because someone felt that certain classes needed to violate all the rules of common sense and be able to access each others&#39; private parts (if you&#39;ll pardon the vernacular).<br>&gt; <br>&gt; <br>&gt; <br>Especially this, couldn’t agree more:<br>&gt; Personally, I would like to see the end of the file based scope and, instead, see more clearly defined &quot;privileged&quot; access between types, even if they are in the same code unit.<br></p><p>I would suggest the (true) use of “namespaces”, instead of file based scope,<br>so that entities  *must*  be imported or qualified by namespace.<br></p><p>When I started with Swift, i was under the false impression that Swift concatenates all the sources in a project and simply treat this<br>as one single source file…<br></p><p>To my knowledge there is no way to hide class members. This is not good !<br>I’d like to show how i prefer it in this example: <br></p><p>“private” here means: only visible within the scope where it was declared!  Imho what private does now in Swift is<br>completely wrong. <br>“Protected” is here: like private but visible in descendants as well <br></p><p>namespace Eriador<br>{<br>class Mithril       // This class is not visible outside the namespace.                 <br>{                   // a + b<br>    var a = 0.0     // should not visible outside this class/instance<br>    private var b = 1.0    // “private”is the default<br>    public var c = 1.0     // is visible outside the class<br>    protected var d = “My precious…”  // is also visible in descendants<br>    <br>    init()<br>    {<br>        forgeRing()<br>    }<br>    <br>    // to use this function outside, it should be preceeded<br>    // by a &quot;public&quot; keyword, like it is in Java:<br></p><p>    public func stridingToMordor() -&gt; Double<br>    {<br>        return a + b + c<br>    }<br>}<br></p><p>} // end namespace Eriador<br>--------------------------------------------------------<br>//in another file<br>#import Foundation<br></p><p>namespace Rohan<br>{<br>  #import namespace Eradior<br></p><p>func quest()<br> {<br>   var mi = Mithril()<br>   mi.a = 10.0          // Error:  “a&quot; and “b&quot; are <br>   mi.b = 10.0          // not public members of Mithril      <br>   mi.c = 12345.67      // ok <br></p><p>   print(mi.stridingToMordor()) // ok<br> }<br>}<br></p><p>Just my two cents to this ever lasting theme:<br>can’t see the wood for the trees anymore.<br>TedvG<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160329/f5ce2b8b/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
