<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f13662914188bbe1364b8b910dd4aa8c?s=50"></div><header><strong>Swift compile times comparison: frameworks vs. non-frameworks</strong> from <string>Samantha John</string> &lt;sam at gethopscotch.com&gt;<p>May 31, 2016 at 06:00:00pm</p></header><div class="content"><p>Hi all,<br></p><p>In my continued investigation of Swift compile times I was able to gather<br>some interesting data.<br></p><p>In the last couple weeks we decided to put in a large dev effort to move<br>our entire codebase into frameworks. We&#39;d been having really slow build<br>times (often 5 minutes for an incremental compile, 12 minutes for a clean<br>build) and decided it was worth the effort to clean it up.<br></p><p>I had expected that moving code into frameworks would substantially speed<br>up the incremental compile time, but didn&#39;t expect it to speed up the clean<br>compile. To my surprise, it sped up the incremental compile to less than a<br>minute in most cases and just a little over 2 minutes for a clean build.<br></p><p>Investigating further, I added the -debug-time-function-bodies flag and<br>parsed out the build times for individual functions- following the<br>instructions from: http://irace.me/swift-profiling Looking at our code pre-<br>and post- frameworks move (and pre-frameworks actually had about 10% of the<br>code in frameworks) I got the following results:<br></p><p>*Pre-frameworks:*<br></p><p>9842 functions compiled.<br></p><p>1463 unique functions compiled<br></p><p>8379 of the functions compiled were duplicates<br></p><p>*Post-frameworks:*<br></p><p>2805 functions compiled.<br></p><p>1288 unique functions compiled<br></p><p>1517 of the functions compiled were duplicates<br>So first, just want to say, that the frameworks solution really worked. It<br>has resulted in a huge increase in productivity, and I like our codebase<br>better. It&#39;s made me love Swift again.<br></p><p>I&#39;m wondering though: is this a known/expected result? I was pretty<br>surprised by the amount of duplicated compiles but I&#39;m not experienced in<br>this area so maybe that&#39;s normal. Would love any clarification on how this<br>works.<br></p><p>Thanks so much!<br>Sam<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160531/114bfb22/attachment.html&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
