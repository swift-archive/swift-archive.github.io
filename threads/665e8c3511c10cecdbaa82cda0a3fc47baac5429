<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>How should NSArray&lt;void(^)(void)&gt;* be imported?</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>March  3, 2016 at 02:00:00am</p></header><div class="content"><p>I&#39;m interested in fixing a pet peeve of mine:<br>https://bugs.swift.org/browse/SR-772<br></p><p>The failing assertion is in Array._forceBridgeFromObjectiveC, namely<br>Swift._isBridgedToObjectiveC(Element.self). Element is plain ol &quot;() -&gt; ()&quot;,<br>but probably should be @convention(block) since it was imported from<br>void(^)(void).<br></p><p>I&#39;ve started tracing through the importer, and I found that<br>`adjustTypeForConcreteImport` is enforcing<br>FunctionTypeRepresentation::Swift because the ImportKind is BridgedValue —<br>this is hardcoded in the call to importType for the type parameters to<br>NSArray (and NSDictionary and NSSet) in<br>SwiftTypeConverter::VisitObjCObjectPointerType.<br></p><p>Are the Foundation collection classes only temporarily special-cased here,<br>until Obj-C generics are generally supported? Is someone working on this in<br>the near future?<br></p><p>If this worked correctly, would we expect to see &quot;var executionBlocks:<br>[@convention(block) () -&gt; ()]&quot; ? If so, would this be best achieved by<br>passing a different ImportKind, possibly introducing a new ImportKind, or<br>some other solution?<br></p><p>I&#39;m guessing that it doesn&#39;t make sense for () -&gt; () to be<br>_ObjectiveCBridgeable, but either way I&#39;m not sure where the<br>_isBridgedToObjectiveC implementation for blocks would come from.<br></p><p>Bumblingly,<br>Jacob<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160303/665e5429/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>How should NSArray&lt;void(^)(void)&gt;* be imported?</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>March  3, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Mar 3, 2016, at 2:23 AM, Jacob Bandes-Storch via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;m interested in fixing a pet peeve of mine: https://bugs.swift.org/browse/SR-772 &lt;https://bugs.swift.org/browse/SR-772&gt;<br>&gt; <br>&gt; The failing assertion is in Array._forceBridgeFromObjectiveC, namely Swift._isBridgedToObjectiveC(Element.self). Element is plain ol &quot;() -&gt; ()&quot;, but probably should be @convention(block) since it was imported from void(^)(void).<br>&gt; <br>&gt; I&#39;ve started tracing through the importer, and I found that `adjustTypeForConcreteImport` is enforcing FunctionTypeRepresentation::Swift because the ImportKind is BridgedValue — this is hardcoded in the call to importType for the type parameters to NSArray (and NSDictionary and NSSet) in SwiftTypeConverter::VisitObjCObjectPointerType.<br>&gt; <br>&gt; Are the Foundation collection classes only temporarily special-cased here, until Obj-C generics are generally supported? Is someone working on this in the near future?<br>&gt; <br>&gt; If this worked correctly, would we expect to see &quot;var executionBlocks: [@convention(block) () -&gt; ()]&quot; ? If so, would this be best achieved by passing a different ImportKind, possibly introducing a new ImportKind, or some other solution?<br>&gt; <br>&gt; I&#39;m guessing that it doesn&#39;t make sense for () -&gt; () to be _ObjectiveCBridgeable, but either way I&#39;m not sure where the _isBridgedToObjectiveC implementation for blocks would come from.<br>&gt; <br>&gt; Bumblingly,<br>&gt; Jacob<br></p><p>There&#39;s a hack to handle NSArray&lt;Class&gt; * bridging to [AnyObject.Type], which has similar problems. Look around for _BridgeableMetatype.<br></p><p>-Joe<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160303/04843aff/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>How should NSArray&lt;void(^)(void)&gt;* be imported?</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>March  3, 2016 at 10:00:00am</p></header><div class="content"><p>Is another hack the way to go, or should it be correctly imported as<br>[@convention(block) () -&gt; ()] (which I think would be<br>_isBridgedToObjectiveC already)?<br></p><p>On Thu, Mar 3, 2016 at 9:08 AM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Mar 3, 2016, at 2:23 AM, Jacob Bandes-Storch via swift-dev &lt;<br>&gt; swift-dev at swift.org&gt; wrote:<br>&gt;<br>&gt; I&#39;m interested in fixing a pet peeve of mine:<br>&gt; https://bugs.swift.org/browse/SR-772<br>&gt;<br>&gt; The failing assertion is in Array._forceBridgeFromObjectiveC, namely<br>&gt; Swift._isBridgedToObjectiveC(Element.self). Element is plain ol &quot;() -&gt;<br>&gt; ()&quot;, but probably should be @convention(block) since it was imported from<br>&gt; void(^)(void).<br>&gt;<br>&gt; I&#39;ve started tracing through the importer, and I found that<br>&gt; `adjustTypeForConcreteImport` is enforcing<br>&gt; FunctionTypeRepresentation::Swift because the ImportKind is BridgedValue —<br>&gt; this is hardcoded in the call to importType for the type parameters to<br>&gt; NSArray (and NSDictionary and NSSet) in<br>&gt; SwiftTypeConverter::VisitObjCObjectPointerType.<br>&gt;<br>&gt; Are the Foundation collection classes only temporarily special-cased here,<br>&gt; until Obj-C generics are generally supported? Is someone working on this in<br>&gt; the near future?<br>&gt;<br>&gt; If this worked correctly, would we expect to see &quot;var executionBlocks:<br>&gt; [@convention(block) () -&gt; ()]&quot; ? If so, would this be best achieved by<br>&gt; passing a different ImportKind, possibly introducing a new ImportKind, or<br>&gt; some other solution?<br>&gt;<br>&gt; I&#39;m guessing that it doesn&#39;t make sense for () -&gt; () to be<br>&gt; _ObjectiveCBridgeable, but either way I&#39;m not sure where the<br>&gt; _isBridgedToObjectiveC implementation for blocks would come from.<br>&gt;<br>&gt; Bumblingly,<br>&gt; Jacob<br>&gt;<br>&gt;<br>&gt; There&#39;s a hack to handle NSArray&lt;Class&gt; * bridging to [AnyObject.Type],<br>&gt; which has similar problems. Look around for _BridgeableMetatype.<br>&gt;<br>&gt; -Joe<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160303/d872196e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>How should NSArray&lt;void(^)(void)&gt;* be imported?</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>March  3, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Mar 3, 2016, at 10:26 AM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt; Is another hack the way to go, or should it be correctly imported as [@convention(block) () -&gt; ()] (which I think would be _isBridgedToObjectiveC already)?<br></p><p>Bridging to @convention(block) is probably more practical, since we&#39;d otherwise need to be able to thunk an arbitrary call signature at runtime. However, @convention(block) is still a structural type, so it would need special case handling similar to _BridgeableMetatype to be able to feed a _BridgedToObjectiveC conformance into the runtime.<br></p><p>-Joe<br></p><p>&gt; <br>&gt; On Thu, Mar 3, 2016 at 9:08 AM, Joe Groff &lt;jgroff at apple.com &lt;mailto:jgroff at apple.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Mar 3, 2016, at 2:23 AM, Jacob Bandes-Storch via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I&#39;m interested in fixing a pet peeve of mine: https://bugs.swift.org/browse/SR-772 &lt;https://bugs.swift.org/browse/SR-772&gt;<br>&gt;&gt; <br>&gt;&gt; The failing assertion is in Array._forceBridgeFromObjectiveC, namely Swift._isBridgedToObjectiveC(Element.self). Element is plain ol &quot;() -&gt; ()&quot;, but probably should be @convention(block) since it was imported from void(^)(void).<br>&gt;&gt; <br>&gt;&gt; I&#39;ve started tracing through the importer, and I found that `adjustTypeForConcreteImport` is enforcing FunctionTypeRepresentation::Swift because the ImportKind is BridgedValue — this is hardcoded in the call to importType for the type parameters to NSArray (and NSDictionary and NSSet) in SwiftTypeConverter::VisitObjCObjectPointerType.<br>&gt;&gt; <br>&gt;&gt; Are the Foundation collection classes only temporarily special-cased here, until Obj-C generics are generally supported? Is someone working on this in the near future?<br>&gt;&gt; <br>&gt;&gt; If this worked correctly, would we expect to see &quot;var executionBlocks: [@convention(block) () -&gt; ()]&quot; ? If so, would this be best achieved by passing a different ImportKind, possibly introducing a new ImportKind, or some other solution?<br>&gt;&gt; <br>&gt;&gt; I&#39;m guessing that it doesn&#39;t make sense for () -&gt; () to be _ObjectiveCBridgeable, but either way I&#39;m not sure where the _isBridgedToObjectiveC implementation for blocks would come from.<br>&gt;&gt; <br>&gt;&gt; Bumblingly,<br>&gt;&gt; Jacob<br>&gt; <br>&gt; There&#39;s a hack to handle NSArray&lt;Class&gt; * bridging to [AnyObject.Type], which has similar problems. Look around for _BridgeableMetatype.<br>&gt; <br>&gt; -Joe<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160303/b1394ab8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>How should NSArray&lt;void(^)(void)&gt;* be imported?</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>March  4, 2016 at 06:00:00am</p></header><div class="content"><p>I see, thanks for the clarification. How is it, then, that properties whose<br>type is void(^)(void) already work fine?<br>On Thu, Mar 3, 2016 at 12:16 PM Joe Groff &lt;jgroff at apple.com&gt; wrote:<br></p><p>&gt; On Mar 3, 2016, at 10:26 AM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; Is another hack the way to go, or should it be correctly imported as<br>&gt; [@convention(block) () -&gt; ()] (which I think would be<br>&gt; _isBridgedToObjectiveC already)?<br>&gt;<br>&gt;<br>&gt; Bridging to @convention(block) is probably more practical, since we&#39;d<br>&gt; otherwise need to be able to thunk an arbitrary call signature at runtime.<br>&gt; However, @convention(block) is still a structural type, so it would need<br>&gt; special case handling similar to _BridgeableMetatype to be able to feed a<br>&gt; _BridgedToObjectiveC conformance into the runtime.<br>&gt;<br>&gt; -Joe<br>&gt;<br>&gt;<br>&gt; On Thu, Mar 3, 2016 at 9:08 AM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On Mar 3, 2016, at 2:23 AM, Jacob Bandes-Storch via swift-dev &lt;<br>&gt;&gt; swift-dev at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I&#39;m interested in fixing a pet peeve of mine:<br>&gt;&gt; https://bugs.swift.org/browse/SR-772<br>&gt;&gt;<br>&gt;&gt; The failing assertion is in Array._forceBridgeFromObjectiveC, namely<br>&gt;&gt; Swift._isBridgedToObjectiveC(Element.self). Element is plain ol &quot;() -&gt;<br>&gt;&gt; ()&quot;, but probably should be @convention(block) since it was imported from<br>&gt;&gt; void(^)(void).<br>&gt;&gt;<br>&gt;&gt; I&#39;ve started tracing through the importer, and I found that<br>&gt;&gt; `adjustTypeForConcreteImport` is enforcing<br>&gt;&gt; FunctionTypeRepresentation::Swift because the ImportKind is BridgedValue —<br>&gt;&gt; this is hardcoded in the call to importType for the type parameters to<br>&gt;&gt; NSArray (and NSDictionary and NSSet) in<br>&gt;&gt; SwiftTypeConverter::VisitObjCObjectPointerType.<br>&gt;&gt;<br>&gt;&gt; Are the Foundation collection classes only temporarily special-cased<br>&gt;&gt; here, until Obj-C generics are generally supported? Is someone working on<br>&gt;&gt; this in the near future?<br>&gt;&gt;<br>&gt;&gt; If this worked correctly, would we expect to see &quot;var executionBlocks:<br>&gt;&gt; [@convention(block) () -&gt; ()]&quot; ? If so, would this be best achieved by<br>&gt;&gt; passing a different ImportKind, possibly introducing a new ImportKind, or<br>&gt;&gt; some other solution?<br>&gt;&gt;<br>&gt;&gt; I&#39;m guessing that it doesn&#39;t make sense for () -&gt; () to be<br>&gt;&gt; _ObjectiveCBridgeable, but either way I&#39;m not sure where the<br>&gt;&gt; _isBridgedToObjectiveC implementation for blocks would come from.<br>&gt;&gt;<br>&gt;&gt; Bumblingly,<br>&gt;&gt; Jacob<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; There&#39;s a hack to handle NSArray&lt;Class&gt; * bridging to [AnyObject.Type],<br>&gt;&gt; which has similar problems. Look around for _BridgeableMetatype.<br>&gt;&gt;<br>&gt;&gt; -Joe<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160304/2ea8cca6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>How should NSArray&lt;void(^)(void)&gt;* be imported?</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>March  4, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Mar 3, 2016, at 10:12 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt; I see, thanks for the clarification. How is it, then, that properties whose type is void(^)(void) already work fine?<br></p><p>For properties, we can statically bridge them by emitting thunk getters and setters at compile time. We have to do this dynamically for bridged containers since they can freely be in ObjC or Swift representation at runtime.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>How should NSArray&lt;void(^)(void)&gt;* be imported?</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>March  5, 2016 at 01:00:00am</p></header><div class="content"><p>I&#39;m wading through little by little, but I clearly still have a lot to<br>learn... sorry if I&#39;m bothering you with questions!<br></p><p>Comparing the SIL for the `*completionBlock*` getter, which is imported as<br>()-&gt;()...<br></p><p>     %15 = class_method [volatile] %14 : $NSOperation,<br>#NSOperation.completionBlock!getter.1.foreign : NSOperation -&gt; () -&gt; *(()<br>-&gt; ())?* , $@convention(objc_method) (NSOperation) -&gt; @autoreleased<br>*Optional&lt;@convention(block)<br>() -&gt; ()&gt;*<br></p><p>    Here I see that &quot;@convention(block)&quot; is retained in the type<br>information, and appears in the expanded form Optional&lt;@convention(block)<br>()-&gt;()&gt;, even though the getter completionBlock getter is of type<br>&quot;NSOperation -&gt; () -&gt; (() -&gt; ())?&quot;, and ()-&gt;() is what we see in generated<br>interfaces.<br></p><p>...vs. the `*executionBlocks*` getter, which is imported as [()-&gt;()]...<br></p><p>     %11 = class_method [volatile] %10 : $NSBlockOperation,<br>#NSBlockOperation.executionBlocks!getter.1.foreign : NSBlockOperation -&gt; ()<br>-&gt; *[() -&gt; ()]* , $@convention(objc_method) (NSBlockOperation) -&gt;<br>@autoreleased Optional&lt;NSArray&gt;<br>     %12 = apply %11(%10) : $@convention(objc_method) (NSBlockOperation) -&gt;<br>@autoreleased Optional&lt;NSArray&gt;<br>     %13 = function_ref<br>@_TF10Foundation22_convertNSArrayToArrayurFGSqCSo7NSArray_GSax_ :<br>$@convention(thin) &lt;τ_0_0&gt; (@owned Optional&lt;NSArray&gt;) -&gt; @owned Array&lt;τ_0_0&gt;<br>     %14 = apply *%13&lt;() -&gt; ()&gt;*(%12) : $@convention(thin) &lt;τ_0_0&gt; (@owned<br>Optional&lt;NSArray&gt;) -&gt; @owned Array&lt;τ_0_0&gt;<br>     release_value %14 : *$Array&lt;() -&gt; ()&gt;*<br></p><p>I don&#39;t see @convention(block) anywhere here. And when I check the type of<br>static_cast&lt;FunctionTypeMetadata*&gt;(T)-&gt;getConvention(), from inside<br>findBridgeWitness, the convention is Swift.<br></p><p>So not only is there no conformance for blocks (which seems like an easy<br>thing to add, like you said, similarly to _BridgeableMetatype), but I think<br>the @convention(block) is being *completely lost* by<br>adjustTypeForConcreteImport. Is this true or am I missing something?<br></p><p>How is @convention(block) retained after importing in order to produce the<br>right type from completionBlock.getter, namely Optional&lt;@convention(block)<br>()-&gt;()&gt;, but it appears only as Optional&lt;()-&gt;()&gt; in the generated<br>interface? Why does this mechanism not produce a call to<br>_convertNSArrayToArray&lt;@convention(block) ()-&gt;()&gt;,  but only<br>_convertNSArrayToArray&lt;()-&gt;()&gt; ?<br></p><p>Jacob<br></p><p>On Fri, Mar 4, 2016 at 9:46 AM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Mar 3, 2016, at 10:12 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;<br>&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; I see, thanks for the clarification. How is it, then, that properties<br>&gt; whose type is void(^)(void) already work fine?<br>&gt;<br>&gt; For properties, we can statically bridge them by emitting thunk getters<br>&gt; and setters at compile time. We have to do this dynamically for bridged<br>&gt; containers since they can freely be in ObjC or Swift representation at<br>&gt; runtime.<br>&gt;<br>&gt; -Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160305/3605ccf1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>How should NSArray&lt;void(^)(void)&gt;* be imported?</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>March  8, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Mar 5, 2016, at 1:54 AM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt; I&#39;m wading through little by little, but I clearly still have a lot to learn... sorry if I&#39;m bothering you with questions!<br>&gt; <br>&gt; Comparing the SIL for the `completionBlock` getter, which is imported as ()-&gt;()...<br>&gt; <br>&gt;      %15 = class_method [volatile] %14 : $NSOperation, #NSOperation.completionBlock!getter.1.foreign : NSOperation -&gt; () -&gt; (() -&gt; ())? , $@convention(objc_method) (NSOperation) -&gt; @autoreleased Optional&lt;@convention(block) () -&gt; ()&gt;<br>&gt; <br>&gt;     Here I see that &quot;@convention(block)&quot; is retained in the type information, and appears in the expanded form Optional&lt;@convention(block) ()-&gt;()&gt;, even though the getter completionBlock getter is of type &quot;NSOperation -&gt; () -&gt; (() -&gt; ())?&quot;, and ()-&gt;() is what we see in generated interfaces.<br>&gt; <br>&gt; ...vs. the `executionBlocks` getter, which is imported as [()-&gt;()]...<br>&gt; <br>&gt;      %11 = class_method [volatile] %10 : $NSBlockOperation, #NSBlockOperation.executionBlocks!getter.1.foreign : NSBlockOperation -&gt; () -&gt; [() -&gt; ()] , $@convention(objc_method) (NSBlockOperation) -&gt; @autoreleased Optional&lt;NSArray&gt;<br>&gt;      %12 = apply %11(%10) : $@convention(objc_method) (NSBlockOperation) -&gt; @autoreleased Optional&lt;NSArray&gt;<br>&gt;      %13 = function_ref @_TF10Foundation22_convertNSArrayToArrayurFGSqCSo7NSArray_GSax_ : $@convention(thin) &lt;τ_0_0&gt; (@owned Optional&lt;NSArray&gt;) -&gt; @owned Array&lt;τ_0_0&gt;<br>&gt;      %14 = apply %13&lt;() -&gt; ()&gt;(%12) : $@convention(thin) &lt;τ_0_0&gt; (@owned Optional&lt;NSArray&gt;) -&gt; @owned Array&lt;τ_0_0&gt;<br>&gt;      release_value %14 : $Array&lt;() -&gt; ()&gt;<br>&gt; <br>&gt; I don&#39;t see @convention(block) anywhere here. And when I check the type of static_cast&lt;FunctionTypeMetadata*&gt;(T)-&gt;getConvention(), from inside findBridgeWitness, the convention is Swift.<br>&gt; <br>&gt; So not only is there no conformance for blocks (which seems like an easy thing to add, like you said, similarly to _BridgeableMetatype), but I think the @convention(block) is being completely lost by adjustTypeForConcreteImport. Is this true or am I missing something?<br>&gt; <br>&gt; How is @convention(block) retained after importing in order to produce the right type from completionBlock.getter, namely Optional&lt;@convention(block) ()-&gt;()&gt;, but it appears only as Optional&lt;()-&gt;()&gt; in the generated interface? Why does this mechanism not produce a call to _convertNSArrayToArray&lt;@convention(block) ()-&gt;()&gt;,  but only _convertNSArrayToArray&lt;()-&gt;()&gt; ?<br></p><p>I think this is a problem at the Clang importer level. It&#39;s probably assuming that if you have a parameter of type NSArray&lt;T&gt; in Objective-C, and T is bridgeable to BT, then it should always be imported as Array&lt;BT&gt; (and SILGen would be able to insert the conversions during code generation). If you want to preserve the block-ness, it may need a special case at that level.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160308/fe9f231a/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
