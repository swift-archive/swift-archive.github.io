<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Proposal Draft] Literal Syntax Protocols</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July  1, 2016 at 04:00:00pm</p></header><div class="content"><p>on Fri Jul 01 2016, Adrian Zubarev &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; The only problem I can see with ExpressibleAs is that it also reads if<br>&gt; I could potentially do something like this type &lt;-&gt; literal, <br></p><p>People keep going down that road, but I don&#39;t see why.  As far as I<br>know, “A is expressible as B” has never implied the converse.<br></p><p>Example: “The semantics of this method are expressible as a single verb<br>         phrase”<br></p><p>         “Pi is expressible as the sum of an infinite series of<br>         fractions”<br></p><p>&gt; but the direction type -&gt; literal is impossible.<br>&gt;<br>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt;<br>&gt; Am 1. Juli 2016 um 23:33:19, Matthew Johnson via swift-evolution<br>&gt; (swift-evolution at swift.org) schrieb:<br>&gt;<br>&gt;&gt; On Jul 1, 2016, at 3:59 PM, Dmitri Gribenko via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;  <br>&gt;&gt; On Fri, Jul 1, 2016 at 1:35 PM, Dave Abrahams via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; I think if `Syntax.IntegerLiteral` is actually unclear then the best<br>&gt;&gt;&gt; cure is `ExpressibleAsIntegerLiteral` (no namespace needed). None of<br>&gt;&gt;&gt; the other suggestions I&#39;ve seen describe what the protocol means as well<br>&gt;&gt;&gt; as that. I&#39;ve asked Matthew to update the proposal accordingly.<br>&gt;&gt;  <br>&gt;&gt; I also like `ExpressibleAsIntegerLiteral`. It uses the ~ible/~able<br>&gt;&gt; convention which suggests a capability, and when the name is worded<br>&gt;&gt; like this, it is definitely describing a capability of the type.<br>&gt;<br>&gt; I like it quite a bit as well. It’s the best name anyone has suggested.  <br>&gt;<br>&gt; I have updated the proposal to reflect this decision. Any further<br>&gt; comments should be in the context of this new draft.<br>&gt;<br>&gt;&gt;  <br>&gt;&gt; Dmitri<br>&gt;&gt;  <br>&gt;&gt; --  <br>&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Proposal Draft] Literal Syntax Protocols</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>July  3, 2016 at 04:00:00pm</p></header><div class="content"><p>On 02.07.2016 2:59, Dave Abrahams via swift-evolution wrote:<br>&gt;<br>&gt; on Fri Jul 01 2016, Adrian Zubarev &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; The only problem I can see with ExpressibleAs is that it also reads if<br>&gt;&gt; I could potentially do something like this type &lt;-&gt; literal,<br>&gt;<br>&gt; People keep going down that road, but I don&#39;t see why.  As far as I<br>&gt; know, “A is expressible as B” has never implied the converse.<br></p><p>IMO, one can understand ExpressibleAs as &#39;type can be expressed as literal&quot; <br>in meaning that there is some property or method to &quot;express&quot; type as <br>literal, and not as literal could be parsed as instance of that type. Just <br>throw this into discussion:<br>IntegerLiteralParsingTarget<br>Parser.IntegerLiteralTarget<br>IntegerLiteralInterpretation<br>Syntax.ParseableAsIntegerLiteral<br>Syntax.IntegerLiteralAssignable<br></p><p><br>&gt;<br>&gt; Example: “The semantics of this method are expressible as a single verb<br>&gt;          phrase”<br>&gt;<br>&gt;          “Pi is expressible as the sum of an infinite series of<br>&gt;          fractions”<br>&gt;<br>&gt;&gt; but the direction type -&gt; literal is impossible.<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Adrian Zubarev<br>&gt;&gt; Sent with Airmail<br>&gt;&gt;<br>&gt;&gt; Am 1. Juli 2016 um 23:33:19, Matthew Johnson via swift-evolution<br>&gt;&gt; (swift-evolution at swift.org) schrieb:<br>&gt;&gt;<br>&gt;&gt;&gt; On Jul 1, 2016, at 3:59 PM, Dmitri Gribenko via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Fri, Jul 1, 2016 at 1:35 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; I think if `Syntax.IntegerLiteral` is actually unclear then the best<br>&gt;&gt;&gt;&gt; cure is `ExpressibleAsIntegerLiteral` (no namespace needed). None of<br>&gt;&gt;&gt;&gt; the other suggestions I&#39;ve seen describe what the protocol means as well<br>&gt;&gt;&gt;&gt; as that. I&#39;ve asked Matthew to update the proposal accordingly.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I also like `ExpressibleAsIntegerLiteral`. It uses the ~ible/~able<br>&gt;&gt;&gt; convention which suggests a capability, and when the name is worded<br>&gt;&gt;&gt; like this, it is definitely describing a capability of the type.<br>&gt;&gt;<br>&gt;&gt; I like it quite a bit as well. It’s the best name anyone has suggested.<br>&gt;&gt;<br>&gt;&gt; I have updated the proposal to reflect this decision. Any further<br>&gt;&gt; comments should be in the context of this new draft.<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Dmitri<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
