<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ed9a0d8cd44b62539b141f6c10405db1?s=50"></div><header><strong>Removing &quot;_ in&quot; from empty closures</strong> from <string>Rob Napier</string> &lt;robnapier at gmail.com&gt;<p>May 13, 2016 at 12:00:00pm</p></header><div class="content"><p>Currently if a closure takes a value, it requires &quot;_ in&quot; to note that the<br>value is ignored. This makes sense in many cases, but creates a bit of a<br>mess in the case of an empty, void-returning closure:<br></p><p>doThing(withCompletion: { _ in })<br></p><p>I&#39;d like to suggest that the compiler promote the empty closure literal {}<br>to any void-returning closure type so that this could be written:<br></p><p>doThing(withCompletion: {})<br></p><p>This encourages the use of empty closures over optional closures, which I<br>think is open for debate. In general I try to avoid optionals when they can<br>be precisely replaced with a non-optional value. Furthermore, most Cocoa<br>completion handlers are not optional.<br></p><p>The alternative is to not do this, but encourage that any closure that<br>could reasonably be empty should in fact be optional. I would then want<br>Cocoa functions with void-returning closures to be imported as optionals to<br>avoid &quot;{ _ in }&quot;.<br></p><p>-Rob<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160513/672d3e0a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Removing &quot;_ in&quot; from empty closures</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May 13, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On May 13, 2016, at 9:13 AM, Rob Napier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Currently if a closure takes a value, it requires &quot;_ in&quot; to note that the value is ignored. This makes sense in many cases, but creates a bit of a mess in the case of an empty, void-returning closure:<br>&gt; <br>&gt; doThing(withCompletion: { _ in })<br>&gt; <br>&gt; I&#39;d like to suggest that the compiler promote the empty closure literal {} to any void-returning closure type so that this could be written:<br>&gt; <br>&gt; doThing(withCompletion: {})<br>&gt; <br>&gt; This encourages the use of empty closures over optional closures, which I think is open for debate. In general I try to avoid optionals when they can be precisely replaced with a non-optional value. Furthermore, most Cocoa completion handlers are not optional.<br>&gt; <br>&gt; The alternative is to not do this, but encourage that any closure that could reasonably be empty should in fact be optional. I would then want Cocoa functions with void-returning closures to be imported as optionals to avoid &quot;{ _ in }&quot;.<br></p><p>+1. In general, I think we should allow implicit arguments, without requiring the closure to use all the implicit $n variables like we do today. These should all be valid:<br></p><p>let _: () -&gt; () = {}<br>let _: (Int) -&gt; () = {}<br>let _: (Int, Int) -&gt; Int = { 5 }<br>let _: (Int, Int) -&gt; Int = { $0 }<br>let _: (Int, Int) -&gt; Int = { $1 }<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Removing &quot;_ in&quot; from empty closures</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 13, 2016 at 11:00:00am</p></header><div class="content"><p>Sent from my iPad<br></p><p>&gt; On May 13, 2016, at 11:16 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On May 13, 2016, at 9:13 AM, Rob Napier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Currently if a closure takes a value, it requires &quot;_ in&quot; to note that the value is ignored. This makes sense in many cases, but creates a bit of a mess in the case of an empty, void-returning closure:<br>&gt;&gt; <br>&gt;&gt; doThing(withCompletion: { _ in })<br>&gt;&gt; <br>&gt;&gt; I&#39;d like to suggest that the compiler promote the empty closure literal {} to any void-returning closure type so that this could be written:<br>&gt;&gt; <br>&gt;&gt; doThing(withCompletion: {})<br>&gt;&gt; <br>&gt;&gt; This encourages the use of empty closures over optional closures, which I think is open for debate. In general I try to avoid optionals when they can be precisely replaced with a non-optional value. Furthermore, most Cocoa completion handlers are not optional.<br>&gt;&gt; <br>&gt;&gt; The alternative is to not do this, but encourage that any closure that could reasonably be empty should in fact be optional. I would then want Cocoa functions with void-returning closures to be imported as optionals to avoid &quot;{ _ in }&quot;.<br>&gt; <br>&gt; +1. In general, I think we should allow implicit arguments, without requiring the closure to use all the implicit $n variables like we do today. These should all be valid:<br>&gt; <br>&gt; let _: () -&gt; () = {}<br>&gt; let _: (Int) -&gt; () = {}<br>&gt; let _: (Int, Int) -&gt; Int = { 5 }<br>&gt; let _: (Int, Int) -&gt; Int = { $0 }<br>&gt; let _: (Int, Int) -&gt; Int = { $1 }<br></p><p>+1.  Having to explicitly discard unnecessary arguments bugs me every time I have to do it.<br></p><p>&gt; <br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e910871dda004717de19e83626308b5a?s=50"></div><header><strong>Removing &quot;_ in&quot; from empty closures</strong> from <string>Tony Allevato</string> &lt;allevato at google.com&gt;<p>May 13, 2016 at 04:00:00pm</p></header><div class="content"><p>+1. I&#39;ve built APIs before where I wanted a method to take a closure that<br>had multiple arguments, but where I would also like the client to be able<br>to ignore the extra arguments if they didn&#39;t need that level of detail, and<br>it would be nice to not require them to acknowledge those extra parameters<br>with `_`. Right now, I have to provide multiple overloads for that:<br></p><p>func foo(body: (Arg1, Arg2, Arg3) -&gt; Result) { ... }<br>func foo(body: (Arg1, Arg2) -&gt; Result) { ... }<br>func foo(body: (Arg1) -&gt; Result) { ... }<br></p><p>Allowing closure to just work with fewer arguments would make this bloat go<br>away.<br></p><p>On Fri, May 13, 2016 at 9:25 AM Matthew Johnson via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt;<br>&gt; Sent from my iPad<br>&gt;<br>&gt; &gt; On May 13, 2016, at 11:16 AM, Joe Groff via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;&gt; On May 13, 2016, at 9:13 AM, Rob Napier via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Currently if a closure takes a value, it requires &quot;_ in&quot; to note that<br>&gt; the value is ignored. This makes sense in many cases, but creates a bit of<br>&gt; a mess in the case of an empty, void-returning closure:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; doThing(withCompletion: { _ in })<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I&#39;d like to suggest that the compiler promote the empty closure literal<br>&gt; {} to any void-returning closure type so that this could be written:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; doThing(withCompletion: {})<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; This encourages the use of empty closures over optional closures, which<br>&gt; I think is open for debate. In general I try to avoid optionals when they<br>&gt; can be precisely replaced with a non-optional value. Furthermore, most<br>&gt; Cocoa completion handlers are not optional.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; The alternative is to not do this, but encourage that any closure that<br>&gt; could reasonably be empty should in fact be optional. I would then want<br>&gt; Cocoa functions with void-returning closures to be imported as optionals to<br>&gt; avoid &quot;{ _ in }&quot;.<br>&gt; &gt;<br>&gt; &gt; +1. In general, I think we should allow implicit arguments, without<br>&gt; requiring the closure to use all the implicit $n variables like we do<br>&gt; today. These should all be valid:<br>&gt; &gt;<br>&gt; &gt; let _: () -&gt; () = {}<br>&gt; &gt; let _: (Int) -&gt; () = {}<br>&gt; &gt; let _: (Int, Int) -&gt; Int = { 5 }<br>&gt; &gt; let _: (Int, Int) -&gt; Int = { $0 }<br>&gt; &gt; let _: (Int, Int) -&gt; Int = { $1 }<br>&gt;<br>&gt; +1.  Having to explicitly discard unnecessary arguments bugs me every time<br>&gt; I have to do it.<br>&gt;<br>&gt; &gt;<br>&gt; &gt; -Joe<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160513/452f6ceb/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d02ed1b20fc3e0fa1592ce5982f24d2b?s=50"></div><header><strong>Removing &quot;_ in&quot; from empty closures</strong> from <string>Leonardo Pessoa</string> &lt;me at lmpessoa.com&gt;<p>May 13, 2016 at 01:00:00pm</p></header><div class="content"><p>+1 here and I don&#39;t think it will make life more difficult for the compiler<br>as it already handles the examples Joe Groff provided. On the contrary, by<br>removing the need for those &quot;_ in&quot; declarations and checks you make the<br>life of the compiler easier.<br></p><p>- Leonardo<br></p><p>On 13 May 2016 at 13:25, Matthew Johnson via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt;<br>&gt; Sent from my iPad<br>&gt;<br>&gt; &gt; On May 13, 2016, at 11:16 AM, Joe Groff via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;&gt; On May 13, 2016, at 9:13 AM, Rob Napier via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Currently if a closure takes a value, it requires &quot;_ in&quot; to note that<br>&gt; the value is ignored. This makes sense in many cases, but creates a bit of<br>&gt; a mess in the case of an empty, void-returning closure:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; doThing(withCompletion: { _ in })<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I&#39;d like to suggest that the compiler promote the empty closure literal<br>&gt; {} to any void-returning closure type so that this could be written:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; doThing(withCompletion: {})<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; This encourages the use of empty closures over optional closures, which<br>&gt; I think is open for debate. In general I try to avoid optionals when they<br>&gt; can be precisely replaced with a non-optional value. Furthermore, most<br>&gt; Cocoa completion handlers are not optional.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; The alternative is to not do this, but encourage that any closure that<br>&gt; could reasonably be empty should in fact be optional. I would then want<br>&gt; Cocoa functions with void-returning closures to be imported as optionals to<br>&gt; avoid &quot;{ _ in }&quot;.<br>&gt; &gt;<br>&gt; &gt; +1. In general, I think we should allow implicit arguments, without<br>&gt; requiring the closure to use all the implicit $n variables like we do<br>&gt; today. These should all be valid:<br>&gt; &gt;<br>&gt; &gt; let _: () -&gt; () = {}<br>&gt; &gt; let _: (Int) -&gt; () = {}<br>&gt; &gt; let _: (Int, Int) -&gt; Int = { 5 }<br>&gt; &gt; let _: (Int, Int) -&gt; Int = { $0 }<br>&gt; &gt; let _: (Int, Int) -&gt; Int = { $1 }<br>&gt;<br>&gt; +1.  Having to explicitly discard unnecessary arguments bugs me every time<br>&gt; I have to do it.<br>&gt;<br>&gt; &gt;<br>&gt; &gt; -Joe<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160513/fc25f9ff/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f50a7532821edd503161abf3f2eb87cd?s=50"></div><header><strong>Removing &quot;_ in&quot; from empty closures</strong> from <string>Cole Campbell</string> &lt;cole.m.campbell at icloud.com&gt;<p>May 13, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; +1. In general, I think we should allow implicit arguments, without requiring the closure to use all the implicit $n variables like we do today. These should all be valid:<br>&gt; <br>&gt; let _: () -&gt; () = {}<br>&gt; let _: (Int) -&gt; () = {}<br>&gt; let _: (Int, Int) -&gt; Int = { 5 }<br>&gt; let _: (Int, Int) -&gt; Int = { $0 }<br>&gt; let _: (Int, Int) -&gt; Int = { $1 }<br></p><p>+1. This would be excellent.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Removing &quot;_ in&quot; from empty closures</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>May 13, 2016 at 11:00:00am</p></header><div class="content"><p>On May 13, 2016, at 11:14 AM, Cole Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; +1. In general, I think we should allow implicit arguments, without requiring the closure to use all the implicit $n variables like we do today. These should all be valid:<br>&gt;&gt; <br>&gt;&gt; let _: () -&gt; () = {}<br>&gt;&gt; let _: (Int) -&gt; () = {}<br>&gt;&gt; let _: (Int, Int) -&gt; Int = { 5 }<br>&gt;&gt; let _: (Int, Int) -&gt; Int = { $0 }<br>&gt;&gt; let _: (Int, Int) -&gt; Int = { $1 }<br>&gt; <br>&gt; +1. This would be excellent.<br></p><p>+1. Good riddance to bad code baggage.<br></p><p>-- E<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Removing &quot;_ in&quot; from empty closures</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>May 13, 2016 at 01:00:00pm</p></header><div class="content"><p>+1, seems logical to me:<br></p><p>    let x: [T] = []<br>    let x: [T:U] = [:]<br>    let x: T-&gt;() = {}<br></p><p>Jacob<br></p><p>On Fri, May 13, 2016 at 10:48 AM, Erica Sadun via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On May 13, 2016, at 11:14 AM, Cole Campbell via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;&gt; +1. In general, I think we should allow implicit arguments, without<br>&gt; requiring the closure to use all the implicit $n variables like we do<br>&gt; today. These should all be valid:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; let _: () -&gt; () = {}<br>&gt; &gt;&gt; let _: (Int) -&gt; () = {}<br>&gt; &gt;&gt; let _: (Int, Int) -&gt; Int = { 5 }<br>&gt; &gt;&gt; let _: (Int, Int) -&gt; Int = { $0 }<br>&gt; &gt;&gt; let _: (Int, Int) -&gt; Int = { $1 }<br>&gt; &gt;<br>&gt; &gt; +1. This would be excellent.<br>&gt;<br>&gt; +1. Good riddance to bad code baggage.<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160513/1fc15c26/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Removing &quot;_ in&quot; from empty closures</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 13, 2016 at 03:00:00pm</p></header><div class="content"><p>Is anyone planning to write a proposal for this?<br></p><p>Sent from my iPhone<br></p><p>&gt; On May 13, 2016, at 3:02 PM, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1, seems logical to me:<br>&gt; <br>&gt;     let x: [T] = []<br>&gt;     let x: [T:U] = [:]<br>&gt;     let x: T-&gt;() = {}<br>&gt; <br>&gt; Jacob<br>&gt; <br>&gt;&gt; On Fri, May 13, 2016 at 10:48 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; On May 13, 2016, at 11:14 AM, Cole Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; +1. In general, I think we should allow implicit arguments, without requiring the closure to use all the implicit $n variables like we do today. These should all be valid:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; let _: () -&gt; () = {}<br>&gt;&gt; &gt;&gt; let _: (Int) -&gt; () = {}<br>&gt;&gt; &gt;&gt; let _: (Int, Int) -&gt; Int = { 5 }<br>&gt;&gt; &gt;&gt; let _: (Int, Int) -&gt; Int = { $0 }<br>&gt;&gt; &gt;&gt; let _: (Int, Int) -&gt; Int = { $1 }<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; +1. This would be excellent.<br>&gt;&gt; <br>&gt;&gt; +1. Good riddance to bad code baggage.<br>&gt;&gt; <br>&gt;&gt; -- E<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160513/edf1fd63/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Removing &quot;_ in&quot; from empty closures</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May 13, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On May 13, 2016, at 1:06 PM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Is anyone planning to write a proposal for this?<br></p><p>Sounds like you just signed up!<br></p><p>-Joe<br></p><p>&gt; Sent from my iPhone<br>&gt; <br>&gt; On May 13, 2016, at 3:02 PM, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; +1, seems logical to me:<br>&gt;&gt; <br>&gt;&gt;     let x: [T] = []<br>&gt;&gt;     let x: [T:U] = [:]<br>&gt;&gt;     let x: T-&gt;() = {}<br>&gt;&gt; <br>&gt;&gt; Jacob<br>&gt;&gt; <br>&gt;&gt; On Fri, May 13, 2016 at 10:48 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; On May 13, 2016, at 11:14 AM, Cole Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; +1. In general, I think we should allow implicit arguments, without requiring the closure to use all the implicit $n variables like we do today. These should all be valid:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; let _: () -&gt; () = {}<br>&gt;&gt; &gt;&gt; let _: (Int) -&gt; () = {}<br>&gt;&gt; &gt;&gt; let _: (Int, Int) -&gt; Int = { 5 }<br>&gt;&gt; &gt;&gt; let _: (Int, Int) -&gt; Int = { $0 }<br>&gt;&gt; &gt;&gt; let _: (Int, Int) -&gt; Int = { $1 }<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; +1. This would be excellent.<br>&gt;&gt; <br>&gt;&gt; +1. Good riddance to bad code baggage.<br>&gt;&gt; <br>&gt;&gt; -- E<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Removing &quot;_ in&quot; from empty closures</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 13, 2016 at 05:00:00pm</p></header><div class="content"><p>Sent from my iPhone<br></p><p>&gt; On May 13, 2016, at 3:16 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On May 13, 2016, at 1:06 PM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Is anyone planning to write a proposal for this?<br>&gt; <br>&gt; Sounds like you just signed up!<br></p><p>Lol, sounds good.  Just don&#39;t want to duplicate efforts! :)<br></p><p>&gt; <br>&gt; -Joe<br>&gt; <br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt;&gt; On May 13, 2016, at 3:02 PM, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; +1, seems logical to me:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    let x: [T] = []<br>&gt;&gt;&gt;    let x: [T:U] = [:]<br>&gt;&gt;&gt;    let x: T-&gt;() = {}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jacob<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Fri, May 13, 2016 at 10:48 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; On May 13, 2016, at 11:14 AM, Cole Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; +1. In general, I think we should allow implicit arguments, without requiring the closure to use all the implicit $n variables like we do today. These should all be valid:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; let _: () -&gt; () = {}<br>&gt;&gt;&gt;&gt;&gt; let _: (Int) -&gt; () = {}<br>&gt;&gt;&gt;&gt;&gt; let _: (Int, Int) -&gt; Int = { 5 }<br>&gt;&gt;&gt;&gt;&gt; let _: (Int, Int) -&gt; Int = { $0 }<br>&gt;&gt;&gt;&gt;&gt; let _: (Int, Int) -&gt; Int = { $1 }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; +1. This would be excellent.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; +1. Good riddance to bad code baggage.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- E<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Removing &quot;_ in&quot; from empty closures</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>May 14, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On May 13, 2016, at 2:16 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On May 13, 2016, at 1:06 PM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Is anyone planning to write a proposal for this?<br>&gt; <br>&gt; Sounds like you just signed up!<br>&gt; <br>&gt; -Joe<br></p><p>On-list Discussion: Removing &quot;_ in&quot; from empty closures &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/17080&gt;<br>Working gist: https://gist.github.com/erica/3731e24fc252c8e66850e0e02f491281 &lt;https://gist.github.com/erica/3731e24fc252c8e66850e0e02f491281&gt;<br></p><p><br>Enhancing closure argument flexibility<br></p><p>Proposal: TBD<br>Authors: Matthew Johnson &lt;https://github.com/anandabits&gt;, Erica Sadun &lt;http://github.com/erica&gt;, Rob Napier &lt;http://github.com/rnapier&gt;<br>Status: TBD<br>Review manager: TBD<br> &lt;https://gist.github.com/erica/3731e24fc252c8e66850e0e02f491281#introduction&gt;Introduction<br></p><p>This proposal loosens closure requirements to support developer flexibility. It removes the _ in requirement that bypasses explicit argument use and allow closures to use any, all, or none of the implicit $n variables as needed or desired.<br></p><p>The Swift-evolution thread about this topic can be found here: Removing &quot;_ in&quot; from empty closures &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/17080&gt;<br> &lt;https://gist.github.com/erica/3731e24fc252c8e66850e0e02f491281#motivation&gt;Motivation<br></p><p>Swift closures that do not explicitly declare an internal parameter list must reference all arguments using implicit $nshorthand names. If they do not, Swift complains that the contextual type for the closure argument &quot;expects n arguments, which cannot be implicitly ignored.&quot; This requirement diminishes the efficacy of Swift&#39;s $n syntactic sugar. Eliminating the requirement means:<br></p><p>{} becomes a valid &#39;noop&#39; closure in any context requiring a Void-returning closure. <br>Implementations can discard unnecessary code cruft and streamline their minimum implementation from { _(, _)* in } to {}.<br>{ expression } becomes a valid closure in any context requiring a return value. The expression can offer a simple expression or literal, such as { 42 }.<br>The closure can mention some of its parameters without having to mention all of its parameters.<br> &lt;https://gist.github.com/erica/3731e24fc252c8e66850e0e02f491281#detailed-design&gt;Detailed Design<br></p><p>Under this proposal, parameterized closures types will automatically promote closures that mention a possibly empty subset of implicit arguments. All the following examples will be valid and compile without error or warning:<br></p><p>let _: () -&gt; Void = {}<br>let _: (Int) -&gt; Void = {} <br>let _: (Int, Int) -&gt; Int = { 5 }<br>let _: (Int, Int) -&gt; Int = { $0 }<br>let _: (Int, Int) -&gt; Int = { $1 }<br>In the first two examples, the empty closure literal {} will autopromote to satisfy any void-returning closure type (T...) -&gt; Void. <br></p><p>// Current<br>doThing(withCompletion: { _ in })<br>let x: (T) -&gt; Void = { _ in }<br></p><p>// Proposed<br>doThing(withCompletion: {})<br>let x: (T) -&gt; Void = {}<br>In the remaining examples, the closure will support the return of any expression, whether or not it mentions any or all of the implicit arguments.<br></p><p> &lt;https://gist.github.com/erica/3731e24fc252c8e66850e0e02f491281#impact-on-existing-code&gt;Impact on Existing Code<br></p><p>This proposal offers no negative effect on existing code, which will continue to compile and run as it did prior to adoption. It offers positive improvements for new code added after adoptions. We believe it would be beneficial for Xcode to scan for {_(, _)* in} patterns during migration and offer fixits to update this code to {}.<br></p><p> &lt;https://gist.github.com/erica/3731e24fc252c8e66850e0e02f491281#alternatives-considered&gt;Alternatives Considered<br></p><p>We considered and discarded a policy where Swift encourages the use of optional closures in place of simplifying the {}case. This approach does not scale to non-Void cases. It does not align with Cocoa APIs, where most completion handlers are not optional.<br></p><p> &lt;https://gist.github.com/erica/3731e24fc252c8e66850e0e02f491281#related-proposals&gt;Related Proposals<br></p><p>SE-0029: Remove Implicit Tuple Splat Behavior from Function Applications &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md&gt; removed the behavior that allowed $0 to represent either the first argument or a tuple of all arguments.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160514/6685d3e8/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Removing &quot;_ in&quot; from empty closures</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May 14, 2016 at 10:00:00pm</p></header><div class="content"><p>On May 13, 2016, at 9:16 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; This encourages the use of empty closures over optional closures, which I think is open for debate. In general I try to avoid optionals when they can be precisely replaced with a non-optional value. Furthermore, most Cocoa completion handlers are not optional.<br>&gt;&gt; <br>&gt;&gt; The alternative is to not do this, but encourage that any closure that could reasonably be empty should in fact be optional. I would then want Cocoa functions with void-returning closures to be imported as optionals to avoid &quot;{ _ in }&quot;.<br>&gt; <br>&gt; +1. In general, I think we should allow implicit arguments, without requiring the closure to use all the implicit $n variables like we do today. These should all be valid:<br>&gt; <br>&gt; let _: () -&gt; () = {}<br>&gt; let _: (Int) -&gt; () = {}<br>&gt; let _: (Int, Int) -&gt; Int = { 5 }<br>&gt; let _: (Int, Int) -&gt; Int = { $0 }<br>&gt; let _: (Int, Int) -&gt; Int = { $1 }<br></p><p>I agree, but I consider this to be an obvious bug in the compiler.  I don’t think it requires a proposal.<br></p><p>Unfortunately it is non-trivial to fix…<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Removing &quot;_ in&quot; from empty closures</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>May 15, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On May 14, 2016, at 11:16 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On May 13, 2016, at 9:16 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; This encourages the use of empty closures over optional closures, which I think is open for debate. In general I try to avoid optionals when they can be precisely replaced with a non-optional value. Furthermore, most Cocoa completion handlers are not optional.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The alternative is to not do this, but encourage that any closure that could reasonably be empty should in fact be optional. I would then want Cocoa functions with void-returning closures to be imported as optionals to avoid &quot;{ _ in }&quot;.<br>&gt;&gt; <br>&gt;&gt; +1. In general, I think we should allow implicit arguments, without requiring the closure to use all the implicit $n variables like we do today. These should all be valid:<br>&gt;&gt; <br>&gt;&gt; let _: () -&gt; () = {}<br>&gt;&gt; let _: (Int) -&gt; () = {}<br>&gt;&gt; let _: (Int, Int) -&gt; Int = { 5 }<br>&gt;&gt; let _: (Int, Int) -&gt; Int = { $0 }<br>&gt;&gt; let _: (Int, Int) -&gt; Int = { $1 }<br>&gt; <br>&gt; I agree, but I consider this to be an obvious bug in the compiler.  I don’t think it requires a proposal.<br>&gt; <br>&gt; Unfortunately it is non-trivial to fix…<br></p><p><br>https://bugs.swift.org/browse/SR-1528<br></p><p>-- E<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>Removing &quot;_ in&quot; from empty closures</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>May 19, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On May 14, 2016, at 10:16 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; On May 13, 2016, at 9:16 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; This encourages the use of empty closures over optional closures, which I think is open for debate. In general I try to avoid optionals when they can be precisely replaced with a non-optional value. Furthermore, most Cocoa completion handlers are not optional.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The alternative is to not do this, but encourage that any closure that could reasonably be empty should in fact be optional. I would then want Cocoa functions with void-returning closures to be imported as optionals to avoid &quot;{ _ in }&quot;.<br>&gt;&gt; <br>&gt;&gt; +1. In general, I think we should allow implicit arguments, without requiring the closure to use all the implicit $n variables like we do today. These should all be valid:<br>&gt;&gt; <br>&gt;&gt; let _: () -&gt; () = {}<br>&gt;&gt; let _: (Int) -&gt; () = {}<br>&gt;&gt; let _: (Int, Int) -&gt; Int = { 5 }<br>&gt;&gt; let _: (Int, Int) -&gt; Int = { $0 }<br>&gt;&gt; let _: (Int, Int) -&gt; Int = { $1 }<br>&gt; <br>&gt; I agree, but I consider this to be an obvious bug in the compiler.  I don’t think it requires a proposal.<br>&gt; <br>&gt; Unfortunately it is non-trivial to fix…<br></p><p>Yeah, this is just a bug which several people have made various efforts over the last three years to fix.  It&#39;s not easy.<br></p><p>John.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Removing &quot;_ in&quot; from empty closures</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>May 19, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On May 14, 2016, at 22:16, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On May 13, 2016, at 9:16 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; This encourages the use of empty closures over optional closures, which I think is open for debate. In general I try to avoid optionals when they can be precisely replaced with a non-optional value. Furthermore, most Cocoa completion handlers are not optional.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The alternative is to not do this, but encourage that any closure that could reasonably be empty should in fact be optional. I would then want Cocoa functions with void-returning closures to be imported as optionals to avoid &quot;{ _ in }&quot;.<br>&gt;&gt; <br>&gt;&gt; +1. In general, I think we should allow implicit arguments, without requiring the closure to use all the implicit $n variables like we do today. These should all be valid:<br>&gt;&gt; <br>&gt;&gt; let _: () -&gt; () = {}<br>&gt;&gt; let _: (Int) -&gt; () = {}<br>&gt;&gt; let _: (Int, Int) -&gt; Int = { 5 }<br>&gt;&gt; let _: (Int, Int) -&gt; Int = { $0 }<br>&gt;&gt; let _: (Int, Int) -&gt; Int = { $1 }<br>&gt; <br>&gt; I agree, but I consider this to be an obvious bug in the compiler.  I don’t think it requires a proposal.<br></p><p>Sorry to find this thread late. I don’t think this is just a bug; it’s also a way to check that a parameter isn’t getting forgotten. For a single-expression closure that’s probably overkill, but maybe we’d keep the restriction for multi-statement closures?<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160519/fb6b2d92/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>Removing &quot;_ in&quot; from empty closures</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>May 20, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On May 19, 2016, at 4:13 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; On May 14, 2016, at 22:16, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On May 13, 2016, at 9:16 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; This encourages the use of empty closures over optional closures, which I think is open for debate. In general I try to avoid optionals when they can be precisely replaced with a non-optional value. Furthermore, most Cocoa completion handlers are not optional.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The alternative is to not do this, but encourage that any closure that could reasonably be empty should in fact be optional. I would then want Cocoa functions with void-returning closures to be imported as optionals to avoid &quot;{ _ in }&quot;.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; +1. In general, I think we should allow implicit arguments, without requiring the closure to use all the implicit $n variables like we do today. These should all be valid:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let _: () -&gt; () = {}<br>&gt;&gt;&gt; let _: (Int) -&gt; () = {}<br>&gt;&gt;&gt; let _: (Int, Int) -&gt; Int = { 5 }<br>&gt;&gt;&gt; let _: (Int, Int) -&gt; Int = { $0 }<br>&gt;&gt;&gt; let _: (Int, Int) -&gt; Int = { $1 }<br>&gt;&gt; <br>&gt;&gt; I agree, but I consider this to be an obvious bug in the compiler.  I don’t think it requires a proposal.<br>&gt; <br>&gt; Sorry to find this thread late. I don’t think this is just a bug; it’s also a way to check that a parameter isn’t getting forgotten. For a single-expression closure that’s probably overkill, but maybe we’d keep the restriction for multi-statement closures?<br></p><p>The bug we&#39;re talking about is that closures have to have a reference to $n when there are n+1 parameters.<br></p><p>John.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160520/c20705ce/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Removing &quot;_ in&quot; from empty closures</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>May 20, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On May 20, 2016, at 10:25, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; On May 19, 2016, at 4:13 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; On May 14, 2016, at 22:16, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On May 13, 2016, at 9:16 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; This encourages the use of empty closures over optional closures, which I think is open for debate. In general I try to avoid optionals when they can be precisely replaced with a non-optional value. Furthermore, most Cocoa completion handlers are not optional.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The alternative is to not do this, but encourage that any closure that could reasonably be empty should in fact be optional. I would then want Cocoa functions with void-returning closures to be imported as optionals to avoid &quot;{ _ in }&quot;.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; +1. In general, I think we should allow implicit arguments, without requiring the closure to use all the implicit $n variables like we do today. These should all be valid:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let _: () -&gt; () = {}<br>&gt;&gt;&gt;&gt; let _: (Int) -&gt; () = {}<br>&gt;&gt;&gt;&gt; let _: (Int, Int) -&gt; Int = { 5 }<br>&gt;&gt;&gt;&gt; let _: (Int, Int) -&gt; Int = { $0 }<br>&gt;&gt;&gt;&gt; let _: (Int, Int) -&gt; Int = { $1 }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I agree, but I consider this to be an obvious bug in the compiler.  I don’t think it requires a proposal.<br>&gt;&gt; <br>&gt;&gt; Sorry to find this thread late. I don’t think this is just a bug; it’s also a way to check that a parameter isn’t getting forgotten. For a single-expression closure that’s probably overkill, but maybe we’d keep the restriction for multi-statement closures?<br>&gt; <br>&gt; The bug we&#39;re talking about is that closures have to have a reference to $n when there are n+1 parameters.<br></p><p>Oh, I completely forgot that it’s only $n you have to reference, not $n-1 or anything else. So I guess it’s not quite serving the purpose I thought it was.<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160520/f3342575/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Removing &quot;_ in&quot; from empty closures</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>May 20, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On May 20, 2016, at 11:34 AM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On May 20, 2016, at 10:25, John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On May 19, 2016, at 4:13 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; On May 14, 2016, at 22:16, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 13, 2016, at 9:16 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; This encourages the use of empty closures over optional closures, which I think is open for debate. In general I try to avoid optionals when they can be precisely replaced with a non-optional value. Furthermore, most Cocoa completion handlers are not optional.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The alternative is to not do this, but encourage that any closure that could reasonably be empty should in fact be optional. I would then want Cocoa functions with void-returning closures to be imported as optionals to avoid &quot;{ _ in }&quot;.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; +1. In general, I think we should allow implicit arguments, without requiring the closure to use all the implicit $n variables like we do today. These should all be valid:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; let _: () -&gt; () = {}<br>&gt;&gt;&gt;&gt;&gt; let _: (Int) -&gt; () = {}<br>&gt;&gt;&gt;&gt;&gt; let _: (Int, Int) -&gt; Int = { 5 }<br>&gt;&gt;&gt;&gt;&gt; let _: (Int, Int) -&gt; Int = { $0 }<br>&gt;&gt;&gt;&gt;&gt; let _: (Int, Int) -&gt; Int = { $1 }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I agree, but I consider this to be an obvious bug in the compiler.  I don’t think it requires a proposal.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sorry to find this thread late. I don’t think this is just a bug; it’s also a way to check that a parameter isn’t getting forgotten. For a single-expression closure that’s probably overkill, but maybe we’d keep the restriction for multi-statement closures?<br>&gt;&gt; <br>&gt;&gt; The bug we&#39;re talking about is that closures have to have a reference to $n when there are n+1 parameters.<br>&gt; <br>&gt; Oh, I completely forgot that it’s only $n you have to reference, not $n-1 or anything else. So I guess it’s not quite serving the purpose I thought it was.<br>&gt; <br>&gt; Jordan<br></p><p>Who knew?  http://i.imgur.com/8ytNkn0.jpg &lt;http://i.imgur.com/8ytNkn0.jpg&gt; !<br></p><p>So anyway, how hard a problem is this to fix? And do you want me to submit the proposal as a PR or not?<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160520/44ec31d3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>Removing &quot;_ in&quot; from empty closures</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>May 20, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On May 20, 2016, at 10:37 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; On May 20, 2016, at 11:34 AM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; On May 20, 2016, at 10:25, John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 19, 2016, at 4:13 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; On May 14, 2016, at 22:16, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On May 13, 2016, at 9:16 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; This encourages the use of empty closures over optional closures, which I think is open for debate. In general I try to avoid optionals when they can be precisely replaced with a non-optional value. Furthermore, most Cocoa completion handlers are not optional.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; The alternative is to not do this, but encourage that any closure that could reasonably be empty should in fact be optional. I would then want Cocoa functions with void-returning closures to be imported as optionals to avoid &quot;{ _ in }&quot;.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; +1. In general, I think we should allow implicit arguments, without requiring the closure to use all the implicit $n variables like we do today. These should all be valid:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; let _: () -&gt; () = {}<br>&gt;&gt;&gt;&gt;&gt;&gt; let _: (Int) -&gt; () = {}<br>&gt;&gt;&gt;&gt;&gt;&gt; let _: (Int, Int) -&gt; Int = { 5 }<br>&gt;&gt;&gt;&gt;&gt;&gt; let _: (Int, Int) -&gt; Int = { $0 }<br>&gt;&gt;&gt;&gt;&gt;&gt; let _: (Int, Int) -&gt; Int = { $1 }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I agree, but I consider this to be an obvious bug in the compiler.  I don’t think it requires a proposal.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sorry to find this thread late. I don’t think this is just a bug; it’s also a way to check that a parameter isn’t getting forgotten. For a single-expression closure that’s probably overkill, but maybe we’d keep the restriction for multi-statement closures?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The bug we&#39;re talking about is that closures have to have a reference to $n when there are n+1 parameters.<br>&gt;&gt; <br>&gt;&gt; Oh, I completely forgot that it’s only $n you have to reference, not $n-1 or anything else. So I guess it’s not quite serving the purpose I thought it was.<br>&gt;&gt; <br>&gt;&gt; Jordan<br>&gt; <br>&gt; Who knew?  http://i.imgur.com/8ytNkn0.jpg &lt;http://i.imgur.com/8ytNkn0.jpg&gt; !<br>&gt; <br>&gt; So anyway, how hard a problem is this to fix? And do you want me to submit the proposal as a PR or not?<br></p><p>Not requiring you to refer to the last argument is a bug fix, and not requiring &quot;_ in&quot; will fall out from that fix.  I think that means there&#39;s nothing left to propose.  If anyone feels strongly that you should have to do *something* to ignore arguments, at least if you&#39;re ignoring all of them, that should be its own proposal.<br></p><p>John.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160520/043d526c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Removing &quot;_ in&quot; from empty closures</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>May 20, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On May 20, 2016, at 11:42 AM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; On May 20, 2016, at 10:37 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; On May 20, 2016, at 11:34 AM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; On May 20, 2016, at 10:25, John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On May 19, 2016, at 4:13 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; On May 14, 2016, at 22:16, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On May 13, 2016, at 9:16 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This encourages the use of empty closures over optional closures, which I think is open for debate. In general I try to avoid optionals when they can be precisely replaced with a non-optional value. Furthermore, most Cocoa completion handlers are not optional.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; The alternative is to not do this, but encourage that any closure that could reasonably be empty should in fact be optional. I would then want Cocoa functions with void-returning closures to be imported as optionals to avoid &quot;{ _ in }&quot;.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; +1. In general, I think we should allow implicit arguments, without requiring the closure to use all the implicit $n variables like we do today. These should all be valid:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; let _: () -&gt; () = {}<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; let _: (Int) -&gt; () = {}<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; let _: (Int, Int) -&gt; Int = { 5 }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; let _: (Int, Int) -&gt; Int = { $0 }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; let _: (Int, Int) -&gt; Int = { $1 }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I agree, but I consider this to be an obvious bug in the compiler.  I don’t think it requires a proposal.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Sorry to find this thread late. I don’t think this is just a bug; it’s also a way to check that a parameter isn’t getting forgotten. For a single-expression closure that’s probably overkill, but maybe we’d keep the restriction for multi-statement closures?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The bug we&#39;re talking about is that closures have to have a reference to $n when there are n+1 parameters.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Oh, I completely forgot that it’s only $n you have to reference, not $n-1 or anything else. So I guess it’s not quite serving the purpose I thought it was.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jordan<br>&gt;&gt; <br>&gt;&gt; Who knew?  http://i.imgur.com/8ytNkn0.jpg &lt;http://i.imgur.com/8ytNkn0.jpg&gt; !<br>&gt;&gt; <br>&gt;&gt; So anyway, how hard a problem is this to fix? And do you want me to submit the proposal as a PR or not?<br>&gt; <br>&gt; Not requiring you to refer to the last argument is a bug fix, and not requiring &quot;_ in&quot; will fall out from that fix.  I think that means there&#39;s nothing left to propose.  If anyone feels strongly that you should have to do *something* to ignore arguments, at least if you&#39;re ignoring all of them, that should be its own proposal.<br>&gt; <br>&gt; John.<br></p><p>History to date: <br></p><p>1. draft proposal:  https://gist.github.com/erica/3731e24fc252c8e66850e0e02f491281 &lt;https://gist.github.com/erica/3731e24fc252c8e66850e0e02f491281&gt;<br></p><p>2. bug report: https://bugs.swift.org/browse/SR-1528 &lt;https://bugs.swift.org/browse/SR-1528&gt; (although it seems the bug is wrongly named, and should be &quot;requires reference to ultimate anonymous argument, not all arguments)<br></p><p>I do not feel strongly that you should have to do *anything* to ignore arguments. It should be magical.<br></p><p>Thus, it sounds like I should kick back and cross this off my &quot;take action&quot; list. Right?<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160520/edb17df2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>Removing &quot;_ in&quot; from empty closures</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>May 20, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On May 20, 2016, at 10:46 AM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;&gt; On May 20, 2016, at 11:42 AM, John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On May 20, 2016, at 10:37 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; On May 20, 2016, at 11:34 AM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; On May 20, 2016, at 10:25, John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On May 19, 2016, at 4:13 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On May 14, 2016, at 22:16, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On May 13, 2016, at 9:16 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This encourages the use of empty closures over optional closures, which I think is open for debate. In general I try to avoid optionals when they can be precisely replaced with a non-optional value. Furthermore, most Cocoa completion handlers are not optional.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; The alternative is to not do this, but encourage that any closure that could reasonably be empty should in fact be optional. I would then want Cocoa functions with void-returning closures to be imported as optionals to avoid &quot;{ _ in }&quot;.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +1. In general, I think we should allow implicit arguments, without requiring the closure to use all the implicit $n variables like we do today. These should all be valid:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; let _: () -&gt; () = {}<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; let _: (Int) -&gt; () = {}<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; let _: (Int, Int) -&gt; Int = { 5 }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; let _: (Int, Int) -&gt; Int = { $0 }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; let _: (Int, Int) -&gt; Int = { $1 }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I agree, but I consider this to be an obvious bug in the compiler.  I don’t think it requires a proposal.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Sorry to find this thread late. I don’t think this is just a bug; it’s also a way to check that a parameter isn’t getting forgotten. For a single-expression closure that’s probably overkill, but maybe we’d keep the restriction for multi-statement closures?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The bug we&#39;re talking about is that closures have to have a reference to $n when there are n+1 parameters.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Oh, I completely forgot that it’s only $n you have to reference, not $n-1 or anything else. So I guess it’s not quite serving the purpose I thought it was.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Jordan<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Who knew?  http://i.imgur.com/8ytNkn0.jpg &lt;http://i.imgur.com/8ytNkn0.jpg&gt; !<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; So anyway, how hard a problem is this to fix? And do you want me to submit the proposal as a PR or not?<br>&gt;&gt; <br>&gt;&gt; Not requiring you to refer to the last argument is a bug fix, and not requiring &quot;_ in&quot; will fall out from that fix.  I think that means there&#39;s nothing left to propose.  If anyone feels strongly that you should have to do *something* to ignore arguments, at least if you&#39;re ignoring all of them, that should be its own proposal.<br>&gt;&gt; <br>&gt;&gt; John.<br>&gt; <br>&gt; History to date: <br>&gt; <br>&gt; 1. draft proposal:  https://gist.github.com/erica/3731e24fc252c8e66850e0e02f491281 &lt;https://gist.github.com/erica/3731e24fc252c8e66850e0e02f491281&gt;<br>&gt; <br>&gt; 2. bug report: https://bugs.swift.org/browse/SR-1528 &lt;https://bugs.swift.org/browse/SR-1528&gt; (although it seems the bug is wrongly named, and should be &quot;requires reference to ultimate anonymous argument, not all arguments)<br>&gt; <br>&gt; I do not feel strongly that you should have to do *anything* to ignore arguments. It should be magical.<br></p><p>Right, this was directed to other people.<br></p><p>&gt; Thus, it sounds like I should kick back and cross this off my &quot;take action&quot; list. Right?<br></p><p>Sounds good to me!<br></p><p>John.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160520/64d620ab/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Removing &quot;_ in&quot; from empty closures</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>May 13, 2016 at 11:00:00am</p></header><div class="content"><p>+1, provided it doesn&#39;t make life difficult for the compiler.<br></p><p>Sent from my iPhone<br></p><p>&gt; On May 13, 2016, at 11:13, Rob Napier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Currently if a closure takes a value, it requires &quot;_ in&quot; to note that the value is ignored. This makes sense in many cases, but creates a bit of a mess in the case of an empty, void-returning closure:<br>&gt; <br>&gt; doThing(withCompletion: { _ in })<br>&gt; <br>&gt; I&#39;d like to suggest that the compiler promote the empty closure literal {} to any void-returning closure type so that this could be written:<br>&gt; <br>&gt; doThing(withCompletion: {})<br>&gt; <br>&gt; This encourages the use of empty closures over optional closures, which I think is open for debate. In general I try to avoid optionals when they can be precisely replaced with a non-optional value. Furthermore, most Cocoa completion handlers are not optional.<br>&gt; <br>&gt; The alternative is to not do this, but encourage that any closure that could reasonably be empty should in fact be optional. I would then want Cocoa functions with void-returning closures to be imported as optionals to avoid &quot;{ _ in }&quot;.<br>&gt; <br>&gt; -Rob<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160513/4ef841dc/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
