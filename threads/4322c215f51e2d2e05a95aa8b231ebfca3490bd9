<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Accepted] SE-0140: Bridge Optional As Its Payload Or NSNull</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>September 12, 2016 at 03:00:00pm</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of SE-0140 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0140-bridge-optional-to-nsnull.md&gt; &quot;Bridge Optional As Its Payload Or NSNull” ran from September 2…8, 2016. The proposal is accepted with one modification (described below).<br></p><p>Reviews on this proposal were mixed, with many expressing significant concerns about the ability to place an optional value into an ‘Any’, particularly when the ‘Any’ comes from a nonnull-annotated Objective-C API:<br></p><p>	// Objective-C<br>	@interface MyClass : NSObject<br>	- (void)doSomething:(nonnull id)object;<br>	@end<br></p><p>	// Swift<br>	let stringOpt: String? = getSomeString()<br>	MyClass().doSomething(stringOpt)  // allowed; likely a programmer error<br></p><p>This behavior was introduced as part of id-as-Any bridging (SE-0116 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0116-id-as-any.md&gt;). As an amendment to SE-0140, Swift will produce a warning when an optional value is converted to a value of type Any, e.g.,<br></p><p>	MyClass().doSomething(stringOpt)  // warning: optional value of type ‘String?’ is converted to an ‘Any’<br>					  // note: use ‘!’ to force-unwrap the optional<br>					  // note: use ‘??’ to provide a default value if the optional is nil<br>					  // note: use ‘as Any’ to silence this warning<br></p><p>Such a warning will address most accidental injections of optional values into Any, and the core team felt that this addresses accidental boxing of optional values better than leaving the opaque object types to fail fast in Objective-C code that inspects them (e.g., see this message &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160905/026961.html&gt; for a negative review partly on these grounds).<br></p><p>To the main point of this proposal, which is to bridging to either the payload or NSNull, the core team felt that:<br></p><p>1) Bridging to the payload or NSNull brings to Objective-C code the same behavior that is already present in Swift’s type system, where an optional containing a payload can be dynamically casted to its payload type. For example, this is well-formed in Swift:<br></p><p>	 let optString: String? = &quot;hello&quot;<br>	 let anyValue: Any = optString<br>	 let stringValue: String = any as! stringValue   // downcast succeeds, produces a String<br></p><p>2) While NSNull is not widely used in Cocoa APIs, it is better to enable those APIs to work properly when nil optional values do get bridged than to have an opaque-to-Objective-C boxed type that does not work well with any Objective-C APIs.<br></p><p>Thank you to everyone who participated in the review!<br></p><p>	- Doug<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution-announce/attachments/20160912/43220bd9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f38cb038c3d9ae705c4db3b5b5272906?s=50"></div><header><strong>[swift-evolution-announce] [Accepted] SE-0140: Bridge Optional As Its Payload Or NSNull</strong> from <string>Greg Parker</string> &lt;gparker at apple.com&gt;<p>September 12, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Sep 12, 2016, at 3:39 PM, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt; <br>&gt; As an amendment to SE-0140, Swift will produce a warning when an optional value is converted to a value of type Any, e.g.,<br>&gt; <br>&gt; 	MyClass().doSomething(stringOpt)  // warning: optional value of type ‘String?’ is converted to an ‘Any’<br>&gt; 					  // note: use ‘!’ to force-unwrap the optional<br>&gt; 					  // note: use ‘??’ to provide a default value if the optional is nil<br>&gt; 					  // note: use ‘as Any’ to silence this warning<br>&gt; <br>&gt; Such a warning will address most accidental injections of optional values into Any, and the core team felt that this addresses accidental boxing of optional values better than leaving the opaque object types to fail fast in Objective-C code that inspects them (e.g., see this message &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160905/026961.html&gt; for a negative review partly on these grounds).<br></p><p>Is there a recommended pattern for defining a callee that actually wants to accept anything including optionals with no warning for the caller? <br></p><p><br>-- <br>Greg Parker     gparker at apple.com &lt;mailto:gparker at apple.com&gt;     Runtime Wrangler<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160912/1aef64ec/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0f5f87c6d6b2f41c3ac647171eb30e34?s=50"></div><header><strong>[swift-evolution-announce] [Accepted] SE-0140: Bridge Optional As Its Payload Or NSNull</strong> from <string>Jean-Daniel</string> &lt;dev at xenonium.com&gt;<p>September 13, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; Le 13 sept. 2016 à 01:48, Greg Parker via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; <br>&gt;&gt; On Sep 12, 2016, at 3:39 PM, Douglas Gregor &lt;dgregor at apple.com &lt;mailto:dgregor at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; As an amendment to SE-0140, Swift will produce a warning when an optional value is converted to a value of type Any, e.g.,<br>&gt;&gt; <br>&gt;&gt; 	MyClass().doSomething(stringOpt)  // warning: optional value of type ‘String?’ is converted to an ‘Any’<br>&gt;&gt; 					  // note: use ‘!’ to force-unwrap the optional<br>&gt;&gt; 					  // note: use ‘??’ to provide a default value if the optional is nil<br>&gt;&gt; 					  // note: use ‘as Any’ to silence this warning<br>&gt;&gt; <br>&gt;&gt; Such a warning will address most accidental injections of optional values into Any, and the core team felt that this addresses accidental boxing of optional values better than leaving the opaque object types to fail fast in Objective-C code that inspects them (e.g., see this message &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160905/026961.html&gt; for a negative review partly on these grounds).<br>&gt; <br>&gt; Is there a recommended pattern for defining a callee that actually wants to accept anything including optionals with no warning for the caller? <br>&gt; <br></p><p>A function that accept anything (including nil) shouldn’t be declared as nonnull. If I understand correctly, it should be enough to avoid warning.<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160913/01009a6c/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[swift-evolution-announce] [Accepted] SE-0140: Bridge Optional As Its Payload Or NSNull</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>September 14, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; On Sep 12, 2016, at 4:48 PM, Greg Parker via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Sep 12, 2016, at 3:39 PM, Douglas Gregor &lt;dgregor at apple.com &lt;mailto:dgregor at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; As an amendment to SE-0140, Swift will produce a warning when an optional value is converted to a value of type Any, e.g.,<br>&gt;&gt; <br>&gt;&gt; 	MyClass().doSomething(stringOpt)  // warning: optional value of type ‘String?’ is converted to an ‘Any’<br>&gt;&gt; 					  // note: use ‘!’ to force-unwrap the optional<br>&gt;&gt; 					  // note: use ‘??’ to provide a default value if the optional is nil<br>&gt;&gt; 					  // note: use ‘as Any’ to silence this warning<br>&gt;&gt; <br>&gt;&gt; Such a warning will address most accidental injections of optional values into Any, and the core team felt that this addresses accidental boxing of optional values better than leaving the opaque object types to fail fast in Objective-C code that inspects them (e.g., see this message &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160905/026961.html&gt; for a negative review partly on these grounds).<br>&gt; <br>&gt; Is there a recommended pattern for defining a callee that actually wants to accept anything including optionals with no warning for the caller? <br></p><p><br>One could write it as a generic function:<br></p><p>	func identity&lt;T&gt;(_ value: T) -&gt; T { … }<br></p><p><br>	- Doug<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160914/f6ffef52/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e01e37acbfad671da1b94a61cf819d82?s=50"></div><header><strong>[swift-evolution-announce] [Accepted] SE-0140: Bridge Optional As Its Payload Or NSNull</strong> from <string>Kenny Leung</string> &lt;kenny_leung at pobox.com&gt;<p>September 14, 2016 at 10:00:00am</p></header><div class="content"><p>Maybe that could be:<br></p><p>func funkyFunc(getDown :Any?)<br></p><p>-Kenny<br></p><p><br>&gt; On Sep 12, 2016, at 4:48 PM, Greg Parker via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Sep 12, 2016, at 3:39 PM, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; As an amendment to SE-0140, Swift will produce a warning when an optional value is converted to a value of type Any, e.g.,<br>&gt;&gt; <br>&gt;&gt; 	MyClass().doSomething(stringOpt)  // warning: optional value of type ‘String?’ is converted to an ‘Any’<br>&gt;&gt; 					  // note: use ‘!’ to force-unwrap the optional<br>&gt;&gt; 					  // note: use ‘??’ to provide a default value if the optional is nil<br>&gt;&gt; 					  // note: use ‘as Any’ to silence this warning<br>&gt;&gt; <br>&gt;&gt; Such a warning will address most accidental injections of optional values into Any, and the core team felt that this addresses accidental boxing of optional values better than leaving the opaque object types to fail fast in Objective-C code that inspects them (e.g., see this message for a negative review partly on these grounds).<br>&gt; <br>&gt; Is there a recommended pattern for defining a callee that actually wants to accept anything including optionals with no warning for the caller? <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Greg Parker     gparker at apple.com     Runtime Wrangler<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
